; ModuleID = 'dcraw.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.decode = type { [2 x %struct.decode*], i32 }
%struct.anon = type { i32, [12 x i8], [15 x i8] }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, float }
%struct.anon.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.3 = type { i8*, i16, i16, [12 x i16] }
%struct.anon.4 = type { i32, [12 x i8], [19 x i8], i8 }
%union.anon = type { i32 }
%union.anon.0 = type { double }
%struct.jhead = type { i32, i32, i32, i32, i32, i32, i32, [6 x i32], [6 x %struct.decode*], i16* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.tiff_hdr = type { i16, i16, i32, i16, i16, [23 x %struct.tiff_tag], i32, i16, i16, [4 x %struct.tiff_tag], i16, i16, [10 x %struct.tiff_tag], [4 x i16], [10 x i32], [26 x i32], [512 x i8], [64 x i8], [64 x i8], [32 x i8], [20 x i8], [64 x i8] }
%struct.tiff_tag = type { i16, i16, i32, %union.anon.5 }
%union.anon.5 = type { i32 }
%struct.utimbuf = type { i64, i64 }

@shot_select = global i32 0, align 4
@multi_out = global i32 0, align 4
@aber = global [4 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@gamm = global [5 x double] [double 4.500000e-01, double 4.500000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00], align 16
@bright = global float 1.000000e+00, align 4
@user_mul = global [4 x float] zeroinitializer, align 16
@threshold = global float 0.000000e+00, align 4
@half_size = global i32 0, align 4
@four_color_rgb = global i32 0, align 4
@document_mode = global i32 0, align 4
@highlight = global i32 0, align 4
@verbose = global i32 0, align 4
@use_auto_wb = global i32 0, align 4
@use_camera_wb = global i32 0, align 4
@use_camera_matrix = global i32 -1, align 4
@output_color = global i32 1, align 4
@output_bps = global i32 8, align 4
@output_tiff = global i32 0, align 4
@med_passes = global i32 0, align 4
@no_auto_bright = global i32 0, align 4
@greybox = global [4 x i32] [i32 0, i32 0, i32 -1, i32 -1], align 16
@xyz_rgb = constant [3 x [3 x double]] [[3 x double] [double 4.124530e-01, double 3.575800e-01, double 1.804230e-01], [3 x double] [double 2.126710e-01, double 7.151600e-01, double 7.216900e-02], [3 x double] [double 1.933400e-02, double 1.191930e-01, double 9.502270e-01]], align 16
@d65_white = constant [3 x float] [float 0x3FEE6A22C0000000, float 1.000000e+00, float 0x3FF16B8960000000], align 4
@fc.filter = internal constant [16 x [16 x i8]] [[16 x i8] c"\02\01\01\03\02\03\02\00\03\02\03\00\01\02\01\00", [16 x i8] c"\00\03\00\02\00\01\03\01\00\01\01\02\00\03\03\02", [16 x i8] c"\02\03\03\02\03\01\01\03\03\01\02\01\02\00\00\03", [16 x i8] c"\00\01\00\01\00\02\00\02\02\00\03\00\01\03\02\01", [16 x i8] c"\03\01\01\02\00\01\00\02\01\03\01\03\00\01\03\00", [16 x i8] c"\02\00\00\03\03\02\03\01\02\00\02\00\03\02\02\01", [16 x i8] c"\02\03\03\01\02\01\02\01\02\01\01\02\03\00\00\01", [16 x i8] c"\01\00\00\02\03\00\00\03\00\03\00\03\02\01\02\03", [16 x i8] c"\02\03\03\01\01\02\01\00\03\02\03\00\02\03\01\03", [16 x i8] c"\01\00\02\00\03\00\03\02\00\01\01\02\00\01\00\02", [16 x i8] c"\00\01\01\03\03\02\02\01\01\03\03\00\02\01\03\02", [16 x i8] c"\02\03\02\00\00\01\03\00\02\00\01\02\03\00\01\00", [16 x i8] c"\01\03\01\02\03\02\03\02\00\02\00\01\01\00\03\00", [16 x i8] c"\00\02\00\03\01\00\00\01\01\03\03\02\03\02\02\01", [16 x i8] c"\02\01\03\02\03\01\02\01\00\03\00\02\00\02\00\02", [16 x i8] c"\00\03\01\00\00\02\00\03\02\01\03\01\01\03\01\03"], align 16
@filters = common global i32 0, align 4
@left_margin = common global i16 0, align 2
@top_margin = common global i16 0, align 2
@stderr = external global %struct._IO_FILE*
@.str = private unnamed_addr constant [25 x i8] c"%s: Out of memory in %s\0A\00", align 1
@ifname = common global i8* null, align 8
@failure = common global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16
@data_error = common global i32 0, align 4
@.str1 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@ifp = common global %struct._IO_FILE* null, align 8
@.str2 = private unnamed_addr constant [24 x i8] c"Unexpected end of file\0A\00", align 1
@.str3 = private unnamed_addr constant [26 x i8] c"Corrupt data near 0x%llx\0A\00", align 1
@order = common global i16 0, align 2
@get2.str = private unnamed_addr constant [2 x i8] c"\FF\FF", align 1
@get4.str = private unnamed_addr constant [4 x i8] c"\FF\FF\FF\FF", align 1
@raw_width = common global i16 0, align 2
@width = common global i16 0, align 2
@height = common global i16 0, align 2
@shrink = common global i16 0, align 2
@iwidth = common global i16 0, align 2
@image = common global [4 x i16]* null, align 8
@black = common global i32 0, align 4
@canon_600_fixed_wb.mul = internal constant [4 x [5 x i16]] [[5 x i16] [i16 667, i16 358, i16 397, i16 565, i16 452], [5 x i16] [i16 731, i16 390, i16 367, i16 499, i16 517], [5 x i16] [i16 1119, i16 396, i16 348, i16 448, i16 537], [5 x i16] [i16 1399, i16 485, i16 431, i16 508, i16 688]], align 16
@pre_mul = common global [4 x float] zeroinitializer, align 16
@flash_used = common global float 0.000000e+00, align 4
@canon_ev = common global float 0.000000e+00, align 4
@canon_600_coeff.table = internal constant [6 x [12 x i16]] [[12 x i16] [i16 -190, i16 702, i16 -1878, i16 2390, i16 1861, i16 -1349, i16 905, i16 -393, i16 -432, i16 944, i16 2617, i16 -2105], [12 x i16] [i16 -1203, i16 1715, i16 -1136, i16 1648, i16 1388, i16 -876, i16 267, i16 245, i16 -1641, i16 2153, i16 3921, i16 -3409], [12 x i16] [i16 -615, i16 1127, i16 -1563, i16 2075, i16 1437, i16 -925, i16 509, i16 3, i16 -756, i16 1268, i16 2519, i16 -2007], [12 x i16] [i16 -190, i16 702, i16 -1886, i16 2398, i16 2153, i16 -1641, i16 763, i16 -251, i16 -452, i16 964, i16 3040, i16 -2528], [12 x i16] [i16 -190, i16 702, i16 -1878, i16 2390, i16 1861, i16 -1349, i16 905, i16 -393, i16 -432, i16 944, i16 2617, i16 -2105], [12 x i16] [i16 -807, i16 1319, i16 -1785, i16 2297, i16 1388, i16 -876, i16 769, i16 -257, i16 -230, i16 742, i16 2067, i16 -1555]], align 16
@raw_color = common global i32 0, align 4
@colors = common global i32 0, align 4
@rgb_cam = common global [3 x [4 x float]] zeroinitializer, align 16
@canon_600_load_raw.mul = internal constant [4 x [2 x i16]] [[2 x i16] [i16 1141, i16 1145], [2 x i16] [i16 1128, i16 1109], [2 x i16] [i16 1178, i16 1149], [2 x i16] [i16 1128, i16 1109]], align 16
@maximum = common global i32 0, align 4
@raw_height = common global i16 0, align 2
@getbits.bitbuf = internal global i32 0, align 4
@getbits.vbits = internal global i32 0, align 4
@getbits.reset = internal global i32 0, align 4
@zero_after_ff = common global i32 0, align 4
@first_decode = common global [2048 x %struct.decode] zeroinitializer, align 16
@free_decode = common global %struct.decode* null, align 8
@make_decoder.leaf = internal global i32 0, align 4
@.str4 = private unnamed_addr constant [28 x i8] c"%s: decoder table overflow\0A\00", align 1
@crw_init_tables.first_tree = internal constant [3 x [29 x i8]] [[29 x i8] c"\00\01\04\02\03\01\02\00\00\00\00\00\00\00\00\00\04\03\05\06\02\07\01\08\09\00\0A\0B\FF", [29 x i8] c"\00\02\02\03\01\01\01\01\02\00\00\00\00\00\00\00\03\02\04\01\05\00\06\07\09\08\0A\0B\FF", [29 x i8] c"\00\00\06\03\01\01\02\00\00\00\00\00\00\00\00\00\06\05\07\04\08\03\09\02\00\0A\01\0B\FF"], align 16
@crw_init_tables.second_tree = internal constant [3 x [180 x i8]] [[180 x i8] c"\00\02\02\02\01\04\02\01\02\05\01\01\00\00\00\8B\03\04\02\05\01\06\07\08\12\13\11\14\09\15\22\00!\16\0A\F0#\17$12\18\193%A4B5Q678)y&\1A9VW('RUXCvYwTa\F9qxu\96\97I\B7S\D7t\B6\98GH\95i\99\91\FA\B8h\B5\B9\D6\F7\D8gFE\94\89\F8\81\D5\F6\B4\88\B1*Dr\D9\87f\D4\F5:\A7s\A9\A8\86b\C7e\C8\C9\A1\F4\D1\E9Z\92\85\A6\E7\93\E8\C1\C6zd\E1Jj\E6\B3\F1\D3\A5\8A\B2\9A\BA\84\A4c\E5\C5\F3\D2\C4\82\AA\DA\E4\F2\CA\83\A3\A2\C3\EA\C2\E2\E3\FF\FF", [180 x i8] c"\00\02\02\01\04\01\04\01\03\03\01\00\00\00\00\8C\02\03\01\04\05\12\11\06\13\07\08\14\22\09!\00#\1512\0A\16\F0$3AB\19\17%\18Q4CR)5a9qb6S&8\1A7\81'\91yUE(rY\A1\B1DiTX\D1\FAW\E1\F1\B9IGcj\F9VF\A8*Jx\99:ut\86e\C1v\B6\96\D6\89\85\C9\F5\95\B4\C7\F7\8A\97\B8s\B7\D8\D9\87\A7zH\82\84\EA\F4\A6\C5Z\94\A4\C6\92\C3h\B5\C8\E4\E5\E6\E9\A2\A3\E3\C2fg\93\AA\D4\D5\E7\F8\88\9A\D7w\C4d\E2\98\A5\CA\DA\E8\F3\F6\A9\B2\B3\F2\D2\83\BA\D3\FF\FF", [180 x i8] c"\00\00\06\02\01\03\03\02\05\01\02\02\08\0A\00u\04\05\03\06\02\07\01\08\09\12\13\14\11\15\0A\16\17\F0\00\22!\18#\19$21%3874569yWXY(Vx'A)w&Bv\99\1AU\98\97\F9HT\96\89G\B7I\FAuh\B6gi\B9\B8\D8R\D7\88\B5tQF\D9\F8:\D6\87Ez\95\D5\F6\86\B4\A9\94S*\A8C\F5\F7\D4f\A7ZD\8A\C9\E8\C8\E7\9AjsJa\C7\F4\C6e\E9r\E6q\91\93\A6\DA\92\85b\F3\C5\B2\A4\84\BAd\A5\B3\D2\81\E5\D3\AA\C4\CA\F2\B1\E4\D1\83c\EA\C3\E2\82\F1\A3\C2\A1\C1\E3\A2\E1\FF\FF"], align 16
@second_decode = common global %struct.decode* null, align 8
@tiff_compress = common global i32 0, align 4
@.str5 = private unnamed_addr constant [28 x i8] c"canon_compressed_load_raw()\00", align 1
@dng_version = common global i32 0, align 4
@.str6 = private unnamed_addr constant [14 x i8] c"ljpeg_start()\00", align 1
@curve = common global [16385 x i16] zeroinitializer, align 16
@cr2_slice = common global [3 x i16] zeroinitializer, align 2
@make = common global [64 x i8] zeroinitializer, align 16
@.str7 = private unnamed_addr constant [6 x i8] c"KODAK\00", align 1
@model2 = common global [64 x i8] zeroinitializer, align 16
@.str8 = private unnamed_addr constant [9 x i8] c"%d.%d.%d\00", align 1
@unique_id = common global i32 0, align 4
@sraw_mul = common global [4 x i16] zeroinitializer, align 2
@is_raw = common global i32 0, align 4
@fuji_width = common global i16 0, align 2
@tiff_samples = common global i32 0, align 4
@tile_length = common global i32 0, align 4
@tile_width = common global i32 0, align 4
@.str9 = private unnamed_addr constant [24 x i8] c"adobe_dng_load_raw_nc()\00", align 1
@tiff_bps = common global i32 0, align 4
@nikon_compressed_load_raw.nikon_tree = internal constant [6 x [32 x i8]] [[32 x i8] c"\00\01\05\01\01\01\01\01\01\02\00\00\00\00\00\00\05\04\03\06\02\07\01\00\08\09\0B\0A\0C\00\00\00", [32 x i8] c"\00\01\05\01\01\01\01\01\01\02\00\00\00\00\00\009Z8'\16\05\04\03\02\01\00\0B\0C\0C\00\00", [32 x i8] c"\00\01\04\02\03\01\02\00\00\00\00\00\00\00\00\00\05\04\06\03\07\02\08\01\09\00\0A\0B\0C\00\00\00", [32 x i8] c"\00\01\04\03\01\01\01\01\01\02\00\00\00\00\00\00\05\06\04\07\08\03\09\02\01\00\0A\0B\0C\0D\0E\00", [32 x i8] c"\00\01\05\01\01\01\01\01\01\01\02\00\00\00\00\00\08\5CK:)\07\06\05\04\03\02\01\00\0D\0E\00", [32 x i8] c"\00\01\04\02\02\03\01\02\00\00\00\00\00\00\00\00\07\06\08\05\09\04\0A\03\0B\0C\02\00\01\0D\0E\00"], align 16
@meta_offset = common global i64 0, align 8
@data_offset = common global i64 0, align 8
@nikon_e995.often = internal constant [4 x i8] c"\00U\AA\FF", align 1
@nikon_3700.table = internal constant [4 x %struct.anon] [%struct.anon { i32 0, [12 x i8] c"PENTAX\00\00\00\00\00\00", [15 x i8] c"Optio 33WR\00\00\00\00\00" }, %struct.anon { i32 3, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [15 x i8] c"E3200\00\00\00\00\00\00\00\00\00\00" }, %struct.anon { i32 50, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [15 x i8] c"E3700\00\00\00\00\00\00\00\00\00\00" }, %struct.anon { i32 51, [12 x i8] c"OLYMPUS\00\00\00\00\00", [15 x i8] c"C740UZ\00\00\00\00\00\00\00\00\00" }], align 16
@model = common global [64 x i8] zeroinitializer, align 16
@fuji_layout = common global i32 0, align 4
@.str10 = private unnamed_addr constant [16 x i8] c"fuji_load_raw()\00", align 1
@thumb_width = common global i16 0, align 2
@thumb_height = common global i16 0, align 2
@thumb_length = common global i32 0, align 4
@.str11 = private unnamed_addr constant [12 x i8] c"ppm_thumb()\00", align 1
@.str12 = private unnamed_addr constant [14 x i8] c"P6\0A%d %d\0A255\0A\00", align 1
@layer_thumb.map = private unnamed_addr constant [2 x [4 x i8]] [[4 x i8] c"012\00", [4 x i8] c"102\00"], align 1
@thumb_misc = common global i32 0, align 4
@.str13 = private unnamed_addr constant [14 x i8] c"layer_thumb()\00", align 1
@.str14 = private unnamed_addr constant [15 x i8] c"P%d\0A%d %d\0A255\0A\00", align 1
@.str15 = private unnamed_addr constant [15 x i8] c"rollei_thumb()\00", align 1
@.str16 = private unnamed_addr constant [23 x i8] c"phase_one_flat_field()\00", align 1
@phase_one_correct.dir = internal constant [12 x [2 x i8]] [[2 x i8] c"\FF\FF", [2 x i8] c"\FF\01", [2 x i8] c"\01\FF", [2 x i8] c"\01\01", [2 x i8] c"\FE\00", [2 x i8] c"\00\FE", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\FE\FE", [2 x i8] c"\FE\02", [2 x i8] c"\02\FE", [2 x i8] c"\02\02"], align 16
@meta_length = common global i32 0, align 4
@.str17 = private unnamed_addr constant [25 x i8] c"Phase One correction...\0A\00", align 1
@ph1 = common global %struct.anon.1 zeroinitializer, align 4
@.str18 = private unnamed_addr constant [20 x i8] c"phase_one_correct()\00", align 1
@.str19 = private unnamed_addr constant [21 x i8] c"phase_one_load_raw()\00", align 1
@ph1_bits.bitbuf = internal global i64 0, align 8
@ph1_bits.vbits = internal global i32 0, align 4
@phase_one_load_raw_c.length = internal constant [10 x i32] [i32 8, i32 7, i32 6, i32 9, i32 11, i32 10, i32 5, i32 12, i32 14, i32 13], align 16
@.str20 = private unnamed_addr constant [23 x i8] c"phase_one_load_raw_c()\00", align 1
@strip_offset = common global i64 0, align 8
@.str21 = private unnamed_addr constant [20 x i8] c"leaf_hdr_load_raw()\00", align 1
@iheight = common global i16 0, align 2
@.str22 = private unnamed_addr constant [23 x i8] c"sinar_4shot_load_raw()\00", align 1
@load_flags = common global i32 0, align 4
@.str23 = private unnamed_addr constant [8 x i8] c"OLYMPUS\00", align 1
@.str24 = private unnamed_addr constant [20 x i8] c"unpacked_load_raw()\00", align 1
@.str25 = private unnamed_addr constant [17 x i8] c"nokia_load_raw()\00", align 1
@pana_bits.buf = internal global [16384 x i8] zeroinitializer, align 16
@pana_bits.vbits = internal global i32 0, align 4
@.str26 = private unnamed_addr constant [24 x i8] c"olympus_e300_load_raw()\00", align 1
@quicktake_100_load_raw.gstep = internal constant [16 x i16] [i16 -89, i16 -60, i16 -44, i16 -32, i16 -22, i16 -15, i16 -8, i16 -2, i16 2, i16 8, i16 15, i16 22, i16 32, i16 44, i16 60, i16 89], align 16
@quicktake_100_load_raw.rstep = internal constant [6 x [4 x i16]] [[4 x i16] [i16 -3, i16 -1, i16 1, i16 3], [4 x i16] [i16 -5, i16 -1, i16 1, i16 5], [4 x i16] [i16 -8, i16 -2, i16 2, i16 8], [4 x i16] [i16 -13, i16 -3, i16 3, i16 13], [4 x i16] [i16 -19, i16 -4, i16 4, i16 19], [4 x i16] [i16 -28, i16 -6, i16 6, i16 28]], align 16
@quicktake_100_load_raw.curve = internal constant [256 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 86, i16 88, i16 90, i16 92, i16 94, i16 97, i16 99, i16 101, i16 103, i16 105, i16 107, i16 110, i16 112, i16 114, i16 116, i16 118, i16 120, i16 123, i16 125, i16 127, i16 129, i16 131, i16 134, i16 136, i16 138, i16 140, i16 142, i16 144, i16 147, i16 149, i16 151, i16 153, i16 155, i16 158, i16 160, i16 162, i16 164, i16 166, i16 168, i16 171, i16 173, i16 175, i16 177, i16 179, i16 181, i16 184, i16 186, i16 188, i16 190, i16 192, i16 195, i16 197, i16 199, i16 201, i16 203, i16 205, i16 208, i16 210, i16 212, i16 214, i16 216, i16 218, i16 221, i16 223, i16 226, i16 230, i16 235, i16 239, i16 244, i16 248, i16 252, i16 257, i16 261, i16 265, i16 270, i16 274, i16 278, i16 283, i16 287, i16 291, i16 296, i16 300, i16 305, i16 309, i16 313, i16 318, i16 322, i16 326, i16 331, i16 335, i16 339, i16 344, i16 348, i16 352, i16 357, i16 361, i16 365, i16 370, i16 374, i16 379, i16 383, i16 387, i16 392, i16 396, i16 400, i16 405, i16 409, i16 413, i16 418, i16 422, i16 426, i16 431, i16 435, i16 440, i16 444, i16 448, i16 453, i16 457, i16 461, i16 466, i16 470, i16 474, i16 479, i16 483, i16 487, i16 492, i16 496, i16 500, i16 508, i16 519, i16 531, i16 542, i16 553, i16 564, i16 575, i16 587, i16 598, i16 609, i16 620, i16 631, i16 643, i16 654, i16 665, i16 676, i16 687, i16 698, i16 710, i16 721, i16 732, i16 743, i16 754, i16 766, i16 777, i16 788, i16 799, i16 810, i16 822, i16 833, i16 844, i16 855, i16 866, i16 878, i16 889, i16 900, i16 911, i16 922, i16 933, i16 945, i16 956, i16 967, i16 978, i16 989, i16 1001, i16 1012, i16 1023], align 16
@radc_token.dstart = internal global [18 x %struct.decode*] zeroinitializer, align 16
@radc_token.dindex = internal global %struct.decode* null, align 8
@radc_token.s = internal global i32* null, align 8
@radc_token.source = internal constant [260 x i32] [i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 4, i32 2, i32 5, i32 7, i32 6, i32 5, i32 7, i32 6, i32 7, i32 8, i32 1, i32 0, i32 2, i32 1, i32 3, i32 3, i32 4, i32 4, i32 5, i32 2, i32 6, i32 7, i32 7, i32 6, i32 8, i32 5, i32 8, i32 8, i32 2, i32 1, i32 2, i32 3, i32 3, i32 0, i32 3, i32 2, i32 3, i32 4, i32 4, i32 6, i32 5, i32 5, i32 6, i32 7, i32 6, i32 8, i32 2, i32 0, i32 2, i32 1, i32 2, i32 3, i32 3, i32 2, i32 4, i32 4, i32 5, i32 6, i32 6, i32 7, i32 7, i32 5, i32 7, i32 8, i32 2, i32 1, i32 2, i32 4, i32 3, i32 0, i32 3, i32 2, i32 3, i32 3, i32 4, i32 7, i32 5, i32 5, i32 6, i32 6, i32 6, i32 8, i32 2, i32 3, i32 3, i32 1, i32 3, i32 2, i32 3, i32 4, i32 3, i32 5, i32 3, i32 6, i32 4, i32 7, i32 5, i32 0, i32 5, i32 8, i32 2, i32 3, i32 2, i32 6, i32 3, i32 0, i32 3, i32 1, i32 4, i32 4, i32 4, i32 5, i32 4, i32 7, i32 5, i32 2, i32 5, i32 8, i32 2, i32 4, i32 2, i32 7, i32 3, i32 3, i32 3, i32 6, i32 4, i32 1, i32 4, i32 2, i32 4, i32 5, i32 5, i32 0, i32 5, i32 8, i32 2, i32 6, i32 3, i32 1, i32 3, i32 3, i32 3, i32 5, i32 3, i32 7, i32 3, i32 8, i32 4, i32 0, i32 5, i32 2, i32 5, i32 4, i32 2, i32 0, i32 2, i32 1, i32 3, i32 2, i32 3, i32 3, i32 4, i32 4, i32 4, i32 5, i32 5, i32 6, i32 5, i32 7, i32 4, i32 8, i32 1, i32 0, i32 2, i32 2, i32 2, i32 -2, i32 1, i32 -3, i32 1, i32 3, i32 2, i32 -17, i32 2, i32 -5, i32 2, i32 5, i32 2, i32 17, i32 2, i32 -7, i32 2, i32 2, i32 2, i32 9, i32 2, i32 18, i32 2, i32 -18, i32 2, i32 -9, i32 2, i32 -2, i32 2, i32 7, i32 2, i32 -28, i32 2, i32 28, i32 3, i32 -49, i32 3, i32 -9, i32 3, i32 9, i32 4, i32 49, i32 5, i32 -79, i32 5, i32 79, i32 2, i32 -1, i32 2, i32 13, i32 2, i32 26, i32 3, i32 39, i32 4, i32 -16, i32 5, i32 55, i32 6, i32 -37, i32 6, i32 76, i32 2, i32 -26, i32 2, i32 -13, i32 2, i32 1, i32 3, i32 -39, i32 4, i32 16, i32 5, i32 -55, i32 6, i32 -76, i32 6, i32 37], align 16
@kodak_cbpp = common global i32 0, align 4
@kodak_radc_load_raw.last = private unnamed_addr constant [3 x i16] [i16 16, i16 16, i16 16], align 2
@use_gamma = common global i32 0, align 4
@kodak_dc120_load_raw.mul = internal constant [4 x i32] [i32 162, i32 192, i32 187, i32 92], align 16
@kodak_dc120_load_raw.add = internal constant [4 x i32] [i32 0, i32 636, i32 424, i32 212], align 16
@.str27 = private unnamed_addr constant [21 x i8] c"eight_bit_load_raw()\00", align 1
@.str28 = private unnamed_addr constant [4 x i8] c"DC2\00", align 1
@.str29 = private unnamed_addr constant [22 x i8] c"kodak_yrgb_load_raw()\00", align 1
@kodak_262_load_raw.kodak_tree = internal constant [2 x [26 x i8]] [[26 x i8] c"\00\01\05\01\01\02\00\00\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09", [26 x i8] c"\00\03\01\01\01\01\01\02\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09"], align 16
@.str30 = private unnamed_addr constant [21 x i8] c"kodak_262_load_raw()\00", align 1
@sony_decrypt.pad = internal global [128 x i32] zeroinitializer, align 16
@sony_decrypt.p = internal global i32 0, align 4
@.str31 = private unnamed_addr constant [16 x i8] c"sony_load_raw()\00", align 1
@.str32 = private unnamed_addr constant [21 x i8] c"sony_arw2_load_raw()\00", align 1
@smal_decode_segment.hist = private unnamed_addr constant [3 x [13 x i8]] [[13 x i8] c"\07\07\00\00?7/'\1F\17\0F\07\00", [13 x i8] c"\07\07\00\00?7/'\1F\17\0F\07\00", [13 x i8] c"\03\03\00\00?/\1F\0F\00\00\00\00\00"], align 16
@foveon_decoder.huff = internal global [1024 x i32] zeroinitializer, align 16
@.str33 = private unnamed_addr constant [15 x i8] c"foveon_thumb()\00", align 1
@meta_data = common global i8* null, align 8
@.str34 = private unnamed_addr constant [4 x i8] c"CMb\00", align 1
@.str35 = private unnamed_addr constant [21 x i8] c"foveon_camf_matrix()\00", align 1
@.str36 = private unnamed_addr constant [28 x i8] c"%s: \22%s\22 matrix not found!\0A\00", align 1
@.str37 = private unnamed_addr constant [20 x i8] c"foveon_make_curve()\00", align 1
@foveon_interpolate.hood = internal constant [16 x i16] [i16 -1, i16 -1, i16 -1, i16 0, i16 -1, i16 1, i16 0, i16 -1, i16 0, i16 1, i16 1, i16 -1, i16 1, i16 0, i16 1, i16 1], align 16
@.str38 = private unnamed_addr constant [25 x i8] c"Foveon interpolation...\0A\00", align 1
@.str39 = private unnamed_addr constant [19 x i8] c"DarkShieldColRange\00", align 1
@.str40 = private unnamed_addr constant [15 x i8] c"PostPolyMatrix\00", align 1
@.str41 = private unnamed_addr constant [16 x i8] c"SaturationLevel\00", align 1
@.str42 = private unnamed_addr constant [14 x i8] c"KeepImageArea\00", align 1
@.str43 = private unnamed_addr constant [16 x i8] c"ActiveImageArea\00", align 1
@.str44 = private unnamed_addr constant [9 x i8] c"ChromaDQ\00", align 1
@.str45 = private unnamed_addr constant [14 x i8] c"IncludeBlocks\00", align 1
@.str46 = private unnamed_addr constant [8 x i8] c"ColorDQ\00", align 1
@.str47 = private unnamed_addr constant [14 x i8] c"ColorDQCamRGB\00", align 1
@.str48 = private unnamed_addr constant [13 x i8] c"ColumnFilter\00", align 1
@.str49 = private unnamed_addr constant [10 x i8] c"DarkDrift\00", align 1
@.str50 = private unnamed_addr constant [17 x i8] c"DarkShieldBottom\00", align 1
@.str51 = private unnamed_addr constant [14 x i8] c"DarkShieldTop\00", align 1
@.str52 = private unnamed_addr constant [24 x i8] c"WhiteBalanceIlluminants\00", align 1
@.str53 = private unnamed_addr constant [32 x i8] c"%s: Invalid white balance \22%s\22\0A\00", align 1
@.str54 = private unnamed_addr constant [24 x i8] c"WhiteBalanceCorrections\00", align 1
@.str55 = private unnamed_addr constant [13 x i8] c"%sRGBNeutral\00", align 1
@.str56 = private unnamed_addr constant [12 x i8] c"SpatialGain\00", align 1
@.str57 = private unnamed_addr constant [10 x i8] c"BadPixels\00", align 1
@.str58 = private unnamed_addr constant [21 x i8] c"foveon_interpolate()\00", align 1
@.str59 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str60 = private unnamed_addr constant [12 x i8] c"/.badpixels\00", align 1
@.str61 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@timestamp = common global i64 0, align 8
@.str62 = private unnamed_addr constant [22 x i8] c"Fixed dead pixels at:\00", align 1
@.str63 = private unnamed_addr constant [7 x i8] c" %d,%d\00", align 1
@.str64 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str65 = private unnamed_addr constant [29 x i8] c"%s is not a valid PGM file!\0A\00", align 1
@.str66 = private unnamed_addr constant [30 x i8] c"%s has the wrong dimensions!\0A\00", align 1
@.str67 = private unnamed_addr constant [11 x i8] c"subtract()\00", align 1
@wavelet_denoise.noise = internal constant [8 x float] [float 0x3FE99B3D00000000, float 0x3FD1810620000000, float 0x3FBEC56D60000000, float 0x3FADF3B640000000, float 0x3F9DCC6400000000, float 0x3F8F212D80000000, float 0x3F80624DE0000000, float 0x3F7205BC00000000], align 16
@.str68 = private unnamed_addr constant [22 x i8] c"Wavelet denoising...\0A\00", align 1
@.str69 = private unnamed_addr constant [18 x i8] c"wavelet_denoise()\00", align 1
@cam_mul = common global [4 x float] zeroinitializer, align 16
@white = common global [8 x [8 x i16]] zeroinitializer, align 16
@.str70 = private unnamed_addr constant [38 x i8] c"%s: Cannot use camera white balance.\0A\00", align 1
@.str71 = private unnamed_addr constant [57 x i8] c"Scaling with darkness %d, saturation %d, and\0Amultipliers\00", align 1
@.str72 = private unnamed_addr constant [4 x i8] c" %f\00", align 1
@.str73 = private unnamed_addr constant [36 x i8] c"Correcting chromatic aberration...\0A\00", align 1
@.str74 = private unnamed_addr constant [15 x i8] c"scale_colors()\00", align 1
@.str75 = private unnamed_addr constant [18 x i8] c"pre_interpolate()\00", align 1
@mix_green = common global i32 0, align 4
@.str76 = private unnamed_addr constant [27 x i8] c"Bilinear interpolation...\0A\00", align 1
@vng_interpolate.cp = internal global i8* null, align 8
@vng_interpolate.terms = internal constant [384 x i8] c"\FE\FE\00\FF\00\01\FE\FE\00\00\01\01\FE\FF\FF\00\00\01\FE\FF\00\FF\00\02\FE\FF\00\00\00\03\FE\FF\00\01\01\01\FE\00\00\FF\00\06\FE\00\00\00\01\02\FE\00\00\01\00\03\FE\01\FF\00\00\04\FE\01\00\FF\01\04\FE\01\00\00\00\06\FE\01\00\01\00\02\FE\02\00\00\01\04\FE\02\00\01\00\04\FF\FE\FF\00\00\80\FF\FE\00\FF\00\01\FF\FE\01\FF\00\01\FF\FE\01\00\01\01\FF\FF\FF\01\00\88\FF\FF\01\FE\00@\FF\FF\01\FF\00\22\FF\FF\01\00\003\FF\FF\01\01\01\11\FF\00\FF\02\00\08\FF\00\00\FF\00D\FF\00\00\01\00\11\FF\00\01\FE\01@\FF\00\01\FF\00f\FF\00\01\00\01\22\FF\00\01\01\003\FF\00\01\02\01\10\FF\01\01\FF\01D\FF\01\01\00\00f\FF\01\01\01\00\22\FF\01\01\02\00\10\FF\02\00\01\00\04\FF\02\01\00\01\04\FF\02\01\01\00\04\00\FE\00\00\01\80\00\FF\00\01\01\88\00\FF\01\FE\00@\00\FF\01\00\00\11\00\FF\02\FE\00@\00\FF\02\FF\00 \00\FF\02\00\000\00\FF\02\01\01\10\00\00\00\02\01\08\00\00\02\FE\01@\00\00\02\FF\00`\00\00\02\00\01 \00\00\02\01\000\00\00\02\02\01\10\00\01\01\00\00D\00\01\01\02\00\10\00\01\02\FF\01@\00\01\02\00\00`\00\01\02\01\00 \00\01\02\02\00\10\01\FE\01\00\00\80\01\FF\01\01\00\88\01\00\01\02\00\08\01\00\02\FF\00@\01\00\02\01\00\10", align 16
@vng_interpolate.chood = internal constant [16 x i8] c"\FF\FF\FF\00\FF\01\00\01\01\01\01\00\01\FF\00\FF", align 16
@.str77 = private unnamed_addr constant [22 x i8] c"VNG interpolation...\0A\00", align 1
@.str78 = private unnamed_addr constant [18 x i8] c"vng_interpolate()\00", align 1
@.str79 = private unnamed_addr constant [22 x i8] c"PPG interpolation...\0A\00", align 1
@ahd_interpolate.dir = internal constant [4 x i32] [i32 -1, i32 1, i32 -256, i32 256], align 16
@.str80 = private unnamed_addr constant [22 x i8] c"AHD interpolation...\0A\00", align 1
@.str81 = private unnamed_addr constant [18 x i8] c"ahd_interpolate()\00", align 1
@median_filter.opt = internal constant [38 x i8] c"\01\02\04\05\07\08\00\01\03\04\06\07\01\02\04\05\07\08\00\03\05\08\04\07\03\06\01\04\02\05\04\07\04\02\06\04\04\02", align 16
@.str82 = private unnamed_addr constant [26 x i8] c"Median filter pass %d...\0A\00", align 1
@blend_highlights.trans = internal constant [2 x [4 x [4 x float]]] [[4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0x3FFBB67AE0000000, float 0xBFFBB67AE0000000, float 0.000000e+00, float 0.000000e+00], [4 x float] [float -1.000000e+00, float -1.000000e+00, float 2.000000e+00, float 0.000000e+00], [4 x float] zeroinitializer], [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00]]], align 16
@blend_highlights.itrans = internal constant [2 x [4 x [4 x float]]] [[4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0x3FEBB67AE0000000, float -5.000000e-01, float 0.000000e+00], [4 x float] [float 1.000000e+00, float 0xBFEBB67AE0000000, float -5.000000e-01, float 0.000000e+00], [4 x float] [float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] zeroinitializer], [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00]]], align 16
@.str83 = private unnamed_addr constant [24 x i8] c"Blending highlights...\0A\00", align 1
@recover_highlights.dir = internal constant [8 x [2 x i8]] [[2 x i8] c"\FF\FF", [2 x i8] c"\FF\00", [2 x i8] c"\FF\01", [2 x i8] c"\00\01", [2 x i8] c"\01\01", [2 x i8] c"\01\00", [2 x i8] c"\01\FF", [2 x i8] c"\00\FF"], align 16
@.str84 = private unnamed_addr constant [26 x i8] c"Rebuilding highlights...\0A\00", align 1
@.str85 = private unnamed_addr constant [21 x i8] c"recover_highlights()\00", align 1
@.str86 = private unnamed_addr constant [15 x i8] c"11124811248488\00", align 1
@thumb_offset = common global i64 0, align 8
@parse_makernote.xlat = internal constant [2 x [256 x i8]] [[256 x i8] c"\C1\BFm\0DY\C5\13\9D\83akO\C7\7F==SY\E3\C7\E9/\95\A7\95\1F\DF\7F+)\C7\0D\DF\07\EFq\89=\13=;\13\FB\0D\89\C1e\1F\B3\0Dk)\E3\FB\EF\A3kG\7F\955\A7GO\C7\F1Y\955\11)a\F1=\B3+\0DC\89\C1\9D\9D\89e\F1\E9\DF\BF=\7FS\97\E5\E9\95\17\1D=\8B\FB\C7\E3g\A7\07\F1q\A7S\B5)\89\E5+\A7\17)\E9O\C5emk\EF\0D\89I/\B3CSe\1DI\A3\13\89Y\EFk\EFe\1D\0BY\13\E3O\9D\B3)C+\07\1D\95YYG\FB\E5\E9aG/5\7F\17\7F\EF\7F\95\95q\D3\A3\0Bq\A3\AD\0B;\B5\FB\A3\BFO\83\1D\AD\E9/qe\A3\E5\075=\0D\B5\E9\E5G;\9D\EF5\A3\BF\B3\DFS\D3\97SIq\075aq/C/\11\DF\17\97\FB\95;\7Fk\D3%\BF\AD\C7\C5\C5\B5\8B\EF/\D3\07k%I\95%Imq\C7", [256 x i8] c"\A7\BC\C9\AD\91\DF\85\E5\D4x\D5\17F|)LM\03\E9%h\11\86\B3\BD\F7oa\22\A2&4*\BE\1EF\14h\9DD\18\C2@\F4~_\1B\AD\0B\94\B6g\B4\0B\E1\EA\95\9Cf\DC\E7]l\05\DA\D5\DFz\EF\F6\DB\1F\82L\C0hG\A1\BD\EE9PVJ\DD\DF\A5\F8\C6\DA\CA\90\CA\01B\9D\8B\0CsCu\05\94\DE$\B3\804\E5,\DC\9B?\CA3E\D0\DB_\F5R\C3!\DA\E2\22rk>\D0[\A8\87\8C\06]\0F\DD\09\19\93\D0\B9\FC\8B\0F\84`3\1C\9BE\F1\F0\A3\94:\12w3MDx(<\9E\FDeW\16\94k\FBY\D0\C8\226\DB\D2c\98C\A1\04\87\86\F7\A6&\BB\D6YM\BFj.\AA+\EF\E6x\B6N\E0/\DC|\BEW\192~*\D0\B8\BA)\00<R}\A8I;-\EB%I\FA\A3\AA9\A7\C5\A7P\116\FB\C6gJ\F5\A5\12e~\B0\DF\AFN\B3a\7F/"], align 16
@.str87 = private unnamed_addr constant [4 x i8] c"KDK\00", align 1
@.str88 = private unnamed_addr constant [4 x i8] c"VER\00", align 1
@.str89 = private unnamed_addr constant [5 x i8] c"IIII\00", align 1
@.str90 = private unnamed_addr constant [5 x i8] c"MMMM\00", align 1
@.str91 = private unnamed_addr constant [3 x i8] c"KC\00", align 1
@.str92 = private unnamed_addr constant [4 x i8] c"MLY\00", align 1
@.str93 = private unnamed_addr constant [6 x i8] c"Nikon\00", align 1
@.str94 = private unnamed_addr constant [9 x i8] c"FUJIFILM\00", align 1
@.str95 = private unnamed_addr constant [5 x i8] c"SONY\00", align 1
@.str96 = private unnamed_addr constant [10 x i8] c"Panasonic\00", align 1
@.str97 = private unnamed_addr constant [6 x i8] c"OLYMP\00", align 1
@.str98 = private unnamed_addr constant [6 x i8] c"LEICA\00", align 1
@.str99 = private unnamed_addr constant [6 x i8] c"Ricoh\00", align 1
@.str100 = private unnamed_addr constant [6 x i8] c"EPSON\00", align 1
@.str101 = private unnamed_addr constant [4 x i8] c"AOC\00", align 1
@.str102 = private unnamed_addr constant [4 x i8] c"QVC\00", align 1
@.str103 = private unnamed_addr constant [6 x i8] c"NIKON\00", align 1
@iso_speed = common global float 0.000000e+00, align 4
@aperture = common global float 0.000000e+00, align 4
@shutter = common global float 0.000000e+00, align 4
@shot_order = common global i32 0, align 4
@.str104 = private unnamed_addr constant [6 x i8] c"Canon\00", align 1
@artist = common global [64 x i8] zeroinitializer, align 16
@.str105 = private unnamed_addr constant [7 x i8] c"PENTAX\00", align 1
@.str106 = private unnamed_addr constant [19 x i8] c"012347800000005896\00", align 1
@.str107 = private unnamed_addr constant [13 x i8] c"66666>666;6A\00", align 1
@flip = common global i32 0, align 4
@cmatrix = common global [3 x [4 x float]] zeroinitializer, align 16
@load_raw = common global void (...)* null, align 8
@.str108 = private unnamed_addr constant [18 x i8] c"%d:%d:%d %d:%d:%d\00", align 1
@.str109 = private unnamed_addr constant [8 x i8] c"EASTMAN\00", align 1
@focal_len = common global float 0.000000e+00, align 4
@exif_cfa = common global i32 0, align 4
@gpsdata = common global [32 x i32] zeroinitializer, align 16
@romm_coeff.rgb_romm = internal constant [3 x [3 x float]] [[3 x float] [float 0x4000460700000000, float 0xBFE7470640000000, float 0xBFD3A20DE0000000], [3 x float] [float 0xBFCD49ADC0000000, float 0x3FF3B52980000000, float 0xBF67EFE0C0000000], [3 x float] [float 0xBF818A86E0000000, float 0xBFC39E7320000000, float 0x3FF296E480000000]], align 16
@parse_mos.mod = internal global [21 x i8*] [i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str111, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str112, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str113, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str114, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str116, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str117, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str119, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str120, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str121, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str122, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str123, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str124, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str126, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str129, i32 0, i32 0)], align 16
@.str110 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str111 = private unnamed_addr constant [5 x i8] c"DCB2\00", align 1
@.str112 = private unnamed_addr constant [7 x i8] c"Volare\00", align 1
@.str113 = private unnamed_addr constant [8 x i8] c"Cantare\00", align 1
@.str114 = private unnamed_addr constant [6 x i8] c"CMost\00", align 1
@.str115 = private unnamed_addr constant [8 x i8] c"Valeo 6\00", align 1
@.str116 = private unnamed_addr constant [9 x i8] c"Valeo 11\00", align 1
@.str117 = private unnamed_addr constant [9 x i8] c"Valeo 22\00", align 1
@.str118 = private unnamed_addr constant [10 x i8] c"Valeo 11p\00", align 1
@.str119 = private unnamed_addr constant [9 x i8] c"Valeo 17\00", align 1
@.str120 = private unnamed_addr constant [9 x i8] c"Aptus 17\00", align 1
@.str121 = private unnamed_addr constant [9 x i8] c"Aptus 22\00", align 1
@.str122 = private unnamed_addr constant [9 x i8] c"Aptus 75\00", align 1
@.str123 = private unnamed_addr constant [9 x i8] c"Aptus 65\00", align 1
@.str124 = private unnamed_addr constant [10 x i8] c"Aptus 54S\00", align 1
@.str125 = private unnamed_addr constant [10 x i8] c"Aptus 65S\00", align 1
@.str126 = private unnamed_addr constant [10 x i8] c"Aptus 75S\00", align 1
@.str127 = private unnamed_addr constant [6 x i8] c"AFi 5\00", align 1
@.str128 = private unnamed_addr constant [6 x i8] c"AFi 6\00", align 1
@.str129 = private unnamed_addr constant [6 x i8] c"AFi 7\00", align 1
@.str130 = private unnamed_addr constant [18 x i8] c"JPEG_preview_data\00", align 1
@.str131 = private unnamed_addr constant [19 x i8] c"icc_camera_profile\00", align 1
@profile_offset = common global i64 0, align 8
@profile_length = common global i32 0, align 4
@.str132 = private unnamed_addr constant [19 x i8] c"ShootObj_back_type\00", align 1
@.str133 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str134 = private unnamed_addr constant [26 x i8] c"icc_camera_to_tone_matrix\00", align 1
@.str135 = private unnamed_addr constant [22 x i8] c"CaptProf_color_matrix\00", align 1
@.str136 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str137 = private unnamed_addr constant [26 x i8] c"CaptProf_number_of_planes\00", align 1
@.str138 = private unnamed_addr constant [27 x i8] c"CaptProf_raw_data_rotation\00", align 1
@.str139 = private unnamed_addr constant [24 x i8] c"CaptProf_mosaic_pattern\00", align 1
@.str140 = private unnamed_addr constant [23 x i8] c"ImgProf_rotation_angle\00", align 1
@.str141 = private unnamed_addr constant [17 x i8] c"NeutObj_neutrals\00", align 1
@.str142 = private unnamed_addr constant [5 x i8] c"\94a\16I\00", align 1
@parse_tiff_ifd.cfa_pc = private unnamed_addr constant [4 x i8] c"\00\01\02\03", align 1
@parse_tiff_ifd.ab = private unnamed_addr constant [4 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@parse_tiff_ifd.xyz = private unnamed_addr constant [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@parse_tiff_ifd.sony_curve = private unnamed_addr constant [6 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 4095], align 16
@tiff_nifds = common global i32 0, align 4
@tiff_ifd = common global [10 x %struct.anon.2] zeroinitializer, align 16
@desc = common global [512 x i8] zeroinitializer, align 16
@.str143 = private unnamed_addr constant [9 x i8] c"50132467\00", align 1
@.str144 = private unnamed_addr constant [6 x i8] c"Adobe\00", align 1
@.str145 = private unnamed_addr constant [6 x i8] c"dcraw\00", align 1
@.str146 = private unnamed_addr constant [6 x i8] c"UFRaw\00", align 1
@.str147 = private unnamed_addr constant [7 x i8] c"Bibble\00", align 1
@.str148 = private unnamed_addr constant [11 x i8] c"Nikon Scan\00", align 1
@.str149 = private unnamed_addr constant [27 x i8] c"Digital Photo Professional\00", align 1
@.str150 = private unnamed_addr constant [10 x i8] c"DSLR-A100\00", align 1
@.str151 = private unnamed_addr constant [8 x i8] c"Sarnoff\00", align 1
@.str152 = private unnamed_addr constant [4 x i8] c"\03\04\05\00", align 1
@.str153 = private unnamed_addr constant [5 x i8] c"\05\03\04\01\00", align 1
@.str154 = private unnamed_addr constant [7 x i8] c"MATRIX\00", align 1
@.str155 = private unnamed_addr constant [5 x i8] c"Leaf\00", align 1
@.str156 = private unnamed_addr constant [7 x i8] c"Imacon\00", align 1
@.str157 = private unnamed_addr constant [14 x i8] c"Ixpress %d-Mp\00", align 1
@.str158 = private unnamed_addr constant [9 x i8] c"Neutral \00", align 1
@.str159 = private unnamed_addr constant [9 x i8] c"%f %f %f\00", align 1
@.str160 = private unnamed_addr constant [11 x i8] c"Hasselblad\00", align 1
@.str161 = private unnamed_addr constant [4 x i8] c"DNG\00", align 1
@cdesc = common global [5 x i8] zeroinitializer, align 1
@pixel_aspect = common global double 0.000000e+00, align 8
@tiff_flip = common global i32 0, align 4
@write_thumb = common global void (%struct._IO_FILE*)* null, align 8
@thumb_load_raw = common global void (...)* null, align 8
@.str162 = private unnamed_addr constant [12 x i8] c"DiMAGE A200\00", align 1
@.str163 = private unnamed_addr constant [22 x i8] c"parse_external_jpeg()\00", align 1
@.str164 = private unnamed_addr constant [5 x i8] c".jpg\00", align 1
@.str165 = private unnamed_addr constant [5 x i8] c".JPG\00", align 1
@.str166 = private unnamed_addr constant [30 x i8] c"Reading metadata from %s ...\0A\00", align 1
@.str167 = private unnamed_addr constant [33 x i8] c"Failed to read metadata from %s\0A\00", align 1
@ciff_block_1030.key = internal constant [2 x i16] [i16 1040, i16 17907], align 2
@parse_ciff.key = private unnamed_addr constant [2 x i16] [i16 1040, i16 17907], align 2
@.str168 = private unnamed_addr constant [5 x i8] c"Pro1\00", align 1
@.str169 = private unnamed_addr constant [19 x i8] c"012346000000000000\00", align 1
@.str170 = private unnamed_addr constant [19 x i8] c"01345:000000006008\00", align 1
@.str171 = private unnamed_addr constant [19 x i8] c"023457000000006000\00", align 1
@.str172 = private unnamed_addr constant [11 x i8] c"0134567028\00", align 1
@.str173 = private unnamed_addr constant [4 x i8] c"DAT\00", align 1
@.str174 = private unnamed_addr constant [4 x i8] c"TIM\00", align 1
@.str175 = private unnamed_addr constant [9 x i8] c"%d:%d:%d\00", align 1
@.str176 = private unnamed_addr constant [4 x i8] c"HDR\00", align 1
@.str177 = private unnamed_addr constant [4 x i8] c"X  \00", align 1
@.str178 = private unnamed_addr constant [4 x i8] c"Y  \00", align 1
@.str179 = private unnamed_addr constant [4 x i8] c"TX \00", align 1
@.str180 = private unnamed_addr constant [4 x i8] c"TY \00", align 1
@.str181 = private unnamed_addr constant [5 x i8] c"EOHD\00", align 1
@.str182 = private unnamed_addr constant [7 x i8] c"Rollei\00", align 1
@.str183 = private unnamed_addr constant [9 x i8] c"d530flex\00", align 1
@.str184 = private unnamed_addr constant [5 x i8] c"META\00", align 1
@.str185 = private unnamed_addr constant [6 x i8] c"THUMB\00", align 1
@.str186 = private unnamed_addr constant [5 x i8] c"RAW0\00", align 1
@.str187 = private unnamed_addr constant [5 x i8] c"0653\00", align 1
@.str188 = private unnamed_addr constant [8 x i8] c" camera\00", align 1
@.str189 = private unnamed_addr constant [10 x i8] c"Phase One\00", align 1
@.str190 = private unnamed_addr constant [11 x i8] c"LightPhase\00", align 1
@.str191 = private unnamed_addr constant [5 x i8] c"H 10\00", align 1
@.str192 = private unnamed_addr constant [5 x i8] c"H 20\00", align 1
@.str193 = private unnamed_addr constant [5 x i8] c"H 25\00", align 1
@parse_riff.mon = internal constant [12 x [4 x i8]] [[4 x i8] c"Jan\00", [4 x i8] c"Feb\00", [4 x i8] c"Mar\00", [4 x i8] c"Apr\00", [4 x i8] c"May\00", [4 x i8] c"Jun\00", [4 x i8] c"Jul\00", [4 x i8] c"Aug\00", [4 x i8] c"Sep\00", [4 x i8] c"Oct\00", [4 x i8] c"Nov\00", [4 x i8] c"Dec\00"], align 16
@.str194 = private unnamed_addr constant [5 x i8] c"RIFF\00", align 1
@.str195 = private unnamed_addr constant [5 x i8] c"LIST\00", align 1
@.str196 = private unnamed_addr constant [5 x i8] c"nctg\00", align 1
@.str197 = private unnamed_addr constant [5 x i8] c"IDIT\00", align 1
@.str198 = private unnamed_addr constant [22 x i8] c"%*s %s %d %d:%d:%d %d\00", align 1
@.str199 = private unnamed_addr constant [5 x i8] c"SMaL\00", align 1
@.str200 = private unnamed_addr constant [10 x i8] c"v%d %dx%d\00", align 1
@.str201 = private unnamed_addr constant [5 x i8] c"CINE\00", align 1
@.str202 = private unnamed_addr constant [4 x i8] c"ISO\00", align 1
@.str203 = private unnamed_addr constant [9 x i8] c"CAMMANUF\00", align 1
@.str204 = private unnamed_addr constant [9 x i8] c"CAMMODEL\00", align 1
@.str205 = private unnamed_addr constant [8 x i8] c"WB_DESC\00", align 1
@.str206 = private unnamed_addr constant [5 x i8] c"TIME\00", align 1
@.str207 = private unnamed_addr constant [8 x i8] c"EXPTIME\00", align 1
@.str208 = private unnamed_addr constant [9 x i8] c"APERTURE\00", align 1
@.str209 = private unnamed_addr constant [8 x i8] c"FLENGTH\00", align 1
@is_foveon = common global i32 0, align 4
@adobe_coeff.table = internal constant [211 x %struct.anon.3] [%struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str210, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 17576, i16 -3191, i16 -3318, i16 5210, i16 6733, i16 -1942, i16 9031, i16 1280, i16 -124, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str211, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 24542, i16 -10860, i16 -3401, i16 -1490, i16 11370, i16 -297, i16 2858, i16 -605, i16 3225, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str212, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 20482, i16 -7172, i16 -3125, i16 -1033, i16 10410, i16 -285, i16 2542, i16 226, i16 3136, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str213, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9805, i16 -2689, i16 -1312, i16 -5803, i16 13064, i16 3068, i16 -2438, i16 3075, i16 8775, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str214, i32 0, i32 0), i16 0, i16 4000, [12 x i16] [i16 6188, i16 -1341, i16 -890, i16 -7168, i16 14489, i16 2937, i16 -2640, i16 3228, i16 8483, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str215, i32 0, i32 0), i16 0, i16 15600, [12 x i16] [i16 4716, i16 603, i16 -830, i16 -7798, i16 15474, i16 2480, i16 -1496, i16 1937, i16 6651, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str216, i32 0, i32 0), i16 0, i16 3692, [12 x i16] [i16 6347, i16 -479, i16 -972, i16 -8297, i16 15954, i16 2480, i16 -1968, i16 2131, i16 7649, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str217, i32 0, i32 0), i16 0, i16 4000, [12 x i16] [i16 8197, i16 -2000, i16 -1118, i16 -6714, i16 14335, i16 2592, i16 -2536, i16 3178, i16 8266, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str218, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14155, i16 -5065, i16 -1382, i16 -6550, i16 14633, i16 2039, i16 -1623, i16 1824, i16 6561, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str219, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 6599, i16 -537, i16 -891, i16 -8071, i16 15783, i16 2424, i16 -1983, i16 2234, i16 7462, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str220, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 6257, i16 -303, i16 -1000, i16 -7880, i16 15621, i16 2396, i16 -1714, i16 1904, i16 7046, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str221, i32 0, i32 0), i16 0, i16 16224, [12 x i16] [i16 6071, i16 -747, i16 -856, i16 -7653, i16 15365, i16 2441, i16 -2025, i16 2553, i16 7315, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str222, i32 0, i32 0), i16 0, i16 15763, [12 x i16] [i16 4920, i16 616, i16 -593, i16 -6493, i16 13964, i16 2784, i16 -1774, i16 3178, i16 7005, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str223, i32 0, i32 0), i16 0, i16 4000, [12 x i16] [i16 8197, i16 -2000, i16 -1118, i16 -6714, i16 14335, i16 2592, i16 -2536, i16 3178, i16 8266, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str224, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 6018, i16 -617, i16 -965, i16 -8645, i16 15881, i16 2975, i16 -1530, i16 1719, i16 7642, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str225, i32 0, i32 0), i16 0, i16 3726, [12 x i16] [i16 7054, i16 -1501, i16 -990, i16 -8156, i16 15544, i16 2812, i16 -1278, i16 1414, i16 7796, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str226, i32 0, i32 0), i16 0, i16 14605, [12 x i16] [i16 5784, i16 -262, i16 -821, i16 -7539, i16 15064, i16 2672, i16 -1982, i16 2681, i16 7427, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str227, i32 0, i32 0), i16 0, i16 3651, [12 x i16] [i16 6771, i16 -1139, i16 -977, i16 -7818, i16 15123, i16 2928, i16 -1244, i16 1437, i16 7533, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str228, i32 0, i32 0), i16 0, i16 15280, [12 x i16] [i16 5859, i16 -211, i16 -930, i16 -8255, i16 16017, i16 2353, i16 -1732, i16 1887, i16 7448, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str229, i32 0, i32 0), i16 0, i16 3712, [12 x i16] [i16 6517, i16 -602, i16 -867, i16 -8180, i16 15926, i16 2378, i16 -1618, i16 1771, i16 7633, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str230, i32 0, i32 0), i16 0, i16 3712, [12 x i16] [i16 6240, i16 -466, i16 -822, i16 -8180, i16 15825, i16 2500, i16 -1801, i16 1938, i16 8042, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str231, i32 0, i32 0), i16 0, i16 15280, [12 x i16] [i16 6291, i16 -540, i16 -976, i16 -8350, i16 16145, i16 2311, i16 -1714, i16 1858, i16 7326, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str232, i32 0, i32 0), i16 0, i16 3712, [12 x i16] [i16 6264, i16 -582, i16 -724, i16 -8312, i16 15948, i16 2504, i16 -1744, i16 1919, i16 8664, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str233, i32 0, i32 0), i16 0, i16 3616, [12 x i16] [i16 4374, i16 3631, i16 -1743, i16 -7520, i16 15212, i16 2472, i16 -2892, i16 3632, i16 8161, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str234, i32 0, i32 0), i16 0, i16 3616, [12 x i16] [i16 6806, i16 -179, i16 -1020, i16 -8097, i16 16415, i16 1687, i16 -3267, i16 4236, i16 7690, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str235, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8197, i16 -2000, i16 -1118, i16 -6714, i16 14335, i16 2592, i16 -2536, i16 3178, i16 8266, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str236, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5300, i16 9846, i16 1776, i16 3436, i16 684, i16 3939, i16 -5540, i16 9879, i16 6200, i16 -1404, i16 11175, i16 217] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str237, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -4801, i16 9475, i16 1952, i16 2926, i16 1611, i16 4094, i16 -5259, i16 10164, i16 5947, i16 -1554, i16 10883, i16 547] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str238, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11093, i16 -3906, i16 -1028, i16 -5047, i16 12492, i16 2879, i16 -1003, i16 1750, i16 5561, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str239, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -4778, i16 9467, i16 2172, i16 4743, i16 -1141, i16 4344, i16 -5146, i16 9908, i16 6077, i16 -1566, i16 11051, i16 557] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str240, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9087, i16 -2693, i16 -1049, i16 -6715, i16 14382, i16 2537, i16 -2291, i16 2819, i16 7790, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str241, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9212, i16 -2781, i16 -1073, i16 -6573, i16 14189, i16 2605, i16 -2300, i16 2844, i16 7664, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str242, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9757, i16 -2872, i16 -933, i16 -5972, i16 13861, i16 2301, i16 -1622, i16 2328, i16 7212, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str243, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9877, i16 -3775, i16 -871, i16 -7613, i16 14807, i16 3072, i16 -1448, i16 1305, i16 7485, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str244, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7368, i16 -2141, i16 -598, i16 -5621, i16 13254, i16 2625, i16 -1418, i16 1696, i16 5743, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str245, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10062, i16 -3522, i16 -999, i16 -7643, i16 15117, i16 2730, i16 -765, i16 817, i16 7323, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str246, i32 0, i32 0), i16 34, i16 0, [12 x i16] [i16 -4155, i16 9818, i16 1529, i16 3939, i16 -25, i16 4522, i16 -5521, i16 9870, i16 6610, i16 -2238, i16 10873, i16 1342] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str247, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -4963, i16 9896, i16 2235, i16 4642, i16 -987, i16 4294, i16 -5162, i16 10011, i16 5859, i16 -1770, i16 11230, i16 577] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str248, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10566, i16 -3652, i16 -1129, i16 -6552, i16 14662, i16 2006, i16 -2197, i16 2581, i16 7670, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str249, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8510, i16 -2487, i16 -940, i16 -6869, i16 14231, i16 2900, i16 -2318, i16 2829, i16 9013, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str250, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8163, i16 -2333, i16 -955, i16 -6682, i16 14174, i16 2751, i16 -2077, i16 2597, i16 8041, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str251, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8882, i16 -2571, i16 -863, i16 -6348, i16 14234, i16 2288, i16 -1516, i16 2172, i16 6569, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str252, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8795, i16 -2482, i16 -797, i16 -7804, i16 15403, i16 2573, i16 -1422, i16 1996, i16 7082, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str253, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9976, i16 -3810, i16 -832, i16 -7115, i16 14463, i16 2906, i16 -901, i16 989, i16 7889, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str254, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 15591, i16 -6402, i16 -1592, i16 -5365, i16 13198, i16 2168, i16 -1300, i16 1824, i16 5075, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str255, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 15265, i16 -6193, i16 -1558, i16 -4125, i16 12116, i16 2010, i16 -888, i16 1639, i16 5220, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str256, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14201, i16 -5308, i16 -1757, i16 -6087, i16 14472, i16 1617, i16 -2191, i16 3105, i16 5348, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str257, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 13124, i16 -5329, i16 -1390, i16 -3602, i16 11658, i16 1944, i16 -1612, i16 2863, i16 4885, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str258, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9427, i16 -3036, i16 -959, i16 -2581, i16 10671, i16 1911, i16 -1039, i16 1982, i16 4430, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str259, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14573, i16 -5482, i16 -1546, i16 -1266, i16 9799, i16 1468, i16 -1040, i16 1912, i16 3810, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str260, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14062, i16 -5199, i16 -1446, i16 -4712, i16 12470, i16 2243, i16 -1286, i16 2028, i16 4836, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str261, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3390, i16 480, i16 -500, i16 -800, i16 3610, i16 340, i16 -550, i16 2336, i16 1192, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str262, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3390, i16 480, i16 -500, i16 -800, i16 3610, i16 340, i16 -550, i16 2336, i16 1192, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([5 x i8]* @.str201, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 20183, i16 -4295, i16 -423, i16 -3940, i16 15330, i16 3985, i16 -280, i16 4870, i16 9800, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str263, i32 0, i32 0), i16 0, i16 3870, [12 x i16] [i16 7777, i16 1285, i16 -1053, i16 -9280, i16 16543, i16 2916, i16 -3677, i16 5679, i16 7060, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str264, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 6827, i16 -1878, i16 -732, i16 -8429, i16 16012, i16 2564, i16 -704, i16 592, i16 7145, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str265, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11044, i16 -3888, i16 -1120, i16 -7248, i16 15168, i16 2208, i16 -1531, i16 2277, i16 8069, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str266, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9183, i16 -2526, i16 -1078, i16 -7461, i16 15071, i16 2574, i16 -2022, i16 2440, i16 8639, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str267, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11044, i16 -3888, i16 -1120, i16 -7248, i16 15168, i16 2208, i16 -1531, i16 2277, i16 8069, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str268, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10004, i16 -3219, i16 -1201, i16 -7036, i16 15047, i16 2107, i16 -1863, i16 2565, i16 7736, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([24 x i8]* @.str269, i32 0, i32 0), i16 514, i16 0, [12 x i16] [i16 11521, i16 -4355, i16 -1065, i16 -6524, i16 13767, i16 3058, i16 -1466, i16 1984, i16 6045, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([24 x i8]* @.str270, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10004, i16 -3219, i16 -1201, i16 -7036, i16 15047, i16 2107, i16 -1863, i16 2565, i16 7736, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str271, i32 0, i32 0), i16 128, i16 0, [12 x i16] [i16 12492, i16 -4690, i16 -1402, i16 -7033, i16 15423, i16 1647, i16 -1507, i16 2111, i16 7697, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str272, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11807, i16 -4612, i16 -1294, i16 -8927, i16 16968, i16 1988, i16 -2120, i16 2741, i16 8006, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str273, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12300, i16 -5110, i16 -1304, i16 -9117, i16 17143, i16 1998, i16 -1947, i16 2448, i16 8100, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str274, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8754, i16 -2732, i16 -1019, i16 -7204, i16 15069, i16 2276, i16 -1702, i16 2334, i16 6982, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str275, i32 0, i32 0), i16 0, i16 15872, [12 x i16] [i16 11940, i16 -4431, i16 -1255, i16 -6766, i16 14428, i16 2542, i16 -993, i16 1165, i16 7421, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str276, i32 0, i32 0), i16 0, i16 15872, [12 x i16] [i16 11940, i16 -4431, i16 -1255, i16 -6766, i16 14428, i16 2542, i16 -993, i16 1165, i16 7421, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str277, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9636, i16 -2804, i16 -988, i16 -7442, i16 15040, i16 2589, i16 -1803, i16 2311, i16 8621, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str278, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9636, i16 -2804, i16 -988, i16 -7442, i16 15040, i16 2589, i16 -1803, i16 2311, i16 8621, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str279, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12628, i16 -4887, i16 -1401, i16 -6861, i16 14996, i16 1962, i16 -2198, i16 2782, i16 7091, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str280, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10190, i16 -3506, i16 -1312, i16 -7153, i16 15051, i16 2238, i16 -2003, i16 2399, i16 7505, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str281, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10491, i16 -3423, i16 -1145, i16 -7385, i16 15027, i16 2538, i16 -1809, i16 2275, i16 8692, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str282, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10491, i16 -3423, i16 -1145, i16 -7385, i16 15027, i16 2538, i16 -1809, i16 2275, i16 8692, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str283, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12343, i16 -4515, i16 -1285, i16 -7165, i16 14899, i16 2435, i16 -1895, i16 2496, i16 8800, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str284, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12343, i16 -4515, i16 -1285, i16 -7165, i16 14899, i16 2435, i16 -1895, i16 2496, i16 8800, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str285, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 21461, i16 -10807, i16 -1441, i16 -2332, i16 10599, i16 1999, i16 289, i16 875, i16 7703, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str286, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12300, i16 -5110, i16 -1304, i16 -9117, i16 17143, i16 1998, i16 -1947, i16 2448, i16 8100, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str287, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7025, i16 -1415, i16 -704, i16 -5188, i16 13765, i16 1424, i16 -1248, i16 2742, i16 6038, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str288, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 13891, i16 -6055, i16 -803, i16 -465, i16 9919, i16 642, i16 2121, i16 82, i16 1291, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str289, i32 0, i32 0), i16 8, i16 0, [12 x i16] [i16 17523, i16 -4827, i16 -2510, i16 756, i16 8546, i16 -137, i16 6113, i16 1649, i16 2250, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str290, i32 0, i32 0), i16 8, i16 0, [12 x i16] [i16 20620, i16 -7572, i16 -2801, i16 -103, i16 10073, i16 -396, i16 3551, i16 -233, i16 2220, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str291, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10868, i16 -1852, i16 -644, i16 -1537, i16 11083, i16 484, i16 2343, i16 628, i16 2216, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str292, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10592, i16 -2206, i16 -967, i16 -1944, i16 11685, i16 230, i16 2206, i16 670, i16 1273, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str293, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10592, i16 -2206, i16 -967, i16 -1944, i16 11685, i16 230, i16 2206, i16 670, i16 1273, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str294, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9898, i16 -2700, i16 -940, i16 -2478, i16 12219, i16 206, i16 1985, i16 634, i16 1031, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str295, i32 0, i32 0), i16 180, i16 0, [12 x i16] [i16 24542, i16 -10860, i16 -3401, i16 -1490, i16 11370, i16 -297, i16 2858, i16 -605, i16 3225, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str296, i32 0, i32 0), i16 188, i16 0, [12 x i16] [i16 20482, i16 -7172, i16 -3125, i16 -1033, i16 10410, i16 -285, i16 2542, i16 226, i16 3136, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str297, i32 0, i32 0), i16 180, i16 0, [12 x i16] [i16 23617, i16 -10175, i16 -3149, i16 -2054, i16 11749, i16 -272, i16 2586, i16 -489, i16 3453, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str298, i32 0, i32 0), i16 185, i16 0, [12 x i16] [i16 13095, i16 -6231, i16 154, i16 12221, i16 -21, i16 -2137, i16 895, i16 4602, i16 2258, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str299, i32 0, i32 0), i16 214, i16 0, [12 x i16] [i16 18244, i16 -6351, i16 -2739, i16 -791, i16 11193, i16 -521, i16 3711, i16 -129, i16 2802, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str300, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11775, i16 -5884, i16 950, i16 9556, i16 1846, i16 -1286, i16 -1019, i16 6221, i16 2728, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str301, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16623, i16 -6309, i16 -1411, i16 -4344, i16 13923, i16 323, i16 2285, i16 274, i16 2926, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str302, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5494, i16 2393, i16 -232, i16 -6427, i16 13850, i16 2846, i16 -1876, i16 3997, i16 5445, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str303, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5494, i16 2393, i16 -232, i16 -6427, i16 13850, i16 2846, i16 -1876, i16 3997, i16 5445, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str304, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7791, i16 3128, i16 -776, i16 -8588, i16 16458, i16 2039, i16 -2455, i16 4006, i16 6198, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str305, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16414, i16 -6060, i16 -1470, i16 -3555, i16 13037, i16 473, i16 2545, i16 122, i16 4948, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str306, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 21179, i16 -8316, i16 -2918, i16 -915, i16 11019, i16 -165, i16 3477, i16 -180, i16 4210, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str307, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9658, i16 -3314, i16 -823, i16 -5163, i16 12695, i16 2768, i16 -1342, i16 1843, i16 6044, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str308, i32 0, i32 0), i16 0, i16 3964, [12 x i16] [i16 10511, i16 -3836, i16 -1102, i16 -6946, i16 14587, i16 2558, i16 -1481, i16 1792, i16 6246, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str309, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 12805, i16 -4662, i16 -1376, i16 -7480, i16 15267, i16 2360, i16 -1626, i16 2194, i16 7904, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str310, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3952, i16 2189, i16 449, i16 -6701, i16 14585, i16 2275, i16 -4536, i16 7349, i16 6536, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str311, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3952, i16 2189, i16 449, i16 -6701, i16 14585, i16 2275, i16 -4536, i16 7349, i16 6536, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str312, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8236, i16 1746, i16 -1314, i16 -8251, i16 15953, i16 2428, i16 -3673, i16 5786, i16 5771, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str313, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7914, i16 1414, i16 -1190, i16 -8777, i16 16582, i16 2280, i16 -2811, i16 4605, i16 5562, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str314, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7914, i16 1414, i16 -1190, i16 -8777, i16 16582, i16 2280, i16 -2811, i16 4605, i16 5562, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([5 x i8]* @.str155, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8236, i16 1746, i16 -1314, i16 -8251, i16 15953, i16 2428, i16 -3673, i16 5786, i16 5771, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str315, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7645, i16 2579, i16 -1363, i16 -8689, i16 16717, i16 2015, i16 -3712, i16 5941, i16 5961, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str316, i32 0, i32 0), i16 110, i16 0, [12 x i16] [i16 16695, i16 -3761, i16 -2151, i16 155, i16 9682, i16 163, i16 3433, i16 951, i16 4904, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str317, i32 0, i32 0), i16 0, i16 3965, [12 x i16] [i16 8983, i16 -2942, i16 -963, i16 -6556, i16 14476, i16 2237, i16 -2426, i16 2887, i16 8014, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str318, i32 0, i32 0), i16 0, i16 3965, [12 x i16] [i16 11368, i16 -3894, i16 -1242, i16 -6521, i16 14358, i16 2339, i16 -2475, i16 3056, i16 7285, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str319, i32 0, i32 0), i16 0, i16 3965, [12 x i16] [i16 9144, i16 -2777, i16 -998, i16 -6676, i16 14556, i16 2281, i16 -2470, i16 3019, i16 7744, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str320, i32 0, i32 0), i16 0, i16 3979, [12 x i16] [i16 9274, i16 -2547, i16 -1167, i16 -8220, i16 16323, i16 1943, i16 -2273, i16 2720, i16 8340, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str321, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8560, i16 -2487, i16 -986, i16 -8112, i16 15535, i16 2771, i16 -1209, i16 1324, i16 7743, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str322, i32 0, i32 0), i16 0, i16 3983, [12 x i16] [i16 9097, i16 -2726, i16 -1053, i16 -8073, i16 15506, i16 2762, i16 -966, i16 981, i16 7763, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str323, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11280, i16 -3564, i16 -1370, i16 -4655, i16 12374, i16 2282, i16 -1423, i16 2168, i16 5396, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str324, i32 0, i32 0), i16 0, i16 4091, [12 x i16] [i16 10284, i16 -3283, i16 -1086, i16 -7957, i16 15762, i16 2316, i16 -829, i16 882, i16 6644, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str325, i32 0, i32 0), i16 0, i16 4091, [12 x i16] [i16 10239, i16 -3104, i16 -1099, i16 -8037, i16 15727, i16 2451, i16 -927, i16 925, i16 6871, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str326, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5902, i16 -933, i16 -782, i16 -8983, i16 16719, i16 2354, i16 -1402, i16 1455, i16 6464, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str327, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7577, i16 -2166, i16 -926, i16 -7454, i16 15592, i16 1934, i16 -2377, i16 2808, i16 8606, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str328, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7702, i16 -2245, i16 -975, i16 -9114, i16 17242, i16 1875, i16 -2679, i16 3055, i16 8521, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str329, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16772, i16 -4726, i16 -2141, i16 -7611, i16 15713, i16 1972, i16 -2846, i16 3494, i16 9521, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str330, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5710, i16 -901, i16 -615, i16 -8594, i16 16617, i16 2024, i16 -2975, i16 4120, i16 6830, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str331, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10231, i16 -2769, i16 -1255, i16 -8301, i16 15900, i16 2552, i16 -797, i16 680, i16 7148, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str332, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8819, i16 -2543, i16 -911, i16 -9025, i16 16928, i16 2151, i16 -1329, i16 1213, i16 8449, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str333, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 6992, i16 -1668, i16 -806, i16 -8138, i16 15748, i16 2543, i16 -874, i16 850, i16 7897, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str334, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7732, i16 -2422, i16 -789, i16 -8238, i16 15884, i16 2498, i16 -859, i16 783, i16 7330, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str335, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8736, i16 -2458, i16 -935, i16 -9075, i16 16894, i16 2251, i16 -1354, i16 1242, i16 8263, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str336, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8139, i16 -2171, i16 -663, i16 -8747, i16 16541, i16 2295, i16 -1925, i16 2008, i16 8093, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str337, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7732, i16 -2422, i16 -789, i16 -8238, i16 15884, i16 2498, i16 -859, i16 783, i16 7330, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str338, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8629, i16 -2410, i16 -883, i16 -9055, i16 16940, i16 2171, i16 -1490, i16 1363, i16 8520, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str339, i32 0, i32 0), i16 0, i16 3840, [12 x i16] [i16 7309, i16 -1403, i16 -519, i16 -8474, i16 16008, i16 2622, i16 -2434, i16 2826, i16 8064, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str340, i32 0, i32 0), i16 0, i16 4028, [12 x i16] [i16 8367, i16 -2248, i16 -763, i16 -8758, i16 16447, i16 2422, i16 -1527, i16 1550, i16 8053, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str341, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9030, i16 -1992, i16 -715, i16 -8465, i16 16302, i16 2255, i16 -2689, i16 3217, i16 8069, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str342, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8139, i16 -2171, i16 -663, i16 -8747, i16 16541, i16 2295, i16 -1925, i16 2008, i16 8093, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str343, i32 0, i32 0), i16 0, i16 989, [12 x i16] [i16 -3746, i16 10611, i16 1665, i16 9621, i16 -1734, i16 2114, i16 -2389, i16 7082, i16 3064, i16 3406, i16 6116, i16 -244] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str344, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str345, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 13142, i16 -4152, i16 -1596, i16 -4655, i16 12374, i16 2282, i16 -1769, i16 2696, i16 6711, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str346, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str347, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11280, i16 -3564, i16 -1370, i16 -4655, i16 12374, i16 2282, i16 -1423, i16 2168, i16 5396, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str348, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str349, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str350, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9349, i16 -2987, i16 -1001, i16 -7919, i16 15766, i16 2266, i16 -2098, i16 2680, i16 6839, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str351, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5368, i16 11478, i16 2368, i16 5537, i16 -113, i16 3148, i16 -4969, i16 10021, i16 5782, i16 778, i16 9028, i16 211] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str352, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7842, i16 -2320, i16 -992, i16 -8154, i16 15718, i16 2599, i16 -1098, i16 1342, i16 7560, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str353, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8489, i16 -2583, i16 -1036, i16 -8051, i16 15583, i16 2643, i16 -1307, i16 1407, i16 7354, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str354, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7971, i16 -2314, i16 -913, i16 -8451, i16 15762, i16 2894, i16 -1442, i16 1520, i16 7610, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str355, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9698, i16 -3367, i16 -914, i16 -4706, i16 12584, i16 2368, i16 -837, i16 968, i16 5801, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str356, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10508, i16 -3124, i16 -1273, i16 -6079, i16 14294, i16 1901, i16 -1653, i16 2306, i16 6237, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str357, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10445, i16 -3362, i16 -1307, i16 -7662, i16 15690, i16 2058, i16 -1135, i16 1176, i16 7602, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str358, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10252, i16 -3531, i16 -1095, i16 -7114, i16 14850, i16 2436, i16 -1451, i16 1723, i16 6365, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str359, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10793, i16 -3791, i16 -1146, i16 -7498, i16 15177, i16 2488, i16 -1390, i16 1577, i16 7321, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str360, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8606, i16 -2509, i16 -1014, i16 -8238, i16 15714, i16 2703, i16 -942, i16 979, i16 7760, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str361, i32 0, i32 0), i16 0, i16 -64, [12 x i16] [i16 12745, i16 -4500, i16 -1416, i16 -6062, i16 14542, i16 1580, i16 -1934, i16 2256, i16 6603, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str362, i32 0, i32 0), i16 0, i16 -16, [12 x i16] [i16 11846, i16 -4767, i16 -945, i16 -7027, i16 15878, i16 1089, i16 -2699, i16 4122, i16 8311, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str363, i32 0, i32 0), i16 0, i16 -64, [12 x i16] [i16 13173, i16 -4732, i16 -1499, i16 -5807, i16 14036, i16 1895, i16 -2045, i16 2452, i16 7142, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str364, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7828, i16 -1761, i16 -348, i16 -5788, i16 14071, i16 1830, i16 -2853, i16 4518, i16 6557, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str365, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8961, i16 -2473, i16 -1084, i16 -7979, i16 15990, i16 2067, i16 -2319, i16 3035, i16 8249, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str366, i32 0, i32 0), i16 0, i16 3993, [12 x i16] [i16 9487, i16 -2875, i16 -1115, i16 -7533, i16 15606, i16 2010, i16 -1618, i16 2100, i16 7389, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str367, i32 0, i32 0), i16 0, i16 -16, [12 x i16] [i16 6169, i16 -1483, i16 -21, i16 -7107, i16 14761, i16 2536, i16 -2904, i16 3580, i16 8568, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str368, i32 0, i32 0), i16 0, i16 3946, [12 x i16] [i16 8856, i16 -2582, i16 -1026, i16 -7761, i16 15766, i16 2082, i16 -2009, i16 2575, i16 7469, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str369, i32 0, i32 0), i16 0, i16 4055, [12 x i16] [i16 8746, i16 -2425, i16 -1095, i16 -7594, i16 15612, i16 2073, i16 -1780, i16 2309, i16 7416, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str370, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8136, i16 -1968, i16 -299, i16 -5481, i16 13742, i16 1871, i16 -2556, i16 4205, i16 6630, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str371, i32 0, i32 0), i16 0, i16 3946, [12 x i16] [i16 8785, i16 -2529, i16 -1033, i16 -7639, i16 15624, i16 2112, i16 -1783, i16 2300, i16 7817, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str372, i32 0, i32 0), i16 0, i16 4050, [12 x i16] [i16 8344, i16 -2322, i16 -1020, i16 -7596, i16 15635, i16 2048, i16 -1748, i16 2269, i16 7287, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str373, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12078, i16 -4836, i16 -1069, i16 -6671, i16 14306, i16 2578, i16 -786, i16 939, i16 7418, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str374, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11766, i16 -4445, i16 -1067, i16 -6901, i16 14421, i16 2707, i16 -1029, i16 1217, i16 7572, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str375, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 9493, i16 -3415, i16 -666, i16 -5211, i16 12334, i16 3260, i16 -1548, i16 2262, i16 6482, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str376, i32 0, i32 0), i16 0, i16 4094, [12 x i16] [i16 10593, i16 -3607, i16 -1010, i16 -5881, i16 13127, i16 3084, i16 -1200, i16 1805, i16 6721, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str377, i32 0, i32 0), i16 0, i16 4094, [12 x i16] [i16 11597, i16 -4006, i16 -1049, i16 -5432, i16 12799, i16 2957, i16 -1029, i16 1750, i16 6516, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str378, i32 0, i32 0), i16 0, i16 4089, [12 x i16] [i16 10915, i16 -3677, i16 -982, i16 -5587, i16 12986, i16 2911, i16 -1168, i16 1968, i16 6223, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str379, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11522, i16 -4044, i16 -1146, i16 -4736, i16 12172, i16 2904, i16 -988, i16 1829, i16 6039, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str380, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10504, i16 -2438, i16 -1189, i16 -8603, i16 16207, i16 2531, i16 -1022, i16 863, i16 12242, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str381, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10829, i16 -2838, i16 -1115, i16 -8339, i16 15817, i16 2696, i16 -837, i16 680, i16 11939, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str382, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10504, i16 -2438, i16 -1189, i16 -8603, i16 16207, i16 2531, i16 -1022, i16 863, i16 12242, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str383, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10371, i16 -2333, i16 -1206, i16 -8688, i16 16231, i16 2602, i16 -1230, i16 1116, i16 11282, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str384, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9651, i16 -2059, i16 -1189, i16 -8881, i16 16512, i16 2487, i16 -1460, i16 1345, i16 10687, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str385, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9566, i16 -2863, i16 -803, i16 -7170, i16 15172, i16 2112, i16 -818, i16 803, i16 9705, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str386, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11095, i16 -3157, i16 -1324, i16 -8377, i16 15834, i16 2720, i16 -1108, i16 947, i16 11688, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str387, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9427, i16 -2714, i16 -868, i16 -7493, i16 16092, i16 1373, i16 -2199, i16 3264, i16 7180, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str388, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9186, i16 -2678, i16 -907, i16 -8693, i16 16517, i16 2260, i16 -1129, i16 1094, i16 8524, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str389, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11057, i16 -3604, i16 -1155, i16 -5152, i16 13046, i16 2329, i16 -282, i16 375, i16 8104, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str390, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11057, i16 -3604, i16 -1155, i16 -5152, i16 13046, i16 2329, i16 -282, i16 375, i16 8104, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str391, i32 0, i32 0), i16 0, i16 -2064, [12 x i16] [i16 8986, i16 -2755, i16 -802, i16 -6341, i16 13575, i16 3077, i16 -1476, i16 2144, i16 6379, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str392, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9932, i16 -3060, i16 -935, i16 -5809, i16 13331, i16 2753, i16 -1267, i16 2155, i16 5575, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str393, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 10109, i16 -3488, i16 -993, i16 -5412, i16 12812, i16 2916, i16 -1305, i16 2140, i16 5543, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str394, i32 0, i32 0), i16 0, i16 -1716, [12 x i16] [i16 10976, i16 -4029, i16 -1141, i16 -7918, i16 15491, i16 2600, i16 -1670, i16 2071, i16 8246, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str395, i32 0, i32 0), i16 0, i16 -16, [12 x i16] [i16 7906, i16 -2709, i16 -594, i16 -6231, i16 13351, i16 3220, i16 -1922, i16 2631, i16 6537, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str396, i32 0, i32 0), i16 15, i16 3990, [12 x i16] [i16 8025, i16 -1942, i16 -1050, i16 -7920, i16 15904, i16 2100, i16 -2456, i16 3005, i16 7039, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str397, i32 0, i32 0), i16 0, i16 -2052, [12 x i16] [i16 8054, i16 -1885, i16 -1025, i16 -8349, i16 16367, i16 2040, i16 -2805, i16 3542, i16 7629, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str398, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11340, i16 -4069, i16 -1275, i16 -7555, i16 15266, i16 2448, i16 -2960, i16 3426, i16 7685, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str399, i32 0, i32 0), i16 0, i16 -2064, [12 x i16] [i16 10704, i16 -4187, i16 -1230, i16 -8314, i16 15952, i16 2501, i16 -920, i16 945, i16 8927, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str400, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8048, i16 -2810, i16 -623, i16 -6450, i16 13519, i16 3272, i16 -1700, i16 2146, i16 7049, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str401, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 8128, i16 -2668, i16 -655, i16 -6134, i16 13307, i16 3161, i16 -1782, i16 2568, i16 6083, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str402, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 9082, i16 -2907, i16 -925, i16 -6119, i16 13377, i16 3058, i16 -1797, i16 2641, i16 5609, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str403, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 8199, i16 -2065, i16 -1056, i16 -8124, i16 16156, i16 2033, i16 -2458, i16 3022, i16 7220, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str404, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 1313, i16 1855, i16 -109, i16 -6715, i16 15908, i16 808, i16 -327, i16 1840, i16 6020, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str405, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 2905, i16 732, i16 -237, i16 -8134, i16 16626, i16 1476, i16 -3038, i16 4253, i16 7517, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str406, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 4516, i16 -245, i16 -37, i16 -7020, i16 14976, i16 2173, i16 -3206, i16 4671, i16 7087, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str407, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5053, i16 -24, i16 -117, i16 -5684, i16 14076, i16 1702, i16 -2619, i16 4492, i16 5849, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str408, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10504, i16 -2438, i16 -1189, i16 -8603, i16 16207, i16 2531, i16 -1022, i16 863, i16 12242, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([6 x i8]* @.str409, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16442, i16 -2956, i16 -2422, i16 -2877, i16 12128, i16 750, i16 -1136, i16 6066, i16 4559, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str410, i32 0, i32 0), i16 491, i16 0, [12 x i16] [i16 7924, i16 -1910, i16 -777, i16 -8226, i16 15459, i16 2998, i16 -1517, i16 2199, i16 6818, i16 -7242, i16 11401, i16 3481] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str411, i32 0, i32 0), i16 512, i16 0, [12 x i16] [i16 8512, i16 -2641, i16 -694, i16 -8042, i16 15670, i16 2526, i16 -1821, i16 2117, i16 7414, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str412, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7511, i16 -2571, i16 -692, i16 -7894, i16 15088, i16 3060, i16 -948, i16 1111, i16 8128, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str413, i32 0, i32 0), i16 0, i16 4075, [12 x i16] [i16 9437, i16 -2811, i16 -774, i16 -8405, i16 16215, i16 2290, i16 -710, i16 596, i16 7181, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str414, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9847, i16 -3091, i16 -928, i16 -8485, i16 16345, i16 2225, i16 -715, i16 595, i16 7103, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str415, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9847, i16 -3091, i16 -928, i16 -8485, i16 16345, i16 2225, i16 -715, i16 595, i16 7103, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str416, i32 0, i32 0), i16 0, i16 4092, [12 x i16] [i16 6038, i16 -1484, i16 -578, i16 -9146, i16 16746, i16 2513, i16 -875, i16 746, i16 7217, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str417, i32 0, i32 0), i16 254, i16 8190, [12 x i16] [i16 5775, i16 -805, i16 -359, i16 -8574, i16 16295, i16 2391, i16 -1943, i16 2341, i16 7249, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str418, i32 0, i32 0), i16 254, i16 8190, [12 x i16] [i16 5209, i16 -1072, i16 -397, i16 -8845, i16 16120, i16 2919, i16 -1618, i16 1803, i16 8654, i16 0, i16 0, i16 0] }], align 16
@.str210 = private unnamed_addr constant [16 x i8] c"Apple QuickTake\00", align 1
@.str211 = private unnamed_addr constant [16 x i8] c"Canon EOS D2000\00", align 1
@.str212 = private unnamed_addr constant [16 x i8] c"Canon EOS D6000\00", align 1
@.str213 = private unnamed_addr constant [14 x i8] c"Canon EOS D30\00", align 1
@.str214 = private unnamed_addr constant [14 x i8] c"Canon EOS D60\00", align 1
@.str215 = private unnamed_addr constant [21 x i8] c"Canon EOS 5D Mark II\00", align 1
@.str216 = private unnamed_addr constant [13 x i8] c"Canon EOS 5D\00", align 1
@.str217 = private unnamed_addr constant [14 x i8] c"Canon EOS 10D\00", align 1
@.str218 = private unnamed_addr constant [15 x i8] c"Canon EOS 20Da\00", align 1
@.str219 = private unnamed_addr constant [14 x i8] c"Canon EOS 20D\00", align 1
@.str220 = private unnamed_addr constant [14 x i8] c"Canon EOS 30D\00", align 1
@.str221 = private unnamed_addr constant [14 x i8] c"Canon EOS 40D\00", align 1
@.str222 = private unnamed_addr constant [14 x i8] c"Canon EOS 50D\00", align 1
@.str223 = private unnamed_addr constant [15 x i8] c"Canon EOS 300D\00", align 1
@.str224 = private unnamed_addr constant [15 x i8] c"Canon EOS 350D\00", align 1
@.str225 = private unnamed_addr constant [15 x i8] c"Canon EOS 400D\00", align 1
@.str226 = private unnamed_addr constant [15 x i8] c"Canon EOS 450D\00", align 1
@.str227 = private unnamed_addr constant [16 x i8] c"Canon EOS 1000D\00", align 1
@.str228 = private unnamed_addr constant [23 x i8] c"Canon EOS-1Ds Mark III\00", align 1
@.str229 = private unnamed_addr constant [22 x i8] c"Canon EOS-1Ds Mark II\00", align 1
@.str230 = private unnamed_addr constant [23 x i8] c"Canon EOS-1D Mark II N\00", align 1
@.str231 = private unnamed_addr constant [22 x i8] c"Canon EOS-1D Mark III\00", align 1
@.str232 = private unnamed_addr constant [21 x i8] c"Canon EOS-1D Mark II\00", align 1
@.str233 = private unnamed_addr constant [14 x i8] c"Canon EOS-1DS\00", align 1
@.str234 = private unnamed_addr constant [13 x i8] c"Canon EOS-1D\00", align 1
@.str235 = private unnamed_addr constant [10 x i8] c"Canon EOS\00", align 1
@.str236 = private unnamed_addr constant [20 x i8] c"Canon PowerShot A50\00", align 1
@.str237 = private unnamed_addr constant [19 x i8] c"Canon PowerShot A5\00", align 1
@.str238 = private unnamed_addr constant [20 x i8] c"Canon PowerShot G10\00", align 1
@.str239 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G1\00", align 1
@.str240 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G2\00", align 1
@.str241 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G3\00", align 1
@.str242 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G5\00", align 1
@.str243 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G6\00", align 1
@.str244 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G9\00", align 1
@.str245 = private unnamed_addr constant [21 x i8] c"Canon PowerShot Pro1\00", align 1
@.str246 = private unnamed_addr constant [22 x i8] c"Canon PowerShot Pro70\00", align 1
@.str247 = private unnamed_addr constant [22 x i8] c"Canon PowerShot Pro90\00", align 1
@.str248 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S30\00", align 1
@.str249 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S40\00", align 1
@.str250 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S45\00", align 1
@.str251 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S50\00", align 1
@.str252 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S60\00", align 1
@.str253 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S70\00", align 1
@.str254 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A610\00", align 1
@.str255 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A620\00", align 1
@.str256 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A630\00", align 1
@.str257 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A640\00", align 1
@.str258 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A650\00", align 1
@.str259 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A720\00", align 1
@.str260 = private unnamed_addr constant [22 x i8] c"Canon PowerShot S3 IS\00", align 1
@.str261 = private unnamed_addr constant [9 x i8] c"CINE 650\00", align 1
@.str262 = private unnamed_addr constant [9 x i8] c"CINE 660\00", align 1
@.str263 = private unnamed_addr constant [17 x i8] c"Contax N Digital\00", align 1
@.str264 = private unnamed_addr constant [11 x i8] c"EPSON R-D1\00", align 1
@.str265 = private unnamed_addr constant [22 x i8] c"FUJIFILM FinePix E550\00", align 1
@.str266 = private unnamed_addr constant [22 x i8] c"FUJIFILM FinePix E900\00", align 1
@.str267 = private unnamed_addr constant [20 x i8] c"FUJIFILM FinePix F8\00", align 1
@.str268 = private unnamed_addr constant [20 x i8] c"FUJIFILM FinePix F7\00", align 1
@.str269 = private unnamed_addr constant [24 x i8] c"FUJIFILM FinePix S100FS\00", align 1
@.str270 = private unnamed_addr constant [24 x i8] c"FUJIFILM FinePix S20Pro\00", align 1
@.str271 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S2Pro\00", align 1
@.str272 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S3Pro\00", align 1
@.str273 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5Pro\00", align 1
@.str274 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5000\00", align 1
@.str275 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5100\00", align 1
@.str276 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5500\00", align 1
@.str277 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5200\00", align 1
@.str278 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5600\00", align 1
@.str279 = private unnamed_addr constant [20 x i8] c"FUJIFILM FinePix S6\00", align 1
@.str280 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S7000\00", align 1
@.str281 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9000\00", align 1
@.str282 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9500\00", align 1
@.str283 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9100\00", align 1
@.str284 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9600\00", align 1
@.str285 = private unnamed_addr constant [14 x i8] c"FUJIFILM IS-1\00", align 1
@.str286 = private unnamed_addr constant [16 x i8] c"FUJIFILM IS Pro\00", align 1
@.str287 = private unnamed_addr constant [15 x i8] c"Imacon Ixpress\00", align 1
@.str288 = private unnamed_addr constant [13 x i8] c"KODAK NC2000\00", align 1
@.str289 = private unnamed_addr constant [14 x i8] c"Kodak DCS315C\00", align 1
@.str290 = private unnamed_addr constant [14 x i8] c"Kodak DCS330C\00", align 1
@.str291 = private unnamed_addr constant [13 x i8] c"KODAK DCS420\00", align 1
@.str292 = private unnamed_addr constant [13 x i8] c"KODAK DCS460\00", align 1
@.str293 = private unnamed_addr constant [14 x i8] c"KODAK EOSDCS1\00", align 1
@.str294 = private unnamed_addr constant [15 x i8] c"KODAK EOSDCS3B\00", align 1
@.str295 = private unnamed_addr constant [14 x i8] c"Kodak DCS520C\00", align 1
@.str296 = private unnamed_addr constant [14 x i8] c"Kodak DCS560C\00", align 1
@.str297 = private unnamed_addr constant [14 x i8] c"Kodak DCS620C\00", align 1
@.str298 = private unnamed_addr constant [14 x i8] c"Kodak DCS620X\00", align 1
@.str299 = private unnamed_addr constant [14 x i8] c"Kodak DCS660C\00", align 1
@.str300 = private unnamed_addr constant [14 x i8] c"Kodak DCS720X\00", align 1
@.str301 = private unnamed_addr constant [14 x i8] c"Kodak DCS760C\00", align 1
@.str302 = private unnamed_addr constant [18 x i8] c"Kodak DCS Pro SLR\00", align 1
@.str303 = private unnamed_addr constant [19 x i8] c"Kodak DCS Pro 14nx\00", align 1
@.str304 = private unnamed_addr constant [17 x i8] c"Kodak DCS Pro 14\00", align 1
@.str305 = private unnamed_addr constant [17 x i8] c"Kodak ProBack645\00", align 1
@.str306 = private unnamed_addr constant [14 x i8] c"Kodak ProBack\00", align 1
@.str307 = private unnamed_addr constant [11 x i8] c"KODAK P712\00", align 1
@.str308 = private unnamed_addr constant [11 x i8] c"KODAK P850\00", align 1
@.str309 = private unnamed_addr constant [11 x i8] c"KODAK P880\00", align 1
@.str310 = private unnamed_addr constant [11 x i8] c"Leaf CMost\00", align 1
@.str311 = private unnamed_addr constant [13 x i8] c"Leaf Valeo 6\00", align 1
@.str312 = private unnamed_addr constant [15 x i8] c"Leaf Aptus 54S\00", align 1
@.str313 = private unnamed_addr constant [14 x i8] c"Leaf Aptus 65\00", align 1
@.str314 = private unnamed_addr constant [14 x i8] c"Leaf Aptus 75\00", align 1
@.str315 = private unnamed_addr constant [10 x i8] c"Mamiya ZD\00", align 1
@.str316 = private unnamed_addr constant [12 x i8] c"Micron 2010\00", align 1
@.str317 = private unnamed_addr constant [17 x i8] c"Minolta DiMAGE 5\00", align 1
@.str318 = private unnamed_addr constant [19 x i8] c"Minolta DiMAGE 7Hi\00", align 1
@.str319 = private unnamed_addr constant [17 x i8] c"Minolta DiMAGE 7\00", align 1
@.str320 = private unnamed_addr constant [18 x i8] c"Minolta DiMAGE A1\00", align 1
@.str321 = private unnamed_addr constant [20 x i8] c"MINOLTA DiMAGE A200\00", align 1
@.str322 = private unnamed_addr constant [18 x i8] c"Minolta DiMAGE A2\00", align 1
@.str323 = private unnamed_addr constant [18 x i8] c"Minolta DiMAGE Z2\00", align 1
@.str324 = private unnamed_addr constant [16 x i8] c"MINOLTA DYNAX 5\00", align 1
@.str325 = private unnamed_addr constant [16 x i8] c"MINOLTA DYNAX 7\00", align 1
@.str326 = private unnamed_addr constant [11 x i8] c"NIKON D100\00", align 1
@.str327 = private unnamed_addr constant [10 x i8] c"NIKON D1H\00", align 1
@.str328 = private unnamed_addr constant [10 x i8] c"NIKON D1X\00", align 1
@.str329 = private unnamed_addr constant [9 x i8] c"NIKON D1\00", align 1
@.str330 = private unnamed_addr constant [10 x i8] c"NIKON D2H\00", align 1
@.str331 = private unnamed_addr constant [10 x i8] c"NIKON D2X\00", align 1
@.str332 = private unnamed_addr constant [11 x i8] c"NIKON D40X\00", align 1
@.str333 = private unnamed_addr constant [10 x i8] c"NIKON D40\00", align 1
@.str334 = private unnamed_addr constant [10 x i8] c"NIKON D50\00", align 1
@.str335 = private unnamed_addr constant [10 x i8] c"NIKON D60\00", align 1
@.str336 = private unnamed_addr constant [11 x i8] c"NIKON D700\00", align 1
@.str337 = private unnamed_addr constant [10 x i8] c"NIKON D70\00", align 1
@.str338 = private unnamed_addr constant [10 x i8] c"NIKON D80\00", align 1
@.str339 = private unnamed_addr constant [10 x i8] c"NIKON D90\00", align 1
@.str340 = private unnamed_addr constant [11 x i8] c"NIKON D200\00", align 1
@.str341 = private unnamed_addr constant [11 x i8] c"NIKON D300\00", align 1
@.str342 = private unnamed_addr constant [9 x i8] c"NIKON D3\00", align 1
@.str343 = private unnamed_addr constant [11 x i8] c"NIKON E950\00", align 1
@.str344 = private unnamed_addr constant [11 x i8] c"NIKON E995\00", align 1
@.str345 = private unnamed_addr constant [12 x i8] c"NIKON E2100\00", align 1
@.str346 = private unnamed_addr constant [12 x i8] c"NIKON E2500\00", align 1
@.str347 = private unnamed_addr constant [12 x i8] c"NIKON E4300\00", align 1
@.str348 = private unnamed_addr constant [12 x i8] c"NIKON E4500\00", align 1
@.str349 = private unnamed_addr constant [12 x i8] c"NIKON E5000\00", align 1
@.str350 = private unnamed_addr constant [12 x i8] c"NIKON E5400\00", align 1
@.str351 = private unnamed_addr constant [12 x i8] c"NIKON E5700\00", align 1
@.str352 = private unnamed_addr constant [12 x i8] c"NIKON E8400\00", align 1
@.str353 = private unnamed_addr constant [12 x i8] c"NIKON E8700\00", align 1
@.str354 = private unnamed_addr constant [12 x i8] c"NIKON E8800\00", align 1
@.str355 = private unnamed_addr constant [20 x i8] c"NIKON COOLPIX P6000\00", align 1
@.str356 = private unnamed_addr constant [14 x i8] c"OLYMPUS C5050\00", align 1
@.str357 = private unnamed_addr constant [14 x i8] c"OLYMPUS C5060\00", align 1
@.str358 = private unnamed_addr constant [14 x i8] c"OLYMPUS C7070\00", align 1
@.str359 = private unnamed_addr constant [12 x i8] c"OLYMPUS C70\00", align 1
@.str360 = private unnamed_addr constant [12 x i8] c"OLYMPUS C80\00", align 1
@.str361 = private unnamed_addr constant [13 x i8] c"OLYMPUS E-10\00", align 1
@.str362 = private unnamed_addr constant [12 x i8] c"OLYMPUS E-1\00", align 1
@.str363 = private unnamed_addr constant [13 x i8] c"OLYMPUS E-20\00", align 1
@.str364 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-300\00", align 1
@.str365 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-330\00", align 1
@.str366 = private unnamed_addr constant [12 x i8] c"OLYMPUS E-3\00", align 1
@.str367 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-400\00", align 1
@.str368 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-410\00", align 1
@.str369 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-420\00", align 1
@.str370 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-500\00", align 1
@.str371 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-510\00", align 1
@.str372 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-520\00", align 1
@.str373 = private unnamed_addr constant [14 x i8] c"OLYMPUS SP350\00", align 1
@.str374 = private unnamed_addr constant [12 x i8] c"OLYMPUS SP3\00", align 1
@.str375 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP500UZ\00", align 1
@.str376 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP510UZ\00", align 1
@.str377 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP550UZ\00", align 1
@.str378 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP560UZ\00", align 1
@.str379 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP570UZ\00", align 1
@.str380 = private unnamed_addr constant [16 x i8] c"PENTAX *ist DL2\00", align 1
@.str381 = private unnamed_addr constant [15 x i8] c"PENTAX *ist DL\00", align 1
@.str382 = private unnamed_addr constant [16 x i8] c"PENTAX *ist DS2\00", align 1
@.str383 = private unnamed_addr constant [15 x i8] c"PENTAX *ist DS\00", align 1
@.str384 = private unnamed_addr constant [14 x i8] c"PENTAX *ist D\00", align 1
@.str385 = private unnamed_addr constant [12 x i8] c"PENTAX K10D\00", align 1
@.str386 = private unnamed_addr constant [10 x i8] c"PENTAX K1\00", align 1
@.str387 = private unnamed_addr constant [12 x i8] c"PENTAX K20D\00", align 1
@.str388 = private unnamed_addr constant [13 x i8] c"PENTAX K200D\00", align 1
@.str389 = private unnamed_addr constant [13 x i8] c"PENTAX K2000\00", align 1
@.str390 = private unnamed_addr constant [11 x i8] c"PENTAX K-m\00", align 1
@.str391 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-FZ8\00", align 1
@.str392 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ18\00", align 1
@.str393 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ28\00", align 1
@.str394 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ30\00", align 1
@.str395 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ50\00", align 1
@.str396 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-L10\00", align 1
@.str397 = private unnamed_addr constant [17 x i8] c"Panasonic DMC-L1\00", align 1
@.str398 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LC1\00", align 1
@.str399 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LX1\00", align 1
@.str400 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LX2\00", align 1
@.str401 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LX3\00", align 1
@.str402 = private unnamed_addr constant [20 x i8] c"Panasonic DMC-FX150\00", align 1
@.str403 = private unnamed_addr constant [17 x i8] c"Panasonic DMC-G1\00", align 1
@.str404 = private unnamed_addr constant [15 x i8] c"Phase One H 20\00", align 1
@.str405 = private unnamed_addr constant [14 x i8] c"Phase One P 2\00", align 1
@.str406 = private unnamed_addr constant [15 x i8] c"Phase One P 30\00", align 1
@.str407 = private unnamed_addr constant [15 x i8] c"Phase One P 45\00", align 1
@.str408 = private unnamed_addr constant [13 x i8] c"SAMSUNG GX-1\00", align 1
@.str409 = private unnamed_addr constant [6 x i8] c"Sinar\00", align 1
@.str410 = private unnamed_addr constant [14 x i8] c"SONY DSC-F828\00", align 1
@.str411 = private unnamed_addr constant [12 x i8] c"SONY DSC-R1\00", align 1
@.str412 = private unnamed_addr constant [12 x i8] c"SONY DSC-V3\00", align 1
@.str413 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A100\00", align 1
@.str414 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A200\00", align 1
@.str415 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A300\00", align 1
@.str416 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A350\00", align 1
@.str417 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A700\00", align 1
@.str418 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A900\00", align 1
@.str419 = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@simple_coeff.table = internal constant [4 x [12 x float]] [[12 x float] [float 0x3FF67381E0000000, float 0xBFCC8E8A80000000, float 0xBFBA027520000000, float 0xBFE0D77320000000, float 0x3FF7B4A240000000, float 0x3F916872C0000000, float 0xBF86F00680000000, float 0x3F92BD3C40000000, float 0x3FED295EA0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [12 x float] [float 2.250000e+00, float 7.500000e-01, float -1.750000e+00, float -2.500000e-01, float -2.500000e-01, float 7.500000e-01, float 7.500000e-01, float -2.500000e-01, float -2.500000e-01, float -1.750000e+00, float 7.500000e-01, float 2.250000e+00], [12 x float] [float 0x3FFE49BA60000000, float 0xBFDAC08320000000, float 0xBFDE76C8C0000000, float 0xBFDFAE1480000000, float 0x3FFC5E3540000000, float 0xBFD1CAC080000000, float 0xBFF045A1C0000000, float 0xBFE4F5C280000000, float 0x4005604180000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [12 x float] [float 0xBFFEFB00C0000000, float 0x3FFCCE9D60000000, float 0xBFF72CFFA0000000, float 0x4004ACB200000000, float 0x3FF67C6000000000, float 0xBFE0CC6E60000000, float 0xBFD2807360000000, float 0x3FDA27D020000000, float 0xBFF3478960000000, float 0x3FF1511E00000000, float 0x400787EB60000000, float 0xBFFD196A60000000]], align 16
@identify.table = internal constant [68 x %struct.anon.4] [%struct.anon.4 { i32 62464, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"DC20\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 124928, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"DC20\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1652736, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"DCS200\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 4159302, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C330\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 4162462, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C330\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 460800, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603v\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 614400, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603v\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6163328, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6166488, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 9116448, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603y\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 311696, [12 x i8] c"ST Micro\00\00\00\00", [19 x i8] c"STV680 VGA\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 614400, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"KAI-0340\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 787456, [12 x i8] c"Creative\00\00\00\00", [19 x i8] c"PC-CAM 600\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1138688, [12 x i8] c"Minolta\00\00\00\00\00", [19 x i8] c"RD175\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 3840000, [12 x i8] c"Foculus\00\00\00\00\00", [19 x i8] c"531C\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 786432, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-080C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1447680, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-145C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1920000, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-201C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 5067304, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-510C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 10134608, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-510C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 16157136, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-810C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1409024, [12 x i8] c"Sony\00\00\00\00\00\00\00\00", [19 x i8] c"XCD-SX910CR\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 2818048, [12 x i8] c"Sony\00\00\00\00\00\00\00\00", [19 x i8] c"XCD-SX910CR\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 3884928, [12 x i8] c"Micron\00\00\00\00\00\00", [19 x i8] c"2010\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6624000, [12 x i8] c"Pixelink\00\00\00\00", [19 x i8] c"A782\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 13248000, [12 x i8] c"Pixelink\00\00\00\00", [19 x i8] c"A782\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6291456, [12 x i8] c"RoverShot\00\00\00", [19 x i8] c"3320AF\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6553440, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A460\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6653280, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A530\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6573120, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A610\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 9219600, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A620\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 10341600, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A720\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 10383120, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A630\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 12945240, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A640\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 15636240, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A650\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 5298000, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot SD300\00\00\00\00", i8 0 }, %struct.anon.4 { i32 7710960, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot S3 IS\00\00\00\00", i8 0 }, %struct.anon.4 { i32 5939200, [12 x i8] c"OLYMPUS\00\00\00\00\00", [19 x i8] c"C770UZ\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1581060, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E900\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 2465792, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E950\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 2940928, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E2100\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4771840, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E990\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4775936, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E3700\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 5869568, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E4300\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 5865472, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E4500\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7438336, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E5000\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 8998912, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"COOLPIX S6\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 1976352, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-2000UX\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 3217760, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-3*00EX\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 6218368, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-5700\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 6054400, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-R41\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7530816, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-R51\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7684000, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-4000\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4948608, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-S100\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7542528, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-Z50\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7753344, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-Z55\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7426656, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-P505\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 9313536, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-P600\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 10979200, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-P700\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 3178560, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio S\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4841984, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio S\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 6114240, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio S4\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 10702848, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio 750Z\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 16098048, [12 x i8] c"SAMSUNG\00\00\00\00\00", [19 x i8] c"S85\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 16215552, [12 x i8] c"SAMSUNG\00\00\00\00\00", [19 x i8] c"S85\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 12582980, [12 x i8] c"Sinar\00\00\00\00\00\00\00", [19 x i8] zeroinitializer, i8 0 }, %struct.anon.4 { i32 33292868, [12 x i8] c"Sinar\00\00\00\00\00\00\00", [19 x i8] zeroinitializer, i8 0 }, %struct.anon.4 { i32 44390468, [12 x i8] c"Sinar\00\00\00\00\00\00\00", [19 x i8] zeroinitializer, i8 0 }], align 16
@identify.corp = internal global [15 x i8*] [i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str100, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str420, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str105, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str421, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str422, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str423, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str424, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str409, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str189, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str425, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str426, i32 0, i32 0)], align 16
@.str420 = private unnamed_addr constant [6 x i8] c"Kodak\00", align 1
@.str421 = private unnamed_addr constant [8 x i8] c"MINOLTA\00", align 1
@.str422 = private unnamed_addr constant [8 x i8] c"Minolta\00", align 1
@.str423 = private unnamed_addr constant [7 x i8] c"Konica\00", align 1
@.str424 = private unnamed_addr constant [6 x i8] c"CASIO\00", align 1
@.str425 = private unnamed_addr constant [8 x i8] c"SAMSUNG\00", align 1
@.str426 = private unnamed_addr constant [7 x i8] c"Mamiya\00", align 1
@zero_is_bad = common global i32 0, align 4
@.str427 = private unnamed_addr constant [9 x i8] c"HEAPCCDR\00", align 1
@.str428 = private unnamed_addr constant [5 x i8] c"\FF\D8\FF\E1\00", align 1
@.str429 = private unnamed_addr constant [5 x i8] c"Exif\00", align 1
@.str430 = private unnamed_addr constant [8 x i8] c"ARECOYK\00", align 1
@.str431 = private unnamed_addr constant [7 x i8] c"Contax\00", align 1
@.str432 = private unnamed_addr constant [10 x i8] c"N Digital\00", align 1
@.str433 = private unnamed_addr constant [4 x i8] c"PXN\00", align 1
@.str434 = private unnamed_addr constant [9 x i8] c"Logitech\00", align 1
@.str435 = private unnamed_addr constant [16 x i8] c"Fotoman Pixtura\00", align 1
@.str436 = private unnamed_addr constant [5 x i8] c"qktk\00", align 1
@.str437 = private unnamed_addr constant [6 x i8] c"Apple\00", align 1
@.str438 = private unnamed_addr constant [14 x i8] c"QuickTake 100\00", align 1
@.str439 = private unnamed_addr constant [5 x i8] c"qktn\00", align 1
@.str440 = private unnamed_addr constant [14 x i8] c"QuickTake 150\00", align 1
@.str441 = private unnamed_addr constant [7 x i8] c"\00\01\00\01\00@\00", align 1
@.str442 = private unnamed_addr constant [10 x i8] c"DSC-Image\00", align 1
@.str443 = private unnamed_addr constant [5 x i8] c"PWAD\00", align 1
@.str444 = private unnamed_addr constant [5 x i8] c"\00MRM\00", align 1
@.str445 = private unnamed_addr constant [5 x i8] c"FOVb\00", align 1
@.str446 = private unnamed_addr constant [3 x i8] c"CI\00", align 1
@.str447 = private unnamed_addr constant [16 x i8] c"Digital Camera \00", align 1
@.str448 = private unnamed_addr constant [14 x i8] c"PowerShot 600\00", align 1
@.str449 = private unnamed_addr constant [13 x i8] c"PowerShot A5\00", align 1
@.str450 = private unnamed_addr constant [18 x i8] c"PowerShot A5 Zoom\00", align 1
@.str451 = private unnamed_addr constant [14 x i8] c"PowerShot A50\00", align 1
@.str452 = private unnamed_addr constant [16 x i8] c"PowerShot Pro70\00", align 1
@.str453 = private unnamed_addr constant [16 x i8] c"PowerShot SD300\00", align 1
@.str454 = private unnamed_addr constant [15 x i8] c"PowerShot A460\00", align 1
@.str455 = private unnamed_addr constant [15 x i8] c"PowerShot A530\00", align 1
@.str456 = private unnamed_addr constant [15 x i8] c"PowerShot A610\00", align 1
@.str457 = private unnamed_addr constant [6 x i8] c"S2 IS\00", align 1
@.str458 = private unnamed_addr constant [15 x i8] c"PowerShot A620\00", align 1
@.str459 = private unnamed_addr constant [15 x i8] c"PowerShot A720\00", align 1
@.str460 = private unnamed_addr constant [15 x i8] c"PowerShot A630\00", align 1
@.str461 = private unnamed_addr constant [15 x i8] c"PowerShot A640\00", align 1
@.str462 = private unnamed_addr constant [15 x i8] c"PowerShot A650\00", align 1
@.str463 = private unnamed_addr constant [16 x i8] c"PowerShot S3 IS\00", align 1
@.str464 = private unnamed_addr constant [19 x i8] c"PowerShot Pro90 IS\00", align 1
@.str465 = private unnamed_addr constant [13 x i8] c"PowerShot G1\00", align 1
@.str466 = private unnamed_addr constant [9 x i8] c"EOS 300D\00", align 1
@.str467 = private unnamed_addr constant [11 x i8] c"EOS D2000C\00", align 1
@.str468 = private unnamed_addr constant [9 x i8] c"EOS 350D\00", align 1
@.str469 = private unnamed_addr constant [9 x i8] c"EOS 400D\00", align 1
@.str470 = private unnamed_addr constant [10 x i8] c"EOS 1000D\00", align 1
@.str471 = private unnamed_addr constant [9 x i8] c"EOS 450D\00", align 1
@.str472 = private unnamed_addr constant [3 x i8] c"D1\00", align 1
@.str473 = private unnamed_addr constant [4 x i8] c"D1X\00", align 1
@.str474 = private unnamed_addr constant [5 x i8] c"D40X\00", align 1
@.str475 = private unnamed_addr constant [4 x i8] c"D60\00", align 1
@.str476 = private unnamed_addr constant [4 x i8] c"D80\00", align 1
@.str477 = private unnamed_addr constant [3 x i8] c"D3\00", align 1
@.str478 = private unnamed_addr constant [5 x i8] c"D700\00", align 1
@.str479 = private unnamed_addr constant [4 x i8] c"D40\00", align 1
@.str480 = private unnamed_addr constant [4 x i8] c"D50\00", align 1
@.str481 = private unnamed_addr constant [4 x i8] c"D70\00", align 1
@.str482 = private unnamed_addr constant [4 x i8] c"D90\00", align 1
@.str483 = private unnamed_addr constant [5 x i8] c"D100\00", align 1
@.str484 = private unnamed_addr constant [5 x i8] c"D200\00", align 1
@.str485 = private unnamed_addr constant [4 x i8] c"D2H\00", align 1
@.str486 = private unnamed_addr constant [4 x i8] c"D2X\00", align 1
@.str487 = private unnamed_addr constant [5 x i8] c"D300\00", align 1
@.str488 = private unnamed_addr constant [14 x i8] c"COOLPIX P6000\00", align 1
@.str489 = private unnamed_addr constant [5 x i8] c"E950\00", align 1
@.str490 = private unnamed_addr constant [5 x i8] c"E995\00", align 1
@.str491 = private unnamed_addr constant [6 x i8] c"E2100\00", align 1
@.str492 = private unnamed_addr constant [6 x i8] c"E2500\00", align 1
@.str493 = private unnamed_addr constant [11 x i8] c"Optio 33WR\00", align 1
@.str494 = private unnamed_addr constant [10 x i8] c"DiMAGE Z2\00", align 1
@.str495 = private unnamed_addr constant [6 x i8] c"E4500\00", align 1
@.str496 = private unnamed_addr constant [14 x i8] c"FinePix S5100\00", align 1
@.str497 = private unnamed_addr constant [14 x i8] c"FinePix S5500\00", align 1
@.str498 = private unnamed_addr constant [6 x i8] c"S2Pro\00", align 1
@.str499 = private unnamed_addr constant [7 x i8] c" S2Pro\00", align 1
@.str500 = private unnamed_addr constant [6 x i8] c"RD175\00", align 1
@.str501 = private unnamed_addr constant [8 x i8] c"KD-400Z\00", align 1
@.str502 = private unnamed_addr constant [8 x i8] c"KD-510Z\00", align 1
@.str503 = private unnamed_addr constant [9 x i8] c"DiMAGE A\00", align 1
@.str504 = private unnamed_addr constant [6 x i8] c"ALPHA\00", align 1
@.str505 = private unnamed_addr constant [6 x i8] c"DYNAX\00", align 1
@.str506 = private unnamed_addr constant [7 x i8] c"MAXXUM\00", align 1
@.str507 = private unnamed_addr constant [12 x i8] c"DYNAX %-10s\00", align 1
@.str508 = private unnamed_addr constant [9 x i8] c"DiMAGE G\00", align 1
@.str509 = private unnamed_addr constant [8 x i8] c"*ist DS\00", align 1
@.str510 = private unnamed_addr constant [5 x i8] c"K20D\00", align 1
@.str511 = private unnamed_addr constant [8 x i8] c"Optio S\00", align 1
@.str512 = private unnamed_addr constant [11 x i8] c"Optio 750Z\00", align 1
@.str513 = private unnamed_addr constant [4 x i8] c"S85\00", align 1
@.str514 = private unnamed_addr constant [11 x i8] c"STV680 VGA\00", align 1
@.str515 = private unnamed_addr constant [9 x i8] c"KAI-0340\00", align 1
@.str516 = private unnamed_addr constant [4 x i8] c"N95\00", align 1
@.str517 = private unnamed_addr constant [5 x i8] c"531C\00", align 1
@.str518 = private unnamed_addr constant [7 x i8] c"F-080C\00", align 1
@.str519 = private unnamed_addr constant [7 x i8] c"F-145C\00", align 1
@.str520 = private unnamed_addr constant [7 x i8] c"F-201C\00", align 1
@.str521 = private unnamed_addr constant [7 x i8] c"F-510C\00", align 1
@.str522 = private unnamed_addr constant [7 x i8] c"F-810C\00", align 1
@.str523 = private unnamed_addr constant [12 x i8] c"XCD-SX910CR\00", align 1
@.str524 = private unnamed_addr constant [5 x i8] c"2010\00", align 1
@.str525 = private unnamed_addr constant [5 x i8] c"A782\00", align 1
@.str526 = private unnamed_addr constant [7 x i8] c"3320AF\00", align 1
@.str527 = private unnamed_addr constant [4 x i8] c"ISG\00", align 1
@.str528 = private unnamed_addr constant [5 x i8] c"V96C\00", align 1
@.str529 = private unnamed_addr constant [5 x i8] c"8BPS\00", align 1
@.str530 = private unnamed_addr constant [5 x i8] c"RBTG\00", align 1
@.str531 = private unnamed_addr constant [11 x i8] c"CatchLight\00", align 1
@.str532 = private unnamed_addr constant [8 x i8] c"DMC-LC1\00", align 1
@.str533 = private unnamed_addr constant [8 x i8] c"DMC-FZ8\00", align 1
@.str534 = private unnamed_addr constant [7 x i8] c"DMC-L1\00", align 1
@.str535 = private unnamed_addr constant [9 x i8] c"DMC-FZ30\00", align 1
@.str536 = private unnamed_addr constant [9 x i8] c"DMC-FZ18\00", align 1
@.str537 = private unnamed_addr constant [9 x i8] c"DMC-FZ50\00", align 1
@.str538 = private unnamed_addr constant [8 x i8] c"DMC-L10\00", align 1
@.str539 = private unnamed_addr constant [8 x i8] c"DMC-LX3\00", align 1
@.str540 = private unnamed_addr constant [8 x i8] c"DMC-LX1\00", align 1
@.str541 = private unnamed_addr constant [7 x i8] c"DMC-G1\00", align 1
@.str542 = private unnamed_addr constant [8 x i8] c"DMC-LX2\00", align 1
@.str543 = private unnamed_addr constant [10 x i8] c"DMC-FX150\00", align 1
@.str544 = private unnamed_addr constant [7 x i8] c"C770UZ\00", align 1
@.str545 = private unnamed_addr constant [5 x i8] c"E-10\00", align 1
@.str546 = private unnamed_addr constant [5 x i8] c"E-20\00", align 1
@.str547 = private unnamed_addr constant [6 x i8] c"E-300\00", align 1
@.str548 = private unnamed_addr constant [6 x i8] c"E-500\00", align 1
@.str549 = private unnamed_addr constant [6 x i8] c"E-330\00", align 1
@.str550 = private unnamed_addr constant [8 x i8] c"SP550UZ\00", align 1
@.str551 = private unnamed_addr constant [9 x i8] c"DSC-F828\00", align 1
@.str552 = private unnamed_addr constant [5 x i8] c"RGBE\00", align 1
@.str553 = private unnamed_addr constant [7 x i8] c"DSC-V3\00", align 1
@.str554 = private unnamed_addr constant [7 x i8] c"DSC-R1\00", align 1
@.str555 = private unnamed_addr constant [10 x i8] c"DSLR-A350\00", align 1
@.str556 = private unnamed_addr constant [6 x i8] c"C603v\00", align 1
@.str557 = private unnamed_addr constant [6 x i8] c"C603y\00", align 1
@.str558 = private unnamed_addr constant [5 x i8] c"C603\00", align 1
@.str559 = private unnamed_addr constant [5 x i8] c"C330\00", align 1
@.str560 = private unnamed_addr constant [7 x i8] c"NC2000\00", align 1
@.str561 = private unnamed_addr constant [9 x i8] c"EOSDCS3B\00", align 1
@.str562 = private unnamed_addr constant [8 x i8] c"EOSDCS1\00", align 1
@.str563 = private unnamed_addr constant [7 x i8] c"DCS420\00", align 1
@.str564 = private unnamed_addr constant [7 x i8] c"DCS460\00", align 1
@.str565 = private unnamed_addr constant [8 x i8] c"DCS460A\00", align 1
@.str566 = private unnamed_addr constant [8 x i8] c"DCS660M\00", align 1
@.str567 = private unnamed_addr constant [8 x i8] c"DCS760M\00", align 1
@.str568 = private unnamed_addr constant [4 x i8] c"20X\00", align 1
@.str569 = private unnamed_addr constant [5 x i8] c"MYCY\00", align 1
@.str570 = private unnamed_addr constant [5 x i8] c"DC25\00", align 1
@.str571 = private unnamed_addr constant [3 x i8] c"40\00", align 1
@.str572 = private unnamed_addr constant [5 x i8] c"DC40\00", align 1
@.str573 = private unnamed_addr constant [5 x i8] c"DC50\00", align 1
@.str574 = private unnamed_addr constant [6 x i8] c"DC120\00", align 1
@.str575 = private unnamed_addr constant [7 x i8] c"DCS200\00", align 1
@.str576 = private unnamed_addr constant [4 x i8] c"200\00", align 1
@.str577 = private unnamed_addr constant [11 x i8] c"PC-CAM 600\00", align 1
@.str578 = private unnamed_addr constant [10 x i8] c"QV-2000UX\00", align 1
@.str579 = private unnamed_addr constant [8 x i8] c"QV-4000\00", align 1
@.str580 = private unnamed_addr constant [8 x i8] c"QV-5700\00", align 1
@.str581 = private unnamed_addr constant [7 x i8] c"QV-R41\00", align 1
@.str582 = private unnamed_addr constant [7 x i8] c"QV-R51\00", align 1
@.str583 = private unnamed_addr constant [8 x i8] c"EX-S100\00", align 1
@.str584 = private unnamed_addr constant [7 x i8] c"EX-Z50\00", align 1
@.str585 = private unnamed_addr constant [7 x i8] c"EX-Z55\00", align 1
@.str586 = private unnamed_addr constant [8 x i8] c"EX-P505\00", align 1
@.str587 = private unnamed_addr constant [8 x i8] c"EX-P700\00", align 1
@.str588 = private unnamed_addr constant [6 x i8] c"%dx%d\00", align 1
@.str589 = private unnamed_addr constant [40 x i8] c"%s: You must link dcraw with libjpeg!!\0A\00", align 1
@.str590 = private unnamed_addr constant [4 x i8] c"RGB\00", align 1
@.str591 = private unnamed_addr constant [5 x i8] c"GMCY\00", align 1
@convert_to_rgb.xyzd50_srgb = internal constant [3 x [3 x double]] [[3 x double] [double 4.360830e-01, double 3.850830e-01, double 1.430550e-01], [3 x double] [double 2.225070e-01, double 7.168880e-01, double 6.060800e-02], [3 x double] [double 1.393000e-02, double 9.709700e-02, double 7.140220e-01]], align 16
@convert_to_rgb.rgb_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00]], align 16
@convert_to_rgb.adobe_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 7.151460e-01, double 2.848560e-01, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 4.116600e-02, double 9.588390e-01]], align 16
@convert_to_rgb.wide_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 5.930870e-01, double 4.047100e-01, double 2.206000e-03], [3 x double] [double 9.541300e-02, double 8.431490e-01, double 6.143900e-02], [3 x double] [double 1.162100e-02, double 6.909100e-02, double 9.192880e-01]], align 16
@convert_to_rgb.prophoto_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 5.293170e-01, double 3.300920e-01, double 1.405880e-01], [3 x double] [double 9.836800e-02, double 8.734650e-01, double 2.816900e-02], [3 x double] [double 1.687900e-02, double 1.176630e-01, double 8.654570e-01]], align 16
@convert_to_rgb.out_rgb = internal global [5 x [3 x double]*] [[3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.rgb_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.adobe_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.wide_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.prophoto_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @xyz_rgb, i32 0, i32 0)], align 16
@convert_to_rgb.name = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8]* @.str592, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str593, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str594, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str595, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str596, i32 0, i32 0)], align 16
@.str592 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str593 = private unnamed_addr constant [17 x i8] c"Adobe RGB (1998)\00", align 1
@.str594 = private unnamed_addr constant [14 x i8] c"WideGamut D65\00", align 1
@.str595 = private unnamed_addr constant [13 x i8] c"ProPhoto D65\00", align 1
@.str596 = private unnamed_addr constant [4 x i8] c"XYZ\00", align 1
@convert_to_rgb.phead = internal constant [20 x i32] [i32 1024, i32 0, i32 34603008, i32 1835955314, i32 1380401696, i32 1482250784, i32 0, i32 0, i32 0, i32 1633907568, i32 0, i32 0, i32 1852796517, i32 0, i32 0, i32 0, i32 0, i32 63190, i32 65536, i32 54061], align 16
@convert_to_rgb.pbody = private unnamed_addr constant [31 x i32] [i32 10, i32 1668313716, i32 0, i32 36, i32 1684370275, i32 0, i32 40, i32 2004119668, i32 0, i32 20, i32 1651208308, i32 0, i32 20, i32 1918128707, i32 0, i32 14, i32 1733579331, i32 0, i32 14, i32 1649693251, i32 0, i32 14, i32 1918392666, i32 0, i32 20, i32 1733843290, i32 0, i32 20, i32 1649957210, i32 0, i32 20], align 16
@convert_to_rgb.pwhite = internal constant [3 x i32] [i32 62289, i32 65536, i32 71372], align 4
@convert_to_rgb.pcurve = private unnamed_addr constant [4 x i32] [i32 1668641398, i32 0, i32 1, i32 16777216], align 16
@oprof = common global i32* null, align 8
@.str597 = private unnamed_addr constant [17 x i8] c"convert_to_rgb()\00", align 1
@.str598 = private unnamed_addr constant [24 x i8] c"auto-generated by dcraw\00", align 1
@.str599 = private unnamed_addr constant [24 x i8] c"Building histograms...\0A\00", align 1
@.str600 = private unnamed_addr constant [32 x i8] c"Converting to %s colorspace...\0A\00", align 1
@histogram = common global [4 x [8192 x i32]] zeroinitializer, align 16
@.str601 = private unnamed_addr constant [30 x i8] c"Rotating image 45 degrees...\0A\00", align 1
@.str602 = private unnamed_addr constant [14 x i8] c"fuji_rotate()\00", align 1
@.str603 = private unnamed_addr constant [25 x i8] c"Stretching the image...\0A\00", align 1
@.str604 = private unnamed_addr constant [10 x i8] c"stretch()\00", align 1
@.str605 = private unnamed_addr constant [9 x i8] c"12435867\00", align 1
@.str606 = private unnamed_addr constant [12 x i8] c"dcraw v8.93\00", align 1
@.str607 = private unnamed_addr constant [30 x i8] c"%04d:%02d:%02d %02d:%02d:%02d\00", align 1
@.str608 = private unnamed_addr constant [13 x i8] c"jpeg_thumb()\00", align 1
@.str609 = private unnamed_addr constant [11 x i8] c"\FF\E1  Exif\00\00\00", align 1
@.str610 = private unnamed_addr constant [17 x i8] c"write_ppm_tiff()\00", align 1
@.str611 = private unnamed_addr constant [61 x i8] c"P7\0AWIDTH %d\0AHEIGHT %d\0ADEPTH %d\0AMAXVAL %d\0ATUPLTYPE %s\0AENDHDR\0A\00", align 1
@.str612 = private unnamed_addr constant [14 x i8] c"P%d\0A%d %d\0A%d\0A\00", align 1
@.str613 = private unnamed_addr constant [7 x i8] c"TZ=UTC\00", align 1
@.str614 = private unnamed_addr constant [31 x i8] c"\0ARaw photo decoder \22dcraw\22 v%s\00", align 1
@.str615 = private unnamed_addr constant [5 x i8] c"8.93\00", align 1
@.str616 = private unnamed_addr constant [43 x i8] c"\0Aby Dave Coffin, dcoffin a cybercom o net\0A\00", align 1
@.str617 = private unnamed_addr constant [36 x i8] c"\0AUsage:  %s [OPTION]... [FILE]...\0A\0A\00", align 1
@.str618 = private unnamed_addr constant [33 x i8] c"-v        Print verbose messages\00", align 1
@.str619 = private unnamed_addr constant [46 x i8] c"-c        Write image data to standard output\00", align 1
@.str620 = private unnamed_addr constant [43 x i8] c"-e        Extract embedded thumbnail image\00", align 1
@.str621 = private unnamed_addr constant [47 x i8] c"-i        Identify files without decoding them\00", align 1
@.str622 = private unnamed_addr constant [43 x i8] c"-i -v     Identify files and show metadata\00", align 1
@.str623 = private unnamed_addr constant [48 x i8] c"-z        Change file dates to camera timestamp\00", align 1
@.str624 = private unnamed_addr constant [48 x i8] c"-w        Use camera white balance, if possible\00", align 1
@.str625 = private unnamed_addr constant [52 x i8] c"-a        Average the whole image for white balance\00", align 1
@.str626 = private unnamed_addr constant [50 x i8] c"-A <x y w h> Average a grey box for white balance\00", align 1
@.str627 = private unnamed_addr constant [38 x i8] c"-r <r g b g> Set custom white balance\00", align 1
@.str628 = private unnamed_addr constant [49 x i8] c"+M/-M     Use/don't use an embedded color matrix\00", align 1
@.str629 = private unnamed_addr constant [39 x i8] c"-C <r b>  Correct chromatic aberration\00", align 1
@.str630 = private unnamed_addr constant [50 x i8] c"-P <file> Fix the dead pixels listed in this file\00", align 1
@.str631 = private unnamed_addr constant [47 x i8] c"-K <file> Subtract dark frame (16-bit raw PGM)\00", align 1
@.str632 = private unnamed_addr constant [33 x i8] c"-k <num>  Set the darkness level\00", align 1
@.str633 = private unnamed_addr constant [35 x i8] c"-S <num>  Set the saturation level\00", align 1
@.str634 = private unnamed_addr constant [46 x i8] c"-n <num>  Set threshold for wavelet denoising\00", align 1
@.str635 = private unnamed_addr constant [65 x i8] c"-H [0-9]  Highlight mode (0=clip, 1=unclip, 2=blend, 3+=rebuild)\00", align 1
@.str636 = private unnamed_addr constant [54 x i8] c"-t [0-7]  Flip image (0=none, 3=180, 5=90CCW, 6=90CW)\00", align 1
@.str637 = private unnamed_addr constant [63 x i8] c"-o [0-5]  Output colorspace (raw,sRGB,Adobe,Wide,ProPhoto,XYZ)\00", align 1
@.str638 = private unnamed_addr constant [53 x i8] c"-d        Document mode (no color, no interpolation)\00", align 1
@.str639 = private unnamed_addr constant [54 x i8] c"-D        Document mode without scaling (totally raw)\00", align 1
@.str640 = private unnamed_addr constant [45 x i8] c"-j        Don't stretch or rotate raw pixels\00", align 1
@.str641 = private unnamed_addr constant [49 x i8] c"-W        Don't automatically brighten the image\00", align 1
@.str642 = private unnamed_addr constant [44 x i8] c"-b <num>  Adjust brightness (default = 1.0)\00", align 1
@.str643 = private unnamed_addr constant [55 x i8] c"-g <p ts> Set custom gamma curve (default = 2.222 4.5)\00", align 1
@.str644 = private unnamed_addr constant [40 x i8] c"-q [0-3]  Set the interpolation quality\00", align 1
@.str645 = private unnamed_addr constant [58 x i8] c"-h        Half-size color image (twice as fast as \22-q 0\22)\00", align 1
@.str646 = private unnamed_addr constant [42 x i8] c"-f        Interpolate RGGB as four colors\00", align 1
@.str647 = private unnamed_addr constant [51 x i8] c"-m <num>  Apply a 3x3 median filter to R-G and B-G\00", align 1
@.str648 = private unnamed_addr constant [57 x i8] c"-s [0..N-1] Select one raw image or \22all\22 from each file\00", align 1
@.str649 = private unnamed_addr constant [58 x i8] c"-4        Write 16-bit linear instead of 8-bit with gamma\00", align 1
@.str650 = private unnamed_addr constant [36 x i8] c"-T        Write TIFF instead of PPM\00", align 1
@.str651 = private unnamed_addr constant [13 x i8] c"nbrkStqmHACg\00", align 1
@.str652 = private unnamed_addr constant [13 x i8] c"114111111422\00", align 1
@.str653 = private unnamed_addr constant [31 x i8] c"Non-numeric argument to \22-%c\22\0A\00", align 1
@.str654 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str655 = private unnamed_addr constant [23 x i8] c"Unknown option \22-%c\22.\0A\00", align 1
@.str656 = private unnamed_addr constant [22 x i8] c"No files to process.\0A\00", align 1
@.str657 = private unnamed_addr constant [42 x i8] c"Will not write an image to the terminal!\0A\00", align 1
@stdout = external global %struct._IO_FILE*
@.str658 = private unnamed_addr constant [22 x i8] c"%s has no timestamp.\0A\00", align 1
@.str659 = private unnamed_addr constant [14 x i8] c"%10ld%10d %s\0A\00", align 1
@.str660 = private unnamed_addr constant [20 x i8] c"%s time set to %d.\0A\00", align 1
@write_fun = common global void (%struct._IO_FILE*)* null, align 8
@.str661 = private unnamed_addr constant [22 x i8] c"%s has no thumbnail.\0A\00", align 1
@.str662 = private unnamed_addr constant [15 x i8] c"\0AFilename: %s\0A\00", align 1
@.str663 = private unnamed_addr constant [14 x i8] c"Timestamp: %s\00", align 1
@.str664 = private unnamed_addr constant [15 x i8] c"Camera: %s %s\0A\00", align 1
@.str665 = private unnamed_addr constant [11 x i8] c"Owner: %s\0A\00", align 1
@.str666 = private unnamed_addr constant [14 x i8] c"DNG Version: \00", align 1
@.str667 = private unnamed_addr constant [5 x i8] c"%d%c\00", align 1
@.str668 = private unnamed_addr constant [15 x i8] c"ISO speed: %d\0A\00", align 1
@.str669 = private unnamed_addr constant [10 x i8] c"Shutter: \00", align 1
@.str670 = private unnamed_addr constant [3 x i8] c"1/\00", align 1
@.str671 = private unnamed_addr constant [11 x i8] c"%0.1f sec\0A\00", align 1
@.str672 = private unnamed_addr constant [19 x i8] c"Aperture: f/%0.1f\0A\00", align 1
@.str673 = private unnamed_addr constant [24 x i8] c"Focal length: %0.1f mm\0A\00", align 1
@.str674 = private unnamed_addr constant [26 x i8] c"Embedded ICC profile: %s\0A\00", align 1
@.str675 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str676 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str677 = private unnamed_addr constant [26 x i8] c"Number of raw images: %d\0A\00", align 1
@.str678 = private unnamed_addr constant [27 x i8] c"Pixel Aspect Ratio: %0.6f\0A\00", align 1
@.str679 = private unnamed_addr constant [23 x i8] c"Thumb size:  %4d x %d\0A\00", align 1
@.str680 = private unnamed_addr constant [23 x i8] c"Full size:   %4d x %d\0A\00", align 1
@.str681 = private unnamed_addr constant [23 x i8] c"Cannot decode file %s\0A\00", align 1
@.str682 = private unnamed_addr constant [23 x i8] c"Image size:  %4d x %d\0A\00", align 1
@.str683 = private unnamed_addr constant [23 x i8] c"Output size: %4d x %d\0A\00", align 1
@.str684 = private unnamed_addr constant [15 x i8] c"Raw colors: %d\00", align 1
@.str685 = private unnamed_addr constant [18 x i8] c"\0AFilter pattern: \00", align 1
@.str686 = private unnamed_addr constant [23 x i8] c"\0ADaylight multipliers:\00", align 1
@.str687 = private unnamed_addr constant [21 x i8] c"\0ACamera multipliers:\00", align 1
@.str688 = private unnamed_addr constant [22 x i8] c"%s is a %s %s image.\0A\00", align 1
@.str689 = private unnamed_addr constant [7 x i8] c"main()\00", align 1
@.str690 = private unnamed_addr constant [33 x i8] c"Loading %s %s image from %s ...\0A\00", align 1
@.str691 = private unnamed_addr constant [43 x i8] c"%s: \22-s %d\22 requests a nonexistent image!\0A\00", align 1
@.str692 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str693 = private unnamed_addr constant [20 x i8] c".pgm\00.ppm\00.ppm\00.pam\00", align 1
@.str694 = private unnamed_addr constant [16 x i8] c"standard output\00", align 1
@.str695 = private unnamed_addr constant [6 x i8] c"_%0*d\00", align 1
@.str696 = private unnamed_addr constant [7 x i8] c".thumb\00", align 1
@.str697 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str698 = private unnamed_addr constant [24 x i8] c"Writing data to %s ...\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fc(i32 %row, i32 %col) #0 {
  %1 = load i32* @filters, align 4
  %2 = icmp ne i32 %1, 1
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %0
  %4 = load i32* @filters, align 4
  %5 = shl i32 %row, 1
  %6 = and i32 %5, 14
  %7 = and i32 %col, 1
  %8 = add nsw i32 %6, %7
  %9 = shl i32 %8, 1
  %10 = lshr i32 %4, %9
  %11 = and i32 %10, 3
  br label %27

; <label>:12                                      ; preds = %0
  %13 = load i16* @left_margin, align 2
  %14 = zext i16 %13 to i32
  %15 = add nsw i32 %col, %14
  %16 = and i32 %15, 15
  %17 = sext i32 %16 to i64
  %18 = load i16* @top_margin, align 2
  %19 = zext i16 %18 to i32
  %20 = add nsw i32 %row, %19
  %21 = and i32 %20, 15
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [16 x [16 x i8]]* @fc.filter, i32 0, i64 %22
  %24 = getelementptr inbounds [16 x i8]* %23, i32 0, i64 %17
  %25 = load i8* %24, align 1
  %26 = sext i8 %25 to i32
  br label %27

; <label>:27                                      ; preds = %12, %3
  %.0 = phi i32 [ %11, %3 ], [ %26, %12 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @merror(i8* %ptr, i8* %where) #0 {
  %1 = icmp ne i8* %ptr, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  ret void

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = load i8** @ifname, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8]* @.str, i32 0, i32 0), i8* %5, i8* %where)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0), i32 1) #8
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @longjmp(%struct.__jmp_buf_tag*, i32) #2

; Function Attrs: nounwind uwtable
define void @derror() #0 {
  %1 = load i32* @data_error, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %19, label %3

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = load i8** @ifname, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i8* %5)
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @feof(%struct._IO_FILE* %7) #4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %3
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([24 x i8]* @.str2, i32 0, i32 0))
  br label %18

; <label>:13                                      ; preds = %3
  %14 = load %struct._IO_FILE** @stderr, align 8
  %15 = load %struct._IO_FILE** @ifp, align 8
  %16 = call i64 @ftello(%struct._IO_FILE* %15)
  %17 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([26 x i8]* @.str3, i32 0, i32 0), i64 %16)
  br label %18

; <label>:18                                      ; preds = %13, %10
  br label %19

; <label>:19                                      ; preds = %18, %0
  store i32 1, i32* @data_error, align 4
  ret void
}

; Function Attrs: nounwind
declare i32 @feof(%struct._IO_FILE*) #3

declare i64 @ftello(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define zeroext i16 @sget2(i8* %s) #0 {
  %1 = load i16* @order, align 2
  %2 = sext i16 %1 to i32
  %3 = icmp eq i32 %2, 18761
  br i1 %3, label %4, label %14

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %s, i64 0
  %6 = load i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8* %s, i64 1
  %9 = load i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, 8
  %12 = or i32 %7, %11
  %13 = trunc i32 %12 to i16
  br label %24

; <label>:14                                      ; preds = %0
  %15 = getelementptr inbounds i8* %s, i64 0
  %16 = load i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl i32 %17, 8
  %19 = getelementptr inbounds i8* %s, i64 1
  %20 = load i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = or i32 %18, %21
  %23 = trunc i32 %22 to i16
  br label %24

; <label>:24                                      ; preds = %14, %4
  %.0 = phi i16 [ %13, %4 ], [ %23, %14 ]
  ret i16 %.0
}

; Function Attrs: nounwind uwtable
define zeroext i16 @get2() #0 {
  %str = alloca [2 x i8], align 1
  %1 = bitcast [2 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([2 x i8]* @get2.str, i32 0, i32 0), i64 2, i32 1, i1 false)
  %2 = getelementptr inbounds [2 x i8]* %str, i32 0, i32 0
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = call i64 @fread(i8* %2, i64 1, i64 2, %struct._IO_FILE* %3)
  %5 = getelementptr inbounds [2 x i8]* %str, i32 0, i32 0
  %6 = call zeroext i16 @sget2(i8* %5)
  ret i16 %6
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define i32 @sget4(i8* %s) #0 {
  %1 = load i16* @order, align 2
  %2 = sext i16 %1 to i32
  %3 = icmp eq i32 %2, 18761
  br i1 %3, label %4, label %23

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %s, i64 0
  %6 = load i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8* %s, i64 1
  %9 = load i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, 8
  %12 = or i32 %7, %11
  %13 = getelementptr inbounds i8* %s, i64 2
  %14 = load i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl i32 %15, 16
  %17 = or i32 %12, %16
  %18 = getelementptr inbounds i8* %s, i64 3
  %19 = load i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl i32 %20, 24
  %22 = or i32 %17, %21
  br label %42

; <label>:23                                      ; preds = %0
  %24 = getelementptr inbounds i8* %s, i64 0
  %25 = load i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl i32 %26, 24
  %28 = getelementptr inbounds i8* %s, i64 1
  %29 = load i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl i32 %30, 16
  %32 = or i32 %27, %31
  %33 = getelementptr inbounds i8* %s, i64 2
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl i32 %35, 8
  %37 = or i32 %32, %36
  %38 = getelementptr inbounds i8* %s, i64 3
  %39 = load i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = or i32 %37, %40
  br label %42

; <label>:42                                      ; preds = %23, %4
  %.0 = phi i32 [ %22, %4 ], [ %41, %23 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @get4() #0 {
  %str = alloca [4 x i8], align 1
  %1 = bitcast [4 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([4 x i8]* @get4.str, i32 0, i32 0), i64 4, i32 1, i1 false)
  %2 = getelementptr inbounds [4 x i8]* %str, i32 0, i32 0
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = call i64 @fread(i8* %2, i64 1, i64 4, %struct._IO_FILE* %3)
  %5 = getelementptr inbounds [4 x i8]* %str, i32 0, i32 0
  %6 = call i32 @sget4(i8* %5)
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define i32 @getint(i32 %type) #0 {
  %1 = icmp eq i32 %type, 3
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = call zeroext i16 @get2()
  %4 = zext i16 %3 to i32
  br label %7

; <label>:5                                       ; preds = %0
  %6 = call i32 @get4()
  br label %7

; <label>:7                                       ; preds = %5, %2
  %8 = phi i32 [ %4, %2 ], [ %6, %5 ]
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define float @int_to_float(i32 %i) #0 {
  %u = alloca %union.anon, align 4
  %1 = bitcast %union.anon* %u to i32*
  store i32 %i, i32* %1, align 4
  %2 = bitcast %union.anon* %u to float*
  %3 = load float* %2, align 4
  ret float %3
}

; Function Attrs: nounwind uwtable
define double @getreal(i32 %type) #0 {
  %u = alloca %union.anon.0, align 8
  switch i32 %type, label %62 [
    i32 3, label %1
    i32 4, label %4
    i32 5, label %7
    i32 8, label %16
    i32 9, label %19
    i32 10, label %22
    i32 11, label %31
    i32 12, label %35
  ]

; <label>:1                                       ; preds = %0
  %2 = call zeroext i16 @get2()
  %3 = uitofp i16 %2 to double
  br label %66

; <label>:4                                       ; preds = %0
  %5 = call i32 @get4()
  %6 = uitofp i32 %5 to double
  br label %66

; <label>:7                                       ; preds = %0
  %8 = call i32 @get4()
  %9 = uitofp i32 %8 to double
  %10 = bitcast %union.anon.0* %u to double*
  store double %9, double* %10, align 8
  %11 = bitcast %union.anon.0* %u to double*
  %12 = load double* %11, align 8
  %13 = call i32 @get4()
  %14 = uitofp i32 %13 to double
  %15 = fdiv double %12, %14
  br label %66

; <label>:16                                      ; preds = %0
  %17 = call zeroext i16 @get2()
  %18 = sitofp i16 %17 to double
  br label %66

; <label>:19                                      ; preds = %0
  %20 = call i32 @get4()
  %21 = sitofp i32 %20 to double
  br label %66

; <label>:22                                      ; preds = %0
  %23 = call i32 @get4()
  %24 = sitofp i32 %23 to double
  %25 = bitcast %union.anon.0* %u to double*
  store double %24, double* %25, align 8
  %26 = bitcast %union.anon.0* %u to double*
  %27 = load double* %26, align 8
  %28 = call i32 @get4()
  %29 = sitofp i32 %28 to double
  %30 = fdiv double %27, %29
  br label %66

; <label>:31                                      ; preds = %0
  %32 = call i32 @get4()
  %33 = call float @int_to_float(i32 %32)
  %34 = fpext float %33 to double
  br label %66

; <label>:35                                      ; preds = %0
  %36 = load i16* @order, align 2
  %37 = sext i16 %36 to i32
  %38 = icmp eq i32 %37, 18761
  %39 = zext i1 %38 to i32
  %40 = call zeroext i16 @ntohs(i16 zeroext 4660) #9
  %41 = zext i16 %40 to i32
  %42 = icmp eq i32 %41, 4660
  %43 = zext i1 %42 to i32
  %44 = icmp eq i32 %39, %43
  %45 = zext i1 %44 to i32
  %46 = mul nsw i32 7, %45
  br label %47

; <label>:47                                      ; preds = %57, %35
  %i.0 = phi i32 [ 0, %35 ], [ %58, %57 ]
  %48 = icmp slt i32 %i.0, 8
  br i1 %48, label %49, label %59

; <label>:49                                      ; preds = %47
  %50 = load %struct._IO_FILE** @ifp, align 8
  %51 = call i32 @getc_unlocked(%struct._IO_FILE* %50)
  %52 = trunc i32 %51 to i8
  %53 = xor i32 %i.0, %46
  %54 = sext i32 %53 to i64
  %55 = bitcast %union.anon.0* %u to [8 x i8]*
  %56 = getelementptr inbounds [8 x i8]* %55, i32 0, i64 %54
  store i8 %52, i8* %56, align 1
  br label %57

; <label>:57                                      ; preds = %49
  %58 = add nsw i32 %i.0, 1
  br label %47

; <label>:59                                      ; preds = %47
  %60 = bitcast %union.anon.0* %u to double*
  %61 = load double* %60, align 8
  br label %66

; <label>:62                                      ; preds = %0
  %63 = load %struct._IO_FILE** @ifp, align 8
  %64 = call i32 @getc_unlocked(%struct._IO_FILE* %63)
  %65 = sitofp i32 %64 to double
  br label %66

; <label>:66                                      ; preds = %62, %59, %31, %22, %19, %16, %7, %4, %1
  %.0 = phi double [ %65, %62 ], [ %61, %59 ], [ %34, %31 ], [ %30, %22 ], [ %21, %19 ], [ %18, %16 ], [ %15, %7 ], [ %6, %4 ], [ %3, %1 ]
  ret double %.0
}

; Function Attrs: nounwind readnone
declare zeroext i16 @ntohs(i16 zeroext) #5

declare i32 @getc_unlocked(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @read_shorts(i16* %pixel, i32 %count) #0 {
  %1 = bitcast i16* %pixel to i8*
  %2 = sext i32 %count to i64
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = call i64 @fread(i8* %1, i64 2, i64 %2, %struct._IO_FILE* %3)
  %5 = sext i32 %count to i64
  %6 = icmp ult i64 %4, %5
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @derror()
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = load i16* @order, align 2
  %10 = sext i16 %9 to i32
  %11 = icmp eq i32 %10, 18761
  %12 = zext i1 %11 to i32
  %13 = call zeroext i16 @ntohs(i16 zeroext 4660) #9
  %14 = zext i16 %13 to i32
  %15 = icmp eq i32 %14, 4660
  %16 = zext i1 %15 to i32
  %17 = icmp eq i32 %12, %16
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %8
  %19 = bitcast i16* %pixel to i8*
  %20 = bitcast i16* %pixel to i8*
  %21 = mul nsw i32 %count, 2
  %22 = sext i32 %21 to i64
  call void @swab(i8* %19, i8* %20, i64 %22) #4
  br label %23

; <label>:23                                      ; preds = %18, %8
  ret void
}

; Function Attrs: nounwind
declare void @swab(i8*, i8*, i64) #3

; Function Attrs: nounwind uwtable
define void @canon_black(double* %dark) #0 {
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @width, align 2
  %4 = zext i16 %3 to i32
  %5 = add nsw i32 %4, 4
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  br label %94

; <label>:8                                       ; preds = %0
  br label %9

; <label>:9                                       ; preds = %27, %8
  %c.0 = phi i32 [ 0, %8 ], [ %28, %27 ]
  %10 = icmp slt i32 %c.0, 2
  br i1 %10, label %11, label %29

; <label>:11                                      ; preds = %9
  %12 = load i16* @raw_width, align 2
  %13 = zext i16 %12 to i32
  %14 = load i16* @width, align 2
  %15 = zext i16 %14 to i32
  %16 = sub nsw i32 %13, %15
  %17 = sub nsw i32 %16, 2
  %18 = load i16* @height, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nsw i32 %17, %19
  %21 = ashr i32 %20, 1
  %22 = sitofp i32 %21 to double
  %23 = sext i32 %c.0 to i64
  %24 = getelementptr inbounds double* %dark, i64 %23
  %25 = load double* %24, align 8
  %26 = fdiv double %25, %22
  store double %26, double* %24, align 8
  br label %27

; <label>:27                                      ; preds = %11
  %28 = add nsw i32 %c.0, 1
  br label %9

; <label>:29                                      ; preds = %9
  %30 = getelementptr inbounds double* %dark, i64 0
  %31 = load double* %30, align 8
  %32 = getelementptr inbounds double* %dark, i64 1
  %33 = load double* %32, align 8
  %34 = fsub double %31, %33
  %35 = fptosi double %34 to i32
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %81

; <label>:37                                      ; preds = %29
  br label %38

; <label>:38                                      ; preds = %78, %37
  %row.0 = phi i32 [ 0, %37 ], [ %79, %78 ]
  %39 = load i16* @height, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp slt i32 %row.0, %40
  br i1 %41, label %42, label %80

; <label>:42                                      ; preds = %38
  br label %43

; <label>:43                                      ; preds = %75, %42
  %col.0 = phi i32 [ 1, %42 ], [ %76, %75 ]
  %44 = load i16* @width, align 2
  %45 = zext i16 %44 to i32
  %46 = icmp slt i32 %col.0, %45
  br i1 %46, label %47, label %77

; <label>:47                                      ; preds = %43
  %48 = load i32* @filters, align 4
  %49 = shl i32 %row.0, 1
  %50 = and i32 %49, 14
  %51 = and i32 %col.0, 1
  %52 = add nsw i32 %50, %51
  %53 = shl i32 %52, 1
  %54 = lshr i32 %48, %53
  %55 = and i32 %54, 3
  %56 = zext i32 %55 to i64
  %57 = load i16* @shrink, align 2
  %58 = zext i16 %57 to i32
  %59 = ashr i32 %row.0, %58
  %60 = load i16* @iwidth, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nsw i32 %59, %61
  %63 = load i16* @shrink, align 2
  %64 = zext i16 %63 to i32
  %65 = ashr i32 %col.0, %64
  %66 = add nsw i32 %62, %65
  %67 = sext i32 %66 to i64
  %68 = load [4 x i16]** @image, align 8
  %69 = getelementptr inbounds [4 x i16]* %68, i64 %67
  %70 = getelementptr inbounds [4 x i16]* %69, i32 0, i64 %56
  %71 = load i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nsw i32 %72, %35
  %74 = trunc i32 %73 to i16
  store i16 %74, i16* %70, align 2
  br label %75

; <label>:75                                      ; preds = %47
  %76 = add nsw i32 %col.0, 2
  br label %43

; <label>:77                                      ; preds = %43
  br label %78

; <label>:78                                      ; preds = %77
  %79 = add nsw i32 %row.0, 1
  br label %38

; <label>:80                                      ; preds = %38
  br label %81

; <label>:81                                      ; preds = %80, %29
  %82 = sitofp i32 %35 to double
  %83 = getelementptr inbounds double* %dark, i64 1
  %84 = load double* %83, align 8
  %85 = fadd double %84, %82
  store double %85, double* %83, align 8
  %86 = getelementptr inbounds double* %dark, i64 0
  %87 = load double* %86, align 8
  %88 = getelementptr inbounds double* %dark, i64 1
  %89 = load double* %88, align 8
  %90 = fadd double %87, %89
  %91 = fadd double %90, 1.000000e+00
  %92 = fdiv double %91, 2.000000e+00
  %93 = fptoui double %92 to i32
  store i32 %93, i32* @black, align 4
  br label %94

; <label>:94                                      ; preds = %81, %7
  ret void
}

; Function Attrs: nounwind uwtable
define void @canon_600_fixed_wb(i32 %temp) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %lo.0 = phi i32 [ 4, %0 ], [ %2, %12 ]
  %2 = add nsw i32 %lo.0, -1
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %13

; <label>:4                                       ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %5
  %7 = getelementptr inbounds [5 x i16]* %6, i32 0, i32 0
  %8 = load i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = icmp sle i32 %9, %temp
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %4
  br label %13

; <label>:12                                      ; preds = %4
  br label %1

; <label>:13                                      ; preds = %11, %1
  br label %14

; <label>:14                                      ; preds = %25, %13
  %hi.0 = phi i32 [ 0, %13 ], [ %26, %25 ]
  %15 = icmp slt i32 %hi.0, 3
  br i1 %15, label %16, label %27

; <label>:16                                      ; preds = %14
  %17 = sext i32 %hi.0 to i64
  %18 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %17
  %19 = getelementptr inbounds [5 x i16]* %18, i32 0, i32 0
  %20 = load i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = icmp sge i32 %21, %temp
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %16
  br label %27

; <label>:24                                      ; preds = %16
  br label %25

; <label>:25                                      ; preds = %24
  %26 = add nsw i32 %hi.0, 1
  br label %14

; <label>:27                                      ; preds = %23, %14
  %28 = icmp ne i32 %2, %hi.0
  br i1 %28, label %29, label %50

; <label>:29                                      ; preds = %27
  %30 = sext i32 %2 to i64
  %31 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %30
  %32 = getelementptr inbounds [5 x i16]* %31, i32 0, i32 0
  %33 = load i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = sub nsw i32 %temp, %34
  %36 = sitofp i32 %35 to float
  %37 = sext i32 %hi.0 to i64
  %38 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %37
  %39 = getelementptr inbounds [5 x i16]* %38, i32 0, i32 0
  %40 = load i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = sext i32 %2 to i64
  %43 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %42
  %44 = getelementptr inbounds [5 x i16]* %43, i32 0, i32 0
  %45 = load i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = sub nsw i32 %41, %46
  %48 = sitofp i32 %47 to float
  %49 = fdiv float %36, %48
  br label %50

; <label>:50                                      ; preds = %29, %27
  %frac.0 = phi float [ %49, %29 ], [ 0.000000e+00, %27 ]
  br label %51

; <label>:51                                      ; preds = %76, %50
  %i.0 = phi i32 [ 1, %50 ], [ %77, %76 ]
  %52 = icmp slt i32 %i.0, 5
  br i1 %52, label %53, label %78

; <label>:53                                      ; preds = %51
  %54 = sext i32 %i.0 to i64
  %55 = sext i32 %hi.0 to i64
  %56 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %55
  %57 = getelementptr inbounds [5 x i16]* %56, i32 0, i64 %54
  %58 = load i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = sitofp i32 %59 to float
  %61 = fmul float %frac.0, %60
  %62 = fsub float 1.000000e+00, %frac.0
  %63 = sext i32 %i.0 to i64
  %64 = sext i32 %2 to i64
  %65 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %64
  %66 = getelementptr inbounds [5 x i16]* %65, i32 0, i64 %63
  %67 = load i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = sitofp i32 %68 to float
  %70 = fmul float %62, %69
  %71 = fadd float %61, %70
  %72 = fdiv float 1.000000e+00, %71
  %73 = sub nsw i32 %i.0, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %74
  store float %72, float* %75, align 4
  br label %76

; <label>:76                                      ; preds = %53
  %77 = add nsw i32 %i.0, 1
  br label %51

; <label>:78                                      ; preds = %51
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @canon_600_color(i32* %ratio, i32 %mar) #0 {
  %1 = load float* @flash_used, align 4
  %2 = fcmp une float %1, 0.000000e+00
  br i1 %2, label %3, label %16

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i32* %ratio, i64 1
  %5 = load i32* %4, align 4
  %6 = icmp slt i32 %5, -104
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds i32* %ratio, i64 1
  store i32 -104, i32* %8, align 4
  br label %9

; <label>:9                                       ; preds = %7, %3
  %clipped.0 = phi i32 [ 1, %7 ], [ 0, %3 ]
  %10 = getelementptr inbounds i32* %ratio, i64 1
  %11 = load i32* %10, align 4
  %12 = icmp sgt i32 %11, 12
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %9
  %14 = getelementptr inbounds i32* %ratio, i64 1
  store i32 12, i32* %14, align 4
  br label %15

; <label>:15                                      ; preds = %13, %9
  %clipped.1 = phi i32 [ 1, %13 ], [ %clipped.0, %9 ]
  br label %38

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds i32* %ratio, i64 1
  %18 = load i32* %17, align 4
  %19 = icmp slt i32 %18, -264
  br i1 %19, label %24, label %20

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds i32* %ratio, i64 1
  %22 = load i32* %21, align 4
  %23 = icmp sgt i32 %22, 461
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %20, %16
  br label %88

; <label>:25                                      ; preds = %20
  %26 = getelementptr inbounds i32* %ratio, i64 1
  %27 = load i32* %26, align 4
  %28 = icmp slt i32 %27, -50
  br i1 %28, label %29, label %31

; <label>:29                                      ; preds = %25
  %30 = getelementptr inbounds i32* %ratio, i64 1
  store i32 -50, i32* %30, align 4
  br label %31

; <label>:31                                      ; preds = %29, %25
  %clipped.2 = phi i32 [ 1, %29 ], [ 0, %25 ]
  %32 = getelementptr inbounds i32* %ratio, i64 1
  %33 = load i32* %32, align 4
  %34 = icmp sgt i32 %33, 307
  br i1 %34, label %35, label %37

; <label>:35                                      ; preds = %31
  %36 = getelementptr inbounds i32* %ratio, i64 1
  store i32 307, i32* %36, align 4
  br label %37

; <label>:37                                      ; preds = %35, %31
  %clipped.3 = phi i32 [ 1, %35 ], [ %clipped.2, %31 ]
  br label %38

; <label>:38                                      ; preds = %37, %15
  %clipped.4 = phi i32 [ %clipped.1, %15 ], [ %clipped.3, %37 ]
  %39 = load float* @flash_used, align 4
  %40 = fcmp une float %39, 0.000000e+00
  br i1 %40, label %45, label %41

; <label>:41                                      ; preds = %38
  %42 = getelementptr inbounds i32* %ratio, i64 1
  %43 = load i32* %42, align 4
  %44 = icmp slt i32 %43, 197
  br i1 %44, label %45, label %51

; <label>:45                                      ; preds = %41, %38
  %46 = getelementptr inbounds i32* %ratio, i64 1
  %47 = load i32* %46, align 4
  %48 = mul nsw i32 398, %47
  %49 = ashr i32 %48, 10
  %50 = sub nsw i32 -38, %49
  br label %57

; <label>:51                                      ; preds = %41
  %52 = getelementptr inbounds i32* %ratio, i64 1
  %53 = load i32* %52, align 4
  %54 = mul nsw i32 48, %53
  %55 = ashr i32 %54, 10
  %56 = add nsw i32 -123, %55
  br label %57

; <label>:57                                      ; preds = %51, %45
  %58 = phi i32 [ %50, %45 ], [ %56, %51 ]
  %59 = sub nsw i32 %58, %mar
  %60 = getelementptr inbounds i32* %ratio, i64 0
  %61 = load i32* %60, align 4
  %62 = icmp sle i32 %59, %61
  br i1 %62, label %63, label %71

; <label>:63                                      ; preds = %57
  %64 = add nsw i32 %58, 20
  %65 = getelementptr inbounds i32* %ratio, i64 0
  %66 = load i32* %65, align 4
  %67 = icmp sge i32 %64, %66
  br i1 %67, label %68, label %71

; <label>:68                                      ; preds = %63
  %69 = icmp ne i32 %clipped.4, 0
  br i1 %69, label %71, label %70

; <label>:70                                      ; preds = %68
  br label %88

; <label>:71                                      ; preds = %68, %63, %57
  %72 = getelementptr inbounds i32* %ratio, i64 0
  %73 = load i32* %72, align 4
  %74 = sub nsw i32 %58, %73
  %75 = call i32 @abs(i32 %74) #9
  %76 = mul nsw i32 %mar, 4
  %77 = icmp sge i32 %75, %76
  br i1 %77, label %78, label %79

; <label>:78                                      ; preds = %71
  br label %88

; <label>:79                                      ; preds = %71
  %80 = icmp slt i32 %74, -20
  br i1 %80, label %81, label %82

; <label>:81                                      ; preds = %79
  br label %82

; <label>:82                                      ; preds = %81, %79
  %miss.0 = phi i32 [ -20, %81 ], [ %74, %79 ]
  %83 = icmp sgt i32 %miss.0, %mar
  br i1 %83, label %84, label %85

; <label>:84                                      ; preds = %82
  br label %85

; <label>:85                                      ; preds = %84, %82
  %miss.1 = phi i32 [ %mar, %84 ], [ %miss.0, %82 ]
  %86 = sub nsw i32 %58, %miss.1
  %87 = getelementptr inbounds i32* %ratio, i64 0
  store i32 %86, i32* %87, align 4
  br label %88

; <label>:88                                      ; preds = %85, %78, %70, %24
  %.0 = phi i32 [ 2, %78 ], [ 1, %85 ], [ 0, %70 ], [ 2, %24 ]
  ret i32 %.0
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #5

; Function Attrs: nounwind uwtable
define void @canon_600_auto_wb() #0 {
  %count = alloca [2 x i32], align 4
  %test = alloca [8 x i32], align 16
  %total = alloca [2 x [8 x i32]], align 16
  %ratio = alloca [2 x [2 x i32]], align 16
  %stat = alloca [2 x i32], align 4
  %1 = bitcast [2 x i32]* %count to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 8, i32 4, i1 false)
  %2 = bitcast [2 x [8 x i32]]* %total to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 64, i32 16, i1 false)
  %3 = load float* @canon_ev, align 4
  %4 = fpext float %3 to double
  %5 = fadd double %4, 5.000000e-01
  %6 = fptosi double %5 to i32
  %7 = icmp slt i32 %6, 10
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  br label %16

; <label>:9                                       ; preds = %0
  %10 = icmp sgt i32 %6, 12
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %9
  br label %15

; <label>:12                                      ; preds = %9
  %13 = mul nsw i32 20, %6
  %14 = sub nsw i32 280, %13
  br label %15

; <label>:15                                      ; preds = %12, %11
  %mar.0 = phi i32 [ 20, %11 ], [ %14, %12 ]
  br label %16

; <label>:16                                      ; preds = %15, %8
  %mar.1 = phi i32 [ 150, %8 ], [ %mar.0, %15 ]
  %17 = load float* @flash_used, align 4
  %18 = fcmp une float %17, 0.000000e+00
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %16
  br label %20

; <label>:20                                      ; preds = %19, %16
  %mar.2 = phi i32 [ 80, %19 ], [ %mar.1, %16 ]
  br label %21

; <label>:21                                      ; preds = %233, %20
  %row.0 = phi i32 [ 14, %20 ], [ %234, %233 ]
  %22 = load i16* @height, align 2
  %23 = zext i16 %22 to i32
  %24 = sub nsw i32 %23, 14
  %25 = icmp slt i32 %row.0, %24
  br i1 %25, label %26, label %235

; <label>:26                                      ; preds = %21
  br label %27

; <label>:27                                      ; preds = %230, %26
  %col.0 = phi i32 [ 10, %26 ], [ %231, %230 ]
  %28 = load i16* @width, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %col.0, %29
  br i1 %30, label %31, label %232

; <label>:31                                      ; preds = %27
  br label %32

; <label>:32                                      ; preds = %84, %31
  %i.0 = phi i32 [ 0, %31 ], [ %85, %84 ]
  %33 = icmp slt i32 %i.0, 8
  br i1 %33, label %34, label %86

; <label>:34                                      ; preds = %32
  %35 = load i32* @filters, align 4
  %36 = ashr i32 %i.0, 1
  %37 = add nsw i32 %row.0, %36
  %38 = shl i32 %37, 1
  %39 = and i32 %38, 14
  %40 = and i32 %i.0, 1
  %41 = add nsw i32 %col.0, %40
  %42 = and i32 %41, 1
  %43 = add nsw i32 %39, %42
  %44 = shl i32 %43, 1
  %45 = lshr i32 %35, %44
  %46 = and i32 %45, 3
  %47 = zext i32 %46 to i64
  %48 = ashr i32 %i.0, 1
  %49 = add nsw i32 %row.0, %48
  %50 = load i16* @shrink, align 2
  %51 = zext i16 %50 to i32
  %52 = ashr i32 %49, %51
  %53 = load i16* @iwidth, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nsw i32 %52, %54
  %56 = and i32 %i.0, 1
  %57 = add nsw i32 %col.0, %56
  %58 = load i16* @shrink, align 2
  %59 = zext i16 %58 to i32
  %60 = ashr i32 %57, %59
  %61 = add nsw i32 %55, %60
  %62 = sext i32 %61 to i64
  %63 = load [4 x i16]** @image, align 8
  %64 = getelementptr inbounds [4 x i16]* %63, i64 %62
  %65 = getelementptr inbounds [4 x i16]* %64, i32 0, i64 %47
  %66 = load i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = and i32 %i.0, 4
  %69 = load i32* @filters, align 4
  %70 = ashr i32 %i.0, 1
  %71 = add nsw i32 %row.0, %70
  %72 = shl i32 %71, 1
  %73 = and i32 %72, 14
  %74 = and i32 %i.0, 1
  %75 = add nsw i32 %col.0, %74
  %76 = and i32 %75, 1
  %77 = add nsw i32 %73, %76
  %78 = shl i32 %77, 1
  %79 = lshr i32 %69, %78
  %80 = and i32 %79, 3
  %81 = add i32 %68, %80
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %82
  store i32 %67, i32* %83, align 4
  br label %84

; <label>:84                                      ; preds = %34
  %85 = add nsw i32 %i.0, 1
  br label %32

; <label>:86                                      ; preds = %32
  br label %87

; <label>:87                                      ; preds = %101, %86
  %i.1 = phi i32 [ 0, %86 ], [ %102, %101 ]
  %88 = icmp slt i32 %i.1, 8
  br i1 %88, label %89, label %103

; <label>:89                                      ; preds = %87
  %90 = sext i32 %i.1 to i64
  %91 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %90
  %92 = load i32* %91, align 4
  %93 = icmp slt i32 %92, 150
  br i1 %93, label %99, label %94

; <label>:94                                      ; preds = %89
  %95 = sext i32 %i.1 to i64
  %96 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %95
  %97 = load i32* %96, align 4
  %98 = icmp sgt i32 %97, 1500
  br i1 %98, label %99, label %100

; <label>:99                                      ; preds = %94, %89
  br label %229

; <label>:100                                     ; preds = %94
  br label %101

; <label>:101                                     ; preds = %100
  %102 = add nsw i32 %i.1, 1
  br label %87

; <label>:103                                     ; preds = %87
  br label %104

; <label>:104                                     ; preds = %119, %103
  %i.2 = phi i32 [ 0, %103 ], [ %120, %119 ]
  %105 = icmp slt i32 %i.2, 4
  br i1 %105, label %106, label %121

; <label>:106                                     ; preds = %104
  %107 = sext i32 %i.2 to i64
  %108 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %107
  %109 = load i32* %108, align 4
  %110 = add nsw i32 %i.2, 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %111
  %113 = load i32* %112, align 4
  %114 = sub nsw i32 %109, %113
  %115 = call i32 @abs(i32 %114) #9
  %116 = icmp sgt i32 %115, 50
  br i1 %116, label %117, label %118

; <label>:117                                     ; preds = %106
  br label %229

; <label>:118                                     ; preds = %106
  br label %119

; <label>:119                                     ; preds = %118
  %120 = add nsw i32 %i.2, 1
  br label %104

; <label>:121                                     ; preds = %104
  br label %122

; <label>:122                                     ; preds = %161, %121
  %i.3 = phi i32 [ 0, %121 ], [ %162, %161 ]
  %123 = icmp slt i32 %i.3, 2
  br i1 %123, label %124, label %163

; <label>:124                                     ; preds = %122
  br label %125

; <label>:125                                     ; preds = %152, %124
  %j.0 = phi i32 [ 0, %124 ], [ %153, %152 ]
  %126 = icmp slt i32 %j.0, 4
  br i1 %126, label %127, label %154

; <label>:127                                     ; preds = %125
  %128 = mul nsw i32 %i.3, 4
  %129 = add nsw i32 %128, %j.0
  %130 = add nsw i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %131
  %133 = load i32* %132, align 4
  %134 = mul nsw i32 %i.3, 4
  %135 = add nsw i32 %134, %j.0
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %136
  %138 = load i32* %137, align 4
  %139 = sub nsw i32 %133, %138
  %140 = shl i32 %139, 10
  %141 = mul nsw i32 %i.3, 4
  %142 = add nsw i32 %141, %j.0
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %143
  %145 = load i32* %144, align 4
  %146 = sdiv i32 %140, %145
  %147 = ashr i32 %j.0, 1
  %148 = sext i32 %147 to i64
  %149 = sext i32 %i.3 to i64
  %150 = getelementptr inbounds [2 x [2 x i32]]* %ratio, i32 0, i64 %149
  %151 = getelementptr inbounds [2 x i32]* %150, i32 0, i64 %148
  store i32 %146, i32* %151, align 4
  br label %152

; <label>:152                                     ; preds = %127
  %153 = add nsw i32 %j.0, 2
  br label %125

; <label>:154                                     ; preds = %125
  %155 = sext i32 %i.3 to i64
  %156 = getelementptr inbounds [2 x [2 x i32]]* %ratio, i32 0, i64 %155
  %157 = getelementptr inbounds [2 x i32]* %156, i32 0, i32 0
  %158 = call i32 @canon_600_color(i32* %157, i32 %mar.2)
  %159 = sext i32 %i.3 to i64
  %160 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 %159
  store i32 %158, i32* %160, align 4
  br label %161

; <label>:161                                     ; preds = %154
  %162 = add nsw i32 %i.3, 1
  br label %122

; <label>:163                                     ; preds = %122
  %164 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 0
  %165 = load i32* %164, align 4
  %166 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 1
  %167 = load i32* %166, align 4
  %168 = or i32 %165, %167
  %169 = icmp sgt i32 %168, 1
  br i1 %169, label %170, label %171

; <label>:170                                     ; preds = %163
  br label %229

; <label>:171                                     ; preds = %163
  br label %172

; <label>:172                                     ; preds = %207, %171
  %i.4 = phi i32 [ 0, %171 ], [ %208, %207 ]
  %173 = icmp slt i32 %i.4, 2
  br i1 %173, label %174, label %209

; <label>:174                                     ; preds = %172
  %175 = sext i32 %i.4 to i64
  %176 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 %175
  %177 = load i32* %176, align 4
  %178 = icmp ne i32 %177, 0
  br i1 %178, label %179, label %206

; <label>:179                                     ; preds = %174
  br label %180

; <label>:180                                     ; preds = %203, %179
  %j.1 = phi i32 [ 0, %179 ], [ %204, %203 ]
  %181 = icmp slt i32 %j.1, 2
  br i1 %181, label %182, label %205

; <label>:182                                     ; preds = %180
  %183 = mul nsw i32 %i.4, 4
  %184 = mul nsw i32 %j.1, 2
  %185 = add nsw i32 %183, %184
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %186
  %188 = load i32* %187, align 4
  %189 = sext i32 %j.1 to i64
  %190 = sext i32 %i.4 to i64
  %191 = getelementptr inbounds [2 x [2 x i32]]* %ratio, i32 0, i64 %190
  %192 = getelementptr inbounds [2 x i32]* %191, i32 0, i64 %189
  %193 = load i32* %192, align 4
  %194 = add nsw i32 1024, %193
  %195 = mul nsw i32 %188, %194
  %196 = ashr i32 %195, 10
  %197 = mul nsw i32 %i.4, 4
  %198 = mul nsw i32 %j.1, 2
  %199 = add nsw i32 %197, %198
  %200 = add nsw i32 %199, 1
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %201
  store i32 %196, i32* %202, align 4
  br label %203

; <label>:203                                     ; preds = %182
  %204 = add nsw i32 %j.1, 1
  br label %180

; <label>:205                                     ; preds = %180
  br label %206

; <label>:206                                     ; preds = %205, %174
  br label %207

; <label>:207                                     ; preds = %206
  %208 = add nsw i32 %i.4, 1
  br label %172

; <label>:209                                     ; preds = %172
  br label %210

; <label>:210                                     ; preds = %222, %209
  %i.5 = phi i32 [ 0, %209 ], [ %223, %222 ]
  %211 = icmp slt i32 %i.5, 8
  br i1 %211, label %212, label %224

; <label>:212                                     ; preds = %210
  %213 = sext i32 %i.5 to i64
  %214 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %213
  %215 = load i32* %214, align 4
  %216 = sext i32 %i.5 to i64
  %217 = sext i32 %168 to i64
  %218 = getelementptr inbounds [2 x [8 x i32]]* %total, i32 0, i64 %217
  %219 = getelementptr inbounds [8 x i32]* %218, i32 0, i64 %216
  %220 = load i32* %219, align 4
  %221 = add nsw i32 %220, %215
  store i32 %221, i32* %219, align 4
  br label %222

; <label>:222                                     ; preds = %212
  %223 = add nsw i32 %i.5, 1
  br label %210

; <label>:224                                     ; preds = %210
  %225 = sext i32 %168 to i64
  %226 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 %225
  %227 = load i32* %226, align 4
  %228 = add nsw i32 %227, 1
  store i32 %228, i32* %226, align 4
  br label %229

; <label>:229                                     ; preds = %224, %170, %117, %99
  br label %230

; <label>:230                                     ; preds = %229
  %231 = add nsw i32 %col.0, 2
  br label %27

; <label>:232                                     ; preds = %27
  br label %233

; <label>:233                                     ; preds = %232
  %234 = add nsw i32 %row.0, 4
  br label %21

; <label>:235                                     ; preds = %21
  %236 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 0
  %237 = load i32* %236, align 4
  %238 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 1
  %239 = load i32* %238, align 4
  %240 = or i32 %237, %239
  %241 = icmp ne i32 %240, 0
  br i1 %241, label %242, label %273

; <label>:242                                     ; preds = %235
  %243 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 0
  %244 = load i32* %243, align 4
  %245 = mul nsw i32 %244, 200
  %246 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 1
  %247 = load i32* %246, align 4
  %248 = icmp slt i32 %245, %247
  %249 = zext i1 %248 to i32
  br label %250

; <label>:250                                     ; preds = %270, %242
  %i.6 = phi i32 [ 0, %242 ], [ %271, %270 ]
  %251 = icmp slt i32 %i.6, 4
  br i1 %251, label %252, label %272

; <label>:252                                     ; preds = %250
  %253 = sext i32 %i.6 to i64
  %254 = sext i32 %249 to i64
  %255 = getelementptr inbounds [2 x [8 x i32]]* %total, i32 0, i64 %254
  %256 = getelementptr inbounds [8 x i32]* %255, i32 0, i64 %253
  %257 = load i32* %256, align 4
  %258 = add nsw i32 %i.6, 4
  %259 = sext i32 %258 to i64
  %260 = sext i32 %249 to i64
  %261 = getelementptr inbounds [2 x [8 x i32]]* %total, i32 0, i64 %260
  %262 = getelementptr inbounds [8 x i32]* %261, i32 0, i64 %259
  %263 = load i32* %262, align 4
  %264 = add nsw i32 %257, %263
  %265 = sitofp i32 %264 to double
  %266 = fdiv double 1.000000e+00, %265
  %267 = fptrunc double %266 to float
  %268 = sext i32 %i.6 to i64
  %269 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %268
  store float %267, float* %269, align 4
  br label %270

; <label>:270                                     ; preds = %252
  %271 = add nsw i32 %i.6, 1
  br label %250

; <label>:272                                     ; preds = %250
  br label %273

; <label>:273                                     ; preds = %272, %235
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define void @canon_600_coeff() #0 {
  %1 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  %2 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %3 = fdiv float %1, %2
  %4 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  %5 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %6 = fdiv float %4, %5
  %7 = fcmp ogt float %3, 1.000000e+00
  br i1 %7, label %8, label %15

; <label>:8                                       ; preds = %0
  %9 = fpext float %3 to double
  %10 = fcmp ole double %9, 1.280000e+00
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %8
  %12 = fpext float %6 to double
  %13 = fcmp olt double %12, 8.789000e-01
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %11
  br label %15

; <label>:15                                      ; preds = %14, %11, %8, %0
  %t.0 = phi i32 [ 1, %14 ], [ 0, %11 ], [ 0, %8 ], [ 0, %0 ]
  %16 = fpext float %3 to double
  %17 = fcmp ogt double %16, 1.280000e+00
  br i1 %17, label %18, label %29

; <label>:18                                      ; preds = %15
  %19 = fcmp ole float %3, 2.000000e+00
  br i1 %19, label %20, label %29

; <label>:20                                      ; preds = %18
  %21 = fpext float %6 to double
  %22 = fcmp olt double %21, 8.789000e-01
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %20
  br label %28

; <label>:24                                      ; preds = %20
  %25 = fcmp ole float %6, 2.000000e+00
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %24
  br label %27

; <label>:27                                      ; preds = %26, %24
  %t.1 = phi i32 [ 4, %26 ], [ %t.0, %24 ]
  br label %28

; <label>:28                                      ; preds = %27, %23
  %t.2 = phi i32 [ 3, %23 ], [ %t.1, %27 ]
  br label %29

; <label>:29                                      ; preds = %28, %18, %15
  %t.3 = phi i32 [ %t.2, %28 ], [ %t.0, %18 ], [ %t.0, %15 ]
  %30 = load float* @flash_used, align 4
  %31 = fcmp une float %30, 0.000000e+00
  br i1 %31, label %32, label %33

; <label>:32                                      ; preds = %29
  br label %33

; <label>:33                                      ; preds = %32, %29
  %t.4 = phi i32 [ 5, %32 ], [ %t.3, %29 ]
  store i32 0, i32* @raw_color, align 4
  br label %34

; <label>:34                                      ; preds = %59, %33
  %i.0 = phi i32 [ 0, %33 ], [ %60, %59 ]
  %35 = icmp slt i32 %i.0, 3
  br i1 %35, label %36, label %61

; <label>:36                                      ; preds = %34
  br label %37

; <label>:37                                      ; preds = %56, %36
  %c.0 = phi i32 [ 0, %36 ], [ %57, %56 ]
  %38 = load i32* @colors, align 4
  %39 = icmp slt i32 %c.0, %38
  br i1 %39, label %40, label %58

; <label>:40                                      ; preds = %37
  %41 = mul nsw i32 %i.0, 4
  %42 = add nsw i32 %41, %c.0
  %43 = sext i32 %42 to i64
  %44 = sext i32 %t.4 to i64
  %45 = getelementptr inbounds [6 x [12 x i16]]* @canon_600_coeff.table, i32 0, i64 %44
  %46 = getelementptr inbounds [12 x i16]* %45, i32 0, i64 %43
  %47 = load i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = sitofp i32 %48 to double
  %50 = fdiv double %49, 1.024000e+03
  %51 = fptrunc double %50 to float
  %52 = sext i32 %c.0 to i64
  %53 = sext i32 %i.0 to i64
  %54 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %53
  %55 = getelementptr inbounds [4 x float]* %54, i32 0, i64 %52
  store float %51, float* %55, align 4
  br label %56

; <label>:56                                      ; preds = %40
  %57 = add nsw i32 %c.0, 1
  br label %37

; <label>:58                                      ; preds = %37
  br label %59

; <label>:59                                      ; preds = %58
  %60 = add nsw i32 %i.0, 1
  br label %34

; <label>:61                                      ; preds = %34
  ret void
}

; Function Attrs: nounwind uwtable
define void @canon_600_load_raw() #0 {
  %data = alloca [1120 x i8], align 16
  %pixel = alloca [896 x i16], align 16
  br label %1

; <label>:1                                       ; preds = %181, %0
  %row.0 = phi i32 [ 0, %0 ], [ %row.1, %181 ]
  %irow.0 = phi i32 [ 0, %0 ], [ %182, %181 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %irow.0, %3
  br i1 %4, label %5, label %183

; <label>:5                                       ; preds = %1
  %6 = getelementptr inbounds [1120 x i8]* %data, i32 0, i32 0
  %7 = load i16* @raw_width, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nsw i32 %8, 5
  %10 = sdiv i32 %9, 4
  %11 = sext i32 %10 to i64
  %12 = load %struct._IO_FILE** @ifp, align 8
  %13 = call i64 @fread(i8* %6, i64 1, i64 %11, %struct._IO_FILE* %12)
  %14 = load i16* @raw_width, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nsw i32 %15, 5
  %17 = sdiv i32 %16, 4
  %18 = sext i32 %17 to i64
  %19 = icmp ult i64 %13, %18
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %5
  call void @derror()
  br label %21

; <label>:21                                      ; preds = %20, %5
  %22 = getelementptr inbounds [1120 x i8]* %data, i32 0, i32 0
  %23 = getelementptr inbounds [896 x i16]* %pixel, i32 0, i32 0
  br label %24

; <label>:24                                      ; preds = %121, %21
  %pix.0 = phi i16* [ %23, %21 ], [ %123, %121 ]
  %dp.0 = phi i8* [ %22, %21 ], [ %122, %121 ]
  %25 = getelementptr inbounds [1120 x i8]* %data, i32 0, i32 0
  %26 = getelementptr inbounds i8* %25, i64 1120
  %27 = icmp ult i8* %dp.0, %26
  br i1 %27, label %28, label %124

; <label>:28                                      ; preds = %24
  %29 = getelementptr inbounds i8* %dp.0, i64 0
  %30 = load i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl i32 %31, 2
  %33 = getelementptr inbounds i8* %dp.0, i64 1
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = ashr i32 %35, 6
  %37 = add nsw i32 %32, %36
  %38 = trunc i32 %37 to i16
  %39 = getelementptr inbounds i16* %pix.0, i64 0
  store i16 %38, i16* %39, align 2
  %40 = getelementptr inbounds i8* %dp.0, i64 2
  %41 = load i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl i32 %42, 2
  %44 = getelementptr inbounds i8* %dp.0, i64 1
  %45 = load i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = ashr i32 %46, 4
  %48 = and i32 %47, 3
  %49 = add nsw i32 %43, %48
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16* %pix.0, i64 1
  store i16 %50, i16* %51, align 2
  %52 = getelementptr inbounds i8* %dp.0, i64 3
  %53 = load i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl i32 %54, 2
  %56 = getelementptr inbounds i8* %dp.0, i64 1
  %57 = load i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = ashr i32 %58, 2
  %60 = and i32 %59, 3
  %61 = add nsw i32 %55, %60
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16* %pix.0, i64 2
  store i16 %62, i16* %63, align 2
  %64 = getelementptr inbounds i8* %dp.0, i64 4
  %65 = load i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl i32 %66, 2
  %68 = getelementptr inbounds i8* %dp.0, i64 1
  %69 = load i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = and i32 %70, 3
  %72 = add nsw i32 %67, %71
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16* %pix.0, i64 3
  store i16 %73, i16* %74, align 2
  %75 = getelementptr inbounds i8* %dp.0, i64 5
  %76 = load i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl i32 %77, 2
  %79 = getelementptr inbounds i8* %dp.0, i64 9
  %80 = load i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = and i32 %81, 3
  %83 = add nsw i32 %78, %82
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16* %pix.0, i64 4
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds i8* %dp.0, i64 6
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = shl i32 %88, 2
  %90 = getelementptr inbounds i8* %dp.0, i64 9
  %91 = load i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = ashr i32 %92, 2
  %94 = and i32 %93, 3
  %95 = add nsw i32 %89, %94
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds i16* %pix.0, i64 5
  store i16 %96, i16* %97, align 2
  %98 = getelementptr inbounds i8* %dp.0, i64 7
  %99 = load i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl i32 %100, 2
  %102 = getelementptr inbounds i8* %dp.0, i64 9
  %103 = load i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = ashr i32 %104, 4
  %106 = and i32 %105, 3
  %107 = add nsw i32 %101, %106
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds i16* %pix.0, i64 6
  store i16 %108, i16* %109, align 2
  %110 = getelementptr inbounds i8* %dp.0, i64 8
  %111 = load i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = shl i32 %112, 2
  %114 = getelementptr inbounds i8* %dp.0, i64 9
  %115 = load i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = ashr i32 %116, 6
  %118 = add nsw i32 %113, %117
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16* %pix.0, i64 7
  store i16 %119, i16* %120, align 2
  br label %121

; <label>:121                                     ; preds = %28
  %122 = getelementptr inbounds i8* %dp.0, i64 10
  %123 = getelementptr inbounds i16* %pix.0, i64 8
  br label %24

; <label>:124                                     ; preds = %24
  br label %125

; <label>:125                                     ; preds = %156, %124
  %col.0 = phi i32 [ 0, %124 ], [ %157, %156 ]
  %126 = load i16* @width, align 2
  %127 = zext i16 %126 to i32
  %128 = icmp slt i32 %col.0, %127
  br i1 %128, label %129, label %158

; <label>:129                                     ; preds = %125
  %130 = sext i32 %col.0 to i64
  %131 = getelementptr inbounds [896 x i16]* %pixel, i32 0, i64 %130
  %132 = load i16* %131, align 2
  %133 = load i32* @filters, align 4
  %134 = shl i32 %row.0, 1
  %135 = and i32 %134, 14
  %136 = and i32 %col.0, 1
  %137 = add nsw i32 %135, %136
  %138 = shl i32 %137, 1
  %139 = lshr i32 %133, %138
  %140 = and i32 %139, 3
  %141 = zext i32 %140 to i64
  %142 = load i16* @shrink, align 2
  %143 = zext i16 %142 to i32
  %144 = ashr i32 %row.0, %143
  %145 = load i16* @iwidth, align 2
  %146 = zext i16 %145 to i32
  %147 = mul nsw i32 %144, %146
  %148 = load i16* @shrink, align 2
  %149 = zext i16 %148 to i32
  %150 = ashr i32 %col.0, %149
  %151 = add nsw i32 %147, %150
  %152 = sext i32 %151 to i64
  %153 = load [4 x i16]** @image, align 8
  %154 = getelementptr inbounds [4 x i16]* %153, i64 %152
  %155 = getelementptr inbounds [4 x i16]* %154, i32 0, i64 %141
  store i16 %132, i16* %155, align 2
  br label %156

; <label>:156                                     ; preds = %129
  %157 = add nsw i32 %col.0, 1
  br label %125

; <label>:158                                     ; preds = %125
  %159 = load i16* @width, align 2
  %160 = zext i16 %159 to i32
  br label %161

; <label>:161                                     ; preds = %172, %158
  %col.1 = phi i32 [ %160, %158 ], [ %173, %172 ]
  %162 = load i16* @raw_width, align 2
  %163 = zext i16 %162 to i32
  %164 = icmp slt i32 %col.1, %163
  br i1 %164, label %165, label %174

; <label>:165                                     ; preds = %161
  %166 = sext i32 %col.1 to i64
  %167 = getelementptr inbounds [896 x i16]* %pixel, i32 0, i64 %166
  %168 = load i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = load i32* @black, align 4
  %171 = add i32 %170, %169
  store i32 %171, i32* @black, align 4
  br label %172

; <label>:172                                     ; preds = %165
  %173 = add nsw i32 %col.1, 1
  br label %161

; <label>:174                                     ; preds = %161
  %175 = add nsw i32 %row.0, 2
  %176 = load i16* @height, align 2
  %177 = zext i16 %176 to i32
  %178 = icmp sgt i32 %175, %177
  br i1 %178, label %179, label %180

; <label>:179                                     ; preds = %174
  br label %180

; <label>:180                                     ; preds = %179, %174
  %row.1 = phi i32 [ 1, %179 ], [ %175, %174 ]
  br label %181

; <label>:181                                     ; preds = %180
  %182 = add nsw i32 %irow.0, 1
  br label %1

; <label>:183                                     ; preds = %1
  %184 = load i16* @raw_width, align 2
  %185 = zext i16 %184 to i32
  %186 = load i16* @width, align 2
  %187 = zext i16 %186 to i32
  %188 = icmp sgt i32 %185, %187
  br i1 %188, label %189, label %201

; <label>:189                                     ; preds = %183
  %190 = load i32* @black, align 4
  %191 = load i16* @raw_width, align 2
  %192 = zext i16 %191 to i32
  %193 = load i16* @width, align 2
  %194 = zext i16 %193 to i32
  %195 = sub nsw i32 %192, %194
  %196 = load i16* @height, align 2
  %197 = zext i16 %196 to i32
  %198 = mul nsw i32 %195, %197
  %199 = udiv i32 %190, %198
  %200 = sub i32 %199, 4
  store i32 %200, i32* @black, align 4
  br label %201

; <label>:201                                     ; preds = %189, %183
  br label %202

; <label>:202                                     ; preds = %279, %201
  %row.2 = phi i32 [ 0, %201 ], [ %280, %279 ]
  %203 = load i16* @height, align 2
  %204 = zext i16 %203 to i32
  %205 = icmp slt i32 %row.2, %204
  br i1 %205, label %206, label %281

; <label>:206                                     ; preds = %202
  br label %207

; <label>:207                                     ; preds = %276, %206
  %col.2 = phi i32 [ 0, %206 ], [ %277, %276 ]
  %208 = load i16* @width, align 2
  %209 = zext i16 %208 to i32
  %210 = icmp slt i32 %col.2, %209
  br i1 %210, label %211, label %278

; <label>:211                                     ; preds = %207
  %212 = load i32* @filters, align 4
  %213 = shl i32 %row.2, 1
  %214 = and i32 %213, 14
  %215 = and i32 %col.2, 1
  %216 = add nsw i32 %214, %215
  %217 = shl i32 %216, 1
  %218 = lshr i32 %212, %217
  %219 = and i32 %218, 3
  %220 = zext i32 %219 to i64
  %221 = load i16* @shrink, align 2
  %222 = zext i16 %221 to i32
  %223 = ashr i32 %row.2, %222
  %224 = load i16* @iwidth, align 2
  %225 = zext i16 %224 to i32
  %226 = mul nsw i32 %223, %225
  %227 = load i16* @shrink, align 2
  %228 = zext i16 %227 to i32
  %229 = ashr i32 %col.2, %228
  %230 = add nsw i32 %226, %229
  %231 = sext i32 %230 to i64
  %232 = load [4 x i16]** @image, align 8
  %233 = getelementptr inbounds [4 x i16]* %232, i64 %231
  %234 = getelementptr inbounds [4 x i16]* %233, i32 0, i64 %220
  %235 = load i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = load i32* @black, align 4
  %238 = sub i32 %236, %237
  %239 = icmp slt i32 %238, 0
  br i1 %239, label %240, label %241

; <label>:240                                     ; preds = %211
  br label %241

; <label>:241                                     ; preds = %240, %211
  %val.0 = phi i32 [ 0, %240 ], [ %238, %211 ]
  %242 = and i32 %col.2, 1
  %243 = sext i32 %242 to i64
  %244 = and i32 %row.2, 3
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [4 x [2 x i16]]* @canon_600_load_raw.mul, i32 0, i64 %245
  %247 = getelementptr inbounds [2 x i16]* %246, i32 0, i64 %243
  %248 = load i16* %247, align 2
  %249 = sext i16 %248 to i32
  %250 = mul nsw i32 %val.0, %249
  %251 = ashr i32 %250, 9
  %252 = trunc i32 %251 to i16
  %253 = load i32* @filters, align 4
  %254 = shl i32 %row.2, 1
  %255 = and i32 %254, 14
  %256 = and i32 %col.2, 1
  %257 = add nsw i32 %255, %256
  %258 = shl i32 %257, 1
  %259 = lshr i32 %253, %258
  %260 = and i32 %259, 3
  %261 = zext i32 %260 to i64
  %262 = load i16* @shrink, align 2
  %263 = zext i16 %262 to i32
  %264 = ashr i32 %row.2, %263
  %265 = load i16* @iwidth, align 2
  %266 = zext i16 %265 to i32
  %267 = mul nsw i32 %264, %266
  %268 = load i16* @shrink, align 2
  %269 = zext i16 %268 to i32
  %270 = ashr i32 %col.2, %269
  %271 = add nsw i32 %267, %270
  %272 = sext i32 %271 to i64
  %273 = load [4 x i16]** @image, align 8
  %274 = getelementptr inbounds [4 x i16]* %273, i64 %272
  %275 = getelementptr inbounds [4 x i16]* %274, i32 0, i64 %261
  store i16 %252, i16* %275, align 2
  br label %276

; <label>:276                                     ; preds = %241
  %277 = add nsw i32 %col.2, 1
  br label %207

; <label>:278                                     ; preds = %207
  br label %279

; <label>:279                                     ; preds = %278
  %280 = add nsw i32 %row.2, 1
  br label %202

; <label>:281                                     ; preds = %202
  call void @canon_600_fixed_wb(i32 1311)
  call void @canon_600_auto_wb()
  call void @canon_600_coeff()
  %282 = load i32* @black, align 4
  %283 = sub i32 1023, %282
  %284 = mul i32 %283, 1109
  %285 = lshr i32 %284, 9
  store i32 %285, i32* @maximum, align 4
  store i32 0, i32* @black, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @remove_zeroes() #0 {
  br label %1

; <label>:1                                       ; preds = %167, %0
  %row.0 = phi i32 [ 0, %0 ], [ %168, %167 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp ult i32 %row.0, %3
  br i1 %4, label %5, label %169

; <label>:5                                       ; preds = %1
  br label %6

; <label>:6                                       ; preds = %164, %5
  %col.0 = phi i32 [ 0, %5 ], [ %165, %164 ]
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp ult i32 %col.0, %8
  br i1 %9, label %10, label %166

; <label>:10                                      ; preds = %6
  %11 = load i32* @filters, align 4
  %12 = shl i32 %row.0, 1
  %13 = and i32 %12, 14
  %14 = and i32 %col.0, 1
  %15 = add i32 %13, %14
  %16 = shl i32 %15, 1
  %17 = lshr i32 %11, %16
  %18 = and i32 %17, 3
  %19 = zext i32 %18 to i64
  %20 = load i16* @shrink, align 2
  %21 = zext i16 %20 to i32
  %22 = lshr i32 %row.0, %21
  %23 = load i16* @iwidth, align 2
  %24 = zext i16 %23 to i32
  %25 = mul i32 %22, %24
  %26 = load i16* @shrink, align 2
  %27 = zext i16 %26 to i32
  %28 = lshr i32 %col.0, %27
  %29 = add i32 %25, %28
  %30 = zext i32 %29 to i64
  %31 = load [4 x i16]** @image, align 8
  %32 = getelementptr inbounds [4 x i16]* %31, i64 %30
  %33 = getelementptr inbounds [4 x i16]* %32, i32 0, i64 %19
  %34 = load i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %163

; <label>:37                                      ; preds = %10
  %38 = sub i32 %row.0, 2
  br label %39

; <label>:39                                      ; preds = %132, %37
  %r.0 = phi i32 [ %38, %37 ], [ %133, %132 ]
  %n.0 = phi i32 [ 0, %37 ], [ %n.1, %132 ]
  %tot.0 = phi i32 [ 0, %37 ], [ %tot.1, %132 ]
  %40 = add i32 %row.0, 2
  %41 = icmp ule i32 %r.0, %40
  br i1 %41, label %42, label %134

; <label>:42                                      ; preds = %39
  %43 = sub i32 %col.0, 2
  br label %44

; <label>:44                                      ; preds = %129, %42
  %c.0 = phi i32 [ %43, %42 ], [ %130, %129 ]
  %n.1 = phi i32 [ %n.0, %42 ], [ %n.2, %129 ]
  %tot.1 = phi i32 [ %tot.0, %42 ], [ %tot.2, %129 ]
  %45 = add i32 %col.0, 2
  %46 = icmp ule i32 %c.0, %45
  br i1 %46, label %47, label %131

; <label>:47                                      ; preds = %44
  %48 = load i16* @height, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp ult i32 %r.0, %49
  br i1 %50, label %51, label %128

; <label>:51                                      ; preds = %47
  %52 = load i16* @width, align 2
  %53 = zext i16 %52 to i32
  %54 = icmp ult i32 %c.0, %53
  br i1 %54, label %55, label %128

; <label>:55                                      ; preds = %51
  %56 = load i32* @filters, align 4
  %57 = shl i32 %r.0, 1
  %58 = and i32 %57, 14
  %59 = and i32 %c.0, 1
  %60 = add i32 %58, %59
  %61 = shl i32 %60, 1
  %62 = lshr i32 %56, %61
  %63 = and i32 %62, 3
  %64 = load i32* @filters, align 4
  %65 = shl i32 %row.0, 1
  %66 = and i32 %65, 14
  %67 = and i32 %col.0, 1
  %68 = add i32 %66, %67
  %69 = shl i32 %68, 1
  %70 = lshr i32 %64, %69
  %71 = and i32 %70, 3
  %72 = icmp eq i32 %63, %71
  br i1 %72, label %73, label %128

; <label>:73                                      ; preds = %55
  %74 = load i32* @filters, align 4
  %75 = shl i32 %r.0, 1
  %76 = and i32 %75, 14
  %77 = and i32 %c.0, 1
  %78 = add i32 %76, %77
  %79 = shl i32 %78, 1
  %80 = lshr i32 %74, %79
  %81 = and i32 %80, 3
  %82 = zext i32 %81 to i64
  %83 = load i16* @shrink, align 2
  %84 = zext i16 %83 to i32
  %85 = lshr i32 %r.0, %84
  %86 = load i16* @iwidth, align 2
  %87 = zext i16 %86 to i32
  %88 = mul i32 %85, %87
  %89 = load i16* @shrink, align 2
  %90 = zext i16 %89 to i32
  %91 = lshr i32 %c.0, %90
  %92 = add i32 %88, %91
  %93 = zext i32 %92 to i64
  %94 = load [4 x i16]** @image, align 8
  %95 = getelementptr inbounds [4 x i16]* %94, i64 %93
  %96 = getelementptr inbounds [4 x i16]* %95, i32 0, i64 %82
  %97 = load i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %128

; <label>:100                                     ; preds = %73
  %101 = add i32 %n.1, 1
  %102 = load i32* @filters, align 4
  %103 = shl i32 %r.0, 1
  %104 = and i32 %103, 14
  %105 = and i32 %c.0, 1
  %106 = add i32 %104, %105
  %107 = shl i32 %106, 1
  %108 = lshr i32 %102, %107
  %109 = and i32 %108, 3
  %110 = zext i32 %109 to i64
  %111 = load i16* @shrink, align 2
  %112 = zext i16 %111 to i32
  %113 = lshr i32 %r.0, %112
  %114 = load i16* @iwidth, align 2
  %115 = zext i16 %114 to i32
  %116 = mul i32 %113, %115
  %117 = load i16* @shrink, align 2
  %118 = zext i16 %117 to i32
  %119 = lshr i32 %c.0, %118
  %120 = add i32 %116, %119
  %121 = zext i32 %120 to i64
  %122 = load [4 x i16]** @image, align 8
  %123 = getelementptr inbounds [4 x i16]* %122, i64 %121
  %124 = getelementptr inbounds [4 x i16]* %123, i32 0, i64 %110
  %125 = load i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add i32 %tot.1, %126
  br label %128

; <label>:128                                     ; preds = %100, %73, %55, %51, %47
  %n.2 = phi i32 [ %101, %100 ], [ %n.1, %73 ], [ %n.1, %55 ], [ %n.1, %51 ], [ %n.1, %47 ]
  %tot.2 = phi i32 [ %127, %100 ], [ %tot.1, %73 ], [ %tot.1, %55 ], [ %tot.1, %51 ], [ %tot.1, %47 ]
  br label %129

; <label>:129                                     ; preds = %128
  %130 = add i32 %c.0, 1
  br label %44

; <label>:131                                     ; preds = %44
  br label %132

; <label>:132                                     ; preds = %131
  %133 = add i32 %r.0, 1
  br label %39

; <label>:134                                     ; preds = %39
  %135 = icmp ne i32 %n.0, 0
  br i1 %135, label %136, label %162

; <label>:136                                     ; preds = %134
  %137 = udiv i32 %tot.0, %n.0
  %138 = trunc i32 %137 to i16
  %139 = load i32* @filters, align 4
  %140 = shl i32 %row.0, 1
  %141 = and i32 %140, 14
  %142 = and i32 %col.0, 1
  %143 = add i32 %141, %142
  %144 = shl i32 %143, 1
  %145 = lshr i32 %139, %144
  %146 = and i32 %145, 3
  %147 = zext i32 %146 to i64
  %148 = load i16* @shrink, align 2
  %149 = zext i16 %148 to i32
  %150 = lshr i32 %row.0, %149
  %151 = load i16* @iwidth, align 2
  %152 = zext i16 %151 to i32
  %153 = mul i32 %150, %152
  %154 = load i16* @shrink, align 2
  %155 = zext i16 %154 to i32
  %156 = lshr i32 %col.0, %155
  %157 = add i32 %153, %156
  %158 = zext i32 %157 to i64
  %159 = load [4 x i16]** @image, align 8
  %160 = getelementptr inbounds [4 x i16]* %159, i64 %158
  %161 = getelementptr inbounds [4 x i16]* %160, i32 0, i64 %147
  store i16 %138, i16* %161, align 2
  br label %162

; <label>:162                                     ; preds = %136, %134
  br label %163

; <label>:163                                     ; preds = %162, %10
  br label %164

; <label>:164                                     ; preds = %163
  %165 = add i32 %col.0, 1
  br label %6

; <label>:166                                     ; preds = %6
  br label %167

; <label>:167                                     ; preds = %166
  %168 = add i32 %row.0, 1
  br label %1

; <label>:169                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @canon_s2is() #0 {
  br label %1

; <label>:1                                       ; preds = %14, %0
  %row.0 = phi i32 [ 0, %0 ], [ %15, %14 ]
  %2 = icmp ult i32 %row.0, 100
  br i1 %2, label %3, label %16

; <label>:3                                       ; preds = %1
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = mul i32 %row.0, 3340
  %6 = add i32 %5, 3284
  %7 = zext i32 %6 to i64
  %8 = call i32 @fseek(%struct._IO_FILE* %4, i64 %7, i32 0)
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i32 @_IO_getc(%struct._IO_FILE* %9)
  %11 = icmp sgt i32 %10, 15
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %3
  br label %17

; <label>:13                                      ; preds = %3
  br label %14

; <label>:14                                      ; preds = %13
  %15 = add i32 %row.0, 1
  br label %1

; <label>:16                                      ; preds = %1
  br label %17

; <label>:17                                      ; preds = %16, %12
  %.0 = phi i32 [ 1, %12 ], [ 0, %16 ]
  ret i32 %.0
}

declare i32 @fseek(%struct._IO_FILE*, i64, i32) #1

declare i32 @_IO_getc(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @canon_a5_load_raw() #0 {
  %data = alloca [2565 x i16], align 16
  store i16 18761, i16* @order, align 2
  %1 = load i16* @top_margin, align 2
  %2 = zext i16 %1 to i32
  %3 = sub nsw i32 0, %2
  br label %4

; <label>:4                                       ; preds = %91, %0
  %row.0 = phi i32 [ %3, %0 ], [ %92, %91 ]
  %buf.0 = phi i32 [ 0, %0 ], [ %buf.1, %91 ]
  %vbits.0 = phi i32 [ 0, %0 ], [ %vbits.1, %91 ]
  %bc.0 = phi i32 [ 0, %0 ], [ %bc.1, %91 ]
  %5 = load i16* @raw_height, align 2
  %6 = zext i16 %5 to i32
  %7 = load i16* @top_margin, align 2
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 %6, %8
  %10 = icmp slt i32 %row.0, %9
  br i1 %10, label %11, label %93

; <label>:11                                      ; preds = %4
  %12 = getelementptr inbounds [2565 x i16]* %data, i32 0, i32 0
  %13 = load i16* @raw_width, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nsw i32 %14, 10
  %16 = sdiv i32 %15, 16
  call void @read_shorts(i16* %12, i32 %16)
  %17 = load i16* @left_margin, align 2
  %18 = zext i16 %17 to i32
  %19 = sub nsw i32 0, %18
  br label %20

; <label>:20                                      ; preds = %88, %11
  %col.0 = phi i32 [ %19, %11 ], [ %89, %88 ]
  %buf.1 = phi i32 [ %buf.0, %11 ], [ %buf.2, %88 ]
  %vbits.1 = phi i32 [ %vbits.0, %11 ], [ %vbits.2, %88 ]
  %bc.1 = phi i32 [ %bc.0, %11 ], [ %bc.3, %88 ]
  %dp.0 = phi i16* [ %12, %11 ], [ %dp.1, %88 ]
  %21 = load i16* @raw_width, align 2
  %22 = zext i16 %21 to i32
  %23 = load i16* @left_margin, align 2
  %24 = zext i16 %23 to i32
  %25 = sub nsw i32 %22, %24
  %26 = icmp slt i32 %col.0, %25
  br i1 %26, label %27, label %90

; <label>:27                                      ; preds = %20
  %28 = sub nsw i32 %vbits.1, 10
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %37

; <label>:30                                      ; preds = %27
  %31 = add nsw i32 %28, 16
  %32 = shl i32 %buf.1, 16
  %33 = getelementptr inbounds i16* %dp.0, i32 1
  %34 = load i16* %dp.0, align 2
  %35 = zext i16 %34 to i32
  %36 = add nsw i32 %32, %35
  br label %37

; <label>:37                                      ; preds = %30, %27
  %buf.2 = phi i32 [ %36, %30 ], [ %buf.1, %27 ]
  %vbits.2 = phi i32 [ %31, %30 ], [ %28, %27 ]
  %dp.1 = phi i16* [ %33, %30 ], [ %dp.0, %27 ]
  %38 = ashr i32 %buf.2, %vbits.2
  %39 = and i32 %38, 1023
  %40 = trunc i32 %39 to i16
  %41 = load i16* @height, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp ult i32 %row.0, %42
  br i1 %43, label %44, label %72

; <label>:44                                      ; preds = %37
  %45 = load i16* @width, align 2
  %46 = zext i16 %45 to i32
  %47 = icmp ult i32 %col.0, %46
  br i1 %47, label %48, label %72

; <label>:48                                      ; preds = %44
  %49 = load i32* @filters, align 4
  %50 = shl i32 %row.0, 1
  %51 = and i32 %50, 14
  %52 = and i32 %col.0, 1
  %53 = add nsw i32 %51, %52
  %54 = shl i32 %53, 1
  %55 = lshr i32 %49, %54
  %56 = and i32 %55, 3
  %57 = zext i32 %56 to i64
  %58 = load i16* @shrink, align 2
  %59 = zext i16 %58 to i32
  %60 = ashr i32 %row.0, %59
  %61 = load i16* @iwidth, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nsw i32 %60, %62
  %64 = load i16* @shrink, align 2
  %65 = zext i16 %64 to i32
  %66 = ashr i32 %col.0, %65
  %67 = add nsw i32 %63, %66
  %68 = sext i32 %67 to i64
  %69 = load [4 x i16]** @image, align 8
  %70 = getelementptr inbounds [4 x i16]* %69, i64 %68
  %71 = getelementptr inbounds [4 x i16]* %70, i32 0, i64 %57
  store i16 %40, i16* %71, align 2
  br label %87

; <label>:72                                      ; preds = %44, %37
  %73 = load i16* @left_margin, align 2
  %74 = zext i16 %73 to i32
  %75 = sub nsw i32 1, %74
  %76 = icmp sgt i32 %col.0, %75
  br i1 %76, label %77, label %86

; <label>:77                                      ; preds = %72
  %78 = load i16* @width, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp ne i32 %col.0, %79
  br i1 %80, label %81, label %86

; <label>:81                                      ; preds = %77
  %82 = add nsw i32 %bc.1, 1
  %83 = zext i16 %40 to i32
  %84 = load i32* @black, align 4
  %85 = add i32 %84, %83
  store i32 %85, i32* @black, align 4
  br label %86

; <label>:86                                      ; preds = %81, %77, %72
  %bc.2 = phi i32 [ %82, %81 ], [ %bc.1, %77 ], [ %bc.1, %72 ]
  br label %87

; <label>:87                                      ; preds = %86, %48
  %bc.3 = phi i32 [ %bc.1, %48 ], [ %bc.2, %86 ]
  br label %88

; <label>:88                                      ; preds = %87
  %89 = add nsw i32 %col.0, 1
  br label %20

; <label>:90                                      ; preds = %20
  br label %91

; <label>:91                                      ; preds = %90
  %92 = add nsw i32 %row.0, 1
  br label %4

; <label>:93                                      ; preds = %4
  %94 = icmp ne i32 %bc.0, 0
  br i1 %94, label %95, label %98

; <label>:95                                      ; preds = %93
  %96 = load i32* @black, align 4
  %97 = udiv i32 %96, %bc.0
  store i32 %97, i32* @black, align 4
  br label %98

; <label>:98                                      ; preds = %95, %93
  store i32 1023, i32* @maximum, align 4
  %99 = load i16* @raw_width, align 2
  %100 = zext i16 %99 to i32
  %101 = icmp sgt i32 %100, 1600
  br i1 %101, label %102, label %103

; <label>:102                                     ; preds = %98
  call void @remove_zeroes()
  br label %103

; <label>:103                                     ; preds = %102, %98
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @getbits(i32 %nbits) #0 {
  %1 = icmp eq i32 %nbits, -1
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* @getbits.reset, align 4
  store i32 0, i32* @getbits.vbits, align 4
  store i32 0, i32* @getbits.bitbuf, align 4
  br label %49

; <label>:3                                       ; preds = %0
  %4 = icmp eq i32 %nbits, 0
  br i1 %4, label %8, label %5

; <label>:5                                       ; preds = %3
  %6 = load i32* @getbits.reset, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %5, %3
  br label %49

; <label>:9                                       ; preds = %5
  br label %10

; <label>:10                                      ; preds = %31, %9
  %11 = load i32* @getbits.vbits, align 4
  %12 = icmp slt i32 %11, %nbits
  br i1 %12, label %13, label %39

; <label>:13                                      ; preds = %10
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i32 @getc_unlocked(%struct._IO_FILE* %14)
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %13
  call void @derror()
  br label %18

; <label>:18                                      ; preds = %17, %13
  %19 = load i32* @zero_after_ff, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %27

; <label>:21                                      ; preds = %18
  %22 = icmp eq i32 %15, 255
  br i1 %22, label %23, label %27

; <label>:23                                      ; preds = %21
  %24 = load %struct._IO_FILE** @ifp, align 8
  %25 = call i32 @getc_unlocked(%struct._IO_FILE* %24)
  %26 = icmp ne i32 %25, 0
  br label %27

; <label>:27                                      ; preds = %23, %21, %18
  %28 = phi i1 [ false, %21 ], [ false, %18 ], [ %26, %23 ]
  %29 = zext i1 %28 to i32
  store i32 %29, i32* @getbits.reset, align 4
  br i1 %28, label %30, label %31

; <label>:30                                      ; preds = %27
  br label %49

; <label>:31                                      ; preds = %27
  %32 = load i32* @getbits.bitbuf, align 4
  %33 = shl i32 %32, 8
  %34 = trunc i32 %15 to i8
  %35 = zext i8 %34 to i32
  %36 = add i32 %33, %35
  store i32 %36, i32* @getbits.bitbuf, align 4
  %37 = load i32* @getbits.vbits, align 4
  %38 = add nsw i32 %37, 8
  store i32 %38, i32* @getbits.vbits, align 4
  br label %10

; <label>:39                                      ; preds = %10
  %40 = load i32* @getbits.vbits, align 4
  %41 = sub nsw i32 %40, %nbits
  store i32 %41, i32* @getbits.vbits, align 4
  %42 = load i32* @getbits.bitbuf, align 4
  %43 = sub nsw i32 32, %nbits
  %44 = load i32* @getbits.vbits, align 4
  %45 = sub nsw i32 %43, %44
  %46 = shl i32 %42, %45
  %47 = sub nsw i32 32, %nbits
  %48 = lshr i32 %46, %47
  br label %49

; <label>:49                                      ; preds = %39, %30, %8, %2
  %.0 = phi i32 [ 0, %2 ], [ 0, %8 ], [ 0, %30 ], [ %48, %39 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @init_decoder() #0 {
  call void @llvm.memset.p0i8.i64(i8* bitcast ([2048 x %struct.decode]* @first_decode to i8*), i8 0, i64 49152, i32 16, i1 false)
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** @free_decode, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @make_decoder(i8* %source, i32 %level) #0 {
  %1 = icmp eq i32 %level, 0
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* @make_decoder.leaf, align 4
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = load %struct.decode** @free_decode, align 8
  %5 = getelementptr inbounds %struct.decode* %4, i32 1
  store %struct.decode* %5, %struct.decode** @free_decode, align 8
  %6 = load %struct.decode** @free_decode, align 8
  %7 = icmp ugt %struct.decode* %6, getelementptr inbounds (%struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), i64 2048)
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %3
  %9 = load %struct._IO_FILE** @stderr, align 8
  %10 = load i8** @ifname, align 8
  %11 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([28 x i8]* @.str4, i32 0, i32 0), i8* %10)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0), i32 2) #8
  unreachable

; <label>:12                                      ; preds = %3
  br label %13

; <label>:13                                      ; preds = %20, %12
  %i.0 = phi i32 [ 0, %12 ], [ %26, %20 ]
  %next.0 = phi i32 [ 0, %12 ], [ %21, %20 ]
  %14 = load i32* @make_decoder.leaf, align 4
  %15 = icmp sle i32 %i.0, %14
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %13
  %17 = icmp slt i32 %next.0, 16
  br label %18

; <label>:18                                      ; preds = %16, %13
  %19 = phi i1 [ false, %13 ], [ %17, %16 ]
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %18
  %21 = add nsw i32 %next.0, 1
  %22 = sext i32 %next.0 to i64
  %23 = getelementptr inbounds i8* %source, i64 %22
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nsw i32 %i.0, %25
  br label %13

; <label>:27                                      ; preds = %18
  %28 = load i32* @make_decoder.leaf, align 4
  %29 = icmp sgt i32 %i.0, %28
  br i1 %29, label %30, label %53

; <label>:30                                      ; preds = %27
  %31 = icmp slt i32 %level, %next.0
  br i1 %31, label %32, label %43

; <label>:32                                      ; preds = %30
  %33 = load %struct.decode** @free_decode, align 8
  %34 = getelementptr inbounds %struct.decode* %4, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.decode*]* %34, i32 0, i64 0
  store %struct.decode* %33, %struct.decode** %35, align 8
  %36 = add nsw i32 %level, 1
  %37 = call i8* @make_decoder(i8* %source, i32 %36)
  %38 = load %struct.decode** @free_decode, align 8
  %39 = getelementptr inbounds %struct.decode* %4, i32 0, i32 0
  %40 = getelementptr inbounds [2 x %struct.decode*]* %39, i32 0, i64 1
  store %struct.decode* %38, %struct.decode** %40, align 8
  %41 = add nsw i32 %level, 1
  %42 = call i8* @make_decoder(i8* %source, i32 %41)
  br label %52

; <label>:43                                      ; preds = %30
  %44 = load i32* @make_decoder.leaf, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* @make_decoder.leaf, align 4
  %46 = add nsw i32 16, %44
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8* %source, i64 %47
  %49 = load i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds %struct.decode* %4, i32 0, i32 1
  store i32 %50, i32* %51, align 4
  br label %52

; <label>:52                                      ; preds = %43, %32
  br label %53

; <label>:53                                      ; preds = %52, %27
  %54 = getelementptr inbounds i8* %source, i64 16
  %55 = load i32* @make_decoder.leaf, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8* %54, i64 %56
  ret i8* %57
}

; Function Attrs: nounwind uwtable
define void @crw_init_tables(i32 %table) #0 {
  %1 = icmp ugt i32 %table, 2
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  br label %3

; <label>:3                                       ; preds = %2, %0
  %.0 = phi i32 [ 2, %2 ], [ %table, %0 ]
  call void @init_decoder()
  %4 = zext i32 %.0 to i64
  %5 = getelementptr inbounds [3 x [29 x i8]]* @crw_init_tables.first_tree, i32 0, i64 %4
  %6 = getelementptr inbounds [29 x i8]* %5, i32 0, i32 0
  %7 = call i8* @make_decoder(i8* %6, i32 0)
  %8 = load %struct.decode** @free_decode, align 8
  store %struct.decode* %8, %struct.decode** @second_decode, align 8
  %9 = zext i32 %.0 to i64
  %10 = getelementptr inbounds [3 x [180 x i8]]* @crw_init_tables.second_tree, i32 0, i64 %9
  %11 = getelementptr inbounds [180 x i8]* %10, i32 0, i32 0
  %12 = call i8* @make_decoder(i8* %11, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @canon_has_lowbits() #0 {
  %test = alloca [16384 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 0, i32 0)
  %3 = getelementptr inbounds [16384 x i8]* %test, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 1, i64 16384, %struct._IO_FILE* %4)
  br label %6

; <label>:6                                       ; preds = %24, %0
  %i.0 = phi i32 [ 540, %0 ], [ %25, %24 ]
  %ret.0 = phi i32 [ 1, %0 ], [ %ret.1, %24 ]
  %7 = sext i32 %i.0 to i64
  %8 = icmp ult i64 %7, 16383
  br i1 %8, label %9, label %26

; <label>:9                                       ; preds = %6
  %10 = sext i32 %i.0 to i64
  %11 = getelementptr inbounds [16384 x i8]* %test, i32 0, i64 %10
  %12 = load i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 255
  br i1 %14, label %15, label %23

; <label>:15                                      ; preds = %9
  %16 = add nsw i32 %i.0, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [16384 x i8]* %test, i32 0, i64 %17
  %19 = load i8* %18, align 1
  %20 = icmp ne i8 %19, 0
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %15
  br label %27

; <label>:22                                      ; preds = %15
  br label %23

; <label>:23                                      ; preds = %22, %9
  %ret.1 = phi i32 [ 0, %22 ], [ %ret.0, %9 ]
  br label %24

; <label>:24                                      ; preds = %23
  %25 = add nsw i32 %i.0, 1
  br label %6

; <label>:26                                      ; preds = %6
  br label %27

; <label>:27                                      ; preds = %26, %21
  %.0 = phi i32 [ 1, %21 ], [ %ret.0, %26 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @canon_compressed_load_raw() #0 {
  %diffbuf = alloca [64 x i32], align 16
  %base = alloca [2 x i32], align 4
  %dark = alloca [2 x double], align 16
  %1 = bitcast [2 x double]* %dark to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = load i32* @tiff_compress, align 4
  call void @crw_init_tables(i32 %2)
  %3 = load i16* @raw_width, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %4, 8
  %6 = sext i32 %5 to i64
  %7 = call noalias i8* @calloc(i64 %6, i64 2) #4
  %8 = bitcast i8* %7 to i16*
  %9 = bitcast i16* %8 to i8*
  call void @merror(i8* %9, i8* getelementptr inbounds ([28 x i8]* @.str5, i32 0, i32 0))
  %10 = call i32 @canon_has_lowbits()
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %13, label %12

; <label>:12                                      ; preds = %0
  store i32 1023, i32* @maximum, align 4
  br label %13

; <label>:13                                      ; preds = %12, %0
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = load i16* @raw_height, align 2
  %16 = zext i16 %15 to i32
  %17 = mul nsw i32 %10, %16
  %18 = load i16* @raw_width, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nsw i32 %17, %19
  %21 = sdiv i32 %20, 4
  %22 = add nsw i32 540, %21
  %23 = sext i32 %22 to i64
  %24 = call i32 @fseek(%struct._IO_FILE* %14, i64 %23, i32 0)
  store i32 1, i32* @zero_after_ff, align 4
  %25 = call i32 @getbits(i32 -1)
  br label %26

; <label>:26                                      ; preds = %272, %13
  %row.0 = phi i32 [ 0, %13 ], [ %273, %272 ]
  %carry.0 = phi i32 [ 0, %13 ], [ %carry.1, %272 ]
  %pnum.0 = phi i32 [ 0, %13 ], [ %pnum.1, %272 ]
  %27 = load i16* @raw_height, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp slt i32 %row.0, %28
  br i1 %29, label %30, label %274

; <label>:30                                      ; preds = %26
  %31 = load i16* @raw_height, align 2
  %32 = zext i16 %31 to i32
  %33 = sub nsw i32 %32, %row.0
  %34 = icmp slt i32 8, %33
  br i1 %34, label %35, label %36

; <label>:35                                      ; preds = %30
  br label %40

; <label>:36                                      ; preds = %30
  %37 = load i16* @raw_height, align 2
  %38 = zext i16 %37 to i32
  %39 = sub nsw i32 %38, %row.0
  br label %40

; <label>:40                                      ; preds = %36, %35
  %41 = phi i32 [ 8, %35 ], [ %39, %36 ]
  %42 = load i16* @raw_width, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nsw i32 %41, %43
  %45 = ashr i32 %44, 6
  br label %46

; <label>:46                                      ; preds = %138, %40
  %block.0 = phi i32 [ 0, %40 ], [ %139, %138 ]
  %carry.1 = phi i32 [ %carry.0, %40 ], [ %104, %138 ]
  %pnum.1 = phi i32 [ %pnum.0, %40 ], [ %pnum.2, %138 ]
  %47 = icmp slt i32 %block.0, %45
  br i1 %47, label %48, label %140

; <label>:48                                      ; preds = %46
  %49 = bitcast [64 x i32]* %diffbuf to i8*
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 256, i32 16, i1 false)
  br label %50

; <label>:50                                      ; preds = %97, %48
  %decode.0 = phi %struct.decode* [ getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %48 ], [ %67, %97 ]
  %i.0 = phi i32 [ 0, %48 ], [ %98, %97 ]
  %51 = icmp slt i32 %i.0, 64
  br i1 %51, label %52, label %99

; <label>:52                                      ; preds = %50
  br label %53

; <label>:53                                      ; preds = %58, %52
  %dindex.0 = phi %struct.decode* [ %decode.0, %52 ], [ %63, %58 ]
  %54 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %55 = getelementptr inbounds [2 x %struct.decode*]* %54, i32 0, i64 0
  %56 = load %struct.decode** %55, align 8
  %57 = icmp ne %struct.decode* %56, null
  br i1 %57, label %58, label %64

; <label>:58                                      ; preds = %53
  %59 = call i32 @getbits(i32 1)
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %62 = getelementptr inbounds [2 x %struct.decode*]* %61, i32 0, i64 %60
  %63 = load %struct.decode** %62, align 8
  br label %53

; <label>:64                                      ; preds = %53
  %65 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 1
  %66 = load i32* %65, align 4
  %67 = load %struct.decode** @second_decode, align 8
  %68 = icmp eq i32 %66, 0
  br i1 %68, label %69, label %72

; <label>:69                                      ; preds = %64
  %70 = icmp ne i32 %i.0, 0
  br i1 %70, label %71, label %72

; <label>:71                                      ; preds = %69
  br label %99

; <label>:72                                      ; preds = %69, %64
  %73 = icmp eq i32 %66, 255
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %72
  br label %97

; <label>:75                                      ; preds = %72
  %76 = ashr i32 %66, 4
  %77 = add nsw i32 %i.0, %76
  %78 = and i32 %66, 15
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

; <label>:80                                      ; preds = %75
  br label %97

; <label>:81                                      ; preds = %75
  %82 = call i32 @getbits(i32 %78)
  %83 = sub nsw i32 %78, 1
  %84 = shl i32 1, %83
  %85 = and i32 %82, %84
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %91

; <label>:87                                      ; preds = %81
  %88 = shl i32 1, %78
  %89 = sub nsw i32 %88, 1
  %90 = sub nsw i32 %82, %89
  br label %91

; <label>:91                                      ; preds = %87, %81
  %diff.0 = phi i32 [ %90, %87 ], [ %82, %81 ]
  %92 = icmp slt i32 %77, 64
  br i1 %92, label %93, label %96

; <label>:93                                      ; preds = %91
  %94 = sext i32 %77 to i64
  %95 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 %94
  store i32 %diff.0, i32* %95, align 4
  br label %96

; <label>:96                                      ; preds = %93, %91
  br label %97

; <label>:97                                      ; preds = %96, %80, %74
  %i.1 = phi i32 [ %i.0, %74 ], [ %77, %80 ], [ %77, %96 ]
  %98 = add nsw i32 %i.1, 1
  br label %50

; <label>:99                                      ; preds = %71, %50
  %100 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 0
  %101 = load i32* %100, align 4
  %102 = add nsw i32 %101, %carry.1
  store i32 %102, i32* %100, align 4
  %103 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 0
  %104 = load i32* %103, align 4
  br label %105

; <label>:105                                     ; preds = %135, %99
  %i.2 = phi i32 [ 0, %99 ], [ %136, %135 ]
  %pnum.2 = phi i32 [ %pnum.1, %99 ], [ %108, %135 ]
  %106 = icmp slt i32 %i.2, 64
  br i1 %106, label %107, label %137

; <label>:107                                     ; preds = %105
  %108 = add nsw i32 %pnum.2, 1
  %109 = load i16* @raw_width, align 2
  %110 = zext i16 %109 to i32
  %111 = srem i32 %pnum.2, %110
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %116

; <label>:113                                     ; preds = %107
  %114 = getelementptr inbounds [2 x i32]* %base, i32 0, i64 1
  store i32 512, i32* %114, align 4
  %115 = getelementptr inbounds [2 x i32]* %base, i32 0, i64 0
  store i32 512, i32* %115, align 4
  br label %116

; <label>:116                                     ; preds = %113, %107
  %117 = sext i32 %i.2 to i64
  %118 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 %117
  %119 = load i32* %118, align 4
  %120 = and i32 %i.2, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [2 x i32]* %base, i32 0, i64 %121
  %123 = load i32* %122, align 4
  %124 = add nsw i32 %123, %119
  store i32 %124, i32* %122, align 4
  %125 = trunc i32 %124 to i16
  %126 = shl i32 %block.0, 6
  %127 = add nsw i32 %126, %i.2
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i16* %8, i64 %128
  store i16 %125, i16* %129, align 2
  %130 = zext i16 %125 to i32
  %131 = ashr i32 %130, 10
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %134

; <label>:133                                     ; preds = %116
  call void @derror()
  br label %134

; <label>:134                                     ; preds = %133, %116
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %i.2, 1
  br label %105

; <label>:137                                     ; preds = %105
  br label %138

; <label>:138                                     ; preds = %137
  %139 = add nsw i32 %block.0, 1
  br label %46

; <label>:140                                     ; preds = %46
  %141 = icmp ne i32 %10, 0
  br i1 %141, label %142, label %192

; <label>:142                                     ; preds = %140
  %143 = load %struct._IO_FILE** @ifp, align 8
  %144 = call i64 @ftell(%struct._IO_FILE* %143)
  %145 = trunc i64 %144 to i32
  %146 = load %struct._IO_FILE** @ifp, align 8
  %147 = load i16* @raw_width, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nsw i32 %row.0, %148
  %150 = sdiv i32 %149, 4
  %151 = add nsw i32 26, %150
  %152 = sext i32 %151 to i64
  %153 = call i32 @fseek(%struct._IO_FILE* %146, i64 %152, i32 0)
  br label %154

; <label>:154                                     ; preds = %186, %142
  %i.3 = phi i32 [ 0, %142 ], [ %187, %186 ]
  %prow.0 = phi i16* [ %8, %142 ], [ %prow.1, %186 ]
  %155 = load i16* @raw_width, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nsw i32 %156, 2
  %158 = icmp slt i32 %i.3, %157
  br i1 %158, label %159, label %188

; <label>:159                                     ; preds = %154
  %160 = load %struct._IO_FILE** @ifp, align 8
  %161 = call i32 @getc_unlocked(%struct._IO_FILE* %160)
  %162 = trunc i32 %161 to i8
  br label %163

; <label>:163                                     ; preds = %182, %159
  %r.0 = phi i32 [ 0, %159 ], [ %183, %182 ]
  %prow.1 = phi i16* [ %prow.0, %159 ], [ %184, %182 ]
  %164 = icmp slt i32 %r.0, 8
  br i1 %164, label %165, label %185

; <label>:165                                     ; preds = %163
  %166 = load i16* %prow.1, align 2
  %167 = zext i16 %166 to i32
  %168 = shl i32 %167, 2
  %169 = zext i8 %162 to i32
  %170 = ashr i32 %169, %r.0
  %171 = and i32 %170, 3
  %172 = add nsw i32 %168, %171
  %173 = load i16* @raw_width, align 2
  %174 = zext i16 %173 to i32
  %175 = icmp eq i32 %174, 2672
  br i1 %175, label %176, label %180

; <label>:176                                     ; preds = %165
  %177 = icmp slt i32 %172, 512
  br i1 %177, label %178, label %180

; <label>:178                                     ; preds = %176
  %179 = add nsw i32 %172, 2
  br label %180

; <label>:180                                     ; preds = %178, %176, %165
  %val.0 = phi i32 [ %179, %178 ], [ %172, %176 ], [ %172, %165 ]
  %181 = trunc i32 %val.0 to i16
  store i16 %181, i16* %prow.1, align 2
  br label %182

; <label>:182                                     ; preds = %180
  %183 = add nsw i32 %r.0, 2
  %184 = getelementptr inbounds i16* %prow.1, i32 1
  br label %163

; <label>:185                                     ; preds = %163
  br label %186

; <label>:186                                     ; preds = %185
  %187 = add nsw i32 %i.3, 1
  br label %154

; <label>:188                                     ; preds = %154
  %189 = load %struct._IO_FILE** @ifp, align 8
  %190 = sext i32 %145 to i64
  %191 = call i32 @fseek(%struct._IO_FILE* %189, i64 %190, i32 0)
  br label %192

; <label>:192                                     ; preds = %188, %140
  br label %193

; <label>:193                                     ; preds = %269, %192
  %r.1 = phi i32 [ 0, %192 ], [ %270, %269 ]
  %194 = icmp slt i32 %r.1, 8
  br i1 %194, label %195, label %271

; <label>:195                                     ; preds = %193
  %196 = load i16* @top_margin, align 2
  %197 = zext i16 %196 to i32
  %198 = sub nsw i32 %row.0, %197
  %199 = add nsw i32 %198, %r.1
  %200 = load i16* @height, align 2
  %201 = zext i16 %200 to i32
  %202 = icmp uge i32 %199, %201
  br i1 %202, label %203, label %204

; <label>:203                                     ; preds = %195
  br label %269

; <label>:204                                     ; preds = %195
  br label %205

; <label>:205                                     ; preds = %266, %204
  %col.0 = phi i32 [ 0, %204 ], [ %267, %266 ]
  %206 = load i16* @raw_width, align 2
  %207 = zext i16 %206 to i32
  %208 = icmp slt i32 %col.0, %207
  br i1 %208, label %209, label %268

; <label>:209                                     ; preds = %205
  %210 = load i16* @left_margin, align 2
  %211 = zext i16 %210 to i32
  %212 = sub nsw i32 %col.0, %211
  %213 = load i16* @width, align 2
  %214 = zext i16 %213 to i32
  %215 = icmp ult i32 %212, %214
  br i1 %215, label %216, label %247

; <label>:216                                     ; preds = %209
  %217 = load i16* @raw_width, align 2
  %218 = zext i16 %217 to i32
  %219 = mul nsw i32 %r.1, %218
  %220 = add nsw i32 %219, %col.0
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i16* %8, i64 %221
  %223 = load i16* %222, align 2
  %224 = load i32* @filters, align 4
  %225 = shl i32 %199, 1
  %226 = and i32 %225, 14
  %227 = and i32 %212, 1
  %228 = add i32 %226, %227
  %229 = shl i32 %228, 1
  %230 = lshr i32 %224, %229
  %231 = and i32 %230, 3
  %232 = zext i32 %231 to i64
  %233 = load i16* @shrink, align 2
  %234 = zext i16 %233 to i32
  %235 = lshr i32 %199, %234
  %236 = load i16* @iwidth, align 2
  %237 = zext i16 %236 to i32
  %238 = mul i32 %235, %237
  %239 = load i16* @shrink, align 2
  %240 = zext i16 %239 to i32
  %241 = lshr i32 %212, %240
  %242 = add i32 %238, %241
  %243 = zext i32 %242 to i64
  %244 = load [4 x i16]** @image, align 8
  %245 = getelementptr inbounds [4 x i16]* %244, i64 %243
  %246 = getelementptr inbounds [4 x i16]* %245, i32 0, i64 %232
  store i16 %223, i16* %246, align 2
  br label %265

; <label>:247                                     ; preds = %209
  %248 = icmp sgt i32 %col.0, 1
  br i1 %248, label %249, label %264

; <label>:249                                     ; preds = %247
  %250 = load i16* @raw_width, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nsw i32 %r.1, %251
  %253 = add nsw i32 %252, %col.0
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i16* %8, i64 %254
  %256 = load i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = sitofp i32 %257 to double
  %259 = and i32 %212, 1
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [2 x double]* %dark, i32 0, i64 %260
  %262 = load double* %261, align 8
  %263 = fadd double %262, %258
  store double %263, double* %261, align 8
  br label %264

; <label>:264                                     ; preds = %249, %247
  br label %265

; <label>:265                                     ; preds = %264, %216
  br label %266

; <label>:266                                     ; preds = %265
  %267 = add nsw i32 %col.0, 1
  br label %205

; <label>:268                                     ; preds = %205
  br label %269

; <label>:269                                     ; preds = %268, %203
  %270 = add nsw i32 %r.1, 1
  br label %193

; <label>:271                                     ; preds = %193
  br label %272

; <label>:272                                     ; preds = %271
  %273 = add nsw i32 %row.0, 8
  br label %26

; <label>:274                                     ; preds = %26
  %275 = bitcast i16* %8 to i8*
  call void @free(i8* %275) #4
  %276 = getelementptr inbounds [2 x double]* %dark, i32 0, i32 0
  call void @canon_black(double* %276)
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #3

declare i64 @ftell(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define i32 @ljpeg_start(%struct.jhead* %jh, i32 %info_only) #0 {
  %data = alloca [65536 x i8], align 16
  %1 = icmp ne i32 %info_only, 0
  br i1 %1, label %3, label %2

; <label>:2                                       ; preds = %0
  call void @init_decoder()
  br label %3

; <label>:3                                       ; preds = %2, %0
  %4 = bitcast %struct.jhead* %jh to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 112, i32 8, i1 false)
  br label %5

; <label>:5                                       ; preds = %12, %3
  %c.0 = phi i32 [ 0, %3 ], [ %13, %12 ]
  %6 = icmp slt i32 %c.0, 6
  br i1 %6, label %7, label %14

; <label>:7                                       ; preds = %5
  %8 = load %struct.decode** @free_decode, align 8
  %9 = sext i32 %c.0 to i64
  %10 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %11 = getelementptr inbounds [6 x %struct.decode*]* %10, i32 0, i64 %9
  store %struct.decode* %8, %struct.decode** %11, align 8
  br label %12

; <label>:12                                      ; preds = %7
  %13 = add nsw i32 %c.0, 1
  br label %5

; <label>:14                                      ; preds = %5
  %15 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 6
  store i32 2147483647, i32* %15, align 4
  %16 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %17 = load %struct._IO_FILE** @ifp, align 8
  %18 = call i64 @fread(i8* %16, i64 2, i64 1, %struct._IO_FILE* %17)
  %19 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %20 = load i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = icmp ne i32 %21, 216
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %14
  br label %215

; <label>:24                                      ; preds = %14
  br label %25

; <label>:25                                      ; preds = %164, %24
  %26 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i64 @fread(i8* %26, i64 2, i64 2, %struct._IO_FILE* %27)
  %29 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %30 = load i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl i32 %31, 8
  %33 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = or i32 %32, %35
  %37 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 2
  %38 = load i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = shl i32 %39, 8
  %41 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 3
  %42 = load i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %40, %43
  %45 = sub nsw i32 %44, 2
  %46 = icmp sle i32 %36, 65280
  br i1 %46, label %47, label %48

; <label>:47                                      ; preds = %25
  br label %215

; <label>:48                                      ; preds = %25
  %49 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %50 = sext i32 %45 to i64
  %51 = load %struct._IO_FILE** @ifp, align 8
  %52 = call i64 @fread(i8* %49, i64 1, i64 %50, %struct._IO_FILE* %51)
  switch i32 %36, label %163 [
    i32 65475, label %53
    i32 65472, label %66
    i32 65476, label %104
    i32 65498, label %129
    i32 65501, label %153
  ]

; <label>:53                                      ; preds = %48
  %54 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 7
  %55 = load i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = ashr i32 %56, 4
  %58 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 7
  %59 = load i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = and i32 %60, 15
  %62 = mul nsw i32 %57, %61
  %63 = sub nsw i32 %62, 1
  %64 = and i32 %63, 3
  %65 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  store i32 %64, i32* %65, align 4
  br label %66

; <label>:66                                      ; preds = %53, %48
  %67 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %68 = load i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %72 = load i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %73, 8
  %75 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 2
  %76 = load i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = or i32 %74, %77
  %79 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  store i32 %78, i32* %79, align 4
  %80 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 3
  %81 = load i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl i32 %82, 8
  %84 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 4
  %85 = load i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = or i32 %83, %86
  %88 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  store i32 %87, i32* %88, align 4
  %89 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 5
  %90 = load i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %93 = load i32* %92, align 4
  %94 = add nsw i32 %91, %93
  %95 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  store i32 %94, i32* %95, align 4
  %96 = icmp eq i32 %45, 9
  br i1 %96, label %97, label %103

; <label>:97                                      ; preds = %66
  %98 = load i32* @dng_version, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %103, label %100

; <label>:100                                     ; preds = %97
  %101 = load %struct._IO_FILE** @ifp, align 8
  %102 = call i32 @_IO_getc(%struct._IO_FILE* %101)
  br label %103

; <label>:103                                     ; preds = %100, %97, %66
  br label %163

; <label>:104                                     ; preds = %48
  %105 = icmp ne i32 %info_only, 0
  br i1 %105, label %106, label %107

; <label>:106                                     ; preds = %104
  br label %163

; <label>:107                                     ; preds = %104
  %108 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  br label %109

; <label>:109                                     ; preds = %120, %107
  %dp.0 = phi i8* [ %108, %107 ], [ %127, %120 ]
  %110 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %111 = sext i32 %45 to i64
  %112 = getelementptr inbounds i8* %110, i64 %111
  %113 = icmp ult i8* %dp.0, %112
  br i1 %113, label %114, label %118

; <label>:114                                     ; preds = %109
  %115 = load i8* %dp.0, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp slt i32 %116, 4
  br label %118

; <label>:118                                     ; preds = %114, %109
  %119 = phi i1 [ false, %109 ], [ %117, %114 ]
  br i1 %119, label %120, label %128

; <label>:120                                     ; preds = %118
  %121 = load %struct.decode** @free_decode, align 8
  %122 = load i8* %dp.0, align 1
  %123 = zext i8 %122 to i64
  %124 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %125 = getelementptr inbounds [6 x %struct.decode*]* %124, i32 0, i64 %123
  store %struct.decode* %121, %struct.decode** %125, align 8
  %126 = getelementptr inbounds i8* %dp.0, i32 1
  %127 = call i8* @make_decoder(i8* %126, i32 0)
  br label %109

; <label>:128                                     ; preds = %118
  br label %163

; <label>:129                                     ; preds = %48
  %130 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %131 = load i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = mul nsw i32 %132, 2
  %134 = add nsw i32 1, %133
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 %135
  %137 = load i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 5
  store i32 %138, i32* %139, align 4
  %140 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %141 = load i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = mul nsw i32 %142, 2
  %144 = add nsw i32 3, %143
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 %145
  %147 = load i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = and i32 %148, 15
  %150 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %151 = load i32* %150, align 4
  %152 = sub nsw i32 %151, %149
  store i32 %152, i32* %150, align 4
  br label %163

; <label>:153                                     ; preds = %48
  %154 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %155 = load i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = shl i32 %156, 8
  %158 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %159 = load i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = or i32 %157, %160
  %162 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 6
  store i32 %161, i32* %162, align 4
  br label %163

; <label>:163                                     ; preds = %153, %129, %128, %106, %103, %48
  br label %164

; <label>:164                                     ; preds = %163
  %165 = icmp ne i32 %36, 65498
  br i1 %165, label %25, label %166

; <label>:166                                     ; preds = %164
  %167 = icmp ne i32 %info_only, 0
  br i1 %167, label %168, label %169

; <label>:168                                     ; preds = %166
  br label %215

; <label>:169                                     ; preds = %166
  %170 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %171 = load i32* %170, align 4
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %173, label %202

; <label>:173                                     ; preds = %169
  br label %174

; <label>:174                                     ; preds = %184, %173
  %c.1 = phi i32 [ 0, %173 ], [ %185, %184 ]
  %175 = icmp slt i32 %c.1, 4
  br i1 %175, label %176, label %186

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %178 = getelementptr inbounds [6 x %struct.decode*]* %177, i32 0, i64 1
  %179 = load %struct.decode** %178, align 8
  %180 = add nsw i32 2, %c.1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %183 = getelementptr inbounds [6 x %struct.decode*]* %182, i32 0, i64 %181
  store %struct.decode* %179, %struct.decode** %183, align 8
  br label %184

; <label>:184                                     ; preds = %176
  %185 = add nsw i32 %c.1, 1
  br label %174

; <label>:186                                     ; preds = %174
  br label %187

; <label>:187                                     ; preds = %199, %186
  %c.2 = phi i32 [ 0, %186 ], [ %200, %199 ]
  %188 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %189 = load i32* %188, align 4
  %190 = icmp slt i32 %c.2, %189
  br i1 %190, label %191, label %201

; <label>:191                                     ; preds = %187
  %192 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %193 = getelementptr inbounds [6 x %struct.decode*]* %192, i32 0, i64 0
  %194 = load %struct.decode** %193, align 8
  %195 = add nsw i32 1, %c.2
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %198 = getelementptr inbounds [6 x %struct.decode*]* %197, i32 0, i64 %196
  store %struct.decode* %194, %struct.decode** %198, align 8
  br label %199

; <label>:199                                     ; preds = %191
  %200 = add nsw i32 %c.2, 1
  br label %187

; <label>:201                                     ; preds = %187
  br label %202

; <label>:202                                     ; preds = %201, %169
  %203 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %204 = load i32* %203, align 4
  %205 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %206 = load i32* %205, align 4
  %207 = mul nsw i32 %204, %206
  %208 = sext i32 %207 to i64
  %209 = call noalias i8* @calloc(i64 %208, i64 4) #4
  %210 = bitcast i8* %209 to i16*
  %211 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  store i16* %210, i16** %211, align 8
  %212 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %213 = load i16** %212, align 8
  %214 = bitcast i16* %213 to i8*
  call void @merror(i8* %214, i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0))
  store i32 1, i32* @zero_after_ff, align 4
  br label %215

; <label>:215                                     ; preds = %202, %168, %47, %23
  %.0 = phi i32 [ 0, %23 ], [ 0, %47 ], [ 1, %168 ], [ 1, %202 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @ljpeg_diff(%struct.decode* %dindex) #0 {
  br label %1

; <label>:1                                       ; preds = %6, %0
  %.01 = phi %struct.decode* [ %dindex, %0 ], [ %11, %6 ]
  %2 = getelementptr inbounds %struct.decode* %.01, i32 0, i32 0
  %3 = getelementptr inbounds [2 x %struct.decode*]* %2, i32 0, i64 0
  %4 = load %struct.decode** %3, align 8
  %5 = icmp ne %struct.decode* %4, null
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %1
  %7 = call i32 @getbits(i32 1)
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.decode* %.01, i32 0, i32 0
  %10 = getelementptr inbounds [2 x %struct.decode*]* %9, i32 0, i64 %8
  %11 = load %struct.decode** %10, align 8
  br label %1

; <label>:12                                      ; preds = %1
  %13 = getelementptr inbounds %struct.decode* %.01, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = icmp eq i32 %14, 16
  br i1 %15, label %16, label %23

; <label>:16                                      ; preds = %12
  %17 = load i32* @dng_version, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %16
  %20 = load i32* @dng_version, align 4
  %21 = icmp uge i32 %20, 16842752
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %19, %16
  br label %34

; <label>:23                                      ; preds = %19, %12
  %24 = call i32 @getbits(i32 %14)
  %25 = sub nsw i32 %14, 1
  %26 = shl i32 1, %25
  %27 = and i32 %24, %26
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

; <label>:29                                      ; preds = %23
  %30 = shl i32 1, %14
  %31 = sub nsw i32 %30, 1
  %32 = sub nsw i32 %24, %31
  br label %33

; <label>:33                                      ; preds = %29, %23
  %diff.0 = phi i32 [ %32, %29 ], [ %24, %23 ]
  br label %34

; <label>:34                                      ; preds = %33, %22
  %.0 = phi i32 [ -32768, %22 ], [ %diff.0, %33 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i16* @ljpeg_row(i32 %jrow, %struct.jhead* %jh) #0 {
  %row = alloca [3 x i16*], align 16
  %1 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %2 = load i32* %1, align 4
  %3 = mul nsw i32 %jrow, %2
  %4 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 6
  %5 = load i32* %4, align 4
  %6 = srem i32 %3, %5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %42

; <label>:8                                       ; preds = %0
  br label %9

; <label>:9                                       ; preds = %19, %8
  %c.0 = phi i32 [ 0, %8 ], [ %20, %19 ]
  %10 = icmp slt i32 %c.0, 6
  br i1 %10, label %11, label %21

; <label>:11                                      ; preds = %9
  %12 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %13 = load i32* %12, align 4
  %14 = sub nsw i32 %13, 1
  %15 = shl i32 1, %14
  %16 = sext i32 %c.0 to i64
  %17 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 7
  %18 = getelementptr inbounds [6 x i32]* %17, i32 0, i64 %16
  store i32 %15, i32* %18, align 4
  br label %19

; <label>:19                                      ; preds = %11
  %20 = add nsw i32 %c.0, 1
  br label %9

; <label>:21                                      ; preds = %9
  %22 = icmp ne i32 %jrow, 0
  br i1 %22, label %23, label %40

; <label>:23                                      ; preds = %21
  br label %24

; <label>:24                                      ; preds = %37, %23
  %mark.0 = phi i16 [ 0, %23 ], [ %30, %37 ]
  %25 = zext i16 %mark.0 to i32
  %26 = shl i32 %25, 8
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i32 @getc_unlocked(%struct._IO_FILE* %27)
  %29 = add nsw i32 %26, %28
  %30 = trunc i32 %29 to i16
  br label %31

; <label>:31                                      ; preds = %24
  %32 = icmp ne i32 %28, -1
  br i1 %32, label %33, label %37

; <label>:33                                      ; preds = %31
  %34 = zext i16 %30 to i32
  %35 = ashr i32 %34, 4
  %36 = icmp ne i32 %35, 4093
  br label %37

; <label>:37                                      ; preds = %33, %31
  %38 = phi i1 [ false, %31 ], [ %36, %33 ]
  br i1 %38, label %24, label %39

; <label>:39                                      ; preds = %37
  br label %40

; <label>:40                                      ; preds = %39, %21
  %41 = call i32 @getbits(i32 -1)
  br label %42

; <label>:42                                      ; preds = %40, %0
  br label %43

; <label>:43                                      ; preds = %60, %42
  %c.1 = phi i32 [ 0, %42 ], [ %61, %60 ]
  %44 = icmp slt i32 %c.1, 3
  br i1 %44, label %45, label %62

; <label>:45                                      ; preds = %43
  %46 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %47 = load i16** %46, align 8
  %48 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %49 = load i32* %48, align 4
  %50 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %51 = load i32* %50, align 4
  %52 = mul nsw i32 %49, %51
  %53 = add nsw i32 %jrow, %c.1
  %54 = and i32 %53, 1
  %55 = mul nsw i32 %52, %54
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i16* %47, i64 %56
  %58 = sext i32 %c.1 to i64
  %59 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 %58
  store i16* %57, i16** %59, align 8
  br label %60

; <label>:60                                      ; preds = %45
  %61 = add nsw i32 %c.1, 1
  br label %43

; <label>:62                                      ; preds = %43
  br label %63

; <label>:63                                      ; preds = %226, %62
  %col.0 = phi i32 [ 0, %62 ], [ %227, %226 ]
  %spred.0 = phi i32 [ 0, %62 ], [ %spred.1, %226 ]
  %64 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %65 = load i32* %64, align 4
  %66 = icmp slt i32 %col.0, %65
  br i1 %66, label %67, label %228

; <label>:67                                      ; preds = %63
  br label %68

; <label>:68                                      ; preds = %223, %67
  %c.2 = phi i32 [ 0, %67 ], [ %224, %223 ]
  %spred.1 = phi i32 [ %spred.0, %67 ], [ %spred.2, %223 ]
  %69 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %70 = load i32* %69, align 4
  %71 = icmp slt i32 %c.2, %70
  br i1 %71, label %72, label %225

; <label>:72                                      ; preds = %68
  %73 = sext i32 %c.2 to i64
  %74 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %75 = getelementptr inbounds [6 x %struct.decode*]* %74, i32 0, i64 %73
  %76 = load %struct.decode** %75, align 8
  %77 = call i32 @ljpeg_diff(%struct.decode* %76)
  %78 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %79 = load i32* %78, align 4
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %89

; <label>:81                                      ; preds = %72
  %82 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %83 = load i32* %82, align 4
  %84 = icmp sle i32 %c.2, %83
  br i1 %84, label %85, label %89

; <label>:85                                      ; preds = %81
  %86 = or i32 %col.0, %c.2
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %89

; <label>:88                                      ; preds = %85
  br label %109

; <label>:89                                      ; preds = %85, %81, %72
  %90 = icmp ne i32 %col.0, 0
  br i1 %90, label %91, label %101

; <label>:91                                      ; preds = %89
  %92 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %93 = load i32* %92, align 4
  %94 = sub nsw i32 0, %93
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 0
  %97 = load i16** %96, align 8
  %98 = getelementptr inbounds i16* %97, i64 %95
  %99 = load i16* %98, align 2
  %100 = zext i16 %99 to i32
  br label %108

; <label>:101                                     ; preds = %89
  %102 = sext i32 %c.2 to i64
  %103 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 7
  %104 = getelementptr inbounds [6 x i32]* %103, i32 0, i64 %102
  %105 = load i32* %104, align 4
  %106 = add nsw i32 %105, %77
  store i32 %106, i32* %104, align 4
  %107 = sub nsw i32 %106, %77
  br label %108

; <label>:108                                     ; preds = %101, %91
  %pred.0 = phi i32 [ %100, %91 ], [ %107, %101 ]
  br label %109

; <label>:109                                     ; preds = %108, %88
  %pred.1 = phi i32 [ %spred.1, %88 ], [ %pred.0, %108 ]
  %110 = icmp ne i32 %jrow, 0
  br i1 %110, label %111, label %196

; <label>:111                                     ; preds = %109
  %112 = icmp ne i32 %col.0, 0
  br i1 %112, label %113, label %196

; <label>:113                                     ; preds = %111
  %114 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 5
  %115 = load i32* %114, align 4
  switch i32 %115, label %194 [
    i32 1, label %116
    i32 2, label %117
    i32 3, label %123
    i32 4, label %133
    i32 5, label %150
    i32 6, label %168
    i32 7, label %186
  ]

; <label>:116                                     ; preds = %113
  br label %195

; <label>:117                                     ; preds = %113
  %118 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %119 = load i16** %118, align 8
  %120 = getelementptr inbounds i16* %119, i64 0
  %121 = load i16* %120, align 2
  %122 = zext i16 %121 to i32
  br label %195

; <label>:123                                     ; preds = %113
  %124 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %125 = load i32* %124, align 4
  %126 = sub nsw i32 0, %125
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %129 = load i16** %128, align 8
  %130 = getelementptr inbounds i16* %129, i64 %127
  %131 = load i16* %130, align 2
  %132 = zext i16 %131 to i32
  br label %195

; <label>:133                                     ; preds = %113
  %134 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %135 = load i16** %134, align 8
  %136 = getelementptr inbounds i16* %135, i64 0
  %137 = load i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = add nsw i32 %pred.1, %138
  %140 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %141 = load i32* %140, align 4
  %142 = sub nsw i32 0, %141
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %145 = load i16** %144, align 8
  %146 = getelementptr inbounds i16* %145, i64 %143
  %147 = load i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = sub nsw i32 %139, %148
  br label %195

; <label>:150                                     ; preds = %113
  %151 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %152 = load i16** %151, align 8
  %153 = getelementptr inbounds i16* %152, i64 0
  %154 = load i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %157 = load i32* %156, align 4
  %158 = sub nsw i32 0, %157
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %161 = load i16** %160, align 8
  %162 = getelementptr inbounds i16* %161, i64 %159
  %163 = load i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = sub nsw i32 %155, %164
  %166 = ashr i32 %165, 1
  %167 = add nsw i32 %pred.1, %166
  br label %195

; <label>:168                                     ; preds = %113
  %169 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %170 = load i16** %169, align 8
  %171 = getelementptr inbounds i16* %170, i64 0
  %172 = load i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %175 = load i32* %174, align 4
  %176 = sub nsw i32 0, %175
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %179 = load i16** %178, align 8
  %180 = getelementptr inbounds i16* %179, i64 %177
  %181 = load i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = sub nsw i32 %pred.1, %182
  %184 = ashr i32 %183, 1
  %185 = add nsw i32 %173, %184
  br label %195

; <label>:186                                     ; preds = %113
  %187 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %188 = load i16** %187, align 8
  %189 = getelementptr inbounds i16* %188, i64 0
  %190 = load i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nsw i32 %pred.1, %191
  %193 = ashr i32 %192, 1
  br label %195

; <label>:194                                     ; preds = %113
  br label %195

; <label>:195                                     ; preds = %194, %186, %168, %150, %133, %123, %117, %116
  %pred.2 = phi i32 [ 0, %194 ], [ %193, %186 ], [ %185, %168 ], [ %167, %150 ], [ %149, %133 ], [ %132, %123 ], [ %122, %117 ], [ %pred.1, %116 ]
  br label %196

; <label>:196                                     ; preds = %195, %111, %109
  %pred.3 = phi i32 [ %pred.2, %195 ], [ %pred.1, %111 ], [ %pred.1, %109 ]
  %197 = add nsw i32 %pred.3, %77
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds [3 x i16*]* %row, i32 0, i32 0
  %200 = load i16** %199, align 8
  store i16 %198, i16* %200, align 2
  %201 = zext i16 %198 to i32
  %202 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %203 = load i32* %202, align 4
  %204 = ashr i32 %201, %203
  %205 = icmp ne i32 %204, 0
  br i1 %205, label %206, label %207

; <label>:206                                     ; preds = %196
  call void @derror()
  br label %207

; <label>:207                                     ; preds = %206, %196
  %208 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %209 = load i32* %208, align 4
  %210 = icmp sle i32 %c.2, %209
  br i1 %210, label %211, label %216

; <label>:211                                     ; preds = %207
  %212 = getelementptr inbounds [3 x i16*]* %row, i32 0, i32 0
  %213 = load i16** %212, align 8
  %214 = load i16* %213, align 2
  %215 = zext i16 %214 to i32
  br label %216

; <label>:216                                     ; preds = %211, %207
  %spred.2 = phi i32 [ %215, %211 ], [ %spred.1, %207 ]
  %217 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 0
  %218 = load i16** %217, align 8
  %219 = getelementptr inbounds i16* %218, i32 1
  store i16* %219, i16** %217, align 8
  %220 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %221 = load i16** %220, align 8
  %222 = getelementptr inbounds i16* %221, i32 1
  store i16* %222, i16** %220, align 8
  br label %223

; <label>:223                                     ; preds = %216
  %224 = add nsw i32 %c.2, 1
  br label %68

; <label>:225                                     ; preds = %68
  br label %226

; <label>:226                                     ; preds = %225
  %227 = add nsw i32 %col.0, 1
  br label %63

; <label>:228                                     ; preds = %63
  %229 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 2
  %230 = load i16** %229, align 8
  ret i16* %230
}

; Function Attrs: nounwind uwtable
define void @lossless_jpeg_load_raw() #0 {
  %dark = alloca [2 x double], align 16
  %jh = alloca %struct.jhead, align 8
  %1 = bitcast [2 x double]* %dark to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %176

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %7 = load i32* %6, align 4
  %8 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %9 = load i32* %8, align 4
  %10 = mul nsw i32 %7, %9
  br label %11

; <label>:11                                      ; preds = %166, %5
  %col.0 = phi i32 [ 0, %5 ], [ %col.1, %166 ]
  %row.0 = phi i32 [ 0, %5 ], [ %row.1, %166 ]
  %min.0 = phi i32 [ 2147483647, %5 ], [ %min.1, %166 ]
  %jrow.0 = phi i32 [ 0, %5 ], [ %167, %166 ]
  %12 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = icmp slt i32 %jrow.0, %13
  br i1 %14, label %15, label %168

; <label>:15                                      ; preds = %11
  %16 = call i16* @ljpeg_row(i32 %jrow.0, %struct.jhead* %jh)
  br label %17

; <label>:17                                      ; preds = %163, %15
  %col.1 = phi i32 [ %col.0, %15 ], [ %col.4, %163 ]
  %row.1 = phi i32 [ %row.0, %15 ], [ %row.4, %163 ]
  %min.1 = phi i32 [ %min.0, %15 ], [ %min.4, %163 ]
  %jcol.0 = phi i32 [ 0, %15 ], [ %164, %163 ]
  %rp.0 = phi i16* [ %16, %15 ], [ %20, %163 ]
  %18 = icmp slt i32 %jcol.0, %10
  br i1 %18, label %19, label %165

; <label>:19                                      ; preds = %17
  %20 = getelementptr inbounds i16* %rp.0, i32 1
  %21 = load i16* %rp.0, align 2
  %22 = zext i16 %21 to i32
  %23 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %24 = load i32* %23, align 4
  %25 = icmp sle i32 %24, 12
  br i1 %25, label %26, label %32

; <label>:26                                      ; preds = %19
  %27 = and i32 %22, 4095
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %28
  %30 = load i16* %29, align 2
  %31 = zext i16 %30 to i32
  br label %32

; <label>:32                                      ; preds = %26, %19
  %val.0 = phi i32 [ %31, %26 ], [ %22, %19 ]
  %33 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %34 = icmp ne i16 %33, 0
  br i1 %34, label %35, label %75

; <label>:35                                      ; preds = %32
  %36 = mul nsw i32 %jrow.0, %10
  %37 = add nsw i32 %36, %jcol.0
  %38 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %41 = load i32* %40, align 4
  %42 = mul nsw i32 %39, %41
  %43 = sdiv i32 %37, %42
  %44 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %45 = zext i16 %44 to i32
  %46 = icmp sge i32 %43, %45
  %47 = zext i1 %46 to i32
  br i1 %46, label %48, label %51

; <label>:48                                      ; preds = %35
  %49 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %50 = zext i16 %49 to i32
  br label %51

; <label>:51                                      ; preds = %48, %35
  %i.0 = phi i32 [ %50, %48 ], [ %43, %35 ]
  %52 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %53 = zext i16 %52 to i32
  %54 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %55 = load i32* %54, align 4
  %56 = mul nsw i32 %53, %55
  %57 = mul nsw i32 %i.0, %56
  %58 = sub nsw i32 %37, %57
  %59 = add nsw i32 1, %47
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [3 x i16]* @cr2_slice, i32 0, i64 %60
  %62 = load i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = sdiv i32 %58, %63
  %65 = add nsw i32 1, %47
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [3 x i16]* @cr2_slice, i32 0, i64 %66
  %68 = load i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = srem i32 %58, %69
  %71 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %72 = zext i16 %71 to i32
  %73 = mul nsw i32 %i.0, %72
  %74 = add nsw i32 %70, %73
  br label %75

; <label>:75                                      ; preds = %51, %32
  %col.2 = phi i32 [ %74, %51 ], [ %col.1, %32 ]
  %row.2 = phi i32 [ %64, %51 ], [ %row.1, %32 ]
  %76 = load i16* @raw_width, align 2
  %77 = zext i16 %76 to i32
  %78 = icmp eq i32 %77, 3984
  br i1 %78, label %79, label %87

; <label>:79                                      ; preds = %75
  %80 = sub nsw i32 %col.2, 2
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %87

; <label>:82                                      ; preds = %79
  %83 = add nsw i32 %row.2, -1
  %84 = load i16* @raw_width, align 2
  %85 = zext i16 %84 to i32
  %86 = add nsw i32 %80, %85
  br label %87

; <label>:87                                      ; preds = %82, %79, %75
  %col.3 = phi i32 [ %86, %82 ], [ %80, %79 ], [ %col.2, %75 ]
  %row.3 = phi i32 [ %83, %82 ], [ %row.2, %79 ], [ %row.2, %75 ]
  %88 = load i16* @top_margin, align 2
  %89 = zext i16 %88 to i32
  %90 = sub nsw i32 %row.3, %89
  %91 = load i16* @height, align 2
  %92 = zext i16 %91 to i32
  %93 = icmp ult i32 %90, %92
  br i1 %93, label %94, label %155

; <label>:94                                      ; preds = %87
  %95 = load i16* @left_margin, align 2
  %96 = zext i16 %95 to i32
  %97 = sub nsw i32 %col.3, %96
  %98 = load i16* @width, align 2
  %99 = zext i16 %98 to i32
  %100 = icmp ult i32 %97, %99
  br i1 %100, label %101, label %141

; <label>:101                                     ; preds = %94
  %102 = trunc i32 %val.0 to i16
  %103 = load i32* @filters, align 4
  %104 = load i16* @top_margin, align 2
  %105 = zext i16 %104 to i32
  %106 = sub nsw i32 %row.3, %105
  %107 = shl i32 %106, 1
  %108 = and i32 %107, 14
  %109 = load i16* @left_margin, align 2
  %110 = zext i16 %109 to i32
  %111 = sub nsw i32 %col.3, %110
  %112 = and i32 %111, 1
  %113 = add nsw i32 %108, %112
  %114 = shl i32 %113, 1
  %115 = lshr i32 %103, %114
  %116 = and i32 %115, 3
  %117 = zext i32 %116 to i64
  %118 = load i16* @top_margin, align 2
  %119 = zext i16 %118 to i32
  %120 = sub nsw i32 %row.3, %119
  %121 = load i16* @shrink, align 2
  %122 = zext i16 %121 to i32
  %123 = ashr i32 %120, %122
  %124 = load i16* @iwidth, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nsw i32 %123, %125
  %127 = load i16* @left_margin, align 2
  %128 = zext i16 %127 to i32
  %129 = sub nsw i32 %col.3, %128
  %130 = load i16* @shrink, align 2
  %131 = zext i16 %130 to i32
  %132 = ashr i32 %129, %131
  %133 = add nsw i32 %126, %132
  %134 = sext i32 %133 to i64
  %135 = load [4 x i16]** @image, align 8
  %136 = getelementptr inbounds [4 x i16]* %135, i64 %134
  %137 = getelementptr inbounds [4 x i16]* %136, i32 0, i64 %117
  store i16 %102, i16* %137, align 2
  %138 = icmp sgt i32 %min.1, %val.0
  br i1 %138, label %139, label %140

; <label>:139                                     ; preds = %101
  br label %140

; <label>:140                                     ; preds = %139, %101
  %min.2 = phi i32 [ %val.0, %139 ], [ %min.1, %101 ]
  br label %154

; <label>:141                                     ; preds = %94
  %142 = icmp sgt i32 %col.3, 1
  br i1 %142, label %143, label %153

; <label>:143                                     ; preds = %141
  %144 = sitofp i32 %val.0 to double
  %145 = load i16* @left_margin, align 2
  %146 = zext i16 %145 to i32
  %147 = sub nsw i32 %col.3, %146
  %148 = and i32 %147, 1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [2 x double]* %dark, i32 0, i64 %149
  %151 = load double* %150, align 8
  %152 = fadd double %151, %144
  store double %152, double* %150, align 8
  br label %153

; <label>:153                                     ; preds = %143, %141
  br label %154

; <label>:154                                     ; preds = %153, %140
  %min.3 = phi i32 [ %min.2, %140 ], [ %min.1, %153 ]
  br label %155

; <label>:155                                     ; preds = %154, %87
  %min.4 = phi i32 [ %min.3, %154 ], [ %min.1, %87 ]
  %156 = add nsw i32 %col.3, 1
  %157 = load i16* @raw_width, align 2
  %158 = zext i16 %157 to i32
  %159 = icmp sge i32 %156, %158
  br i1 %159, label %160, label %162

; <label>:160                                     ; preds = %155
  %161 = add nsw i32 %row.3, 1
  br label %162

; <label>:162                                     ; preds = %160, %155
  %col.4 = phi i32 [ 0, %160 ], [ %156, %155 ]
  %row.4 = phi i32 [ %161, %160 ], [ %row.3, %155 ]
  br label %163

; <label>:163                                     ; preds = %162
  %164 = add nsw i32 %jcol.0, 1
  br label %17

; <label>:165                                     ; preds = %17
  br label %166

; <label>:166                                     ; preds = %165
  %167 = add nsw i32 %jrow.0, 1
  br label %11

; <label>:168                                     ; preds = %11
  %169 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %170 = load i16** %169, align 8
  %171 = bitcast i16* %170 to i8*
  call void @free(i8* %171) #4
  %172 = getelementptr inbounds [2 x double]* %dark, i32 0, i32 0
  call void @canon_black(double* %172)
  %173 = call i32 @strcasecmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0)) #10
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %176, label %175

; <label>:175                                     ; preds = %168
  store i32 %min.0, i32* @black, align 4
  br label %176

; <label>:176                                     ; preds = %175, %168, %4
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define void @canon_sraw_load_raw() #0 {
  %jh = alloca %struct.jhead, align 8
  %pix = alloca [3 x i32], align 4
  %v = alloca [3 x i32], align 4
  %1 = bitcast [3 x i32]* %v to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 12, i32 4, i1 false)
  %2 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %482

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %7 = load i32* %6, align 4
  %8 = ashr i32 %7, 1
  store i32 %8, i32* %6, align 4
  %9 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %10 = load i32* %9, align 4
  %11 = mul nsw i32 %8, %10
  br label %12

; <label>:12                                      ; preds = %123, %5
  %jcol.0 = phi i32 [ 0, %5 ], [ %jcol.1, %123 ]
  %jrow.0 = phi i32 [ 0, %5 ], [ %jrow.1, %123 ]
  %ecol.0 = phi i32 [ 0, %5 ], [ %ecol.1, %123 ]
  %slice.0 = phi i32 [ 0, %5 ], [ %124, %123 ]
  %rp.0 = phi i16* [ null, %5 ], [ %rp.1, %123 ]
  %13 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %14 = zext i16 %13 to i32
  %15 = icmp sle i32 %slice.0, %14
  br i1 %15, label %16, label %125

; <label>:16                                      ; preds = %12
  %17 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %18 = zext i16 %17 to i32
  %19 = mul nsw i32 %18, 2
  %20 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %21 = load i32* %20, align 4
  %22 = sdiv i32 %19, %21
  %23 = add nsw i32 %ecol.0, %22
  %24 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %25 = icmp ne i16 %24, 0
  br i1 %25, label %26, label %31

; <label>:26                                      ; preds = %16
  %27 = load i16* @raw_width, align 2
  %28 = zext i16 %27 to i32
  %29 = sub nsw i32 %28, 1
  %30 = icmp sgt i32 %23, %29
  br i1 %30, label %31, label %35

; <label>:31                                      ; preds = %26, %16
  %32 = load i16* @raw_width, align 2
  %33 = zext i16 %32 to i32
  %34 = and i32 %33, -2
  br label %35

; <label>:35                                      ; preds = %31, %26
  %ecol.1 = phi i32 [ %34, %31 ], [ %23, %26 ]
  br label %36

; <label>:36                                      ; preds = %116, %35
  %jcol.1 = phi i32 [ %jcol.0, %35 ], [ %jcol.2, %116 ]
  %jrow.1 = phi i32 [ %jrow.0, %35 ], [ %jrow.2, %116 ]
  %row.0 = phi i32 [ 0, %35 ], [ %121, %116 ]
  %rp.1 = phi i16* [ %rp.0, %35 ], [ %rp.2, %116 ]
  %37 = load i16* @height, align 2
  %38 = zext i16 %37 to i32
  %39 = icmp slt i32 %row.0, %38
  br i1 %39, label %40, label %122

; <label>:40                                      ; preds = %36
  %41 = load [4 x i16]** @image, align 8
  %42 = load i16* @width, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nsw i32 %row.0, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [4 x i16]* %41, i64 %45
  br label %47

; <label>:47                                      ; preds = %110, %40
  %jcol.2 = phi i32 [ %jcol.1, %40 ], [ %114, %110 ]
  %jrow.2 = phi i32 [ %jrow.1, %40 ], [ %jrow.3, %110 ]
  %col.0 = phi i32 [ %ecol.0, %40 ], [ %111, %110 ]
  %rp.2 = phi i16* [ %rp.1, %40 ], [ %rp.3, %110 ]
  %48 = icmp slt i32 %col.0, %ecol.1
  br i1 %48, label %49, label %115

; <label>:49                                      ; preds = %47
  %50 = srem i32 %jcol.2, %11
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %55

; <label>:52                                      ; preds = %49
  %53 = add nsw i32 %jrow.2, 1
  %54 = call i16* @ljpeg_row(i32 %jrow.2, %struct.jhead* %jh)
  br label %55

; <label>:55                                      ; preds = %52, %49
  %jrow.3 = phi i32 [ %53, %52 ], [ %jrow.2, %49 ]
  %rp.3 = phi i16* [ %54, %52 ], [ %rp.2, %49 ]
  %56 = load i16* @width, align 2
  %57 = zext i16 %56 to i32
  %58 = icmp sge i32 %col.0, %57
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %55
  br label %110

; <label>:60                                      ; preds = %55
  br label %61

; <label>:61                                      ; preds = %81, %60
  %c.0 = phi i32 [ 0, %60 ], [ %82, %81 ]
  %62 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %63 = load i32* %62, align 4
  %64 = sub nsw i32 %63, 2
  %65 = icmp slt i32 %c.0, %64
  br i1 %65, label %66, label %83

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %50, %c.0
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i16* %rp.3, i64 %68
  %70 = load i16* %69, align 2
  %71 = ashr i32 %c.0, 1
  %72 = load i16* @width, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nsw i32 %71, %73
  %75 = add nsw i32 %col.0, %74
  %76 = and i32 %c.0, 1
  %77 = add nsw i32 %75, %76
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [4 x i16]* %46, i64 %78
  %80 = getelementptr inbounds [4 x i16]* %79, i32 0, i64 0
  store i16 %70, i16* %80, align 2
  br label %81

; <label>:81                                      ; preds = %66
  %82 = add nsw i32 %c.0, 1
  br label %61

; <label>:83                                      ; preds = %61
  %84 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %85 = load i32* %84, align 4
  %86 = add nsw i32 %50, %85
  %87 = sub nsw i32 %86, 2
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i16* %rp.3, i64 %88
  %90 = load i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = sub nsw i32 %91, 16384
  %93 = trunc i32 %92 to i16
  %94 = sext i32 %col.0 to i64
  %95 = getelementptr inbounds [4 x i16]* %46, i64 %94
  %96 = getelementptr inbounds [4 x i16]* %95, i32 0, i64 1
  store i16 %93, i16* %96, align 2
  %97 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %98 = load i32* %97, align 4
  %99 = add nsw i32 %50, %98
  %100 = sub nsw i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i16* %rp.3, i64 %101
  %103 = load i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = sub nsw i32 %104, 16384
  %106 = trunc i32 %105 to i16
  %107 = sext i32 %col.0 to i64
  %108 = getelementptr inbounds [4 x i16]* %46, i64 %107
  %109 = getelementptr inbounds [4 x i16]* %108, i32 0, i64 2
  store i16 %106, i16* %109, align 2
  br label %110

; <label>:110                                     ; preds = %83, %59
  %111 = add nsw i32 %col.0, 2
  %112 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %113 = load i32* %112, align 4
  %114 = add nsw i32 %50, %113
  br label %47

; <label>:115                                     ; preds = %47
  br label %116

; <label>:116                                     ; preds = %115
  %117 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %118 = load i32* %117, align 4
  %119 = ashr i32 %118, 1
  %120 = sub nsw i32 %119, 1
  %121 = add nsw i32 %row.0, %120
  br label %36

; <label>:122                                     ; preds = %36
  br label %123

; <label>:123                                     ; preds = %122
  %124 = add nsw i32 %slice.0, 1
  br label %12

; <label>:125                                     ; preds = %12
  br label %126

; <label>:126                                     ; preds = %145, %125
  %cp.0 = phi i8* [ getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), %125 ], [ %146, %145 ]
  %127 = load i8* %cp.0, align 1
  %128 = sext i8 %127 to i32
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %142

; <label>:130                                     ; preds = %126
  %131 = load i8* %cp.0, align 1
  %132 = sext i8 %131 to i32
  %133 = sext i32 %132 to i64
  %134 = call i16** @__ctype_b_loc() #9
  %135 = load i16** %134, align 8
  %136 = getelementptr inbounds i16* %135, i64 %133
  %137 = load i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = and i32 %138, 2048
  %140 = icmp ne i32 %139, 0
  %141 = xor i1 %140, true
  br label %142

; <label>:142                                     ; preds = %130, %126
  %143 = phi i1 [ false, %126 ], [ %141, %130 ]
  br i1 %143, label %144, label %147

; <label>:144                                     ; preds = %142
  br label %145

; <label>:145                                     ; preds = %144
  %146 = getelementptr inbounds i8* %cp.0, i32 1
  br label %126

; <label>:147                                     ; preds = %142
  %148 = getelementptr inbounds [3 x i32]* %v, i32 0, i32 0
  %149 = getelementptr inbounds [3 x i32]* %v, i32 0, i32 0
  %150 = getelementptr inbounds i32* %149, i64 1
  %151 = getelementptr inbounds [3 x i32]* %v, i32 0, i32 0
  %152 = getelementptr inbounds i32* %151, i64 2
  %153 = call i32 (i8*, i8*, ...)* @sscanf(i8* %cp.0, i8* getelementptr inbounds ([9 x i8]* @.str8, i32 0, i32 0), i32* %148, i32* %150, i32* %152) #4
  %154 = getelementptr inbounds [3 x i32]* %v, i32 0, i64 0
  %155 = load i32* %154, align 4
  %156 = mul nsw i32 %155, 1000
  %157 = getelementptr inbounds [3 x i32]* %v, i32 0, i64 1
  %158 = load i32* %157, align 4
  %159 = add nsw i32 %156, %158
  %160 = mul nsw i32 %159, 1000
  %161 = getelementptr inbounds [3 x i32]* %v, i32 0, i64 2
  %162 = load i32* %161, align 4
  %163 = add nsw i32 %160, %162
  %164 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %165 = load i32* %164, align 4
  %166 = add nsw i32 %165, 1
  %167 = shl i32 %166, 2
  %168 = load i32* @unique_id, align 4
  %169 = icmp eq i32 %168, -2147483112
  br i1 %169, label %170, label %178

; <label>:170                                     ; preds = %147
  %171 = icmp sgt i32 %163, 1000006
  br i1 %171, label %172, label %178

; <label>:172                                     ; preds = %170
  %173 = icmp slt i32 %163, 3000000
  br i1 %173, label %174, label %178

; <label>:174                                     ; preds = %172
  %175 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %176 = load i32* %175, align 4
  %177 = shl i32 %176, 1
  br label %178

; <label>:178                                     ; preds = %174, %172, %170, %147
  %hue.0 = phi i32 [ %177, %174 ], [ %167, %172 ], [ %167, %170 ], [ %167, %147 ]
  %179 = load [4 x i16]** @image, align 8
  %180 = getelementptr inbounds [4 x i16]* %179, i64 0
  %181 = getelementptr inbounds [4 x i16]* %180, i32 0, i32 0
  br label %182

; <label>:182                                     ; preds = %306, %178
  %row.1 = phi i32 [ 0, %178 ], [ %307, %306 ]
  %ip.0 = phi [4 x i16]* [ %179, %178 ], [ %311, %306 ]
  %183 = load i16* @height, align 2
  %184 = zext i16 %183 to i32
  %185 = icmp slt i32 %row.1, %184
  br i1 %185, label %186, label %312

; <label>:186                                     ; preds = %182
  %187 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %188 = load i32* %187, align 4
  %189 = ashr i32 %188, 1
  %190 = and i32 %row.1, %189
  %191 = icmp ne i32 %190, 0
  br i1 %191, label %192, label %252

; <label>:192                                     ; preds = %186
  br label %193

; <label>:193                                     ; preds = %249, %192
  %col.1 = phi i32 [ 0, %192 ], [ %250, %249 ]
  %194 = load i16* @width, align 2
  %195 = zext i16 %194 to i32
  %196 = icmp slt i32 %col.1, %195
  br i1 %196, label %197, label %251

; <label>:197                                     ; preds = %193
  br label %198

; <label>:198                                     ; preds = %246, %197
  %c.1 = phi i32 [ 1, %197 ], [ %247, %246 ]
  %199 = icmp slt i32 %c.1, 3
  br i1 %199, label %200, label %248

; <label>:200                                     ; preds = %198
  %201 = load i16* @height, align 2
  %202 = zext i16 %201 to i32
  %203 = sub nsw i32 %202, 1
  %204 = icmp eq i32 %row.1, %203
  br i1 %204, label %205, label %218

; <label>:205                                     ; preds = %200
  %206 = sext i32 %c.1 to i64
  %207 = load i16* @width, align 2
  %208 = zext i16 %207 to i32
  %209 = sub nsw i32 %col.1, %208
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [4 x i16]* %ip.0, i64 %210
  %212 = getelementptr inbounds [4 x i16]* %211, i32 0, i64 %206
  %213 = load i16* %212, align 2
  %214 = sext i32 %c.1 to i64
  %215 = sext i32 %col.1 to i64
  %216 = getelementptr inbounds [4 x i16]* %ip.0, i64 %215
  %217 = getelementptr inbounds [4 x i16]* %216, i32 0, i64 %214
  store i16 %213, i16* %217, align 2
  br label %245

; <label>:218                                     ; preds = %200
  %219 = sext i32 %c.1 to i64
  %220 = load i16* @width, align 2
  %221 = zext i16 %220 to i32
  %222 = sub nsw i32 %col.1, %221
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [4 x i16]* %ip.0, i64 %223
  %225 = getelementptr inbounds [4 x i16]* %224, i32 0, i64 %219
  %226 = load i16* %225, align 2
  %227 = sext i16 %226 to i32
  %228 = sext i32 %c.1 to i64
  %229 = load i16* @width, align 2
  %230 = zext i16 %229 to i32
  %231 = add nsw i32 %col.1, %230
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [4 x i16]* %ip.0, i64 %232
  %234 = getelementptr inbounds [4 x i16]* %233, i32 0, i64 %228
  %235 = load i16* %234, align 2
  %236 = sext i16 %235 to i32
  %237 = add nsw i32 %227, %236
  %238 = add nsw i32 %237, 1
  %239 = ashr i32 %238, 1
  %240 = trunc i32 %239 to i16
  %241 = sext i32 %c.1 to i64
  %242 = sext i32 %col.1 to i64
  %243 = getelementptr inbounds [4 x i16]* %ip.0, i64 %242
  %244 = getelementptr inbounds [4 x i16]* %243, i32 0, i64 %241
  store i16 %240, i16* %244, align 2
  br label %245

; <label>:245                                     ; preds = %218, %205
  br label %246

; <label>:246                                     ; preds = %245
  %247 = add nsw i32 %c.1, 1
  br label %198

; <label>:248                                     ; preds = %198
  br label %249

; <label>:249                                     ; preds = %248
  %250 = add nsw i32 %col.1, 2
  br label %193

; <label>:251                                     ; preds = %193
  br label %252

; <label>:252                                     ; preds = %251, %186
  br label %253

; <label>:253                                     ; preds = %303, %252
  %col.2 = phi i32 [ 1, %252 ], [ %304, %303 ]
  %254 = load i16* @width, align 2
  %255 = zext i16 %254 to i32
  %256 = icmp slt i32 %col.2, %255
  br i1 %256, label %257, label %305

; <label>:257                                     ; preds = %253
  br label %258

; <label>:258                                     ; preds = %300, %257
  %c.2 = phi i32 [ 1, %257 ], [ %301, %300 ]
  %259 = icmp slt i32 %c.2, 3
  br i1 %259, label %260, label %302

; <label>:260                                     ; preds = %258
  %261 = load i16* @width, align 2
  %262 = zext i16 %261 to i32
  %263 = sub nsw i32 %262, 1
  %264 = icmp eq i32 %col.2, %263
  br i1 %264, label %265, label %276

; <label>:265                                     ; preds = %260
  %266 = sext i32 %c.2 to i64
  %267 = sub nsw i32 %col.2, 1
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds [4 x i16]* %ip.0, i64 %268
  %270 = getelementptr inbounds [4 x i16]* %269, i32 0, i64 %266
  %271 = load i16* %270, align 2
  %272 = sext i32 %c.2 to i64
  %273 = sext i32 %col.2 to i64
  %274 = getelementptr inbounds [4 x i16]* %ip.0, i64 %273
  %275 = getelementptr inbounds [4 x i16]* %274, i32 0, i64 %272
  store i16 %271, i16* %275, align 2
  br label %299

; <label>:276                                     ; preds = %260
  %277 = sext i32 %c.2 to i64
  %278 = sub nsw i32 %col.2, 1
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [4 x i16]* %ip.0, i64 %279
  %281 = getelementptr inbounds [4 x i16]* %280, i32 0, i64 %277
  %282 = load i16* %281, align 2
  %283 = sext i16 %282 to i32
  %284 = sext i32 %c.2 to i64
  %285 = add nsw i32 %col.2, 1
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds [4 x i16]* %ip.0, i64 %286
  %288 = getelementptr inbounds [4 x i16]* %287, i32 0, i64 %284
  %289 = load i16* %288, align 2
  %290 = sext i16 %289 to i32
  %291 = add nsw i32 %283, %290
  %292 = add nsw i32 %291, 1
  %293 = ashr i32 %292, 1
  %294 = trunc i32 %293 to i16
  %295 = sext i32 %c.2 to i64
  %296 = sext i32 %col.2 to i64
  %297 = getelementptr inbounds [4 x i16]* %ip.0, i64 %296
  %298 = getelementptr inbounds [4 x i16]* %297, i32 0, i64 %295
  store i16 %294, i16* %298, align 2
  br label %299

; <label>:299                                     ; preds = %276, %265
  br label %300

; <label>:300                                     ; preds = %299
  %301 = add nsw i32 %c.2, 1
  br label %258

; <label>:302                                     ; preds = %258
  br label %303

; <label>:303                                     ; preds = %302
  %304 = add nsw i32 %col.2, 2
  br label %253

; <label>:305                                     ; preds = %253
  br label %306

; <label>:306                                     ; preds = %305
  %307 = add nsw i32 %row.1, 1
  %308 = load i16* @width, align 2
  %309 = zext i16 %308 to i32
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds [4 x i16]* %ip.0, i64 %310
  br label %182

; <label>:312                                     ; preds = %182
  br label %313

; <label>:313                                     ; preds = %476, %312
  %rp.4 = phi i16* [ %181, %312 ], [ %477, %476 ]
  %314 = getelementptr inbounds [4 x i16]* %ip.0, i64 0
  %315 = getelementptr inbounds [4 x i16]* %314, i32 0, i32 0
  %316 = icmp ult i16* %rp.4, %315
  br i1 %316, label %317, label %478

; <label>:317                                     ; preds = %313
  %318 = load i32* @unique_id, align 4
  %319 = icmp ult i32 %318, -2147483136
  br i1 %319, label %320, label %355

; <label>:320                                     ; preds = %317
  %321 = getelementptr inbounds i16* %rp.4, i64 0
  %322 = load i16* %321, align 2
  %323 = sext i16 %322 to i32
  %324 = getelementptr inbounds i16* %rp.4, i64 2
  %325 = load i16* %324, align 2
  %326 = sext i16 %325 to i32
  %327 = add nsw i32 %323, %326
  %328 = sub nsw i32 %327, 512
  %329 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 0
  store i32 %328, i32* %329, align 4
  %330 = getelementptr inbounds i16* %rp.4, i64 0
  %331 = load i16* %330, align 2
  %332 = sext i16 %331 to i32
  %333 = getelementptr inbounds i16* %rp.4, i64 1
  %334 = load i16* %333, align 2
  %335 = sext i16 %334 to i32
  %336 = add nsw i32 %332, %335
  %337 = sub nsw i32 %336, 512
  %338 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 2
  store i32 %337, i32* %338, align 4
  %339 = getelementptr inbounds i16* %rp.4, i64 0
  %340 = load i16* %339, align 2
  %341 = sext i16 %340 to i32
  %342 = getelementptr inbounds i16* %rp.4, i64 1
  %343 = load i16* %342, align 2
  %344 = sext i16 %343 to i32
  %345 = mul nsw i32 -778, %344
  %346 = getelementptr inbounds i16* %rp.4, i64 2
  %347 = load i16* %346, align 2
  %348 = sext i16 %347 to i32
  %349 = shl i32 %348, 11
  %350 = sub nsw i32 %345, %349
  %351 = ashr i32 %350, 12
  %352 = add nsw i32 %341, %351
  %353 = sub nsw i32 %352, 512
  %354 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 1
  store i32 %353, i32* %354, align 4
  br label %415

; <label>:355                                     ; preds = %317
  %356 = getelementptr inbounds i16* %rp.4, i64 1
  %357 = load i16* %356, align 2
  %358 = sext i16 %357 to i32
  %359 = shl i32 %358, 2
  %360 = add nsw i32 %359, %hue.0
  %361 = trunc i32 %360 to i16
  %362 = getelementptr inbounds i16* %rp.4, i64 1
  store i16 %361, i16* %362, align 2
  %363 = getelementptr inbounds i16* %rp.4, i64 2
  %364 = load i16* %363, align 2
  %365 = sext i16 %364 to i32
  %366 = shl i32 %365, 2
  %367 = add nsw i32 %366, %hue.0
  %368 = trunc i32 %367 to i16
  %369 = getelementptr inbounds i16* %rp.4, i64 2
  store i16 %368, i16* %369, align 2
  %370 = getelementptr inbounds i16* %rp.4, i64 0
  %371 = load i16* %370, align 2
  %372 = sext i16 %371 to i32
  %373 = getelementptr inbounds i16* %rp.4, i64 1
  %374 = load i16* %373, align 2
  %375 = sext i16 %374 to i32
  %376 = mul nsw i32 200, %375
  %377 = getelementptr inbounds i16* %rp.4, i64 2
  %378 = load i16* %377, align 2
  %379 = sext i16 %378 to i32
  %380 = mul nsw i32 22929, %379
  %381 = add nsw i32 %376, %380
  %382 = ashr i32 %381, 14
  %383 = add nsw i32 %372, %382
  %384 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 0
  store i32 %383, i32* %384, align 4
  %385 = getelementptr inbounds i16* %rp.4, i64 0
  %386 = load i16* %385, align 2
  %387 = sext i16 %386 to i32
  %388 = getelementptr inbounds i16* %rp.4, i64 1
  %389 = load i16* %388, align 2
  %390 = sext i16 %389 to i32
  %391 = mul nsw i32 -5640, %390
  %392 = getelementptr inbounds i16* %rp.4, i64 2
  %393 = load i16* %392, align 2
  %394 = sext i16 %393 to i32
  %395 = mul nsw i32 11751, %394
  %396 = sub nsw i32 %391, %395
  %397 = ashr i32 %396, 14
  %398 = add nsw i32 %387, %397
  %399 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 1
  store i32 %398, i32* %399, align 4
  %400 = getelementptr inbounds i16* %rp.4, i64 0
  %401 = load i16* %400, align 2
  %402 = sext i16 %401 to i32
  %403 = getelementptr inbounds i16* %rp.4, i64 1
  %404 = load i16* %403, align 2
  %405 = sext i16 %404 to i32
  %406 = mul nsw i32 29040, %405
  %407 = getelementptr inbounds i16* %rp.4, i64 2
  %408 = load i16* %407, align 2
  %409 = sext i16 %408 to i32
  %410 = mul nsw i32 101, %409
  %411 = sub nsw i32 %406, %410
  %412 = ashr i32 %411, 14
  %413 = add nsw i32 %402, %412
  %414 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 2
  store i32 %413, i32* %414, align 4
  br label %415

; <label>:415                                     ; preds = %355, %320
  br label %416

; <label>:416                                     ; preds = %473, %415
  %c.3 = phi i32 [ 0, %415 ], [ %474, %473 ]
  %417 = icmp slt i32 %c.3, 3
  br i1 %417, label %418, label %475

; <label>:418                                     ; preds = %416
  %419 = sext i32 %c.3 to i64
  %420 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %419
  %421 = load i32* %420, align 4
  %422 = sext i32 %c.3 to i64
  %423 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %422
  %424 = load i16* %423, align 2
  %425 = zext i16 %424 to i32
  %426 = mul nsw i32 %421, %425
  %427 = ashr i32 %426, 10
  %428 = icmp slt i32 %427, 65535
  br i1 %428, label %429, label %439

; <label>:429                                     ; preds = %418
  %430 = sext i32 %c.3 to i64
  %431 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %c.3 to i64
  %434 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %433
  %435 = load i16* %434, align 2
  %436 = zext i16 %435 to i32
  %437 = mul nsw i32 %432, %436
  %438 = ashr i32 %437, 10
  br label %440

; <label>:439                                     ; preds = %418
  br label %440

; <label>:440                                     ; preds = %439, %429
  %441 = phi i32 [ %438, %429 ], [ 65535, %439 ]
  %442 = icmp sgt i32 0, %441
  br i1 %442, label %443, label %444

; <label>:443                                     ; preds = %440
  br label %468

; <label>:444                                     ; preds = %440
  %445 = sext i32 %c.3 to i64
  %446 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %445
  %447 = load i32* %446, align 4
  %448 = sext i32 %c.3 to i64
  %449 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %448
  %450 = load i16* %449, align 2
  %451 = zext i16 %450 to i32
  %452 = mul nsw i32 %447, %451
  %453 = ashr i32 %452, 10
  %454 = icmp slt i32 %453, 65535
  br i1 %454, label %455, label %465

; <label>:455                                     ; preds = %444
  %456 = sext i32 %c.3 to i64
  %457 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %456
  %458 = load i32* %457, align 4
  %459 = sext i32 %c.3 to i64
  %460 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %459
  %461 = load i16* %460, align 2
  %462 = zext i16 %461 to i32
  %463 = mul nsw i32 %458, %462
  %464 = ashr i32 %463, 10
  br label %466

; <label>:465                                     ; preds = %444
  br label %466

; <label>:466                                     ; preds = %465, %455
  %467 = phi i32 [ %464, %455 ], [ 65535, %465 ]
  br label %468

; <label>:468                                     ; preds = %466, %443
  %469 = phi i32 [ 0, %443 ], [ %467, %466 ]
  %470 = trunc i32 %469 to i16
  %471 = sext i32 %c.3 to i64
  %472 = getelementptr inbounds i16* %rp.4, i64 %471
  store i16 %470, i16* %472, align 2
  br label %473

; <label>:473                                     ; preds = %468
  %474 = add nsw i32 %c.3, 1
  br label %416

; <label>:475                                     ; preds = %416
  br label %476

; <label>:476                                     ; preds = %475
  %477 = getelementptr inbounds i16* %rp.4, i64 4
  br label %313

; <label>:478                                     ; preds = %313
  %479 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %480 = load i16** %479, align 8
  %481 = bitcast i16* %480 to i8*
  call void @free(i8* %481) #4
  store i32 16383, i32* @maximum, align 4
  br label %482

; <label>:482                                     ; preds = %478, %4
  ret void
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #5

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define void @adobe_copy_pixel(i32 %row, i32 %col, i16** %rp) #0 {
  %1 = load i16* @top_margin, align 2
  %2 = zext i16 %1 to i32
  %3 = sub nsw i32 %row, %2
  %4 = load i16* @left_margin, align 2
  %5 = zext i16 %4 to i32
  %6 = sub nsw i32 %col, %5
  %7 = load i32* @is_raw, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %15

; <label>:9                                       ; preds = %0
  %10 = load i32* @shot_select, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %9
  %13 = load i16** %rp, align 8
  %14 = getelementptr inbounds i16* %13, i32 1
  store i16* %14, i16** %rp, align 8
  br label %15

; <label>:15                                      ; preds = %12, %9, %0
  %16 = load i32* @filters, align 4
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %86

; <label>:18                                      ; preds = %15
  %19 = load i16* @fuji_width, align 2
  %20 = icmp ne i16 %19, 0
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %18
  %22 = load i16* @fuji_width, align 2
  %23 = zext i16 %22 to i32
  %24 = add nsw i32 %3, %23
  %25 = sub nsw i32 %24, 1
  %26 = ashr i32 %6, 1
  %27 = sub nsw i32 %25, %26
  %28 = add nsw i32 %6, 1
  %29 = ashr i32 %28, 1
  %30 = add nsw i32 %3, %29
  br label %31

; <label>:31                                      ; preds = %21, %18
  %r.0 = phi i32 [ %27, %21 ], [ %3, %18 ]
  %c.0 = phi i32 [ %30, %21 ], [ %6, %18 ]
  %32 = load i16* @height, align 2
  %33 = zext i16 %32 to i32
  %34 = icmp ult i32 %r.0, %33
  br i1 %34, label %35, label %81

; <label>:35                                      ; preds = %31
  %36 = load i16* @width, align 2
  %37 = zext i16 %36 to i32
  %38 = icmp ult i32 %c.0, %37
  br i1 %38, label %39, label %81

; <label>:39                                      ; preds = %35
  %40 = load i16** %rp, align 8
  %41 = load i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp slt i32 %42, 4096
  br i1 %43, label %44, label %51

; <label>:44                                      ; preds = %39
  %45 = load i16** %rp, align 8
  %46 = load i16* %45, align 2
  %47 = zext i16 %46 to i64
  %48 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %47
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  br label %55

; <label>:51                                      ; preds = %39
  %52 = load i16** %rp, align 8
  %53 = load i16* %52, align 2
  %54 = zext i16 %53 to i32
  br label %55

; <label>:55                                      ; preds = %51, %44
  %56 = phi i32 [ %50, %44 ], [ %54, %51 ]
  %57 = trunc i32 %56 to i16
  %58 = load i32* @filters, align 4
  %59 = shl i32 %r.0, 1
  %60 = and i32 %59, 14
  %61 = and i32 %c.0, 1
  %62 = add i32 %60, %61
  %63 = shl i32 %62, 1
  %64 = lshr i32 %58, %63
  %65 = and i32 %64, 3
  %66 = zext i32 %65 to i64
  %67 = load i16* @shrink, align 2
  %68 = zext i16 %67 to i32
  %69 = lshr i32 %r.0, %68
  %70 = load i16* @iwidth, align 2
  %71 = zext i16 %70 to i32
  %72 = mul i32 %69, %71
  %73 = load i16* @shrink, align 2
  %74 = zext i16 %73 to i32
  %75 = lshr i32 %c.0, %74
  %76 = add i32 %72, %75
  %77 = zext i32 %76 to i64
  %78 = load [4 x i16]** @image, align 8
  %79 = getelementptr inbounds [4 x i16]* %78, i64 %77
  %80 = getelementptr inbounds [4 x i16]* %79, i32 0, i64 %66
  store i16 %57, i16* %80, align 2
  br label %81

; <label>:81                                      ; preds = %55, %35, %31
  %82 = load i32* @is_raw, align 4
  %83 = load i16** %rp, align 8
  %84 = zext i32 %82 to i64
  %85 = getelementptr inbounds i16* %83, i64 %84
  store i16* %85, i16** %rp, align 8
  br label %140

; <label>:86                                      ; preds = %15
  %87 = load i16* @height, align 2
  %88 = zext i16 %87 to i32
  %89 = icmp ult i32 %3, %88
  br i1 %89, label %90, label %135

; <label>:90                                      ; preds = %86
  %91 = load i16* @width, align 2
  %92 = zext i16 %91 to i32
  %93 = icmp ult i32 %6, %92
  br i1 %93, label %94, label %135

; <label>:94                                      ; preds = %90
  br label %95

; <label>:95                                      ; preds = %132, %94
  %c.1 = phi i32 [ 0, %94 ], [ %133, %132 ]
  %96 = load i32* @tiff_samples, align 4
  %97 = icmp ult i32 %c.1, %96
  br i1 %97, label %98, label %134

; <label>:98                                      ; preds = %95
  %99 = zext i32 %c.1 to i64
  %100 = load i16** %rp, align 8
  %101 = getelementptr inbounds i16* %100, i64 %99
  %102 = load i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = icmp slt i32 %103, 4096
  br i1 %104, label %105, label %114

; <label>:105                                     ; preds = %98
  %106 = zext i32 %c.1 to i64
  %107 = load i16** %rp, align 8
  %108 = getelementptr inbounds i16* %107, i64 %106
  %109 = load i16* %108, align 2
  %110 = zext i16 %109 to i64
  %111 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %110
  %112 = load i16* %111, align 2
  %113 = zext i16 %112 to i32
  br label %120

; <label>:114                                     ; preds = %98
  %115 = zext i32 %c.1 to i64
  %116 = load i16** %rp, align 8
  %117 = getelementptr inbounds i16* %116, i64 %115
  %118 = load i16* %117, align 2
  %119 = zext i16 %118 to i32
  br label %120

; <label>:120                                     ; preds = %114, %105
  %121 = phi i32 [ %113, %105 ], [ %119, %114 ]
  %122 = trunc i32 %121 to i16
  %123 = zext i32 %c.1 to i64
  %124 = load i16* @width, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nsw i32 %3, %125
  %127 = add nsw i32 %126, %6
  %128 = sext i32 %127 to i64
  %129 = load [4 x i16]** @image, align 8
  %130 = getelementptr inbounds [4 x i16]* %129, i64 %128
  %131 = getelementptr inbounds [4 x i16]* %130, i32 0, i64 %123
  store i16 %122, i16* %131, align 2
  br label %132

; <label>:132                                     ; preds = %120
  %133 = add i32 %c.1, 1
  br label %95

; <label>:134                                     ; preds = %95
  br label %135

; <label>:135                                     ; preds = %134, %90, %86
  %136 = load i32* @tiff_samples, align 4
  %137 = load i16** %rp, align 8
  %138 = zext i32 %136 to i64
  %139 = getelementptr inbounds i16* %137, i64 %138
  store i16* %139, i16** %rp, align 8
  br label %140

; <label>:140                                     ; preds = %135, %81
  %141 = load i32* @is_raw, align 4
  %142 = icmp eq i32 %141, 2
  br i1 %142, label %143, label %149

; <label>:143                                     ; preds = %140
  %144 = load i32* @shot_select, align 4
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %149

; <label>:146                                     ; preds = %143
  %147 = load i16** %rp, align 8
  %148 = getelementptr inbounds i16* %147, i32 -1
  store i16* %148, i16** %rp, align 8
  br label %149

; <label>:149                                     ; preds = %146, %143, %140
  ret void
}

; Function Attrs: nounwind uwtable
define void @adobe_dng_load_raw_lj() #0 {
  %jh = alloca %struct.jhead, align 8
  %rp = alloca i16*, align 8
  br label %1

; <label>:1                                       ; preds = %72, %0
  %tcol.0 = phi i32 [ 0, %0 ], [ %tcol.1, %72 ]
  %trow.0 = phi i32 [ 0, %0 ], [ %trow.1, %72 ]
  %2 = load i16* @raw_height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp ult i32 %trow.0, %3
  br i1 %4, label %5, label %76

; <label>:5                                       ; preds = %1
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i64 @ftell(%struct._IO_FILE* %6)
  %8 = trunc i64 %7 to i32
  %9 = load i32* @tile_length, align 4
  %10 = icmp ult i32 %9, 2147483647
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %5
  %12 = load %struct._IO_FILE** @ifp, align 8
  %13 = call i32 @get4()
  %14 = zext i32 %13 to i64
  %15 = call i32 @fseek(%struct._IO_FILE* %12, i64 %14, i32 0)
  br label %16

; <label>:16                                      ; preds = %11, %5
  %17 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %20, label %19

; <label>:19                                      ; preds = %16
  br label %76

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %22 = load i32* %21, align 4
  %23 = load i32* @filters, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %29

; <label>:25                                      ; preds = %20
  %26 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %27 = load i32* %26, align 4
  %28 = mul i32 %22, %27
  br label %29

; <label>:29                                      ; preds = %25, %20
  %jwide.0 = phi i32 [ %28, %25 ], [ %22, %20 ]
  %30 = load i32* @is_raw, align 4
  %31 = udiv i32 %jwide.0, %30
  br label %32

; <label>:32                                      ; preds = %56, %29
  %row.0 = phi i32 [ 0, %29 ], [ %row.1, %56 ]
  %jrow.0 = phi i32 [ 0, %29 ], [ %57, %56 ]
  %col.0 = phi i32 [ 0, %29 ], [ %col.1, %56 ]
  %33 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %34 = load i32* %33, align 4
  %35 = icmp ult i32 %jrow.0, %34
  br i1 %35, label %36, label %58

; <label>:36                                      ; preds = %32
  %37 = call i16* @ljpeg_row(i32 %jrow.0, %struct.jhead* %jh)
  store i16* %37, i16** %rp, align 8
  br label %38

; <label>:38                                      ; preds = %53, %36
  %row.1 = phi i32 [ %row.0, %36 ], [ %row.2, %53 ]
  %jcol.0 = phi i32 [ 0, %36 ], [ %54, %53 ]
  %col.1 = phi i32 [ %col.0, %36 ], [ %col.2, %53 ]
  %39 = icmp ult i32 %jcol.0, %31
  br i1 %39, label %40, label %55

; <label>:40                                      ; preds = %38
  %41 = add i32 %trow.0, %row.1
  %42 = add i32 %tcol.0, %col.1
  call void @adobe_copy_pixel(i32 %41, i32 %42, i16** %rp)
  %43 = add i32 %col.1, 1
  %44 = load i32* @tile_width, align 4
  %45 = icmp uge i32 %43, %44
  br i1 %45, label %50, label %46

; <label>:46                                      ; preds = %40
  %47 = load i16* @raw_width, align 2
  %48 = zext i16 %47 to i32
  %49 = icmp uge i32 %43, %48
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %46, %40
  %51 = add i32 %row.1, 1
  br label %52

; <label>:52                                      ; preds = %50, %46
  %row.2 = phi i32 [ %51, %50 ], [ %row.1, %46 ]
  %col.2 = phi i32 [ 0, %50 ], [ %43, %46 ]
  br label %53

; <label>:53                                      ; preds = %52
  %54 = add i32 %jcol.0, 1
  br label %38

; <label>:55                                      ; preds = %38
  br label %56

; <label>:56                                      ; preds = %55
  %57 = add i32 %jrow.0, 1
  br label %32

; <label>:58                                      ; preds = %32
  %59 = load %struct._IO_FILE** @ifp, align 8
  %60 = add i32 %8, 4
  %61 = zext i32 %60 to i64
  %62 = call i32 @fseek(%struct._IO_FILE* %59, i64 %61, i32 0)
  %63 = load i32* @tile_width, align 4
  %64 = add i32 %tcol.0, %63
  %65 = load i16* @raw_width, align 2
  %66 = zext i16 %65 to i32
  %67 = icmp uge i32 %64, %66
  br i1 %67, label %68, label %72

; <label>:68                                      ; preds = %58
  %69 = load i32* @tile_length, align 4
  %70 = add i32 %69, 0
  %71 = add i32 %trow.0, %70
  br label %72

; <label>:72                                      ; preds = %68, %58
  %tcol.1 = phi i32 [ 0, %68 ], [ %64, %58 ]
  %trow.1 = phi i32 [ %71, %68 ], [ %trow.0, %58 ]
  %73 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %74 = load i16** %73, align 8
  %75 = bitcast i16* %74 to i8*
  call void @free(i8* %75) #4
  br label %1

; <label>:76                                      ; preds = %19, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @adobe_dng_load_raw_nc() #0 {
  %rp = alloca i16*, align 8
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i32* @tiff_samples, align 4
  %4 = mul i32 %2, %3
  %5 = zext i32 %4 to i64
  %6 = call noalias i8* @calloc(i64 %5, i64 2) #4
  %7 = bitcast i8* %6 to i16*
  %8 = bitcast i16* %7 to i8*
  call void @merror(i8* %8, i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %47, %0
  %row.0 = phi i32 [ 0, %0 ], [ %48, %47 ]
  %10 = load i16* @raw_height, align 2
  %11 = zext i16 %10 to i32
  %12 = icmp slt i32 %row.0, %11
  br i1 %12, label %13, label %49

; <label>:13                                      ; preds = %9
  %14 = load i32* @tiff_bps, align 4
  %15 = icmp eq i32 %14, 16
  br i1 %15, label %16, label %21

; <label>:16                                      ; preds = %13
  %17 = load i16* @raw_width, align 2
  %18 = zext i16 %17 to i32
  %19 = load i32* @tiff_samples, align 4
  %20 = mul i32 %18, %19
  call void @read_shorts(i16* %7, i32 %20)
  br label %38

; <label>:21                                      ; preds = %13
  %22 = call i32 @getbits(i32 -1)
  br label %23

; <label>:23                                      ; preds = %35, %21
  %col.0 = phi i32 [ 0, %21 ], [ %36, %35 ]
  %24 = load i16* @raw_width, align 2
  %25 = zext i16 %24 to i32
  %26 = load i32* @tiff_samples, align 4
  %27 = mul i32 %25, %26
  %28 = icmp ult i32 %col.0, %27
  br i1 %28, label %29, label %37

; <label>:29                                      ; preds = %23
  %30 = load i32* @tiff_bps, align 4
  %31 = call i32 @getbits(i32 %30)
  %32 = trunc i32 %31 to i16
  %33 = sext i32 %col.0 to i64
  %34 = getelementptr inbounds i16* %7, i64 %33
  store i16 %32, i16* %34, align 2
  br label %35

; <label>:35                                      ; preds = %29
  %36 = add nsw i32 %col.0, 1
  br label %23

; <label>:37                                      ; preds = %23
  br label %38

; <label>:38                                      ; preds = %37, %16
  store i16* %7, i16** %rp, align 8
  br label %39

; <label>:39                                      ; preds = %44, %38
  %col.1 = phi i32 [ 0, %38 ], [ %45, %44 ]
  %40 = load i16* @raw_width, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp slt i32 %col.1, %41
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %39
  call void @adobe_copy_pixel(i32 %row.0, i32 %col.1, i16** %rp)
  br label %44

; <label>:44                                      ; preds = %43
  %45 = add nsw i32 %col.1, 1
  br label %39

; <label>:46                                      ; preds = %39
  br label %47

; <label>:47                                      ; preds = %46
  %48 = add nsw i32 %row.0, 1
  br label %9

; <label>:49                                      ; preds = %9
  %50 = bitcast i16* %7 to i8*
  call void @free(i8* %50) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @pentax_tree() #0 {
  %bit = alloca [2 x [13 x i16]], align 16
  call void @init_decoder()
  br label %1

; <label>:1                                       ; preds = %8, %0
  %c.0 = phi i32 [ 0, %0 ], [ %9, %8 ]
  %2 = icmp slt i32 %c.0, 13
  br i1 %2, label %3, label %10

; <label>:3                                       ; preds = %1
  %4 = call zeroext i16 @get2()
  %5 = sext i32 %c.0 to i64
  %6 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 0
  %7 = getelementptr inbounds [13 x i16]* %6, i32 0, i64 %5
  store i16 %4, i16* %7, align 2
  br label %8

; <label>:8                                       ; preds = %3
  %9 = add nsw i32 %c.0, 1
  br label %1

; <label>:10                                      ; preds = %1
  br label %11

; <label>:11                                      ; preds = %21, %10
  %c.1 = phi i32 [ 0, %10 ], [ %22, %21 ]
  %12 = icmp slt i32 %c.1, 13
  br i1 %12, label %13, label %23

; <label>:13                                      ; preds = %11
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i32 @getc_unlocked(%struct._IO_FILE* %14)
  %16 = and i32 %15, 15
  %17 = trunc i32 %16 to i16
  %18 = sext i32 %c.1 to i64
  %19 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 1
  %20 = getelementptr inbounds [13 x i16]* %19, i32 0, i64 %18
  store i16 %17, i16* %20, align 2
  br label %21

; <label>:21                                      ; preds = %13
  %22 = add nsw i32 %c.1, 1
  br label %11

; <label>:23                                      ; preds = %11
  br label %24

; <label>:24                                      ; preds = %63, %23
  %c.2 = phi i32 [ 0, %23 ], [ %64, %63 ]
  %25 = icmp slt i32 %c.2, 13
  br i1 %25, label %26, label %65

; <label>:26                                      ; preds = %24
  br label %27

; <label>:27                                      ; preds = %59, %26
  %i.0 = phi i32 [ 0, %26 ], [ %60, %59 ]
  %cur.0 = phi %struct.decode* [ getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %26 ], [ %58, %59 ]
  %28 = sext i32 %c.2 to i64
  %29 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 1
  %30 = getelementptr inbounds [13 x i16]* %29, i32 0, i64 %28
  %31 = load i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp slt i32 %i.0, %32
  br i1 %33, label %34, label %61

; <label>:34                                      ; preds = %27
  %35 = sext i32 %c.2 to i64
  %36 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 0
  %37 = getelementptr inbounds [13 x i16]* %36, i32 0, i64 %35
  %38 = load i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = sub nsw i32 11, %i.0
  %41 = ashr i32 %39, %40
  %42 = and i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.decode* %cur.0, i32 0, i32 0
  %45 = getelementptr inbounds [2 x %struct.decode*]* %44, i32 0, i64 %43
  %46 = load %struct.decode** %45, align 8
  %47 = icmp ne %struct.decode* %46, null
  br i1 %47, label %54, label %48

; <label>:48                                      ; preds = %34
  %49 = load %struct.decode** @free_decode, align 8
  %50 = getelementptr inbounds %struct.decode* %49, i32 1
  store %struct.decode* %50, %struct.decode** @free_decode, align 8
  %51 = sext i32 %42 to i64
  %52 = getelementptr inbounds %struct.decode* %cur.0, i32 0, i32 0
  %53 = getelementptr inbounds [2 x %struct.decode*]* %52, i32 0, i64 %51
  store %struct.decode* %50, %struct.decode** %53, align 8
  br label %54

; <label>:54                                      ; preds = %48, %34
  %55 = sext i32 %42 to i64
  %56 = getelementptr inbounds %struct.decode* %cur.0, i32 0, i32 0
  %57 = getelementptr inbounds [2 x %struct.decode*]* %56, i32 0, i64 %55
  %58 = load %struct.decode** %57, align 8
  br label %59

; <label>:59                                      ; preds = %54
  %60 = add nsw i32 %i.0, 1
  br label %27

; <label>:61                                      ; preds = %27
  %62 = getelementptr inbounds %struct.decode* %cur.0, i32 0, i32 1
  store i32 %c.2, i32* %62, align 4
  br label %63

; <label>:63                                      ; preds = %61
  %64 = add nsw i32 %c.2, 1
  br label %24

; <label>:65                                      ; preds = %24
  ret void
}

; Function Attrs: nounwind uwtable
define void @pentax_k10_load_raw() #0 {
  %vpred = alloca [2 x [2 x i16]], align 2
  %hpred = alloca [2 x i16], align 2
  %1 = bitcast [2 x [2 x i16]]* %vpred to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 8, i32 2, i1 false)
  %2 = call i32 @getbits(i32 -1)
  br label %3

; <label>:3                                       ; preds = %80, %0
  %row.0 = phi i32 [ 0, %0 ], [ %81, %80 ]
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %row.0, %5
  br i1 %6, label %7, label %82

; <label>:7                                       ; preds = %3
  br label %8

; <label>:8                                       ; preds = %77, %7
  %col.0 = phi i32 [ 0, %7 ], [ %78, %77 ]
  %9 = load i16* @raw_width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %col.0, %10
  br i1 %11, label %12, label %79

; <label>:12                                      ; preds = %8
  %13 = call i32 @ljpeg_diff(%struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0))
  %14 = icmp slt i32 %col.0, 2
  br i1 %14, label %15, label %27

; <label>:15                                      ; preds = %12
  %16 = sext i32 %col.0 to i64
  %17 = and i32 %row.0, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [2 x [2 x i16]]* %vpred, i32 0, i64 %18
  %20 = getelementptr inbounds [2 x i16]* %19, i32 0, i64 %16
  %21 = load i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nsw i32 %22, %13
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %20, align 2
  %25 = sext i32 %col.0 to i64
  %26 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %25
  store i16 %24, i16* %26, align 2
  br label %35

; <label>:27                                      ; preds = %12
  %28 = and i32 %col.0, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %29
  %31 = load i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nsw i32 %32, %13
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %30, align 2
  br label %35

; <label>:35                                      ; preds = %27, %15
  %36 = load i16* @width, align 2
  %37 = zext i16 %36 to i32
  %38 = icmp slt i32 %col.0, %37
  br i1 %38, label %39, label %67

; <label>:39                                      ; preds = %35
  %40 = and i32 %col.0, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %41
  %43 = load i16* %42, align 2
  %44 = load i32* @filters, align 4
  %45 = shl i32 %row.0, 1
  %46 = and i32 %45, 14
  %47 = and i32 %col.0, 1
  %48 = add nsw i32 %46, %47
  %49 = shl i32 %48, 1
  %50 = lshr i32 %44, %49
  %51 = and i32 %50, 3
  %52 = zext i32 %51 to i64
  %53 = load i16* @shrink, align 2
  %54 = zext i16 %53 to i32
  %55 = ashr i32 %row.0, %54
  %56 = load i16* @iwidth, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nsw i32 %55, %57
  %59 = load i16* @shrink, align 2
  %60 = zext i16 %59 to i32
  %61 = ashr i32 %col.0, %60
  %62 = add nsw i32 %58, %61
  %63 = sext i32 %62 to i64
  %64 = load [4 x i16]** @image, align 8
  %65 = getelementptr inbounds [4 x i16]* %64, i64 %63
  %66 = getelementptr inbounds [4 x i16]* %65, i32 0, i64 %52
  store i16 %43, i16* %66, align 2
  br label %67

; <label>:67                                      ; preds = %39, %35
  %68 = and i32 %col.0, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %69
  %71 = load i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = ashr i32 %72, 12
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %76

; <label>:75                                      ; preds = %67
  call void @derror()
  br label %76

; <label>:76                                      ; preds = %75, %67
  br label %77

; <label>:77                                      ; preds = %76
  %78 = add nsw i32 %col.0, 1
  br label %8

; <label>:79                                      ; preds = %8
  br label %80

; <label>:80                                      ; preds = %79
  %81 = add nsw i32 %row.0, 1
  br label %3

; <label>:82                                      ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @nikon_compressed_load_raw() #0 {
  %vpred = alloca [2 x [2 x i16]], align 2
  %hpred = alloca [2 x i16], align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i64* @meta_offset, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  %6 = trunc i32 %5 to i16
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @getc_unlocked(%struct._IO_FILE* %7)
  %9 = trunc i32 %8 to i16
  %10 = zext i16 %6 to i32
  %11 = icmp eq i32 %10, 73
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %0
  %13 = zext i16 %9 to i32
  %14 = icmp eq i32 %13, 88
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %12, %0
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i32 @fseek(%struct._IO_FILE* %16, i64 2110, i32 1)
  br label %18

; <label>:18                                      ; preds = %15, %12
  %19 = zext i16 %6 to i32
  %20 = icmp eq i32 %19, 70
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %18
  br label %22

; <label>:22                                      ; preds = %21, %18
  %huff.0 = phi i32 [ 2, %21 ], [ 0, %18 ]
  %23 = load i32* @tiff_bps, align 4
  %24 = icmp eq i32 %23, 14
  br i1 %24, label %25, label %27

; <label>:25                                      ; preds = %22
  %26 = add nsw i32 %huff.0, 3
  br label %27

; <label>:27                                      ; preds = %25, %22
  %huff.1 = phi i32 [ %26, %25 ], [ %huff.0, %22 ]
  %28 = getelementptr inbounds [2 x [2 x i16]]* %vpred, i32 0, i64 0
  %29 = getelementptr inbounds [2 x i16]* %28, i32 0, i32 0
  call void @read_shorts(i16* %29, i32 4)
  %30 = load i32* @tiff_bps, align 4
  %31 = shl i32 1, %30
  %32 = and i32 %31, 32767
  %33 = call zeroext i16 @get2()
  %34 = zext i16 %33 to i32
  %35 = icmp sgt i32 %34, 1
  br i1 %35, label %36, label %40

; <label>:36                                      ; preds = %27
  %37 = zext i16 %33 to i32
  %38 = sub nsw i32 %37, 1
  %39 = sdiv i32 %32, %38
  br label %40

; <label>:40                                      ; preds = %36, %27
  %step.0 = phi i32 [ %39, %36 ], [ 0, %27 ]
  %41 = zext i16 %6 to i32
  %42 = icmp eq i32 %41, 68
  br i1 %42, label %43, label %95

; <label>:43                                      ; preds = %40
  %44 = zext i16 %9 to i32
  %45 = icmp eq i32 %44, 32
  br i1 %45, label %46, label %95

; <label>:46                                      ; preds = %43
  %47 = icmp sgt i32 %step.0, 0
  br i1 %47, label %48, label %95

; <label>:48                                      ; preds = %46
  br label %49

; <label>:49                                      ; preds = %57, %48
  %i.0 = phi i32 [ 0, %48 ], [ %58, %57 ]
  %50 = zext i16 %33 to i32
  %51 = icmp slt i32 %i.0, %50
  br i1 %51, label %52, label %59

; <label>:52                                      ; preds = %49
  %53 = call zeroext i16 @get2()
  %54 = mul nsw i32 %i.0, %step.0
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %55
  store i16 %53, i16* %56, align 2
  br label %57

; <label>:57                                      ; preds = %52
  %58 = add nsw i32 %i.0, 1
  br label %49

; <label>:59                                      ; preds = %49
  br label %60

; <label>:60                                      ; preds = %86, %59
  %i.1 = phi i32 [ 0, %59 ], [ %87, %86 ]
  %61 = icmp slt i32 %i.1, %32
  br i1 %61, label %62, label %88

; <label>:62                                      ; preds = %60
  %63 = srem i32 %i.1, %step.0
  %64 = sub nsw i32 %i.1, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %65
  %67 = load i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = srem i32 %i.1, %step.0
  %70 = sub nsw i32 %step.0, %69
  %71 = mul nsw i32 %68, %70
  %72 = srem i32 %i.1, %step.0
  %73 = sub nsw i32 %i.1, %72
  %74 = add nsw i32 %73, %step.0
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %75
  %77 = load i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = srem i32 %i.1, %step.0
  %80 = mul nsw i32 %78, %79
  %81 = add nsw i32 %71, %80
  %82 = sdiv i32 %81, %step.0
  %83 = trunc i32 %82 to i16
  %84 = sext i32 %i.1 to i64
  %85 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %84
  store i16 %83, i16* %85, align 2
  br label %86

; <label>:86                                      ; preds = %62
  %87 = add nsw i32 %i.1, 1
  br label %60

; <label>:88                                      ; preds = %60
  %89 = load %struct._IO_FILE** @ifp, align 8
  %90 = load i64* @meta_offset, align 8
  %91 = add nsw i64 %90, 562
  %92 = call i32 @fseek(%struct._IO_FILE* %89, i64 %91, i32 0)
  %93 = call zeroext i16 @get2()
  %94 = zext i16 %93 to i32
  br label %104

; <label>:95                                      ; preds = %46, %43, %40
  %96 = zext i16 %6 to i32
  %97 = icmp ne i32 %96, 70
  br i1 %97, label %98, label %103

; <label>:98                                      ; preds = %95
  %99 = zext i16 %33 to i32
  %100 = icmp sle i32 %99, 16385
  br i1 %100, label %101, label %103

; <label>:101                                     ; preds = %98
  %102 = zext i16 %33 to i32
  call void @read_shorts(i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i32 0), i32 %102)
  br label %103

; <label>:103                                     ; preds = %101, %98, %95
  %max.0 = phi i32 [ %102, %101 ], [ %32, %98 ], [ %32, %95 ]
  br label %104

; <label>:104                                     ; preds = %103, %88
  %split.0 = phi i32 [ %94, %88 ], [ 0, %103 ]
  %max.1 = phi i32 [ %32, %88 ], [ %max.0, %103 ]
  br label %105

; <label>:105                                     ; preds = %117, %104
  %max.2 = phi i32 [ %max.1, %104 ], [ %118, %117 ]
  %106 = sub nsw i32 %max.2, 2
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %107
  %109 = load i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = sub nsw i32 %max.2, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %112
  %114 = load i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = icmp eq i32 %110, %115
  br i1 %116, label %117, label %119

; <label>:117                                     ; preds = %105
  %118 = add nsw i32 %max.2, -1
  br label %105

; <label>:119                                     ; preds = %105
  call void @init_decoder()
  %120 = sext i32 %huff.1 to i64
  %121 = getelementptr inbounds [6 x [32 x i8]]* @nikon_compressed_load_raw.nikon_tree, i32 0, i64 %120
  %122 = getelementptr inbounds [32 x i8]* %121, i32 0, i32 0
  %123 = call i8* @make_decoder(i8* %122, i32 0)
  %124 = load %struct._IO_FILE** @ifp, align 8
  %125 = load i64* @data_offset, align 8
  %126 = call i32 @fseek(%struct._IO_FILE* %124, i64 %125, i32 0)
  %127 = call i32 @getbits(i32 -1)
  br label %128

; <label>:128                                     ; preds = %296, %119
  %max.3 = phi i32 [ %max.2, %119 ], [ %max.4, %296 ]
  %min.0 = phi i32 [ 0, %119 ], [ %min.1, %296 ]
  %row.0 = phi i32 [ 0, %119 ], [ %297, %296 ]
  %129 = load i16* @height, align 2
  %130 = zext i16 %129 to i32
  %131 = icmp slt i32 %row.0, %130
  br i1 %131, label %132, label %298

; <label>:132                                     ; preds = %128
  %133 = icmp ne i32 %split.0, 0
  br i1 %133, label %134, label %143

; <label>:134                                     ; preds = %132
  %135 = icmp eq i32 %row.0, %split.0
  br i1 %135, label %136, label %143

; <label>:136                                     ; preds = %134
  call void @init_decoder()
  %137 = add nsw i32 %huff.1, 1
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [6 x [32 x i8]]* @nikon_compressed_load_raw.nikon_tree, i32 0, i64 %138
  %140 = getelementptr inbounds [32 x i8]* %139, i32 0, i32 0
  %141 = call i8* @make_decoder(i8* %140, i32 0)
  %142 = add nsw i32 %max.3, 32
  br label %143

; <label>:143                                     ; preds = %136, %134, %132
  %max.4 = phi i32 [ %142, %136 ], [ %max.3, %134 ], [ %max.3, %132 ]
  %min.1 = phi i32 [ 16, %136 ], [ %min.0, %134 ], [ %min.0, %132 ]
  br label %144

; <label>:144                                     ; preds = %293, %143
  %col.0 = phi i32 [ 0, %143 ], [ %294, %293 ]
  %145 = load i16* @raw_width, align 2
  %146 = zext i16 %145 to i32
  %147 = icmp slt i32 %col.0, %146
  br i1 %147, label %148, label %295

; <label>:148                                     ; preds = %144
  br label %149

; <label>:149                                     ; preds = %154, %148
  %dindex.0 = phi %struct.decode* [ getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %148 ], [ %159, %154 ]
  %150 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %151 = getelementptr inbounds [2 x %struct.decode*]* %150, i32 0, i64 0
  %152 = load %struct.decode** %151, align 8
  %153 = icmp ne %struct.decode* %152, null
  br i1 %153, label %154, label %160

; <label>:154                                     ; preds = %149
  %155 = call i32 @getbits(i32 1)
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %158 = getelementptr inbounds [2 x %struct.decode*]* %157, i32 0, i64 %156
  %159 = load %struct.decode** %158, align 8
  br label %149

; <label>:160                                     ; preds = %149
  %161 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 1
  %162 = load i32* %161, align 4
  %163 = and i32 %162, 15
  %164 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 1
  %165 = load i32* %164, align 4
  %166 = ashr i32 %165, 4
  %167 = sub nsw i32 %163, %166
  %168 = call i32 @getbits(i32 %167)
  %169 = shl i32 %168, 1
  %170 = add i32 %169, 1
  %171 = shl i32 %170, %166
  %172 = lshr i32 %171, 1
  %173 = sub nsw i32 %163, 1
  %174 = shl i32 1, %173
  %175 = and i32 %172, %174
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %184

; <label>:177                                     ; preds = %160
  %178 = shl i32 1, %163
  %179 = icmp ne i32 %166, 0
  %180 = xor i1 %179, true
  %181 = zext i1 %180 to i32
  %182 = sub nsw i32 %178, %181
  %183 = sub nsw i32 %172, %182
  br label %184

; <label>:184                                     ; preds = %177, %160
  %diff.0 = phi i32 [ %183, %177 ], [ %172, %160 ]
  %185 = icmp slt i32 %col.0, 2
  br i1 %185, label %186, label %198

; <label>:186                                     ; preds = %184
  %187 = sext i32 %col.0 to i64
  %188 = and i32 %row.0, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [2 x [2 x i16]]* %vpred, i32 0, i64 %189
  %191 = getelementptr inbounds [2 x i16]* %190, i32 0, i64 %187
  %192 = load i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = add nsw i32 %193, %diff.0
  %195 = trunc i32 %194 to i16
  store i16 %195, i16* %191, align 2
  %196 = sext i32 %col.0 to i64
  %197 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %196
  store i16 %195, i16* %197, align 2
  br label %206

; <label>:198                                     ; preds = %184
  %199 = and i32 %col.0, 1
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %200
  %202 = load i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = add nsw i32 %203, %diff.0
  %205 = trunc i32 %204 to i16
  store i16 %205, i16* %201, align 2
  br label %206

; <label>:206                                     ; preds = %198, %186
  %207 = and i32 %col.0, 1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %208
  %210 = load i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = add nsw i32 %211, %min.1
  %213 = trunc i32 %212 to i16
  %214 = zext i16 %213 to i32
  %215 = icmp sge i32 %214, %max.4
  br i1 %215, label %216, label %217

; <label>:216                                     ; preds = %206
  call void @derror()
  br label %217

; <label>:217                                     ; preds = %216, %206
  %218 = load i16* @left_margin, align 2
  %219 = zext i16 %218 to i32
  %220 = sub nsw i32 %col.0, %219
  %221 = load i16* @width, align 2
  %222 = zext i16 %221 to i32
  %223 = icmp ult i32 %220, %222
  br i1 %223, label %224, label %292

; <label>:224                                     ; preds = %217
  %225 = and i32 %col.0, 1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %226
  %228 = load i16* %227, align 2
  %229 = sext i16 %228 to i32
  %230 = icmp slt i32 %229, 16383
  br i1 %230, label %231, label %237

; <label>:231                                     ; preds = %224
  %232 = and i32 %col.0, 1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %233
  %235 = load i16* %234, align 2
  %236 = sext i16 %235 to i32
  br label %238

; <label>:237                                     ; preds = %224
  br label %238

; <label>:238                                     ; preds = %237, %231
  %239 = phi i32 [ %236, %231 ], [ 16383, %237 ]
  %240 = icmp sgt i32 0, %239
  br i1 %240, label %241, label %242

; <label>:241                                     ; preds = %238
  br label %258

; <label>:242                                     ; preds = %238
  %243 = and i32 %col.0, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %244
  %246 = load i16* %245, align 2
  %247 = sext i16 %246 to i32
  %248 = icmp slt i32 %247, 16383
  br i1 %248, label %249, label %255

; <label>:249                                     ; preds = %242
  %250 = and i32 %col.0, 1
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %251
  %253 = load i16* %252, align 2
  %254 = sext i16 %253 to i32
  br label %256

; <label>:255                                     ; preds = %242
  br label %256

; <label>:256                                     ; preds = %255, %249
  %257 = phi i32 [ %254, %249 ], [ 16383, %255 ]
  br label %258

; <label>:258                                     ; preds = %256, %241
  %259 = phi i32 [ 0, %241 ], [ %257, %256 ]
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %260
  %262 = load i16* %261, align 2
  %263 = load i32* @filters, align 4
  %264 = shl i32 %row.0, 1
  %265 = and i32 %264, 14
  %266 = load i16* @left_margin, align 2
  %267 = zext i16 %266 to i32
  %268 = sub nsw i32 %col.0, %267
  %269 = and i32 %268, 1
  %270 = add nsw i32 %265, %269
  %271 = shl i32 %270, 1
  %272 = lshr i32 %263, %271
  %273 = and i32 %272, 3
  %274 = zext i32 %273 to i64
  %275 = load i16* @shrink, align 2
  %276 = zext i16 %275 to i32
  %277 = ashr i32 %row.0, %276
  %278 = load i16* @iwidth, align 2
  %279 = zext i16 %278 to i32
  %280 = mul nsw i32 %277, %279
  %281 = load i16* @left_margin, align 2
  %282 = zext i16 %281 to i32
  %283 = sub nsw i32 %col.0, %282
  %284 = load i16* @shrink, align 2
  %285 = zext i16 %284 to i32
  %286 = ashr i32 %283, %285
  %287 = add nsw i32 %280, %286
  %288 = sext i32 %287 to i64
  %289 = load [4 x i16]** @image, align 8
  %290 = getelementptr inbounds [4 x i16]* %289, i64 %288
  %291 = getelementptr inbounds [4 x i16]* %290, i32 0, i64 %274
  store i16 %262, i16* %291, align 2
  br label %292

; <label>:292                                     ; preds = %258, %217
  br label %293

; <label>:293                                     ; preds = %292
  %294 = add nsw i32 %col.0, 1
  br label %144

; <label>:295                                     ; preds = %144
  br label %296

; <label>:296                                     ; preds = %295
  %297 = add nsw i32 %row.0, 1
  br label %128

; <label>:298                                     ; preds = %128
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @nikon_is_compressed() #0 {
  %test = alloca [256 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i64* @data_offset, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = getelementptr inbounds [256 x i8]* %test, i32 0, i32 0
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i64 @fread(i8* %4, i64 1, i64 256, %struct._IO_FILE* %5)
  br label %7

; <label>:7                                       ; preds = %16, %0
  %i.0 = phi i32 [ 15, %0 ], [ %17, %16 ]
  %8 = icmp slt i32 %i.0, 256
  br i1 %8, label %9, label %18

; <label>:9                                       ; preds = %7
  %10 = sext i32 %i.0 to i64
  %11 = getelementptr inbounds [256 x i8]* %test, i32 0, i64 %10
  %12 = load i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %9
  br label %19

; <label>:15                                      ; preds = %9
  br label %16

; <label>:16                                      ; preds = %15
  %17 = add nsw i32 %i.0, 16
  br label %7

; <label>:18                                      ; preds = %7
  br label %19

; <label>:19                                      ; preds = %18, %14
  %.0 = phi i32 [ 1, %14 ], [ 0, %18 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @nikon_e995() #0 {
  %histo = alloca [256 x i32], align 16
  %1 = bitcast [256 x i32]* %histo to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 1024, i32 16, i1 false)
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %2, i64 -2000, i32 2)
  br label %4

; <label>:4                                       ; preds = %13, %0
  %i.0 = phi i32 [ 0, %0 ], [ %14, %13 ]
  %5 = icmp slt i32 %i.0, 2000
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %4
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @getc_unlocked(%struct._IO_FILE* %7)
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [256 x i32]* %histo, i32 0, i64 %9
  %11 = load i32* %10, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %10, align 4
  br label %13

; <label>:13                                      ; preds = %6
  %14 = add nsw i32 %i.0, 1
  br label %4

; <label>:15                                      ; preds = %4
  br label %16

; <label>:16                                      ; preds = %28, %15
  %i.1 = phi i32 [ 0, %15 ], [ %29, %28 ]
  %17 = icmp slt i32 %i.1, 4
  br i1 %17, label %18, label %30

; <label>:18                                      ; preds = %16
  %19 = sext i32 %i.1 to i64
  %20 = getelementptr inbounds [4 x i8]* @nikon_e995.often, i32 0, i64 %19
  %21 = load i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [256 x i32]* %histo, i32 0, i64 %22
  %24 = load i32* %23, align 4
  %25 = icmp slt i32 %24, 200
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %18
  br label %31

; <label>:27                                      ; preds = %18
  br label %28

; <label>:28                                      ; preds = %27
  %29 = add nsw i32 %i.1, 1
  br label %16

; <label>:30                                      ; preds = %16
  br label %31

; <label>:31                                      ; preds = %30, %26
  %.0 = phi i32 [ 0, %26 ], [ 1, %30 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @nikon_e2100() #0 {
  %t = alloca [12 x i8], align 1
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 0, i32 0)
  br label %3

; <label>:3                                       ; preds = %45, %0
  %i.0 = phi i32 [ 0, %0 ], [ %46, %45 ]
  %4 = icmp slt i32 %i.0, 1024
  br i1 %4, label %5, label %47

; <label>:5                                       ; preds = %3
  %6 = getelementptr inbounds [12 x i8]* %t, i32 0, i32 0
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i64 @fread(i8* %6, i64 1, i64 12, %struct._IO_FILE* %7)
  %9 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 2
  %10 = load i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 4
  %13 = load i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = and i32 %11, %14
  %16 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 7
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 %15, %18
  %20 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 9
  %21 = load i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = and i32 %19, %22
  %24 = ashr i32 %23, 4
  %25 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 1
  %26 = load i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = and i32 %24, %27
  %29 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 6
  %30 = load i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = and i32 %28, %31
  %33 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 8
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = and i32 %32, %35
  %37 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 11
  %38 = load i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = and i32 %36, %39
  %41 = and i32 %40, 3
  %42 = icmp ne i32 %41, 3
  br i1 %42, label %43, label %44

; <label>:43                                      ; preds = %5
  br label %48

; <label>:44                                      ; preds = %5
  br label %45

; <label>:45                                      ; preds = %44
  %46 = add nsw i32 %i.0, 1
  br label %3

; <label>:47                                      ; preds = %3
  br label %48

; <label>:48                                      ; preds = %47, %43
  %.0 = phi i32 [ 0, %43 ], [ 1, %47 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @nikon_3700() #0 {
  %dp = alloca [24 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 3072, i32 0)
  %3 = getelementptr inbounds [24 x i8]* %dp, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 1, i64 24, %struct._IO_FILE* %4)
  %6 = getelementptr inbounds [24 x i8]* %dp, i32 0, i64 8
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = and i32 %8, 3
  %10 = shl i32 %9, 4
  %11 = getelementptr inbounds [24 x i8]* %dp, i32 0, i64 20
  %12 = load i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = and i32 %13, 3
  %15 = or i32 %10, %14
  br label %16

; <label>:16                                      ; preds = %37, %0
  %i.0 = phi i32 [ 0, %0 ], [ %38, %37 ]
  %17 = sext i32 %i.0 to i64
  %18 = icmp ult i64 %17, 4
  br i1 %18, label %19, label %39

; <label>:19                                      ; preds = %16
  %20 = sext i32 %i.0 to i64
  %21 = getelementptr inbounds [4 x %struct.anon]* @nikon_3700.table, i32 0, i64 %20
  %22 = getelementptr inbounds %struct.anon* %21, i32 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp eq i32 %15, %23
  br i1 %24, label %25, label %36

; <label>:25                                      ; preds = %19
  %26 = sext i32 %i.0 to i64
  %27 = getelementptr inbounds [4 x %struct.anon]* @nikon_3700.table, i32 0, i64 %26
  %28 = getelementptr inbounds %struct.anon* %27, i32 0, i32 1
  %29 = getelementptr inbounds [12 x i8]* %28, i32 0, i32 0
  %30 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %29) #4
  %31 = sext i32 %i.0 to i64
  %32 = getelementptr inbounds [4 x %struct.anon]* @nikon_3700.table, i32 0, i64 %31
  %33 = getelementptr inbounds %struct.anon* %32, i32 0, i32 2
  %34 = getelementptr inbounds [15 x i8]* %33, i32 0, i32 0
  %35 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %34) #4
  br label %36

; <label>:36                                      ; preds = %25, %19
  br label %37

; <label>:37                                      ; preds = %36
  %38 = add nsw i32 %i.0, 1
  br label %16

; <label>:39                                      ; preds = %16
  ret void
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @minolta_z2() #0 {
  %tail = alloca [424 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 -424, i32 2)
  %3 = getelementptr inbounds [424 x i8]* %tail, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 1, i64 424, %struct._IO_FILE* %4)
  br label %6

; <label>:6                                       ; preds = %17, %0
  %nz.0 = phi i32 [ 0, %0 ], [ %nz.1, %17 ]
  %i.0 = phi i32 [ 0, %0 ], [ %18, %17 ]
  %7 = sext i32 %i.0 to i64
  %8 = icmp ult i64 %7, 424
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %6
  %10 = sext i32 %i.0 to i64
  %11 = getelementptr inbounds [424 x i8]* %tail, i32 0, i64 %10
  %12 = load i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %9
  %15 = add nsw i32 %nz.0, 1
  br label %16

; <label>:16                                      ; preds = %14, %9
  %nz.1 = phi i32 [ %15, %14 ], [ %nz.0, %9 ]
  br label %17

; <label>:17                                      ; preds = %16
  %18 = add nsw i32 %i.0, 1
  br label %6

; <label>:19                                      ; preds = %6
  %20 = icmp sgt i32 %nz.0, 20
  %21 = zext i1 %20 to i32
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define void @nikon_e900_load_raw() #0 {
  br label %1

; <label>:1                                       ; preds = %56, %0
  %irow.0 = phi i32 [ 0, %0 ], [ %57, %56 ]
  %offset.0 = phi i32 [ 0, %0 ], [ %21, %56 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %irow.0, %3
  br i1 %4, label %5, label %58

; <label>:5                                       ; preds = %1
  %6 = mul nsw i32 %irow.0, 2
  %7 = load i16* @height, align 2
  %8 = zext i16 %7 to i32
  %9 = srem i32 %6, %8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %5
  %12 = sub nsw i32 0, %offset.0
  %13 = and i32 %12, -4096
  %14 = sub nsw i32 0, %13
  br label %15

; <label>:15                                      ; preds = %11, %5
  %offset.1 = phi i32 [ %14, %11 ], [ %offset.0, %5 ]
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = sext i32 %offset.1 to i64
  %18 = call i32 @fseek(%struct._IO_FILE* %16, i64 %17, i32 0)
  %19 = load i16* @raw_width, align 2
  %20 = zext i16 %19 to i32
  %21 = add nsw i32 %offset.1, %20
  %22 = call i32 @getbits(i32 -1)
  br label %23

; <label>:23                                      ; preds = %53, %15
  %col.0 = phi i32 [ 0, %15 ], [ %54, %53 ]
  %24 = load i16* @width, align 2
  %25 = zext i16 %24 to i32
  %26 = icmp slt i32 %col.0, %25
  br i1 %26, label %27, label %55

; <label>:27                                      ; preds = %23
  %28 = call i32 @getbits(i32 10)
  %29 = trunc i32 %28 to i16
  %30 = load i32* @filters, align 4
  %31 = shl i32 %9, 1
  %32 = and i32 %31, 14
  %33 = and i32 %col.0, 1
  %34 = add nsw i32 %32, %33
  %35 = shl i32 %34, 1
  %36 = lshr i32 %30, %35
  %37 = and i32 %36, 3
  %38 = zext i32 %37 to i64
  %39 = load i16* @shrink, align 2
  %40 = zext i16 %39 to i32
  %41 = ashr i32 %9, %40
  %42 = load i16* @iwidth, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nsw i32 %41, %43
  %45 = load i16* @shrink, align 2
  %46 = zext i16 %45 to i32
  %47 = ashr i32 %col.0, %46
  %48 = add nsw i32 %44, %47
  %49 = sext i32 %48 to i64
  %50 = load [4 x i16]** @image, align 8
  %51 = getelementptr inbounds [4 x i16]* %50, i64 %49
  %52 = getelementptr inbounds [4 x i16]* %51, i32 0, i64 %38
  store i16 %29, i16* %52, align 2
  br label %53

; <label>:53                                      ; preds = %27
  %54 = add nsw i32 %col.0, 1
  br label %23

; <label>:55                                      ; preds = %23
  br label %56

; <label>:56                                      ; preds = %55
  %57 = add nsw i32 %irow.0, 1
  br label %1

; <label>:58                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @fuji_load_raw() #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i16* @top_margin, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @raw_width, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %3, %5
  %7 = load i16* @left_margin, align 2
  %8 = zext i16 %7 to i32
  %9 = add nsw i32 %6, %8
  %10 = mul nsw i32 %9, 2
  %11 = sext i32 %10 to i64
  %12 = call i32 @fseek(%struct._IO_FILE* %1, i64 %11, i32 1)
  %13 = load i16* @fuji_width, align 2
  %14 = zext i16 %13 to i32
  %15 = load i32* @fuji_layout, align 4
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = zext i1 %17 to i32
  %19 = shl i32 %14, %18
  %20 = sext i32 %19 to i64
  %21 = call noalias i8* @calloc(i64 %20, i64 2) #4
  %22 = bitcast i8* %21 to i16*
  %23 = bitcast i16* %22 to i8*
  call void @merror(i8* %23, i8* getelementptr inbounds ([16 x i8]* @.str10, i32 0, i32 0))
  br label %24

; <label>:24                                      ; preds = %91, %0
  %row.0 = phi i32 [ 0, %0 ], [ %92, %91 ]
  %25 = load i16* @raw_height, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp slt i32 %row.0, %26
  br i1 %27, label %28, label %93

; <label>:28                                      ; preds = %24
  call void @read_shorts(i16* %22, i32 %19)
  %29 = load %struct._IO_FILE** @ifp, align 8
  %30 = load i16* @raw_width, align 2
  %31 = zext i16 %30 to i32
  %32 = sub nsw i32 %31, %19
  %33 = mul nsw i32 2, %32
  %34 = sext i32 %33 to i64
  %35 = call i32 @fseek(%struct._IO_FILE* %29, i64 %34, i32 1)
  br label %36

; <label>:36                                      ; preds = %88, %28
  %col.0 = phi i32 [ 0, %28 ], [ %89, %88 ]
  %37 = icmp slt i32 %col.0, %19
  br i1 %37, label %38, label %90

; <label>:38                                      ; preds = %36
  %39 = load i32* @fuji_layout, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %51

; <label>:41                                      ; preds = %38
  %42 = load i16* @fuji_width, align 2
  %43 = zext i16 %42 to i32
  %44 = sub nsw i32 %43, 1
  %45 = sub nsw i32 %44, %col.0
  %46 = ashr i32 %row.0, 1
  %47 = add nsw i32 %45, %46
  %48 = add nsw i32 %row.0, 1
  %49 = ashr i32 %48, 1
  %50 = add nsw i32 %col.0, %49
  br label %61

; <label>:51                                      ; preds = %38
  %52 = load i16* @fuji_width, align 2
  %53 = zext i16 %52 to i32
  %54 = sub nsw i32 %53, 1
  %55 = add nsw i32 %54, %row.0
  %56 = ashr i32 %col.0, 1
  %57 = sub nsw i32 %55, %56
  %58 = add nsw i32 %col.0, 1
  %59 = ashr i32 %58, 1
  %60 = add nsw i32 %row.0, %59
  br label %61

; <label>:61                                      ; preds = %51, %41
  %r.0 = phi i32 [ %47, %41 ], [ %57, %51 ]
  %c.0 = phi i32 [ %50, %41 ], [ %60, %51 ]
  %62 = sext i32 %col.0 to i64
  %63 = getelementptr inbounds i16* %22, i64 %62
  %64 = load i16* %63, align 2
  %65 = load i32* @filters, align 4
  %66 = shl i32 %r.0, 1
  %67 = and i32 %66, 14
  %68 = and i32 %c.0, 1
  %69 = add nsw i32 %67, %68
  %70 = shl i32 %69, 1
  %71 = lshr i32 %65, %70
  %72 = and i32 %71, 3
  %73 = zext i32 %72 to i64
  %74 = load i16* @shrink, align 2
  %75 = zext i16 %74 to i32
  %76 = ashr i32 %r.0, %75
  %77 = load i16* @iwidth, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nsw i32 %76, %78
  %80 = load i16* @shrink, align 2
  %81 = zext i16 %80 to i32
  %82 = ashr i32 %c.0, %81
  %83 = add nsw i32 %79, %82
  %84 = sext i32 %83 to i64
  %85 = load [4 x i16]** @image, align 8
  %86 = getelementptr inbounds [4 x i16]* %85, i64 %84
  %87 = getelementptr inbounds [4 x i16]* %86, i32 0, i64 %73
  store i16 %64, i16* %87, align 2
  br label %88

; <label>:88                                      ; preds = %61
  %89 = add nsw i32 %col.0, 1
  br label %36

; <label>:90                                      ; preds = %36
  br label %91

; <label>:91                                      ; preds = %90
  %92 = add nsw i32 %row.0, 1
  br label %24

; <label>:93                                      ; preds = %24
  %94 = bitcast i16* %22 to i8*
  call void @free(i8* %94) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @ppm_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = load i16* @thumb_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @thumb_height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %2, %4
  %6 = mul nsw i32 %5, 3
  store i32 %6, i32* @thumb_length, align 4
  %7 = load i32* @thumb_length, align 4
  %8 = zext i32 %7 to i64
  %9 = call noalias i8* @malloc(i64 %8) #4
  call void @merror(i8* %9, i8* getelementptr inbounds ([12 x i8]* @.str11, i32 0, i32 0))
  %10 = load i16* @thumb_width, align 2
  %11 = zext i16 %10 to i32
  %12 = load i16* @thumb_height, align 2
  %13 = zext i16 %12 to i32
  %14 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %tfp, i8* getelementptr inbounds ([14 x i8]* @.str12, i32 0, i32 0), i32 %11, i32 %13)
  %15 = load i32* @thumb_length, align 4
  %16 = zext i32 %15 to i64
  %17 = load %struct._IO_FILE** @ifp, align 8
  %18 = call i64 @fread(i8* %9, i64 1, i64 %16, %struct._IO_FILE* %17)
  %19 = load i32* @thumb_length, align 4
  %20 = zext i32 %19 to i64
  %21 = call i64 @fwrite(i8* %9, i64 1, i64 %20, %struct._IO_FILE* %tfp)
  call void @free(i8* %9) #4
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @layer_thumb(%struct._IO_FILE* %tfp) #0 {
  %map = alloca [2 x [4 x i8]], align 1
  %1 = bitcast [2 x [4 x i8]]* %map to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([2 x [4 x i8]]* @layer_thumb.map, i32 0, i32 0, i32 0), i64 8, i32 1, i1 false)
  %2 = load i32* @thumb_misc, align 4
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 7
  store i32 %4, i32* @colors, align 4
  %5 = load i16* @thumb_width, align 2
  %6 = zext i16 %5 to i32
  %7 = load i16* @thumb_height, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nsw i32 %6, %8
  store i32 %9, i32* @thumb_length, align 4
  %10 = load i32* @colors, align 4
  %11 = sext i32 %10 to i64
  %12 = load i32* @thumb_length, align 4
  %13 = zext i32 %12 to i64
  %14 = call noalias i8* @calloc(i64 %11, i64 %13) #4
  call void @merror(i8* %14, i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0))
  %15 = load i32* @colors, align 4
  %16 = ashr i32 %15, 1
  %17 = add nsw i32 5, %16
  %18 = load i16* @thumb_width, align 2
  %19 = zext i16 %18 to i32
  %20 = load i16* @thumb_height, align 2
  %21 = zext i16 %20 to i32
  %22 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %tfp, i8* getelementptr inbounds ([15 x i8]* @.str14, i32 0, i32 0), i32 %17, i32 %19, i32 %21)
  %23 = load i32* @thumb_length, align 4
  %24 = zext i32 %23 to i64
  %25 = load i32* @colors, align 4
  %26 = sext i32 %25 to i64
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i64 @fread(i8* %14, i64 %24, i64 %26, %struct._IO_FILE* %27)
  br label %29

; <label>:29                                      ; preds = %57, %0
  %i.0 = phi i32 [ 0, %0 ], [ %58, %57 ]
  %30 = load i32* @thumb_length, align 4
  %31 = icmp ult i32 %i.0, %30
  br i1 %31, label %32, label %59

; <label>:32                                      ; preds = %29
  br label %33

; <label>:33                                      ; preds = %54, %32
  %c.0 = phi i32 [ 0, %32 ], [ %55, %54 ]
  %34 = load i32* @colors, align 4
  %35 = icmp slt i32 %c.0, %34
  br i1 %35, label %36, label %56

; <label>:36                                      ; preds = %33
  %37 = load i32* @thumb_length, align 4
  %38 = sext i32 %c.0 to i64
  %39 = load i32* @thumb_misc, align 4
  %40 = lshr i32 %39, 8
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds [2 x [4 x i8]]* %map, i32 0, i64 %41
  %43 = getelementptr inbounds [4 x i8]* %42, i32 0, i64 %38
  %44 = load i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = sub nsw i32 %45, 48
  %47 = mul i32 %37, %46
  %48 = add i32 %i.0, %47
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8* %14, i64 %49
  %51 = load i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = call i32 @_IO_putc(i32 %52, %struct._IO_FILE* %tfp)
  br label %54

; <label>:54                                      ; preds = %36
  %55 = add nsw i32 %c.0, 1
  br label %33

; <label>:56                                      ; preds = %33
  br label %57

; <label>:57                                      ; preds = %56
  %58 = add nsw i32 %i.0, 1
  br label %29

; <label>:59                                      ; preds = %29
  call void @free(i8* %14) #4
  ret void
}

declare i32 @_IO_putc(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @rollei_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = load i16* @thumb_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @thumb_height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %2, %4
  store i32 %5, i32* @thumb_length, align 4
  %6 = load i32* @thumb_length, align 4
  %7 = zext i32 %6 to i64
  %8 = call noalias i8* @calloc(i64 %7, i64 2) #4
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i16* %9 to i8*
  call void @merror(i8* %10, i8* getelementptr inbounds ([15 x i8]* @.str15, i32 0, i32 0))
  %11 = load i16* @thumb_width, align 2
  %12 = zext i16 %11 to i32
  %13 = load i16* @thumb_height, align 2
  %14 = zext i16 %13 to i32
  %15 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %tfp, i8* getelementptr inbounds ([14 x i8]* @.str12, i32 0, i32 0), i32 %12, i32 %14)
  %16 = load i32* @thumb_length, align 4
  call void @read_shorts(i16* %9, i32 %16)
  br label %17

; <label>:17                                      ; preds = %41, %0
  %i.0 = phi i32 [ 0, %0 ], [ %42, %41 ]
  %18 = load i32* @thumb_length, align 4
  %19 = icmp ult i32 %i.0, %18
  br i1 %19, label %20, label %43

; <label>:20                                      ; preds = %17
  %21 = zext i32 %i.0 to i64
  %22 = getelementptr inbounds i16* %9, i64 %21
  %23 = load i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = shl i32 %24, 3
  %26 = call i32 @_IO_putc(i32 %25, %struct._IO_FILE* %tfp)
  %27 = zext i32 %i.0 to i64
  %28 = getelementptr inbounds i16* %9, i64 %27
  %29 = load i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = ashr i32 %30, 5
  %32 = shl i32 %31, 2
  %33 = call i32 @_IO_putc(i32 %32, %struct._IO_FILE* %tfp)
  %34 = zext i32 %i.0 to i64
  %35 = getelementptr inbounds i16* %9, i64 %34
  %36 = load i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = ashr i32 %37, 11
  %39 = shl i32 %38, 3
  %40 = call i32 @_IO_putc(i32 %39, %struct._IO_FILE* %tfp)
  br label %41

; <label>:41                                      ; preds = %20
  %42 = add i32 %i.0, 1
  br label %17

; <label>:43                                      ; preds = %17
  %44 = bitcast i16* %9 to i8*
  call void @free(i8* %44) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @rollei_load_raw() #0 {
  %pixel = alloca [10 x i8], align 1
  %todo = alloca [16 x i32], align 16
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @raw_height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %2, %4
  %6 = mul nsw i32 %5, 5
  %7 = sdiv i32 %6, 8
  br label %8

; <label>:8                                       ; preds = %120, %0
  %buffer.0 = phi i32 [ 0, %0 ], [ %buffer.1, %120 ]
  %isix.0 = phi i32 [ %7, %0 ], [ %isix.1, %120 ]
  %iten.0 = phi i32 [ 0, %0 ], [ %iten.1, %120 ]
  %9 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i32 0
  %10 = load %struct._IO_FILE** @ifp, align 8
  %11 = call i64 @fread(i8* %9, i64 1, i64 10, %struct._IO_FILE* %10)
  %12 = icmp eq i64 %11, 10
  br i1 %12, label %13, label %121

; <label>:13                                      ; preds = %8
  br label %14

; <label>:14                                      ; preds = %41, %13
  %buffer.1 = phi i32 [ %buffer.0, %13 ], [ %40, %41 ]
  %i.0 = phi i32 [ 0, %13 ], [ %42, %41 ]
  %iten.1 = phi i32 [ %iten.0, %13 ], [ %17, %41 ]
  %15 = icmp ult i32 %i.0, 10
  br i1 %15, label %16, label %43

; <label>:16                                      ; preds = %14
  %17 = add i32 %iten.1, 1
  %18 = zext i32 %i.0 to i64
  %19 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %18
  store i32 %iten.1, i32* %19, align 4
  %20 = zext i32 %i.0 to i64
  %21 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i64 %20
  %22 = load i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl i32 %23, 8
  %25 = add i32 %i.0, 1
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i64 %26
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = or i32 %24, %29
  %31 = add i32 %i.0, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %32
  store i32 %30, i32* %33, align 4
  %34 = zext i32 %i.0 to i64
  %35 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i64 %34
  %36 = load i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = ashr i32 %37, 2
  %39 = shl i32 %buffer.1, 6
  %40 = or i32 %38, %39
  br label %41

; <label>:41                                      ; preds = %16
  %42 = add i32 %i.0, 2
  br label %14

; <label>:43                                      ; preds = %14
  br label %44

; <label>:44                                      ; preds = %56, %43
  %i.1 = phi i32 [ %i.0, %43 ], [ %57, %56 ]
  %isix.1 = phi i32 [ %isix.0, %43 ], [ %47, %56 ]
  %45 = icmp ult i32 %i.1, 16
  br i1 %45, label %46, label %58

; <label>:46                                      ; preds = %44
  %47 = add i32 %isix.1, 1
  %48 = zext i32 %i.1 to i64
  %49 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %48
  store i32 %isix.1, i32* %49, align 4
  %50 = sub i32 14, %i.1
  %51 = mul i32 %50, 5
  %52 = lshr i32 %buffer.1, %51
  %53 = add i32 %i.1, 1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %54
  store i32 %52, i32* %55, align 4
  br label %56

; <label>:56                                      ; preds = %46
  %57 = add i32 %i.1, 2
  br label %44

; <label>:58                                      ; preds = %44
  br label %59

; <label>:59                                      ; preds = %118, %58
  %i.2 = phi i32 [ 0, %58 ], [ %119, %118 ]
  %60 = icmp ult i32 %i.2, 16
  br i1 %60, label %61, label %120

; <label>:61                                      ; preds = %59
  %62 = zext i32 %i.2 to i64
  %63 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %62
  %64 = load i32* %63, align 4
  %65 = load i16* @raw_width, align 2
  %66 = zext i16 %65 to i32
  %67 = udiv i32 %64, %66
  %68 = load i16* @top_margin, align 2
  %69 = zext i16 %68 to i32
  %70 = sub i32 %67, %69
  %71 = zext i32 %i.2 to i64
  %72 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %71
  %73 = load i32* %72, align 4
  %74 = load i16* @raw_width, align 2
  %75 = zext i16 %74 to i32
  %76 = urem i32 %73, %75
  %77 = load i16* @left_margin, align 2
  %78 = zext i16 %77 to i32
  %79 = sub i32 %76, %78
  %80 = load i16* @height, align 2
  %81 = zext i16 %80 to i32
  %82 = icmp ult i32 %70, %81
  br i1 %82, label %83, label %117

; <label>:83                                      ; preds = %61
  %84 = load i16* @width, align 2
  %85 = zext i16 %84 to i32
  %86 = icmp ult i32 %79, %85
  br i1 %86, label %87, label %117

; <label>:87                                      ; preds = %83
  %88 = add i32 %i.2, 1
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %89
  %91 = load i32* %90, align 4
  %92 = and i32 %91, 1023
  %93 = trunc i32 %92 to i16
  %94 = load i32* @filters, align 4
  %95 = shl i32 %70, 1
  %96 = and i32 %95, 14
  %97 = and i32 %79, 1
  %98 = add i32 %96, %97
  %99 = shl i32 %98, 1
  %100 = lshr i32 %94, %99
  %101 = and i32 %100, 3
  %102 = zext i32 %101 to i64
  %103 = load i16* @shrink, align 2
  %104 = zext i16 %103 to i32
  %105 = lshr i32 %70, %104
  %106 = load i16* @iwidth, align 2
  %107 = zext i16 %106 to i32
  %108 = mul i32 %105, %107
  %109 = load i16* @shrink, align 2
  %110 = zext i16 %109 to i32
  %111 = lshr i32 %79, %110
  %112 = add i32 %108, %111
  %113 = zext i32 %112 to i64
  %114 = load [4 x i16]** @image, align 8
  %115 = getelementptr inbounds [4 x i16]* %114, i64 %113
  %116 = getelementptr inbounds [4 x i16]* %115, i32 0, i64 %102
  store i16 %93, i16* %116, align 2
  br label %117

; <label>:117                                     ; preds = %87, %83, %61
  br label %118

; <label>:118                                     ; preds = %117
  %119 = add i32 %i.2, 2
  br label %59

; <label>:120                                     ; preds = %59
  br label %8

; <label>:121                                     ; preds = %8
  store i32 1023, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @bayer(i32 %row, i32 %col) #0 {
  %1 = load i16* @height, align 2
  %2 = zext i16 %1 to i32
  %3 = icmp ult i32 %row, %2
  br i1 %3, label %4, label %34

; <label>:4                                       ; preds = %0
  %5 = load i16* @width, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp ult i32 %col, %6
  br i1 %7, label %8, label %34

; <label>:8                                       ; preds = %4
  %9 = load i32* @filters, align 4
  %10 = shl i32 %row, 1
  %11 = and i32 %10, 14
  %12 = and i32 %col, 1
  %13 = add i32 %11, %12
  %14 = shl i32 %13, 1
  %15 = lshr i32 %9, %14
  %16 = and i32 %15, 3
  %17 = zext i32 %16 to i64
  %18 = load i16* @shrink, align 2
  %19 = zext i16 %18 to i32
  %20 = lshr i32 %row, %19
  %21 = load i16* @iwidth, align 2
  %22 = zext i16 %21 to i32
  %23 = mul i32 %20, %22
  %24 = load i16* @shrink, align 2
  %25 = zext i16 %24 to i32
  %26 = lshr i32 %col, %25
  %27 = add i32 %23, %26
  %28 = zext i32 %27 to i64
  %29 = load [4 x i16]** @image, align 8
  %30 = getelementptr inbounds [4 x i16]* %29, i64 %28
  %31 = getelementptr inbounds [4 x i16]* %30, i32 0, i64 %17
  %32 = load i16* %31, align 2
  %33 = zext i16 %32 to i32
  br label %35

; <label>:34                                      ; preds = %4, %0
  br label %35

; <label>:35                                      ; preds = %34, %8
  %36 = phi i32 [ %33, %8 ], [ 0, %34 ]
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define void @phase_one_flat_field(i32 %is_float, i32 %nc) #0 {
  %head = alloca [8 x i16], align 16
  %mult = alloca [4 x float], align 16
  %1 = getelementptr inbounds [8 x i16]* %head, i32 0, i32 0
  call void @read_shorts(i16* %1, i32 8)
  %2 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 2
  %3 = load i16* %2, align 2
  %4 = zext i16 %3 to i32
  %5 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %6 = load i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = sdiv i32 %4, %7
  %9 = mul i32 %nc, %8
  %10 = zext i32 %9 to i64
  %11 = call noalias i8* @calloc(i64 %10, i64 4) #4
  %12 = bitcast i8* %11 to float*
  %13 = bitcast float* %12 to i8*
  call void @merror(i8* %13, i8* getelementptr inbounds ([23 x i8]* @.str16, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %290, %0
  %y.0 = phi i32 [ 0, %0 ], [ %291, %290 ]
  %15 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 3
  %16 = load i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %19 = load i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sdiv i32 %17, %20
  %22 = icmp ult i32 %y.0, %21
  br i1 %22, label %23, label %292

; <label>:23                                      ; preds = %14
  br label %24

; <label>:24                                      ; preds = %68, %23
  %x.0 = phi i32 [ 0, %23 ], [ %69, %68 ]
  %25 = icmp ult i32 %x.0, %8
  br i1 %25, label %26, label %70

; <label>:26                                      ; preds = %24
  br label %27

; <label>:27                                      ; preds = %65, %26
  %c.0 = phi i32 [ 0, %26 ], [ %66, %65 ]
  %28 = icmp ult i32 %c.0, %nc
  br i1 %28, label %29, label %67

; <label>:29                                      ; preds = %27
  %30 = icmp ne i32 %is_float, 0
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %29
  %32 = call double @getreal(i32 11)
  br label %38

; <label>:33                                      ; preds = %29
  %34 = call zeroext i16 @get2()
  %35 = zext i16 %34 to i32
  %36 = sitofp i32 %35 to double
  %37 = fdiv double %36, 3.276800e+04
  br label %38

; <label>:38                                      ; preds = %33, %31
  %39 = phi double [ %32, %31 ], [ %37, %33 ]
  %40 = fptrunc double %39 to float
  %41 = icmp eq i32 %y.0, 0
  br i1 %41, label %42, label %47

; <label>:42                                      ; preds = %38
  %43 = mul i32 %c.0, %8
  %44 = add i32 %43, %x.0
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds float* %12, i64 %45
  store float %40, float* %46, align 4
  br label %64

; <label>:47                                      ; preds = %38
  %48 = mul i32 %c.0, %8
  %49 = add i32 %48, %x.0
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds float* %12, i64 %50
  %52 = load float* %51, align 4
  %53 = fsub float %40, %52
  %54 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %55 = load i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = sitofp i32 %56 to float
  %58 = fdiv float %53, %57
  %59 = add i32 %c.0, 1
  %60 = mul i32 %59, %8
  %61 = add i32 %60, %x.0
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds float* %12, i64 %62
  store float %58, float* %63, align 4
  br label %64

; <label>:64                                      ; preds = %47, %42
  br label %65

; <label>:65                                      ; preds = %64
  %66 = add i32 %c.0, 2
  br label %27

; <label>:67                                      ; preds = %27
  br label %68

; <label>:68                                      ; preds = %67
  %69 = add i32 %x.0, 1
  br label %24

; <label>:70                                      ; preds = %24
  %71 = icmp eq i32 %y.0, 0
  br i1 %71, label %72, label %73

; <label>:72                                      ; preds = %70
  br label %290

; <label>:73                                      ; preds = %70
  %74 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 1
  %75 = load i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = load i16* @top_margin, align 2
  %78 = zext i16 %77 to i32
  %79 = sub nsw i32 %76, %78
  %80 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %81 = load i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul i32 %y.0, %82
  %84 = add i32 %79, %83
  %85 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %86 = load i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = sub i32 %84, %87
  br label %89

; <label>:89                                      ; preds = %287, %73
  %row.0 = phi i32 [ %88, %73 ], [ %288, %287 ]
  %90 = load i16* @height, align 2
  %91 = zext i16 %90 to i32
  %92 = icmp ult i32 %row.0, %91
  br i1 %92, label %93, label %95

; <label>:93                                      ; preds = %89
  %94 = icmp ult i32 %row.0, %84
  br label %95

; <label>:95                                      ; preds = %93, %89
  %96 = phi i1 [ false, %89 ], [ %94, %93 ]
  br i1 %96, label %97, label %289

; <label>:97                                      ; preds = %95
  br label %98

; <label>:98                                      ; preds = %260, %97
  %x.1 = phi i32 [ 1, %97 ], [ %261, %260 ]
  %99 = icmp ult i32 %x.1, %8
  br i1 %99, label %100, label %262

; <label>:100                                     ; preds = %98
  br label %101

; <label>:101                                     ; preds = %129, %100
  %c.1 = phi i32 [ 0, %100 ], [ %130, %129 ]
  %102 = icmp ult i32 %c.1, %nc
  br i1 %102, label %103, label %131

; <label>:103                                     ; preds = %101
  %104 = mul i32 %c.1, %8
  %105 = add i32 %104, %x.1
  %106 = sub i32 %105, 1
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds float* %12, i64 %107
  %109 = load float* %108, align 4
  %110 = zext i32 %c.1 to i64
  %111 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %110
  store float %109, float* %111, align 4
  %112 = mul i32 %c.1, %8
  %113 = add i32 %112, %x.1
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds float* %12, i64 %114
  %116 = load float* %115, align 4
  %117 = zext i32 %c.1 to i64
  %118 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %117
  %119 = load float* %118, align 4
  %120 = fsub float %116, %119
  %121 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %122 = load i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = sitofp i32 %123 to float
  %125 = fdiv float %120, %124
  %126 = add i32 %c.1, 1
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %127
  store float %125, float* %128, align 4
  br label %129

; <label>:129                                     ; preds = %103
  %130 = add i32 %c.1, 2
  br label %101

; <label>:131                                     ; preds = %101
  %132 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 0
  %133 = load i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = load i16* @left_margin, align 2
  %136 = zext i16 %135 to i32
  %137 = sub nsw i32 %134, %136
  %138 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %139 = load i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul i32 %x.1, %140
  %142 = add i32 %137, %141
  %143 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %144 = load i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = sub i32 %142, %145
  br label %147

; <label>:147                                     ; preds = %257, %131
  %col.0 = phi i32 [ %146, %131 ], [ %258, %257 ]
  %148 = load i16* @width, align 2
  %149 = zext i16 %148 to i32
  %150 = icmp ult i32 %col.0, %149
  br i1 %150, label %151, label %153

; <label>:151                                     ; preds = %147
  %152 = icmp ult i32 %col.0, %142
  br label %153

; <label>:153                                     ; preds = %151, %147
  %154 = phi i1 [ false, %147 ], [ %152, %151 ]
  br i1 %154, label %155, label %259

; <label>:155                                     ; preds = %153
  %156 = icmp sgt i32 %nc, 2
  br i1 %156, label %157, label %166

; <label>:157                                     ; preds = %155
  %158 = load i32* @filters, align 4
  %159 = shl i32 %row.0, 1
  %160 = and i32 %159, 14
  %161 = and i32 %col.0, 1
  %162 = add i32 %160, %161
  %163 = shl i32 %162, 1
  %164 = lshr i32 %158, %163
  %165 = and i32 %164, 3
  br label %167

; <label>:166                                     ; preds = %155
  br label %167

; <label>:167                                     ; preds = %166, %157
  %168 = phi i32 [ %165, %157 ], [ 0, %166 ]
  %169 = and i32 %168, 1
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %242, label %171

; <label>:171                                     ; preds = %167
  %172 = load i32* @filters, align 4
  %173 = shl i32 %row.0, 1
  %174 = and i32 %173, 14
  %175 = and i32 %col.0, 1
  %176 = add i32 %174, %175
  %177 = shl i32 %176, 1
  %178 = lshr i32 %172, %177
  %179 = and i32 %178, 3
  %180 = zext i32 %179 to i64
  %181 = load i16* @shrink, align 2
  %182 = zext i16 %181 to i32
  %183 = lshr i32 %row.0, %182
  %184 = load i16* @iwidth, align 2
  %185 = zext i16 %184 to i32
  %186 = mul i32 %183, %185
  %187 = load i16* @shrink, align 2
  %188 = zext i16 %187 to i32
  %189 = lshr i32 %col.0, %188
  %190 = add i32 %186, %189
  %191 = zext i32 %190 to i64
  %192 = load [4 x i16]** @image, align 8
  %193 = getelementptr inbounds [4 x i16]* %192, i64 %191
  %194 = getelementptr inbounds [4 x i16]* %193, i32 0, i64 %180
  %195 = load i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = sitofp i32 %196 to float
  %198 = zext i32 %168 to i64
  %199 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %198
  %200 = load float* %199, align 4
  %201 = fmul float %197, %200
  %202 = fptoui float %201 to i32
  %203 = icmp ult i32 %202, 65535
  br i1 %203, label %204, label %205

; <label>:204                                     ; preds = %171
  br label %206

; <label>:205                                     ; preds = %171
  br label %206

; <label>:206                                     ; preds = %205, %204
  %207 = phi i32 [ %202, %204 ], [ 65535, %205 ]
  %208 = icmp ugt i32 0, %207
  br i1 %208, label %209, label %210

; <label>:209                                     ; preds = %206
  br label %216

; <label>:210                                     ; preds = %206
  %211 = icmp ult i32 %202, 65535
  br i1 %211, label %212, label %213

; <label>:212                                     ; preds = %210
  br label %214

; <label>:213                                     ; preds = %210
  br label %214

; <label>:214                                     ; preds = %213, %212
  %215 = phi i32 [ %202, %212 ], [ 65535, %213 ]
  br label %216

; <label>:216                                     ; preds = %214, %209
  %217 = phi i32 [ 0, %209 ], [ %215, %214 ]
  %218 = trunc i32 %217 to i16
  %219 = load i32* @filters, align 4
  %220 = shl i32 %row.0, 1
  %221 = and i32 %220, 14
  %222 = and i32 %col.0, 1
  %223 = add i32 %221, %222
  %224 = shl i32 %223, 1
  %225 = lshr i32 %219, %224
  %226 = and i32 %225, 3
  %227 = zext i32 %226 to i64
  %228 = load i16* @shrink, align 2
  %229 = zext i16 %228 to i32
  %230 = lshr i32 %row.0, %229
  %231 = load i16* @iwidth, align 2
  %232 = zext i16 %231 to i32
  %233 = mul i32 %230, %232
  %234 = load i16* @shrink, align 2
  %235 = zext i16 %234 to i32
  %236 = lshr i32 %col.0, %235
  %237 = add i32 %233, %236
  %238 = zext i32 %237 to i64
  %239 = load [4 x i16]** @image, align 8
  %240 = getelementptr inbounds [4 x i16]* %239, i64 %238
  %241 = getelementptr inbounds [4 x i16]* %240, i32 0, i64 %227
  store i16 %218, i16* %241, align 2
  br label %242

; <label>:242                                     ; preds = %216, %167
  br label %243

; <label>:243                                     ; preds = %254, %242
  %c.2 = phi i32 [ 0, %242 ], [ %255, %254 ]
  %244 = icmp ult i32 %c.2, %nc
  br i1 %244, label %245, label %256

; <label>:245                                     ; preds = %243
  %246 = add i32 %c.2, 1
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %247
  %249 = load float* %248, align 4
  %250 = zext i32 %c.2 to i64
  %251 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %250
  %252 = load float* %251, align 4
  %253 = fadd float %252, %249
  store float %253, float* %251, align 4
  br label %254

; <label>:254                                     ; preds = %245
  %255 = add i32 %c.2, 2
  br label %243

; <label>:256                                     ; preds = %243
  br label %257

; <label>:257                                     ; preds = %256
  %258 = add i32 %col.0, 1
  br label %147

; <label>:259                                     ; preds = %153
  br label %260

; <label>:260                                     ; preds = %259
  %261 = add i32 %x.1, 1
  br label %98

; <label>:262                                     ; preds = %98
  br label %263

; <label>:263                                     ; preds = %284, %262
  %x.2 = phi i32 [ 0, %262 ], [ %285, %284 ]
  %264 = icmp ult i32 %x.2, %8
  br i1 %264, label %265, label %286

; <label>:265                                     ; preds = %263
  br label %266

; <label>:266                                     ; preds = %281, %265
  %c.3 = phi i32 [ 0, %265 ], [ %282, %281 ]
  %267 = icmp ult i32 %c.3, %nc
  br i1 %267, label %268, label %283

; <label>:268                                     ; preds = %266
  %269 = add i32 %c.3, 1
  %270 = mul i32 %269, %8
  %271 = add i32 %270, %x.2
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds float* %12, i64 %272
  %274 = load float* %273, align 4
  %275 = mul i32 %c.3, %8
  %276 = add i32 %275, %x.2
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds float* %12, i64 %277
  %279 = load float* %278, align 4
  %280 = fadd float %279, %274
  store float %280, float* %278, align 4
  br label %281

; <label>:281                                     ; preds = %268
  %282 = add i32 %c.3, 2
  br label %266

; <label>:283                                     ; preds = %266
  br label %284

; <label>:284                                     ; preds = %283
  %285 = add i32 %x.2, 1
  br label %263

; <label>:286                                     ; preds = %263
  br label %287

; <label>:287                                     ; preds = %286
  %288 = add i32 %row.0, 1
  br label %89

; <label>:289                                     ; preds = %95
  br label %290

; <label>:290                                     ; preds = %289, %72
  %291 = add i32 %y.0, 1
  br label %14

; <label>:292                                     ; preds = %14
  %293 = bitcast float* %12 to i8*
  call void @free(i8* %293) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @phase_one_correct() #0 {
  %val = alloca [4 x i32], align 16
  %dev = alloca [4 x i32], align 16
  %head = alloca [9 x i32], align 16
  %poly = alloca [8 x float], align 16
  %mult = alloca [2 x float], align 4
  %yval = alloca [2 x float*], align 16
  %curve = alloca [65536 x i16], align 16
  %xval = alloca [2 x i16*], align 16
  %1 = load i32* @half_size, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = load i32* @meta_length, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %829

; <label>:7                                       ; preds = %3
  %8 = load i32* @verbose, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %7
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([25 x i8]* @.str17, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = load i64* @meta_offset, align 8
  %16 = call i32 @fseek(%struct._IO_FILE* %14, i64 %15, i32 0)
  %17 = call zeroext i16 @get2()
  store i16 %17, i16* @order, align 2
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = call i32 @fseek(%struct._IO_FILE* %18, i64 6, i32 1)
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = load i64* @meta_offset, align 8
  %22 = call i32 @get4()
  %23 = zext i32 %22 to i64
  %24 = add nsw i64 %21, %23
  %25 = call i32 @fseek(%struct._IO_FILE* %20, i64 %24, i32 0)
  %26 = call i32 @get4()
  %27 = call i32 @get4()
  br label %28

; <label>:28                                      ; preds = %510, %13
  %mindiff.0 = phi i32 [ 2147483647, %13 ], [ %mindiff.7, %510 ]
  %off_412.0 = phi i32 [ 0, %13 ], [ %off_412.7, %510 ]
  %entries.0 = phi i32 [ %26, %13 ], [ %29, %510 ]
  %29 = add i32 %entries.0, -1
  %30 = icmp ne i32 %entries.0, 0
  br i1 %30, label %31, label %514

; <label>:31                                      ; preds = %28
  %32 = call i32 @get4()
  %33 = call i32 @get4()
  %34 = call i32 @get4()
  %35 = load %struct._IO_FILE** @ifp, align 8
  %36 = call i64 @ftell(%struct._IO_FILE* %35)
  %37 = trunc i64 %36 to i32
  %38 = load %struct._IO_FILE** @ifp, align 8
  %39 = load i64* @meta_offset, align 8
  %40 = zext i32 %34 to i64
  %41 = add nsw i64 %39, %40
  %42 = call i32 @fseek(%struct._IO_FILE* %38, i64 %41, i32 0)
  %43 = icmp eq i32 %32, 1049
  br i1 %43, label %44, label %103

; <label>:44                                      ; preds = %31
  %45 = call i32 @get4()
  br label %46

; <label>:46                                      ; preds = %53, %44
  %i.0 = phi i32 [ 0, %44 ], [ %54, %53 ]
  %47 = icmp slt i32 %i.0, 8
  br i1 %47, label %48, label %55

; <label>:48                                      ; preds = %46
  %49 = call double @getreal(i32 11)
  %50 = fptrunc double %49 to float
  %51 = sext i32 %i.0 to i64
  %52 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 %51
  store float %50, float* %52, align 4
  br label %53

; <label>:53                                      ; preds = %48
  %54 = add nsw i32 %i.0, 1
  br label %46

; <label>:55                                      ; preds = %46
  %56 = load float* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 6), align 4
  %57 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 7
  %58 = load float* %57, align 4
  %59 = fsub float %56, %58
  %60 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 6
  %61 = load float* %60, align 4
  %62 = fmul float %59, %61
  %63 = fadd float %62, 1.000000e+00
  %64 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 3
  %65 = load float* %64, align 4
  %66 = fadd float %65, %63
  store float %66, float* %64, align 4
  br label %67

; <label>:67                                      ; preds = %100, %55
  %i.1 = phi i32 [ 0, %55 ], [ %101, %100 ]
  %68 = icmp slt i32 %i.1, 65536
  br i1 %68, label %69, label %102

; <label>:69                                      ; preds = %67
  %70 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 5
  %71 = load float* %70, align 4
  %72 = sitofp i32 %i.1 to float
  %73 = fmul float %71, %72
  %74 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 3
  %75 = load float* %74, align 4
  %76 = fadd float %73, %75
  %77 = sitofp i32 %i.1 to float
  %78 = fmul float %76, %77
  %79 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 1
  %80 = load float* %79, align 4
  %81 = fadd float %78, %80
  %82 = fcmp olt float %81, 6.553500e+04
  br i1 %82, label %83, label %84

; <label>:83                                      ; preds = %69
  br label %85

; <label>:84                                      ; preds = %69
  br label %85

; <label>:85                                      ; preds = %84, %83
  %86 = phi float [ %81, %83 ], [ 6.553500e+04, %84 ]
  %87 = fcmp ogt float 0.000000e+00, %86
  br i1 %87, label %88, label %89

; <label>:88                                      ; preds = %85
  br label %95

; <label>:89                                      ; preds = %85
  %90 = fcmp olt float %81, 6.553500e+04
  br i1 %90, label %91, label %92

; <label>:91                                      ; preds = %89
  br label %93

; <label>:92                                      ; preds = %89
  br label %93

; <label>:93                                      ; preds = %92, %91
  %94 = phi float [ %81, %91 ], [ 6.553500e+04, %92 ]
  br label %95

; <label>:95                                      ; preds = %93, %88
  %96 = phi float [ 0.000000e+00, %88 ], [ %94, %93 ]
  %97 = fptoui float %96 to i16
  %98 = sext i32 %i.1 to i64
  %99 = getelementptr inbounds [65536 x i16]* %curve, i32 0, i64 %98
  store i16 %97, i16* %99, align 2
  br label %100

; <label>:100                                     ; preds = %95
  %101 = add nsw i32 %i.1, 1
  br label %67

; <label>:102                                     ; preds = %67
  br label %159

; <label>:103                                     ; preds = %31
  %104 = icmp eq i32 %32, 1050
  br i1 %104, label %105, label %229

; <label>:105                                     ; preds = %103
  br label %106

; <label>:106                                     ; preds = %113, %105
  %i.2 = phi i32 [ 0, %105 ], [ %114, %113 ]
  %107 = icmp slt i32 %i.2, 4
  br i1 %107, label %108, label %115

; <label>:108                                     ; preds = %106
  %109 = call double @getreal(i32 11)
  %110 = fptrunc double %109 to float
  %111 = sext i32 %i.2 to i64
  %112 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 %111
  store float %110, float* %112, align 4
  br label %113

; <label>:113                                     ; preds = %108
  %114 = add nsw i32 %i.2, 1
  br label %106

; <label>:115                                     ; preds = %106
  br label %116

; <label>:116                                     ; preds = %156, %115
  %i.3 = phi i32 [ 0, %115 ], [ %157, %156 ]
  %117 = icmp slt i32 %i.3, 65536
  br i1 %117, label %118, label %158

; <label>:118                                     ; preds = %116
  br label %119

; <label>:119                                     ; preds = %122, %118
  %j.0 = phi i32 [ 4, %118 ], [ %120, %122 ]
  %num.0 = phi float [ 0.000000e+00, %118 ], [ %128, %122 ]
  %120 = add nsw i32 %j.0, -1
  %121 = icmp ne i32 %j.0, 0
  br i1 %121, label %122, label %129

; <label>:122                                     ; preds = %119
  %123 = sitofp i32 %i.3 to float
  %124 = fmul float %num.0, %123
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 %125
  %127 = load float* %126, align 4
  %128 = fadd float %124, %127
  br label %119

; <label>:129                                     ; preds = %119
  %130 = sitofp i32 %i.3 to float
  %131 = fadd float %num.0, %130
  %132 = fcmp olt float %131, 6.553500e+04
  br i1 %132, label %133, label %136

; <label>:133                                     ; preds = %129
  %134 = sitofp i32 %i.3 to float
  %135 = fadd float %num.0, %134
  br label %137

; <label>:136                                     ; preds = %129
  br label %137

; <label>:137                                     ; preds = %136, %133
  %138 = phi float [ %135, %133 ], [ 6.553500e+04, %136 ]
  %139 = fcmp ogt float 0.000000e+00, %138
  br i1 %139, label %140, label %141

; <label>:140                                     ; preds = %137
  br label %151

; <label>:141                                     ; preds = %137
  %142 = sitofp i32 %i.3 to float
  %143 = fadd float %num.0, %142
  %144 = fcmp olt float %143, 6.553500e+04
  br i1 %144, label %145, label %148

; <label>:145                                     ; preds = %141
  %146 = sitofp i32 %i.3 to float
  %147 = fadd float %num.0, %146
  br label %149

; <label>:148                                     ; preds = %141
  br label %149

; <label>:149                                     ; preds = %148, %145
  %150 = phi float [ %147, %145 ], [ 6.553500e+04, %148 ]
  br label %151

; <label>:151                                     ; preds = %149, %140
  %152 = phi float [ 0.000000e+00, %140 ], [ %150, %149 ]
  %153 = fptoui float %152 to i16
  %154 = sext i32 %i.3 to i64
  %155 = getelementptr inbounds [65536 x i16]* %curve, i32 0, i64 %154
  store i16 %153, i16* %155, align 2
  br label %156

; <label>:156                                     ; preds = %151
  %157 = add nsw i32 %i.3, 1
  br label %116

; <label>:158                                     ; preds = %116
  br label %159

; <label>:159                                     ; preds = %158, %102
  br label %160

; <label>:160                                     ; preds = %226, %159
  %row.0 = phi i32 [ 0, %159 ], [ %227, %226 ]
  %161 = load i16* @height, align 2
  %162 = zext i16 %161 to i32
  %163 = icmp ult i32 %row.0, %162
  br i1 %163, label %164, label %228

; <label>:164                                     ; preds = %160
  %165 = and i32 %32, 1
  %166 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 4), align 4
  %167 = mul i32 %165, %166
  br label %168

; <label>:168                                     ; preds = %223, %164
  %col.0 = phi i32 [ %167, %164 ], [ %224, %223 ]
  %169 = load i16* @width, align 2
  %170 = zext i16 %169 to i32
  %171 = icmp ult i32 %col.0, %170
  br i1 %171, label %172, label %225

; <label>:172                                     ; preds = %168
  %173 = load i32* @filters, align 4
  %174 = shl i32 %row.0, 1
  %175 = and i32 %174, 14
  %176 = and i32 %col.0, 1
  %177 = add i32 %175, %176
  %178 = shl i32 %177, 1
  %179 = lshr i32 %173, %178
  %180 = and i32 %179, 3
  %181 = zext i32 %180 to i64
  %182 = load i16* @shrink, align 2
  %183 = zext i16 %182 to i32
  %184 = lshr i32 %row.0, %183
  %185 = load i16* @iwidth, align 2
  %186 = zext i16 %185 to i32
  %187 = mul i32 %184, %186
  %188 = load i16* @shrink, align 2
  %189 = zext i16 %188 to i32
  %190 = lshr i32 %col.0, %189
  %191 = add i32 %187, %190
  %192 = zext i32 %191 to i64
  %193 = load [4 x i16]** @image, align 8
  %194 = getelementptr inbounds [4 x i16]* %193, i64 %192
  %195 = getelementptr inbounds [4 x i16]* %194, i32 0, i64 %181
  %196 = load i16* %195, align 2
  %197 = zext i16 %196 to i64
  %198 = getelementptr inbounds [65536 x i16]* %curve, i32 0, i64 %197
  %199 = load i16* %198, align 2
  %200 = load i32* @filters, align 4
  %201 = shl i32 %row.0, 1
  %202 = and i32 %201, 14
  %203 = and i32 %col.0, 1
  %204 = add i32 %202, %203
  %205 = shl i32 %204, 1
  %206 = lshr i32 %200, %205
  %207 = and i32 %206, 3
  %208 = zext i32 %207 to i64
  %209 = load i16* @shrink, align 2
  %210 = zext i16 %209 to i32
  %211 = lshr i32 %row.0, %210
  %212 = load i16* @iwidth, align 2
  %213 = zext i16 %212 to i32
  %214 = mul i32 %211, %213
  %215 = load i16* @shrink, align 2
  %216 = zext i16 %215 to i32
  %217 = lshr i32 %col.0, %216
  %218 = add i32 %214, %217
  %219 = zext i32 %218 to i64
  %220 = load [4 x i16]** @image, align 8
  %221 = getelementptr inbounds [4 x i16]* %220, i64 %219
  %222 = getelementptr inbounds [4 x i16]* %221, i32 0, i64 %208
  store i16 %199, i16* %222, align 2
  br label %223

; <label>:223                                     ; preds = %172
  %224 = add i32 %col.0, 1
  br label %168

; <label>:225                                     ; preds = %168
  br label %226

; <label>:226                                     ; preds = %225
  %227 = add i32 %row.0, 1
  br label %160

; <label>:228                                     ; preds = %160
  br label %509

; <label>:229                                     ; preds = %103
  %230 = icmp eq i32 %32, 1024
  br i1 %230, label %231, label %476

; <label>:231                                     ; preds = %229
  br label %232

; <label>:232                                     ; preds = %474, %413, %252, %231
  %len.0 = phi i32 [ %33, %231 ], [ %233, %252 ], [ %233, %474 ], [ %233, %413 ]
  %233 = sub nsw i32 %len.0, 8
  %234 = icmp sge i32 %233, 0
  br i1 %234, label %235, label %475

; <label>:235                                     ; preds = %232
  %236 = call zeroext i16 @get2()
  %237 = zext i16 %236 to i32
  %238 = load i16* @left_margin, align 2
  %239 = zext i16 %238 to i32
  %240 = sub nsw i32 %237, %239
  %241 = call zeroext i16 @get2()
  %242 = zext i16 %241 to i32
  %243 = load i16* @top_margin, align 2
  %244 = zext i16 %243 to i32
  %245 = sub nsw i32 %242, %244
  %246 = call zeroext i16 @get2()
  %247 = zext i16 %246 to i32
  %248 = call zeroext i16 @get2()
  %249 = load i16* @width, align 2
  %250 = zext i16 %249 to i32
  %251 = icmp uge i32 %240, %250
  br i1 %251, label %252, label %253

; <label>:252                                     ; preds = %235
  br label %232

; <label>:253                                     ; preds = %235
  %254 = icmp eq i32 %247, 131
  br i1 %254, label %255, label %407

; <label>:255                                     ; preds = %253
  br label %256

; <label>:256                                     ; preds = %404, %255
  %row.1 = phi i32 [ 0, %255 ], [ %405, %404 ]
  %257 = load i16* @height, align 2
  %258 = zext i16 %257 to i32
  %259 = icmp ult i32 %row.1, %258
  br i1 %259, label %260, label %406

; <label>:260                                     ; preds = %256
  %261 = load i32* @filters, align 4
  %262 = shl i32 %row.1, 1
  %263 = and i32 %262, 14
  %264 = and i32 %240, 1
  %265 = add i32 %263, %264
  %266 = shl i32 %265, 1
  %267 = lshr i32 %261, %266
  %268 = and i32 %267, 3
  %269 = icmp eq i32 %268, 1
  br i1 %269, label %270, label %347

; <label>:270                                     ; preds = %260
  br label %271

; <label>:271                                     ; preds = %290, %270
  %sum.0 = phi i32 [ 0, %270 ], [ %289, %290 ]
  %i.4 = phi i32 [ 0, %270 ], [ %291, %290 ]
  %272 = icmp slt i32 %i.4, 4
  br i1 %272, label %273, label %292

; <label>:273                                     ; preds = %271
  %274 = sext i32 %i.4 to i64
  %275 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %274
  %276 = getelementptr inbounds [2 x i8]* %275, i32 0, i64 0
  %277 = load i8* %276, align 1
  %278 = sext i8 %277 to i32
  %279 = add i32 %row.1, %278
  %280 = sext i32 %i.4 to i64
  %281 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %280
  %282 = getelementptr inbounds [2 x i8]* %281, i32 0, i64 1
  %283 = load i8* %282, align 1
  %284 = sext i8 %283 to i32
  %285 = add i32 %240, %284
  %286 = call i32 @bayer(i32 %279, i32 %285)
  %287 = sext i32 %i.4 to i64
  %288 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 %287
  store i32 %286, i32* %288, align 4
  %289 = add nsw i32 %sum.0, %286
  br label %290

; <label>:290                                     ; preds = %273
  %291 = add nsw i32 %i.4, 1
  br label %271

; <label>:292                                     ; preds = %271
  br label %293

; <label>:293                                     ; preds = %313, %292
  %max.0 = phi i32 [ 0, %292 ], [ %max.1, %313 ]
  %i.5 = phi i32 [ 0, %292 ], [ %314, %313 ]
  %294 = icmp slt i32 %i.5, 4
  br i1 %294, label %295, label %315

; <label>:295                                     ; preds = %293
  %296 = sext i32 %i.5 to i64
  %297 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 %296
  %298 = load i32* %297, align 4
  %299 = shl i32 %298, 2
  %300 = sub nsw i32 %299, %sum.0
  %301 = call i32 @abs(i32 %300) #9
  %302 = sext i32 %i.5 to i64
  %303 = getelementptr inbounds [4 x i32]* %dev, i32 0, i64 %302
  store i32 %301, i32* %303, align 4
  %304 = sext i32 %max.0 to i64
  %305 = getelementptr inbounds [4 x i32]* %dev, i32 0, i64 %304
  %306 = load i32* %305, align 4
  %307 = sext i32 %i.5 to i64
  %308 = getelementptr inbounds [4 x i32]* %dev, i32 0, i64 %307
  %309 = load i32* %308, align 4
  %310 = icmp slt i32 %306, %309
  br i1 %310, label %311, label %312

; <label>:311                                     ; preds = %295
  br label %312

; <label>:312                                     ; preds = %311, %295
  %max.1 = phi i32 [ %i.5, %311 ], [ %max.0, %295 ]
  br label %313

; <label>:313                                     ; preds = %312
  %314 = add nsw i32 %i.5, 1
  br label %293

; <label>:315                                     ; preds = %293
  %316 = sext i32 %max.0 to i64
  %317 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 %316
  %318 = load i32* %317, align 4
  %319 = sub nsw i32 %sum.0, %318
  %320 = sitofp i32 %319 to double
  %321 = fdiv double %320, 3.000000e+00
  %322 = fadd double %321, 5.000000e-01
  %323 = fptoui double %322 to i16
  %324 = load i32* @filters, align 4
  %325 = shl i32 %row.1, 1
  %326 = and i32 %325, 14
  %327 = and i32 %240, 1
  %328 = add i32 %326, %327
  %329 = shl i32 %328, 1
  %330 = lshr i32 %324, %329
  %331 = and i32 %330, 3
  %332 = zext i32 %331 to i64
  %333 = load i16* @shrink, align 2
  %334 = zext i16 %333 to i32
  %335 = lshr i32 %row.1, %334
  %336 = load i16* @iwidth, align 2
  %337 = zext i16 %336 to i32
  %338 = mul i32 %335, %337
  %339 = load i16* @shrink, align 2
  %340 = zext i16 %339 to i32
  %341 = lshr i32 %240, %340
  %342 = add i32 %338, %341
  %343 = zext i32 %342 to i64
  %344 = load [4 x i16]** @image, align 8
  %345 = getelementptr inbounds [4 x i16]* %344, i64 %343
  %346 = getelementptr inbounds [4 x i16]* %345, i32 0, i64 %332
  store i16 %323, i16* %346, align 2
  br label %403

; <label>:347                                     ; preds = %260
  br label %348

; <label>:348                                     ; preds = %365, %347
  %sum.1 = phi i32 [ 0, %347 ], [ %364, %365 ]
  %i.6 = phi i32 [ 8, %347 ], [ %366, %365 ]
  %349 = icmp slt i32 %i.6, 12
  br i1 %349, label %350, label %367

; <label>:350                                     ; preds = %348
  %351 = sext i32 %i.6 to i64
  %352 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %351
  %353 = getelementptr inbounds [2 x i8]* %352, i32 0, i64 0
  %354 = load i8* %353, align 1
  %355 = sext i8 %354 to i32
  %356 = add i32 %row.1, %355
  %357 = sext i32 %i.6 to i64
  %358 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %357
  %359 = getelementptr inbounds [2 x i8]* %358, i32 0, i64 1
  %360 = load i8* %359, align 1
  %361 = sext i8 %360 to i32
  %362 = add i32 %240, %361
  %363 = call i32 @bayer(i32 %356, i32 %362)
  %364 = add nsw i32 %sum.1, %363
  br label %365

; <label>:365                                     ; preds = %350
  %366 = add nsw i32 %i.6, 1
  br label %348

; <label>:367                                     ; preds = %348
  %368 = sitofp i32 %sum.1 to double
  %369 = fmul double %368, 7.322330e-02
  %370 = fadd double 5.000000e-01, %369
  %371 = sub i32 %240, 2
  %372 = call i32 @bayer(i32 %row.1, i32 %371)
  %373 = add i32 %240, 2
  %374 = call i32 @bayer(i32 %row.1, i32 %373)
  %375 = add nsw i32 %372, %374
  %376 = sitofp i32 %375 to double
  %377 = fmul double %376, 3.535534e-01
  %378 = fadd double %370, %377
  %379 = fptoui double %378 to i16
  %380 = load i32* @filters, align 4
  %381 = shl i32 %row.1, 1
  %382 = and i32 %381, 14
  %383 = and i32 %240, 1
  %384 = add i32 %382, %383
  %385 = shl i32 %384, 1
  %386 = lshr i32 %380, %385
  %387 = and i32 %386, 3
  %388 = zext i32 %387 to i64
  %389 = load i16* @shrink, align 2
  %390 = zext i16 %389 to i32
  %391 = lshr i32 %row.1, %390
  %392 = load i16* @iwidth, align 2
  %393 = zext i16 %392 to i32
  %394 = mul i32 %391, %393
  %395 = load i16* @shrink, align 2
  %396 = zext i16 %395 to i32
  %397 = lshr i32 %240, %396
  %398 = add i32 %394, %397
  %399 = zext i32 %398 to i64
  %400 = load [4 x i16]** @image, align 8
  %401 = getelementptr inbounds [4 x i16]* %400, i64 %399
  %402 = getelementptr inbounds [4 x i16]* %401, i32 0, i64 %388
  store i16 %379, i16* %402, align 2
  br label %403

; <label>:403                                     ; preds = %367, %315
  br label %404

; <label>:404                                     ; preds = %403
  %405 = add i32 %row.1, 1
  br label %256

; <label>:406                                     ; preds = %256
  br label %474

; <label>:407                                     ; preds = %253
  %408 = icmp eq i32 %247, 129
  br i1 %408, label %409, label %473

; <label>:409                                     ; preds = %407
  %410 = load i16* @height, align 2
  %411 = zext i16 %410 to i32
  %412 = icmp uge i32 %245, %411
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %409
  br label %232

; <label>:414                                     ; preds = %409
  %415 = load i32* @filters, align 4
  %416 = shl i32 %245, 1
  %417 = and i32 %416, 14
  %418 = and i32 %240, 1
  %419 = add i32 %417, %418
  %420 = shl i32 %419, 1
  %421 = lshr i32 %415, %420
  %422 = and i32 %421, 3
  %423 = icmp ne i32 %422, 1
  %424 = zext i1 %423 to i32
  %425 = mul nsw i32 %424, 4
  br label %426

; <label>:426                                     ; preds = %444, %414
  %sum.2 = phi i32 [ 0, %414 ], [ %443, %444 ]
  %i.7 = phi i32 [ %425, %414 ], [ %445, %444 ]
  %427 = add nsw i32 %425, 8
  %428 = icmp slt i32 %i.7, %427
  br i1 %428, label %429, label %446

; <label>:429                                     ; preds = %426
  %430 = sext i32 %i.7 to i64
  %431 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %430
  %432 = getelementptr inbounds [2 x i8]* %431, i32 0, i64 0
  %433 = load i8* %432, align 1
  %434 = sext i8 %433 to i32
  %435 = add i32 %245, %434
  %436 = sext i32 %i.7 to i64
  %437 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %436
  %438 = getelementptr inbounds [2 x i8]* %437, i32 0, i64 1
  %439 = load i8* %438, align 1
  %440 = sext i8 %439 to i32
  %441 = add i32 %240, %440
  %442 = call i32 @bayer(i32 %435, i32 %441)
  %443 = add nsw i32 %sum.2, %442
  br label %444

; <label>:444                                     ; preds = %429
  %445 = add nsw i32 %i.7, 1
  br label %426

; <label>:446                                     ; preds = %426
  %447 = add nsw i32 %sum.2, 4
  %448 = ashr i32 %447, 3
  %449 = trunc i32 %448 to i16
  %450 = load i32* @filters, align 4
  %451 = shl i32 %245, 1
  %452 = and i32 %451, 14
  %453 = and i32 %240, 1
  %454 = add i32 %452, %453
  %455 = shl i32 %454, 1
  %456 = lshr i32 %450, %455
  %457 = and i32 %456, 3
  %458 = zext i32 %457 to i64
  %459 = load i16* @shrink, align 2
  %460 = zext i16 %459 to i32
  %461 = lshr i32 %245, %460
  %462 = load i16* @iwidth, align 2
  %463 = zext i16 %462 to i32
  %464 = mul i32 %461, %463
  %465 = load i16* @shrink, align 2
  %466 = zext i16 %465 to i32
  %467 = lshr i32 %240, %466
  %468 = add i32 %464, %467
  %469 = zext i32 %468 to i64
  %470 = load [4 x i16]** @image, align 8
  %471 = getelementptr inbounds [4 x i16]* %470, i64 %469
  %472 = getelementptr inbounds [4 x i16]* %471, i32 0, i64 %458
  store i16 %449, i16* %472, align 2
  br label %473

; <label>:473                                     ; preds = %446, %407
  br label %474

; <label>:474                                     ; preds = %473, %406
  br label %232

; <label>:475                                     ; preds = %232
  br label %508

; <label>:476                                     ; preds = %229
  %477 = icmp eq i32 %32, 1025
  br i1 %477, label %478, label %479

; <label>:478                                     ; preds = %476
  call void @phase_one_flat_field(i32 1, i32 2)
  br label %507

; <label>:479                                     ; preds = %476
  %480 = icmp eq i32 %32, 1046
  br i1 %480, label %483, label %481

; <label>:481                                     ; preds = %479
  %482 = icmp eq i32 %32, 1040
  br i1 %482, label %483, label %484

; <label>:483                                     ; preds = %481, %479
  call void @phase_one_flat_field(i32 0, i32 2)
  br label %506

; <label>:484                                     ; preds = %481
  %485 = icmp eq i32 %32, 1035
  br i1 %485, label %486, label %487

; <label>:486                                     ; preds = %484
  call void @phase_one_flat_field(i32 0, i32 4)
  br label %505

; <label>:487                                     ; preds = %484
  %488 = icmp eq i32 %32, 1042
  br i1 %488, label %489, label %504

; <label>:489                                     ; preds = %487
  %490 = load %struct._IO_FILE** @ifp, align 8
  %491 = call i32 @fseek(%struct._IO_FILE* %490, i64 36, i32 1)
  %492 = call zeroext i16 @get2()
  %493 = zext i16 %492 to i32
  %494 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 5), align 4
  %495 = sub nsw i32 %493, %494
  %496 = call i32 @abs(i32 %495) #9
  %497 = icmp sgt i32 %mindiff.0, %496
  br i1 %497, label %498, label %503

; <label>:498                                     ; preds = %489
  %499 = load %struct._IO_FILE** @ifp, align 8
  %500 = call i64 @ftell(%struct._IO_FILE* %499)
  %501 = sub nsw i64 %500, 38
  %502 = trunc i64 %501 to i32
  br label %503

; <label>:503                                     ; preds = %498, %489
  %mindiff.1 = phi i32 [ %496, %498 ], [ %mindiff.0, %489 ]
  %off_412.1 = phi i32 [ %502, %498 ], [ %off_412.0, %489 ]
  br label %504

; <label>:504                                     ; preds = %503, %487
  %mindiff.2 = phi i32 [ %mindiff.1, %503 ], [ %mindiff.0, %487 ]
  %off_412.2 = phi i32 [ %off_412.1, %503 ], [ %off_412.0, %487 ]
  br label %505

; <label>:505                                     ; preds = %504, %486
  %mindiff.3 = phi i32 [ %mindiff.0, %486 ], [ %mindiff.2, %504 ]
  %off_412.3 = phi i32 [ %off_412.0, %486 ], [ %off_412.2, %504 ]
  br label %506

; <label>:506                                     ; preds = %505, %483
  %mindiff.4 = phi i32 [ %mindiff.0, %483 ], [ %mindiff.3, %505 ]
  %off_412.4 = phi i32 [ %off_412.0, %483 ], [ %off_412.3, %505 ]
  br label %507

; <label>:507                                     ; preds = %506, %478
  %mindiff.5 = phi i32 [ %mindiff.0, %478 ], [ %mindiff.4, %506 ]
  %off_412.5 = phi i32 [ %off_412.0, %478 ], [ %off_412.4, %506 ]
  br label %508

; <label>:508                                     ; preds = %507, %475
  %mindiff.6 = phi i32 [ %mindiff.0, %475 ], [ %mindiff.5, %507 ]
  %off_412.6 = phi i32 [ %off_412.0, %475 ], [ %off_412.5, %507 ]
  br label %509

; <label>:509                                     ; preds = %508, %228
  %mindiff.7 = phi i32 [ %mindiff.0, %228 ], [ %mindiff.6, %508 ]
  %off_412.7 = phi i32 [ %off_412.0, %228 ], [ %off_412.6, %508 ]
  br label %510

; <label>:510                                     ; preds = %509
  %511 = load %struct._IO_FILE** @ifp, align 8
  %512 = zext i32 %37 to i64
  %513 = call i32 @fseek(%struct._IO_FILE* %511, i64 %512, i32 0)
  br label %28

; <label>:514                                     ; preds = %28
  %515 = icmp ne i32 %off_412.0, 0
  br i1 %515, label %516, label %829

; <label>:516                                     ; preds = %514
  %517 = load %struct._IO_FILE** @ifp, align 8
  %518 = sext i32 %off_412.0 to i64
  %519 = call i32 @fseek(%struct._IO_FILE* %517, i64 %518, i32 0)
  br label %520

; <label>:520                                     ; preds = %527, %516
  %i.8 = phi i32 [ 0, %516 ], [ %528, %527 ]
  %521 = icmp slt i32 %i.8, 9
  br i1 %521, label %522, label %529

; <label>:522                                     ; preds = %520
  %523 = call i32 @get4()
  %524 = and i32 %523, 32767
  %525 = sext i32 %i.8 to i64
  %526 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %525
  store i32 %524, i32* %526, align 4
  br label %527

; <label>:527                                     ; preds = %522
  %528 = add nsw i32 %i.8, 1
  br label %520

; <label>:529                                     ; preds = %520
  %530 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %531 = load i32* %530, align 4
  %532 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %533 = load i32* %532, align 4
  %534 = mul nsw i32 %531, %533
  %535 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 2
  %536 = load i32* %535, align 4
  %537 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 4
  %538 = load i32* %537, align 4
  %539 = mul nsw i32 %536, %538
  %540 = add nsw i32 %534, %539
  %541 = sext i32 %540 to i64
  %542 = call noalias i8* @calloc(i64 %541, i64 6) #4
  %543 = bitcast i8* %542 to float*
  %544 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  store float* %543, float** %544, align 8
  %545 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %546 = load float** %545, align 8
  %547 = bitcast float* %546 to i8*
  call void @merror(i8* %547, i8* getelementptr inbounds ([20 x i8]* @.str18, i32 0, i32 0))
  %548 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %549 = load float** %548, align 8
  %550 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %551 = load i32* %550, align 4
  %552 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %553 = load i32* %552, align 4
  %554 = mul nsw i32 %551, %553
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds float* %549, i64 %555
  %557 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 1
  store float* %556, float** %557, align 8
  %558 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 1
  %559 = load float** %558, align 8
  %560 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 2
  %561 = load i32* %560, align 4
  %562 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 4
  %563 = load i32* %562, align 4
  %564 = mul nsw i32 %561, %563
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds float* %559, i64 %565
  %567 = bitcast float* %566 to i16*
  %568 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  store i16* %567, i16** %568, align 8
  %569 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %570 = load i16** %569, align 8
  %571 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %572 = load i32* %571, align 4
  %573 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %574 = load i32* %573, align 4
  %575 = mul nsw i32 %572, %574
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds i16* %570, i64 %576
  %578 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 1
  store i16* %577, i16** %578, align 8
  %579 = call zeroext i16 @get2()
  br label %580

; <label>:580                                     ; preds = %605, %529
  %i.9 = phi i32 [ 0, %529 ], [ %606, %605 ]
  %581 = icmp slt i32 %i.9, 2
  br i1 %581, label %582, label %607

; <label>:582                                     ; preds = %580
  br label %583

; <label>:583                                     ; preds = %602, %582
  %j.1 = phi i32 [ 0, %582 ], [ %603, %602 ]
  %584 = add nsw i32 %i.9, 1
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %585
  %587 = load i32* %586, align 4
  %588 = add nsw i32 %i.9, 3
  %589 = sext i32 %588 to i64
  %590 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %589
  %591 = load i32* %590, align 4
  %592 = mul nsw i32 %587, %591
  %593 = icmp slt i32 %j.1, %592
  br i1 %593, label %594, label %604

; <label>:594                                     ; preds = %583
  %595 = call double @getreal(i32 11)
  %596 = fptrunc double %595 to float
  %597 = sext i32 %j.1 to i64
  %598 = sext i32 %i.9 to i64
  %599 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 %598
  %600 = load float** %599, align 8
  %601 = getelementptr inbounds float* %600, i64 %597
  store float %596, float* %601, align 4
  br label %602

; <label>:602                                     ; preds = %594
  %603 = add nsw i32 %j.1, 1
  br label %583

; <label>:604                                     ; preds = %583
  br label %605

; <label>:605                                     ; preds = %604
  %606 = add nsw i32 %i.9, 1
  br label %580

; <label>:607                                     ; preds = %580
  br label %608

; <label>:608                                     ; preds = %632, %607
  %i.10 = phi i32 [ 0, %607 ], [ %633, %632 ]
  %609 = icmp slt i32 %i.10, 2
  br i1 %609, label %610, label %634

; <label>:610                                     ; preds = %608
  br label %611

; <label>:611                                     ; preds = %629, %610
  %j.2 = phi i32 [ 0, %610 ], [ %630, %629 ]
  %612 = add nsw i32 %i.10, 1
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %613
  %615 = load i32* %614, align 4
  %616 = add nsw i32 %i.10, 3
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %617
  %619 = load i32* %618, align 4
  %620 = mul nsw i32 %615, %619
  %621 = icmp slt i32 %j.2, %620
  br i1 %621, label %622, label %631

; <label>:622                                     ; preds = %611
  %623 = call zeroext i16 @get2()
  %624 = sext i32 %j.2 to i64
  %625 = sext i32 %i.10 to i64
  %626 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 %625
  %627 = load i16** %626, align 8
  %628 = getelementptr inbounds i16* %627, i64 %624
  store i16 %623, i16* %628, align 2
  br label %629

; <label>:629                                     ; preds = %622
  %630 = add nsw i32 %j.2, 1
  br label %611

; <label>:631                                     ; preds = %611
  br label %632

; <label>:632                                     ; preds = %631
  %633 = add nsw i32 %i.10, 1
  br label %608

; <label>:634                                     ; preds = %608
  br label %635

; <label>:635                                     ; preds = %823, %634
  %row.2 = phi i32 [ 0, %634 ], [ %824, %823 ]
  %636 = load i16* @height, align 2
  %637 = zext i16 %636 to i32
  %638 = icmp ult i32 %row.2, %637
  br i1 %638, label %639, label %825

; <label>:639                                     ; preds = %635
  br label %640

; <label>:640                                     ; preds = %820, %639
  %col.1 = phi i32 [ 0, %639 ], [ %821, %820 ]
  %641 = load i16* @width, align 2
  %642 = zext i16 %641 to i32
  %643 = icmp ult i32 %col.1, %642
  br i1 %643, label %644, label %822

; <label>:644                                     ; preds = %640
  %645 = uitofp i32 %col.1 to float
  %646 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %647 = load i32* %646, align 4
  %648 = sitofp i32 %647 to float
  %649 = fmul float %645, %648
  %650 = load i16* @raw_width, align 2
  %651 = zext i16 %650 to i32
  %652 = sitofp i32 %651 to float
  %653 = fdiv float %649, %652
  %654 = fptosi float %653 to i32
  %655 = sitofp i32 %654 to float
  %656 = fsub float %653, %655
  %657 = load i32* @filters, align 4
  %658 = shl i32 %row.2, 1
  %659 = and i32 %658, 14
  %660 = and i32 %col.1, 1
  %661 = add i32 %659, %660
  %662 = shl i32 %661, 1
  %663 = lshr i32 %657, %662
  %664 = and i32 %663, 3
  %665 = zext i32 %664 to i64
  %666 = load i16* @shrink, align 2
  %667 = zext i16 %666 to i32
  %668 = lshr i32 %row.2, %667
  %669 = load i16* @iwidth, align 2
  %670 = zext i16 %669 to i32
  %671 = mul i32 %668, %670
  %672 = load i16* @shrink, align 2
  %673 = zext i16 %672 to i32
  %674 = lshr i32 %col.1, %673
  %675 = add i32 %671, %674
  %676 = zext i32 %675 to i64
  %677 = load [4 x i16]** @image, align 8
  %678 = getelementptr inbounds [4 x i16]* %677, i64 %676
  %679 = getelementptr inbounds [4 x i16]* %678, i32 0, i64 %665
  %680 = load i16* %679, align 2
  %681 = zext i16 %680 to i32
  %682 = sitofp i32 %681 to double
  %683 = fmul double %682, 5.000000e-01
  %684 = fptrunc double %683 to float
  br label %685

; <label>:685                                     ; preds = %762, %644
  %i.11 = phi i32 [ %654, %644 ], [ %763, %762 ]
  %686 = add nsw i32 %654, 2
  %687 = icmp slt i32 %i.11, %686
  br i1 %687, label %688, label %764

; <label>:688                                     ; preds = %685
  br label %689

; <label>:689                                     ; preds = %708, %688
  %k.0 = phi i32 [ 0, %688 ], [ %697, %708 ]
  %j.3 = phi i32 [ 0, %688 ], [ %709, %708 ]
  %690 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %691 = load i32* %690, align 4
  %692 = icmp slt i32 %j.3, %691
  br i1 %692, label %693, label %710

; <label>:693                                     ; preds = %689
  %694 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %695 = load i32* %694, align 4
  %696 = mul nsw i32 %695, %i.11
  %697 = add nsw i32 %696, %j.3
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %700 = load i16** %699, align 8
  %701 = getelementptr inbounds i16* %700, i64 %698
  %702 = load i16* %701, align 2
  %703 = zext i16 %702 to i32
  %704 = sitofp i32 %703 to float
  %705 = fcmp olt float %684, %704
  br i1 %705, label %706, label %707

; <label>:706                                     ; preds = %693
  br label %710

; <label>:707                                     ; preds = %693
  br label %708

; <label>:708                                     ; preds = %707
  %709 = add nsw i32 %j.3, 1
  br label %689

; <label>:710                                     ; preds = %706, %689
  %k.1 = phi i32 [ %697, %706 ], [ %k.0, %689 ]
  %711 = icmp eq i32 %j.3, 0
  br i1 %711, label %716, label %712

; <label>:712                                     ; preds = %710
  %713 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %714 = load i32* %713, align 4
  %715 = icmp eq i32 %j.3, %714
  br i1 %715, label %716, label %717

; <label>:716                                     ; preds = %712, %710
  br label %742

; <label>:717                                     ; preds = %712
  %718 = sext i32 %k.1 to i64
  %719 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %720 = load i16** %719, align 8
  %721 = getelementptr inbounds i16* %720, i64 %718
  %722 = load i16* %721, align 2
  %723 = zext i16 %722 to i32
  %724 = sitofp i32 %723 to float
  %725 = fsub float %724, %684
  %726 = sext i32 %k.1 to i64
  %727 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %728 = load i16** %727, align 8
  %729 = getelementptr inbounds i16* %728, i64 %726
  %730 = load i16* %729, align 2
  %731 = zext i16 %730 to i32
  %732 = sub nsw i32 %k.1, 1
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %735 = load i16** %734, align 8
  %736 = getelementptr inbounds i16* %735, i64 %733
  %737 = load i16* %736, align 2
  %738 = zext i16 %737 to i32
  %739 = sub nsw i32 %731, %738
  %740 = sitofp i32 %739 to float
  %741 = fdiv float %725, %740
  br label %742

; <label>:742                                     ; preds = %717, %716
  %743 = phi float [ 0.000000e+00, %716 ], [ %741, %717 ]
  %744 = sub nsw i32 %k.1, 1
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %747 = load float** %746, align 8
  %748 = getelementptr inbounds float* %747, i64 %745
  %749 = load float* %748, align 4
  %750 = fmul float %749, %743
  %751 = sext i32 %k.1 to i64
  %752 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %753 = load float** %752, align 8
  %754 = getelementptr inbounds float* %753, i64 %751
  %755 = load float* %754, align 4
  %756 = fsub float 1.000000e+00, %743
  %757 = fmul float %755, %756
  %758 = fadd float %750, %757
  %759 = sub nsw i32 %i.11, %654
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds [2 x float]* %mult, i32 0, i64 %760
  store float %758, float* %761, align 4
  br label %762

; <label>:762                                     ; preds = %742
  %763 = add nsw i32 %i.11, 1
  br label %685

; <label>:764                                     ; preds = %685
  %765 = getelementptr inbounds [2 x float]* %mult, i32 0, i64 0
  %766 = load float* %765, align 4
  %767 = fsub float 1.000000e+00, %656
  %768 = fmul float %766, %767
  %769 = getelementptr inbounds [2 x float]* %mult, i32 0, i64 1
  %770 = load float* %769, align 4
  %771 = fmul float %770, %656
  %772 = fadd float %768, %771
  %773 = load i16* @top_margin, align 2
  %774 = zext i16 %773 to i32
  %775 = add i32 %row.2, %774
  %776 = uitofp i32 %775 to float
  %777 = fmul float %772, %776
  %778 = fadd float %777, %684
  %779 = fmul float %778, 2.000000e+00
  %780 = fptosi float %779 to i32
  %781 = icmp slt i32 %780, 65535
  br i1 %781, label %782, label %783

; <label>:782                                     ; preds = %764
  br label %784

; <label>:783                                     ; preds = %764
  br label %784

; <label>:784                                     ; preds = %783, %782
  %785 = phi i32 [ %780, %782 ], [ 65535, %783 ]
  %786 = icmp sgt i32 0, %785
  br i1 %786, label %787, label %788

; <label>:787                                     ; preds = %784
  br label %794

; <label>:788                                     ; preds = %784
  %789 = icmp slt i32 %780, 65535
  br i1 %789, label %790, label %791

; <label>:790                                     ; preds = %788
  br label %792

; <label>:791                                     ; preds = %788
  br label %792

; <label>:792                                     ; preds = %791, %790
  %793 = phi i32 [ %780, %790 ], [ 65535, %791 ]
  br label %794

; <label>:794                                     ; preds = %792, %787
  %795 = phi i32 [ 0, %787 ], [ %793, %792 ]
  %796 = trunc i32 %795 to i16
  %797 = load i32* @filters, align 4
  %798 = shl i32 %row.2, 1
  %799 = and i32 %798, 14
  %800 = and i32 %col.1, 1
  %801 = add i32 %799, %800
  %802 = shl i32 %801, 1
  %803 = lshr i32 %797, %802
  %804 = and i32 %803, 3
  %805 = zext i32 %804 to i64
  %806 = load i16* @shrink, align 2
  %807 = zext i16 %806 to i32
  %808 = lshr i32 %row.2, %807
  %809 = load i16* @iwidth, align 2
  %810 = zext i16 %809 to i32
  %811 = mul i32 %808, %810
  %812 = load i16* @shrink, align 2
  %813 = zext i16 %812 to i32
  %814 = lshr i32 %col.1, %813
  %815 = add i32 %811, %814
  %816 = zext i32 %815 to i64
  %817 = load [4 x i16]** @image, align 8
  %818 = getelementptr inbounds [4 x i16]* %817, i64 %816
  %819 = getelementptr inbounds [4 x i16]* %818, i32 0, i64 %805
  store i16 %796, i16* %819, align 2
  br label %820

; <label>:820                                     ; preds = %794
  %821 = add i32 %col.1, 1
  br label %640

; <label>:822                                     ; preds = %640
  br label %823

; <label>:823                                     ; preds = %822
  %824 = add i32 %row.2, 1
  br label %635

; <label>:825                                     ; preds = %635
  %826 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %827 = load float** %826, align 8
  %828 = bitcast float* %827 to i8*
  call void @free(i8* %828) #4
  br label %829

; <label>:829                                     ; preds = %825, %514, %6
  ret void
}

; Function Attrs: nounwind uwtable
define void @phase_one_load_raw() #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 1), align 4
  %3 = sext i32 %2 to i64
  %4 = call i32 @fseek(%struct._IO_FILE* %1, i64 %3, i32 0)
  %5 = call zeroext i16 @get2()
  %6 = call zeroext i16 @get2()
  %7 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  %8 = icmp eq i32 %7, 1
  %9 = select i1 %8, i32 21845, i32 4948
  %10 = trunc i32 %9 to i16
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = load i64* @data_offset, align 8
  %13 = load i16* @top_margin, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16* @raw_width, align 2
  %16 = zext i16 %15 to i32
  %17 = mul nsw i32 %14, %16
  %18 = mul nsw i32 %17, 2
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %12, %19
  %21 = call i32 @fseek(%struct._IO_FILE* %11, i64 %20, i32 0)
  %22 = load i16* @raw_width, align 2
  %23 = zext i16 %22 to i64
  %24 = call noalias i8* @calloc(i64 %23, i64 2) #4
  %25 = bitcast i8* %24 to i16*
  %26 = bitcast i16* %25 to i8*
  call void @merror(i8* %26, i8* getelementptr inbounds ([21 x i8]* @.str19, i32 0, i32 0))
  br label %27

; <label>:27                                      ; preds = %113, %0
  %row.0 = phi i32 [ 0, %0 ], [ %114, %113 ]
  %28 = load i16* @height, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %row.0, %29
  br i1 %30, label %31, label %115

; <label>:31                                      ; preds = %27
  %32 = load i16* @raw_width, align 2
  %33 = zext i16 %32 to i32
  call void @read_shorts(i16* %25, i32 %33)
  br label %34

; <label>:34                                      ; preds = %73, %31
  %col.0 = phi i32 [ 0, %31 ], [ %74, %73 ]
  %35 = load i16* @raw_width, align 2
  %36 = zext i16 %35 to i32
  %37 = icmp slt i32 %col.0, %36
  br i1 %37, label %38, label %75

; <label>:38                                      ; preds = %34
  %39 = add nsw i32 %col.0, 0
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i16* %25, i64 %40
  %42 = load i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = zext i16 %5 to i32
  %45 = xor i32 %43, %44
  %46 = add nsw i32 %col.0, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16* %25, i64 %47
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = zext i16 %6 to i32
  %52 = xor i32 %50, %51
  %53 = zext i16 %10 to i32
  %54 = and i32 %45, %53
  %55 = zext i16 %10 to i32
  %56 = xor i32 %55, -1
  %57 = and i32 %52, %56
  %58 = or i32 %54, %57
  %59 = trunc i32 %58 to i16
  %60 = add nsw i32 %col.0, 0
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i16* %25, i64 %61
  store i16 %59, i16* %62, align 2
  %63 = zext i16 %10 to i32
  %64 = and i32 %52, %63
  %65 = zext i16 %10 to i32
  %66 = xor i32 %65, -1
  %67 = and i32 %45, %66
  %68 = or i32 %64, %67
  %69 = trunc i32 %68 to i16
  %70 = add nsw i32 %col.0, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i16* %25, i64 %71
  store i16 %69, i16* %72, align 2
  br label %73

; <label>:73                                      ; preds = %38
  %74 = add nsw i32 %col.0, 2
  br label %34

; <label>:75                                      ; preds = %34
  br label %76

; <label>:76                                      ; preds = %110, %75
  %col.1 = phi i32 [ 0, %75 ], [ %111, %110 ]
  %77 = load i16* @width, align 2
  %78 = zext i16 %77 to i32
  %79 = icmp slt i32 %col.1, %78
  br i1 %79, label %80, label %112

; <label>:80                                      ; preds = %76
  %81 = load i16* @left_margin, align 2
  %82 = zext i16 %81 to i32
  %83 = add nsw i32 %col.1, %82
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i16* %25, i64 %84
  %86 = load i16* %85, align 2
  %87 = load i32* @filters, align 4
  %88 = shl i32 %row.0, 1
  %89 = and i32 %88, 14
  %90 = and i32 %col.1, 1
  %91 = add nsw i32 %89, %90
  %92 = shl i32 %91, 1
  %93 = lshr i32 %87, %92
  %94 = and i32 %93, 3
  %95 = zext i32 %94 to i64
  %96 = load i16* @shrink, align 2
  %97 = zext i16 %96 to i32
  %98 = ashr i32 %row.0, %97
  %99 = load i16* @iwidth, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nsw i32 %98, %100
  %102 = load i16* @shrink, align 2
  %103 = zext i16 %102 to i32
  %104 = ashr i32 %col.1, %103
  %105 = add nsw i32 %101, %104
  %106 = sext i32 %105 to i64
  %107 = load [4 x i16]** @image, align 8
  %108 = getelementptr inbounds [4 x i16]* %107, i64 %106
  %109 = getelementptr inbounds [4 x i16]* %108, i32 0, i64 %95
  store i16 %86, i16* %109, align 2
  br label %110

; <label>:110                                     ; preds = %80
  %111 = add nsw i32 %col.1, 1
  br label %76

; <label>:112                                     ; preds = %76
  br label %113

; <label>:113                                     ; preds = %112
  %114 = add nsw i32 %row.0, 1
  br label %27

; <label>:115                                     ; preds = %27
  %116 = bitcast i16* %25 to i8*
  call void @free(i8* %116) #4
  call void @phase_one_correct()
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @ph1_bits(i32 %nbits) #0 {
  %1 = icmp eq i32 %nbits, -1
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  store i32 0, i32* @ph1_bits.vbits, align 4
  store i64 0, i64* @ph1_bits.bitbuf, align 8
  br label %29

; <label>:3                                       ; preds = %0
  %4 = icmp eq i32 %nbits, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %3
  br label %29

; <label>:6                                       ; preds = %3
  %7 = load i32* @ph1_bits.vbits, align 4
  %8 = sub nsw i32 %7, %nbits
  store i32 %8, i32* @ph1_bits.vbits, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %18

; <label>:10                                      ; preds = %6
  %11 = load i64* @ph1_bits.bitbuf, align 8
  %12 = shl i64 %11, 32
  %13 = call i32 @get4()
  %14 = zext i32 %13 to i64
  %15 = or i64 %12, %14
  store i64 %15, i64* @ph1_bits.bitbuf, align 8
  %16 = load i32* @ph1_bits.vbits, align 4
  %17 = add nsw i32 %16, 32
  store i32 %17, i32* @ph1_bits.vbits, align 4
  br label %18

; <label>:18                                      ; preds = %10, %6
  %19 = load i64* @ph1_bits.bitbuf, align 8
  %20 = sub nsw i32 64, %nbits
  %21 = load i32* @ph1_bits.vbits, align 4
  %22 = sub nsw i32 %20, %21
  %23 = zext i32 %22 to i64
  %24 = shl i64 %19, %23
  %25 = sub nsw i32 64, %nbits
  %26 = zext i32 %25 to i64
  %27 = lshr i64 %24, %26
  %28 = trunc i64 %27 to i32
  br label %29

; <label>:29                                      ; preds = %18, %5, %2
  %.0 = phi i32 [ 0, %2 ], [ 0, %5 ], [ %28, %18 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @phase_one_load_raw_c() #0 {
  %len = alloca [2 x i32], align 4
  %pred = alloca [2 x i32], align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @raw_height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %4, 4
  %6 = add nsw i32 %2, %5
  %7 = sext i32 %6 to i64
  %8 = call noalias i8* @calloc(i64 %7, i64 2) #4
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i16* %9 to i8*
  call void @merror(i8* %10, i8* getelementptr inbounds ([23 x i8]* @.str20, i32 0, i32 0))
  %11 = load i16* @raw_width, align 2
  %12 = zext i16 %11 to i32
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i16* %9, i64 %13
  %15 = bitcast i16* %14 to i32*
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = load i64* @strip_offset, align 8
  %18 = call i32 @fseek(%struct._IO_FILE* %16, i64 %17, i32 0)
  br label %19

; <label>:19                                      ; preds = %27, %0
  %row.0 = phi i32 [ 0, %0 ], [ %28, %27 ]
  %20 = load i16* @raw_height, align 2
  %21 = zext i16 %20 to i32
  %22 = icmp slt i32 %row.0, %21
  br i1 %22, label %23, label %29

; <label>:23                                      ; preds = %19
  %24 = call i32 @get4()
  %25 = sext i32 %row.0 to i64
  %26 = getelementptr inbounds i32* %15, i64 %25
  store i32 %24, i32* %26, align 4
  br label %27

; <label>:27                                      ; preds = %23
  %28 = add nsw i32 %row.0, 1
  br label %19

; <label>:29                                      ; preds = %19
  %30 = bitcast i32* %15 to [2 x i16]*
  %31 = load i16* @raw_height, align 2
  %32 = zext i16 %31 to i32
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [2 x i16]* %30, i64 %33
  %35 = load %struct._IO_FILE** @ifp, align 8
  %36 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 3), align 4
  %37 = sext i32 %36 to i64
  %38 = call i32 @fseek(%struct._IO_FILE* %35, i64 %37, i32 0)
  %39 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 3), align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %47

; <label>:41                                      ; preds = %29
  %42 = getelementptr inbounds [2 x i16]* %34, i64 0
  %43 = getelementptr inbounds [2 x i16]* %42, i32 0, i32 0
  %44 = load i16* @raw_height, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nsw i32 %45, 2
  call void @read_shorts(i16* %43, i32 %46)
  br label %47

; <label>:47                                      ; preds = %41, %29
  br label %48

; <label>:48                                      ; preds = %58, %47
  %i.0 = phi i32 [ 0, %47 ], [ %59, %58 ]
  %49 = icmp slt i32 %i.0, 256
  br i1 %49, label %50, label %60

; <label>:50                                      ; preds = %48
  %51 = mul nsw i32 %i.0, %i.0
  %52 = sitofp i32 %51 to double
  %53 = fdiv double %52, 3.969000e+00
  %54 = fadd double %53, 5.000000e-01
  %55 = fptoui double %54 to i16
  %56 = sext i32 %i.0 to i64
  %57 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %56
  store i16 %55, i16* %57, align 2
  br label %58

; <label>:58                                      ; preds = %50
  %59 = add nsw i32 %i.0, 1
  br label %48

; <label>:60                                      ; preds = %48
  br label %61

; <label>:61                                      ; preds = %251, %60
  %row.1 = phi i32 [ 0, %60 ], [ %252, %251 ]
  %62 = load i16* @raw_height, align 2
  %63 = zext i16 %62 to i32
  %64 = icmp slt i32 %row.1, %63
  br i1 %64, label %65, label %253

; <label>:65                                      ; preds = %61
  %66 = load %struct._IO_FILE** @ifp, align 8
  %67 = load i64* @data_offset, align 8
  %68 = sext i32 %row.1 to i64
  %69 = getelementptr inbounds i32* %15, i64 %68
  %70 = load i32* %69, align 4
  %71 = sext i32 %70 to i64
  %72 = add nsw i64 %67, %71
  %73 = call i32 @fseek(%struct._IO_FILE* %66, i64 %72, i32 0)
  %74 = call i32 @ph1_bits(i32 -1)
  %75 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 0, i32* %75, align 4
  %76 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 0, i32* %76, align 4
  br label %77

; <label>:77                                      ; preds = %179, %65
  %col.0 = phi i32 [ 0, %65 ], [ %180, %179 ]
  %78 = load i16* @raw_width, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp slt i32 %col.0, %79
  br i1 %80, label %81, label %181

; <label>:81                                      ; preds = %77
  %82 = load i16* @raw_width, align 2
  %83 = zext i16 %82 to i32
  %84 = and i32 %83, -8
  %85 = icmp sge i32 %col.0, %84
  br i1 %85, label %86, label %89

; <label>:86                                      ; preds = %81
  %87 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 1
  store i32 14, i32* %87, align 4
  %88 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 0
  store i32 14, i32* %88, align 4
  br label %124

; <label>:89                                      ; preds = %81
  %90 = and i32 %col.0, 7
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %123

; <label>:92                                      ; preds = %89
  br label %93

; <label>:93                                      ; preds = %120, %92
  %i.1 = phi i32 [ 0, %92 ], [ %121, %120 ]
  %94 = icmp slt i32 %i.1, 2
  br i1 %94, label %95, label %122

; <label>:95                                      ; preds = %93
  br label %96

; <label>:96                                      ; preds = %105, %95
  %j.0 = phi i32 [ 0, %95 ], [ %106, %105 ]
  %97 = icmp slt i32 %j.0, 5
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %96
  %99 = call i32 @ph1_bits(i32 1)
  %100 = icmp ne i32 %99, 0
  %101 = xor i1 %100, true
  br label %102

; <label>:102                                     ; preds = %98, %96
  %103 = phi i1 [ false, %96 ], [ %101, %98 ]
  br i1 %103, label %104, label %107

; <label>:104                                     ; preds = %102
  br label %105

; <label>:105                                     ; preds = %104
  %106 = add nsw i32 %j.0, 1
  br label %96

; <label>:107                                     ; preds = %102
  %108 = add nsw i32 %j.0, -1
  %109 = icmp ne i32 %j.0, 0
  br i1 %109, label %110, label %119

; <label>:110                                     ; preds = %107
  %111 = mul nsw i32 %108, 2
  %112 = call i32 @ph1_bits(i32 1)
  %113 = add i32 %111, %112
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [10 x i32]* @phase_one_load_raw_c.length, i32 0, i64 %114
  %116 = load i32* %115, align 4
  %117 = sext i32 %i.1 to i64
  %118 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %117
  store i32 %116, i32* %118, align 4
  br label %119

; <label>:119                                     ; preds = %110, %107
  br label %120

; <label>:120                                     ; preds = %119
  %121 = add nsw i32 %i.1, 1
  br label %93

; <label>:122                                     ; preds = %93
  br label %123

; <label>:123                                     ; preds = %122, %89
  br label %124

; <label>:124                                     ; preds = %123, %86
  %125 = and i32 %col.0, 1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %126
  %128 = load i32* %127, align 4
  %129 = icmp eq i32 %128, 14
  br i1 %129, label %130, label %138

; <label>:130                                     ; preds = %124
  %131 = call i32 @ph1_bits(i32 16)
  %132 = and i32 %col.0, 1
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %133
  store i32 %131, i32* %134, align 4
  %135 = trunc i32 %131 to i16
  %136 = sext i32 %col.0 to i64
  %137 = getelementptr inbounds i16* %9, i64 %136
  store i16 %135, i16* %137, align 2
  br label %152

; <label>:138                                     ; preds = %124
  %139 = call i32 @ph1_bits(i32 %128)
  %140 = add i32 %139, 1
  %141 = sub nsw i32 %128, 1
  %142 = shl i32 1, %141
  %143 = sub i32 %140, %142
  %144 = and i32 %col.0, 1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %145
  %147 = load i32* %146, align 4
  %148 = add i32 %147, %143
  store i32 %148, i32* %146, align 4
  %149 = trunc i32 %148 to i16
  %150 = sext i32 %col.0 to i64
  %151 = getelementptr inbounds i16* %9, i64 %150
  store i16 %149, i16* %151, align 2
  br label %152

; <label>:152                                     ; preds = %138, %130
  %153 = and i32 %col.0, 1
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %154
  %156 = load i32* %155, align 4
  %157 = ashr i32 %156, 16
  %158 = icmp ne i32 %157, 0
  br i1 %158, label %159, label %160

; <label>:159                                     ; preds = %152
  call void @derror()
  br label %160

; <label>:160                                     ; preds = %159, %152
  %161 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  %162 = icmp eq i32 %161, 5
  br i1 %162, label %163, label %178

; <label>:163                                     ; preds = %160
  %164 = sext i32 %col.0 to i64
  %165 = getelementptr inbounds i16* %9, i64 %164
  %166 = load i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = icmp slt i32 %167, 256
  br i1 %168, label %169, label %178

; <label>:169                                     ; preds = %163
  %170 = sext i32 %col.0 to i64
  %171 = getelementptr inbounds i16* %9, i64 %170
  %172 = load i16* %171, align 2
  %173 = zext i16 %172 to i64
  %174 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %173
  %175 = load i16* %174, align 2
  %176 = sext i32 %col.0 to i64
  %177 = getelementptr inbounds i16* %9, i64 %176
  store i16 %175, i16* %177, align 2
  br label %178

; <label>:178                                     ; preds = %169, %163, %160
  br label %179

; <label>:179                                     ; preds = %178
  %180 = add nsw i32 %col.0, 1
  br label %77

; <label>:181                                     ; preds = %77
  %182 = load i16* @top_margin, align 2
  %183 = zext i16 %182 to i32
  %184 = sub nsw i32 %row.1, %183
  %185 = load i16* @height, align 2
  %186 = zext i16 %185 to i32
  %187 = icmp ult i32 %184, %186
  br i1 %187, label %188, label %250

; <label>:188                                     ; preds = %181
  br label %189

; <label>:189                                     ; preds = %247, %188
  %col.1 = phi i32 [ 0, %188 ], [ %248, %247 ]
  %190 = load i16* @width, align 2
  %191 = zext i16 %190 to i32
  %192 = icmp slt i32 %col.1, %191
  br i1 %192, label %193, label %249

; <label>:193                                     ; preds = %189
  %194 = load i16* @left_margin, align 2
  %195 = zext i16 %194 to i32
  %196 = add nsw i32 %col.1, %195
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i16* %9, i64 %197
  %199 = load i16* %198, align 2
  %200 = zext i16 %199 to i32
  %201 = shl i32 %200, 2
  %202 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 2), align 4
  %203 = sub nsw i32 %201, %202
  %204 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 4), align 4
  %205 = icmp sge i32 %col.1, %204
  %206 = zext i1 %205 to i32
  %207 = sext i32 %206 to i64
  %208 = sext i32 %row.1 to i64
  %209 = getelementptr inbounds [2 x i16]* %34, i64 %208
  %210 = getelementptr inbounds [2 x i16]* %209, i32 0, i64 %207
  %211 = load i16* %210, align 2
  %212 = sext i16 %211 to i32
  %213 = add nsw i32 %203, %212
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %215, label %246

; <label>:215                                     ; preds = %193
  %216 = trunc i32 %213 to i16
  %217 = load i32* @filters, align 4
  %218 = load i16* @top_margin, align 2
  %219 = zext i16 %218 to i32
  %220 = sub nsw i32 %row.1, %219
  %221 = shl i32 %220, 1
  %222 = and i32 %221, 14
  %223 = and i32 %col.1, 1
  %224 = add nsw i32 %222, %223
  %225 = shl i32 %224, 1
  %226 = lshr i32 %217, %225
  %227 = and i32 %226, 3
  %228 = zext i32 %227 to i64
  %229 = load i16* @top_margin, align 2
  %230 = zext i16 %229 to i32
  %231 = sub nsw i32 %row.1, %230
  %232 = load i16* @shrink, align 2
  %233 = zext i16 %232 to i32
  %234 = ashr i32 %231, %233
  %235 = load i16* @iwidth, align 2
  %236 = zext i16 %235 to i32
  %237 = mul nsw i32 %234, %236
  %238 = load i16* @shrink, align 2
  %239 = zext i16 %238 to i32
  %240 = ashr i32 %col.1, %239
  %241 = add nsw i32 %237, %240
  %242 = sext i32 %241 to i64
  %243 = load [4 x i16]** @image, align 8
  %244 = getelementptr inbounds [4 x i16]* %243, i64 %242
  %245 = getelementptr inbounds [4 x i16]* %244, i32 0, i64 %228
  store i16 %216, i16* %245, align 2
  br label %246

; <label>:246                                     ; preds = %215, %193
  br label %247

; <label>:247                                     ; preds = %246
  %248 = add nsw i32 %col.1, 1
  br label %189

; <label>:249                                     ; preds = %189
  br label %250

; <label>:250                                     ; preds = %249, %181
  br label %251

; <label>:251                                     ; preds = %250
  %252 = add nsw i32 %row.1, 1
  br label %61

; <label>:253                                     ; preds = %61
  %254 = bitcast i16* %9 to i8*
  call void @free(i8* %254) #4
  call void @phase_one_correct()
  %255 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 2), align 4
  %256 = sub nsw i32 65532, %255
  store i32 %256, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @hasselblad_load_raw() #0 {
  %jh = alloca %struct.jhead, align 8
  %pred = alloca [2 x i32], align 4
  %len = alloca [2 x i32], align 4
  %1 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  br label %130

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %6 = load i16** %5, align 8
  %7 = bitcast i16* %6 to i8*
  call void @free(i8* %7) #4
  store i16 18761, i16* @order, align 2
  %8 = call i32 @ph1_bits(i32 -1)
  %9 = load i16* @top_margin, align 2
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 0, %10
  br label %12

; <label>:12                                      ; preds = %127, %4
  %row.0 = phi i32 [ %11, %4 ], [ %128, %127 ]
  %13 = load i16* @height, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp slt i32 %row.0, %14
  br i1 %15, label %16, label %129

; <label>:16                                      ; preds = %12
  %17 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 32768, i32* %17, align 4
  %18 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 32768, i32* %18, align 4
  %19 = load i16* @left_margin, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 0, %20
  br label %22

; <label>:22                                      ; preds = %124, %16
  %col.0 = phi i32 [ %21, %16 ], [ %125, %124 ]
  %23 = load i16* @raw_width, align 2
  %24 = zext i16 %23 to i32
  %25 = load i16* @left_margin, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %24, %26
  %28 = icmp slt i32 %col.0, %27
  br i1 %28, label %29, label %126

; <label>:29                                      ; preds = %22
  br label %30

; <label>:30                                      ; preds = %52, %29
  %i.0 = phi i32 [ 0, %29 ], [ %53, %52 ]
  %31 = icmp slt i32 %i.0, 2
  br i1 %31, label %32, label %54

; <label>:32                                      ; preds = %30
  %33 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %34 = getelementptr inbounds [6 x %struct.decode*]* %33, i32 0, i64 0
  %35 = load %struct.decode** %34, align 8
  br label %36

; <label>:36                                      ; preds = %41, %32
  %dindex.0 = phi %struct.decode* [ %35, %32 ], [ %46, %41 ]
  %37 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %38 = getelementptr inbounds [2 x %struct.decode*]* %37, i32 0, i64 0
  %39 = load %struct.decode** %38, align 8
  %40 = icmp ne %struct.decode* %39, null
  br i1 %40, label %41, label %47

; <label>:41                                      ; preds = %36
  %42 = call i32 @ph1_bits(i32 1)
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %45 = getelementptr inbounds [2 x %struct.decode*]* %44, i32 0, i64 %43
  %46 = load %struct.decode** %45, align 8
  br label %36

; <label>:47                                      ; preds = %36
  %48 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 1
  %49 = load i32* %48, align 4
  %50 = sext i32 %i.0 to i64
  %51 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %50
  store i32 %49, i32* %51, align 4
  br label %52

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %i.0, 1
  br label %30

; <label>:54                                      ; preds = %30
  br label %55

; <label>:55                                      ; preds = %121, %54
  %i.1 = phi i32 [ 0, %54 ], [ %122, %121 ]
  %56 = icmp slt i32 %i.1, 2
  br i1 %56, label %57, label %123

; <label>:57                                      ; preds = %55
  %58 = sext i32 %i.1 to i64
  %59 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %58
  %60 = load i32* %59, align 4
  %61 = call i32 @ph1_bits(i32 %60)
  %62 = sext i32 %i.1 to i64
  %63 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %62
  %64 = load i32* %63, align 4
  %65 = sub nsw i32 %64, 1
  %66 = shl i32 1, %65
  %67 = and i32 %61, %66
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %76

; <label>:69                                      ; preds = %57
  %70 = sext i32 %i.1 to i64
  %71 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %70
  %72 = load i32* %71, align 4
  %73 = shl i32 1, %72
  %74 = sub nsw i32 %73, 1
  %75 = sub nsw i32 %61, %74
  br label %76

; <label>:76                                      ; preds = %69, %57
  %diff.0 = phi i32 [ %75, %69 ], [ %61, %57 ]
  %77 = icmp eq i32 %diff.0, 65535
  br i1 %77, label %78, label %79

; <label>:78                                      ; preds = %76
  br label %79

; <label>:79                                      ; preds = %78, %76
  %diff.1 = phi i32 [ -32768, %78 ], [ %diff.0, %76 ]
  %80 = sext i32 %i.1 to i64
  %81 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %80
  %82 = load i32* %81, align 4
  %83 = add nsw i32 %82, %diff.1
  store i32 %83, i32* %81, align 4
  %84 = icmp sge i32 %row.0, 0
  br i1 %84, label %85, label %120

; <label>:85                                      ; preds = %79
  %86 = add nsw i32 %col.0, %i.1
  %87 = load i16* @width, align 2
  %88 = zext i16 %87 to i32
  %89 = icmp ult i32 %86, %88
  br i1 %89, label %90, label %120

; <label>:90                                      ; preds = %85
  %91 = sext i32 %i.1 to i64
  %92 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %91
  %93 = load i32* %92, align 4
  %94 = trunc i32 %93 to i16
  %95 = load i32* @filters, align 4
  %96 = shl i32 %row.0, 1
  %97 = and i32 %96, 14
  %98 = add nsw i32 %col.0, %i.1
  %99 = and i32 %98, 1
  %100 = add nsw i32 %97, %99
  %101 = shl i32 %100, 1
  %102 = lshr i32 %95, %101
  %103 = and i32 %102, 3
  %104 = zext i32 %103 to i64
  %105 = load i16* @shrink, align 2
  %106 = zext i16 %105 to i32
  %107 = ashr i32 %row.0, %106
  %108 = load i16* @iwidth, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nsw i32 %107, %109
  %111 = add nsw i32 %col.0, %i.1
  %112 = load i16* @shrink, align 2
  %113 = zext i16 %112 to i32
  %114 = ashr i32 %111, %113
  %115 = add nsw i32 %110, %114
  %116 = sext i32 %115 to i64
  %117 = load [4 x i16]** @image, align 8
  %118 = getelementptr inbounds [4 x i16]* %117, i64 %116
  %119 = getelementptr inbounds [4 x i16]* %118, i32 0, i64 %104
  store i16 %94, i16* %119, align 2
  br label %120

; <label>:120                                     ; preds = %90, %85, %79
  br label %121

; <label>:121                                     ; preds = %120
  %122 = add nsw i32 %i.1, 1
  br label %55

; <label>:123                                     ; preds = %55
  br label %124

; <label>:124                                     ; preds = %123
  %125 = add nsw i32 %col.0, 2
  br label %22

; <label>:126                                     ; preds = %22
  br label %127

; <label>:127                                     ; preds = %126
  %128 = add nsw i32 %row.0, 1
  br label %12

; <label>:129                                     ; preds = %12
  store i32 65535, i32* @maximum, align 4
  br label %130

; <label>:130                                     ; preds = %129, %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @leaf_hdr_load_raw() #0 {
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i64
  %3 = call noalias i8* @calloc(i64 %2, i64 2) #4
  %4 = bitcast i8* %3 to i16*
  %5 = bitcast i16* %4 to i8*
  call void @merror(i8* %5, i8* getelementptr inbounds ([20 x i8]* @.str21, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %106, %0
  %c.0 = phi i32 [ 0, %0 ], [ %107, %106 ]
  %tile.0 = phi i32 [ 0, %0 ], [ %tile.1, %106 ]
  %7 = load i32* @tiff_samples, align 4
  %8 = icmp ult i32 %c.0, %7
  br i1 %8, label %9, label %108

; <label>:9                                       ; preds = %6
  br label %10

; <label>:10                                      ; preds = %103, %9
  %r.0 = phi i32 [ 0, %9 ], [ %104, %103 ]
  %tile.1 = phi i32 [ %tile.0, %9 ], [ %tile.2, %103 ]
  %11 = load i16* @raw_height, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp ult i32 %r.0, %12
  br i1 %13, label %14, label %105

; <label>:14                                      ; preds = %10
  %15 = load i32* @tile_length, align 4
  %16 = urem i32 %r.0, %15
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %34

; <label>:18                                      ; preds = %14
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = load i64* @data_offset, align 8
  %21 = add i32 %tile.1, 1
  %22 = mul i32 4, %tile.1
  %23 = zext i32 %22 to i64
  %24 = add nsw i64 %20, %23
  %25 = call i32 @fseek(%struct._IO_FILE* %19, i64 %24, i32 0)
  %26 = load %struct._IO_FILE** @ifp, align 8
  %27 = call i32 @get4()
  %28 = load i16* @left_margin, align 2
  %29 = zext i16 %28 to i32
  %30 = mul nsw i32 2, %29
  %31 = add i32 %27, %30
  %32 = zext i32 %31 to i64
  %33 = call i32 @fseek(%struct._IO_FILE* %26, i64 %32, i32 0)
  br label %34

; <label>:34                                      ; preds = %18, %14
  %tile.2 = phi i32 [ %21, %18 ], [ %tile.1, %14 ]
  %35 = load i32* @filters, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %41

; <label>:37                                      ; preds = %34
  %38 = load i32* @shot_select, align 4
  %39 = icmp ne i32 %c.0, %38
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %37
  br label %103

; <label>:41                                      ; preds = %37, %34
  %42 = load i16* @raw_width, align 2
  %43 = zext i16 %42 to i32
  call void @read_shorts(i16* %4, i32 %43)
  %44 = load i16* @top_margin, align 2
  %45 = zext i16 %44 to i32
  %46 = sub i32 %r.0, %45
  %47 = load i16* @height, align 2
  %48 = zext i16 %47 to i32
  %49 = icmp uge i32 %46, %48
  br i1 %49, label %50, label %51

; <label>:50                                      ; preds = %41
  br label %103

; <label>:51                                      ; preds = %41
  br label %52

; <label>:52                                      ; preds = %100, %51
  %col.0 = phi i32 [ 0, %51 ], [ %101, %100 ]
  %53 = load i16* @width, align 2
  %54 = zext i16 %53 to i32
  %55 = icmp ult i32 %col.0, %54
  br i1 %55, label %56, label %102

; <label>:56                                      ; preds = %52
  %57 = load i32* @filters, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %86

; <label>:59                                      ; preds = %56
  %60 = zext i32 %col.0 to i64
  %61 = getelementptr inbounds i16* %4, i64 %60
  %62 = load i16* %61, align 2
  %63 = load i32* @filters, align 4
  %64 = shl i32 %46, 1
  %65 = and i32 %64, 14
  %66 = and i32 %col.0, 1
  %67 = add i32 %65, %66
  %68 = shl i32 %67, 1
  %69 = lshr i32 %63, %68
  %70 = and i32 %69, 3
  %71 = zext i32 %70 to i64
  %72 = load i16* @shrink, align 2
  %73 = zext i16 %72 to i32
  %74 = lshr i32 %46, %73
  %75 = load i16* @iwidth, align 2
  %76 = zext i16 %75 to i32
  %77 = mul i32 %74, %76
  %78 = load i16* @shrink, align 2
  %79 = zext i16 %78 to i32
  %80 = lshr i32 %col.0, %79
  %81 = add i32 %77, %80
  %82 = zext i32 %81 to i64
  %83 = load [4 x i16]** @image, align 8
  %84 = getelementptr inbounds [4 x i16]* %83, i64 %82
  %85 = getelementptr inbounds [4 x i16]* %84, i32 0, i64 %71
  store i16 %62, i16* %85, align 2
  br label %99

; <label>:86                                      ; preds = %56
  %87 = zext i32 %col.0 to i64
  %88 = getelementptr inbounds i16* %4, i64 %87
  %89 = load i16* %88, align 2
  %90 = zext i32 %c.0 to i64
  %91 = load i16* @width, align 2
  %92 = zext i16 %91 to i32
  %93 = mul i32 %46, %92
  %94 = add i32 %93, %col.0
  %95 = zext i32 %94 to i64
  %96 = load [4 x i16]** @image, align 8
  %97 = getelementptr inbounds [4 x i16]* %96, i64 %95
  %98 = getelementptr inbounds [4 x i16]* %97, i32 0, i64 %90
  store i16 %89, i16* %98, align 2
  br label %99

; <label>:99                                      ; preds = %86, %59
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add i32 %col.0, 1
  br label %52

; <label>:102                                     ; preds = %52
  br label %103

; <label>:103                                     ; preds = %102, %50, %40
  %104 = add i32 %r.0, 1
  br label %10

; <label>:105                                     ; preds = %10
  br label %106

; <label>:106                                     ; preds = %105
  %107 = add i32 %c.0, 1
  br label %6

; <label>:108                                     ; preds = %6
  %109 = bitcast i16* %4 to i8*
  call void @free(i8* %109) #4
  %110 = load i32* @filters, align 4
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %113, label %112

; <label>:112                                     ; preds = %108
  store i32 65535, i32* @maximum, align 4
  store i32 1, i32* @raw_color, align 4
  br label %113

; <label>:113                                     ; preds = %112, %108
  ret void
}

; Function Attrs: nounwind uwtable
define void @sinar_4shot_load_raw() #0 {
  %1 = load i32* @shot_select, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = load i32* @half_size, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %24

; <label>:6                                       ; preds = %3, %0
  %7 = icmp ne i32 %1, 0
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %6
  %9 = add i32 %1, -1
  br label %10

; <label>:10                                      ; preds = %8, %6
  %shot.0 = phi i32 [ %9, %8 ], [ %1, %6 ]
  %11 = icmp ugt i32 %shot.0, 3
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %10
  br label %13

; <label>:13                                      ; preds = %12, %10
  %shot.1 = phi i32 [ 3, %12 ], [ %shot.0, %10 ]
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = load i64* @data_offset, align 8
  %16 = mul i32 %shot.1, 4
  %17 = zext i32 %16 to i64
  %18 = add nsw i64 %15, %17
  %19 = call i32 @fseek(%struct._IO_FILE* %14, i64 %18, i32 0)
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i32 @get4()
  %22 = zext i32 %21 to i64
  %23 = call i32 @fseek(%struct._IO_FILE* %20, i64 %22, i32 0)
  call void @unpacked_load_raw()
  br label %118

; <label>:24                                      ; preds = %3
  %25 = load [4 x i16]** @image, align 8
  %26 = bitcast [4 x i16]* %25 to i8*
  call void @free(i8* %26) #4
  %27 = load i16* @height, align 2
  store i16 %27, i16* @iheight, align 2
  %28 = zext i16 %27 to i32
  %29 = load i16* @width, align 2
  store i16 %29, i16* @iwidth, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nsw i32 %28, %30
  %32 = sext i32 %31 to i64
  %33 = call noalias i8* @calloc(i64 %32, i64 8) #4
  %34 = bitcast i8* %33 to [4 x i16]*
  store [4 x i16]* %34, [4 x i16]** @image, align 8
  %35 = load [4 x i16]** @image, align 8
  %36 = bitcast [4 x i16]* %35 to i8*
  call void @merror(i8* %36, i8* getelementptr inbounds ([23 x i8]* @.str22, i32 0, i32 0))
  %37 = load i16* @raw_width, align 2
  %38 = zext i16 %37 to i64
  %39 = call noalias i8* @calloc(i64 %38, i64 2) #4
  %40 = bitcast i8* %39 to i16*
  %41 = bitcast i16* %40 to i8*
  call void @merror(i8* %41, i8* getelementptr inbounds ([23 x i8]* @.str22, i32 0, i32 0))
  br label %42

; <label>:42                                      ; preds = %114, %24
  %shot.2 = phi i32 [ 0, %24 ], [ %115, %114 ]
  %43 = icmp ult i32 %shot.2, 4
  br i1 %43, label %44, label %116

; <label>:44                                      ; preds = %42
  %45 = load %struct._IO_FILE** @ifp, align 8
  %46 = load i64* @data_offset, align 8
  %47 = mul i32 %shot.2, 4
  %48 = zext i32 %47 to i64
  %49 = add nsw i64 %46, %48
  %50 = call i32 @fseek(%struct._IO_FILE* %45, i64 %49, i32 0)
  %51 = load %struct._IO_FILE** @ifp, align 8
  %52 = call i32 @get4()
  %53 = zext i32 %52 to i64
  %54 = call i32 @fseek(%struct._IO_FILE* %51, i64 %53, i32 0)
  br label %55

; <label>:55                                      ; preds = %111, %44
  %row.0 = phi i32 [ 0, %44 ], [ %112, %111 ]
  %56 = load i16* @raw_height, align 2
  %57 = zext i16 %56 to i32
  %58 = icmp ult i32 %row.0, %57
  br i1 %58, label %59, label %113

; <label>:59                                      ; preds = %55
  %60 = load i16* @raw_width, align 2
  %61 = zext i16 %60 to i32
  call void @read_shorts(i16* %40, i32 %61)
  %62 = load i16* @top_margin, align 2
  %63 = zext i16 %62 to i32
  %64 = sub i32 %row.0, %63
  %65 = lshr i32 %shot.2, 1
  %66 = and i32 %65, 1
  %67 = sub i32 %64, %66
  %68 = load i16* @height, align 2
  %69 = zext i16 %68 to i32
  %70 = icmp uge i32 %67, %69
  br i1 %70, label %71, label %72

; <label>:71                                      ; preds = %59
  br label %111

; <label>:72                                      ; preds = %59
  br label %73

; <label>:73                                      ; preds = %108, %72
  %col.0 = phi i32 [ 0, %72 ], [ %109, %108 ]
  %74 = load i16* @raw_width, align 2
  %75 = zext i16 %74 to i32
  %76 = icmp ult i32 %col.0, %75
  br i1 %76, label %77, label %110

; <label>:77                                      ; preds = %73
  %78 = load i16* @left_margin, align 2
  %79 = zext i16 %78 to i32
  %80 = sub i32 %col.0, %79
  %81 = and i32 %shot.2, 1
  %82 = sub i32 %80, %81
  %83 = load i16* @width, align 2
  %84 = zext i16 %83 to i32
  %85 = icmp uge i32 %82, %84
  br i1 %85, label %86, label %87

; <label>:86                                      ; preds = %77
  br label %108

; <label>:87                                      ; preds = %77
  %88 = zext i32 %col.0 to i64
  %89 = getelementptr inbounds i16* %40, i64 %88
  %90 = load i16* %89, align 2
  %91 = load i32* @filters, align 4
  %92 = shl i32 %row.0, 1
  %93 = and i32 %92, 14
  %94 = and i32 %col.0, 1
  %95 = add i32 %93, %94
  %96 = shl i32 %95, 1
  %97 = lshr i32 %91, %96
  %98 = and i32 %97, 3
  %99 = zext i32 %98 to i64
  %100 = load i16* @width, align 2
  %101 = zext i16 %100 to i32
  %102 = mul i32 %67, %101
  %103 = add i32 %102, %82
  %104 = zext i32 %103 to i64
  %105 = load [4 x i16]** @image, align 8
  %106 = getelementptr inbounds [4 x i16]* %105, i64 %104
  %107 = getelementptr inbounds [4 x i16]* %106, i32 0, i64 %99
  store i16 %90, i16* %107, align 2
  br label %108

; <label>:108                                     ; preds = %87, %86
  %109 = add i32 %col.0, 1
  br label %73

; <label>:110                                     ; preds = %73
  br label %111

; <label>:111                                     ; preds = %110, %71
  %112 = add i32 %row.0, 1
  br label %55

; <label>:113                                     ; preds = %55
  br label %114

; <label>:114                                     ; preds = %113
  %115 = add i32 %shot.2, 1
  br label %42

; <label>:116                                     ; preds = %42
  %117 = bitcast i16* %40 to i8*
  call void @free(i8* %117) #4
  store i32 0, i32* @filters, align 4
  store i16 0, i16* @shrink, align 2
  br label %118

; <label>:118                                     ; preds = %116, %13
  ret void
}

; Function Attrs: nounwind uwtable
define void @imacon_full_load_raw() #0 {
  br label %1

; <label>:1                                       ; preds = %22, %0
  %row.0 = phi i32 [ 0, %0 ], [ %23, %22 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %row.0, %3
  br i1 %4, label %5, label %24

; <label>:5                                       ; preds = %1
  br label %6

; <label>:6                                       ; preds = %19, %5
  %col.0 = phi i32 [ 0, %5 ], [ %20, %19 ]
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %col.0, %8
  br i1 %9, label %10, label %21

; <label>:10                                      ; preds = %6
  %11 = load i16* @width, align 2
  %12 = zext i16 %11 to i32
  %13 = mul nsw i32 %row.0, %12
  %14 = add nsw i32 %13, %col.0
  %15 = sext i32 %14 to i64
  %16 = load [4 x i16]** @image, align 8
  %17 = getelementptr inbounds [4 x i16]* %16, i64 %15
  %18 = getelementptr inbounds [4 x i16]* %17, i32 0, i32 0
  call void @read_shorts(i16* %18, i32 3)
  br label %19

; <label>:19                                      ; preds = %10
  %20 = add nsw i32 %col.0, 1
  br label %6

; <label>:21                                      ; preds = %6
  br label %22

; <label>:22                                      ; preds = %21
  %23 = add nsw i32 %row.0, 1
  br label %1

; <label>:24                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @packed_12_load_raw() #0 {
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = mul nsw i32 %2, 2
  %4 = load i16* @width, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %5, 3
  %7 = icmp sge i32 %3, %6
  br i1 %7, label %8, label %21

; <label>:8                                       ; preds = %0
  %9 = load i16* @raw_width, align 2
  %10 = zext i16 %9 to i32
  %11 = mul nsw i32 %10, 8
  %12 = load i16* @raw_width, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nsw i32 %13, 2
  %15 = sdiv i32 %14, 3
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* @raw_width, align 2
  %17 = load i16* @raw_width, align 2
  %18 = zext i16 %17 to i32
  %19 = mul nsw i32 %18, 12
  %20 = sub nsw i32 %11, %19
  br label %21

; <label>:21                                      ; preds = %8, %0
  %rbits.0 = phi i32 [ %20, %8 ], [ 0, %0 ]
  %22 = load i32* @load_flags, align 4
  %23 = and i32 %22, 1
  %24 = icmp ne i32 %23, 0
  %25 = select i1 %24, i32 18761, i32 19789
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* @order, align 2
  br label %27

; <label>:27                                      ; preds = %150, %21
  %bitbuf.0 = phi i64 [ 0, %21 ], [ %bitbuf.1, %150 ]
  %irow.0 = phi i32 [ 0, %21 ], [ %151, %150 ]
  %vbits.0 = phi i32 [ 0, %21 ], [ %149, %150 ]
  %28 = load i16* @height, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %irow.0, %29
  br i1 %30, label %31, label %152

; <label>:31                                      ; preds = %27
  %32 = load i32* @load_flags, align 4
  %33 = and i32 %32, 2
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %77

; <label>:35                                      ; preds = %31
  %36 = mul nsw i32 %irow.0, 2
  %37 = load i16* @height, align 2
  %38 = zext i16 %37 to i32
  %39 = srem i32 %36, %38
  %40 = load i16* @height, align 2
  %41 = zext i16 %40 to i32
  %42 = sdiv i32 %41, 2
  %43 = sdiv i32 %irow.0, %42
  %44 = add nsw i32 %39, %43
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %77

; <label>:46                                      ; preds = %35
  %47 = load i32* @load_flags, align 4
  %48 = and i32 %47, 4
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %77

; <label>:50                                      ; preds = %46
  %51 = load i32* @tiff_compress, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %68

; <label>:53                                      ; preds = %50
  %54 = load %struct._IO_FILE** @ifp, align 8
  %55 = load i64* @data_offset, align 8
  %56 = load i16* @width, align 2
  %57 = zext i16 %56 to i32
  %58 = sub nsw i32 0, %57
  %59 = load i16* @height, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nsw i32 %58, %60
  %62 = mul nsw i32 %61, 3
  %63 = sdiv i32 %62, 4
  %64 = and i32 %63, -2048
  %65 = sext i32 %64 to i64
  %66 = sub nsw i64 %55, %65
  %67 = call i32 @fseek(%struct._IO_FILE* %54, i64 %66, i32 0)
  br label %76

; <label>:68                                      ; preds = %50
  %69 = load %struct._IO_FILE** @ifp, align 8
  %70 = call i32 @fseek(%struct._IO_FILE* %69, i64 0, i32 2)
  %71 = load %struct._IO_FILE** @ifp, align 8
  %72 = load %struct._IO_FILE** @ifp, align 8
  %73 = call i64 @ftell(%struct._IO_FILE* %72)
  %74 = sdiv i64 %73, 2
  %75 = call i32 @fseek(%struct._IO_FILE* %71, i64 %74, i32 0)
  br label %76

; <label>:76                                      ; preds = %68, %53
  br label %77

; <label>:77                                      ; preds = %76, %46, %35, %31
  %row.0 = phi i32 [ %44, %76 ], [ %44, %46 ], [ %44, %35 ], [ %irow.0, %31 ]
  %vbits.1 = phi i32 [ 0, %76 ], [ %vbits.0, %46 ], [ %vbits.0, %35 ], [ %vbits.0, %31 ]
  br label %78

; <label>:78                                      ; preds = %146, %77
  %bitbuf.1 = phi i64 [ %bitbuf.0, %77 ], [ %bitbuf.2, %146 ]
  %col.0 = phi i32 [ 0, %77 ], [ %147, %146 ]
  %vbits.2 = phi i32 [ %vbits.1, %77 ], [ %vbits.4, %146 ]
  %79 = load i16* @raw_width, align 2
  %80 = zext i16 %79 to i32
  %81 = icmp slt i32 %col.0, %80
  br i1 %81, label %82, label %148

; <label>:82                                      ; preds = %78
  %83 = sub nsw i32 %vbits.2, 12
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %85, label %91

; <label>:85                                      ; preds = %82
  %86 = shl i64 %bitbuf.1, 32
  %87 = call i32 @get4()
  %88 = zext i32 %87 to i64
  %89 = or i64 %86, %88
  %90 = add nsw i32 %83, 32
  br label %91

; <label>:91                                      ; preds = %85, %82
  %bitbuf.2 = phi i64 [ %89, %85 ], [ %bitbuf.1, %82 ]
  %vbits.3 = phi i32 [ %90, %85 ], [ %83, %82 ]
  %92 = load i16* @left_margin, align 2
  %93 = zext i16 %92 to i32
  %94 = sub nsw i32 %col.0, %93
  %95 = load i16* @width, align 2
  %96 = zext i16 %95 to i32
  %97 = icmp ult i32 %94, %96
  br i1 %97, label %98, label %133

; <label>:98                                      ; preds = %91
  %99 = sub nsw i32 52, %vbits.3
  %100 = zext i32 %99 to i64
  %101 = shl i64 %bitbuf.2, %100
  %102 = lshr i64 %101, 52
  %103 = trunc i64 %102 to i16
  %104 = load i32* @filters, align 4
  %105 = shl i32 %row.0, 1
  %106 = and i32 %105, 14
  %107 = load i16* @left_margin, align 2
  %108 = zext i16 %107 to i32
  %109 = sub nsw i32 %col.0, %108
  %110 = and i32 %109, 1
  %111 = add nsw i32 %106, %110
  %112 = shl i32 %111, 1
  %113 = lshr i32 %104, %112
  %114 = and i32 %113, 3
  %115 = zext i32 %114 to i64
  %116 = load i16* @shrink, align 2
  %117 = zext i16 %116 to i32
  %118 = ashr i32 %row.0, %117
  %119 = load i16* @iwidth, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nsw i32 %118, %120
  %122 = load i16* @left_margin, align 2
  %123 = zext i16 %122 to i32
  %124 = sub nsw i32 %col.0, %123
  %125 = load i16* @shrink, align 2
  %126 = zext i16 %125 to i32
  %127 = ashr i32 %124, %126
  %128 = add nsw i32 %121, %127
  %129 = sext i32 %128 to i64
  %130 = load [4 x i16]** @image, align 8
  %131 = getelementptr inbounds [4 x i16]* %130, i64 %129
  %132 = getelementptr inbounds [4 x i16]* %131, i32 0, i64 %115
  store i16 %103, i16* %132, align 2
  br label %133

; <label>:133                                     ; preds = %98, %91
  %134 = load i32* @load_flags, align 4
  %135 = and i32 %134, 8
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %145

; <label>:137                                     ; preds = %133
  %138 = srem i32 %col.0, 10
  %139 = icmp eq i32 %138, 9
  br i1 %139, label %140, label %145

; <label>:140                                     ; preds = %137
  %141 = and i64 %bitbuf.2, 255
  %142 = icmp ne i64 %141, 0
  br i1 %142, label %143, label %144

; <label>:143                                     ; preds = %140
  call void @derror()
  br label %144

; <label>:144                                     ; preds = %143, %140
  br label %145

; <label>:145                                     ; preds = %144, %137, %133
  %vbits.4 = phi i32 [ 0, %144 ], [ %vbits.3, %137 ], [ %vbits.3, %133 ]
  br label %146

; <label>:146                                     ; preds = %145
  %147 = add nsw i32 %col.0, 1
  br label %78

; <label>:148                                     ; preds = %78
  %149 = sub nsw i32 %vbits.2, %rbits.0
  br label %150

; <label>:150                                     ; preds = %148
  %151 = add nsw i32 %irow.0, 1
  br label %27

; <label>:152                                     ; preds = %27
  %153 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0)) #10
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %158, label %155

; <label>:155                                     ; preds = %152
  %156 = load i32* @black, align 4
  %157 = lshr i32 %156, 4
  store i32 %157, i32* @black, align 4
  br label %158

; <label>:158                                     ; preds = %155, %152
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define void @unpacked_load_raw() #0 {
  br label %1

; <label>:1                                       ; preds = %6, %0
  %bits.0 = phi i32 [ 0, %0 ], [ %2, %6 ]
  %2 = add nsw i32 %bits.0, 1
  %3 = shl i32 1, %2
  %4 = load i32* @maximum, align 4
  %5 = icmp ult i32 %3, %4
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  br label %1

; <label>:7                                       ; preds = %1
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = load i16* @top_margin, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16* @raw_width, align 2
  %12 = zext i16 %11 to i32
  %13 = mul nsw i32 %10, %12
  %14 = load i16* @left_margin, align 2
  %15 = zext i16 %14 to i32
  %16 = add nsw i32 %13, %15
  %17 = mul nsw i32 %16, 2
  %18 = sext i32 %17 to i64
  %19 = call i32 @fseek(%struct._IO_FILE* %8, i64 %18, i32 1)
  %20 = load i16* @width, align 2
  %21 = zext i16 %20 to i64
  %22 = call noalias i8* @calloc(i64 %21, i64 2) #4
  %23 = bitcast i8* %22 to i16*
  %24 = bitcast i16* %23 to i8*
  call void @merror(i8* %24, i8* getelementptr inbounds ([20 x i8]* @.str24, i32 0, i32 0))
  br label %25

; <label>:25                                      ; preds = %73, %7
  %row.0 = phi i32 [ 0, %7 ], [ %74, %73 ]
  %26 = load i16* @height, align 2
  %27 = zext i16 %26 to i32
  %28 = icmp slt i32 %row.0, %27
  br i1 %28, label %29, label %75

; <label>:29                                      ; preds = %25
  %30 = load i16* @width, align 2
  %31 = zext i16 %30 to i32
  call void @read_shorts(i16* %23, i32 %31)
  %32 = load %struct._IO_FILE** @ifp, align 8
  %33 = load i16* @raw_width, align 2
  %34 = zext i16 %33 to i32
  %35 = load i16* @width, align 2
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 %34, %36
  %38 = mul nsw i32 2, %37
  %39 = sext i32 %38 to i64
  %40 = call i32 @fseek(%struct._IO_FILE* %32, i64 %39, i32 1)
  br label %41

; <label>:41                                      ; preds = %70, %29
  %col.0 = phi i32 [ 0, %29 ], [ %71, %70 ]
  %42 = load i16* @width, align 2
  %43 = zext i16 %42 to i32
  %44 = icmp slt i32 %col.0, %43
  br i1 %44, label %45, label %72

; <label>:45                                      ; preds = %41
  %46 = sext i32 %col.0 to i64
  %47 = getelementptr inbounds i16* %23, i64 %46
  %48 = load i16* %47, align 2
  %49 = call i32 @fc(i32 %row.0, i32 %col.0)
  %50 = sext i32 %49 to i64
  %51 = load i16* @shrink, align 2
  %52 = zext i16 %51 to i32
  %53 = ashr i32 %row.0, %52
  %54 = load i16* @iwidth, align 2
  %55 = zext i16 %54 to i32
  %56 = mul nsw i32 %53, %55
  %57 = load i16* @shrink, align 2
  %58 = zext i16 %57 to i32
  %59 = ashr i32 %col.0, %58
  %60 = add nsw i32 %56, %59
  %61 = sext i32 %60 to i64
  %62 = load [4 x i16]** @image, align 8
  %63 = getelementptr inbounds [4 x i16]* %62, i64 %61
  %64 = getelementptr inbounds [4 x i16]* %63, i32 0, i64 %50
  store i16 %48, i16* %64, align 2
  %65 = zext i16 %48 to i32
  %66 = ashr i32 %65, %2
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %69

; <label>:68                                      ; preds = %45
  call void @derror()
  br label %69

; <label>:69                                      ; preds = %68, %45
  br label %70

; <label>:70                                      ; preds = %69
  %71 = add nsw i32 %col.0, 1
  br label %41

; <label>:72                                      ; preds = %41
  br label %73

; <label>:73                                      ; preds = %72
  %74 = add nsw i32 %row.0, 1
  br label %25

; <label>:75                                      ; preds = %25
  %76 = bitcast i16* %23 to i8*
  call void @free(i8* %76) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @nokia_load_raw() #0 {
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = mul nsw i32 %2, 5
  %4 = sdiv i32 %3, 4
  %5 = load i16* @raw_width, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nsw i32 %6, 2
  %8 = add nsw i32 %4, %7
  %9 = sext i32 %8 to i64
  %10 = call noalias i8* @malloc(i64 %9) #4
  call void @merror(i8* %10, i8* getelementptr inbounds ([17 x i8]* @.str25, i32 0, i32 0))
  %11 = sext i32 %4 to i64
  %12 = getelementptr inbounds i8* %10, i64 %11
  %13 = bitcast i8* %12 to i16*
  br label %14

; <label>:14                                      ; preds = %118, %0
  %row.0 = phi i32 [ 0, %0 ], [ %119, %118 ]
  %15 = load i16* @raw_height, align 2
  %16 = zext i16 %15 to i32
  %17 = icmp slt i32 %row.0, %16
  br i1 %17, label %18, label %120

; <label>:18                                      ; preds = %14
  %19 = sext i32 %4 to i64
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i64 @fread(i8* %10, i64 1, i64 %19, %struct._IO_FILE* %20)
  %22 = sext i32 %4 to i64
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %18
  call void @derror()
  br label %25

; <label>:25                                      ; preds = %24, %18
  br label %26

; <label>:26                                      ; preds = %54, %25
  %pix.0 = phi i16* [ %13, %25 ], [ %56, %54 ]
  %dp.0 = phi i8* [ %10, %25 ], [ %55, %54 ]
  %27 = load i16* @raw_width, align 2
  %28 = zext i16 %27 to i32
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i16* %13, i64 %29
  %31 = icmp ult i16* %pix.0, %30
  br i1 %31, label %32, label %57

; <label>:32                                      ; preds = %26
  br label %33

; <label>:33                                      ; preds = %51, %32
  %c.0 = phi i32 [ 0, %32 ], [ %52, %51 ]
  %34 = icmp slt i32 %c.0, 4
  br i1 %34, label %35, label %53

; <label>:35                                      ; preds = %33
  %36 = sext i32 %c.0 to i64
  %37 = getelementptr inbounds i8* %dp.0, i64 %36
  %38 = load i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = shl i32 %39, 2
  %41 = getelementptr inbounds i8* %dp.0, i64 4
  %42 = load i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl i32 %c.0, 1
  %45 = ashr i32 %43, %44
  %46 = and i32 %45, 3
  %47 = or i32 %40, %46
  %48 = trunc i32 %47 to i16
  %49 = sext i32 %c.0 to i64
  %50 = getelementptr inbounds i16* %pix.0, i64 %49
  store i16 %48, i16* %50, align 2
  br label %51

; <label>:51                                      ; preds = %35
  %52 = add nsw i32 %c.0, 1
  br label %33

; <label>:53                                      ; preds = %33
  br label %54

; <label>:54                                      ; preds = %53
  %55 = getelementptr inbounds i8* %dp.0, i64 5
  %56 = getelementptr inbounds i16* %pix.0, i64 4
  br label %26

; <label>:57                                      ; preds = %26
  %58 = load i16* @top_margin, align 2
  %59 = zext i16 %58 to i32
  %60 = icmp slt i32 %row.0, %59
  br i1 %60, label %61, label %76

; <label>:61                                      ; preds = %57
  br label %62

; <label>:62                                      ; preds = %73, %61
  %c.1 = phi i32 [ 0, %61 ], [ %74, %73 ]
  %63 = load i16* @width, align 2
  %64 = zext i16 %63 to i32
  %65 = icmp slt i32 %c.1, %64
  br i1 %65, label %66, label %75

; <label>:66                                      ; preds = %62
  %67 = sext i32 %c.1 to i64
  %68 = getelementptr inbounds i16* %13, i64 %67
  %69 = load i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = load i32* @black, align 4
  %72 = add i32 %71, %70
  store i32 %72, i32* @black, align 4
  br label %73

; <label>:73                                      ; preds = %66
  %74 = add nsw i32 %c.1, 1
  br label %62

; <label>:75                                      ; preds = %62
  br label %117

; <label>:76                                      ; preds = %57
  br label %77

; <label>:77                                      ; preds = %114, %76
  %c.2 = phi i32 [ 0, %76 ], [ %115, %114 ]
  %78 = load i16* @width, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp slt i32 %c.2, %79
  br i1 %80, label %81, label %116

; <label>:81                                      ; preds = %77
  %82 = sext i32 %c.2 to i64
  %83 = getelementptr inbounds i16* %13, i64 %82
  %84 = load i16* %83, align 2
  %85 = load i32* @filters, align 4
  %86 = load i16* @top_margin, align 2
  %87 = zext i16 %86 to i32
  %88 = sub nsw i32 %row.0, %87
  %89 = shl i32 %88, 1
  %90 = and i32 %89, 14
  %91 = and i32 %c.2, 1
  %92 = add nsw i32 %90, %91
  %93 = shl i32 %92, 1
  %94 = lshr i32 %85, %93
  %95 = and i32 %94, 3
  %96 = zext i32 %95 to i64
  %97 = load i16* @top_margin, align 2
  %98 = zext i16 %97 to i32
  %99 = sub nsw i32 %row.0, %98
  %100 = load i16* @shrink, align 2
  %101 = zext i16 %100 to i32
  %102 = ashr i32 %99, %101
  %103 = load i16* @iwidth, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nsw i32 %102, %104
  %106 = load i16* @shrink, align 2
  %107 = zext i16 %106 to i32
  %108 = ashr i32 %c.2, %107
  %109 = add nsw i32 %105, %108
  %110 = sext i32 %109 to i64
  %111 = load [4 x i16]** @image, align 8
  %112 = getelementptr inbounds [4 x i16]* %111, i64 %110
  %113 = getelementptr inbounds [4 x i16]* %112, i32 0, i64 %96
  store i16 %84, i16* %113, align 2
  br label %114

; <label>:114                                     ; preds = %81
  %115 = add nsw i32 %c.2, 1
  br label %77

; <label>:116                                     ; preds = %77
  br label %117

; <label>:117                                     ; preds = %116, %75
  br label %118

; <label>:118                                     ; preds = %117
  %119 = add nsw i32 %row.0, 1
  br label %14

; <label>:120                                     ; preds = %14
  call void @free(i8* %10) #4
  %121 = load i16* @top_margin, align 2
  %122 = icmp ne i16 %121, 0
  br i1 %122, label %123, label %131

; <label>:123                                     ; preds = %120
  %124 = load i16* @top_margin, align 2
  %125 = zext i16 %124 to i32
  %126 = load i16* @width, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nsw i32 %125, %127
  %129 = load i32* @black, align 4
  %130 = udiv i32 %129, %128
  store i32 %130, i32* @black, align 4
  br label %131

; <label>:131                                     ; preds = %123, %120
  store i32 1023, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @pana_bits(i32 %nbits) #0 {
  %1 = icmp ne i32 %nbits, 0
  br i1 %1, label %3, label %2

; <label>:2                                       ; preds = %0
  store i32 0, i32* @pana_bits.vbits, align 4
  br label %43

; <label>:3                                       ; preds = %0
  %4 = load i32* @pana_bits.vbits, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %19, label %6

; <label>:6                                       ; preds = %3
  %7 = load i32* @load_flags, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8* getelementptr inbounds ([16384 x i8]* @pana_bits.buf, i32 0, i32 0), i64 %8
  %10 = load i32* @load_flags, align 4
  %11 = sub i32 16384, %10
  %12 = zext i32 %11 to i64
  %13 = load %struct._IO_FILE** @ifp, align 8
  %14 = call i64 @fread(i8* %9, i64 1, i64 %12, %struct._IO_FILE* %13)
  %15 = load i32* @load_flags, align 4
  %16 = zext i32 %15 to i64
  %17 = load %struct._IO_FILE** @ifp, align 8
  %18 = call i64 @fread(i8* getelementptr inbounds ([16384 x i8]* @pana_bits.buf, i32 0, i32 0), i64 1, i64 %16, %struct._IO_FILE* %17)
  br label %19

; <label>:19                                      ; preds = %6, %3
  %20 = load i32* @pana_bits.vbits, align 4
  %21 = sub nsw i32 %20, %nbits
  %22 = and i32 %21, 131071
  store i32 %22, i32* @pana_bits.vbits, align 4
  %23 = load i32* @pana_bits.vbits, align 4
  %24 = ashr i32 %23, 3
  %25 = xor i32 %24, 16368
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [16384 x i8]* @pana_bits.buf, i32 0, i64 %26
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nsw i32 %25, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [16384 x i8]* @pana_bits.buf, i32 0, i64 %31
  %33 = load i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl i32 %34, 8
  %36 = or i32 %29, %35
  %37 = load i32* @pana_bits.vbits, align 4
  %38 = and i32 %37, 7
  %39 = ashr i32 %36, %38
  %40 = shl i32 -1, %nbits
  %41 = xor i32 %40, -1
  %42 = and i32 %39, %41
  br label %43

; <label>:43                                      ; preds = %19, %2
  %.0 = phi i32 [ %42, %19 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @panasonic_load_raw() #0 {
  %pred = alloca [2 x i32], align 4
  %nonz = alloca [2 x i32], align 4
  %1 = call i32 @pana_bits(i32 0)
  br label %2

; <label>:2                                       ; preds = %122, %0
  %sh.0 = phi i32 [ 0, %0 ], [ %sh.1, %122 ]
  %row.0 = phi i32 [ 0, %0 ], [ %123, %122 ]
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %row.0, %4
  br i1 %5, label %6, label %124

; <label>:6                                       ; preds = %2
  br label %7

; <label>:7                                       ; preds = %119, %6
  %sh.1 = phi i32 [ %sh.0, %6 ], [ %sh.2, %119 ]
  %col.0 = phi i32 [ 0, %6 ], [ %120, %119 ]
  %8 = load i16* @raw_width, align 2
  %9 = zext i16 %8 to i32
  %10 = icmp slt i32 %col.0, %9
  br i1 %10, label %11, label %121

; <label>:11                                      ; preds = %7
  %12 = srem i32 %col.0, 14
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

; <label>:14                                      ; preds = %11
  %15 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 1
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 0
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 0, i32* %18, align 4
  br label %19

; <label>:19                                      ; preds = %14, %11
  %20 = srem i32 %12, 3
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %26

; <label>:22                                      ; preds = %19
  %23 = call i32 @pana_bits(i32 2)
  %24 = sub i32 3, %23
  %25 = ashr i32 4, %24
  br label %26

; <label>:26                                      ; preds = %22, %19
  %sh.2 = phi i32 [ %25, %22 ], [ %sh.1, %19 ]
  %27 = and i32 %12, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 %28
  %30 = load i32* %29, align 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %61

; <label>:32                                      ; preds = %26
  %33 = call i32 @pana_bits(i32 8)
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %60

; <label>:35                                      ; preds = %32
  %36 = shl i32 128, %sh.2
  %37 = and i32 %12, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %38
  %40 = load i32* %39, align 4
  %41 = sub nsw i32 %40, %36
  store i32 %41, i32* %39, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %45, label %43

; <label>:43                                      ; preds = %35
  %44 = icmp eq i32 %sh.2, 4
  br i1 %44, label %45, label %53

; <label>:45                                      ; preds = %43, %35
  %46 = shl i32 -1, %sh.2
  %47 = xor i32 %46, -1
  %48 = and i32 %12, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %49
  %51 = load i32* %50, align 4
  %52 = and i32 %51, %47
  store i32 %52, i32* %50, align 4
  br label %53

; <label>:53                                      ; preds = %45, %43
  %54 = shl i32 %33, %sh.2
  %55 = and i32 %12, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %56
  %58 = load i32* %57, align 4
  %59 = add nsw i32 %58, %54
  store i32 %59, i32* %57, align 4
  br label %60

; <label>:60                                      ; preds = %53, %32
  br label %81

; <label>:61                                      ; preds = %26
  %62 = call i32 @pana_bits(i32 8)
  %63 = and i32 %12, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 %64
  store i32 %62, i32* %65, align 4
  %66 = icmp ne i32 %62, 0
  br i1 %66, label %69, label %67

; <label>:67                                      ; preds = %61
  %68 = icmp sgt i32 %12, 11
  br i1 %68, label %69, label %80

; <label>:69                                      ; preds = %67, %61
  %70 = and i32 %12, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 %71
  %73 = load i32* %72, align 4
  %74 = shl i32 %73, 4
  %75 = call i32 @pana_bits(i32 4)
  %76 = or i32 %74, %75
  %77 = and i32 %12, 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %78
  store i32 %76, i32* %79, align 4
  br label %80

; <label>:80                                      ; preds = %69, %67
  br label %81

; <label>:81                                      ; preds = %80, %60
  %82 = load i16* @width, align 2
  %83 = zext i16 %82 to i32
  %84 = icmp slt i32 %col.0, %83
  br i1 %84, label %85, label %118

; <label>:85                                      ; preds = %81
  %86 = and i32 %col.0, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %87
  %89 = load i32* %88, align 4
  %90 = trunc i32 %89 to i16
  %91 = load i32* @filters, align 4
  %92 = shl i32 %row.0, 1
  %93 = and i32 %92, 14
  %94 = and i32 %col.0, 1
  %95 = add nsw i32 %93, %94
  %96 = shl i32 %95, 1
  %97 = lshr i32 %91, %96
  %98 = and i32 %97, 3
  %99 = zext i32 %98 to i64
  %100 = load i16* @shrink, align 2
  %101 = zext i16 %100 to i32
  %102 = ashr i32 %row.0, %101
  %103 = load i16* @iwidth, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nsw i32 %102, %104
  %106 = load i16* @shrink, align 2
  %107 = zext i16 %106 to i32
  %108 = ashr i32 %col.0, %107
  %109 = add nsw i32 %105, %108
  %110 = sext i32 %109 to i64
  %111 = load [4 x i16]** @image, align 8
  %112 = getelementptr inbounds [4 x i16]* %111, i64 %110
  %113 = getelementptr inbounds [4 x i16]* %112, i32 0, i64 %99
  store i16 %90, i16* %113, align 2
  %114 = zext i16 %90 to i32
  %115 = icmp sgt i32 %114, 4098
  br i1 %115, label %116, label %117

; <label>:116                                     ; preds = %85
  call void @derror()
  br label %117

; <label>:117                                     ; preds = %116, %85
  br label %118

; <label>:118                                     ; preds = %117, %81
  br label %119

; <label>:119                                     ; preds = %118
  %120 = add nsw i32 %col.0, 1
  br label %7

; <label>:121                                     ; preds = %7
  br label %122

; <label>:122                                     ; preds = %121
  %123 = add nsw i32 %row.0, 1
  br label %2

; <label>:124                                     ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define void @olympus_e300_load_raw() #0 {
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = mul nsw i32 %2, 16
  %4 = sdiv i32 %3, 10
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = load i16* @top_margin, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nsw i32 %4, %7
  %9 = sext i32 %8 to i64
  %10 = call i32 @fseek(%struct._IO_FILE* %5, i64 %9, i32 1)
  %11 = load i16* @raw_width, align 2
  %12 = zext i16 %11 to i32
  %13 = mul nsw i32 %12, 2
  %14 = add nsw i32 %4, %13
  %15 = sext i32 %14 to i64
  %16 = call noalias i8* @malloc(i64 %15) #4
  call void @merror(i8* %16, i8* getelementptr inbounds ([24 x i8]* @.str26, i32 0, i32 0))
  %17 = sext i32 %4 to i64
  %18 = getelementptr inbounds i8* %16, i64 %17
  %19 = bitcast i8* %18 to i16*
  br label %20

; <label>:20                                      ; preds = %127, %0
  %row.0 = phi i32 [ 0, %0 ], [ %128, %127 ]
  %21 = load i16* @height, align 2
  %22 = zext i16 %21 to i32
  %23 = icmp slt i32 %row.0, %22
  br i1 %23, label %24, label %129

; <label>:24                                      ; preds = %20
  %25 = sext i32 %4 to i64
  %26 = load %struct._IO_FILE** @ifp, align 8
  %27 = call i64 @fread(i8* %16, i64 1, i64 %25, %struct._IO_FILE* %26)
  %28 = sext i32 %4 to i64
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %24
  call void @derror()
  br label %31

; <label>:31                                      ; preds = %30, %24
  br label %32

; <label>:32                                      ; preds = %83, %31
  %pix.0 = phi i16* [ %19, %31 ], [ %85, %83 ]
  %dp.0 = phi i8* [ %16, %31 ], [ %84, %83 ]
  %33 = load i16* @raw_width, align 2
  %34 = zext i16 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16* %19, i64 %35
  %37 = icmp ult i16* %pix.0, %36
  br i1 %37, label %38, label %86

; <label>:38                                      ; preds = %32
  %39 = ptrtoint i8* %dp.0 to i64
  %40 = ptrtoint i8* %16 to i64
  %41 = sub i64 %39, %40
  %42 = and i64 %41, 15
  %43 = icmp eq i64 %42, 15
  br i1 %43, label %44, label %61

; <label>:44                                      ; preds = %38
  %45 = getelementptr inbounds i8* %dp.0, i32 1
  %46 = load i8* %dp.0, align 1
  %47 = zext i8 %46 to i32
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %60

; <label>:49                                      ; preds = %44
  %50 = load i16* @width, align 2
  %51 = zext i16 %50 to i32
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16* %19, i64 %52
  %54 = load i16* @left_margin, align 2
  %55 = zext i16 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i16* %53, i64 %56
  %58 = icmp ult i16* %pix.0, %57
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %49
  call void @derror()
  br label %60

; <label>:60                                      ; preds = %59, %49, %44
  br label %61

; <label>:61                                      ; preds = %60, %38
  %dp.1 = phi i8* [ %45, %60 ], [ %dp.0, %38 ]
  %62 = getelementptr inbounds i8* %dp.1, i64 1
  %63 = load i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl i32 %64, 8
  %66 = getelementptr inbounds i8* %dp.1, i64 0
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = or i32 %65, %68
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16* %pix.0, i64 0
  store i16 %70, i16* %71, align 2
  %72 = getelementptr inbounds i8* %dp.1, i64 2
  %73 = load i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl i32 %74, 4
  %76 = getelementptr inbounds i8* %dp.1, i64 1
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = ashr i32 %78, 4
  %80 = or i32 %75, %79
  %81 = trunc i32 %80 to i16
  %82 = getelementptr inbounds i16* %pix.0, i64 1
  store i16 %81, i16* %82, align 2
  br label %83

; <label>:83                                      ; preds = %61
  %84 = getelementptr inbounds i8* %dp.1, i64 3
  %85 = getelementptr inbounds i16* %pix.0, i64 2
  br label %32

; <label>:86                                      ; preds = %32
  br label %87

; <label>:87                                      ; preds = %124, %86
  %col.0 = phi i32 [ 0, %86 ], [ %125, %124 ]
  %88 = load i16* @width, align 2
  %89 = zext i16 %88 to i32
  %90 = icmp slt i32 %col.0, %89
  br i1 %90, label %91, label %126

; <label>:91                                      ; preds = %87
  %92 = load i16* @left_margin, align 2
  %93 = zext i16 %92 to i32
  %94 = add nsw i32 %col.0, %93
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i16* %19, i64 %95
  %97 = load i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = and i32 %98, 4095
  %100 = trunc i32 %99 to i16
  %101 = load i32* @filters, align 4
  %102 = shl i32 %row.0, 1
  %103 = and i32 %102, 14
  %104 = and i32 %col.0, 1
  %105 = add nsw i32 %103, %104
  %106 = shl i32 %105, 1
  %107 = lshr i32 %101, %106
  %108 = and i32 %107, 3
  %109 = zext i32 %108 to i64
  %110 = load i16* @shrink, align 2
  %111 = zext i16 %110 to i32
  %112 = ashr i32 %row.0, %111
  %113 = load i16* @iwidth, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nsw i32 %112, %114
  %116 = load i16* @shrink, align 2
  %117 = zext i16 %116 to i32
  %118 = ashr i32 %col.0, %117
  %119 = add nsw i32 %115, %118
  %120 = sext i32 %119 to i64
  %121 = load [4 x i16]** @image, align 8
  %122 = getelementptr inbounds [4 x i16]* %121, i64 %120
  %123 = getelementptr inbounds [4 x i16]* %122, i32 0, i64 %109
  store i16 %100, i16* %123, align 2
  br label %124

; <label>:124                                     ; preds = %91
  %125 = add nsw i32 %col.0, 1
  br label %87

; <label>:126                                     ; preds = %87
  br label %127

; <label>:127                                     ; preds = %126
  %128 = add nsw i32 %row.0, 1
  br label %20

; <label>:129                                     ; preds = %20
  call void @free(i8* %16) #4
  %130 = load i32* @maximum, align 4
  %131 = lshr i32 %130, 4
  store i32 %131, i32* @maximum, align 4
  %132 = load i32* @black, align 4
  %133 = lshr i32 %132, 4
  store i32 %133, i32* @black, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @olympus_e410_load_raw() #0 {
  %acarry = alloca [2 x [3 x i32]], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 7, i32 1)
  %3 = call i32 @getbits(i32 -1)
  br label %4

; <label>:4                                       ; preds = %322, %0
  %row.0 = phi i32 [ 0, %0 ], [ %323, %322 ]
  %5 = load i16* @height, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %row.0, %6
  br i1 %7, label %8, label %324

; <label>:8                                       ; preds = %4
  %9 = bitcast [2 x [3 x i32]]* %acarry to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 24, i32 16, i1 false)
  br label %10

; <label>:10                                      ; preds = %319, %8
  %col.0 = phi i32 [ 0, %8 ], [ %320, %319 ]
  %11 = load i16* @width, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %col.0, %12
  br i1 %13, label %14, label %321

; <label>:14                                      ; preds = %10
  %15 = and i32 %col.0, 1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [2 x [3 x i32]]* %acarry, i32 0, i64 %16
  %18 = getelementptr inbounds [3 x i32]* %17, i32 0, i32 0
  %19 = getelementptr inbounds i32* %18, i64 2
  %20 = load i32* %19, align 4
  %21 = icmp slt i32 %20, 3
  %22 = zext i1 %21 to i32
  %23 = mul nsw i32 2, %22
  %24 = add nsw i32 2, %23
  br label %25

; <label>:25                                      ; preds = %34, %14
  %nbits.0 = phi i32 [ %24, %14 ], [ %35, %34 ]
  %26 = getelementptr inbounds i32* %18, i64 0
  %27 = load i32* %26, align 4
  %28 = trunc i32 %27 to i16
  %29 = zext i16 %28 to i32
  %30 = add nsw i32 %nbits.0, %23
  %31 = ashr i32 %29, %30
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %25
  br label %34

; <label>:34                                      ; preds = %33
  %35 = add nsw i32 %nbits.0, 1
  br label %25

; <label>:36                                      ; preds = %25
  %37 = call i32 @getbits(i32 1)
  %38 = mul i32 %37, -1
  %39 = call i32 @getbits(i32 2)
  br label %40

; <label>:40                                      ; preds = %47, %36
  %high.0 = phi i32 [ 0, %36 ], [ %48, %47 ]
  %41 = icmp slt i32 %high.0, 12
  br i1 %41, label %42, label %49

; <label>:42                                      ; preds = %40
  %43 = call i32 @getbits(i32 1)
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %46

; <label>:45                                      ; preds = %42
  br label %49

; <label>:46                                      ; preds = %42
  br label %47

; <label>:47                                      ; preds = %46
  %48 = add nsw i32 %high.0, 1
  br label %40

; <label>:49                                      ; preds = %45, %40
  %50 = icmp eq i32 %high.0, 12
  br i1 %50, label %51, label %55

; <label>:51                                      ; preds = %49
  %52 = sub nsw i32 16, %nbits.0
  %53 = call i32 @getbits(i32 %52)
  %54 = lshr i32 %53, 1
  br label %55

; <label>:55                                      ; preds = %51, %49
  %high.1 = phi i32 [ %54, %51 ], [ %high.0, %49 ]
  %56 = shl i32 %high.1, %nbits.0
  %57 = call i32 @getbits(i32 %nbits.0)
  %58 = or i32 %56, %57
  %59 = getelementptr inbounds i32* %18, i64 0
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds i32* %18, i64 0
  %61 = load i32* %60, align 4
  %62 = xor i32 %61, %38
  %63 = getelementptr inbounds i32* %18, i64 1
  %64 = load i32* %63, align 4
  %65 = add nsw i32 %62, %64
  %66 = mul nsw i32 %65, 3
  %67 = getelementptr inbounds i32* %18, i64 1
  %68 = load i32* %67, align 4
  %69 = add nsw i32 %66, %68
  %70 = ashr i32 %69, 5
  %71 = getelementptr inbounds i32* %18, i64 1
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds i32* %18, i64 0
  %73 = load i32* %72, align 4
  %74 = icmp sgt i32 %73, 16
  br i1 %74, label %75, label %76

; <label>:75                                      ; preds = %55
  br label %80

; <label>:76                                      ; preds = %55
  %77 = getelementptr inbounds i32* %18, i64 2
  %78 = load i32* %77, align 4
  %79 = add nsw i32 %78, 1
  br label %80

; <label>:80                                      ; preds = %76, %75
  %81 = phi i32 [ 0, %75 ], [ %79, %76 ]
  %82 = getelementptr inbounds i32* %18, i64 2
  store i32 %81, i32* %82, align 4
  %83 = icmp slt i32 %row.0, 2
  br i1 %83, label %84, label %87

; <label>:84                                      ; preds = %80
  %85 = icmp slt i32 %col.0, 2
  br i1 %85, label %86, label %87

; <label>:86                                      ; preds = %84
  br label %286

; <label>:87                                      ; preds = %84, %80
  %88 = icmp slt i32 %row.0, 2
  br i1 %88, label %89, label %117

; <label>:89                                      ; preds = %87
  %90 = load i32* @filters, align 4
  %91 = shl i32 %row.0, 1
  %92 = and i32 %91, 14
  %93 = sub nsw i32 %col.0, 2
  %94 = and i32 %93, 1
  %95 = add nsw i32 %92, %94
  %96 = shl i32 %95, 1
  %97 = lshr i32 %90, %96
  %98 = and i32 %97, 3
  %99 = zext i32 %98 to i64
  %100 = load i16* @shrink, align 2
  %101 = zext i16 %100 to i32
  %102 = ashr i32 %row.0, %101
  %103 = load i16* @iwidth, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nsw i32 %102, %104
  %106 = sub nsw i32 %col.0, 2
  %107 = load i16* @shrink, align 2
  %108 = zext i16 %107 to i32
  %109 = ashr i32 %106, %108
  %110 = add nsw i32 %105, %109
  %111 = sext i32 %110 to i64
  %112 = load [4 x i16]** @image, align 8
  %113 = getelementptr inbounds [4 x i16]* %112, i64 %111
  %114 = getelementptr inbounds [4 x i16]* %113, i32 0, i64 %99
  %115 = load i16* %114, align 2
  %116 = zext i16 %115 to i32
  br label %285

; <label>:117                                     ; preds = %87
  %118 = icmp slt i32 %col.0, 2
  br i1 %118, label %119, label %147

; <label>:119                                     ; preds = %117
  %120 = load i32* @filters, align 4
  %121 = sub nsw i32 %row.0, 2
  %122 = shl i32 %121, 1
  %123 = and i32 %122, 14
  %124 = and i32 %col.0, 1
  %125 = add nsw i32 %123, %124
  %126 = shl i32 %125, 1
  %127 = lshr i32 %120, %126
  %128 = and i32 %127, 3
  %129 = zext i32 %128 to i64
  %130 = sub nsw i32 %row.0, 2
  %131 = load i16* @shrink, align 2
  %132 = zext i16 %131 to i32
  %133 = ashr i32 %130, %132
  %134 = load i16* @iwidth, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nsw i32 %133, %135
  %137 = load i16* @shrink, align 2
  %138 = zext i16 %137 to i32
  %139 = ashr i32 %col.0, %138
  %140 = add nsw i32 %136, %139
  %141 = sext i32 %140 to i64
  %142 = load [4 x i16]** @image, align 8
  %143 = getelementptr inbounds [4 x i16]* %142, i64 %141
  %144 = getelementptr inbounds [4 x i16]* %143, i32 0, i64 %129
  %145 = load i16* %144, align 2
  %146 = zext i16 %145 to i32
  br label %284

; <label>:147                                     ; preds = %117
  %148 = load i32* @filters, align 4
  %149 = shl i32 %row.0, 1
  %150 = and i32 %149, 14
  %151 = sub nsw i32 %col.0, 2
  %152 = and i32 %151, 1
  %153 = add nsw i32 %150, %152
  %154 = shl i32 %153, 1
  %155 = lshr i32 %148, %154
  %156 = and i32 %155, 3
  %157 = zext i32 %156 to i64
  %158 = load i16* @shrink, align 2
  %159 = zext i16 %158 to i32
  %160 = ashr i32 %row.0, %159
  %161 = load i16* @iwidth, align 2
  %162 = zext i16 %161 to i32
  %163 = mul nsw i32 %160, %162
  %164 = sub nsw i32 %col.0, 2
  %165 = load i16* @shrink, align 2
  %166 = zext i16 %165 to i32
  %167 = ashr i32 %164, %166
  %168 = add nsw i32 %163, %167
  %169 = sext i32 %168 to i64
  %170 = load [4 x i16]** @image, align 8
  %171 = getelementptr inbounds [4 x i16]* %170, i64 %169
  %172 = getelementptr inbounds [4 x i16]* %171, i32 0, i64 %157
  %173 = load i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = load i32* @filters, align 4
  %176 = sub nsw i32 %row.0, 2
  %177 = shl i32 %176, 1
  %178 = and i32 %177, 14
  %179 = and i32 %col.0, 1
  %180 = add nsw i32 %178, %179
  %181 = shl i32 %180, 1
  %182 = lshr i32 %175, %181
  %183 = and i32 %182, 3
  %184 = zext i32 %183 to i64
  %185 = sub nsw i32 %row.0, 2
  %186 = load i16* @shrink, align 2
  %187 = zext i16 %186 to i32
  %188 = ashr i32 %185, %187
  %189 = load i16* @iwidth, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nsw i32 %188, %190
  %192 = load i16* @shrink, align 2
  %193 = zext i16 %192 to i32
  %194 = ashr i32 %col.0, %193
  %195 = add nsw i32 %191, %194
  %196 = sext i32 %195 to i64
  %197 = load [4 x i16]** @image, align 8
  %198 = getelementptr inbounds [4 x i16]* %197, i64 %196
  %199 = getelementptr inbounds [4 x i16]* %198, i32 0, i64 %184
  %200 = load i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = load i32* @filters, align 4
  %203 = sub nsw i32 %row.0, 2
  %204 = shl i32 %203, 1
  %205 = and i32 %204, 14
  %206 = sub nsw i32 %col.0, 2
  %207 = and i32 %206, 1
  %208 = add nsw i32 %205, %207
  %209 = shl i32 %208, 1
  %210 = lshr i32 %202, %209
  %211 = and i32 %210, 3
  %212 = zext i32 %211 to i64
  %213 = sub nsw i32 %row.0, 2
  %214 = load i16* @shrink, align 2
  %215 = zext i16 %214 to i32
  %216 = ashr i32 %213, %215
  %217 = load i16* @iwidth, align 2
  %218 = zext i16 %217 to i32
  %219 = mul nsw i32 %216, %218
  %220 = sub nsw i32 %col.0, 2
  %221 = load i16* @shrink, align 2
  %222 = zext i16 %221 to i32
  %223 = ashr i32 %220, %222
  %224 = add nsw i32 %219, %223
  %225 = sext i32 %224 to i64
  %226 = load [4 x i16]** @image, align 8
  %227 = getelementptr inbounds [4 x i16]* %226, i64 %225
  %228 = getelementptr inbounds [4 x i16]* %227, i32 0, i64 %212
  %229 = load i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = icmp slt i32 %174, %230
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %147
  %233 = icmp slt i32 %230, %201
  br i1 %233, label %238, label %234

; <label>:234                                     ; preds = %232, %147
  %235 = icmp slt i32 %201, %230
  br i1 %235, label %236, label %263

; <label>:236                                     ; preds = %234
  %237 = icmp slt i32 %230, %174
  br i1 %237, label %238, label %263

; <label>:238                                     ; preds = %236, %232
  %239 = sub nsw i32 %174, %230
  %240 = sub nsw i32 %174, %230
  %241 = ashr i32 %240, 31
  %242 = xor i32 %239, %241
  %243 = sub nsw i32 %174, %230
  %244 = ashr i32 %243, 31
  %245 = sub nsw i32 %242, %244
  %246 = icmp sgt i32 %245, 32
  br i1 %246, label %256, label %247

; <label>:247                                     ; preds = %238
  %248 = sub nsw i32 %201, %230
  %249 = sub nsw i32 %201, %230
  %250 = ashr i32 %249, 31
  %251 = xor i32 %248, %250
  %252 = sub nsw i32 %201, %230
  %253 = ashr i32 %252, 31
  %254 = sub nsw i32 %251, %253
  %255 = icmp sgt i32 %254, 32
  br i1 %255, label %256, label %259

; <label>:256                                     ; preds = %247, %238
  %257 = add nsw i32 %174, %201
  %258 = sub nsw i32 %257, %230
  br label %262

; <label>:259                                     ; preds = %247
  %260 = add nsw i32 %174, %201
  %261 = ashr i32 %260, 1
  br label %262

; <label>:262                                     ; preds = %259, %256
  %pred.0 = phi i32 [ %258, %256 ], [ %261, %259 ]
  br label %283

; <label>:263                                     ; preds = %236, %234
  %264 = sub nsw i32 %174, %230
  %265 = sub nsw i32 %174, %230
  %266 = ashr i32 %265, 31
  %267 = xor i32 %264, %266
  %268 = sub nsw i32 %174, %230
  %269 = ashr i32 %268, 31
  %270 = sub nsw i32 %267, %269
  %271 = sub nsw i32 %201, %230
  %272 = sub nsw i32 %201, %230
  %273 = ashr i32 %272, 31
  %274 = xor i32 %271, %273
  %275 = sub nsw i32 %201, %230
  %276 = ashr i32 %275, 31
  %277 = sub nsw i32 %274, %276
  %278 = icmp sgt i32 %270, %277
  br i1 %278, label %279, label %280

; <label>:279                                     ; preds = %263
  br label %281

; <label>:280                                     ; preds = %263
  br label %281

; <label>:281                                     ; preds = %280, %279
  %282 = phi i32 [ %174, %279 ], [ %201, %280 ]
  br label %283

; <label>:283                                     ; preds = %281, %262
  %pred.1 = phi i32 [ %pred.0, %262 ], [ %282, %281 ]
  br label %284

; <label>:284                                     ; preds = %283, %119
  %pred.2 = phi i32 [ %146, %119 ], [ %pred.1, %283 ]
  br label %285

; <label>:285                                     ; preds = %284, %89
  %pred.3 = phi i32 [ %116, %89 ], [ %pred.2, %284 ]
  br label %286

; <label>:286                                     ; preds = %285, %86
  %pred.4 = phi i32 [ 0, %86 ], [ %pred.3, %285 ]
  %287 = shl i32 %65, 2
  %288 = or i32 %287, %39
  %289 = add nsw i32 %pred.4, %288
  %290 = trunc i32 %289 to i16
  %291 = load i32* @filters, align 4
  %292 = shl i32 %row.0, 1
  %293 = and i32 %292, 14
  %294 = and i32 %col.0, 1
  %295 = add nsw i32 %293, %294
  %296 = shl i32 %295, 1
  %297 = lshr i32 %291, %296
  %298 = and i32 %297, 3
  %299 = zext i32 %298 to i64
  %300 = load i16* @shrink, align 2
  %301 = zext i16 %300 to i32
  %302 = ashr i32 %row.0, %301
  %303 = load i16* @iwidth, align 2
  %304 = zext i16 %303 to i32
  %305 = mul nsw i32 %302, %304
  %306 = load i16* @shrink, align 2
  %307 = zext i16 %306 to i32
  %308 = ashr i32 %col.0, %307
  %309 = add nsw i32 %305, %308
  %310 = sext i32 %309 to i64
  %311 = load [4 x i16]** @image, align 8
  %312 = getelementptr inbounds [4 x i16]* %311, i64 %310
  %313 = getelementptr inbounds [4 x i16]* %312, i32 0, i64 %299
  store i16 %290, i16* %313, align 2
  %314 = zext i16 %290 to i32
  %315 = ashr i32 %314, 12
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %317, label %318

; <label>:317                                     ; preds = %286
  call void @derror()
  br label %318

; <label>:318                                     ; preds = %317, %286
  br label %319

; <label>:319                                     ; preds = %318
  %320 = add nsw i32 %col.0, 1
  br label %10

; <label>:321                                     ; preds = %10
  br label %322

; <label>:322                                     ; preds = %321
  %323 = add nsw i32 %row.0, 1
  br label %4

; <label>:324                                     ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @minolta_rd175_load_raw() #0 {
  %pixel = alloca [768 x i8], align 16
  br label %1

; <label>:1                                       ; preds = %185, %0
  %irow.0 = phi i32 [ 0, %0 ], [ %186, %185 ]
  %2 = icmp ult i32 %irow.0, 1481
  br i1 %2, label %3, label %187

; <label>:3                                       ; preds = %1
  %4 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i32 0
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i64 @fread(i8* %4, i64 1, i64 768, %struct._IO_FILE* %5)
  %7 = icmp ult i64 %6, 768
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %3
  call void @derror()
  br label %9

; <label>:9                                       ; preds = %8, %3
  %10 = udiv i32 %irow.0, 82
  %11 = urem i32 %irow.0, 82
  %12 = mul i32 %11, 12
  %13 = icmp ult i32 %10, 12
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %9
  %15 = or i32 %10, 1
  br label %19

; <label>:16                                      ; preds = %9
  %17 = sub i32 %10, 12
  %18 = mul i32 %17, 2
  br label %19

; <label>:19                                      ; preds = %16, %14
  %20 = phi i32 [ %15, %14 ], [ %18, %16 ]
  %21 = add i32 %12, %20
  switch i32 %irow.0, label %26 [
    i32 1477, label %22
    i32 1479, label %22
    i32 1476, label %23
    i32 1480, label %24
    i32 1478, label %25
  ]

; <label>:22                                      ; preds = %19, %19
  br label %185

; <label>:23                                      ; preds = %19
  br label %26

; <label>:24                                      ; preds = %19
  br label %26

; <label>:25                                      ; preds = %19
  br label %26

; <label>:26                                      ; preds = %25, %24, %23, %19
  %row.0 = phi i32 [ %21, %19 ], [ 985, %25 ], [ 985, %24 ], [ 984, %23 ]
  %box.0 = phi i32 [ %10, %19 ], [ 1, %25 ], [ %10, %24 ], [ %10, %23 ]
  %27 = icmp ult i32 %box.0, 12
  br i1 %27, label %28, label %146

; <label>:28                                      ; preds = %26
  %29 = and i32 %box.0, 1
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %146

; <label>:31                                      ; preds = %28
  br label %32

; <label>:32                                      ; preds = %88, %31
  %col.0 = phi i32 [ 0, %31 ], [ %89, %88 ]
  %row.1 = phi i32 [ %row.0, %31 ], [ %90, %88 ]
  %33 = icmp ult i32 %col.0, 1533
  br i1 %33, label %34, label %91

; <label>:34                                      ; preds = %32
  %35 = icmp ne i32 %col.0, 1
  br i1 %35, label %36, label %87

; <label>:36                                      ; preds = %34
  %37 = add i32 %col.0, 1
  %38 = and i32 %37, 2
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %54

; <label>:40                                      ; preds = %36
  %41 = udiv i32 %col.0, 2
  %42 = sub i32 %41, 1
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %43
  %45 = load i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = udiv i32 %col.0, 2
  %48 = add i32 %47, 1
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %49
  %51 = load i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %46, %52
  br label %61

; <label>:54                                      ; preds = %36
  %55 = udiv i32 %col.0, 2
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %56
  %58 = load i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl i32 %59, 1
  br label %61

; <label>:61                                      ; preds = %54, %40
  %62 = phi i32 [ %53, %40 ], [ %60, %54 ]
  %63 = trunc i32 %62 to i16
  %64 = load i32* @filters, align 4
  %65 = shl i32 %row.1, 1
  %66 = and i32 %65, 14
  %67 = and i32 %col.0, 1
  %68 = add i32 %66, %67
  %69 = shl i32 %68, 1
  %70 = lshr i32 %64, %69
  %71 = and i32 %70, 3
  %72 = zext i32 %71 to i64
  %73 = load i16* @shrink, align 2
  %74 = zext i16 %73 to i32
  %75 = lshr i32 %row.1, %74
  %76 = load i16* @iwidth, align 2
  %77 = zext i16 %76 to i32
  %78 = mul i32 %75, %77
  %79 = load i16* @shrink, align 2
  %80 = zext i16 %79 to i32
  %81 = lshr i32 %col.0, %80
  %82 = add i32 %78, %81
  %83 = zext i32 %82 to i64
  %84 = load [4 x i16]** @image, align 8
  %85 = getelementptr inbounds [4 x i16]* %84, i64 %83
  %86 = getelementptr inbounds [4 x i16]* %85, i32 0, i64 %72
  store i16 %63, i16* %86, align 2
  br label %87

; <label>:87                                      ; preds = %61, %34
  br label %88

; <label>:88                                      ; preds = %87
  %89 = add i32 %col.0, 1
  %90 = xor i32 %row.1, 1
  br label %32

; <label>:91                                      ; preds = %32
  %92 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 1
  %93 = load i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl i32 %94, 1
  %96 = trunc i32 %95 to i16
  %97 = load i32* @filters, align 4
  %98 = shl i32 %row.1, 1
  %99 = and i32 %98, 14
  %100 = add i32 %99, 1
  %101 = shl i32 %100, 1
  %102 = lshr i32 %97, %101
  %103 = and i32 %102, 3
  %104 = zext i32 %103 to i64
  %105 = load i16* @shrink, align 2
  %106 = zext i16 %105 to i32
  %107 = lshr i32 %row.1, %106
  %108 = load i16* @iwidth, align 2
  %109 = zext i16 %108 to i32
  %110 = mul i32 %107, %109
  %111 = load i16* @shrink, align 2
  %112 = zext i16 %111 to i32
  %113 = ashr i32 1, %112
  %114 = add i32 %110, %113
  %115 = zext i32 %114 to i64
  %116 = load [4 x i16]** @image, align 8
  %117 = getelementptr inbounds [4 x i16]* %116, i64 %115
  %118 = getelementptr inbounds [4 x i16]* %117, i32 0, i64 %104
  store i16 %96, i16* %118, align 2
  %119 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 765
  %120 = load i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = shl i32 %121, 1
  %123 = trunc i32 %122 to i16
  %124 = load i32* @filters, align 4
  %125 = shl i32 %row.1, 1
  %126 = and i32 %125, 14
  %127 = add i32 %126, 1
  %128 = shl i32 %127, 1
  %129 = lshr i32 %124, %128
  %130 = and i32 %129, 3
  %131 = zext i32 %130 to i64
  %132 = load i16* @shrink, align 2
  %133 = zext i16 %132 to i32
  %134 = lshr i32 %row.1, %133
  %135 = load i16* @iwidth, align 2
  %136 = zext i16 %135 to i32
  %137 = mul i32 %134, %136
  %138 = load i16* @shrink, align 2
  %139 = zext i16 %138 to i32
  %140 = ashr i32 1533, %139
  %141 = add i32 %137, %140
  %142 = zext i32 %141 to i64
  %143 = load [4 x i16]** @image, align 8
  %144 = getelementptr inbounds [4 x i16]* %143, i64 %142
  %145 = getelementptr inbounds [4 x i16]* %144, i32 0, i64 %131
  store i16 %123, i16* %145, align 2
  br label %184

; <label>:146                                     ; preds = %28, %26
  %147 = and i32 %row.0, 1
  br label %148

; <label>:148                                     ; preds = %181, %146
  %col.1 = phi i32 [ %147, %146 ], [ %182, %181 ]
  %149 = icmp ult i32 %col.1, 1534
  br i1 %149, label %150, label %183

; <label>:150                                     ; preds = %148
  %151 = udiv i32 %col.1, 2
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %152
  %154 = load i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = shl i32 %155, 1
  %157 = trunc i32 %156 to i16
  %158 = load i32* @filters, align 4
  %159 = shl i32 %row.0, 1
  %160 = and i32 %159, 14
  %161 = and i32 %col.1, 1
  %162 = add i32 %160, %161
  %163 = shl i32 %162, 1
  %164 = lshr i32 %158, %163
  %165 = and i32 %164, 3
  %166 = zext i32 %165 to i64
  %167 = load i16* @shrink, align 2
  %168 = zext i16 %167 to i32
  %169 = lshr i32 %row.0, %168
  %170 = load i16* @iwidth, align 2
  %171 = zext i16 %170 to i32
  %172 = mul i32 %169, %171
  %173 = load i16* @shrink, align 2
  %174 = zext i16 %173 to i32
  %175 = lshr i32 %col.1, %174
  %176 = add i32 %172, %175
  %177 = zext i32 %176 to i64
  %178 = load [4 x i16]** @image, align 8
  %179 = getelementptr inbounds [4 x i16]* %178, i64 %177
  %180 = getelementptr inbounds [4 x i16]* %179, i32 0, i64 %166
  store i16 %157, i16* %180, align 2
  br label %181

; <label>:181                                     ; preds = %150
  %182 = add i32 %col.1, 2
  br label %148

; <label>:183                                     ; preds = %148
  br label %184

; <label>:184                                     ; preds = %183, %91
  br label %185

; <label>:185                                     ; preds = %184, %22
  %186 = add i32 %irow.0, 1
  br label %1

; <label>:187                                     ; preds = %1
  store i32 510, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @casio_qv5700_load_raw() #0 {
  %data = alloca [3232 x i8], align 16
  %pixel = alloca [2576 x i16], align 16
  br label %1

; <label>:1                                       ; preds = %100, %0
  %row.0 = phi i32 [ 0, %0 ], [ %101, %100 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %row.0, %3
  br i1 %4, label %5, label %102

; <label>:5                                       ; preds = %1
  %6 = getelementptr inbounds [3232 x i8]* %data, i32 0, i32 0
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i64 @fread(i8* %6, i64 1, i64 3232, %struct._IO_FILE* %7)
  %9 = getelementptr inbounds [3232 x i8]* %data, i32 0, i32 0
  %10 = getelementptr inbounds [2576 x i16]* %pixel, i32 0, i32 0
  br label %11

; <label>:11                                      ; preds = %59, %5
  %pix.0 = phi i16* [ %10, %5 ], [ %61, %59 ]
  %dp.0 = phi i8* [ %9, %5 ], [ %60, %59 ]
  %12 = getelementptr inbounds [3232 x i8]* %data, i32 0, i32 0
  %13 = getelementptr inbounds i8* %12, i64 3220
  %14 = icmp ult i8* %dp.0, %13
  br i1 %14, label %15, label %62

; <label>:15                                      ; preds = %11
  %16 = getelementptr inbounds i8* %dp.0, i64 0
  %17 = load i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl i32 %18, 2
  %20 = getelementptr inbounds i8* %dp.0, i64 1
  %21 = load i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = ashr i32 %22, 6
  %24 = add nsw i32 %19, %23
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds i16* %pix.0, i64 0
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8* %dp.0, i64 1
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl i32 %29, 4
  %31 = getelementptr inbounds i8* %dp.0, i64 2
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = ashr i32 %33, 4
  %35 = add nsw i32 %30, %34
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds i16* %pix.0, i64 1
  store i16 %36, i16* %37, align 2
  %38 = getelementptr inbounds i8* %dp.0, i64 2
  %39 = load i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl i32 %40, 6
  %42 = getelementptr inbounds i8* %dp.0, i64 3
  %43 = load i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = ashr i32 %44, 2
  %46 = add nsw i32 %41, %45
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds i16* %pix.0, i64 2
  store i16 %47, i16* %48, align 2
  %49 = getelementptr inbounds i8* %dp.0, i64 3
  %50 = load i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = shl i32 %51, 8
  %53 = getelementptr inbounds i8* %dp.0, i64 4
  %54 = load i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add nsw i32 %52, %55
  %57 = trunc i32 %56 to i16
  %58 = getelementptr inbounds i16* %pix.0, i64 3
  store i16 %57, i16* %58, align 2
  br label %59

; <label>:59                                      ; preds = %15
  %60 = getelementptr inbounds i8* %dp.0, i64 5
  %61 = getelementptr inbounds i16* %pix.0, i64 4
  br label %11

; <label>:62                                      ; preds = %11
  br label %63

; <label>:63                                      ; preds = %97, %62
  %col.0 = phi i32 [ 0, %62 ], [ %98, %97 ]
  %64 = load i16* @width, align 2
  %65 = zext i16 %64 to i32
  %66 = icmp slt i32 %col.0, %65
  br i1 %66, label %67, label %99

; <label>:67                                      ; preds = %63
  %68 = sext i32 %col.0 to i64
  %69 = getelementptr inbounds [2576 x i16]* %pixel, i32 0, i64 %68
  %70 = load i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = and i32 %71, 1023
  %73 = trunc i32 %72 to i16
  %74 = load i32* @filters, align 4
  %75 = shl i32 %row.0, 1
  %76 = and i32 %75, 14
  %77 = and i32 %col.0, 1
  %78 = add nsw i32 %76, %77
  %79 = shl i32 %78, 1
  %80 = lshr i32 %74, %79
  %81 = and i32 %80, 3
  %82 = zext i32 %81 to i64
  %83 = load i16* @shrink, align 2
  %84 = zext i16 %83 to i32
  %85 = ashr i32 %row.0, %84
  %86 = load i16* @iwidth, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nsw i32 %85, %87
  %89 = load i16* @shrink, align 2
  %90 = zext i16 %89 to i32
  %91 = ashr i32 %col.0, %90
  %92 = add nsw i32 %88, %91
  %93 = sext i32 %92 to i64
  %94 = load [4 x i16]** @image, align 8
  %95 = getelementptr inbounds [4 x i16]* %94, i64 %93
  %96 = getelementptr inbounds [4 x i16]* %95, i32 0, i64 %82
  store i16 %73, i16* %96, align 2
  br label %97

; <label>:97                                      ; preds = %67
  %98 = add nsw i32 %col.0, 1
  br label %63

; <label>:99                                      ; preds = %63
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %row.0, 1
  br label %1

; <label>:102                                     ; preds = %1
  store i32 1020, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @quicktake_100_load_raw() #0 {
  %pixel = alloca [484 x [644 x i8]], align 16
  %1 = call i32 @getbits(i32 -1)
  %2 = bitcast [484 x [644 x i8]]* %pixel to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 -128, i64 311696, i32 16, i1 false)
  br label %3

; <label>:3                                       ; preds = %110, %0
  %val.0 = phi i32 [ 0, %0 ], [ %val.1, %110 ]
  %row.0 = phi i32 [ 2, %0 ], [ %111, %110 ]
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = add nsw i32 %5, 2
  %7 = icmp slt i32 %row.0, %6
  br i1 %7, label %8, label %112

; <label>:8                                       ; preds = %3
  %9 = and i32 %row.0, 1
  %10 = add nsw i32 2, %9
  br label %11

; <label>:11                                      ; preds = %102, %8
  %val.1 = phi i32 [ %val.0, %8 ], [ %64, %102 ]
  %col.0 = phi i32 [ %10, %8 ], [ %103, %102 ]
  %12 = load i16* @width, align 2
  %13 = zext i16 %12 to i32
  %14 = add nsw i32 %13, 2
  %15 = icmp slt i32 %col.0, %14
  br i1 %15, label %16, label %104

; <label>:16                                      ; preds = %11
  %17 = sub nsw i32 %col.0, 1
  %18 = sext i32 %17 to i64
  %19 = sub nsw i32 %row.0, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %20
  %22 = getelementptr inbounds [644 x i8]* %21, i32 0, i64 %18
  %23 = load i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nsw i32 %col.0, 1
  %26 = sext i32 %25 to i64
  %27 = sub nsw i32 %row.0, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %28
  %30 = getelementptr inbounds [644 x i8]* %29, i32 0, i64 %26
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 2, %32
  %34 = add nsw i32 %24, %33
  %35 = sub nsw i32 %col.0, 2
  %36 = sext i32 %35 to i64
  %37 = sext i32 %row.0 to i64
  %38 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %37
  %39 = getelementptr inbounds [644 x i8]* %38, i32 0, i64 %36
  %40 = load i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = add nsw i32 %34, %41
  %43 = ashr i32 %42, 2
  %44 = call i32 @getbits(i32 4)
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [16 x i16]* @quicktake_100_load_raw.gstep, i32 0, i64 %45
  %47 = load i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = add nsw i32 %43, %48
  %50 = icmp slt i32 %49, 255
  br i1 %50, label %51, label %52

; <label>:51                                      ; preds = %16
  br label %53

; <label>:52                                      ; preds = %16
  br label %53

; <label>:53                                      ; preds = %52, %51
  %54 = phi i32 [ %49, %51 ], [ 255, %52 ]
  %55 = icmp sgt i32 0, %54
  br i1 %55, label %56, label %57

; <label>:56                                      ; preds = %53
  br label %63

; <label>:57                                      ; preds = %53
  %58 = icmp slt i32 %49, 255
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %57
  br label %61

; <label>:60                                      ; preds = %57
  br label %61

; <label>:61                                      ; preds = %60, %59
  %62 = phi i32 [ %49, %59 ], [ 255, %60 ]
  br label %63

; <label>:63                                      ; preds = %61, %56
  %64 = phi i32 [ 0, %56 ], [ %62, %61 ]
  %65 = trunc i32 %64 to i8
  %66 = sext i32 %col.0 to i64
  %67 = sext i32 %row.0 to i64
  %68 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %67
  %69 = getelementptr inbounds [644 x i8]* %68, i32 0, i64 %66
  store i8 %65, i8* %69, align 1
  %70 = icmp slt i32 %col.0, 4
  br i1 %70, label %71, label %85

; <label>:71                                      ; preds = %63
  %72 = trunc i32 %64 to i8
  %73 = xor i32 %row.0, -1
  %74 = and i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = add nsw i32 %row.0, 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %77
  %79 = getelementptr inbounds [644 x i8]* %78, i32 0, i64 %75
  store i8 %72, i8* %79, align 1
  %80 = sub nsw i32 %col.0, 2
  %81 = sext i32 %80 to i64
  %82 = sext i32 %row.0 to i64
  %83 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %82
  %84 = getelementptr inbounds [644 x i8]* %83, i32 0, i64 %81
  store i8 %72, i8* %84, align 1
  br label %85

; <label>:85                                      ; preds = %71, %63
  %86 = icmp eq i32 %row.0, 2
  br i1 %86, label %87, label %101

; <label>:87                                      ; preds = %85
  %88 = trunc i32 %64 to i8
  %89 = add nsw i32 %col.0, 3
  %90 = sext i32 %89 to i64
  %91 = sub nsw i32 %row.0, 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %92
  %94 = getelementptr inbounds [644 x i8]* %93, i32 0, i64 %90
  store i8 %88, i8* %94, align 1
  %95 = add nsw i32 %col.0, 1
  %96 = sext i32 %95 to i64
  %97 = sub nsw i32 %row.0, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %98
  %100 = getelementptr inbounds [644 x i8]* %99, i32 0, i64 %96
  store i8 %88, i8* %100, align 1
  br label %101

; <label>:101                                     ; preds = %87, %85
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %col.0, 2
  br label %11

; <label>:104                                     ; preds = %11
  %105 = trunc i32 %val.1 to i8
  %106 = sext i32 %col.0 to i64
  %107 = sext i32 %row.0 to i64
  %108 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %107
  %109 = getelementptr inbounds [644 x i8]* %108, i32 0, i64 %106
  store i8 %105, i8* %109, align 1
  br label %110

; <label>:110                                     ; preds = %104
  %111 = add nsw i32 %row.0, 1
  br label %3

; <label>:112                                     ; preds = %3
  br label %113

; <label>:113                                     ; preds = %384, %112
  %rb.0 = phi i32 [ 0, %112 ], [ %385, %384 ]
  %114 = icmp slt i32 %rb.0, 2
  br i1 %114, label %115, label %386

; <label>:115                                     ; preds = %113
  %116 = add nsw i32 2, %rb.0
  br label %117

; <label>:117                                     ; preds = %381, %115
  %row.1 = phi i32 [ %116, %115 ], [ %382, %381 ]
  %118 = load i16* @height, align 2
  %119 = zext i16 %118 to i32
  %120 = add nsw i32 %119, 2
  %121 = icmp slt i32 %row.1, %120
  br i1 %121, label %122, label %383

; <label>:122                                     ; preds = %117
  %123 = and i32 %row.1, 1
  %124 = sub nsw i32 3, %123
  br label %125

; <label>:125                                     ; preds = %378, %122
  %col.1 = phi i32 [ %124, %122 ], [ %379, %378 ]
  %126 = load i16* @width, align 2
  %127 = zext i16 %126 to i32
  %128 = add nsw i32 %127, 2
  %129 = icmp slt i32 %col.1, %128
  br i1 %129, label %130, label %380

; <label>:130                                     ; preds = %125
  %131 = icmp slt i32 %row.1, 4
  br i1 %131, label %134, label %132

; <label>:132                                     ; preds = %130
  %133 = icmp slt i32 %col.1, 4
  br i1 %133, label %134, label %135

; <label>:134                                     ; preds = %132, %130
  br label %313

; <label>:135                                     ; preds = %132
  %136 = sext i32 %col.1 to i64
  %137 = sub nsw i32 %row.1, 2
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %138
  %140 = getelementptr inbounds [644 x i8]* %139, i32 0, i64 %136
  %141 = load i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = sub nsw i32 %col.1, 2
  %144 = sext i32 %143 to i64
  %145 = sext i32 %row.1 to i64
  %146 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %145
  %147 = getelementptr inbounds [644 x i8]* %146, i32 0, i64 %144
  %148 = load i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %142, %149
  %151 = sext i32 %col.1 to i64
  %152 = sub nsw i32 %row.1, 2
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %153
  %155 = getelementptr inbounds [644 x i8]* %154, i32 0, i64 %151
  %156 = load i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %col.1, 2
  %159 = sext i32 %158 to i64
  %160 = sext i32 %row.1 to i64
  %161 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %160
  %162 = getelementptr inbounds [644 x i8]* %161, i32 0, i64 %159
  %163 = load i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = sub nsw i32 %157, %164
  %166 = ashr i32 %165, 31
  %167 = xor i32 %150, %166
  %168 = sext i32 %col.1 to i64
  %169 = sub nsw i32 %row.1, 2
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %170
  %172 = getelementptr inbounds [644 x i8]* %171, i32 0, i64 %168
  %173 = load i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = sub nsw i32 %col.1, 2
  %176 = sext i32 %175 to i64
  %177 = sext i32 %row.1 to i64
  %178 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %177
  %179 = getelementptr inbounds [644 x i8]* %178, i32 0, i64 %176
  %180 = load i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = sub nsw i32 %174, %181
  %183 = ashr i32 %182, 31
  %184 = sub nsw i32 %167, %183
  %185 = sext i32 %col.1 to i64
  %186 = sub nsw i32 %row.1, 2
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %187
  %189 = getelementptr inbounds [644 x i8]* %188, i32 0, i64 %185
  %190 = load i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = sub nsw i32 %col.1, 2
  %193 = sext i32 %192 to i64
  %194 = sub nsw i32 %row.1, 2
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %195
  %197 = getelementptr inbounds [644 x i8]* %196, i32 0, i64 %193
  %198 = load i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = sub nsw i32 %191, %199
  %201 = sext i32 %col.1 to i64
  %202 = sub nsw i32 %row.1, 2
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %203
  %205 = getelementptr inbounds [644 x i8]* %204, i32 0, i64 %201
  %206 = load i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = sub nsw i32 %col.1, 2
  %209 = sext i32 %208 to i64
  %210 = sub nsw i32 %row.1, 2
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %211
  %213 = getelementptr inbounds [644 x i8]* %212, i32 0, i64 %209
  %214 = load i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = sub nsw i32 %207, %215
  %217 = ashr i32 %216, 31
  %218 = xor i32 %200, %217
  %219 = sext i32 %col.1 to i64
  %220 = sub nsw i32 %row.1, 2
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %221
  %223 = getelementptr inbounds [644 x i8]* %222, i32 0, i64 %219
  %224 = load i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = sub nsw i32 %col.1, 2
  %227 = sext i32 %226 to i64
  %228 = sub nsw i32 %row.1, 2
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %229
  %231 = getelementptr inbounds [644 x i8]* %230, i32 0, i64 %227
  %232 = load i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = sub nsw i32 %225, %233
  %235 = ashr i32 %234, 31
  %236 = sub nsw i32 %218, %235
  %237 = add nsw i32 %184, %236
  %238 = sub nsw i32 %col.1, 2
  %239 = sext i32 %238 to i64
  %240 = sext i32 %row.1 to i64
  %241 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %240
  %242 = getelementptr inbounds [644 x i8]* %241, i32 0, i64 %239
  %243 = load i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = sub nsw i32 %col.1, 2
  %246 = sext i32 %245 to i64
  %247 = sub nsw i32 %row.1, 2
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %248
  %250 = getelementptr inbounds [644 x i8]* %249, i32 0, i64 %246
  %251 = load i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = sub nsw i32 %244, %252
  %254 = sub nsw i32 %col.1, 2
  %255 = sext i32 %254 to i64
  %256 = sext i32 %row.1 to i64
  %257 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %256
  %258 = getelementptr inbounds [644 x i8]* %257, i32 0, i64 %255
  %259 = load i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = sub nsw i32 %col.1, 2
  %262 = sext i32 %261 to i64
  %263 = sub nsw i32 %row.1, 2
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %264
  %266 = getelementptr inbounds [644 x i8]* %265, i32 0, i64 %262
  %267 = load i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = sub nsw i32 %260, %268
  %270 = ashr i32 %269, 31
  %271 = xor i32 %253, %270
  %272 = sub nsw i32 %col.1, 2
  %273 = sext i32 %272 to i64
  %274 = sext i32 %row.1 to i64
  %275 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %274
  %276 = getelementptr inbounds [644 x i8]* %275, i32 0, i64 %273
  %277 = load i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = sub nsw i32 %col.1, 2
  %280 = sext i32 %279 to i64
  %281 = sub nsw i32 %row.1, 2
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %282
  %284 = getelementptr inbounds [644 x i8]* %283, i32 0, i64 %280
  %285 = load i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = sub nsw i32 %278, %286
  %288 = ashr i32 %287, 31
  %289 = sub nsw i32 %271, %288
  %290 = add nsw i32 %237, %289
  %291 = icmp slt i32 %290, 4
  br i1 %291, label %292, label %293

; <label>:292                                     ; preds = %135
  br label %311

; <label>:293                                     ; preds = %135
  %294 = icmp slt i32 %290, 8
  br i1 %294, label %295, label %296

; <label>:295                                     ; preds = %293
  br label %309

; <label>:296                                     ; preds = %293
  %297 = icmp slt i32 %290, 16
  br i1 %297, label %298, label %299

; <label>:298                                     ; preds = %296
  br label %307

; <label>:299                                     ; preds = %296
  %300 = icmp slt i32 %290, 32
  br i1 %300, label %301, label %302

; <label>:301                                     ; preds = %299
  br label %305

; <label>:302                                     ; preds = %299
  %303 = icmp slt i32 %290, 48
  %304 = select i1 %303, i32 4, i32 5
  br label %305

; <label>:305                                     ; preds = %302, %301
  %306 = phi i32 [ 3, %301 ], [ %304, %302 ]
  br label %307

; <label>:307                                     ; preds = %305, %298
  %308 = phi i32 [ 2, %298 ], [ %306, %305 ]
  br label %309

; <label>:309                                     ; preds = %307, %295
  %310 = phi i32 [ 1, %295 ], [ %308, %307 ]
  br label %311

; <label>:311                                     ; preds = %309, %292
  %312 = phi i32 [ 0, %292 ], [ %310, %309 ]
  br label %313

; <label>:313                                     ; preds = %311, %134
  %sharp.0 = phi i32 [ 2, %134 ], [ %312, %311 ]
  %314 = sext i32 %col.1 to i64
  %315 = sub nsw i32 %row.1, 2
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %316
  %318 = getelementptr inbounds [644 x i8]* %317, i32 0, i64 %314
  %319 = load i8* %318, align 1
  %320 = zext i8 %319 to i32
  %321 = sub nsw i32 %col.1, 2
  %322 = sext i32 %321 to i64
  %323 = sext i32 %row.1 to i64
  %324 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %323
  %325 = getelementptr inbounds [644 x i8]* %324, i32 0, i64 %322
  %326 = load i8* %325, align 1
  %327 = zext i8 %326 to i32
  %328 = add nsw i32 %320, %327
  %329 = ashr i32 %328, 1
  %330 = call i32 @getbits(i32 2)
  %331 = zext i32 %330 to i64
  %332 = sext i32 %sharp.0 to i64
  %333 = getelementptr inbounds [6 x [4 x i16]]* @quicktake_100_load_raw.rstep, i32 0, i64 %332
  %334 = getelementptr inbounds [4 x i16]* %333, i32 0, i64 %331
  %335 = load i16* %334, align 2
  %336 = sext i16 %335 to i32
  %337 = add nsw i32 %329, %336
  %338 = icmp slt i32 %337, 255
  br i1 %338, label %339, label %340

; <label>:339                                     ; preds = %313
  br label %341

; <label>:340                                     ; preds = %313
  br label %341

; <label>:341                                     ; preds = %340, %339
  %342 = phi i32 [ %337, %339 ], [ 255, %340 ]
  %343 = icmp sgt i32 0, %342
  br i1 %343, label %344, label %345

; <label>:344                                     ; preds = %341
  br label %351

; <label>:345                                     ; preds = %341
  %346 = icmp slt i32 %337, 255
  br i1 %346, label %347, label %348

; <label>:347                                     ; preds = %345
  br label %349

; <label>:348                                     ; preds = %345
  br label %349

; <label>:349                                     ; preds = %348, %347
  %350 = phi i32 [ %337, %347 ], [ 255, %348 ]
  br label %351

; <label>:351                                     ; preds = %349, %344
  %352 = phi i32 [ 0, %344 ], [ %350, %349 ]
  %353 = trunc i32 %352 to i8
  %354 = sext i32 %col.1 to i64
  %355 = sext i32 %row.1 to i64
  %356 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %355
  %357 = getelementptr inbounds [644 x i8]* %356, i32 0, i64 %354
  store i8 %353, i8* %357, align 1
  %358 = icmp slt i32 %row.1, 4
  br i1 %358, label %359, label %367

; <label>:359                                     ; preds = %351
  %360 = trunc i32 %352 to i8
  %361 = add nsw i32 %col.1, 2
  %362 = sext i32 %361 to i64
  %363 = sub nsw i32 %row.1, 2
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %364
  %366 = getelementptr inbounds [644 x i8]* %365, i32 0, i64 %362
  store i8 %360, i8* %366, align 1
  br label %367

; <label>:367                                     ; preds = %359, %351
  %368 = icmp slt i32 %col.1, 4
  br i1 %368, label %369, label %377

; <label>:369                                     ; preds = %367
  %370 = trunc i32 %352 to i8
  %371 = sub nsw i32 %col.1, 2
  %372 = sext i32 %371 to i64
  %373 = add nsw i32 %row.1, 2
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %374
  %376 = getelementptr inbounds [644 x i8]* %375, i32 0, i64 %372
  store i8 %370, i8* %376, align 1
  br label %377

; <label>:377                                     ; preds = %369, %367
  br label %378

; <label>:378                                     ; preds = %377
  %379 = add nsw i32 %col.1, 2
  br label %125

; <label>:380                                     ; preds = %125
  br label %381

; <label>:381                                     ; preds = %380
  %382 = add nsw i32 %row.1, 2
  br label %117

; <label>:383                                     ; preds = %117
  br label %384

; <label>:384                                     ; preds = %383
  %385 = add nsw i32 %rb.0, 1
  br label %113

; <label>:386                                     ; preds = %113
  br label %387

; <label>:387                                     ; preds = %449, %386
  %row.2 = phi i32 [ 2, %386 ], [ %450, %449 ]
  %388 = load i16* @height, align 2
  %389 = zext i16 %388 to i32
  %390 = add nsw i32 %389, 2
  %391 = icmp slt i32 %row.2, %390
  br i1 %391, label %392, label %451

; <label>:392                                     ; preds = %387
  %393 = and i32 %row.2, 1
  %394 = sub nsw i32 3, %393
  br label %395

; <label>:395                                     ; preds = %446, %392
  %col.2 = phi i32 [ %394, %392 ], [ %447, %446 ]
  %396 = load i16* @width, align 2
  %397 = zext i16 %396 to i32
  %398 = add nsw i32 %397, 2
  %399 = icmp slt i32 %col.2, %398
  br i1 %399, label %400, label %448

; <label>:400                                     ; preds = %395
  %401 = sub nsw i32 %col.2, 1
  %402 = sext i32 %401 to i64
  %403 = sext i32 %row.2 to i64
  %404 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %403
  %405 = getelementptr inbounds [644 x i8]* %404, i32 0, i64 %402
  %406 = load i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = sext i32 %col.2 to i64
  %409 = sext i32 %row.2 to i64
  %410 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %409
  %411 = getelementptr inbounds [644 x i8]* %410, i32 0, i64 %408
  %412 = load i8* %411, align 1
  %413 = zext i8 %412 to i32
  %414 = shl i32 %413, 2
  %415 = add nsw i32 %407, %414
  %416 = add nsw i32 %col.2, 1
  %417 = sext i32 %416 to i64
  %418 = sext i32 %row.2 to i64
  %419 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %418
  %420 = getelementptr inbounds [644 x i8]* %419, i32 0, i64 %417
  %421 = load i8* %420, align 1
  %422 = zext i8 %421 to i32
  %423 = add nsw i32 %415, %422
  %424 = ashr i32 %423, 1
  %425 = sub nsw i32 %424, 256
  %426 = icmp slt i32 %425, 255
  br i1 %426, label %427, label %428

; <label>:427                                     ; preds = %400
  br label %429

; <label>:428                                     ; preds = %400
  br label %429

; <label>:429                                     ; preds = %428, %427
  %430 = phi i32 [ %425, %427 ], [ 255, %428 ]
  %431 = icmp sgt i32 0, %430
  br i1 %431, label %432, label %433

; <label>:432                                     ; preds = %429
  br label %439

; <label>:433                                     ; preds = %429
  %434 = icmp slt i32 %425, 255
  br i1 %434, label %435, label %436

; <label>:435                                     ; preds = %433
  br label %437

; <label>:436                                     ; preds = %433
  br label %437

; <label>:437                                     ; preds = %436, %435
  %438 = phi i32 [ %425, %435 ], [ 255, %436 ]
  br label %439

; <label>:439                                     ; preds = %437, %432
  %440 = phi i32 [ 0, %432 ], [ %438, %437 ]
  %441 = trunc i32 %440 to i8
  %442 = sext i32 %col.2 to i64
  %443 = sext i32 %row.2 to i64
  %444 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %443
  %445 = getelementptr inbounds [644 x i8]* %444, i32 0, i64 %442
  store i8 %441, i8* %445, align 1
  br label %446

; <label>:446                                     ; preds = %439
  %447 = add nsw i32 %col.2, 2
  br label %395

; <label>:448                                     ; preds = %395
  br label %449

; <label>:449                                     ; preds = %448
  %450 = add nsw i32 %row.2, 1
  br label %387

; <label>:451                                     ; preds = %387
  br label %452

; <label>:452                                     ; preds = %498, %451
  %row.3 = phi i32 [ 0, %451 ], [ %499, %498 ]
  %453 = load i16* @height, align 2
  %454 = zext i16 %453 to i32
  %455 = icmp slt i32 %row.3, %454
  br i1 %455, label %456, label %500

; <label>:456                                     ; preds = %452
  br label %457

; <label>:457                                     ; preds = %495, %456
  %col.3 = phi i32 [ 0, %456 ], [ %496, %495 ]
  %458 = load i16* @width, align 2
  %459 = zext i16 %458 to i32
  %460 = icmp slt i32 %col.3, %459
  br i1 %460, label %461, label %497

; <label>:461                                     ; preds = %457
  %462 = add nsw i32 %col.3, 2
  %463 = sext i32 %462 to i64
  %464 = add nsw i32 %row.3, 2
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %465
  %467 = getelementptr inbounds [644 x i8]* %466, i32 0, i64 %463
  %468 = load i8* %467, align 1
  %469 = zext i8 %468 to i64
  %470 = getelementptr inbounds [256 x i16]* @quicktake_100_load_raw.curve, i32 0, i64 %469
  %471 = load i16* %470, align 2
  %472 = load i32* @filters, align 4
  %473 = shl i32 %row.3, 1
  %474 = and i32 %473, 14
  %475 = and i32 %col.3, 1
  %476 = add nsw i32 %474, %475
  %477 = shl i32 %476, 1
  %478 = lshr i32 %472, %477
  %479 = and i32 %478, 3
  %480 = zext i32 %479 to i64
  %481 = load i16* @shrink, align 2
  %482 = zext i16 %481 to i32
  %483 = ashr i32 %row.3, %482
  %484 = load i16* @iwidth, align 2
  %485 = zext i16 %484 to i32
  %486 = mul nsw i32 %483, %485
  %487 = load i16* @shrink, align 2
  %488 = zext i16 %487 to i32
  %489 = ashr i32 %col.3, %488
  %490 = add nsw i32 %486, %489
  %491 = sext i32 %490 to i64
  %492 = load [4 x i16]** @image, align 8
  %493 = getelementptr inbounds [4 x i16]* %492, i64 %491
  %494 = getelementptr inbounds [4 x i16]* %493, i32 0, i64 %480
  store i16 %471, i16* %494, align 2
  br label %495

; <label>:495                                     ; preds = %461
  %496 = add nsw i32 %col.3, 1
  br label %457

; <label>:497                                     ; preds = %457
  br label %498

; <label>:498                                     ; preds = %497
  %499 = add nsw i32 %row.3, 1
  br label %452

; <label>:500                                     ; preds = %452
  store i32 1023, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32* @make_decoder_int(i32* %source, i32 %level) #0 {
  %1 = load %struct.decode** @free_decode, align 8
  %2 = getelementptr inbounds %struct.decode* %1, i32 1
  store %struct.decode* %2, %struct.decode** @free_decode, align 8
  %3 = getelementptr inbounds i32* %source, i64 0
  %4 = load i32* %3, align 4
  %5 = icmp slt i32 %level, %4
  br i1 %5, label %6, label %17

; <label>:6                                       ; preds = %0
  %7 = load %struct.decode** @free_decode, align 8
  %8 = getelementptr inbounds %struct.decode* %1, i32 0, i32 0
  %9 = getelementptr inbounds [2 x %struct.decode*]* %8, i32 0, i64 0
  store %struct.decode* %7, %struct.decode** %9, align 8
  %10 = add nsw i32 %level, 1
  %11 = call i32* @make_decoder_int(i32* %source, i32 %10)
  %12 = load %struct.decode** @free_decode, align 8
  %13 = getelementptr inbounds %struct.decode* %1, i32 0, i32 0
  %14 = getelementptr inbounds [2 x %struct.decode*]* %13, i32 0, i64 1
  store %struct.decode* %12, %struct.decode** %14, align 8
  %15 = add nsw i32 %level, 1
  %16 = call i32* @make_decoder_int(i32* %11, i32 %15)
  br label %22

; <label>:17                                      ; preds = %0
  %18 = getelementptr inbounds i32* %source, i64 1
  %19 = load i32* %18, align 4
  %20 = getelementptr inbounds %struct.decode* %1, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds i32* %source, i64 2
  br label %22

; <label>:22                                      ; preds = %17, %6
  %.0 = phi i32* [ %16, %6 ], [ %21, %17 ]
  ret i32* %.0
}

; Function Attrs: nounwind uwtable
define i32 @radc_token(i32 %tree) #0 {
  %1 = load %struct.decode** @free_decode, align 8
  %2 = icmp eq %struct.decode* %1, getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0)
  br i1 %2, label %3, label %15

; <label>:3                                       ; preds = %0
  store i32* getelementptr inbounds ([260 x i32]* @radc_token.source, i32 0, i32 0), i32** @radc_token.s, align 8
  br label %4

; <label>:4                                       ; preds = %12, %3
  %t.0 = phi i32 [ 0, %3 ], [ %13, %12 ]
  %5 = icmp slt i32 %t.0, 18
  br i1 %5, label %6, label %14

; <label>:6                                       ; preds = %4
  %7 = load %struct.decode** @free_decode, align 8
  %8 = sext i32 %t.0 to i64
  %9 = getelementptr inbounds [18 x %struct.decode*]* @radc_token.dstart, i32 0, i64 %8
  store %struct.decode* %7, %struct.decode** %9, align 8
  %10 = load i32** @radc_token.s, align 8
  %11 = call i32* @make_decoder_int(i32* %10, i32 0)
  store i32* %11, i32** @radc_token.s, align 8
  br label %12

; <label>:12                                      ; preds = %6
  %13 = add nsw i32 %t.0, 1
  br label %4

; <label>:14                                      ; preds = %4
  br label %15

; <label>:15                                      ; preds = %14, %0
  %16 = icmp eq i32 %tree, 18
  br i1 %16, label %17, label %28

; <label>:17                                      ; preds = %15
  %18 = load i32* @kodak_cbpp, align 4
  %19 = icmp eq i32 %18, 243
  br i1 %19, label %20, label %24

; <label>:20                                      ; preds = %17
  %21 = call i32 @getbits(i32 6)
  %22 = shl i32 %21, 2
  %23 = add i32 %22, 2
  br label %49

; <label>:24                                      ; preds = %17
  %25 = call i32 @getbits(i32 5)
  %26 = shl i32 %25, 3
  %27 = add i32 %26, 4
  br label %49

; <label>:28                                      ; preds = %15
  %29 = sext i32 %tree to i64
  %30 = getelementptr inbounds [18 x %struct.decode*]* @radc_token.dstart, i32 0, i64 %29
  %31 = load %struct.decode** %30, align 8
  store %struct.decode* %31, %struct.decode** @radc_token.dindex, align 8
  br label %32

; <label>:32                                      ; preds = %38, %28
  %33 = load %struct.decode** @radc_token.dindex, align 8
  %34 = getelementptr inbounds %struct.decode* %33, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.decode*]* %34, i32 0, i64 0
  %36 = load %struct.decode** %35, align 8
  %37 = icmp ne %struct.decode* %36, null
  br i1 %37, label %38, label %45

; <label>:38                                      ; preds = %32
  %39 = call i32 @getbits(i32 1)
  %40 = zext i32 %39 to i64
  %41 = load %struct.decode** @radc_token.dindex, align 8
  %42 = getelementptr inbounds %struct.decode* %41, i32 0, i32 0
  %43 = getelementptr inbounds [2 x %struct.decode*]* %42, i32 0, i64 %40
  %44 = load %struct.decode** %43, align 8
  store %struct.decode* %44, %struct.decode** @radc_token.dindex, align 8
  br label %32

; <label>:45                                      ; preds = %32
  %46 = load %struct.decode** @radc_token.dindex, align 8
  %47 = getelementptr inbounds %struct.decode* %46, i32 0, i32 1
  %48 = load i32* %47, align 4
  br label %49

; <label>:49                                      ; preds = %45, %24, %20
  %.0 = phi i32 [ %23, %20 ], [ %27, %24 ], [ %48, %45 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @kodak_radc_load_raw() #0 {
  %last = alloca [3 x i16], align 2
  %mul = alloca [3 x i16], align 2
  %buf = alloca [3 x [3 x [386 x i16]]], align 16
  %1 = bitcast [3 x i16]* %last to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([3 x i16]* @kodak_radc_load_raw.last to i8*), i64 6, i32 2, i1 false)
  call void @init_decoder()
  %2 = call i32 @getbits(i32 -1)
  br label %3

; <label>:3                                       ; preds = %11, %0
  %i.0 = phi i32 [ 0, %0 ], [ %12, %11 ]
  %4 = sext i32 %i.0 to i64
  %5 = icmp ult i64 %4, 3474
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %3
  %7 = sext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 0
  %9 = getelementptr inbounds [3 x [386 x i16]]* %8, i32 0, i64 0
  %10 = getelementptr inbounds [386 x i16]* %9, i32 0, i64 %7
  store i16 2048, i16* %10, align 2
  br label %11

; <label>:11                                      ; preds = %6
  %12 = add nsw i32 %i.0, 1
  br label %3

; <label>:13                                      ; preds = %3
  br label %14

; <label>:14                                      ; preds = %641, %13
  %row.0 = phi i32 [ 0, %13 ], [ %642, %641 ]
  %15 = load i16* @height, align 2
  %16 = zext i16 %15 to i32
  %17 = icmp slt i32 %row.0, %16
  br i1 %17, label %18, label %643

; <label>:18                                      ; preds = %14
  br label %19

; <label>:19                                      ; preds = %26, %18
  %c.0 = phi i32 [ 0, %18 ], [ %27, %26 ]
  %20 = icmp slt i32 %c.0, 3
  br i1 %20, label %21, label %28

; <label>:21                                      ; preds = %19
  %22 = call i32 @getbits(i32 6)
  %23 = trunc i32 %22 to i16
  %24 = sext i32 %c.0 to i64
  %25 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %24
  store i16 %23, i16* %25, align 2
  br label %26

; <label>:26                                      ; preds = %21
  %27 = add nsw i32 %c.0, 1
  br label %19

; <label>:28                                      ; preds = %19
  br label %29

; <label>:29                                      ; preds = %494, %28
  %c.1 = phi i32 [ 0, %28 ], [ %495, %494 ]
  %30 = icmp slt i32 %c.1, 3
  br i1 %30, label %31, label %496

; <label>:31                                      ; preds = %29
  %32 = sext i32 %c.1 to i64
  %33 = getelementptr inbounds [3 x i16]* %last, i32 0, i64 %32
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = sdiv i32 16777216, %35
  %37 = add nsw i32 %36, 2047
  %38 = ashr i32 %37, 12
  %39 = sext i32 %c.1 to i64
  %40 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %39
  %41 = load i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = mul nsw i32 %38, %42
  %44 = icmp sgt i32 %43, 65564
  %45 = select i1 %44, i32 10, i32 12
  %46 = sub nsw i32 %45, 1
  %47 = shl i32 -1, %46
  %48 = xor i32 %47, -1
  %49 = sub nsw i32 12, %45
  %50 = shl i32 %43, %49
  br label %51

; <label>:51                                      ; preds = %71, %31
  %i.1 = phi i32 [ 0, %31 ], [ %72, %71 ]
  %52 = sext i32 %i.1 to i64
  %53 = icmp ult i64 %52, 1158
  br i1 %53, label %54, label %73

; <label>:54                                      ; preds = %51
  %55 = sext i32 %i.1 to i64
  %56 = sext i32 %c.1 to i64
  %57 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %56
  %58 = getelementptr inbounds [3 x [386 x i16]]* %57, i32 0, i64 0
  %59 = getelementptr inbounds [386 x i16]* %58, i32 0, i64 %55
  %60 = load i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = mul nsw i32 %61, %50
  %63 = add nsw i32 %62, %48
  %64 = ashr i32 %63, %45
  %65 = trunc i32 %64 to i16
  %66 = sext i32 %i.1 to i64
  %67 = sext i32 %c.1 to i64
  %68 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %67
  %69 = getelementptr inbounds [3 x [386 x i16]]* %68, i32 0, i64 0
  %70 = getelementptr inbounds [386 x i16]* %69, i32 0, i64 %66
  store i16 %65, i16* %70, align 2
  br label %71

; <label>:71                                      ; preds = %54
  %72 = add nsw i32 %i.1, 1
  br label %51

; <label>:73                                      ; preds = %51
  %74 = sext i32 %c.1 to i64
  %75 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %74
  %76 = load i16* %75, align 2
  %77 = sext i32 %c.1 to i64
  %78 = getelementptr inbounds [3 x i16]* %last, i32 0, i64 %77
  store i16 %76, i16* %78, align 2
  br label %79

; <label>:79                                      ; preds = %491, %73
  %r.0 = phi i32 [ 0, %73 ], [ %492, %491 ]
  %80 = icmp ne i32 %c.1, 0
  %81 = xor i1 %80, true
  %82 = zext i1 %81 to i32
  %83 = icmp sle i32 %r.0, %82
  br i1 %83, label %84, label %493

; <label>:84                                      ; preds = %79
  %85 = sext i32 %c.1 to i64
  %86 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %85
  %87 = load i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = shl i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = load i16* @width, align 2
  %92 = zext i16 %91 to i32
  %93 = sdiv i32 %92, 2
  %94 = sext i32 %93 to i64
  %95 = sext i32 %c.1 to i64
  %96 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %95
  %97 = getelementptr inbounds [3 x [386 x i16]]* %96, i32 0, i64 2
  %98 = getelementptr inbounds [386 x i16]* %97, i32 0, i64 %94
  store i16 %90, i16* %98, align 2
  %99 = load i16* @width, align 2
  %100 = zext i16 %99 to i32
  %101 = sdiv i32 %100, 2
  %102 = sext i32 %101 to i64
  %103 = sext i32 %c.1 to i64
  %104 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %103
  %105 = getelementptr inbounds [3 x [386 x i16]]* %104, i32 0, i64 1
  %106 = getelementptr inbounds [386 x i16]* %105, i32 0, i64 %102
  store i16 %90, i16* %106, align 2
  %107 = load i16* @width, align 2
  %108 = zext i16 %107 to i32
  %109 = sdiv i32 %108, 2
  br label %110

; <label>:110                                     ; preds = %360, %84
  %tree.0 = phi i32 [ 1, %84 ], [ %113, %360 ]
  %col.0 = phi i32 [ %109, %84 ], [ %col.3, %360 ]
  %111 = icmp sgt i32 %col.0, 0
  br i1 %111, label %112, label %361

; <label>:112                                     ; preds = %110
  %113 = call i32 @radc_token(i32 %tree.0)
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %229

; <label>:115                                     ; preds = %112
  %116 = sub nsw i32 %col.0, 2
  %117 = icmp eq i32 %113, 8
  br i1 %117, label %118, label %146

; <label>:118                                     ; preds = %115
  br label %119

; <label>:119                                     ; preds = %143, %118
  %y.0 = phi i32 [ 1, %118 ], [ %144, %143 ]
  %120 = icmp slt i32 %y.0, 3
  br i1 %120, label %121, label %145

; <label>:121                                     ; preds = %119
  %122 = add nsw i32 %116, 1
  br label %123

; <label>:123                                     ; preds = %140, %121
  %x.0 = phi i32 [ %122, %121 ], [ %141, %140 ]
  %124 = icmp sge i32 %x.0, %116
  br i1 %124, label %125, label %142

; <label>:125                                     ; preds = %123
  %126 = add nsw i32 %113, 10
  %127 = call i32 @radc_token(i32 %126)
  %128 = sext i32 %c.1 to i64
  %129 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %128
  %130 = load i16* %129, align 2
  %131 = sext i16 %130 to i32
  %132 = mul nsw i32 %127, %131
  %133 = trunc i32 %132 to i16
  %134 = sext i32 %x.0 to i64
  %135 = sext i32 %y.0 to i64
  %136 = sext i32 %c.1 to i64
  %137 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %136
  %138 = getelementptr inbounds [3 x [386 x i16]]* %137, i32 0, i64 %135
  %139 = getelementptr inbounds [386 x i16]* %138, i32 0, i64 %134
  store i16 %133, i16* %139, align 2
  br label %140

; <label>:140                                     ; preds = %125
  %141 = add nsw i32 %x.0, -1
  br label %123

; <label>:142                                     ; preds = %123
  br label %143

; <label>:143                                     ; preds = %142
  %144 = add nsw i32 %y.0, 1
  br label %119

; <label>:145                                     ; preds = %119
  br label %228

; <label>:146                                     ; preds = %115
  br label %147

; <label>:147                                     ; preds = %225, %146
  %y.1 = phi i32 [ 1, %146 ], [ %226, %225 ]
  %148 = icmp slt i32 %y.1, 3
  br i1 %148, label %149, label %227

; <label>:149                                     ; preds = %147
  %150 = add nsw i32 %116, 1
  br label %151

; <label>:151                                     ; preds = %222, %149
  %x.1 = phi i32 [ %150, %149 ], [ %223, %222 ]
  %152 = icmp sge i32 %x.1, %116
  br i1 %152, label %153, label %224

; <label>:153                                     ; preds = %151
  %154 = add nsw i32 %113, 10
  %155 = call i32 @radc_token(i32 %154)
  %156 = mul nsw i32 %155, 16
  %157 = icmp ne i32 %c.1, 0
  br i1 %157, label %158, label %179

; <label>:158                                     ; preds = %153
  %159 = sext i32 %x.1 to i64
  %160 = sub nsw i32 %y.1, 1
  %161 = sext i32 %160 to i64
  %162 = sext i32 %c.1 to i64
  %163 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %162
  %164 = getelementptr inbounds [3 x [386 x i16]]* %163, i32 0, i64 %161
  %165 = getelementptr inbounds [386 x i16]* %164, i32 0, i64 %159
  %166 = load i16* %165, align 2
  %167 = sext i16 %166 to i32
  %168 = add nsw i32 %x.1, 1
  %169 = sext i32 %168 to i64
  %170 = sext i32 %y.1 to i64
  %171 = sext i32 %c.1 to i64
  %172 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %171
  %173 = getelementptr inbounds [3 x [386 x i16]]* %172, i32 0, i64 %170
  %174 = getelementptr inbounds [386 x i16]* %173, i32 0, i64 %169
  %175 = load i16* %174, align 2
  %176 = sext i16 %175 to i32
  %177 = add nsw i32 %167, %176
  %178 = sdiv i32 %177, 2
  br label %212

; <label>:179                                     ; preds = %153
  %180 = add nsw i32 %x.1, 1
  %181 = sext i32 %180 to i64
  %182 = sub nsw i32 %y.1, 1
  %183 = sext i32 %182 to i64
  %184 = sext i32 %c.1 to i64
  %185 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %184
  %186 = getelementptr inbounds [3 x [386 x i16]]* %185, i32 0, i64 %183
  %187 = getelementptr inbounds [386 x i16]* %186, i32 0, i64 %181
  %188 = load i16* %187, align 2
  %189 = sext i16 %188 to i32
  %190 = sext i32 %x.1 to i64
  %191 = sub nsw i32 %y.1, 1
  %192 = sext i32 %191 to i64
  %193 = sext i32 %c.1 to i64
  %194 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %193
  %195 = getelementptr inbounds [3 x [386 x i16]]* %194, i32 0, i64 %192
  %196 = getelementptr inbounds [386 x i16]* %195, i32 0, i64 %190
  %197 = load i16* %196, align 2
  %198 = sext i16 %197 to i32
  %199 = mul nsw i32 2, %198
  %200 = add nsw i32 %189, %199
  %201 = add nsw i32 %x.1, 1
  %202 = sext i32 %201 to i64
  %203 = sext i32 %y.1 to i64
  %204 = sext i32 %c.1 to i64
  %205 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %204
  %206 = getelementptr inbounds [3 x [386 x i16]]* %205, i32 0, i64 %203
  %207 = getelementptr inbounds [386 x i16]* %206, i32 0, i64 %202
  %208 = load i16* %207, align 2
  %209 = sext i16 %208 to i32
  %210 = add nsw i32 %200, %209
  %211 = sdiv i32 %210, 4
  br label %212

; <label>:212                                     ; preds = %179, %158
  %213 = phi i32 [ %178, %158 ], [ %211, %179 ]
  %214 = add nsw i32 %156, %213
  %215 = trunc i32 %214 to i16
  %216 = sext i32 %x.1 to i64
  %217 = sext i32 %y.1 to i64
  %218 = sext i32 %c.1 to i64
  %219 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %218
  %220 = getelementptr inbounds [3 x [386 x i16]]* %219, i32 0, i64 %217
  %221 = getelementptr inbounds [386 x i16]* %220, i32 0, i64 %216
  store i16 %215, i16* %221, align 2
  br label %222

; <label>:222                                     ; preds = %212
  %223 = add nsw i32 %x.1, -1
  br label %151

; <label>:224                                     ; preds = %151
  br label %225

; <label>:225                                     ; preds = %224
  %226 = add nsw i32 %y.1, 1
  br label %147

; <label>:227                                     ; preds = %147
  br label %228

; <label>:228                                     ; preds = %227, %145
  br label %360

; <label>:229                                     ; preds = %112
  br label %230

; <label>:230                                     ; preds = %357, %229
  %col.1 = phi i32 [ %col.0, %229 ], [ %col.2, %357 ]
  %231 = icmp sgt i32 %col.1, 2
  br i1 %231, label %232, label %235

; <label>:232                                     ; preds = %230
  %233 = call i32 @radc_token(i32 9)
  %234 = add nsw i32 %233, 1
  br label %236

; <label>:235                                     ; preds = %230
  br label %236

; <label>:236                                     ; preds = %235, %232
  %237 = phi i32 [ %234, %232 ], [ 1, %235 ]
  br label %238

; <label>:238                                     ; preds = %354, %236
  %rep.0 = phi i32 [ 0, %236 ], [ %355, %354 ]
  %col.2 = phi i32 [ %col.1, %236 ], [ %247, %354 ]
  %239 = icmp slt i32 %rep.0, 8
  br i1 %239, label %240, label %244

; <label>:240                                     ; preds = %238
  %241 = icmp slt i32 %rep.0, %237
  br i1 %241, label %242, label %244

; <label>:242                                     ; preds = %240
  %243 = icmp sgt i32 %col.2, 0
  br label %244

; <label>:244                                     ; preds = %242, %240, %238
  %245 = phi i1 [ false, %240 ], [ false, %238 ], [ %243, %242 ]
  br i1 %245, label %246, label %356

; <label>:246                                     ; preds = %244
  %247 = sub nsw i32 %col.2, 2
  br label %248

; <label>:248                                     ; preds = %322, %246
  %y.2 = phi i32 [ 1, %246 ], [ %323, %322 ]
  %249 = icmp slt i32 %y.2, 3
  br i1 %249, label %250, label %324

; <label>:250                                     ; preds = %248
  %251 = add nsw i32 %247, 1
  br label %252

; <label>:252                                     ; preds = %319, %250
  %x.2 = phi i32 [ %251, %250 ], [ %320, %319 ]
  %253 = icmp sge i32 %x.2, %247
  br i1 %253, label %254, label %321

; <label>:254                                     ; preds = %252
  %255 = icmp ne i32 %c.1, 0
  br i1 %255, label %256, label %277

; <label>:256                                     ; preds = %254
  %257 = sext i32 %x.2 to i64
  %258 = sub nsw i32 %y.2, 1
  %259 = sext i32 %258 to i64
  %260 = sext i32 %c.1 to i64
  %261 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %260
  %262 = getelementptr inbounds [3 x [386 x i16]]* %261, i32 0, i64 %259
  %263 = getelementptr inbounds [386 x i16]* %262, i32 0, i64 %257
  %264 = load i16* %263, align 2
  %265 = sext i16 %264 to i32
  %266 = add nsw i32 %x.2, 1
  %267 = sext i32 %266 to i64
  %268 = sext i32 %y.2 to i64
  %269 = sext i32 %c.1 to i64
  %270 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %269
  %271 = getelementptr inbounds [3 x [386 x i16]]* %270, i32 0, i64 %268
  %272 = getelementptr inbounds [386 x i16]* %271, i32 0, i64 %267
  %273 = load i16* %272, align 2
  %274 = sext i16 %273 to i32
  %275 = add nsw i32 %265, %274
  %276 = sdiv i32 %275, 2
  br label %310

; <label>:277                                     ; preds = %254
  %278 = add nsw i32 %x.2, 1
  %279 = sext i32 %278 to i64
  %280 = sub nsw i32 %y.2, 1
  %281 = sext i32 %280 to i64
  %282 = sext i32 %c.1 to i64
  %283 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %282
  %284 = getelementptr inbounds [3 x [386 x i16]]* %283, i32 0, i64 %281
  %285 = getelementptr inbounds [386 x i16]* %284, i32 0, i64 %279
  %286 = load i16* %285, align 2
  %287 = sext i16 %286 to i32
  %288 = sext i32 %x.2 to i64
  %289 = sub nsw i32 %y.2, 1
  %290 = sext i32 %289 to i64
  %291 = sext i32 %c.1 to i64
  %292 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %291
  %293 = getelementptr inbounds [3 x [386 x i16]]* %292, i32 0, i64 %290
  %294 = getelementptr inbounds [386 x i16]* %293, i32 0, i64 %288
  %295 = load i16* %294, align 2
  %296 = sext i16 %295 to i32
  %297 = mul nsw i32 2, %296
  %298 = add nsw i32 %287, %297
  %299 = add nsw i32 %x.2, 1
  %300 = sext i32 %299 to i64
  %301 = sext i32 %y.2 to i64
  %302 = sext i32 %c.1 to i64
  %303 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %302
  %304 = getelementptr inbounds [3 x [386 x i16]]* %303, i32 0, i64 %301
  %305 = getelementptr inbounds [386 x i16]* %304, i32 0, i64 %300
  %306 = load i16* %305, align 2
  %307 = sext i16 %306 to i32
  %308 = add nsw i32 %298, %307
  %309 = sdiv i32 %308, 4
  br label %310

; <label>:310                                     ; preds = %277, %256
  %311 = phi i32 [ %276, %256 ], [ %309, %277 ]
  %312 = trunc i32 %311 to i16
  %313 = sext i32 %x.2 to i64
  %314 = sext i32 %y.2 to i64
  %315 = sext i32 %c.1 to i64
  %316 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %315
  %317 = getelementptr inbounds [3 x [386 x i16]]* %316, i32 0, i64 %314
  %318 = getelementptr inbounds [386 x i16]* %317, i32 0, i64 %313
  store i16 %312, i16* %318, align 2
  br label %319

; <label>:319                                     ; preds = %310
  %320 = add nsw i32 %x.2, -1
  br label %252

; <label>:321                                     ; preds = %252
  br label %322

; <label>:322                                     ; preds = %321
  %323 = add nsw i32 %y.2, 1
  br label %248

; <label>:324                                     ; preds = %248
  %325 = and i32 %rep.0, 1
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %353

; <label>:327                                     ; preds = %324
  %328 = call i32 @radc_token(i32 10)
  %329 = shl i32 %328, 4
  br label %330

; <label>:330                                     ; preds = %350, %327
  %y.3 = phi i32 [ 1, %327 ], [ %351, %350 ]
  %331 = icmp slt i32 %y.3, 3
  br i1 %331, label %332, label %352

; <label>:332                                     ; preds = %330
  %333 = add nsw i32 %247, 1
  br label %334

; <label>:334                                     ; preds = %347, %332
  %x.3 = phi i32 [ %333, %332 ], [ %348, %347 ]
  %335 = icmp sge i32 %x.3, %247
  br i1 %335, label %336, label %349

; <label>:336                                     ; preds = %334
  %337 = sext i32 %x.3 to i64
  %338 = sext i32 %y.3 to i64
  %339 = sext i32 %c.1 to i64
  %340 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %339
  %341 = getelementptr inbounds [3 x [386 x i16]]* %340, i32 0, i64 %338
  %342 = getelementptr inbounds [386 x i16]* %341, i32 0, i64 %337
  %343 = load i16* %342, align 2
  %344 = sext i16 %343 to i32
  %345 = add nsw i32 %344, %329
  %346 = trunc i32 %345 to i16
  store i16 %346, i16* %342, align 2
  br label %347

; <label>:347                                     ; preds = %336
  %348 = add nsw i32 %x.3, -1
  br label %334

; <label>:349                                     ; preds = %334
  br label %350

; <label>:350                                     ; preds = %349
  %351 = add nsw i32 %y.3, 1
  br label %330

; <label>:352                                     ; preds = %330
  br label %353

; <label>:353                                     ; preds = %352, %324
  br label %354

; <label>:354                                     ; preds = %353
  %355 = add nsw i32 %rep.0, 1
  br label %238

; <label>:356                                     ; preds = %244
  br label %357

; <label>:357                                     ; preds = %356
  %358 = icmp eq i32 %237, 9
  br i1 %358, label %230, label %359

; <label>:359                                     ; preds = %357
  br label %360

; <label>:360                                     ; preds = %359, %228
  %col.3 = phi i32 [ %116, %228 ], [ %col.2, %359 ]
  br label %110

; <label>:361                                     ; preds = %110
  br label %362

; <label>:362                                     ; preds = %468, %361
  %y.4 = phi i32 [ 0, %361 ], [ %469, %468 ]
  %363 = icmp slt i32 %y.4, 2
  br i1 %363, label %364, label %470

; <label>:364                                     ; preds = %362
  br label %365

; <label>:365                                     ; preds = %465, %364
  %x.4 = phi i32 [ 0, %364 ], [ %466, %465 ]
  %366 = load i16* @width, align 2
  %367 = zext i16 %366 to i32
  %368 = sdiv i32 %367, 2
  %369 = icmp slt i32 %x.4, %368
  br i1 %369, label %370, label %467

; <label>:370                                     ; preds = %365
  %371 = sext i32 %x.4 to i64
  %372 = add nsw i32 %y.4, 1
  %373 = sext i32 %372 to i64
  %374 = sext i32 %c.1 to i64
  %375 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %374
  %376 = getelementptr inbounds [3 x [386 x i16]]* %375, i32 0, i64 %373
  %377 = getelementptr inbounds [386 x i16]* %376, i32 0, i64 %371
  %378 = load i16* %377, align 2
  %379 = sext i16 %378 to i32
  %380 = shl i32 %379, 4
  %381 = sext i32 %c.1 to i64
  %382 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %381
  %383 = load i16* %382, align 2
  %384 = sext i16 %383 to i32
  %385 = sdiv i32 %380, %384
  %386 = icmp slt i32 %385, 0
  br i1 %386, label %387, label %388

; <label>:387                                     ; preds = %370
  br label %388

; <label>:388                                     ; preds = %387, %370
  %val.0 = phi i32 [ 0, %387 ], [ %385, %370 ]
  %389 = icmp ne i32 %c.1, 0
  br i1 %389, label %390, label %429

; <label>:390                                     ; preds = %388
  %391 = trunc i32 %val.0 to i16
  %392 = load i32* @filters, align 4
  %393 = mul nsw i32 %y.4, 2
  %394 = add nsw i32 %row.0, %393
  %395 = add nsw i32 %394, %c.1
  %396 = sub nsw i32 %395, 1
  %397 = shl i32 %396, 1
  %398 = and i32 %397, 14
  %399 = mul nsw i32 %x.4, 2
  %400 = add nsw i32 %399, 2
  %401 = sub nsw i32 %400, %c.1
  %402 = and i32 %401, 1
  %403 = add nsw i32 %398, %402
  %404 = shl i32 %403, 1
  %405 = lshr i32 %392, %404
  %406 = and i32 %405, 3
  %407 = zext i32 %406 to i64
  %408 = mul nsw i32 %y.4, 2
  %409 = add nsw i32 %row.0, %408
  %410 = add nsw i32 %409, %c.1
  %411 = sub nsw i32 %410, 1
  %412 = load i16* @shrink, align 2
  %413 = zext i16 %412 to i32
  %414 = ashr i32 %411, %413
  %415 = load i16* @iwidth, align 2
  %416 = zext i16 %415 to i32
  %417 = mul nsw i32 %414, %416
  %418 = mul nsw i32 %x.4, 2
  %419 = add nsw i32 %418, 2
  %420 = sub nsw i32 %419, %c.1
  %421 = load i16* @shrink, align 2
  %422 = zext i16 %421 to i32
  %423 = ashr i32 %420, %422
  %424 = add nsw i32 %417, %423
  %425 = sext i32 %424 to i64
  %426 = load [4 x i16]** @image, align 8
  %427 = getelementptr inbounds [4 x i16]* %426, i64 %425
  %428 = getelementptr inbounds [4 x i16]* %427, i32 0, i64 %407
  store i16 %391, i16* %428, align 2
  br label %464

; <label>:429                                     ; preds = %388
  %430 = trunc i32 %val.0 to i16
  %431 = load i32* @filters, align 4
  %432 = mul nsw i32 %r.0, 2
  %433 = add nsw i32 %row.0, %432
  %434 = add nsw i32 %433, %y.4
  %435 = shl i32 %434, 1
  %436 = and i32 %435, 14
  %437 = mul nsw i32 %x.4, 2
  %438 = add nsw i32 %437, %y.4
  %439 = and i32 %438, 1
  %440 = add nsw i32 %436, %439
  %441 = shl i32 %440, 1
  %442 = lshr i32 %431, %441
  %443 = and i32 %442, 3
  %444 = zext i32 %443 to i64
  %445 = mul nsw i32 %r.0, 2
  %446 = add nsw i32 %row.0, %445
  %447 = add nsw i32 %446, %y.4
  %448 = load i16* @shrink, align 2
  %449 = zext i16 %448 to i32
  %450 = ashr i32 %447, %449
  %451 = load i16* @iwidth, align 2
  %452 = zext i16 %451 to i32
  %453 = mul nsw i32 %450, %452
  %454 = mul nsw i32 %x.4, 2
  %455 = add nsw i32 %454, %y.4
  %456 = load i16* @shrink, align 2
  %457 = zext i16 %456 to i32
  %458 = ashr i32 %455, %457
  %459 = add nsw i32 %453, %458
  %460 = sext i32 %459 to i64
  %461 = load [4 x i16]** @image, align 8
  %462 = getelementptr inbounds [4 x i16]* %461, i64 %460
  %463 = getelementptr inbounds [4 x i16]* %462, i32 0, i64 %444
  store i16 %430, i16* %463, align 2
  br label %464

; <label>:464                                     ; preds = %429, %390
  br label %465

; <label>:465                                     ; preds = %464
  %466 = add nsw i32 %x.4, 1
  br label %365

; <label>:467                                     ; preds = %365
  br label %468

; <label>:468                                     ; preds = %467
  %469 = add nsw i32 %y.4, 1
  br label %362

; <label>:470                                     ; preds = %362
  %471 = sext i32 %c.1 to i64
  %472 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %471
  %473 = getelementptr inbounds [3 x [386 x i16]]* %472, i32 0, i64 0
  %474 = getelementptr inbounds [386 x i16]* %473, i32 0, i32 0
  %475 = icmp ne i32 %c.1, 0
  %476 = xor i1 %475, true
  %477 = zext i1 %476 to i32
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i16* %474, i64 %478
  %480 = bitcast i16* %479 to i8*
  %481 = sext i32 %c.1 to i64
  %482 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %481
  %483 = getelementptr inbounds [3 x [386 x i16]]* %482, i32 0, i64 2
  %484 = bitcast [386 x i16]* %483 to i8*
  %485 = icmp ne i32 %c.1, 0
  %486 = xor i1 %485, true
  %487 = zext i1 %486 to i32
  %488 = mul nsw i32 2, %487
  %489 = sext i32 %488 to i64
  %490 = sub i64 772, %489
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %480, i8* %484, i64 %490, i32 2, i1 false)
  br label %491

; <label>:491                                     ; preds = %470
  %492 = add nsw i32 %r.0, 1
  br label %79

; <label>:493                                     ; preds = %79
  br label %494

; <label>:494                                     ; preds = %493
  %495 = add nsw i32 %c.1, 1
  br label %29

; <label>:496                                     ; preds = %29
  br label %497

; <label>:497                                     ; preds = %638, %496
  %y.5 = phi i32 [ %row.0, %496 ], [ %639, %638 ]
  %498 = add nsw i32 %row.0, 4
  %499 = icmp slt i32 %y.5, %498
  br i1 %499, label %500, label %640

; <label>:500                                     ; preds = %497
  br label %501

; <label>:501                                     ; preds = %635, %500
  %x.5 = phi i32 [ 0, %500 ], [ %636, %635 ]
  %502 = load i16* @width, align 2
  %503 = zext i16 %502 to i32
  %504 = icmp slt i32 %x.5, %503
  br i1 %504, label %505, label %637

; <label>:505                                     ; preds = %501
  %506 = add nsw i32 %x.5, %y.5
  %507 = and i32 %506, 1
  %508 = icmp ne i32 %507, 0
  br i1 %508, label %509, label %634

; <label>:509                                     ; preds = %505
  %510 = icmp ne i32 %x.5, 0
  br i1 %510, label %511, label %513

; <label>:511                                     ; preds = %509
  %512 = sub nsw i32 %x.5, 1
  br label %515

; <label>:513                                     ; preds = %509
  %514 = add nsw i32 %x.5, 1
  br label %515

; <label>:515                                     ; preds = %513, %511
  %516 = phi i32 [ %512, %511 ], [ %514, %513 ]
  %517 = add nsw i32 %x.5, 1
  %518 = load i16* @width, align 2
  %519 = zext i16 %518 to i32
  %520 = icmp slt i32 %517, %519
  br i1 %520, label %521, label %523

; <label>:521                                     ; preds = %515
  %522 = add nsw i32 %x.5, 1
  br label %525

; <label>:523                                     ; preds = %515
  %524 = sub nsw i32 %x.5, 1
  br label %525

; <label>:525                                     ; preds = %523, %521
  %526 = phi i32 [ %522, %521 ], [ %524, %523 ]
  %527 = load i32* @filters, align 4
  %528 = shl i32 %y.5, 1
  %529 = and i32 %528, 14
  %530 = and i32 %x.5, 1
  %531 = add nsw i32 %529, %530
  %532 = shl i32 %531, 1
  %533 = lshr i32 %527, %532
  %534 = and i32 %533, 3
  %535 = zext i32 %534 to i64
  %536 = load i16* @shrink, align 2
  %537 = zext i16 %536 to i32
  %538 = ashr i32 %y.5, %537
  %539 = load i16* @iwidth, align 2
  %540 = zext i16 %539 to i32
  %541 = mul nsw i32 %538, %540
  %542 = load i16* @shrink, align 2
  %543 = zext i16 %542 to i32
  %544 = ashr i32 %x.5, %543
  %545 = add nsw i32 %541, %544
  %546 = sext i32 %545 to i64
  %547 = load [4 x i16]** @image, align 8
  %548 = getelementptr inbounds [4 x i16]* %547, i64 %546
  %549 = getelementptr inbounds [4 x i16]* %548, i32 0, i64 %535
  %550 = load i16* %549, align 2
  %551 = zext i16 %550 to i32
  %552 = sub nsw i32 %551, 2048
  %553 = mul nsw i32 %552, 2
  %554 = load i32* @filters, align 4
  %555 = shl i32 %y.5, 1
  %556 = and i32 %555, 14
  %557 = and i32 %516, 1
  %558 = add nsw i32 %556, %557
  %559 = shl i32 %558, 1
  %560 = lshr i32 %554, %559
  %561 = and i32 %560, 3
  %562 = zext i32 %561 to i64
  %563 = load i16* @shrink, align 2
  %564 = zext i16 %563 to i32
  %565 = ashr i32 %y.5, %564
  %566 = load i16* @iwidth, align 2
  %567 = zext i16 %566 to i32
  %568 = mul nsw i32 %565, %567
  %569 = load i16* @shrink, align 2
  %570 = zext i16 %569 to i32
  %571 = ashr i32 %516, %570
  %572 = add nsw i32 %568, %571
  %573 = sext i32 %572 to i64
  %574 = load [4 x i16]** @image, align 8
  %575 = getelementptr inbounds [4 x i16]* %574, i64 %573
  %576 = getelementptr inbounds [4 x i16]* %575, i32 0, i64 %562
  %577 = load i16* %576, align 2
  %578 = zext i16 %577 to i32
  %579 = load i32* @filters, align 4
  %580 = shl i32 %y.5, 1
  %581 = and i32 %580, 14
  %582 = and i32 %526, 1
  %583 = add nsw i32 %581, %582
  %584 = shl i32 %583, 1
  %585 = lshr i32 %579, %584
  %586 = and i32 %585, 3
  %587 = zext i32 %586 to i64
  %588 = load i16* @shrink, align 2
  %589 = zext i16 %588 to i32
  %590 = ashr i32 %y.5, %589
  %591 = load i16* @iwidth, align 2
  %592 = zext i16 %591 to i32
  %593 = mul nsw i32 %590, %592
  %594 = load i16* @shrink, align 2
  %595 = zext i16 %594 to i32
  %596 = ashr i32 %526, %595
  %597 = add nsw i32 %593, %596
  %598 = sext i32 %597 to i64
  %599 = load [4 x i16]** @image, align 8
  %600 = getelementptr inbounds [4 x i16]* %599, i64 %598
  %601 = getelementptr inbounds [4 x i16]* %600, i32 0, i64 %587
  %602 = load i16* %601, align 2
  %603 = zext i16 %602 to i32
  %604 = add nsw i32 %578, %603
  %605 = sdiv i32 %604, 2
  %606 = add nsw i32 %553, %605
  %607 = icmp slt i32 %606, 0
  br i1 %607, label %608, label %609

; <label>:608                                     ; preds = %525
  br label %609

; <label>:609                                     ; preds = %608, %525
  %val.1 = phi i32 [ 0, %608 ], [ %606, %525 ]
  %610 = trunc i32 %val.1 to i16
  %611 = load i32* @filters, align 4
  %612 = shl i32 %y.5, 1
  %613 = and i32 %612, 14
  %614 = and i32 %x.5, 1
  %615 = add nsw i32 %613, %614
  %616 = shl i32 %615, 1
  %617 = lshr i32 %611, %616
  %618 = and i32 %617, 3
  %619 = zext i32 %618 to i64
  %620 = load i16* @shrink, align 2
  %621 = zext i16 %620 to i32
  %622 = ashr i32 %y.5, %621
  %623 = load i16* @iwidth, align 2
  %624 = zext i16 %623 to i32
  %625 = mul nsw i32 %622, %624
  %626 = load i16* @shrink, align 2
  %627 = zext i16 %626 to i32
  %628 = ashr i32 %x.5, %627
  %629 = add nsw i32 %625, %628
  %630 = sext i32 %629 to i64
  %631 = load [4 x i16]** @image, align 8
  %632 = getelementptr inbounds [4 x i16]* %631, i64 %630
  %633 = getelementptr inbounds [4 x i16]* %632, i32 0, i64 %619
  store i16 %610, i16* %633, align 2
  br label %634

; <label>:634                                     ; preds = %609, %505
  br label %635

; <label>:635                                     ; preds = %634
  %636 = add nsw i32 %x.5, 1
  br label %501

; <label>:637                                     ; preds = %501
  br label %638

; <label>:638                                     ; preds = %637
  %639 = add nsw i32 %y.5, 1
  br label %497

; <label>:640                                     ; preds = %497
  br label %641

; <label>:641                                     ; preds = %640
  %642 = add nsw i32 %row.0, 4
  br label %14

; <label>:643                                     ; preds = %14
  store i32 4095, i32* @maximum, align 4
  store i32 0, i32* @use_gamma, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_jpeg_load_raw() #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_dc120_load_raw() #0 {
  %pixel = alloca [848 x i8], align 16
  br label %1

; <label>:1                                       ; preds = %59, %0
  %row.0 = phi i32 [ 0, %0 ], [ %60, %59 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %row.0, %3
  br i1 %4, label %5, label %61

; <label>:5                                       ; preds = %1
  %6 = getelementptr inbounds [848 x i8]* %pixel, i32 0, i32 0
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i64 @fread(i8* %6, i64 1, i64 848, %struct._IO_FILE* %7)
  %9 = icmp ult i64 %8, 848
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %5
  call void @derror()
  br label %11

; <label>:11                                      ; preds = %10, %5
  %12 = and i32 %row.0, 3
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [4 x i32]* @kodak_dc120_load_raw.mul, i32 0, i64 %13
  %15 = load i32* %14, align 4
  %16 = mul nsw i32 %row.0, %15
  %17 = and i32 %row.0, 3
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [4 x i32]* @kodak_dc120_load_raw.add, i32 0, i64 %18
  %20 = load i32* %19, align 4
  %21 = add nsw i32 %16, %20
  br label %22

; <label>:22                                      ; preds = %56, %11
  %col.0 = phi i32 [ 0, %11 ], [ %57, %56 ]
  %23 = load i16* @width, align 2
  %24 = zext i16 %23 to i32
  %25 = icmp slt i32 %col.0, %24
  br i1 %25, label %26, label %58

; <label>:26                                      ; preds = %22
  %27 = add nsw i32 %col.0, %21
  %28 = srem i32 %27, 848
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [848 x i8]* %pixel, i32 0, i64 %29
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i16
  %33 = load i32* @filters, align 4
  %34 = shl i32 %row.0, 1
  %35 = and i32 %34, 14
  %36 = and i32 %col.0, 1
  %37 = add nsw i32 %35, %36
  %38 = shl i32 %37, 1
  %39 = lshr i32 %33, %38
  %40 = and i32 %39, 3
  %41 = zext i32 %40 to i64
  %42 = load i16* @shrink, align 2
  %43 = zext i16 %42 to i32
  %44 = ashr i32 %row.0, %43
  %45 = load i16* @iwidth, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nsw i32 %44, %46
  %48 = load i16* @shrink, align 2
  %49 = zext i16 %48 to i32
  %50 = ashr i32 %col.0, %49
  %51 = add nsw i32 %47, %50
  %52 = sext i32 %51 to i64
  %53 = load [4 x i16]** @image, align 8
  %54 = getelementptr inbounds [4 x i16]* %53, i64 %52
  %55 = getelementptr inbounds [4 x i16]* %54, i32 0, i64 %41
  store i16 %32, i16* %55, align 2
  br label %56

; <label>:56                                      ; preds = %26
  %57 = add nsw i32 %col.0, 1
  br label %22

; <label>:58                                      ; preds = %22
  br label %59

; <label>:59                                      ; preds = %58
  %60 = add nsw i32 %row.0, 1
  br label %1

; <label>:61                                      ; preds = %1
  store i32 255, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @eight_bit_load_raw() #0 {
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i64
  %3 = call noalias i8* @calloc(i64 %2, i64 1) #4
  call void @merror(i8* %3, i8* getelementptr inbounds ([21 x i8]* @.str27, i32 0, i32 0))
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = load i16* @top_margin, align 2
  %6 = zext i16 %5 to i32
  %7 = load i16* @raw_width, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nsw i32 %6, %8
  %10 = sext i32 %9 to i64
  %11 = call i32 @fseek(%struct._IO_FILE* %4, i64 %10, i32 1)
  br label %12

; <label>:12                                      ; preds = %81, %0
  %row.0 = phi i32 [ 0, %0 ], [ %82, %81 ]
  %lblack.0 = phi i32 [ 0, %0 ], [ %lblack.1, %81 ]
  %13 = load i16* @height, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp ult i32 %row.0, %14
  br i1 %15, label %16, label %83

; <label>:16                                      ; preds = %12
  %17 = load i16* @raw_width, align 2
  %18 = zext i16 %17 to i64
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = call i64 @fread(i8* %3, i64 1, i64 %18, %struct._IO_FILE* %19)
  %21 = load i16* @raw_width, align 2
  %22 = zext i16 %21 to i64
  %23 = icmp ult i64 %20, %22
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %16
  call void @derror()
  br label %25

; <label>:25                                      ; preds = %24, %16
  br label %26

; <label>:26                                      ; preds = %78, %25
  %col.0 = phi i32 [ 0, %25 ], [ %79, %78 ]
  %lblack.1 = phi i32 [ %lblack.0, %25 ], [ %lblack.2, %78 ]
  %27 = load i16* @raw_width, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp ult i32 %col.0, %28
  br i1 %29, label %30, label %80

; <label>:30                                      ; preds = %26
  %31 = zext i32 %col.0 to i64
  %32 = getelementptr inbounds i8* %3, i64 %31
  %33 = load i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %34
  %36 = load i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = load i16* @left_margin, align 2
  %39 = zext i16 %38 to i32
  %40 = sub i32 %col.0, %39
  %41 = load i16* @width, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp ult i32 %40, %42
  br i1 %43, label %44, label %75

; <label>:44                                      ; preds = %30
  %45 = trunc i32 %37 to i16
  %46 = load i32* @filters, align 4
  %47 = shl i32 %row.0, 1
  %48 = and i32 %47, 14
  %49 = load i16* @left_margin, align 2
  %50 = zext i16 %49 to i32
  %51 = sub i32 %col.0, %50
  %52 = and i32 %51, 1
  %53 = add i32 %48, %52
  %54 = shl i32 %53, 1
  %55 = lshr i32 %46, %54
  %56 = and i32 %55, 3
  %57 = zext i32 %56 to i64
  %58 = load i16* @shrink, align 2
  %59 = zext i16 %58 to i32
  %60 = lshr i32 %row.0, %59
  %61 = load i16* @iwidth, align 2
  %62 = zext i16 %61 to i32
  %63 = mul i32 %60, %62
  %64 = load i16* @left_margin, align 2
  %65 = zext i16 %64 to i32
  %66 = sub i32 %col.0, %65
  %67 = load i16* @shrink, align 2
  %68 = zext i16 %67 to i32
  %69 = lshr i32 %66, %68
  %70 = add i32 %63, %69
  %71 = zext i32 %70 to i64
  %72 = load [4 x i16]** @image, align 8
  %73 = getelementptr inbounds [4 x i16]* %72, i64 %71
  %74 = getelementptr inbounds [4 x i16]* %73, i32 0, i64 %57
  store i16 %45, i16* %74, align 2
  br label %77

; <label>:75                                      ; preds = %30
  %76 = add i32 %lblack.1, %37
  br label %77

; <label>:77                                      ; preds = %75, %44
  %lblack.2 = phi i32 [ %lblack.1, %44 ], [ %76, %75 ]
  br label %78

; <label>:78                                      ; preds = %77
  %79 = add i32 %col.0, 1
  br label %26

; <label>:80                                      ; preds = %26
  br label %81

; <label>:81                                      ; preds = %80
  %82 = add i32 %row.0, 1
  br label %12

; <label>:83                                      ; preds = %12
  call void @free(i8* %3) #4
  %84 = load i16* @raw_width, align 2
  %85 = zext i16 %84 to i32
  %86 = load i16* @width, align 2
  %87 = zext i16 %86 to i32
  %88 = add nsw i32 %87, 1
  %89 = icmp sgt i32 %85, %88
  br i1 %89, label %90, label %100

; <label>:90                                      ; preds = %83
  %91 = load i16* @raw_width, align 2
  %92 = zext i16 %91 to i32
  %93 = load i16* @width, align 2
  %94 = zext i16 %93 to i32
  %95 = sub nsw i32 %92, %94
  %96 = load i16* @height, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nsw i32 %95, %97
  %99 = udiv i32 %lblack.0, %98
  store i32 %99, i32* @black, align 4
  br label %100

; <label>:100                                     ; preds = %90, %83
  %101 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str28, i32 0, i32 0), i64 3) #10
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %104, label %103

; <label>:103                                     ; preds = %100
  store i32 0, i32* @black, align 4
  br label %104

; <label>:104                                     ; preds = %103, %100
  %105 = load i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i64 255), align 2
  %106 = zext i16 %105 to i32
  store i32 %106, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define void @kodak_yrgb_load_raw() #0 {
  %rgb = alloca [3 x i32], align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i64
  %3 = call noalias i8* @calloc(i64 %2, i64 3) #4
  call void @merror(i8* %3, i8* getelementptr inbounds ([22 x i8]* @.str29, i32 0, i32 0))
  br label %4

; <label>:4                                       ; preds = %114, %0
  %row.0 = phi i32 [ 0, %0 ], [ %115, %114 ]
  %5 = load i16* @height, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %row.0, %6
  br i1 %7, label %8, label %116

; <label>:8                                       ; preds = %4
  %9 = xor i32 %row.0, -1
  %10 = and i32 %9, 1
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %20

; <label>:12                                      ; preds = %8
  %13 = load i16* @raw_width, align 2
  %14 = zext i16 %13 to i64
  %15 = load %struct._IO_FILE** @ifp, align 8
  %16 = call i64 @fread(i8* %3, i64 %14, i64 3, %struct._IO_FILE* %15)
  %17 = icmp ult i64 %16, 3
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %12
  call void @derror()
  br label %19

; <label>:19                                      ; preds = %18, %12
  br label %20

; <label>:20                                      ; preds = %19, %8
  br label %21

; <label>:21                                      ; preds = %111, %20
  %col.0 = phi i32 [ 0, %20 ], [ %112, %111 ]
  %22 = load i16* @raw_width, align 2
  %23 = zext i16 %22 to i32
  %24 = icmp slt i32 %col.0, %23
  br i1 %24, label %25, label %113

; <label>:25                                      ; preds = %21
  %26 = load i16* @width, align 2
  %27 = zext i16 %26 to i32
  %28 = mul nsw i32 %27, 2
  %29 = and i32 %row.0, 1
  %30 = mul nsw i32 %28, %29
  %31 = add nsw i32 %30, %col.0
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8* %3, i64 %32
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = load i16* @width, align 2
  %37 = zext i16 %36 to i32
  %38 = and i32 %col.0, -2
  %39 = add nsw i32 %37, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8* %3, i64 %40
  %42 = load i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = sub nsw i32 %43, 128
  %45 = load i16* @width, align 2
  %46 = zext i16 %45 to i32
  %47 = and i32 %col.0, -2
  %48 = add nsw i32 %46, %47
  %49 = add nsw i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8* %3, i64 %50
  %52 = load i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %53, 128
  %55 = add nsw i32 %44, %54
  %56 = add nsw i32 %55, 2
  %57 = ashr i32 %56, 2
  %58 = sub nsw i32 %35, %57
  %59 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %61 = load i32* %60, align 4
  %62 = add nsw i32 %61, %44
  %63 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 2
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %65 = load i32* %64, align 4
  %66 = add nsw i32 %65, %54
  %67 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 0
  store i32 %66, i32* %67, align 4
  br label %68

; <label>:68                                      ; preds = %108, %25
  %c.0 = phi i32 [ 0, %25 ], [ %109, %108 ]
  %69 = icmp slt i32 %c.0, 3
  br i1 %69, label %70, label %110

; <label>:70                                      ; preds = %68
  %71 = sext i32 %c.0 to i64
  %72 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %71
  %73 = load i32* %72, align 4
  %74 = icmp slt i32 %73, 255
  br i1 %74, label %75, label %79

; <label>:75                                      ; preds = %70
  %76 = sext i32 %c.0 to i64
  %77 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %76
  %78 = load i32* %77, align 4
  br label %80

; <label>:79                                      ; preds = %70
  br label %80

; <label>:80                                      ; preds = %79, %75
  %81 = phi i32 [ %78, %75 ], [ 255, %79 ]
  %82 = icmp sgt i32 0, %81
  br i1 %82, label %83, label %84

; <label>:83                                      ; preds = %80
  br label %96

; <label>:84                                      ; preds = %80
  %85 = sext i32 %c.0 to i64
  %86 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %85
  %87 = load i32* %86, align 4
  %88 = icmp slt i32 %87, 255
  br i1 %88, label %89, label %93

; <label>:89                                      ; preds = %84
  %90 = sext i32 %c.0 to i64
  %91 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %90
  %92 = load i32* %91, align 4
  br label %94

; <label>:93                                      ; preds = %84
  br label %94

; <label>:94                                      ; preds = %93, %89
  %95 = phi i32 [ %92, %89 ], [ 255, %93 ]
  br label %96

; <label>:96                                      ; preds = %94, %83
  %97 = phi i32 [ 0, %83 ], [ %95, %94 ]
  %98 = trunc i32 %97 to i16
  %99 = sext i32 %c.0 to i64
  %100 = load i16* @width, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nsw i32 %row.0, %101
  %103 = add nsw i32 %102, %col.0
  %104 = sext i32 %103 to i64
  %105 = load [4 x i16]** @image, align 8
  %106 = getelementptr inbounds [4 x i16]* %105, i64 %104
  %107 = getelementptr inbounds [4 x i16]* %106, i32 0, i64 %99
  store i16 %98, i16* %107, align 2
  br label %108

; <label>:108                                     ; preds = %96
  %109 = add nsw i32 %c.0, 1
  br label %68

; <label>:110                                     ; preds = %68
  br label %111

; <label>:111                                     ; preds = %110
  %112 = add nsw i32 %col.0, 1
  br label %21

; <label>:113                                     ; preds = %21
  br label %114

; <label>:114                                     ; preds = %113
  %115 = add nsw i32 %row.0, 1
  br label %4

; <label>:116                                     ; preds = %4
  call void @free(i8* %3) #4
  store i32 0, i32* @use_gamma, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_262_load_raw() #0 {
  %decode = alloca [2 x %struct.decode*], align 16
  call void @init_decoder()
  br label %1

; <label>:1                                       ; preds = %11, %0
  %i.0 = phi i32 [ 0, %0 ], [ %12, %11 ]
  %2 = icmp slt i32 %i.0, 2
  br i1 %2, label %3, label %13

; <label>:3                                       ; preds = %1
  %4 = load %struct.decode** @free_decode, align 8
  %5 = sext i32 %i.0 to i64
  %6 = getelementptr inbounds [2 x %struct.decode*]* %decode, i32 0, i64 %5
  store %struct.decode* %4, %struct.decode** %6, align 8
  %7 = sext i32 %i.0 to i64
  %8 = getelementptr inbounds [2 x [26 x i8]]* @kodak_262_load_raw.kodak_tree, i32 0, i64 %7
  %9 = getelementptr inbounds [26 x i8]* %8, i32 0, i32 0
  %10 = call i8* @make_decoder(i8* %9, i32 0)
  br label %11

; <label>:11                                      ; preds = %3
  %12 = add nsw i32 %i.0, 1
  br label %1

; <label>:13                                      ; preds = %1
  %14 = load i16* @raw_height, align 2
  %15 = zext i16 %14 to i32
  %16 = add nsw i32 %15, 63
  %17 = ashr i32 %16, 5
  %18 = load i16* @raw_width, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nsw i32 %19, 32
  %21 = mul nsw i32 %17, 4
  %22 = add nsw i32 %20, %21
  %23 = sext i32 %22 to i64
  %24 = call noalias i8* @malloc(i64 %23) #4
  call void @merror(i8* %24, i8* getelementptr inbounds ([21 x i8]* @.str30, i32 0, i32 0))
  %25 = load i16* @raw_width, align 2
  %26 = zext i16 %25 to i32
  %27 = mul nsw i32 %26, 32
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8* %24, i64 %28
  %30 = bitcast i8* %29 to i32*
  store i16 19789, i16* @order, align 2
  br label %31

; <label>:31                                      ; preds = %37, %13
  %i.1 = phi i32 [ 0, %13 ], [ %38, %37 ]
  %32 = icmp slt i32 %i.1, %17
  br i1 %32, label %33, label %39

; <label>:33                                      ; preds = %31
  %34 = call i32 @get4()
  %35 = sext i32 %i.1 to i64
  %36 = getelementptr inbounds i32* %30, i64 %35
  store i32 %34, i32* %36, align 4
  br label %37

; <label>:37                                      ; preds = %33
  %38 = add nsw i32 %i.1, 1
  br label %31

; <label>:39                                      ; preds = %31
  br label %40

; <label>:40                                      ; preds = %181, %39
  %pi.0 = phi i32 [ 0, %39 ], [ %pi.2, %181 ]
  %row.0 = phi i32 [ 0, %39 ], [ %182, %181 ]
  %41 = load i16* @raw_height, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp slt i32 %row.0, %42
  br i1 %43, label %44, label %183

; <label>:44                                      ; preds = %40
  %45 = and i32 %row.0, 31
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %56

; <label>:47                                      ; preds = %44
  %48 = load %struct._IO_FILE** @ifp, align 8
  %49 = ashr i32 %row.0, 5
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32* %30, i64 %50
  %52 = load i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = call i32 @fseek(%struct._IO_FILE* %48, i64 %53, i32 0)
  %55 = call i32 @getbits(i32 -1)
  br label %56

; <label>:56                                      ; preds = %47, %44
  %pi.1 = phi i32 [ 0, %47 ], [ %pi.0, %44 ]
  br label %57

; <label>:57                                      ; preds = %178, %56
  %pi.2 = phi i32 [ %pi.1, %56 ], [ %129, %178 ]
  %col.0 = phi i32 [ 0, %56 ], [ %179, %178 ]
  %58 = load i16* @raw_width, align 2
  %59 = zext i16 %58 to i32
  %60 = icmp slt i32 %col.0, %59
  br i1 %60, label %61, label %180

; <label>:61                                      ; preds = %57
  %62 = add nsw i32 %row.0, %col.0
  %63 = and i32 %62, 1
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %67

; <label>:65                                      ; preds = %61
  %66 = sub nsw i32 %pi.2, 2
  br label %72

; <label>:67                                      ; preds = %61
  %68 = load i16* @raw_width, align 2
  %69 = zext i16 %68 to i32
  %70 = sub nsw i32 %pi.2, %69
  %71 = sub nsw i32 %70, 1
  br label %72

; <label>:72                                      ; preds = %67, %65
  %73 = phi i32 [ %66, %65 ], [ %71, %67 ]
  %74 = icmp ne i32 %63, 0
  br i1 %74, label %75, label %80

; <label>:75                                      ; preds = %72
  %76 = load i16* @raw_width, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nsw i32 2, %77
  %79 = sub nsw i32 %pi.2, %78
  br label %85

; <label>:80                                      ; preds = %72
  %81 = load i16* @raw_width, align 2
  %82 = zext i16 %81 to i32
  %83 = sub nsw i32 %pi.2, %82
  %84 = add nsw i32 %83, 1
  br label %85

; <label>:85                                      ; preds = %80, %75
  %86 = phi i32 [ %79, %75 ], [ %84, %80 ]
  %87 = icmp sle i32 %col.0, %63
  br i1 %87, label %88, label %89

; <label>:88                                      ; preds = %85
  br label %89

; <label>:89                                      ; preds = %88, %85
  %pi1.0 = phi i32 [ -1, %88 ], [ %73, %85 ]
  %90 = icmp slt i32 %pi1.0, 0
  br i1 %90, label %91, label %92

; <label>:91                                      ; preds = %89
  br label %92

; <label>:92                                      ; preds = %91, %89
  %pi1.1 = phi i32 [ %86, %91 ], [ %pi1.0, %89 ]
  %93 = icmp slt i32 %86, 0
  br i1 %93, label %94, label %95

; <label>:94                                      ; preds = %92
  br label %95

; <label>:95                                      ; preds = %94, %92
  %pi2.0 = phi i32 [ %pi1.1, %94 ], [ %86, %92 ]
  %96 = icmp slt i32 %pi1.1, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %95
  %98 = icmp sgt i32 %col.0, 1
  br i1 %98, label %99, label %101

; <label>:99                                      ; preds = %97
  %100 = sub nsw i32 %pi.2, 2
  br label %101

; <label>:101                                     ; preds = %99, %97, %95
  %pi1.2 = phi i32 [ %100, %99 ], [ %pi1.1, %97 ], [ %pi1.1, %95 ]
  %pi2.1 = phi i32 [ %100, %99 ], [ %pi2.0, %97 ], [ %pi2.0, %95 ]
  %102 = icmp slt i32 %pi1.2, 0
  br i1 %102, label %103, label %104

; <label>:103                                     ; preds = %101
  br label %115

; <label>:104                                     ; preds = %101
  %105 = sext i32 %pi1.2 to i64
  %106 = getelementptr inbounds i8* %24, i64 %105
  %107 = load i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = sext i32 %pi2.1 to i64
  %110 = getelementptr inbounds i8* %24, i64 %109
  %111 = load i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = add nsw i32 %108, %112
  %114 = ashr i32 %113, 1
  br label %115

; <label>:115                                     ; preds = %104, %103
  %116 = phi i32 [ 0, %103 ], [ %114, %104 ]
  %117 = sext i32 %63 to i64
  %118 = getelementptr inbounds [2 x %struct.decode*]* %decode, i32 0, i64 %117
  %119 = load %struct.decode** %118, align 8
  %120 = call i32 @ljpeg_diff(%struct.decode* %119)
  %121 = add nsw i32 %116, %120
  %122 = trunc i32 %121 to i8
  %123 = sext i32 %pi.2 to i64
  %124 = getelementptr inbounds i8* %24, i64 %123
  store i8 %122, i8* %124, align 1
  %125 = ashr i32 %121, 8
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %128

; <label>:127                                     ; preds = %115
  call void @derror()
  br label %128

; <label>:128                                     ; preds = %127, %115
  %129 = add nsw i32 %pi.2, 1
  %130 = sext i32 %pi.2 to i64
  %131 = getelementptr inbounds i8* %24, i64 %130
  %132 = load i8* %131, align 1
  %133 = zext i8 %132 to i64
  %134 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %133
  %135 = load i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = load i16* @left_margin, align 2
  %138 = zext i16 %137 to i32
  %139 = sub nsw i32 %col.0, %138
  %140 = load i16* @width, align 2
  %141 = zext i16 %140 to i32
  %142 = icmp ult i32 %139, %141
  br i1 %142, label %143, label %174

; <label>:143                                     ; preds = %128
  %144 = trunc i32 %136 to i16
  %145 = load i32* @filters, align 4
  %146 = shl i32 %row.0, 1
  %147 = and i32 %146, 14
  %148 = load i16* @left_margin, align 2
  %149 = zext i16 %148 to i32
  %150 = sub nsw i32 %col.0, %149
  %151 = and i32 %150, 1
  %152 = add nsw i32 %147, %151
  %153 = shl i32 %152, 1
  %154 = lshr i32 %145, %153
  %155 = and i32 %154, 3
  %156 = zext i32 %155 to i64
  %157 = load i16* @shrink, align 2
  %158 = zext i16 %157 to i32
  %159 = ashr i32 %row.0, %158
  %160 = load i16* @iwidth, align 2
  %161 = zext i16 %160 to i32
  %162 = mul nsw i32 %159, %161
  %163 = load i16* @left_margin, align 2
  %164 = zext i16 %163 to i32
  %165 = sub nsw i32 %col.0, %164
  %166 = load i16* @shrink, align 2
  %167 = zext i16 %166 to i32
  %168 = ashr i32 %165, %167
  %169 = add nsw i32 %162, %168
  %170 = sext i32 %169 to i64
  %171 = load [4 x i16]** @image, align 8
  %172 = getelementptr inbounds [4 x i16]* %171, i64 %170
  %173 = getelementptr inbounds [4 x i16]* %172, i32 0, i64 %156
  store i16 %144, i16* %173, align 2
  br label %177

; <label>:174                                     ; preds = %128
  %175 = load i32* @black, align 4
  %176 = add i32 %175, %136
  store i32 %176, i32* @black, align 4
  br label %177

; <label>:177                                     ; preds = %174, %143
  br label %178

; <label>:178                                     ; preds = %177
  %179 = add nsw i32 %col.0, 1
  br label %57

; <label>:180                                     ; preds = %57
  br label %181

; <label>:181                                     ; preds = %180
  %182 = add nsw i32 %row.0, 1
  br label %40

; <label>:183                                     ; preds = %40
  call void @free(i8* %24) #4
  %184 = load i16* @raw_width, align 2
  %185 = zext i16 %184 to i32
  %186 = load i16* @width, align 2
  %187 = zext i16 %186 to i32
  %188 = icmp sgt i32 %185, %187
  br i1 %188, label %189, label %200

; <label>:189                                     ; preds = %183
  %190 = load i16* @raw_width, align 2
  %191 = zext i16 %190 to i32
  %192 = load i16* @width, align 2
  %193 = zext i16 %192 to i32
  %194 = sub nsw i32 %191, %193
  %195 = load i16* @height, align 2
  %196 = zext i16 %195 to i32
  %197 = mul nsw i32 %194, %196
  %198 = load i32* @black, align 4
  %199 = udiv i32 %198, %197
  store i32 %199, i32* @black, align 4
  br label %200

; <label>:200                                     ; preds = %189, %183
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @kodak_65000_decode(i16* %out, i32 %bsize) #0 {
  %blen = alloca [768 x i8], align 16
  %raw = alloca [6 x i16], align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i64 @ftell(%struct._IO_FILE* %1)
  %3 = trunc i64 %2 to i32
  %4 = add nsw i32 %bsize, 3
  %5 = and i32 %4, -4
  br label %6

; <label>:6                                       ; preds = %95, %0
  %i.0 = phi i32 [ 0, %0 ], [ %96, %95 ]
  %7 = icmp slt i32 %i.0, %5
  br i1 %7, label %8, label %97

; <label>:8                                       ; preds = %6
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i32 @getc_unlocked(%struct._IO_FILE* %9)
  %11 = trunc i32 %10 to i8
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 15
  %14 = trunc i32 %13 to i8
  %15 = sext i32 %i.0 to i64
  %16 = getelementptr inbounds [768 x i8]* %blen, i32 0, i64 %15
  store i8 %14, i8* %16, align 1
  %17 = zext i8 %14 to i32
  %18 = icmp sgt i32 %17, 12
  br i1 %18, label %28, label %19

; <label>:19                                      ; preds = %8
  %20 = zext i8 %11 to i32
  %21 = ashr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = add nsw i32 %i.0, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [768 x i8]* %blen, i32 0, i64 %24
  store i8 %22, i8* %25, align 1
  %26 = zext i8 %22 to i32
  %27 = icmp sgt i32 %26, 12
  br i1 %27, label %28, label %94

; <label>:28                                      ; preds = %19, %8
  %29 = load %struct._IO_FILE** @ifp, align 8
  %30 = sext i32 %3 to i64
  %31 = call i32 @fseek(%struct._IO_FILE* %29, i64 %30, i32 0)
  br label %32

; <label>:32                                      ; preds = %91, %28
  %i.1 = phi i32 [ 0, %28 ], [ %92, %91 ]
  %33 = icmp slt i32 %i.1, %5
  br i1 %33, label %34, label %93

; <label>:34                                      ; preds = %32
  %35 = getelementptr inbounds [6 x i16]* %raw, i32 0, i32 0
  call void @read_shorts(i16* %35, i32 6)
  %36 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 0
  %37 = load i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = ashr i32 %38, 12
  %40 = shl i32 %39, 8
  %41 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 2
  %42 = load i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = ashr i32 %43, 12
  %45 = shl i32 %44, 4
  %46 = or i32 %40, %45
  %47 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 4
  %48 = load i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = ashr i32 %49, 12
  %51 = or i32 %46, %50
  %52 = trunc i32 %51 to i16
  %53 = sext i32 %i.1 to i64
  %54 = getelementptr inbounds i16* %out, i64 %53
  store i16 %52, i16* %54, align 2
  %55 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 1
  %56 = load i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = ashr i32 %57, 12
  %59 = shl i32 %58, 8
  %60 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 3
  %61 = load i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = ashr i32 %62, 12
  %64 = shl i32 %63, 4
  %65 = or i32 %59, %64
  %66 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 5
  %67 = load i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = ashr i32 %68, 12
  %70 = or i32 %65, %69
  %71 = trunc i32 %70 to i16
  %72 = add nsw i32 %i.1, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i16* %out, i64 %73
  store i16 %71, i16* %74, align 2
  br label %75

; <label>:75                                      ; preds = %88, %34
  %j.0 = phi i32 [ 0, %34 ], [ %89, %88 ]
  %76 = icmp slt i32 %j.0, 6
  br i1 %76, label %77, label %90

; <label>:77                                      ; preds = %75
  %78 = sext i32 %j.0 to i64
  %79 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 %78
  %80 = load i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 4095
  %83 = trunc i32 %82 to i16
  %84 = add nsw i32 %i.1, 2
  %85 = add nsw i32 %84, %j.0
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i16* %out, i64 %86
  store i16 %83, i16* %87, align 2
  br label %88

; <label>:88                                      ; preds = %77
  %89 = add nsw i32 %j.0, 1
  br label %75

; <label>:90                                      ; preds = %75
  br label %91

; <label>:91                                      ; preds = %90
  %92 = add nsw i32 %i.1, 8
  br label %32

; <label>:93                                      ; preds = %32
  br label %158

; <label>:94                                      ; preds = %19
  br label %95

; <label>:95                                      ; preds = %94
  %96 = add nsw i32 %i.0, 2
  br label %6

; <label>:97                                      ; preds = %6
  %98 = and i32 %5, 7
  %99 = icmp eq i32 %98, 4
  br i1 %99, label %100, label %109

; <label>:100                                     ; preds = %97
  %101 = load %struct._IO_FILE** @ifp, align 8
  %102 = call i32 @getc_unlocked(%struct._IO_FILE* %101)
  %103 = shl i32 %102, 8
  %104 = sext i32 %103 to i64
  %105 = load %struct._IO_FILE** @ifp, align 8
  %106 = call i32 @getc_unlocked(%struct._IO_FILE* %105)
  %107 = sext i32 %106 to i64
  %108 = add nsw i64 %104, %107
  br label %109

; <label>:109                                     ; preds = %100, %97
  %bits.0 = phi i32 [ 16, %100 ], [ 0, %97 ]
  %bitbuf.0 = phi i64 [ %108, %100 ], [ 0, %97 ]
  br label %110

; <label>:110                                     ; preds = %155, %109
  %bits.1 = phi i32 [ %bits.0, %109 ], [ %142, %155 ]
  %i.2 = phi i32 [ 0, %109 ], [ %156, %155 ]
  %bitbuf.1 = phi i64 [ %bitbuf.0, %109 ], [ %141, %155 ]
  %111 = icmp slt i32 %i.2, %5
  br i1 %111, label %112, label %157

; <label>:112                                     ; preds = %110
  %113 = sext i32 %i.2 to i64
  %114 = getelementptr inbounds [768 x i8]* %blen, i32 0, i64 %113
  %115 = load i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp slt i32 %bits.1, %116
  br i1 %117, label %118, label %134

; <label>:118                                     ; preds = %112
  br label %119

; <label>:119                                     ; preds = %130, %118
  %bitbuf.2 = phi i64 [ %bitbuf.1, %118 ], [ %129, %130 ]
  %j.1 = phi i32 [ 0, %118 ], [ %131, %130 ]
  %120 = icmp slt i32 %j.1, 32
  br i1 %120, label %121, label %132

; <label>:121                                     ; preds = %119
  %122 = load %struct._IO_FILE** @ifp, align 8
  %123 = call i32 @getc_unlocked(%struct._IO_FILE* %122)
  %124 = sext i32 %123 to i64
  %125 = xor i32 %j.1, 8
  %126 = add nsw i32 %bits.1, %125
  %127 = zext i32 %126 to i64
  %128 = shl i64 %124, %127
  %129 = add nsw i64 %bitbuf.2, %128
  br label %130

; <label>:130                                     ; preds = %121
  %131 = add nsw i32 %j.1, 8
  br label %119

; <label>:132                                     ; preds = %119
  %133 = add nsw i32 %bits.1, 32
  br label %134

; <label>:134                                     ; preds = %132, %112
  %bits.2 = phi i32 [ %133, %132 ], [ %bits.1, %112 ]
  %bitbuf.3 = phi i64 [ %bitbuf.2, %132 ], [ %bitbuf.1, %112 ]
  %135 = sub nsw i32 16, %116
  %136 = ashr i32 65535, %135
  %137 = sext i32 %136 to i64
  %138 = and i64 %bitbuf.3, %137
  %139 = trunc i64 %138 to i32
  %140 = zext i32 %116 to i64
  %141 = ashr i64 %bitbuf.3, %140
  %142 = sub nsw i32 %bits.2, %116
  %143 = sub nsw i32 %116, 1
  %144 = shl i32 1, %143
  %145 = and i32 %139, %144
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %151

; <label>:147                                     ; preds = %134
  %148 = shl i32 1, %116
  %149 = sub nsw i32 %148, 1
  %150 = sub nsw i32 %139, %149
  br label %151

; <label>:151                                     ; preds = %147, %134
  %diff.0 = phi i32 [ %150, %147 ], [ %139, %134 ]
  %152 = trunc i32 %diff.0 to i16
  %153 = sext i32 %i.2 to i64
  %154 = getelementptr inbounds i16* %out, i64 %153
  store i16 %152, i16* %154, align 2
  br label %155

; <label>:155                                     ; preds = %151
  %156 = add nsw i32 %i.2, 1
  br label %110

; <label>:157                                     ; preds = %110
  br label %158

; <label>:158                                     ; preds = %157, %93
  %.0 = phi i32 [ 1, %93 ], [ 0, %157 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @kodak_65000_load_raw() #0 {
  %buf = alloca [256 x i16], align 16
  %pred = alloca [2 x i32], align 4
  br label %1

; <label>:1                                       ; preds = %86, %0
  %row.0 = phi i32 [ 0, %0 ], [ %87, %86 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %row.0, %3
  br i1 %4, label %5, label %88

; <label>:5                                       ; preds = %1
  br label %6

; <label>:6                                       ; preds = %83, %5
  %col.0 = phi i32 [ 0, %5 ], [ %84, %83 ]
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %col.0, %8
  br i1 %9, label %10, label %85

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 0, i32* %12, align 4
  %13 = load i16* @width, align 2
  %14 = zext i16 %13 to i32
  %15 = sub nsw i32 %14, %col.0
  %16 = icmp slt i32 256, %15
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %10
  br label %22

; <label>:18                                      ; preds = %10
  %19 = load i16* @width, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %col.0
  br label %22

; <label>:22                                      ; preds = %18, %17
  %23 = phi i32 [ 256, %17 ], [ %21, %18 ]
  %24 = getelementptr inbounds [256 x i16]* %buf, i32 0, i32 0
  %25 = call i32 @kodak_65000_decode(i16* %24, i32 %23)
  br label %26

; <label>:26                                      ; preds = %80, %22
  %i.0 = phi i32 [ 0, %22 ], [ %81, %80 ]
  %27 = icmp slt i32 %i.0, %23
  br i1 %27, label %28, label %82

; <label>:28                                      ; preds = %26
  %29 = icmp ne i32 %25, 0
  br i1 %29, label %30, label %35

; <label>:30                                      ; preds = %28
  %31 = sext i32 %i.0 to i64
  %32 = getelementptr inbounds [256 x i16]* %buf, i32 0, i64 %31
  %33 = load i16* %32, align 2
  %34 = sext i16 %33 to i32
  br label %45

; <label>:35                                      ; preds = %28
  %36 = sext i32 %i.0 to i64
  %37 = getelementptr inbounds [256 x i16]* %buf, i32 0, i64 %36
  %38 = load i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = and i32 %i.0, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %41
  %43 = load i32* %42, align 4
  %44 = add nsw i32 %43, %39
  store i32 %44, i32* %42, align 4
  br label %45

; <label>:45                                      ; preds = %35, %30
  %46 = phi i32 [ %34, %30 ], [ %44, %35 ]
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %47
  %49 = load i16* %48, align 2
  %50 = load i32* @filters, align 4
  %51 = shl i32 %row.0, 1
  %52 = and i32 %51, 14
  %53 = add nsw i32 %col.0, %i.0
  %54 = and i32 %53, 1
  %55 = add nsw i32 %52, %54
  %56 = shl i32 %55, 1
  %57 = lshr i32 %50, %56
  %58 = and i32 %57, 3
  %59 = zext i32 %58 to i64
  %60 = load i16* @shrink, align 2
  %61 = zext i16 %60 to i32
  %62 = ashr i32 %row.0, %61
  %63 = load i16* @iwidth, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nsw i32 %62, %64
  %66 = add nsw i32 %col.0, %i.0
  %67 = load i16* @shrink, align 2
  %68 = zext i16 %67 to i32
  %69 = ashr i32 %66, %68
  %70 = add nsw i32 %65, %69
  %71 = sext i32 %70 to i64
  %72 = load [4 x i16]** @image, align 8
  %73 = getelementptr inbounds [4 x i16]* %72, i64 %71
  %74 = getelementptr inbounds [4 x i16]* %73, i32 0, i64 %59
  store i16 %49, i16* %74, align 2
  %75 = zext i16 %49 to i32
  %76 = ashr i32 %75, 12
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %79

; <label>:78                                      ; preds = %45
  call void @derror()
  br label %79

; <label>:79                                      ; preds = %78, %45
  br label %80

; <label>:80                                      ; preds = %79
  %81 = add nsw i32 %i.0, 1
  br label %26

; <label>:82                                      ; preds = %26
  br label %83

; <label>:83                                      ; preds = %82
  %84 = add nsw i32 %col.0, 256
  br label %6

; <label>:85                                      ; preds = %6
  br label %86

; <label>:86                                      ; preds = %85
  %87 = add nsw i32 %row.0, 1
  br label %1

; <label>:88                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_ycbcr_load_raw() #0 {
  %buf = alloca [384 x i16], align 16
  %y = alloca [2 x [2 x i32]], align 16
  %rgb = alloca [3 x i32], align 4
  br label %1

; <label>:1                                       ; preds = %164, %0
  %row.0 = phi i32 [ 0, %0 ], [ %165, %164 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %row.0, %3
  br i1 %4, label %5, label %166

; <label>:5                                       ; preds = %1
  br label %6

; <label>:6                                       ; preds = %161, %5
  %col.0 = phi i32 [ 0, %5 ], [ %162, %161 ]
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %col.0, %8
  br i1 %9, label %10, label %163

; <label>:10                                      ; preds = %6
  %11 = load i16* @width, align 2
  %12 = zext i16 %11 to i32
  %13 = sub nsw i32 %12, %col.0
  %14 = icmp slt i32 128, %13
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %10
  br label %20

; <label>:16                                      ; preds = %10
  %17 = load i16* @width, align 2
  %18 = zext i16 %17 to i32
  %19 = sub nsw i32 %18, %col.0
  br label %20

; <label>:20                                      ; preds = %16, %15
  %21 = phi i32 [ 128, %15 ], [ %19, %16 ]
  %22 = getelementptr inbounds [384 x i16]* %buf, i32 0, i32 0
  %23 = mul nsw i32 %21, 3
  %24 = call i32 @kodak_65000_decode(i16* %22, i32 %23)
  %25 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 1
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 1
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 0
  %28 = getelementptr inbounds [2 x i32]* %27, i32 0, i64 1
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds [384 x i16]* %buf, i32 0, i32 0
  br label %30

; <label>:30                                      ; preds = %157, %20
  %cb.0 = phi i32 [ 0, %20 ], [ %36, %157 ]
  %i.0 = phi i32 [ 0, %20 ], [ %158, %157 ]
  %cr.0 = phi i32 [ 0, %20 ], [ %40, %157 ]
  %bp.0 = phi i16* [ %29, %20 ], [ %159, %157 ]
  %31 = icmp slt i32 %i.0, %21
  br i1 %31, label %32, label %160

; <label>:32                                      ; preds = %30
  %33 = getelementptr inbounds i16* %bp.0, i64 4
  %34 = load i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = add nsw i32 %cb.0, %35
  %37 = getelementptr inbounds i16* %bp.0, i64 5
  %38 = load i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = add nsw i32 %cr.0, %39
  %41 = add nsw i32 %36, %40
  %42 = add nsw i32 %41, 2
  %43 = ashr i32 %42, 2
  %44 = sub nsw i32 0, %43
  %45 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %47 = load i32* %46, align 4
  %48 = add nsw i32 %47, %36
  %49 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 2
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %51 = load i32* %50, align 4
  %52 = add nsw i32 %51, %40
  %53 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 0
  store i32 %52, i32* %53, align 4
  br label %54

; <label>:54                                      ; preds = %154, %32
  %j.0 = phi i32 [ 0, %32 ], [ %155, %154 ]
  %bp.1 = phi i16* [ %bp.0, %32 ], [ %bp.2, %154 ]
  %55 = icmp slt i32 %j.0, 2
  br i1 %55, label %56, label %156

; <label>:56                                      ; preds = %54
  br label %57

; <label>:57                                      ; preds = %151, %56
  %k.0 = phi i32 [ 0, %56 ], [ %152, %151 ]
  %bp.2 = phi i16* [ %bp.1, %56 ], [ %66, %151 ]
  %58 = icmp slt i32 %k.0, 2
  br i1 %58, label %59, label %153

; <label>:59                                      ; preds = %57
  %60 = xor i32 %k.0, 1
  %61 = sext i32 %60 to i64
  %62 = sext i32 %j.0 to i64
  %63 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %62
  %64 = getelementptr inbounds [2 x i32]* %63, i32 0, i64 %61
  %65 = load i32* %64, align 4
  %66 = getelementptr inbounds i16* %bp.2, i32 1
  %67 = load i16* %bp.2, align 2
  %68 = sext i16 %67 to i32
  %69 = add nsw i32 %65, %68
  %70 = sext i32 %k.0 to i64
  %71 = sext i32 %j.0 to i64
  %72 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %71
  %73 = getelementptr inbounds [2 x i32]* %72, i32 0, i64 %70
  store i32 %69, i32* %73, align 4
  %74 = ashr i32 %69, 10
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %77

; <label>:76                                      ; preds = %59
  call void @derror()
  br label %77

; <label>:77                                      ; preds = %76, %59
  %78 = add nsw i32 %row.0, %j.0
  %79 = load i16* @width, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nsw i32 %78, %80
  %82 = add nsw i32 %81, %col.0
  %83 = add nsw i32 %82, %i.0
  %84 = add nsw i32 %83, %k.0
  %85 = sext i32 %84 to i64
  %86 = load [4 x i16]** @image, align 8
  %87 = getelementptr inbounds [4 x i16]* %86, i64 %85
  %88 = getelementptr inbounds [4 x i16]* %87, i32 0, i32 0
  br label %89

; <label>:89                                      ; preds = %148, %77
  %c.0 = phi i32 [ 0, %77 ], [ %149, %148 ]
  %90 = icmp slt i32 %c.0, 3
  br i1 %90, label %91, label %150

; <label>:91                                      ; preds = %89
  %92 = sext i32 %k.0 to i64
  %93 = sext i32 %j.0 to i64
  %94 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %93
  %95 = getelementptr inbounds [2 x i32]* %94, i32 0, i64 %92
  %96 = load i32* %95, align 4
  %97 = sext i32 %c.0 to i64
  %98 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %97
  %99 = load i32* %98, align 4
  %100 = add nsw i32 %96, %99
  %101 = icmp slt i32 %100, 4095
  br i1 %101, label %102, label %112

; <label>:102                                     ; preds = %91
  %103 = sext i32 %k.0 to i64
  %104 = sext i32 %j.0 to i64
  %105 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %104
  %106 = getelementptr inbounds [2 x i32]* %105, i32 0, i64 %103
  %107 = load i32* %106, align 4
  %108 = sext i32 %c.0 to i64
  %109 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %108
  %110 = load i32* %109, align 4
  %111 = add nsw i32 %107, %110
  br label %113

; <label>:112                                     ; preds = %91
  br label %113

; <label>:113                                     ; preds = %112, %102
  %114 = phi i32 [ %111, %102 ], [ 4095, %112 ]
  %115 = icmp sgt i32 0, %114
  br i1 %115, label %116, label %117

; <label>:116                                     ; preds = %113
  br label %141

; <label>:117                                     ; preds = %113
  %118 = sext i32 %k.0 to i64
  %119 = sext i32 %j.0 to i64
  %120 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %119
  %121 = getelementptr inbounds [2 x i32]* %120, i32 0, i64 %118
  %122 = load i32* %121, align 4
  %123 = sext i32 %c.0 to i64
  %124 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %123
  %125 = load i32* %124, align 4
  %126 = add nsw i32 %122, %125
  %127 = icmp slt i32 %126, 4095
  br i1 %127, label %128, label %138

; <label>:128                                     ; preds = %117
  %129 = sext i32 %k.0 to i64
  %130 = sext i32 %j.0 to i64
  %131 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %130
  %132 = getelementptr inbounds [2 x i32]* %131, i32 0, i64 %129
  %133 = load i32* %132, align 4
  %134 = sext i32 %c.0 to i64
  %135 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %134
  %136 = load i32* %135, align 4
  %137 = add nsw i32 %133, %136
  br label %139

; <label>:138                                     ; preds = %117
  br label %139

; <label>:139                                     ; preds = %138, %128
  %140 = phi i32 [ %137, %128 ], [ 4095, %138 ]
  br label %141

; <label>:141                                     ; preds = %139, %116
  %142 = phi i32 [ 0, %116 ], [ %140, %139 ]
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %143
  %145 = load i16* %144, align 2
  %146 = sext i32 %c.0 to i64
  %147 = getelementptr inbounds i16* %88, i64 %146
  store i16 %145, i16* %147, align 2
  br label %148

; <label>:148                                     ; preds = %141
  %149 = add nsw i32 %c.0, 1
  br label %89

; <label>:150                                     ; preds = %89
  br label %151

; <label>:151                                     ; preds = %150
  %152 = add nsw i32 %k.0, 1
  br label %57

; <label>:153                                     ; preds = %57
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %j.0, 1
  br label %54

; <label>:156                                     ; preds = %54
  br label %157

; <label>:157                                     ; preds = %156
  %158 = add nsw i32 %i.0, 2
  %159 = getelementptr inbounds i16* %bp.1, i64 2
  br label %30

; <label>:160                                     ; preds = %30
  br label %161

; <label>:161                                     ; preds = %160
  %162 = add nsw i32 %col.0, 128
  br label %6

; <label>:163                                     ; preds = %6
  br label %164

; <label>:164                                     ; preds = %163
  %165 = add nsw i32 %row.0, 2
  br label %1

; <label>:166                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_rgb_load_raw() #0 {
  %buf = alloca [768 x i16], align 16
  %rgb = alloca [3 x i32], align 4
  %1 = load [4 x i16]** @image, align 8
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0
  %3 = getelementptr inbounds [4 x i16]* %2, i32 0, i32 0
  br label %4

; <label>:4                                       ; preds = %61, %0
  %ip.0 = phi i16* [ %3, %0 ], [ %ip.1, %61 ]
  %row.0 = phi i32 [ 0, %0 ], [ %62, %61 ]
  %5 = load i16* @height, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %row.0, %6
  br i1 %7, label %8, label %63

; <label>:8                                       ; preds = %4
  br label %9

; <label>:9                                       ; preds = %58, %8
  %ip.1 = phi i16* [ %ip.0, %8 ], [ %ip.2, %58 ]
  %col.0 = phi i32 [ 0, %8 ], [ %59, %58 ]
  %10 = load i16* @width, align 2
  %11 = zext i16 %10 to i32
  %12 = icmp slt i32 %col.0, %11
  br i1 %12, label %13, label %60

; <label>:13                                      ; preds = %9
  %14 = load i16* @width, align 2
  %15 = zext i16 %14 to i32
  %16 = sub nsw i32 %15, %col.0
  %17 = icmp slt i32 256, %16
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %13
  br label %23

; <label>:19                                      ; preds = %13
  %20 = load i16* @width, align 2
  %21 = zext i16 %20 to i32
  %22 = sub nsw i32 %21, %col.0
  br label %23

; <label>:23                                      ; preds = %19, %18
  %24 = phi i32 [ 256, %18 ], [ %22, %19 ]
  %25 = getelementptr inbounds [768 x i16]* %buf, i32 0, i32 0
  %26 = mul nsw i32 %24, 3
  %27 = call i32 @kodak_65000_decode(i16* %25, i32 %26)
  %28 = bitcast [3 x i32]* %rgb to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 12, i32 4, i1 false)
  %29 = getelementptr inbounds [768 x i16]* %buf, i32 0, i32 0
  br label %30

; <label>:30                                      ; preds = %54, %23
  %i.0 = phi i32 [ 0, %23 ], [ %55, %54 ]
  %ip.2 = phi i16* [ %ip.1, %23 ], [ %56, %54 ]
  %bp.0 = phi i16* [ %29, %23 ], [ %bp.1, %54 ]
  %31 = icmp slt i32 %i.0, %24
  br i1 %31, label %32, label %57

; <label>:32                                      ; preds = %30
  br label %33

; <label>:33                                      ; preds = %51, %32
  %c.0 = phi i32 [ 0, %32 ], [ %52, %51 ]
  %bp.1 = phi i16* [ %bp.0, %32 ], [ %36, %51 ]
  %34 = icmp slt i32 %c.0, 3
  br i1 %34, label %35, label %53

; <label>:35                                      ; preds = %33
  %36 = getelementptr inbounds i16* %bp.1, i32 1
  %37 = load i16* %bp.1, align 2
  %38 = sext i16 %37 to i32
  %39 = sext i32 %c.0 to i64
  %40 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %39
  %41 = load i32* %40, align 4
  %42 = add nsw i32 %41, %38
  store i32 %42, i32* %40, align 4
  %43 = trunc i32 %42 to i16
  %44 = sext i32 %c.0 to i64
  %45 = getelementptr inbounds i16* %ip.2, i64 %44
  store i16 %43, i16* %45, align 2
  %46 = zext i16 %43 to i32
  %47 = ashr i32 %46, 12
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

; <label>:49                                      ; preds = %35
  call void @derror()
  br label %50

; <label>:50                                      ; preds = %49, %35
  br label %51

; <label>:51                                      ; preds = %50
  %52 = add nsw i32 %c.0, 1
  br label %33

; <label>:53                                      ; preds = %33
  br label %54

; <label>:54                                      ; preds = %53
  %55 = add nsw i32 %i.0, 1
  %56 = getelementptr inbounds i16* %ip.2, i64 4
  br label %30

; <label>:57                                      ; preds = %30
  br label %58

; <label>:58                                      ; preds = %57
  %59 = add nsw i32 %col.0, 256
  br label %9

; <label>:60                                      ; preds = %9
  br label %61

; <label>:61                                      ; preds = %60
  %62 = add nsw i32 %row.0, 1
  br label %4

; <label>:63                                      ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_thumb_load_raw() #0 {
  %1 = load i32* @thumb_misc, align 4
  %2 = lshr i32 %1, 5
  store i32 %2, i32* @colors, align 4
  br label %3

; <label>:3                                       ; preds = %25, %0
  %row.0 = phi i32 [ 0, %0 ], [ %26, %25 ]
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %row.0, %5
  br i1 %6, label %7, label %27

; <label>:7                                       ; preds = %3
  br label %8

; <label>:8                                       ; preds = %22, %7
  %col.0 = phi i32 [ 0, %7 ], [ %23, %22 ]
  %9 = load i16* @width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %col.0, %10
  br i1 %11, label %12, label %24

; <label>:12                                      ; preds = %8
  %13 = load i16* @width, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nsw i32 %row.0, %14
  %16 = add nsw i32 %15, %col.0
  %17 = sext i32 %16 to i64
  %18 = load [4 x i16]** @image, align 8
  %19 = getelementptr inbounds [4 x i16]* %18, i64 %17
  %20 = getelementptr inbounds [4 x i16]* %19, i32 0, i32 0
  %21 = load i32* @colors, align 4
  call void @read_shorts(i16* %20, i32 %21)
  br label %22

; <label>:22                                      ; preds = %12
  %23 = add nsw i32 %col.0, 1
  br label %8

; <label>:24                                      ; preds = %8
  br label %25

; <label>:25                                      ; preds = %24
  %26 = add nsw i32 %row.0, 1
  br label %3

; <label>:27                                      ; preds = %3
  %28 = load i32* @thumb_misc, align 4
  %29 = and i32 %28, 31
  %30 = shl i32 1, %29
  %31 = sub nsw i32 %30, 1
  store i32 %31, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sony_decrypt(i32* %data, i32 %len, i32 %start, i32 %key) #0 {
  %1 = icmp ne i32 %start, 0
  br i1 %1, label %2, label %75

; <label>:2                                       ; preds = %0
  store i32 0, i32* @sony_decrypt.p, align 4
  br label %3

; <label>:3                                       ; preds = %12, %2
  %.02 = phi i32 [ %key, %2 ], [ %8, %12 ]
  %4 = load i32* @sony_decrypt.p, align 4
  %5 = icmp ult i32 %4, 4
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %3
  %7 = mul nsw i32 %.02, 48828125
  %8 = add nsw i32 %7, 1
  %9 = load i32* @sony_decrypt.p, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %10
  store i32 %8, i32* %11, align 4
  br label %12

; <label>:12                                      ; preds = %6
  %13 = load i32* @sony_decrypt.p, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* @sony_decrypt.p, align 4
  br label %3

; <label>:15                                      ; preds = %3
  %16 = load i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 3), align 4
  %17 = shl i32 %16, 1
  %18 = load i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 0), align 4
  %19 = load i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 2), align 4
  %20 = xor i32 %18, %19
  %21 = lshr i32 %20, 31
  %22 = or i32 %17, %21
  store i32 %22, i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 3), align 4
  store i32 4, i32* @sony_decrypt.p, align 4
  br label %23

; <label>:23                                      ; preds = %55, %15
  %24 = load i32* @sony_decrypt.p, align 4
  %25 = icmp ult i32 %24, 127
  br i1 %25, label %26, label %58

; <label>:26                                      ; preds = %23
  %27 = load i32* @sony_decrypt.p, align 4
  %28 = sub i32 %27, 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %29
  %31 = load i32* %30, align 4
  %32 = load i32* @sony_decrypt.p, align 4
  %33 = sub i32 %32, 2
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %34
  %36 = load i32* %35, align 4
  %37 = xor i32 %31, %36
  %38 = shl i32 %37, 1
  %39 = load i32* @sony_decrypt.p, align 4
  %40 = sub i32 %39, 3
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %41
  %43 = load i32* %42, align 4
  %44 = load i32* @sony_decrypt.p, align 4
  %45 = sub i32 %44, 1
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %46
  %48 = load i32* %47, align 4
  %49 = xor i32 %43, %48
  %50 = lshr i32 %49, 31
  %51 = or i32 %38, %50
  %52 = load i32* @sony_decrypt.p, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %53
  store i32 %51, i32* %54, align 4
  br label %55

; <label>:55                                      ; preds = %26
  %56 = load i32* @sony_decrypt.p, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* @sony_decrypt.p, align 4
  br label %23

; <label>:58                                      ; preds = %23
  store i32 0, i32* @sony_decrypt.p, align 4
  br label %59

; <label>:59                                      ; preds = %71, %58
  %60 = load i32* @sony_decrypt.p, align 4
  %61 = icmp ult i32 %60, 127
  br i1 %61, label %62, label %74

; <label>:62                                      ; preds = %59
  %63 = load i32* @sony_decrypt.p, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %64
  %66 = load i32* %65, align 4
  %67 = call i32 @htonl(i32 %66) #9
  %68 = load i32* @sony_decrypt.p, align 4
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %69
  store i32 %67, i32* %70, align 4
  br label %71

; <label>:71                                      ; preds = %62
  %72 = load i32* @sony_decrypt.p, align 4
  %73 = add i32 %72, 1
  store i32 %73, i32* @sony_decrypt.p, align 4
  br label %59

; <label>:74                                      ; preds = %59
  br label %75

; <label>:75                                      ; preds = %74, %0
  br label %76

; <label>:76                                      ; preds = %79, %75
  %.01 = phi i32 [ %len, %75 ], [ %77, %79 ]
  %.0 = phi i32* [ %data, %75 ], [ %98, %79 ]
  %77 = add nsw i32 %.01, -1
  %78 = icmp ne i32 %.01, 0
  br i1 %78, label %79, label %101

; <label>:79                                      ; preds = %76
  %80 = load i32* @sony_decrypt.p, align 4
  %81 = add i32 %80, 1
  %82 = and i32 %81, 127
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %83
  %85 = load i32* %84, align 4
  %86 = load i32* @sony_decrypt.p, align 4
  %87 = add i32 %86, 65
  %88 = and i32 %87, 127
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %89
  %91 = load i32* %90, align 4
  %92 = xor i32 %85, %91
  %93 = load i32* @sony_decrypt.p, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* @sony_decrypt.p, align 4
  %95 = and i32 %93, 127
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %96
  store i32 %92, i32* %97, align 4
  %98 = getelementptr inbounds i32* %.0, i32 1
  %99 = load i32* %.0, align 4
  %100 = xor i32 %99, %92
  store i32 %100, i32* %.0, align 4
  br label %76

; <label>:101                                     ; preds = %76
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @htonl(i32) #5

; Function Attrs: nounwind uwtable
define void @sony_load_raw() #0 {
  %head = alloca [40 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 200896, i32 0)
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  %6 = mul i32 %5, 4
  %7 = sub i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = call i32 @fseek(%struct._IO_FILE* %3, i64 %8, i32 1)
  store i16 19789, i16* @order, align 2
  %10 = call i32 @get4()
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = call i32 @fseek(%struct._IO_FILE* %11, i64 164600, i32 0)
  %13 = getelementptr inbounds [40 x i8]* %head, i32 0, i32 0
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i64 @fread(i8* %13, i64 1, i64 40, %struct._IO_FILE* %14)
  %16 = getelementptr inbounds [40 x i8]* %head, i32 0, i32 0
  %17 = bitcast i8* %16 to i32*
  call void @sony_decrypt(i32* %17, i32 10, i32 1, i32 %10)
  br label %18

; <label>:18                                      ; preds = %21, %0
  %key.0 = phi i32 [ %10, %0 ], [ %27, %21 ]
  %i.0 = phi i32 [ 26, %0 ], [ %19, %21 ]
  %19 = add i32 %i.0, -1
  %20 = icmp ugt i32 %i.0, 22
  br i1 %20, label %21, label %28

; <label>:21                                      ; preds = %18
  %22 = shl i32 %key.0, 8
  %23 = zext i32 %19 to i64
  %24 = getelementptr inbounds [40 x i8]* %head, i32 0, i64 %23
  %25 = load i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = or i32 %22, %26
  br label %18

; <label>:28                                      ; preds = %18
  %29 = load %struct._IO_FILE** @ifp, align 8
  %30 = load i64* @data_offset, align 8
  %31 = call i32 @fseek(%struct._IO_FILE* %29, i64 %30, i32 0)
  %32 = load i16* @raw_width, align 2
  %33 = zext i16 %32 to i64
  %34 = call noalias i8* @calloc(i64 %33, i64 2) #4
  %35 = bitcast i8* %34 to i16*
  %36 = bitcast i16* %35 to i8*
  call void @merror(i8* %36, i8* getelementptr inbounds ([16 x i8]* @.str31, i32 0, i32 0))
  br label %37

; <label>:37                                      ; preds = %117, %28
  %row.0 = phi i32 [ 0, %28 ], [ %118, %117 ]
  %38 = load i16* @height, align 2
  %39 = zext i16 %38 to i32
  %40 = icmp ult i32 %row.0, %39
  br i1 %40, label %41, label %119

; <label>:41                                      ; preds = %37
  %42 = bitcast i16* %35 to i8*
  %43 = load i16* @raw_width, align 2
  %44 = zext i16 %43 to i64
  %45 = load %struct._IO_FILE** @ifp, align 8
  %46 = call i64 @fread(i8* %42, i64 2, i64 %44, %struct._IO_FILE* %45)
  %47 = load i16* @raw_width, align 2
  %48 = zext i16 %47 to i64
  %49 = icmp ult i64 %46, %48
  br i1 %49, label %50, label %51

; <label>:50                                      ; preds = %41
  call void @derror()
  br label %51

; <label>:51                                      ; preds = %50, %41
  %52 = bitcast i16* %35 to i32*
  %53 = load i16* @raw_width, align 2
  %54 = zext i16 %53 to i32
  %55 = sdiv i32 %54, 2
  %56 = icmp ne i32 %row.0, 0
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  call void @sony_decrypt(i32* %52, i32 %55, i32 %58, i32 %key.0)
  br label %59

; <label>:59                                      ; preds = %71, %51
  %col.0 = phi i32 [ 9, %51 ], [ %72, %71 ]
  %60 = load i16* @left_margin, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp ult i32 %col.0, %61
  br i1 %62, label %63, label %73

; <label>:63                                      ; preds = %59
  %64 = zext i32 %col.0 to i64
  %65 = getelementptr inbounds i16* %35, i64 %64
  %66 = load i16* %65, align 2
  %67 = call zeroext i16 @ntohs(i16 zeroext %66) #9
  %68 = zext i16 %67 to i32
  %69 = load i32* @black, align 4
  %70 = add i32 %69, %68
  store i32 %70, i32* @black, align 4
  br label %71

; <label>:71                                      ; preds = %63
  %72 = add i32 %col.0, 1
  br label %59

; <label>:73                                      ; preds = %59
  br label %74

; <label>:74                                      ; preds = %114, %73
  %col.1 = phi i32 [ 0, %73 ], [ %115, %114 ]
  %75 = load i16* @width, align 2
  %76 = zext i16 %75 to i32
  %77 = icmp ult i32 %col.1, %76
  br i1 %77, label %78, label %116

; <label>:78                                      ; preds = %74
  %79 = load i16* @left_margin, align 2
  %80 = zext i16 %79 to i32
  %81 = add i32 %col.1, %80
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i16* %35, i64 %82
  %84 = load i16* %83, align 2
  %85 = call zeroext i16 @ntohs(i16 zeroext %84) #9
  %86 = load i32* @filters, align 4
  %87 = shl i32 %row.0, 1
  %88 = and i32 %87, 14
  %89 = and i32 %col.1, 1
  %90 = add i32 %88, %89
  %91 = shl i32 %90, 1
  %92 = lshr i32 %86, %91
  %93 = and i32 %92, 3
  %94 = zext i32 %93 to i64
  %95 = load i16* @shrink, align 2
  %96 = zext i16 %95 to i32
  %97 = lshr i32 %row.0, %96
  %98 = load i16* @iwidth, align 2
  %99 = zext i16 %98 to i32
  %100 = mul i32 %97, %99
  %101 = load i16* @shrink, align 2
  %102 = zext i16 %101 to i32
  %103 = lshr i32 %col.1, %102
  %104 = add i32 %100, %103
  %105 = zext i32 %104 to i64
  %106 = load [4 x i16]** @image, align 8
  %107 = getelementptr inbounds [4 x i16]* %106, i64 %105
  %108 = getelementptr inbounds [4 x i16]* %107, i32 0, i64 %94
  store i16 %85, i16* %108, align 2
  %109 = zext i16 %85 to i32
  %110 = ashr i32 %109, 14
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %113

; <label>:112                                     ; preds = %78
  call void @derror()
  br label %113

; <label>:113                                     ; preds = %112, %78
  br label %114

; <label>:114                                     ; preds = %113
  %115 = add i32 %col.1, 1
  br label %74

; <label>:116                                     ; preds = %74
  br label %117

; <label>:117                                     ; preds = %116
  %118 = add i32 %row.0, 1
  br label %37

; <label>:119                                     ; preds = %37
  %120 = bitcast i16* %35 to i8*
  call void @free(i8* %120) #4
  %121 = load i16* @left_margin, align 2
  %122 = zext i16 %121 to i32
  %123 = icmp sgt i32 %122, 9
  br i1 %123, label %124, label %133

; <label>:124                                     ; preds = %119
  %125 = load i16* @left_margin, align 2
  %126 = zext i16 %125 to i32
  %127 = sub nsw i32 %126, 9
  %128 = load i16* @height, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nsw i32 %127, %129
  %131 = load i32* @black, align 4
  %132 = udiv i32 %131, %130
  store i32 %132, i32* @black, align 4
  br label %133

; <label>:133                                     ; preds = %124, %119
  store i32 16368, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sony_arw_load_raw() #0 {
  %1 = call i32 @getbits(i32 -1)
  %2 = load i16* @raw_width, align 2
  %3 = zext i16 %2 to i32
  br label %4

; <label>:4                                       ; preds = %87, %0
  %sum.0 = phi i32 [ 0, %0 ], [ %sum.1, %87 ]
  %col.0 = phi i32 [ %3, %0 ], [ %5, %87 ]
  %5 = add nsw i32 %col.0, -1
  %6 = icmp ne i32 %col.0, 0
  br i1 %6, label %7, label %88

; <label>:7                                       ; preds = %4
  br label %8

; <label>:8                                       ; preds = %85, %7
  %sum.1 = phi i32 [ %sum.0, %7 ], [ %51, %85 ]
  %row.0 = phi i32 [ 0, %7 ], [ %86, %85 ]
  %9 = load i16* @raw_height, align 2
  %10 = zext i16 %9 to i32
  %11 = add nsw i32 %10, 1
  %12 = icmp slt i32 %row.0, %11
  br i1 %12, label %13, label %87

; <label>:13                                      ; preds = %8
  %14 = load i16* @raw_height, align 2
  %15 = zext i16 %14 to i32
  %16 = icmp eq i32 %row.0, %15
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %13
  br label %18

; <label>:18                                      ; preds = %17, %13
  %row.1 = phi i32 [ 1, %17 ], [ %row.0, %13 ]
  %19 = call i32 @getbits(i32 2)
  %20 = sub i32 4, %19
  %21 = icmp eq i32 %20, 3
  br i1 %21, label %22, label %26

; <label>:22                                      ; preds = %18
  %23 = call i32 @getbits(i32 1)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %22
  br label %26

; <label>:26                                      ; preds = %25, %22, %18
  %len.0 = phi i32 [ 0, %25 ], [ %20, %22 ], [ %20, %18 ]
  %27 = icmp eq i32 %len.0, 4
  br i1 %27, label %28, label %40

; <label>:28                                      ; preds = %26
  br label %29

; <label>:29                                      ; preds = %37, %28
  %len.1 = phi i32 [ %len.0, %28 ], [ %38, %37 ]
  %30 = icmp slt i32 %len.1, 17
  br i1 %30, label %31, label %35

; <label>:31                                      ; preds = %29
  %32 = call i32 @getbits(i32 1)
  %33 = icmp ne i32 %32, 0
  %34 = xor i1 %33, true
  br label %35

; <label>:35                                      ; preds = %31, %29
  %36 = phi i1 [ false, %29 ], [ %34, %31 ]
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %35
  %38 = add nsw i32 %len.1, 1
  br label %29

; <label>:39                                      ; preds = %35
  br label %40

; <label>:40                                      ; preds = %39, %26
  %len.2 = phi i32 [ %len.1, %39 ], [ %len.0, %26 ]
  %41 = call i32 @getbits(i32 %len.2)
  %42 = sub nsw i32 %len.2, 1
  %43 = shl i32 1, %42
  %44 = and i32 %41, %43
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %50

; <label>:46                                      ; preds = %40
  %47 = shl i32 1, %len.2
  %48 = sub nsw i32 %47, 1
  %49 = sub nsw i32 %41, %48
  br label %50

; <label>:50                                      ; preds = %46, %40
  %diff.0 = phi i32 [ %49, %46 ], [ %41, %40 ]
  %51 = add nsw i32 %sum.1, %diff.0
  %52 = ashr i32 %51, 12
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %55

; <label>:54                                      ; preds = %50
  call void @derror()
  br label %55

; <label>:55                                      ; preds = %54, %50
  %56 = load i16* @height, align 2
  %57 = zext i16 %56 to i32
  %58 = icmp slt i32 %row.1, %57
  br i1 %58, label %59, label %84

; <label>:59                                      ; preds = %55
  %60 = trunc i32 %51 to i16
  %61 = load i32* @filters, align 4
  %62 = shl i32 %row.1, 1
  %63 = and i32 %62, 14
  %64 = and i32 %5, 1
  %65 = add nsw i32 %63, %64
  %66 = shl i32 %65, 1
  %67 = lshr i32 %61, %66
  %68 = and i32 %67, 3
  %69 = zext i32 %68 to i64
  %70 = load i16* @shrink, align 2
  %71 = zext i16 %70 to i32
  %72 = ashr i32 %row.1, %71
  %73 = load i16* @iwidth, align 2
  %74 = zext i16 %73 to i32
  %75 = mul nsw i32 %72, %74
  %76 = load i16* @shrink, align 2
  %77 = zext i16 %76 to i32
  %78 = ashr i32 %5, %77
  %79 = add nsw i32 %75, %78
  %80 = sext i32 %79 to i64
  %81 = load [4 x i16]** @image, align 8
  %82 = getelementptr inbounds [4 x i16]* %81, i64 %80
  %83 = getelementptr inbounds [4 x i16]* %82, i32 0, i64 %69
  store i16 %60, i16* %83, align 2
  br label %84

; <label>:84                                      ; preds = %59, %55
  br label %85

; <label>:85                                      ; preds = %84
  %86 = add nsw i32 %row.1, 2
  br label %8

; <label>:87                                      ; preds = %8
  br label %4

; <label>:88                                      ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sony_arw2_load_raw() #0 {
  %pix = alloca [16 x i16], align 16
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i32* @tiff_bps, align 4
  %4 = mul i32 %2, %3
  %5 = lshr i32 %4, 3
  %6 = zext i32 %5 to i64
  %7 = call noalias i8* @malloc(i64 %6) #4
  call void @merror(i8* %7, i8* getelementptr inbounds ([21 x i8]* @.str32, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %226, %0
  %row.0 = phi i32 [ 0, %0 ], [ %227, %226 ]
  %9 = load i16* @height, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %row.0, %10
  br i1 %11, label %12, label %228

; <label>:12                                      ; preds = %8
  %13 = load i16* @raw_width, align 2
  %14 = zext i16 %13 to i32
  %15 = load i32* @tiff_bps, align 4
  %16 = mul i32 %14, %15
  %17 = lshr i32 %16, 3
  %18 = zext i32 %17 to i64
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = call i64 @fread(i8* %7, i64 1, i64 %18, %struct._IO_FILE* %19)
  %21 = load i32* @tiff_bps, align 4
  %22 = icmp eq i32 %21, 8
  br i1 %22, label %23, label %141

; <label>:23                                      ; preds = %12
  br label %24

; <label>:24                                      ; preds = %138, %23
  %col.0 = phi i32 [ 0, %23 ], [ %137, %138 ]
  %dp.0 = phi i8* [ %7, %23 ], [ %139, %138 ]
  %25 = load i16* @width, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, 30
  %28 = icmp slt i32 %col.0, %27
  br i1 %28, label %29, label %140

; <label>:29                                      ; preds = %24
  %30 = call i32 @sget4(i8* %dp.0)
  %31 = and i32 2047, %30
  %32 = ashr i32 %30, 11
  %33 = and i32 2047, %32
  %34 = ashr i32 %30, 22
  %35 = and i32 15, %34
  %36 = ashr i32 %30, 26
  %37 = and i32 15, %36
  br label %38

; <label>:38                                      ; preds = %47, %29
  %sh.0 = phi i32 [ 0, %29 ], [ %48, %47 ]
  %39 = icmp slt i32 %sh.0, 4
  br i1 %39, label %40, label %44

; <label>:40                                      ; preds = %38
  %41 = shl i32 128, %sh.0
  %42 = sub nsw i32 %31, %33
  %43 = icmp sle i32 %41, %42
  br label %44

; <label>:44                                      ; preds = %40, %38
  %45 = phi i1 [ false, %38 ], [ %43, %40 ]
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %44
  br label %47

; <label>:47                                      ; preds = %46
  %48 = add nsw i32 %sh.0, 1
  br label %38

; <label>:49                                      ; preds = %44
  br label %50

; <label>:50                                      ; preds = %90, %49
  %bit.0 = phi i32 [ 30, %49 ], [ %bit.2, %90 ]
  %i.0 = phi i32 [ 0, %49 ], [ %91, %90 ]
  %51 = icmp slt i32 %i.0, 16
  br i1 %51, label %52, label %92

; <label>:52                                      ; preds = %50
  %53 = icmp eq i32 %i.0, %35
  br i1 %53, label %54, label %58

; <label>:54                                      ; preds = %52
  %55 = trunc i32 %31 to i16
  %56 = sext i32 %i.0 to i64
  %57 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %56
  store i16 %55, i16* %57, align 2
  br label %89

; <label>:58                                      ; preds = %52
  %59 = icmp eq i32 %i.0, %37
  br i1 %59, label %60, label %64

; <label>:60                                      ; preds = %58
  %61 = trunc i32 %33 to i16
  %62 = sext i32 %i.0 to i64
  %63 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %62
  store i16 %61, i16* %63, align 2
  br label %88

; <label>:64                                      ; preds = %58
  %65 = ashr i32 %bit.0, 3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8* %dp.0, i64 %66
  %68 = call zeroext i16 @sget2(i8* %67)
  %69 = zext i16 %68 to i32
  %70 = and i32 %bit.0, 7
  %71 = ashr i32 %69, %70
  %72 = and i32 %71, 127
  %73 = shl i32 %72, %sh.0
  %74 = add nsw i32 %73, %33
  %75 = trunc i32 %74 to i16
  %76 = sext i32 %i.0 to i64
  %77 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %76
  store i16 %75, i16* %77, align 2
  %78 = sext i32 %i.0 to i64
  %79 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %78
  %80 = load i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = icmp sgt i32 %81, 2047
  br i1 %82, label %83, label %86

; <label>:83                                      ; preds = %64
  %84 = sext i32 %i.0 to i64
  %85 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %84
  store i16 2047, i16* %85, align 2
  br label %86

; <label>:86                                      ; preds = %83, %64
  %87 = add nsw i32 %bit.0, 7
  br label %88

; <label>:88                                      ; preds = %86, %60
  %bit.1 = phi i32 [ %bit.0, %60 ], [ %87, %86 ]
  br label %89

; <label>:89                                      ; preds = %88, %54
  %bit.2 = phi i32 [ %bit.0, %54 ], [ %bit.1, %88 ]
  br label %90

; <label>:90                                      ; preds = %89
  %91 = add nsw i32 %i.0, 1
  br label %50

; <label>:92                                      ; preds = %50
  br label %93

; <label>:93                                      ; preds = %130, %92
  %col.1 = phi i32 [ %col.0, %92 ], [ %132, %130 ]
  %i.1 = phi i32 [ 0, %92 ], [ %131, %130 ]
  %94 = icmp slt i32 %i.1, 16
  br i1 %94, label %95, label %133

; <label>:95                                      ; preds = %93
  %96 = sext i32 %i.1 to i64
  %97 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %96
  %98 = load i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = shl i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %101
  %103 = load i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = ashr i32 %104, 1
  %106 = trunc i32 %105 to i16
  %107 = load i32* @filters, align 4
  %108 = shl i32 %row.0, 1
  %109 = and i32 %108, 14
  %110 = and i32 %col.1, 1
  %111 = add nsw i32 %109, %110
  %112 = shl i32 %111, 1
  %113 = lshr i32 %107, %112
  %114 = and i32 %113, 3
  %115 = zext i32 %114 to i64
  %116 = load i16* @shrink, align 2
  %117 = zext i16 %116 to i32
  %118 = ashr i32 %row.0, %117
  %119 = load i16* @iwidth, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nsw i32 %118, %120
  %122 = load i16* @shrink, align 2
  %123 = zext i16 %122 to i32
  %124 = ashr i32 %col.1, %123
  %125 = add nsw i32 %121, %124
  %126 = sext i32 %125 to i64
  %127 = load [4 x i16]** @image, align 8
  %128 = getelementptr inbounds [4 x i16]* %127, i64 %126
  %129 = getelementptr inbounds [4 x i16]* %128, i32 0, i64 %115
  store i16 %106, i16* %129, align 2
  br label %130

; <label>:130                                     ; preds = %95
  %131 = add nsw i32 %i.1, 1
  %132 = add nsw i32 %col.1, 2
  br label %93

; <label>:133                                     ; preds = %93
  %134 = and i32 %col.1, 1
  %135 = icmp ne i32 %134, 0
  %136 = select i1 %135, i32 1, i32 31
  %137 = sub nsw i32 %col.1, %136
  br label %138

; <label>:138                                     ; preds = %133
  %139 = getelementptr inbounds i8* %dp.0, i64 16
  br label %24

; <label>:140                                     ; preds = %24
  br label %225

; <label>:141                                     ; preds = %12
  %142 = load i32* @tiff_bps, align 4
  %143 = icmp eq i32 %142, 12
  br i1 %143, label %144, label %224

; <label>:144                                     ; preds = %141
  br label %145

; <label>:145                                     ; preds = %220, %144
  %col.2 = phi i32 [ 0, %144 ], [ %222, %220 ]
  %dp.1 = phi i8* [ %7, %144 ], [ %221, %220 ]
  %146 = load i16* @width, align 2
  %147 = zext i16 %146 to i32
  %148 = icmp slt i32 %col.2, %147
  br i1 %148, label %149, label %223

; <label>:149                                     ; preds = %145
  %150 = getelementptr inbounds i8* %dp.1, i64 1
  %151 = load i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = shl i32 %152, 8
  %154 = getelementptr inbounds i8* %dp.1, i64 0
  %155 = load i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = or i32 %153, %156
  %158 = and i32 %157, 4095
  %159 = shl i32 %158, 1
  %160 = trunc i32 %159 to i16
  %161 = load i32* @filters, align 4
  %162 = shl i32 %row.0, 1
  %163 = and i32 %162, 14
  %164 = and i32 %col.2, 1
  %165 = add nsw i32 %163, %164
  %166 = shl i32 %165, 1
  %167 = lshr i32 %161, %166
  %168 = and i32 %167, 3
  %169 = zext i32 %168 to i64
  %170 = load i16* @shrink, align 2
  %171 = zext i16 %170 to i32
  %172 = ashr i32 %row.0, %171
  %173 = load i16* @iwidth, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nsw i32 %172, %174
  %176 = load i16* @shrink, align 2
  %177 = zext i16 %176 to i32
  %178 = ashr i32 %col.2, %177
  %179 = add nsw i32 %175, %178
  %180 = sext i32 %179 to i64
  %181 = load [4 x i16]** @image, align 8
  %182 = getelementptr inbounds [4 x i16]* %181, i64 %180
  %183 = getelementptr inbounds [4 x i16]* %182, i32 0, i64 %169
  store i16 %160, i16* %183, align 2
  %184 = getelementptr inbounds i8* %dp.1, i64 2
  %185 = load i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = shl i32 %186, 4
  %188 = getelementptr inbounds i8* %dp.1, i64 1
  %189 = load i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = ashr i32 %190, 4
  %192 = or i32 %187, %191
  %193 = shl i32 %192, 1
  %194 = trunc i32 %193 to i16
  %195 = load i32* @filters, align 4
  %196 = shl i32 %row.0, 1
  %197 = and i32 %196, 14
  %198 = add nsw i32 %col.2, 1
  %199 = and i32 %198, 1
  %200 = add nsw i32 %197, %199
  %201 = shl i32 %200, 1
  %202 = lshr i32 %195, %201
  %203 = and i32 %202, 3
  %204 = zext i32 %203 to i64
  %205 = load i16* @shrink, align 2
  %206 = zext i16 %205 to i32
  %207 = ashr i32 %row.0, %206
  %208 = load i16* @iwidth, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nsw i32 %207, %209
  %211 = add nsw i32 %col.2, 1
  %212 = load i16* @shrink, align 2
  %213 = zext i16 %212 to i32
  %214 = ashr i32 %211, %213
  %215 = add nsw i32 %210, %214
  %216 = sext i32 %215 to i64
  %217 = load [4 x i16]** @image, align 8
  %218 = getelementptr inbounds [4 x i16]* %217, i64 %216
  %219 = getelementptr inbounds [4 x i16]* %218, i32 0, i64 %204
  store i16 %194, i16* %219, align 2
  br label %220

; <label>:220                                     ; preds = %149
  %221 = getelementptr inbounds i8* %dp.1, i64 3
  %222 = add nsw i32 %col.2, 2
  br label %145

; <label>:223                                     ; preds = %145
  br label %224

; <label>:224                                     ; preds = %223, %141
  br label %225

; <label>:225                                     ; preds = %224, %140
  br label %226

; <label>:226                                     ; preds = %225
  %227 = add nsw i32 %row.0, 1
  br label %8

; <label>:228                                     ; preds = %8
  call void @free(i8* %7) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @smal_decode_segment([2 x i32]* %seg, i32 %holes) #0 {
  %hist = alloca [3 x [13 x i8]], align 16
  %sym = alloca [3 x i32], align 4
  %pred = alloca [2 x i8], align 1
  %1 = bitcast [3 x [13 x i8]]* %hist to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([3 x [13 x i8]]* @smal_decode_segment.hist, i32 0, i32 0, i32 0), i64 39, i32 16, i1 false)
  %2 = bitcast [2 x i8]* %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 2, i32 1, i1 false)
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = getelementptr inbounds [2 x i32]* %seg, i64 0
  %5 = getelementptr inbounds [2 x i32]* %4, i32 0, i64 1
  %6 = load i32* %5, align 4
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = call i32 @fseek(%struct._IO_FILE* %3, i64 %8, i32 0)
  %10 = call i32 @getbits(i32 -1)
  %11 = getelementptr inbounds [2 x i32]* %seg, i64 0
  %12 = getelementptr inbounds [2 x i32]* %11, i32 0, i64 0
  %13 = load i32* %12, align 4
  br label %14

; <label>:14                                      ; preds = %377, %0
  %nbits.0 = phi i32 [ 8, %0 ], [ %nbits.1, %377 ]
  %carry.0 = phi i32 [ 0, %0 ], [ %carry.1, %377 ]
  %high.0 = phi i32 [ 255, %0 ], [ %high.1, %377 ]
  %data.0 = phi i16 [ 0, %0 ], [ %data.1, %377 ]
  %range.0 = phi i16 [ 0, %0 ], [ %range.1, %377 ]
  %pix.0 = phi i32 [ %13, %0 ], [ %378, %377 ]
  %15 = getelementptr inbounds [2 x i32]* %seg, i64 1
  %16 = getelementptr inbounds [2 x i32]* %15, i32 0, i64 0
  %17 = load i32* %16, align 4
  %18 = icmp ult i32 %pix.0, %17
  br i1 %18, label %19, label %379

; <label>:19                                      ; preds = %14
  br label %20

; <label>:20                                      ; preds = %267, %19
  %s.0 = phi i32 [ 0, %19 ], [ %268, %267 ]
  %nbits.1 = phi i32 [ %nbits.0, %19 ], [ %nbits.4, %267 ]
  %carry.1 = phi i32 [ %carry.0, %19 ], [ %carry.3, %267 ]
  %high.1 = phi i32 [ %high.0, %19 ], [ %135, %267 ]
  %data.1 = phi i16 [ %data.0, %19 ], [ %data.3, %267 ]
  %range.1 = phi i16 [ %range.0, %19 ], [ %134, %267 ]
  %21 = icmp slt i32 %s.0, 3
  br i1 %21, label %22, label %269

; <label>:22                                      ; preds = %20
  %23 = zext i16 %data.1 to i32
  %24 = shl i32 %23, %nbits.1
  %25 = call i32 @getbits(i32 %nbits.1)
  %26 = or i32 %24, %25
  %27 = trunc i32 %26 to i16
  %28 = icmp slt i32 %carry.1, 0
  br i1 %28, label %29, label %38

; <label>:29                                      ; preds = %22
  %30 = add nsw i32 %carry.1, 1
  %31 = add nsw i32 %nbits.1, %30
  %32 = icmp slt i32 %31, 1
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %29
  %34 = sub nsw i32 %31, 1
  br label %36

; <label>:35                                      ; preds = %29
  br label %36

; <label>:36                                      ; preds = %35, %33
  %37 = phi i32 [ %34, %33 ], [ 0, %35 ]
  br label %38

; <label>:38                                      ; preds = %36, %22
  %nbits.2 = phi i32 [ %31, %36 ], [ %nbits.1, %22 ]
  %carry.2 = phi i32 [ %37, %36 ], [ %carry.1, %22 ]
  br label %39

; <label>:39                                      ; preds = %48, %38
  %nbits.3 = phi i32 [ %nbits.2, %38 ], [ %40, %48 ]
  %40 = add nsw i32 %nbits.3, -1
  %41 = icmp sge i32 %40, 0
  br i1 %41, label %42, label %49

; <label>:42                                      ; preds = %39
  %43 = zext i16 %27 to i32
  %44 = ashr i32 %43, %40
  %45 = and i32 %44, 255
  %46 = icmp eq i32 %45, 255
  br i1 %46, label %47, label %48

; <label>:47                                      ; preds = %42
  br label %49

; <label>:48                                      ; preds = %42
  br label %39

; <label>:49                                      ; preds = %47, %39
  %50 = icmp sgt i32 %40, 0
  br i1 %50, label %51, label %69

; <label>:51                                      ; preds = %49
  %52 = zext i16 %27 to i32
  %53 = sub nsw i32 %40, 1
  %54 = shl i32 1, %53
  %55 = sub nsw i32 %54, 1
  %56 = and i32 %52, %55
  %57 = shl i32 %56, 1
  %58 = zext i16 %27 to i32
  %59 = zext i16 %27 to i32
  %60 = sub nsw i32 %40, 1
  %61 = shl i32 1, %60
  %62 = and i32 %59, %61
  %63 = shl i32 %62, 1
  %64 = add nsw i32 %58, %63
  %65 = shl i32 -1, %40
  %66 = and i32 %64, %65
  %67 = or i32 %57, %66
  %68 = trunc i32 %67 to i16
  br label %69

; <label>:69                                      ; preds = %51, %49
  %data.2 = phi i16 [ %68, %51 ], [ %27, %49 ]
  %70 = icmp sge i32 %40, 0
  br i1 %70, label %71, label %77

; <label>:71                                      ; preds = %69
  %72 = call i32 @getbits(i32 1)
  %73 = zext i16 %data.2 to i32
  %74 = add i32 %73, %72
  %75 = trunc i32 %74 to i16
  %76 = sub nsw i32 %40, 8
  br label %77

; <label>:77                                      ; preds = %71, %69
  %carry.3 = phi i32 [ %76, %71 ], [ %carry.2, %69 ]
  %data.3 = phi i16 [ %75, %71 ], [ %data.2, %69 ]
  %78 = zext i16 %data.3 to i32
  %79 = zext i16 %range.1 to i32
  %80 = sub nsw i32 %78, %79
  %81 = add nsw i32 %80, 1
  %82 = and i32 %81, 65535
  %83 = shl i32 %82, 2
  %84 = sub nsw i32 %83, 1
  %85 = ashr i32 %high.1, 4
  %86 = sdiv i32 %84, %85
  br label %87

; <label>:87                                      ; preds = %97, %77
  %bin.0 = phi i32 [ 0, %77 ], [ %98, %97 ]
  %88 = add nsw i32 %bin.0, 5
  %89 = sext i32 %88 to i64
  %90 = sext i32 %s.0 to i64
  %91 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %90
  %92 = getelementptr inbounds [13 x i8]* %91, i32 0, i64 %89
  %93 = load i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp sgt i32 %94, %86
  br i1 %95, label %96, label %99

; <label>:96                                      ; preds = %87
  br label %97

; <label>:97                                      ; preds = %96
  %98 = add nsw i32 %bin.0, 1
  br label %87

; <label>:99                                      ; preds = %87
  %100 = add nsw i32 %bin.0, 5
  %101 = sext i32 %100 to i64
  %102 = sext i32 %s.0 to i64
  %103 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %102
  %104 = getelementptr inbounds [13 x i8]* %103, i32 0, i64 %101
  %105 = load i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = ashr i32 %high.1, 4
  %108 = mul nsw i32 %106, %107
  %109 = ashr i32 %108, 2
  %110 = icmp ne i32 %bin.0, 0
  br i1 %110, label %111, label %122

; <label>:111                                     ; preds = %99
  %112 = add nsw i32 %bin.0, 4
  %113 = sext i32 %112 to i64
  %114 = sext i32 %s.0 to i64
  %115 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %114
  %116 = getelementptr inbounds [13 x i8]* %115, i32 0, i64 %113
  %117 = load i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = ashr i32 %high.1, 4
  %120 = mul nsw i32 %118, %119
  %121 = ashr i32 %120, 2
  br label %122

; <label>:122                                     ; preds = %111, %99
  %high.2 = phi i32 [ %121, %111 ], [ %high.1, %99 ]
  %123 = sub nsw i32 %high.2, %109
  br label %124

; <label>:124                                     ; preds = %128, %122
  %nbits.4 = phi i32 [ 0, %122 ], [ %129, %128 ]
  %125 = shl i32 %123, %nbits.4
  %126 = icmp slt i32 %125, 128
  br i1 %126, label %127, label %130

; <label>:127                                     ; preds = %124
  br label %128

; <label>:128                                     ; preds = %127
  %129 = add nsw i32 %nbits.4, 1
  br label %124

; <label>:130                                     ; preds = %124
  %131 = zext i16 %range.1 to i32
  %132 = add nsw i32 %131, %109
  %133 = shl i32 %132, %nbits.4
  %134 = trunc i32 %133 to i16
  %135 = shl i32 %123, %nbits.4
  %136 = sext i32 %s.0 to i64
  %137 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %136
  %138 = getelementptr inbounds [13 x i8]* %137, i32 0, i64 1
  %139 = load i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = sext i32 %s.0 to i64
  %142 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %141
  %143 = getelementptr inbounds [13 x i8]* %142, i32 0, i64 2
  %144 = load i8* %143, align 1
  %145 = add i8 %144, 1
  store i8 %145, i8* %143, align 1
  %146 = zext i8 %145 to i32
  %147 = sext i32 %s.0 to i64
  %148 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %147
  %149 = getelementptr inbounds [13 x i8]* %148, i32 0, i64 3
  %150 = load i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = icmp sgt i32 %146, %151
  br i1 %152, label %153, label %184

; <label>:153                                     ; preds = %130
  %154 = add nsw i32 %140, 1
  %155 = sext i32 %s.0 to i64
  %156 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %155
  %157 = getelementptr inbounds [13 x i8]* %156, i32 0, i64 0
  %158 = load i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = and i32 %154, %159
  %161 = add nsw i32 %160, 4
  %162 = sext i32 %161 to i64
  %163 = sext i32 %s.0 to i64
  %164 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %163
  %165 = getelementptr inbounds [13 x i8]* %164, i32 0, i64 %162
  %166 = load i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = add nsw i32 %160, 5
  %169 = sext i32 %168 to i64
  %170 = sext i32 %s.0 to i64
  %171 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %170
  %172 = getelementptr inbounds [13 x i8]* %171, i32 0, i64 %169
  %173 = load i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = sub nsw i32 %167, %174
  %176 = ashr i32 %175, 2
  %177 = trunc i32 %176 to i8
  %178 = sext i32 %s.0 to i64
  %179 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %178
  %180 = getelementptr inbounds [13 x i8]* %179, i32 0, i64 3
  store i8 %177, i8* %180, align 1
  %181 = sext i32 %s.0 to i64
  %182 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %181
  %183 = getelementptr inbounds [13 x i8]* %182, i32 0, i64 2
  store i8 1, i8* %183, align 1
  br label %184

; <label>:184                                     ; preds = %153, %130
  %next.0 = phi i32 [ %160, %153 ], [ %140, %130 ]
  %185 = sext i32 %s.0 to i64
  %186 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %185
  %187 = getelementptr inbounds [13 x i8]* %186, i32 0, i64 1
  %188 = load i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = add nsw i32 %189, 4
  %191 = sext i32 %190 to i64
  %192 = sext i32 %s.0 to i64
  %193 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %192
  %194 = getelementptr inbounds [13 x i8]* %193, i32 0, i64 %191
  %195 = load i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = sext i32 %s.0 to i64
  %198 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %197
  %199 = getelementptr inbounds [13 x i8]* %198, i32 0, i64 1
  %200 = load i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = add nsw i32 %201, 5
  %203 = sext i32 %202 to i64
  %204 = sext i32 %s.0 to i64
  %205 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %204
  %206 = getelementptr inbounds [13 x i8]* %205, i32 0, i64 %203
  %207 = load i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = sub nsw i32 %196, %208
  %210 = icmp sgt i32 %209, 1
  br i1 %210, label %211, label %260

; <label>:211                                     ; preds = %184
  %212 = sext i32 %s.0 to i64
  %213 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %212
  %214 = getelementptr inbounds [13 x i8]* %213, i32 0, i64 1
  %215 = load i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = icmp slt i32 %bin.0, %216
  br i1 %217, label %218, label %237

; <label>:218                                     ; preds = %211
  br label %219

; <label>:219                                     ; preds = %234, %218
  %i.0 = phi i32 [ %bin.0, %218 ], [ %235, %234 ]
  %220 = sext i32 %s.0 to i64
  %221 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %220
  %222 = getelementptr inbounds [13 x i8]* %221, i32 0, i64 1
  %223 = load i8* %222, align 1
  %224 = zext i8 %223 to i32
  %225 = icmp slt i32 %i.0, %224
  br i1 %225, label %226, label %236

; <label>:226                                     ; preds = %219
  %227 = add nsw i32 %i.0, 5
  %228 = sext i32 %227 to i64
  %229 = sext i32 %s.0 to i64
  %230 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %229
  %231 = getelementptr inbounds [13 x i8]* %230, i32 0, i64 %228
  %232 = load i8* %231, align 1
  %233 = add i8 %232, -1
  store i8 %233, i8* %231, align 1
  br label %234

; <label>:234                                     ; preds = %226
  %235 = add nsw i32 %i.0, 1
  br label %219

; <label>:236                                     ; preds = %219
  br label %259

; <label>:237                                     ; preds = %211
  %238 = icmp sle i32 %next.0, %bin.0
  br i1 %238, label %239, label %258

; <label>:239                                     ; preds = %237
  %240 = sext i32 %s.0 to i64
  %241 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %240
  %242 = getelementptr inbounds [13 x i8]* %241, i32 0, i64 1
  %243 = load i8* %242, align 1
  %244 = zext i8 %243 to i32
  br label %245

; <label>:245                                     ; preds = %255, %239
  %i.1 = phi i32 [ %244, %239 ], [ %256, %255 ]
  %246 = icmp slt i32 %i.1, %bin.0
  br i1 %246, label %247, label %257

; <label>:247                                     ; preds = %245
  %248 = add nsw i32 %i.1, 5
  %249 = sext i32 %248 to i64
  %250 = sext i32 %s.0 to i64
  %251 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %250
  %252 = getelementptr inbounds [13 x i8]* %251, i32 0, i64 %249
  %253 = load i8* %252, align 1
  %254 = add i8 %253, 1
  store i8 %254, i8* %252, align 1
  br label %255

; <label>:255                                     ; preds = %247
  %256 = add nsw i32 %i.1, 1
  br label %245

; <label>:257                                     ; preds = %245
  br label %258

; <label>:258                                     ; preds = %257, %237
  br label %259

; <label>:259                                     ; preds = %258, %236
  br label %260

; <label>:260                                     ; preds = %259, %184
  %261 = trunc i32 %next.0 to i8
  %262 = sext i32 %s.0 to i64
  %263 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %262
  %264 = getelementptr inbounds [13 x i8]* %263, i32 0, i64 1
  store i8 %261, i8* %264, align 1
  %265 = sext i32 %s.0 to i64
  %266 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 %265
  store i32 %bin.0, i32* %266, align 4
  br label %267

; <label>:267                                     ; preds = %260
  %268 = add nsw i32 %s.0, 1
  br label %20

; <label>:269                                     ; preds = %20
  %270 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 2
  %271 = load i32* %270, align 4
  %272 = shl i32 %271, 5
  %273 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 1
  %274 = load i32* %273, align 4
  %275 = shl i32 %274, 2
  %276 = or i32 %272, %275
  %277 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 0
  %278 = load i32* %277, align 4
  %279 = and i32 %278, 3
  %280 = or i32 %276, %279
  %281 = trunc i32 %280 to i8
  %282 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 0
  %283 = load i32* %282, align 4
  %284 = and i32 %283, 4
  %285 = icmp ne i32 %284, 0
  br i1 %285, label %286, label %296

; <label>:286                                     ; preds = %269
  %287 = zext i8 %281 to i32
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %289, label %292

; <label>:289                                     ; preds = %286
  %290 = zext i8 %281 to i32
  %291 = sub nsw i32 0, %290
  br label %293

; <label>:292                                     ; preds = %286
  br label %293

; <label>:293                                     ; preds = %292, %289
  %294 = phi i32 [ %291, %289 ], [ 128, %292 ]
  %295 = trunc i32 %294 to i8
  br label %296

; <label>:296                                     ; preds = %293, %269
  %diff.0 = phi i8 [ %295, %293 ], [ %281, %269 ]
  %297 = load %struct._IO_FILE** @ifp, align 8
  %298 = call i64 @ftell(%struct._IO_FILE* %297)
  %299 = add nsw i64 %298, 12
  %300 = getelementptr inbounds [2 x i32]* %seg, i64 1
  %301 = getelementptr inbounds [2 x i32]* %300, i32 0, i64 1
  %302 = load i32* %301, align 4
  %303 = zext i32 %302 to i64
  %304 = icmp sge i64 %299, %303
  br i1 %304, label %305, label %306

; <label>:305                                     ; preds = %296
  br label %306

; <label>:306                                     ; preds = %305, %296
  %diff.1 = phi i8 [ 0, %305 ], [ %diff.0, %296 ]
  %307 = zext i8 %diff.1 to i32
  %308 = and i32 %pix.0, 1
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds [2 x i8]* %pred, i32 0, i64 %309
  %311 = load i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = add nsw i32 %312, %307
  %314 = trunc i32 %313 to i8
  store i8 %314, i8* %310, align 1
  %315 = load i16* @raw_width, align 2
  %316 = zext i16 %315 to i32
  %317 = udiv i32 %pix.0, %316
  %318 = load i16* @top_margin, align 2
  %319 = zext i16 %318 to i32
  %320 = sub i32 %317, %319
  %321 = load i16* @raw_width, align 2
  %322 = zext i16 %321 to i32
  %323 = urem i32 %pix.0, %322
  %324 = load i16* @left_margin, align 2
  %325 = zext i16 %324 to i32
  %326 = sub i32 %323, %325
  %327 = load i16* @height, align 2
  %328 = zext i16 %327 to i32
  %329 = icmp ult i32 %320, %328
  br i1 %329, label %330, label %363

; <label>:330                                     ; preds = %306
  %331 = load i16* @width, align 2
  %332 = zext i16 %331 to i32
  %333 = icmp ult i32 %326, %332
  br i1 %333, label %334, label %363

; <label>:334                                     ; preds = %330
  %335 = and i32 %pix.0, 1
  %336 = zext i32 %335 to i64
  %337 = getelementptr inbounds [2 x i8]* %pred, i32 0, i64 %336
  %338 = load i8* %337, align 1
  %339 = zext i8 %338 to i16
  %340 = load i32* @filters, align 4
  %341 = shl i32 %320, 1
  %342 = and i32 %341, 14
  %343 = and i32 %326, 1
  %344 = add i32 %342, %343
  %345 = shl i32 %344, 1
  %346 = lshr i32 %340, %345
  %347 = and i32 %346, 3
  %348 = zext i32 %347 to i64
  %349 = load i16* @shrink, align 2
  %350 = zext i16 %349 to i32
  %351 = lshr i32 %320, %350
  %352 = load i16* @iwidth, align 2
  %353 = zext i16 %352 to i32
  %354 = mul i32 %351, %353
  %355 = load i16* @shrink, align 2
  %356 = zext i16 %355 to i32
  %357 = lshr i32 %326, %356
  %358 = add i32 %354, %357
  %359 = zext i32 %358 to i64
  %360 = load [4 x i16]** @image, align 8
  %361 = getelementptr inbounds [4 x i16]* %360, i64 %359
  %362 = getelementptr inbounds [4 x i16]* %361, i32 0, i64 %348
  store i16 %339, i16* %362, align 2
  br label %363

; <label>:363                                     ; preds = %334, %330, %306
  %364 = and i32 %pix.0, 1
  %365 = icmp ne i32 %364, 0
  br i1 %365, label %376, label %366

; <label>:366                                     ; preds = %363
  %367 = load i16* @raw_height, align 2
  %368 = zext i16 %367 to i32
  %369 = sub i32 %320, %368
  %370 = and i32 %369, 7
  %371 = ashr i32 %holes, %370
  %372 = and i32 %371, 1
  %373 = icmp ne i32 %372, 0
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %366
  %375 = add i32 %pix.0, 2
  br label %376

; <label>:376                                     ; preds = %374, %366, %363
  %pix.1 = phi i32 [ %pix.0, %363 ], [ %375, %374 ], [ %pix.0, %366 ]
  br label %377

; <label>:377                                     ; preds = %376
  %378 = add i32 %pix.1, 1
  br label %14

; <label>:379                                     ; preds = %14
  store i32 255, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @smal_v6_load_raw() #0 {
  %seg = alloca [2 x [2 x i32]], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 16, i32 0)
  %3 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 0
  %4 = getelementptr inbounds [2 x i32]* %3, i32 0, i64 0
  store i32 0, i32* %4, align 4
  %5 = call zeroext i16 @get2()
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 0
  %8 = getelementptr inbounds [2 x i32]* %7, i32 0, i64 1
  store i32 %6, i32* %8, align 4
  %9 = load i16* @raw_width, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16* @raw_height, align 2
  %12 = zext i16 %11 to i32
  %13 = mul nsw i32 %10, %12
  %14 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 1
  %15 = getelementptr inbounds [2 x i32]* %14, i32 0, i64 0
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 1
  %17 = getelementptr inbounds [2 x i32]* %16, i32 0, i64 1
  store i32 2147483647, i32* %17, align 4
  %18 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i32 0
  call void @smal_decode_segment([2 x i32]* %18, i32 0)
  store i32 0, i32* @use_gamma, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @median4(i32* %p) #0 {
  %1 = getelementptr inbounds i32* %p, i64 0
  %2 = load i32* %1, align 4
  br label %3

; <label>:3                                       ; preds = %28, %0
  %sum.0 = phi i32 [ %2, %0 ], [ %9, %28 ]
  %max.0 = phi i32 [ %2, %0 ], [ %max.1, %28 ]
  %min.0 = phi i32 [ %2, %0 ], [ %min.1, %28 ]
  %i.0 = phi i32 [ 1, %0 ], [ %29, %28 ]
  %4 = icmp slt i32 %i.0, 4
  br i1 %4, label %5, label %30

; <label>:5                                       ; preds = %3
  %6 = sext i32 %i.0 to i64
  %7 = getelementptr inbounds i32* %p, i64 %6
  %8 = load i32* %7, align 4
  %9 = add nsw i32 %sum.0, %8
  %10 = sext i32 %i.0 to i64
  %11 = getelementptr inbounds i32* %p, i64 %10
  %12 = load i32* %11, align 4
  %13 = icmp sgt i32 %min.0, %12
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %5
  %15 = sext i32 %i.0 to i64
  %16 = getelementptr inbounds i32* %p, i64 %15
  %17 = load i32* %16, align 4
  br label %18

; <label>:18                                      ; preds = %14, %5
  %min.1 = phi i32 [ %17, %14 ], [ %min.0, %5 ]
  %19 = sext i32 %i.0 to i64
  %20 = getelementptr inbounds i32* %p, i64 %19
  %21 = load i32* %20, align 4
  %22 = icmp slt i32 %max.0, %21
  br i1 %22, label %23, label %27

; <label>:23                                      ; preds = %18
  %24 = sext i32 %i.0 to i64
  %25 = getelementptr inbounds i32* %p, i64 %24
  %26 = load i32* %25, align 4
  br label %27

; <label>:27                                      ; preds = %23, %18
  %max.1 = phi i32 [ %26, %23 ], [ %max.0, %18 ]
  br label %28

; <label>:28                                      ; preds = %27
  %29 = add nsw i32 %i.0, 1
  br label %3

; <label>:30                                      ; preds = %3
  %31 = sub nsw i32 %sum.0, %min.0
  %32 = sub nsw i32 %31, %max.0
  %33 = ashr i32 %32, 1
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define void @fill_holes(i32 %holes) #0 {
  %val = alloca [4 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %418, %0
  %row.0 = phi i32 [ 2, %0 ], [ %419, %418 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = sub nsw i32 %3, 2
  %5 = icmp slt i32 %row.0, %4
  br i1 %5, label %6, label %420

; <label>:6                                       ; preds = %1
  %7 = load i16* @raw_height, align 2
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 %row.0, %8
  %10 = and i32 %9, 7
  %11 = ashr i32 %holes, %10
  %12 = and i32 %11, 1
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %15, label %14

; <label>:14                                      ; preds = %6
  br label %418

; <label>:15                                      ; preds = %6
  br label %16

; <label>:16                                      ; preds = %168, %15
  %col.0 = phi i32 [ 1, %15 ], [ %169, %168 ]
  %17 = load i16* @width, align 2
  %18 = zext i16 %17 to i32
  %19 = sub nsw i32 %18, 1
  %20 = icmp slt i32 %col.0, %19
  br i1 %20, label %21, label %170

; <label>:21                                      ; preds = %16
  %22 = load i32* @filters, align 4
  %23 = sub nsw i32 %row.0, 1
  %24 = shl i32 %23, 1
  %25 = and i32 %24, 14
  %26 = sub nsw i32 %col.0, 1
  %27 = and i32 %26, 1
  %28 = add nsw i32 %25, %27
  %29 = shl i32 %28, 1
  %30 = lshr i32 %22, %29
  %31 = and i32 %30, 3
  %32 = zext i32 %31 to i64
  %33 = sub nsw i32 %row.0, 1
  %34 = load i16* @shrink, align 2
  %35 = zext i16 %34 to i32
  %36 = ashr i32 %33, %35
  %37 = load i16* @iwidth, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nsw i32 %36, %38
  %40 = sub nsw i32 %col.0, 1
  %41 = load i16* @shrink, align 2
  %42 = zext i16 %41 to i32
  %43 = ashr i32 %40, %42
  %44 = add nsw i32 %39, %43
  %45 = sext i32 %44 to i64
  %46 = load [4 x i16]** @image, align 8
  %47 = getelementptr inbounds [4 x i16]* %46, i64 %45
  %48 = getelementptr inbounds [4 x i16]* %47, i32 0, i64 %32
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 0
  store i32 %50, i32* %51, align 4
  %52 = load i32* @filters, align 4
  %53 = sub nsw i32 %row.0, 1
  %54 = shl i32 %53, 1
  %55 = and i32 %54, 14
  %56 = add nsw i32 %col.0, 1
  %57 = and i32 %56, 1
  %58 = add nsw i32 %55, %57
  %59 = shl i32 %58, 1
  %60 = lshr i32 %52, %59
  %61 = and i32 %60, 3
  %62 = zext i32 %61 to i64
  %63 = sub nsw i32 %row.0, 1
  %64 = load i16* @shrink, align 2
  %65 = zext i16 %64 to i32
  %66 = ashr i32 %63, %65
  %67 = load i16* @iwidth, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nsw i32 %66, %68
  %70 = add nsw i32 %col.0, 1
  %71 = load i16* @shrink, align 2
  %72 = zext i16 %71 to i32
  %73 = ashr i32 %70, %72
  %74 = add nsw i32 %69, %73
  %75 = sext i32 %74 to i64
  %76 = load [4 x i16]** @image, align 8
  %77 = getelementptr inbounds [4 x i16]* %76, i64 %75
  %78 = getelementptr inbounds [4 x i16]* %77, i32 0, i64 %62
  %79 = load i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 1
  store i32 %80, i32* %81, align 4
  %82 = load i32* @filters, align 4
  %83 = add nsw i32 %row.0, 1
  %84 = shl i32 %83, 1
  %85 = and i32 %84, 14
  %86 = sub nsw i32 %col.0, 1
  %87 = and i32 %86, 1
  %88 = add nsw i32 %85, %87
  %89 = shl i32 %88, 1
  %90 = lshr i32 %82, %89
  %91 = and i32 %90, 3
  %92 = zext i32 %91 to i64
  %93 = add nsw i32 %row.0, 1
  %94 = load i16* @shrink, align 2
  %95 = zext i16 %94 to i32
  %96 = ashr i32 %93, %95
  %97 = load i16* @iwidth, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nsw i32 %96, %98
  %100 = sub nsw i32 %col.0, 1
  %101 = load i16* @shrink, align 2
  %102 = zext i16 %101 to i32
  %103 = ashr i32 %100, %102
  %104 = add nsw i32 %99, %103
  %105 = sext i32 %104 to i64
  %106 = load [4 x i16]** @image, align 8
  %107 = getelementptr inbounds [4 x i16]* %106, i64 %105
  %108 = getelementptr inbounds [4 x i16]* %107, i32 0, i64 %92
  %109 = load i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 2
  store i32 %110, i32* %111, align 4
  %112 = load i32* @filters, align 4
  %113 = add nsw i32 %row.0, 1
  %114 = shl i32 %113, 1
  %115 = and i32 %114, 14
  %116 = add nsw i32 %col.0, 1
  %117 = and i32 %116, 1
  %118 = add nsw i32 %115, %117
  %119 = shl i32 %118, 1
  %120 = lshr i32 %112, %119
  %121 = and i32 %120, 3
  %122 = zext i32 %121 to i64
  %123 = add nsw i32 %row.0, 1
  %124 = load i16* @shrink, align 2
  %125 = zext i16 %124 to i32
  %126 = ashr i32 %123, %125
  %127 = load i16* @iwidth, align 2
  %128 = zext i16 %127 to i32
  %129 = mul nsw i32 %126, %128
  %130 = add nsw i32 %col.0, 1
  %131 = load i16* @shrink, align 2
  %132 = zext i16 %131 to i32
  %133 = ashr i32 %130, %132
  %134 = add nsw i32 %129, %133
  %135 = sext i32 %134 to i64
  %136 = load [4 x i16]** @image, align 8
  %137 = getelementptr inbounds [4 x i16]* %136, i64 %135
  %138 = getelementptr inbounds [4 x i16]* %137, i32 0, i64 %122
  %139 = load i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 3
  store i32 %140, i32* %141, align 4
  %142 = getelementptr inbounds [4 x i32]* %val, i32 0, i32 0
  %143 = call i32 @median4(i32* %142)
  %144 = trunc i32 %143 to i16
  %145 = load i32* @filters, align 4
  %146 = shl i32 %row.0, 1
  %147 = and i32 %146, 14
  %148 = and i32 %col.0, 1
  %149 = add nsw i32 %147, %148
  %150 = shl i32 %149, 1
  %151 = lshr i32 %145, %150
  %152 = and i32 %151, 3
  %153 = zext i32 %152 to i64
  %154 = load i16* @shrink, align 2
  %155 = zext i16 %154 to i32
  %156 = ashr i32 %row.0, %155
  %157 = load i16* @iwidth, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nsw i32 %156, %158
  %160 = load i16* @shrink, align 2
  %161 = zext i16 %160 to i32
  %162 = ashr i32 %col.0, %161
  %163 = add nsw i32 %159, %162
  %164 = sext i32 %163 to i64
  %165 = load [4 x i16]** @image, align 8
  %166 = getelementptr inbounds [4 x i16]* %165, i64 %164
  %167 = getelementptr inbounds [4 x i16]* %166, i32 0, i64 %153
  store i16 %144, i16* %167, align 2
  br label %168

; <label>:168                                     ; preds = %21
  %169 = add nsw i32 %col.0, 4
  br label %16

; <label>:170                                     ; preds = %16
  br label %171

; <label>:171                                     ; preds = %415, %170
  %col.1 = phi i32 [ 2, %170 ], [ %416, %415 ]
  %172 = load i16* @width, align 2
  %173 = zext i16 %172 to i32
  %174 = sub nsw i32 %173, 2
  %175 = icmp slt i32 %col.1, %174
  br i1 %175, label %176, label %417

; <label>:176                                     ; preds = %171
  %177 = sub nsw i32 %row.0, 2
  %178 = load i16* @raw_height, align 2
  %179 = zext i16 %178 to i32
  %180 = sub nsw i32 %177, %179
  %181 = and i32 %180, 7
  %182 = ashr i32 %holes, %181
  %183 = and i32 %182, 1
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %194, label %185

; <label>:185                                     ; preds = %176
  %186 = add nsw i32 %row.0, 2
  %187 = load i16* @raw_height, align 2
  %188 = zext i16 %187 to i32
  %189 = sub nsw i32 %186, %188
  %190 = and i32 %189, 7
  %191 = ashr i32 %holes, %190
  %192 = and i32 %191, 1
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %194, label %275

; <label>:194                                     ; preds = %185, %176
  %195 = load i32* @filters, align 4
  %196 = shl i32 %row.0, 1
  %197 = and i32 %196, 14
  %198 = sub nsw i32 %col.1, 2
  %199 = and i32 %198, 1
  %200 = add nsw i32 %197, %199
  %201 = shl i32 %200, 1
  %202 = lshr i32 %195, %201
  %203 = and i32 %202, 3
  %204 = zext i32 %203 to i64
  %205 = load i16* @shrink, align 2
  %206 = zext i16 %205 to i32
  %207 = ashr i32 %row.0, %206
  %208 = load i16* @iwidth, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nsw i32 %207, %209
  %211 = sub nsw i32 %col.1, 2
  %212 = load i16* @shrink, align 2
  %213 = zext i16 %212 to i32
  %214 = ashr i32 %211, %213
  %215 = add nsw i32 %210, %214
  %216 = sext i32 %215 to i64
  %217 = load [4 x i16]** @image, align 8
  %218 = getelementptr inbounds [4 x i16]* %217, i64 %216
  %219 = getelementptr inbounds [4 x i16]* %218, i32 0, i64 %204
  %220 = load i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = load i32* @filters, align 4
  %223 = shl i32 %row.0, 1
  %224 = and i32 %223, 14
  %225 = add nsw i32 %col.1, 2
  %226 = and i32 %225, 1
  %227 = add nsw i32 %224, %226
  %228 = shl i32 %227, 1
  %229 = lshr i32 %222, %228
  %230 = and i32 %229, 3
  %231 = zext i32 %230 to i64
  %232 = load i16* @shrink, align 2
  %233 = zext i16 %232 to i32
  %234 = ashr i32 %row.0, %233
  %235 = load i16* @iwidth, align 2
  %236 = zext i16 %235 to i32
  %237 = mul nsw i32 %234, %236
  %238 = add nsw i32 %col.1, 2
  %239 = load i16* @shrink, align 2
  %240 = zext i16 %239 to i32
  %241 = ashr i32 %238, %240
  %242 = add nsw i32 %237, %241
  %243 = sext i32 %242 to i64
  %244 = load [4 x i16]** @image, align 8
  %245 = getelementptr inbounds [4 x i16]* %244, i64 %243
  %246 = getelementptr inbounds [4 x i16]* %245, i32 0, i64 %231
  %247 = load i16* %246, align 2
  %248 = zext i16 %247 to i32
  %249 = add nsw i32 %221, %248
  %250 = ashr i32 %249, 1
  %251 = trunc i32 %250 to i16
  %252 = load i32* @filters, align 4
  %253 = shl i32 %row.0, 1
  %254 = and i32 %253, 14
  %255 = and i32 %col.1, 1
  %256 = add nsw i32 %254, %255
  %257 = shl i32 %256, 1
  %258 = lshr i32 %252, %257
  %259 = and i32 %258, 3
  %260 = zext i32 %259 to i64
  %261 = load i16* @shrink, align 2
  %262 = zext i16 %261 to i32
  %263 = ashr i32 %row.0, %262
  %264 = load i16* @iwidth, align 2
  %265 = zext i16 %264 to i32
  %266 = mul nsw i32 %263, %265
  %267 = load i16* @shrink, align 2
  %268 = zext i16 %267 to i32
  %269 = ashr i32 %col.1, %268
  %270 = add nsw i32 %266, %269
  %271 = sext i32 %270 to i64
  %272 = load [4 x i16]** @image, align 8
  %273 = getelementptr inbounds [4 x i16]* %272, i64 %271
  %274 = getelementptr inbounds [4 x i16]* %273, i32 0, i64 %260
  store i16 %251, i16* %274, align 2
  br label %414

; <label>:275                                     ; preds = %185
  %276 = load i32* @filters, align 4
  %277 = shl i32 %row.0, 1
  %278 = and i32 %277, 14
  %279 = sub nsw i32 %col.1, 2
  %280 = and i32 %279, 1
  %281 = add nsw i32 %278, %280
  %282 = shl i32 %281, 1
  %283 = lshr i32 %276, %282
  %284 = and i32 %283, 3
  %285 = zext i32 %284 to i64
  %286 = load i16* @shrink, align 2
  %287 = zext i16 %286 to i32
  %288 = ashr i32 %row.0, %287
  %289 = load i16* @iwidth, align 2
  %290 = zext i16 %289 to i32
  %291 = mul nsw i32 %288, %290
  %292 = sub nsw i32 %col.1, 2
  %293 = load i16* @shrink, align 2
  %294 = zext i16 %293 to i32
  %295 = ashr i32 %292, %294
  %296 = add nsw i32 %291, %295
  %297 = sext i32 %296 to i64
  %298 = load [4 x i16]** @image, align 8
  %299 = getelementptr inbounds [4 x i16]* %298, i64 %297
  %300 = getelementptr inbounds [4 x i16]* %299, i32 0, i64 %285
  %301 = load i16* %300, align 2
  %302 = zext i16 %301 to i32
  %303 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 0
  store i32 %302, i32* %303, align 4
  %304 = load i32* @filters, align 4
  %305 = shl i32 %row.0, 1
  %306 = and i32 %305, 14
  %307 = add nsw i32 %col.1, 2
  %308 = and i32 %307, 1
  %309 = add nsw i32 %306, %308
  %310 = shl i32 %309, 1
  %311 = lshr i32 %304, %310
  %312 = and i32 %311, 3
  %313 = zext i32 %312 to i64
  %314 = load i16* @shrink, align 2
  %315 = zext i16 %314 to i32
  %316 = ashr i32 %row.0, %315
  %317 = load i16* @iwidth, align 2
  %318 = zext i16 %317 to i32
  %319 = mul nsw i32 %316, %318
  %320 = add nsw i32 %col.1, 2
  %321 = load i16* @shrink, align 2
  %322 = zext i16 %321 to i32
  %323 = ashr i32 %320, %322
  %324 = add nsw i32 %319, %323
  %325 = sext i32 %324 to i64
  %326 = load [4 x i16]** @image, align 8
  %327 = getelementptr inbounds [4 x i16]* %326, i64 %325
  %328 = getelementptr inbounds [4 x i16]* %327, i32 0, i64 %313
  %329 = load i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 1
  store i32 %330, i32* %331, align 4
  %332 = load i32* @filters, align 4
  %333 = sub nsw i32 %row.0, 2
  %334 = shl i32 %333, 1
  %335 = and i32 %334, 14
  %336 = and i32 %col.1, 1
  %337 = add nsw i32 %335, %336
  %338 = shl i32 %337, 1
  %339 = lshr i32 %332, %338
  %340 = and i32 %339, 3
  %341 = zext i32 %340 to i64
  %342 = sub nsw i32 %row.0, 2
  %343 = load i16* @shrink, align 2
  %344 = zext i16 %343 to i32
  %345 = ashr i32 %342, %344
  %346 = load i16* @iwidth, align 2
  %347 = zext i16 %346 to i32
  %348 = mul nsw i32 %345, %347
  %349 = load i16* @shrink, align 2
  %350 = zext i16 %349 to i32
  %351 = ashr i32 %col.1, %350
  %352 = add nsw i32 %348, %351
  %353 = sext i32 %352 to i64
  %354 = load [4 x i16]** @image, align 8
  %355 = getelementptr inbounds [4 x i16]* %354, i64 %353
  %356 = getelementptr inbounds [4 x i16]* %355, i32 0, i64 %341
  %357 = load i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 2
  store i32 %358, i32* %359, align 4
  %360 = load i32* @filters, align 4
  %361 = add nsw i32 %row.0, 2
  %362 = shl i32 %361, 1
  %363 = and i32 %362, 14
  %364 = and i32 %col.1, 1
  %365 = add nsw i32 %363, %364
  %366 = shl i32 %365, 1
  %367 = lshr i32 %360, %366
  %368 = and i32 %367, 3
  %369 = zext i32 %368 to i64
  %370 = add nsw i32 %row.0, 2
  %371 = load i16* @shrink, align 2
  %372 = zext i16 %371 to i32
  %373 = ashr i32 %370, %372
  %374 = load i16* @iwidth, align 2
  %375 = zext i16 %374 to i32
  %376 = mul nsw i32 %373, %375
  %377 = load i16* @shrink, align 2
  %378 = zext i16 %377 to i32
  %379 = ashr i32 %col.1, %378
  %380 = add nsw i32 %376, %379
  %381 = sext i32 %380 to i64
  %382 = load [4 x i16]** @image, align 8
  %383 = getelementptr inbounds [4 x i16]* %382, i64 %381
  %384 = getelementptr inbounds [4 x i16]* %383, i32 0, i64 %369
  %385 = load i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 3
  store i32 %386, i32* %387, align 4
  %388 = getelementptr inbounds [4 x i32]* %val, i32 0, i32 0
  %389 = call i32 @median4(i32* %388)
  %390 = trunc i32 %389 to i16
  %391 = load i32* @filters, align 4
  %392 = shl i32 %row.0, 1
  %393 = and i32 %392, 14
  %394 = and i32 %col.1, 1
  %395 = add nsw i32 %393, %394
  %396 = shl i32 %395, 1
  %397 = lshr i32 %391, %396
  %398 = and i32 %397, 3
  %399 = zext i32 %398 to i64
  %400 = load i16* @shrink, align 2
  %401 = zext i16 %400 to i32
  %402 = ashr i32 %row.0, %401
  %403 = load i16* @iwidth, align 2
  %404 = zext i16 %403 to i32
  %405 = mul nsw i32 %402, %404
  %406 = load i16* @shrink, align 2
  %407 = zext i16 %406 to i32
  %408 = ashr i32 %col.1, %407
  %409 = add nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = load [4 x i16]** @image, align 8
  %412 = getelementptr inbounds [4 x i16]* %411, i64 %410
  %413 = getelementptr inbounds [4 x i16]* %412, i32 0, i64 %399
  store i16 %390, i16* %413, align 2
  br label %414

; <label>:414                                     ; preds = %275, %194
  br label %415

; <label>:415                                     ; preds = %414
  %416 = add nsw i32 %col.1, 4
  br label %171

; <label>:417                                     ; preds = %171
  br label %418

; <label>:418                                     ; preds = %417, %14
  %419 = add nsw i32 %row.0, 1
  br label %1

; <label>:420                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @smal_v9_load_raw() #0 {
  %seg = alloca [256 x [2 x i32]], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 67, i32 0)
  %3 = call i32 @get4()
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = zext i32 %3 to i64
  %8 = call i32 @fseek(%struct._IO_FILE* %6, i64 %7, i32 0)
  br label %9

; <label>:9                                       ; preds = %24, %0
  %i.0 = phi i32 [ 0, %0 ], [ %25, %24 ]
  %10 = mul i32 %5, 2
  %11 = icmp ult i32 %i.0, %10
  br i1 %11, label %12, label %26

; <label>:12                                      ; preds = %9
  %13 = call i32 @get4()
  %14 = zext i32 %13 to i64
  %15 = load i64* @data_offset, align 8
  %16 = and i32 %i.0, 1
  %17 = zext i32 %16 to i64
  %18 = mul nsw i64 %15, %17
  %19 = add nsw i64 %14, %18
  %20 = trunc i64 %19 to i32
  %21 = zext i32 %i.0 to i64
  %22 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i64 0
  %23 = getelementptr inbounds [2 x i32]* %22, i32 0, i64 %21
  store i32 %20, i32* %23, align 4
  br label %24

; <label>:24                                      ; preds = %12
  %25 = add i32 %i.0, 1
  br label %9

; <label>:26                                      ; preds = %9
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i32 @fseek(%struct._IO_FILE* %27, i64 78, i32 0)
  %29 = load %struct._IO_FILE** @ifp, align 8
  %30 = call i32 @getc_unlocked(%struct._IO_FILE* %29)
  %31 = load %struct._IO_FILE** @ifp, align 8
  %32 = call i32 @fseek(%struct._IO_FILE* %31, i64 88, i32 0)
  %33 = load i16* @raw_height, align 2
  %34 = zext i16 %33 to i32
  %35 = load i16* @raw_width, align 2
  %36 = zext i16 %35 to i32
  %37 = mul nsw i32 %34, %36
  %38 = zext i32 %5 to i64
  %39 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i64 %38
  %40 = getelementptr inbounds [2 x i32]* %39, i32 0, i64 0
  store i32 %37, i32* %40, align 4
  %41 = call i32 @get4()
  %42 = zext i32 %41 to i64
  %43 = load i64* @data_offset, align 8
  %44 = add nsw i64 %42, %43
  %45 = trunc i64 %44 to i32
  %46 = zext i32 %5 to i64
  %47 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i64 %46
  %48 = getelementptr inbounds [2 x i32]* %47, i32 0, i64 1
  store i32 %45, i32* %48, align 4
  br label %49

; <label>:49                                      ; preds = %55, %26
  %i.1 = phi i32 [ 0, %26 ], [ %56, %55 ]
  %50 = icmp ult i32 %i.1, %5
  br i1 %50, label %51, label %57

; <label>:51                                      ; preds = %49
  %52 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i32 0
  %53 = zext i32 %i.1 to i64
  %54 = getelementptr inbounds [2 x i32]* %52, i64 %53
  call void @smal_decode_segment([2 x i32]* %54, i32 %30)
  br label %55

; <label>:55                                      ; preds = %51
  %56 = add i32 %i.1, 1
  br label %49

; <label>:57                                      ; preds = %49
  %58 = icmp ne i32 %30, 0
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %57
  call void @fill_holes(i32 %30)
  br label %60

; <label>:60                                      ; preds = %59, %57
  ret void
}

; Function Attrs: nounwind uwtable
define void @foveon_decoder(i32 %size, i32 %code) #0 {
  %1 = icmp ne i32 %code, 0
  br i1 %1, label %12, label %2

; <label>:2                                       ; preds = %0
  br label %3

; <label>:3                                       ; preds = %9, %2
  %i.0 = phi i32 [ 0, %2 ], [ %10, %9 ]
  %4 = icmp ult i32 %i.0, %size
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %3
  %6 = call i32 @get4()
  %7 = sext i32 %i.0 to i64
  %8 = getelementptr inbounds [1024 x i32]* @foveon_decoder.huff, i32 0, i64 %7
  store i32 %6, i32* %8, align 4
  br label %9

; <label>:9                                       ; preds = %5
  %10 = add nsw i32 %i.0, 1
  br label %3

; <label>:11                                      ; preds = %3
  call void @init_decoder()
  br label %12

; <label>:12                                      ; preds = %11, %0
  %13 = load %struct.decode** @free_decode, align 8
  %14 = getelementptr inbounds %struct.decode* %13, i32 1
  store %struct.decode* %14, %struct.decode** @free_decode, align 8
  %15 = load %struct.decode** @free_decode, align 8
  %16 = icmp ugt %struct.decode* %15, getelementptr inbounds (%struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), i64 2048)
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %12
  %18 = load %struct._IO_FILE** @stderr, align 8
  %19 = load i8** @ifname, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([28 x i8]* @.str4, i32 0, i32 0), i8* %19)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0), i32 2) #8
  unreachable

; <label>:21                                      ; preds = %12
  %22 = icmp ne i32 %code, 0
  br i1 %22, label %23, label %37

; <label>:23                                      ; preds = %21
  br label %24

; <label>:24                                      ; preds = %34, %23
  %i.1 = phi i32 [ 0, %23 ], [ %35, %34 ]
  %25 = icmp ult i32 %i.1, %size
  br i1 %25, label %26, label %36

; <label>:26                                      ; preds = %24
  %27 = sext i32 %i.1 to i64
  %28 = getelementptr inbounds [1024 x i32]* @foveon_decoder.huff, i32 0, i64 %27
  %29 = load i32* %28, align 4
  %30 = icmp eq i32 %29, %code
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %26
  %32 = getelementptr inbounds %struct.decode* %13, i32 0, i32 1
  store i32 %i.1, i32* %32, align 4
  br label %54

; <label>:33                                      ; preds = %26
  br label %34

; <label>:34                                      ; preds = %33
  %35 = add nsw i32 %i.1, 1
  br label %24

; <label>:36                                      ; preds = %24
  br label %37

; <label>:37                                      ; preds = %36, %21
  %38 = lshr i32 %code, 27
  %39 = icmp sgt i32 %38, 26
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %37
  br label %54

; <label>:41                                      ; preds = %37
  %42 = add nsw i32 %38, 1
  %43 = shl i32 %42, 27
  %44 = and i32 %code, 67108863
  %45 = shl i32 %44, 1
  %46 = or i32 %43, %45
  %47 = load %struct.decode** @free_decode, align 8
  %48 = getelementptr inbounds %struct.decode* %13, i32 0, i32 0
  %49 = getelementptr inbounds [2 x %struct.decode*]* %48, i32 0, i64 0
  store %struct.decode* %47, %struct.decode** %49, align 8
  call void @foveon_decoder(i32 %size, i32 %46)
  %50 = load %struct.decode** @free_decode, align 8
  %51 = getelementptr inbounds %struct.decode* %13, i32 0, i32 0
  %52 = getelementptr inbounds [2 x %struct.decode*]* %51, i32 0, i64 1
  store %struct.decode* %50, %struct.decode** %52, align 8
  %53 = add i32 %46, 1
  call void @foveon_decoder(i32 %size, i32 %53)
  br label %54

; <label>:54                                      ; preds = %41, %40, %31
  ret void
}

; Function Attrs: nounwind uwtable
define void @foveon_thumb(%struct._IO_FILE* %tfp) #0 {
  %pred = alloca [3 x i16], align 2
  %1 = call i32 @get4()
  %2 = load i16* @thumb_width, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @thumb_height, align 2
  %5 = zext i16 %4 to i32
  %6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %tfp, i8* getelementptr inbounds ([14 x i8]* @.str12, i32 0, i32 0), i32 %3, i32 %5)
  %7 = icmp ugt i32 %1, 0
  br i1 %7, label %8, label %31

; <label>:8                                       ; preds = %0
  %9 = load i16* @thumb_width, align 2
  %10 = zext i16 %9 to i32
  %11 = mul nsw i32 %10, 3
  %12 = icmp ult i32 %1, %11
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %8
  br label %99

; <label>:14                                      ; preds = %8
  %15 = zext i32 %1 to i64
  %16 = call noalias i8* @malloc(i64 %15) #4
  call void @merror(i8* %16, i8* getelementptr inbounds ([15 x i8]* @.str33, i32 0, i32 0))
  br label %17

; <label>:17                                      ; preds = %28, %14
  %row.0 = phi i32 [ 0, %14 ], [ %29, %28 ]
  %18 = load i16* @thumb_height, align 2
  %19 = zext i16 %18 to i32
  %20 = icmp ult i32 %row.0, %19
  br i1 %20, label %21, label %30

; <label>:21                                      ; preds = %17
  %22 = zext i32 %1 to i64
  %23 = load %struct._IO_FILE** @ifp, align 8
  %24 = call i64 @fread(i8* %16, i64 1, i64 %22, %struct._IO_FILE* %23)
  %25 = load i16* @thumb_width, align 2
  %26 = zext i16 %25 to i64
  %27 = call i64 @fwrite(i8* %16, i64 3, i64 %26, %struct._IO_FILE* %tfp)
  br label %28

; <label>:28                                      ; preds = %21
  %29 = add i32 %row.0, 1
  br label %17

; <label>:30                                      ; preds = %17
  call void @free(i8* %16) #4
  br label %99

; <label>:31                                      ; preds = %0
  call void @foveon_decoder(i32 256, i32 0)
  br label %32

; <label>:32                                      ; preds = %97, %31
  %bit.0 = phi i32 [ 1, %31 ], [ %bit.1, %97 ]
  %bitbuf.0 = phi i32 [ 0, %31 ], [ %bitbuf.1, %97 ]
  %row.1 = phi i32 [ 0, %31 ], [ %98, %97 ]
  %33 = load i16* @thumb_height, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp ult i32 %row.1, %34
  br i1 %35, label %36, label %99

; <label>:36                                      ; preds = %32
  %37 = bitcast [3 x i16]* %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 6, i32 2, i1 false)
  %38 = icmp ne i32 %bit.0, 0
  br i1 %38, label %41, label %39

; <label>:39                                      ; preds = %36
  %40 = call i32 @get4()
  br label %41

; <label>:41                                      ; preds = %39, %36
  br label %42

; <label>:42                                      ; preds = %94, %41
  %bit.1 = phi i32 [ 0, %41 ], [ %bit.2, %94 ]
  %bitbuf.1 = phi i32 [ %bitbuf.0, %41 ], [ %bitbuf.2, %94 ]
  %col.0 = phi i32 [ 0, %41 ], [ %95, %94 ]
  %43 = load i16* @thumb_width, align 2
  %44 = zext i16 %43 to i32
  %45 = icmp ult i32 %col.0, %44
  br i1 %45, label %46, label %96

; <label>:46                                      ; preds = %42
  br label %47

; <label>:47                                      ; preds = %91, %46
  %c.0 = phi i32 [ 0, %46 ], [ %92, %91 ]
  %bit.2 = phi i32 [ %bit.1, %46 ], [ %bit.3, %91 ]
  %bitbuf.2 = phi i32 [ %bitbuf.1, %46 ], [ %bitbuf.3, %91 ]
  %48 = icmp ult i32 %c.0, 3
  br i1 %48, label %49, label %93

; <label>:49                                      ; preds = %47
  br label %50

; <label>:50                                      ; preds = %70, %49
  %bit.3 = phi i32 [ %bit.2, %49 ], [ %57, %70 ]
  %bitbuf.3 = phi i32 [ %bitbuf.2, %49 ], [ %bitbuf.5, %70 ]
  %dindex.0 = phi %struct.decode* [ getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %49 ], [ %76, %70 ]
  %51 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %52 = getelementptr inbounds [2 x %struct.decode*]* %51, i32 0, i64 0
  %53 = load %struct.decode** %52, align 8
  %54 = icmp ne %struct.decode* %53, null
  br i1 %54, label %55, label %77

; <label>:55                                      ; preds = %50
  %56 = sub i32 %bit.3, 1
  %57 = and i32 %56, 31
  %58 = icmp eq i32 %57, 31
  br i1 %58, label %59, label %70

; <label>:59                                      ; preds = %55
  br label %60

; <label>:60                                      ; preds = %67, %59
  %bitbuf.4 = phi i32 [ %bitbuf.3, %59 ], [ %66, %67 ]
  %i.0 = phi i32 [ 0, %59 ], [ %68, %67 ]
  %61 = icmp ult i32 %i.0, 4
  br i1 %61, label %62, label %69

; <label>:62                                      ; preds = %60
  %63 = shl i32 %bitbuf.4, 8
  %64 = load %struct._IO_FILE** @ifp, align 8
  %65 = call i32 @getc_unlocked(%struct._IO_FILE* %64)
  %66 = add i32 %63, %65
  br label %67

; <label>:67                                      ; preds = %62
  %68 = add i32 %i.0, 1
  br label %60

; <label>:69                                      ; preds = %60
  br label %70

; <label>:70                                      ; preds = %69, %55
  %bitbuf.5 = phi i32 [ %bitbuf.4, %69 ], [ %bitbuf.3, %55 ]
  %71 = lshr i32 %bitbuf.5, %57
  %72 = and i32 %71, 1
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %75 = getelementptr inbounds [2 x %struct.decode*]* %74, i32 0, i64 %73
  %76 = load %struct.decode** %75, align 8
  br label %50

; <label>:77                                      ; preds = %50
  %78 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 1
  %79 = load i32* %78, align 4
  %80 = zext i32 %c.0 to i64
  %81 = getelementptr inbounds [3 x i16]* %pred, i32 0, i64 %80
  %82 = load i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = add nsw i32 %83, %79
  %85 = trunc i32 %84 to i16
  store i16 %85, i16* %81, align 2
  %86 = zext i32 %c.0 to i64
  %87 = getelementptr inbounds [3 x i16]* %pred, i32 0, i64 %86
  %88 = load i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = call i32 @fputc(i32 %89, %struct._IO_FILE* %tfp)
  br label %91

; <label>:91                                      ; preds = %77
  %92 = add i32 %c.0, 1
  br label %47

; <label>:93                                      ; preds = %47
  br label %94

; <label>:94                                      ; preds = %93
  %95 = add i32 %col.0, 1
  br label %42

; <label>:96                                      ; preds = %42
  br label %97

; <label>:97                                      ; preds = %96
  %98 = add i32 %row.1, 1
  br label %32

; <label>:99                                      ; preds = %32, %30, %13
  ret void
}

declare i32 @fputc(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @foveon_load_camf() #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i64* @meta_offset, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = call i32 @get4()
  %5 = load i8** @meta_data, align 8
  %6 = load i32* @meta_length, align 4
  %7 = zext i32 %6 to i64
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i64 @fread(i8* %5, i64 1, i64 %7, %struct._IO_FILE* %8)
  br label %10

; <label>:10                                      ; preds = %33, %0
  %i.0 = phi i32 [ 0, %0 ], [ %34, %33 ]
  %key.0 = phi i32 [ %4, %0 ], [ %16, %33 ]
  %11 = load i32* @meta_length, align 4
  %12 = icmp ult i32 %i.0, %11
  br i1 %12, label %13, label %35

; <label>:13                                      ; preds = %10
  %14 = mul i32 %key.0, 1597
  %15 = add i32 %14, 51749
  %16 = urem i32 %15, 244944
  %17 = zext i32 %16 to i64
  %18 = mul nsw i64 %17, 301593171
  %19 = ashr i64 %18, 24
  %20 = trunc i64 %19 to i32
  %21 = shl i32 %16, 8
  %22 = sub i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = add i32 %23, %20
  %25 = lshr i32 %24, 17
  %26 = zext i32 %i.0 to i64
  %27 = load i8** @meta_data, align 8
  %28 = getelementptr inbounds i8* %27, i64 %26
  %29 = load i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = xor i32 %30, %25
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %28, align 1
  br label %33

; <label>:33                                      ; preds = %13
  %34 = add i32 %i.0, 1
  br label %10

; <label>:35                                      ; preds = %10
  ret void
}

; Function Attrs: nounwind uwtable
define void @foveon_load_raw() #0 {
  %diff = alloca [1024 x i16], align 16
  %pred = alloca [3 x i32], align 4
  %1 = call i32 @get4()
  %2 = getelementptr inbounds [1024 x i16]* %diff, i32 0, i32 0
  call void @read_shorts(i16* %2, i32 1024)
  %3 = icmp ne i32 %1, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  call void @foveon_decoder(i32 1024, i32 0)
  br label %5

; <label>:5                                       ; preds = %4, %0
  br label %6

; <label>:6                                       ; preds = %129, %5
  %bit.0 = phi i32 [ -1, %5 ], [ %bit.1, %129 ]
  %row.0 = phi i32 [ 0, %5 ], [ %130, %129 ]
  %bitbuf.0 = phi i32 [ 0, %5 ], [ %bitbuf.1, %129 ]
  %7 = load i16* @height, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %row.0, %8
  br i1 %9, label %10, label %131

; <label>:10                                      ; preds = %6
  %11 = bitcast [3 x i32]* %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 12, i32 4, i1 false)
  %12 = icmp ne i32 %bit.0, 0
  br i1 %12, label %20, label %13

; <label>:13                                      ; preds = %10
  %14 = icmp ne i32 %1, 0
  br i1 %14, label %20, label %15

; <label>:15                                      ; preds = %13
  %16 = call i32 @atoi(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 2)) #10
  %17 = icmp slt i32 %16, 14
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %15
  %19 = call i32 @get4()
  br label %20

; <label>:20                                      ; preds = %18, %15, %13, %10
  br label %21

; <label>:21                                      ; preds = %126, %20
  %bit.1 = phi i32 [ 0, %20 ], [ %bit.4, %126 ]
  %col.0 = phi i32 [ 0, %20 ], [ %127, %126 ]
  %bitbuf.1 = phi i32 [ %bitbuf.0, %20 ], [ %bitbuf.6, %126 ]
  %22 = load i16* @width, align 2
  %23 = zext i16 %22 to i32
  %24 = icmp slt i32 %col.0, %23
  br i1 %24, label %25, label %128

; <label>:25                                      ; preds = %21
  %26 = icmp ne i32 %1, 0
  br i1 %26, label %27, label %47

; <label>:27                                      ; preds = %25
  %28 = call i32 @get4()
  br label %29

; <label>:29                                      ; preds = %44, %27
  %c.0 = phi i32 [ 0, %27 ], [ %45, %44 ]
  %30 = icmp slt i32 %c.0, 3
  br i1 %30, label %31, label %46

; <label>:31                                      ; preds = %29
  %32 = mul nsw i32 %c.0, 10
  %33 = lshr i32 %28, %32
  %34 = and i32 %33, 1023
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [1024 x i16]* %diff, i32 0, i64 %35
  %37 = load i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = sub nsw i32 2, %c.0
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %40
  %42 = load i32* %41, align 4
  %43 = add nsw i32 %42, %38
  store i32 %43, i32* %41, align 4
  br label %44

; <label>:44                                      ; preds = %31
  %45 = add nsw i32 %c.0, 1
  br label %29

; <label>:46                                      ; preds = %29
  br label %106

; <label>:47                                      ; preds = %25
  br label %48

; <label>:48                                      ; preds = %103, %47
  %c.1 = phi i32 [ 0, %47 ], [ %104, %103 ]
  %bit.2 = phi i32 [ %bit.1, %47 ], [ %bit.3, %103 ]
  %bitbuf.2 = phi i32 [ %bitbuf.1, %47 ], [ %bitbuf.3, %103 ]
  %49 = icmp slt i32 %c.1, 3
  br i1 %49, label %50, label %105

; <label>:50                                      ; preds = %48
  br label %51

; <label>:51                                      ; preds = %71, %50
  %bit.3 = phi i32 [ %bit.2, %50 ], [ %58, %71 ]
  %bitbuf.3 = phi i32 [ %bitbuf.2, %50 ], [ %bitbuf.5, %71 ]
  %dindex.0 = phi %struct.decode* [ getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %50 ], [ %77, %71 ]
  %52 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %53 = getelementptr inbounds [2 x %struct.decode*]* %52, i32 0, i64 0
  %54 = load %struct.decode** %53, align 8
  %55 = icmp ne %struct.decode* %54, null
  br i1 %55, label %56, label %78

; <label>:56                                      ; preds = %51
  %57 = sub nsw i32 %bit.3, 1
  %58 = and i32 %57, 31
  %59 = icmp eq i32 %58, 31
  br i1 %59, label %60, label %71

; <label>:60                                      ; preds = %56
  br label %61

; <label>:61                                      ; preds = %68, %60
  %i.0 = phi i32 [ 0, %60 ], [ %69, %68 ]
  %bitbuf.4 = phi i32 [ %bitbuf.3, %60 ], [ %67, %68 ]
  %62 = icmp slt i32 %i.0, 4
  br i1 %62, label %63, label %70

; <label>:63                                      ; preds = %61
  %64 = shl i32 %bitbuf.4, 8
  %65 = load %struct._IO_FILE** @ifp, align 8
  %66 = call i32 @getc_unlocked(%struct._IO_FILE* %65)
  %67 = add i32 %64, %66
  br label %68

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %i.0, 1
  br label %61

; <label>:70                                      ; preds = %61
  br label %71

; <label>:71                                      ; preds = %70, %56
  %bitbuf.5 = phi i32 [ %bitbuf.4, %70 ], [ %bitbuf.3, %56 ]
  %72 = lshr i32 %bitbuf.5, %58
  %73 = and i32 %72, 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 0
  %76 = getelementptr inbounds [2 x %struct.decode*]* %75, i32 0, i64 %74
  %77 = load %struct.decode** %76, align 8
  br label %51

; <label>:78                                      ; preds = %51
  %79 = getelementptr inbounds %struct.decode* %dindex.0, i32 0, i32 1
  %80 = load i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [1024 x i16]* %diff, i32 0, i64 %81
  %83 = load i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = sext i32 %c.1 to i64
  %86 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %85
  %87 = load i32* %86, align 4
  %88 = add nsw i32 %87, %84
  store i32 %88, i32* %86, align 4
  %89 = sext i32 %c.1 to i64
  %90 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %89
  %91 = load i32* %90, align 4
  %92 = ashr i32 %91, 16
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %102

; <label>:94                                      ; preds = %78
  %95 = sext i32 %c.1 to i64
  %96 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %95
  %97 = load i32* %96, align 4
  %98 = xor i32 %97, -1
  %99 = ashr i32 %98, 16
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %102

; <label>:101                                     ; preds = %94
  call void @derror()
  br label %102

; <label>:102                                     ; preds = %101, %94, %78
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %c.1, 1
  br label %48

; <label>:105                                     ; preds = %48
  br label %106

; <label>:106                                     ; preds = %105, %46
  %bit.4 = phi i32 [ %bit.1, %46 ], [ %bit.2, %105 ]
  %bitbuf.6 = phi i32 [ %28, %46 ], [ %bitbuf.2, %105 ]
  br label %107

; <label>:107                                     ; preds = %123, %106
  %c.2 = phi i32 [ 0, %106 ], [ %124, %123 ]
  %108 = icmp slt i32 %c.2, 3
  br i1 %108, label %109, label %125

; <label>:109                                     ; preds = %107
  %110 = sext i32 %c.2 to i64
  %111 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %110
  %112 = load i32* %111, align 4
  %113 = trunc i32 %112 to i16
  %114 = sext i32 %c.2 to i64
  %115 = load i16* @width, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nsw i32 %row.0, %116
  %118 = add nsw i32 %117, %col.0
  %119 = sext i32 %118 to i64
  %120 = load [4 x i16]** @image, align 8
  %121 = getelementptr inbounds [4 x i16]* %120, i64 %119
  %122 = getelementptr inbounds [4 x i16]* %121, i32 0, i64 %114
  store i16 %113, i16* %122, align 2
  br label %123

; <label>:123                                     ; preds = %109
  %124 = add nsw i32 %c.2, 1
  br label %107

; <label>:125                                     ; preds = %107
  br label %126

; <label>:126                                     ; preds = %125
  %127 = add nsw i32 %col.0, 1
  br label %21

; <label>:128                                     ; preds = %21
  br label %129

; <label>:129                                     ; preds = %128
  %130 = add nsw i32 %row.0, 1
  br label %6

; <label>:131                                     ; preds = %6
  %132 = load i32* @document_mode, align 4
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %160

; <label>:134                                     ; preds = %131
  br label %135

; <label>:135                                     ; preds = %157, %134
  %i.1 = phi i32 [ 0, %134 ], [ %158, %157 ]
  %136 = load i16* @height, align 2
  %137 = zext i16 %136 to i32
  %138 = load i16* @width, align 2
  %139 = zext i16 %138 to i32
  %140 = mul nsw i32 %137, %139
  %141 = mul nsw i32 %140, 4
  %142 = icmp slt i32 %i.1, %141
  br i1 %142, label %143, label %159

; <label>:143                                     ; preds = %135
  %144 = sext i32 %i.1 to i64
  %145 = load [4 x i16]** @image, align 8
  %146 = getelementptr inbounds [4 x i16]* %145, i64 0
  %147 = getelementptr inbounds [4 x i16]* %146, i32 0, i64 %144
  %148 = load i16* %147, align 2
  %149 = sext i16 %148 to i32
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %143
  %152 = sext i32 %i.1 to i64
  %153 = load [4 x i16]** @image, align 8
  %154 = getelementptr inbounds [4 x i16]* %153, i64 0
  %155 = getelementptr inbounds [4 x i16]* %154, i32 0, i64 %152
  store i16 0, i16* %155, align 2
  br label %156

; <label>:156                                     ; preds = %151, %143
  br label %157

; <label>:157                                     ; preds = %156
  %158 = add nsw i32 %i.1, 1
  br label %135

; <label>:159                                     ; preds = %135
  br label %160

; <label>:160                                     ; preds = %159, %131
  call void @foveon_load_camf()
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #6

; Function Attrs: nounwind uwtable
define i8* @foveon_camf_param(i8* %block, i8* %param) #0 {
  br label %1

; <label>:1                                       ; preds = %52, %0
  %idx.0 = phi i32 [ 0, %0 ], [ %55, %52 ]
  %2 = load i32* @meta_length, align 4
  %3 = icmp ult i32 %idx.0, %2
  br i1 %3, label %4, label %56

; <label>:4                                       ; preds = %1
  %5 = load i8** @meta_data, align 8
  %6 = zext i32 %idx.0 to i64
  %7 = getelementptr inbounds i8* %5, i64 %6
  %8 = call i32 @strncmp(i8* %7, i8* getelementptr inbounds ([4 x i8]* @.str34, i32 0, i32 0), i64 3) #10
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %4
  br label %56

; <label>:11                                      ; preds = %4
  %12 = getelementptr inbounds i8* %7, i64 3
  %13 = load i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 80
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %11
  br label %52

; <label>:17                                      ; preds = %11
  %18 = getelementptr inbounds i8* %7, i64 12
  %19 = call i32 @sget4(i8* %18)
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8* %7, i64 %20
  %22 = call i32 @strcmp(i8* %block, i8* %21) #10
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %17
  br label %52

; <label>:25                                      ; preds = %17
  %26 = getelementptr inbounds i8* %7, i64 16
  %27 = call i32 @sget4(i8* %26)
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i8* %7, i64 %28
  %30 = call i32 @sget4(i8* %29)
  %31 = getelementptr inbounds i8* %29, i64 4
  %32 = call i32 @sget4(i8* %31)
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8* %7, i64 %33
  br label %35

; <label>:35                                      ; preds = %50, %25
  %num.0 = phi i32 [ %30, %25 ], [ %36, %50 ]
  %cp.0 = phi i8* [ %29, %25 ], [ %39, %50 ]
  %36 = add i32 %num.0, -1
  %37 = icmp ne i32 %num.0, 0
  br i1 %37, label %38, label %51

; <label>:38                                      ; preds = %35
  %39 = getelementptr inbounds i8* %cp.0, i64 8
  %40 = call i32 @sget4(i8* %39)
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i8* %34, i64 %41
  %43 = call i32 @strcmp(i8* %param, i8* %42) #10
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %50, label %45

; <label>:45                                      ; preds = %38
  %46 = getelementptr inbounds i8* %39, i64 4
  %47 = call i32 @sget4(i8* %46)
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8* %34, i64 %48
  br label %57

; <label>:50                                      ; preds = %38
  br label %35

; <label>:51                                      ; preds = %35
  br label %52

; <label>:52                                      ; preds = %51, %24, %16
  %53 = getelementptr inbounds i8* %7, i64 8
  %54 = call i32 @sget4(i8* %53)
  %55 = add i32 %idx.0, %54
  br label %1

; <label>:56                                      ; preds = %10, %1
  br label %57

; <label>:57                                      ; preds = %56, %45
  %.0 = phi i8* [ null, %56 ], [ %49, %45 ]
  ret i8* %.0
}

; Function Attrs: nounwind uwtable
define i8* @foveon_camf_matrix(i32* %dim, i8* %name) #0 {
  br label %1

; <label>:1                                       ; preds = %101, %0
  %idx.0 = phi i32 [ 0, %0 ], [ %104, %101 ]
  %2 = load i32* @meta_length, align 4
  %3 = icmp ult i32 %idx.0, %2
  br i1 %3, label %4, label %105

; <label>:4                                       ; preds = %1
  %5 = load i8** @meta_data, align 8
  %6 = zext i32 %idx.0 to i64
  %7 = getelementptr inbounds i8* %5, i64 %6
  %8 = call i32 @strncmp(i8* %7, i8* getelementptr inbounds ([4 x i8]* @.str34, i32 0, i32 0), i64 3) #10
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %4
  br label %105

; <label>:11                                      ; preds = %4
  %12 = getelementptr inbounds i8* %7, i64 3
  %13 = load i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 77
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %11
  br label %101

; <label>:17                                      ; preds = %11
  %18 = getelementptr inbounds i8* %7, i64 12
  %19 = call i32 @sget4(i8* %18)
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8* %7, i64 %20
  %22 = call i32 @strcmp(i8* %name, i8* %21) #10
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %17
  br label %101

; <label>:25                                      ; preds = %17
  %26 = getelementptr inbounds i32* %dim, i64 2
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds i32* %dim, i64 1
  store i32 1, i32* %27, align 4
  %28 = getelementptr inbounds i32* %dim, i64 0
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds i8* %7, i64 16
  %30 = call i32 @sget4(i8* %29)
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8* %7, i64 %31
  %33 = call i32 @sget4(i8* %32)
  %34 = getelementptr inbounds i8* %32, i64 4
  %35 = call i32 @sget4(i8* %34)
  %36 = icmp ugt i32 %35, 3
  br i1 %36, label %37, label %38

; <label>:37                                      ; preds = %25
  br label %105

; <label>:38                                      ; preds = %25
  %39 = getelementptr inbounds i8* %32, i64 8
  %40 = call i32 @sget4(i8* %39)
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i8* %7, i64 %41
  br label %43

; <label>:43                                      ; preds = %46, %38
  %i.0 = phi i32 [ %35, %38 ], [ %44, %46 ]
  %cp.0 = phi i8* [ %32, %38 ], [ %47, %46 ]
  %44 = add i32 %i.0, -1
  %45 = icmp ne i32 %i.0, 0
  br i1 %45, label %46, label %51

; <label>:46                                      ; preds = %43
  %47 = getelementptr inbounds i8* %cp.0, i64 12
  %48 = call i32 @sget4(i8* %47)
  %49 = zext i32 %44 to i64
  %50 = getelementptr inbounds i32* %dim, i64 %49
  store i32 %48, i32* %50, align 4
  br label %43

; <label>:51                                      ; preds = %43
  %52 = getelementptr inbounds i32* %dim, i64 0
  %53 = load i32* %52, align 4
  %54 = uitofp i32 %53 to double
  %55 = getelementptr inbounds i32* %dim, i64 1
  %56 = load i32* %55, align 4
  %57 = uitofp i32 %56 to double
  %58 = fmul double %54, %57
  %59 = getelementptr inbounds i32* %dim, i64 2
  %60 = load i32* %59, align 4
  %61 = uitofp i32 %60 to double
  %62 = fmul double %58, %61
  %63 = load i32* @meta_length, align 4
  %64 = udiv i32 %63, 4
  %65 = uitofp i32 %64 to double
  %66 = fcmp ogt double %62, %65
  br i1 %66, label %67, label %68

; <label>:67                                      ; preds = %51
  br label %105

; <label>:68                                      ; preds = %51
  %69 = fptoui double %62 to i32
  %70 = mul i32 %69, 4
  %71 = zext i32 %70 to i64
  %72 = call noalias i8* @malloc(i64 %71) #4
  %73 = bitcast i8* %72 to i32*
  %74 = bitcast i32* %73 to i8*
  call void @merror(i8* %74, i8* getelementptr inbounds ([21 x i8]* @.str35, i32 0, i32 0))
  br label %75

; <label>:75                                      ; preds = %97, %68
  %i.1 = phi i32 [ 0, %68 ], [ %98, %97 ]
  %76 = icmp ult i32 %i.1, %69
  br i1 %76, label %77, label %99

; <label>:77                                      ; preds = %75
  %78 = icmp ne i32 %33, 0
  br i1 %78, label %79, label %88

; <label>:79                                      ; preds = %77
  %80 = icmp ne i32 %33, 6
  br i1 %80, label %81, label %88

; <label>:81                                      ; preds = %79
  %82 = mul i32 %i.1, 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i8* %42, i64 %83
  %85 = call i32 @sget4(i8* %84)
  %86 = zext i32 %i.1 to i64
  %87 = getelementptr inbounds i32* %73, i64 %86
  store i32 %85, i32* %87, align 4
  br label %96

; <label>:88                                      ; preds = %79, %77
  %89 = mul i32 %i.1, 2
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8* %42, i64 %90
  %92 = call i32 @sget4(i8* %91)
  %93 = and i32 %92, 65535
  %94 = zext i32 %i.1 to i64
  %95 = getelementptr inbounds i32* %73, i64 %94
  store i32 %93, i32* %95, align 4
  br label %96

; <label>:96                                      ; preds = %88, %81
  br label %97

; <label>:97                                      ; preds = %96
  %98 = add i32 %i.1, 1
  br label %75

; <label>:99                                      ; preds = %75
  %100 = bitcast i32* %73 to i8*
  br label %109

; <label>:101                                     ; preds = %24, %16
  %102 = getelementptr inbounds i8* %7, i64 8
  %103 = call i32 @sget4(i8* %102)
  %104 = add i32 %idx.0, %103
  br label %1

; <label>:105                                     ; preds = %67, %37, %10, %1
  %106 = load %struct._IO_FILE** @stderr, align 8
  %107 = load i8** @ifname, align 8
  %108 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %106, i8* getelementptr inbounds ([28 x i8]* @.str36, i32 0, i32 0), i8* %107, i8* %name)
  br label %109

; <label>:109                                     ; preds = %105, %99
  %.0 = phi i8* [ null, %105 ], [ %100, %99 ]
  ret i8* %.0
}

; Function Attrs: nounwind uwtable
define i32 @foveon_fixed(i8* %ptr, i32 %size, i8* %name) #0 {
  %dim = alloca [3 x i32], align 4
  %1 = getelementptr inbounds [3 x i32]* %dim, i32 0, i32 0
  %2 = call i8* @foveon_camf_matrix(i32* %1, i8* %name)
  %3 = icmp ne i8* %2, null
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %8

; <label>:5                                       ; preds = %0
  %6 = mul nsw i32 %size, 4
  %7 = sext i32 %6 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %ptr, i8* %2, i64 %7, i32 1, i1 false)
  call void @free(i8* %2) #4
  br label %8

; <label>:8                                       ; preds = %5, %4
  %.0 = phi i32 [ 1, %5 ], [ 0, %4 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define float @foveon_avg(i16* %pix, i32* %range, float %cfilt) #0 {
  %1 = getelementptr inbounds i32* %range, i64 0
  %2 = load i32* %1, align 4
  br label %3

; <label>:3                                       ; preds = %36, %0
  %i.0 = phi i32 [ %2, %0 ], [ %37, %36 ]
  %min.0 = phi float [ 0x47EFFFFFE0000000, %0 ], [ %min.1, %36 ]
  %max.0 = phi float [ 0xC7EFFFFFE0000000, %0 ], [ %max.1, %36 ]
  %sum.0 = phi float [ 0.000000e+00, %0 ], [ %29, %36 ]
  %4 = getelementptr inbounds i32* %range, i64 1
  %5 = load i32* %4, align 4
  %6 = icmp sle i32 %i.0, %5
  br i1 %6, label %7, label %38

; <label>:7                                       ; preds = %3
  %8 = mul nsw i32 %i.0, 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i16* %pix, i64 %9
  %11 = load i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = sitofp i32 %12 to float
  %14 = mul nsw i32 %i.0, 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16* %pix, i64 %15
  %17 = load i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = sub nsw i32 %i.0, 1
  %20 = mul nsw i32 %19, 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16* %pix, i64 %21
  %23 = load i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = sub nsw i32 %18, %24
  %26 = sitofp i32 %25 to float
  %27 = fmul float %26, %cfilt
  %28 = fadd float %13, %27
  %29 = fadd float %sum.0, %28
  %30 = fcmp ogt float %min.0, %28
  br i1 %30, label %31, label %32

; <label>:31                                      ; preds = %7
  br label %32

; <label>:32                                      ; preds = %31, %7
  %min.1 = phi float [ %28, %31 ], [ %min.0, %7 ]
  %33 = fcmp olt float %max.0, %28
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %32
  br label %35

; <label>:35                                      ; preds = %34, %32
  %max.1 = phi float [ %28, %34 ], [ %max.0, %32 ]
  br label %36

; <label>:36                                      ; preds = %35
  %37 = add nsw i32 %i.0, 1
  br label %3

; <label>:38                                      ; preds = %3
  %39 = getelementptr inbounds i32* %range, i64 1
  %40 = load i32* %39, align 4
  %41 = getelementptr inbounds i32* %range, i64 0
  %42 = load i32* %41, align 4
  %43 = sub nsw i32 %40, %42
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %47

; <label>:45                                      ; preds = %38
  %46 = fdiv float %sum.0, 2.000000e+00
  br label %58

; <label>:47                                      ; preds = %38
  %48 = fsub float %sum.0, %min.0
  %49 = fsub float %48, %max.0
  %50 = getelementptr inbounds i32* %range, i64 1
  %51 = load i32* %50, align 4
  %52 = getelementptr inbounds i32* %range, i64 0
  %53 = load i32* %52, align 4
  %54 = sub nsw i32 %51, %53
  %55 = sub nsw i32 %54, 1
  %56 = sitofp i32 %55 to float
  %57 = fdiv float %49, %56
  br label %58

; <label>:58                                      ; preds = %47, %45
  %.0 = phi float [ %46, %45 ], [ %57, %47 ]
  ret float %.0
}

; Function Attrs: nounwind uwtable
define i16* @foveon_make_curve(double %max, double %mul, double %filt) #0 {
  %1 = fcmp une double %filt, 0.000000e+00
  br i1 %1, label %3, label %2

; <label>:2                                       ; preds = %0
  br label %3

; <label>:3                                       ; preds = %2, %0
  %.0 = phi double [ %filt, %0 ], [ 8.000000e-01, %2 ]
  %4 = fmul double 0x402921FB54442D18, %max
  %5 = fdiv double %4, %.0
  %6 = fptoui double %5 to i32
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %3
  %9 = add i32 %6, -1
  br label %10

; <label>:10                                      ; preds = %8, %3
  %size.0 = phi i32 [ %9, %8 ], [ %6, %3 ]
  %11 = add i32 %size.0, 1
  %12 = zext i32 %11 to i64
  %13 = call noalias i8* @calloc(i64 %12, i64 2) #4
  %14 = bitcast i8* %13 to i16*
  %15 = bitcast i16* %14 to i8*
  call void @merror(i8* %15, i8* getelementptr inbounds ([20 x i8]* @.str37, i32 0, i32 0))
  %16 = trunc i32 %size.0 to i16
  %17 = getelementptr inbounds i16* %14, i64 0
  store i16 %16, i16* %17, align 2
  br label %18

; <label>:18                                      ; preds = %39, %10
  %i.0 = phi i32 [ 0, %10 ], [ %40, %39 ]
  %19 = icmp ult i32 %i.0, %size.0
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %18
  %21 = uitofp i32 %i.0 to double
  %22 = fmul double %21, %.0
  %23 = fdiv double %22, %max
  %24 = fdiv double %23, 4.000000e+00
  %25 = call double @cos(double %24) #4
  %26 = fadd double %25, 1.000000e+00
  %27 = fdiv double %26, 2.000000e+00
  %28 = uitofp i32 %i.0 to double
  %29 = fmul double %28, %.0
  %30 = fdiv double %29, %mul
  %31 = call double @tanh(double %30) #4
  %32 = fmul double %27, %31
  %33 = fmul double %32, %mul
  %34 = fadd double %33, 5.000000e-01
  %35 = fptosi double %34 to i16
  %36 = add i32 %i.0, 1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i16* %14, i64 %37
  store i16 %35, i16* %38, align 2
  br label %39

; <label>:39                                      ; preds = %20
  %40 = add i32 %i.0, 1
  br label %18

; <label>:41                                      ; preds = %18
  ret i16* %14
}

; Function Attrs: nounwind
declare double @cos(double) #3

; Function Attrs: nounwind
declare double @tanh(double) #3

; Function Attrs: nounwind uwtable
define void @foveon_make_curves(i16** %curvep, float* %dq, float* %div, float %filt) #0 {
  %mul = alloca [3 x double], align 16
  br label %1

; <label>:1                                       ; preds = %14, %0
  %c.0 = phi i32 [ 0, %0 ], [ %15, %14 ]
  %2 = icmp slt i32 %c.0, 3
  br i1 %2, label %3, label %16

; <label>:3                                       ; preds = %1
  %4 = sext i32 %c.0 to i64
  %5 = getelementptr inbounds float* %dq, i64 %4
  %6 = load float* %5, align 4
  %7 = sext i32 %c.0 to i64
  %8 = getelementptr inbounds float* %div, i64 %7
  %9 = load float* %8, align 4
  %10 = fdiv float %6, %9
  %11 = fpext float %10 to double
  %12 = sext i32 %c.0 to i64
  %13 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %12
  store double %11, double* %13, align 8
  br label %14

; <label>:14                                      ; preds = %3
  %15 = add nsw i32 %c.0, 1
  br label %1

; <label>:16                                      ; preds = %1
  br label %17

; <label>:17                                      ; preds = %29, %16
  %max.0 = phi double [ 0.000000e+00, %16 ], [ %max.1, %29 ]
  %c.1 = phi i32 [ 0, %16 ], [ %30, %29 ]
  %18 = icmp slt i32 %c.1, 3
  br i1 %18, label %19, label %31

; <label>:19                                      ; preds = %17
  %20 = sext i32 %c.1 to i64
  %21 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %20
  %22 = load double* %21, align 8
  %23 = fcmp olt double %max.0, %22
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %19
  %25 = sext i32 %c.1 to i64
  %26 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %25
  %27 = load double* %26, align 8
  br label %28

; <label>:28                                      ; preds = %24, %19
  %max.1 = phi double [ %27, %24 ], [ %max.0, %19 ]
  br label %29

; <label>:29                                      ; preds = %28
  %30 = add nsw i32 %c.1, 1
  br label %17

; <label>:31                                      ; preds = %17
  br label %32

; <label>:32                                      ; preds = %42, %31
  %c.2 = phi i32 [ 0, %31 ], [ %43, %42 ]
  %33 = icmp slt i32 %c.2, 3
  br i1 %33, label %34, label %44

; <label>:34                                      ; preds = %32
  %35 = sext i32 %c.2 to i64
  %36 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %35
  %37 = load double* %36, align 8
  %38 = fpext float %filt to double
  %39 = call i16* @foveon_make_curve(double %max.0, double %37, double %38)
  %40 = sext i32 %c.2 to i64
  %41 = getelementptr inbounds i16** %curvep, i64 %40
  store i16* %39, i16** %41, align 8
  br label %42

; <label>:42                                      ; preds = %34
  %43 = add nsw i32 %c.2, 1
  br label %32

; <label>:44                                      ; preds = %32
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @foveon_apply_curve(i16* %curve, i32 %i) #0 {
  %1 = call i32 @abs(i32 %i) #9
  %2 = getelementptr inbounds i16* %curve, i64 0
  %3 = load i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = icmp sge i32 %1, %4
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %0
  br label %24

; <label>:7                                       ; preds = %0
  %8 = icmp slt i32 %i, 0
  br i1 %8, label %9, label %16

; <label>:9                                       ; preds = %7
  %10 = sub nsw i32 1, %i
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i16* %curve, i64 %11
  %13 = load i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = sub nsw i32 0, %14
  br label %22

; <label>:16                                      ; preds = %7
  %17 = add nsw i32 1, %i
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i16* %curve, i64 %18
  %20 = load i16* %19, align 2
  %21 = sext i16 %20 to i32
  br label %22

; <label>:22                                      ; preds = %16, %9
  %23 = phi i32 [ %15, %9 ], [ %21, %16 ]
  br label %24

; <label>:24                                      ; preds = %22, %6
  %.0 = phi i32 [ 0, %6 ], [ %23, %22 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @foveon_interpolate() #0 {
  %prev = alloca [3 x i16], align 2
  %curve = alloca [8 x i16*], align 16
  %cfilt = alloca float, align 4
  %ddft = alloca [3 x [3 x [2 x float]]], align 16
  %ppm = alloca [3 x [3 x [3 x float]]], align 16
  %cam_xyz = alloca [3 x [3 x float]], align 16
  %correct = alloca [3 x [3 x float]], align 16
  %last = alloca [3 x [3 x float]], align 16
  %trans = alloca [3 x [3 x float]], align 16
  %chroma_dq = alloca [3 x float], align 4
  %color_dq = alloca [3 x float], align 4
  %diag = alloca [3 x [3 x float]], align 16
  %div = alloca [3 x float], align 4
  %fsum = alloca [3 x float], align 4
  %dscr = alloca [2 x [2 x i32]], align 16
  %dstb = alloca [4 x i32], align 16
  %smrow = alloca [7 x [3 x i32]*], align 16
  %total = alloca [4 x i32], align 16
  %ipix = alloca [3 x i32], align 4
  %work = alloca [3 x [3 x i32]], align 16
  %dev = alloca [3 x i32], align 4
  %satlev = alloca [3 x i32], align 4
  %keep = alloca [4 x i32], align 16
  %active = alloca [4 x i32], align 16
  %dim = alloca [3 x i32], align 4
  %trsum = alloca [3 x double], align 16
  %str = alloca [128 x i8], align 16
  store float 0.000000e+00, float* %cfilt, align 4
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8]* @.str38, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = getelementptr inbounds [2 x [2 x i32]]* %dscr, i32 0, i32 0
  %8 = bitcast [2 x i32]* %7 to i8*
  %9 = call i32 @foveon_fixed(i8* %8, i32 4, i8* getelementptr inbounds ([19 x i8]* @.str39, i32 0, i32 0))
  %10 = getelementptr inbounds [3 x [3 x [3 x float]]]* %ppm, i32 0, i64 0
  %11 = getelementptr inbounds [3 x [3 x float]]* %10, i32 0, i64 0
  %12 = getelementptr inbounds [3 x float]* %11, i32 0, i32 0
  %13 = bitcast float* %12 to i8*
  %14 = call i32 @foveon_fixed(i8* %13, i32 27, i8* getelementptr inbounds ([15 x i8]* @.str40, i32 0, i32 0))
  %15 = getelementptr inbounds [3 x i32]* %satlev, i32 0, i32 0
  %16 = bitcast i32* %15 to i8*
  %17 = call i32 @foveon_fixed(i8* %16, i32 3, i8* getelementptr inbounds ([16 x i8]* @.str41, i32 0, i32 0))
  %18 = getelementptr inbounds [4 x i32]* %keep, i32 0, i32 0
  %19 = bitcast i32* %18 to i8*
  %20 = call i32 @foveon_fixed(i8* %19, i32 4, i8* getelementptr inbounds ([14 x i8]* @.str42, i32 0, i32 0))
  %21 = getelementptr inbounds [4 x i32]* %active, i32 0, i32 0
  %22 = bitcast i32* %21 to i8*
  %23 = call i32 @foveon_fixed(i8* %22, i32 4, i8* getelementptr inbounds ([16 x i8]* @.str43, i32 0, i32 0))
  %24 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i32 0
  %25 = bitcast float* %24 to i8*
  %26 = call i32 @foveon_fixed(i8* %25, i32 3, i8* getelementptr inbounds ([9 x i8]* @.str44, i32 0, i32 0))
  %27 = getelementptr inbounds [3 x float]* %color_dq, i32 0, i32 0
  %28 = bitcast float* %27 to i8*
  %29 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str46, i32 0, i32 0))
  %30 = icmp ne i8* %29, null
  %31 = select i1 %30, i8* getelementptr inbounds ([8 x i8]* @.str46, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str47, i32 0, i32 0)
  %32 = call i32 @foveon_fixed(i8* %28, i32 3, i8* %31)
  %33 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str48, i32 0, i32 0))
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %38

; <label>:35                                      ; preds = %6
  %36 = bitcast float* %cfilt to i8*
  %37 = call i32 @foveon_fixed(i8* %36, i32 1, i8* getelementptr inbounds ([13 x i8]* @.str48, i32 0, i32 0))
  br label %38

; <label>:38                                      ; preds = %35, %6
  %39 = bitcast [3 x [3 x [2 x float]]]* %ddft to i8*
  call void @llvm.memset.p0i8.i64(i8* %39, i8 0, i64 72, i32 16, i1 false)
  %40 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str49, i32 0, i32 0))
  %41 = icmp ne i8* %40, null
  br i1 %41, label %42, label %49

; <label>:42                                      ; preds = %38
  %43 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %44 = getelementptr inbounds [3 x [2 x float]]* %43, i32 0, i64 0
  %45 = getelementptr inbounds [2 x float]* %44, i32 0, i32 0
  %46 = bitcast float* %45 to i8*
  %47 = call i32 @foveon_fixed(i8* %46, i32 12, i8* getelementptr inbounds ([10 x i8]* @.str49, i32 0, i32 0))
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %135, label %49

; <label>:49                                      ; preds = %42, %38
  br label %50

; <label>:50                                      ; preds = %132, %49
  %i.0 = phi i32 [ 0, %49 ], [ %133, %132 ]
  %51 = icmp slt i32 %i.0, 2
  br i1 %51, label %52, label %134

; <label>:52                                      ; preds = %50
  %53 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i32 0
  %54 = bitcast i32* %53 to i8*
  %55 = icmp ne i32 %i.0, 0
  %56 = select i1 %55, i8* getelementptr inbounds ([17 x i8]* @.str50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str51, i32 0, i32 0)
  %57 = call i32 @foveon_fixed(i8* %54, i32 4, i8* %56)
  %58 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 1
  %59 = load i32* %58, align 4
  br label %60

; <label>:60                                      ; preds = %101, %52
  %row.0 = phi i32 [ %59, %52 ], [ %102, %101 ]
  %61 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 3
  %62 = load i32* %61, align 4
  %63 = icmp sle i32 %row.0, %62
  br i1 %63, label %64, label %103

; <label>:64                                      ; preds = %60
  %65 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 0
  %66 = load i32* %65, align 4
  br label %67

; <label>:67                                      ; preds = %98, %64
  %col.0 = phi i32 [ %66, %64 ], [ %99, %98 ]
  %68 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 2
  %69 = load i32* %68, align 4
  %70 = icmp sle i32 %col.0, %69
  br i1 %70, label %71, label %100

; <label>:71                                      ; preds = %67
  br label %72

; <label>:72                                      ; preds = %95, %71
  %c.0 = phi i32 [ 0, %71 ], [ %96, %95 ]
  %73 = icmp slt i32 %c.0, 3
  br i1 %73, label %74, label %97

; <label>:74                                      ; preds = %72
  %75 = sext i32 %c.0 to i64
  %76 = load i16* @width, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nsw i32 %row.0, %77
  %79 = add nsw i32 %78, %col.0
  %80 = sext i32 %79 to i64
  %81 = load [4 x i16]** @image, align 8
  %82 = getelementptr inbounds [4 x i16]* %81, i64 %80
  %83 = getelementptr inbounds [4 x i16]* %82, i32 0, i64 %75
  %84 = load i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = sitofp i32 %85 to float
  %87 = sext i32 %c.0 to i64
  %88 = add nsw i32 %i.0, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 %89
  %91 = getelementptr inbounds [3 x [2 x float]]* %90, i32 0, i64 %87
  %92 = getelementptr inbounds [2 x float]* %91, i32 0, i64 1
  %93 = load float* %92, align 4
  %94 = fadd float %93, %86
  store float %94, float* %92, align 4
  br label %95

; <label>:95                                      ; preds = %74
  %96 = add nsw i32 %c.0, 1
  br label %72

; <label>:97                                      ; preds = %72
  br label %98

; <label>:98                                      ; preds = %97
  %99 = add nsw i32 %col.0, 1
  br label %67

; <label>:100                                     ; preds = %67
  br label %101

; <label>:101                                     ; preds = %100
  %102 = add nsw i32 %row.0, 1
  br label %60

; <label>:103                                     ; preds = %60
  br label %104

; <label>:104                                     ; preds = %129, %103
  %c.1 = phi i32 [ 0, %103 ], [ %130, %129 ]
  %105 = icmp slt i32 %c.1, 3
  br i1 %105, label %106, label %131

; <label>:106                                     ; preds = %104
  %107 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 3
  %108 = load i32* %107, align 4
  %109 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 1
  %110 = load i32* %109, align 4
  %111 = sub nsw i32 %108, %110
  %112 = add nsw i32 %111, 1
  %113 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 2
  %114 = load i32* %113, align 4
  %115 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 0
  %116 = load i32* %115, align 4
  %117 = sub nsw i32 %114, %116
  %118 = add nsw i32 %117, 1
  %119 = mul nsw i32 %112, %118
  %120 = sitofp i32 %119 to float
  %121 = sext i32 %c.1 to i64
  %122 = add nsw i32 %i.0, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 %123
  %125 = getelementptr inbounds [3 x [2 x float]]* %124, i32 0, i64 %121
  %126 = getelementptr inbounds [2 x float]* %125, i32 0, i64 1
  %127 = load float* %126, align 4
  %128 = fdiv float %127, %120
  store float %128, float* %126, align 4
  br label %129

; <label>:129                                     ; preds = %106
  %130 = add nsw i32 %c.1, 1
  br label %104

; <label>:131                                     ; preds = %104
  br label %132

; <label>:132                                     ; preds = %131
  %133 = add nsw i32 %i.0, 1
  br label %50

; <label>:134                                     ; preds = %50
  br label %135

; <label>:135                                     ; preds = %134, %42
  %136 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([24 x i8]* @.str52, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0))
  %137 = icmp ne i8* %136, null
  br i1 %137, label %142, label %138

; <label>:138                                     ; preds = %135
  %139 = load %struct._IO_FILE** @stderr, align 8
  %140 = load i8** @ifname, align 8
  %141 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %139, i8* getelementptr inbounds ([32 x i8]* @.str53, i32 0, i32 0), i8* %140, i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0))
  br label %2622

; <label>:142                                     ; preds = %135
  %143 = getelementptr inbounds [3 x [3 x float]]* %cam_xyz, i32 0, i32 0
  %144 = bitcast [3 x float]* %143 to i8*
  %145 = call i32 @foveon_fixed(i8* %144, i32 9, i8* %136)
  %146 = getelementptr inbounds [3 x [3 x float]]* %correct, i32 0, i32 0
  %147 = bitcast [3 x float]* %146 to i8*
  %148 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([24 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0))
  %149 = call i32 @foveon_fixed(i8* %147, i32 9, i8* %148)
  %150 = bitcast [3 x [3 x float]]* %last to i8*
  call void @llvm.memset.p0i8.i64(i8* %150, i8 0, i64 36, i32 16, i1 false)
  br label %151

; <label>:151                                     ; preds = %183, %142
  %i.1 = phi i32 [ 0, %142 ], [ %184, %183 ]
  %152 = icmp slt i32 %i.1, 3
  br i1 %152, label %153, label %185

; <label>:153                                     ; preds = %151
  br label %154

; <label>:154                                     ; preds = %180, %153
  %j.0 = phi i32 [ 0, %153 ], [ %181, %180 ]
  %155 = icmp slt i32 %j.0, 3
  br i1 %155, label %156, label %182

; <label>:156                                     ; preds = %154
  br label %157

; <label>:157                                     ; preds = %177, %156
  %c.2 = phi i32 [ 0, %156 ], [ %178, %177 ]
  %158 = icmp slt i32 %c.2, 3
  br i1 %158, label %159, label %179

; <label>:159                                     ; preds = %157
  %160 = sext i32 %c.2 to i64
  %161 = sext i32 %i.1 to i64
  %162 = getelementptr inbounds [3 x [3 x float]]* %correct, i32 0, i64 %161
  %163 = getelementptr inbounds [3 x float]* %162, i32 0, i64 %160
  %164 = load float* %163, align 4
  %165 = sext i32 %j.0 to i64
  %166 = sext i32 %c.2 to i64
  %167 = getelementptr inbounds [3 x [3 x float]]* %cam_xyz, i32 0, i64 %166
  %168 = getelementptr inbounds [3 x float]* %167, i32 0, i64 %165
  %169 = load float* %168, align 4
  %170 = fmul float %164, %169
  %171 = sext i32 %j.0 to i64
  %172 = sext i32 %i.1 to i64
  %173 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %172
  %174 = getelementptr inbounds [3 x float]* %173, i32 0, i64 %171
  %175 = load float* %174, align 4
  %176 = fadd float %175, %170
  store float %176, float* %174, align 4
  br label %177

; <label>:177                                     ; preds = %159
  %178 = add nsw i32 %c.2, 1
  br label %157

; <label>:179                                     ; preds = %157
  br label %180

; <label>:180                                     ; preds = %179
  %181 = add nsw i32 %j.0, 1
  br label %154

; <label>:182                                     ; preds = %154
  br label %183

; <label>:183                                     ; preds = %182
  %184 = add nsw i32 %i.1, 1
  br label %151

; <label>:185                                     ; preds = %151
  br label %186

; <label>:186                                     ; preds = %238, %185
  %i.2 = phi i32 [ 0, %185 ], [ %239, %238 ]
  %187 = icmp slt i32 %i.2, 3
  br i1 %187, label %188, label %240

; <label>:188                                     ; preds = %186
  br label %189

; <label>:189                                     ; preds = %235, %188
  %c.3 = phi i32 [ 0, %188 ], [ %236, %235 ]
  %190 = icmp slt i32 %c.3, 3
  br i1 %190, label %191, label %237

; <label>:191                                     ; preds = %189
  %192 = add nsw i32 %c.3, 1
  %193 = srem i32 %192, 3
  %194 = sext i32 %193 to i64
  %195 = add nsw i32 %i.2, 1
  %196 = srem i32 %195, 3
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %197
  %199 = getelementptr inbounds [3 x float]* %198, i32 0, i64 %194
  %200 = load float* %199, align 4
  %201 = add nsw i32 %c.3, 2
  %202 = srem i32 %201, 3
  %203 = sext i32 %202 to i64
  %204 = add nsw i32 %i.2, 2
  %205 = srem i32 %204, 3
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %206
  %208 = getelementptr inbounds [3 x float]* %207, i32 0, i64 %203
  %209 = load float* %208, align 4
  %210 = fmul float %200, %209
  %211 = add nsw i32 %c.3, 2
  %212 = srem i32 %211, 3
  %213 = sext i32 %212 to i64
  %214 = add nsw i32 %i.2, 1
  %215 = srem i32 %214, 3
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %216
  %218 = getelementptr inbounds [3 x float]* %217, i32 0, i64 %213
  %219 = load float* %218, align 4
  %220 = add nsw i32 %c.3, 1
  %221 = srem i32 %220, 3
  %222 = sext i32 %221 to i64
  %223 = add nsw i32 %i.2, 2
  %224 = srem i32 %223, 3
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %225
  %227 = getelementptr inbounds [3 x float]* %226, i32 0, i64 %222
  %228 = load float* %227, align 4
  %229 = fmul float %219, %228
  %230 = fsub float %210, %229
  %231 = sext i32 %i.2 to i64
  %232 = sext i32 %c.3 to i64
  %233 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %232
  %234 = getelementptr inbounds [3 x float]* %233, i32 0, i64 %231
  store float %230, float* %234, align 4
  br label %235

; <label>:235                                     ; preds = %191
  %236 = add nsw i32 %c.3, 1
  br label %189

; <label>:237                                     ; preds = %189
  br label %238

; <label>:238                                     ; preds = %237
  %239 = add nsw i32 %i.2, 1
  br label %186

; <label>:240                                     ; preds = %186
  br label %241

; <label>:241                                     ; preds = %267, %240
  %c.4 = phi i32 [ 0, %240 ], [ %268, %267 ]
  %242 = icmp slt i32 %c.4, 3
  br i1 %242, label %243, label %269

; <label>:243                                     ; preds = %241
  %244 = sext i32 %c.4 to i64
  %245 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %244
  %246 = getelementptr inbounds [3 x float]* %245, i32 0, i64 0
  %247 = load float* %246, align 4
  %248 = fpext float %247 to double
  %249 = fmul double %248, 3.127000e-01
  %250 = sext i32 %c.4 to i64
  %251 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %250
  %252 = getelementptr inbounds [3 x float]* %251, i32 0, i64 1
  %253 = load float* %252, align 4
  %254 = fpext float %253 to double
  %255 = fmul double %254, 3.290000e-01
  %256 = fadd double %249, %255
  %257 = sext i32 %c.4 to i64
  %258 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %257
  %259 = getelementptr inbounds [3 x float]* %258, i32 0, i64 2
  %260 = load float* %259, align 4
  %261 = fpext float %260 to double
  %262 = fmul double %261, 3.583000e-01
  %263 = fadd double %256, %262
  %264 = fptrunc double %263 to float
  %265 = sext i32 %c.4 to i64
  %266 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %265
  store float %264, float* %266, align 4
  br label %267

; <label>:267                                     ; preds = %243
  %268 = add nsw i32 %c.4, 1
  br label %241

; <label>:269                                     ; preds = %241
  %270 = getelementptr inbounds [128 x i8]* %str, i32 0, i32 0
  %271 = call i32 (i8*, i8*, ...)* @sprintf(i8* %270, i8* getelementptr inbounds ([13 x i8]* @.str55, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0)) #4
  %272 = getelementptr inbounds [128 x i8]* %str, i32 0, i32 0
  %273 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* %272)
  %274 = icmp ne i8* %273, null
  br i1 %274, label %275, label %280

; <label>:275                                     ; preds = %269
  %276 = getelementptr inbounds [3 x float]* %div, i32 0, i32 0
  %277 = bitcast float* %276 to i8*
  %278 = getelementptr inbounds [128 x i8]* %str, i32 0, i32 0
  %279 = call i32 @foveon_fixed(i8* %277, i32 3, i8* %278)
  br label %280

; <label>:280                                     ; preds = %275, %269
  br label %281

; <label>:281                                     ; preds = %293, %280
  %c.5 = phi i32 [ 0, %280 ], [ %294, %293 ]
  %num.0 = phi float [ 0.000000e+00, %280 ], [ %num.1, %293 ]
  %282 = icmp slt i32 %c.5, 3
  br i1 %282, label %283, label %295

; <label>:283                                     ; preds = %281
  %284 = sext i32 %c.5 to i64
  %285 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %284
  %286 = load float* %285, align 4
  %287 = fcmp olt float %num.0, %286
  br i1 %287, label %288, label %292

; <label>:288                                     ; preds = %283
  %289 = sext i32 %c.5 to i64
  %290 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %289
  %291 = load float* %290, align 4
  br label %292

; <label>:292                                     ; preds = %288, %283
  %num.1 = phi float [ %291, %288 ], [ %num.0, %283 ]
  br label %293

; <label>:293                                     ; preds = %292
  %294 = add nsw i32 %c.5, 1
  br label %281

; <label>:295                                     ; preds = %281
  br label %296

; <label>:296                                     ; preds = %303, %295
  %c.6 = phi i32 [ 0, %295 ], [ %304, %303 ]
  %297 = icmp slt i32 %c.6, 3
  br i1 %297, label %298, label %305

; <label>:298                                     ; preds = %296
  %299 = sext i32 %c.6 to i64
  %300 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %299
  %301 = load float* %300, align 4
  %302 = fdiv float %301, %num.0
  store float %302, float* %300, align 4
  br label %303

; <label>:303                                     ; preds = %298
  %304 = add nsw i32 %c.6, 1
  br label %296

; <label>:305                                     ; preds = %296
  %306 = bitcast [3 x [3 x float]]* %trans to i8*
  call void @llvm.memset.p0i8.i64(i8* %306, i8 0, i64 36, i32 16, i1 false)
  br label %307

; <label>:307                                     ; preds = %343, %305
  %i.3 = phi i32 [ 0, %305 ], [ %344, %343 ]
  %308 = icmp slt i32 %i.3, 3
  br i1 %308, label %309, label %345

; <label>:309                                     ; preds = %307
  br label %310

; <label>:310                                     ; preds = %340, %309
  %j.1 = phi i32 [ 0, %309 ], [ %341, %340 ]
  %311 = icmp slt i32 %j.1, 3
  br i1 %311, label %312, label %342

; <label>:312                                     ; preds = %310
  br label %313

; <label>:313                                     ; preds = %337, %312
  %c.7 = phi i32 [ 0, %312 ], [ %338, %337 ]
  %314 = icmp slt i32 %c.7, 3
  br i1 %314, label %315, label %339

; <label>:315                                     ; preds = %313
  %316 = sext i32 %c.7 to i64
  %317 = sext i32 %i.3 to i64
  %318 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %317
  %319 = getelementptr inbounds [4 x float]* %318, i32 0, i64 %316
  %320 = load float* %319, align 4
  %321 = sext i32 %j.1 to i64
  %322 = sext i32 %c.7 to i64
  %323 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %322
  %324 = getelementptr inbounds [3 x float]* %323, i32 0, i64 %321
  %325 = load float* %324, align 4
  %326 = fmul float %320, %325
  %327 = sext i32 %j.1 to i64
  %328 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %327
  %329 = load float* %328, align 4
  %330 = fmul float %326, %329
  %331 = sext i32 %j.1 to i64
  %332 = sext i32 %i.3 to i64
  %333 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %332
  %334 = getelementptr inbounds [3 x float]* %333, i32 0, i64 %331
  %335 = load float* %334, align 4
  %336 = fadd float %335, %330
  store float %336, float* %334, align 4
  br label %337

; <label>:337                                     ; preds = %315
  %338 = add nsw i32 %c.7, 1
  br label %313

; <label>:339                                     ; preds = %313
  br label %340

; <label>:340                                     ; preds = %339
  %341 = add nsw i32 %j.1, 1
  br label %310

; <label>:342                                     ; preds = %310
  br label %343

; <label>:343                                     ; preds = %342
  %344 = add nsw i32 %i.3, 1
  br label %307

; <label>:345                                     ; preds = %307
  br label %346

; <label>:346                                     ; preds = %366, %345
  %c.8 = phi i32 [ 0, %345 ], [ %367, %366 ]
  %347 = icmp slt i32 %c.8, 3
  br i1 %347, label %348, label %368

; <label>:348                                     ; preds = %346
  %349 = sext i32 %c.8 to i64
  %350 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %349
  %351 = getelementptr inbounds [3 x float]* %350, i32 0, i64 0
  %352 = load float* %351, align 4
  %353 = sext i32 %c.8 to i64
  %354 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %353
  %355 = getelementptr inbounds [3 x float]* %354, i32 0, i64 1
  %356 = load float* %355, align 4
  %357 = fadd float %352, %356
  %358 = sext i32 %c.8 to i64
  %359 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %358
  %360 = getelementptr inbounds [3 x float]* %359, i32 0, i64 2
  %361 = load float* %360, align 4
  %362 = fadd float %357, %361
  %363 = fpext float %362 to double
  %364 = sext i32 %c.8 to i64
  %365 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 %364
  store double %363, double* %365, align 8
  br label %366

; <label>:366                                     ; preds = %348
  %367 = add nsw i32 %c.8, 1
  br label %346

; <label>:368                                     ; preds = %346
  %369 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 0
  %370 = load double* %369, align 8
  %371 = fmul double 6.000000e+00, %370
  %372 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 1
  %373 = load double* %372, align 8
  %374 = fmul double 1.100000e+01, %373
  %375 = fadd double %371, %374
  %376 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 2
  %377 = load double* %376, align 8
  %378 = fmul double 3.000000e+00, %377
  %379 = fadd double %375, %378
  %380 = fdiv double %379, 2.000000e+01
  br label %381

; <label>:381                                     ; preds = %406, %368
  %i.4 = phi i32 [ 0, %368 ], [ %407, %406 ]
  %382 = icmp slt i32 %i.4, 3
  br i1 %382, label %383, label %408

; <label>:383                                     ; preds = %381
  br label %384

; <label>:384                                     ; preds = %403, %383
  %c.9 = phi i32 [ 0, %383 ], [ %404, %403 ]
  %385 = icmp slt i32 %c.9, 3
  br i1 %385, label %386, label %405

; <label>:386                                     ; preds = %384
  %387 = sext i32 %c.9 to i64
  %388 = sext i32 %i.4 to i64
  %389 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %388
  %390 = getelementptr inbounds [3 x float]* %389, i32 0, i64 %387
  %391 = load float* %390, align 4
  %392 = fpext float %391 to double
  %393 = fmul double %392, %380
  %394 = sext i32 %i.4 to i64
  %395 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 %394
  %396 = load double* %395, align 8
  %397 = fdiv double %393, %396
  %398 = fptrunc double %397 to float
  %399 = sext i32 %c.9 to i64
  %400 = sext i32 %i.4 to i64
  %401 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %400
  %402 = getelementptr inbounds [3 x float]* %401, i32 0, i64 %399
  store float %398, float* %402, align 4
  br label %403

; <label>:403                                     ; preds = %386
  %404 = add nsw i32 %c.9, 1
  br label %384

; <label>:405                                     ; preds = %384
  br label %406

; <label>:406                                     ; preds = %405
  %407 = add nsw i32 %i.4, 1
  br label %381

; <label>:408                                     ; preds = %381
  %409 = bitcast [3 x [3 x float]]* %trans to i8*
  call void @llvm.memset.p0i8.i64(i8* %409, i8 0, i64 36, i32 16, i1 false)
  br label %410

; <label>:410                                     ; preds = %441, %408
  %i.5 = phi i32 [ 0, %408 ], [ %442, %441 ]
  %411 = icmp slt i32 %i.5, 3
  br i1 %411, label %412, label %443

; <label>:412                                     ; preds = %410
  br label %413

; <label>:413                                     ; preds = %438, %412
  %j.2 = phi i32 [ 0, %412 ], [ %439, %438 ]
  %414 = icmp slt i32 %j.2, 3
  br i1 %414, label %415, label %440

; <label>:415                                     ; preds = %413
  br label %416

; <label>:416                                     ; preds = %435, %415
  %c.10 = phi i32 [ 0, %415 ], [ %436, %435 ]
  %417 = icmp slt i32 %c.10, 3
  br i1 %417, label %418, label %437

; <label>:418                                     ; preds = %416
  %419 = icmp eq i32 %i.5, %c.10
  %420 = select i1 %419, i32 32, i32 -1
  %421 = sitofp i32 %420 to float
  %422 = sext i32 %j.2 to i64
  %423 = sext i32 %c.10 to i64
  %424 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %423
  %425 = getelementptr inbounds [3 x float]* %424, i32 0, i64 %422
  %426 = load float* %425, align 4
  %427 = fmul float %421, %426
  %428 = fdiv float %427, 3.000000e+01
  %429 = sext i32 %j.2 to i64
  %430 = sext i32 %i.5 to i64
  %431 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %430
  %432 = getelementptr inbounds [3 x float]* %431, i32 0, i64 %429
  %433 = load float* %432, align 4
  %434 = fadd float %433, %428
  store float %434, float* %432, align 4
  br label %435

; <label>:435                                     ; preds = %418
  %436 = add nsw i32 %c.10, 1
  br label %416

; <label>:437                                     ; preds = %416
  br label %438

; <label>:438                                     ; preds = %437
  %439 = add nsw i32 %j.2, 1
  br label %413

; <label>:440                                     ; preds = %413
  br label %441

; <label>:441                                     ; preds = %440
  %442 = add nsw i32 %i.5, 1
  br label %410

; <label>:443                                     ; preds = %410
  %444 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i32 0
  %445 = getelementptr inbounds [3 x float]* %color_dq, i32 0, i32 0
  %446 = getelementptr inbounds [3 x float]* %div, i32 0, i32 0
  %447 = load float* %cfilt, align 4
  call void @foveon_make_curves(i16** %444, float* %445, float* %446, float %447)
  br label %448

; <label>:448                                     ; preds = %455, %443
  %c.11 = phi i32 [ 0, %443 ], [ %456, %455 ]
  %449 = icmp slt i32 %c.11, 3
  br i1 %449, label %450, label %457

; <label>:450                                     ; preds = %448
  %451 = sext i32 %c.11 to i64
  %452 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i64 %451
  %453 = load float* %452, align 4
  %454 = fdiv float %453, 3.000000e+00
  store float %454, float* %452, align 4
  br label %455

; <label>:455                                     ; preds = %450
  %456 = add nsw i32 %c.11, 1
  br label %448

; <label>:457                                     ; preds = %448
  %458 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i32 0
  %459 = getelementptr inbounds i16** %458, i64 3
  %460 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i32 0
  %461 = getelementptr inbounds [3 x float]* %div, i32 0, i32 0
  %462 = load float* %cfilt, align 4
  call void @foveon_make_curves(i16** %459, float* %460, float* %461, float %462)
  br label %463

; <label>:463                                     ; preds = %475, %457
  %c.12 = phi i32 [ 0, %457 ], [ %476, %475 ]
  %dsum.0 = phi double [ %380, %457 ], [ %474, %475 ]
  %464 = icmp slt i32 %c.12, 3
  br i1 %464, label %465, label %477

; <label>:465                                     ; preds = %463
  %466 = sext i32 %c.12 to i64
  %467 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i64 %466
  %468 = load float* %467, align 4
  %469 = sext i32 %c.12 to i64
  %470 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %469
  %471 = load float* %470, align 4
  %472 = fdiv float %468, %471
  %473 = fpext float %472 to double
  %474 = fadd double %dsum.0, %473
  br label %475

; <label>:475                                     ; preds = %465
  %476 = add nsw i32 %c.12, 1
  br label %463

; <label>:477                                     ; preds = %463
  %478 = load float* %cfilt, align 4
  %479 = fpext float %478 to double
  %480 = call i16* @foveon_make_curve(double %dsum.0, double %dsum.0, double %479)
  %481 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 6
  store i16* %480, i16** %481, align 8
  %482 = fmul double %dsum.0, 2.000000e+00
  %483 = fmul double %dsum.0, 2.000000e+00
  %484 = load float* %cfilt, align 4
  %485 = fpext float %484 to double
  %486 = call i16* @foveon_make_curve(double %482, double %483, double %485)
  %487 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 7
  store i16* %486, i16** %487, align 8
  %488 = getelementptr inbounds [3 x i32]* %dim, i32 0, i32 0
  %489 = call i8* @foveon_camf_matrix(i32* %488, i8* getelementptr inbounds ([12 x i8]* @.str56, i32 0, i32 0))
  %490 = bitcast i8* %489 to [3 x float]*
  %491 = icmp ne [3 x float]* %490, null
  br i1 %491, label %493, label %492

; <label>:492                                     ; preds = %477
  br label %2622

; <label>:493                                     ; preds = %477
  %494 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %495 = load i32* %494, align 4
  %496 = zext i32 %495 to i64
  %497 = call noalias i8* @calloc(i64 %496, i64 12) #4
  %498 = bitcast i8* %497 to [3 x float]*
  %499 = load i16* @width, align 2
  %500 = zext i16 %499 to i32
  %501 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %502 = load i32* %501, align 4
  %503 = add i32 %500, %502
  %504 = sub i32 %503, 2
  %505 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %506 = load i32* %505, align 4
  %507 = sub i32 %506, 1
  %508 = udiv i32 %504, %507
  %509 = load i16* @height, align 2
  %510 = zext i16 %509 to i64
  %511 = call noalias i8* @calloc(i64 %510, i64 12) #4
  %512 = bitcast i8* %511 to [3 x float]*
  br label %513

; <label>:513                                     ; preds = %606, %493
  %row.1 = phi i32 [ 0, %493 ], [ %607, %606 ]
  %514 = load i16* @height, align 2
  %515 = zext i16 %514 to i32
  %516 = icmp slt i32 %row.1, %515
  br i1 %516, label %517, label %608

; <label>:517                                     ; preds = %513
  br label %518

; <label>:518                                     ; preds = %552, %517
  %i.6 = phi i32 [ 0, %517 ], [ %553, %552 ]
  %519 = icmp slt i32 %i.6, 6
  br i1 %519, label %520, label %554

; <label>:520                                     ; preds = %518
  %521 = sext i32 %i.6 to i64
  %522 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %523 = getelementptr inbounds [3 x [2 x float]]* %522, i32 0, i64 0
  %524 = getelementptr inbounds [2 x float]* %523, i32 0, i64 %521
  %525 = load float* %524, align 4
  %526 = fpext float %525 to double
  %527 = sitofp i32 %row.1 to double
  %528 = load i16* @height, align 2
  %529 = zext i16 %528 to i32
  %530 = sitofp i32 %529 to double
  %531 = fsub double %530, 1.000000e+00
  %532 = fdiv double %527, %531
  %533 = sext i32 %i.6 to i64
  %534 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 2
  %535 = getelementptr inbounds [3 x [2 x float]]* %534, i32 0, i64 0
  %536 = getelementptr inbounds [2 x float]* %535, i32 0, i64 %533
  %537 = load float* %536, align 4
  %538 = sext i32 %i.6 to i64
  %539 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %540 = getelementptr inbounds [3 x [2 x float]]* %539, i32 0, i64 0
  %541 = getelementptr inbounds [2 x float]* %540, i32 0, i64 %538
  %542 = load float* %541, align 4
  %543 = fsub float %537, %542
  %544 = fpext float %543 to double
  %545 = fmul double %532, %544
  %546 = fadd double %526, %545
  %547 = fptrunc double %546 to float
  %548 = sext i32 %i.6 to i64
  %549 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %550 = getelementptr inbounds [3 x [2 x float]]* %549, i32 0, i64 0
  %551 = getelementptr inbounds [2 x float]* %550, i32 0, i64 %548
  store float %547, float* %551, align 4
  br label %552

; <label>:552                                     ; preds = %520
  %553 = add nsw i32 %i.6, 1
  br label %518

; <label>:554                                     ; preds = %518
  br label %555

; <label>:555                                     ; preds = %603, %554
  %c.13 = phi i32 [ 0, %554 ], [ %604, %603 ]
  %556 = icmp slt i32 %c.13, 3
  br i1 %556, label %557, label %605

; <label>:557                                     ; preds = %555
  %558 = load i16* @width, align 2
  %559 = zext i16 %558 to i32
  %560 = mul nsw i32 %row.1, %559
  %561 = sext i32 %560 to i64
  %562 = load [4 x i16]** @image, align 8
  %563 = getelementptr inbounds [4 x i16]* %562, i64 %561
  %564 = getelementptr inbounds [4 x i16]* %563, i32 0, i32 0
  %565 = sext i32 %c.13 to i64
  %566 = getelementptr inbounds i16* %564, i64 %565
  %567 = getelementptr inbounds [2 x [2 x i32]]* %dscr, i32 0, i64 0
  %568 = getelementptr inbounds [2 x i32]* %567, i32 0, i32 0
  %569 = load float* %cfilt, align 4
  %570 = call float @foveon_avg(i16* %566, i32* %568, float %569)
  %571 = load i16* @width, align 2
  %572 = zext i16 %571 to i32
  %573 = mul nsw i32 %row.1, %572
  %574 = sext i32 %573 to i64
  %575 = load [4 x i16]** @image, align 8
  %576 = getelementptr inbounds [4 x i16]* %575, i64 %574
  %577 = getelementptr inbounds [4 x i16]* %576, i32 0, i32 0
  %578 = sext i32 %c.13 to i64
  %579 = getelementptr inbounds i16* %577, i64 %578
  %580 = getelementptr inbounds [2 x [2 x i32]]* %dscr, i32 0, i64 1
  %581 = getelementptr inbounds [2 x i32]* %580, i32 0, i32 0
  %582 = load float* %cfilt, align 4
  %583 = call float @foveon_avg(i16* %579, i32* %581, float %582)
  %584 = fmul float %583, 3.000000e+00
  %585 = fadd float %570, %584
  %586 = sext i32 %c.13 to i64
  %587 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %588 = getelementptr inbounds [3 x [2 x float]]* %587, i32 0, i64 %586
  %589 = getelementptr inbounds [2 x float]* %588, i32 0, i64 0
  %590 = load float* %589, align 4
  %591 = fsub float %585, %590
  %592 = fdiv float %591, 4.000000e+00
  %593 = sext i32 %c.13 to i64
  %594 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %595 = getelementptr inbounds [3 x [2 x float]]* %594, i32 0, i64 %593
  %596 = getelementptr inbounds [2 x float]* %595, i32 0, i64 1
  %597 = load float* %596, align 4
  %598 = fsub float %592, %597
  %599 = sext i32 %c.13 to i64
  %600 = sext i32 %row.1 to i64
  %601 = getelementptr inbounds [3 x float]* %512, i64 %600
  %602 = getelementptr inbounds [3 x float]* %601, i32 0, i64 %599
  store float %598, float* %602, align 4
  br label %603

; <label>:603                                     ; preds = %557
  %604 = add nsw i32 %c.13, 1
  br label %555

; <label>:605                                     ; preds = %555
  br label %606

; <label>:606                                     ; preds = %605
  %607 = add nsw i32 %row.1, 1
  br label %513

; <label>:608                                     ; preds = %513
  %609 = bitcast [3 x float]* %512 to i8*
  %610 = getelementptr inbounds [3 x float]* %512, i64 8
  %611 = bitcast [3 x float]* %610 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %609, i8* %611, i64 96, i32 4, i1 false)
  %612 = load i16* @height, align 2
  %613 = zext i16 %612 to i32
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds [3 x float]* %512, i64 %614
  %616 = getelementptr inbounds [3 x float]* %615, i64 -11
  %617 = bitcast [3 x float]* %616 to i8*
  %618 = load i16* @height, align 2
  %619 = zext i16 %618 to i32
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds [3 x float]* %512, i64 %620
  %622 = getelementptr inbounds [3 x float]* %621, i64 -22
  %623 = bitcast [3 x float]* %622 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %617, i8* %623, i64 132, i32 4, i1 false)
  %624 = bitcast [3 x [3 x float]]* %last to i8*
  %625 = bitcast [3 x float]* %512 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %624, i8* %625, i64 36, i32 4, i1 false)
  br label %626

; <label>:626                                     ; preds = %732, %608
  %row.2 = phi i32 [ 1, %608 ], [ %733, %732 ]
  %627 = load i16* @height, align 2
  %628 = zext i16 %627 to i32
  %629 = sub nsw i32 %628, 1
  %630 = icmp slt i32 %row.2, %629
  br i1 %630, label %631, label %734

; <label>:631                                     ; preds = %626
  br label %632

; <label>:632                                     ; preds = %719, %631
  %c.14 = phi i32 [ 0, %631 ], [ %720, %719 ]
  %633 = icmp slt i32 %c.14, 3
  br i1 %633, label %634, label %721

; <label>:634                                     ; preds = %632
  %635 = sext i32 %c.14 to i64
  %636 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %637 = getelementptr inbounds [3 x float]* %636, i32 0, i64 %635
  %638 = load float* %637, align 4
  %639 = sext i32 %c.14 to i64
  %640 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %641 = getelementptr inbounds [3 x float]* %640, i32 0, i64 %639
  %642 = load float* %641, align 4
  %643 = fcmp ogt float %638, %642
  br i1 %643, label %644, label %681

; <label>:644                                     ; preds = %634
  %645 = sext i32 %c.14 to i64
  %646 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %647 = getelementptr inbounds [3 x float]* %646, i32 0, i64 %645
  %648 = load float* %647, align 4
  %649 = sext i32 %c.14 to i64
  %650 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %651 = getelementptr inbounds [3 x float]* %650, i32 0, i64 %649
  %652 = load float* %651, align 4
  %653 = fcmp ogt float %648, %652
  br i1 %653, label %654, label %680

; <label>:654                                     ; preds = %644
  %655 = sext i32 %c.14 to i64
  %656 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %657 = getelementptr inbounds [3 x float]* %656, i32 0, i64 %655
  %658 = load float* %657, align 4
  %659 = sext i32 %c.14 to i64
  %660 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %661 = getelementptr inbounds [3 x float]* %660, i32 0, i64 %659
  %662 = load float* %661, align 4
  %663 = fcmp ogt float %658, %662
  br i1 %663, label %664, label %669

; <label>:664                                     ; preds = %654
  %665 = sext i32 %c.14 to i64
  %666 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %667 = getelementptr inbounds [3 x float]* %666, i32 0, i64 %665
  %668 = load float* %667, align 4
  br label %674

; <label>:669                                     ; preds = %654
  %670 = sext i32 %c.14 to i64
  %671 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %672 = getelementptr inbounds [3 x float]* %671, i32 0, i64 %670
  %673 = load float* %672, align 4
  br label %674

; <label>:674                                     ; preds = %669, %664
  %675 = phi float [ %668, %664 ], [ %673, %669 ]
  %676 = sext i32 %c.14 to i64
  %677 = sext i32 %row.2 to i64
  %678 = getelementptr inbounds [3 x float]* %512, i64 %677
  %679 = getelementptr inbounds [3 x float]* %678, i32 0, i64 %676
  store float %675, float* %679, align 4
  br label %680

; <label>:680                                     ; preds = %674, %644
  br label %718

; <label>:681                                     ; preds = %634
  %682 = sext i32 %c.14 to i64
  %683 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %684 = getelementptr inbounds [3 x float]* %683, i32 0, i64 %682
  %685 = load float* %684, align 4
  %686 = sext i32 %c.14 to i64
  %687 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %688 = getelementptr inbounds [3 x float]* %687, i32 0, i64 %686
  %689 = load float* %688, align 4
  %690 = fcmp olt float %685, %689
  br i1 %690, label %691, label %717

; <label>:691                                     ; preds = %681
  %692 = sext i32 %c.14 to i64
  %693 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %694 = getelementptr inbounds [3 x float]* %693, i32 0, i64 %692
  %695 = load float* %694, align 4
  %696 = sext i32 %c.14 to i64
  %697 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %698 = getelementptr inbounds [3 x float]* %697, i32 0, i64 %696
  %699 = load float* %698, align 4
  %700 = fcmp olt float %695, %699
  br i1 %700, label %701, label %706

; <label>:701                                     ; preds = %691
  %702 = sext i32 %c.14 to i64
  %703 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %704 = getelementptr inbounds [3 x float]* %703, i32 0, i64 %702
  %705 = load float* %704, align 4
  br label %711

; <label>:706                                     ; preds = %691
  %707 = sext i32 %c.14 to i64
  %708 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %709 = getelementptr inbounds [3 x float]* %708, i32 0, i64 %707
  %710 = load float* %709, align 4
  br label %711

; <label>:711                                     ; preds = %706, %701
  %712 = phi float [ %705, %701 ], [ %710, %706 ]
  %713 = sext i32 %c.14 to i64
  %714 = sext i32 %row.2 to i64
  %715 = getelementptr inbounds [3 x float]* %512, i64 %714
  %716 = getelementptr inbounds [3 x float]* %715, i32 0, i64 %713
  store float %712, float* %716, align 4
  br label %717

; <label>:717                                     ; preds = %711, %681
  br label %718

; <label>:718                                     ; preds = %717, %680
  br label %719

; <label>:719                                     ; preds = %718
  %720 = add nsw i32 %c.14, 1
  br label %632

; <label>:721                                     ; preds = %632
  %722 = bitcast [3 x [3 x float]]* %last to i8*
  %723 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i32 0
  %724 = getelementptr inbounds [3 x float]* %723, i64 1
  %725 = bitcast [3 x float]* %724 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %722, i8* %725, i64 24, i32 4, i1 false)
  %726 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %727 = bitcast [3 x float]* %726 to i8*
  %728 = add nsw i32 %row.2, 1
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds [3 x float]* %512, i64 %729
  %731 = bitcast [3 x float]* %730 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %727, i8* %731, i64 12, i32 4, i1 false)
  br label %732

; <label>:732                                     ; preds = %721
  %733 = add nsw i32 %row.2, 1
  br label %626

; <label>:734                                     ; preds = %626
  br label %735

; <label>:735                                     ; preds = %752, %734
  %c.15 = phi i32 [ 0, %734 ], [ %753, %752 ]
  %736 = icmp slt i32 %c.15, 3
  br i1 %736, label %737, label %754

; <label>:737                                     ; preds = %735
  %738 = sext i32 %c.15 to i64
  %739 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %740 = getelementptr inbounds [3 x float]* %739, i32 0, i64 %738
  %741 = load float* %740, align 4
  %742 = sext i32 %c.15 to i64
  %743 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %744 = getelementptr inbounds [3 x float]* %743, i32 0, i64 %742
  %745 = load float* %744, align 4
  %746 = fadd float %741, %745
  %747 = fdiv float %746, 2.000000e+00
  %748 = sext i32 %c.15 to i64
  %749 = sext i32 %row.2 to i64
  %750 = getelementptr inbounds [3 x float]* %512, i64 %749
  %751 = getelementptr inbounds [3 x float]* %750, i32 0, i64 %748
  store float %747, float* %751, align 4
  br label %752

; <label>:752                                     ; preds = %737
  %753 = add nsw i32 %c.15, 1
  br label %735

; <label>:754                                     ; preds = %735
  br label %755

; <label>:755                                     ; preds = %771, %754
  %c.16 = phi i32 [ 0, %754 ], [ %772, %771 ]
  %756 = icmp slt i32 %c.16, 3
  br i1 %756, label %757, label %773

; <label>:757                                     ; preds = %755
  %758 = sext i32 %c.16 to i64
  %759 = getelementptr inbounds [3 x float]* %512, i64 1
  %760 = getelementptr inbounds [3 x float]* %759, i32 0, i64 %758
  %761 = load float* %760, align 4
  %762 = sext i32 %c.16 to i64
  %763 = getelementptr inbounds [3 x float]* %512, i64 3
  %764 = getelementptr inbounds [3 x float]* %763, i32 0, i64 %762
  %765 = load float* %764, align 4
  %766 = fadd float %761, %765
  %767 = fdiv float %766, 2.000000e+00
  %768 = sext i32 %c.16 to i64
  %769 = getelementptr inbounds [3 x float]* %512, i64 0
  %770 = getelementptr inbounds [3 x float]* %769, i32 0, i64 %768
  store float %767, float* %770, align 4
  br label %771

; <label>:771                                     ; preds = %757
  %772 = add nsw i32 %c.16, 1
  br label %755

; <label>:773                                     ; preds = %755
  %774 = call double @exp(double 0xBFA5555555555555) #4
  %775 = fsub double 1.000000e+00, %774
  %776 = fptrunc double %775 to float
  %777 = bitcast [3 x float]* %fsum to i8*
  %778 = bitcast [3 x float]* %512 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %777, i8* %778, i64 12, i32 4, i1 false)
  br label %779

; <label>:779                                     ; preds = %818, %773
  %row.3 = phi i32 [ 1, %773 ], [ %819, %818 ]
  %780 = load i16* @height, align 2
  %781 = zext i16 %780 to i32
  %782 = icmp slt i32 %row.3, %781
  br i1 %782, label %783, label %820

; <label>:783                                     ; preds = %779
  br label %784

; <label>:784                                     ; preds = %815, %783
  %c.17 = phi i32 [ 0, %783 ], [ %816, %815 ]
  %785 = icmp slt i32 %c.17, 3
  br i1 %785, label %786, label %817

; <label>:786                                     ; preds = %784
  %787 = sext i32 %c.17 to i64
  %788 = sext i32 %row.3 to i64
  %789 = getelementptr inbounds [3 x float]* %512, i64 %788
  %790 = getelementptr inbounds [3 x float]* %789, i32 0, i64 %787
  %791 = load float* %790, align 4
  %792 = sext i32 %c.17 to i64
  %793 = sub nsw i32 %row.3, 1
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds [3 x float]* %512, i64 %794
  %796 = getelementptr inbounds [3 x float]* %795, i32 0, i64 %792
  %797 = load float* %796, align 4
  %798 = fsub float %791, %797
  %799 = fmul float %798, %776
  %800 = sext i32 %c.17 to i64
  %801 = sub nsw i32 %row.3, 1
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds [3 x float]* %512, i64 %802
  %804 = getelementptr inbounds [3 x float]* %803, i32 0, i64 %800
  %805 = load float* %804, align 4
  %806 = fadd float %799, %805
  %807 = sext i32 %c.17 to i64
  %808 = sext i32 %row.3 to i64
  %809 = getelementptr inbounds [3 x float]* %512, i64 %808
  %810 = getelementptr inbounds [3 x float]* %809, i32 0, i64 %807
  store float %806, float* %810, align 4
  %811 = sext i32 %c.17 to i64
  %812 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %811
  %813 = load float* %812, align 4
  %814 = fadd float %813, %806
  store float %814, float* %812, align 4
  br label %815

; <label>:815                                     ; preds = %786
  %816 = add nsw i32 %c.17, 1
  br label %784

; <label>:817                                     ; preds = %784
  br label %818

; <label>:818                                     ; preds = %817
  %819 = add nsw i32 %row.3, 1
  br label %779

; <label>:820                                     ; preds = %779
  %821 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %822 = bitcast [3 x float]* %821 to i8*
  %823 = load i16* @height, align 2
  %824 = zext i16 %823 to i32
  %825 = sub nsw i32 %824, 1
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds [3 x float]* %512, i64 %826
  %828 = bitcast [3 x float]* %827 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %822, i8* %828, i64 12, i32 4, i1 false)
  br label %829

; <label>:829                                     ; preds = %839, %820
  %c.18 = phi i32 [ 0, %820 ], [ %840, %839 ]
  %830 = icmp slt i32 %c.18, 3
  br i1 %830, label %831, label %841

; <label>:831                                     ; preds = %829
  %832 = load i16* @height, align 2
  %833 = zext i16 %832 to i32
  %834 = sitofp i32 %833 to float
  %835 = sext i32 %c.18 to i64
  %836 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %835
  %837 = load float* %836, align 4
  %838 = fdiv float %837, %834
  store float %838, float* %836, align 4
  br label %839

; <label>:839                                     ; preds = %831
  %840 = add nsw i32 %c.18, 1
  br label %829

; <label>:841                                     ; preds = %829
  %842 = load i16* @height, align 2
  %843 = zext i16 %842 to i32
  br label %844

; <label>:844                                     ; preds = %880, %841
  %row.4 = phi i32 [ %843, %841 ], [ %845, %880 ]
  %845 = add nsw i32 %row.4, -1
  %846 = icmp ne i32 %row.4, 0
  br i1 %846, label %847, label %881

; <label>:847                                     ; preds = %844
  br label %848

; <label>:848                                     ; preds = %878, %847
  %c.19 = phi i32 [ 0, %847 ], [ %879, %878 ]
  %849 = icmp slt i32 %c.19, 3
  br i1 %849, label %850, label %880

; <label>:850                                     ; preds = %848
  %851 = sext i32 %c.19 to i64
  %852 = sext i32 %845 to i64
  %853 = getelementptr inbounds [3 x float]* %512, i64 %852
  %854 = getelementptr inbounds [3 x float]* %853, i32 0, i64 %851
  %855 = load float* %854, align 4
  %856 = sext i32 %c.19 to i64
  %857 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %856
  %858 = load float* %857, align 4
  %859 = fsub float %855, %858
  %860 = sext i32 %c.19 to i64
  %861 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %862 = getelementptr inbounds [3 x float]* %861, i32 0, i64 %860
  %863 = load float* %862, align 4
  %864 = fsub float %859, %863
  %865 = fmul float %864, %776
  %866 = sext i32 %c.19 to i64
  %867 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %868 = getelementptr inbounds [3 x float]* %867, i32 0, i64 %866
  %869 = load float* %868, align 4
  %870 = fadd float %865, %869
  %871 = sext i32 %c.19 to i64
  %872 = sext i32 %845 to i64
  %873 = getelementptr inbounds [3 x float]* %512, i64 %872
  %874 = getelementptr inbounds [3 x float]* %873, i32 0, i64 %871
  store float %870, float* %874, align 4
  %875 = sext i32 %c.19 to i64
  %876 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %877 = getelementptr inbounds [3 x float]* %876, i32 0, i64 %875
  store float %870, float* %877, align 4
  br label %878

; <label>:878                                     ; preds = %850
  %879 = add nsw i32 %c.19, 1
  br label %848

; <label>:880                                     ; preds = %848
  br label %844

; <label>:881                                     ; preds = %844
  %882 = bitcast [4 x i32]* %total to i8*
  call void @llvm.memset.p0i8.i64(i8* %882, i8 0, i64 16, i32 16, i1 false)
  br label %883

; <label>:883                                     ; preds = %920, %881
  %row.5 = phi i32 [ 2, %881 ], [ %921, %920 ]
  %884 = load i16* @height, align 2
  %885 = zext i16 %884 to i32
  %886 = icmp slt i32 %row.5, %885
  br i1 %886, label %887, label %922

; <label>:887                                     ; preds = %883
  br label %888

; <label>:888                                     ; preds = %917, %887
  %col.1 = phi i32 [ 2, %887 ], [ %918, %917 ]
  %889 = load i16* @width, align 2
  %890 = zext i16 %889 to i32
  %891 = icmp slt i32 %col.1, %890
  br i1 %891, label %892, label %919

; <label>:892                                     ; preds = %888
  br label %893

; <label>:893                                     ; preds = %911, %892
  %c.20 = phi i32 [ 0, %892 ], [ %912, %911 ]
  %894 = icmp slt i32 %c.20, 3
  br i1 %894, label %895, label %913

; <label>:895                                     ; preds = %893
  %896 = sext i32 %c.20 to i64
  %897 = load i16* @width, align 2
  %898 = zext i16 %897 to i32
  %899 = mul nsw i32 %row.5, %898
  %900 = add nsw i32 %899, %col.1
  %901 = sext i32 %900 to i64
  %902 = load [4 x i16]** @image, align 8
  %903 = getelementptr inbounds [4 x i16]* %902, i64 %901
  %904 = getelementptr inbounds [4 x i16]* %903, i32 0, i64 %896
  %905 = load i16* %904, align 2
  %906 = sext i16 %905 to i32
  %907 = sext i32 %c.20 to i64
  %908 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %907
  %909 = load i32* %908, align 4
  %910 = add nsw i32 %909, %906
  store i32 %910, i32* %908, align 4
  br label %911

; <label>:911                                     ; preds = %895
  %912 = add nsw i32 %c.20, 1
  br label %893

; <label>:913                                     ; preds = %893
  %914 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %915 = load i32* %914, align 4
  %916 = add nsw i32 %915, 1
  store i32 %916, i32* %914, align 4
  br label %917

; <label>:917                                     ; preds = %913
  %918 = add nsw i32 %col.1, 4
  br label %888

; <label>:919                                     ; preds = %888
  br label %920

; <label>:920                                     ; preds = %919
  %921 = add nsw i32 %row.5, 4
  br label %883

; <label>:922                                     ; preds = %883
  br label %923

; <label>:923                                     ; preds = %957, %922
  %row.6 = phi i32 [ 0, %922 ], [ %958, %957 ]
  %924 = load i16* @height, align 2
  %925 = zext i16 %924 to i32
  %926 = icmp slt i32 %row.6, %925
  br i1 %926, label %927, label %959

; <label>:927                                     ; preds = %923
  br label %928

; <label>:928                                     ; preds = %954, %927
  %c.21 = phi i32 [ 0, %927 ], [ %955, %954 ]
  %929 = icmp slt i32 %c.21, 3
  br i1 %929, label %930, label %956

; <label>:930                                     ; preds = %928
  %931 = sext i32 %c.21 to i64
  %932 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %931
  %933 = load float* %932, align 4
  %934 = fdiv float %933, 2.000000e+00
  %935 = fpext float %934 to double
  %936 = sext i32 %c.21 to i64
  %937 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %936
  %938 = load i32* %937, align 4
  %939 = sitofp i32 %938 to double
  %940 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %941 = load i32* %940, align 4
  %942 = sitofp i32 %941 to double
  %943 = fmul double %942, 1.000000e+02
  %944 = fdiv double %939, %943
  %945 = fadd double %935, %944
  %946 = sext i32 %c.21 to i64
  %947 = sext i32 %row.6 to i64
  %948 = getelementptr inbounds [3 x float]* %512, i64 %947
  %949 = getelementptr inbounds [3 x float]* %948, i32 0, i64 %946
  %950 = load float* %949, align 4
  %951 = fpext float %950 to double
  %952 = fadd double %951, %945
  %953 = fptrunc double %952 to float
  store float %953, float* %949, align 4
  br label %954

; <label>:954                                     ; preds = %930
  %955 = add nsw i32 %c.21, 1
  br label %928

; <label>:956                                     ; preds = %928
  br label %957

; <label>:957                                     ; preds = %956
  %958 = add nsw i32 %row.6, 1
  br label %923

; <label>:959                                     ; preds = %923
  br label %960

; <label>:960                                     ; preds = %1281, %959
  %row.7 = phi i32 [ 0, %959 ], [ %1282, %1281 ]
  %961 = load i16* @height, align 2
  %962 = zext i16 %961 to i32
  %963 = icmp slt i32 %row.7, %962
  br i1 %963, label %964, label %1283

; <label>:964                                     ; preds = %960
  br label %965

; <label>:965                                     ; preds = %999, %964
  %i.7 = phi i32 [ 0, %964 ], [ %1000, %999 ]
  %966 = icmp slt i32 %i.7, 6
  br i1 %966, label %967, label %1001

; <label>:967                                     ; preds = %965
  %968 = sext i32 %i.7 to i64
  %969 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %970 = getelementptr inbounds [3 x [2 x float]]* %969, i32 0, i64 0
  %971 = getelementptr inbounds [2 x float]* %970, i32 0, i64 %968
  %972 = load float* %971, align 4
  %973 = fpext float %972 to double
  %974 = sitofp i32 %row.7 to double
  %975 = load i16* @height, align 2
  %976 = zext i16 %975 to i32
  %977 = sitofp i32 %976 to double
  %978 = fsub double %977, 1.000000e+00
  %979 = fdiv double %974, %978
  %980 = sext i32 %i.7 to i64
  %981 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 2
  %982 = getelementptr inbounds [3 x [2 x float]]* %981, i32 0, i64 0
  %983 = getelementptr inbounds [2 x float]* %982, i32 0, i64 %980
  %984 = load float* %983, align 4
  %985 = sext i32 %i.7 to i64
  %986 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %987 = getelementptr inbounds [3 x [2 x float]]* %986, i32 0, i64 0
  %988 = getelementptr inbounds [2 x float]* %987, i32 0, i64 %985
  %989 = load float* %988, align 4
  %990 = fsub float %984, %989
  %991 = fpext float %990 to double
  %992 = fmul double %979, %991
  %993 = fadd double %973, %992
  %994 = fptrunc double %993 to float
  %995 = sext i32 %i.7 to i64
  %996 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %997 = getelementptr inbounds [3 x [2 x float]]* %996, i32 0, i64 0
  %998 = getelementptr inbounds [2 x float]* %997, i32 0, i64 %995
  store float %994, float* %998, align 4
  br label %999

; <label>:999                                     ; preds = %967
  %1000 = add nsw i32 %i.7, 1
  br label %965

; <label>:1001                                    ; preds = %965
  %1002 = load i16* @width, align 2
  %1003 = zext i16 %1002 to i32
  %1004 = mul nsw i32 %row.7, %1003
  %1005 = sext i32 %1004 to i64
  %1006 = load [4 x i16]** @image, align 8
  %1007 = getelementptr inbounds [4 x i16]* %1006, i64 %1005
  %1008 = getelementptr inbounds [4 x i16]* %1007, i32 0, i32 0
  %1009 = bitcast [3 x i16]* %prev to i8*
  %1010 = bitcast i16* %1008 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1009, i8* %1010, i64 6, i32 2, i1 false)
  %1011 = sitofp i32 %row.7 to double
  %1012 = load i16* @height, align 2
  %1013 = zext i16 %1012 to i32
  %1014 = sitofp i32 %1013 to double
  %1015 = fsub double %1014, 1.000000e+00
  %1016 = fdiv double %1011, %1015
  %1017 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 2
  %1018 = load i32* %1017, align 4
  %1019 = sub i32 %1018, 1
  %1020 = uitofp i32 %1019 to double
  %1021 = fmul double %1016, %1020
  %1022 = fptrunc double %1021 to float
  %1023 = fptosi float %1022 to i32
  %1024 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 2
  %1025 = load i32* %1024, align 4
  %1026 = sub i32 %1025, 1
  %1027 = icmp eq i32 %1023, %1026
  br i1 %1027, label %1028, label %1030

; <label>:1028                                    ; preds = %1001
  %1029 = add nsw i32 %1023, -1
  br label %1030

; <label>:1030                                    ; preds = %1028, %1001
  %irow.0 = phi i32 [ %1029, %1028 ], [ %1023, %1001 ]
  %1031 = sitofp i32 %irow.0 to float
  %1032 = fsub float %1022, %1031
  br label %1033

; <label>:1033                                    ; preds = %1071, %1030
  %i.8 = phi i32 [ 0, %1030 ], [ %1072, %1071 ]
  %1034 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %1035 = load i32* %1034, align 4
  %1036 = icmp ult i32 %i.8, %1035
  br i1 %1036, label %1037, label %1073

; <label>:1037                                    ; preds = %1033
  br label %1038

; <label>:1038                                    ; preds = %1068, %1037
  %c.22 = phi i32 [ 0, %1037 ], [ %1069, %1068 ]
  %1039 = icmp slt i32 %c.22, 3
  br i1 %1039, label %1040, label %1070

; <label>:1040                                    ; preds = %1038
  %1041 = sext i32 %c.22 to i64
  %1042 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %1043 = load i32* %1042, align 4
  %1044 = mul i32 %irow.0, %1043
  %1045 = add i32 %1044, %i.8
  %1046 = zext i32 %1045 to i64
  %1047 = getelementptr inbounds [3 x float]* %490, i64 %1046
  %1048 = getelementptr inbounds [3 x float]* %1047, i32 0, i64 %1041
  %1049 = load float* %1048, align 4
  %1050 = fsub float 1.000000e+00, %1032
  %1051 = fmul float %1049, %1050
  %1052 = sext i32 %c.22 to i64
  %1053 = add nsw i32 %irow.0, 1
  %1054 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %1055 = load i32* %1054, align 4
  %1056 = mul i32 %1053, %1055
  %1057 = add i32 %1056, %i.8
  %1058 = zext i32 %1057 to i64
  %1059 = getelementptr inbounds [3 x float]* %490, i64 %1058
  %1060 = getelementptr inbounds [3 x float]* %1059, i32 0, i64 %1052
  %1061 = load float* %1060, align 4
  %1062 = fmul float %1061, %1032
  %1063 = fadd float %1051, %1062
  %1064 = sext i32 %c.22 to i64
  %1065 = sext i32 %i.8 to i64
  %1066 = getelementptr inbounds [3 x float]* %498, i64 %1065
  %1067 = getelementptr inbounds [3 x float]* %1066, i32 0, i64 %1064
  store float %1063, float* %1067, align 4
  br label %1068

; <label>:1068                                    ; preds = %1040
  %1069 = add nsw i32 %c.22, 1
  br label %1038

; <label>:1070                                    ; preds = %1038
  br label %1071

; <label>:1071                                    ; preds = %1070
  %1072 = add nsw i32 %i.8, 1
  br label %1033

; <label>:1073                                    ; preds = %1033
  br label %1074

; <label>:1074                                    ; preds = %1278, %1073
  %col.2 = phi i32 [ 0, %1073 ], [ %1279, %1278 ]
  %pix.0 = phi i16* [ %1008, %1073 ], [ %1277, %1278 ]
  %1075 = load i16* @width, align 2
  %1076 = zext i16 %1075 to i32
  %1077 = icmp slt i32 %col.2, %1076
  br i1 %1077, label %1078, label %1280

; <label>:1078                                    ; preds = %1074
  br label %1079

; <label>:1079                                    ; preds = %1141, %1078
  %c.23 = phi i32 [ 0, %1078 ], [ %1142, %1141 ]
  %1080 = icmp slt i32 %c.23, 3
  br i1 %1080, label %1081, label %1143

; <label>:1081                                    ; preds = %1079
  %1082 = sext i32 %c.23 to i64
  %1083 = getelementptr inbounds i16* %pix.0, i64 %1082
  %1084 = load i16* %1083, align 2
  %1085 = sext i16 %1084 to i32
  %1086 = sext i32 %c.23 to i64
  %1087 = getelementptr inbounds [3 x i16]* %prev, i32 0, i64 %1086
  %1088 = load i16* %1087, align 2
  %1089 = sext i16 %1088 to i32
  %1090 = sub nsw i32 %1085, %1089
  %1091 = sext i32 %c.23 to i64
  %1092 = getelementptr inbounds i16* %pix.0, i64 %1091
  %1093 = load i16* %1092, align 2
  %1094 = sext i32 %c.23 to i64
  %1095 = getelementptr inbounds [3 x i16]* %prev, i32 0, i64 %1094
  store i16 %1093, i16* %1095, align 2
  %1096 = sext i32 %c.23 to i64
  %1097 = getelementptr inbounds i16* %pix.0, i64 %1096
  %1098 = load i16* %1097, align 2
  %1099 = sext i16 %1098 to i32
  %1100 = sitofp i32 %1099 to double
  %1101 = mul nsw i32 %1090, %1090
  %1102 = ashr i32 %1101, 14
  %1103 = add nsw i32 %1090, %1102
  %1104 = sitofp i32 %1103 to float
  %1105 = load float* %cfilt, align 4
  %1106 = fmul float %1104, %1105
  %1107 = sext i32 %c.23 to i64
  %1108 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %1109 = getelementptr inbounds [3 x [2 x float]]* %1108, i32 0, i64 %1107
  %1110 = getelementptr inbounds [2 x float]* %1109, i32 0, i64 1
  %1111 = load float* %1110, align 4
  %1112 = fsub float %1106, %1111
  %1113 = fpext float %1112 to double
  %1114 = sext i32 %c.23 to i64
  %1115 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %1116 = getelementptr inbounds [3 x [2 x float]]* %1115, i32 0, i64 %1114
  %1117 = getelementptr inbounds [2 x float]* %1116, i32 0, i64 0
  %1118 = load float* %1117, align 4
  %1119 = fpext float %1118 to double
  %1120 = sitofp i32 %col.2 to float
  %1121 = load i16* @width, align 2
  %1122 = zext i16 %1121 to i32
  %1123 = sitofp i32 %1122 to float
  %1124 = fdiv float %1120, %1123
  %1125 = fpext float %1124 to double
  %1126 = fsub double %1125, 5.000000e-01
  %1127 = fmul double %1119, %1126
  %1128 = fsub double %1113, %1127
  %1129 = sext i32 %c.23 to i64
  %1130 = sext i32 %row.7 to i64
  %1131 = getelementptr inbounds [3 x float]* %512, i64 %1130
  %1132 = getelementptr inbounds [3 x float]* %1131, i32 0, i64 %1129
  %1133 = load float* %1132, align 4
  %1134 = fpext float %1133 to double
  %1135 = fsub double %1128, %1134
  %1136 = call double @floor(double %1135) #9
  %1137 = fadd double %1100, %1136
  %1138 = fptosi double %1137 to i32
  %1139 = sext i32 %c.23 to i64
  %1140 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1139
  store i32 %1138, i32* %1140, align 4
  br label %1141

; <label>:1141                                    ; preds = %1081
  %1142 = add nsw i32 %c.23, 1
  br label %1079

; <label>:1143                                    ; preds = %1079
  br label %1144

; <label>:1144                                    ; preds = %1186, %1143
  %c.24 = phi i32 [ 0, %1143 ], [ %1187, %1186 ]
  %1145 = icmp slt i32 %c.24, 3
  br i1 %1145, label %1146, label %1188

; <label>:1146                                    ; preds = %1144
  %1147 = sext i32 %c.24 to i64
  %1148 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1147
  %1149 = load i32* %1148, align 4
  %1150 = sext i32 %c.24 to i64
  %1151 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1150
  %1152 = load i32* %1151, align 4
  %1153 = mul nsw i32 %1149, %1152
  %1154 = ashr i32 %1153, 14
  %1155 = sext i32 %c.24 to i64
  %1156 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 0
  %1157 = getelementptr inbounds [3 x i32]* %1156, i32 0, i64 %1155
  store i32 %1154, i32* %1157, align 4
  %1158 = sext i32 %c.24 to i64
  %1159 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1158
  %1160 = load i32* %1159, align 4
  %1161 = sext i32 %c.24 to i64
  %1162 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 0
  %1163 = getelementptr inbounds [3 x i32]* %1162, i32 0, i64 %1161
  %1164 = load i32* %1163, align 4
  %1165 = mul nsw i32 %1160, %1164
  %1166 = ashr i32 %1165, 14
  %1167 = sext i32 %c.24 to i64
  %1168 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 2
  %1169 = getelementptr inbounds [3 x i32]* %1168, i32 0, i64 %1167
  store i32 %1166, i32* %1169, align 4
  %1170 = add nsw i32 %c.24, 1
  %1171 = srem i32 %1170, 3
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1172
  %1174 = load i32* %1173, align 4
  %1175 = add nsw i32 %c.24, 2
  %1176 = srem i32 %1175, 3
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1177
  %1179 = load i32* %1178, align 4
  %1180 = mul nsw i32 %1174, %1179
  %1181 = ashr i32 %1180, 14
  %1182 = sub nsw i32 2, %c.24
  %1183 = sext i32 %1182 to i64
  %1184 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 1
  %1185 = getelementptr inbounds [3 x i32]* %1184, i32 0, i64 %1183
  store i32 %1181, i32* %1185, align 4
  br label %1186

; <label>:1186                                    ; preds = %1146
  %1187 = add nsw i32 %c.24, 1
  br label %1144

; <label>:1188                                    ; preds = %1144
  br label %1189

; <label>:1189                                    ; preds = %1274, %1188
  %c.25 = phi i32 [ 0, %1188 ], [ %1275, %1274 ]
  %1190 = icmp slt i32 %c.25, 3
  br i1 %1190, label %1191, label %1276

; <label>:1191                                    ; preds = %1189
  br label %1192

; <label>:1192                                    ; preds = %1216, %1191
  %i.9 = phi i32 [ 0, %1191 ], [ %1217, %1216 ]
  %val.0 = phi float [ 0.000000e+00, %1191 ], [ %val.1, %1216 ]
  %1193 = icmp slt i32 %i.9, 3
  br i1 %1193, label %1194, label %1218

; <label>:1194                                    ; preds = %1192
  br label %1195

; <label>:1195                                    ; preds = %1213, %1194
  %j.3 = phi i32 [ 0, %1194 ], [ %1214, %1213 ]
  %val.1 = phi float [ %val.0, %1194 ], [ %1212, %1213 ]
  %1196 = icmp slt i32 %j.3, 3
  br i1 %1196, label %1197, label %1215

; <label>:1197                                    ; preds = %1195
  %1198 = sext i32 %j.3 to i64
  %1199 = sext i32 %i.9 to i64
  %1200 = sext i32 %c.25 to i64
  %1201 = getelementptr inbounds [3 x [3 x [3 x float]]]* %ppm, i32 0, i64 %1200
  %1202 = getelementptr inbounds [3 x [3 x float]]* %1201, i32 0, i64 %1199
  %1203 = getelementptr inbounds [3 x float]* %1202, i32 0, i64 %1198
  %1204 = load float* %1203, align 4
  %1205 = sext i32 %j.3 to i64
  %1206 = sext i32 %i.9 to i64
  %1207 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 %1206
  %1208 = getelementptr inbounds [3 x i32]* %1207, i32 0, i64 %1205
  %1209 = load i32* %1208, align 4
  %1210 = sitofp i32 %1209 to float
  %1211 = fmul float %1204, %1210
  %1212 = fadd float %val.1, %1211
  br label %1213

; <label>:1213                                    ; preds = %1197
  %1214 = add nsw i32 %j.3, 1
  br label %1195

; <label>:1215                                    ; preds = %1195
  br label %1216

; <label>:1216                                    ; preds = %1215
  %1217 = add nsw i32 %i.9, 1
  br label %1192

; <label>:1218                                    ; preds = %1192
  %1219 = sext i32 %c.25 to i64
  %1220 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1219
  %1221 = load i32* %1220, align 4
  %1222 = sitofp i32 %1221 to double
  %1223 = fpext float %val.0 to double
  %1224 = call double @floor(double %1223) #9
  %1225 = fadd double %1222, %1224
  %1226 = sext i32 %c.25 to i64
  %1227 = sdiv i32 %col.2, %508
  %1228 = sext i32 %1227 to i64
  %1229 = getelementptr inbounds [3 x float]* %498, i64 %1228
  %1230 = getelementptr inbounds [3 x float]* %1229, i32 0, i64 %1226
  %1231 = load float* %1230, align 4
  %1232 = srem i32 %col.2, %508
  %1233 = sub nsw i32 %508, %1232
  %1234 = sitofp i32 %1233 to float
  %1235 = fmul float %1231, %1234
  %1236 = sext i32 %c.25 to i64
  %1237 = sdiv i32 %col.2, %508
  %1238 = add nsw i32 %1237, 1
  %1239 = sext i32 %1238 to i64
  %1240 = getelementptr inbounds [3 x float]* %498, i64 %1239
  %1241 = getelementptr inbounds [3 x float]* %1240, i32 0, i64 %1236
  %1242 = load float* %1241, align 4
  %1243 = srem i32 %col.2, %508
  %1244 = sitofp i32 %1243 to float
  %1245 = fmul float %1242, %1244
  %1246 = fadd float %1235, %1245
  %1247 = fpext float %1246 to double
  %1248 = fmul double %1225, %1247
  %1249 = sitofp i32 %508 to double
  %1250 = fdiv double %1248, %1249
  %1251 = sext i32 %c.25 to i64
  %1252 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %1251
  %1253 = load float* %1252, align 4
  %1254 = fpext float %1253 to double
  %1255 = fdiv double %1250, %1254
  %1256 = call double @floor(double %1255) #9
  %1257 = fptosi double %1256 to i32
  %1258 = sext i32 %c.25 to i64
  %1259 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1258
  store i32 %1257, i32* %1259, align 4
  %1260 = sext i32 %c.25 to i64
  %1261 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1260
  %1262 = load i32* %1261, align 4
  %1263 = icmp sgt i32 %1262, 32000
  br i1 %1263, label %1264, label %1267

; <label>:1264                                    ; preds = %1218
  %1265 = sext i32 %c.25 to i64
  %1266 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1265
  store i32 32000, i32* %1266, align 4
  br label %1267

; <label>:1267                                    ; preds = %1264, %1218
  %1268 = sext i32 %c.25 to i64
  %1269 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1268
  %1270 = load i32* %1269, align 4
  %1271 = trunc i32 %1270 to i16
  %1272 = sext i32 %c.25 to i64
  %1273 = getelementptr inbounds i16* %pix.0, i64 %1272
  store i16 %1271, i16* %1273, align 2
  br label %1274

; <label>:1274                                    ; preds = %1267
  %1275 = add nsw i32 %c.25, 1
  br label %1189

; <label>:1276                                    ; preds = %1189
  %1277 = getelementptr inbounds i16* %pix.0, i64 4
  br label %1278

; <label>:1278                                    ; preds = %1276
  %1279 = add nsw i32 %col.2, 1
  br label %1074

; <label>:1280                                    ; preds = %1074
  br label %1281

; <label>:1281                                    ; preds = %1280
  %1282 = add nsw i32 %row.7, 1
  br label %960

; <label>:1283                                    ; preds = %960
  %1284 = bitcast [3 x float]* %512 to i8*
  call void @free(i8* %1284) #4
  %1285 = bitcast [3 x float]* %498 to i8*
  call void @free(i8* %1285) #4
  %1286 = bitcast [3 x float]* %490 to i8*
  call void @free(i8* %1286) #4
  %1287 = getelementptr inbounds [3 x i32]* %dim, i32 0, i32 0
  %1288 = call i8* @foveon_camf_matrix(i32* %1287, i8* getelementptr inbounds ([10 x i8]* @.str57, i32 0, i32 0))
  %1289 = bitcast i8* %1288 to i32*
  %1290 = icmp ne i32* %1289, null
  br i1 %1290, label %1291, label %1404

; <label>:1291                                    ; preds = %1283
  br label %1292

; <label>:1292                                    ; preds = %1400, %1291
  %i.10 = phi i32 [ 0, %1291 ], [ %1401, %1400 ]
  %1293 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 0
  %1294 = load i32* %1293, align 4
  %1295 = icmp ult i32 %i.10, %1294
  br i1 %1295, label %1296, label %1402

; <label>:1296                                    ; preds = %1292
  %1297 = sext i32 %i.10 to i64
  %1298 = getelementptr inbounds i32* %1289, i64 %1297
  %1299 = load i32* %1298, align 4
  %1300 = lshr i32 %1299, 8
  %1301 = and i32 %1300, 4095
  %1302 = getelementptr inbounds [4 x i32]* %keep, i32 0, i64 0
  %1303 = load i32* %1302, align 4
  %1304 = sub i32 %1301, %1303
  %1305 = sext i32 %i.10 to i64
  %1306 = getelementptr inbounds i32* %1289, i64 %1305
  %1307 = load i32* %1306, align 4
  %1308 = lshr i32 %1307, 20
  %1309 = getelementptr inbounds [4 x i32]* %keep, i32 0, i64 1
  %1310 = load i32* %1309, align 4
  %1311 = sub i32 %1308, %1310
  %1312 = sub nsw i32 %1311, 1
  %1313 = load i16* @height, align 2
  %1314 = zext i16 %1313 to i32
  %1315 = sub nsw i32 %1314, 3
  %1316 = icmp ugt i32 %1312, %1315
  br i1 %1316, label %1323, label %1317

; <label>:1317                                    ; preds = %1296
  %1318 = sub nsw i32 %1304, 1
  %1319 = load i16* @width, align 2
  %1320 = zext i16 %1319 to i32
  %1321 = sub nsw i32 %1320, 3
  %1322 = icmp ugt i32 %1318, %1321
  br i1 %1322, label %1323, label %1324

; <label>:1323                                    ; preds = %1317, %1296
  br label %1400

; <label>:1324                                    ; preds = %1317
  %1325 = bitcast [3 x float]* %fsum to i8*
  call void @llvm.memset.p0i8.i64(i8* %1325, i8 0, i64 12, i32 4, i1 false)
  br label %1326

; <label>:1326                                    ; preds = %1373, %1324
  %sum.0 = phi i32 [ 0, %1324 ], [ %sum.1, %1373 ]
  %j.4 = phi i32 [ 0, %1324 ], [ %1374, %1373 ]
  %1327 = icmp slt i32 %j.4, 8
  br i1 %1327, label %1328, label %1375

; <label>:1328                                    ; preds = %1326
  %1329 = sext i32 %i.10 to i64
  %1330 = getelementptr inbounds i32* %1289, i64 %1329
  %1331 = load i32* %1330, align 4
  %1332 = shl i32 1, %j.4
  %1333 = and i32 %1331, %1332
  %1334 = icmp ne i32 %1333, 0
  br i1 %1334, label %1335, label %1372

; <label>:1335                                    ; preds = %1328
  br label %1336

; <label>:1336                                    ; preds = %1368, %1335
  %c.26 = phi i32 [ 0, %1335 ], [ %1369, %1368 ]
  %1337 = icmp slt i32 %c.26, 3
  br i1 %1337, label %1338, label %1370

; <label>:1338                                    ; preds = %1336
  %1339 = sext i32 %c.26 to i64
  %1340 = mul nsw i32 %j.4, 2
  %1341 = sext i32 %1340 to i64
  %1342 = getelementptr inbounds [16 x i16]* @foveon_interpolate.hood, i32 0, i64 %1341
  %1343 = load i16* %1342, align 2
  %1344 = sext i16 %1343 to i32
  %1345 = add nsw i32 %1311, %1344
  %1346 = load i16* @width, align 2
  %1347 = zext i16 %1346 to i32
  %1348 = mul nsw i32 %1345, %1347
  %1349 = add nsw i32 %1348, %1304
  %1350 = mul nsw i32 %j.4, 2
  %1351 = add nsw i32 %1350, 1
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds [16 x i16]* @foveon_interpolate.hood, i32 0, i64 %1352
  %1354 = load i16* %1353, align 2
  %1355 = sext i16 %1354 to i32
  %1356 = add nsw i32 %1349, %1355
  %1357 = sext i32 %1356 to i64
  %1358 = load [4 x i16]** @image, align 8
  %1359 = getelementptr inbounds [4 x i16]* %1358, i64 %1357
  %1360 = getelementptr inbounds [4 x i16]* %1359, i32 0, i64 %1339
  %1361 = load i16* %1360, align 2
  %1362 = sext i16 %1361 to i32
  %1363 = sitofp i32 %1362 to float
  %1364 = sext i32 %c.26 to i64
  %1365 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1364
  %1366 = load float* %1365, align 4
  %1367 = fadd float %1366, %1363
  store float %1367, float* %1365, align 4
  br label %1368

; <label>:1368                                    ; preds = %1338
  %1369 = add nsw i32 %c.26, 1
  br label %1336

; <label>:1370                                    ; preds = %1336
  %1371 = add nsw i32 %sum.0, 1
  br label %1372

; <label>:1372                                    ; preds = %1370, %1328
  %sum.1 = phi i32 [ %1371, %1370 ], [ %sum.0, %1328 ]
  br label %1373

; <label>:1373                                    ; preds = %1372
  %1374 = add nsw i32 %j.4, 1
  br label %1326

; <label>:1375                                    ; preds = %1326
  %1376 = icmp ne i32 %sum.0, 0
  br i1 %1376, label %1377, label %1399

; <label>:1377                                    ; preds = %1375
  br label %1378

; <label>:1378                                    ; preds = %1396, %1377
  %c.27 = phi i32 [ 0, %1377 ], [ %1397, %1396 ]
  %1379 = icmp slt i32 %c.27, 3
  br i1 %1379, label %1380, label %1398

; <label>:1380                                    ; preds = %1378
  %1381 = sext i32 %c.27 to i64
  %1382 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1381
  %1383 = load float* %1382, align 4
  %1384 = sitofp i32 %sum.0 to float
  %1385 = fdiv float %1383, %1384
  %1386 = fptosi float %1385 to i16
  %1387 = sext i32 %c.27 to i64
  %1388 = load i16* @width, align 2
  %1389 = zext i16 %1388 to i32
  %1390 = mul nsw i32 %1311, %1389
  %1391 = add nsw i32 %1390, %1304
  %1392 = sext i32 %1391 to i64
  %1393 = load [4 x i16]** @image, align 8
  %1394 = getelementptr inbounds [4 x i16]* %1393, i64 %1392
  %1395 = getelementptr inbounds [4 x i16]* %1394, i32 0, i64 %1387
  store i16 %1386, i16* %1395, align 2
  br label %1396

; <label>:1396                                    ; preds = %1380
  %1397 = add nsw i32 %c.27, 1
  br label %1378

; <label>:1398                                    ; preds = %1378
  br label %1399

; <label>:1399                                    ; preds = %1398, %1375
  br label %1400

; <label>:1400                                    ; preds = %1399, %1323
  %1401 = add nsw i32 %i.10, 1
  br label %1292

; <label>:1402                                    ; preds = %1292
  %1403 = bitcast i32* %1289 to i8*
  call void @free(i8* %1403) #4
  br label %1404

; <label>:1404                                    ; preds = %1402, %1283
  %1405 = load i16* @width, align 2
  %1406 = zext i16 %1405 to i32
  %1407 = mul nsw i32 %1406, 5
  %1408 = sext i32 %1407 to i64
  %1409 = call noalias i8* @calloc(i64 %1408, i64 12) #4
  %1410 = bitcast i8* %1409 to [3 x i32]*
  %1411 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  store [3 x i32]* %1410, [3 x i32]** %1411, align 8
  %1412 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  %1413 = load [3 x i32]** %1412, align 8
  %1414 = bitcast [3 x i32]* %1413 to i8*
  call void @merror(i8* %1414, i8* getelementptr inbounds ([21 x i8]* @.str58, i32 0, i32 0))
  br label %1415

; <label>:1415                                    ; preds = %1427, %1404
  %i.11 = phi i32 [ 0, %1404 ], [ %1428, %1427 ]
  %1416 = icmp slt i32 %i.11, 5
  br i1 %1416, label %1417, label %1429

; <label>:1417                                    ; preds = %1415
  %1418 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  %1419 = load [3 x i32]** %1418, align 8
  %1420 = load i16* @width, align 2
  %1421 = zext i16 %1420 to i32
  %1422 = mul nsw i32 %i.11, %1421
  %1423 = sext i32 %1422 to i64
  %1424 = getelementptr inbounds [3 x i32]* %1419, i64 %1423
  %1425 = sext i32 %i.11 to i64
  %1426 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1425
  store [3 x i32]* %1424, [3 x i32]** %1426, align 8
  br label %1427

; <label>:1427                                    ; preds = %1417
  %1428 = add nsw i32 %i.11, 1
  br label %1415

; <label>:1429                                    ; preds = %1415
  br label %1430

; <label>:1430                                    ; preds = %1577, %1429
  %row.8 = phi i32 [ 2, %1429 ], [ %1578, %1577 ]
  %smlast.0 = phi i32 [ -1, %1429 ], [ %smlast.1, %1577 ]
  %smred_p.0 = phi i32 [ 0, %1429 ], [ %smred_p.1, %1577 ]
  %1431 = load i16* @height, align 2
  %1432 = zext i16 %1431 to i32
  %1433 = sub nsw i32 %1432, 2
  %1434 = icmp slt i32 %row.8, %1433
  br i1 %1434, label %1435, label %1579

; <label>:1435                                    ; preds = %1430
  br label %1436

; <label>:1436                                    ; preds = %1499, %1435
  %smlast.1 = phi i32 [ %smlast.0, %1435 ], [ %1453, %1499 ]
  %1437 = add nsw i32 %row.8, 2
  %1438 = icmp slt i32 %smlast.1, %1437
  br i1 %1438, label %1439, label %1500

; <label>:1439                                    ; preds = %1436
  br label %1440

; <label>:1440                                    ; preds = %1450, %1439
  %i.12 = phi i32 [ 0, %1439 ], [ %1451, %1450 ]
  %1441 = icmp slt i32 %i.12, 6
  br i1 %1441, label %1442, label %1452

; <label>:1442                                    ; preds = %1440
  %1443 = sext i32 %i.12 to i64
  %1444 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1443
  %1445 = load [3 x i32]** %1444, align 8
  %1446 = add nsw i32 %i.12, 5
  %1447 = srem i32 %1446, 6
  %1448 = sext i32 %1447 to i64
  %1449 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1448
  store [3 x i32]* %1445, [3 x i32]** %1449, align 8
  br label %1450

; <label>:1450                                    ; preds = %1442
  %1451 = add nsw i32 %i.12, 1
  br label %1440

; <label>:1452                                    ; preds = %1440
  %1453 = add nsw i32 %smlast.1, 1
  %1454 = load i16* @width, align 2
  %1455 = zext i16 %1454 to i32
  %1456 = mul nsw i32 %1453, %1455
  %1457 = add nsw i32 %1456, 2
  %1458 = sext i32 %1457 to i64
  %1459 = load [4 x i16]** @image, align 8
  %1460 = getelementptr inbounds [4 x i16]* %1459, i64 %1458
  %1461 = getelementptr inbounds [4 x i16]* %1460, i32 0, i32 0
  br label %1462

; <label>:1462                                    ; preds = %1497, %1452
  %col.3 = phi i32 [ 2, %1452 ], [ %1498, %1497 ]
  %pix.1 = phi i16* [ %1461, %1452 ], [ %1496, %1497 ]
  %1463 = load i16* @width, align 2
  %1464 = zext i16 %1463 to i32
  %1465 = sub nsw i32 %1464, 2
  %1466 = icmp slt i32 %col.3, %1465
  br i1 %1466, label %1467, label %1499

; <label>:1467                                    ; preds = %1462
  %1468 = getelementptr inbounds i16* %pix.1, i64 0
  %1469 = load i16* %1468, align 2
  %1470 = sext i16 %1469 to i32
  %1471 = mul nsw i32 %1470, 6
  %1472 = getelementptr inbounds i16* %pix.1, i64 -4
  %1473 = load i16* %1472, align 2
  %1474 = sext i16 %1473 to i32
  %1475 = getelementptr inbounds i16* %pix.1, i64 4
  %1476 = load i16* %1475, align 2
  %1477 = sext i16 %1476 to i32
  %1478 = add nsw i32 %1474, %1477
  %1479 = mul nsw i32 %1478, 4
  %1480 = add nsw i32 %1471, %1479
  %1481 = getelementptr inbounds i16* %pix.1, i64 -8
  %1482 = load i16* %1481, align 2
  %1483 = sext i16 %1482 to i32
  %1484 = add nsw i32 %1480, %1483
  %1485 = getelementptr inbounds i16* %pix.1, i64 8
  %1486 = load i16* %1485, align 2
  %1487 = sext i16 %1486 to i32
  %1488 = add nsw i32 %1484, %1487
  %1489 = add nsw i32 %1488, 8
  %1490 = ashr i32 %1489, 4
  %1491 = sext i32 %col.3 to i64
  %1492 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %1493 = load [3 x i32]** %1492, align 8
  %1494 = getelementptr inbounds [3 x i32]* %1493, i64 %1491
  %1495 = getelementptr inbounds [3 x i32]* %1494, i32 0, i64 0
  store i32 %1490, i32* %1495, align 4
  %1496 = getelementptr inbounds i16* %pix.1, i64 4
  br label %1497

; <label>:1497                                    ; preds = %1467
  %1498 = add nsw i32 %col.3, 1
  br label %1462

; <label>:1499                                    ; preds = %1462
  br label %1436

; <label>:1500                                    ; preds = %1436
  %1501 = load i16* @width, align 2
  %1502 = zext i16 %1501 to i32
  %1503 = mul nsw i32 %row.8, %1502
  %1504 = add nsw i32 %1503, 2
  %1505 = sext i32 %1504 to i64
  %1506 = load [4 x i16]** @image, align 8
  %1507 = getelementptr inbounds [4 x i16]* %1506, i64 %1505
  %1508 = getelementptr inbounds [4 x i16]* %1507, i32 0, i32 0
  br label %1509

; <label>:1509                                    ; preds = %1574, %1500
  %col.4 = phi i32 [ 2, %1500 ], [ %1575, %1574 ]
  %smred_p.1 = phi i32 [ %smred_p.0, %1500 ], [ %1552, %1574 ]
  %pix.2 = phi i16* [ %1508, %1500 ], [ %1573, %1574 ]
  %1510 = load i16* @width, align 2
  %1511 = zext i16 %1510 to i32
  %1512 = sub nsw i32 %1511, 2
  %1513 = icmp slt i32 %col.4, %1512
  br i1 %1513, label %1514, label %1576

; <label>:1514                                    ; preds = %1509
  %1515 = sext i32 %col.4 to i64
  %1516 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %1517 = load [3 x i32]** %1516, align 8
  %1518 = getelementptr inbounds [3 x i32]* %1517, i64 %1515
  %1519 = getelementptr inbounds [3 x i32]* %1518, i32 0, i64 0
  %1520 = load i32* %1519, align 4
  %1521 = mul nsw i32 6, %1520
  %1522 = sext i32 %col.4 to i64
  %1523 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %1524 = load [3 x i32]** %1523, align 8
  %1525 = getelementptr inbounds [3 x i32]* %1524, i64 %1522
  %1526 = getelementptr inbounds [3 x i32]* %1525, i32 0, i64 0
  %1527 = load i32* %1526, align 4
  %1528 = sext i32 %col.4 to i64
  %1529 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 3
  %1530 = load [3 x i32]** %1529, align 8
  %1531 = getelementptr inbounds [3 x i32]* %1530, i64 %1528
  %1532 = getelementptr inbounds [3 x i32]* %1531, i32 0, i64 0
  %1533 = load i32* %1532, align 4
  %1534 = add nsw i32 %1527, %1533
  %1535 = mul nsw i32 4, %1534
  %1536 = add nsw i32 %1521, %1535
  %1537 = sext i32 %col.4 to i64
  %1538 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 0
  %1539 = load [3 x i32]** %1538, align 8
  %1540 = getelementptr inbounds [3 x i32]* %1539, i64 %1537
  %1541 = getelementptr inbounds [3 x i32]* %1540, i32 0, i64 0
  %1542 = load i32* %1541, align 4
  %1543 = add nsw i32 %1536, %1542
  %1544 = sext i32 %col.4 to i64
  %1545 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %1546 = load [3 x i32]** %1545, align 8
  %1547 = getelementptr inbounds [3 x i32]* %1546, i64 %1544
  %1548 = getelementptr inbounds [3 x i32]* %1547, i32 0, i64 0
  %1549 = load i32* %1548, align 4
  %1550 = add nsw i32 %1543, %1549
  %1551 = add nsw i32 %1550, 8
  %1552 = ashr i32 %1551, 4
  %1553 = icmp eq i32 %col.4, 2
  br i1 %1553, label %1554, label %1555

; <label>:1554                                    ; preds = %1514
  br label %1555

; <label>:1555                                    ; preds = %1554, %1514
  %smred_p.2 = phi i32 [ %1552, %1554 ], [ %smred_p.1, %1514 ]
  %1556 = getelementptr inbounds i16* %pix.2, i64 0
  %1557 = load i16* %1556, align 2
  %1558 = sext i16 %1557 to i32
  %1559 = getelementptr inbounds i16* %pix.2, i64 0
  %1560 = load i16* %1559, align 2
  %1561 = sext i16 %1560 to i32
  %1562 = mul nsw i32 %1552, 7
  %1563 = add nsw i32 %1562, %smred_p.2
  %1564 = ashr i32 %1563, 3
  %1565 = sub nsw i32 %1561, %1564
  %1566 = ashr i32 %1565, 3
  %1567 = add nsw i32 %1558, %1566
  %1568 = icmp sgt i32 %1567, 32000
  br i1 %1568, label %1569, label %1570

; <label>:1569                                    ; preds = %1555
  br label %1570

; <label>:1570                                    ; preds = %1569, %1555
  %i.13 = phi i32 [ 32000, %1569 ], [ %1567, %1555 ]
  %1571 = trunc i32 %i.13 to i16
  %1572 = getelementptr inbounds i16* %pix.2, i64 0
  store i16 %1571, i16* %1572, align 2
  %1573 = getelementptr inbounds i16* %pix.2, i64 4
  br label %1574

; <label>:1574                                    ; preds = %1570
  %1575 = add nsw i32 %col.4, 1
  br label %1509

; <label>:1576                                    ; preds = %1509
  br label %1577

; <label>:1577                                    ; preds = %1576
  %1578 = add nsw i32 %row.8, 1
  br label %1430

; <label>:1579                                    ; preds = %1430
  br label %1580

; <label>:1580                                    ; preds = %1595, %1579
  %min.0 = phi i32 [ 65535, %1579 ], [ %min.1, %1595 ]
  %c.28 = phi i32 [ 0, %1579 ], [ %1596, %1595 ]
  %1581 = icmp slt i32 %c.28, 3
  br i1 %1581, label %1582, label %1597

; <label>:1582                                    ; preds = %1580
  %1583 = sext i32 %c.28 to i64
  %1584 = getelementptr inbounds [3 x i32]* %satlev, i32 0, i64 %1583
  %1585 = load i32* %1584, align 4
  %1586 = sitofp i32 %1585 to float
  %1587 = sext i32 %c.28 to i64
  %1588 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %1587
  %1589 = load float* %1588, align 4
  %1590 = fdiv float %1586, %1589
  %1591 = fptosi float %1590 to i32
  %1592 = icmp sgt i32 %min.0, %1591
  br i1 %1592, label %1593, label %1594

; <label>:1593                                    ; preds = %1582
  br label %1594

; <label>:1594                                    ; preds = %1593, %1582
  %min.1 = phi i32 [ %1591, %1593 ], [ %min.0, %1582 ]
  br label %1595

; <label>:1595                                    ; preds = %1594
  %1596 = add nsw i32 %c.28, 1
  br label %1580

; <label>:1597                                    ; preds = %1580
  %1598 = mul nsw i32 %min.0, 9
  %1599 = ashr i32 %1598, 4
  %1600 = load [4 x i16]** @image, align 8
  %1601 = getelementptr inbounds [4 x i16]* %1600, i64 0
  %1602 = getelementptr inbounds [4 x i16]* %1601, i32 0, i32 0
  br label %1603

; <label>:1603                                    ; preds = %1699, %1597
  %pix.3 = phi i16* [ %1602, %1597 ], [ %1700, %1699 ]
  %1604 = load i16* @height, align 2
  %1605 = zext i16 %1604 to i32
  %1606 = load i16* @width, align 2
  %1607 = zext i16 %1606 to i32
  %1608 = mul nsw i32 %1605, %1607
  %1609 = sext i32 %1608 to i64
  %1610 = load [4 x i16]** @image, align 8
  %1611 = getelementptr inbounds [4 x i16]* %1610, i64 %1609
  %1612 = getelementptr inbounds [4 x i16]* %1611, i32 0, i32 0
  %1613 = icmp ult i16* %pix.3, %1612
  br i1 %1613, label %1614, label %1701

; <label>:1614                                    ; preds = %1603
  %1615 = getelementptr inbounds i16* %pix.3, i64 0
  %1616 = load i16* %1615, align 2
  %1617 = sext i16 %1616 to i32
  %1618 = icmp sle i32 %1617, %1599
  br i1 %1618, label %1629, label %1619

; <label>:1619                                    ; preds = %1614
  %1620 = getelementptr inbounds i16* %pix.3, i64 1
  %1621 = load i16* %1620, align 2
  %1622 = sext i16 %1621 to i32
  %1623 = icmp sle i32 %1622, %1599
  br i1 %1623, label %1629, label %1624

; <label>:1624                                    ; preds = %1619
  %1625 = getelementptr inbounds i16* %pix.3, i64 2
  %1626 = load i16* %1625, align 2
  %1627 = sext i16 %1626 to i32
  %1628 = icmp sle i32 %1627, %1599
  br i1 %1628, label %1629, label %1630

; <label>:1629                                    ; preds = %1624, %1619, %1614
  br label %1699

; <label>:1630                                    ; preds = %1624
  %1631 = getelementptr inbounds i16* %pix.3, i64 0
  %1632 = load i16* %1631, align 2
  %1633 = sext i16 %1632 to i32
  br label %1634

; <label>:1634                                    ; preds = %1659, %1630
  %min.2 = phi i32 [ %1633, %1630 ], [ %min.3, %1659 ]
  %c.29 = phi i32 [ 1, %1630 ], [ %1660, %1659 ]
  %max.0 = phi i32 [ %1633, %1630 ], [ %max.1, %1659 ]
  %1635 = icmp slt i32 %c.29, 3
  br i1 %1635, label %1636, label %1661

; <label>:1636                                    ; preds = %1634
  %1637 = sext i32 %c.29 to i64
  %1638 = getelementptr inbounds i16* %pix.3, i64 %1637
  %1639 = load i16* %1638, align 2
  %1640 = sext i16 %1639 to i32
  %1641 = icmp sgt i32 %min.2, %1640
  br i1 %1641, label %1642, label %1647

; <label>:1642                                    ; preds = %1636
  %1643 = sext i32 %c.29 to i64
  %1644 = getelementptr inbounds i16* %pix.3, i64 %1643
  %1645 = load i16* %1644, align 2
  %1646 = sext i16 %1645 to i32
  br label %1647

; <label>:1647                                    ; preds = %1642, %1636
  %min.3 = phi i32 [ %1646, %1642 ], [ %min.2, %1636 ]
  %1648 = sext i32 %c.29 to i64
  %1649 = getelementptr inbounds i16* %pix.3, i64 %1648
  %1650 = load i16* %1649, align 2
  %1651 = sext i16 %1650 to i32
  %1652 = icmp slt i32 %max.0, %1651
  br i1 %1652, label %1653, label %1658

; <label>:1653                                    ; preds = %1647
  %1654 = sext i32 %c.29 to i64
  %1655 = getelementptr inbounds i16* %pix.3, i64 %1654
  %1656 = load i16* %1655, align 2
  %1657 = sext i16 %1656 to i32
  br label %1658

; <label>:1658                                    ; preds = %1653, %1647
  %max.1 = phi i32 [ %1657, %1653 ], [ %max.0, %1647 ]
  br label %1659

; <label>:1659                                    ; preds = %1658
  %1660 = add nsw i32 %c.29, 1
  br label %1634

; <label>:1661                                    ; preds = %1634
  %1662 = mul nsw i32 %1599, 2
  %1663 = icmp sge i32 %min.2, %1662
  br i1 %1663, label %1664, label %1669

; <label>:1664                                    ; preds = %1661
  %1665 = trunc i32 %max.0 to i16
  %1666 = getelementptr inbounds i16* %pix.3, i64 2
  store i16 %1665, i16* %1666, align 2
  %1667 = getelementptr inbounds i16* %pix.3, i64 1
  store i16 %1665, i16* %1667, align 2
  %1668 = getelementptr inbounds i16* %pix.3, i64 0
  store i16 %1665, i16* %1668, align 2
  br label %1698

; <label>:1669                                    ; preds = %1661
  %1670 = sub nsw i32 %min.2, %1599
  %1671 = shl i32 %1670, 14
  %1672 = sdiv i32 %1671, %1599
  %1673 = sub nsw i32 16384, %1672
  %1674 = mul nsw i32 %1673, %1673
  %1675 = ashr i32 %1674, 14
  %1676 = sub nsw i32 16384, %1675
  %1677 = mul nsw i32 %1676, %1676
  %1678 = ashr i32 %1677, 14
  br label %1679

; <label>:1679                                    ; preds = %1695, %1669
  %c.30 = phi i32 [ 0, %1669 ], [ %1696, %1695 ]
  %1680 = icmp slt i32 %c.30, 3
  br i1 %1680, label %1681, label %1697

; <label>:1681                                    ; preds = %1679
  %1682 = sext i32 %c.30 to i64
  %1683 = getelementptr inbounds i16* %pix.3, i64 %1682
  %1684 = load i16* %1683, align 2
  %1685 = sext i16 %1684 to i32
  %1686 = sub nsw i32 %max.0, %1685
  %1687 = mul nsw i32 %1686, %1678
  %1688 = ashr i32 %1687, 14
  %1689 = sext i32 %c.30 to i64
  %1690 = getelementptr inbounds i16* %pix.3, i64 %1689
  %1691 = load i16* %1690, align 2
  %1692 = sext i16 %1691 to i32
  %1693 = add nsw i32 %1692, %1688
  %1694 = trunc i32 %1693 to i16
  store i16 %1694, i16* %1690, align 2
  br label %1695

; <label>:1695                                    ; preds = %1681
  %1696 = add nsw i32 %c.30, 1
  br label %1679

; <label>:1697                                    ; preds = %1679
  br label %1698

; <label>:1698                                    ; preds = %1697, %1664
  br label %1699

; <label>:1699                                    ; preds = %1698, %1629
  %1700 = getelementptr inbounds i16* %pix.3, i64 4
  br label %1603

; <label>:1701                                    ; preds = %1603
  br label %1702

; <label>:1702                                    ; preds = %1861, %1701
  %row.9 = phi i32 [ 2, %1701 ], [ %1862, %1861 ]
  %smlast.2 = phi i32 [ -1, %1701 ], [ %smlast.3, %1861 ]
  %1703 = load i16* @height, align 2
  %1704 = zext i16 %1703 to i32
  %1705 = sub nsw i32 %1704, 2
  %1706 = icmp slt i32 %row.9, %1705
  br i1 %1706, label %1707, label %1863

; <label>:1707                                    ; preds = %1702
  br label %1708

; <label>:1708                                    ; preds = %1774, %1707
  %smlast.3 = phi i32 [ %smlast.2, %1707 ], [ %1725, %1774 ]
  %1709 = add nsw i32 %row.9, 2
  %1710 = icmp slt i32 %smlast.3, %1709
  br i1 %1710, label %1711, label %1775

; <label>:1711                                    ; preds = %1708
  br label %1712

; <label>:1712                                    ; preds = %1722, %1711
  %i.14 = phi i32 [ 0, %1711 ], [ %1723, %1722 ]
  %1713 = icmp slt i32 %i.14, 6
  br i1 %1713, label %1714, label %1724

; <label>:1714                                    ; preds = %1712
  %1715 = sext i32 %i.14 to i64
  %1716 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1715
  %1717 = load [3 x i32]** %1716, align 8
  %1718 = add nsw i32 %i.14, 5
  %1719 = srem i32 %1718, 6
  %1720 = sext i32 %1719 to i64
  %1721 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1720
  store [3 x i32]* %1717, [3 x i32]** %1721, align 8
  br label %1722

; <label>:1722                                    ; preds = %1714
  %1723 = add nsw i32 %i.14, 1
  br label %1712

; <label>:1724                                    ; preds = %1712
  %1725 = add nsw i32 %smlast.3, 1
  %1726 = load i16* @width, align 2
  %1727 = zext i16 %1726 to i32
  %1728 = mul nsw i32 %1725, %1727
  %1729 = add nsw i32 %1728, 2
  %1730 = sext i32 %1729 to i64
  %1731 = load [4 x i16]** @image, align 8
  %1732 = getelementptr inbounds [4 x i16]* %1731, i64 %1730
  %1733 = getelementptr inbounds [4 x i16]* %1732, i32 0, i32 0
  br label %1734

; <label>:1734                                    ; preds = %1772, %1724
  %col.5 = phi i32 [ 2, %1724 ], [ %1773, %1772 ]
  %pix.4 = phi i16* [ %1733, %1724 ], [ %1771, %1772 ]
  %1735 = load i16* @width, align 2
  %1736 = zext i16 %1735 to i32
  %1737 = sub nsw i32 %1736, 2
  %1738 = icmp slt i32 %col.5, %1737
  br i1 %1738, label %1739, label %1774

; <label>:1739                                    ; preds = %1734
  br label %1740

; <label>:1740                                    ; preds = %1768, %1739
  %c.31 = phi i32 [ 0, %1739 ], [ %1769, %1768 ]
  %1741 = icmp slt i32 %c.31, 3
  br i1 %1741, label %1742, label %1770

; <label>:1742                                    ; preds = %1740
  %1743 = sub nsw i32 %c.31, 4
  %1744 = sext i32 %1743 to i64
  %1745 = getelementptr inbounds i16* %pix.4, i64 %1744
  %1746 = load i16* %1745, align 2
  %1747 = sext i16 %1746 to i32
  %1748 = sext i32 %c.31 to i64
  %1749 = getelementptr inbounds i16* %pix.4, i64 %1748
  %1750 = load i16* %1749, align 2
  %1751 = sext i16 %1750 to i32
  %1752 = mul nsw i32 2, %1751
  %1753 = add nsw i32 %1747, %1752
  %1754 = add nsw i32 %c.31, 4
  %1755 = sext i32 %1754 to i64
  %1756 = getelementptr inbounds i16* %pix.4, i64 %1755
  %1757 = load i16* %1756, align 2
  %1758 = sext i16 %1757 to i32
  %1759 = add nsw i32 %1753, %1758
  %1760 = add nsw i32 %1759, 2
  %1761 = ashr i32 %1760, 2
  %1762 = sext i32 %c.31 to i64
  %1763 = sext i32 %col.5 to i64
  %1764 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %1765 = load [3 x i32]** %1764, align 8
  %1766 = getelementptr inbounds [3 x i32]* %1765, i64 %1763
  %1767 = getelementptr inbounds [3 x i32]* %1766, i32 0, i64 %1762
  store i32 %1761, i32* %1767, align 4
  br label %1768

; <label>:1768                                    ; preds = %1742
  %1769 = add nsw i32 %c.31, 1
  br label %1740

; <label>:1770                                    ; preds = %1740
  %1771 = getelementptr inbounds i16* %pix.4, i64 4
  br label %1772

; <label>:1772                                    ; preds = %1770
  %1773 = add nsw i32 %col.5, 1
  br label %1734

; <label>:1774                                    ; preds = %1734
  br label %1708

; <label>:1775                                    ; preds = %1708
  %1776 = load i16* @width, align 2
  %1777 = zext i16 %1776 to i32
  %1778 = mul nsw i32 %row.9, %1777
  %1779 = add nsw i32 %1778, 2
  %1780 = sext i32 %1779 to i64
  %1781 = load [4 x i16]** @image, align 8
  %1782 = getelementptr inbounds [4 x i16]* %1781, i64 %1780
  %1783 = getelementptr inbounds [4 x i16]* %1782, i32 0, i32 0
  br label %1784

; <label>:1784                                    ; preds = %1858, %1775
  %col.6 = phi i32 [ 2, %1775 ], [ %1859, %1858 ]
  %pix.5 = phi i16* [ %1783, %1775 ], [ %1857, %1858 ]
  %1785 = load i16* @width, align 2
  %1786 = zext i16 %1785 to i32
  %1787 = sub nsw i32 %1786, 2
  %1788 = icmp slt i32 %col.6, %1787
  br i1 %1788, label %1789, label %1860

; <label>:1789                                    ; preds = %1784
  br label %1790

; <label>:1790                                    ; preds = %1829, %1789
  %c.32 = phi i32 [ 0, %1789 ], [ %1830, %1829 ]
  %1791 = icmp slt i32 %c.32, 3
  br i1 %1791, label %1792, label %1831

; <label>:1792                                    ; preds = %1790
  %1793 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 7
  %1794 = load i16** %1793, align 8
  %1795 = sext i32 %c.32 to i64
  %1796 = getelementptr inbounds i16* %pix.5, i64 %1795
  %1797 = load i16* %1796, align 2
  %1798 = sext i16 %1797 to i32
  %1799 = sext i32 %c.32 to i64
  %1800 = sext i32 %col.6 to i64
  %1801 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %1802 = load [3 x i32]** %1801, align 8
  %1803 = getelementptr inbounds [3 x i32]* %1802, i64 %1800
  %1804 = getelementptr inbounds [3 x i32]* %1803, i32 0, i64 %1799
  %1805 = load i32* %1804, align 4
  %1806 = sext i32 %c.32 to i64
  %1807 = sext i32 %col.6 to i64
  %1808 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %1809 = load [3 x i32]** %1808, align 8
  %1810 = getelementptr inbounds [3 x i32]* %1809, i64 %1807
  %1811 = getelementptr inbounds [3 x i32]* %1810, i32 0, i64 %1806
  %1812 = load i32* %1811, align 4
  %1813 = mul nsw i32 2, %1812
  %1814 = add nsw i32 %1805, %1813
  %1815 = sext i32 %c.32 to i64
  %1816 = sext i32 %col.6 to i64
  %1817 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 3
  %1818 = load [3 x i32]** %1817, align 8
  %1819 = getelementptr inbounds [3 x i32]* %1818, i64 %1816
  %1820 = getelementptr inbounds [3 x i32]* %1819, i32 0, i64 %1815
  %1821 = load i32* %1820, align 4
  %1822 = add nsw i32 %1814, %1821
  %1823 = ashr i32 %1822, 2
  %1824 = sub nsw i32 %1798, %1823
  %1825 = call i32 @foveon_apply_curve(i16* %1794, i32 %1824)
  %1826 = sub nsw i32 0, %1825
  %1827 = sext i32 %c.32 to i64
  %1828 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 %1827
  store i32 %1826, i32* %1828, align 4
  br label %1829

; <label>:1829                                    ; preds = %1792
  %1830 = add nsw i32 %c.32, 1
  br label %1790

; <label>:1831                                    ; preds = %1790
  %1832 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 0
  %1833 = load i32* %1832, align 4
  %1834 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 1
  %1835 = load i32* %1834, align 4
  %1836 = add nsw i32 %1833, %1835
  %1837 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 2
  %1838 = load i32* %1837, align 4
  %1839 = add nsw i32 %1836, %1838
  %1840 = ashr i32 %1839, 3
  br label %1841

; <label>:1841                                    ; preds = %1854, %1831
  %c.33 = phi i32 [ 0, %1831 ], [ %1855, %1854 ]
  %1842 = icmp slt i32 %c.33, 3
  br i1 %1842, label %1843, label %1856

; <label>:1843                                    ; preds = %1841
  %1844 = sext i32 %c.33 to i64
  %1845 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 %1844
  %1846 = load i32* %1845, align 4
  %1847 = sub nsw i32 %1846, %1840
  %1848 = sext i32 %c.33 to i64
  %1849 = getelementptr inbounds i16* %pix.5, i64 %1848
  %1850 = load i16* %1849, align 2
  %1851 = sext i16 %1850 to i32
  %1852 = add nsw i32 %1851, %1847
  %1853 = trunc i32 %1852 to i16
  store i16 %1853, i16* %1849, align 2
  br label %1854

; <label>:1854                                    ; preds = %1843
  %1855 = add nsw i32 %c.33, 1
  br label %1841

; <label>:1856                                    ; preds = %1841
  %1857 = getelementptr inbounds i16* %pix.5, i64 4
  br label %1858

; <label>:1858                                    ; preds = %1856
  %1859 = add nsw i32 %col.6, 1
  br label %1784

; <label>:1860                                    ; preds = %1784
  br label %1861

; <label>:1861                                    ; preds = %1860
  %1862 = add nsw i32 %row.9, 1
  br label %1702

; <label>:1863                                    ; preds = %1702
  br label %1864

; <label>:1864                                    ; preds = %2046, %1863
  %row.10 = phi i32 [ 2, %1863 ], [ %2047, %2046 ]
  %smlast.4 = phi i32 [ -1, %1863 ], [ %smlast.5, %2046 ]
  %1865 = load i16* @height, align 2
  %1866 = zext i16 %1865 to i32
  %1867 = sub nsw i32 %1866, 2
  %1868 = icmp slt i32 %row.10, %1867
  br i1 %1868, label %1869, label %2048

; <label>:1869                                    ; preds = %1864
  br label %1870

; <label>:1870                                    ; preds = %1947, %1869
  %smlast.5 = phi i32 [ %smlast.4, %1869 ], [ %1887, %1947 ]
  %1871 = add nsw i32 %row.10, 2
  %1872 = icmp slt i32 %smlast.5, %1871
  br i1 %1872, label %1873, label %1948

; <label>:1873                                    ; preds = %1870
  br label %1874

; <label>:1874                                    ; preds = %1884, %1873
  %i.15 = phi i32 [ 0, %1873 ], [ %1885, %1884 ]
  %1875 = icmp slt i32 %i.15, 6
  br i1 %1875, label %1876, label %1886

; <label>:1876                                    ; preds = %1874
  %1877 = sext i32 %i.15 to i64
  %1878 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1877
  %1879 = load [3 x i32]** %1878, align 8
  %1880 = add nsw i32 %i.15, 5
  %1881 = srem i32 %1880, 6
  %1882 = sext i32 %1881 to i64
  %1883 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1882
  store [3 x i32]* %1879, [3 x i32]** %1883, align 8
  br label %1884

; <label>:1884                                    ; preds = %1876
  %1885 = add nsw i32 %i.15, 1
  br label %1874

; <label>:1886                                    ; preds = %1874
  %1887 = add nsw i32 %smlast.5, 1
  %1888 = load i16* @width, align 2
  %1889 = zext i16 %1888 to i32
  %1890 = mul nsw i32 %1887, %1889
  %1891 = add nsw i32 %1890, 2
  %1892 = sext i32 %1891 to i64
  %1893 = load [4 x i16]** @image, align 8
  %1894 = getelementptr inbounds [4 x i16]* %1893, i64 %1892
  %1895 = getelementptr inbounds [4 x i16]* %1894, i32 0, i32 0
  br label %1896

; <label>:1896                                    ; preds = %1945, %1886
  %col.7 = phi i32 [ 2, %1886 ], [ %1946, %1945 ]
  %pix.6 = phi i16* [ %1895, %1886 ], [ %1944, %1945 ]
  %1897 = load i16* @width, align 2
  %1898 = zext i16 %1897 to i32
  %1899 = sub nsw i32 %1898, 2
  %1900 = icmp slt i32 %col.7, %1899
  br i1 %1900, label %1901, label %1947

; <label>:1901                                    ; preds = %1896
  br label %1902

; <label>:1902                                    ; preds = %1941, %1901
  %c.34 = phi i32 [ 0, %1901 ], [ %1942, %1941 ]
  %1903 = icmp slt i32 %c.34, 3
  br i1 %1903, label %1904, label %1943

; <label>:1904                                    ; preds = %1902
  %1905 = sub nsw i32 %c.34, 8
  %1906 = sext i32 %1905 to i64
  %1907 = getelementptr inbounds i16* %pix.6, i64 %1906
  %1908 = load i16* %1907, align 2
  %1909 = sext i16 %1908 to i32
  %1910 = sub nsw i32 %c.34, 4
  %1911 = sext i32 %1910 to i64
  %1912 = getelementptr inbounds i16* %pix.6, i64 %1911
  %1913 = load i16* %1912, align 2
  %1914 = sext i16 %1913 to i32
  %1915 = add nsw i32 %1909, %1914
  %1916 = sext i32 %c.34 to i64
  %1917 = getelementptr inbounds i16* %pix.6, i64 %1916
  %1918 = load i16* %1917, align 2
  %1919 = sext i16 %1918 to i32
  %1920 = add nsw i32 %1915, %1919
  %1921 = add nsw i32 %c.34, 4
  %1922 = sext i32 %1921 to i64
  %1923 = getelementptr inbounds i16* %pix.6, i64 %1922
  %1924 = load i16* %1923, align 2
  %1925 = sext i16 %1924 to i32
  %1926 = add nsw i32 %1920, %1925
  %1927 = add nsw i32 %c.34, 8
  %1928 = sext i32 %1927 to i64
  %1929 = getelementptr inbounds i16* %pix.6, i64 %1928
  %1930 = load i16* %1929, align 2
  %1931 = sext i16 %1930 to i32
  %1932 = add nsw i32 %1926, %1931
  %1933 = add nsw i32 %1932, 2
  %1934 = ashr i32 %1933, 2
  %1935 = sext i32 %c.34 to i64
  %1936 = sext i32 %col.7 to i64
  %1937 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %1938 = load [3 x i32]** %1937, align 8
  %1939 = getelementptr inbounds [3 x i32]* %1938, i64 %1936
  %1940 = getelementptr inbounds [3 x i32]* %1939, i32 0, i64 %1935
  store i32 %1934, i32* %1940, align 4
  br label %1941

; <label>:1941                                    ; preds = %1904
  %1942 = add nsw i32 %c.34, 1
  br label %1902

; <label>:1943                                    ; preds = %1902
  %1944 = getelementptr inbounds i16* %pix.6, i64 4
  br label %1945

; <label>:1945                                    ; preds = %1943
  %1946 = add nsw i32 %col.7, 1
  br label %1896

; <label>:1947                                    ; preds = %1896
  br label %1870

; <label>:1948                                    ; preds = %1870
  %1949 = load i16* @width, align 2
  %1950 = zext i16 %1949 to i32
  %1951 = mul nsw i32 %row.10, %1950
  %1952 = add nsw i32 %1951, 2
  %1953 = sext i32 %1952 to i64
  %1954 = load [4 x i16]** @image, align 8
  %1955 = getelementptr inbounds [4 x i16]* %1954, i64 %1953
  %1956 = getelementptr inbounds [4 x i16]* %1955, i32 0, i32 0
  br label %1957

; <label>:1957                                    ; preds = %2043, %1948
  %col.8 = phi i32 [ 2, %1948 ], [ %2044, %2043 ]
  %pix.7 = phi i16* [ %1956, %1948 ], [ %2042, %2043 ]
  %1958 = load i16* @width, align 2
  %1959 = zext i16 %1958 to i32
  %1960 = sub nsw i32 %1959, 2
  %1961 = icmp slt i32 %col.8, %1960
  br i1 %1961, label %1962, label %2045

; <label>:1962                                    ; preds = %1957
  %1963 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  store i32 375, i32* %1963, align 4
  br label %1964

; <label>:1964                                    ; preds = %1998, %1962
  %sum.2 = phi i32 [ 60, %1962 ], [ %1997, %1998 ]
  %c.35 = phi i32 [ 0, %1962 ], [ %1999, %1998 ]
  %1965 = icmp slt i32 %c.35, 3
  br i1 %1965, label %1966, label %2000

; <label>:1966                                    ; preds = %1964
  %1967 = sext i32 %c.35 to i64
  %1968 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %1967
  store i32 0, i32* %1968, align 4
  br label %1969

; <label>:1969                                    ; preds = %1984, %1966
  %i.16 = phi i32 [ 0, %1966 ], [ %1985, %1984 ]
  %1970 = icmp slt i32 %i.16, 5
  br i1 %1970, label %1971, label %1986

; <label>:1971                                    ; preds = %1969
  %1972 = sext i32 %c.35 to i64
  %1973 = sext i32 %col.8 to i64
  %1974 = sext i32 %i.16 to i64
  %1975 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1974
  %1976 = load [3 x i32]** %1975, align 8
  %1977 = getelementptr inbounds [3 x i32]* %1976, i64 %1973
  %1978 = getelementptr inbounds [3 x i32]* %1977, i32 0, i64 %1972
  %1979 = load i32* %1978, align 4
  %1980 = sext i32 %c.35 to i64
  %1981 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %1980
  %1982 = load i32* %1981, align 4
  %1983 = add nsw i32 %1982, %1979
  store i32 %1983, i32* %1981, align 4
  br label %1984

; <label>:1984                                    ; preds = %1971
  %1985 = add nsw i32 %i.16, 1
  br label %1969

; <label>:1986                                    ; preds = %1969
  %1987 = sext i32 %c.35 to i64
  %1988 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %1987
  %1989 = load i32* %1988, align 4
  %1990 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %1991 = load i32* %1990, align 4
  %1992 = add nsw i32 %1991, %1989
  store i32 %1992, i32* %1990, align 4
  %1993 = sext i32 %c.35 to i64
  %1994 = getelementptr inbounds i16* %pix.7, i64 %1993
  %1995 = load i16* %1994, align 2
  %1996 = sext i16 %1995 to i32
  %1997 = add nsw i32 %sum.2, %1996
  br label %1998

; <label>:1998                                    ; preds = %1986
  %1999 = add nsw i32 %c.35, 1
  br label %1964

; <label>:2000                                    ; preds = %1964
  %2001 = icmp slt i32 %sum.2, 0
  br i1 %2001, label %2002, label %2003

; <label>:2002                                    ; preds = %2000
  br label %2003

; <label>:2003                                    ; preds = %2002, %2000
  %sum.3 = phi i32 [ 0, %2002 ], [ %sum.2, %2000 ]
  %2004 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %2005 = load i32* %2004, align 4
  %2006 = icmp sgt i32 %2005, 375
  br i1 %2006, label %2007, label %2012

; <label>:2007                                    ; preds = %2003
  %2008 = shl i32 %sum.3, 16
  %2009 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %2010 = load i32* %2009, align 4
  %2011 = sdiv i32 %2008, %2010
  br label %2014

; <label>:2012                                    ; preds = %2003
  %2013 = mul nsw i32 %sum.3, 174
  br label %2014

; <label>:2014                                    ; preds = %2012, %2007
  %2015 = phi i32 [ %2011, %2007 ], [ %2013, %2012 ]
  br label %2016

; <label>:2016                                    ; preds = %2039, %2014
  %c.36 = phi i32 [ 0, %2014 ], [ %2040, %2039 ]
  %2017 = icmp slt i32 %c.36, 3
  br i1 %2017, label %2018, label %2041

; <label>:2018                                    ; preds = %2016
  %2019 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 6
  %2020 = load i16** %2019, align 8
  %2021 = sext i32 %c.36 to i64
  %2022 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %2021
  %2023 = load i32* %2022, align 4
  %2024 = mul nsw i32 %2015, %2023
  %2025 = add nsw i32 %2024, 32768
  %2026 = ashr i32 %2025, 16
  %2027 = sext i32 %c.36 to i64
  %2028 = getelementptr inbounds i16* %pix.7, i64 %2027
  %2029 = load i16* %2028, align 2
  %2030 = sext i16 %2029 to i32
  %2031 = sub nsw i32 %2026, %2030
  %2032 = call i32 @foveon_apply_curve(i16* %2020, i32 %2031)
  %2033 = sext i32 %c.36 to i64
  %2034 = getelementptr inbounds i16* %pix.7, i64 %2033
  %2035 = load i16* %2034, align 2
  %2036 = sext i16 %2035 to i32
  %2037 = add nsw i32 %2036, %2032
  %2038 = trunc i32 %2037 to i16
  store i16 %2038, i16* %2034, align 2
  br label %2039

; <label>:2039                                    ; preds = %2018
  %2040 = add nsw i32 %c.36, 1
  br label %2016

; <label>:2041                                    ; preds = %2016
  %2042 = getelementptr inbounds i16* %pix.7, i64 4
  br label %2043

; <label>:2043                                    ; preds = %2041
  %2044 = add nsw i32 %col.8, 1
  br label %1957

; <label>:2045                                    ; preds = %1957
  br label %2046

; <label>:2046                                    ; preds = %2045
  %2047 = add nsw i32 %row.10, 1
  br label %1864

; <label>:2048                                    ; preds = %1864
  %2049 = load [4 x i16]** @image, align 8
  %2050 = getelementptr inbounds [4 x i16]* %2049, i64 0
  %2051 = getelementptr inbounds [4 x i16]* %2050, i32 0, i32 0
  br label %2052

; <label>:2052                                    ; preds = %2168, %2048
  %pix.8 = phi i16* [ %2051, %2048 ], [ %2169, %2168 ]
  %2053 = load i16* @height, align 2
  %2054 = zext i16 %2053 to i32
  %2055 = load i16* @width, align 2
  %2056 = zext i16 %2055 to i32
  %2057 = mul nsw i32 %2054, %2056
  %2058 = sext i32 %2057 to i64
  %2059 = load [4 x i16]** @image, align 8
  %2060 = getelementptr inbounds [4 x i16]* %2059, i64 %2058
  %2061 = getelementptr inbounds [4 x i16]* %2060, i32 0, i32 0
  %2062 = icmp ult i16* %pix.8, %2061
  br i1 %2062, label %2063, label %2170

; <label>:2063                                    ; preds = %2052
  br label %2064

; <label>:2064                                    ; preds = %2081, %2063
  %c.37 = phi i32 [ 0, %2063 ], [ %2082, %2081 ]
  %2065 = icmp slt i32 %c.37, 3
  br i1 %2065, label %2066, label %2083

; <label>:2066                                    ; preds = %2064
  %2067 = sext i32 %c.37 to i64
  %2068 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %2067
  %2069 = load i16** %2068, align 8
  %2070 = sext i32 %c.37 to i64
  %2071 = getelementptr inbounds i16* %pix.8, i64 %2070
  %2072 = load i16* %2071, align 2
  %2073 = sext i16 %2072 to i32
  %2074 = call i32 @foveon_apply_curve(i16* %2069, i32 %2073)
  %2075 = sext i32 %c.37 to i64
  %2076 = getelementptr inbounds i16* %pix.8, i64 %2075
  %2077 = load i16* %2076, align 2
  %2078 = sext i16 %2077 to i32
  %2079 = sub nsw i32 %2078, %2074
  %2080 = trunc i32 %2079 to i16
  store i16 %2080, i16* %2076, align 2
  br label %2081

; <label>:2081                                    ; preds = %2066
  %2082 = add nsw i32 %c.37, 1
  br label %2064

; <label>:2083                                    ; preds = %2064
  %2084 = getelementptr inbounds i16* %pix.8, i64 0
  %2085 = load i16* %2084, align 2
  %2086 = sext i16 %2085 to i32
  %2087 = getelementptr inbounds i16* %pix.8, i64 1
  %2088 = load i16* %2087, align 2
  %2089 = sext i16 %2088 to i32
  %2090 = add nsw i32 %2086, %2089
  %2091 = getelementptr inbounds i16* %pix.8, i64 1
  %2092 = load i16* %2091, align 2
  %2093 = sext i16 %2092 to i32
  %2094 = add nsw i32 %2090, %2093
  %2095 = getelementptr inbounds i16* %pix.8, i64 2
  %2096 = load i16* %2095, align 2
  %2097 = sext i16 %2096 to i32
  %2098 = add nsw i32 %2094, %2097
  %2099 = ashr i32 %2098, 2
  br label %2100

; <label>:2100                                    ; preds = %2118, %2083
  %c.38 = phi i32 [ 0, %2083 ], [ %2119, %2118 ]
  %2101 = icmp slt i32 %c.38, 3
  br i1 %2101, label %2102, label %2120

; <label>:2102                                    ; preds = %2100
  %2103 = sext i32 %c.38 to i64
  %2104 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %2103
  %2105 = load i16** %2104, align 8
  %2106 = sext i32 %c.38 to i64
  %2107 = getelementptr inbounds i16* %pix.8, i64 %2106
  %2108 = load i16* %2107, align 2
  %2109 = sext i16 %2108 to i32
  %2110 = sub nsw i32 %2109, %2099
  %2111 = call i32 @foveon_apply_curve(i16* %2105, i32 %2110)
  %2112 = sext i32 %c.38 to i64
  %2113 = getelementptr inbounds i16* %pix.8, i64 %2112
  %2114 = load i16* %2113, align 2
  %2115 = sext i16 %2114 to i32
  %2116 = sub nsw i32 %2115, %2111
  %2117 = trunc i32 %2116 to i16
  store i16 %2117, i16* %2113, align 2
  br label %2118

; <label>:2118                                    ; preds = %2102
  %2119 = add nsw i32 %c.38, 1
  br label %2100

; <label>:2120                                    ; preds = %2100
  br label %2121

; <label>:2121                                    ; preds = %2153, %2120
  %c.39 = phi i32 [ 0, %2120 ], [ %2154, %2153 ]
  %2122 = icmp slt i32 %c.39, 3
  br i1 %2122, label %2123, label %2155

; <label>:2123                                    ; preds = %2121
  br label %2124

; <label>:2124                                    ; preds = %2140, %2123
  %i.17 = phi i32 [ 0, %2123 ], [ %2141, %2140 ]
  %dsum.1 = phi double [ 0.000000e+00, %2123 ], [ %2139, %2140 ]
  %2125 = icmp slt i32 %i.17, 3
  br i1 %2125, label %2126, label %2142

; <label>:2126                                    ; preds = %2124
  %2127 = sext i32 %i.17 to i64
  %2128 = sext i32 %c.39 to i64
  %2129 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %2128
  %2130 = getelementptr inbounds [3 x float]* %2129, i32 0, i64 %2127
  %2131 = load float* %2130, align 4
  %2132 = sext i32 %i.17 to i64
  %2133 = getelementptr inbounds i16* %pix.8, i64 %2132
  %2134 = load i16* %2133, align 2
  %2135 = sext i16 %2134 to i32
  %2136 = sitofp i32 %2135 to float
  %2137 = fmul float %2131, %2136
  %2138 = fpext float %2137 to double
  %2139 = fadd double %dsum.1, %2138
  br label %2140

; <label>:2140                                    ; preds = %2126
  %2141 = add nsw i32 %i.17, 1
  br label %2124

; <label>:2142                                    ; preds = %2124
  %2143 = fcmp olt double %dsum.1, 0.000000e+00
  br i1 %2143, label %2144, label %2145

; <label>:2144                                    ; preds = %2142
  br label %2145

; <label>:2145                                    ; preds = %2144, %2142
  %dsum.2 = phi double [ 0.000000e+00, %2144 ], [ %dsum.1, %2142 ]
  %2146 = fcmp ogt double %dsum.2, 2.400000e+04
  br i1 %2146, label %2147, label %2148

; <label>:2147                                    ; preds = %2145
  br label %2148

; <label>:2148                                    ; preds = %2147, %2145
  %dsum.3 = phi double [ 2.400000e+04, %2147 ], [ %dsum.2, %2145 ]
  %2149 = fadd double %dsum.3, 5.000000e-01
  %2150 = fptosi double %2149 to i32
  %2151 = sext i32 %c.39 to i64
  %2152 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2151
  store i32 %2150, i32* %2152, align 4
  br label %2153

; <label>:2153                                    ; preds = %2148
  %2154 = add nsw i32 %c.39, 1
  br label %2121

; <label>:2155                                    ; preds = %2121
  br label %2156

; <label>:2156                                    ; preds = %2165, %2155
  %c.40 = phi i32 [ 0, %2155 ], [ %2166, %2165 ]
  %2157 = icmp slt i32 %c.40, 3
  br i1 %2157, label %2158, label %2167

; <label>:2158                                    ; preds = %2156
  %2159 = sext i32 %c.40 to i64
  %2160 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2159
  %2161 = load i32* %2160, align 4
  %2162 = trunc i32 %2161 to i16
  %2163 = sext i32 %c.40 to i64
  %2164 = getelementptr inbounds i16* %pix.8, i64 %2163
  store i16 %2162, i16* %2164, align 2
  br label %2165

; <label>:2165                                    ; preds = %2158
  %2166 = add nsw i32 %c.40, 1
  br label %2156

; <label>:2167                                    ; preds = %2156
  br label %2168

; <label>:2168                                    ; preds = %2167
  %2169 = getelementptr inbounds i16* %pix.8, i64 4
  br label %2052

; <label>:2170                                    ; preds = %2052
  %2171 = load i16* @width, align 2
  %2172 = zext i16 %2171 to i32
  %2173 = sdiv i32 %2172, 4
  %2174 = load i16* @height, align 2
  %2175 = zext i16 %2174 to i32
  %2176 = sdiv i32 %2175, 4
  %2177 = mul nsw i32 %2173, %2176
  %2178 = sext i32 %2177 to i64
  %2179 = call noalias i8* @calloc(i64 %2178, i64 6) #4
  %2180 = bitcast i8* %2179 to [3 x i16]*
  %2181 = bitcast [3 x i16]* %2180 to i8*
  call void @merror(i8* %2181, i8* getelementptr inbounds ([21 x i8]* @.str58, i32 0, i32 0))
  %2182 = load i16* @height, align 2
  %2183 = zext i16 %2182 to i32
  %2184 = sdiv i32 %2183, 4
  br label %2185

; <label>:2185                                    ; preds = %2295, %2170
  %row.11 = phi i32 [ %2184, %2170 ], [ %2186, %2295 ]
  %2186 = add nsw i32 %row.11, -1
  %2187 = icmp ne i32 %row.11, 0
  br i1 %2187, label %2188, label %2296

; <label>:2188                                    ; preds = %2185
  br label %2189

; <label>:2189                                    ; preds = %2293, %2188
  %col.9 = phi i32 [ 0, %2188 ], [ %2294, %2293 ]
  %2190 = load i16* @width, align 2
  %2191 = zext i16 %2190 to i32
  %2192 = sdiv i32 %2191, 4
  %2193 = icmp slt i32 %col.9, %2192
  br i1 %2193, label %2194, label %2295

; <label>:2194                                    ; preds = %2189
  %2195 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 2
  store i32 0, i32* %2195, align 4
  %2196 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 1
  store i32 0, i32* %2196, align 4
  %2197 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 0
  store i32 0, i32* %2197, align 4
  br label %2198

; <label>:2198                                    ; preds = %2232, %2194
  %i.18 = phi i32 [ 0, %2194 ], [ %2233, %2232 ]
  %2199 = icmp slt i32 %i.18, 4
  br i1 %2199, label %2200, label %2234

; <label>:2200                                    ; preds = %2198
  br label %2201

; <label>:2201                                    ; preds = %2229, %2200
  %j.5 = phi i32 [ 0, %2200 ], [ %2230, %2229 ]
  %2202 = icmp slt i32 %j.5, 4
  br i1 %2202, label %2203, label %2231

; <label>:2203                                    ; preds = %2201
  br label %2204

; <label>:2204                                    ; preds = %2226, %2203
  %c.41 = phi i32 [ 0, %2203 ], [ %2227, %2226 ]
  %2205 = icmp slt i32 %c.41, 3
  br i1 %2205, label %2206, label %2228

; <label>:2206                                    ; preds = %2204
  %2207 = sext i32 %c.41 to i64
  %2208 = mul nsw i32 %2186, 4
  %2209 = add nsw i32 %2208, %i.18
  %2210 = load i16* @width, align 2
  %2211 = zext i16 %2210 to i32
  %2212 = mul nsw i32 %2209, %2211
  %2213 = mul nsw i32 %col.9, 4
  %2214 = add nsw i32 %2212, %2213
  %2215 = add nsw i32 %2214, %j.5
  %2216 = sext i32 %2215 to i64
  %2217 = load [4 x i16]** @image, align 8
  %2218 = getelementptr inbounds [4 x i16]* %2217, i64 %2216
  %2219 = getelementptr inbounds [4 x i16]* %2218, i32 0, i64 %2207
  %2220 = load i16* %2219, align 2
  %2221 = sext i16 %2220 to i32
  %2222 = sext i32 %c.41 to i64
  %2223 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2222
  %2224 = load i32* %2223, align 4
  %2225 = add nsw i32 %2224, %2221
  store i32 %2225, i32* %2223, align 4
  br label %2226

; <label>:2226                                    ; preds = %2206
  %2227 = add nsw i32 %c.41, 1
  br label %2204

; <label>:2228                                    ; preds = %2204
  br label %2229

; <label>:2229                                    ; preds = %2228
  %2230 = add nsw i32 %j.5, 1
  br label %2201

; <label>:2231                                    ; preds = %2201
  br label %2232

; <label>:2232                                    ; preds = %2231
  %2233 = add nsw i32 %i.18, 1
  br label %2198

; <label>:2234                                    ; preds = %2198
  br label %2235

; <label>:2235                                    ; preds = %2290, %2234
  %c.42 = phi i32 [ 0, %2234 ], [ %2291, %2290 ]
  %2236 = icmp slt i32 %c.42, 3
  br i1 %2236, label %2237, label %2292

; <label>:2237                                    ; preds = %2235
  %2238 = add nsw i32 %2186, 2
  %2239 = load i16* @height, align 2
  %2240 = zext i16 %2239 to i32
  %2241 = sdiv i32 %2240, 4
  %2242 = icmp sgt i32 %2238, %2241
  br i1 %2242, label %2243, label %2258

; <label>:2243                                    ; preds = %2237
  %2244 = sext i32 %c.42 to i64
  %2245 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2244
  %2246 = load i32* %2245, align 4
  %2247 = ashr i32 %2246, 4
  %2248 = trunc i32 %2247 to i16
  %2249 = sext i32 %c.42 to i64
  %2250 = load i16* @width, align 2
  %2251 = zext i16 %2250 to i32
  %2252 = sdiv i32 %2251, 4
  %2253 = mul nsw i32 %2186, %2252
  %2254 = add nsw i32 %2253, %col.9
  %2255 = sext i32 %2254 to i64
  %2256 = getelementptr inbounds [3 x i16]* %2180, i64 %2255
  %2257 = getelementptr inbounds [3 x i16]* %2256, i32 0, i64 %2249
  store i16 %2248, i16* %2257, align 2
  br label %2289

; <label>:2258                                    ; preds = %2237
  %2259 = sext i32 %c.42 to i64
  %2260 = add nsw i32 %2186, 1
  %2261 = load i16* @width, align 2
  %2262 = zext i16 %2261 to i32
  %2263 = sdiv i32 %2262, 4
  %2264 = mul nsw i32 %2260, %2263
  %2265 = add nsw i32 %2264, %col.9
  %2266 = sext i32 %2265 to i64
  %2267 = getelementptr inbounds [3 x i16]* %2180, i64 %2266
  %2268 = getelementptr inbounds [3 x i16]* %2267, i32 0, i64 %2259
  %2269 = load i16* %2268, align 2
  %2270 = sext i16 %2269 to i32
  %2271 = mul nsw i32 %2270, 1840
  %2272 = sext i32 %c.42 to i64
  %2273 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2272
  %2274 = load i32* %2273, align 4
  %2275 = mul nsw i32 %2274, 141
  %2276 = add nsw i32 %2271, %2275
  %2277 = add nsw i32 %2276, 2048
  %2278 = ashr i32 %2277, 12
  %2279 = trunc i32 %2278 to i16
  %2280 = sext i32 %c.42 to i64
  %2281 = load i16* @width, align 2
  %2282 = zext i16 %2281 to i32
  %2283 = sdiv i32 %2282, 4
  %2284 = mul nsw i32 %2186, %2283
  %2285 = add nsw i32 %2284, %col.9
  %2286 = sext i32 %2285 to i64
  %2287 = getelementptr inbounds [3 x i16]* %2180, i64 %2286
  %2288 = getelementptr inbounds [3 x i16]* %2287, i32 0, i64 %2280
  store i16 %2279, i16* %2288, align 2
  br label %2289

; <label>:2289                                    ; preds = %2258, %2243
  br label %2290

; <label>:2290                                    ; preds = %2289
  %2291 = add nsw i32 %c.42, 1
  br label %2235

; <label>:2292                                    ; preds = %2235
  br label %2293

; <label>:2293                                    ; preds = %2292
  %2294 = add nsw i32 %col.9, 1
  br label %2189

; <label>:2295                                    ; preds = %2189
  br label %2185

; <label>:2296                                    ; preds = %2185
  br label %2297

; <label>:2297                                    ; preds = %2559, %2296
  %row.12 = phi i32 [ 0, %2296 ], [ %2560, %2559 ]
  %2298 = load i16* @height, align 2
  %2299 = zext i16 %2298 to i32
  %2300 = and i32 %2299, -4
  %2301 = icmp slt i32 %row.12, %2300
  br i1 %2301, label %2302, label %2561

; <label>:2302                                    ; preds = %2297
  %2303 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 2
  store i32 0, i32* %2303, align 4
  %2304 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 1
  store i32 0, i32* %2304, align 4
  %2305 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 0
  store i32 0, i32* %2305, align 4
  %2306 = and i32 %row.12, 3
  %2307 = icmp eq i32 %2306, 0
  br i1 %2307, label %2308, label %2352

; <label>:2308                                    ; preds = %2302
  %2309 = load i16* @width, align 2
  %2310 = zext i16 %2309 to i32
  %2311 = and i32 %2310, -4
  br label %2312

; <label>:2312                                    ; preds = %2350, %2308
  %col.10 = phi i32 [ %2311, %2308 ], [ %2313, %2350 ]
  %2313 = add nsw i32 %col.10, -1
  %2314 = icmp ne i32 %col.10, 0
  br i1 %2314, label %2315, label %2351

; <label>:2315                                    ; preds = %2312
  br label %2316

; <label>:2316                                    ; preds = %2348, %2315
  %c.43 = phi i32 [ 0, %2315 ], [ %2349, %2348 ]
  %2317 = icmp slt i32 %c.43, 3
  br i1 %2317, label %2318, label %2350

; <label>:2318                                    ; preds = %2316
  %2319 = sext i32 %c.43 to i64
  %2320 = sdiv i32 %row.12, 4
  %2321 = load i16* @width, align 2
  %2322 = zext i16 %2321 to i32
  %2323 = sdiv i32 %2322, 4
  %2324 = mul nsw i32 %2320, %2323
  %2325 = sdiv i32 %2313, 4
  %2326 = add nsw i32 %2324, %2325
  %2327 = sext i32 %2326 to i64
  %2328 = getelementptr inbounds [3 x i16]* %2180, i64 %2327
  %2329 = getelementptr inbounds [3 x i16]* %2328, i32 0, i64 %2319
  %2330 = load i16* %2329, align 2
  %2331 = sext i16 %2330 to i32
  %2332 = mul nsw i32 %2331, 1485
  %2333 = sext i32 %c.43 to i64
  %2334 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2333
  %2335 = load i32* %2334, align 4
  %2336 = mul nsw i32 %2335, 6707
  %2337 = add nsw i32 %2332, %2336
  %2338 = add nsw i32 %2337, 4096
  %2339 = ashr i32 %2338, 13
  %2340 = sext i32 %c.43 to i64
  %2341 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2340
  store i32 %2339, i32* %2341, align 4
  %2342 = sext i32 %c.43 to i64
  %2343 = sext i32 %2313 to i64
  %2344 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 0
  %2345 = load [3 x i32]** %2344, align 8
  %2346 = getelementptr inbounds [3 x i32]* %2345, i64 %2343
  %2347 = getelementptr inbounds [3 x i32]* %2346, i32 0, i64 %2342
  store i32 %2339, i32* %2347, align 4
  br label %2348

; <label>:2348                                    ; preds = %2318
  %2349 = add nsw i32 %c.43, 1
  br label %2316

; <label>:2350                                    ; preds = %2316
  br label %2312

; <label>:2351                                    ; preds = %2312
  br label %2352

; <label>:2352                                    ; preds = %2351, %2302
  %2353 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 2
  store i32 0, i32* %2353, align 4
  %2354 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 1
  store i32 0, i32* %2354, align 4
  %2355 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 0
  store i32 0, i32* %2355, align 4
  br label %2356

; <label>:2356                                    ; preds = %2391, %2352
  %col.11 = phi i32 [ 0, %2352 ], [ %2392, %2391 ]
  %2357 = load i16* @width, align 2
  %2358 = zext i16 %2357 to i32
  %2359 = and i32 %2358, -4
  %2360 = icmp slt i32 %col.11, %2359
  br i1 %2360, label %2361, label %2393

; <label>:2361                                    ; preds = %2356
  br label %2362

; <label>:2362                                    ; preds = %2388, %2361
  %c.44 = phi i32 [ 0, %2361 ], [ %2389, %2388 ]
  %2363 = icmp slt i32 %c.44, 3
  br i1 %2363, label %2364, label %2390

; <label>:2364                                    ; preds = %2362
  %2365 = sext i32 %c.44 to i64
  %2366 = sext i32 %col.11 to i64
  %2367 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 0
  %2368 = load [3 x i32]** %2367, align 8
  %2369 = getelementptr inbounds [3 x i32]* %2368, i64 %2366
  %2370 = getelementptr inbounds [3 x i32]* %2369, i32 0, i64 %2365
  %2371 = load i32* %2370, align 4
  %2372 = mul nsw i32 %2371, 1485
  %2373 = sext i32 %c.44 to i64
  %2374 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2373
  %2375 = load i32* %2374, align 4
  %2376 = mul nsw i32 %2375, 6707
  %2377 = add nsw i32 %2372, %2376
  %2378 = add nsw i32 %2377, 4096
  %2379 = ashr i32 %2378, 13
  %2380 = sext i32 %c.44 to i64
  %2381 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2380
  store i32 %2379, i32* %2381, align 4
  %2382 = sext i32 %c.44 to i64
  %2383 = sext i32 %col.11 to i64
  %2384 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %2385 = load [3 x i32]** %2384, align 8
  %2386 = getelementptr inbounds [3 x i32]* %2385, i64 %2383
  %2387 = getelementptr inbounds [3 x i32]* %2386, i32 0, i64 %2382
  store i32 %2379, i32* %2387, align 4
  br label %2388

; <label>:2388                                    ; preds = %2364
  %2389 = add nsw i32 %c.44, 1
  br label %2362

; <label>:2390                                    ; preds = %2362
  br label %2391

; <label>:2391                                    ; preds = %2390
  %2392 = add nsw i32 %col.11, 1
  br label %2356

; <label>:2393                                    ; preds = %2356
  %2394 = icmp eq i32 %row.12, 0
  br i1 %2394, label %2395, label %2405

; <label>:2395                                    ; preds = %2393
  %2396 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %2397 = load [3 x i32]** %2396, align 8
  %2398 = bitcast [3 x i32]* %2397 to i8*
  %2399 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %2400 = load [3 x i32]** %2399, align 8
  %2401 = bitcast [3 x i32]* %2400 to i8*
  %2402 = load i16* @width, align 2
  %2403 = zext i16 %2402 to i64
  %2404 = mul i64 12, %2403
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2398, i8* %2401, i64 %2404, i32 4, i1 false)
  br label %2446

; <label>:2405                                    ; preds = %2393
  br label %2406

; <label>:2406                                    ; preds = %2443, %2405
  %col.12 = phi i32 [ 0, %2405 ], [ %2444, %2443 ]
  %2407 = load i16* @width, align 2
  %2408 = zext i16 %2407 to i32
  %2409 = and i32 %2408, -4
  %2410 = icmp slt i32 %col.12, %2409
  br i1 %2410, label %2411, label %2445

; <label>:2411                                    ; preds = %2406
  br label %2412

; <label>:2412                                    ; preds = %2440, %2411
  %c.45 = phi i32 [ 0, %2411 ], [ %2441, %2440 ]
  %2413 = icmp slt i32 %c.45, 3
  br i1 %2413, label %2414, label %2442

; <label>:2414                                    ; preds = %2412
  %2415 = sext i32 %c.45 to i64
  %2416 = sext i32 %col.12 to i64
  %2417 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %2418 = load [3 x i32]** %2417, align 8
  %2419 = getelementptr inbounds [3 x i32]* %2418, i64 %2416
  %2420 = getelementptr inbounds [3 x i32]* %2419, i32 0, i64 %2415
  %2421 = load i32* %2420, align 4
  %2422 = mul nsw i32 %2421, 6707
  %2423 = sext i32 %c.45 to i64
  %2424 = sext i32 %col.12 to i64
  %2425 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %2426 = load [3 x i32]** %2425, align 8
  %2427 = getelementptr inbounds [3 x i32]* %2426, i64 %2424
  %2428 = getelementptr inbounds [3 x i32]* %2427, i32 0, i64 %2423
  %2429 = load i32* %2428, align 4
  %2430 = mul nsw i32 %2429, 1485
  %2431 = add nsw i32 %2422, %2430
  %2432 = add nsw i32 %2431, 4096
  %2433 = ashr i32 %2432, 13
  %2434 = sext i32 %c.45 to i64
  %2435 = sext i32 %col.12 to i64
  %2436 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %2437 = load [3 x i32]** %2436, align 8
  %2438 = getelementptr inbounds [3 x i32]* %2437, i64 %2435
  %2439 = getelementptr inbounds [3 x i32]* %2438, i32 0, i64 %2434
  store i32 %2433, i32* %2439, align 4
  br label %2440

; <label>:2440                                    ; preds = %2414
  %2441 = add nsw i32 %c.45, 1
  br label %2412

; <label>:2442                                    ; preds = %2412
  br label %2443

; <label>:2443                                    ; preds = %2442
  %2444 = add nsw i32 %col.12, 1
  br label %2406

; <label>:2445                                    ; preds = %2406
  br label %2446

; <label>:2446                                    ; preds = %2445, %2395
  br label %2447

; <label>:2447                                    ; preds = %2556, %2446
  %col.13 = phi i32 [ 0, %2446 ], [ %2557, %2556 ]
  %2448 = load i16* @width, align 2
  %2449 = zext i16 %2448 to i32
  %2450 = and i32 %2449, -4
  %2451 = icmp slt i32 %col.13, %2450
  br i1 %2451, label %2452, label %2558

; <label>:2452                                    ; preds = %2447
  br label %2453

; <label>:2453                                    ; preds = %2476, %2452
  %j.6 = phi i32 [ 30, %2452 ], [ %2475, %2476 ]
  %i.19 = phi i32 [ 30, %2452 ], [ %2463, %2476 ]
  %c.46 = phi i32 [ 0, %2452 ], [ %2477, %2476 ]
  %2454 = icmp slt i32 %c.46, 3
  br i1 %2454, label %2455, label %2478

; <label>:2455                                    ; preds = %2453
  %2456 = sext i32 %c.46 to i64
  %2457 = sext i32 %col.13 to i64
  %2458 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %2459 = load [3 x i32]** %2458, align 8
  %2460 = getelementptr inbounds [3 x i32]* %2459, i64 %2457
  %2461 = getelementptr inbounds [3 x i32]* %2460, i32 0, i64 %2456
  %2462 = load i32* %2461, align 4
  %2463 = add nsw i32 %i.19, %2462
  %2464 = sext i32 %c.46 to i64
  %2465 = load i16* @width, align 2
  %2466 = zext i16 %2465 to i32
  %2467 = mul nsw i32 %row.12, %2466
  %2468 = add nsw i32 %2467, %col.13
  %2469 = sext i32 %2468 to i64
  %2470 = load [4 x i16]** @image, align 8
  %2471 = getelementptr inbounds [4 x i16]* %2470, i64 %2469
  %2472 = getelementptr inbounds [4 x i16]* %2471, i32 0, i64 %2464
  %2473 = load i16* %2472, align 2
  %2474 = sext i16 %2473 to i32
  %2475 = add nsw i32 %j.6, %2474
  br label %2476

; <label>:2476                                    ; preds = %2455
  %2477 = add nsw i32 %c.46, 1
  br label %2453

; <label>:2478                                    ; preds = %2453
  %2479 = shl i32 %j.6, 16
  %2480 = sdiv i32 %2479, %i.19
  br label %2481

; <label>:2481                                    ; preds = %2517, %2478
  %sum.4 = phi i32 [ 0, %2478 ], [ %2516, %2517 ]
  %c.47 = phi i32 [ 0, %2478 ], [ %2518, %2517 ]
  %2482 = icmp slt i32 %c.47, 3
  br i1 %2482, label %2483, label %2519

; <label>:2483                                    ; preds = %2481
  %2484 = add nsw i32 %c.47, 3
  %2485 = sext i32 %2484 to i64
  %2486 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %2485
  %2487 = load i16** %2486, align 8
  %2488 = sext i32 %c.47 to i64
  %2489 = sext i32 %col.13 to i64
  %2490 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %2491 = load [3 x i32]** %2490, align 8
  %2492 = getelementptr inbounds [3 x i32]* %2491, i64 %2489
  %2493 = getelementptr inbounds [3 x i32]* %2492, i32 0, i64 %2488
  %2494 = load i32* %2493, align 4
  %2495 = mul nsw i32 %2494, %2480
  %2496 = add nsw i32 %2495, 32768
  %2497 = ashr i32 %2496, 16
  %2498 = sext i32 %c.47 to i64
  %2499 = load i16* @width, align 2
  %2500 = zext i16 %2499 to i32
  %2501 = mul nsw i32 %row.12, %2500
  %2502 = add nsw i32 %2501, %col.13
  %2503 = sext i32 %2502 to i64
  %2504 = load [4 x i16]** @image, align 8
  %2505 = getelementptr inbounds [4 x i16]* %2504, i64 %2503
  %2506 = getelementptr inbounds [4 x i16]* %2505, i32 0, i64 %2498
  %2507 = load i16* %2506, align 2
  %2508 = sext i16 %2507 to i32
  %2509 = sub nsw i32 %2497, %2508
  %2510 = call i32 @foveon_apply_curve(i16* %2487, i32 %2509)
  %2511 = sext i32 %c.47 to i64
  %2512 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2511
  store i32 %2510, i32* %2512, align 4
  %2513 = sext i32 %c.47 to i64
  %2514 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2513
  %2515 = load i32* %2514, align 4
  %2516 = add nsw i32 %sum.4, %2515
  br label %2517

; <label>:2517                                    ; preds = %2483
  %2518 = add nsw i32 %c.47, 1
  br label %2481

; <label>:2519                                    ; preds = %2481
  %2520 = ashr i32 %sum.4, 3
  br label %2521

; <label>:2521                                    ; preds = %2553, %2519
  %c.48 = phi i32 [ 0, %2519 ], [ %2554, %2553 ]
  %2522 = icmp slt i32 %c.48, 3
  br i1 %2522, label %2523, label %2555

; <label>:2523                                    ; preds = %2521
  %2524 = sext i32 %c.48 to i64
  %2525 = load i16* @width, align 2
  %2526 = zext i16 %2525 to i32
  %2527 = mul nsw i32 %row.12, %2526
  %2528 = add nsw i32 %2527, %col.13
  %2529 = sext i32 %2528 to i64
  %2530 = load [4 x i16]** @image, align 8
  %2531 = getelementptr inbounds [4 x i16]* %2530, i64 %2529
  %2532 = getelementptr inbounds [4 x i16]* %2531, i32 0, i64 %2524
  %2533 = load i16* %2532, align 2
  %2534 = sext i16 %2533 to i32
  %2535 = sext i32 %c.48 to i64
  %2536 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2535
  %2537 = load i32* %2536, align 4
  %2538 = add nsw i32 %2534, %2537
  %2539 = sub nsw i32 %2538, %2520
  %2540 = icmp slt i32 %2539, 0
  br i1 %2540, label %2541, label %2542

; <label>:2541                                    ; preds = %2523
  br label %2542

; <label>:2542                                    ; preds = %2541, %2523
  %i.20 = phi i32 [ 0, %2541 ], [ %2539, %2523 ]
  %2543 = trunc i32 %i.20 to i16
  %2544 = sext i32 %c.48 to i64
  %2545 = load i16* @width, align 2
  %2546 = zext i16 %2545 to i32
  %2547 = mul nsw i32 %row.12, %2546
  %2548 = add nsw i32 %2547, %col.13
  %2549 = sext i32 %2548 to i64
  %2550 = load [4 x i16]** @image, align 8
  %2551 = getelementptr inbounds [4 x i16]* %2550, i64 %2549
  %2552 = getelementptr inbounds [4 x i16]* %2551, i32 0, i64 %2544
  store i16 %2543, i16* %2552, align 2
  br label %2553

; <label>:2553                                    ; preds = %2542
  %2554 = add nsw i32 %c.48, 1
  br label %2521

; <label>:2555                                    ; preds = %2521
  br label %2556

; <label>:2556                                    ; preds = %2555
  %2557 = add nsw i32 %col.13, 1
  br label %2447

; <label>:2558                                    ; preds = %2447
  br label %2559

; <label>:2559                                    ; preds = %2558
  %2560 = add nsw i32 %row.12, 1
  br label %2297

; <label>:2561                                    ; preds = %2297
  %2562 = bitcast [3 x i16]* %2180 to i8*
  call void @free(i8* %2562) #4
  %2563 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  %2564 = load [3 x i32]** %2563, align 8
  %2565 = bitcast [3 x i32]* %2564 to i8*
  call void @free(i8* %2565) #4
  br label %2566

; <label>:2566                                    ; preds = %2573, %2561
  %i.21 = phi i32 [ 0, %2561 ], [ %2574, %2573 ]
  %2567 = icmp slt i32 %i.21, 8
  br i1 %2567, label %2568, label %2575

; <label>:2568                                    ; preds = %2566
  %2569 = sext i32 %i.21 to i64
  %2570 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %2569
  %2571 = load i16** %2570, align 8
  %2572 = bitcast i16* %2571 to i8*
  call void @free(i8* %2572) #4
  br label %2573

; <label>:2573                                    ; preds = %2568
  %2574 = add nsw i32 %i.21, 1
  br label %2566

; <label>:2575                                    ; preds = %2566
  %2576 = getelementptr inbounds [4 x i32]* %keep, i32 0, i64 1
  %2577 = load i32* %2576, align 4
  %2578 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 1
  %2579 = load i32* %2578, align 4
  %2580 = sub nsw i32 %2579, %2577
  store i32 %2580, i32* %2578, align 4
  %2581 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 3
  %2582 = load i32* %2581, align 4
  %2583 = sub nsw i32 %2582, 2
  store i32 %2583, i32* %2581, align 4
  %2584 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 2
  %2585 = load i32* %2584, align 4
  %2586 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 0
  %2587 = load i32* %2586, align 4
  %2588 = sub nsw i32 %2585, %2587
  br label %2589

; <label>:2589                                    ; preds = %2617, %2575
  %row.13 = phi i32 [ 0, %2575 ], [ %2618, %2617 ]
  %2590 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 3
  %2591 = load i32* %2590, align 4
  %2592 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 1
  %2593 = load i32* %2592, align 4
  %2594 = sub nsw i32 %2591, %2593
  %2595 = icmp slt i32 %row.13, %2594
  br i1 %2595, label %2596, label %2619

; <label>:2596                                    ; preds = %2589
  %2597 = mul nsw i32 %row.13, %2588
  %2598 = sext i32 %2597 to i64
  %2599 = load [4 x i16]** @image, align 8
  %2600 = getelementptr inbounds [4 x i16]* %2599, i64 %2598
  %2601 = bitcast [4 x i16]* %2600 to i8*
  %2602 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 1
  %2603 = load i32* %2602, align 4
  %2604 = add nsw i32 %row.13, %2603
  %2605 = load i16* @width, align 2
  %2606 = zext i16 %2605 to i32
  %2607 = mul nsw i32 %2604, %2606
  %2608 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 0
  %2609 = load i32* %2608, align 4
  %2610 = add nsw i32 %2607, %2609
  %2611 = sext i32 %2610 to i64
  %2612 = load [4 x i16]** @image, align 8
  %2613 = getelementptr inbounds [4 x i16]* %2612, i64 %2611
  %2614 = bitcast [4 x i16]* %2613 to i8*
  %2615 = sext i32 %2588 to i64
  %2616 = mul i64 %2615, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2601, i8* %2614, i64 %2616, i32 2, i1 false)
  br label %2617

; <label>:2617                                    ; preds = %2596
  %2618 = add nsw i32 %row.13, 1
  br label %2589

; <label>:2619                                    ; preds = %2589
  %2620 = trunc i32 %2588 to i16
  store i16 %2620, i16* @width, align 2
  %2621 = trunc i32 %row.13 to i16
  store i16 %2621, i16* @height, align 2
  br label %2622

; <label>:2622                                    ; preds = %2619, %492, %138
  ret void
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind
declare double @exp(double) #3

; Function Attrs: nounwind readnone
declare double @floor(double) #5

; Function Attrs: nounwind uwtable
define void @bad_pixels(i8* %fname) #0 {
  %line = alloca [128 x i8], align 16
  %time = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %1 = load i32* @filters, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  br label %209

; <label>:4                                       ; preds = %0
  %5 = icmp ne i8* %fname, null
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %4
  %7 = call %struct._IO_FILE* @fopen(i8* %fname, i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0))
  br label %59

; <label>:8                                       ; preds = %4
  br label %9

; <label>:9                                       ; preds = %26, %8
  %len.0 = phi i32 [ 32, %8 ], [ %27, %26 ]
  %10 = sext i32 %len.0 to i64
  %11 = call noalias i8* @malloc(i64 %10) #4
  %12 = icmp ne i8* %11, null
  br i1 %12, label %14, label %13

; <label>:13                                      ; preds = %9
  br label %209

; <label>:14                                      ; preds = %9
  %15 = sub nsw i32 %len.0, 16
  %16 = sext i32 %15 to i64
  %17 = call i8* @getcwd(i8* %11, i64 %16) #4
  %18 = icmp ne i8* %17, null
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %14
  br label %28

; <label>:20                                      ; preds = %14
  call void @free(i8* %11) #4
  %21 = call i32* @__errno_location() #9
  %22 = load i32* %21, align 4
  %23 = icmp ne i32 %22, 34
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %20
  br label %209

; <label>:25                                      ; preds = %20
  br label %26

; <label>:26                                      ; preds = %25
  %27 = mul nsw i32 %len.0, 2
  br label %9

; <label>:28                                      ; preds = %19
  %29 = call i64 @strlen(i8* %11) #10
  %30 = getelementptr inbounds i8* %11, i64 %29
  %31 = getelementptr inbounds i8* %30, i64 -1
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 47
  br i1 %34, label %35, label %37

; <label>:35                                      ; preds = %28
  %36 = getelementptr inbounds i8* %30, i32 -1
  br label %37

; <label>:37                                      ; preds = %35, %28
  %cp.0 = phi i8* [ %36, %35 ], [ %30, %28 ]
  br label %38

; <label>:38                                      ; preds = %57, %37
  %cp.1 = phi i8* [ %cp.0, %37 ], [ %52, %57 ]
  %fp.0 = phi %struct._IO_FILE* [ null, %37 ], [ %44, %57 ]
  %39 = load i8* %11, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 47
  br i1 %41, label %42, label %58

; <label>:42                                      ; preds = %38
  %43 = call i8* @strcpy(i8* %cp.1, i8* getelementptr inbounds ([12 x i8]* @.str60, i32 0, i32 0)) #4
  %44 = call %struct._IO_FILE* @fopen(i8* %11, i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0))
  %45 = icmp ne %struct._IO_FILE* %44, null
  br i1 %45, label %46, label %47

; <label>:46                                      ; preds = %42
  br label %58

; <label>:47                                      ; preds = %42
  %48 = icmp eq i8* %cp.1, %11
  br i1 %48, label %49, label %50

; <label>:49                                      ; preds = %47
  br label %58

; <label>:50                                      ; preds = %47
  br label %51

; <label>:51                                      ; preds = %56, %50
  %cp.2 = phi i8* [ %cp.1, %50 ], [ %52, %56 ]
  %52 = getelementptr inbounds i8* %cp.2, i32 -1
  %53 = load i8* %52, align 1
  %54 = sext i8 %53 to i32
  %55 = icmp ne i32 %54, 47
  br i1 %55, label %56, label %57

; <label>:56                                      ; preds = %51
  br label %51

; <label>:57                                      ; preds = %51
  br label %38

; <label>:58                                      ; preds = %49, %46, %38
  %fp.1 = phi %struct._IO_FILE* [ %44, %46 ], [ %44, %49 ], [ %fp.0, %38 ]
  call void @free(i8* %11) #4
  br label %59

; <label>:59                                      ; preds = %58, %6
  %fp.2 = phi %struct._IO_FILE* [ %7, %6 ], [ %fp.1, %58 ]
  %60 = icmp ne %struct._IO_FILE* %fp.2, null
  br i1 %60, label %62, label %61

; <label>:61                                      ; preds = %59
  br label %209

; <label>:62                                      ; preds = %59
  br label %63

; <label>:63                                      ; preds = %201, %93, %87, %76, %62
  %fixed.0 = phi i32 [ 0, %62 ], [ %fixed.0, %76 ], [ %fixed.0, %87 ], [ %fixed.0, %93 ], [ %fixed.1, %201 ]
  %64 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %65 = call i8* @fgets(i8* %64, i32 128, %struct._IO_FILE* %fp.2)
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %202

; <label>:67                                      ; preds = %63
  %68 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %69 = call i8* @strchr(i8* %68, i32 35) #10
  %70 = icmp ne i8* %69, null
  br i1 %70, label %71, label %72

; <label>:71                                      ; preds = %67
  store i8 0, i8* %69, align 1
  br label %72

; <label>:72                                      ; preds = %71, %67
  %73 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %74 = call i32 (i8*, i8*, ...)* @sscanf(i8* %73, i8* getelementptr inbounds ([9 x i8]* @.str61, i32 0, i32 0), i32* %col, i32* %row, i32* %time) #4
  %75 = icmp ne i32 %74, 3
  br i1 %75, label %76, label %77

; <label>:76                                      ; preds = %72
  br label %63

; <label>:77                                      ; preds = %72
  %78 = load i32* %col, align 4
  %79 = load i16* @width, align 2
  %80 = zext i16 %79 to i32
  %81 = icmp uge i32 %78, %80
  br i1 %81, label %87, label %82

; <label>:82                                      ; preds = %77
  %83 = load i32* %row, align 4
  %84 = load i16* @height, align 2
  %85 = zext i16 %84 to i32
  %86 = icmp uge i32 %83, %85
  br i1 %86, label %87, label %88

; <label>:87                                      ; preds = %82, %77
  br label %63

; <label>:88                                      ; preds = %82
  %89 = load i32* %time, align 4
  %90 = sext i32 %89 to i64
  %91 = load i64* @timestamp, align 8
  %92 = icmp sgt i64 %90, %91
  br i1 %92, label %93, label %94

; <label>:93                                      ; preds = %88
  br label %63

; <label>:94                                      ; preds = %88
  br label %95

; <label>:95                                      ; preds = %163, %94
  %n.0 = phi i32 [ 0, %94 ], [ %n.1, %163 ]
  %tot.0 = phi i32 [ 0, %94 ], [ %tot.1, %163 ]
  %rad.0 = phi i32 [ 1, %94 ], [ %164, %163 ]
  %96 = icmp slt i32 %rad.0, 3
  br i1 %96, label %97, label %99

; <label>:97                                      ; preds = %95
  %98 = icmp eq i32 %n.0, 0
  br label %99

; <label>:99                                      ; preds = %97, %95
  %100 = phi i1 [ false, %95 ], [ %98, %97 ]
  br i1 %100, label %101, label %165

; <label>:101                                     ; preds = %99
  %102 = load i32* %row, align 4
  %103 = sub nsw i32 %102, %rad.0
  br label %104

; <label>:104                                     ; preds = %160, %101
  %n.1 = phi i32 [ %n.0, %101 ], [ %n.2, %160 ]
  %tot.1 = phi i32 [ %tot.0, %101 ], [ %tot.2, %160 ]
  %r.0 = phi i32 [ %103, %101 ], [ %161, %160 ]
  %105 = load i32* %row, align 4
  %106 = add nsw i32 %105, %rad.0
  %107 = icmp sle i32 %r.0, %106
  br i1 %107, label %108, label %162

; <label>:108                                     ; preds = %104
  %109 = load i32* %col, align 4
  %110 = sub nsw i32 %109, %rad.0
  br label %111

; <label>:111                                     ; preds = %157, %108
  %n.2 = phi i32 [ %n.1, %108 ], [ %n.3, %157 ]
  %tot.2 = phi i32 [ %tot.1, %108 ], [ %tot.3, %157 ]
  %c.0 = phi i32 [ %110, %108 ], [ %158, %157 ]
  %112 = load i32* %col, align 4
  %113 = add nsw i32 %112, %rad.0
  %114 = icmp sle i32 %c.0, %113
  br i1 %114, label %115, label %159

; <label>:115                                     ; preds = %111
  %116 = load i16* @height, align 2
  %117 = zext i16 %116 to i32
  %118 = icmp ult i32 %r.0, %117
  br i1 %118, label %119, label %156

; <label>:119                                     ; preds = %115
  %120 = load i16* @width, align 2
  %121 = zext i16 %120 to i32
  %122 = icmp ult i32 %c.0, %121
  br i1 %122, label %123, label %156

; <label>:123                                     ; preds = %119
  %124 = load i32* %row, align 4
  %125 = icmp ne i32 %r.0, %124
  br i1 %125, label %129, label %126

; <label>:126                                     ; preds = %123
  %127 = load i32* %col, align 4
  %128 = icmp ne i32 %c.0, %127
  br i1 %128, label %129, label %156

; <label>:129                                     ; preds = %126, %123
  %130 = call i32 @fc(i32 %r.0, i32 %c.0)
  %131 = load i32* %row, align 4
  %132 = load i32* %col, align 4
  %133 = call i32 @fc(i32 %131, i32 %132)
  %134 = icmp eq i32 %130, %133
  br i1 %134, label %135, label %156

; <label>:135                                     ; preds = %129
  %136 = call i32 @fc(i32 %r.0, i32 %c.0)
  %137 = sext i32 %136 to i64
  %138 = load i16* @shrink, align 2
  %139 = zext i16 %138 to i32
  %140 = ashr i32 %r.0, %139
  %141 = load i16* @iwidth, align 2
  %142 = zext i16 %141 to i32
  %143 = mul nsw i32 %140, %142
  %144 = load i16* @shrink, align 2
  %145 = zext i16 %144 to i32
  %146 = ashr i32 %c.0, %145
  %147 = add nsw i32 %143, %146
  %148 = sext i32 %147 to i64
  %149 = load [4 x i16]** @image, align 8
  %150 = getelementptr inbounds [4 x i16]* %149, i64 %148
  %151 = getelementptr inbounds [4 x i16]* %150, i32 0, i64 %137
  %152 = load i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = add nsw i32 %tot.2, %153
  %155 = add nsw i32 %n.2, 1
  br label %156

; <label>:156                                     ; preds = %135, %129, %126, %119, %115
  %n.3 = phi i32 [ %155, %135 ], [ %n.2, %129 ], [ %n.2, %126 ], [ %n.2, %119 ], [ %n.2, %115 ]
  %tot.3 = phi i32 [ %154, %135 ], [ %tot.2, %129 ], [ %tot.2, %126 ], [ %tot.2, %119 ], [ %tot.2, %115 ]
  br label %157

; <label>:157                                     ; preds = %156
  %158 = add nsw i32 %c.0, 1
  br label %111

; <label>:159                                     ; preds = %111
  br label %160

; <label>:160                                     ; preds = %159
  %161 = add nsw i32 %r.0, 1
  br label %104

; <label>:162                                     ; preds = %104
  br label %163

; <label>:163                                     ; preds = %162
  %164 = add nsw i32 %rad.0, 1
  br label %95

; <label>:165                                     ; preds = %99
  %166 = sdiv i32 %tot.0, %n.0
  %167 = trunc i32 %166 to i16
  %168 = load i32* %row, align 4
  %169 = load i32* %col, align 4
  %170 = call i32 @fc(i32 %168, i32 %169)
  %171 = sext i32 %170 to i64
  %172 = load i32* %row, align 4
  %173 = load i16* @shrink, align 2
  %174 = zext i16 %173 to i32
  %175 = ashr i32 %172, %174
  %176 = load i16* @iwidth, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nsw i32 %175, %177
  %179 = load i32* %col, align 4
  %180 = load i16* @shrink, align 2
  %181 = zext i16 %180 to i32
  %182 = ashr i32 %179, %181
  %183 = add nsw i32 %178, %182
  %184 = sext i32 %183 to i64
  %185 = load [4 x i16]** @image, align 8
  %186 = getelementptr inbounds [4 x i16]* %185, i64 %184
  %187 = getelementptr inbounds [4 x i16]* %186, i32 0, i64 %171
  store i16 %167, i16* %187, align 2
  %188 = load i32* @verbose, align 4
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %190, label %201

; <label>:190                                     ; preds = %165
  %191 = add nsw i32 %fixed.0, 1
  %192 = icmp ne i32 %fixed.0, 0
  br i1 %192, label %196, label %193

; <label>:193                                     ; preds = %190
  %194 = load %struct._IO_FILE** @stderr, align 8
  %195 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %194, i8* getelementptr inbounds ([22 x i8]* @.str62, i32 0, i32 0))
  br label %196

; <label>:196                                     ; preds = %193, %190
  %197 = load %struct._IO_FILE** @stderr, align 8
  %198 = load i32* %col, align 4
  %199 = load i32* %row, align 4
  %200 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %197, i8* getelementptr inbounds ([7 x i8]* @.str63, i32 0, i32 0), i32 %198, i32 %199)
  br label %201

; <label>:201                                     ; preds = %196, %165
  %fixed.1 = phi i32 [ %191, %196 ], [ %fixed.0, %165 ]
  br label %63

; <label>:202                                     ; preds = %63
  %203 = icmp ne i32 %fixed.0, 0
  br i1 %203, label %204, label %207

; <label>:204                                     ; preds = %202
  %205 = load %struct._IO_FILE** @stderr, align 8
  %206 = call i32 @fputc(i32 10, %struct._IO_FILE* %205)
  br label %207

; <label>:207                                     ; preds = %204, %202
  %208 = call i32 @fclose(%struct._IO_FILE* %fp.2)
  br label %209

; <label>:209                                     ; preds = %207, %61, %24, %13, %3
  ret void
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @getcwd(i8*, i64) #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #5

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #6

declare i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #6

declare i32 @fclose(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @subtract(i8* %fname) #0 {
  %dim = alloca [3 x i32], align 4
  %1 = bitcast [3 x i32]* %dim to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 12, i32 4, i1 false)
  %2 = call %struct._IO_FILE* @fopen(i8* %fname, i8* getelementptr inbounds ([3 x i8]* @.str64, i32 0, i32 0))
  %3 = icmp ne %struct._IO_FILE* %2, null
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  call void @perror(i8* %fname)
  br label %223

; <label>:5                                       ; preds = %0
  %6 = call i32 @getc_unlocked(%struct._IO_FILE* %2)
  %7 = icmp ne i32 %6, 80
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %5
  %9 = call i32 @getc_unlocked(%struct._IO_FILE* %2)
  %10 = icmp ne i32 %9, 53
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %8, %5
  br label %12

; <label>:12                                      ; preds = %11, %8
  %error.0 = phi i32 [ 1, %11 ], [ 0, %8 ]
  br label %13

; <label>:13                                      ; preds = %75, %30, %12
  %c.0 = phi i32 [ undef, %12 ], [ %c.1, %30 ], [ %c.1, %75 ]
  %nd.0 = phi i32 [ 0, %12 ], [ %nd.0, %30 ], [ %nd.3, %75 ]
  %error.1 = phi i32 [ %error.0, %12 ], [ %error.1, %30 ], [ %error.4, %75 ]
  %number.0 = phi i32 [ 0, %12 ], [ %number.0, %30 ], [ %number.4, %75 ]
  %comment.0 = phi i32 [ 0, %12 ], [ %comment.2, %30 ], [ %comment.2, %75 ]
  %14 = icmp ne i32 %error.1, 0
  br i1 %14, label %20, label %15

; <label>:15                                      ; preds = %13
  %16 = icmp slt i32 %nd.0, 3
  br i1 %16, label %17, label %20

; <label>:17                                      ; preds = %15
  %18 = call i32 @getc_unlocked(%struct._IO_FILE* %2)
  %19 = icmp ne i32 %18, -1
  br label %20

; <label>:20                                      ; preds = %17, %15, %13
  %c.1 = phi i32 [ %c.0, %13 ], [ %18, %17 ], [ %c.0, %15 ]
  %21 = phi i1 [ false, %15 ], [ false, %13 ], [ %19, %17 ]
  br i1 %21, label %22, label %76

; <label>:22                                      ; preds = %20
  %23 = icmp eq i32 %c.1, 35
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %22
  br label %25

; <label>:25                                      ; preds = %24, %22
  %comment.1 = phi i32 [ 1, %24 ], [ %comment.0, %22 ]
  %26 = icmp eq i32 %c.1, 10
  br i1 %26, label %27, label %28

; <label>:27                                      ; preds = %25
  br label %28

; <label>:28                                      ; preds = %27, %25
  %comment.2 = phi i32 [ 0, %27 ], [ %comment.1, %25 ]
  %29 = icmp ne i32 %comment.2, 0
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %28
  br label %13

; <label>:31                                      ; preds = %28
  %32 = sext i32 %c.1 to i64
  %33 = call i16** @__ctype_b_loc() #9
  %34 = load i16** %33, align 8
  %35 = getelementptr inbounds i16* %34, i64 %32
  %36 = load i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, 2048
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %31
  br label %41

; <label>:41                                      ; preds = %40, %31
  %number.1 = phi i32 [ 1, %40 ], [ %number.0, %31 ]
  %42 = icmp ne i32 %number.1, 0
  br i1 %42, label %43, label %75

; <label>:43                                      ; preds = %41
  %44 = sext i32 %c.1 to i64
  %45 = call i16** @__ctype_b_loc() #9
  %46 = load i16** %45, align 8
  %47 = getelementptr inbounds i16* %46, i64 %44
  %48 = load i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = and i32 %49, 2048
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %61

; <label>:52                                      ; preds = %43
  %53 = sext i32 %nd.0 to i64
  %54 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 %53
  %55 = load i32* %54, align 4
  %56 = mul nsw i32 %55, 10
  %57 = add nsw i32 %56, %c.1
  %58 = sub nsw i32 %57, 48
  %59 = sext i32 %nd.0 to i64
  %60 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 %59
  store i32 %58, i32* %60, align 4
  br label %74

; <label>:61                                      ; preds = %43
  %62 = sext i32 %c.1 to i64
  %63 = call i16** @__ctype_b_loc() #9
  %64 = load i16** %63, align 8
  %65 = getelementptr inbounds i16* %64, i64 %62
  %66 = load i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, 8192
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %72

; <label>:70                                      ; preds = %61
  %71 = add nsw i32 %nd.0, 1
  br label %73

; <label>:72                                      ; preds = %61
  br label %73

; <label>:73                                      ; preds = %72, %70
  %nd.1 = phi i32 [ %71, %70 ], [ %nd.0, %72 ]
  %error.2 = phi i32 [ %error.1, %70 ], [ 1, %72 ]
  %number.2 = phi i32 [ 0, %70 ], [ %number.1, %72 ]
  br label %74

; <label>:74                                      ; preds = %73, %52
  %nd.2 = phi i32 [ %nd.0, %52 ], [ %nd.1, %73 ]
  %error.3 = phi i32 [ %error.1, %52 ], [ %error.2, %73 ]
  %number.3 = phi i32 [ %number.1, %52 ], [ %number.2, %73 ]
  br label %75

; <label>:75                                      ; preds = %74, %41
  %nd.3 = phi i32 [ %nd.2, %74 ], [ %nd.0, %41 ]
  %error.4 = phi i32 [ %error.3, %74 ], [ %error.1, %41 ]
  %number.4 = phi i32 [ %number.3, %74 ], [ %number.1, %41 ]
  br label %13

; <label>:76                                      ; preds = %20
  %77 = icmp ne i32 %error.1, 0
  br i1 %77, label %80, label %78

; <label>:78                                      ; preds = %76
  %79 = icmp slt i32 %nd.0, 3
  br i1 %79, label %80, label %84

; <label>:80                                      ; preds = %78, %76
  %81 = load %struct._IO_FILE** @stderr, align 8
  %82 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([29 x i8]* @.str65, i32 0, i32 0), i8* %fname)
  %83 = call i32 @fclose(%struct._IO_FILE* %2)
  br label %223

; <label>:84                                      ; preds = %78
  %85 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 0
  %86 = load i32* %85, align 4
  %87 = load i16* @width, align 2
  %88 = zext i16 %87 to i32
  %89 = icmp ne i32 %86, %88
  br i1 %89, label %100, label %90

; <label>:90                                      ; preds = %84
  %91 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %92 = load i32* %91, align 4
  %93 = load i16* @height, align 2
  %94 = zext i16 %93 to i32
  %95 = icmp ne i32 %92, %94
  br i1 %95, label %100, label %96

; <label>:96                                      ; preds = %90
  %97 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 2
  %98 = load i32* %97, align 4
  %99 = icmp ne i32 %98, 65535
  br i1 %99, label %100, label %104

; <label>:100                                     ; preds = %96, %90, %84
  %101 = load %struct._IO_FILE** @stderr, align 8
  %102 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([30 x i8]* @.str66, i32 0, i32 0), i8* %fname)
  %103 = call i32 @fclose(%struct._IO_FILE* %2)
  br label %223

; <label>:104                                     ; preds = %96
  br label %105

; <label>:105                                     ; preds = %104
  %106 = load i16* @width, align 2
  %107 = zext i16 %106 to i64
  %108 = call noalias i8* @calloc(i64 %107, i64 2) #4
  %109 = bitcast i8* %108 to i16*
  %110 = bitcast i16* %109 to i8*
  call void @merror(i8* %110, i8* getelementptr inbounds ([11 x i8]* @.str67, i32 0, i32 0))
  br label %111

; <label>:111                                     ; preds = %219, %105
  %row.0 = phi i32 [ 0, %105 ], [ %220, %219 ]
  %112 = load i16* @height, align 2
  %113 = zext i16 %112 to i32
  %114 = icmp slt i32 %row.0, %113
  br i1 %114, label %115, label %221

; <label>:115                                     ; preds = %111
  %116 = bitcast i16* %109 to i8*
  %117 = load i16* @width, align 2
  %118 = zext i16 %117 to i64
  %119 = call i64 @fread(i8* %116, i64 2, i64 %118, %struct._IO_FILE* %2)
  br label %120

; <label>:120                                     ; preds = %216, %115
  %col.0 = phi i32 [ 0, %115 ], [ %217, %216 ]
  %121 = load i16* @width, align 2
  %122 = zext i16 %121 to i32
  %123 = icmp slt i32 %col.0, %122
  br i1 %123, label %124, label %218

; <label>:124                                     ; preds = %120
  %125 = load i32* @filters, align 4
  %126 = shl i32 %row.0, 1
  %127 = and i32 %126, 14
  %128 = and i32 %col.0, 1
  %129 = add nsw i32 %127, %128
  %130 = shl i32 %129, 1
  %131 = lshr i32 %125, %130
  %132 = and i32 %131, 3
  %133 = zext i32 %132 to i64
  %134 = load i16* @shrink, align 2
  %135 = zext i16 %134 to i32
  %136 = ashr i32 %row.0, %135
  %137 = load i16* @iwidth, align 2
  %138 = zext i16 %137 to i32
  %139 = mul nsw i32 %136, %138
  %140 = load i16* @shrink, align 2
  %141 = zext i16 %140 to i32
  %142 = ashr i32 %col.0, %141
  %143 = add nsw i32 %139, %142
  %144 = sext i32 %143 to i64
  %145 = load [4 x i16]** @image, align 8
  %146 = getelementptr inbounds [4 x i16]* %145, i64 %144
  %147 = getelementptr inbounds [4 x i16]* %146, i32 0, i64 %133
  %148 = load i16* %147, align 2
  %149 = zext i16 %148 to i32
  %150 = sext i32 %col.0 to i64
  %151 = getelementptr inbounds i16* %109, i64 %150
  %152 = load i16* %151, align 2
  %153 = call zeroext i16 @ntohs(i16 zeroext %152) #9
  %154 = zext i16 %153 to i32
  %155 = sub nsw i32 %149, %154
  %156 = icmp sgt i32 %155, 0
  br i1 %156, label %157, label %189

; <label>:157                                     ; preds = %124
  %158 = load i32* @filters, align 4
  %159 = shl i32 %row.0, 1
  %160 = and i32 %159, 14
  %161 = and i32 %col.0, 1
  %162 = add nsw i32 %160, %161
  %163 = shl i32 %162, 1
  %164 = lshr i32 %158, %163
  %165 = and i32 %164, 3
  %166 = zext i32 %165 to i64
  %167 = load i16* @shrink, align 2
  %168 = zext i16 %167 to i32
  %169 = ashr i32 %row.0, %168
  %170 = load i16* @iwidth, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nsw i32 %169, %171
  %173 = load i16* @shrink, align 2
  %174 = zext i16 %173 to i32
  %175 = ashr i32 %col.0, %174
  %176 = add nsw i32 %172, %175
  %177 = sext i32 %176 to i64
  %178 = load [4 x i16]** @image, align 8
  %179 = getelementptr inbounds [4 x i16]* %178, i64 %177
  %180 = getelementptr inbounds [4 x i16]* %179, i32 0, i64 %166
  %181 = load i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = sext i32 %col.0 to i64
  %184 = getelementptr inbounds i16* %109, i64 %183
  %185 = load i16* %184, align 2
  %186 = call zeroext i16 @ntohs(i16 zeroext %185) #9
  %187 = zext i16 %186 to i32
  %188 = sub nsw i32 %182, %187
  br label %190

; <label>:189                                     ; preds = %124
  br label %190

; <label>:190                                     ; preds = %189, %157
  %191 = phi i32 [ %188, %157 ], [ 0, %189 ]
  %192 = trunc i32 %191 to i16
  %193 = load i32* @filters, align 4
  %194 = shl i32 %row.0, 1
  %195 = and i32 %194, 14
  %196 = and i32 %col.0, 1
  %197 = add nsw i32 %195, %196
  %198 = shl i32 %197, 1
  %199 = lshr i32 %193, %198
  %200 = and i32 %199, 3
  %201 = zext i32 %200 to i64
  %202 = load i16* @shrink, align 2
  %203 = zext i16 %202 to i32
  %204 = ashr i32 %row.0, %203
  %205 = load i16* @iwidth, align 2
  %206 = zext i16 %205 to i32
  %207 = mul nsw i32 %204, %206
  %208 = load i16* @shrink, align 2
  %209 = zext i16 %208 to i32
  %210 = ashr i32 %col.0, %209
  %211 = add nsw i32 %207, %210
  %212 = sext i32 %211 to i64
  %213 = load [4 x i16]** @image, align 8
  %214 = getelementptr inbounds [4 x i16]* %213, i64 %212
  %215 = getelementptr inbounds [4 x i16]* %214, i32 0, i64 %201
  store i16 %192, i16* %215, align 2
  br label %216

; <label>:216                                     ; preds = %190
  %217 = add nsw i32 %col.0, 1
  br label %120

; <label>:218                                     ; preds = %120
  br label %219

; <label>:219                                     ; preds = %218
  %220 = add nsw i32 %row.0, 1
  br label %111

; <label>:221                                     ; preds = %111
  %222 = bitcast i16* %109 to i8*
  call void @free(i8* %222) #4
  store i32 0, i32* @black, align 4
  br label %223

; <label>:223                                     ; preds = %221, %100, %80, %4
  ret void
}

declare void @perror(i8*) #1

; Function Attrs: nounwind uwtable
define void @pseudoinverse([3 x double]* %in, [3 x double]* %out, i32 %size) #0 {
  %work = alloca [3 x [6 x double]], align 16
  br label %1

; <label>:1                                       ; preds = %47, %0
  %i.0 = phi i32 [ 0, %0 ], [ %48, %47 ]
  %2 = icmp slt i32 %i.0, 3
  br i1 %2, label %3, label %49

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %15, %3
  %j.0 = phi i32 [ 0, %3 ], [ %16, %15 ]
  %5 = icmp slt i32 %j.0, 6
  br i1 %5, label %6, label %17

; <label>:6                                       ; preds = %4
  %7 = add nsw i32 %i.0, 3
  %8 = icmp eq i32 %j.0, %7
  %9 = zext i1 %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = sext i32 %j.0 to i64
  %12 = sext i32 %i.0 to i64
  %13 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %12
  %14 = getelementptr inbounds [6 x double]* %13, i32 0, i64 %11
  store double %10, double* %14, align 8
  br label %15

; <label>:15                                      ; preds = %6
  %16 = add nsw i32 %j.0, 1
  br label %4

; <label>:17                                      ; preds = %4
  br label %18

; <label>:18                                      ; preds = %44, %17
  %j.1 = phi i32 [ 0, %17 ], [ %45, %44 ]
  %19 = icmp slt i32 %j.1, 3
  br i1 %19, label %20, label %46

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %41, %20
  %k.0 = phi i32 [ 0, %20 ], [ %42, %41 ]
  %22 = icmp slt i32 %k.0, %size
  br i1 %22, label %23, label %43

; <label>:23                                      ; preds = %21
  %24 = sext i32 %i.0 to i64
  %25 = sext i32 %k.0 to i64
  %26 = getelementptr inbounds [3 x double]* %in, i64 %25
  %27 = getelementptr inbounds [3 x double]* %26, i32 0, i64 %24
  %28 = load double* %27, align 8
  %29 = sext i32 %j.1 to i64
  %30 = sext i32 %k.0 to i64
  %31 = getelementptr inbounds [3 x double]* %in, i64 %30
  %32 = getelementptr inbounds [3 x double]* %31, i32 0, i64 %29
  %33 = load double* %32, align 8
  %34 = fmul double %28, %33
  %35 = sext i32 %j.1 to i64
  %36 = sext i32 %i.0 to i64
  %37 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %36
  %38 = getelementptr inbounds [6 x double]* %37, i32 0, i64 %35
  %39 = load double* %38, align 8
  %40 = fadd double %39, %34
  store double %40, double* %38, align 8
  br label %41

; <label>:41                                      ; preds = %23
  %42 = add nsw i32 %k.0, 1
  br label %21

; <label>:43                                      ; preds = %21
  br label %44

; <label>:44                                      ; preds = %43
  %45 = add nsw i32 %j.1, 1
  br label %18

; <label>:46                                      ; preds = %18
  br label %47

; <label>:47                                      ; preds = %46
  %48 = add nsw i32 %i.0, 1
  br label %1

; <label>:49                                      ; preds = %1
  br label %50

; <label>:50                                      ; preds = %102, %49
  %i.1 = phi i32 [ 0, %49 ], [ %103, %102 ]
  %51 = icmp slt i32 %i.1, 3
  br i1 %51, label %52, label %104

; <label>:52                                      ; preds = %50
  %53 = sext i32 %i.1 to i64
  %54 = sext i32 %i.1 to i64
  %55 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %54
  %56 = getelementptr inbounds [6 x double]* %55, i32 0, i64 %53
  %57 = load double* %56, align 8
  br label %58

; <label>:58                                      ; preds = %67, %52
  %j.2 = phi i32 [ 0, %52 ], [ %68, %67 ]
  %59 = icmp slt i32 %j.2, 6
  br i1 %59, label %60, label %69

; <label>:60                                      ; preds = %58
  %61 = sext i32 %j.2 to i64
  %62 = sext i32 %i.1 to i64
  %63 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %62
  %64 = getelementptr inbounds [6 x double]* %63, i32 0, i64 %61
  %65 = load double* %64, align 8
  %66 = fdiv double %65, %57
  store double %66, double* %64, align 8
  br label %67

; <label>:67                                      ; preds = %60
  %68 = add nsw i32 %j.2, 1
  br label %58

; <label>:69                                      ; preds = %58
  br label %70

; <label>:70                                      ; preds = %99, %69
  %k.1 = phi i32 [ 0, %69 ], [ %100, %99 ]
  %71 = icmp slt i32 %k.1, 3
  br i1 %71, label %72, label %101

; <label>:72                                      ; preds = %70
  %73 = icmp eq i32 %k.1, %i.1
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %72
  br label %99

; <label>:75                                      ; preds = %72
  %76 = sext i32 %i.1 to i64
  %77 = sext i32 %k.1 to i64
  %78 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %77
  %79 = getelementptr inbounds [6 x double]* %78, i32 0, i64 %76
  %80 = load double* %79, align 8
  br label %81

; <label>:81                                      ; preds = %96, %75
  %j.3 = phi i32 [ 0, %75 ], [ %97, %96 ]
  %82 = icmp slt i32 %j.3, 6
  br i1 %82, label %83, label %98

; <label>:83                                      ; preds = %81
  %84 = sext i32 %j.3 to i64
  %85 = sext i32 %i.1 to i64
  %86 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %85
  %87 = getelementptr inbounds [6 x double]* %86, i32 0, i64 %84
  %88 = load double* %87, align 8
  %89 = fmul double %88, %80
  %90 = sext i32 %j.3 to i64
  %91 = sext i32 %k.1 to i64
  %92 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %91
  %93 = getelementptr inbounds [6 x double]* %92, i32 0, i64 %90
  %94 = load double* %93, align 8
  %95 = fsub double %94, %89
  store double %95, double* %93, align 8
  br label %96

; <label>:96                                      ; preds = %83
  %97 = add nsw i32 %j.3, 1
  br label %81

; <label>:98                                      ; preds = %81
  br label %99

; <label>:99                                      ; preds = %98, %74
  %100 = add nsw i32 %k.1, 1
  br label %70

; <label>:101                                     ; preds = %70
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %i.1, 1
  br label %50

; <label>:104                                     ; preds = %50
  br label %105

; <label>:105                                     ; preds = %142, %104
  %i.2 = phi i32 [ 0, %104 ], [ %143, %142 ]
  %106 = icmp slt i32 %i.2, %size
  br i1 %106, label %107, label %144

; <label>:107                                     ; preds = %105
  br label %108

; <label>:108                                     ; preds = %139, %107
  %j.4 = phi i32 [ 0, %107 ], [ %140, %139 ]
  %109 = icmp slt i32 %j.4, 3
  br i1 %109, label %110, label %141

; <label>:110                                     ; preds = %108
  %111 = sext i32 %j.4 to i64
  %112 = sext i32 %i.2 to i64
  %113 = getelementptr inbounds [3 x double]* %out, i64 %112
  %114 = getelementptr inbounds [3 x double]* %113, i32 0, i64 %111
  store double 0.000000e+00, double* %114, align 8
  br label %115

; <label>:115                                     ; preds = %136, %110
  %k.2 = phi i32 [ 0, %110 ], [ %137, %136 ]
  %116 = icmp slt i32 %k.2, 3
  br i1 %116, label %117, label %138

; <label>:117                                     ; preds = %115
  %118 = add nsw i32 %k.2, 3
  %119 = sext i32 %118 to i64
  %120 = sext i32 %j.4 to i64
  %121 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %120
  %122 = getelementptr inbounds [6 x double]* %121, i32 0, i64 %119
  %123 = load double* %122, align 8
  %124 = sext i32 %k.2 to i64
  %125 = sext i32 %i.2 to i64
  %126 = getelementptr inbounds [3 x double]* %in, i64 %125
  %127 = getelementptr inbounds [3 x double]* %126, i32 0, i64 %124
  %128 = load double* %127, align 8
  %129 = fmul double %123, %128
  %130 = sext i32 %j.4 to i64
  %131 = sext i32 %i.2 to i64
  %132 = getelementptr inbounds [3 x double]* %out, i64 %131
  %133 = getelementptr inbounds [3 x double]* %132, i32 0, i64 %130
  %134 = load double* %133, align 8
  %135 = fadd double %134, %129
  store double %135, double* %133, align 8
  br label %136

; <label>:136                                     ; preds = %117
  %137 = add nsw i32 %k.2, 1
  br label %115

; <label>:138                                     ; preds = %115
  br label %139

; <label>:139                                     ; preds = %138
  %140 = add nsw i32 %j.4, 1
  br label %108

; <label>:141                                     ; preds = %108
  br label %142

; <label>:142                                     ; preds = %141
  %143 = add nsw i32 %i.2, 1
  br label %105

; <label>:144                                     ; preds = %105
  ret void
}

; Function Attrs: nounwind uwtable
define void @cam_xyz_coeff([3 x double]* %cam_xyz) #0 {
  %cam_rgb = alloca [4 x [3 x double]], align 16
  %inverse = alloca [4 x [3 x double]], align 16
  br label %1

; <label>:1                                       ; preds = %38, %0
  %i.0 = phi i32 [ 0, %0 ], [ %39, %38 ]
  %2 = load i32* @colors, align 4
  %3 = icmp slt i32 %i.0, %2
  br i1 %3, label %4, label %40

; <label>:4                                       ; preds = %1
  br label %5

; <label>:5                                       ; preds = %35, %4
  %j.0 = phi i32 [ 0, %4 ], [ %36, %35 ]
  %6 = icmp slt i32 %j.0, 3
  br i1 %6, label %7, label %37

; <label>:7                                       ; preds = %5
  %8 = sext i32 %j.0 to i64
  %9 = sext i32 %i.0 to i64
  %10 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %9
  %11 = getelementptr inbounds [3 x double]* %10, i32 0, i64 %8
  store double 0.000000e+00, double* %11, align 8
  br label %12

; <label>:12                                      ; preds = %32, %7
  %k.0 = phi i32 [ 0, %7 ], [ %33, %32 ]
  %13 = icmp slt i32 %k.0, 3
  br i1 %13, label %14, label %34

; <label>:14                                      ; preds = %12
  %15 = sext i32 %k.0 to i64
  %16 = sext i32 %i.0 to i64
  %17 = getelementptr inbounds [3 x double]* %cam_xyz, i64 %16
  %18 = getelementptr inbounds [3 x double]* %17, i32 0, i64 %15
  %19 = load double* %18, align 8
  %20 = sext i32 %j.0 to i64
  %21 = sext i32 %k.0 to i64
  %22 = getelementptr inbounds [3 x [3 x double]]* @xyz_rgb, i32 0, i64 %21
  %23 = getelementptr inbounds [3 x double]* %22, i32 0, i64 %20
  %24 = load double* %23, align 8
  %25 = fmul double %19, %24
  %26 = sext i32 %j.0 to i64
  %27 = sext i32 %i.0 to i64
  %28 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %27
  %29 = getelementptr inbounds [3 x double]* %28, i32 0, i64 %26
  %30 = load double* %29, align 8
  %31 = fadd double %30, %25
  store double %31, double* %29, align 8
  br label %32

; <label>:32                                      ; preds = %14
  %33 = add nsw i32 %k.0, 1
  br label %12

; <label>:34                                      ; preds = %12
  br label %35

; <label>:35                                      ; preds = %34
  %36 = add nsw i32 %j.0, 1
  br label %5

; <label>:37                                      ; preds = %5
  br label %38

; <label>:38                                      ; preds = %37
  %39 = add nsw i32 %i.0, 1
  br label %1

; <label>:40                                      ; preds = %1
  br label %41

; <label>:41                                      ; preds = %73, %40
  %i.1 = phi i32 [ 0, %40 ], [ %74, %73 ]
  %42 = load i32* @colors, align 4
  %43 = icmp slt i32 %i.1, %42
  br i1 %43, label %44, label %75

; <label>:44                                      ; preds = %41
  br label %45

; <label>:45                                      ; preds = %54, %44
  %j.1 = phi i32 [ 0, %44 ], [ %55, %54 ]
  %num.0 = phi double [ 0.000000e+00, %44 ], [ %53, %54 ]
  %46 = icmp slt i32 %j.1, 3
  br i1 %46, label %47, label %56

; <label>:47                                      ; preds = %45
  %48 = sext i32 %j.1 to i64
  %49 = sext i32 %i.1 to i64
  %50 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %49
  %51 = getelementptr inbounds [3 x double]* %50, i32 0, i64 %48
  %52 = load double* %51, align 8
  %53 = fadd double %num.0, %52
  br label %54

; <label>:54                                      ; preds = %47
  %55 = add nsw i32 %j.1, 1
  br label %45

; <label>:56                                      ; preds = %45
  br label %57

; <label>:57                                      ; preds = %66, %56
  %j.2 = phi i32 [ 0, %56 ], [ %67, %66 ]
  %58 = icmp slt i32 %j.2, 3
  br i1 %58, label %59, label %68

; <label>:59                                      ; preds = %57
  %60 = sext i32 %j.2 to i64
  %61 = sext i32 %i.1 to i64
  %62 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %61
  %63 = getelementptr inbounds [3 x double]* %62, i32 0, i64 %60
  %64 = load double* %63, align 8
  %65 = fdiv double %64, %num.0
  store double %65, double* %63, align 8
  br label %66

; <label>:66                                      ; preds = %59
  %67 = add nsw i32 %j.2, 1
  br label %57

; <label>:68                                      ; preds = %57
  %69 = fdiv double 1.000000e+00, %num.0
  %70 = fptrunc double %69 to float
  %71 = sext i32 %i.1 to i64
  %72 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %71
  store float %70, float* %72, align 4
  br label %73

; <label>:73                                      ; preds = %68
  %74 = add nsw i32 %i.1, 1
  br label %41

; <label>:75                                      ; preds = %41
  %76 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i32 0
  %77 = getelementptr inbounds [4 x [3 x double]]* %inverse, i32 0, i32 0
  %78 = load i32* @colors, align 4
  call void @pseudoinverse([3 x double]* %76, [3 x double]* %77, i32 %78)
  store i32 0, i32* @raw_color, align 4
  br label %79

; <label>:79                                      ; preds = %99, %75
  %i.2 = phi i32 [ 0, %75 ], [ %100, %99 ]
  %80 = icmp slt i32 %i.2, 3
  br i1 %80, label %81, label %101

; <label>:81                                      ; preds = %79
  br label %82

; <label>:82                                      ; preds = %96, %81
  %j.3 = phi i32 [ 0, %81 ], [ %97, %96 ]
  %83 = load i32* @colors, align 4
  %84 = icmp slt i32 %j.3, %83
  br i1 %84, label %85, label %98

; <label>:85                                      ; preds = %82
  %86 = sext i32 %i.2 to i64
  %87 = sext i32 %j.3 to i64
  %88 = getelementptr inbounds [4 x [3 x double]]* %inverse, i32 0, i64 %87
  %89 = getelementptr inbounds [3 x double]* %88, i32 0, i64 %86
  %90 = load double* %89, align 8
  %91 = fptrunc double %90 to float
  %92 = sext i32 %j.3 to i64
  %93 = sext i32 %i.2 to i64
  %94 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %93
  %95 = getelementptr inbounds [4 x float]* %94, i32 0, i64 %92
  store float %91, float* %95, align 4
  br label %96

; <label>:96                                      ; preds = %85
  %97 = add nsw i32 %j.3, 1
  br label %82

; <label>:98                                      ; preds = %82
  br label %99

; <label>:99                                      ; preds = %98
  %100 = add nsw i32 %i.2, 1
  br label %79

; <label>:101                                     ; preds = %79
  ret void
}

; Function Attrs: nounwind uwtable
define void @hat_transform(float* %temp, float* %base, i32 %st, i32 %size, i32 %sc) #0 {
  br label %1

; <label>:1                                       ; preds = %23, %0
  %i.0 = phi i32 [ 0, %0 ], [ %24, %23 ]
  %2 = icmp slt i32 %i.0, %sc
  br i1 %2, label %3, label %25

; <label>:3                                       ; preds = %1
  %4 = mul nsw i32 %st, %i.0
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds float* %base, i64 %5
  %7 = load float* %6, align 4
  %8 = fmul float 2.000000e+00, %7
  %9 = sub nsw i32 %sc, %i.0
  %10 = mul nsw i32 %st, %9
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float* %base, i64 %11
  %13 = load float* %12, align 4
  %14 = fadd float %8, %13
  %15 = add nsw i32 %i.0, %sc
  %16 = mul nsw i32 %st, %15
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds float* %base, i64 %17
  %19 = load float* %18, align 4
  %20 = fadd float %14, %19
  %21 = sext i32 %i.0 to i64
  %22 = getelementptr inbounds float* %temp, i64 %21
  store float %20, float* %22, align 4
  br label %23

; <label>:23                                      ; preds = %3
  %24 = add nsw i32 %i.0, 1
  br label %1

; <label>:25                                      ; preds = %1
  br label %26

; <label>:26                                      ; preds = %49, %25
  %i.1 = phi i32 [ %i.0, %25 ], [ %50, %49 ]
  %27 = add nsw i32 %i.1, %sc
  %28 = icmp slt i32 %27, %size
  br i1 %28, label %29, label %51

; <label>:29                                      ; preds = %26
  %30 = mul nsw i32 %st, %i.1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float* %base, i64 %31
  %33 = load float* %32, align 4
  %34 = fmul float 2.000000e+00, %33
  %35 = sub nsw i32 %i.1, %sc
  %36 = mul nsw i32 %st, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float* %base, i64 %37
  %39 = load float* %38, align 4
  %40 = fadd float %34, %39
  %41 = add nsw i32 %i.1, %sc
  %42 = mul nsw i32 %st, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float* %base, i64 %43
  %45 = load float* %44, align 4
  %46 = fadd float %40, %45
  %47 = sext i32 %i.1 to i64
  %48 = getelementptr inbounds float* %temp, i64 %47
  store float %46, float* %48, align 4
  br label %49

; <label>:49                                      ; preds = %29
  %50 = add nsw i32 %i.1, 1
  br label %26

; <label>:51                                      ; preds = %26
  br label %52

; <label>:52                                      ; preds = %77, %51
  %i.2 = phi i32 [ %i.1, %51 ], [ %78, %77 ]
  %53 = icmp slt i32 %i.2, %size
  br i1 %53, label %54, label %79

; <label>:54                                      ; preds = %52
  %55 = mul nsw i32 %st, %i.2
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float* %base, i64 %56
  %58 = load float* %57, align 4
  %59 = fmul float 2.000000e+00, %58
  %60 = sub nsw i32 %i.2, %sc
  %61 = mul nsw i32 %st, %60
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float* %base, i64 %62
  %64 = load float* %63, align 4
  %65 = fadd float %59, %64
  %66 = mul nsw i32 2, %size
  %67 = sub nsw i32 %66, 2
  %68 = add nsw i32 %i.2, %sc
  %69 = sub nsw i32 %67, %68
  %70 = mul nsw i32 %st, %69
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float* %base, i64 %71
  %73 = load float* %72, align 4
  %74 = fadd float %65, %73
  %75 = sext i32 %i.2 to i64
  %76 = getelementptr inbounds float* %temp, i64 %75
  store float %74, float* %76, align 4
  br label %77

; <label>:77                                      ; preds = %54
  %78 = add nsw i32 %i.2, 1
  br label %52

; <label>:79                                      ; preds = %52
  ret void
}

; Function Attrs: nounwind uwtable
define void @wavelet_denoise() #0 {
  %mul = alloca [2 x float], align 4
  %window = alloca [4 x i16*], align 16
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8]* @.str68, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %11, %6
  %scale.0 = phi i32 [ 1, %6 ], [ %12, %11 ]
  %8 = load i32* @maximum, align 4
  %9 = shl i32 %8, %scale.0
  %10 = icmp ult i32 %9, 65536
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %7
  %12 = add nsw i32 %scale.0, 1
  br label %7

; <label>:13                                      ; preds = %7
  %14 = add nsw i32 %scale.0, -1
  %15 = load i32* @maximum, align 4
  %16 = shl i32 %15, %14
  store i32 %16, i32* @maximum, align 4
  %17 = load i32* @black, align 4
  %18 = shl i32 %17, %14
  store i32 %18, i32* @black, align 4
  %19 = load i16* @iheight, align 2
  %20 = zext i16 %19 to i32
  %21 = load i16* @iwidth, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nsw i32 %20, %22
  %24 = icmp slt i32 %23, 357892096
  br i1 %24, label %25, label %37

; <label>:25                                      ; preds = %13
  %26 = mul nsw i32 %23, 3
  %27 = load i16* @iheight, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %26, %28
  %30 = load i16* @iwidth, align 2
  %31 = zext i16 %30 to i32
  %32 = add nsw i32 %29, %31
  %33 = sext i32 %32 to i64
  %34 = mul i64 %33, 4
  %35 = call noalias i8* @malloc(i64 %34) #4
  %36 = bitcast i8* %35 to float*
  br label %37

; <label>:37                                      ; preds = %25, %13
  %fimg.0 = phi float* [ %36, %25 ], [ null, %13 ]
  %38 = bitcast float* %fimg.0 to i8*
  call void @merror(i8* %38, i8* getelementptr inbounds ([18 x i8]* @.str69, i32 0, i32 0))
  %39 = mul nsw i32 %23, 3
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float* %fimg.0, i64 %40
  %42 = load i32* @colors, align 4
  %43 = icmp eq i32 %42, 3
  br i1 %43, label %44, label %49

; <label>:44                                      ; preds = %37
  %45 = load i32* @filters, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %49

; <label>:47                                      ; preds = %44
  %48 = add nsw i32 %42, 1
  br label %49

; <label>:49                                      ; preds = %47, %44, %37
  %nc.0 = phi i32 [ %48, %47 ], [ %42, %44 ], [ %42, %37 ]
  br label %50

; <label>:50                                      ; preds = %319, %49
  %c.0 = phi i32 [ 0, %49 ], [ %320, %319 ]
  %lpass.0 = phi i32 [ undef, %49 ], [ %lpass.1, %319 ]
  %51 = icmp slt i32 %c.0, %nc.0
  br i1 %51, label %52, label %321

; <label>:52                                      ; preds = %50
  br label %53

; <label>:53                                      ; preds = %70, %52
  %i.0 = phi i32 [ 0, %52 ], [ %71, %70 ]
  %54 = icmp slt i32 %i.0, %23
  br i1 %54, label %55, label %72

; <label>:55                                      ; preds = %53
  %56 = sext i32 %c.0 to i64
  %57 = sext i32 %i.0 to i64
  %58 = load [4 x i16]** @image, align 8
  %59 = getelementptr inbounds [4 x i16]* %58, i64 %57
  %60 = getelementptr inbounds [4 x i16]* %59, i32 0, i64 %56
  %61 = load i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = shl i32 %62, %14
  %64 = sitofp i32 %63 to double
  %65 = call double @sqrt(double %64) #4
  %66 = fmul double 2.560000e+02, %65
  %67 = fptrunc double %66 to float
  %68 = sext i32 %i.0 to i64
  %69 = getelementptr inbounds float* %fimg.0, i64 %68
  store float %67, float* %69, align 4
  br label %70

; <label>:70                                      ; preds = %55
  %71 = add nsw i32 %i.0, 1
  br label %53

; <label>:72                                      ; preds = %53
  br label %73

; <label>:73                                      ; preds = %217, %72
  %lpass.1 = phi i32 [ %lpass.0, %72 ], [ %78, %217 ]
  %hpass.0 = phi i32 [ 0, %72 ], [ %78, %217 ]
  %lev.0 = phi i32 [ 0, %72 ], [ %218, %217 ]
  %74 = icmp slt i32 %lev.0, 5
  br i1 %74, label %75, label %219

; <label>:75                                      ; preds = %73
  %76 = and i32 %lev.0, 1
  %77 = add nsw i32 %76, 1
  %78 = mul nsw i32 %23, %77
  br label %79

; <label>:79                                      ; preds = %115, %75
  %row.0 = phi i32 [ 0, %75 ], [ %116, %115 ]
  %80 = load i16* @iheight, align 2
  %81 = zext i16 %80 to i32
  %82 = icmp slt i32 %row.0, %81
  br i1 %82, label %83, label %117

; <label>:83                                      ; preds = %79
  %84 = sext i32 %hpass.0 to i64
  %85 = getelementptr inbounds float* %fimg.0, i64 %84
  %86 = load i16* @iwidth, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nsw i32 %row.0, %87
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds float* %85, i64 %89
  %91 = load i16* @iwidth, align 2
  %92 = zext i16 %91 to i32
  %93 = shl i32 1, %lev.0
  call void @hat_transform(float* %41, float* %90, i32 1, i32 %92, i32 %93)
  br label %94

; <label>:94                                      ; preds = %112, %83
  %col.0 = phi i32 [ 0, %83 ], [ %113, %112 ]
  %95 = load i16* @iwidth, align 2
  %96 = zext i16 %95 to i32
  %97 = icmp slt i32 %col.0, %96
  br i1 %97, label %98, label %114

; <label>:98                                      ; preds = %94
  %99 = sext i32 %col.0 to i64
  %100 = getelementptr inbounds float* %41, i64 %99
  %101 = load float* %100, align 4
  %102 = fpext float %101 to double
  %103 = fmul double %102, 2.500000e-01
  %104 = fptrunc double %103 to float
  %105 = load i16* @iwidth, align 2
  %106 = zext i16 %105 to i32
  %107 = mul nsw i32 %row.0, %106
  %108 = add nsw i32 %78, %107
  %109 = add nsw i32 %108, %col.0
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float* %fimg.0, i64 %110
  store float %104, float* %111, align 4
  br label %112

; <label>:112                                     ; preds = %98
  %113 = add nsw i32 %col.0, 1
  br label %94

; <label>:114                                     ; preds = %94
  br label %115

; <label>:115                                     ; preds = %114
  %116 = add nsw i32 %row.0, 1
  br label %79

; <label>:117                                     ; preds = %79
  br label %118

; <label>:118                                     ; preds = %153, %117
  %col.1 = phi i32 [ 0, %117 ], [ %154, %153 ]
  %119 = load i16* @iwidth, align 2
  %120 = zext i16 %119 to i32
  %121 = icmp slt i32 %col.1, %120
  br i1 %121, label %122, label %155

; <label>:122                                     ; preds = %118
  %123 = sext i32 %78 to i64
  %124 = getelementptr inbounds float* %fimg.0, i64 %123
  %125 = sext i32 %col.1 to i64
  %126 = getelementptr inbounds float* %124, i64 %125
  %127 = load i16* @iwidth, align 2
  %128 = zext i16 %127 to i32
  %129 = load i16* @iheight, align 2
  %130 = zext i16 %129 to i32
  %131 = shl i32 1, %lev.0
  call void @hat_transform(float* %41, float* %126, i32 %128, i32 %130, i32 %131)
  br label %132

; <label>:132                                     ; preds = %150, %122
  %row.1 = phi i32 [ 0, %122 ], [ %151, %150 ]
  %133 = load i16* @iheight, align 2
  %134 = zext i16 %133 to i32
  %135 = icmp slt i32 %row.1, %134
  br i1 %135, label %136, label %152

; <label>:136                                     ; preds = %132
  %137 = sext i32 %row.1 to i64
  %138 = getelementptr inbounds float* %41, i64 %137
  %139 = load float* %138, align 4
  %140 = fpext float %139 to double
  %141 = fmul double %140, 2.500000e-01
  %142 = fptrunc double %141 to float
  %143 = load i16* @iwidth, align 2
  %144 = zext i16 %143 to i32
  %145 = mul nsw i32 %row.1, %144
  %146 = add nsw i32 %78, %145
  %147 = add nsw i32 %146, %col.1
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds float* %fimg.0, i64 %148
  store float %142, float* %149, align 4
  br label %150

; <label>:150                                     ; preds = %136
  %151 = add nsw i32 %row.1, 1
  br label %132

; <label>:152                                     ; preds = %132
  br label %153

; <label>:153                                     ; preds = %152
  %154 = add nsw i32 %col.1, 1
  br label %118

; <label>:155                                     ; preds = %118
  %156 = load float* @threshold, align 4
  %157 = sext i32 %lev.0 to i64
  %158 = getelementptr inbounds [8 x float]* @wavelet_denoise.noise, i32 0, i64 %157
  %159 = load float* %158, align 4
  %160 = fmul float %156, %159
  br label %161

; <label>:161                                     ; preds = %214, %155
  %i.1 = phi i32 [ 0, %155 ], [ %215, %214 ]
  %162 = icmp slt i32 %i.1, %23
  br i1 %162, label %163, label %216

; <label>:163                                     ; preds = %161
  %164 = add nsw i32 %78, %i.1
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float* %fimg.0, i64 %165
  %167 = load float* %166, align 4
  %168 = add nsw i32 %hpass.0, %i.1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float* %fimg.0, i64 %169
  %171 = load float* %170, align 4
  %172 = fsub float %171, %167
  store float %172, float* %170, align 4
  %173 = add nsw i32 %hpass.0, %i.1
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds float* %fimg.0, i64 %174
  %176 = load float* %175, align 4
  %177 = fsub float -0.000000e+00, %160
  %178 = fcmp olt float %176, %177
  br i1 %178, label %179, label %185

; <label>:179                                     ; preds = %163
  %180 = add nsw i32 %hpass.0, %i.1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds float* %fimg.0, i64 %181
  %183 = load float* %182, align 4
  %184 = fadd float %183, %160
  store float %184, float* %182, align 4
  br label %202

; <label>:185                                     ; preds = %163
  %186 = add nsw i32 %hpass.0, %i.1
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds float* %fimg.0, i64 %187
  %189 = load float* %188, align 4
  %190 = fcmp ogt float %189, %160
  br i1 %190, label %191, label %197

; <label>:191                                     ; preds = %185
  %192 = add nsw i32 %hpass.0, %i.1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds float* %fimg.0, i64 %193
  %195 = load float* %194, align 4
  %196 = fsub float %195, %160
  store float %196, float* %194, align 4
  br label %201

; <label>:197                                     ; preds = %185
  %198 = add nsw i32 %hpass.0, %i.1
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float* %fimg.0, i64 %199
  store float 0.000000e+00, float* %200, align 4
  br label %201

; <label>:201                                     ; preds = %197, %191
  br label %202

; <label>:202                                     ; preds = %201, %179
  %203 = icmp ne i32 %hpass.0, 0
  br i1 %203, label %204, label %213

; <label>:204                                     ; preds = %202
  %205 = add nsw i32 %hpass.0, %i.1
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds float* %fimg.0, i64 %206
  %208 = load float* %207, align 4
  %209 = sext i32 %i.1 to i64
  %210 = getelementptr inbounds float* %fimg.0, i64 %209
  %211 = load float* %210, align 4
  %212 = fadd float %211, %208
  store float %212, float* %210, align 4
  br label %213

; <label>:213                                     ; preds = %204, %202
  br label %214

; <label>:214                                     ; preds = %213
  %215 = add nsw i32 %i.1, 1
  br label %161

; <label>:216                                     ; preds = %161
  br label %217

; <label>:217                                     ; preds = %216
  %218 = add nsw i32 %lev.0, 1
  br label %73

; <label>:219                                     ; preds = %73
  br label %220

; <label>:220                                     ; preds = %316, %219
  %i.2 = phi i32 [ 0, %219 ], [ %317, %316 ]
  %221 = icmp slt i32 %i.2, %23
  br i1 %221, label %222, label %318

; <label>:222                                     ; preds = %220
  %223 = sext i32 %i.2 to i64
  %224 = getelementptr inbounds float* %fimg.0, i64 %223
  %225 = load float* %224, align 4
  %226 = add nsw i32 %lpass.1, %i.2
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds float* %fimg.0, i64 %227
  %229 = load float* %228, align 4
  %230 = fadd float %225, %229
  %231 = sext i32 %i.2 to i64
  %232 = getelementptr inbounds float* %fimg.0, i64 %231
  %233 = load float* %232, align 4
  %234 = add nsw i32 %lpass.1, %i.2
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds float* %fimg.0, i64 %235
  %237 = load float* %236, align 4
  %238 = fadd float %233, %237
  %239 = fmul float %230, %238
  %240 = fdiv float %239, 6.553600e+04
  %241 = fcmp olt float %240, 6.553500e+04
  br i1 %241, label %242, label %261

; <label>:242                                     ; preds = %222
  %243 = sext i32 %i.2 to i64
  %244 = getelementptr inbounds float* %fimg.0, i64 %243
  %245 = load float* %244, align 4
  %246 = add nsw i32 %lpass.1, %i.2
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds float* %fimg.0, i64 %247
  %249 = load float* %248, align 4
  %250 = fadd float %245, %249
  %251 = sext i32 %i.2 to i64
  %252 = getelementptr inbounds float* %fimg.0, i64 %251
  %253 = load float* %252, align 4
  %254 = add nsw i32 %lpass.1, %i.2
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds float* %fimg.0, i64 %255
  %257 = load float* %256, align 4
  %258 = fadd float %253, %257
  %259 = fmul float %250, %258
  %260 = fdiv float %259, 6.553600e+04
  br label %262

; <label>:261                                     ; preds = %222
  br label %262

; <label>:262                                     ; preds = %261, %242
  %263 = phi float [ %260, %242 ], [ 6.553500e+04, %261 ]
  %264 = fcmp ogt float 0.000000e+00, %263
  br i1 %264, label %265, label %266

; <label>:265                                     ; preds = %262
  br label %308

; <label>:266                                     ; preds = %262
  %267 = sext i32 %i.2 to i64
  %268 = getelementptr inbounds float* %fimg.0, i64 %267
  %269 = load float* %268, align 4
  %270 = add nsw i32 %lpass.1, %i.2
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds float* %fimg.0, i64 %271
  %273 = load float* %272, align 4
  %274 = fadd float %269, %273
  %275 = sext i32 %i.2 to i64
  %276 = getelementptr inbounds float* %fimg.0, i64 %275
  %277 = load float* %276, align 4
  %278 = add nsw i32 %lpass.1, %i.2
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds float* %fimg.0, i64 %279
  %281 = load float* %280, align 4
  %282 = fadd float %277, %281
  %283 = fmul float %274, %282
  %284 = fdiv float %283, 6.553600e+04
  %285 = fcmp olt float %284, 6.553500e+04
  br i1 %285, label %286, label %305

; <label>:286                                     ; preds = %266
  %287 = sext i32 %i.2 to i64
  %288 = getelementptr inbounds float* %fimg.0, i64 %287
  %289 = load float* %288, align 4
  %290 = add nsw i32 %lpass.1, %i.2
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds float* %fimg.0, i64 %291
  %293 = load float* %292, align 4
  %294 = fadd float %289, %293
  %295 = sext i32 %i.2 to i64
  %296 = getelementptr inbounds float* %fimg.0, i64 %295
  %297 = load float* %296, align 4
  %298 = add nsw i32 %lpass.1, %i.2
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds float* %fimg.0, i64 %299
  %301 = load float* %300, align 4
  %302 = fadd float %297, %301
  %303 = fmul float %294, %302
  %304 = fdiv float %303, 6.553600e+04
  br label %306

; <label>:305                                     ; preds = %266
  br label %306

; <label>:306                                     ; preds = %305, %286
  %307 = phi float [ %304, %286 ], [ 6.553500e+04, %305 ]
  br label %308

; <label>:308                                     ; preds = %306, %265
  %309 = phi float [ 0.000000e+00, %265 ], [ %307, %306 ]
  %310 = fptoui float %309 to i16
  %311 = sext i32 %c.0 to i64
  %312 = sext i32 %i.2 to i64
  %313 = load [4 x i16]** @image, align 8
  %314 = getelementptr inbounds [4 x i16]* %313, i64 %312
  %315 = getelementptr inbounds [4 x i16]* %314, i32 0, i64 %311
  store i16 %310, i16* %315, align 2
  br label %316

; <label>:316                                     ; preds = %308
  %317 = add nsw i32 %i.2, 1
  br label %220

; <label>:318                                     ; preds = %220
  br label %319

; <label>:319                                     ; preds = %318
  %320 = add nsw i32 %c.0, 1
  br label %50

; <label>:321                                     ; preds = %50
  %322 = load i32* @filters, align 4
  %323 = icmp ne i32 %322, 0
  br i1 %323, label %324, label %633

; <label>:324                                     ; preds = %321
  %325 = load i32* @colors, align 4
  %326 = icmp eq i32 %325, 3
  br i1 %326, label %327, label %633

; <label>:327                                     ; preds = %324
  br label %328

; <label>:328                                     ; preds = %361, %327
  %row.2 = phi i32 [ 0, %327 ], [ %362, %361 ]
  %329 = icmp slt i32 %row.2, 2
  br i1 %329, label %330, label %363

; <label>:330                                     ; preds = %328
  %331 = load i32* @filters, align 4
  %332 = add nsw i32 %row.2, 1
  %333 = shl i32 %332, 1
  %334 = and i32 %333, 14
  %335 = add nsw i32 %334, 0
  %336 = shl i32 %335, 1
  %337 = lshr i32 %331, %336
  %338 = and i32 %337, 3
  %339 = or i32 %338, 1
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %340
  %342 = load float* %341, align 4
  %343 = fpext float %342 to double
  %344 = fmul double 1.250000e-01, %343
  %345 = load i32* @filters, align 4
  %346 = shl i32 %row.2, 1
  %347 = and i32 %346, 14
  %348 = add nsw i32 %347, 0
  %349 = shl i32 %348, 1
  %350 = lshr i32 %345, %349
  %351 = and i32 %350, 3
  %352 = or i32 %351, 1
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %353
  %355 = load float* %354, align 4
  %356 = fpext float %355 to double
  %357 = fdiv double %344, %356
  %358 = fptrunc double %357 to float
  %359 = sext i32 %row.2 to i64
  %360 = getelementptr inbounds [2 x float]* %mul, i32 0, i64 %359
  store float %358, float* %360, align 4
  br label %361

; <label>:361                                     ; preds = %330
  %362 = add nsw i32 %row.2, 1
  br label %328

; <label>:363                                     ; preds = %328
  br label %364

; <label>:364                                     ; preds = %375, %363
  %i.3 = phi i32 [ 0, %363 ], [ %376, %375 ]
  %365 = icmp slt i32 %i.3, 4
  br i1 %365, label %366, label %377

; <label>:366                                     ; preds = %364
  %367 = bitcast float* %fimg.0 to i16*
  %368 = load i16* @width, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nsw i32 %369, %i.3
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i16* %367, i64 %371
  %373 = sext i32 %i.3 to i64
  %374 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 %373
  store i16* %372, i16** %374, align 8
  br label %375

; <label>:375                                     ; preds = %366
  %376 = add nsw i32 %i.3, 1
  br label %364

; <label>:377                                     ; preds = %364
  br label %378

; <label>:378                                     ; preds = %630, %377
  %row.3 = phi i32 [ 1, %377 ], [ %631, %630 ]
  %wlast.0 = phi i32 [ -1, %377 ], [ %wlast.1, %630 ]
  %379 = load i16* @height, align 2
  %380 = zext i16 %379 to i32
  %381 = sub nsw i32 %380, 1
  %382 = icmp slt i32 %row.3, %381
  br i1 %382, label %383, label %632

; <label>:383                                     ; preds = %378
  br label %384

; <label>:384                                     ; preds = %445, %383
  %wlast.1 = phi i32 [ %wlast.0, %383 ], [ %388, %445 ]
  %385 = add nsw i32 %row.3, 1
  %386 = icmp slt i32 %wlast.1, %385
  br i1 %386, label %387, label %446

; <label>:387                                     ; preds = %384
  %388 = add nsw i32 %wlast.1, 1
  br label %389

; <label>:389                                     ; preds = %399, %387
  %i.4 = phi i32 [ 0, %387 ], [ %400, %399 ]
  %390 = icmp slt i32 %i.4, 4
  br i1 %390, label %391, label %401

; <label>:391                                     ; preds = %389
  %392 = sext i32 %i.4 to i64
  %393 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 %392
  %394 = load i16** %393, align 8
  %395 = add nsw i32 %i.4, 3
  %396 = and i32 %395, 3
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 %397
  store i16* %394, i16** %398, align 8
  br label %399

; <label>:399                                     ; preds = %391
  %400 = add nsw i32 %i.4, 1
  br label %389

; <label>:401                                     ; preds = %389
  %402 = load i32* @filters, align 4
  %403 = shl i32 %388, 1
  %404 = and i32 %403, 14
  %405 = add nsw i32 %404, 1
  %406 = shl i32 %405, 1
  %407 = lshr i32 %402, %406
  %408 = and i32 %407, 3
  %409 = and i32 %408, 1
  br label %410

; <label>:410                                     ; preds = %443, %401
  %col.2 = phi i32 [ %409, %401 ], [ %444, %443 ]
  %411 = load i16* @width, align 2
  %412 = zext i16 %411 to i32
  %413 = icmp slt i32 %col.2, %412
  br i1 %413, label %414, label %445

; <label>:414                                     ; preds = %410
  %415 = load i32* @filters, align 4
  %416 = shl i32 %388, 1
  %417 = and i32 %416, 14
  %418 = and i32 %col.2, 1
  %419 = add nsw i32 %417, %418
  %420 = shl i32 %419, 1
  %421 = lshr i32 %415, %420
  %422 = and i32 %421, 3
  %423 = zext i32 %422 to i64
  %424 = load i16* @shrink, align 2
  %425 = zext i16 %424 to i32
  %426 = ashr i32 %388, %425
  %427 = load i16* @iwidth, align 2
  %428 = zext i16 %427 to i32
  %429 = mul nsw i32 %426, %428
  %430 = load i16* @shrink, align 2
  %431 = zext i16 %430 to i32
  %432 = ashr i32 %col.2, %431
  %433 = add nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = load [4 x i16]** @image, align 8
  %436 = getelementptr inbounds [4 x i16]* %435, i64 %434
  %437 = getelementptr inbounds [4 x i16]* %436, i32 0, i64 %423
  %438 = load i16* %437, align 2
  %439 = sext i32 %col.2 to i64
  %440 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 2
  %441 = load i16** %440, align 8
  %442 = getelementptr inbounds i16* %441, i64 %439
  store i16 %438, i16* %442, align 2
  br label %443

; <label>:443                                     ; preds = %414
  %444 = add nsw i32 %col.2, 2
  br label %410

; <label>:445                                     ; preds = %410
  br label %384

; <label>:446                                     ; preds = %384
  %447 = load float* @threshold, align 4
  %448 = fdiv float %447, 5.120000e+02
  %449 = load i32* @filters, align 4
  %450 = shl i32 %row.3, 1
  %451 = and i32 %450, 14
  %452 = add nsw i32 %451, 0
  %453 = shl i32 %452, 1
  %454 = lshr i32 %449, %453
  %455 = and i32 %454, 3
  %456 = and i32 %455, 1
  %457 = add i32 %456, 1
  br label %458

; <label>:458                                     ; preds = %627, %446
  %col.3 = phi i32 [ %457, %446 ], [ %628, %627 ]
  %459 = load i16* @width, align 2
  %460 = zext i16 %459 to i32
  %461 = sub nsw i32 %460, 1
  %462 = icmp slt i32 %col.3, %461
  br i1 %462, label %463, label %629

; <label>:463                                     ; preds = %458
  %464 = sub nsw i32 %col.3, 1
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 0
  %467 = load i16** %466, align 8
  %468 = getelementptr inbounds i16* %467, i64 %465
  %469 = load i16* %468, align 2
  %470 = zext i16 %469 to i32
  %471 = add nsw i32 %col.3, 1
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 0
  %474 = load i16** %473, align 8
  %475 = getelementptr inbounds i16* %474, i64 %472
  %476 = load i16* %475, align 2
  %477 = zext i16 %476 to i32
  %478 = add nsw i32 %470, %477
  %479 = sub nsw i32 %col.3, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 2
  %482 = load i16** %481, align 8
  %483 = getelementptr inbounds i16* %482, i64 %480
  %484 = load i16* %483, align 2
  %485 = zext i16 %484 to i32
  %486 = add nsw i32 %478, %485
  %487 = add nsw i32 %col.3, 1
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 2
  %490 = load i16** %489, align 8
  %491 = getelementptr inbounds i16* %490, i64 %488
  %492 = load i16* %491, align 2
  %493 = zext i16 %492 to i32
  %494 = add nsw i32 %486, %493
  %495 = load i32* @black, align 4
  %496 = mul i32 %495, 4
  %497 = sub i32 %494, %496
  %498 = uitofp i32 %497 to float
  %499 = and i32 %row.3, 1
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds [2 x float]* %mul, i32 0, i64 %500
  %502 = load float* %501, align 4
  %503 = fmul float %498, %502
  %504 = fpext float %503 to double
  %505 = sext i32 %col.3 to i64
  %506 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 1
  %507 = load i16** %506, align 8
  %508 = getelementptr inbounds i16* %507, i64 %505
  %509 = load i16* %508, align 2
  %510 = zext i16 %509 to i32
  %511 = load i32* @black, align 4
  %512 = sub i32 %510, %511
  %513 = uitofp i32 %512 to double
  %514 = fmul double %513, 5.000000e-01
  %515 = fadd double %504, %514
  %516 = load i32* @black, align 4
  %517 = uitofp i32 %516 to double
  %518 = fadd double %515, %517
  %519 = fptrunc double %518 to float
  %520 = fcmp olt float %519, 0.000000e+00
  br i1 %520, label %521, label %522

; <label>:521                                     ; preds = %463
  br label %525

; <label>:522                                     ; preds = %463
  %523 = fpext float %519 to double
  %524 = call double @sqrt(double %523) #4
  br label %525

; <label>:525                                     ; preds = %522, %521
  %526 = phi double [ 0.000000e+00, %521 ], [ %524, %522 ]
  %527 = fptrunc double %526 to float
  %528 = load i32* @filters, align 4
  %529 = shl i32 %row.3, 1
  %530 = and i32 %529, 14
  %531 = and i32 %col.3, 1
  %532 = add nsw i32 %530, %531
  %533 = shl i32 %532, 1
  %534 = lshr i32 %528, %533
  %535 = and i32 %534, 3
  %536 = zext i32 %535 to i64
  %537 = load i16* @shrink, align 2
  %538 = zext i16 %537 to i32
  %539 = ashr i32 %row.3, %538
  %540 = load i16* @iwidth, align 2
  %541 = zext i16 %540 to i32
  %542 = mul nsw i32 %539, %541
  %543 = load i16* @shrink, align 2
  %544 = zext i16 %543 to i32
  %545 = ashr i32 %col.3, %544
  %546 = add nsw i32 %542, %545
  %547 = sext i32 %546 to i64
  %548 = load [4 x i16]** @image, align 8
  %549 = getelementptr inbounds [4 x i16]* %548, i64 %547
  %550 = getelementptr inbounds [4 x i16]* %549, i32 0, i64 %536
  %551 = load i16* %550, align 2
  %552 = uitofp i16 %551 to double
  %553 = call double @sqrt(double %552) #4
  %554 = fpext float %527 to double
  %555 = fsub double %553, %554
  %556 = fptrunc double %555 to float
  %557 = fsub float -0.000000e+00, %448
  %558 = fcmp olt float %556, %557
  br i1 %558, label %559, label %561

; <label>:559                                     ; preds = %525
  %560 = fadd float %556, %448
  br label %567

; <label>:561                                     ; preds = %525
  %562 = fcmp ogt float %556, %448
  br i1 %562, label %563, label %565

; <label>:563                                     ; preds = %561
  %564 = fsub float %556, %448
  br label %566

; <label>:565                                     ; preds = %561
  br label %566

; <label>:566                                     ; preds = %565, %563
  %diff.0 = phi float [ %564, %563 ], [ 0.000000e+00, %565 ]
  br label %567

; <label>:567                                     ; preds = %566, %559
  %diff.1 = phi float [ %560, %559 ], [ %diff.0, %566 ]
  %568 = fadd float %527, %diff.1
  %569 = fadd float %527, %diff.1
  %570 = fmul float %568, %569
  %571 = fpext float %570 to double
  %572 = fadd double %571, 5.000000e-01
  %573 = fcmp olt double %572, 6.553500e+04
  br i1 %573, label %574, label %580

; <label>:574                                     ; preds = %567
  %575 = fadd float %527, %diff.1
  %576 = fadd float %527, %diff.1
  %577 = fmul float %575, %576
  %578 = fpext float %577 to double
  %579 = fadd double %578, 5.000000e-01
  br label %581

; <label>:580                                     ; preds = %567
  br label %581

; <label>:581                                     ; preds = %580, %574
  %582 = phi double [ %579, %574 ], [ 6.553500e+04, %580 ]
  %583 = fcmp ogt double 0.000000e+00, %582
  br i1 %583, label %584, label %585

; <label>:584                                     ; preds = %581
  br label %601

; <label>:585                                     ; preds = %581
  %586 = fadd float %527, %diff.1
  %587 = fadd float %527, %diff.1
  %588 = fmul float %586, %587
  %589 = fpext float %588 to double
  %590 = fadd double %589, 5.000000e-01
  %591 = fcmp olt double %590, 6.553500e+04
  br i1 %591, label %592, label %598

; <label>:592                                     ; preds = %585
  %593 = fadd float %527, %diff.1
  %594 = fadd float %527, %diff.1
  %595 = fmul float %593, %594
  %596 = fpext float %595 to double
  %597 = fadd double %596, 5.000000e-01
  br label %599

; <label>:598                                     ; preds = %585
  br label %599

; <label>:599                                     ; preds = %598, %592
  %600 = phi double [ %597, %592 ], [ 6.553500e+04, %598 ]
  br label %601

; <label>:601                                     ; preds = %599, %584
  %602 = phi double [ 0.000000e+00, %584 ], [ %600, %599 ]
  %603 = fptoui double %602 to i16
  %604 = load i32* @filters, align 4
  %605 = shl i32 %row.3, 1
  %606 = and i32 %605, 14
  %607 = and i32 %col.3, 1
  %608 = add nsw i32 %606, %607
  %609 = shl i32 %608, 1
  %610 = lshr i32 %604, %609
  %611 = and i32 %610, 3
  %612 = zext i32 %611 to i64
  %613 = load i16* @shrink, align 2
  %614 = zext i16 %613 to i32
  %615 = ashr i32 %row.3, %614
  %616 = load i16* @iwidth, align 2
  %617 = zext i16 %616 to i32
  %618 = mul nsw i32 %615, %617
  %619 = load i16* @shrink, align 2
  %620 = zext i16 %619 to i32
  %621 = ashr i32 %col.3, %620
  %622 = add nsw i32 %618, %621
  %623 = sext i32 %622 to i64
  %624 = load [4 x i16]** @image, align 8
  %625 = getelementptr inbounds [4 x i16]* %624, i64 %623
  %626 = getelementptr inbounds [4 x i16]* %625, i32 0, i64 %612
  store i16 %603, i16* %626, align 2
  br label %627

; <label>:627                                     ; preds = %601
  %628 = add nsw i32 %col.3, 2
  br label %458

; <label>:629                                     ; preds = %458
  br label %630

; <label>:630                                     ; preds = %629
  %631 = add nsw i32 %row.3, 1
  br label %378

; <label>:632                                     ; preds = %378
  br label %633

; <label>:633                                     ; preds = %632, %324, %321
  %634 = bitcast float* %fimg.0 to i8*
  call void @free(i8* %634) #4
  ret void
}

; Function Attrs: nounwind
declare double @sqrt(double) #3

; Function Attrs: nounwind uwtable
define void @scale_colors() #0 {
  %sum = alloca [8 x i32], align 16
  %dsum = alloca [8 x double], align 16
  %scale_mul = alloca [4 x float], align 16
  %1 = load float* getelementptr inbounds ([4 x float]* @user_mul, i32 0, i64 0), align 4
  %2 = fcmp une float %1, 0.000000e+00
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([4 x float]* @pre_mul to i8*), i8* bitcast ([4 x float]* @user_mul to i8*), i64 16, i32 16, i1 false)
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = load i32* @use_auto_wb, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %13, label %7

; <label>:7                                       ; preds = %4
  %8 = load i32* @use_camera_wb, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %198

; <label>:10                                      ; preds = %7
  %11 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %12 = fcmp oeq float %11, -1.000000e+00
  br i1 %12, label %13, label %198

; <label>:13                                      ; preds = %10, %4
  %14 = bitcast [8 x double]* %dsum to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 64, i32 16, i1 false)
  %15 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 1), align 4
  %16 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 3), align 4
  %17 = add i32 %15, %16
  %18 = load i16* @height, align 2
  %19 = zext i16 %18 to i32
  %20 = icmp ult i32 %17, %19
  br i1 %20, label %21, label %25

; <label>:21                                      ; preds = %13
  %22 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 1), align 4
  %23 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 3), align 4
  %24 = add i32 %22, %23
  br label %28

; <label>:25                                      ; preds = %13
  %26 = load i16* @height, align 2
  %27 = zext i16 %26 to i32
  br label %28

; <label>:28                                      ; preds = %25, %21
  %29 = phi i32 [ %24, %21 ], [ %27, %25 ]
  %30 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 0), align 4
  %31 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 2), align 4
  %32 = add i32 %30, %31
  %33 = load i16* @width, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp ult i32 %32, %34
  br i1 %35, label %36, label %40

; <label>:36                                      ; preds = %28
  %37 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 0), align 4
  %38 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 2), align 4
  %39 = add i32 %37, %38
  br label %43

; <label>:40                                      ; preds = %28
  %41 = load i16* @width, align 2
  %42 = zext i16 %41 to i32
  br label %43

; <label>:43                                      ; preds = %40, %36
  %44 = phi i32 [ %39, %36 ], [ %42, %40 ]
  %45 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 1), align 4
  br label %46

; <label>:46                                      ; preds = %172, %43
  %row.0 = phi i32 [ %45, %43 ], [ %173, %172 ]
  %47 = icmp ult i32 %row.0, %29
  br i1 %47, label %48, label %174

; <label>:48                                      ; preds = %46
  %49 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 0), align 4
  br label %50

; <label>:50                                      ; preds = %169, %48
  %col.0 = phi i32 [ %49, %48 ], [ %170, %169 ]
  %51 = icmp ult i32 %col.0, %44
  br i1 %51, label %52, label %171

; <label>:52                                      ; preds = %50
  %53 = bitcast [8 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %53, i8 0, i64 32, i32 16, i1 false)
  br label %54

; <label>:54                                      ; preds = %151, %52
  %y.0 = phi i32 [ %row.0, %52 ], [ %152, %151 ]
  %55 = add i32 %row.0, 8
  %56 = icmp ult i32 %y.0, %55
  br i1 %56, label %57, label %59

; <label>:57                                      ; preds = %54
  %58 = icmp ult i32 %y.0, %29
  br label %59

; <label>:59                                      ; preds = %57, %54
  %60 = phi i1 [ false, %54 ], [ %58, %57 ]
  br i1 %60, label %61, label %153

; <label>:61                                      ; preds = %59
  br label %62

; <label>:62                                      ; preds = %148, %61
  %x.0 = phi i32 [ %col.0, %61 ], [ %149, %148 ]
  %63 = add i32 %col.0, 8
  %64 = icmp ult i32 %x.0, %63
  br i1 %64, label %65, label %67

; <label>:65                                      ; preds = %62
  %66 = icmp ult i32 %x.0, %44
  br label %67

; <label>:67                                      ; preds = %65, %62
  %68 = phi i1 [ false, %62 ], [ %66, %65 ]
  br i1 %68, label %69, label %150

; <label>:69                                      ; preds = %67
  br label %70

; <label>:70                                      ; preds = %145, %69
  %c.0 = phi i32 [ 0, %69 ], [ %146, %145 ]
  %71 = icmp ult i32 %c.0, 4
  br i1 %71, label %72, label %147

; <label>:72                                      ; preds = %70
  %73 = load i32* @filters, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %109

; <label>:75                                      ; preds = %72
  %76 = load i32* @filters, align 4
  %77 = shl i32 %y.0, 1
  %78 = and i32 %77, 14
  %79 = and i32 %x.0, 1
  %80 = add i32 %78, %79
  %81 = shl i32 %80, 1
  %82 = lshr i32 %76, %81
  %83 = and i32 %82, 3
  %84 = load i32* @filters, align 4
  %85 = shl i32 %y.0, 1
  %86 = and i32 %85, 14
  %87 = and i32 %x.0, 1
  %88 = add i32 %86, %87
  %89 = shl i32 %88, 1
  %90 = lshr i32 %84, %89
  %91 = and i32 %90, 3
  %92 = zext i32 %91 to i64
  %93 = load i16* @shrink, align 2
  %94 = zext i16 %93 to i32
  %95 = lshr i32 %y.0, %94
  %96 = load i16* @iwidth, align 2
  %97 = zext i16 %96 to i32
  %98 = mul i32 %95, %97
  %99 = load i16* @shrink, align 2
  %100 = zext i16 %99 to i32
  %101 = lshr i32 %x.0, %100
  %102 = add i32 %98, %101
  %103 = zext i32 %102 to i64
  %104 = load [4 x i16]** @image, align 8
  %105 = getelementptr inbounds [4 x i16]* %104, i64 %103
  %106 = getelementptr inbounds [4 x i16]* %105, i32 0, i64 %92
  %107 = load i16* %106, align 2
  %108 = zext i16 %107 to i32
  br label %121

; <label>:109                                     ; preds = %72
  %110 = zext i32 %c.0 to i64
  %111 = load i16* @width, align 2
  %112 = zext i16 %111 to i32
  %113 = mul i32 %y.0, %112
  %114 = add i32 %113, %x.0
  %115 = zext i32 %114 to i64
  %116 = load [4 x i16]** @image, align 8
  %117 = getelementptr inbounds [4 x i16]* %116, i64 %115
  %118 = getelementptr inbounds [4 x i16]* %117, i32 0, i64 %110
  %119 = load i16* %118, align 2
  %120 = zext i16 %119 to i32
  br label %121

; <label>:121                                     ; preds = %109, %75
  %val.0 = phi i32 [ %108, %75 ], [ %120, %109 ]
  %c.1 = phi i32 [ %83, %75 ], [ %c.0, %109 ]
  %122 = load i32* @maximum, align 4
  %123 = sub i32 %122, 25
  %124 = icmp ugt i32 %val.0, %123
  br i1 %124, label %125, label %126

; <label>:125                                     ; preds = %121
  br label %168

; <label>:126                                     ; preds = %121
  %127 = load i32* @black, align 4
  %128 = sub i32 %val.0, %127
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %130, label %131

; <label>:130                                     ; preds = %126
  br label %131

; <label>:131                                     ; preds = %130, %126
  %val.1 = phi i32 [ 0, %130 ], [ %128, %126 ]
  %132 = zext i32 %c.1 to i64
  %133 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %132
  %134 = load i32* %133, align 4
  %135 = add i32 %134, %val.1
  store i32 %135, i32* %133, align 4
  %136 = add i32 %c.1, 4
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %137
  %139 = load i32* %138, align 4
  %140 = add i32 %139, 1
  store i32 %140, i32* %138, align 4
  %141 = load i32* @filters, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %144

; <label>:143                                     ; preds = %131
  br label %147

; <label>:144                                     ; preds = %131
  br label %145

; <label>:145                                     ; preds = %144
  %146 = add i32 %c.1, 1
  br label %70

; <label>:147                                     ; preds = %143, %70
  br label %148

; <label>:148                                     ; preds = %147
  %149 = add i32 %x.0, 1
  br label %62

; <label>:150                                     ; preds = %67
  br label %151

; <label>:151                                     ; preds = %150
  %152 = add i32 %y.0, 1
  br label %54

; <label>:153                                     ; preds = %59
  br label %154

; <label>:154                                     ; preds = %165, %153
  %c.2 = phi i32 [ 0, %153 ], [ %166, %165 ]
  %155 = icmp ult i32 %c.2, 8
  br i1 %155, label %156, label %167

; <label>:156                                     ; preds = %154
  %157 = zext i32 %c.2 to i64
  %158 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %157
  %159 = load i32* %158, align 4
  %160 = uitofp i32 %159 to double
  %161 = zext i32 %c.2 to i64
  %162 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %161
  %163 = load double* %162, align 8
  %164 = fadd double %163, %160
  store double %164, double* %162, align 8
  br label %165

; <label>:165                                     ; preds = %156
  %166 = add i32 %c.2, 1
  br label %154

; <label>:167                                     ; preds = %154
  br label %168

; <label>:168                                     ; preds = %167, %125
  br label %169

; <label>:169                                     ; preds = %168
  %170 = add i32 %col.0, 8
  br label %50

; <label>:171                                     ; preds = %50
  br label %172

; <label>:172                                     ; preds = %171
  %173 = add i32 %row.0, 8
  br label %46

; <label>:174                                     ; preds = %46
  br label %175

; <label>:175                                     ; preds = %195, %174
  %c.3 = phi i32 [ 0, %174 ], [ %196, %195 ]
  %176 = icmp ult i32 %c.3, 4
  br i1 %176, label %177, label %197

; <label>:177                                     ; preds = %175
  %178 = zext i32 %c.3 to i64
  %179 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %178
  %180 = load double* %179, align 8
  %181 = fcmp une double %180, 0.000000e+00
  br i1 %181, label %182, label %194

; <label>:182                                     ; preds = %177
  %183 = add i32 %c.3, 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %184
  %186 = load double* %185, align 8
  %187 = zext i32 %c.3 to i64
  %188 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %187
  %189 = load double* %188, align 8
  %190 = fdiv double %186, %189
  %191 = fptrunc double %190 to float
  %192 = zext i32 %c.3 to i64
  %193 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %192
  store float %191, float* %193, align 4
  br label %194

; <label>:194                                     ; preds = %182, %177
  br label %195

; <label>:195                                     ; preds = %194
  %196 = add i32 %c.3, 1
  br label %175

; <label>:197                                     ; preds = %175
  br label %198

; <label>:198                                     ; preds = %197, %10, %7
  %199 = load i32* @use_camera_wb, align 4
  %200 = icmp ne i32 %199, 0
  br i1 %200, label %201, label %293

; <label>:201                                     ; preds = %198
  %202 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %203 = fcmp une float %202, -1.000000e+00
  br i1 %203, label %204, label %293

; <label>:204                                     ; preds = %201
  %205 = bitcast [8 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %205, i8 0, i64 32, i32 16, i1 false)
  br label %206

; <label>:206                                     ; preds = %243, %204
  %row.1 = phi i32 [ 0, %204 ], [ %244, %243 ]
  %207 = icmp ult i32 %row.1, 8
  br i1 %207, label %208, label %245

; <label>:208                                     ; preds = %206
  br label %209

; <label>:209                                     ; preds = %240, %208
  %col.1 = phi i32 [ 0, %208 ], [ %241, %240 ]
  %210 = icmp ult i32 %col.1, 8
  br i1 %210, label %211, label %242

; <label>:211                                     ; preds = %209
  %212 = load i32* @filters, align 4
  %213 = shl i32 %row.1, 1
  %214 = and i32 %213, 14
  %215 = and i32 %col.1, 1
  %216 = add i32 %214, %215
  %217 = shl i32 %216, 1
  %218 = lshr i32 %212, %217
  %219 = and i32 %218, 3
  %220 = zext i32 %col.1 to i64
  %221 = zext i32 %row.1 to i64
  %222 = getelementptr inbounds [8 x [8 x i16]]* @white, i32 0, i64 %221
  %223 = getelementptr inbounds [8 x i16]* %222, i32 0, i64 %220
  %224 = load i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = load i32* @black, align 4
  %227 = sub i32 %225, %226
  %228 = icmp sgt i32 %227, 0
  br i1 %228, label %229, label %234

; <label>:229                                     ; preds = %211
  %230 = zext i32 %219 to i64
  %231 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %230
  %232 = load i32* %231, align 4
  %233 = add i32 %232, %227
  store i32 %233, i32* %231, align 4
  br label %234

; <label>:234                                     ; preds = %229, %211
  %235 = add i32 %219, 4
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %236
  %238 = load i32* %237, align 4
  %239 = add i32 %238, 1
  store i32 %239, i32* %237, align 4
  br label %240

; <label>:240                                     ; preds = %234
  %241 = add i32 %col.1, 1
  br label %209

; <label>:242                                     ; preds = %209
  br label %243

; <label>:243                                     ; preds = %242
  %244 = add i32 %row.1, 1
  br label %206

; <label>:245                                     ; preds = %206
  %246 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 0
  %247 = load i32* %246, align 4
  %248 = icmp ne i32 %247, 0
  br i1 %248, label %249, label %280

; <label>:249                                     ; preds = %245
  %250 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 1
  %251 = load i32* %250, align 4
  %252 = icmp ne i32 %251, 0
  br i1 %252, label %253, label %280

; <label>:253                                     ; preds = %249
  %254 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 2
  %255 = load i32* %254, align 4
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %257, label %280

; <label>:257                                     ; preds = %253
  %258 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 3
  %259 = load i32* %258, align 4
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %280

; <label>:261                                     ; preds = %257
  br label %262

; <label>:262                                     ; preds = %277, %261
  %c.4 = phi i32 [ 0, %261 ], [ %278, %277 ]
  %263 = icmp ult i32 %c.4, 4
  br i1 %263, label %264, label %279

; <label>:264                                     ; preds = %262
  %265 = add i32 %c.4, 4
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %266
  %268 = load i32* %267, align 4
  %269 = uitofp i32 %268 to float
  %270 = zext i32 %c.4 to i64
  %271 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %270
  %272 = load i32* %271, align 4
  %273 = uitofp i32 %272 to float
  %274 = fdiv float %269, %273
  %275 = zext i32 %c.4 to i64
  %276 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %275
  store float %274, float* %276, align 4
  br label %277

; <label>:277                                     ; preds = %264
  %278 = add i32 %c.4, 1
  br label %262

; <label>:279                                     ; preds = %262
  br label %292

; <label>:280                                     ; preds = %257, %253, %249, %245
  %281 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %282 = fcmp une float %281, 0.000000e+00
  br i1 %282, label %283, label %287

; <label>:283                                     ; preds = %280
  %284 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %285 = fcmp une float %284, 0.000000e+00
  br i1 %285, label %286, label %287

; <label>:286                                     ; preds = %283
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([4 x float]* @pre_mul to i8*), i8* bitcast ([4 x float]* @cam_mul to i8*), i64 16, i32 16, i1 false)
  br label %291

; <label>:287                                     ; preds = %283, %280
  %288 = load %struct._IO_FILE** @stderr, align 8
  %289 = load i8** @ifname, align 8
  %290 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %288, i8* getelementptr inbounds ([38 x i8]* @.str70, i32 0, i32 0), i8* %289)
  br label %291

; <label>:291                                     ; preds = %287, %286
  br label %292

; <label>:292                                     ; preds = %291, %279
  br label %293

; <label>:293                                     ; preds = %292, %201, %198
  %294 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  %295 = fcmp oeq float %294, 0.000000e+00
  br i1 %295, label %296, label %304

; <label>:296                                     ; preds = %293
  %297 = load i32* @colors, align 4
  %298 = icmp slt i32 %297, 4
  br i1 %298, label %299, label %301

; <label>:299                                     ; preds = %296
  %300 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  br label %302

; <label>:301                                     ; preds = %296
  br label %302

; <label>:302                                     ; preds = %301, %299
  %303 = phi float [ %300, %299 ], [ 1.000000e+00, %301 ]
  store float %303, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  br label %304

; <label>:304                                     ; preds = %302, %293
  %305 = load i32* @black, align 4
  %306 = load i32* @maximum, align 4
  %307 = load float* @threshold, align 4
  %308 = fcmp une float %307, 0.000000e+00
  br i1 %308, label %309, label %310

; <label>:309                                     ; preds = %304
  call void @wavelet_denoise()
  br label %310

; <label>:310                                     ; preds = %309, %304
  %311 = load i32* @black, align 4
  %312 = load i32* @maximum, align 4
  %313 = sub i32 %312, %311
  store i32 %313, i32* @maximum, align 4
  br label %314

; <label>:314                                     ; preds = %339, %310
  %c.5 = phi i32 [ 0, %310 ], [ %340, %339 ]
  %dmin.0 = phi double [ 0x7FEFFFFFFFFFFFFF, %310 ], [ %dmin.1, %339 ]
  %dmax.0 = phi double [ 0.000000e+00, %310 ], [ %dmax.1, %339 ]
  %315 = icmp ult i32 %c.5, 4
  br i1 %315, label %316, label %341

; <label>:316                                     ; preds = %314
  %317 = zext i32 %c.5 to i64
  %318 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %317
  %319 = load float* %318, align 4
  %320 = fpext float %319 to double
  %321 = fcmp ogt double %dmin.0, %320
  br i1 %321, label %322, label %327

; <label>:322                                     ; preds = %316
  %323 = zext i32 %c.5 to i64
  %324 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %323
  %325 = load float* %324, align 4
  %326 = fpext float %325 to double
  br label %327

; <label>:327                                     ; preds = %322, %316
  %dmin.1 = phi double [ %326, %322 ], [ %dmin.0, %316 ]
  %328 = zext i32 %c.5 to i64
  %329 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %328
  %330 = load float* %329, align 4
  %331 = fpext float %330 to double
  %332 = fcmp olt double %dmax.0, %331
  br i1 %332, label %333, label %338

; <label>:333                                     ; preds = %327
  %334 = zext i32 %c.5 to i64
  %335 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %334
  %336 = load float* %335, align 4
  %337 = fpext float %336 to double
  br label %338

; <label>:338                                     ; preds = %333, %327
  %dmax.1 = phi double [ %337, %333 ], [ %dmax.0, %327 ]
  br label %339

; <label>:339                                     ; preds = %338
  %340 = add i32 %c.5, 1
  br label %314

; <label>:341                                     ; preds = %314
  %342 = load i32* @highlight, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %345, label %344

; <label>:344                                     ; preds = %341
  br label %345

; <label>:345                                     ; preds = %344, %341
  %dmax.2 = phi double [ %dmax.0, %341 ], [ %dmin.0, %344 ]
  br label %346

; <label>:346                                     ; preds = %363, %345
  %c.6 = phi i32 [ 0, %345 ], [ %364, %363 ]
  %347 = icmp ult i32 %c.6, 4
  br i1 %347, label %348, label %365

; <label>:348                                     ; preds = %346
  %349 = zext i32 %c.6 to i64
  %350 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %349
  %351 = load float* %350, align 4
  %352 = fpext float %351 to double
  %353 = fdiv double %352, %dmax.2
  %354 = fptrunc double %353 to float
  store float %354, float* %350, align 4
  %355 = fpext float %354 to double
  %356 = fmul double %355, 6.553500e+04
  %357 = load i32* @maximum, align 4
  %358 = uitofp i32 %357 to double
  %359 = fdiv double %356, %358
  %360 = fptrunc double %359 to float
  %361 = zext i32 %c.6 to i64
  %362 = getelementptr inbounds [4 x float]* %scale_mul, i32 0, i64 %361
  store float %360, float* %362, align 4
  br label %363

; <label>:363                                     ; preds = %348
  %364 = add i32 %c.6, 1
  br label %346

; <label>:365                                     ; preds = %346
  %366 = load i32* @verbose, align 4
  %367 = icmp ne i32 %366, 0
  br i1 %367, label %368, label %385

; <label>:368                                     ; preds = %365
  %369 = load %struct._IO_FILE** @stderr, align 8
  %370 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %369, i8* getelementptr inbounds ([57 x i8]* @.str71, i32 0, i32 0), i32 %305, i32 %306)
  br label %371

; <label>:371                                     ; preds = %380, %368
  %c.7 = phi i32 [ 0, %368 ], [ %381, %380 ]
  %372 = icmp ult i32 %c.7, 4
  br i1 %372, label %373, label %382

; <label>:373                                     ; preds = %371
  %374 = load %struct._IO_FILE** @stderr, align 8
  %375 = zext i32 %c.7 to i64
  %376 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %375
  %377 = load float* %376, align 4
  %378 = fpext float %377 to double
  %379 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %374, i8* getelementptr inbounds ([4 x i8]* @.str72, i32 0, i32 0), double %378)
  br label %380

; <label>:380                                     ; preds = %373
  %381 = add i32 %c.7, 1
  br label %371

; <label>:382                                     ; preds = %371
  %383 = load %struct._IO_FILE** @stderr, align 8
  %384 = call i32 @fputc(i32 10, %struct._IO_FILE* %383)
  br label %385

; <label>:385                                     ; preds = %382, %365
  %386 = load i16* @iheight, align 2
  %387 = zext i16 %386 to i32
  %388 = load i16* @iwidth, align 2
  %389 = zext i16 %388 to i32
  %390 = mul nsw i32 %387, %389
  br label %391

; <label>:391                                     ; preds = %433, %385
  %i.0 = phi i32 [ 0, %385 ], [ %434, %433 ]
  %392 = mul i32 %390, 4
  %393 = icmp ult i32 %i.0, %392
  br i1 %393, label %394, label %435

; <label>:394                                     ; preds = %391
  %395 = zext i32 %i.0 to i64
  %396 = load [4 x i16]** @image, align 8
  %397 = getelementptr inbounds [4 x i16]* %396, i64 0
  %398 = getelementptr inbounds [4 x i16]* %397, i32 0, i64 %395
  %399 = load i16* %398, align 2
  %400 = zext i16 %399 to i32
  %401 = icmp ne i32 %400, 0
  br i1 %401, label %403, label %402

; <label>:402                                     ; preds = %394
  br label %433

; <label>:403                                     ; preds = %394
  %404 = load i32* @black, align 4
  %405 = sub i32 %400, %404
  %406 = and i32 %i.0, 3
  %407 = zext i32 %406 to i64
  %408 = getelementptr inbounds [4 x float]* %scale_mul, i32 0, i64 %407
  %409 = load float* %408, align 4
  %410 = sitofp i32 %405 to float
  %411 = fmul float %410, %409
  %412 = fptosi float %411 to i32
  %413 = icmp slt i32 %412, 65535
  br i1 %413, label %414, label %415

; <label>:414                                     ; preds = %403
  br label %416

; <label>:415                                     ; preds = %403
  br label %416

; <label>:416                                     ; preds = %415, %414
  %417 = phi i32 [ %412, %414 ], [ 65535, %415 ]
  %418 = icmp sgt i32 0, %417
  br i1 %418, label %419, label %420

; <label>:419                                     ; preds = %416
  br label %426

; <label>:420                                     ; preds = %416
  %421 = icmp slt i32 %412, 65535
  br i1 %421, label %422, label %423

; <label>:422                                     ; preds = %420
  br label %424

; <label>:423                                     ; preds = %420
  br label %424

; <label>:424                                     ; preds = %423, %422
  %425 = phi i32 [ %412, %422 ], [ 65535, %423 ]
  br label %426

; <label>:426                                     ; preds = %424, %419
  %427 = phi i32 [ 0, %419 ], [ %425, %424 ]
  %428 = trunc i32 %427 to i16
  %429 = zext i32 %i.0 to i64
  %430 = load [4 x i16]** @image, align 8
  %431 = getelementptr inbounds [4 x i16]* %430, i64 0
  %432 = getelementptr inbounds [4 x i16]* %431, i32 0, i64 %429
  store i16 %428, i16* %432, align 2
  br label %433

; <label>:433                                     ; preds = %426, %402
  %434 = add i32 %i.0, 1
  br label %391

; <label>:435                                     ; preds = %391
  %436 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 0), align 8
  %437 = fcmp une double %436, 1.000000e+00
  br i1 %437, label %441, label %438

; <label>:438                                     ; preds = %435
  %439 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 2), align 8
  %440 = fcmp une double %439, 1.000000e+00
  br i1 %440, label %441, label %600

; <label>:441                                     ; preds = %438, %435
  %442 = load i32* @colors, align 4
  %443 = icmp eq i32 %442, 3
  br i1 %443, label %444, label %600

; <label>:444                                     ; preds = %441
  %445 = load i32* @verbose, align 4
  %446 = icmp ne i32 %445, 0
  br i1 %446, label %447, label %450

; <label>:447                                     ; preds = %444
  %448 = load %struct._IO_FILE** @stderr, align 8
  %449 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %448, i8* getelementptr inbounds ([36 x i8]* @.str73, i32 0, i32 0))
  br label %450

; <label>:450                                     ; preds = %447, %444
  br label %451

; <label>:451                                     ; preds = %597, %450
  %c.8 = phi i32 [ 0, %450 ], [ %598, %597 ]
  %452 = icmp ult i32 %c.8, 4
  br i1 %452, label %453, label %599

; <label>:453                                     ; preds = %451
  %454 = zext i32 %c.8 to i64
  %455 = getelementptr inbounds [4 x double]* @aber, i32 0, i64 %454
  %456 = load double* %455, align 8
  %457 = fcmp oeq double %456, 1.000000e+00
  br i1 %457, label %458, label %459

; <label>:458                                     ; preds = %453
  br label %597

; <label>:459                                     ; preds = %453
  %460 = zext i32 %390 to i64
  %461 = mul i64 %460, 2
  %462 = call noalias i8* @malloc(i64 %461) #4
  %463 = bitcast i8* %462 to i16*
  %464 = bitcast i16* %463 to i8*
  call void @merror(i8* %464, i8* getelementptr inbounds ([15 x i8]* @.str74, i32 0, i32 0))
  br label %465

; <label>:465                                     ; preds = %476, %459
  %i.1 = phi i32 [ 0, %459 ], [ %477, %476 ]
  %466 = icmp ult i32 %i.1, %390
  br i1 %466, label %467, label %478

; <label>:467                                     ; preds = %465
  %468 = zext i32 %c.8 to i64
  %469 = zext i32 %i.1 to i64
  %470 = load [4 x i16]** @image, align 8
  %471 = getelementptr inbounds [4 x i16]* %470, i64 %469
  %472 = getelementptr inbounds [4 x i16]* %471, i32 0, i64 %468
  %473 = load i16* %472, align 2
  %474 = zext i32 %i.1 to i64
  %475 = getelementptr inbounds i16* %463, i64 %474
  store i16 %473, i16* %475, align 2
  br label %476

; <label>:476                                     ; preds = %467
  %477 = add i32 %i.1, 1
  br label %465

; <label>:478                                     ; preds = %465
  br label %479

; <label>:479                                     ; preds = %593, %478
  %row.2 = phi i32 [ 0, %478 ], [ %594, %593 ]
  %480 = load i16* @iheight, align 2
  %481 = zext i16 %480 to i32
  %482 = icmp ult i32 %row.2, %481
  br i1 %482, label %483, label %595

; <label>:483                                     ; preds = %479
  %484 = uitofp i32 %row.2 to double
  %485 = load i16* @iheight, align 2
  %486 = zext i16 %485 to i32
  %487 = sitofp i32 %486 to double
  %488 = fmul double %487, 5.000000e-01
  %489 = fsub double %484, %488
  %490 = zext i32 %c.8 to i64
  %491 = getelementptr inbounds [4 x double]* @aber, i32 0, i64 %490
  %492 = load double* %491, align 8
  %493 = fmul double %489, %492
  %494 = load i16* @iheight, align 2
  %495 = zext i16 %494 to i32
  %496 = sitofp i32 %495 to double
  %497 = fmul double %496, 5.000000e-01
  %498 = fadd double %493, %497
  %499 = fptrunc double %498 to float
  %500 = fptoui float %499 to i32
  %501 = load i16* @iheight, align 2
  %502 = zext i16 %501 to i32
  %503 = sub nsw i32 %502, 2
  %504 = icmp ugt i32 %500, %503
  br i1 %504, label %505, label %506

; <label>:505                                     ; preds = %483
  br label %593

; <label>:506                                     ; preds = %483
  %507 = uitofp i32 %500 to float
  %508 = fsub float %499, %507
  br label %509

; <label>:509                                     ; preds = %590, %506
  %col.2 = phi i32 [ 0, %506 ], [ %591, %590 ]
  %510 = load i16* @iwidth, align 2
  %511 = zext i16 %510 to i32
  %512 = icmp ult i32 %col.2, %511
  br i1 %512, label %513, label %592

; <label>:513                                     ; preds = %509
  %514 = uitofp i32 %col.2 to double
  %515 = load i16* @iwidth, align 2
  %516 = zext i16 %515 to i32
  %517 = sitofp i32 %516 to double
  %518 = fmul double %517, 5.000000e-01
  %519 = fsub double %514, %518
  %520 = zext i32 %c.8 to i64
  %521 = getelementptr inbounds [4 x double]* @aber, i32 0, i64 %520
  %522 = load double* %521, align 8
  %523 = fmul double %519, %522
  %524 = load i16* @iwidth, align 2
  %525 = zext i16 %524 to i32
  %526 = sitofp i32 %525 to double
  %527 = fmul double %526, 5.000000e-01
  %528 = fadd double %523, %527
  %529 = fptrunc double %528 to float
  %530 = fptoui float %529 to i32
  %531 = load i16* @iwidth, align 2
  %532 = zext i16 %531 to i32
  %533 = sub nsw i32 %532, 2
  %534 = icmp ugt i32 %530, %533
  br i1 %534, label %535, label %536

; <label>:535                                     ; preds = %513
  br label %590

; <label>:536                                     ; preds = %513
  %537 = uitofp i32 %530 to float
  %538 = fsub float %529, %537
  %539 = load i16* @iwidth, align 2
  %540 = zext i16 %539 to i32
  %541 = mul i32 %500, %540
  %542 = zext i32 %541 to i64
  %543 = getelementptr inbounds i16* %463, i64 %542
  %544 = zext i32 %530 to i64
  %545 = getelementptr inbounds i16* %543, i64 %544
  %546 = getelementptr inbounds i16* %545, i64 0
  %547 = load i16* %546, align 2
  %548 = zext i16 %547 to i32
  %549 = sitofp i32 %548 to float
  %550 = fsub float 1.000000e+00, %538
  %551 = fmul float %549, %550
  %552 = getelementptr inbounds i16* %545, i64 1
  %553 = load i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = sitofp i32 %554 to float
  %556 = fmul float %555, %538
  %557 = fadd float %551, %556
  %558 = fsub float 1.000000e+00, %508
  %559 = fmul float %557, %558
  %560 = load i16* @iwidth, align 2
  %561 = zext i16 %560 to i64
  %562 = getelementptr inbounds i16* %545, i64 %561
  %563 = load i16* %562, align 2
  %564 = zext i16 %563 to i32
  %565 = sitofp i32 %564 to float
  %566 = fsub float 1.000000e+00, %538
  %567 = fmul float %565, %566
  %568 = load i16* @iwidth, align 2
  %569 = zext i16 %568 to i32
  %570 = add nsw i32 %569, 1
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds i16* %545, i64 %571
  %573 = load i16* %572, align 2
  %574 = zext i16 %573 to i32
  %575 = sitofp i32 %574 to float
  %576 = fmul float %575, %538
  %577 = fadd float %567, %576
  %578 = fmul float %577, %508
  %579 = fadd float %559, %578
  %580 = fptoui float %579 to i16
  %581 = zext i32 %c.8 to i64
  %582 = load i16* @iwidth, align 2
  %583 = zext i16 %582 to i32
  %584 = mul i32 %row.2, %583
  %585 = add i32 %584, %col.2
  %586 = zext i32 %585 to i64
  %587 = load [4 x i16]** @image, align 8
  %588 = getelementptr inbounds [4 x i16]* %587, i64 %586
  %589 = getelementptr inbounds [4 x i16]* %588, i32 0, i64 %581
  store i16 %580, i16* %589, align 2
  br label %590

; <label>:590                                     ; preds = %536, %535
  %591 = add i32 %col.2, 1
  br label %509

; <label>:592                                     ; preds = %509
  br label %593

; <label>:593                                     ; preds = %592, %505
  %594 = add i32 %row.2, 1
  br label %479

; <label>:595                                     ; preds = %479
  %596 = bitcast i16* %463 to i8*
  call void @free(i8* %596) #4
  br label %597

; <label>:597                                     ; preds = %595, %458
  %598 = add i32 %c.8, 2
  br label %451

; <label>:599                                     ; preds = %451
  br label %600

; <label>:600                                     ; preds = %599, %441, %438
  ret void
}

; Function Attrs: nounwind uwtable
define void @pre_interpolate() #0 {
  %1 = load i16* @shrink, align 2
  %2 = icmp ne i16 %1, 0
  br i1 %2, label %3, label %59

; <label>:3                                       ; preds = %0
  %4 = load i32* @half_size, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %3
  %7 = load i16* @iheight, align 2
  store i16 %7, i16* @height, align 2
  %8 = load i16* @iwidth, align 2
  store i16 %8, i16* @width, align 2
  br label %58

; <label>:9                                       ; preds = %3
  %10 = load i16* @height, align 2
  %11 = zext i16 %10 to i32
  %12 = load i16* @width, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nsw i32 %11, %13
  %15 = sext i32 %14 to i64
  %16 = call noalias i8* @calloc(i64 %15, i64 8) #4
  %17 = bitcast i8* %16 to [4 x i16]*
  %18 = bitcast [4 x i16]* %17 to i8*
  call void @merror(i8* %18, i8* getelementptr inbounds ([18 x i8]* @.str75, i32 0, i32 0))
  br label %19

; <label>:19                                      ; preds = %53, %9
  %row.0 = phi i32 [ 0, %9 ], [ %54, %53 ]
  %20 = load i16* @height, align 2
  %21 = zext i16 %20 to i32
  %22 = icmp slt i32 %row.0, %21
  br i1 %22, label %23, label %55

; <label>:23                                      ; preds = %19
  br label %24

; <label>:24                                      ; preds = %50, %23
  %col.0 = phi i32 [ 0, %23 ], [ %51, %50 ]
  %25 = load i16* @width, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp slt i32 %col.0, %26
  br i1 %27, label %28, label %52

; <label>:28                                      ; preds = %24
  %29 = call i32 @fc(i32 %row.0, i32 %col.0)
  %30 = sext i32 %29 to i64
  %31 = ashr i32 %row.0, 1
  %32 = load i16* @iwidth, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nsw i32 %31, %33
  %35 = ashr i32 %col.0, 1
  %36 = add nsw i32 %34, %35
  %37 = sext i32 %36 to i64
  %38 = load [4 x i16]** @image, align 8
  %39 = getelementptr inbounds [4 x i16]* %38, i64 %37
  %40 = getelementptr inbounds [4 x i16]* %39, i32 0, i64 %30
  %41 = load i16* %40, align 2
  %42 = sext i32 %29 to i64
  %43 = load i16* @width, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nsw i32 %row.0, %44
  %46 = add nsw i32 %45, %col.0
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [4 x i16]* %17, i64 %47
  %49 = getelementptr inbounds [4 x i16]* %48, i32 0, i64 %42
  store i16 %41, i16* %49, align 2
  br label %50

; <label>:50                                      ; preds = %28
  %51 = add nsw i32 %col.0, 1
  br label %24

; <label>:52                                      ; preds = %24
  br label %53

; <label>:53                                      ; preds = %52
  %54 = add nsw i32 %row.0, 1
  br label %19

; <label>:55                                      ; preds = %19
  %56 = load [4 x i16]** @image, align 8
  %57 = bitcast [4 x i16]* %56 to i8*
  call void @free(i8* %57) #4
  store [4 x i16]* %17, [4 x i16]** @image, align 8
  store i16 0, i16* @shrink, align 2
  br label %58

; <label>:58                                      ; preds = %55, %6
  br label %59

; <label>:59                                      ; preds = %58, %0
  %60 = load i32* @filters, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %124

; <label>:62                                      ; preds = %59
  %63 = load i32* @colors, align 4
  %64 = icmp eq i32 %63, 3
  br i1 %64, label %65, label %124

; <label>:65                                      ; preds = %62
  %66 = load i32* @four_color_rgb, align 4
  store i32 %66, i32* @mix_green, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %71

; <label>:68                                      ; preds = %65
  %69 = load i32* @colors, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* @colors, align 4
  br label %123

; <label>:71                                      ; preds = %65
  %72 = load i32* @filters, align 4
  %73 = lshr i32 %72, 4
  %74 = and i32 %73, 3
  %75 = lshr i32 %74, 1
  br label %76

; <label>:76                                      ; preds = %114, %71
  %row.1 = phi i32 [ %75, %71 ], [ %115, %114 ]
  %77 = load i16* @height, align 2
  %78 = zext i16 %77 to i32
  %79 = icmp slt i32 %row.1, %78
  br i1 %79, label %80, label %116

; <label>:80                                      ; preds = %76
  %81 = load i32* @filters, align 4
  %82 = shl i32 %row.1, 1
  %83 = and i32 %82, 14
  %84 = add nsw i32 %83, 1
  %85 = shl i32 %84, 1
  %86 = lshr i32 %81, %85
  %87 = and i32 %86, 3
  %88 = and i32 %87, 1
  br label %89

; <label>:89                                      ; preds = %111, %80
  %col.1 = phi i32 [ %88, %80 ], [ %112, %111 ]
  %90 = load i16* @width, align 2
  %91 = zext i16 %90 to i32
  %92 = icmp slt i32 %col.1, %91
  br i1 %92, label %93, label %113

; <label>:93                                      ; preds = %89
  %94 = load i16* @width, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nsw i32 %row.1, %95
  %97 = add nsw i32 %96, %col.1
  %98 = sext i32 %97 to i64
  %99 = load [4 x i16]** @image, align 8
  %100 = getelementptr inbounds [4 x i16]* %99, i64 %98
  %101 = getelementptr inbounds [4 x i16]* %100, i32 0, i64 3
  %102 = load i16* %101, align 2
  %103 = load i16* @width, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nsw i32 %row.1, %104
  %106 = add nsw i32 %105, %col.1
  %107 = sext i32 %106 to i64
  %108 = load [4 x i16]** @image, align 8
  %109 = getelementptr inbounds [4 x i16]* %108, i64 %107
  %110 = getelementptr inbounds [4 x i16]* %109, i32 0, i64 1
  store i16 %102, i16* %110, align 2
  br label %111

; <label>:111                                     ; preds = %93
  %112 = add nsw i32 %col.1, 2
  br label %89

; <label>:113                                     ; preds = %89
  br label %114

; <label>:114                                     ; preds = %113
  %115 = add nsw i32 %row.1, 2
  br label %76

; <label>:116                                     ; preds = %76
  %117 = load i32* @filters, align 4
  %118 = and i32 %117, 1431655765
  %119 = shl i32 %118, 1
  %120 = xor i32 %119, -1
  %121 = load i32* @filters, align 4
  %122 = and i32 %121, %120
  store i32 %122, i32* @filters, align 4
  br label %123

; <label>:123                                     ; preds = %116, %68
  br label %124

; <label>:124                                     ; preds = %123, %62, %59
  %125 = load i32* @half_size, align 4
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %128

; <label>:127                                     ; preds = %124
  store i32 0, i32* @filters, align 4
  br label %128

; <label>:128                                     ; preds = %127, %124
  ret void
}

; Function Attrs: nounwind uwtable
define void @border_interpolate(i32 %border) #0 {
  %sum = alloca [8 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %109, %0
  %row.0 = phi i32 [ 0, %0 ], [ %110, %109 ]
  %2 = load i16* @height, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp ult i32 %row.0, %3
  br i1 %4, label %5, label %111

; <label>:5                                       ; preds = %1
  br label %6

; <label>:6                                       ; preds = %106, %5
  %col.0 = phi i32 [ 0, %5 ], [ %107, %106 ]
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp ult i32 %col.0, %8
  br i1 %9, label %10, label %108

; <label>:10                                      ; preds = %6
  %11 = icmp eq i32 %col.0, %border
  br i1 %11, label %12, label %23

; <label>:12                                      ; preds = %10
  %13 = icmp uge i32 %row.0, %border
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %12
  %15 = load i16* @height, align 2
  %16 = zext i16 %15 to i32
  %17 = sub nsw i32 %16, %border
  %18 = icmp ult i32 %row.0, %17
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %14
  %20 = load i16* @width, align 2
  %21 = zext i16 %20 to i32
  %22 = sub nsw i32 %21, %border
  br label %23

; <label>:23                                      ; preds = %19, %14, %12, %10
  %col.1 = phi i32 [ %22, %19 ], [ %col.0, %14 ], [ %col.0, %12 ], [ %col.0, %10 ]
  %24 = bitcast [8 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %24, i8 0, i64 32, i32 16, i1 false)
  %25 = sub i32 %row.0, 1
  br label %26

; <label>:26                                      ; preds = %68, %23
  %y.0 = phi i32 [ %25, %23 ], [ %69, %68 ]
  %27 = add i32 %row.0, 2
  %28 = icmp ne i32 %y.0, %27
  br i1 %28, label %29, label %70

; <label>:29                                      ; preds = %26
  %30 = sub i32 %col.1, 1
  br label %31

; <label>:31                                      ; preds = %65, %29
  %x.0 = phi i32 [ %30, %29 ], [ %66, %65 ]
  %32 = add i32 %col.1, 2
  %33 = icmp ne i32 %x.0, %32
  br i1 %33, label %34, label %67

; <label>:34                                      ; preds = %31
  %35 = load i16* @height, align 2
  %36 = zext i16 %35 to i32
  %37 = icmp ult i32 %y.0, %36
  br i1 %37, label %38, label %64

; <label>:38                                      ; preds = %34
  %39 = load i16* @width, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp ult i32 %x.0, %40
  br i1 %41, label %42, label %64

; <label>:42                                      ; preds = %38
  %43 = call i32 @fc(i32 %y.0, i32 %x.0)
  %44 = zext i32 %43 to i64
  %45 = load i16* @width, align 2
  %46 = zext i16 %45 to i32
  %47 = mul i32 %y.0, %46
  %48 = add i32 %47, %x.0
  %49 = zext i32 %48 to i64
  %50 = load [4 x i16]** @image, align 8
  %51 = getelementptr inbounds [4 x i16]* %50, i64 %49
  %52 = getelementptr inbounds [4 x i16]* %51, i32 0, i64 %44
  %53 = load i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = zext i32 %43 to i64
  %56 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %55
  %57 = load i32* %56, align 4
  %58 = add i32 %57, %54
  store i32 %58, i32* %56, align 4
  %59 = add i32 %43, 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %60
  %62 = load i32* %61, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* %61, align 4
  br label %64

; <label>:64                                      ; preds = %42, %38, %34
  br label %65

; <label>:65                                      ; preds = %64
  %66 = add i32 %x.0, 1
  br label %31

; <label>:67                                      ; preds = %31
  br label %68

; <label>:68                                      ; preds = %67
  %69 = add i32 %y.0, 1
  br label %26

; <label>:70                                      ; preds = %26
  %71 = call i32 @fc(i32 %row.0, i32 %col.1)
  br label %72

; <label>:72                                      ; preds = %103, %70
  %c.0 = phi i32 [ 0, %70 ], [ %104, %103 ]
  %73 = load i32* @colors, align 4
  %74 = icmp ult i32 %c.0, %73
  br i1 %74, label %75, label %105

; <label>:75                                      ; preds = %72
  %76 = icmp ne i32 %c.0, %71
  br i1 %76, label %77, label %102

; <label>:77                                      ; preds = %75
  %78 = add i32 %c.0, 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %79
  %81 = load i32* %80, align 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %102

; <label>:83                                      ; preds = %77
  %84 = zext i32 %c.0 to i64
  %85 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %84
  %86 = load i32* %85, align 4
  %87 = add i32 %c.0, 4
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %88
  %90 = load i32* %89, align 4
  %91 = udiv i32 %86, %90
  %92 = trunc i32 %91 to i16
  %93 = zext i32 %c.0 to i64
  %94 = load i16* @width, align 2
  %95 = zext i16 %94 to i32
  %96 = mul i32 %row.0, %95
  %97 = add i32 %96, %col.1
  %98 = zext i32 %97 to i64
  %99 = load [4 x i16]** @image, align 8
  %100 = getelementptr inbounds [4 x i16]* %99, i64 %98
  %101 = getelementptr inbounds [4 x i16]* %100, i32 0, i64 %93
  store i16 %92, i16* %101, align 2
  br label %102

; <label>:102                                     ; preds = %83, %77, %75
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add i32 %c.0, 1
  br label %72

; <label>:105                                     ; preds = %72
  br label %106

; <label>:106                                     ; preds = %105
  %107 = add i32 %col.1, 1
  br label %6

; <label>:108                                     ; preds = %6
  br label %109

; <label>:109                                     ; preds = %108
  %110 = add i32 %row.0, 1
  br label %1

; <label>:111                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @lin_interpolate() #0 {
  %code = alloca [16 x [16 x [32 x i32]]], align 16
  %sum = alloca [4 x i32], align 16
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([27 x i8]* @.str76, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  call void @border_interpolate(i32 1)
  br label %7

; <label>:7                                       ; preds = %76, %6
  %row.0 = phi i32 [ 0, %6 ], [ %77, %76 ]
  %8 = icmp slt i32 %row.0, 16
  br i1 %8, label %9, label %78

; <label>:9                                       ; preds = %7
  br label %10

; <label>:10                                      ; preds = %73, %9
  %col.0 = phi i32 [ 0, %9 ], [ %74, %73 ]
  %11 = icmp slt i32 %col.0, 16
  br i1 %11, label %12, label %75

; <label>:12                                      ; preds = %10
  %13 = sext i32 %col.0 to i64
  %14 = sext i32 %row.0 to i64
  %15 = getelementptr inbounds [16 x [16 x [32 x i32]]]* %code, i32 0, i64 %14
  %16 = getelementptr inbounds [16 x [32 x i32]]* %15, i32 0, i64 %13
  %17 = getelementptr inbounds [32 x i32]* %16, i32 0, i32 0
  %18 = bitcast [4 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %18, i8 0, i64 16, i32 16, i1 false)
  br label %19

; <label>:19                                      ; preds = %53, %12
  %y.0 = phi i32 [ -1, %12 ], [ %54, %53 ]
  %ip.0 = phi i32* [ %17, %12 ], [ %ip.1, %53 ]
  %20 = icmp sle i32 %y.0, 1
  br i1 %20, label %21, label %55

; <label>:21                                      ; preds = %19
  br label %22

; <label>:22                                      ; preds = %50, %21
  %x.0 = phi i32 [ -1, %21 ], [ %51, %50 ]
  %ip.1 = phi i32* [ %ip.0, %21 ], [ %ip.2, %50 ]
  %23 = icmp sle i32 %x.0, 1
  br i1 %23, label %24, label %52

; <label>:24                                      ; preds = %22
  %25 = icmp eq i32 %y.0, 0
  %26 = zext i1 %25 to i32
  %27 = icmp eq i32 %x.0, 0
  %28 = zext i1 %27 to i32
  %29 = add nsw i32 %26, %28
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %31, label %32

; <label>:31                                      ; preds = %24
  br label %50

; <label>:32                                      ; preds = %24
  %33 = add nsw i32 %row.0, %y.0
  %34 = add nsw i32 %col.0, %x.0
  %35 = call i32 @fc(i32 %33, i32 %34)
  %36 = load i16* @width, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nsw i32 %37, %y.0
  %39 = add nsw i32 %38, %x.0
  %40 = mul nsw i32 %39, 4
  %41 = add nsw i32 %40, %35
  %42 = getelementptr inbounds i32* %ip.1, i32 1
  store i32 %41, i32* %ip.1, align 4
  %43 = getelementptr inbounds i32* %42, i32 1
  store i32 %29, i32* %42, align 4
  %44 = getelementptr inbounds i32* %43, i32 1
  store i32 %35, i32* %43, align 4
  %45 = shl i32 1, %29
  %46 = sext i32 %35 to i64
  %47 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %46
  %48 = load i32* %47, align 4
  %49 = add nsw i32 %48, %45
  store i32 %49, i32* %47, align 4
  br label %50

; <label>:50                                      ; preds = %32, %31
  %ip.2 = phi i32* [ %ip.1, %31 ], [ %44, %32 ]
  %51 = add nsw i32 %x.0, 1
  br label %22

; <label>:52                                      ; preds = %22
  br label %53

; <label>:53                                      ; preds = %52
  %54 = add nsw i32 %y.0, 1
  br label %19

; <label>:55                                      ; preds = %19
  br label %56

; <label>:56                                      ; preds = %70, %55
  %c.0 = phi i32 [ 0, %55 ], [ %71, %70 ]
  %ip.3 = phi i32* [ %ip.0, %55 ], [ %ip.4, %70 ]
  %57 = load i32* @colors, align 4
  %58 = icmp slt i32 %c.0, %57
  br i1 %58, label %59, label %72

; <label>:59                                      ; preds = %56
  %60 = call i32 @fc(i32 %row.0, i32 %col.0)
  %61 = icmp ne i32 %c.0, %60
  br i1 %61, label %62, label %69

; <label>:62                                      ; preds = %59
  %63 = getelementptr inbounds i32* %ip.3, i32 1
  store i32 %c.0, i32* %ip.3, align 4
  %64 = sext i32 %c.0 to i64
  %65 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %64
  %66 = load i32* %65, align 4
  %67 = sdiv i32 256, %66
  %68 = getelementptr inbounds i32* %63, i32 1
  store i32 %67, i32* %63, align 4
  br label %69

; <label>:69                                      ; preds = %62, %59
  %ip.4 = phi i32* [ %68, %62 ], [ %ip.3, %59 ]
  br label %70

; <label>:70                                      ; preds = %69
  %71 = add nsw i32 %c.0, 1
  br label %56

; <label>:72                                      ; preds = %56
  br label %73

; <label>:73                                      ; preds = %72
  %74 = add nsw i32 %col.0, 1
  br label %10

; <label>:75                                      ; preds = %10
  br label %76

; <label>:76                                      ; preds = %75
  %77 = add nsw i32 %row.0, 1
  br label %7

; <label>:78                                      ; preds = %7
  br label %79

; <label>:79                                      ; preds = %154, %78
  %row.1 = phi i32 [ 1, %78 ], [ %155, %154 ]
  %80 = load i16* @height, align 2
  %81 = zext i16 %80 to i32
  %82 = sub nsw i32 %81, 1
  %83 = icmp slt i32 %row.1, %82
  br i1 %83, label %84, label %156

; <label>:84                                      ; preds = %79
  br label %85

; <label>:85                                      ; preds = %151, %84
  %col.1 = phi i32 [ 1, %84 ], [ %152, %151 ]
  %86 = load i16* @width, align 2
  %87 = zext i16 %86 to i32
  %88 = sub nsw i32 %87, 1
  %89 = icmp slt i32 %col.1, %88
  br i1 %89, label %90, label %153

; <label>:90                                      ; preds = %85
  %91 = load i16* @width, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nsw i32 %row.1, %92
  %94 = add nsw i32 %93, %col.1
  %95 = sext i32 %94 to i64
  %96 = load [4 x i16]** @image, align 8
  %97 = getelementptr inbounds [4 x i16]* %96, i64 %95
  %98 = getelementptr inbounds [4 x i16]* %97, i32 0, i32 0
  %99 = and i32 %col.1, 15
  %100 = sext i32 %99 to i64
  %101 = and i32 %row.1, 15
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [16 x [16 x [32 x i32]]]* %code, i32 0, i64 %102
  %104 = getelementptr inbounds [16 x [32 x i32]]* %103, i32 0, i64 %100
  %105 = getelementptr inbounds [32 x i32]* %104, i32 0, i32 0
  %106 = bitcast [4 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %106, i8 0, i64 16, i32 16, i1 false)
  br label %107

; <label>:107                                     ; preds = %126, %90
  %i.0 = phi i32 [ 8, %90 ], [ %108, %126 ]
  %ip.5 = phi i32* [ %105, %90 ], [ %127, %126 ]
  %108 = add nsw i32 %i.0, -1
  %109 = icmp ne i32 %i.0, 0
  br i1 %109, label %110, label %128

; <label>:110                                     ; preds = %107
  %111 = getelementptr inbounds i32* %ip.5, i64 0
  %112 = load i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i16* %98, i64 %113
  %115 = load i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = getelementptr inbounds i32* %ip.5, i64 1
  %118 = load i32* %117, align 4
  %119 = shl i32 %116, %118
  %120 = getelementptr inbounds i32* %ip.5, i64 2
  %121 = load i32* %120, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %122
  %124 = load i32* %123, align 4
  %125 = add nsw i32 %124, %119
  store i32 %125, i32* %123, align 4
  br label %126

; <label>:126                                     ; preds = %110
  %127 = getelementptr inbounds i32* %ip.5, i64 3
  br label %107

; <label>:128                                     ; preds = %107
  %129 = load i32* @colors, align 4
  br label %130

; <label>:130                                     ; preds = %148, %128
  %i.1 = phi i32 [ %129, %128 ], [ %131, %148 ]
  %ip.6 = phi i32* [ %ip.5, %128 ], [ %149, %148 ]
  %131 = add nsw i32 %i.1, -1
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %150

; <label>:133                                     ; preds = %130
  %134 = getelementptr inbounds i32* %ip.6, i64 0
  %135 = load i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %136
  %138 = load i32* %137, align 4
  %139 = getelementptr inbounds i32* %ip.6, i64 1
  %140 = load i32* %139, align 4
  %141 = mul nsw i32 %138, %140
  %142 = ashr i32 %141, 8
  %143 = trunc i32 %142 to i16
  %144 = getelementptr inbounds i32* %ip.6, i64 0
  %145 = load i32* %144, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i16* %98, i64 %146
  store i16 %143, i16* %147, align 2
  br label %148

; <label>:148                                     ; preds = %133
  %149 = getelementptr inbounds i32* %ip.6, i64 2
  br label %130

; <label>:150                                     ; preds = %130
  br label %151

; <label>:151                                     ; preds = %150
  %152 = add nsw i32 %col.1, 1
  br label %85

; <label>:153                                     ; preds = %85
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %row.1, 1
  br label %79

; <label>:156                                     ; preds = %79
  ret void
}

; Function Attrs: nounwind uwtable
define void @vng_interpolate() #0 {
  %brow = alloca [5 x [4 x i16]*], align 16
  %code = alloca [16 x [16 x i32*]], align 16
  %gval = alloca [8 x i32], align 16
  %sum = alloca [4 x i32], align 16
  call void @lin_interpolate()
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8]* @.str77, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = load i32* @filters, align 4
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  br label %10

; <label>:10                                      ; preds = %9, %6
  %pcol.0 = phi i32 [ 15, %9 ], [ 1, %6 ]
  %prow.0 = phi i32 [ 15, %9 ], [ 7, %6 ]
  %11 = add nsw i32 %prow.0, 1
  %12 = add nsw i32 %pcol.0, 1
  %13 = mul nsw i32 %11, %12
  %14 = sext i32 %13 to i64
  %15 = call noalias i8* @calloc(i64 %14, i64 1280) #4
  %16 = bitcast i8* %15 to i32*
  %17 = bitcast i32* %16 to i8*
  call void @merror(i8* %17, i8* getelementptr inbounds ([18 x i8]* @.str78, i32 0, i32 0))
  br label %18

; <label>:18                                      ; preds = %161, %10
  %row.0 = phi i32 [ 0, %10 ], [ %162, %161 ]
  %ip.0 = phi i32* [ %16, %10 ], [ %ip.1, %161 ]
  %19 = icmp sle i32 %row.0, %prow.0
  br i1 %19, label %20, label %163

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %158, %20
  %col.0 = phi i32 [ 0, %20 ], [ %159, %158 ]
  %ip.1 = phi i32* [ %ip.0, %20 ], [ %ip.6, %158 ]
  %22 = icmp sle i32 %col.0, %pcol.0
  br i1 %22, label %23, label %160

; <label>:23                                      ; preds = %21
  %24 = sext i32 %col.0 to i64
  %25 = sext i32 %row.0 to i64
  %26 = getelementptr inbounds [16 x [16 x i32*]]* %code, i32 0, i64 %25
  %27 = getelementptr inbounds [16 x i32*]* %26, i32 0, i64 %24
  store i32* %ip.1, i32** %27, align 8
  store i8* getelementptr inbounds ([384 x i8]* @vng_interpolate.terms, i32 0, i32 0), i8** @vng_interpolate.cp, align 8
  br label %28

; <label>:28                                      ; preds = %111, %23
  %t.0 = phi i32 [ 0, %23 ], [ %112, %111 ]
  %ip.2 = phi i32* [ %ip.1, %23 ], [ %ip.5, %111 ]
  %29 = icmp slt i32 %t.0, 64
  br i1 %29, label %30, label %113

; <label>:30                                      ; preds = %28
  %31 = load i8** @vng_interpolate.cp, align 8
  %32 = getelementptr inbounds i8* %31, i32 1
  store i8* %32, i8** @vng_interpolate.cp, align 8
  %33 = load i8* %31, align 1
  %34 = sext i8 %33 to i32
  %35 = load i8** @vng_interpolate.cp, align 8
  %36 = getelementptr inbounds i8* %35, i32 1
  store i8* %36, i8** @vng_interpolate.cp, align 8
  %37 = load i8* %35, align 1
  %38 = sext i8 %37 to i32
  %39 = load i8** @vng_interpolate.cp, align 8
  %40 = getelementptr inbounds i8* %39, i32 1
  store i8* %40, i8** @vng_interpolate.cp, align 8
  %41 = load i8* %39, align 1
  %42 = sext i8 %41 to i32
  %43 = load i8** @vng_interpolate.cp, align 8
  %44 = getelementptr inbounds i8* %43, i32 1
  store i8* %44, i8** @vng_interpolate.cp, align 8
  %45 = load i8* %43, align 1
  %46 = sext i8 %45 to i32
  %47 = load i8** @vng_interpolate.cp, align 8
  %48 = getelementptr inbounds i8* %47, i32 1
  store i8* %48, i8** @vng_interpolate.cp, align 8
  %49 = load i8* %47, align 1
  %50 = sext i8 %49 to i32
  %51 = load i8** @vng_interpolate.cp, align 8
  %52 = getelementptr inbounds i8* %51, i32 1
  store i8* %52, i8** @vng_interpolate.cp, align 8
  %53 = load i8* %51, align 1
  %54 = sext i8 %53 to i32
  %55 = add nsw i32 %row.0, %34
  %56 = add nsw i32 %col.0, %38
  %57 = call i32 @fc(i32 %55, i32 %56)
  %58 = add nsw i32 %row.0, %42
  %59 = add nsw i32 %col.0, %46
  %60 = call i32 @fc(i32 %58, i32 %59)
  %61 = icmp ne i32 %60, %57
  br i1 %61, label %62, label %63

; <label>:62                                      ; preds = %30
  br label %111

; <label>:63                                      ; preds = %30
  %64 = add nsw i32 %col.0, 1
  %65 = call i32 @fc(i32 %row.0, i32 %64)
  %66 = icmp eq i32 %65, %57
  br i1 %66, label %67, label %71

; <label>:67                                      ; preds = %63
  %68 = add nsw i32 %row.0, 1
  %69 = call i32 @fc(i32 %68, i32 %col.0)
  %70 = icmp eq i32 %69, %57
  br label %71

; <label>:71                                      ; preds = %67, %63
  %72 = phi i1 [ false, %63 ], [ %70, %67 ]
  %73 = select i1 %72, i32 2, i32 1
  %74 = sub nsw i32 %34, %42
  %75 = call i32 @abs(i32 %74) #9
  %76 = icmp eq i32 %75, %73
  br i1 %76, label %77, label %82

; <label>:77                                      ; preds = %71
  %78 = sub nsw i32 %38, %46
  %79 = call i32 @abs(i32 %78) #9
  %80 = icmp eq i32 %79, %73
  br i1 %80, label %81, label %82

; <label>:81                                      ; preds = %77
  br label %111

; <label>:82                                      ; preds = %77, %71
  %83 = load i16* @width, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nsw i32 %34, %84
  %86 = add nsw i32 %85, %38
  %87 = mul nsw i32 %86, 4
  %88 = add nsw i32 %87, %57
  %89 = getelementptr inbounds i32* %ip.2, i32 1
  store i32 %88, i32* %ip.2, align 4
  %90 = load i16* @width, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nsw i32 %42, %91
  %93 = add nsw i32 %92, %46
  %94 = mul nsw i32 %93, 4
  %95 = add nsw i32 %94, %57
  %96 = getelementptr inbounds i32* %89, i32 1
  store i32 %95, i32* %89, align 4
  %97 = getelementptr inbounds i32* %96, i32 1
  store i32 %50, i32* %96, align 4
  br label %98

; <label>:98                                      ; preds = %107, %82
  %g.0 = phi i32 [ 0, %82 ], [ %108, %107 ]
  %ip.3 = phi i32* [ %97, %82 ], [ %ip.4, %107 ]
  %99 = icmp slt i32 %g.0, 8
  br i1 %99, label %100, label %109

; <label>:100                                     ; preds = %98
  %101 = shl i32 1, %g.0
  %102 = and i32 %54, %101
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %106

; <label>:104                                     ; preds = %100
  %105 = getelementptr inbounds i32* %ip.3, i32 1
  store i32 %g.0, i32* %ip.3, align 4
  br label %106

; <label>:106                                     ; preds = %104, %100
  %ip.4 = phi i32* [ %105, %104 ], [ %ip.3, %100 ]
  br label %107

; <label>:107                                     ; preds = %106
  %108 = add nsw i32 %g.0, 1
  br label %98

; <label>:109                                     ; preds = %98
  %110 = getelementptr inbounds i32* %ip.3, i32 1
  store i32 -1, i32* %ip.3, align 4
  br label %111

; <label>:111                                     ; preds = %109, %81, %62
  %ip.5 = phi i32* [ %ip.2, %62 ], [ %ip.2, %81 ], [ %110, %109 ]
  %112 = add nsw i32 %t.0, 1
  br label %28

; <label>:113                                     ; preds = %28
  %114 = getelementptr inbounds i32* %ip.2, i32 1
  store i32 2147483647, i32* %ip.2, align 4
  store i8* getelementptr inbounds ([16 x i8]* @vng_interpolate.chood, i32 0, i32 0), i8** @vng_interpolate.cp, align 8
  br label %115

; <label>:115                                     ; preds = %155, %113
  %g.1 = phi i32 [ 0, %113 ], [ %156, %155 ]
  %ip.6 = phi i32* [ %114, %113 ], [ %ip.7, %155 ]
  %116 = icmp slt i32 %g.1, 8
  br i1 %116, label %117, label %157

; <label>:117                                     ; preds = %115
  %118 = load i8** @vng_interpolate.cp, align 8
  %119 = getelementptr inbounds i8* %118, i32 1
  store i8* %119, i8** @vng_interpolate.cp, align 8
  %120 = load i8* %118, align 1
  %121 = sext i8 %120 to i32
  %122 = load i8** @vng_interpolate.cp, align 8
  %123 = getelementptr inbounds i8* %122, i32 1
  store i8* %123, i8** @vng_interpolate.cp, align 8
  %124 = load i8* %122, align 1
  %125 = sext i8 %124 to i32
  %126 = load i16* @width, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nsw i32 %121, %127
  %129 = add nsw i32 %128, %125
  %130 = mul nsw i32 %129, 4
  %131 = getelementptr inbounds i32* %ip.6, i32 1
  store i32 %130, i32* %ip.6, align 4
  %132 = call i32 @fc(i32 %row.0, i32 %col.0)
  %133 = add nsw i32 %row.0, %121
  %134 = add nsw i32 %col.0, %125
  %135 = call i32 @fc(i32 %133, i32 %134)
  %136 = icmp ne i32 %135, %132
  br i1 %136, label %137, label %152

; <label>:137                                     ; preds = %117
  %138 = mul nsw i32 %121, 2
  %139 = add nsw i32 %row.0, %138
  %140 = mul nsw i32 %125, 2
  %141 = add nsw i32 %col.0, %140
  %142 = call i32 @fc(i32 %139, i32 %141)
  %143 = icmp eq i32 %142, %132
  br i1 %143, label %144, label %152

; <label>:144                                     ; preds = %137
  %145 = load i16* @width, align 2
  %146 = zext i16 %145 to i32
  %147 = mul nsw i32 %121, %146
  %148 = add nsw i32 %147, %125
  %149 = mul nsw i32 %148, 8
  %150 = add nsw i32 %149, %132
  %151 = getelementptr inbounds i32* %131, i32 1
  store i32 %150, i32* %131, align 4
  br label %154

; <label>:152                                     ; preds = %137, %117
  %153 = getelementptr inbounds i32* %131, i32 1
  store i32 0, i32* %131, align 4
  br label %154

; <label>:154                                     ; preds = %152, %144
  %ip.7 = phi i32* [ %151, %144 ], [ %153, %152 ]
  br label %155

; <label>:155                                     ; preds = %154
  %156 = add nsw i32 %g.1, 1
  br label %115

; <label>:157                                     ; preds = %115
  br label %158

; <label>:158                                     ; preds = %157
  %159 = add nsw i32 %col.0, 1
  br label %21

; <label>:160                                     ; preds = %21
  br label %161

; <label>:161                                     ; preds = %160
  %162 = add nsw i32 %row.0, 1
  br label %18

; <label>:163                                     ; preds = %18
  %164 = load i16* @width, align 2
  %165 = zext i16 %164 to i32
  %166 = mul nsw i32 %165, 3
  %167 = sext i32 %166 to i64
  %168 = call noalias i8* @calloc(i64 %167, i64 8) #4
  %169 = bitcast i8* %168 to [4 x i16]*
  %170 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  store [4 x i16]* %169, [4 x i16]** %170, align 8
  %171 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  %172 = load [4 x i16]** %171, align 8
  %173 = bitcast [4 x i16]* %172 to i8*
  call void @merror(i8* %173, i8* getelementptr inbounds ([18 x i8]* @.str78, i32 0, i32 0))
  br label %174

; <label>:174                                     ; preds = %186, %163
  %row.1 = phi i32 [ 0, %163 ], [ %187, %186 ]
  %175 = icmp slt i32 %row.1, 3
  br i1 %175, label %176, label %188

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  %178 = load [4 x i16]** %177, align 8
  %179 = load i16* @width, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nsw i32 %row.1, %180
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [4 x i16]* %178, i64 %182
  %184 = sext i32 %row.1 to i64
  %185 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 %184
  store [4 x i16]* %183, [4 x i16]** %185, align 8
  br label %186

; <label>:186                                     ; preds = %176
  %187 = add nsw i32 %row.1, 1
  br label %174

; <label>:188                                     ; preds = %174
  br label %189

; <label>:189                                     ; preds = %467, %188
  %row.2 = phi i32 [ 2, %188 ], [ %468, %467 ]
  %190 = load i16* @height, align 2
  %191 = zext i16 %190 to i32
  %192 = sub nsw i32 %191, 2
  %193 = icmp slt i32 %row.2, %192
  br i1 %193, label %194, label %469

; <label>:194                                     ; preds = %189
  br label %195

; <label>:195                                     ; preds = %430, %194
  %col.1 = phi i32 [ 2, %194 ], [ %431, %430 ]
  %196 = load i16* @width, align 2
  %197 = zext i16 %196 to i32
  %198 = sub nsw i32 %197, 2
  %199 = icmp slt i32 %col.1, %198
  br i1 %199, label %200, label %432

; <label>:200                                     ; preds = %195
  %201 = load i16* @width, align 2
  %202 = zext i16 %201 to i32
  %203 = mul nsw i32 %row.2, %202
  %204 = add nsw i32 %203, %col.1
  %205 = sext i32 %204 to i64
  %206 = load [4 x i16]** @image, align 8
  %207 = getelementptr inbounds [4 x i16]* %206, i64 %205
  %208 = getelementptr inbounds [4 x i16]* %207, i32 0, i32 0
  %209 = and i32 %col.1, %pcol.0
  %210 = sext i32 %209 to i64
  %211 = and i32 %row.2, %prow.0
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [16 x [16 x i32*]]* %code, i32 0, i64 %212
  %214 = getelementptr inbounds [16 x i32*]* %213, i32 0, i64 %210
  %215 = load i32** %214, align 8
  %216 = bitcast [8 x i32]* %gval to i8*
  call void @llvm.memset.p0i8.i64(i8* %216, i8 0, i64 32, i32 16, i1 false)
  br label %217

; <label>:217                                     ; preds = %287, %272, %200
  %ip.8 = phi i32* [ %215, %200 ], [ %268, %272 ], [ %279, %287 ]
  %218 = getelementptr inbounds i32* %ip.8, i64 0
  %219 = load i32* %218, align 4
  %220 = icmp ne i32 %219, 2147483647
  br i1 %220, label %221, label %288

; <label>:221                                     ; preds = %217
  %222 = sext i32 %219 to i64
  %223 = getelementptr inbounds i16* %208, i64 %222
  %224 = load i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = getelementptr inbounds i32* %ip.8, i64 1
  %227 = load i32* %226, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i16* %208, i64 %228
  %230 = load i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = sub nsw i32 %225, %231
  %233 = sext i32 %219 to i64
  %234 = getelementptr inbounds i16* %208, i64 %233
  %235 = load i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = getelementptr inbounds i32* %ip.8, i64 1
  %238 = load i32* %237, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i16* %208, i64 %239
  %241 = load i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = sub nsw i32 %236, %242
  %244 = ashr i32 %243, 31
  %245 = xor i32 %232, %244
  %246 = sext i32 %219 to i64
  %247 = getelementptr inbounds i16* %208, i64 %246
  %248 = load i16* %247, align 2
  %249 = zext i16 %248 to i32
  %250 = getelementptr inbounds i32* %ip.8, i64 1
  %251 = load i32* %250, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i16* %208, i64 %252
  %254 = load i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = sub nsw i32 %249, %255
  %257 = ashr i32 %256, 31
  %258 = sub nsw i32 %245, %257
  %259 = getelementptr inbounds i32* %ip.8, i64 2
  %260 = load i32* %259, align 4
  %261 = shl i32 %258, %260
  %262 = getelementptr inbounds i32* %ip.8, i64 3
  %263 = load i32* %262, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %264
  %266 = load i32* %265, align 4
  %267 = add nsw i32 %266, %261
  store i32 %267, i32* %265, align 4
  %268 = getelementptr inbounds i32* %ip.8, i64 5
  %269 = getelementptr inbounds i32* %268, i64 -1
  %270 = load i32* %269, align 4
  %271 = icmp eq i32 %270, -1
  br i1 %271, label %272, label %273

; <label>:272                                     ; preds = %221
  br label %217

; <label>:273                                     ; preds = %221
  %274 = sext i32 %270 to i64
  %275 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %274
  %276 = load i32* %275, align 4
  %277 = add nsw i32 %276, %261
  store i32 %277, i32* %275, align 4
  br label %278

; <label>:278                                     ; preds = %282, %273
  %ip.9 = phi i32* [ %268, %273 ], [ %279, %282 ]
  %279 = getelementptr inbounds i32* %ip.9, i32 1
  %280 = load i32* %ip.9, align 4
  %281 = icmp ne i32 %280, -1
  br i1 %281, label %282, label %287

; <label>:282                                     ; preds = %278
  %283 = sext i32 %280 to i64
  %284 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %283
  %285 = load i32* %284, align 4
  %286 = add nsw i32 %285, %261
  store i32 %286, i32* %284, align 4
  br label %278

; <label>:287                                     ; preds = %278
  br label %217

; <label>:288                                     ; preds = %217
  %289 = getelementptr inbounds i32* %ip.8, i32 1
  %290 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 0
  %291 = load i32* %290, align 4
  br label %292

; <label>:292                                     ; preds = %313, %288
  %g.2 = phi i32 [ 1, %288 ], [ %314, %313 ]
  %gmax.0 = phi i32 [ %291, %288 ], [ %gmax.1, %313 ]
  %gmin.0 = phi i32 [ %291, %288 ], [ %gmin.1, %313 ]
  %293 = icmp slt i32 %g.2, 8
  br i1 %293, label %294, label %315

; <label>:294                                     ; preds = %292
  %295 = sext i32 %g.2 to i64
  %296 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %295
  %297 = load i32* %296, align 4
  %298 = icmp sgt i32 %gmin.0, %297
  br i1 %298, label %299, label %303

; <label>:299                                     ; preds = %294
  %300 = sext i32 %g.2 to i64
  %301 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %300
  %302 = load i32* %301, align 4
  br label %303

; <label>:303                                     ; preds = %299, %294
  %gmin.1 = phi i32 [ %302, %299 ], [ %gmin.0, %294 ]
  %304 = sext i32 %g.2 to i64
  %305 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %304
  %306 = load i32* %305, align 4
  %307 = icmp slt i32 %gmax.0, %306
  br i1 %307, label %308, label %312

; <label>:308                                     ; preds = %303
  %309 = sext i32 %g.2 to i64
  %310 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %309
  %311 = load i32* %310, align 4
  br label %312

; <label>:312                                     ; preds = %308, %303
  %gmax.1 = phi i32 [ %311, %308 ], [ %gmax.0, %303 ]
  br label %313

; <label>:313                                     ; preds = %312
  %314 = add nsw i32 %g.2, 1
  br label %292

; <label>:315                                     ; preds = %292
  %316 = icmp eq i32 %gmax.0, 0
  br i1 %316, label %317, label %324

; <label>:317                                     ; preds = %315
  %318 = sext i32 %col.1 to i64
  %319 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 2
  %320 = load [4 x i16]** %319, align 8
  %321 = getelementptr inbounds [4 x i16]* %320, i64 %318
  %322 = bitcast [4 x i16]* %321 to i8*
  %323 = bitcast i16* %208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %322, i8* %323, i64 8, i32 2, i1 false)
  br label %430

; <label>:324                                     ; preds = %315
  %325 = ashr i32 %gmax.0, 1
  %326 = add nsw i32 %gmin.0, %325
  %327 = bitcast [4 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %327, i8 0, i64 16, i32 16, i1 false)
  %328 = call i32 @fc(i32 %row.2, i32 %col.1)
  br label %329

; <label>:329                                     ; preds = %381, %324
  %g.3 = phi i32 [ 0, %324 ], [ %382, %381 ]
  %num.0 = phi i32 [ 0, %324 ], [ %num.1, %381 ]
  %ip.10 = phi i32* [ %289, %324 ], [ %383, %381 ]
  %330 = icmp slt i32 %g.3, 8
  br i1 %330, label %331, label %384

; <label>:331                                     ; preds = %329
  %332 = sext i32 %g.3 to i64
  %333 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %332
  %334 = load i32* %333, align 4
  %335 = icmp sle i32 %334, %326
  br i1 %335, label %336, label %380

; <label>:336                                     ; preds = %331
  br label %337

; <label>:337                                     ; preds = %376, %336
  %c.0 = phi i32 [ 0, %336 ], [ %377, %376 ]
  %338 = load i32* @colors, align 4
  %339 = icmp slt i32 %c.0, %338
  br i1 %339, label %340, label %378

; <label>:340                                     ; preds = %337
  %341 = icmp eq i32 %c.0, %328
  br i1 %341, label %342, label %363

; <label>:342                                     ; preds = %340
  %343 = getelementptr inbounds i32* %ip.10, i64 1
  %344 = load i32* %343, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %363

; <label>:346                                     ; preds = %342
  %347 = sext i32 %c.0 to i64
  %348 = getelementptr inbounds i16* %208, i64 %347
  %349 = load i16* %348, align 2
  %350 = zext i16 %349 to i32
  %351 = getelementptr inbounds i32* %ip.10, i64 1
  %352 = load i32* %351, align 4
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i16* %208, i64 %353
  %355 = load i16* %354, align 2
  %356 = zext i16 %355 to i32
  %357 = add nsw i32 %350, %356
  %358 = ashr i32 %357, 1
  %359 = sext i32 %c.0 to i64
  %360 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %359
  %361 = load i32* %360, align 4
  %362 = add nsw i32 %361, %358
  store i32 %362, i32* %360, align 4
  br label %375

; <label>:363                                     ; preds = %342, %340
  %364 = getelementptr inbounds i32* %ip.10, i64 0
  %365 = load i32* %364, align 4
  %366 = add nsw i32 %365, %c.0
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds i16* %208, i64 %367
  %369 = load i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = sext i32 %c.0 to i64
  %372 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %371
  %373 = load i32* %372, align 4
  %374 = add nsw i32 %373, %370
  store i32 %374, i32* %372, align 4
  br label %375

; <label>:375                                     ; preds = %363, %346
  br label %376

; <label>:376                                     ; preds = %375
  %377 = add nsw i32 %c.0, 1
  br label %337

; <label>:378                                     ; preds = %337
  %379 = add nsw i32 %num.0, 1
  br label %380

; <label>:380                                     ; preds = %378, %331
  %num.1 = phi i32 [ %379, %378 ], [ %num.0, %331 ]
  br label %381

; <label>:381                                     ; preds = %380
  %382 = add nsw i32 %g.3, 1
  %383 = getelementptr inbounds i32* %ip.10, i64 2
  br label %329

; <label>:384                                     ; preds = %329
  br label %385

; <label>:385                                     ; preds = %427, %384
  %c.1 = phi i32 [ 0, %384 ], [ %428, %427 ]
  %386 = load i32* @colors, align 4
  %387 = icmp slt i32 %c.1, %386
  br i1 %387, label %388, label %429

; <label>:388                                     ; preds = %385
  %389 = sext i32 %328 to i64
  %390 = getelementptr inbounds i16* %208, i64 %389
  %391 = load i16* %390, align 2
  %392 = zext i16 %391 to i32
  %393 = icmp ne i32 %c.1, %328
  br i1 %393, label %394, label %404

; <label>:394                                     ; preds = %388
  %395 = sext i32 %c.1 to i64
  %396 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %395
  %397 = load i32* %396, align 4
  %398 = sext i32 %328 to i64
  %399 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %398
  %400 = load i32* %399, align 4
  %401 = sub nsw i32 %397, %400
  %402 = sdiv i32 %401, %num.0
  %403 = add nsw i32 %392, %402
  br label %404

; <label>:404                                     ; preds = %394, %388
  %t.1 = phi i32 [ %403, %394 ], [ %392, %388 ]
  %405 = icmp slt i32 %t.1, 65535
  br i1 %405, label %406, label %407

; <label>:406                                     ; preds = %404
  br label %408

; <label>:407                                     ; preds = %404
  br label %408

; <label>:408                                     ; preds = %407, %406
  %409 = phi i32 [ %t.1, %406 ], [ 65535, %407 ]
  %410 = icmp sgt i32 0, %409
  br i1 %410, label %411, label %412

; <label>:411                                     ; preds = %408
  br label %418

; <label>:412                                     ; preds = %408
  %413 = icmp slt i32 %t.1, 65535
  br i1 %413, label %414, label %415

; <label>:414                                     ; preds = %412
  br label %416

; <label>:415                                     ; preds = %412
  br label %416

; <label>:416                                     ; preds = %415, %414
  %417 = phi i32 [ %t.1, %414 ], [ 65535, %415 ]
  br label %418

; <label>:418                                     ; preds = %416, %411
  %419 = phi i32 [ 0, %411 ], [ %417, %416 ]
  %420 = trunc i32 %419 to i16
  %421 = sext i32 %c.1 to i64
  %422 = sext i32 %col.1 to i64
  %423 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 2
  %424 = load [4 x i16]** %423, align 8
  %425 = getelementptr inbounds [4 x i16]* %424, i64 %422
  %426 = getelementptr inbounds [4 x i16]* %425, i32 0, i64 %421
  store i16 %420, i16* %426, align 2
  br label %427

; <label>:427                                     ; preds = %418
  %428 = add nsw i32 %c.1, 1
  br label %385

; <label>:429                                     ; preds = %385
  br label %430

; <label>:430                                     ; preds = %429, %317
  %431 = add nsw i32 %col.1, 1
  br label %195

; <label>:432                                     ; preds = %195
  %433 = icmp sgt i32 %row.2, 3
  br i1 %433, label %434, label %453

; <label>:434                                     ; preds = %432
  %435 = sub nsw i32 %row.2, 2
  %436 = load i16* @width, align 2
  %437 = zext i16 %436 to i32
  %438 = mul nsw i32 %435, %437
  %439 = add nsw i32 %438, 2
  %440 = sext i32 %439 to i64
  %441 = load [4 x i16]** @image, align 8
  %442 = getelementptr inbounds [4 x i16]* %441, i64 %440
  %443 = bitcast [4 x i16]* %442 to i8*
  %444 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 0
  %445 = load [4 x i16]** %444, align 8
  %446 = getelementptr inbounds [4 x i16]* %445, i64 2
  %447 = bitcast [4 x i16]* %446 to i8*
  %448 = load i16* @width, align 2
  %449 = zext i16 %448 to i32
  %450 = sub nsw i32 %449, 4
  %451 = sext i32 %450 to i64
  %452 = mul i64 %451, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %443, i8* %447, i64 %452, i32 2, i1 false)
  br label %453

; <label>:453                                     ; preds = %434, %432
  br label %454

; <label>:454                                     ; preds = %464, %453
  %g.4 = phi i32 [ 0, %453 ], [ %465, %464 ]
  %455 = icmp slt i32 %g.4, 4
  br i1 %455, label %456, label %466

; <label>:456                                     ; preds = %454
  %457 = sext i32 %g.4 to i64
  %458 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 %457
  %459 = load [4 x i16]** %458, align 8
  %460 = sub nsw i32 %g.4, 1
  %461 = and i32 %460, 3
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 %462
  store [4 x i16]* %459, [4 x i16]** %463, align 8
  br label %464

; <label>:464                                     ; preds = %456
  %465 = add nsw i32 %g.4, 1
  br label %454

; <label>:466                                     ; preds = %454
  br label %467

; <label>:467                                     ; preds = %466
  %468 = add nsw i32 %row.2, 1
  br label %189

; <label>:469                                     ; preds = %189
  %470 = sub nsw i32 %row.2, 2
  %471 = load i16* @width, align 2
  %472 = zext i16 %471 to i32
  %473 = mul nsw i32 %470, %472
  %474 = add nsw i32 %473, 2
  %475 = sext i32 %474 to i64
  %476 = load [4 x i16]** @image, align 8
  %477 = getelementptr inbounds [4 x i16]* %476, i64 %475
  %478 = bitcast [4 x i16]* %477 to i8*
  %479 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 0
  %480 = load [4 x i16]** %479, align 8
  %481 = getelementptr inbounds [4 x i16]* %480, i64 2
  %482 = bitcast [4 x i16]* %481 to i8*
  %483 = load i16* @width, align 2
  %484 = zext i16 %483 to i32
  %485 = sub nsw i32 %484, 4
  %486 = sext i32 %485 to i64
  %487 = mul i64 %486, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %478, i8* %482, i64 %487, i32 2, i1 false)
  %488 = sub nsw i32 %row.2, 1
  %489 = load i16* @width, align 2
  %490 = zext i16 %489 to i32
  %491 = mul nsw i32 %488, %490
  %492 = add nsw i32 %491, 2
  %493 = sext i32 %492 to i64
  %494 = load [4 x i16]** @image, align 8
  %495 = getelementptr inbounds [4 x i16]* %494, i64 %493
  %496 = bitcast [4 x i16]* %495 to i8*
  %497 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 1
  %498 = load [4 x i16]** %497, align 8
  %499 = getelementptr inbounds [4 x i16]* %498, i64 2
  %500 = bitcast [4 x i16]* %499 to i8*
  %501 = load i16* @width, align 2
  %502 = zext i16 %501 to i32
  %503 = sub nsw i32 %502, 4
  %504 = sext i32 %503 to i64
  %505 = mul i64 %504, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %496, i8* %500, i64 %505, i32 2, i1 false)
  %506 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  %507 = load [4 x i16]** %506, align 8
  %508 = bitcast [4 x i16]* %507 to i8*
  call void @free(i8* %508) #4
  %509 = getelementptr inbounds [16 x [16 x i32*]]* %code, i32 0, i64 0
  %510 = getelementptr inbounds [16 x i32*]* %509, i32 0, i64 0
  %511 = load i32** %510, align 8
  %512 = bitcast i32* %511 to i8*
  call void @free(i8* %512) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @ppg_interpolate() #0 {
  %dir = alloca [5 x i32], align 16
  %diff = alloca [2 x i32], align 4
  %guess = alloca [2 x i32], align 4
  %1 = getelementptr inbounds [5 x i32]* %dir, i64 0, i64 0
  store i32 1, i32* %1
  %2 = getelementptr inbounds i32* %1, i64 1
  %3 = load i16* @width, align 2
  %4 = zext i16 %3 to i32
  store i32 %4, i32* %2
  %5 = getelementptr inbounds i32* %2, i64 1
  store i32 -1, i32* %5
  %6 = getelementptr inbounds i32* %5, i64 1
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 0, %8
  store i32 %9, i32* %6
  %10 = getelementptr inbounds i32* %6, i64 1
  store i32 1, i32* %10
  call void @border_interpolate(i32 3)
  %11 = load i32* @verbose, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %0
  %14 = load %struct._IO_FILE** @stderr, align 8
  %15 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([22 x i8]* @.str79, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %13, %0
  br label %17

; <label>:17                                      ; preds = %476, %16
  %row.0 = phi i32 [ 3, %16 ], [ %477, %476 ]
  %18 = load i16* @height, align 2
  %19 = zext i16 %18 to i32
  %20 = sub nsw i32 %19, 3
  %21 = icmp slt i32 %row.0, %20
  br i1 %21, label %22, label %478

; <label>:22                                      ; preds = %17
  %23 = load i32* @filters, align 4
  %24 = shl i32 %row.0, 1
  %25 = and i32 %24, 14
  %26 = add nsw i32 %25, 1
  %27 = shl i32 %26, 1
  %28 = lshr i32 %23, %27
  %29 = and i32 %28, 3
  %30 = and i32 %29, 1
  %31 = add i32 3, %30
  %32 = load i32* @filters, align 4
  %33 = shl i32 %row.0, 1
  %34 = and i32 %33, 14
  %35 = and i32 %31, 1
  %36 = add nsw i32 %34, %35
  %37 = shl i32 %36, 1
  %38 = lshr i32 %32, %37
  %39 = and i32 %38, 3
  br label %40

; <label>:40                                      ; preds = %473, %22
  %col.0 = phi i32 [ %31, %22 ], [ %474, %473 ]
  %41 = load i16* @width, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %42, 3
  %44 = icmp slt i32 %col.0, %43
  br i1 %44, label %45, label %475

; <label>:45                                      ; preds = %40
  %46 = load [4 x i16]** @image, align 8
  %47 = load i16* @width, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nsw i32 %row.0, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [4 x i16]* %46, i64 %50
  %52 = sext i32 %col.0 to i64
  %53 = getelementptr inbounds [4 x i16]* %51, i64 %52
  br label %54

; <label>:54                                      ; preds = %314, %45
  %i.0 = phi i32 [ 0, %45 ], [ %315, %314 ]
  %55 = sext i32 %i.0 to i64
  %56 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %55
  %57 = load i32* %56, align 4
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %316

; <label>:59                                      ; preds = %54
  %60 = sub nsw i32 0, %57
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [4 x i16]* %53, i64 %61
  %63 = getelementptr inbounds [4 x i16]* %62, i32 0, i64 1
  %64 = load i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = sext i32 %39 to i64
  %67 = getelementptr inbounds [4 x i16]* %53, i64 0
  %68 = getelementptr inbounds [4 x i16]* %67, i32 0, i64 %66
  %69 = load i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = add nsw i32 %65, %70
  %72 = sext i32 %57 to i64
  %73 = getelementptr inbounds [4 x i16]* %53, i64 %72
  %74 = getelementptr inbounds [4 x i16]* %73, i32 0, i64 1
  %75 = load i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = add nsw i32 %71, %76
  %78 = mul nsw i32 %77, 2
  %79 = sext i32 %39 to i64
  %80 = mul nsw i32 -2, %57
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [4 x i16]* %53, i64 %81
  %83 = getelementptr inbounds [4 x i16]* %82, i32 0, i64 %79
  %84 = load i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = sub nsw i32 %78, %85
  %87 = sext i32 %39 to i64
  %88 = mul nsw i32 2, %57
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [4 x i16]* %53, i64 %89
  %91 = getelementptr inbounds [4 x i16]* %90, i32 0, i64 %87
  %92 = load i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = sub nsw i32 %86, %93
  %95 = sext i32 %i.0 to i64
  %96 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %95
  store i32 %94, i32* %96, align 4
  %97 = sext i32 %39 to i64
  %98 = mul nsw i32 -2, %57
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [4 x i16]* %53, i64 %99
  %101 = getelementptr inbounds [4 x i16]* %100, i32 0, i64 %97
  %102 = load i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = sext i32 %39 to i64
  %105 = getelementptr inbounds [4 x i16]* %53, i64 0
  %106 = getelementptr inbounds [4 x i16]* %105, i32 0, i64 %104
  %107 = load i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = sub nsw i32 %103, %108
  %110 = sext i32 %39 to i64
  %111 = mul nsw i32 -2, %57
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [4 x i16]* %53, i64 %112
  %114 = getelementptr inbounds [4 x i16]* %113, i32 0, i64 %110
  %115 = load i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = sext i32 %39 to i64
  %118 = getelementptr inbounds [4 x i16]* %53, i64 0
  %119 = getelementptr inbounds [4 x i16]* %118, i32 0, i64 %117
  %120 = load i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = sub nsw i32 %116, %121
  %123 = ashr i32 %122, 31
  %124 = xor i32 %109, %123
  %125 = sext i32 %39 to i64
  %126 = mul nsw i32 -2, %57
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [4 x i16]* %53, i64 %127
  %129 = getelementptr inbounds [4 x i16]* %128, i32 0, i64 %125
  %130 = load i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = sext i32 %39 to i64
  %133 = getelementptr inbounds [4 x i16]* %53, i64 0
  %134 = getelementptr inbounds [4 x i16]* %133, i32 0, i64 %132
  %135 = load i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = sub nsw i32 %131, %136
  %138 = ashr i32 %137, 31
  %139 = sub nsw i32 %124, %138
  %140 = sext i32 %39 to i64
  %141 = mul nsw i32 2, %57
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [4 x i16]* %53, i64 %142
  %144 = getelementptr inbounds [4 x i16]* %143, i32 0, i64 %140
  %145 = load i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = sext i32 %39 to i64
  %148 = getelementptr inbounds [4 x i16]* %53, i64 0
  %149 = getelementptr inbounds [4 x i16]* %148, i32 0, i64 %147
  %150 = load i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = sub nsw i32 %146, %151
  %153 = sext i32 %39 to i64
  %154 = mul nsw i32 2, %57
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [4 x i16]* %53, i64 %155
  %157 = getelementptr inbounds [4 x i16]* %156, i32 0, i64 %153
  %158 = load i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = sext i32 %39 to i64
  %161 = getelementptr inbounds [4 x i16]* %53, i64 0
  %162 = getelementptr inbounds [4 x i16]* %161, i32 0, i64 %160
  %163 = load i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = sub nsw i32 %159, %164
  %166 = ashr i32 %165, 31
  %167 = xor i32 %152, %166
  %168 = sext i32 %39 to i64
  %169 = mul nsw i32 2, %57
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [4 x i16]* %53, i64 %170
  %172 = getelementptr inbounds [4 x i16]* %171, i32 0, i64 %168
  %173 = load i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = sext i32 %39 to i64
  %176 = getelementptr inbounds [4 x i16]* %53, i64 0
  %177 = getelementptr inbounds [4 x i16]* %176, i32 0, i64 %175
  %178 = load i16* %177, align 2
  %179 = zext i16 %178 to i32
  %180 = sub nsw i32 %174, %179
  %181 = ashr i32 %180, 31
  %182 = sub nsw i32 %167, %181
  %183 = add nsw i32 %139, %182
  %184 = sub nsw i32 0, %57
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [4 x i16]* %53, i64 %185
  %187 = getelementptr inbounds [4 x i16]* %186, i32 0, i64 1
  %188 = load i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = sext i32 %57 to i64
  %191 = getelementptr inbounds [4 x i16]* %53, i64 %190
  %192 = getelementptr inbounds [4 x i16]* %191, i32 0, i64 1
  %193 = load i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = sub nsw i32 %189, %194
  %196 = sub nsw i32 0, %57
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [4 x i16]* %53, i64 %197
  %199 = getelementptr inbounds [4 x i16]* %198, i32 0, i64 1
  %200 = load i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = sext i32 %57 to i64
  %203 = getelementptr inbounds [4 x i16]* %53, i64 %202
  %204 = getelementptr inbounds [4 x i16]* %203, i32 0, i64 1
  %205 = load i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = sub nsw i32 %201, %206
  %208 = ashr i32 %207, 31
  %209 = xor i32 %195, %208
  %210 = sub nsw i32 0, %57
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds [4 x i16]* %53, i64 %211
  %213 = getelementptr inbounds [4 x i16]* %212, i32 0, i64 1
  %214 = load i16* %213, align 2
  %215 = zext i16 %214 to i32
  %216 = sext i32 %57 to i64
  %217 = getelementptr inbounds [4 x i16]* %53, i64 %216
  %218 = getelementptr inbounds [4 x i16]* %217, i32 0, i64 1
  %219 = load i16* %218, align 2
  %220 = zext i16 %219 to i32
  %221 = sub nsw i32 %215, %220
  %222 = ashr i32 %221, 31
  %223 = sub nsw i32 %209, %222
  %224 = add nsw i32 %183, %223
  %225 = mul nsw i32 %224, 3
  %226 = mul nsw i32 3, %57
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [4 x i16]* %53, i64 %227
  %229 = getelementptr inbounds [4 x i16]* %228, i32 0, i64 1
  %230 = load i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = sext i32 %57 to i64
  %233 = getelementptr inbounds [4 x i16]* %53, i64 %232
  %234 = getelementptr inbounds [4 x i16]* %233, i32 0, i64 1
  %235 = load i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = sub nsw i32 %231, %236
  %238 = mul nsw i32 3, %57
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [4 x i16]* %53, i64 %239
  %241 = getelementptr inbounds [4 x i16]* %240, i32 0, i64 1
  %242 = load i16* %241, align 2
  %243 = zext i16 %242 to i32
  %244 = sext i32 %57 to i64
  %245 = getelementptr inbounds [4 x i16]* %53, i64 %244
  %246 = getelementptr inbounds [4 x i16]* %245, i32 0, i64 1
  %247 = load i16* %246, align 2
  %248 = zext i16 %247 to i32
  %249 = sub nsw i32 %243, %248
  %250 = ashr i32 %249, 31
  %251 = xor i32 %237, %250
  %252 = mul nsw i32 3, %57
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [4 x i16]* %53, i64 %253
  %255 = getelementptr inbounds [4 x i16]* %254, i32 0, i64 1
  %256 = load i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = sext i32 %57 to i64
  %259 = getelementptr inbounds [4 x i16]* %53, i64 %258
  %260 = getelementptr inbounds [4 x i16]* %259, i32 0, i64 1
  %261 = load i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = sub nsw i32 %257, %262
  %264 = ashr i32 %263, 31
  %265 = sub nsw i32 %251, %264
  %266 = mul nsw i32 -3, %57
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [4 x i16]* %53, i64 %267
  %269 = getelementptr inbounds [4 x i16]* %268, i32 0, i64 1
  %270 = load i16* %269, align 2
  %271 = zext i16 %270 to i32
  %272 = sub nsw i32 0, %57
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [4 x i16]* %53, i64 %273
  %275 = getelementptr inbounds [4 x i16]* %274, i32 0, i64 1
  %276 = load i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = sub nsw i32 %271, %277
  %279 = mul nsw i32 -3, %57
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [4 x i16]* %53, i64 %280
  %282 = getelementptr inbounds [4 x i16]* %281, i32 0, i64 1
  %283 = load i16* %282, align 2
  %284 = zext i16 %283 to i32
  %285 = sub nsw i32 0, %57
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds [4 x i16]* %53, i64 %286
  %288 = getelementptr inbounds [4 x i16]* %287, i32 0, i64 1
  %289 = load i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = sub nsw i32 %284, %290
  %292 = ashr i32 %291, 31
  %293 = xor i32 %278, %292
  %294 = mul nsw i32 -3, %57
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds [4 x i16]* %53, i64 %295
  %297 = getelementptr inbounds [4 x i16]* %296, i32 0, i64 1
  %298 = load i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = sub nsw i32 0, %57
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds [4 x i16]* %53, i64 %301
  %303 = getelementptr inbounds [4 x i16]* %302, i32 0, i64 1
  %304 = load i16* %303, align 2
  %305 = zext i16 %304 to i32
  %306 = sub nsw i32 %299, %305
  %307 = ashr i32 %306, 31
  %308 = sub nsw i32 %293, %307
  %309 = add nsw i32 %265, %308
  %310 = mul nsw i32 %309, 2
  %311 = add nsw i32 %225, %310
  %312 = sext i32 %i.0 to i64
  %313 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 %312
  store i32 %311, i32* %313, align 4
  br label %314

; <label>:314                                     ; preds = %59
  %315 = add nsw i32 %i.0, 1
  br label %54

; <label>:316                                     ; preds = %54
  %317 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %318 = load i32* %317, align 4
  %319 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %320 = load i32* %319, align 4
  %321 = icmp sgt i32 %318, %320
  %322 = zext i1 %321 to i32
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %323
  %325 = load i32* %324, align 4
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds [4 x i16]* %53, i64 %326
  %328 = getelementptr inbounds [4 x i16]* %327, i32 0, i64 1
  %329 = load i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = sub nsw i32 0, %325
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds [4 x i16]* %53, i64 %332
  %334 = getelementptr inbounds [4 x i16]* %333, i32 0, i64 1
  %335 = load i16* %334, align 2
  %336 = zext i16 %335 to i32
  %337 = icmp slt i32 %330, %336
  br i1 %337, label %338, label %404

; <label>:338                                     ; preds = %316
  %339 = sext i32 %325 to i64
  %340 = getelementptr inbounds [4 x i16]* %53, i64 %339
  %341 = getelementptr inbounds [4 x i16]* %340, i32 0, i64 1
  %342 = load i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = sext i32 %322 to i64
  %345 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %344
  %346 = load i32* %345, align 4
  %347 = ashr i32 %346, 2
  %348 = sub nsw i32 0, %325
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds [4 x i16]* %53, i64 %349
  %351 = getelementptr inbounds [4 x i16]* %350, i32 0, i64 1
  %352 = load i16* %351, align 2
  %353 = zext i16 %352 to i32
  %354 = icmp slt i32 %347, %353
  br i1 %354, label %355, label %360

; <label>:355                                     ; preds = %338
  %356 = sext i32 %322 to i64
  %357 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %356
  %358 = load i32* %357, align 4
  %359 = ashr i32 %358, 2
  br label %367

; <label>:360                                     ; preds = %338
  %361 = sub nsw i32 0, %325
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [4 x i16]* %53, i64 %362
  %364 = getelementptr inbounds [4 x i16]* %363, i32 0, i64 1
  %365 = load i16* %364, align 2
  %366 = zext i16 %365 to i32
  br label %367

; <label>:367                                     ; preds = %360, %355
  %368 = phi i32 [ %359, %355 ], [ %366, %360 ]
  %369 = icmp sgt i32 %343, %368
  br i1 %369, label %370, label %376

; <label>:370                                     ; preds = %367
  %371 = sext i32 %325 to i64
  %372 = getelementptr inbounds [4 x i16]* %53, i64 %371
  %373 = getelementptr inbounds [4 x i16]* %372, i32 0, i64 1
  %374 = load i16* %373, align 2
  %375 = zext i16 %374 to i32
  br label %402

; <label>:376                                     ; preds = %367
  %377 = sext i32 %322 to i64
  %378 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %377
  %379 = load i32* %378, align 4
  %380 = ashr i32 %379, 2
  %381 = sub nsw i32 0, %325
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds [4 x i16]* %53, i64 %382
  %384 = getelementptr inbounds [4 x i16]* %383, i32 0, i64 1
  %385 = load i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = icmp slt i32 %380, %386
  br i1 %387, label %388, label %393

; <label>:388                                     ; preds = %376
  %389 = sext i32 %322 to i64
  %390 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %389
  %391 = load i32* %390, align 4
  %392 = ashr i32 %391, 2
  br label %400

; <label>:393                                     ; preds = %376
  %394 = sub nsw i32 0, %325
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [4 x i16]* %53, i64 %395
  %397 = getelementptr inbounds [4 x i16]* %396, i32 0, i64 1
  %398 = load i16* %397, align 2
  %399 = zext i16 %398 to i32
  br label %400

; <label>:400                                     ; preds = %393, %388
  %401 = phi i32 [ %392, %388 ], [ %399, %393 ]
  br label %402

; <label>:402                                     ; preds = %400, %370
  %403 = phi i32 [ %375, %370 ], [ %401, %400 ]
  br label %468

; <label>:404                                     ; preds = %316
  %405 = sub nsw i32 0, %325
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [4 x i16]* %53, i64 %406
  %408 = getelementptr inbounds [4 x i16]* %407, i32 0, i64 1
  %409 = load i16* %408, align 2
  %410 = zext i16 %409 to i32
  %411 = sext i32 %322 to i64
  %412 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %411
  %413 = load i32* %412, align 4
  %414 = ashr i32 %413, 2
  %415 = sext i32 %325 to i64
  %416 = getelementptr inbounds [4 x i16]* %53, i64 %415
  %417 = getelementptr inbounds [4 x i16]* %416, i32 0, i64 1
  %418 = load i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = icmp slt i32 %414, %419
  br i1 %420, label %421, label %426

; <label>:421                                     ; preds = %404
  %422 = sext i32 %322 to i64
  %423 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %422
  %424 = load i32* %423, align 4
  %425 = ashr i32 %424, 2
  br label %432

; <label>:426                                     ; preds = %404
  %427 = sext i32 %325 to i64
  %428 = getelementptr inbounds [4 x i16]* %53, i64 %427
  %429 = getelementptr inbounds [4 x i16]* %428, i32 0, i64 1
  %430 = load i16* %429, align 2
  %431 = zext i16 %430 to i32
  br label %432

; <label>:432                                     ; preds = %426, %421
  %433 = phi i32 [ %425, %421 ], [ %431, %426 ]
  %434 = icmp sgt i32 %410, %433
  br i1 %434, label %435, label %442

; <label>:435                                     ; preds = %432
  %436 = sub nsw i32 0, %325
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds [4 x i16]* %53, i64 %437
  %439 = getelementptr inbounds [4 x i16]* %438, i32 0, i64 1
  %440 = load i16* %439, align 2
  %441 = zext i16 %440 to i32
  br label %466

; <label>:442                                     ; preds = %432
  %443 = sext i32 %322 to i64
  %444 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %443
  %445 = load i32* %444, align 4
  %446 = ashr i32 %445, 2
  %447 = sext i32 %325 to i64
  %448 = getelementptr inbounds [4 x i16]* %53, i64 %447
  %449 = getelementptr inbounds [4 x i16]* %448, i32 0, i64 1
  %450 = load i16* %449, align 2
  %451 = zext i16 %450 to i32
  %452 = icmp slt i32 %446, %451
  br i1 %452, label %453, label %458

; <label>:453                                     ; preds = %442
  %454 = sext i32 %322 to i64
  %455 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %454
  %456 = load i32* %455, align 4
  %457 = ashr i32 %456, 2
  br label %464

; <label>:458                                     ; preds = %442
  %459 = sext i32 %325 to i64
  %460 = getelementptr inbounds [4 x i16]* %53, i64 %459
  %461 = getelementptr inbounds [4 x i16]* %460, i32 0, i64 1
  %462 = load i16* %461, align 2
  %463 = zext i16 %462 to i32
  br label %464

; <label>:464                                     ; preds = %458, %453
  %465 = phi i32 [ %457, %453 ], [ %463, %458 ]
  br label %466

; <label>:466                                     ; preds = %464, %435
  %467 = phi i32 [ %441, %435 ], [ %465, %464 ]
  br label %468

; <label>:468                                     ; preds = %466, %402
  %469 = phi i32 [ %403, %402 ], [ %467, %466 ]
  %470 = trunc i32 %469 to i16
  %471 = getelementptr inbounds [4 x i16]* %53, i64 0
  %472 = getelementptr inbounds [4 x i16]* %471, i32 0, i64 1
  store i16 %470, i16* %472, align 2
  br label %473

; <label>:473                                     ; preds = %468
  %474 = add nsw i32 %col.0, 2
  br label %40

; <label>:475                                     ; preds = %40
  br label %476

; <label>:476                                     ; preds = %475
  %477 = add nsw i32 %row.0, 1
  br label %17

; <label>:478                                     ; preds = %17
  br label %479

; <label>:479                                     ; preds = %685, %478
  %row.1 = phi i32 [ 1, %478 ], [ %686, %685 ]
  %480 = load i16* @height, align 2
  %481 = zext i16 %480 to i32
  %482 = sub nsw i32 %481, 1
  %483 = icmp slt i32 %row.1, %482
  br i1 %483, label %484, label %687

; <label>:484                                     ; preds = %479
  %485 = load i32* @filters, align 4
  %486 = shl i32 %row.1, 1
  %487 = and i32 %486, 14
  %488 = add nsw i32 %487, 0
  %489 = shl i32 %488, 1
  %490 = lshr i32 %485, %489
  %491 = and i32 %490, 3
  %492 = and i32 %491, 1
  %493 = add i32 1, %492
  %494 = load i32* @filters, align 4
  %495 = shl i32 %row.1, 1
  %496 = and i32 %495, 14
  %497 = add nsw i32 %493, 1
  %498 = and i32 %497, 1
  %499 = add nsw i32 %496, %498
  %500 = shl i32 %499, 1
  %501 = lshr i32 %494, %500
  %502 = and i32 %501, 3
  br label %503

; <label>:503                                     ; preds = %682, %484
  %c.0 = phi i32 [ %502, %484 ], [ %c.1, %682 ]
  %col.1 = phi i32 [ %493, %484 ], [ %683, %682 ]
  %504 = load i16* @width, align 2
  %505 = zext i16 %504 to i32
  %506 = sub nsw i32 %505, 1
  %507 = icmp slt i32 %col.1, %506
  br i1 %507, label %508, label %684

; <label>:508                                     ; preds = %503
  %509 = load [4 x i16]** @image, align 8
  %510 = load i16* @width, align 2
  %511 = zext i16 %510 to i32
  %512 = mul nsw i32 %row.1, %511
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds [4 x i16]* %509, i64 %513
  %515 = sext i32 %col.1 to i64
  %516 = getelementptr inbounds [4 x i16]* %514, i64 %515
  br label %517

; <label>:517                                     ; preds = %678, %508
  %i.1 = phi i32 [ 0, %508 ], [ %680, %678 ]
  %c.1 = phi i32 [ %c.0, %508 ], [ %679, %678 ]
  %518 = sext i32 %i.1 to i64
  %519 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %518
  %520 = load i32* %519, align 4
  %521 = icmp sgt i32 %520, 0
  br i1 %521, label %522, label %681

; <label>:522                                     ; preds = %517
  %523 = sext i32 %c.1 to i64
  %524 = sub nsw i32 0, %520
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds [4 x i16]* %516, i64 %525
  %527 = getelementptr inbounds [4 x i16]* %526, i32 0, i64 %523
  %528 = load i16* %527, align 2
  %529 = zext i16 %528 to i32
  %530 = sext i32 %c.1 to i64
  %531 = sext i32 %520 to i64
  %532 = getelementptr inbounds [4 x i16]* %516, i64 %531
  %533 = getelementptr inbounds [4 x i16]* %532, i32 0, i64 %530
  %534 = load i16* %533, align 2
  %535 = zext i16 %534 to i32
  %536 = add nsw i32 %529, %535
  %537 = getelementptr inbounds [4 x i16]* %516, i64 0
  %538 = getelementptr inbounds [4 x i16]* %537, i32 0, i64 1
  %539 = load i16* %538, align 2
  %540 = zext i16 %539 to i32
  %541 = mul nsw i32 2, %540
  %542 = add nsw i32 %536, %541
  %543 = sub nsw i32 0, %520
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds [4 x i16]* %516, i64 %544
  %546 = getelementptr inbounds [4 x i16]* %545, i32 0, i64 1
  %547 = load i16* %546, align 2
  %548 = zext i16 %547 to i32
  %549 = sub nsw i32 %542, %548
  %550 = sext i32 %520 to i64
  %551 = getelementptr inbounds [4 x i16]* %516, i64 %550
  %552 = getelementptr inbounds [4 x i16]* %551, i32 0, i64 1
  %553 = load i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = sub nsw i32 %549, %554
  %556 = ashr i32 %555, 1
  %557 = icmp slt i32 %556, 65535
  br i1 %557, label %558, label %593

; <label>:558                                     ; preds = %522
  %559 = sext i32 %c.1 to i64
  %560 = sub nsw i32 0, %520
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds [4 x i16]* %516, i64 %561
  %563 = getelementptr inbounds [4 x i16]* %562, i32 0, i64 %559
  %564 = load i16* %563, align 2
  %565 = zext i16 %564 to i32
  %566 = sext i32 %c.1 to i64
  %567 = sext i32 %520 to i64
  %568 = getelementptr inbounds [4 x i16]* %516, i64 %567
  %569 = getelementptr inbounds [4 x i16]* %568, i32 0, i64 %566
  %570 = load i16* %569, align 2
  %571 = zext i16 %570 to i32
  %572 = add nsw i32 %565, %571
  %573 = getelementptr inbounds [4 x i16]* %516, i64 0
  %574 = getelementptr inbounds [4 x i16]* %573, i32 0, i64 1
  %575 = load i16* %574, align 2
  %576 = zext i16 %575 to i32
  %577 = mul nsw i32 2, %576
  %578 = add nsw i32 %572, %577
  %579 = sub nsw i32 0, %520
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds [4 x i16]* %516, i64 %580
  %582 = getelementptr inbounds [4 x i16]* %581, i32 0, i64 1
  %583 = load i16* %582, align 2
  %584 = zext i16 %583 to i32
  %585 = sub nsw i32 %578, %584
  %586 = sext i32 %520 to i64
  %587 = getelementptr inbounds [4 x i16]* %516, i64 %586
  %588 = getelementptr inbounds [4 x i16]* %587, i32 0, i64 1
  %589 = load i16* %588, align 2
  %590 = zext i16 %589 to i32
  %591 = sub nsw i32 %585, %590
  %592 = ashr i32 %591, 1
  br label %594

; <label>:593                                     ; preds = %522
  br label %594

; <label>:594                                     ; preds = %593, %558
  %595 = phi i32 [ %592, %558 ], [ 65535, %593 ]
  %596 = icmp sgt i32 0, %595
  br i1 %596, label %597, label %598

; <label>:597                                     ; preds = %594
  br label %672

; <label>:598                                     ; preds = %594
  %599 = sext i32 %c.1 to i64
  %600 = sub nsw i32 0, %520
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds [4 x i16]* %516, i64 %601
  %603 = getelementptr inbounds [4 x i16]* %602, i32 0, i64 %599
  %604 = load i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sext i32 %c.1 to i64
  %607 = sext i32 %520 to i64
  %608 = getelementptr inbounds [4 x i16]* %516, i64 %607
  %609 = getelementptr inbounds [4 x i16]* %608, i32 0, i64 %606
  %610 = load i16* %609, align 2
  %611 = zext i16 %610 to i32
  %612 = add nsw i32 %605, %611
  %613 = getelementptr inbounds [4 x i16]* %516, i64 0
  %614 = getelementptr inbounds [4 x i16]* %613, i32 0, i64 1
  %615 = load i16* %614, align 2
  %616 = zext i16 %615 to i32
  %617 = mul nsw i32 2, %616
  %618 = add nsw i32 %612, %617
  %619 = sub nsw i32 0, %520
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds [4 x i16]* %516, i64 %620
  %622 = getelementptr inbounds [4 x i16]* %621, i32 0, i64 1
  %623 = load i16* %622, align 2
  %624 = zext i16 %623 to i32
  %625 = sub nsw i32 %618, %624
  %626 = sext i32 %520 to i64
  %627 = getelementptr inbounds [4 x i16]* %516, i64 %626
  %628 = getelementptr inbounds [4 x i16]* %627, i32 0, i64 1
  %629 = load i16* %628, align 2
  %630 = zext i16 %629 to i32
  %631 = sub nsw i32 %625, %630
  %632 = ashr i32 %631, 1
  %633 = icmp slt i32 %632, 65535
  br i1 %633, label %634, label %669

; <label>:634                                     ; preds = %598
  %635 = sext i32 %c.1 to i64
  %636 = sub nsw i32 0, %520
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds [4 x i16]* %516, i64 %637
  %639 = getelementptr inbounds [4 x i16]* %638, i32 0, i64 %635
  %640 = load i16* %639, align 2
  %641 = zext i16 %640 to i32
  %642 = sext i32 %c.1 to i64
  %643 = sext i32 %520 to i64
  %644 = getelementptr inbounds [4 x i16]* %516, i64 %643
  %645 = getelementptr inbounds [4 x i16]* %644, i32 0, i64 %642
  %646 = load i16* %645, align 2
  %647 = zext i16 %646 to i32
  %648 = add nsw i32 %641, %647
  %649 = getelementptr inbounds [4 x i16]* %516, i64 0
  %650 = getelementptr inbounds [4 x i16]* %649, i32 0, i64 1
  %651 = load i16* %650, align 2
  %652 = zext i16 %651 to i32
  %653 = mul nsw i32 2, %652
  %654 = add nsw i32 %648, %653
  %655 = sub nsw i32 0, %520
  %656 = sext i32 %655 to i64
  %657 = getelementptr inbounds [4 x i16]* %516, i64 %656
  %658 = getelementptr inbounds [4 x i16]* %657, i32 0, i64 1
  %659 = load i16* %658, align 2
  %660 = zext i16 %659 to i32
  %661 = sub nsw i32 %654, %660
  %662 = sext i32 %520 to i64
  %663 = getelementptr inbounds [4 x i16]* %516, i64 %662
  %664 = getelementptr inbounds [4 x i16]* %663, i32 0, i64 1
  %665 = load i16* %664, align 2
  %666 = zext i16 %665 to i32
  %667 = sub nsw i32 %661, %666
  %668 = ashr i32 %667, 1
  br label %670

; <label>:669                                     ; preds = %598
  br label %670

; <label>:670                                     ; preds = %669, %634
  %671 = phi i32 [ %668, %634 ], [ 65535, %669 ]
  br label %672

; <label>:672                                     ; preds = %670, %597
  %673 = phi i32 [ 0, %597 ], [ %671, %670 ]
  %674 = trunc i32 %673 to i16
  %675 = sext i32 %c.1 to i64
  %676 = getelementptr inbounds [4 x i16]* %516, i64 0
  %677 = getelementptr inbounds [4 x i16]* %676, i32 0, i64 %675
  store i16 %674, i16* %677, align 2
  br label %678

; <label>:678                                     ; preds = %672
  %679 = sub nsw i32 2, %c.1
  %680 = add nsw i32 %i.1, 1
  br label %517

; <label>:681                                     ; preds = %517
  br label %682

; <label>:682                                     ; preds = %681
  %683 = add nsw i32 %col.1, 2
  br label %503

; <label>:684                                     ; preds = %503
  br label %685

; <label>:685                                     ; preds = %684
  %686 = add nsw i32 %row.1, 1
  br label %479

; <label>:687                                     ; preds = %479
  br label %688

; <label>:688                                     ; preds = %1009, %687
  %row.2 = phi i32 [ 1, %687 ], [ %1010, %1009 ]
  %689 = load i16* @height, align 2
  %690 = zext i16 %689 to i32
  %691 = sub nsw i32 %690, 1
  %692 = icmp slt i32 %row.2, %691
  br i1 %692, label %693, label %1011

; <label>:693                                     ; preds = %688
  %694 = load i32* @filters, align 4
  %695 = shl i32 %row.2, 1
  %696 = and i32 %695, 14
  %697 = add nsw i32 %696, 1
  %698 = shl i32 %697, 1
  %699 = lshr i32 %694, %698
  %700 = and i32 %699, 3
  %701 = and i32 %700, 1
  %702 = add i32 1, %701
  %703 = load i32* @filters, align 4
  %704 = shl i32 %row.2, 1
  %705 = and i32 %704, 14
  %706 = and i32 %702, 1
  %707 = add nsw i32 %705, %706
  %708 = shl i32 %707, 1
  %709 = lshr i32 %703, %708
  %710 = and i32 %709, 3
  %711 = sub i32 2, %710
  br label %712

; <label>:712                                     ; preds = %1006, %693
  %col.2 = phi i32 [ %702, %693 ], [ %1007, %1006 ]
  %713 = load i16* @width, align 2
  %714 = zext i16 %713 to i32
  %715 = sub nsw i32 %714, 1
  %716 = icmp slt i32 %col.2, %715
  br i1 %716, label %717, label %1008

; <label>:717                                     ; preds = %712
  %718 = load [4 x i16]** @image, align 8
  %719 = load i16* @width, align 2
  %720 = zext i16 %719 to i32
  %721 = mul nsw i32 %row.2, %720
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds [4 x i16]* %718, i64 %722
  %724 = sext i32 %col.2 to i64
  %725 = getelementptr inbounds [4 x i16]* %723, i64 %724
  br label %726

; <label>:726                                     ; preds = %893, %717
  %i.2 = phi i32 [ 0, %717 ], [ %894, %893 ]
  %727 = sext i32 %i.2 to i64
  %728 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %727
  %729 = load i32* %728, align 4
  %730 = add nsw i32 %i.2, 1
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %731
  %733 = load i32* %732, align 4
  %734 = add nsw i32 %729, %733
  %735 = icmp sgt i32 %734, 0
  br i1 %735, label %736, label %895

; <label>:736                                     ; preds = %726
  %737 = sext i32 %711 to i64
  %738 = sub nsw i32 0, %734
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds [4 x i16]* %725, i64 %739
  %741 = getelementptr inbounds [4 x i16]* %740, i32 0, i64 %737
  %742 = load i16* %741, align 2
  %743 = zext i16 %742 to i32
  %744 = sext i32 %711 to i64
  %745 = sext i32 %734 to i64
  %746 = getelementptr inbounds [4 x i16]* %725, i64 %745
  %747 = getelementptr inbounds [4 x i16]* %746, i32 0, i64 %744
  %748 = load i16* %747, align 2
  %749 = zext i16 %748 to i32
  %750 = sub nsw i32 %743, %749
  %751 = sext i32 %711 to i64
  %752 = sub nsw i32 0, %734
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds [4 x i16]* %725, i64 %753
  %755 = getelementptr inbounds [4 x i16]* %754, i32 0, i64 %751
  %756 = load i16* %755, align 2
  %757 = zext i16 %756 to i32
  %758 = sext i32 %711 to i64
  %759 = sext i32 %734 to i64
  %760 = getelementptr inbounds [4 x i16]* %725, i64 %759
  %761 = getelementptr inbounds [4 x i16]* %760, i32 0, i64 %758
  %762 = load i16* %761, align 2
  %763 = zext i16 %762 to i32
  %764 = sub nsw i32 %757, %763
  %765 = ashr i32 %764, 31
  %766 = xor i32 %750, %765
  %767 = sext i32 %711 to i64
  %768 = sub nsw i32 0, %734
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds [4 x i16]* %725, i64 %769
  %771 = getelementptr inbounds [4 x i16]* %770, i32 0, i64 %767
  %772 = load i16* %771, align 2
  %773 = zext i16 %772 to i32
  %774 = sext i32 %711 to i64
  %775 = sext i32 %734 to i64
  %776 = getelementptr inbounds [4 x i16]* %725, i64 %775
  %777 = getelementptr inbounds [4 x i16]* %776, i32 0, i64 %774
  %778 = load i16* %777, align 2
  %779 = zext i16 %778 to i32
  %780 = sub nsw i32 %773, %779
  %781 = ashr i32 %780, 31
  %782 = sub nsw i32 %766, %781
  %783 = sub nsw i32 0, %734
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds [4 x i16]* %725, i64 %784
  %786 = getelementptr inbounds [4 x i16]* %785, i32 0, i64 1
  %787 = load i16* %786, align 2
  %788 = zext i16 %787 to i32
  %789 = getelementptr inbounds [4 x i16]* %725, i64 0
  %790 = getelementptr inbounds [4 x i16]* %789, i32 0, i64 1
  %791 = load i16* %790, align 2
  %792 = zext i16 %791 to i32
  %793 = sub nsw i32 %788, %792
  %794 = sub nsw i32 0, %734
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds [4 x i16]* %725, i64 %795
  %797 = getelementptr inbounds [4 x i16]* %796, i32 0, i64 1
  %798 = load i16* %797, align 2
  %799 = zext i16 %798 to i32
  %800 = getelementptr inbounds [4 x i16]* %725, i64 0
  %801 = getelementptr inbounds [4 x i16]* %800, i32 0, i64 1
  %802 = load i16* %801, align 2
  %803 = zext i16 %802 to i32
  %804 = sub nsw i32 %799, %803
  %805 = ashr i32 %804, 31
  %806 = xor i32 %793, %805
  %807 = sub nsw i32 0, %734
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds [4 x i16]* %725, i64 %808
  %810 = getelementptr inbounds [4 x i16]* %809, i32 0, i64 1
  %811 = load i16* %810, align 2
  %812 = zext i16 %811 to i32
  %813 = getelementptr inbounds [4 x i16]* %725, i64 0
  %814 = getelementptr inbounds [4 x i16]* %813, i32 0, i64 1
  %815 = load i16* %814, align 2
  %816 = zext i16 %815 to i32
  %817 = sub nsw i32 %812, %816
  %818 = ashr i32 %817, 31
  %819 = sub nsw i32 %806, %818
  %820 = add nsw i32 %782, %819
  %821 = sext i32 %734 to i64
  %822 = getelementptr inbounds [4 x i16]* %725, i64 %821
  %823 = getelementptr inbounds [4 x i16]* %822, i32 0, i64 1
  %824 = load i16* %823, align 2
  %825 = zext i16 %824 to i32
  %826 = getelementptr inbounds [4 x i16]* %725, i64 0
  %827 = getelementptr inbounds [4 x i16]* %826, i32 0, i64 1
  %828 = load i16* %827, align 2
  %829 = zext i16 %828 to i32
  %830 = sub nsw i32 %825, %829
  %831 = sext i32 %734 to i64
  %832 = getelementptr inbounds [4 x i16]* %725, i64 %831
  %833 = getelementptr inbounds [4 x i16]* %832, i32 0, i64 1
  %834 = load i16* %833, align 2
  %835 = zext i16 %834 to i32
  %836 = getelementptr inbounds [4 x i16]* %725, i64 0
  %837 = getelementptr inbounds [4 x i16]* %836, i32 0, i64 1
  %838 = load i16* %837, align 2
  %839 = zext i16 %838 to i32
  %840 = sub nsw i32 %835, %839
  %841 = ashr i32 %840, 31
  %842 = xor i32 %830, %841
  %843 = sext i32 %734 to i64
  %844 = getelementptr inbounds [4 x i16]* %725, i64 %843
  %845 = getelementptr inbounds [4 x i16]* %844, i32 0, i64 1
  %846 = load i16* %845, align 2
  %847 = zext i16 %846 to i32
  %848 = getelementptr inbounds [4 x i16]* %725, i64 0
  %849 = getelementptr inbounds [4 x i16]* %848, i32 0, i64 1
  %850 = load i16* %849, align 2
  %851 = zext i16 %850 to i32
  %852 = sub nsw i32 %847, %851
  %853 = ashr i32 %852, 31
  %854 = sub nsw i32 %842, %853
  %855 = add nsw i32 %820, %854
  %856 = sext i32 %i.2 to i64
  %857 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 %856
  store i32 %855, i32* %857, align 4
  %858 = sext i32 %711 to i64
  %859 = sub nsw i32 0, %734
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds [4 x i16]* %725, i64 %860
  %862 = getelementptr inbounds [4 x i16]* %861, i32 0, i64 %858
  %863 = load i16* %862, align 2
  %864 = zext i16 %863 to i32
  %865 = sext i32 %711 to i64
  %866 = sext i32 %734 to i64
  %867 = getelementptr inbounds [4 x i16]* %725, i64 %866
  %868 = getelementptr inbounds [4 x i16]* %867, i32 0, i64 %865
  %869 = load i16* %868, align 2
  %870 = zext i16 %869 to i32
  %871 = add nsw i32 %864, %870
  %872 = getelementptr inbounds [4 x i16]* %725, i64 0
  %873 = getelementptr inbounds [4 x i16]* %872, i32 0, i64 1
  %874 = load i16* %873, align 2
  %875 = zext i16 %874 to i32
  %876 = mul nsw i32 2, %875
  %877 = add nsw i32 %871, %876
  %878 = sub nsw i32 0, %734
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds [4 x i16]* %725, i64 %879
  %881 = getelementptr inbounds [4 x i16]* %880, i32 0, i64 1
  %882 = load i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = sub nsw i32 %877, %883
  %885 = sext i32 %734 to i64
  %886 = getelementptr inbounds [4 x i16]* %725, i64 %885
  %887 = getelementptr inbounds [4 x i16]* %886, i32 0, i64 1
  %888 = load i16* %887, align 2
  %889 = zext i16 %888 to i32
  %890 = sub nsw i32 %884, %889
  %891 = sext i32 %i.2 to i64
  %892 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %891
  store i32 %890, i32* %892, align 4
  br label %893

; <label>:893                                     ; preds = %736
  %894 = add nsw i32 %i.2, 1
  br label %726

; <label>:895                                     ; preds = %726
  %896 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %897 = load i32* %896, align 4
  %898 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %899 = load i32* %898, align 4
  %900 = icmp ne i32 %897, %899
  br i1 %900, label %901, label %961

; <label>:901                                     ; preds = %895
  %902 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %903 = load i32* %902, align 4
  %904 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %905 = load i32* %904, align 4
  %906 = icmp sgt i32 %903, %905
  %907 = zext i1 %906 to i32
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %908
  %910 = load i32* %909, align 4
  %911 = ashr i32 %910, 1
  %912 = icmp slt i32 %911, 65535
  br i1 %912, label %913, label %924

; <label>:913                                     ; preds = %901
  %914 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %915 = load i32* %914, align 4
  %916 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %917 = load i32* %916, align 4
  %918 = icmp sgt i32 %915, %917
  %919 = zext i1 %918 to i32
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %920
  %922 = load i32* %921, align 4
  %923 = ashr i32 %922, 1
  br label %925

; <label>:924                                     ; preds = %901
  br label %925

; <label>:925                                     ; preds = %924, %913
  %926 = phi i32 [ %923, %913 ], [ 65535, %924 ]
  %927 = icmp sgt i32 0, %926
  br i1 %927, label %928, label %929

; <label>:928                                     ; preds = %925
  br label %955

; <label>:929                                     ; preds = %925
  %930 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %931 = load i32* %930, align 4
  %932 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %933 = load i32* %932, align 4
  %934 = icmp sgt i32 %931, %933
  %935 = zext i1 %934 to i32
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %936
  %938 = load i32* %937, align 4
  %939 = ashr i32 %938, 1
  %940 = icmp slt i32 %939, 65535
  br i1 %940, label %941, label %952

; <label>:941                                     ; preds = %929
  %942 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %943 = load i32* %942, align 4
  %944 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %945 = load i32* %944, align 4
  %946 = icmp sgt i32 %943, %945
  %947 = zext i1 %946 to i32
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %948
  %950 = load i32* %949, align 4
  %951 = ashr i32 %950, 1
  br label %953

; <label>:952                                     ; preds = %929
  br label %953

; <label>:953                                     ; preds = %952, %941
  %954 = phi i32 [ %951, %941 ], [ 65535, %952 ]
  br label %955

; <label>:955                                     ; preds = %953, %928
  %956 = phi i32 [ 0, %928 ], [ %954, %953 ]
  %957 = trunc i32 %956 to i16
  %958 = sext i32 %711 to i64
  %959 = getelementptr inbounds [4 x i16]* %725, i64 0
  %960 = getelementptr inbounds [4 x i16]* %959, i32 0, i64 %958
  store i16 %957, i16* %960, align 2
  br label %1005

; <label>:961                                     ; preds = %895
  %962 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %963 = load i32* %962, align 4
  %964 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %965 = load i32* %964, align 4
  %966 = add nsw i32 %963, %965
  %967 = ashr i32 %966, 2
  %968 = icmp slt i32 %967, 65535
  br i1 %968, label %969, label %976

; <label>:969                                     ; preds = %961
  %970 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %971 = load i32* %970, align 4
  %972 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %973 = load i32* %972, align 4
  %974 = add nsw i32 %971, %973
  %975 = ashr i32 %974, 2
  br label %977

; <label>:976                                     ; preds = %961
  br label %977

; <label>:977                                     ; preds = %976, %969
  %978 = phi i32 [ %975, %969 ], [ 65535, %976 ]
  %979 = icmp sgt i32 0, %978
  br i1 %979, label %980, label %981

; <label>:980                                     ; preds = %977
  br label %999

; <label>:981                                     ; preds = %977
  %982 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %983 = load i32* %982, align 4
  %984 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %985 = load i32* %984, align 4
  %986 = add nsw i32 %983, %985
  %987 = ashr i32 %986, 2
  %988 = icmp slt i32 %987, 65535
  br i1 %988, label %989, label %996

; <label>:989                                     ; preds = %981
  %990 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %991 = load i32* %990, align 4
  %992 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %993 = load i32* %992, align 4
  %994 = add nsw i32 %991, %993
  %995 = ashr i32 %994, 2
  br label %997

; <label>:996                                     ; preds = %981
  br label %997

; <label>:997                                     ; preds = %996, %989
  %998 = phi i32 [ %995, %989 ], [ 65535, %996 ]
  br label %999

; <label>:999                                     ; preds = %997, %980
  %1000 = phi i32 [ 0, %980 ], [ %998, %997 ]
  %1001 = trunc i32 %1000 to i16
  %1002 = sext i32 %711 to i64
  %1003 = getelementptr inbounds [4 x i16]* %725, i64 0
  %1004 = getelementptr inbounds [4 x i16]* %1003, i32 0, i64 %1002
  store i16 %1001, i16* %1004, align 2
  br label %1005

; <label>:1005                                    ; preds = %999, %955
  br label %1006

; <label>:1006                                    ; preds = %1005
  %1007 = add nsw i32 %col.2, 2
  br label %712

; <label>:1008                                    ; preds = %712
  br label %1009

; <label>:1009                                    ; preds = %1008
  %1010 = add nsw i32 %row.2, 1
  br label %688

; <label>:1011                                    ; preds = %688
  ret void
}

; Function Attrs: nounwind uwtable
define void @ahd_interpolate() #0 {
  %hm = alloca [2 x i32], align 4
  %ldiff = alloca [2 x [4 x i32]], align 16
  %abdiff = alloca [2 x [4 x i32]], align 16
  %cbrt = alloca [65536 x float], align 16
  %xyz = alloca [3 x float], align 4
  %xyz_cam = alloca [3 x [4 x float]], align 16
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8]* @.str80, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %27, %6
  %i.0 = phi i32 [ 0, %6 ], [ %28, %27 ]
  %8 = icmp slt i32 %i.0, 65536
  br i1 %8, label %9, label %29

; <label>:9                                       ; preds = %7
  %10 = sitofp i32 %i.0 to double
  %11 = fdiv double %10, 6.553500e+04
  %12 = fptrunc double %11 to float
  %13 = fpext float %12 to double
  %14 = fcmp ogt double %13, 8.856000e-03
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %9
  %16 = fpext float %12 to double
  %17 = call double @pow(double %16, double 0x3FD5555555555555) #4
  br label %22

; <label>:18                                      ; preds = %9
  %19 = fpext float %12 to double
  %20 = fmul double 7.787000e+00, %19
  %21 = fadd double %20, 0x3FC1A7B9611A7B96
  br label %22

; <label>:22                                      ; preds = %18, %15
  %23 = phi double [ %17, %15 ], [ %21, %18 ]
  %24 = fptrunc double %23 to float
  %25 = sext i32 %i.0 to i64
  %26 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %25
  store float %24, float* %26, align 4
  br label %27

; <label>:27                                      ; preds = %22
  %28 = add nsw i32 %i.0, 1
  br label %7

; <label>:29                                      ; preds = %7
  br label %30

; <label>:30                                      ; preds = %75, %29
  %i.1 = phi i32 [ 0, %29 ], [ %76, %75 ]
  %31 = icmp slt i32 %i.1, 3
  br i1 %31, label %32, label %77

; <label>:32                                      ; preds = %30
  br label %33

; <label>:33                                      ; preds = %72, %32
  %j.0 = phi i32 [ 0, %32 ], [ %73, %72 ]
  %34 = load i32* @colors, align 4
  %35 = icmp slt i32 %j.0, %34
  br i1 %35, label %36, label %74

; <label>:36                                      ; preds = %33
  %37 = sext i32 %j.0 to i64
  %38 = sext i32 %i.1 to i64
  %39 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 %38
  %40 = getelementptr inbounds [4 x float]* %39, i32 0, i64 %37
  store float 0.000000e+00, float* %40, align 4
  br label %41

; <label>:41                                      ; preds = %69, %36
  %k.0 = phi i32 [ 0, %36 ], [ %70, %69 ]
  %42 = icmp slt i32 %k.0, 3
  br i1 %42, label %43, label %71

; <label>:43                                      ; preds = %41
  %44 = sext i32 %k.0 to i64
  %45 = sext i32 %i.1 to i64
  %46 = getelementptr inbounds [3 x [3 x double]]* @xyz_rgb, i32 0, i64 %45
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 %44
  %48 = load double* %47, align 8
  %49 = sext i32 %j.0 to i64
  %50 = sext i32 %k.0 to i64
  %51 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %50
  %52 = getelementptr inbounds [4 x float]* %51, i32 0, i64 %49
  %53 = load float* %52, align 4
  %54 = fpext float %53 to double
  %55 = fmul double %48, %54
  %56 = sext i32 %i.1 to i64
  %57 = getelementptr inbounds [3 x float]* @d65_white, i32 0, i64 %56
  %58 = load float* %57, align 4
  %59 = fpext float %58 to double
  %60 = fdiv double %55, %59
  %61 = sext i32 %j.0 to i64
  %62 = sext i32 %i.1 to i64
  %63 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 %62
  %64 = getelementptr inbounds [4 x float]* %63, i32 0, i64 %61
  %65 = load float* %64, align 4
  %66 = fpext float %65 to double
  %67 = fadd double %66, %60
  %68 = fptrunc double %67 to float
  store float %68, float* %64, align 4
  br label %69

; <label>:69                                      ; preds = %43
  %70 = add nsw i32 %k.0, 1
  br label %41

; <label>:71                                      ; preds = %41
  br label %72

; <label>:72                                      ; preds = %71
  %73 = add nsw i32 %j.0, 1
  br label %33

; <label>:74                                      ; preds = %33
  br label %75

; <label>:75                                      ; preds = %74
  %76 = add nsw i32 %i.1, 1
  br label %30

; <label>:77                                      ; preds = %30
  call void @border_interpolate(i32 5)
  %78 = call noalias i8* @malloc(i64 1703936) #4
  call void @merror(i8* %78, i8* getelementptr inbounds ([18 x i8]* @.str81, i32 0, i32 0))
  %79 = bitcast i8* %78 to [256 x [256 x [3 x i16]]]*
  %80 = getelementptr inbounds i8* %78, i64 786432
  %81 = bitcast i8* %80 to [256 x [256 x [3 x i16]]]*
  %82 = getelementptr inbounds i8* %78, i64 1572864
  %83 = bitcast i8* %82 to [256 x [256 x i8]]*
  br label %84

; <label>:84                                      ; preds = %1390, %77
  %top.0 = phi i32 [ 2, %77 ], [ %1391, %1390 ]
  %85 = load i16* @height, align 2
  %86 = zext i16 %85 to i32
  %87 = sub nsw i32 %86, 5
  %88 = icmp slt i32 %top.0, %87
  br i1 %88, label %89, label %1392

; <label>:89                                      ; preds = %84
  br label %90

; <label>:90                                      ; preds = %1387, %89
  %left.0 = phi i32 [ 2, %89 ], [ %1388, %1387 ]
  %91 = load i16* @width, align 2
  %92 = zext i16 %91 to i32
  %93 = sub nsw i32 %92, 5
  %94 = icmp slt i32 %left.0, %93
  br i1 %94, label %95, label %1389

; <label>:95                                      ; preds = %90
  br label %96

; <label>:96                                      ; preds = %461, %95
  %row.0 = phi i32 [ %top.0, %95 ], [ %462, %461 ]
  %97 = add nsw i32 %top.0, 256
  %98 = icmp slt i32 %row.0, %97
  br i1 %98, label %99, label %104

; <label>:99                                      ; preds = %96
  %100 = load i16* @height, align 2
  %101 = zext i16 %100 to i32
  %102 = sub nsw i32 %101, 2
  %103 = icmp slt i32 %row.0, %102
  br label %104

; <label>:104                                     ; preds = %99, %96
  %105 = phi i1 [ false, %96 ], [ %103, %99 ]
  br i1 %105, label %106, label %463

; <label>:106                                     ; preds = %104
  %107 = load i32* @filters, align 4
  %108 = shl i32 %row.0, 1
  %109 = and i32 %108, 14
  %110 = and i32 %left.0, 1
  %111 = add nsw i32 %109, %110
  %112 = shl i32 %111, 1
  %113 = lshr i32 %107, %112
  %114 = and i32 %113, 3
  %115 = and i32 %114, 1
  %116 = add i32 %left.0, %115
  %117 = load i32* @filters, align 4
  %118 = shl i32 %row.0, 1
  %119 = and i32 %118, 14
  %120 = and i32 %116, 1
  %121 = add nsw i32 %119, %120
  %122 = shl i32 %121, 1
  %123 = lshr i32 %117, %122
  %124 = and i32 %123, 3
  br label %125

; <label>:125                                     ; preds = %458, %106
  %col.0 = phi i32 [ %116, %106 ], [ %459, %458 ]
  %126 = add nsw i32 %left.0, 256
  %127 = icmp slt i32 %col.0, %126
  br i1 %127, label %128, label %133

; <label>:128                                     ; preds = %125
  %129 = load i16* @width, align 2
  %130 = zext i16 %129 to i32
  %131 = sub nsw i32 %130, 2
  %132 = icmp slt i32 %col.0, %131
  br label %133

; <label>:133                                     ; preds = %128, %125
  %134 = phi i1 [ false, %125 ], [ %132, %128 ]
  br i1 %134, label %135, label %460

; <label>:135                                     ; preds = %133
  %136 = load [4 x i16]** @image, align 8
  %137 = load i16* @width, align 2
  %138 = zext i16 %137 to i32
  %139 = mul nsw i32 %row.0, %138
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [4 x i16]* %136, i64 %140
  %142 = sext i32 %col.0 to i64
  %143 = getelementptr inbounds [4 x i16]* %141, i64 %142
  %144 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %145 = getelementptr inbounds [4 x i16]* %144, i32 0, i64 1
  %146 = load i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = sext i32 %124 to i64
  %149 = getelementptr inbounds [4 x i16]* %143, i64 0
  %150 = getelementptr inbounds [4 x i16]* %149, i32 0, i64 %148
  %151 = load i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nsw i32 %147, %152
  %154 = getelementptr inbounds [4 x i16]* %143, i64 1
  %155 = getelementptr inbounds [4 x i16]* %154, i32 0, i64 1
  %156 = load i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nsw i32 %153, %157
  %159 = mul nsw i32 %158, 2
  %160 = sext i32 %124 to i64
  %161 = getelementptr inbounds [4 x i16]* %143, i64 -2
  %162 = getelementptr inbounds [4 x i16]* %161, i32 0, i64 %160
  %163 = load i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = sub nsw i32 %159, %164
  %166 = sext i32 %124 to i64
  %167 = getelementptr inbounds [4 x i16]* %143, i64 2
  %168 = getelementptr inbounds [4 x i16]* %167, i32 0, i64 %166
  %169 = load i16* %168, align 2
  %170 = zext i16 %169 to i32
  %171 = sub nsw i32 %165, %170
  %172 = ashr i32 %171, 2
  %173 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %174 = getelementptr inbounds [4 x i16]* %173, i32 0, i64 1
  %175 = load i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = getelementptr inbounds [4 x i16]* %143, i64 1
  %178 = getelementptr inbounds [4 x i16]* %177, i32 0, i64 1
  %179 = load i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = icmp slt i32 %176, %180
  br i1 %181, label %182, label %222

; <label>:182                                     ; preds = %135
  %183 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %184 = getelementptr inbounds [4 x i16]* %183, i32 0, i64 1
  %185 = load i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = getelementptr inbounds [4 x i16]* %143, i64 1
  %188 = getelementptr inbounds [4 x i16]* %187, i32 0, i64 1
  %189 = load i16* %188, align 2
  %190 = zext i16 %189 to i32
  %191 = icmp slt i32 %172, %190
  br i1 %191, label %192, label %193

; <label>:192                                     ; preds = %182
  br label %198

; <label>:193                                     ; preds = %182
  %194 = getelementptr inbounds [4 x i16]* %143, i64 1
  %195 = getelementptr inbounds [4 x i16]* %194, i32 0, i64 1
  %196 = load i16* %195, align 2
  %197 = zext i16 %196 to i32
  br label %198

; <label>:198                                     ; preds = %193, %192
  %199 = phi i32 [ %172, %192 ], [ %197, %193 ]
  %200 = icmp sgt i32 %186, %199
  br i1 %200, label %201, label %206

; <label>:201                                     ; preds = %198
  %202 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %203 = getelementptr inbounds [4 x i16]* %202, i32 0, i64 1
  %204 = load i16* %203, align 2
  %205 = zext i16 %204 to i32
  br label %220

; <label>:206                                     ; preds = %198
  %207 = getelementptr inbounds [4 x i16]* %143, i64 1
  %208 = getelementptr inbounds [4 x i16]* %207, i32 0, i64 1
  %209 = load i16* %208, align 2
  %210 = zext i16 %209 to i32
  %211 = icmp slt i32 %172, %210
  br i1 %211, label %212, label %213

; <label>:212                                     ; preds = %206
  br label %218

; <label>:213                                     ; preds = %206
  %214 = getelementptr inbounds [4 x i16]* %143, i64 1
  %215 = getelementptr inbounds [4 x i16]* %214, i32 0, i64 1
  %216 = load i16* %215, align 2
  %217 = zext i16 %216 to i32
  br label %218

; <label>:218                                     ; preds = %213, %212
  %219 = phi i32 [ %172, %212 ], [ %217, %213 ]
  br label %220

; <label>:220                                     ; preds = %218, %201
  %221 = phi i32 [ %205, %201 ], [ %219, %218 ]
  br label %262

; <label>:222                                     ; preds = %135
  %223 = getelementptr inbounds [4 x i16]* %143, i64 1
  %224 = getelementptr inbounds [4 x i16]* %223, i32 0, i64 1
  %225 = load i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %228 = getelementptr inbounds [4 x i16]* %227, i32 0, i64 1
  %229 = load i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = icmp slt i32 %172, %230
  br i1 %231, label %232, label %233

; <label>:232                                     ; preds = %222
  br label %238

; <label>:233                                     ; preds = %222
  %234 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %235 = getelementptr inbounds [4 x i16]* %234, i32 0, i64 1
  %236 = load i16* %235, align 2
  %237 = zext i16 %236 to i32
  br label %238

; <label>:238                                     ; preds = %233, %232
  %239 = phi i32 [ %172, %232 ], [ %237, %233 ]
  %240 = icmp sgt i32 %226, %239
  br i1 %240, label %241, label %246

; <label>:241                                     ; preds = %238
  %242 = getelementptr inbounds [4 x i16]* %143, i64 1
  %243 = getelementptr inbounds [4 x i16]* %242, i32 0, i64 1
  %244 = load i16* %243, align 2
  %245 = zext i16 %244 to i32
  br label %260

; <label>:246                                     ; preds = %238
  %247 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %248 = getelementptr inbounds [4 x i16]* %247, i32 0, i64 1
  %249 = load i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = icmp slt i32 %172, %250
  br i1 %251, label %252, label %253

; <label>:252                                     ; preds = %246
  br label %258

; <label>:253                                     ; preds = %246
  %254 = getelementptr inbounds [4 x i16]* %143, i64 -1
  %255 = getelementptr inbounds [4 x i16]* %254, i32 0, i64 1
  %256 = load i16* %255, align 2
  %257 = zext i16 %256 to i32
  br label %258

; <label>:258                                     ; preds = %253, %252
  %259 = phi i32 [ %172, %252 ], [ %257, %253 ]
  br label %260

; <label>:260                                     ; preds = %258, %241
  %261 = phi i32 [ %245, %241 ], [ %259, %258 ]
  br label %262

; <label>:262                                     ; preds = %260, %220
  %263 = phi i32 [ %221, %220 ], [ %261, %260 ]
  %264 = trunc i32 %263 to i16
  %265 = sub nsw i32 %col.0, %left.0
  %266 = sext i32 %265 to i64
  %267 = sub nsw i32 %row.0, %top.0
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %79, i64 0
  %270 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %269, i32 0, i64 %268
  %271 = getelementptr inbounds [256 x [3 x i16]]* %270, i32 0, i64 %266
  %272 = getelementptr inbounds [3 x i16]* %271, i32 0, i64 1
  store i16 %264, i16* %272, align 2
  %273 = load i16* @width, align 2
  %274 = zext i16 %273 to i32
  %275 = sub nsw i32 0, %274
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds [4 x i16]* %143, i64 %276
  %278 = getelementptr inbounds [4 x i16]* %277, i32 0, i64 1
  %279 = load i16* %278, align 2
  %280 = zext i16 %279 to i32
  %281 = sext i32 %124 to i64
  %282 = getelementptr inbounds [4 x i16]* %143, i64 0
  %283 = getelementptr inbounds [4 x i16]* %282, i32 0, i64 %281
  %284 = load i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = add nsw i32 %280, %285
  %287 = load i16* @width, align 2
  %288 = zext i16 %287 to i64
  %289 = getelementptr inbounds [4 x i16]* %143, i64 %288
  %290 = getelementptr inbounds [4 x i16]* %289, i32 0, i64 1
  %291 = load i16* %290, align 2
  %292 = zext i16 %291 to i32
  %293 = add nsw i32 %286, %292
  %294 = mul nsw i32 %293, 2
  %295 = sext i32 %124 to i64
  %296 = load i16* @width, align 2
  %297 = zext i16 %296 to i32
  %298 = mul nsw i32 -2, %297
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [4 x i16]* %143, i64 %299
  %301 = getelementptr inbounds [4 x i16]* %300, i32 0, i64 %295
  %302 = load i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = sub nsw i32 %294, %303
  %305 = sext i32 %124 to i64
  %306 = load i16* @width, align 2
  %307 = zext i16 %306 to i32
  %308 = mul nsw i32 2, %307
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [4 x i16]* %143, i64 %309
  %311 = getelementptr inbounds [4 x i16]* %310, i32 0, i64 %305
  %312 = load i16* %311, align 2
  %313 = zext i16 %312 to i32
  %314 = sub nsw i32 %304, %313
  %315 = ashr i32 %314, 2
  %316 = load i16* @width, align 2
  %317 = zext i16 %316 to i32
  %318 = sub nsw i32 0, %317
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds [4 x i16]* %143, i64 %319
  %321 = getelementptr inbounds [4 x i16]* %320, i32 0, i64 1
  %322 = load i16* %321, align 2
  %323 = zext i16 %322 to i32
  %324 = load i16* @width, align 2
  %325 = zext i16 %324 to i64
  %326 = getelementptr inbounds [4 x i16]* %143, i64 %325
  %327 = getelementptr inbounds [4 x i16]* %326, i32 0, i64 1
  %328 = load i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = icmp slt i32 %323, %329
  br i1 %330, label %331, label %387

; <label>:331                                     ; preds = %262
  %332 = load i16* @width, align 2
  %333 = zext i16 %332 to i32
  %334 = sub nsw i32 0, %333
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds [4 x i16]* %143, i64 %335
  %337 = getelementptr inbounds [4 x i16]* %336, i32 0, i64 1
  %338 = load i16* %337, align 2
  %339 = zext i16 %338 to i32
  %340 = load i16* @width, align 2
  %341 = zext i16 %340 to i64
  %342 = getelementptr inbounds [4 x i16]* %143, i64 %341
  %343 = getelementptr inbounds [4 x i16]* %342, i32 0, i64 1
  %344 = load i16* %343, align 2
  %345 = zext i16 %344 to i32
  %346 = icmp slt i32 %315, %345
  br i1 %346, label %347, label %348

; <label>:347                                     ; preds = %331
  br label %355

; <label>:348                                     ; preds = %331
  %349 = load i16* @width, align 2
  %350 = zext i16 %349 to i64
  %351 = getelementptr inbounds [4 x i16]* %143, i64 %350
  %352 = getelementptr inbounds [4 x i16]* %351, i32 0, i64 1
  %353 = load i16* %352, align 2
  %354 = zext i16 %353 to i32
  br label %355

; <label>:355                                     ; preds = %348, %347
  %356 = phi i32 [ %315, %347 ], [ %354, %348 ]
  %357 = icmp sgt i32 %339, %356
  br i1 %357, label %358, label %367

; <label>:358                                     ; preds = %355
  %359 = load i16* @width, align 2
  %360 = zext i16 %359 to i32
  %361 = sub nsw i32 0, %360
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [4 x i16]* %143, i64 %362
  %364 = getelementptr inbounds [4 x i16]* %363, i32 0, i64 1
  %365 = load i16* %364, align 2
  %366 = zext i16 %365 to i32
  br label %385

; <label>:367                                     ; preds = %355
  %368 = load i16* @width, align 2
  %369 = zext i16 %368 to i64
  %370 = getelementptr inbounds [4 x i16]* %143, i64 %369
  %371 = getelementptr inbounds [4 x i16]* %370, i32 0, i64 1
  %372 = load i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = icmp slt i32 %315, %373
  br i1 %374, label %375, label %376

; <label>:375                                     ; preds = %367
  br label %383

; <label>:376                                     ; preds = %367
  %377 = load i16* @width, align 2
  %378 = zext i16 %377 to i64
  %379 = getelementptr inbounds [4 x i16]* %143, i64 %378
  %380 = getelementptr inbounds [4 x i16]* %379, i32 0, i64 1
  %381 = load i16* %380, align 2
  %382 = zext i16 %381 to i32
  br label %383

; <label>:383                                     ; preds = %376, %375
  %384 = phi i32 [ %315, %375 ], [ %382, %376 ]
  br label %385

; <label>:385                                     ; preds = %383, %358
  %386 = phi i32 [ %366, %358 ], [ %384, %383 ]
  br label %447

; <label>:387                                     ; preds = %262
  %388 = load i16* @width, align 2
  %389 = zext i16 %388 to i64
  %390 = getelementptr inbounds [4 x i16]* %143, i64 %389
  %391 = getelementptr inbounds [4 x i16]* %390, i32 0, i64 1
  %392 = load i16* %391, align 2
  %393 = zext i16 %392 to i32
  %394 = load i16* @width, align 2
  %395 = zext i16 %394 to i32
  %396 = sub nsw i32 0, %395
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds [4 x i16]* %143, i64 %397
  %399 = getelementptr inbounds [4 x i16]* %398, i32 0, i64 1
  %400 = load i16* %399, align 2
  %401 = zext i16 %400 to i32
  %402 = icmp slt i32 %315, %401
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %387
  br label %413

; <label>:404                                     ; preds = %387
  %405 = load i16* @width, align 2
  %406 = zext i16 %405 to i32
  %407 = sub nsw i32 0, %406
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds [4 x i16]* %143, i64 %408
  %410 = getelementptr inbounds [4 x i16]* %409, i32 0, i64 1
  %411 = load i16* %410, align 2
  %412 = zext i16 %411 to i32
  br label %413

; <label>:413                                     ; preds = %404, %403
  %414 = phi i32 [ %315, %403 ], [ %412, %404 ]
  %415 = icmp sgt i32 %393, %414
  br i1 %415, label %416, label %423

; <label>:416                                     ; preds = %413
  %417 = load i16* @width, align 2
  %418 = zext i16 %417 to i64
  %419 = getelementptr inbounds [4 x i16]* %143, i64 %418
  %420 = getelementptr inbounds [4 x i16]* %419, i32 0, i64 1
  %421 = load i16* %420, align 2
  %422 = zext i16 %421 to i32
  br label %445

; <label>:423                                     ; preds = %413
  %424 = load i16* @width, align 2
  %425 = zext i16 %424 to i32
  %426 = sub nsw i32 0, %425
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds [4 x i16]* %143, i64 %427
  %429 = getelementptr inbounds [4 x i16]* %428, i32 0, i64 1
  %430 = load i16* %429, align 2
  %431 = zext i16 %430 to i32
  %432 = icmp slt i32 %315, %431
  br i1 %432, label %433, label %434

; <label>:433                                     ; preds = %423
  br label %443

; <label>:434                                     ; preds = %423
  %435 = load i16* @width, align 2
  %436 = zext i16 %435 to i32
  %437 = sub nsw i32 0, %436
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds [4 x i16]* %143, i64 %438
  %440 = getelementptr inbounds [4 x i16]* %439, i32 0, i64 1
  %441 = load i16* %440, align 2
  %442 = zext i16 %441 to i32
  br label %443

; <label>:443                                     ; preds = %434, %433
  %444 = phi i32 [ %315, %433 ], [ %442, %434 ]
  br label %445

; <label>:445                                     ; preds = %443, %416
  %446 = phi i32 [ %422, %416 ], [ %444, %443 ]
  br label %447

; <label>:447                                     ; preds = %445, %385
  %448 = phi i32 [ %386, %385 ], [ %446, %445 ]
  %449 = trunc i32 %448 to i16
  %450 = sub nsw i32 %col.0, %left.0
  %451 = sext i32 %450 to i64
  %452 = sub nsw i32 %row.0, %top.0
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %79, i64 1
  %455 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %454, i32 0, i64 %453
  %456 = getelementptr inbounds [256 x [3 x i16]]* %455, i32 0, i64 %451
  %457 = getelementptr inbounds [3 x i16]* %456, i32 0, i64 1
  store i16 %449, i16* %457, align 2
  br label %458

; <label>:458                                     ; preds = %447
  %459 = add nsw i32 %col.0, 2
  br label %125

; <label>:460                                     ; preds = %133
  br label %461

; <label>:461                                     ; preds = %460
  %462 = add nsw i32 %row.0, 1
  br label %96

; <label>:463                                     ; preds = %104
  br label %464

; <label>:464                                     ; preds = %900, %463
  %d.0 = phi i32 [ 0, %463 ], [ %901, %900 ]
  %465 = icmp slt i32 %d.0, 2
  br i1 %465, label %466, label %902

; <label>:466                                     ; preds = %464
  %467 = add nsw i32 %top.0, 1
  br label %468

; <label>:468                                     ; preds = %897, %466
  %row.1 = phi i32 [ %467, %466 ], [ %898, %897 ]
  %469 = add nsw i32 %top.0, 256
  %470 = sub nsw i32 %469, 1
  %471 = icmp slt i32 %row.1, %470
  br i1 %471, label %472, label %477

; <label>:472                                     ; preds = %468
  %473 = load i16* @height, align 2
  %474 = zext i16 %473 to i32
  %475 = sub nsw i32 %474, 3
  %476 = icmp slt i32 %row.1, %475
  br label %477

; <label>:477                                     ; preds = %472, %468
  %478 = phi i1 [ false, %468 ], [ %476, %472 ]
  br i1 %478, label %479, label %899

; <label>:479                                     ; preds = %477
  %480 = add nsw i32 %left.0, 1
  br label %481

; <label>:481                                     ; preds = %894, %479
  %col.1 = phi i32 [ %480, %479 ], [ %895, %894 ]
  %482 = add nsw i32 %left.0, 256
  %483 = sub nsw i32 %482, 1
  %484 = icmp slt i32 %col.1, %483
  br i1 %484, label %485, label %490

; <label>:485                                     ; preds = %481
  %486 = load i16* @width, align 2
  %487 = zext i16 %486 to i32
  %488 = sub nsw i32 %487, 3
  %489 = icmp slt i32 %col.1, %488
  br label %490

; <label>:490                                     ; preds = %485, %481
  %491 = phi i1 [ false, %481 ], [ %489, %485 ]
  br i1 %491, label %492, label %896

; <label>:492                                     ; preds = %490
  %493 = load [4 x i16]** @image, align 8
  %494 = load i16* @width, align 2
  %495 = zext i16 %494 to i32
  %496 = mul nsw i32 %row.1, %495
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds [4 x i16]* %493, i64 %497
  %499 = sext i32 %col.1 to i64
  %500 = getelementptr inbounds [4 x i16]* %498, i64 %499
  %501 = sub nsw i32 %col.1, %left.0
  %502 = sext i32 %501 to i64
  %503 = sub nsw i32 %row.1, %top.0
  %504 = sext i32 %503 to i64
  %505 = sext i32 %d.0 to i64
  %506 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %79, i64 %505
  %507 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %506, i32 0, i64 %504
  %508 = getelementptr inbounds [256 x [3 x i16]]* %507, i32 0, i64 %502
  %509 = sub nsw i32 %col.1, %left.0
  %510 = sext i32 %509 to i64
  %511 = sub nsw i32 %row.1, %top.0
  %512 = sext i32 %511 to i64
  %513 = sext i32 %d.0 to i64
  %514 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %81, i64 %513
  %515 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %514, i32 0, i64 %512
  %516 = getelementptr inbounds [256 x [3 x i16]]* %515, i32 0, i64 %510
  %517 = load i32* @filters, align 4
  %518 = shl i32 %row.1, 1
  %519 = and i32 %518, 14
  %520 = and i32 %col.1, 1
  %521 = add nsw i32 %519, %520
  %522 = shl i32 %521, 1
  %523 = lshr i32 %517, %522
  %524 = and i32 %523, 3
  %525 = sub i32 2, %524
  %526 = icmp eq i32 %525, 1
  br i1 %526, label %527, label %619

; <label>:527                                     ; preds = %492
  %528 = load i32* @filters, align 4
  %529 = add nsw i32 %row.1, 1
  %530 = shl i32 %529, 1
  %531 = and i32 %530, 14
  %532 = and i32 %col.1, 1
  %533 = add nsw i32 %531, %532
  %534 = shl i32 %533, 1
  %535 = lshr i32 %528, %534
  %536 = and i32 %535, 3
  %537 = getelementptr inbounds [4 x i16]* %500, i64 0
  %538 = getelementptr inbounds [4 x i16]* %537, i32 0, i64 1
  %539 = load i16* %538, align 2
  %540 = zext i16 %539 to i32
  %541 = sub nsw i32 2, %536
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds [4 x i16]* %500, i64 -1
  %544 = getelementptr inbounds [4 x i16]* %543, i32 0, i64 %542
  %545 = load i16* %544, align 2
  %546 = zext i16 %545 to i32
  %547 = sub nsw i32 2, %536
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds [4 x i16]* %500, i64 1
  %550 = getelementptr inbounds [4 x i16]* %549, i32 0, i64 %548
  %551 = load i16* %550, align 2
  %552 = zext i16 %551 to i32
  %553 = add nsw i32 %546, %552
  %554 = getelementptr inbounds [3 x i16]* %508, i64 -1
  %555 = getelementptr inbounds [3 x i16]* %554, i32 0, i64 1
  %556 = load i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = sub nsw i32 %553, %557
  %559 = getelementptr inbounds [3 x i16]* %508, i64 1
  %560 = getelementptr inbounds [3 x i16]* %559, i32 0, i64 1
  %561 = load i16* %560, align 2
  %562 = zext i16 %561 to i32
  %563 = sub nsw i32 %558, %562
  %564 = ashr i32 %563, 1
  %565 = add nsw i32 %540, %564
  %566 = icmp slt i32 %565, 65535
  br i1 %566, label %567, label %568

; <label>:567                                     ; preds = %527
  br label %569

; <label>:568                                     ; preds = %527
  br label %569

; <label>:569                                     ; preds = %568, %567
  %570 = phi i32 [ %565, %567 ], [ 65535, %568 ]
  %571 = icmp sgt i32 0, %570
  br i1 %571, label %572, label %573

; <label>:572                                     ; preds = %569
  br label %579

; <label>:573                                     ; preds = %569
  %574 = icmp slt i32 %565, 65535
  br i1 %574, label %575, label %576

; <label>:575                                     ; preds = %573
  br label %577

; <label>:576                                     ; preds = %573
  br label %577

; <label>:577                                     ; preds = %576, %575
  %578 = phi i32 [ %565, %575 ], [ 65535, %576 ]
  br label %579

; <label>:579                                     ; preds = %577, %572
  %580 = phi i32 [ 0, %572 ], [ %578, %577 ]
  %581 = trunc i32 %580 to i16
  %582 = sub nsw i32 2, %536
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds [3 x i16]* %508, i64 0
  %585 = getelementptr inbounds [3 x i16]* %584, i32 0, i64 %583
  store i16 %581, i16* %585, align 2
  %586 = getelementptr inbounds [4 x i16]* %500, i64 0
  %587 = getelementptr inbounds [4 x i16]* %586, i32 0, i64 1
  %588 = load i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = sext i32 %536 to i64
  %591 = load i16* @width, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 0, %592
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds [4 x i16]* %500, i64 %594
  %596 = getelementptr inbounds [4 x i16]* %595, i32 0, i64 %590
  %597 = load i16* %596, align 2
  %598 = zext i16 %597 to i32
  %599 = sext i32 %536 to i64
  %600 = load i16* @width, align 2
  %601 = zext i16 %600 to i64
  %602 = getelementptr inbounds [4 x i16]* %500, i64 %601
  %603 = getelementptr inbounds [4 x i16]* %602, i32 0, i64 %599
  %604 = load i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = add nsw i32 %598, %605
  %607 = getelementptr inbounds [3 x i16]* %508, i64 -256
  %608 = getelementptr inbounds [3 x i16]* %607, i32 0, i64 1
  %609 = load i16* %608, align 2
  %610 = zext i16 %609 to i32
  %611 = sub nsw i32 %606, %610
  %612 = getelementptr inbounds [3 x i16]* %508, i64 256
  %613 = getelementptr inbounds [3 x i16]* %612, i32 0, i64 1
  %614 = load i16* %613, align 2
  %615 = zext i16 %614 to i32
  %616 = sub nsw i32 %611, %615
  %617 = ashr i32 %616, 1
  %618 = add nsw i32 %589, %617
  br label %688

; <label>:619                                     ; preds = %492
  %620 = getelementptr inbounds [3 x i16]* %508, i64 0
  %621 = getelementptr inbounds [3 x i16]* %620, i32 0, i64 1
  %622 = load i16* %621, align 2
  %623 = zext i16 %622 to i32
  %624 = sext i32 %525 to i64
  %625 = load i16* @width, align 2
  %626 = zext i16 %625 to i32
  %627 = sub nsw i32 0, %626
  %628 = sub nsw i32 %627, 1
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds [4 x i16]* %500, i64 %629
  %631 = getelementptr inbounds [4 x i16]* %630, i32 0, i64 %624
  %632 = load i16* %631, align 2
  %633 = zext i16 %632 to i32
  %634 = sext i32 %525 to i64
  %635 = load i16* @width, align 2
  %636 = zext i16 %635 to i32
  %637 = sub nsw i32 0, %636
  %638 = add nsw i32 %637, 1
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds [4 x i16]* %500, i64 %639
  %641 = getelementptr inbounds [4 x i16]* %640, i32 0, i64 %634
  %642 = load i16* %641, align 2
  %643 = zext i16 %642 to i32
  %644 = add nsw i32 %633, %643
  %645 = sext i32 %525 to i64
  %646 = load i16* @width, align 2
  %647 = zext i16 %646 to i32
  %648 = sub nsw i32 %647, 1
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds [4 x i16]* %500, i64 %649
  %651 = getelementptr inbounds [4 x i16]* %650, i32 0, i64 %645
  %652 = load i16* %651, align 2
  %653 = zext i16 %652 to i32
  %654 = add nsw i32 %644, %653
  %655 = sext i32 %525 to i64
  %656 = load i16* @width, align 2
  %657 = zext i16 %656 to i32
  %658 = add nsw i32 %657, 1
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds [4 x i16]* %500, i64 %659
  %661 = getelementptr inbounds [4 x i16]* %660, i32 0, i64 %655
  %662 = load i16* %661, align 2
  %663 = zext i16 %662 to i32
  %664 = add nsw i32 %654, %663
  %665 = getelementptr inbounds [3 x i16]* %508, i64 -257
  %666 = getelementptr inbounds [3 x i16]* %665, i32 0, i64 1
  %667 = load i16* %666, align 2
  %668 = zext i16 %667 to i32
  %669 = sub nsw i32 %664, %668
  %670 = getelementptr inbounds [3 x i16]* %508, i64 -255
  %671 = getelementptr inbounds [3 x i16]* %670, i32 0, i64 1
  %672 = load i16* %671, align 2
  %673 = zext i16 %672 to i32
  %674 = sub nsw i32 %669, %673
  %675 = getelementptr inbounds [3 x i16]* %508, i64 255
  %676 = getelementptr inbounds [3 x i16]* %675, i32 0, i64 1
  %677 = load i16* %676, align 2
  %678 = zext i16 %677 to i32
  %679 = sub nsw i32 %674, %678
  %680 = getelementptr inbounds [3 x i16]* %508, i64 257
  %681 = getelementptr inbounds [3 x i16]* %680, i32 0, i64 1
  %682 = load i16* %681, align 2
  %683 = zext i16 %682 to i32
  %684 = sub nsw i32 %679, %683
  %685 = add nsw i32 %684, 1
  %686 = ashr i32 %685, 2
  %687 = add nsw i32 %623, %686
  br label %688

; <label>:688                                     ; preds = %619, %579
  %val.0 = phi i32 [ %618, %579 ], [ %687, %619 ]
  %c.0 = phi i32 [ %536, %579 ], [ %525, %619 ]
  %689 = icmp slt i32 %val.0, 65535
  br i1 %689, label %690, label %691

; <label>:690                                     ; preds = %688
  br label %692

; <label>:691                                     ; preds = %688
  br label %692

; <label>:692                                     ; preds = %691, %690
  %693 = phi i32 [ %val.0, %690 ], [ 65535, %691 ]
  %694 = icmp sgt i32 0, %693
  br i1 %694, label %695, label %696

; <label>:695                                     ; preds = %692
  br label %702

; <label>:696                                     ; preds = %692
  %697 = icmp slt i32 %val.0, 65535
  br i1 %697, label %698, label %699

; <label>:698                                     ; preds = %696
  br label %700

; <label>:699                                     ; preds = %696
  br label %700

; <label>:700                                     ; preds = %699, %698
  %701 = phi i32 [ %val.0, %698 ], [ 65535, %699 ]
  br label %702

; <label>:702                                     ; preds = %700, %695
  %703 = phi i32 [ 0, %695 ], [ %701, %700 ]
  %704 = trunc i32 %703 to i16
  %705 = sext i32 %c.0 to i64
  %706 = getelementptr inbounds [3 x i16]* %508, i64 0
  %707 = getelementptr inbounds [3 x i16]* %706, i32 0, i64 %705
  store i16 %704, i16* %707, align 2
  %708 = load i32* @filters, align 4
  %709 = shl i32 %row.1, 1
  %710 = and i32 %709, 14
  %711 = and i32 %col.1, 1
  %712 = add nsw i32 %710, %711
  %713 = shl i32 %712, 1
  %714 = lshr i32 %708, %713
  %715 = and i32 %714, 3
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds [4 x i16]* %500, i64 0
  %718 = getelementptr inbounds [4 x i16]* %717, i32 0, i64 %716
  %719 = load i16* %718, align 2
  %720 = sext i32 %715 to i64
  %721 = getelementptr inbounds [3 x i16]* %508, i64 0
  %722 = getelementptr inbounds [3 x i16]* %721, i32 0, i64 %720
  store i16 %719, i16* %722, align 2
  %723 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  store float 5.000000e-01, float* %723, align 4
  %724 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  store float 5.000000e-01, float* %724, align 4
  %725 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  store float 5.000000e-01, float* %725, align 4
  br label %726

; <label>:726                                     ; preds = %772, %702
  %c.1 = phi i32 [ 0, %702 ], [ %773, %772 ]
  %727 = load i32* @colors, align 4
  %728 = icmp slt i32 %c.1, %727
  br i1 %728, label %729, label %774

; <label>:729                                     ; preds = %726
  %730 = sext i32 %c.1 to i64
  %731 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 0
  %732 = getelementptr inbounds [4 x float]* %731, i32 0, i64 %730
  %733 = load float* %732, align 4
  %734 = sext i32 %c.1 to i64
  %735 = getelementptr inbounds [3 x i16]* %508, i64 0
  %736 = getelementptr inbounds [3 x i16]* %735, i32 0, i64 %734
  %737 = load i16* %736, align 2
  %738 = zext i16 %737 to i32
  %739 = sitofp i32 %738 to float
  %740 = fmul float %733, %739
  %741 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %742 = load float* %741, align 4
  %743 = fadd float %742, %740
  store float %743, float* %741, align 4
  %744 = sext i32 %c.1 to i64
  %745 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 1
  %746 = getelementptr inbounds [4 x float]* %745, i32 0, i64 %744
  %747 = load float* %746, align 4
  %748 = sext i32 %c.1 to i64
  %749 = getelementptr inbounds [3 x i16]* %508, i64 0
  %750 = getelementptr inbounds [3 x i16]* %749, i32 0, i64 %748
  %751 = load i16* %750, align 2
  %752 = zext i16 %751 to i32
  %753 = sitofp i32 %752 to float
  %754 = fmul float %747, %753
  %755 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %756 = load float* %755, align 4
  %757 = fadd float %756, %754
  store float %757, float* %755, align 4
  %758 = sext i32 %c.1 to i64
  %759 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 2
  %760 = getelementptr inbounds [4 x float]* %759, i32 0, i64 %758
  %761 = load float* %760, align 4
  %762 = sext i32 %c.1 to i64
  %763 = getelementptr inbounds [3 x i16]* %508, i64 0
  %764 = getelementptr inbounds [3 x i16]* %763, i32 0, i64 %762
  %765 = load i16* %764, align 2
  %766 = zext i16 %765 to i32
  %767 = sitofp i32 %766 to float
  %768 = fmul float %761, %767
  %769 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %770 = load float* %769, align 4
  %771 = fadd float %770, %768
  store float %771, float* %769, align 4
  br label %772

; <label>:772                                     ; preds = %729
  %773 = add nsw i32 %c.1, 1
  br label %726

; <label>:774                                     ; preds = %726
  %775 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %776 = load float* %775, align 4
  %777 = fptosi float %776 to i32
  %778 = icmp slt i32 %777, 65535
  br i1 %778, label %779, label %783

; <label>:779                                     ; preds = %774
  %780 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %781 = load float* %780, align 4
  %782 = fptosi float %781 to i32
  br label %784

; <label>:783                                     ; preds = %774
  br label %784

; <label>:784                                     ; preds = %783, %779
  %785 = phi i32 [ %782, %779 ], [ 65535, %783 ]
  %786 = icmp sgt i32 0, %785
  br i1 %786, label %787, label %788

; <label>:787                                     ; preds = %784
  br label %800

; <label>:788                                     ; preds = %784
  %789 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %790 = load float* %789, align 4
  %791 = fptosi float %790 to i32
  %792 = icmp slt i32 %791, 65535
  br i1 %792, label %793, label %797

; <label>:793                                     ; preds = %788
  %794 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %795 = load float* %794, align 4
  %796 = fptosi float %795 to i32
  br label %798

; <label>:797                                     ; preds = %788
  br label %798

; <label>:798                                     ; preds = %797, %793
  %799 = phi i32 [ %796, %793 ], [ 65535, %797 ]
  br label %800

; <label>:800                                     ; preds = %798, %787
  %801 = phi i32 [ 0, %787 ], [ %799, %798 ]
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %802
  %804 = load float* %803, align 4
  %805 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  store float %804, float* %805, align 4
  %806 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %807 = load float* %806, align 4
  %808 = fptosi float %807 to i32
  %809 = icmp slt i32 %808, 65535
  br i1 %809, label %810, label %814

; <label>:810                                     ; preds = %800
  %811 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %812 = load float* %811, align 4
  %813 = fptosi float %812 to i32
  br label %815

; <label>:814                                     ; preds = %800
  br label %815

; <label>:815                                     ; preds = %814, %810
  %816 = phi i32 [ %813, %810 ], [ 65535, %814 ]
  %817 = icmp sgt i32 0, %816
  br i1 %817, label %818, label %819

; <label>:818                                     ; preds = %815
  br label %831

; <label>:819                                     ; preds = %815
  %820 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %821 = load float* %820, align 4
  %822 = fptosi float %821 to i32
  %823 = icmp slt i32 %822, 65535
  br i1 %823, label %824, label %828

; <label>:824                                     ; preds = %819
  %825 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %826 = load float* %825, align 4
  %827 = fptosi float %826 to i32
  br label %829

; <label>:828                                     ; preds = %819
  br label %829

; <label>:829                                     ; preds = %828, %824
  %830 = phi i32 [ %827, %824 ], [ 65535, %828 ]
  br label %831

; <label>:831                                     ; preds = %829, %818
  %832 = phi i32 [ 0, %818 ], [ %830, %829 ]
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %833
  %835 = load float* %834, align 4
  %836 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  store float %835, float* %836, align 4
  %837 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %838 = load float* %837, align 4
  %839 = fptosi float %838 to i32
  %840 = icmp slt i32 %839, 65535
  br i1 %840, label %841, label %845

; <label>:841                                     ; preds = %831
  %842 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %843 = load float* %842, align 4
  %844 = fptosi float %843 to i32
  br label %846

; <label>:845                                     ; preds = %831
  br label %846

; <label>:846                                     ; preds = %845, %841
  %847 = phi i32 [ %844, %841 ], [ 65535, %845 ]
  %848 = icmp sgt i32 0, %847
  br i1 %848, label %849, label %850

; <label>:849                                     ; preds = %846
  br label %862

; <label>:850                                     ; preds = %846
  %851 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %852 = load float* %851, align 4
  %853 = fptosi float %852 to i32
  %854 = icmp slt i32 %853, 65535
  br i1 %854, label %855, label %859

; <label>:855                                     ; preds = %850
  %856 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %857 = load float* %856, align 4
  %858 = fptosi float %857 to i32
  br label %860

; <label>:859                                     ; preds = %850
  br label %860

; <label>:860                                     ; preds = %859, %855
  %861 = phi i32 [ %858, %855 ], [ 65535, %859 ]
  br label %862

; <label>:862                                     ; preds = %860, %849
  %863 = phi i32 [ 0, %849 ], [ %861, %860 ]
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %864
  %866 = load float* %865, align 4
  %867 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  store float %866, float* %867, align 4
  %868 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %869 = load float* %868, align 4
  %870 = fmul float 1.160000e+02, %869
  %871 = fsub float %870, 1.600000e+01
  %872 = fmul float 6.400000e+01, %871
  %873 = fptosi float %872 to i16
  %874 = getelementptr inbounds [3 x i16]* %516, i64 0
  %875 = getelementptr inbounds [3 x i16]* %874, i32 0, i64 0
  store i16 %873, i16* %875, align 2
  %876 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %877 = load float* %876, align 4
  %878 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %879 = load float* %878, align 4
  %880 = fsub float %877, %879
  %881 = fmul float 3.200000e+04, %880
  %882 = fptosi float %881 to i16
  %883 = getelementptr inbounds [3 x i16]* %516, i64 0
  %884 = getelementptr inbounds [3 x i16]* %883, i32 0, i64 1
  store i16 %882, i16* %884, align 2
  %885 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %886 = load float* %885, align 4
  %887 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %888 = load float* %887, align 4
  %889 = fsub float %886, %888
  %890 = fmul float 1.280000e+04, %889
  %891 = fptosi float %890 to i16
  %892 = getelementptr inbounds [3 x i16]* %516, i64 0
  %893 = getelementptr inbounds [3 x i16]* %892, i32 0, i64 2
  store i16 %891, i16* %893, align 2
  br label %894

; <label>:894                                     ; preds = %862
  %895 = add nsw i32 %col.1, 1
  br label %481

; <label>:896                                     ; preds = %490
  br label %897

; <label>:897                                     ; preds = %896
  %898 = add nsw i32 %row.1, 1
  br label %468

; <label>:899                                     ; preds = %477
  br label %900

; <label>:900                                     ; preds = %899
  %901 = add nsw i32 %d.0, 1
  br label %464

; <label>:902                                     ; preds = %464
  %903 = bitcast [256 x [256 x i8]]* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* %903, i8 0, i64 131072, i32 1, i1 false)
  %904 = add nsw i32 %top.0, 2
  br label %905

; <label>:905                                     ; preds = %1240, %902
  %row.2 = phi i32 [ %904, %902 ], [ %1241, %1240 ]
  %906 = add nsw i32 %top.0, 256
  %907 = sub nsw i32 %906, 2
  %908 = icmp slt i32 %row.2, %907
  br i1 %908, label %909, label %914

; <label>:909                                     ; preds = %905
  %910 = load i16* @height, align 2
  %911 = zext i16 %910 to i32
  %912 = sub nsw i32 %911, 4
  %913 = icmp slt i32 %row.2, %912
  br label %914

; <label>:914                                     ; preds = %909, %905
  %915 = phi i1 [ false, %905 ], [ %913, %909 ]
  br i1 %915, label %916, label %1242

; <label>:916                                     ; preds = %914
  %917 = sub nsw i32 %row.2, %top.0
  %918 = add nsw i32 %left.0, 2
  br label %919

; <label>:919                                     ; preds = %1237, %916
  %col.2 = phi i32 [ %918, %916 ], [ %1238, %1237 ]
  %920 = add nsw i32 %left.0, 256
  %921 = sub nsw i32 %920, 2
  %922 = icmp slt i32 %col.2, %921
  br i1 %922, label %923, label %928

; <label>:923                                     ; preds = %919
  %924 = load i16* @width, align 2
  %925 = zext i16 %924 to i32
  %926 = sub nsw i32 %925, 4
  %927 = icmp slt i32 %col.2, %926
  br label %928

; <label>:928                                     ; preds = %923, %919
  %929 = phi i1 [ false, %919 ], [ %927, %923 ]
  br i1 %929, label %930, label %1239

; <label>:930                                     ; preds = %928
  %931 = sub nsw i32 %col.2, %left.0
  br label %932

; <label>:932                                     ; preds = %1053, %930
  %d.1 = phi i32 [ 0, %930 ], [ %1054, %1053 ]
  %933 = icmp slt i32 %d.1, 2
  br i1 %933, label %934, label %1055

; <label>:934                                     ; preds = %932
  %935 = sext i32 %931 to i64
  %936 = sext i32 %917 to i64
  %937 = sext i32 %d.1 to i64
  %938 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %81, i64 %937
  %939 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %938, i32 0, i64 %936
  %940 = getelementptr inbounds [256 x [3 x i16]]* %939, i32 0, i64 %935
  br label %941

; <label>:941                                     ; preds = %1050, %934
  %i.2 = phi i32 [ 0, %934 ], [ %1051, %1050 ]
  %942 = icmp slt i32 %i.2, 4
  br i1 %942, label %943, label %1052

; <label>:943                                     ; preds = %941
  %944 = getelementptr inbounds [3 x i16]* %940, i64 0
  %945 = getelementptr inbounds [3 x i16]* %944, i32 0, i64 0
  %946 = load i16* %945, align 2
  %947 = sext i16 %946 to i32
  %948 = sext i32 %i.2 to i64
  %949 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %948
  %950 = load i32* %949, align 4
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds [3 x i16]* %940, i64 %951
  %953 = getelementptr inbounds [3 x i16]* %952, i32 0, i64 0
  %954 = load i16* %953, align 2
  %955 = sext i16 %954 to i32
  %956 = sub nsw i32 %947, %955
  %957 = getelementptr inbounds [3 x i16]* %940, i64 0
  %958 = getelementptr inbounds [3 x i16]* %957, i32 0, i64 0
  %959 = load i16* %958, align 2
  %960 = sext i16 %959 to i32
  %961 = sext i32 %i.2 to i64
  %962 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %961
  %963 = load i32* %962, align 4
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds [3 x i16]* %940, i64 %964
  %966 = getelementptr inbounds [3 x i16]* %965, i32 0, i64 0
  %967 = load i16* %966, align 2
  %968 = sext i16 %967 to i32
  %969 = sub nsw i32 %960, %968
  %970 = ashr i32 %969, 31
  %971 = xor i32 %956, %970
  %972 = getelementptr inbounds [3 x i16]* %940, i64 0
  %973 = getelementptr inbounds [3 x i16]* %972, i32 0, i64 0
  %974 = load i16* %973, align 2
  %975 = sext i16 %974 to i32
  %976 = sext i32 %i.2 to i64
  %977 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %976
  %978 = load i32* %977, align 4
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds [3 x i16]* %940, i64 %979
  %981 = getelementptr inbounds [3 x i16]* %980, i32 0, i64 0
  %982 = load i16* %981, align 2
  %983 = sext i16 %982 to i32
  %984 = sub nsw i32 %975, %983
  %985 = ashr i32 %984, 31
  %986 = sub nsw i32 %971, %985
  %987 = sext i32 %i.2 to i64
  %988 = sext i32 %d.1 to i64
  %989 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 %988
  %990 = getelementptr inbounds [4 x i32]* %989, i32 0, i64 %987
  store i32 %986, i32* %990, align 4
  %991 = getelementptr inbounds [3 x i16]* %940, i64 0
  %992 = getelementptr inbounds [3 x i16]* %991, i32 0, i64 1
  %993 = load i16* %992, align 2
  %994 = sext i16 %993 to i32
  %995 = sext i32 %i.2 to i64
  %996 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %995
  %997 = load i32* %996, align 4
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds [3 x i16]* %940, i64 %998
  %1000 = getelementptr inbounds [3 x i16]* %999, i32 0, i64 1
  %1001 = load i16* %1000, align 2
  %1002 = sext i16 %1001 to i32
  %1003 = sub nsw i32 %994, %1002
  %1004 = getelementptr inbounds [3 x i16]* %940, i64 0
  %1005 = getelementptr inbounds [3 x i16]* %1004, i32 0, i64 1
  %1006 = load i16* %1005, align 2
  %1007 = sext i16 %1006 to i32
  %1008 = sext i32 %i.2 to i64
  %1009 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1008
  %1010 = load i32* %1009, align 4
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds [3 x i16]* %940, i64 %1011
  %1013 = getelementptr inbounds [3 x i16]* %1012, i32 0, i64 1
  %1014 = load i16* %1013, align 2
  %1015 = sext i16 %1014 to i32
  %1016 = sub nsw i32 %1007, %1015
  %1017 = mul nsw i32 %1003, %1016
  %1018 = getelementptr inbounds [3 x i16]* %940, i64 0
  %1019 = getelementptr inbounds [3 x i16]* %1018, i32 0, i64 2
  %1020 = load i16* %1019, align 2
  %1021 = sext i16 %1020 to i32
  %1022 = sext i32 %i.2 to i64
  %1023 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1022
  %1024 = load i32* %1023, align 4
  %1025 = sext i32 %1024 to i64
  %1026 = getelementptr inbounds [3 x i16]* %940, i64 %1025
  %1027 = getelementptr inbounds [3 x i16]* %1026, i32 0, i64 2
  %1028 = load i16* %1027, align 2
  %1029 = sext i16 %1028 to i32
  %1030 = sub nsw i32 %1021, %1029
  %1031 = getelementptr inbounds [3 x i16]* %940, i64 0
  %1032 = getelementptr inbounds [3 x i16]* %1031, i32 0, i64 2
  %1033 = load i16* %1032, align 2
  %1034 = sext i16 %1033 to i32
  %1035 = sext i32 %i.2 to i64
  %1036 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1035
  %1037 = load i32* %1036, align 4
  %1038 = sext i32 %1037 to i64
  %1039 = getelementptr inbounds [3 x i16]* %940, i64 %1038
  %1040 = getelementptr inbounds [3 x i16]* %1039, i32 0, i64 2
  %1041 = load i16* %1040, align 2
  %1042 = sext i16 %1041 to i32
  %1043 = sub nsw i32 %1034, %1042
  %1044 = mul nsw i32 %1030, %1043
  %1045 = add nsw i32 %1017, %1044
  %1046 = sext i32 %i.2 to i64
  %1047 = sext i32 %d.1 to i64
  %1048 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 %1047
  %1049 = getelementptr inbounds [4 x i32]* %1048, i32 0, i64 %1046
  store i32 %1045, i32* %1049, align 4
  br label %1050

; <label>:1050                                    ; preds = %943
  %1051 = add nsw i32 %i.2, 1
  br label %941

; <label>:1052                                    ; preds = %941
  br label %1053

; <label>:1053                                    ; preds = %1052
  %1054 = add nsw i32 %d.1, 1
  br label %932

; <label>:1055                                    ; preds = %932
  %1056 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1057 = getelementptr inbounds [4 x i32]* %1056, i32 0, i64 0
  %1058 = load i32* %1057, align 4
  %1059 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1060 = getelementptr inbounds [4 x i32]* %1059, i32 0, i64 1
  %1061 = load i32* %1060, align 4
  %1062 = icmp ugt i32 %1058, %1061
  br i1 %1062, label %1063, label %1067

; <label>:1063                                    ; preds = %1055
  %1064 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1065 = getelementptr inbounds [4 x i32]* %1064, i32 0, i64 0
  %1066 = load i32* %1065, align 4
  br label %1071

; <label>:1067                                    ; preds = %1055
  %1068 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1069 = getelementptr inbounds [4 x i32]* %1068, i32 0, i64 1
  %1070 = load i32* %1069, align 4
  br label %1071

; <label>:1071                                    ; preds = %1067, %1063
  %1072 = phi i32 [ %1066, %1063 ], [ %1070, %1067 ]
  %1073 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1074 = getelementptr inbounds [4 x i32]* %1073, i32 0, i64 2
  %1075 = load i32* %1074, align 4
  %1076 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1077 = getelementptr inbounds [4 x i32]* %1076, i32 0, i64 3
  %1078 = load i32* %1077, align 4
  %1079 = icmp ugt i32 %1075, %1078
  br i1 %1079, label %1080, label %1084

; <label>:1080                                    ; preds = %1071
  %1081 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1082 = getelementptr inbounds [4 x i32]* %1081, i32 0, i64 2
  %1083 = load i32* %1082, align 4
  br label %1088

; <label>:1084                                    ; preds = %1071
  %1085 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1086 = getelementptr inbounds [4 x i32]* %1085, i32 0, i64 3
  %1087 = load i32* %1086, align 4
  br label %1088

; <label>:1088                                    ; preds = %1084, %1080
  %1089 = phi i32 [ %1083, %1080 ], [ %1087, %1084 ]
  %1090 = icmp ult i32 %1072, %1089
  br i1 %1090, label %1091, label %1109

; <label>:1091                                    ; preds = %1088
  %1092 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1093 = getelementptr inbounds [4 x i32]* %1092, i32 0, i64 0
  %1094 = load i32* %1093, align 4
  %1095 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1096 = getelementptr inbounds [4 x i32]* %1095, i32 0, i64 1
  %1097 = load i32* %1096, align 4
  %1098 = icmp ugt i32 %1094, %1097
  br i1 %1098, label %1099, label %1103

; <label>:1099                                    ; preds = %1091
  %1100 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1101 = getelementptr inbounds [4 x i32]* %1100, i32 0, i64 0
  %1102 = load i32* %1101, align 4
  br label %1107

; <label>:1103                                    ; preds = %1091
  %1104 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1105 = getelementptr inbounds [4 x i32]* %1104, i32 0, i64 1
  %1106 = load i32* %1105, align 4
  br label %1107

; <label>:1107                                    ; preds = %1103, %1099
  %1108 = phi i32 [ %1102, %1099 ], [ %1106, %1103 ]
  br label %1127

; <label>:1109                                    ; preds = %1088
  %1110 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1111 = getelementptr inbounds [4 x i32]* %1110, i32 0, i64 2
  %1112 = load i32* %1111, align 4
  %1113 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1114 = getelementptr inbounds [4 x i32]* %1113, i32 0, i64 3
  %1115 = load i32* %1114, align 4
  %1116 = icmp ugt i32 %1112, %1115
  br i1 %1116, label %1117, label %1121

; <label>:1117                                    ; preds = %1109
  %1118 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1119 = getelementptr inbounds [4 x i32]* %1118, i32 0, i64 2
  %1120 = load i32* %1119, align 4
  br label %1125

; <label>:1121                                    ; preds = %1109
  %1122 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1123 = getelementptr inbounds [4 x i32]* %1122, i32 0, i64 3
  %1124 = load i32* %1123, align 4
  br label %1125

; <label>:1125                                    ; preds = %1121, %1117
  %1126 = phi i32 [ %1120, %1117 ], [ %1124, %1121 ]
  br label %1127

; <label>:1127                                    ; preds = %1125, %1107
  %1128 = phi i32 [ %1108, %1107 ], [ %1126, %1125 ]
  %1129 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1130 = getelementptr inbounds [4 x i32]* %1129, i32 0, i64 0
  %1131 = load i32* %1130, align 4
  %1132 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1133 = getelementptr inbounds [4 x i32]* %1132, i32 0, i64 1
  %1134 = load i32* %1133, align 4
  %1135 = icmp ugt i32 %1131, %1134
  br i1 %1135, label %1136, label %1140

; <label>:1136                                    ; preds = %1127
  %1137 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1138 = getelementptr inbounds [4 x i32]* %1137, i32 0, i64 0
  %1139 = load i32* %1138, align 4
  br label %1144

; <label>:1140                                    ; preds = %1127
  %1141 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1142 = getelementptr inbounds [4 x i32]* %1141, i32 0, i64 1
  %1143 = load i32* %1142, align 4
  br label %1144

; <label>:1144                                    ; preds = %1140, %1136
  %1145 = phi i32 [ %1139, %1136 ], [ %1143, %1140 ]
  %1146 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1147 = getelementptr inbounds [4 x i32]* %1146, i32 0, i64 2
  %1148 = load i32* %1147, align 4
  %1149 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1150 = getelementptr inbounds [4 x i32]* %1149, i32 0, i64 3
  %1151 = load i32* %1150, align 4
  %1152 = icmp ugt i32 %1148, %1151
  br i1 %1152, label %1153, label %1157

; <label>:1153                                    ; preds = %1144
  %1154 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1155 = getelementptr inbounds [4 x i32]* %1154, i32 0, i64 2
  %1156 = load i32* %1155, align 4
  br label %1161

; <label>:1157                                    ; preds = %1144
  %1158 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1159 = getelementptr inbounds [4 x i32]* %1158, i32 0, i64 3
  %1160 = load i32* %1159, align 4
  br label %1161

; <label>:1161                                    ; preds = %1157, %1153
  %1162 = phi i32 [ %1156, %1153 ], [ %1160, %1157 ]
  %1163 = icmp ult i32 %1145, %1162
  br i1 %1163, label %1164, label %1182

; <label>:1164                                    ; preds = %1161
  %1165 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1166 = getelementptr inbounds [4 x i32]* %1165, i32 0, i64 0
  %1167 = load i32* %1166, align 4
  %1168 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1169 = getelementptr inbounds [4 x i32]* %1168, i32 0, i64 1
  %1170 = load i32* %1169, align 4
  %1171 = icmp ugt i32 %1167, %1170
  br i1 %1171, label %1172, label %1176

; <label>:1172                                    ; preds = %1164
  %1173 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1174 = getelementptr inbounds [4 x i32]* %1173, i32 0, i64 0
  %1175 = load i32* %1174, align 4
  br label %1180

; <label>:1176                                    ; preds = %1164
  %1177 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1178 = getelementptr inbounds [4 x i32]* %1177, i32 0, i64 1
  %1179 = load i32* %1178, align 4
  br label %1180

; <label>:1180                                    ; preds = %1176, %1172
  %1181 = phi i32 [ %1175, %1172 ], [ %1179, %1176 ]
  br label %1200

; <label>:1182                                    ; preds = %1161
  %1183 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1184 = getelementptr inbounds [4 x i32]* %1183, i32 0, i64 2
  %1185 = load i32* %1184, align 4
  %1186 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1187 = getelementptr inbounds [4 x i32]* %1186, i32 0, i64 3
  %1188 = load i32* %1187, align 4
  %1189 = icmp ugt i32 %1185, %1188
  br i1 %1189, label %1190, label %1194

; <label>:1190                                    ; preds = %1182
  %1191 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1192 = getelementptr inbounds [4 x i32]* %1191, i32 0, i64 2
  %1193 = load i32* %1192, align 4
  br label %1198

; <label>:1194                                    ; preds = %1182
  %1195 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1196 = getelementptr inbounds [4 x i32]* %1195, i32 0, i64 3
  %1197 = load i32* %1196, align 4
  br label %1198

; <label>:1198                                    ; preds = %1194, %1190
  %1199 = phi i32 [ %1193, %1190 ], [ %1197, %1194 ]
  br label %1200

; <label>:1200                                    ; preds = %1198, %1180
  %1201 = phi i32 [ %1181, %1180 ], [ %1199, %1198 ]
  br label %1202

; <label>:1202                                    ; preds = %1234, %1200
  %d.2 = phi i32 [ 0, %1200 ], [ %1235, %1234 ]
  %1203 = icmp slt i32 %d.2, 2
  br i1 %1203, label %1204, label %1236

; <label>:1204                                    ; preds = %1202
  br label %1205

; <label>:1205                                    ; preds = %1231, %1204
  %i.3 = phi i32 [ 0, %1204 ], [ %1232, %1231 ]
  %1206 = icmp slt i32 %i.3, 4
  br i1 %1206, label %1207, label %1233

; <label>:1207                                    ; preds = %1205
  %1208 = sext i32 %i.3 to i64
  %1209 = sext i32 %d.2 to i64
  %1210 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 %1209
  %1211 = getelementptr inbounds [4 x i32]* %1210, i32 0, i64 %1208
  %1212 = load i32* %1211, align 4
  %1213 = icmp ule i32 %1212, %1128
  br i1 %1213, label %1214, label %1230

; <label>:1214                                    ; preds = %1207
  %1215 = sext i32 %i.3 to i64
  %1216 = sext i32 %d.2 to i64
  %1217 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 %1216
  %1218 = getelementptr inbounds [4 x i32]* %1217, i32 0, i64 %1215
  %1219 = load i32* %1218, align 4
  %1220 = icmp ule i32 %1219, %1201
  br i1 %1220, label %1221, label %1230

; <label>:1221                                    ; preds = %1214
  %1222 = sext i32 %931 to i64
  %1223 = sext i32 %917 to i64
  %1224 = sext i32 %d.2 to i64
  %1225 = getelementptr inbounds [256 x [256 x i8]]* %83, i64 %1224
  %1226 = getelementptr inbounds [256 x [256 x i8]]* %1225, i32 0, i64 %1223
  %1227 = getelementptr inbounds [256 x i8]* %1226, i32 0, i64 %1222
  %1228 = load i8* %1227, align 1
  %1229 = add i8 %1228, 1
  store i8 %1229, i8* %1227, align 1
  br label %1230

; <label>:1230                                    ; preds = %1221, %1214, %1207
  br label %1231

; <label>:1231                                    ; preds = %1230
  %1232 = add nsw i32 %i.3, 1
  br label %1205

; <label>:1233                                    ; preds = %1205
  br label %1234

; <label>:1234                                    ; preds = %1233
  %1235 = add nsw i32 %d.2, 1
  br label %1202

; <label>:1236                                    ; preds = %1202
  br label %1237

; <label>:1237                                    ; preds = %1236
  %1238 = add nsw i32 %col.2, 1
  br label %919

; <label>:1239                                    ; preds = %928
  br label %1240

; <label>:1240                                    ; preds = %1239
  %1241 = add nsw i32 %row.2, 1
  br label %905

; <label>:1242                                    ; preds = %914
  %1243 = add nsw i32 %top.0, 3
  br label %1244

; <label>:1244                                    ; preds = %1384, %1242
  %row.3 = phi i32 [ %1243, %1242 ], [ %1385, %1384 ]
  %1245 = add nsw i32 %top.0, 256
  %1246 = sub nsw i32 %1245, 3
  %1247 = icmp slt i32 %row.3, %1246
  br i1 %1247, label %1248, label %1253

; <label>:1248                                    ; preds = %1244
  %1249 = load i16* @height, align 2
  %1250 = zext i16 %1249 to i32
  %1251 = sub nsw i32 %1250, 5
  %1252 = icmp slt i32 %row.3, %1251
  br label %1253

; <label>:1253                                    ; preds = %1248, %1244
  %1254 = phi i1 [ false, %1244 ], [ %1252, %1248 ]
  br i1 %1254, label %1255, label %1386

; <label>:1255                                    ; preds = %1253
  %1256 = sub nsw i32 %row.3, %top.0
  %1257 = add nsw i32 %left.0, 3
  br label %1258

; <label>:1258                                    ; preds = %1381, %1255
  %col.3 = phi i32 [ %1257, %1255 ], [ %1382, %1381 ]
  %1259 = add nsw i32 %left.0, 256
  %1260 = sub nsw i32 %1259, 3
  %1261 = icmp slt i32 %col.3, %1260
  br i1 %1261, label %1262, label %1267

; <label>:1262                                    ; preds = %1258
  %1263 = load i16* @width, align 2
  %1264 = zext i16 %1263 to i32
  %1265 = sub nsw i32 %1264, 5
  %1266 = icmp slt i32 %col.3, %1265
  br label %1267

; <label>:1267                                    ; preds = %1262, %1258
  %1268 = phi i1 [ false, %1258 ], [ %1266, %1262 ]
  br i1 %1268, label %1269, label %1383

; <label>:1269                                    ; preds = %1267
  %1270 = sub nsw i32 %col.3, %left.0
  br label %1271

; <label>:1271                                    ; preds = %1304, %1269
  %d.3 = phi i32 [ 0, %1269 ], [ %1305, %1304 ]
  %1272 = icmp slt i32 %d.3, 2
  br i1 %1272, label %1273, label %1306

; <label>:1273                                    ; preds = %1271
  %1274 = sext i32 %d.3 to i64
  %1275 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 %1274
  store i32 0, i32* %1275, align 4
  %1276 = sub nsw i32 %1256, 1
  br label %1277

; <label>:1277                                    ; preds = %1301, %1273
  %i.4 = phi i32 [ %1276, %1273 ], [ %1302, %1301 ]
  %1278 = add nsw i32 %1256, 1
  %1279 = icmp sle i32 %i.4, %1278
  br i1 %1279, label %1280, label %1303

; <label>:1280                                    ; preds = %1277
  %1281 = sub nsw i32 %1270, 1
  br label %1282

; <label>:1282                                    ; preds = %1298, %1280
  %j.1 = phi i32 [ %1281, %1280 ], [ %1299, %1298 ]
  %1283 = add nsw i32 %1270, 1
  %1284 = icmp sle i32 %j.1, %1283
  br i1 %1284, label %1285, label %1300

; <label>:1285                                    ; preds = %1282
  %1286 = sext i32 %j.1 to i64
  %1287 = sext i32 %i.4 to i64
  %1288 = sext i32 %d.3 to i64
  %1289 = getelementptr inbounds [256 x [256 x i8]]* %83, i64 %1288
  %1290 = getelementptr inbounds [256 x [256 x i8]]* %1289, i32 0, i64 %1287
  %1291 = getelementptr inbounds [256 x i8]* %1290, i32 0, i64 %1286
  %1292 = load i8* %1291, align 1
  %1293 = sext i8 %1292 to i32
  %1294 = sext i32 %d.3 to i64
  %1295 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 %1294
  %1296 = load i32* %1295, align 4
  %1297 = add nsw i32 %1296, %1293
  store i32 %1297, i32* %1295, align 4
  br label %1298

; <label>:1298                                    ; preds = %1285
  %1299 = add nsw i32 %j.1, 1
  br label %1282

; <label>:1300                                    ; preds = %1282
  br label %1301

; <label>:1301                                    ; preds = %1300
  %1302 = add nsw i32 %i.4, 1
  br label %1277

; <label>:1303                                    ; preds = %1277
  br label %1304

; <label>:1304                                    ; preds = %1303
  %1305 = add nsw i32 %d.3, 1
  br label %1271

; <label>:1306                                    ; preds = %1271
  %1307 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 0
  %1308 = load i32* %1307, align 4
  %1309 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 1
  %1310 = load i32* %1309, align 4
  %1311 = icmp ne i32 %1308, %1310
  br i1 %1311, label %1312, label %1343

; <label>:1312                                    ; preds = %1306
  br label %1313

; <label>:1313                                    ; preds = %1340, %1312
  %c.2 = phi i32 [ 0, %1312 ], [ %1341, %1340 ]
  %1314 = icmp slt i32 %c.2, 3
  br i1 %1314, label %1315, label %1342

; <label>:1315                                    ; preds = %1313
  %1316 = sext i32 %c.2 to i64
  %1317 = sext i32 %1270 to i64
  %1318 = sext i32 %1256 to i64
  %1319 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 1
  %1320 = load i32* %1319, align 4
  %1321 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 0
  %1322 = load i32* %1321, align 4
  %1323 = icmp sgt i32 %1320, %1322
  %1324 = zext i1 %1323 to i32
  %1325 = sext i32 %1324 to i64
  %1326 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %79, i64 %1325
  %1327 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1326, i32 0, i64 %1318
  %1328 = getelementptr inbounds [256 x [3 x i16]]* %1327, i32 0, i64 %1317
  %1329 = getelementptr inbounds [3 x i16]* %1328, i32 0, i64 %1316
  %1330 = load i16* %1329, align 2
  %1331 = sext i32 %c.2 to i64
  %1332 = load i16* @width, align 2
  %1333 = zext i16 %1332 to i32
  %1334 = mul nsw i32 %row.3, %1333
  %1335 = add nsw i32 %1334, %col.3
  %1336 = sext i32 %1335 to i64
  %1337 = load [4 x i16]** @image, align 8
  %1338 = getelementptr inbounds [4 x i16]* %1337, i64 %1336
  %1339 = getelementptr inbounds [4 x i16]* %1338, i32 0, i64 %1331
  store i16 %1330, i16* %1339, align 2
  br label %1340

; <label>:1340                                    ; preds = %1315
  %1341 = add nsw i32 %c.2, 1
  br label %1313

; <label>:1342                                    ; preds = %1313
  br label %1380

; <label>:1343                                    ; preds = %1306
  br label %1344

; <label>:1344                                    ; preds = %1377, %1343
  %c.3 = phi i32 [ 0, %1343 ], [ %1378, %1377 ]
  %1345 = icmp slt i32 %c.3, 3
  br i1 %1345, label %1346, label %1379

; <label>:1346                                    ; preds = %1344
  %1347 = sext i32 %c.3 to i64
  %1348 = sext i32 %1270 to i64
  %1349 = sext i32 %1256 to i64
  %1350 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %79, i64 0
  %1351 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1350, i32 0, i64 %1349
  %1352 = getelementptr inbounds [256 x [3 x i16]]* %1351, i32 0, i64 %1348
  %1353 = getelementptr inbounds [3 x i16]* %1352, i32 0, i64 %1347
  %1354 = load i16* %1353, align 2
  %1355 = zext i16 %1354 to i32
  %1356 = sext i32 %c.3 to i64
  %1357 = sext i32 %1270 to i64
  %1358 = sext i32 %1256 to i64
  %1359 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %79, i64 1
  %1360 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1359, i32 0, i64 %1358
  %1361 = getelementptr inbounds [256 x [3 x i16]]* %1360, i32 0, i64 %1357
  %1362 = getelementptr inbounds [3 x i16]* %1361, i32 0, i64 %1356
  %1363 = load i16* %1362, align 2
  %1364 = zext i16 %1363 to i32
  %1365 = add nsw i32 %1355, %1364
  %1366 = ashr i32 %1365, 1
  %1367 = trunc i32 %1366 to i16
  %1368 = sext i32 %c.3 to i64
  %1369 = load i16* @width, align 2
  %1370 = zext i16 %1369 to i32
  %1371 = mul nsw i32 %row.3, %1370
  %1372 = add nsw i32 %1371, %col.3
  %1373 = sext i32 %1372 to i64
  %1374 = load [4 x i16]** @image, align 8
  %1375 = getelementptr inbounds [4 x i16]* %1374, i64 %1373
  %1376 = getelementptr inbounds [4 x i16]* %1375, i32 0, i64 %1368
  store i16 %1367, i16* %1376, align 2
  br label %1377

; <label>:1377                                    ; preds = %1346
  %1378 = add nsw i32 %c.3, 1
  br label %1344

; <label>:1379                                    ; preds = %1344
  br label %1380

; <label>:1380                                    ; preds = %1379, %1342
  br label %1381

; <label>:1381                                    ; preds = %1380
  %1382 = add nsw i32 %col.3, 1
  br label %1258

; <label>:1383                                    ; preds = %1267
  br label %1384

; <label>:1384                                    ; preds = %1383
  %1385 = add nsw i32 %row.3, 1
  br label %1244

; <label>:1386                                    ; preds = %1253
  br label %1387

; <label>:1387                                    ; preds = %1386
  %1388 = add nsw i32 %left.0, 250
  br label %90

; <label>:1389                                    ; preds = %90
  br label %1390

; <label>:1390                                    ; preds = %1389
  %1391 = add nsw i32 %top.0, 250
  br label %84

; <label>:1392                                    ; preds = %84
  call void @free(i8* %78) #4
  ret void
}

; Function Attrs: nounwind
declare double @pow(double, double) #3

; Function Attrs: nounwind uwtable
define void @median_filter() #0 {
  %med = alloca [9 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %210, %0
  %pass.0 = phi i32 [ 1, %0 ], [ %211, %210 ]
  %2 = load i32* @med_passes, align 4
  %3 = icmp sle i32 %pass.0, %2
  br i1 %3, label %4, label %212

; <label>:4                                       ; preds = %1
  %5 = load i32* @verbose, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %4
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([26 x i8]* @.str82, i32 0, i32 0), i32 %pass.0)
  br label %10

; <label>:10                                      ; preds = %7, %4
  br label %11

; <label>:11                                      ; preds = %207, %10
  %c.0 = phi i32 [ 0, %10 ], [ %208, %207 ]
  %12 = icmp slt i32 %c.0, 3
  br i1 %12, label %13, label %209

; <label>:13                                      ; preds = %11
  %14 = load [4 x i16]** @image, align 8
  br label %15

; <label>:15                                      ; preds = %32, %13
  %pix.0 = phi [4 x i16]* [ %14, %13 ], [ %33, %32 ]
  %16 = load [4 x i16]** @image, align 8
  %17 = load i16* @width, align 2
  %18 = zext i16 %17 to i32
  %19 = load i16* @height, align 2
  %20 = zext i16 %19 to i32
  %21 = mul nsw i32 %18, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i16]* %16, i64 %22
  %24 = icmp ult [4 x i16]* %pix.0, %23
  br i1 %24, label %25, label %34

; <label>:25                                      ; preds = %15
  %26 = sext i32 %c.0 to i64
  %27 = getelementptr inbounds [4 x i16]* %pix.0, i64 0
  %28 = getelementptr inbounds [4 x i16]* %27, i32 0, i64 %26
  %29 = load i16* %28, align 2
  %30 = getelementptr inbounds [4 x i16]* %pix.0, i64 0
  %31 = getelementptr inbounds [4 x i16]* %30, i32 0, i64 3
  store i16 %29, i16* %31, align 2
  br label %32

; <label>:32                                      ; preds = %25
  %33 = getelementptr inbounds [4 x i16]* %pix.0, i32 1
  br label %15

; <label>:34                                      ; preds = %15
  %35 = load [4 x i16]** @image, align 8
  %36 = load i16* @width, align 2
  %37 = zext i16 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [4 x i16]* %35, i64 %38
  br label %40

; <label>:40                                      ; preds = %204, %34
  %pix.1 = phi [4 x i16]* [ %39, %34 ], [ %205, %204 ]
  %41 = load [4 x i16]** @image, align 8
  %42 = load i16* @width, align 2
  %43 = zext i16 %42 to i32
  %44 = load i16* @height, align 2
  %45 = zext i16 %44 to i32
  %46 = sub nsw i32 %45, 1
  %47 = mul nsw i32 %43, %46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [4 x i16]* %41, i64 %48
  %50 = icmp ult [4 x i16]* %pix.1, %49
  br i1 %50, label %51, label %206

; <label>:51                                      ; preds = %40
  %52 = load [4 x i16]** @image, align 8
  %53 = ptrtoint [4 x i16]* %pix.1 to i64
  %54 = ptrtoint [4 x i16]* %52 to i64
  %55 = sub i64 %53, %54
  %56 = sdiv exact i64 %55, 8
  %57 = add nsw i64 %56, 1
  %58 = load i16* @width, align 2
  %59 = zext i16 %58 to i64
  %60 = srem i64 %57, %59
  %61 = icmp slt i64 %60, 2
  br i1 %61, label %62, label %63

; <label>:62                                      ; preds = %51
  br label %204

; <label>:63                                      ; preds = %51
  %64 = load i16* @width, align 2
  %65 = zext i16 %64 to i32
  %66 = sub nsw i32 0, %65
  br label %67

; <label>:67                                      ; preds = %94, %63
  %k.0 = phi i32 [ 0, %63 ], [ %k.1, %94 ]
  %i.0 = phi i32 [ %66, %63 ], [ %97, %94 ]
  %68 = load i16* @width, align 2
  %69 = zext i16 %68 to i32
  %70 = icmp sle i32 %i.0, %69
  br i1 %70, label %71, label %98

; <label>:71                                      ; preds = %67
  %72 = sub nsw i32 %i.0, 1
  br label %73

; <label>:73                                      ; preds = %91, %71
  %k.1 = phi i32 [ %k.0, %71 ], [ %88, %91 ]
  %j.0 = phi i32 [ %72, %71 ], [ %92, %91 ]
  %74 = add nsw i32 %i.0, 1
  %75 = icmp sle i32 %j.0, %74
  br i1 %75, label %76, label %93

; <label>:76                                      ; preds = %73
  %77 = sext i32 %j.0 to i64
  %78 = getelementptr inbounds [4 x i16]* %pix.1, i64 %77
  %79 = getelementptr inbounds [4 x i16]* %78, i32 0, i64 3
  %80 = load i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds [4 x i16]* %pix.1, i64 %82
  %84 = getelementptr inbounds [4 x i16]* %83, i32 0, i64 1
  %85 = load i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = sub nsw i32 %81, %86
  %88 = add nsw i32 %k.1, 1
  %89 = sext i32 %k.1 to i64
  %90 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %89
  store i32 %87, i32* %90, align 4
  br label %91

; <label>:91                                      ; preds = %76
  %92 = add nsw i32 %j.0, 1
  br label %73

; <label>:93                                      ; preds = %73
  br label %94

; <label>:94                                      ; preds = %93
  %95 = load i16* @width, align 2
  %96 = zext i16 %95 to i32
  %97 = add nsw i32 %i.0, %96
  br label %67

; <label>:98                                      ; preds = %67
  br label %99

; <label>:99                                      ; preds = %154, %98
  %i.1 = phi i32 [ 0, %98 ], [ %155, %154 ]
  %100 = sext i32 %i.1 to i64
  %101 = icmp ult i64 %100, 38
  br i1 %101, label %102, label %156

; <label>:102                                     ; preds = %99
  %103 = sext i32 %i.1 to i64
  %104 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %103
  %105 = load i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %106
  %108 = load i32* %107, align 4
  %109 = add nsw i32 %i.1, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %110
  %112 = load i8* %111, align 1
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %113
  %115 = load i32* %114, align 4
  %116 = icmp sgt i32 %108, %115
  br i1 %116, label %117, label %153

; <label>:117                                     ; preds = %102
  %118 = add nsw i32 %i.1, 1
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %119
  %121 = load i8* %120, align 1
  %122 = zext i8 %121 to i64
  %123 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %122
  %124 = load i32* %123, align 4
  %125 = sext i32 %i.1 to i64
  %126 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %125
  %127 = load i8* %126, align 1
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %128
  %130 = load i32* %129, align 4
  %131 = xor i32 %130, %124
  store i32 %131, i32* %129, align 4
  %132 = sext i32 %i.1 to i64
  %133 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %132
  %134 = load i8* %133, align 1
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %135
  %137 = load i32* %136, align 4
  %138 = add nsw i32 %i.1, 1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %139
  %141 = load i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %142
  %144 = load i32* %143, align 4
  %145 = xor i32 %144, %137
  store i32 %145, i32* %143, align 4
  %146 = sext i32 %i.1 to i64
  %147 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %146
  %148 = load i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %149
  %151 = load i32* %150, align 4
  %152 = xor i32 %151, %145
  store i32 %152, i32* %150, align 4
  br label %153

; <label>:153                                     ; preds = %117, %102
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.1, 2
  br label %99

; <label>:156                                     ; preds = %99
  %157 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %158 = load i32* %157, align 4
  %159 = getelementptr inbounds [4 x i16]* %pix.1, i64 0
  %160 = getelementptr inbounds [4 x i16]* %159, i32 0, i64 1
  %161 = load i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nsw i32 %158, %162
  %164 = icmp slt i32 %163, 65535
  br i1 %164, label %165, label %173

; <label>:165                                     ; preds = %156
  %166 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %167 = load i32* %166, align 4
  %168 = getelementptr inbounds [4 x i16]* %pix.1, i64 0
  %169 = getelementptr inbounds [4 x i16]* %168, i32 0, i64 1
  %170 = load i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nsw i32 %167, %171
  br label %174

; <label>:173                                     ; preds = %156
  br label %174

; <label>:174                                     ; preds = %173, %165
  %175 = phi i32 [ %172, %165 ], [ 65535, %173 ]
  %176 = icmp sgt i32 0, %175
  br i1 %176, label %177, label %178

; <label>:177                                     ; preds = %174
  br label %198

; <label>:178                                     ; preds = %174
  %179 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %180 = load i32* %179, align 4
  %181 = getelementptr inbounds [4 x i16]* %pix.1, i64 0
  %182 = getelementptr inbounds [4 x i16]* %181, i32 0, i64 1
  %183 = load i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = add nsw i32 %180, %184
  %186 = icmp slt i32 %185, 65535
  br i1 %186, label %187, label %195

; <label>:187                                     ; preds = %178
  %188 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %189 = load i32* %188, align 4
  %190 = getelementptr inbounds [4 x i16]* %pix.1, i64 0
  %191 = getelementptr inbounds [4 x i16]* %190, i32 0, i64 1
  %192 = load i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = add nsw i32 %189, %193
  br label %196

; <label>:195                                     ; preds = %178
  br label %196

; <label>:196                                     ; preds = %195, %187
  %197 = phi i32 [ %194, %187 ], [ 65535, %195 ]
  br label %198

; <label>:198                                     ; preds = %196, %177
  %199 = phi i32 [ 0, %177 ], [ %197, %196 ]
  %200 = trunc i32 %199 to i16
  %201 = sext i32 %c.0 to i64
  %202 = getelementptr inbounds [4 x i16]* %pix.1, i64 0
  %203 = getelementptr inbounds [4 x i16]* %202, i32 0, i64 %201
  store i16 %200, i16* %203, align 2
  br label %204

; <label>:204                                     ; preds = %198, %62
  %205 = getelementptr inbounds [4 x i16]* %pix.1, i32 1
  br label %40

; <label>:206                                     ; preds = %40
  br label %207

; <label>:207                                     ; preds = %206
  %208 = add nsw i32 %c.0, 2
  br label %11

; <label>:209                                     ; preds = %11
  br label %210

; <label>:210                                     ; preds = %209
  %211 = add nsw i32 %pass.0, 1
  br label %1

; <label>:212                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @blend_highlights() #0 {
  %cam = alloca [2 x [4 x float]], align 16
  %lab = alloca [2 x [4 x float]], align 16
  %sum = alloca [2 x float], align 4
  %1 = load i32* @colors, align 4
  %2 = sub nsw i32 %1, 3
  %3 = icmp ugt i32 %2, 1
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  br label %255

; <label>:5                                       ; preds = %0
  %6 = load i32* @verbose, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %5
  %9 = load %struct._IO_FILE** @stderr, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([24 x i8]* @.str83, i32 0, i32 0))
  br label %11

; <label>:11                                      ; preds = %8, %5
  br label %12

; <label>:12                                      ; preds = %24, %11
  %c.0 = phi i32 [ 0, %11 ], [ %25, %24 ]
  %clip.0 = phi i32 [ 2147483647, %11 ], [ %clip.1, %24 ]
  %13 = load i32* @colors, align 4
  %14 = icmp slt i32 %c.0, %13
  br i1 %14, label %15, label %26

; <label>:15                                      ; preds = %12
  %16 = sext i32 %c.0 to i64
  %17 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %16
  %18 = load float* %17, align 4
  %19 = fmul float 6.553500e+04, %18
  %20 = fptosi float %19 to i32
  %21 = icmp sgt i32 %clip.0, %20
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %15
  br label %23

; <label>:23                                      ; preds = %22, %15
  %clip.1 = phi i32 [ %20, %22 ], [ %clip.0, %15 ]
  br label %24

; <label>:24                                      ; preds = %23
  %25 = add nsw i32 %c.0, 1
  br label %12

; <label>:26                                      ; preds = %12
  br label %27

; <label>:27                                      ; preds = %253, %26
  %row.0 = phi i32 [ 0, %26 ], [ %254, %253 ]
  %28 = load i16* @height, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %row.0, %29
  br i1 %30, label %31, label %255

; <label>:31                                      ; preds = %27
  br label %32

; <label>:32                                      ; preds = %250, %31
  %col.0 = phi i32 [ 0, %31 ], [ %251, %250 ]
  %33 = load i16* @width, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp slt i32 %col.0, %34
  br i1 %35, label %36, label %252

; <label>:36                                      ; preds = %32
  br label %37

; <label>:37                                      ; preds = %55, %36
  %c.1 = phi i32 [ 0, %36 ], [ %56, %55 ]
  %38 = load i32* @colors, align 4
  %39 = icmp slt i32 %c.1, %38
  br i1 %39, label %40, label %57

; <label>:40                                      ; preds = %37
  %41 = sext i32 %c.1 to i64
  %42 = load i16* @width, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nsw i32 %row.0, %43
  %45 = add nsw i32 %44, %col.0
  %46 = sext i32 %45 to i64
  %47 = load [4 x i16]** @image, align 8
  %48 = getelementptr inbounds [4 x i16]* %47, i64 %46
  %49 = getelementptr inbounds [4 x i16]* %48, i32 0, i64 %41
  %50 = load i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = icmp sgt i32 %51, %clip.0
  br i1 %52, label %53, label %54

; <label>:53                                      ; preds = %40
  br label %57

; <label>:54                                      ; preds = %40
  br label %55

; <label>:55                                      ; preds = %54
  %56 = add nsw i32 %c.1, 1
  br label %37

; <label>:57                                      ; preds = %53, %37
  %58 = load i32* @colors, align 4
  %59 = icmp eq i32 %c.1, %58
  br i1 %59, label %60, label %61

; <label>:60                                      ; preds = %57
  br label %250

; <label>:61                                      ; preds = %57
  br label %62

; <label>:62                                      ; preds = %98, %61
  %c.2 = phi i32 [ 0, %61 ], [ %99, %98 ]
  %63 = load i32* @colors, align 4
  %64 = icmp slt i32 %c.2, %63
  br i1 %64, label %65, label %100

; <label>:65                                      ; preds = %62
  %66 = sext i32 %c.2 to i64
  %67 = load i16* @width, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nsw i32 %row.0, %68
  %70 = add nsw i32 %69, %col.0
  %71 = sext i32 %70 to i64
  %72 = load [4 x i16]** @image, align 8
  %73 = getelementptr inbounds [4 x i16]* %72, i64 %71
  %74 = getelementptr inbounds [4 x i16]* %73, i32 0, i64 %66
  %75 = load i16* %74, align 2
  %76 = uitofp i16 %75 to float
  %77 = sext i32 %c.2 to i64
  %78 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %79 = getelementptr inbounds [4 x float]* %78, i32 0, i64 %77
  store float %76, float* %79, align 4
  %80 = sext i32 %c.2 to i64
  %81 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %82 = getelementptr inbounds [4 x float]* %81, i32 0, i64 %80
  %83 = load float* %82, align 4
  %84 = sitofp i32 %clip.0 to float
  %85 = fcmp olt float %83, %84
  br i1 %85, label %86, label %91

; <label>:86                                      ; preds = %65
  %87 = sext i32 %c.2 to i64
  %88 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %89 = getelementptr inbounds [4 x float]* %88, i32 0, i64 %87
  %90 = load float* %89, align 4
  br label %93

; <label>:91                                      ; preds = %65
  %92 = sitofp i32 %clip.0 to float
  br label %93

; <label>:93                                      ; preds = %91, %86
  %94 = phi float [ %90, %86 ], [ %92, %91 ]
  %95 = sext i32 %c.2 to i64
  %96 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 1
  %97 = getelementptr inbounds [4 x float]* %96, i32 0, i64 %95
  store float %94, float* %97, align 4
  br label %98

; <label>:98                                      ; preds = %93
  %99 = add nsw i32 %c.2, 1
  br label %62

; <label>:100                                     ; preds = %62
  br label %101

; <label>:101                                     ; preds = %167, %100
  %i.0 = phi i32 [ 0, %100 ], [ %168, %167 ]
  %102 = icmp slt i32 %i.0, 2
  br i1 %102, label %103, label %169

; <label>:103                                     ; preds = %101
  br label %104

; <label>:104                                     ; preds = %140, %103
  %c.3 = phi i32 [ 0, %103 ], [ %141, %140 ]
  %105 = load i32* @colors, align 4
  %106 = icmp slt i32 %c.3, %105
  br i1 %106, label %107, label %142

; <label>:107                                     ; preds = %104
  %108 = sext i32 %c.3 to i64
  %109 = sext i32 %i.0 to i64
  %110 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %109
  %111 = getelementptr inbounds [4 x float]* %110, i32 0, i64 %108
  store float 0.000000e+00, float* %111, align 4
  br label %112

; <label>:112                                     ; preds = %137, %107
  %j.0 = phi i32 [ 0, %107 ], [ %138, %137 ]
  %113 = load i32* @colors, align 4
  %114 = icmp slt i32 %j.0, %113
  br i1 %114, label %115, label %139

; <label>:115                                     ; preds = %112
  %116 = sext i32 %j.0 to i64
  %117 = sext i32 %c.3 to i64
  %118 = load i32* @colors, align 4
  %119 = sub nsw i32 %118, 3
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [2 x [4 x [4 x float]]]* @blend_highlights.trans, i32 0, i64 %120
  %122 = getelementptr inbounds [4 x [4 x float]]* %121, i32 0, i64 %117
  %123 = getelementptr inbounds [4 x float]* %122, i32 0, i64 %116
  %124 = load float* %123, align 4
  %125 = sext i32 %j.0 to i64
  %126 = sext i32 %i.0 to i64
  %127 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 %126
  %128 = getelementptr inbounds [4 x float]* %127, i32 0, i64 %125
  %129 = load float* %128, align 4
  %130 = fmul float %124, %129
  %131 = sext i32 %c.3 to i64
  %132 = sext i32 %i.0 to i64
  %133 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %132
  %134 = getelementptr inbounds [4 x float]* %133, i32 0, i64 %131
  %135 = load float* %134, align 4
  %136 = fadd float %135, %130
  store float %136, float* %134, align 4
  br label %137

; <label>:137                                     ; preds = %115
  %138 = add nsw i32 %j.0, 1
  br label %112

; <label>:139                                     ; preds = %112
  br label %140

; <label>:140                                     ; preds = %139
  %141 = add nsw i32 %c.3, 1
  br label %104

; <label>:142                                     ; preds = %104
  %143 = sext i32 %i.0 to i64
  %144 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 %143
  store float 0.000000e+00, float* %144, align 4
  br label %145

; <label>:145                                     ; preds = %164, %142
  %c.4 = phi i32 [ 1, %142 ], [ %165, %164 ]
  %146 = load i32* @colors, align 4
  %147 = icmp slt i32 %c.4, %146
  br i1 %147, label %148, label %166

; <label>:148                                     ; preds = %145
  %149 = sext i32 %c.4 to i64
  %150 = sext i32 %i.0 to i64
  %151 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %150
  %152 = getelementptr inbounds [4 x float]* %151, i32 0, i64 %149
  %153 = load float* %152, align 4
  %154 = sext i32 %c.4 to i64
  %155 = sext i32 %i.0 to i64
  %156 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %155
  %157 = getelementptr inbounds [4 x float]* %156, i32 0, i64 %154
  %158 = load float* %157, align 4
  %159 = fmul float %153, %158
  %160 = sext i32 %i.0 to i64
  %161 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 %160
  %162 = load float* %161, align 4
  %163 = fadd float %162, %159
  store float %163, float* %161, align 4
  br label %164

; <label>:164                                     ; preds = %148
  %165 = add nsw i32 %c.4, 1
  br label %145

; <label>:166                                     ; preds = %145
  br label %167

; <label>:167                                     ; preds = %166
  %168 = add nsw i32 %i.0, 1
  br label %101

; <label>:169                                     ; preds = %101
  %170 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 1
  %171 = load float* %170, align 4
  %172 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 0
  %173 = load float* %172, align 4
  %174 = fdiv float %171, %173
  %175 = fpext float %174 to double
  %176 = call double @sqrt(double %175) #4
  %177 = fptrunc double %176 to float
  br label %178

; <label>:178                                     ; preds = %187, %169
  %c.5 = phi i32 [ 1, %169 ], [ %188, %187 ]
  %179 = load i32* @colors, align 4
  %180 = icmp slt i32 %c.5, %179
  br i1 %180, label %181, label %189

; <label>:181                                     ; preds = %178
  %182 = sext i32 %c.5 to i64
  %183 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 0
  %184 = getelementptr inbounds [4 x float]* %183, i32 0, i64 %182
  %185 = load float* %184, align 4
  %186 = fmul float %185, %177
  store float %186, float* %184, align 4
  br label %187

; <label>:187                                     ; preds = %181
  %188 = add nsw i32 %c.5, 1
  br label %178

; <label>:189                                     ; preds = %178
  br label %190

; <label>:190                                     ; preds = %223, %189
  %c.6 = phi i32 [ 0, %189 ], [ %224, %223 ]
  %191 = load i32* @colors, align 4
  %192 = icmp slt i32 %c.6, %191
  br i1 %192, label %193, label %225

; <label>:193                                     ; preds = %190
  %194 = sext i32 %c.6 to i64
  %195 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %196 = getelementptr inbounds [4 x float]* %195, i32 0, i64 %194
  store float 0.000000e+00, float* %196, align 4
  br label %197

; <label>:197                                     ; preds = %220, %193
  %j.1 = phi i32 [ 0, %193 ], [ %221, %220 ]
  %198 = load i32* @colors, align 4
  %199 = icmp slt i32 %j.1, %198
  br i1 %199, label %200, label %222

; <label>:200                                     ; preds = %197
  %201 = sext i32 %j.1 to i64
  %202 = sext i32 %c.6 to i64
  %203 = load i32* @colors, align 4
  %204 = sub nsw i32 %203, 3
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [2 x [4 x [4 x float]]]* @blend_highlights.itrans, i32 0, i64 %205
  %207 = getelementptr inbounds [4 x [4 x float]]* %206, i32 0, i64 %202
  %208 = getelementptr inbounds [4 x float]* %207, i32 0, i64 %201
  %209 = load float* %208, align 4
  %210 = sext i32 %j.1 to i64
  %211 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 0
  %212 = getelementptr inbounds [4 x float]* %211, i32 0, i64 %210
  %213 = load float* %212, align 4
  %214 = fmul float %209, %213
  %215 = sext i32 %c.6 to i64
  %216 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %217 = getelementptr inbounds [4 x float]* %216, i32 0, i64 %215
  %218 = load float* %217, align 4
  %219 = fadd float %218, %214
  store float %219, float* %217, align 4
  br label %220

; <label>:220                                     ; preds = %200
  %221 = add nsw i32 %j.1, 1
  br label %197

; <label>:222                                     ; preds = %197
  br label %223

; <label>:223                                     ; preds = %222
  %224 = add nsw i32 %c.6, 1
  br label %190

; <label>:225                                     ; preds = %190
  br label %226

; <label>:226                                     ; preds = %247, %225
  %c.7 = phi i32 [ 0, %225 ], [ %248, %247 ]
  %227 = load i32* @colors, align 4
  %228 = icmp slt i32 %c.7, %227
  br i1 %228, label %229, label %249

; <label>:229                                     ; preds = %226
  %230 = sext i32 %c.7 to i64
  %231 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %232 = getelementptr inbounds [4 x float]* %231, i32 0, i64 %230
  %233 = load float* %232, align 4
  %234 = load i32* @colors, align 4
  %235 = sitofp i32 %234 to float
  %236 = fdiv float %233, %235
  %237 = fptoui float %236 to i16
  %238 = sext i32 %c.7 to i64
  %239 = load i16* @width, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nsw i32 %row.0, %240
  %242 = add nsw i32 %241, %col.0
  %243 = sext i32 %242 to i64
  %244 = load [4 x i16]** @image, align 8
  %245 = getelementptr inbounds [4 x i16]* %244, i64 %243
  %246 = getelementptr inbounds [4 x i16]* %245, i32 0, i64 %238
  store i16 %237, i16* %246, align 2
  br label %247

; <label>:247                                     ; preds = %229
  %248 = add nsw i32 %c.7, 1
  br label %226

; <label>:249                                     ; preds = %226
  br label %250

; <label>:250                                     ; preds = %249, %60
  %251 = add nsw i32 %col.0, 1
  br label %32

; <label>:252                                     ; preds = %32
  br label %253

; <label>:253                                     ; preds = %252
  %254 = add nsw i32 %row.0, 1
  br label %27

; <label>:255                                     ; preds = %27, %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @recover_highlights() #0 {
  %hsat = alloca [4 x i32], align 16
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([26 x i8]* @.str84, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = load i32* @highlight, align 4
  %8 = sub nsw i32 4, %7
  %9 = sitofp i32 %8 to double
  %10 = call double @pow(double 2.000000e+00, double %9) #4
  %11 = fptrunc double %10 to float
  br label %12

; <label>:12                                      ; preds = %23, %6
  %c.0 = phi i32 [ 0, %6 ], [ %24, %23 ]
  %13 = load i32* @colors, align 4
  %14 = icmp ult i32 %c.0, %13
  br i1 %14, label %15, label %25

; <label>:15                                      ; preds = %12
  %16 = zext i32 %c.0 to i64
  %17 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %16
  %18 = load float* %17, align 4
  %19 = fmul float 3.200000e+04, %18
  %20 = fptosi float %19 to i32
  %21 = zext i32 %c.0 to i64
  %22 = getelementptr inbounds [4 x i32]* %hsat, i32 0, i64 %21
  store i32 %20, i32* %22, align 4
  br label %23

; <label>:23                                      ; preds = %15
  %24 = add i32 %c.0, 1
  br label %12

; <label>:25                                      ; preds = %12
  br label %26

; <label>:26                                      ; preds = %39, %25
  %kc.0 = phi i32 [ 0, %25 ], [ %kc.1, %39 ]
  %c.1 = phi i32 [ 1, %25 ], [ %40, %39 ]
  %27 = load i32* @colors, align 4
  %28 = icmp ult i32 %c.1, %27
  br i1 %28, label %29, label %41

; <label>:29                                      ; preds = %26
  %30 = zext i32 %kc.0 to i64
  %31 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %30
  %32 = load float* %31, align 4
  %33 = zext i32 %c.1 to i64
  %34 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %33
  %35 = load float* %34, align 4
  %36 = fcmp olt float %32, %35
  br i1 %36, label %37, label %38

; <label>:37                                      ; preds = %29
  br label %38

; <label>:38                                      ; preds = %37, %29
  %kc.1 = phi i32 [ %c.1, %37 ], [ %kc.0, %29 ]
  br label %39

; <label>:39                                      ; preds = %38
  %40 = add i32 %c.1, 1
  br label %26

; <label>:41                                      ; preds = %26
  %42 = load i16* @height, align 2
  %43 = zext i16 %42 to i32
  %44 = load i16* @shrink, align 2
  %45 = zext i16 %44 to i32
  %46 = ashr i32 4, %45
  %47 = sdiv i32 %43, %46
  %48 = load i16* @width, align 2
  %49 = zext i16 %48 to i32
  %50 = load i16* @shrink, align 2
  %51 = zext i16 %50 to i32
  %52 = ashr i32 4, %51
  %53 = sdiv i32 %49, %52
  %54 = mul i32 %47, %53
  %55 = zext i32 %54 to i64
  %56 = call noalias i8* @calloc(i64 %55, i64 4) #4
  %57 = bitcast i8* %56 to float*
  %58 = bitcast float* %57 to i8*
  call void @merror(i8* %58, i8* getelementptr inbounds ([21 x i8]* @.str85, i32 0, i32 0))
  br label %59

; <label>:59                                      ; preds = %382, %41
  %c.2 = phi i32 [ 0, %41 ], [ %383, %382 ]
  %60 = load i32* @colors, align 4
  %61 = icmp ult i32 %c.2, %60
  br i1 %61, label %62, label %384

; <label>:62                                      ; preds = %59
  %63 = icmp ne i32 %c.2, %kc.0
  br i1 %63, label %64, label %381

; <label>:64                                      ; preds = %62
  %65 = bitcast float* %57 to i8*
  %66 = mul i32 %47, %53
  %67 = zext i32 %66 to i64
  %68 = mul i64 %67, 4
  call void @llvm.memset.p0i8.i64(i8* %65, i8 0, i64 %68, i32 4, i1 false)
  br label %69

; <label>:69                                      ; preds = %161, %64
  %mrow.0 = phi i32 [ 0, %64 ], [ %162, %161 ]
  %70 = icmp ult i32 %mrow.0, %47
  br i1 %70, label %71, label %163

; <label>:71                                      ; preds = %69
  br label %72

; <label>:72                                      ; preds = %158, %71
  %mcol.0 = phi i32 [ 0, %71 ], [ %159, %158 ]
  %73 = icmp ult i32 %mcol.0, %53
  br i1 %73, label %74, label %160

; <label>:74                                      ; preds = %72
  %75 = load i16* @shrink, align 2
  %76 = zext i16 %75 to i32
  %77 = ashr i32 4, %76
  %78 = mul i32 %mrow.0, %77
  br label %79

; <label>:79                                      ; preds = %140, %74
  %row.0 = phi i32 [ %78, %74 ], [ %141, %140 ]
  %count.0 = phi i32 [ 0, %74 ], [ %count.1, %140 ]
  %wgt.0 = phi float [ 0.000000e+00, %74 ], [ %wgt.1, %140 ]
  %sum.0 = phi float [ 0.000000e+00, %74 ], [ %sum.1, %140 ]
  %80 = add i32 %mrow.0, 1
  %81 = load i16* @shrink, align 2
  %82 = zext i16 %81 to i32
  %83 = ashr i32 4, %82
  %84 = mul i32 %80, %83
  %85 = icmp ult i32 %row.0, %84
  br i1 %85, label %86, label %142

; <label>:86                                      ; preds = %79
  %87 = load i16* @shrink, align 2
  %88 = zext i16 %87 to i32
  %89 = ashr i32 4, %88
  %90 = mul i32 %mcol.0, %89
  br label %91

; <label>:91                                      ; preds = %137, %86
  %col.0 = phi i32 [ %90, %86 ], [ %138, %137 ]
  %count.1 = phi i32 [ %count.0, %86 ], [ %count.2, %137 ]
  %wgt.1 = phi float [ %wgt.0, %86 ], [ %wgt.2, %137 ]
  %sum.1 = phi float [ %sum.0, %86 ], [ %sum.2, %137 ]
  %92 = add i32 %mcol.0, 1
  %93 = load i16* @shrink, align 2
  %94 = zext i16 %93 to i32
  %95 = ashr i32 4, %94
  %96 = mul i32 %92, %95
  %97 = icmp ult i32 %col.0, %96
  br i1 %97, label %98, label %139

; <label>:98                                      ; preds = %91
  %99 = load i16* @width, align 2
  %100 = zext i16 %99 to i32
  %101 = mul i32 %row.0, %100
  %102 = add i32 %101, %col.0
  %103 = zext i32 %102 to i64
  %104 = load [4 x i16]** @image, align 8
  %105 = getelementptr inbounds [4 x i16]* %104, i64 %103
  %106 = getelementptr inbounds [4 x i16]* %105, i32 0, i32 0
  %107 = zext i32 %c.2 to i64
  %108 = getelementptr inbounds i16* %106, i64 %107
  %109 = load i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = zext i32 %c.2 to i64
  %112 = getelementptr inbounds [4 x i32]* %hsat, i32 0, i64 %111
  %113 = load i32* %112, align 4
  %114 = sdiv i32 %110, %113
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %116, label %136

; <label>:116                                     ; preds = %98
  %117 = zext i32 %kc.0 to i64
  %118 = getelementptr inbounds i16* %106, i64 %117
  %119 = load i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = icmp sgt i32 %120, 24000
  br i1 %121, label %122, label %136

; <label>:122                                     ; preds = %116
  %123 = zext i32 %c.2 to i64
  %124 = getelementptr inbounds i16* %106, i64 %123
  %125 = load i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = sitofp i32 %126 to float
  %128 = fadd float %sum.1, %127
  %129 = zext i32 %kc.0 to i64
  %130 = getelementptr inbounds i16* %106, i64 %129
  %131 = load i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = sitofp i32 %132 to float
  %134 = fadd float %wgt.1, %133
  %135 = add nsw i32 %count.1, 1
  br label %136

; <label>:136                                     ; preds = %122, %116, %98
  %count.2 = phi i32 [ %135, %122 ], [ %count.1, %116 ], [ %count.1, %98 ]
  %wgt.2 = phi float [ %134, %122 ], [ %wgt.1, %116 ], [ %wgt.1, %98 ]
  %sum.2 = phi float [ %128, %122 ], [ %sum.1, %116 ], [ %sum.1, %98 ]
  br label %137

; <label>:137                                     ; preds = %136
  %138 = add i32 %col.0, 1
  br label %91

; <label>:139                                     ; preds = %91
  br label %140

; <label>:140                                     ; preds = %139
  %141 = add i32 %row.0, 1
  br label %79

; <label>:142                                     ; preds = %79
  %143 = load i16* @shrink, align 2
  %144 = zext i16 %143 to i32
  %145 = ashr i32 4, %144
  %146 = load i16* @shrink, align 2
  %147 = zext i16 %146 to i32
  %148 = ashr i32 4, %147
  %149 = mul nsw i32 %145, %148
  %150 = icmp eq i32 %count.0, %149
  br i1 %150, label %151, label %157

; <label>:151                                     ; preds = %142
  %152 = fdiv float %sum.0, %wgt.0
  %153 = mul i32 %mrow.0, %53
  %154 = add i32 %153, %mcol.0
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds float* %57, i64 %155
  store float %152, float* %156, align 4
  br label %157

; <label>:157                                     ; preds = %151, %142
  br label %158

; <label>:158                                     ; preds = %157
  %159 = add i32 %mcol.0, 1
  br label %72

; <label>:160                                     ; preds = %72
  br label %161

; <label>:161                                     ; preds = %160
  %162 = add i32 %mrow.0, 1
  br label %69

; <label>:163                                     ; preds = %69
  %164 = fdiv float 3.200000e+01, %11
  %165 = fptosi float %164 to i32
  br label %166

; <label>:166                                     ; preds = %266, %163
  %spread.0 = phi i32 [ %165, %163 ], [ %167, %266 ]
  %167 = add nsw i32 %spread.0, -1
  %168 = icmp ne i32 %spread.0, 0
  br i1 %168, label %169, label %267

; <label>:169                                     ; preds = %166
  br label %170

; <label>:170                                     ; preds = %242, %169
  %mrow.1 = phi i32 [ 0, %169 ], [ %243, %242 ]
  %171 = icmp ult i32 %mrow.1, %47
  br i1 %171, label %172, label %244

; <label>:172                                     ; preds = %170
  br label %173

; <label>:173                                     ; preds = %239, %172
  %mcol.1 = phi i32 [ 0, %172 ], [ %240, %239 ]
  %174 = icmp ult i32 %mcol.1, %53
  br i1 %174, label %175, label %241

; <label>:175                                     ; preds = %173
  %176 = mul i32 %mrow.1, %53
  %177 = add i32 %176, %mcol.1
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds float* %57, i64 %178
  %180 = load float* %179, align 4
  %181 = fcmp une float %180, 0.000000e+00
  br i1 %181, label %182, label %183

; <label>:182                                     ; preds = %175
  br label %239

; <label>:183                                     ; preds = %175
  br label %184

; <label>:184                                     ; preds = %224, %183
  %count.3 = phi i32 [ 0, %183 ], [ %count.4, %224 ]
  %d.0 = phi i32 [ 0, %183 ], [ %225, %224 ]
  %sum.3 = phi float [ 0.000000e+00, %183 ], [ %sum.4, %224 ]
  %185 = icmp ult i32 %d.0, 8
  br i1 %185, label %186, label %226

; <label>:186                                     ; preds = %184
  %187 = zext i32 %d.0 to i64
  %188 = getelementptr inbounds [8 x [2 x i8]]* @recover_highlights.dir, i32 0, i64 %187
  %189 = getelementptr inbounds [2 x i8]* %188, i32 0, i64 0
  %190 = load i8* %189, align 1
  %191 = sext i8 %190 to i32
  %192 = add i32 %mrow.1, %191
  %193 = zext i32 %d.0 to i64
  %194 = getelementptr inbounds [8 x [2 x i8]]* @recover_highlights.dir, i32 0, i64 %193
  %195 = getelementptr inbounds [2 x i8]* %194, i32 0, i64 1
  %196 = load i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = add i32 %mcol.1, %197
  %199 = icmp ult i32 %192, %47
  br i1 %199, label %200, label %223

; <label>:200                                     ; preds = %186
  %201 = icmp ult i32 %198, %53
  br i1 %201, label %202, label %223

; <label>:202                                     ; preds = %200
  %203 = mul i32 %192, %53
  %204 = add i32 %203, %198
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds float* %57, i64 %205
  %207 = load float* %206, align 4
  %208 = fcmp ogt float %207, 0.000000e+00
  br i1 %208, label %209, label %223

; <label>:209                                     ; preds = %202
  %210 = and i32 %d.0, 1
  %211 = add i32 1, %210
  %212 = uitofp i32 %211 to float
  %213 = mul i32 %192, %53
  %214 = add i32 %213, %198
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds float* %57, i64 %215
  %217 = load float* %216, align 4
  %218 = fmul float %212, %217
  %219 = fadd float %sum.3, %218
  %220 = and i32 %d.0, 1
  %221 = add i32 1, %220
  %222 = add i32 %count.3, %221
  br label %223

; <label>:223                                     ; preds = %209, %202, %200, %186
  %count.4 = phi i32 [ %222, %209 ], [ %count.3, %202 ], [ %count.3, %200 ], [ %count.3, %186 ]
  %sum.4 = phi float [ %219, %209 ], [ %sum.3, %202 ], [ %sum.3, %200 ], [ %sum.3, %186 ]
  br label %224

; <label>:224                                     ; preds = %223
  %225 = add i32 %d.0, 1
  br label %184

; <label>:226                                     ; preds = %184
  %227 = icmp sgt i32 %count.3, 3
  br i1 %227, label %228, label %238

; <label>:228                                     ; preds = %226
  %229 = fadd float %sum.3, %11
  %230 = fsub float -0.000000e+00, %229
  %231 = sitofp i32 %count.3 to float
  %232 = fadd float %231, %11
  %233 = fdiv float %230, %232
  %234 = mul i32 %mrow.1, %53
  %235 = add i32 %234, %mcol.1
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds float* %57, i64 %236
  store float %233, float* %237, align 4
  br label %238

; <label>:238                                     ; preds = %228, %226
  br label %239

; <label>:239                                     ; preds = %238, %182
  %240 = add i32 %mcol.1, 1
  br label %173

; <label>:241                                     ; preds = %173
  br label %242

; <label>:242                                     ; preds = %241
  %243 = add i32 %mrow.1, 1
  br label %170

; <label>:244                                     ; preds = %170
  br label %245

; <label>:245                                     ; preds = %261, %244
  %i.0 = phi i32 [ 0, %244 ], [ %262, %261 ]
  %change.0 = phi i32 [ 0, %244 ], [ %change.1, %261 ]
  %246 = mul i32 %47, %53
  %247 = icmp ult i32 %i.0, %246
  br i1 %247, label %248, label %263

; <label>:248                                     ; preds = %245
  %249 = sext i32 %i.0 to i64
  %250 = getelementptr inbounds float* %57, i64 %249
  %251 = load float* %250, align 4
  %252 = fcmp olt float %251, 0.000000e+00
  br i1 %252, label %253, label %260

; <label>:253                                     ; preds = %248
  %254 = sext i32 %i.0 to i64
  %255 = getelementptr inbounds float* %57, i64 %254
  %256 = load float* %255, align 4
  %257 = fsub float -0.000000e+00, %256
  %258 = sext i32 %i.0 to i64
  %259 = getelementptr inbounds float* %57, i64 %258
  store float %257, float* %259, align 4
  br label %260

; <label>:260                                     ; preds = %253, %248
  %change.1 = phi i32 [ 1, %253 ], [ %change.0, %248 ]
  br label %261

; <label>:261                                     ; preds = %260
  %262 = add nsw i32 %i.0, 1
  br label %245

; <label>:263                                     ; preds = %245
  %264 = icmp ne i32 %change.0, 0
  br i1 %264, label %266, label %265

; <label>:265                                     ; preds = %263
  br label %267

; <label>:266                                     ; preds = %263
  br label %166

; <label>:267                                     ; preds = %265, %166
  br label %268

; <label>:268                                     ; preds = %280, %267
  %i.1 = phi i32 [ 0, %267 ], [ %281, %280 ]
  %269 = mul i32 %47, %53
  %270 = icmp ult i32 %i.1, %269
  br i1 %270, label %271, label %282

; <label>:271                                     ; preds = %268
  %272 = sext i32 %i.1 to i64
  %273 = getelementptr inbounds float* %57, i64 %272
  %274 = load float* %273, align 4
  %275 = fcmp oeq float %274, 0.000000e+00
  br i1 %275, label %276, label %279

; <label>:276                                     ; preds = %271
  %277 = sext i32 %i.1 to i64
  %278 = getelementptr inbounds float* %57, i64 %277
  store float 1.000000e+00, float* %278, align 4
  br label %279

; <label>:279                                     ; preds = %276, %271
  br label %280

; <label>:280                                     ; preds = %279
  %281 = add nsw i32 %i.1, 1
  br label %268

; <label>:282                                     ; preds = %268
  br label %283

; <label>:283                                     ; preds = %378, %282
  %mrow.2 = phi i32 [ 0, %282 ], [ %379, %378 ]
  %284 = icmp ult i32 %mrow.2, %47
  br i1 %284, label %285, label %380

; <label>:285                                     ; preds = %283
  br label %286

; <label>:286                                     ; preds = %375, %285
  %mcol.2 = phi i32 [ 0, %285 ], [ %376, %375 ]
  %287 = icmp ult i32 %mcol.2, %53
  br i1 %287, label %288, label %377

; <label>:288                                     ; preds = %286
  %289 = load i16* @shrink, align 2
  %290 = zext i16 %289 to i32
  %291 = ashr i32 4, %290
  %292 = mul i32 %mrow.2, %291
  br label %293

; <label>:293                                     ; preds = %372, %288
  %row.1 = phi i32 [ %292, %288 ], [ %373, %372 ]
  %294 = add i32 %mrow.2, 1
  %295 = load i16* @shrink, align 2
  %296 = zext i16 %295 to i32
  %297 = ashr i32 4, %296
  %298 = mul i32 %294, %297
  %299 = icmp ult i32 %row.1, %298
  br i1 %299, label %300, label %374

; <label>:300                                     ; preds = %293
  %301 = load i16* @shrink, align 2
  %302 = zext i16 %301 to i32
  %303 = ashr i32 4, %302
  %304 = mul i32 %mcol.2, %303
  br label %305

; <label>:305                                     ; preds = %369, %300
  %col.1 = phi i32 [ %304, %300 ], [ %370, %369 ]
  %306 = add i32 %mcol.2, 1
  %307 = load i16* @shrink, align 2
  %308 = zext i16 %307 to i32
  %309 = ashr i32 4, %308
  %310 = mul i32 %306, %309
  %311 = icmp ult i32 %col.1, %310
  br i1 %311, label %312, label %371

; <label>:312                                     ; preds = %305
  %313 = load i16* @width, align 2
  %314 = zext i16 %313 to i32
  %315 = mul i32 %row.1, %314
  %316 = add i32 %315, %col.1
  %317 = zext i32 %316 to i64
  %318 = load [4 x i16]** @image, align 8
  %319 = getelementptr inbounds [4 x i16]* %318, i64 %317
  %320 = getelementptr inbounds [4 x i16]* %319, i32 0, i32 0
  %321 = zext i32 %c.2 to i64
  %322 = getelementptr inbounds i16* %320, i64 %321
  %323 = load i16* %322, align 2
  %324 = zext i16 %323 to i32
  %325 = zext i32 %c.2 to i64
  %326 = getelementptr inbounds [4 x i32]* %hsat, i32 0, i64 %325
  %327 = load i32* %326, align 4
  %328 = sdiv i32 %324, %327
  %329 = icmp sgt i32 %328, 1
  br i1 %329, label %330, label %368

; <label>:330                                     ; preds = %312
  %331 = zext i32 %kc.0 to i64
  %332 = getelementptr inbounds i16* %320, i64 %331
  %333 = load i16* %332, align 2
  %334 = zext i16 %333 to i32
  %335 = sitofp i32 %334 to float
  %336 = mul i32 %mrow.2, %53
  %337 = add i32 %336, %mcol.2
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds float* %57, i64 %338
  %340 = load float* %339, align 4
  %341 = fmul float %335, %340
  %342 = fptosi float %341 to i32
  %343 = zext i32 %c.2 to i64
  %344 = getelementptr inbounds i16* %320, i64 %343
  %345 = load i16* %344, align 2
  %346 = zext i16 %345 to i32
  %347 = icmp slt i32 %346, %342
  br i1 %347, label %348, label %367

; <label>:348                                     ; preds = %330
  %349 = icmp slt i32 %342, 65535
  br i1 %349, label %350, label %351

; <label>:350                                     ; preds = %348
  br label %352

; <label>:351                                     ; preds = %348
  br label %352

; <label>:352                                     ; preds = %351, %350
  %353 = phi i32 [ %342, %350 ], [ 65535, %351 ]
  %354 = icmp sgt i32 0, %353
  br i1 %354, label %355, label %356

; <label>:355                                     ; preds = %352
  br label %362

; <label>:356                                     ; preds = %352
  %357 = icmp slt i32 %342, 65535
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %356
  br label %360

; <label>:359                                     ; preds = %356
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32 [ %342, %358 ], [ 65535, %359 ]
  br label %362

; <label>:362                                     ; preds = %360, %355
  %363 = phi i32 [ 0, %355 ], [ %361, %360 ]
  %364 = trunc i32 %363 to i16
  %365 = zext i32 %c.2 to i64
  %366 = getelementptr inbounds i16* %320, i64 %365
  store i16 %364, i16* %366, align 2
  br label %367

; <label>:367                                     ; preds = %362, %330
  br label %368

; <label>:368                                     ; preds = %367, %312
  br label %369

; <label>:369                                     ; preds = %368
  %370 = add i32 %col.1, 1
  br label %305

; <label>:371                                     ; preds = %305
  br label %372

; <label>:372                                     ; preds = %371
  %373 = add i32 %row.1, 1
  br label %293

; <label>:374                                     ; preds = %293
  br label %375

; <label>:375                                     ; preds = %374
  %376 = add i32 %mcol.2, 1
  br label %286

; <label>:377                                     ; preds = %286
  br label %378

; <label>:378                                     ; preds = %377
  %379 = add i32 %mrow.2, 1
  br label %283

; <label>:380                                     ; preds = %283
  br label %381

; <label>:381                                     ; preds = %380, %62
  br label %382

; <label>:382                                     ; preds = %381
  %383 = add i32 %c.2, 1
  br label %59

; <label>:384                                     ; preds = %59
  %385 = bitcast float* %57 to i8*
  call void @free(i8* %385) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save) #0 {
  %1 = call zeroext i16 @get2()
  %2 = zext i16 %1 to i32
  store i32 %2, i32* %tag, align 4
  %3 = call zeroext i16 @get2()
  %4 = zext i16 %3 to i32
  store i32 %4, i32* %type, align 4
  %5 = call i32 @get4()
  store i32 %5, i32* %len, align 4
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i64 @ftell(%struct._IO_FILE* %6)
  %8 = add nsw i64 %7, 4
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %save, align 4
  %10 = load i32* %len, align 4
  %11 = load i32* %type, align 4
  %12 = icmp ult i32 %11, 14
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %0
  %14 = load i32* %type, align 4
  br label %16

; <label>:15                                      ; preds = %0
  br label %16

; <label>:16                                      ; preds = %15, %13
  %17 = phi i32 [ %14, %13 ], [ 0, %15 ]
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [15 x i8]* @.str86, i32 0, i64 %18
  %20 = load i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = sub nsw i32 %21, 48
  %23 = mul i32 %10, %22
  %24 = icmp ugt i32 %23, 4
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %16
  %26 = load %struct._IO_FILE** @ifp, align 8
  %27 = call i32 @get4()
  %28 = add i32 %27, %base
  %29 = zext i32 %28 to i64
  %30 = call i32 @fseek(%struct._IO_FILE* %26, i64 %29, i32 0)
  br label %31

; <label>:31                                      ; preds = %25, %16
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_thumb_note(i32 %base, i32 %toff, i32 %tlen) #0 {
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %1 = call zeroext i16 @get2()
  %2 = zext i16 %1 to i32
  br label %3

; <label>:3                                       ; preds = %18, %0
  %entries.0 = phi i32 [ %2, %0 ], [ %4, %18 ]
  %4 = add i32 %entries.0, -1
  %5 = icmp ne i32 %entries.0, 0
  br i1 %5, label %6, label %23

; <label>:6                                       ; preds = %3
  call void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save)
  %7 = load i32* %tag, align 4
  %8 = icmp eq i32 %7, %toff
  br i1 %8, label %9, label %13

; <label>:9                                       ; preds = %6
  %10 = call i32 @get4()
  %11 = add i32 %10, %base
  %12 = zext i32 %11 to i64
  store i64 %12, i64* @thumb_offset, align 8
  br label %13

; <label>:13                                      ; preds = %9, %6
  %14 = load i32* %tag, align 4
  %15 = icmp eq i32 %14, %tlen
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %13
  %17 = call i32 @get4()
  store i32 %17, i32* @thumb_length, align 4
  br label %18

; <label>:18                                      ; preds = %16, %13
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = load i32* %save, align 4
  %21 = zext i32 %20 to i64
  %22 = call i32 @fseek(%struct._IO_FILE* %19, i64 %21, i32 0)
  br label %3

; <label>:23                                      ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_makernote(i32 %base, i32 %uptag) #0 {
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %wb = alloca [4 x i32], align 16
  %buf97 = alloca [324 x i8], align 16
  %buf = alloca [10 x i8], align 1
  %1 = bitcast [4 x i32]* %wb to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = load i16* @order, align 2
  %3 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 1, i64 10, %struct._IO_FILE* %4)
  %6 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %7 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([4 x i8]* @.str87, i32 0, i32 0), i64 3) #10
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %21

; <label>:9                                       ; preds = %0
  %10 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %11 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([4 x i8]* @.str88, i32 0, i32 0), i64 3) #10
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %21

; <label>:13                                      ; preds = %9
  %14 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %15 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([5 x i8]* @.str89, i32 0, i32 0), i64 4) #10
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %19 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([5 x i8]* @.str90, i32 0, i32 0), i64 4) #10
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %22, label %21

; <label>:21                                      ; preds = %17, %13, %9, %0
  br label %983

; <label>:22                                      ; preds = %17
  %23 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %24 = call i32 @strncmp(i8* %23, i8* getelementptr inbounds ([3 x i8]* @.str91, i32 0, i32 0), i64 2) #10
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %30

; <label>:26                                      ; preds = %22
  %27 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %28 = call i32 @strncmp(i8* %27, i8* getelementptr inbounds ([4 x i8]* @.str92, i32 0, i32 0), i64 3) #10
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %93, label %30

; <label>:30                                      ; preds = %26, %22
  store i16 19789, i16* @order, align 2
  br label %31

; <label>:31                                      ; preds = %91, %30
  %32 = load %struct._IO_FILE** @ifp, align 8
  %33 = call i64 @ftell(%struct._IO_FILE* %32)
  %34 = trunc i64 %33 to i32
  %35 = zext i32 %34 to i64
  %36 = load i64* @data_offset, align 8
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %31
  %39 = icmp ult i32 %34, 16384
  br label %40

; <label>:40                                      ; preds = %38, %31
  %41 = phi i1 [ false, %31 ], [ %39, %38 ]
  br i1 %41, label %42, label %92

; <label>:42                                      ; preds = %40
  %43 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  %44 = load i32* %43, align 4
  %45 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 0
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 1
  %47 = load i32* %46, align 4
  %48 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 3
  %50 = load i32* %49, align 4
  %51 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 1
  store i32 %50, i32* %51, align 4
  %52 = call zeroext i16 @get2()
  %53 = zext i16 %52 to i32
  %54 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 3
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 1
  %56 = load i32* %55, align 4
  %57 = icmp eq i32 %56, 256
  br i1 %57, label %58, label %91

; <label>:58                                      ; preds = %42
  %59 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 3
  %60 = load i32* %59, align 4
  %61 = icmp eq i32 %60, 256
  br i1 %61, label %62, label %91

; <label>:62                                      ; preds = %58
  %63 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 0
  %64 = load i32* %63, align 4
  %65 = icmp ugt i32 %64, 256
  br i1 %65, label %66, label %91

; <label>:66                                      ; preds = %62
  %67 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 0
  %68 = load i32* %67, align 4
  %69 = icmp ult i32 %68, 640
  br i1 %69, label %70, label %91

; <label>:70                                      ; preds = %66
  %71 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  %72 = load i32* %71, align 4
  %73 = icmp ugt i32 %72, 256
  br i1 %73, label %74, label %91

; <label>:74                                      ; preds = %70
  %75 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  %76 = load i32* %75, align 4
  %77 = icmp ult i32 %76, 640
  br i1 %77, label %78, label %91

; <label>:78                                      ; preds = %74
  br label %79

; <label>:79                                      ; preds = %88, %78
  %c.0 = phi i32 [ 0, %78 ], [ %89, %88 ]
  %80 = icmp ult i32 %c.0, 4
  br i1 %80, label %81, label %90

; <label>:81                                      ; preds = %79
  %82 = zext i32 %c.0 to i64
  %83 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 %82
  %84 = load i32* %83, align 4
  %85 = uitofp i32 %84 to float
  %86 = zext i32 %c.0 to i64
  %87 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %86
  store float %85, float* %87, align 4
  br label %88

; <label>:88                                      ; preds = %81
  %89 = add i32 %c.0, 1
  br label %79

; <label>:90                                      ; preds = %79
  br label %91

; <label>:91                                      ; preds = %90, %74, %70, %66, %62, %58, %42
  br label %31

; <label>:92                                      ; preds = %40
  br label %982

; <label>:93                                      ; preds = %26
  %94 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %95 = call i32 @strcmp(i8* %94, i8* getelementptr inbounds ([6 x i8]* @.str93, i32 0, i32 0)) #10
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %112, label %97

; <label>:97                                      ; preds = %93
  %98 = load %struct._IO_FILE** @ifp, align 8
  %99 = call i64 @ftell(%struct._IO_FILE* %98)
  %100 = trunc i64 %99 to i32
  %101 = call zeroext i16 @get2()
  store i16 %101, i16* @order, align 2
  %102 = call zeroext i16 @get2()
  %103 = zext i16 %102 to i32
  %104 = icmp ne i32 %103, 42
  br i1 %104, label %105, label %106

; <label>:105                                     ; preds = %97
  br label %982

; <label>:106                                     ; preds = %97
  %107 = call i32 @get4()
  %108 = load %struct._IO_FILE** @ifp, align 8
  %109 = sub i32 %107, 8
  %110 = zext i32 %109 to i64
  %111 = call i32 @fseek(%struct._IO_FILE* %108, i64 %110, i32 1)
  br label %177

; <label>:112                                     ; preds = %93
  %113 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %114 = call i32 @strcmp(i8* %113, i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0)) #10
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %125, label %116

; <label>:116                                     ; preds = %112
  %117 = load %struct._IO_FILE** @ifp, align 8
  %118 = call i64 @ftell(%struct._IO_FILE* %117)
  %119 = sub nsw i64 %118, 10
  %120 = trunc i64 %119 to i32
  %121 = load %struct._IO_FILE** @ifp, align 8
  %122 = call i32 @fseek(%struct._IO_FILE* %121, i64 -2, i32 1)
  %123 = call zeroext i16 @get2()
  store i16 %123, i16* @order, align 2
  %124 = call zeroext i16 @get2()
  br label %176

; <label>:125                                     ; preds = %112
  %126 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %127 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([9 x i8]* @.str94, i32 0, i32 0), i64 8) #10
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %137

; <label>:129                                     ; preds = %125
  %130 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %131 = call i32 @strncmp(i8* %130, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), i64 4) #10
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %137

; <label>:133                                     ; preds = %129
  %134 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %135 = call i32 @strcmp(i8* %134, i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0)) #10
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %140, label %137

; <label>:137                                     ; preds = %133, %129, %125
  store i16 18761, i16* @order, align 2
  %138 = load %struct._IO_FILE** @ifp, align 8
  %139 = call i32 @fseek(%struct._IO_FILE* %138, i64 2, i32 1)
  br label %175

; <label>:140                                     ; preds = %133
  %141 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %142 = call i32 @strcmp(i8* %141, i8* getelementptr inbounds ([6 x i8]* @.str97, i32 0, i32 0)) #10
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %140
  %145 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %146 = call i32 @strcmp(i8* %145, i8* getelementptr inbounds ([6 x i8]* @.str98, i32 0, i32 0)) #10
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %148, label %156

; <label>:148                                     ; preds = %144
  %149 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %150 = call i32 @strcmp(i8* %149, i8* getelementptr inbounds ([6 x i8]* @.str99, i32 0, i32 0)) #10
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %156

; <label>:152                                     ; preds = %148
  %153 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %154 = call i32 @strcmp(i8* %153, i8* getelementptr inbounds ([6 x i8]* @.str100, i32 0, i32 0)) #10
  %155 = icmp ne i32 %154, 0
  br i1 %155, label %159, label %156

; <label>:156                                     ; preds = %152, %148, %144, %140
  %157 = load %struct._IO_FILE** @ifp, align 8
  %158 = call i32 @fseek(%struct._IO_FILE* %157, i64 -2, i32 1)
  br label %174

; <label>:159                                     ; preds = %152
  %160 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* getelementptr inbounds ([4 x i8]* @.str101, i32 0, i32 0)) #10
  %162 = icmp ne i32 %161, 0
  br i1 %162, label %163, label %167

; <label>:163                                     ; preds = %159
  %164 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %165 = call i32 @strcmp(i8* %164, i8* getelementptr inbounds ([4 x i8]* @.str102, i32 0, i32 0)) #10
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %170, label %167

; <label>:167                                     ; preds = %163, %159
  %168 = load %struct._IO_FILE** @ifp, align 8
  %169 = call i32 @fseek(%struct._IO_FILE* %168, i64 -4, i32 1)
  br label %173

; <label>:170                                     ; preds = %163
  %171 = load %struct._IO_FILE** @ifp, align 8
  %172 = call i32 @fseek(%struct._IO_FILE* %171, i64 -10, i32 1)
  br label %173

; <label>:173                                     ; preds = %170, %167
  br label %174

; <label>:174                                     ; preds = %173, %156
  br label %175

; <label>:175                                     ; preds = %174, %137
  br label %176

; <label>:176                                     ; preds = %175, %116
  %.0 = phi i32 [ %base, %175 ], [ %120, %116 ]
  br label %177

; <label>:177                                     ; preds = %176, %106
  %.1 = phi i32 [ %.0, %176 ], [ %100, %106 ]
  %178 = call zeroext i16 @get2()
  %179 = zext i16 %178 to i32
  %180 = icmp ugt i32 %179, 1000
  br i1 %180, label %181, label %182

; <label>:181                                     ; preds = %177
  br label %983

; <label>:182                                     ; preds = %177
  br label %183

; <label>:183                                     ; preds = %976, %182
  %wbi.0 = phi i32 [ 0, %182 ], [ %wbi.1, %976 ]
  %serial.0 = phi i32 [ 0, %182 ], [ %serial.7, %976 ]
  %ver97.0 = phi i32 [ 0, %182 ], [ %ver97.7, %976 ]
  %entries.0 = phi i32 [ %179, %182 ], [ %184, %976 ]
  %184 = add i32 %entries.0, -1
  %185 = icmp ne i32 %entries.0, 0
  br i1 %185, label %186, label %981

; <label>:186                                     ; preds = %183
  call void @tiff_get(i32 %.1, i32* %tag, i32* %type, i32* %len, i32* %save)
  %187 = shl i32 %uptag, 16
  %188 = load i32* %tag, align 4
  %189 = or i32 %188, %187
  store i32 %189, i32* %tag, align 4
  %190 = load i32* %tag, align 4
  %191 = icmp eq i32 %190, 2
  br i1 %191, label %192, label %199

; <label>:192                                     ; preds = %186
  %193 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0)) #10
  %194 = icmp ne i8* %193, null
  br i1 %194, label %195, label %199

; <label>:195                                     ; preds = %192
  %196 = call zeroext i16 @get2()
  %197 = call zeroext i16 @get2()
  %198 = uitofp i16 %197 to float
  store float %198, float* @iso_speed, align 4
  br label %199

; <label>:199                                     ; preds = %195, %192, %186
  %200 = load i32* %tag, align 4
  %201 = icmp eq i32 %200, 4
  br i1 %201, label %202, label %257

; <label>:202                                     ; preds = %199
  %203 = load i32* %len, align 4
  %204 = icmp ugt i32 %203, 26
  br i1 %204, label %205, label %257

; <label>:205                                     ; preds = %202
  %206 = load i32* %len, align 4
  %207 = icmp ult i32 %206, 35
  br i1 %207, label %208, label %257

; <label>:208                                     ; preds = %205
  %209 = call i32 @get4()
  %210 = call zeroext i16 @get2()
  %211 = zext i16 %210 to i32
  %212 = icmp ne i32 %211, 32767
  br i1 %212, label %213, label %223

; <label>:213                                     ; preds = %208
  %214 = load float* @iso_speed, align 4
  %215 = fcmp une float %214, 0.000000e+00
  br i1 %215, label %223, label %216

; <label>:216                                     ; preds = %213
  %217 = uitofp i32 %211 to double
  %218 = fdiv double %217, 3.200000e+01
  %219 = fsub double %218, 4.000000e+00
  %220 = call double @pow(double 2.000000e+00, double %219) #4
  %221 = fmul double 5.000000e+01, %220
  %222 = fptrunc double %221 to float
  store float %222, float* @iso_speed, align 4
  br label %223

; <label>:223                                     ; preds = %216, %213, %208
  %224 = call zeroext i16 @get2()
  %225 = call zeroext i16 @get2()
  %226 = zext i16 %225 to i32
  %227 = icmp ne i32 %226, 32767
  br i1 %227, label %228, label %236

; <label>:228                                     ; preds = %223
  %229 = load float* @aperture, align 4
  %230 = fcmp une float %229, 0.000000e+00
  br i1 %230, label %236, label %231

; <label>:231                                     ; preds = %228
  %232 = uitofp i32 %226 to double
  %233 = fdiv double %232, 6.400000e+01
  %234 = call double @pow(double 2.000000e+00, double %233) #4
  %235 = fptrunc double %234 to float
  store float %235, float* @aperture, align 4
  br label %236

; <label>:236                                     ; preds = %231, %228, %223
  %237 = call zeroext i16 @get2()
  %238 = zext i16 %237 to i32
  %239 = icmp ne i32 %238, 65535
  br i1 %239, label %240, label %250

; <label>:240                                     ; preds = %236
  %241 = load float* @shutter, align 4
  %242 = fcmp une float %241, 0.000000e+00
  br i1 %242, label %250, label %243

; <label>:243                                     ; preds = %240
  %244 = trunc i32 %238 to i16
  %245 = sext i16 %244 to i32
  %246 = sitofp i32 %245 to double
  %247 = fdiv double %246, -3.200000e+01
  %248 = call double @pow(double 2.000000e+00, double %247) #4
  %249 = fptrunc double %248 to float
  store float %249, float* @shutter, align 4
  br label %250

; <label>:250                                     ; preds = %243, %240, %236
  %251 = call zeroext i16 @get2()
  %252 = call zeroext i16 @get2()
  %253 = zext i16 %252 to i32
  %254 = call zeroext i16 @get2()
  %255 = call zeroext i16 @get2()
  %256 = zext i16 %255 to i32
  store i32 %256, i32* @shot_order, align 4
  br label %257

; <label>:257                                     ; preds = %250, %205, %202, %199
  %wbi.1 = phi i32 [ %253, %250 ], [ %wbi.0, %205 ], [ %wbi.0, %202 ], [ %wbi.0, %199 ]
  %258 = load i32* %tag, align 4
  %259 = icmp eq i32 %258, 7
  br i1 %259, label %260, label %269

; <label>:260                                     ; preds = %257
  %261 = load i32* %type, align 4
  %262 = icmp eq i32 %261, 2
  br i1 %262, label %263, label %269

; <label>:263                                     ; preds = %260
  %264 = load i32* %len, align 4
  %265 = icmp ugt i32 %264, 20
  br i1 %265, label %266, label %269

; <label>:266                                     ; preds = %263
  %267 = load %struct._IO_FILE** @ifp, align 8
  %268 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i32 64, %struct._IO_FILE* %267)
  br label %269

; <label>:269                                     ; preds = %266, %263, %260, %257
  %270 = load i32* %tag, align 4
  %271 = icmp eq i32 %270, 8
  br i1 %271, label %272, label %277

; <label>:272                                     ; preds = %269
  %273 = load i32* %type, align 4
  %274 = icmp eq i32 %273, 4
  br i1 %274, label %275, label %277

; <label>:275                                     ; preds = %272
  %276 = call i32 @get4()
  store i32 %276, i32* @shot_order, align 4
  br label %277

; <label>:277                                     ; preds = %275, %272, %269
  %278 = load i32* %tag, align 4
  %279 = icmp eq i32 %278, 9
  br i1 %279, label %280, label %286

; <label>:280                                     ; preds = %277
  %281 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0)) #10
  %282 = icmp ne i32 %281, 0
  br i1 %282, label %286, label %283

; <label>:283                                     ; preds = %280
  %284 = load %struct._IO_FILE** @ifp, align 8
  %285 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %284)
  br label %286

; <label>:286                                     ; preds = %283, %280, %277
  %287 = load i32* %tag, align 4
  %288 = icmp eq i32 %287, 12
  br i1 %288, label %289, label %299

; <label>:289                                     ; preds = %286
  %290 = load i32* %len, align 4
  %291 = icmp eq i32 %290, 4
  br i1 %291, label %292, label %299

; <label>:292                                     ; preds = %289
  %293 = load i32* %type, align 4
  %294 = call double @getreal(i32 %293)
  %295 = fptrunc double %294 to float
  store float %295, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %296 = load i32* %type, align 4
  %297 = call double @getreal(i32 %296)
  %298 = fptrunc double %297 to float
  store float %298, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %299

; <label>:299                                     ; preds = %292, %289, %286
  %300 = load i32* %tag, align 4
  %301 = icmp eq i32 %300, 16
  br i1 %301, label %302, label %307

; <label>:302                                     ; preds = %299
  %303 = load i32* %type, align 4
  %304 = icmp eq i32 %303, 4
  br i1 %304, label %305, label %307

; <label>:305                                     ; preds = %302
  %306 = call i32 @get4()
  store i32 %306, i32* @unique_id, align 4
  br label %307

; <label>:307                                     ; preds = %305, %302, %299
  %308 = load i32* %tag, align 4
  %309 = icmp eq i32 %308, 17
  br i1 %309, label %310, label %323

; <label>:310                                     ; preds = %307
  %311 = load i32* @is_raw, align 4
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %323

; <label>:313                                     ; preds = %310
  %314 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0), i64 5) #10
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %323, label %316

; <label>:316                                     ; preds = %313
  %317 = load %struct._IO_FILE** @ifp, align 8
  %318 = call i32 @get4()
  %319 = add i32 %318, %.1
  %320 = zext i32 %319 to i64
  %321 = call i32 @fseek(%struct._IO_FILE* %317, i64 %320, i32 0)
  %322 = call i32 @parse_tiff_ifd(i32 %.1)
  br label %323

; <label>:323                                     ; preds = %316, %313, %310, %307
  %324 = load i32* %tag, align 4
  %325 = icmp eq i32 %324, 20
  br i1 %325, label %326, label %335

; <label>:326                                     ; preds = %323
  %327 = load i32* %len, align 4
  %328 = icmp eq i32 %327, 2560
  br i1 %328, label %329, label %335

; <label>:329                                     ; preds = %326
  %330 = load i32* %type, align 4
  %331 = icmp eq i32 %330, 7
  br i1 %331, label %332, label %335

; <label>:332                                     ; preds = %329
  %333 = load %struct._IO_FILE** @ifp, align 8
  %334 = call i32 @fseek(%struct._IO_FILE* %333, i64 1248, i32 1)
  br label %877

; <label>:335                                     ; preds = %329, %326, %323
  %336 = load i32* %tag, align 4
  %337 = icmp eq i32 %336, 21
  br i1 %337, label %338, label %347

; <label>:338                                     ; preds = %335
  %339 = load i32* %type, align 4
  %340 = icmp eq i32 %339, 2
  br i1 %340, label %341, label %347

; <label>:341                                     ; preds = %338
  %342 = load i32* @is_raw, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %347

; <label>:344                                     ; preds = %341
  %345 = load %struct._IO_FILE** @ifp, align 8
  %346 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %345)
  br label %347

; <label>:347                                     ; preds = %344, %341, %338, %335
  %348 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str105, i32 0, i32 0)) #10
  %349 = icmp ne i8* %348, null
  br i1 %349, label %350, label %359

; <label>:350                                     ; preds = %347
  %351 = load i32* %tag, align 4
  %352 = icmp eq i32 %351, 27
  br i1 %352, label %353, label %354

; <label>:353                                     ; preds = %350
  store i32 4120, i32* %tag, align 4
  br label %354

; <label>:354                                     ; preds = %353, %350
  %355 = load i32* %tag, align 4
  %356 = icmp eq i32 %355, 28
  br i1 %356, label %357, label %358

; <label>:357                                     ; preds = %354
  store i32 4119, i32* %tag, align 4
  br label %358

; <label>:358                                     ; preds = %357, %354
  br label %359

; <label>:359                                     ; preds = %358, %347
  %360 = load i32* %tag, align 4
  %361 = icmp eq i32 %360, 29
  br i1 %361, label %362, label %389

; <label>:362                                     ; preds = %359
  br label %363

; <label>:363                                     ; preds = %385, %362
  %serial.1 = phi i32 [ %serial.0, %362 ], [ %387, %385 ]
  %364 = load %struct._IO_FILE** @ifp, align 8
  %365 = call i32 @getc_unlocked(%struct._IO_FILE* %364)
  %366 = icmp ne i32 %365, 0
  br i1 %366, label %367, label %369

; <label>:367                                     ; preds = %363
  %368 = icmp ne i32 %365, -1
  br label %369

; <label>:369                                     ; preds = %367, %363
  %370 = phi i1 [ false, %363 ], [ %368, %367 ]
  br i1 %370, label %371, label %388

; <label>:371                                     ; preds = %369
  %372 = mul i32 %serial.1, 10
  %373 = sext i32 %365 to i64
  %374 = call i16** @__ctype_b_loc() #9
  %375 = load i16** %374, align 8
  %376 = getelementptr inbounds i16* %375, i64 %373
  %377 = load i16* %376, align 2
  %378 = zext i16 %377 to i32
  %379 = and i32 %378, 2048
  %380 = icmp ne i32 %379, 0
  br i1 %380, label %381, label %383

; <label>:381                                     ; preds = %371
  %382 = sub i32 %365, 48
  br label %385

; <label>:383                                     ; preds = %371
  %384 = urem i32 %365, 10
  br label %385

; <label>:385                                     ; preds = %383, %381
  %386 = phi i32 [ %382, %381 ], [ %384, %383 ]
  %387 = add i32 %372, %386
  br label %363

; <label>:388                                     ; preds = %369
  br label %389

; <label>:389                                     ; preds = %388, %359
  %serial.2 = phi i32 [ %serial.1, %388 ], [ %serial.0, %359 ]
  %390 = load i32* %tag, align 4
  %391 = icmp eq i32 %390, 129
  br i1 %391, label %392, label %407

; <label>:392                                     ; preds = %389
  %393 = load i32* %type, align 4
  %394 = icmp eq i32 %393, 4
  br i1 %394, label %395, label %407

; <label>:395                                     ; preds = %392
  %396 = call i32 @get4()
  %397 = zext i32 %396 to i64
  store i64 %397, i64* @data_offset, align 8
  %398 = load %struct._IO_FILE** @ifp, align 8
  %399 = load i64* @data_offset, align 8
  %400 = add nsw i64 %399, 41
  %401 = call i32 @fseek(%struct._IO_FILE* %398, i64 %400, i32 0)
  %402 = call zeroext i16 @get2()
  %403 = zext i16 %402 to i32
  %404 = mul nsw i32 %403, 2
  %405 = trunc i32 %404 to i16
  store i16 %405, i16* @raw_height, align 2
  %406 = call zeroext i16 @get2()
  store i16 %406, i16* @raw_width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %407

; <label>:407                                     ; preds = %395, %392, %389
  %408 = load i32* %tag, align 4
  %409 = icmp eq i32 %408, 41
  br i1 %409, label %410, label %442

; <label>:410                                     ; preds = %407
  %411 = load i32* %type, align 4
  %412 = icmp eq i32 %411, 1
  br i1 %412, label %413, label %442

; <label>:413                                     ; preds = %410
  %414 = icmp ult i32 %wbi.1, 18
  br i1 %414, label %415, label %421

; <label>:415                                     ; preds = %413
  %416 = zext i32 %wbi.1 to i64
  %417 = getelementptr inbounds [19 x i8]* @.str106, i32 0, i64 %416
  %418 = load i8* %417, align 1
  %419 = sext i8 %418 to i32
  %420 = sub nsw i32 %419, 48
  br label %422

; <label>:421                                     ; preds = %413
  br label %422

; <label>:422                                     ; preds = %421, %415
  %423 = phi i32 [ %420, %415 ], [ 0, %421 ]
  %424 = load %struct._IO_FILE** @ifp, align 8
  %425 = mul i32 %423, 32
  %426 = add i32 8, %425
  %427 = zext i32 %426 to i64
  %428 = call i32 @fseek(%struct._IO_FILE* %424, i64 %427, i32 1)
  br label %429

; <label>:429                                     ; preds = %439, %422
  %c.1 = phi i32 [ 0, %422 ], [ %440, %439 ]
  %430 = icmp ult i32 %c.1, 4
  br i1 %430, label %431, label %441

; <label>:431                                     ; preds = %429
  %432 = call i32 @get4()
  %433 = uitofp i32 %432 to float
  %434 = lshr i32 %c.1, 1
  %435 = xor i32 %c.1, %434
  %436 = xor i32 %435, 1
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %437
  store float %433, float* %438, align 4
  br label %439

; <label>:439                                     ; preds = %431
  %440 = add i32 %c.1, 1
  br label %429

; <label>:441                                     ; preds = %429
  br label %442

; <label>:442                                     ; preds = %441, %410, %407
  %443 = load i32* %tag, align 4
  %444 = icmp eq i32 %443, 129
  br i1 %444, label %445, label %448

; <label>:445                                     ; preds = %442
  %446 = load i32* %type, align 4
  %447 = icmp eq i32 %446, 7
  br i1 %447, label %460, label %448

; <label>:448                                     ; preds = %445, %442
  %449 = load i32* %tag, align 4
  %450 = icmp eq i32 %449, 256
  br i1 %450, label %451, label %454

; <label>:451                                     ; preds = %448
  %452 = load i32* %type, align 4
  %453 = icmp eq i32 %452, 7
  br i1 %453, label %460, label %454

; <label>:454                                     ; preds = %451, %448
  %455 = load i32* %tag, align 4
  %456 = icmp eq i32 %455, 640
  br i1 %456, label %457, label %464

; <label>:457                                     ; preds = %454
  %458 = load i32* %type, align 4
  %459 = icmp eq i32 %458, 1
  br i1 %459, label %460, label %464

; <label>:460                                     ; preds = %457, %451, %445
  %461 = load %struct._IO_FILE** @ifp, align 8
  %462 = call i64 @ftell(%struct._IO_FILE* %461)
  store i64 %462, i64* @thumb_offset, align 8
  %463 = load i32* %len, align 4
  store i32 %463, i32* @thumb_length, align 4
  br label %464

; <label>:464                                     ; preds = %460, %457, %454
  %465 = load i32* %tag, align 4
  %466 = icmp eq i32 %465, 136
  br i1 %466, label %467, label %478

; <label>:467                                     ; preds = %464
  %468 = load i32* %type, align 4
  %469 = icmp eq i32 %468, 4
  br i1 %469, label %470, label %478

; <label>:470                                     ; preds = %467
  %471 = call i32 @get4()
  %472 = zext i32 %471 to i64
  store i64 %472, i64* @thumb_offset, align 8
  %473 = icmp ne i64 %472, 0
  br i1 %473, label %474, label %478

; <label>:474                                     ; preds = %470
  %475 = sext i32 %.1 to i64
  %476 = load i64* @thumb_offset, align 8
  %477 = add nsw i64 %476, %475
  store i64 %477, i64* @thumb_offset, align 8
  br label %478

; <label>:478                                     ; preds = %474, %470, %467, %464
  %479 = load i32* %tag, align 4
  %480 = icmp eq i32 %479, 137
  br i1 %480, label %481, label %486

; <label>:481                                     ; preds = %478
  %482 = load i32* %type, align 4
  %483 = icmp eq i32 %482, 4
  br i1 %483, label %484, label %486

; <label>:484                                     ; preds = %481
  %485 = call i32 @get4()
  store i32 %485, i32* @thumb_length, align 4
  br label %486

; <label>:486                                     ; preds = %484, %481, %478
  %487 = load i32* %tag, align 4
  %488 = icmp eq i32 %487, 140
  br i1 %488, label %492, label %489

; <label>:489                                     ; preds = %486
  %490 = load i32* %tag, align 4
  %491 = icmp eq i32 %490, 150
  br i1 %491, label %492, label %495

; <label>:492                                     ; preds = %489, %486
  %493 = load %struct._IO_FILE** @ifp, align 8
  %494 = call i64 @ftell(%struct._IO_FILE* %493)
  store i64 %494, i64* @meta_offset, align 8
  br label %495

; <label>:495                                     ; preds = %492, %489
  %496 = load i32* %tag, align 4
  %497 = icmp eq i32 %496, 151
  br i1 %497, label %498, label %555

; <label>:498                                     ; preds = %495
  br label %499

; <label>:499                                     ; preds = %507, %498
  %i.0 = phi i32 [ 0, %498 ], [ %508, %507 ]
  %ver97.1 = phi i32 [ %ver97.0, %498 ], [ %506, %507 ]
  %500 = icmp ult i32 %i.0, 4
  br i1 %500, label %501, label %509

; <label>:501                                     ; preds = %499
  %502 = mul i32 %ver97.1, 10
  %503 = load %struct._IO_FILE** @ifp, align 8
  %504 = call i32 @getc_unlocked(%struct._IO_FILE* %503)
  %505 = add i32 %502, %504
  %506 = sub i32 %505, 48
  br label %507

; <label>:507                                     ; preds = %501
  %508 = add i32 %i.0, 1
  br label %499

; <label>:509                                     ; preds = %499
  switch i32 %ver97.1, label %543 [
    i32 100, label %510
    i32 102, label %527
    i32 103, label %530
  ]

; <label>:510                                     ; preds = %509
  %511 = load %struct._IO_FILE** @ifp, align 8
  %512 = call i32 @fseek(%struct._IO_FILE* %511, i64 68, i32 1)
  br label %513

; <label>:513                                     ; preds = %524, %510
  %c.2 = phi i32 [ 0, %510 ], [ %525, %524 ]
  %514 = icmp ult i32 %c.2, 4
  br i1 %514, label %515, label %526

; <label>:515                                     ; preds = %513
  %516 = call zeroext i16 @get2()
  %517 = uitofp i16 %516 to float
  %518 = lshr i32 %c.2, 1
  %519 = and i32 %c.2, 1
  %520 = shl i32 %519, 1
  %521 = or i32 %518, %520
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %522
  store float %517, float* %523, align 4
  br label %524

; <label>:524                                     ; preds = %515
  %525 = add i32 %c.2, 1
  br label %513

; <label>:526                                     ; preds = %513
  br label %543

; <label>:527                                     ; preds = %509
  %528 = load %struct._IO_FILE** @ifp, align 8
  %529 = call i32 @fseek(%struct._IO_FILE* %528, i64 6, i32 1)
  br label %949

; <label>:530                                     ; preds = %509
  %531 = load %struct._IO_FILE** @ifp, align 8
  %532 = call i32 @fseek(%struct._IO_FILE* %531, i64 16, i32 1)
  br label %533

; <label>:533                                     ; preds = %540, %530
  %c.3 = phi i32 [ 0, %530 ], [ %541, %540 ]
  %534 = icmp ult i32 %c.3, 4
  br i1 %534, label %535, label %542

; <label>:535                                     ; preds = %533
  %536 = call zeroext i16 @get2()
  %537 = uitofp i16 %536 to float
  %538 = zext i32 %c.3 to i64
  %539 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %538
  store float %537, float* %539, align 4
  br label %540

; <label>:540                                     ; preds = %535
  %541 = add i32 %c.3, 1
  br label %533

; <label>:542                                     ; preds = %533
  br label %543

; <label>:543                                     ; preds = %542, %526, %509
  %544 = icmp uge i32 %ver97.1, 200
  br i1 %544, label %545, label %554

; <label>:545                                     ; preds = %543
  %546 = icmp ne i32 %ver97.1, 205
  br i1 %546, label %547, label %550

; <label>:547                                     ; preds = %545
  %548 = load %struct._IO_FILE** @ifp, align 8
  %549 = call i32 @fseek(%struct._IO_FILE* %548, i64 280, i32 1)
  br label %550

; <label>:550                                     ; preds = %547, %545
  %551 = getelementptr inbounds [324 x i8]* %buf97, i32 0, i32 0
  %552 = load %struct._IO_FILE** @ifp, align 8
  %553 = call i64 @fread(i8* %551, i64 324, i64 1, %struct._IO_FILE* %552)
  br label %554

; <label>:554                                     ; preds = %550, %543
  br label %555

; <label>:555                                     ; preds = %554, %495
  %ver97.2 = phi i32 [ %ver97.1, %554 ], [ %ver97.0, %495 ]
  %556 = load i32* %tag, align 4
  %557 = icmp eq i32 %556, 164
  br i1 %557, label %558, label %576

; <label>:558                                     ; preds = %555
  %559 = load i32* %type, align 4
  %560 = icmp eq i32 %559, 3
  br i1 %560, label %561, label %576

; <label>:561                                     ; preds = %558
  %562 = load %struct._IO_FILE** @ifp, align 8
  %563 = mul i32 %wbi.1, 48
  %564 = zext i32 %563 to i64
  %565 = call i32 @fseek(%struct._IO_FILE* %562, i64 %564, i32 1)
  br label %566

; <label>:566                                     ; preds = %573, %561
  %c.4 = phi i32 [ 0, %561 ], [ %574, %573 ]
  %567 = icmp ult i32 %c.4, 3
  br i1 %567, label %568, label %575

; <label>:568                                     ; preds = %566
  %569 = call zeroext i16 @get2()
  %570 = uitofp i16 %569 to float
  %571 = zext i32 %c.4 to i64
  %572 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %571
  store float %570, float* %572, align 4
  br label %573

; <label>:573                                     ; preds = %568
  %574 = add i32 %c.4, 1
  br label %566

; <label>:575                                     ; preds = %566
  br label %576

; <label>:576                                     ; preds = %575, %558, %555
  %577 = load i32* %tag, align 4
  %578 = icmp eq i32 %577, 167
  br i1 %578, label %579, label %651

; <label>:579                                     ; preds = %576
  %580 = sub i32 %ver97.2, 200
  %581 = icmp ult i32 %580, 12
  br i1 %581, label %582, label %651

; <label>:582                                     ; preds = %579
  %583 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %584 = fcmp une float %583, 0.000000e+00
  br i1 %584, label %651, label %585

; <label>:585                                     ; preds = %582
  %586 = and i32 %serial.2, 255
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds [256 x i8]* getelementptr inbounds ([2 x [256 x i8]]* @parse_makernote.xlat, i32 0, i64 0), i32 0, i64 %587
  %589 = load i8* %588, align 1
  %590 = load %struct._IO_FILE** @ifp, align 8
  %591 = call i32 @getc_unlocked(%struct._IO_FILE* %590)
  %592 = load %struct._IO_FILE** @ifp, align 8
  %593 = call i32 @getc_unlocked(%struct._IO_FILE* %592)
  %594 = xor i32 %591, %593
  %595 = load %struct._IO_FILE** @ifp, align 8
  %596 = call i32 @getc_unlocked(%struct._IO_FILE* %595)
  %597 = xor i32 %594, %596
  %598 = load %struct._IO_FILE** @ifp, align 8
  %599 = call i32 @getc_unlocked(%struct._IO_FILE* %598)
  %600 = xor i32 %597, %599
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds [256 x i8]* getelementptr inbounds ([2 x [256 x i8]]* @parse_makernote.xlat, i32 0, i64 1), i32 0, i64 %601
  %603 = load i8* %602, align 1
  br label %604

; <label>:604                                     ; preds = %621, %585
  %cj.0 = phi i8 [ %603, %585 ], [ %613, %621 ]
  %i.1 = phi i32 [ 0, %585 ], [ %622, %621 ]
  %ck.0 = phi i8 [ 96, %585 ], [ %608, %621 ]
  %605 = icmp ult i32 %i.1, 324
  br i1 %605, label %606, label %623

; <label>:606                                     ; preds = %604
  %607 = zext i8 %589 to i32
  %608 = add i8 %ck.0, 1
  %609 = zext i8 %ck.0 to i32
  %610 = mul nsw i32 %607, %609
  %611 = zext i8 %cj.0 to i32
  %612 = add nsw i32 %611, %610
  %613 = trunc i32 %612 to i8
  %614 = zext i8 %613 to i32
  %615 = zext i32 %i.1 to i64
  %616 = getelementptr inbounds [324 x i8]* %buf97, i32 0, i64 %615
  %617 = load i8* %616, align 1
  %618 = zext i8 %617 to i32
  %619 = xor i32 %618, %614
  %620 = trunc i32 %619 to i8
  store i8 %620, i8* %616, align 1
  br label %621

; <label>:621                                     ; preds = %606
  %622 = add i32 %i.1, 1
  br label %604

; <label>:623                                     ; preds = %604
  %624 = sub i32 %ver97.2, 200
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds [13 x i8]* @.str107, i32 0, i64 %625
  %627 = load i8* %626, align 1
  %628 = sext i8 %627 to i32
  %629 = sub nsw i32 %628, 48
  br label %630

; <label>:630                                     ; preds = %648, %623
  %c.5 = phi i32 [ 0, %623 ], [ %649, %648 ]
  %631 = icmp ult i32 %c.5, 4
  br i1 %631, label %632, label %650

; <label>:632                                     ; preds = %630
  %633 = getelementptr inbounds [324 x i8]* %buf97, i32 0, i32 0
  %634 = and i32 %629, -2
  %635 = zext i32 %634 to i64
  %636 = getelementptr inbounds i8* %633, i64 %635
  %637 = mul i32 %c.5, 2
  %638 = zext i32 %637 to i64
  %639 = getelementptr inbounds i8* %636, i64 %638
  %640 = call zeroext i16 @sget2(i8* %639)
  %641 = uitofp i16 %640 to float
  %642 = lshr i32 %c.5, 1
  %643 = xor i32 %c.5, %642
  %644 = and i32 %629, 1
  %645 = xor i32 %643, %644
  %646 = zext i32 %645 to i64
  %647 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %646
  store float %641, float* %647, align 4
  br label %648

; <label>:648                                     ; preds = %632
  %649 = add i32 %c.5, 1
  br label %630

; <label>:650                                     ; preds = %630
  br label %651

; <label>:651                                     ; preds = %650, %582, %579, %576
  %652 = load i32* %tag, align 4
  %653 = icmp eq i32 %652, 512
  br i1 %653, label %654, label %660

; <label>:654                                     ; preds = %651
  %655 = load i32* %len, align 4
  %656 = icmp eq i32 %655, 3
  br i1 %656, label %657, label %660

; <label>:657                                     ; preds = %654
  %658 = call i32 @get4()
  %659 = call i32 @get4()
  store i32 %659, i32* @shot_order, align 4
  br label %660

; <label>:660                                     ; preds = %657, %654, %651
  %661 = load i32* %tag, align 4
  %662 = icmp eq i32 %661, 512
  br i1 %662, label %663, label %679

; <label>:663                                     ; preds = %660
  %664 = load i32* %len, align 4
  %665 = icmp eq i32 %664, 4
  br i1 %665, label %666, label %679

; <label>:666                                     ; preds = %663
  %667 = call zeroext i16 @get2()
  %668 = zext i16 %667 to i32
  %669 = call zeroext i16 @get2()
  %670 = zext i16 %669 to i32
  %671 = add nsw i32 %668, %670
  %672 = call zeroext i16 @get2()
  %673 = zext i16 %672 to i32
  %674 = add nsw i32 %671, %673
  %675 = call zeroext i16 @get2()
  %676 = zext i16 %675 to i32
  %677 = add nsw i32 %674, %676
  %678 = sdiv i32 %677, 4
  store i32 %678, i32* @black, align 4
  br label %679

; <label>:679                                     ; preds = %666, %663, %660
  %680 = load i32* %tag, align 4
  %681 = icmp eq i32 %680, 513
  br i1 %681, label %682, label %686

; <label>:682                                     ; preds = %679
  %683 = load i32* %len, align 4
  %684 = icmp eq i32 %683, 4
  br i1 %684, label %685, label %686

; <label>:685                                     ; preds = %682
  br label %949

; <label>:686                                     ; preds = %682, %679
  %687 = load i32* %tag, align 4
  %688 = icmp eq i32 %687, 544
  br i1 %688, label %689, label %695

; <label>:689                                     ; preds = %686
  %690 = load i32* %len, align 4
  %691 = icmp eq i32 %690, 53
  br i1 %691, label %692, label %695

; <label>:692                                     ; preds = %689
  %693 = load %struct._IO_FILE** @ifp, align 8
  %694 = call i32 @fseek(%struct._IO_FILE* %693, i64 14, i32 1)
  call void @pentax_tree()
  br label %695

; <label>:695                                     ; preds = %692, %689, %686
  %696 = load i32* %tag, align 4
  %697 = icmp eq i32 %696, 1025
  br i1 %697, label %698, label %710

; <label>:698                                     ; preds = %695
  %699 = load i32* %len, align 4
  %700 = icmp eq i32 %699, 4
  br i1 %700, label %701, label %710

; <label>:701                                     ; preds = %698
  %702 = call i32 @get4()
  %703 = call i32 @get4()
  %704 = add i32 %702, %703
  %705 = call i32 @get4()
  %706 = add i32 %704, %705
  %707 = call i32 @get4()
  %708 = add i32 %706, %707
  %709 = udiv i32 %708, 4
  store i32 %709, i32* @black, align 4
  br label %710

; <label>:710                                     ; preds = %701, %698, %695
  %711 = load i32* %tag, align 4
  %712 = icmp eq i32 %711, 3585
  br i1 %712, label %713, label %744

; <label>:713                                     ; preds = %710
  %714 = load i16* @order, align 2
  %715 = sext i16 %714 to i32
  store i32 %715, i32* %type, align 4
  store i16 18761, i16* @order, align 2
  %716 = load %struct._IO_FILE** @ifp, align 8
  %717 = call i32 @fseek(%struct._IO_FILE* %716, i64 22, i32 1)
  br label %718

; <label>:718                                     ; preds = %738, %713
  %offset.0 = phi i32 [ 22, %713 ], [ %740, %738 ]
  %719 = add i32 %offset.0, 22
  %720 = load i32* %len, align 4
  %721 = icmp ult i32 %719, %720
  br i1 %721, label %722, label %741

; <label>:722                                     ; preds = %718
  %723 = call i32 @get4()
  store i32 %723, i32* %tag, align 4
  %724 = load %struct._IO_FILE** @ifp, align 8
  %725 = call i32 @fseek(%struct._IO_FILE* %724, i64 14, i32 1)
  %726 = call i32 @get4()
  %727 = sub i32 %726, 4
  %728 = load i32* %tag, align 4
  %729 = icmp eq i32 %728, 1990472199
  br i1 %729, label %730, label %733

; <label>:730                                     ; preds = %722
  %731 = call zeroext i16 @get2()
  %732 = zext i16 %731 to i32
  store i32 %732, i32* @flip, align 4
  br label %737

; <label>:733                                     ; preds = %722
  %734 = load %struct._IO_FILE** @ifp, align 8
  %735 = zext i32 %727 to i64
  %736 = call i32 @fseek(%struct._IO_FILE* %734, i64 %735, i32 1)
  br label %737

; <label>:737                                     ; preds = %733, %730
  br label %738

; <label>:738                                     ; preds = %737
  %739 = add i32 22, %727
  %740 = add i32 %offset.0, %739
  br label %718

; <label>:741                                     ; preds = %718
  %742 = load i32* %type, align 4
  %743 = trunc i32 %742 to i16
  store i16 %743, i16* @order, align 2
  br label %744

; <label>:744                                     ; preds = %741, %710
  %745 = load i32* %tag, align 4
  %746 = icmp eq i32 %745, 3712
  br i1 %746, label %747, label %770

; <label>:747                                     ; preds = %744
  %748 = load i32* %len, align 4
  %749 = icmp eq i32 %748, 256
  br i1 %749, label %750, label %770

; <label>:750                                     ; preds = %747
  %751 = load i32* %type, align 4
  %752 = icmp eq i32 %751, 7
  br i1 %752, label %753, label %770

; <label>:753                                     ; preds = %750
  %754 = load %struct._IO_FILE** @ifp, align 8
  %755 = call i32 @fseek(%struct._IO_FILE* %754, i64 48, i32 1)
  %756 = call zeroext i16 @get2()
  %757 = zext i16 %756 to i32
  %758 = mul nsw i32 %757, 508
  %759 = sitofp i32 %758 to double
  %760 = fmul double %759, 1.078000e+00
  %761 = fdiv double %760, 6.553600e+04
  %762 = fptrunc double %761 to float
  store float %762, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %763 = call zeroext i16 @get2()
  %764 = zext i16 %763 to i32
  %765 = mul nsw i32 %764, 382
  %766 = sitofp i32 %765 to double
  %767 = fmul double %766, 1.173000e+00
  %768 = fdiv double %767, 6.553600e+04
  %769 = fptrunc double %768 to float
  store float %769, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %770

; <label>:770                                     ; preds = %753, %750, %747, %744
  %771 = load i32* %tag, align 4
  %772 = icmp eq i32 %771, 3840
  br i1 %772, label %773, label %794

; <label>:773                                     ; preds = %770
  %774 = load i32* %type, align 4
  %775 = icmp eq i32 %774, 7
  br i1 %775, label %776, label %794

; <label>:776                                     ; preds = %773
  %777 = load i32* %len, align 4
  %778 = icmp eq i32 %777, 614
  br i1 %778, label %779, label %782

; <label>:779                                     ; preds = %776
  %780 = load %struct._IO_FILE** @ifp, align 8
  %781 = call i32 @fseek(%struct._IO_FILE* %780, i64 176, i32 1)
  br label %793

; <label>:782                                     ; preds = %776
  %783 = load i32* %len, align 4
  %784 = icmp eq i32 %783, 734
  br i1 %784, label %788, label %785

; <label>:785                                     ; preds = %782
  %786 = load i32* %len, align 4
  %787 = icmp eq i32 %786, 1502
  br i1 %787, label %788, label %791

; <label>:788                                     ; preds = %785, %782
  %789 = load %struct._IO_FILE** @ifp, align 8
  %790 = call i32 @fseek(%struct._IO_FILE* %789, i64 148, i32 1)
  br label %792

; <label>:791                                     ; preds = %785
  br label %976

; <label>:792                                     ; preds = %788
  br label %793

; <label>:793                                     ; preds = %792, %779
  br label %877

; <label>:794                                     ; preds = %773, %770
  %795 = load i32* %tag, align 4
  %796 = icmp eq i32 %795, 4113
  br i1 %796, label %797, label %800

; <label>:797                                     ; preds = %794
  %798 = load i32* %len, align 4
  %799 = icmp eq i32 %798, 9
  br i1 %799, label %803, label %800

; <label>:800                                     ; preds = %797, %794
  %801 = load i32* %tag, align 4
  %802 = icmp eq i32 %801, 541065728
  br i1 %802, label %803, label %825

; <label>:803                                     ; preds = %800, %797
  br label %804

; <label>:804                                     ; preds = %822, %803
  %i.2 = phi i32 [ 0, %803 ], [ %823, %822 ]
  %805 = icmp ult i32 %i.2, 3
  br i1 %805, label %806, label %824

; <label>:806                                     ; preds = %804
  br label %807

; <label>:807                                     ; preds = %819, %806
  %c.6 = phi i32 [ 0, %806 ], [ %820, %819 ]
  %808 = icmp ult i32 %c.6, 3
  br i1 %808, label %809, label %821

; <label>:809                                     ; preds = %807
  %810 = call zeroext i16 @get2()
  %811 = sext i16 %810 to i32
  %812 = sitofp i32 %811 to double
  %813 = fdiv double %812, 2.560000e+02
  %814 = fptrunc double %813 to float
  %815 = zext i32 %c.6 to i64
  %816 = zext i32 %i.2 to i64
  %817 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %816
  %818 = getelementptr inbounds [4 x float]* %817, i32 0, i64 %815
  store float %814, float* %818, align 4
  br label %819

; <label>:819                                     ; preds = %809
  %820 = add i32 %c.6, 1
  br label %807

; <label>:821                                     ; preds = %807
  br label %822

; <label>:822                                     ; preds = %821
  %823 = add i32 %i.2, 1
  br label %804

; <label>:824                                     ; preds = %804
  br label %825

; <label>:825                                     ; preds = %824, %800
  %826 = load i32* %tag, align 4
  %827 = icmp eq i32 %826, 4114
  br i1 %827, label %831, label %828

; <label>:828                                     ; preds = %825
  %829 = load i32* %tag, align 4
  %830 = icmp eq i32 %829, 541066752
  br i1 %830, label %831, label %846

; <label>:831                                     ; preds = %828, %825
  %832 = load i32* %len, align 4
  %833 = icmp eq i32 %832, 4
  br i1 %833, label %834, label %846

; <label>:834                                     ; preds = %831
  store i32 0, i32* @black, align 4
  br label %835

; <label>:835                                     ; preds = %843, %834
  %i.3 = phi i32 [ 0, %834 ], [ %844, %843 ]
  %836 = icmp ult i32 %i.3, 4
  br i1 %836, label %837, label %845

; <label>:837                                     ; preds = %835
  %838 = call zeroext i16 @get2()
  %839 = zext i16 %838 to i32
  %840 = shl i32 %839, 2
  %841 = load i32* @black, align 4
  %842 = add i32 %841, %840
  store i32 %842, i32* @black, align 4
  br label %843

; <label>:843                                     ; preds = %837
  %844 = add i32 %i.3, 1
  br label %835

; <label>:845                                     ; preds = %835
  br label %846

; <label>:846                                     ; preds = %845, %831, %828
  %847 = load i32* %tag, align 4
  %848 = icmp eq i32 %847, 4119
  br i1 %848, label %852, label %849

; <label>:849                                     ; preds = %846
  %850 = load i32* %tag, align 4
  %851 = icmp eq i32 %850, 541065472
  br i1 %851, label %852, label %858

; <label>:852                                     ; preds = %849, %846
  %853 = call zeroext i16 @get2()
  %854 = zext i16 %853 to i32
  %855 = sitofp i32 %854 to double
  %856 = fdiv double %855, 2.560000e+02
  %857 = fptrunc double %856 to float
  store float %857, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  br label %858

; <label>:858                                     ; preds = %852, %849
  %859 = load i32* %tag, align 4
  %860 = icmp eq i32 %859, 4120
  br i1 %860, label %864, label %861

; <label>:861                                     ; preds = %858
  %862 = load i32* %tag, align 4
  %863 = icmp eq i32 %862, 541065472
  br i1 %863, label %864, label %870

; <label>:864                                     ; preds = %861, %858
  %865 = call zeroext i16 @get2()
  %866 = zext i16 %865 to i32
  %867 = sitofp i32 %866 to double
  %868 = fdiv double %867, 2.560000e+02
  %869 = fptrunc double %868 to float
  store float %869, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %870

; <label>:870                                     ; preds = %864, %861
  %871 = load i32* %tag, align 4
  %872 = icmp eq i32 %871, 8209
  br i1 %872, label %873, label %888

; <label>:873                                     ; preds = %870
  %874 = load i32* %len, align 4
  %875 = icmp eq i32 %874, 2
  br i1 %875, label %876, label %888

; <label>:876                                     ; preds = %873
  br label %877

; <label>:877                                     ; preds = %876, %793, %332
  %serial.3 = phi i32 [ %serial.0, %332 ], [ %serial.2, %793 ], [ %serial.2, %876 ]
  %ver97.3 = phi i32 [ %ver97.0, %332 ], [ %ver97.2, %793 ], [ %ver97.2, %876 ]
  store i16 19789, i16* @order, align 2
  %878 = call zeroext i16 @get2()
  %879 = zext i16 %878 to i32
  %880 = sitofp i32 %879 to double
  %881 = fdiv double %880, 2.560000e+02
  %882 = fptrunc double %881 to float
  store float %882, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %883 = call zeroext i16 @get2()
  %884 = zext i16 %883 to i32
  %885 = sitofp i32 %884 to double
  %886 = fdiv double %885, 2.560000e+02
  %887 = fptrunc double %886 to float
  store float %887, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %888

; <label>:888                                     ; preds = %877, %873, %870
  %serial.4 = phi i32 [ %serial.3, %877 ], [ %serial.2, %873 ], [ %serial.2, %870 ]
  %ver97.4 = phi i32 [ %ver97.3, %877 ], [ %ver97.2, %873 ], [ %ver97.2, %870 ]
  %889 = load i32* %tag, align 4
  %890 = or i32 %889, 112
  %891 = icmp eq i32 %890, 8304
  br i1 %891, label %892, label %901

; <label>:892                                     ; preds = %888
  %893 = load i32* %type, align 4
  %894 = icmp eq i32 %893, 4
  br i1 %894, label %895, label %901

; <label>:895                                     ; preds = %892
  %896 = load %struct._IO_FILE** @ifp, align 8
  %897 = call i32 @get4()
  %898 = add i32 %897, %.1
  %899 = zext i32 %898 to i64
  %900 = call i32 @fseek(%struct._IO_FILE* %896, i64 %899, i32 0)
  br label %901

; <label>:901                                     ; preds = %895, %892, %888
  %902 = load i32* %tag, align 4
  %903 = icmp eq i32 %902, 8208
  br i1 %903, label %904, label %908

; <label>:904                                     ; preds = %901
  %905 = load i32* %type, align 4
  %906 = icmp ne i32 %905, 7
  br i1 %906, label %907, label %908

; <label>:907                                     ; preds = %904
  store void (...)* bitcast (void ()* @olympus_e410_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %908

; <label>:908                                     ; preds = %907, %904, %901
  %909 = load i32* %tag, align 4
  %910 = icmp eq i32 %909, 8224
  br i1 %910, label %911, label %912

; <label>:911                                     ; preds = %908
  call void @parse_thumb_note(i32 %.1, i32 257, i32 258)
  br label %912

; <label>:912                                     ; preds = %911, %908
  %913 = load i32* %tag, align 4
  %914 = icmp eq i32 %913, 8256
  br i1 %914, label %915, label %916

; <label>:915                                     ; preds = %912
  call void @parse_makernote(i32 %.1, i32 8256)
  br label %916

; <label>:916                                     ; preds = %915, %912
  %917 = load i32* %tag, align 4
  %918 = icmp eq i32 %917, 45096
  br i1 %918, label %919, label %924

; <label>:919                                     ; preds = %916
  %920 = load %struct._IO_FILE** @ifp, align 8
  %921 = call i32 @get4()
  %922 = zext i32 %921 to i64
  %923 = call i32 @fseek(%struct._IO_FILE* %920, i64 %922, i32 0)
  call void @parse_thumb_note(i32 %.1, i32 136, i32 137)
  br label %924

; <label>:924                                     ; preds = %919, %916
  %925 = load i32* %tag, align 4
  %926 = icmp eq i32 %925, 16385
  br i1 %926, label %927, label %975

; <label>:927                                     ; preds = %924
  %928 = load i32* %len, align 4
  %929 = icmp ugt i32 %928, 500
  br i1 %929, label %930, label %975

; <label>:930                                     ; preds = %927
  %931 = load i32* %len, align 4
  %932 = icmp eq i32 %931, 582
  br i1 %932, label %933, label %934

; <label>:933                                     ; preds = %930
  br label %944

; <label>:934                                     ; preds = %930
  %935 = load i32* %len, align 4
  %936 = icmp eq i32 %935, 653
  br i1 %936, label %937, label %938

; <label>:937                                     ; preds = %934
  br label %942

; <label>:938                                     ; preds = %934
  %939 = load i32* %len, align 4
  %940 = icmp eq i32 %939, 5120
  %941 = select i1 %940, i32 142, i32 126
  br label %942

; <label>:942                                     ; preds = %938, %937
  %943 = phi i32 [ 68, %937 ], [ %941, %938 ]
  br label %944

; <label>:944                                     ; preds = %942, %933
  %945 = phi i32 [ 50, %933 ], [ %943, %942 ]
  %946 = load %struct._IO_FILE** @ifp, align 8
  %947 = zext i32 %945 to i64
  %948 = call i32 @fseek(%struct._IO_FILE* %946, i64 %947, i32 1)
  br label %949

; <label>:949                                     ; preds = %944, %685, %527
  %serial.5 = phi i32 [ %serial.4, %944 ], [ %serial.2, %685 ], [ %serial.2, %527 ]
  %ver97.5 = phi i32 [ %ver97.4, %944 ], [ %ver97.2, %685 ], [ %ver97.1, %527 ]
  br label %950

; <label>:950                                     ; preds = %959, %949
  %c.7 = phi i32 [ 0, %949 ], [ %960, %959 ]
  %951 = icmp ult i32 %c.7, 4
  br i1 %951, label %952, label %961

; <label>:952                                     ; preds = %950
  %953 = call zeroext i16 @get2()
  %954 = uitofp i16 %953 to float
  %955 = lshr i32 %c.7, 1
  %956 = xor i32 %c.7, %955
  %957 = zext i32 %956 to i64
  %958 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %957
  store float %954, float* %958, align 4
  br label %959

; <label>:959                                     ; preds = %952
  %960 = add i32 %c.7, 1
  br label %950

; <label>:961                                     ; preds = %950
  %962 = load %struct._IO_FILE** @ifp, align 8
  %963 = call i32 @fseek(%struct._IO_FILE* %962, i64 22, i32 1)
  br label %964

; <label>:964                                     ; preds = %972, %961
  %c.8 = phi i32 [ 0, %961 ], [ %973, %972 ]
  %965 = icmp ult i32 %c.8, 4
  br i1 %965, label %966, label %974

; <label>:966                                     ; preds = %964
  %967 = call zeroext i16 @get2()
  %968 = lshr i32 %c.8, 1
  %969 = xor i32 %c.8, %968
  %970 = zext i32 %969 to i64
  %971 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %970
  store i16 %967, i16* %971, align 2
  br label %972

; <label>:972                                     ; preds = %966
  %973 = add i32 %c.8, 1
  br label %964

; <label>:974                                     ; preds = %964
  br label %975

; <label>:975                                     ; preds = %974, %927, %924
  %serial.6 = phi i32 [ %serial.5, %974 ], [ %serial.4, %927 ], [ %serial.4, %924 ]
  %ver97.6 = phi i32 [ %ver97.5, %974 ], [ %ver97.4, %927 ], [ %ver97.4, %924 ]
  br label %976

; <label>:976                                     ; preds = %975, %791
  %serial.7 = phi i32 [ %serial.6, %975 ], [ %serial.2, %791 ]
  %ver97.7 = phi i32 [ %ver97.6, %975 ], [ %ver97.2, %791 ]
  %977 = load %struct._IO_FILE** @ifp, align 8
  %978 = load i32* %save, align 4
  %979 = zext i32 %978 to i64
  %980 = call i32 @fseek(%struct._IO_FILE* %977, i64 %979, i32 0)
  br label %183

; <label>:981                                     ; preds = %183
  br label %982

; <label>:982                                     ; preds = %981, %105, %92
  store i16 %2, i16* @order, align 2
  br label %983

; <label>:983                                     ; preds = %982, %181, %21
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define i32 @parse_tiff_ifd(i32 %base) #0 {
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %software = alloca [64 x i8], align 16
  %cfa_pat = alloca [16 x i8], align 16
  %cfa_pc = alloca [4 x i8], align 1
  %tab = alloca [256 x i8], align 16
  %cc = alloca [4 x [4 x double]], align 16
  %cm = alloca [4 x [3 x double]], align 16
  %cam_xyz = alloca [4 x [3 x double]], align 16
  %ab = alloca [4 x double], align 16
  %asn = alloca [4 x double], align 16
  %xyz = alloca [3 x double], align 16
  %sony_curve = alloca [6 x i32], align 16
  %jh = alloca %struct.jhead, align 8
  %1 = bitcast [4 x i8]* %cfa_pc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([4 x i8]* @parse_tiff_ifd.cfa_pc, i32 0, i32 0), i64 4, i32 1, i1 false)
  %2 = bitcast [4 x double]* %ab to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([4 x double]* @parse_tiff_ifd.ab to i8*), i64 32, i32 16, i1 false)
  %3 = bitcast [4 x double]* %asn to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 32, i32 16, i1 false)
  %4 = bitcast [3 x double]* %xyz to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast ([3 x double]* @parse_tiff_ifd.xyz to i8*), i64 24, i32 16, i1 false)
  %5 = bitcast [6 x i32]* %sony_curve to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* bitcast ([6 x i32]* @parse_tiff_ifd.sony_curve to i8*), i64 24, i32 16, i1 false)
  %6 = load i32* @tiff_nifds, align 4
  %7 = zext i32 %6 to i64
  %8 = icmp uge i64 %7, 10
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %0
  br label %1144

; <label>:10                                      ; preds = %0
  %11 = load i32* @tiff_nifds, align 4
  %12 = add i32 %11, 1
  store i32 %12, i32* @tiff_nifds, align 4
  br label %13

; <label>:13                                      ; preds = %29, %10
  %j.0 = phi i32 [ 0, %10 ], [ %30, %29 ]
  %14 = icmp slt i32 %j.0, 4
  br i1 %14, label %15, label %31

; <label>:15                                      ; preds = %13
  br label %16

; <label>:16                                      ; preds = %26, %15
  %i.0 = phi i32 [ 0, %15 ], [ %27, %26 ]
  %17 = icmp slt i32 %i.0, 4
  br i1 %17, label %18, label %28

; <label>:18                                      ; preds = %16
  %19 = icmp eq i32 %i.0, %j.0
  %20 = zext i1 %19 to i32
  %21 = sitofp i32 %20 to double
  %22 = sext i32 %i.0 to i64
  %23 = sext i32 %j.0 to i64
  %24 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %23
  %25 = getelementptr inbounds [4 x double]* %24, i32 0, i64 %22
  store double %21, double* %25, align 8
  br label %26

; <label>:26                                      ; preds = %18
  %27 = add nsw i32 %i.0, 1
  br label %16

; <label>:28                                      ; preds = %16
  br label %29

; <label>:29                                      ; preds = %28
  %30 = add nsw i32 %j.0, 1
  br label %13

; <label>:31                                      ; preds = %13
  %32 = call zeroext i16 @get2()
  %33 = zext i16 %32 to i32
  %34 = icmp ugt i32 %33, 512
  br i1 %34, label %35, label %36

; <label>:35                                      ; preds = %31
  br label %1144

; <label>:36                                      ; preds = %31
  br label %37

; <label>:37                                      ; preds = %994, %36
  %sony_offset.0 = phi i32 [ 0, %36 ], [ %sony_offset.1, %994 ]
  %sony_length.0 = phi i32 [ 0, %36 ], [ %sony_length.1, %994 ]
  %ima_len.0 = phi i32 [ 0, %36 ], [ %ima_len.1, %994 ]
  %use_cm.0 = phi i32 [ 0, %36 ], [ %use_cm.1, %994 ]
  %ifd.0 = phi i32 [ %11, %36 ], [ %ifd.1, %994 ]
  %plen.0 = phi i32 [ 16, %36 ], [ %plen.3, %994 ]
  %entries.0 = phi i32 [ %33, %36 ], [ %38, %994 ]
  %sony_key.0 = phi i32 [ 0, %36 ], [ %sony_key.1, %994 ]
  %38 = add i32 %entries.0, -1
  %39 = icmp ne i32 %entries.0, 0
  br i1 %39, label %40, label %999

; <label>:40                                      ; preds = %37
  call void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save)
  %41 = load i32* %tag, align 4
  switch i32 %41, label %994 [
    i32 17, label %42
    i32 18, label %42
    i32 23, label %60
    i32 36, label %67
    i32 37, label %67
    i32 38, label %67
    i32 39, label %74
    i32 46, label %94
    i32 2, label %111
    i32 256, label %111
    i32 3, label %117
    i32 257, label %117
    i32 258, label %123
    i32 259, label %134
    i32 262, label %140
    i32 270, label %146
    i32 271, label %149
    i32 272, label %152
    i32 280, label %155
    i32 273, label %160
    i32 513, label %160
    i32 274, label %212
    i32 277, label %224
    i32 279, label %231
    i32 514, label %231
    i32 305, label %236
    i32 11, label %236
    i32 306, label %265
    i32 315, label %266
    i32 322, label %269
    i32 323, label %272
    i32 324, label %275
    i32 330, label %294
    i32 400, label %331
    i32 28688, label %333
    i32 29184, label %377
    i32 29185, label %379
    i32 29217, label %381
    i32 29264, label %383
    i32 29443, label %387
    i32 29459, label %401
    i32 33405, label %414
    i32 33422, label %417
    i32 64777, label %417
    i32 33424, label %457
    i32 33434, label %463
    i32 33437, label %467
    i32 34306, label %471
    i32 34307, label %486
    i32 34310, label %545
    i32 34303, label %549
    i32 34665, label %551
    i32 34853, label %557
    i32 34675, label %563
    i32 50831, label %563
    i32 37122, label %567
    i32 37386, label %569
    i32 37393, label %573
    i32 37400, label %576
    i32 46275, label %598
    i32 46279, label %603
    i32 50454, label %708
    i32 50455, label %708
    i32 50458, label %740
    i32 50459, label %746
    i32 50706, label %762
    i32 50710, label %779
    i32 50711, label %822
    i32 291, label %828
    i32 50712, label %828
    i32 50714, label %830
    i32 50715, label %830
    i32 50716, label %830
    i32 50717, label %849
    i32 50718, label %852
    i32 50721, label %859
    i32 50722, label %859
    i32 50723, label %879
    i32 50724, label %879
    i32 50727, label %900
    i32 50728, label %912
    i32 50729, label %924
    i32 50740, label %952
    i32 50752, label %963
    i32 50829, label %964
    i32 64772, label %983
  ]

; <label>:42                                      ; preds = %40, %40
  %43 = load i32* %type, align 4
  %44 = icmp eq i32 %43, 3
  br i1 %44, label %45, label %59

; <label>:45                                      ; preds = %42
  %46 = load i32* %len, align 4
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %59

; <label>:48                                      ; preds = %45
  %49 = call zeroext i16 @get2()
  %50 = zext i16 %49 to i32
  %51 = sitofp i32 %50 to double
  %52 = fdiv double %51, 2.560000e+02
  %53 = fptrunc double %52 to float
  %54 = load i32* %tag, align 4
  %55 = sub i32 %54, 17
  %56 = mul i32 %55, 2
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %57
  store float %53, float* %58, align 4
  br label %59

; <label>:59                                      ; preds = %48, %45, %42
  br label %994

; <label>:60                                      ; preds = %40
  %61 = load i32* %type, align 4
  %62 = icmp eq i32 %61, 3
  br i1 %62, label %63, label %66

; <label>:63                                      ; preds = %60
  %64 = call zeroext i16 @get2()
  %65 = uitofp i16 %64 to float
  store float %65, float* @iso_speed, align 4
  br label %66

; <label>:66                                      ; preds = %63, %60
  br label %994

; <label>:67                                      ; preds = %40, %40, %40
  %68 = call zeroext i16 @get2()
  %69 = uitofp i16 %68 to float
  %70 = load i32* %tag, align 4
  %71 = sub i32 %70, 36
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %72
  store float %69, float* %73, align 4
  br label %994

; <label>:74                                      ; preds = %40
  %75 = load i32* %len, align 4
  %76 = icmp ult i32 %75, 50
  br i1 %76, label %80, label %77

; <label>:77                                      ; preds = %74
  %78 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %79 = fcmp une float %78, 0.000000e+00
  br i1 %79, label %80, label %81

; <label>:80                                      ; preds = %77, %74
  br label %994

; <label>:81                                      ; preds = %77
  %82 = load %struct._IO_FILE** @ifp, align 8
  %83 = call i32 @fseek(%struct._IO_FILE* %82, i64 12, i32 1)
  br label %84

; <label>:84                                      ; preds = %91, %81
  %c.0 = phi i32 [ 0, %81 ], [ %92, %91 ]
  %85 = icmp slt i32 %c.0, 3
  br i1 %85, label %86, label %93

; <label>:86                                      ; preds = %84
  %87 = call zeroext i16 @get2()
  %88 = uitofp i16 %87 to float
  %89 = sext i32 %c.0 to i64
  %90 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %89
  store float %88, float* %90, align 4
  br label %91

; <label>:91                                      ; preds = %86
  %92 = add nsw i32 %c.0, 1
  br label %84

; <label>:93                                      ; preds = %84
  br label %994

; <label>:94                                      ; preds = %40
  %95 = load i32* %type, align 4
  %96 = icmp ne i32 %95, 7
  br i1 %96, label %105, label %97

; <label>:97                                      ; preds = %94
  %98 = load %struct._IO_FILE** @ifp, align 8
  %99 = call i32 @getc_unlocked(%struct._IO_FILE* %98)
  %100 = icmp ne i32 %99, 255
  br i1 %100, label %105, label %101

; <label>:101                                     ; preds = %97
  %102 = load %struct._IO_FILE** @ifp, align 8
  %103 = call i32 @getc_unlocked(%struct._IO_FILE* %102)
  %104 = icmp ne i32 %103, 216
  br i1 %104, label %105, label %106

; <label>:105                                     ; preds = %101, %97, %94
  br label %994

; <label>:106                                     ; preds = %101
  %107 = load %struct._IO_FILE** @ifp, align 8
  %108 = call i64 @ftell(%struct._IO_FILE* %107)
  %109 = sub nsw i64 %108, 2
  store i64 %109, i64* @thumb_offset, align 8
  %110 = load i32* %len, align 4
  store i32 %110, i32* @thumb_length, align 4
  br label %994

; <label>:111                                     ; preds = %40, %40
  %112 = load i32* %type, align 4
  %113 = call i32 @getint(i32 %112)
  %114 = sext i32 %ifd.0 to i64
  %115 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %114
  %116 = getelementptr inbounds %struct.anon.2* %115, i32 0, i32 0
  store i32 %113, i32* %116, align 4
  br label %994

; <label>:117                                     ; preds = %40, %40
  %118 = load i32* %type, align 4
  %119 = call i32 @getint(i32 %118)
  %120 = sext i32 %ifd.0 to i64
  %121 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %120
  %122 = getelementptr inbounds %struct.anon.2* %121, i32 0, i32 1
  store i32 %119, i32* %122, align 4
  br label %994

; <label>:123                                     ; preds = %40
  %124 = load i32* %len, align 4
  %125 = and i32 %124, 7
  %126 = sext i32 %ifd.0 to i64
  %127 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %126
  %128 = getelementptr inbounds %struct.anon.2* %127, i32 0, i32 7
  store i32 %125, i32* %128, align 4
  %129 = call zeroext i16 @get2()
  %130 = zext i16 %129 to i32
  %131 = sext i32 %ifd.0 to i64
  %132 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %131
  %133 = getelementptr inbounds %struct.anon.2* %132, i32 0, i32 2
  store i32 %130, i32* %133, align 4
  br label %994

; <label>:134                                     ; preds = %40
  %135 = call zeroext i16 @get2()
  %136 = zext i16 %135 to i32
  %137 = sext i32 %ifd.0 to i64
  %138 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %137
  %139 = getelementptr inbounds %struct.anon.2* %138, i32 0, i32 3
  store i32 %136, i32* %139, align 4
  br label %994

; <label>:140                                     ; preds = %40
  %141 = call zeroext i16 @get2()
  %142 = zext i16 %141 to i32
  %143 = sext i32 %ifd.0 to i64
  %144 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %143
  %145 = getelementptr inbounds %struct.anon.2* %144, i32 0, i32 4
  store i32 %142, i32* %145, align 4
  br label %994

; <label>:146                                     ; preds = %40
  %147 = load %struct._IO_FILE** @ifp, align 8
  %148 = call i64 @fread(i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i32 0), i64 512, i64 1, %struct._IO_FILE* %147)
  br label %994

; <label>:149                                     ; preds = %40
  %150 = load %struct._IO_FILE** @ifp, align 8
  %151 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i32 64, %struct._IO_FILE* %150)
  br label %994

; <label>:152                                     ; preds = %40
  %153 = load %struct._IO_FILE** @ifp, align 8
  %154 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i32 64, %struct._IO_FILE* %153)
  br label %994

; <label>:155                                     ; preds = %40
  %156 = load i32* %type, align 4
  %157 = icmp ne i32 %156, 4
  br i1 %157, label %158, label %159

; <label>:158                                     ; preds = %155
  br label %994

; <label>:159                                     ; preds = %155
  store void (...)* bitcast (void ()* @panasonic_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 8200, i32* @load_flags, align 4
  br label %160

; <label>:160                                     ; preds = %159, %40, %40
  %161 = call i32 @get4()
  %162 = add i32 %161, %base
  %163 = sext i32 %ifd.0 to i64
  %164 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %163
  %165 = getelementptr inbounds %struct.anon.2* %164, i32 0, i32 5
  store i32 %162, i32* %165, align 4
  %166 = sext i32 %ifd.0 to i64
  %167 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %166
  %168 = getelementptr inbounds %struct.anon.2* %167, i32 0, i32 2
  %169 = load i32* %168, align 4
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %211, label %171

; <label>:171                                     ; preds = %160
  %172 = load %struct._IO_FILE** @ifp, align 8
  %173 = sext i32 %ifd.0 to i64
  %174 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %173
  %175 = getelementptr inbounds %struct.anon.2* %174, i32 0, i32 5
  %176 = load i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = call i32 @fseek(%struct._IO_FILE* %172, i64 %177, i32 0)
  %179 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %210

; <label>:181                                     ; preds = %171
  %182 = sext i32 %ifd.0 to i64
  %183 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %182
  %184 = getelementptr inbounds %struct.anon.2* %183, i32 0, i32 3
  store i32 6, i32* %184, align 4
  %185 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %186 = load i32* %185, align 4
  %187 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %188 = load i32* %187, align 4
  %189 = icmp eq i32 %188, 2
  %190 = zext i1 %189 to i32
  %191 = shl i32 %186, %190
  %192 = sext i32 %ifd.0 to i64
  %193 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %192
  %194 = getelementptr inbounds %struct.anon.2* %193, i32 0, i32 0
  store i32 %191, i32* %194, align 4
  %195 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %196 = load i32* %195, align 4
  %197 = sext i32 %ifd.0 to i64
  %198 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %197
  %199 = getelementptr inbounds %struct.anon.2* %198, i32 0, i32 1
  store i32 %196, i32* %199, align 4
  %200 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %201 = load i32* %200, align 4
  %202 = sext i32 %ifd.0 to i64
  %203 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %202
  %204 = getelementptr inbounds %struct.anon.2* %203, i32 0, i32 2
  store i32 %201, i32* %204, align 4
  %205 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %206 = load i32* %205, align 4
  %207 = sext i32 %ifd.0 to i64
  %208 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %207
  %209 = getelementptr inbounds %struct.anon.2* %208, i32 0, i32 7
  store i32 %206, i32* %209, align 4
  br label %210

; <label>:210                                     ; preds = %181, %171
  br label %211

; <label>:211                                     ; preds = %210, %160
  br label %994

; <label>:212                                     ; preds = %40
  %213 = call zeroext i16 @get2()
  %214 = zext i16 %213 to i32
  %215 = and i32 %214, 7
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [9 x i8]* @.str143, i32 0, i64 %216
  %218 = load i8* %217, align 1
  %219 = sext i8 %218 to i32
  %220 = sub nsw i32 %219, 48
  %221 = sext i32 %ifd.0 to i64
  %222 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %221
  %223 = getelementptr inbounds %struct.anon.2* %222, i32 0, i32 6
  store i32 %220, i32* %223, align 4
  br label %994

; <label>:224                                     ; preds = %40
  %225 = load i32* %type, align 4
  %226 = call i32 @getint(i32 %225)
  %227 = and i32 %226, 7
  %228 = sext i32 %ifd.0 to i64
  %229 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %228
  %230 = getelementptr inbounds %struct.anon.2* %229, i32 0, i32 7
  store i32 %227, i32* %230, align 4
  br label %994

; <label>:231                                     ; preds = %40, %40
  %232 = call i32 @get4()
  %233 = sext i32 %ifd.0 to i64
  %234 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %233
  %235 = getelementptr inbounds %struct.anon.2* %234, i32 0, i32 8
  store i32 %232, i32* %235, align 4
  br label %994

; <label>:236                                     ; preds = %40, %40
  %237 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %238 = load %struct._IO_FILE** @ifp, align 8
  %239 = call i8* @fgets(i8* %237, i32 64, %struct._IO_FILE* %238)
  %240 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %241 = call i32 @strncmp(i8* %240, i8* getelementptr inbounds ([6 x i8]* @.str144, i32 0, i32 0), i64 5) #10
  %242 = icmp ne i32 %241, 0
  br i1 %242, label %243, label %263

; <label>:243                                     ; preds = %236
  %244 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %245 = call i32 @strncmp(i8* %244, i8* getelementptr inbounds ([6 x i8]* @.str145, i32 0, i32 0), i64 5) #10
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %247, label %263

; <label>:247                                     ; preds = %243
  %248 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %249 = call i32 @strncmp(i8* %248, i8* getelementptr inbounds ([6 x i8]* @.str146, i32 0, i32 0), i64 5) #10
  %250 = icmp ne i32 %249, 0
  br i1 %250, label %251, label %263

; <label>:251                                     ; preds = %247
  %252 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %253 = call i32 @strncmp(i8* %252, i8* getelementptr inbounds ([7 x i8]* @.str147, i32 0, i32 0), i64 6) #10
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %255, label %263

; <label>:255                                     ; preds = %251
  %256 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %257 = call i32 @strncmp(i8* %256, i8* getelementptr inbounds ([11 x i8]* @.str148, i32 0, i32 0), i64 10) #10
  %258 = icmp ne i32 %257, 0
  br i1 %258, label %259, label %263

; <label>:259                                     ; preds = %255
  %260 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %261 = call i32 @strcmp(i8* %260, i8* getelementptr inbounds ([27 x i8]* @.str149, i32 0, i32 0)) #10
  %262 = icmp ne i32 %261, 0
  br i1 %262, label %264, label %263

; <label>:263                                     ; preds = %259, %255, %251, %247, %243, %236
  store i32 0, i32* @is_raw, align 4
  br label %264

; <label>:264                                     ; preds = %263, %259
  br label %994

; <label>:265                                     ; preds = %40
  call void @get_timestamp(i32 0)
  br label %994

; <label>:266                                     ; preds = %40
  %267 = load %struct._IO_FILE** @ifp, align 8
  %268 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %267)
  br label %994

; <label>:269                                     ; preds = %40
  %270 = load i32* %type, align 4
  %271 = call i32 @getint(i32 %270)
  store i32 %271, i32* @tile_width, align 4
  br label %994

; <label>:272                                     ; preds = %40
  %273 = load i32* %type, align 4
  %274 = call i32 @getint(i32 %273)
  store i32 %274, i32* @tile_length, align 4
  br label %994

; <label>:275                                     ; preds = %40
  %276 = load i32* %len, align 4
  %277 = icmp ugt i32 %276, 1
  br i1 %277, label %278, label %281

; <label>:278                                     ; preds = %275
  %279 = load %struct._IO_FILE** @ifp, align 8
  %280 = call i64 @ftell(%struct._IO_FILE* %279)
  br label %284

; <label>:281                                     ; preds = %275
  %282 = call i32 @get4()
  %283 = zext i32 %282 to i64
  br label %284

; <label>:284                                     ; preds = %281, %278
  %285 = phi i64 [ %280, %278 ], [ %283, %281 ]
  %286 = trunc i64 %285 to i32
  %287 = sext i32 %ifd.0 to i64
  %288 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %287
  %289 = getelementptr inbounds %struct.anon.2* %288, i32 0, i32 5
  store i32 %286, i32* %289, align 4
  %290 = load i32* %len, align 4
  %291 = icmp eq i32 %290, 4
  br i1 %291, label %292, label %293

; <label>:292                                     ; preds = %284
  store void (...)* bitcast (void ()* @sinar_4shot_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 5, i32* @is_raw, align 4
  br label %293

; <label>:293                                     ; preds = %292, %284
  br label %994

; <label>:294                                     ; preds = %40
  %295 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str150, i32 0, i32 0)) #10
  %296 = icmp ne i32 %295, 0
  br i1 %296, label %308, label %297

; <label>:297                                     ; preds = %294
  %298 = sext i32 %ifd.0 to i64
  %299 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %298
  %300 = getelementptr inbounds %struct.anon.2* %299, i32 0, i32 0
  %301 = load i32* %300, align 4
  %302 = icmp eq i32 %301, 3872
  br i1 %302, label %303, label %308

; <label>:303                                     ; preds = %297
  store void (...)* bitcast (void ()* @sony_arw_load_raw to void (...)*), void (...)** @load_raw, align 8
  %304 = call i32 @get4()
  %305 = add i32 %304, %base
  %306 = zext i32 %305 to i64
  store i64 %306, i64* @data_offset, align 8
  %307 = add nsw i32 %ifd.0, 1
  br label %994

; <label>:308                                     ; preds = %297, %294
  br label %309

; <label>:309                                     ; preds = %325, %308
  %310 = load i32* %len, align 4
  %311 = add i32 %310, -1
  store i32 %311, i32* %len, align 4
  %312 = icmp ne i32 %310, 0
  br i1 %312, label %313, label %330

; <label>:313                                     ; preds = %309
  %314 = load %struct._IO_FILE** @ifp, align 8
  %315 = call i64 @ftell(%struct._IO_FILE* %314)
  %316 = trunc i64 %315 to i32
  %317 = load %struct._IO_FILE** @ifp, align 8
  %318 = call i32 @get4()
  %319 = add i32 %318, %base
  %320 = zext i32 %319 to i64
  %321 = call i32 @fseek(%struct._IO_FILE* %317, i64 %320, i32 0)
  %322 = call i32 @parse_tiff_ifd(i32 %base)
  %323 = icmp ne i32 %322, 0
  br i1 %323, label %324, label %325

; <label>:324                                     ; preds = %313
  br label %330

; <label>:325                                     ; preds = %313
  %326 = load %struct._IO_FILE** @ifp, align 8
  %327 = add nsw i32 %316, 4
  %328 = sext i32 %327 to i64
  %329 = call i32 @fseek(%struct._IO_FILE* %326, i64 %328, i32 0)
  br label %309

; <label>:330                                     ; preds = %324, %309
  br label %994

; <label>:331                                     ; preds = %40
  %332 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str151, i32 0, i32 0)) #4
  store i32 4095, i32* @maximum, align 4
  br label %994

; <label>:333                                     ; preds = %40
  br label %334

; <label>:334                                     ; preds = %344, %333
  %c.1 = phi i32 [ 0, %333 ], [ %345, %344 ]
  %335 = icmp slt i32 %c.1, 4
  br i1 %335, label %336, label %346

; <label>:336                                     ; preds = %334
  %337 = call zeroext i16 @get2()
  %338 = zext i16 %337 to i32
  %339 = ashr i32 %338, 2
  %340 = and i32 %339, 4095
  %341 = add nsw i32 %c.1, 1
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds [6 x i32]* %sony_curve, i32 0, i64 %342
  store i32 %340, i32* %343, align 4
  br label %344

; <label>:344                                     ; preds = %336
  %345 = add nsw i32 %c.1, 1
  br label %334

; <label>:346                                     ; preds = %334
  br label %347

; <label>:347                                     ; preds = %374, %346
  %i.1 = phi i32 [ 0, %346 ], [ %375, %374 ]
  %348 = icmp slt i32 %i.1, 5
  br i1 %348, label %349, label %376

; <label>:349                                     ; preds = %347
  %350 = sext i32 %i.1 to i64
  %351 = getelementptr inbounds [6 x i32]* %sony_curve, i32 0, i64 %350
  %352 = load i32* %351, align 4
  %353 = add i32 %352, 1
  br label %354

; <label>:354                                     ; preds = %371, %349
  %j.1 = phi i32 [ %353, %349 ], [ %372, %371 ]
  %355 = add nsw i32 %i.1, 1
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds [6 x i32]* %sony_curve, i32 0, i64 %356
  %358 = load i32* %357, align 4
  %359 = icmp ule i32 %j.1, %358
  br i1 %359, label %360, label %373

; <label>:360                                     ; preds = %354
  %361 = sub nsw i32 %j.1, 1
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %362
  %364 = load i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = shl i32 1, %i.1
  %367 = add nsw i32 %365, %366
  %368 = trunc i32 %367 to i16
  %369 = sext i32 %j.1 to i64
  %370 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %369
  store i16 %368, i16* %370, align 2
  br label %371

; <label>:371                                     ; preds = %360
  %372 = add nsw i32 %j.1, 1
  br label %354

; <label>:373                                     ; preds = %354
  br label %374

; <label>:374                                     ; preds = %373
  %375 = add nsw i32 %i.1, 1
  br label %347

; <label>:376                                     ; preds = %347
  br label %994

; <label>:377                                     ; preds = %40
  %378 = call i32 @get4()
  br label %994

; <label>:379                                     ; preds = %40
  %380 = call i32 @get4()
  br label %994

; <label>:381                                     ; preds = %40
  %382 = call i32 @get4()
  br label %994

; <label>:383                                     ; preds = %40
  %384 = load %struct._IO_FILE** @ifp, align 8
  %385 = call i64 @ftell(%struct._IO_FILE* %384)
  %386 = trunc i64 %385 to i32
  call void @parse_minolta(i32 %386)
  store i16 0, i16* @raw_width, align 2
  br label %994

; <label>:387                                     ; preds = %40
  br label %388

; <label>:388                                     ; preds = %398, %387
  %c.2 = phi i32 [ 0, %387 ], [ %399, %398 ]
  %389 = icmp slt i32 %c.2, 4
  br i1 %389, label %390, label %400

; <label>:390                                     ; preds = %388
  %391 = call zeroext i16 @get2()
  %392 = uitofp i16 %391 to float
  %393 = icmp slt i32 %c.2, 2
  %394 = zext i1 %393 to i32
  %395 = xor i32 %c.2, %394
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %396
  store float %392, float* %397, align 4
  br label %398

; <label>:398                                     ; preds = %390
  %399 = add nsw i32 %c.2, 1
  br label %388

; <label>:400                                     ; preds = %388
  br label %994

; <label>:401                                     ; preds = %40
  br label %402

; <label>:402                                     ; preds = %411, %401
  %c.3 = phi i32 [ 0, %401 ], [ %412, %411 ]
  %403 = icmp slt i32 %c.3, 4
  br i1 %403, label %404, label %413

; <label>:404                                     ; preds = %402
  %405 = call zeroext i16 @get2()
  %406 = uitofp i16 %405 to float
  %407 = ashr i32 %c.3, 1
  %408 = xor i32 %c.3, %407
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %409
  store float %406, float* %410, align 4
  br label %411

; <label>:411                                     ; preds = %404
  %412 = add nsw i32 %c.3, 1
  br label %402

; <label>:413                                     ; preds = %402
  br label %994

; <label>:414                                     ; preds = %40
  %415 = load %struct._IO_FILE** @ifp, align 8
  %416 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i32 64, %struct._IO_FILE* %415)
  br label %994

; <label>:417                                     ; preds = %40, %40
  %418 = load i32* %len, align 4
  %419 = icmp ugt i32 %418, 16
  br i1 %419, label %420, label %421

; <label>:420                                     ; preds = %417
  br label %421

; <label>:421                                     ; preds = %420, %417
  %plen.1 = phi i32 [ 16, %420 ], [ %418, %417 ]
  %422 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i32 0
  %423 = zext i32 %plen.1 to i64
  %424 = load %struct._IO_FILE** @ifp, align 8
  %425 = call i64 @fread(i8* %422, i64 1, i64 %423, %struct._IO_FILE* %424)
  store i32 0, i32* @colors, align 4
  br label %426

; <label>:426                                     ; preds = %446, %421
  %i.2 = phi i32 [ 0, %421 ], [ %447, %446 ]
  %cfa.0 = phi i32 [ 0, %421 ], [ %445, %446 ]
  %427 = icmp ult i32 %i.2, %plen.1
  br i1 %427, label %428, label %448

; <label>:428                                     ; preds = %426
  %429 = sext i32 %i.2 to i64
  %430 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i64 %429
  %431 = load i8* %430, align 1
  %432 = zext i8 %431 to i32
  %433 = shl i32 1, %432
  %434 = and i32 %cfa.0, %433
  %435 = icmp ne i32 %434, 0
  %436 = xor i1 %435, true
  %437 = zext i1 %436 to i32
  %438 = load i32* @colors, align 4
  %439 = add nsw i32 %438, %437
  store i32 %439, i32* @colors, align 4
  %440 = sext i32 %i.2 to i64
  %441 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i64 %440
  %442 = load i8* %441, align 1
  %443 = zext i8 %442 to i32
  %444 = shl i32 1, %443
  %445 = or i32 %cfa.0, %444
  br label %446

; <label>:446                                     ; preds = %428
  %447 = add nsw i32 %i.2, 1
  br label %426

; <label>:448                                     ; preds = %426
  %449 = icmp eq i32 %cfa.0, 56
  br i1 %449, label %450, label %452

; <label>:450                                     ; preds = %448
  %451 = bitcast [4 x i8]* %cfa_pc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %451, i8* getelementptr inbounds ([4 x i8]* @.str152, i32 0, i32 0), i64 3, i32 1, i1 false)
  br label %452

; <label>:452                                     ; preds = %450, %448
  %453 = icmp eq i32 %cfa.0, 58
  br i1 %453, label %454, label %456

; <label>:454                                     ; preds = %452
  %455 = bitcast [4 x i8]* %cfa_pc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %455, i8* getelementptr inbounds ([5 x i8]* @.str153, i32 0, i32 0), i64 4, i32 1, i1 false)
  br label %456

; <label>:456                                     ; preds = %454, %452
  br label %790

; <label>:457                                     ; preds = %40
  %458 = load %struct._IO_FILE** @ifp, align 8
  %459 = call i32 @get4()
  %460 = add i32 %459, %base
  %461 = zext i32 %460 to i64
  %462 = call i32 @fseek(%struct._IO_FILE* %458, i64 %461, i32 0)
  call void @parse_kodak_ifd(i32 %base)
  br label %994

; <label>:463                                     ; preds = %40
  %464 = load i32* %type, align 4
  %465 = call double @getreal(i32 %464)
  %466 = fptrunc double %465 to float
  store float %466, float* @shutter, align 4
  br label %994

; <label>:467                                     ; preds = %40
  %468 = load i32* %type, align 4
  %469 = call double @getreal(i32 %468)
  %470 = fptrunc double %469 to float
  store float %470, float* @aperture, align 4
  br label %994

; <label>:471                                     ; preds = %40
  br label %472

; <label>:472                                     ; preds = %483, %471
  %c.4 = phi i32 [ 0, %471 ], [ %484, %483 ]
  %473 = icmp slt i32 %c.4, 4
  br i1 %473, label %474, label %485

; <label>:474                                     ; preds = %472
  %475 = call zeroext i16 @get2()
  %476 = zext i16 %475 to i32
  %477 = sitofp i32 %476 to double
  %478 = fdiv double 4.096000e+03, %477
  %479 = fptrunc double %478 to float
  %480 = xor i32 %c.4, 1
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %481
  store float %479, float* %482, align 4
  br label %483

; <label>:483                                     ; preds = %474
  %484 = add nsw i32 %c.4, 1
  br label %472

; <label>:485                                     ; preds = %472
  br label %994

; <label>:486                                     ; preds = %40
  %487 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %488 = load %struct._IO_FILE** @ifp, align 8
  %489 = call i64 @fread(i8* %487, i64 1, i64 7, %struct._IO_FILE* %488)
  %490 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %491 = call i32 @strncmp(i8* %490, i8* getelementptr inbounds ([7 x i8]* @.str154, i32 0, i32 0), i64 6) #10
  %492 = icmp ne i32 %491, 0
  br i1 %492, label %493, label %494

; <label>:493                                     ; preds = %486
  br label %994

; <label>:494                                     ; preds = %486
  store i32 4, i32* @colors, align 4
  store i32 0, i32* @raw_color, align 4
  br label %495

; <label>:495                                     ; preds = %542, %494
  %i.3 = phi i32 [ 0, %494 ], [ %543, %542 ]
  %496 = icmp slt i32 %i.3, 3
  br i1 %496, label %497, label %544

; <label>:497                                     ; preds = %495
  br label %498

; <label>:498                                     ; preds = %508, %497
  %c.5 = phi i32 [ 0, %497 ], [ %509, %508 ]
  %499 = icmp slt i32 %c.5, 4
  br i1 %499, label %500, label %510

; <label>:500                                     ; preds = %498
  %501 = load %struct._IO_FILE** @ifp, align 8
  %502 = xor i32 %c.5, 1
  %503 = sext i32 %502 to i64
  %504 = sext i32 %i.3 to i64
  %505 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %504
  %506 = getelementptr inbounds [4 x float]* %505, i32 0, i64 %503
  %507 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %501, i8* getelementptr inbounds ([3 x i8]* @.str136, i32 0, i32 0), float* %506)
  br label %508

; <label>:508                                     ; preds = %500
  %509 = add nsw i32 %c.5, 1
  br label %498

; <label>:510                                     ; preds = %498
  %511 = load i32* @use_camera_wb, align 4
  %512 = icmp ne i32 %511, 0
  br i1 %512, label %514, label %513

; <label>:513                                     ; preds = %510
  br label %542

; <label>:514                                     ; preds = %510
  br label %515

; <label>:515                                     ; preds = %525, %514
  %num.0 = phi double [ 0.000000e+00, %514 ], [ %524, %525 ]
  %c.6 = phi i32 [ 0, %514 ], [ %526, %525 ]
  %516 = icmp slt i32 %c.6, 4
  br i1 %516, label %517, label %527

; <label>:517                                     ; preds = %515
  %518 = sext i32 %c.6 to i64
  %519 = sext i32 %i.3 to i64
  %520 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %519
  %521 = getelementptr inbounds [4 x float]* %520, i32 0, i64 %518
  %522 = load float* %521, align 4
  %523 = fpext float %522 to double
  %524 = fadd double %num.0, %523
  br label %525

; <label>:525                                     ; preds = %517
  %526 = add nsw i32 %c.6, 1
  br label %515

; <label>:527                                     ; preds = %515
  br label %528

; <label>:528                                     ; preds = %539, %527
  %c.7 = phi i32 [ 0, %527 ], [ %540, %539 ]
  %529 = icmp slt i32 %c.7, 4
  br i1 %529, label %530, label %541

; <label>:530                                     ; preds = %528
  %531 = sext i32 %c.7 to i64
  %532 = sext i32 %i.3 to i64
  %533 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %532
  %534 = getelementptr inbounds [4 x float]* %533, i32 0, i64 %531
  %535 = load float* %534, align 4
  %536 = fpext float %535 to double
  %537 = fdiv double %536, %num.0
  %538 = fptrunc double %537 to float
  store float %538, float* %534, align 4
  br label %539

; <label>:539                                     ; preds = %530
  %540 = add nsw i32 %c.7, 1
  br label %528

; <label>:541                                     ; preds = %528
  br label %542

; <label>:542                                     ; preds = %541, %513
  %543 = add nsw i32 %i.3, 1
  br label %495

; <label>:544                                     ; preds = %495
  br label %994

; <label>:545                                     ; preds = %40
  %546 = load %struct._IO_FILE** @ifp, align 8
  %547 = call i64 @ftell(%struct._IO_FILE* %546)
  %548 = trunc i64 %547 to i32
  call void @parse_mos(i32 %548)
  br label %549

; <label>:549                                     ; preds = %545, %40
  %550 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str155, i32 0, i32 0)) #4
  br label %994

; <label>:551                                     ; preds = %40
  %552 = load %struct._IO_FILE** @ifp, align 8
  %553 = call i32 @get4()
  %554 = add i32 %553, %base
  %555 = zext i32 %554 to i64
  %556 = call i32 @fseek(%struct._IO_FILE* %552, i64 %555, i32 0)
  call void @parse_exif(i32 %base)
  br label %994

; <label>:557                                     ; preds = %40
  %558 = load %struct._IO_FILE** @ifp, align 8
  %559 = call i32 @get4()
  %560 = add i32 %559, %base
  %561 = zext i32 %560 to i64
  %562 = call i32 @fseek(%struct._IO_FILE* %558, i64 %561, i32 0)
  call void @parse_gps(i32 %base)
  br label %994

; <label>:563                                     ; preds = %40, %40
  %564 = load %struct._IO_FILE** @ifp, align 8
  %565 = call i64 @ftell(%struct._IO_FILE* %564)
  store i64 %565, i64* @profile_offset, align 8
  %566 = load i32* %len, align 4
  store i32 %566, i32* @profile_length, align 4
  br label %994

; <label>:567                                     ; preds = %40
  %568 = call i32 @get4()
  store i32 %568, i32* @kodak_cbpp, align 4
  br label %994

; <label>:569                                     ; preds = %40
  %570 = load i32* %type, align 4
  %571 = call double @getreal(i32 %570)
  %572 = fptrunc double %571 to float
  store float %572, float* @focal_len, align 4
  br label %994

; <label>:573                                     ; preds = %40
  %574 = load i32* %type, align 4
  %575 = call i32 @getint(i32 %574)
  store i32 %575, i32* @shot_order, align 4
  br label %994

; <label>:576                                     ; preds = %40
  store i32 0, i32* @raw_color, align 4
  br label %577

; <label>:577                                     ; preds = %595, %576
  %i.4 = phi i32 [ 0, %576 ], [ %596, %595 ]
  %578 = icmp slt i32 %i.4, 3
  br i1 %578, label %579, label %597

; <label>:579                                     ; preds = %577
  %580 = load i32* %type, align 4
  %581 = call double @getreal(i32 %580)
  br label %582

; <label>:582                                     ; preds = %592, %579
  %c.8 = phi i32 [ 0, %579 ], [ %593, %592 ]
  %583 = icmp slt i32 %c.8, 3
  br i1 %583, label %584, label %594

; <label>:584                                     ; preds = %582
  %585 = load i32* %type, align 4
  %586 = call double @getreal(i32 %585)
  %587 = fptrunc double %586 to float
  %588 = sext i32 %c.8 to i64
  %589 = sext i32 %i.4 to i64
  %590 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %589
  %591 = getelementptr inbounds [4 x float]* %590, i32 0, i64 %588
  store float %587, float* %591, align 4
  br label %592

; <label>:592                                     ; preds = %584
  %593 = add nsw i32 %c.8, 1
  br label %582

; <label>:594                                     ; preds = %582
  br label %595

; <label>:595                                     ; preds = %594
  %596 = add nsw i32 %i.4, 1
  br label %577

; <label>:597                                     ; preds = %577
  br label %994

; <label>:598                                     ; preds = %40
  %599 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str156, i32 0, i32 0)) #4
  %600 = load %struct._IO_FILE** @ifp, align 8
  %601 = call i64 @ftell(%struct._IO_FILE* %600)
  store i64 %601, i64* @data_offset, align 8
  %602 = load i32* %len, align 4
  br label %994

; <label>:603                                     ; preds = %40
  %604 = icmp ne i32 %ima_len.0, 0
  br i1 %604, label %606, label %605

; <label>:605                                     ; preds = %603
  br label %994

; <label>:606                                     ; preds = %603
  %607 = load %struct._IO_FILE** @ifp, align 8
  %608 = call i32 @fseek(%struct._IO_FILE* %607, i64 78, i32 1)
  %609 = call i32 @get4()
  %610 = trunc i32 %609 to i16
  store i16 %610, i16* @raw_width, align 2
  %611 = call i32 @get4()
  %612 = trunc i32 %611 to i16
  store i16 %612, i16* @raw_height, align 2
  %613 = call i32 @get4()
  %614 = and i32 %613, 7
  %615 = trunc i32 %614 to i16
  store i16 %615, i16* @left_margin, align 2
  %616 = load i16* @raw_width, align 2
  %617 = zext i16 %616 to i32
  %618 = load i16* @left_margin, align 2
  %619 = zext i16 %618 to i32
  %620 = sub nsw i32 %617, %619
  %621 = call i32 @get4()
  %622 = and i32 %621, 7
  %623 = sub i32 %620, %622
  %624 = trunc i32 %623 to i16
  store i16 %624, i16* @width, align 2
  %625 = call i32 @get4()
  %626 = and i32 %625, 7
  %627 = trunc i32 %626 to i16
  store i16 %627, i16* @top_margin, align 2
  %628 = load i16* @raw_height, align 2
  %629 = zext i16 %628 to i32
  %630 = load i16* @top_margin, align 2
  %631 = zext i16 %630 to i32
  %632 = sub nsw i32 %629, %631
  %633 = call i32 @get4()
  %634 = and i32 %633, 7
  %635 = sub i32 %632, %634
  %636 = trunc i32 %635 to i16
  store i16 %636, i16* @height, align 2
  %637 = load i16* @raw_width, align 2
  %638 = zext i16 %637 to i32
  %639 = icmp eq i32 %638, 7262
  br i1 %639, label %640, label %641

; <label>:640                                     ; preds = %606
  store i16 5444, i16* @height, align 2
  store i16 7244, i16* @width, align 2
  store i16 7, i16* @left_margin, align 2
  br label %641

; <label>:641                                     ; preds = %640, %606
  %642 = load %struct._IO_FILE** @ifp, align 8
  %643 = call i32 @fseek(%struct._IO_FILE* %642, i64 52, i32 1)
  br label %644

; <label>:644                                     ; preds = %651, %641
  %c.9 = phi i32 [ 0, %641 ], [ %652, %651 ]
  %645 = icmp slt i32 %c.9, 3
  br i1 %645, label %646, label %653

; <label>:646                                     ; preds = %644
  %647 = call double @getreal(i32 11)
  %648 = fptrunc double %647 to float
  %649 = sext i32 %c.9 to i64
  %650 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %649
  store float %648, float* %650, align 4
  br label %651

; <label>:651                                     ; preds = %646
  %652 = add nsw i32 %c.9, 1
  br label %644

; <label>:653                                     ; preds = %644
  %654 = load %struct._IO_FILE** @ifp, align 8
  %655 = call i32 @fseek(%struct._IO_FILE* %654, i64 114, i32 1)
  %656 = call zeroext i16 @get2()
  %657 = zext i16 %656 to i32
  %658 = ashr i32 %657, 7
  %659 = mul nsw i32 %658, 90
  store i32 %659, i32* @flip, align 4
  %660 = load i16* @width, align 2
  %661 = zext i16 %660 to i32
  %662 = load i16* @height, align 2
  %663 = zext i16 %662 to i32
  %664 = mul nsw i32 %661, %663
  %665 = mul nsw i32 %664, 6
  %666 = icmp eq i32 %665, %ima_len.0
  br i1 %666, label %667, label %690

; <label>:667                                     ; preds = %653
  %668 = load i32* @flip, align 4
  %669 = srem i32 %668, 180
  %670 = icmp eq i32 %669, 90
  br i1 %670, label %671, label %689

; <label>:671                                     ; preds = %667
  %672 = load i16* @height, align 2
  %673 = zext i16 %672 to i32
  %674 = load i16* @width, align 2
  %675 = zext i16 %674 to i32
  %676 = xor i32 %675, %673
  %677 = trunc i32 %676 to i16
  store i16 %677, i16* @width, align 2
  %678 = load i16* @width, align 2
  %679 = zext i16 %678 to i32
  %680 = load i16* @height, align 2
  %681 = zext i16 %680 to i32
  %682 = xor i32 %681, %679
  %683 = trunc i32 %682 to i16
  store i16 %683, i16* @height, align 2
  %684 = zext i16 %683 to i32
  %685 = load i16* @width, align 2
  %686 = zext i16 %685 to i32
  %687 = xor i32 %686, %684
  %688 = trunc i32 %687 to i16
  store i16 %688, i16* @width, align 2
  br label %689

; <label>:689                                     ; preds = %671, %667
  store i32 0, i32* @flip, align 4
  store i32 0, i32* @filters, align 4
  br label %690

; <label>:690                                     ; preds = %689, %653
  %691 = load i16* @height, align 2
  %692 = zext i16 %691 to i32
  %693 = load i16* @width, align 2
  %694 = zext i16 %693 to i32
  %695 = mul nsw i32 %692, %694
  %696 = sdiv i32 %695, 1000000
  %697 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str157, i32 0, i32 0), i32 %696) #4
  store void (...)* bitcast (void ()* @imacon_full_load_raw to void (...)*), void (...)** @load_raw, align 8
  %698 = load i32* @filters, align 4
  %699 = icmp ne i32 %698, 0
  br i1 %699, label %700, label %707

; <label>:700                                     ; preds = %690
  %701 = load i16* @left_margin, align 2
  %702 = zext i16 %701 to i32
  %703 = and i32 %702, 1
  %704 = icmp ne i32 %703, 0
  br i1 %704, label %705, label %706

; <label>:705                                     ; preds = %700
  store i32 1633771873, i32* @filters, align 4
  br label %706

; <label>:706                                     ; preds = %705, %700
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %707

; <label>:707                                     ; preds = %706, %690
  store i32 65535, i32* @maximum, align 4
  br label %994

; <label>:708                                     ; preds = %40, %40
  %709 = load i32* %len, align 4
  %710 = zext i32 %709 to i64
  %711 = call noalias i8* @malloc(i64 %710) #4
  %712 = icmp ne i8* %711, null
  br i1 %712, label %714, label %713

; <label>:713                                     ; preds = %708
  br label %994

; <label>:714                                     ; preds = %708
  %715 = load i32* %len, align 4
  %716 = zext i32 %715 to i64
  %717 = load %struct._IO_FILE** @ifp, align 8
  %718 = call i64 @fread(i8* %711, i64 1, i64 %716, %struct._IO_FILE* %717)
  %719 = getelementptr inbounds i8* %711, i64 -1
  br label %720

; <label>:720                                     ; preds = %737, %714
  %cp.0 = phi i8* [ %719, %714 ], [ %738, %737 ]
  %721 = icmp ne i8* %cp.0, null
  br i1 %721, label %722, label %727

; <label>:722                                     ; preds = %720
  %723 = load i32* %len, align 4
  %724 = zext i32 %723 to i64
  %725 = getelementptr inbounds i8* %711, i64 %724
  %726 = icmp ult i8* %cp.0, %725
  br label %727

; <label>:727                                     ; preds = %722, %720
  %728 = phi i1 [ false, %720 ], [ %726, %722 ]
  br i1 %728, label %729, label %739

; <label>:729                                     ; preds = %727
  %730 = getelementptr inbounds i8* %cp.0, i32 1
  %731 = call i32 @strncmp(i8* %730, i8* getelementptr inbounds ([9 x i8]* @.str158, i32 0, i32 0), i64 8) #10
  %732 = icmp ne i32 %731, 0
  br i1 %732, label %736, label %733

; <label>:733                                     ; preds = %729
  %734 = getelementptr inbounds i8* %730, i64 8
  %735 = call i32 (i8*, i8*, ...)* @sscanf(i8* %734, i8* getelementptr inbounds ([9 x i8]* @.str159, i32 0, i32 0), float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i32 0), float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 1), float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2)) #4
  br label %736

; <label>:736                                     ; preds = %733, %729
  br label %737

; <label>:737                                     ; preds = %736
  %738 = call i8* @strchr(i8* %730, i32 10) #10
  br label %720

; <label>:739                                     ; preds = %727
  call void @free(i8* %711) #4
  br label %994

; <label>:740                                     ; preds = %40
  %741 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %742 = icmp ne i8 %741, 0
  br i1 %742, label %745, label %743

; <label>:743                                     ; preds = %740
  %744 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str160, i32 0, i32 0)) #4
  br label %745

; <label>:745                                     ; preds = %743, %740
  br label %994

; <label>:746                                     ; preds = %40
  %747 = load i16* @order, align 2
  %748 = sext i16 %747 to i32
  %749 = load %struct._IO_FILE** @ifp, align 8
  %750 = call i64 @ftell(%struct._IO_FILE* %749)
  %751 = trunc i64 %750 to i32
  %752 = load i32* @tiff_nifds, align 4
  %753 = call zeroext i16 @get2()
  store i16 %753, i16* @order, align 2
  %754 = load %struct._IO_FILE** @ifp, align 8
  %755 = call zeroext i16 @get2()
  %756 = call i32 @get4()
  %757 = add i32 %751, %756
  %758 = zext i32 %757 to i64
  %759 = call i32 @fseek(%struct._IO_FILE* %754, i64 %758, i32 0)
  %760 = call i32 @parse_tiff_ifd(i32 %751)
  store i32 65535, i32* @maximum, align 4
  store i32 %752, i32* @tiff_nifds, align 4
  %761 = trunc i32 %748 to i16
  store i16 %761, i16* @order, align 2
  br label %994

; <label>:762                                     ; preds = %40
  br label %763

; <label>:763                                     ; preds = %771, %762
  %c.10 = phi i32 [ 0, %762 ], [ %772, %771 ]
  %764 = icmp slt i32 %c.10, 4
  br i1 %764, label %765, label %773

; <label>:765                                     ; preds = %763
  %766 = load i32* @dng_version, align 4
  %767 = shl i32 %766, 8
  %768 = load %struct._IO_FILE** @ifp, align 8
  %769 = call i32 @getc_unlocked(%struct._IO_FILE* %768)
  %770 = add i32 %767, %769
  store i32 %770, i32* @dng_version, align 4
  br label %771

; <label>:771                                     ; preds = %765
  %772 = add nsw i32 %c.10, 1
  br label %763

; <label>:773                                     ; preds = %763
  %774 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %775 = icmp ne i8 %774, 0
  br i1 %775, label %778, label %776

; <label>:776                                     ; preds = %773
  %777 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str161, i32 0, i32 0)) #4
  br label %778

; <label>:778                                     ; preds = %776, %773
  store i32 1, i32* @is_raw, align 4
  br label %994

; <label>:779                                     ; preds = %40
  %780 = load i32* %len, align 4
  %781 = icmp ugt i32 %780, 4
  br i1 %781, label %782, label %783

; <label>:782                                     ; preds = %779
  store i32 4, i32* %len, align 4
  br label %783

; <label>:783                                     ; preds = %782, %779
  %784 = load i32* %len, align 4
  store i32 %784, i32* @colors, align 4
  %785 = getelementptr inbounds [4 x i8]* %cfa_pc, i32 0, i32 0
  %786 = load i32* @colors, align 4
  %787 = sext i32 %786 to i64
  %788 = load %struct._IO_FILE** @ifp, align 8
  %789 = call i64 @fread(i8* %785, i64 1, i64 %787, %struct._IO_FILE* %788)
  br label %790

; <label>:790                                     ; preds = %783, %456
  %plen.2 = phi i32 [ %plen.0, %783 ], [ %plen.1, %456 ]
  br label %791

; <label>:791                                     ; preds = %801, %790
  %c.11 = phi i32 [ 0, %790 ], [ %802, %801 ]
  %792 = load i32* @colors, align 4
  %793 = icmp slt i32 %c.11, %792
  br i1 %793, label %794, label %803

; <label>:794                                     ; preds = %791
  %795 = trunc i32 %c.11 to i8
  %796 = sext i32 %c.11 to i64
  %797 = getelementptr inbounds [4 x i8]* %cfa_pc, i32 0, i64 %796
  %798 = load i8* %797, align 1
  %799 = zext i8 %798 to i64
  %800 = getelementptr inbounds [256 x i8]* %tab, i32 0, i64 %799
  store i8 %795, i8* %800, align 1
  br label %801

; <label>:801                                     ; preds = %794
  %802 = add nsw i32 %c.11, 1
  br label %791

; <label>:803                                     ; preds = %791
  %804 = sext i32 %c.11 to i64
  %805 = getelementptr inbounds [5 x i8]* @cdesc, i32 0, i64 %804
  store i8 0, i8* %805, align 1
  br label %806

; <label>:806                                     ; preds = %809, %803
  %i.5 = phi i32 [ 16, %803 ], [ %807, %809 ]
  %807 = add nsw i32 %i.5, -1
  %808 = icmp ne i32 %i.5, 0
  br i1 %808, label %809, label %821

; <label>:809                                     ; preds = %806
  %810 = load i32* @filters, align 4
  %811 = shl i32 %810, 2
  %812 = urem i32 %807, %plen.2
  %813 = zext i32 %812 to i64
  %814 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i64 %813
  %815 = load i8* %814, align 1
  %816 = zext i8 %815 to i64
  %817 = getelementptr inbounds [256 x i8]* %tab, i32 0, i64 %816
  %818 = load i8* %817, align 1
  %819 = zext i8 %818 to i32
  %820 = or i32 %811, %819
  store i32 %820, i32* @filters, align 4
  br label %806

; <label>:821                                     ; preds = %806
  br label %994

; <label>:822                                     ; preds = %40
  %823 = call zeroext i16 @get2()
  %824 = zext i16 %823 to i32
  %825 = icmp eq i32 %824, 2
  br i1 %825, label %826, label %827

; <label>:826                                     ; preds = %822
  store i16 1, i16* @fuji_width, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %827

; <label>:827                                     ; preds = %826, %822
  br label %994

; <label>:828                                     ; preds = %40, %40
  %829 = load i32* %len, align 4
  call void @linear_table(i32 %829)
  br label %994

; <label>:830                                     ; preds = %40, %40, %40
  br label %831

; <label>:831                                     ; preds = %838, %830
  %dblack.0 = phi double [ 0.000000e+00, %830 ], [ %837, %838 ]
  %i.6 = phi i32 [ 0, %830 ], [ %839, %838 ]
  %832 = load i32* %len, align 4
  %833 = icmp ult i32 %i.6, %832
  br i1 %833, label %834, label %840

; <label>:834                                     ; preds = %831
  %835 = load i32* %type, align 4
  %836 = call double @getreal(i32 %835)
  %837 = fadd double %dblack.0, %836
  br label %838

; <label>:838                                     ; preds = %834
  %839 = add nsw i32 %i.6, 1
  br label %831

; <label>:840                                     ; preds = %831
  %841 = load i32* %len, align 4
  %842 = uitofp i32 %841 to double
  %843 = fdiv double %dblack.0, %842
  %844 = fadd double %843, 5.000000e-01
  %845 = load i32* @black, align 4
  %846 = uitofp i32 %845 to double
  %847 = fadd double %846, %844
  %848 = fptoui double %847 to i32
  store i32 %848, i32* @black, align 4
  br label %994

; <label>:849                                     ; preds = %40
  %850 = load i32* %type, align 4
  %851 = call i32 @getint(i32 %850)
  store i32 %851, i32* @maximum, align 4
  br label %994

; <label>:852                                     ; preds = %40
  %853 = load i32* %type, align 4
  %854 = call double @getreal(i32 %853)
  store double %854, double* @pixel_aspect, align 8
  %855 = load i32* %type, align 4
  %856 = call double @getreal(i32 %855)
  %857 = load double* @pixel_aspect, align 8
  %858 = fdiv double %857, %856
  store double %858, double* @pixel_aspect, align 8
  br label %994

; <label>:859                                     ; preds = %40, %40
  br label %860

; <label>:860                                     ; preds = %876, %859
  %c.12 = phi i32 [ 0, %859 ], [ %877, %876 ]
  %861 = load i32* @colors, align 4
  %862 = icmp slt i32 %c.12, %861
  br i1 %862, label %863, label %878

; <label>:863                                     ; preds = %860
  br label %864

; <label>:864                                     ; preds = %873, %863
  %j.2 = phi i32 [ 0, %863 ], [ %874, %873 ]
  %865 = icmp slt i32 %j.2, 3
  br i1 %865, label %866, label %875

; <label>:866                                     ; preds = %864
  %867 = load i32* %type, align 4
  %868 = call double @getreal(i32 %867)
  %869 = sext i32 %j.2 to i64
  %870 = sext i32 %c.12 to i64
  %871 = getelementptr inbounds [4 x [3 x double]]* %cm, i32 0, i64 %870
  %872 = getelementptr inbounds [3 x double]* %871, i32 0, i64 %869
  store double %868, double* %872, align 8
  br label %873

; <label>:873                                     ; preds = %866
  %874 = add nsw i32 %j.2, 1
  br label %864

; <label>:875                                     ; preds = %864
  br label %876

; <label>:876                                     ; preds = %875
  %877 = add nsw i32 %c.12, 1
  br label %860

; <label>:878                                     ; preds = %860
  br label %994

; <label>:879                                     ; preds = %40, %40
  br label %880

; <label>:880                                     ; preds = %897, %879
  %i.7 = phi i32 [ 0, %879 ], [ %898, %897 ]
  %881 = load i32* @colors, align 4
  %882 = icmp slt i32 %i.7, %881
  br i1 %882, label %883, label %899

; <label>:883                                     ; preds = %880
  br label %884

; <label>:884                                     ; preds = %894, %883
  %c.13 = phi i32 [ 0, %883 ], [ %895, %894 ]
  %885 = load i32* @colors, align 4
  %886 = icmp slt i32 %c.13, %885
  br i1 %886, label %887, label %896

; <label>:887                                     ; preds = %884
  %888 = load i32* %type, align 4
  %889 = call double @getreal(i32 %888)
  %890 = sext i32 %c.13 to i64
  %891 = sext i32 %i.7 to i64
  %892 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %891
  %893 = getelementptr inbounds [4 x double]* %892, i32 0, i64 %890
  store double %889, double* %893, align 8
  br label %894

; <label>:894                                     ; preds = %887
  %895 = add nsw i32 %c.13, 1
  br label %884

; <label>:896                                     ; preds = %884
  br label %897

; <label>:897                                     ; preds = %896
  %898 = add nsw i32 %i.7, 1
  br label %880

; <label>:899                                     ; preds = %880
  br label %900

; <label>:900                                     ; preds = %899, %40
  br label %901

; <label>:901                                     ; preds = %909, %900
  %c.14 = phi i32 [ 0, %900 ], [ %910, %909 ]
  %902 = load i32* @colors, align 4
  %903 = icmp slt i32 %c.14, %902
  br i1 %903, label %904, label %911

; <label>:904                                     ; preds = %901
  %905 = load i32* %type, align 4
  %906 = call double @getreal(i32 %905)
  %907 = sext i32 %c.14 to i64
  %908 = getelementptr inbounds [4 x double]* %ab, i32 0, i64 %907
  store double %906, double* %908, align 8
  br label %909

; <label>:909                                     ; preds = %904
  %910 = add nsw i32 %c.14, 1
  br label %901

; <label>:911                                     ; preds = %901
  br label %994

; <label>:912                                     ; preds = %40
  br label %913

; <label>:913                                     ; preds = %921, %912
  %c.15 = phi i32 [ 0, %912 ], [ %922, %921 ]
  %914 = load i32* @colors, align 4
  %915 = icmp slt i32 %c.15, %914
  br i1 %915, label %916, label %923

; <label>:916                                     ; preds = %913
  %917 = load i32* %type, align 4
  %918 = call double @getreal(i32 %917)
  %919 = sext i32 %c.15 to i64
  %920 = getelementptr inbounds [4 x double]* %asn, i32 0, i64 %919
  store double %918, double* %920, align 8
  br label %921

; <label>:921                                     ; preds = %916
  %922 = add nsw i32 %c.15, 1
  br label %913

; <label>:923                                     ; preds = %913
  br label %994

; <label>:924                                     ; preds = %40
  %925 = load i32* %type, align 4
  %926 = call double @getreal(i32 %925)
  %927 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 0
  store double %926, double* %927, align 8
  %928 = load i32* %type, align 4
  %929 = call double @getreal(i32 %928)
  %930 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 1
  store double %929, double* %930, align 8
  %931 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 0
  %932 = load double* %931, align 8
  %933 = fsub double 1.000000e+00, %932
  %934 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 1
  %935 = load double* %934, align 8
  %936 = fsub double %933, %935
  %937 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 2
  store double %936, double* %937, align 8
  br label %938

; <label>:938                                     ; preds = %949, %924
  %c.16 = phi i32 [ 0, %924 ], [ %950, %949 ]
  %939 = icmp slt i32 %c.16, 3
  br i1 %939, label %940, label %951

; <label>:940                                     ; preds = %938
  %941 = sext i32 %c.16 to i64
  %942 = getelementptr inbounds [3 x float]* @d65_white, i32 0, i64 %941
  %943 = load float* %942, align 4
  %944 = fpext float %943 to double
  %945 = sext i32 %c.16 to i64
  %946 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 %945
  %947 = load double* %946, align 8
  %948 = fdiv double %947, %944
  store double %948, double* %946, align 8
  br label %949

; <label>:949                                     ; preds = %940
  %950 = add nsw i32 %c.16, 1
  br label %938

; <label>:951                                     ; preds = %938
  br label %994

; <label>:952                                     ; preds = %40
  %953 = load i32* @dng_version, align 4
  %954 = icmp ne i32 %953, 0
  br i1 %954, label %955, label %956

; <label>:955                                     ; preds = %952
  br label %994

; <label>:956                                     ; preds = %952
  %957 = call i32 @get4()
  %958 = add i32 %957, %base
  call void @parse_minolta(i32 %958)
  %959 = load %struct._IO_FILE** @ifp, align 8
  %960 = sext i32 %958 to i64
  %961 = call i32 @fseek(%struct._IO_FILE* %959, i64 %960, i32 0)
  %962 = call i32 @parse_tiff_ifd(i32 %base)
  br label %994

; <label>:963                                     ; preds = %40
  call void @read_shorts(i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i32 0), i32 3)
  br label %994

; <label>:964                                     ; preds = %40
  %965 = load i32* %type, align 4
  %966 = call i32 @getint(i32 %965)
  %967 = trunc i32 %966 to i16
  store i16 %967, i16* @top_margin, align 2
  %968 = load i32* %type, align 4
  %969 = call i32 @getint(i32 %968)
  %970 = trunc i32 %969 to i16
  store i16 %970, i16* @left_margin, align 2
  %971 = load i32* %type, align 4
  %972 = call i32 @getint(i32 %971)
  %973 = load i16* @top_margin, align 2
  %974 = zext i16 %973 to i32
  %975 = sub i32 %972, %974
  %976 = trunc i32 %975 to i16
  store i16 %976, i16* @height, align 2
  %977 = load i32* %type, align 4
  %978 = call i32 @getint(i32 %977)
  %979 = load i16* @left_margin, align 2
  %980 = zext i16 %979 to i32
  %981 = sub i32 %978, %980
  %982 = trunc i32 %981 to i16
  store i16 %982, i16* @width, align 2
  br label %994

; <label>:983                                     ; preds = %40
  %984 = load %struct._IO_FILE** @ifp, align 8
  %985 = call i32 @fseek(%struct._IO_FILE* %984, i64 16, i32 1)
  %986 = call i32 @get4()
  %987 = zext i32 %986 to i64
  store i64 %987, i64* @data_offset, align 8
  %988 = load %struct._IO_FILE** @ifp, align 8
  %989 = call i32 @fseek(%struct._IO_FILE* %988, i64 28, i32 1)
  %990 = call i32 @get4()
  %991 = zext i32 %990 to i64
  %992 = load i64* @data_offset, align 8
  %993 = add nsw i64 %992, %991
  store i64 %993, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %994

; <label>:994                                     ; preds = %983, %964, %963, %956, %955, %951, %923, %911, %878, %852, %849, %840, %828, %827, %821, %778, %746, %745, %739, %713, %707, %605, %598, %597, %573, %569, %567, %563, %557, %551, %549, %544, %493, %485, %467, %463, %457, %414, %413, %400, %383, %381, %379, %377, %376, %331, %330, %303, %293, %272, %269, %266, %265, %264, %231, %224, %212, %211, %158, %152, %149, %146, %140, %134, %123, %117, %111, %106, %105, %93, %80, %67, %66, %59, %40
  %sony_offset.1 = phi i32 [ %sony_offset.0, %40 ], [ %sony_offset.0, %983 ], [ %sony_offset.0, %964 ], [ %sony_offset.0, %963 ], [ %sony_offset.0, %955 ], [ %sony_offset.0, %956 ], [ %sony_offset.0, %951 ], [ %sony_offset.0, %923 ], [ %sony_offset.0, %911 ], [ %sony_offset.0, %878 ], [ %sony_offset.0, %852 ], [ %sony_offset.0, %849 ], [ %sony_offset.0, %840 ], [ %sony_offset.0, %828 ], [ %sony_offset.0, %827 ], [ %sony_offset.0, %821 ], [ %sony_offset.0, %778 ], [ %sony_offset.0, %746 ], [ %sony_offset.0, %745 ], [ %sony_offset.0, %739 ], [ %sony_offset.0, %713 ], [ %sony_offset.0, %707 ], [ %sony_offset.0, %605 ], [ %sony_offset.0, %598 ], [ %sony_offset.0, %597 ], [ %sony_offset.0, %573 ], [ %sony_offset.0, %569 ], [ %sony_offset.0, %567 ], [ %sony_offset.0, %563 ], [ %sony_offset.0, %557 ], [ %sony_offset.0, %551 ], [ %sony_offset.0, %549 ], [ %sony_offset.0, %493 ], [ %sony_offset.0, %544 ], [ %sony_offset.0, %485 ], [ %sony_offset.0, %467 ], [ %sony_offset.0, %463 ], [ %sony_offset.0, %457 ], [ %sony_offset.0, %414 ], [ %sony_offset.0, %413 ], [ %sony_offset.0, %400 ], [ %sony_offset.0, %383 ], [ %sony_offset.0, %381 ], [ %sony_offset.0, %379 ], [ %378, %377 ], [ %sony_offset.0, %376 ], [ %sony_offset.0, %331 ], [ %sony_offset.0, %330 ], [ %sony_offset.0, %303 ], [ %sony_offset.0, %293 ], [ %sony_offset.0, %272 ], [ %sony_offset.0, %269 ], [ %sony_offset.0, %266 ], [ %sony_offset.0, %265 ], [ %sony_offset.0, %264 ], [ %sony_offset.0, %231 ], [ %sony_offset.0, %224 ], [ %sony_offset.0, %212 ], [ %sony_offset.0, %211 ], [ %sony_offset.0, %158 ], [ %sony_offset.0, %152 ], [ %sony_offset.0, %149 ], [ %sony_offset.0, %146 ], [ %sony_offset.0, %140 ], [ %sony_offset.0, %134 ], [ %sony_offset.0, %123 ], [ %sony_offset.0, %117 ], [ %sony_offset.0, %111 ], [ %sony_offset.0, %105 ], [ %sony_offset.0, %106 ], [ %sony_offset.0, %80 ], [ %sony_offset.0, %93 ], [ %sony_offset.0, %67 ], [ %sony_offset.0, %66 ], [ %sony_offset.0, %59 ]
  %sony_length.1 = phi i32 [ %sony_length.0, %40 ], [ %sony_length.0, %983 ], [ %sony_length.0, %964 ], [ %sony_length.0, %963 ], [ %sony_length.0, %955 ], [ %sony_length.0, %956 ], [ %sony_length.0, %951 ], [ %sony_length.0, %923 ], [ %sony_length.0, %911 ], [ %sony_length.0, %878 ], [ %sony_length.0, %852 ], [ %sony_length.0, %849 ], [ %sony_length.0, %840 ], [ %sony_length.0, %828 ], [ %sony_length.0, %827 ], [ %sony_length.0, %821 ], [ %sony_length.0, %778 ], [ %sony_length.0, %746 ], [ %sony_length.0, %745 ], [ %sony_length.0, %739 ], [ %sony_length.0, %713 ], [ %sony_length.0, %707 ], [ %sony_length.0, %605 ], [ %sony_length.0, %598 ], [ %sony_length.0, %597 ], [ %sony_length.0, %573 ], [ %sony_length.0, %569 ], [ %sony_length.0, %567 ], [ %sony_length.0, %563 ], [ %sony_length.0, %557 ], [ %sony_length.0, %551 ], [ %sony_length.0, %549 ], [ %sony_length.0, %493 ], [ %sony_length.0, %544 ], [ %sony_length.0, %485 ], [ %sony_length.0, %467 ], [ %sony_length.0, %463 ], [ %sony_length.0, %457 ], [ %sony_length.0, %414 ], [ %sony_length.0, %413 ], [ %sony_length.0, %400 ], [ %sony_length.0, %383 ], [ %sony_length.0, %381 ], [ %380, %379 ], [ %sony_length.0, %377 ], [ %sony_length.0, %376 ], [ %sony_length.0, %331 ], [ %sony_length.0, %330 ], [ %sony_length.0, %303 ], [ %sony_length.0, %293 ], [ %sony_length.0, %272 ], [ %sony_length.0, %269 ], [ %sony_length.0, %266 ], [ %sony_length.0, %265 ], [ %sony_length.0, %264 ], [ %sony_length.0, %231 ], [ %sony_length.0, %224 ], [ %sony_length.0, %212 ], [ %sony_length.0, %211 ], [ %sony_length.0, %158 ], [ %sony_length.0, %152 ], [ %sony_length.0, %149 ], [ %sony_length.0, %146 ], [ %sony_length.0, %140 ], [ %sony_length.0, %134 ], [ %sony_length.0, %123 ], [ %sony_length.0, %117 ], [ %sony_length.0, %111 ], [ %sony_length.0, %105 ], [ %sony_length.0, %106 ], [ %sony_length.0, %80 ], [ %sony_length.0, %93 ], [ %sony_length.0, %67 ], [ %sony_length.0, %66 ], [ %sony_length.0, %59 ]
  %ima_len.1 = phi i32 [ %ima_len.0, %40 ], [ %ima_len.0, %983 ], [ %ima_len.0, %964 ], [ %ima_len.0, %963 ], [ %ima_len.0, %955 ], [ %ima_len.0, %956 ], [ %ima_len.0, %951 ], [ %ima_len.0, %923 ], [ %ima_len.0, %911 ], [ %ima_len.0, %878 ], [ %ima_len.0, %852 ], [ %ima_len.0, %849 ], [ %ima_len.0, %840 ], [ %ima_len.0, %828 ], [ %ima_len.0, %827 ], [ %ima_len.0, %821 ], [ %ima_len.0, %778 ], [ %ima_len.0, %746 ], [ %ima_len.0, %745 ], [ %ima_len.0, %739 ], [ %ima_len.0, %713 ], [ %ima_len.0, %707 ], [ %ima_len.0, %605 ], [ %602, %598 ], [ %ima_len.0, %597 ], [ %ima_len.0, %573 ], [ %ima_len.0, %569 ], [ %ima_len.0, %567 ], [ %ima_len.0, %563 ], [ %ima_len.0, %557 ], [ %ima_len.0, %551 ], [ %ima_len.0, %549 ], [ %ima_len.0, %493 ], [ %ima_len.0, %544 ], [ %ima_len.0, %485 ], [ %ima_len.0, %467 ], [ %ima_len.0, %463 ], [ %ima_len.0, %457 ], [ %ima_len.0, %414 ], [ %ima_len.0, %413 ], [ %ima_len.0, %400 ], [ %ima_len.0, %383 ], [ %ima_len.0, %381 ], [ %ima_len.0, %379 ], [ %ima_len.0, %377 ], [ %ima_len.0, %376 ], [ %ima_len.0, %331 ], [ %ima_len.0, %330 ], [ %ima_len.0, %303 ], [ %ima_len.0, %293 ], [ %ima_len.0, %272 ], [ %ima_len.0, %269 ], [ %ima_len.0, %266 ], [ %ima_len.0, %265 ], [ %ima_len.0, %264 ], [ %ima_len.0, %231 ], [ %ima_len.0, %224 ], [ %ima_len.0, %212 ], [ %ima_len.0, %211 ], [ %ima_len.0, %158 ], [ %ima_len.0, %152 ], [ %ima_len.0, %149 ], [ %ima_len.0, %146 ], [ %ima_len.0, %140 ], [ %ima_len.0, %134 ], [ %ima_len.0, %123 ], [ %ima_len.0, %117 ], [ %ima_len.0, %111 ], [ %ima_len.0, %105 ], [ %ima_len.0, %106 ], [ %ima_len.0, %80 ], [ %ima_len.0, %93 ], [ %ima_len.0, %67 ], [ %ima_len.0, %66 ], [ %ima_len.0, %59 ]
  %use_cm.1 = phi i32 [ %use_cm.0, %40 ], [ %use_cm.0, %983 ], [ %use_cm.0, %964 ], [ %use_cm.0, %963 ], [ %use_cm.0, %955 ], [ %use_cm.0, %956 ], [ %use_cm.0, %951 ], [ %use_cm.0, %923 ], [ %use_cm.0, %911 ], [ 1, %878 ], [ %use_cm.0, %852 ], [ %use_cm.0, %849 ], [ %use_cm.0, %840 ], [ %use_cm.0, %828 ], [ %use_cm.0, %827 ], [ %use_cm.0, %821 ], [ %use_cm.0, %778 ], [ %use_cm.0, %746 ], [ %use_cm.0, %745 ], [ %use_cm.0, %739 ], [ %use_cm.0, %713 ], [ %use_cm.0, %707 ], [ %use_cm.0, %605 ], [ %use_cm.0, %598 ], [ %use_cm.0, %597 ], [ %use_cm.0, %573 ], [ %use_cm.0, %569 ], [ %use_cm.0, %567 ], [ %use_cm.0, %563 ], [ %use_cm.0, %557 ], [ %use_cm.0, %551 ], [ %use_cm.0, %549 ], [ %use_cm.0, %493 ], [ %use_cm.0, %544 ], [ %use_cm.0, %485 ], [ %use_cm.0, %467 ], [ %use_cm.0, %463 ], [ %use_cm.0, %457 ], [ %use_cm.0, %414 ], [ %use_cm.0, %413 ], [ %use_cm.0, %400 ], [ %use_cm.0, %383 ], [ %use_cm.0, %381 ], [ %use_cm.0, %379 ], [ %use_cm.0, %377 ], [ %use_cm.0, %376 ], [ %use_cm.0, %331 ], [ %use_cm.0, %330 ], [ %use_cm.0, %303 ], [ %use_cm.0, %293 ], [ %use_cm.0, %272 ], [ %use_cm.0, %269 ], [ %use_cm.0, %266 ], [ %use_cm.0, %265 ], [ %use_cm.0, %264 ], [ %use_cm.0, %231 ], [ %use_cm.0, %224 ], [ %use_cm.0, %212 ], [ %use_cm.0, %211 ], [ %use_cm.0, %158 ], [ %use_cm.0, %152 ], [ %use_cm.0, %149 ], [ %use_cm.0, %146 ], [ %use_cm.0, %140 ], [ %use_cm.0, %134 ], [ %use_cm.0, %123 ], [ %use_cm.0, %117 ], [ %use_cm.0, %111 ], [ %use_cm.0, %105 ], [ %use_cm.0, %106 ], [ %use_cm.0, %80 ], [ %use_cm.0, %93 ], [ %use_cm.0, %67 ], [ %use_cm.0, %66 ], [ %use_cm.0, %59 ]
  %ifd.1 = phi i32 [ %ifd.0, %40 ], [ %ifd.0, %983 ], [ %ifd.0, %964 ], [ %ifd.0, %963 ], [ %ifd.0, %955 ], [ %ifd.0, %956 ], [ %ifd.0, %951 ], [ %ifd.0, %923 ], [ %ifd.0, %911 ], [ %ifd.0, %878 ], [ %ifd.0, %852 ], [ %ifd.0, %849 ], [ %ifd.0, %840 ], [ %ifd.0, %828 ], [ %ifd.0, %827 ], [ %ifd.0, %821 ], [ %ifd.0, %778 ], [ %ifd.0, %746 ], [ %ifd.0, %745 ], [ %ifd.0, %739 ], [ %ifd.0, %713 ], [ %ifd.0, %707 ], [ %ifd.0, %605 ], [ %ifd.0, %598 ], [ %ifd.0, %597 ], [ %ifd.0, %573 ], [ %ifd.0, %569 ], [ %ifd.0, %567 ], [ %ifd.0, %563 ], [ %ifd.0, %557 ], [ %ifd.0, %551 ], [ %ifd.0, %549 ], [ %ifd.0, %493 ], [ %ifd.0, %544 ], [ %ifd.0, %485 ], [ %ifd.0, %467 ], [ %ifd.0, %463 ], [ %ifd.0, %457 ], [ %ifd.0, %414 ], [ %ifd.0, %413 ], [ %ifd.0, %400 ], [ %ifd.0, %383 ], [ %ifd.0, %381 ], [ %ifd.0, %379 ], [ %ifd.0, %377 ], [ %ifd.0, %376 ], [ %ifd.0, %331 ], [ %ifd.0, %330 ], [ %307, %303 ], [ %ifd.0, %293 ], [ %ifd.0, %272 ], [ %ifd.0, %269 ], [ %ifd.0, %266 ], [ %ifd.0, %265 ], [ %ifd.0, %264 ], [ %ifd.0, %231 ], [ %ifd.0, %224 ], [ %ifd.0, %212 ], [ %ifd.0, %211 ], [ %ifd.0, %158 ], [ %ifd.0, %152 ], [ %ifd.0, %149 ], [ %ifd.0, %146 ], [ %ifd.0, %140 ], [ %ifd.0, %134 ], [ %ifd.0, %123 ], [ %ifd.0, %117 ], [ %ifd.0, %111 ], [ %ifd.0, %105 ], [ %ifd.0, %106 ], [ %ifd.0, %80 ], [ %ifd.0, %93 ], [ %ifd.0, %67 ], [ %ifd.0, %66 ], [ %ifd.0, %59 ]
  %plen.3 = phi i32 [ %plen.0, %40 ], [ %plen.0, %983 ], [ %plen.0, %964 ], [ %plen.0, %963 ], [ %plen.0, %955 ], [ %plen.0, %956 ], [ %plen.0, %951 ], [ %plen.0, %923 ], [ %plen.0, %911 ], [ %plen.0, %878 ], [ %plen.0, %852 ], [ %plen.0, %849 ], [ %plen.0, %840 ], [ %plen.0, %828 ], [ %plen.0, %827 ], [ %plen.2, %821 ], [ %plen.0, %778 ], [ %plen.0, %746 ], [ %plen.0, %745 ], [ %plen.0, %739 ], [ %plen.0, %713 ], [ %plen.0, %707 ], [ %plen.0, %605 ], [ %plen.0, %598 ], [ %plen.0, %597 ], [ %plen.0, %573 ], [ %plen.0, %569 ], [ %plen.0, %567 ], [ %plen.0, %563 ], [ %plen.0, %557 ], [ %plen.0, %551 ], [ %plen.0, %549 ], [ %plen.0, %493 ], [ %plen.0, %544 ], [ %plen.0, %485 ], [ %plen.0, %467 ], [ %plen.0, %463 ], [ %plen.0, %457 ], [ %plen.0, %414 ], [ %plen.0, %413 ], [ %plen.0, %400 ], [ %plen.0, %383 ], [ %plen.0, %381 ], [ %plen.0, %379 ], [ %plen.0, %377 ], [ %plen.0, %376 ], [ %plen.0, %331 ], [ %plen.0, %330 ], [ %plen.0, %303 ], [ %plen.0, %293 ], [ %plen.0, %272 ], [ %plen.0, %269 ], [ %plen.0, %266 ], [ %plen.0, %265 ], [ %plen.0, %264 ], [ %plen.0, %231 ], [ %plen.0, %224 ], [ %plen.0, %212 ], [ %plen.0, %211 ], [ %plen.0, %158 ], [ %plen.0, %152 ], [ %plen.0, %149 ], [ %plen.0, %146 ], [ %plen.0, %140 ], [ %plen.0, %134 ], [ %plen.0, %123 ], [ %plen.0, %117 ], [ %plen.0, %111 ], [ %plen.0, %105 ], [ %plen.0, %106 ], [ %plen.0, %80 ], [ %plen.0, %93 ], [ %plen.0, %67 ], [ %plen.0, %66 ], [ %plen.0, %59 ]
  %sony_key.1 = phi i32 [ %sony_key.0, %40 ], [ %sony_key.0, %983 ], [ %sony_key.0, %964 ], [ %sony_key.0, %963 ], [ %sony_key.0, %955 ], [ %sony_key.0, %956 ], [ %sony_key.0, %951 ], [ %sony_key.0, %923 ], [ %sony_key.0, %911 ], [ %sony_key.0, %878 ], [ %sony_key.0, %852 ], [ %sony_key.0, %849 ], [ %sony_key.0, %840 ], [ %sony_key.0, %828 ], [ %sony_key.0, %827 ], [ %sony_key.0, %821 ], [ %sony_key.0, %778 ], [ %sony_key.0, %746 ], [ %sony_key.0, %745 ], [ %sony_key.0, %739 ], [ %sony_key.0, %713 ], [ %sony_key.0, %707 ], [ %sony_key.0, %605 ], [ %sony_key.0, %598 ], [ %sony_key.0, %597 ], [ %sony_key.0, %573 ], [ %sony_key.0, %569 ], [ %sony_key.0, %567 ], [ %sony_key.0, %563 ], [ %sony_key.0, %557 ], [ %sony_key.0, %551 ], [ %sony_key.0, %549 ], [ %sony_key.0, %493 ], [ %sony_key.0, %544 ], [ %sony_key.0, %485 ], [ %sony_key.0, %467 ], [ %sony_key.0, %463 ], [ %sony_key.0, %457 ], [ %sony_key.0, %414 ], [ %sony_key.0, %413 ], [ %sony_key.0, %400 ], [ %sony_key.0, %383 ], [ %382, %381 ], [ %sony_key.0, %379 ], [ %sony_key.0, %377 ], [ %sony_key.0, %376 ], [ %sony_key.0, %331 ], [ %sony_key.0, %330 ], [ %sony_key.0, %303 ], [ %sony_key.0, %293 ], [ %sony_key.0, %272 ], [ %sony_key.0, %269 ], [ %sony_key.0, %266 ], [ %sony_key.0, %265 ], [ %sony_key.0, %264 ], [ %sony_key.0, %231 ], [ %sony_key.0, %224 ], [ %sony_key.0, %212 ], [ %sony_key.0, %211 ], [ %sony_key.0, %158 ], [ %sony_key.0, %152 ], [ %sony_key.0, %149 ], [ %sony_key.0, %146 ], [ %sony_key.0, %140 ], [ %sony_key.0, %134 ], [ %sony_key.0, %123 ], [ %sony_key.0, %117 ], [ %sony_key.0, %111 ], [ %sony_key.0, %105 ], [ %sony_key.0, %106 ], [ %sony_key.0, %80 ], [ %sony_key.0, %93 ], [ %sony_key.0, %67 ], [ %sony_key.0, %66 ], [ %sony_key.0, %59 ]
  %995 = load %struct._IO_FILE** @ifp, align 8
  %996 = load i32* %save, align 4
  %997 = zext i32 %996 to i64
  %998 = call i32 @fseek(%struct._IO_FILE* %995, i64 %997, i32 0)
  br label %37

; <label>:999                                     ; preds = %37
  %1000 = icmp ne i32 %sony_length.0, 0
  br i1 %1000, label %1001, label %1031

; <label>:1001                                    ; preds = %999
  %1002 = zext i32 %sony_length.0 to i64
  %1003 = call noalias i8* @malloc(i64 %1002) #4
  %1004 = bitcast i8* %1003 to i32*
  %1005 = icmp ne i32* %1004, null
  br i1 %1005, label %1006, label %1031

; <label>:1006                                    ; preds = %1001
  %1007 = load %struct._IO_FILE** @ifp, align 8
  %1008 = zext i32 %sony_offset.0 to i64
  %1009 = call i32 @fseek(%struct._IO_FILE* %1007, i64 %1008, i32 0)
  %1010 = bitcast i32* %1004 to i8*
  %1011 = zext i32 %sony_length.0 to i64
  %1012 = load %struct._IO_FILE** @ifp, align 8
  %1013 = call i64 @fread(i8* %1010, i64 %1011, i64 1, %struct._IO_FILE* %1012)
  %1014 = udiv i32 %sony_length.0, 4
  call void @sony_decrypt(i32* %1004, i32 %1014, i32 1, i32 %sony_key.0)
  %1015 = load %struct._IO_FILE** @ifp, align 8
  %1016 = call %struct._IO_FILE* @tmpfile()
  store %struct._IO_FILE* %1016, %struct._IO_FILE** @ifp, align 8
  %1017 = icmp ne %struct._IO_FILE* %1016, null
  br i1 %1017, label %1018, label %1029

; <label>:1018                                    ; preds = %1006
  %1019 = bitcast i32* %1004 to i8*
  %1020 = zext i32 %sony_length.0 to i64
  %1021 = load %struct._IO_FILE** @ifp, align 8
  %1022 = call i64 @fwrite(i8* %1019, i64 %1020, i64 1, %struct._IO_FILE* %1021)
  %1023 = load %struct._IO_FILE** @ifp, align 8
  %1024 = call i32 @fseek(%struct._IO_FILE* %1023, i64 0, i32 0)
  %1025 = sub i32 0, %sony_offset.0
  %1026 = call i32 @parse_tiff_ifd(i32 %1025)
  %1027 = load %struct._IO_FILE** @ifp, align 8
  %1028 = call i32 @fclose(%struct._IO_FILE* %1027)
  br label %1029

; <label>:1029                                    ; preds = %1018, %1006
  store %struct._IO_FILE* %1015, %struct._IO_FILE** @ifp, align 8
  %1030 = bitcast i32* %1004 to i8*
  call void @free(i8* %1030) #4
  br label %1031

; <label>:1031                                    ; preds = %1029, %1001, %999
  br label %1032

; <label>:1032                                    ; preds = %1052, %1031
  %i.8 = phi i32 [ 0, %1031 ], [ %1053, %1052 ]
  %1033 = load i32* @colors, align 4
  %1034 = icmp slt i32 %i.8, %1033
  br i1 %1034, label %1035, label %1054

; <label>:1035                                    ; preds = %1032
  br label %1036

; <label>:1036                                    ; preds = %1049, %1035
  %c.17 = phi i32 [ 0, %1035 ], [ %1050, %1049 ]
  %1037 = load i32* @colors, align 4
  %1038 = icmp slt i32 %c.17, %1037
  br i1 %1038, label %1039, label %1051

; <label>:1039                                    ; preds = %1036
  %1040 = sext i32 %i.8 to i64
  %1041 = getelementptr inbounds [4 x double]* %ab, i32 0, i64 %1040
  %1042 = load double* %1041, align 8
  %1043 = sext i32 %c.17 to i64
  %1044 = sext i32 %i.8 to i64
  %1045 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1044
  %1046 = getelementptr inbounds [4 x double]* %1045, i32 0, i64 %1043
  %1047 = load double* %1046, align 8
  %1048 = fmul double %1047, %1042
  store double %1048, double* %1046, align 8
  br label %1049

; <label>:1049                                    ; preds = %1039
  %1050 = add nsw i32 %c.17, 1
  br label %1036

; <label>:1051                                    ; preds = %1036
  br label %1052

; <label>:1052                                    ; preds = %1051
  %1053 = add nsw i32 %i.8, 1
  br label %1032

; <label>:1054                                    ; preds = %1032
  %1055 = icmp ne i32 %use_cm.0, 0
  br i1 %1055, label %1056, label %1103

; <label>:1056                                    ; preds = %1054
  br label %1057

; <label>:1057                                    ; preds = %1099, %1056
  %c.18 = phi i32 [ 0, %1056 ], [ %1100, %1099 ]
  %1058 = load i32* @colors, align 4
  %1059 = icmp slt i32 %c.18, %1058
  br i1 %1059, label %1060, label %1101

; <label>:1060                                    ; preds = %1057
  br label %1061

; <label>:1061                                    ; preds = %1096, %1060
  %i.9 = phi i32 [ 0, %1060 ], [ %1097, %1096 ]
  %1062 = icmp slt i32 %i.9, 3
  br i1 %1062, label %1063, label %1098

; <label>:1063                                    ; preds = %1061
  %1064 = sext i32 %i.9 to i64
  %1065 = sext i32 %c.18 to i64
  %1066 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i64 %1065
  %1067 = getelementptr inbounds [3 x double]* %1066, i32 0, i64 %1064
  store double 0.000000e+00, double* %1067, align 8
  br label %1068

; <label>:1068                                    ; preds = %1093, %1063
  %j.3 = phi i32 [ 0, %1063 ], [ %1094, %1093 ]
  %1069 = load i32* @colors, align 4
  %1070 = icmp slt i32 %j.3, %1069
  br i1 %1070, label %1071, label %1095

; <label>:1071                                    ; preds = %1068
  %1072 = sext i32 %j.3 to i64
  %1073 = sext i32 %c.18 to i64
  %1074 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1073
  %1075 = getelementptr inbounds [4 x double]* %1074, i32 0, i64 %1072
  %1076 = load double* %1075, align 8
  %1077 = sext i32 %i.9 to i64
  %1078 = sext i32 %j.3 to i64
  %1079 = getelementptr inbounds [4 x [3 x double]]* %cm, i32 0, i64 %1078
  %1080 = getelementptr inbounds [3 x double]* %1079, i32 0, i64 %1077
  %1081 = load double* %1080, align 8
  %1082 = fmul double %1076, %1081
  %1083 = sext i32 %i.9 to i64
  %1084 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 %1083
  %1085 = load double* %1084, align 8
  %1086 = fmul double %1082, %1085
  %1087 = sext i32 %i.9 to i64
  %1088 = sext i32 %c.18 to i64
  %1089 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i64 %1088
  %1090 = getelementptr inbounds [3 x double]* %1089, i32 0, i64 %1087
  %1091 = load double* %1090, align 8
  %1092 = fadd double %1091, %1086
  store double %1092, double* %1090, align 8
  br label %1093

; <label>:1093                                    ; preds = %1071
  %1094 = add nsw i32 %j.3, 1
  br label %1068

; <label>:1095                                    ; preds = %1068
  br label %1096

; <label>:1096                                    ; preds = %1095
  %1097 = add nsw i32 %i.9, 1
  br label %1061

; <label>:1098                                    ; preds = %1061
  br label %1099

; <label>:1099                                    ; preds = %1098
  %1100 = add nsw i32 %c.18, 1
  br label %1057

; <label>:1101                                    ; preds = %1057
  %1102 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i32 0
  call void @cam_xyz_coeff([3 x double]* %1102)
  br label %1103

; <label>:1103                                    ; preds = %1101, %1054
  %1104 = getelementptr inbounds [4 x double]* %asn, i32 0, i64 0
  %1105 = load double* %1104, align 8
  %1106 = fcmp une double %1105, 0.000000e+00
  br i1 %1106, label %1107, label %1122

; <label>:1107                                    ; preds = %1103
  store float 0.000000e+00, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 3), align 4
  br label %1108

; <label>:1108                                    ; preds = %1119, %1107
  %c.19 = phi i32 [ 0, %1107 ], [ %1120, %1119 ]
  %1109 = load i32* @colors, align 4
  %1110 = icmp slt i32 %c.19, %1109
  br i1 %1110, label %1111, label %1121

; <label>:1111                                    ; preds = %1108
  %1112 = sext i32 %c.19 to i64
  %1113 = getelementptr inbounds [4 x double]* %asn, i32 0, i64 %1112
  %1114 = load double* %1113, align 8
  %1115 = fdiv double 1.000000e+00, %1114
  %1116 = fptrunc double %1115 to float
  %1117 = sext i32 %c.19 to i64
  %1118 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %1117
  store float %1116, float* %1118, align 4
  br label %1119

; <label>:1119                                    ; preds = %1111
  %1120 = add nsw i32 %c.19, 1
  br label %1108

; <label>:1121                                    ; preds = %1108
  br label %1122

; <label>:1122                                    ; preds = %1121, %1103
  %1123 = icmp ne i32 %use_cm.0, 0
  br i1 %1123, label %1143, label %1124

; <label>:1124                                    ; preds = %1122
  br label %1125

; <label>:1125                                    ; preds = %1140, %1124
  %c.20 = phi i32 [ 0, %1124 ], [ %1141, %1140 ]
  %1126 = load i32* @colors, align 4
  %1127 = icmp slt i32 %c.20, %1126
  br i1 %1127, label %1128, label %1142

; <label>:1128                                    ; preds = %1125
  %1129 = sext i32 %c.20 to i64
  %1130 = sext i32 %c.20 to i64
  %1131 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1130
  %1132 = getelementptr inbounds [4 x double]* %1131, i32 0, i64 %1129
  %1133 = load double* %1132, align 8
  %1134 = sext i32 %c.20 to i64
  %1135 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %1134
  %1136 = load float* %1135, align 4
  %1137 = fpext float %1136 to double
  %1138 = fdiv double %1137, %1133
  %1139 = fptrunc double %1138 to float
  store float %1139, float* %1135, align 4
  br label %1140

; <label>:1140                                    ; preds = %1128
  %1141 = add nsw i32 %c.20, 1
  br label %1125

; <label>:1142                                    ; preds = %1125
  br label %1143

; <label>:1143                                    ; preds = %1142, %1122
  br label %1144

; <label>:1144                                    ; preds = %1143, %35, %9
  %.0 = phi i32 [ 1, %9 ], [ 1, %35 ], [ 0, %1143 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @get_timestamp(i32 %reversed) #0 {
  %t = alloca %struct.tm, align 8
  %str = alloca [20 x i8], align 16
  %1 = getelementptr inbounds [20 x i8]* %str, i32 0, i64 19
  store i8 0, i8* %1, align 1
  %2 = icmp ne i32 %reversed, 0
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %0
  br label %4

; <label>:4                                       ; preds = %7, %3
  %i.0 = phi i32 [ 19, %3 ], [ %5, %7 ]
  %5 = add nsw i32 %i.0, -1
  %6 = icmp ne i32 %i.0, 0
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %4
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i32 @getc_unlocked(%struct._IO_FILE* %8)
  %10 = trunc i32 %9 to i8
  %11 = sext i32 %5 to i64
  %12 = getelementptr inbounds [20 x i8]* %str, i32 0, i64 %11
  store i8 %10, i8* %12, align 1
  br label %4

; <label>:13                                      ; preds = %4
  br label %18

; <label>:14                                      ; preds = %0
  %15 = getelementptr inbounds [20 x i8]* %str, i32 0, i32 0
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i64 @fread(i8* %15, i64 19, i64 1, %struct._IO_FILE* %16)
  br label %18

; <label>:18                                      ; preds = %14, %13
  %19 = bitcast %struct.tm* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 56, i32 8, i1 false)
  %20 = getelementptr inbounds [20 x i8]* %str, i32 0, i32 0
  %21 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %22 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %23 = getelementptr inbounds %struct.tm* %t, i32 0, i32 3
  %24 = getelementptr inbounds %struct.tm* %t, i32 0, i32 2
  %25 = getelementptr inbounds %struct.tm* %t, i32 0, i32 1
  %26 = getelementptr inbounds %struct.tm* %t, i32 0, i32 0
  %27 = call i32 (i8*, i8*, ...)* @sscanf(i8* %20, i8* getelementptr inbounds ([18 x i8]* @.str108, i32 0, i32 0), i32* %21, i32* %22, i32* %23, i32* %24, i32* %25, i32* %26) #4
  %28 = icmp ne i32 %27, 6
  br i1 %28, label %29, label %30

; <label>:29                                      ; preds = %18
  br label %41

; <label>:30                                      ; preds = %18
  %31 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %32 = load i32* %31, align 4
  %33 = sub nsw i32 %32, 1900
  store i32 %33, i32* %31, align 4
  %34 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %35 = load i32* %34, align 4
  %36 = sub nsw i32 %35, 1
  store i32 %36, i32* %34, align 4
  %37 = call i64 @mktime(%struct.tm* %t) #4
  %38 = icmp sgt i64 %37, 0
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %30
  %40 = call i64 @mktime(%struct.tm* %t) #4
  store i64 %40, i64* @timestamp, align 8
  br label %41

; <label>:41                                      ; preds = %39, %30, %29
  ret void
}

; Function Attrs: nounwind
declare i64 @mktime(%struct.tm*) #3

; Function Attrs: nounwind uwtable
define void @parse_exif(i32 %base) #0 {
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %1 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str109, i32 0, i32 0), i64 7) #10
  %2 = icmp ne i32 %1, 0
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i32
  %5 = call zeroext i16 @get2()
  %6 = zext i16 %5 to i32
  br label %7

; <label>:7                                       ; preds = %73, %0
  %entries.0 = phi i32 [ %6, %0 ], [ %8, %73 ]
  %8 = add i32 %entries.0, -1
  %9 = icmp ne i32 %entries.0, 0
  br i1 %9, label %10, label %78

; <label>:10                                      ; preds = %7
  call void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save)
  %11 = load i32* %tag, align 4
  switch i32 %11, label %73 [
    i32 33434, label %12
    i32 33437, label %16
    i32 34855, label %20
    i32 36867, label %23
    i32 36868, label %23
    i32 37377, label %24
    i32 37378, label %33
    i32 37386, label %39
    i32 37500, label %43
    i32 40962, label %44
    i32 40963, label %50
    i32 41730, label %56
  ]

; <label>:12                                      ; preds = %10
  %13 = load i32* %type, align 4
  %14 = call double @getreal(i32 %13)
  %15 = fptrunc double %14 to float
  store float %15, float* @shutter, align 4
  br label %73

; <label>:16                                      ; preds = %10
  %17 = load i32* %type, align 4
  %18 = call double @getreal(i32 %17)
  %19 = fptrunc double %18 to float
  store float %19, float* @aperture, align 4
  br label %73

; <label>:20                                      ; preds = %10
  %21 = call zeroext i16 @get2()
  %22 = uitofp i16 %21 to float
  store float %22, float* @iso_speed, align 4
  br label %73

; <label>:23                                      ; preds = %10, %10
  call void @get_timestamp(i32 0)
  br label %73

; <label>:24                                      ; preds = %10
  %25 = load i32* %type, align 4
  %26 = call double @getreal(i32 %25)
  %27 = fsub double -0.000000e+00, %26
  %28 = fcmp olt double %27, 1.280000e+02
  br i1 %28, label %29, label %32

; <label>:29                                      ; preds = %24
  %30 = call double @pow(double 2.000000e+00, double %27) #4
  %31 = fptrunc double %30 to float
  store float %31, float* @shutter, align 4
  br label %32

; <label>:32                                      ; preds = %29, %24
  br label %73

; <label>:33                                      ; preds = %10
  %34 = load i32* %type, align 4
  %35 = call double @getreal(i32 %34)
  %36 = fdiv double %35, 2.000000e+00
  %37 = call double @pow(double 2.000000e+00, double %36) #4
  %38 = fptrunc double %37 to float
  store float %38, float* @aperture, align 4
  br label %73

; <label>:39                                      ; preds = %10
  %40 = load i32* %type, align 4
  %41 = call double @getreal(i32 %40)
  %42 = fptrunc double %41 to float
  store float %42, float* @focal_len, align 4
  br label %73

; <label>:43                                      ; preds = %10
  call void @parse_makernote(i32 %base, i32 0)
  br label %73

; <label>:44                                      ; preds = %10
  %45 = icmp ne i32 %4, 0
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %44
  %47 = call i32 @get4()
  %48 = trunc i32 %47 to i16
  store i16 %48, i16* @raw_width, align 2
  br label %49

; <label>:49                                      ; preds = %46, %44
  br label %73

; <label>:50                                      ; preds = %10
  %51 = icmp ne i32 %4, 0
  br i1 %51, label %52, label %55

; <label>:52                                      ; preds = %50
  %53 = call i32 @get4()
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* @raw_height, align 2
  br label %55

; <label>:55                                      ; preds = %52, %50
  br label %73

; <label>:56                                      ; preds = %10
  %57 = call i32 @get4()
  %58 = icmp eq i32 %57, 131074
  br i1 %58, label %59, label %72

; <label>:59                                      ; preds = %56
  store i32 0, i32* @exif_cfa, align 4
  br label %60

; <label>:60                                      ; preds = %69, %59
  %c.0 = phi i32 [ 0, %59 ], [ %70, %69 ]
  %61 = icmp ult i32 %c.0, 8
  br i1 %61, label %62, label %71

; <label>:62                                      ; preds = %60
  %63 = load %struct._IO_FILE** @ifp, align 8
  %64 = call i32 @getc_unlocked(%struct._IO_FILE* %63)
  %65 = mul nsw i32 %64, 16843009
  %66 = shl i32 %65, %c.0
  %67 = load i32* @exif_cfa, align 4
  %68 = or i32 %67, %66
  store i32 %68, i32* @exif_cfa, align 4
  br label %69

; <label>:69                                      ; preds = %62
  %70 = add i32 %c.0, 2
  br label %60

; <label>:71                                      ; preds = %60
  br label %72

; <label>:72                                      ; preds = %71, %56
  br label %73

; <label>:73                                      ; preds = %72, %55, %49, %43, %39, %33, %32, %23, %20, %16, %12, %10
  %74 = load %struct._IO_FILE** @ifp, align 8
  %75 = load i32* %save, align 4
  %76 = zext i32 %75 to i64
  %77 = call i32 @fseek(%struct._IO_FILE* %74, i64 %76, i32 0)
  br label %7

; <label>:78                                      ; preds = %7
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_gps(i32 %base) #0 {
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %1 = call zeroext i16 @get2()
  %2 = zext i16 %1 to i32
  br label %3

; <label>:3                                       ; preds = %56, %0
  %entries.0 = phi i32 [ %2, %0 ], [ %4, %56 ]
  %4 = add i32 %entries.0, -1
  %5 = icmp ne i32 %entries.0, 0
  br i1 %5, label %6, label %61

; <label>:6                                       ; preds = %3
  call void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save)
  %7 = load i32* %tag, align 4
  switch i32 %7, label %56 [
    i32 1, label %8
    i32 3, label %8
    i32 5, label %8
    i32 2, label %16
    i32 4, label %16
    i32 7, label %16
    i32 6, label %30
    i32 18, label %41
    i32 29, label %41
  ]

; <label>:8                                       ; preds = %6, %6, %6
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i32 @_IO_getc(%struct._IO_FILE* %9)
  %11 = load i32* %tag, align 4
  %12 = udiv i32 %11, 2
  %13 = add i32 29, %12
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [32 x i32]* @gpsdata, i32 0, i64 %14
  store i32 %10, i32* %15, align 4
  br label %56

; <label>:16                                      ; preds = %6, %6, %6
  br label %17

; <label>:17                                      ; preds = %27, %16
  %c.0 = phi i32 [ 0, %16 ], [ %28, %27 ]
  %18 = icmp ult i32 %c.0, 6
  br i1 %18, label %19, label %29

; <label>:19                                      ; preds = %17
  %20 = call i32 @get4()
  %21 = load i32* %tag, align 4
  %22 = udiv i32 %21, 3
  %23 = mul i32 %22, 6
  %24 = add i32 %23, %c.0
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [32 x i32]* @gpsdata, i32 0, i64 %25
  store i32 %20, i32* %26, align 4
  br label %27

; <label>:27                                      ; preds = %19
  %28 = add i32 %c.0, 1
  br label %17

; <label>:29                                      ; preds = %17
  br label %56

; <label>:30                                      ; preds = %6
  br label %31

; <label>:31                                      ; preds = %38, %30
  %c.1 = phi i32 [ 0, %30 ], [ %39, %38 ]
  %32 = icmp ult i32 %c.1, 2
  br i1 %32, label %33, label %40

; <label>:33                                      ; preds = %31
  %34 = call i32 @get4()
  %35 = add i32 18, %c.1
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [32 x i32]* @gpsdata, i32 0, i64 %36
  store i32 %34, i32* %37, align 4
  br label %38

; <label>:38                                      ; preds = %33
  %39 = add i32 %c.1, 1
  br label %31

; <label>:40                                      ; preds = %31
  br label %56

; <label>:41                                      ; preds = %6, %6
  %42 = load i32* %tag, align 4
  %43 = udiv i32 %42, 3
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 14), i64 %44
  %46 = bitcast i32* %45 to i8*
  %47 = load i32* %len, align 4
  %48 = icmp ult i32 %47, 12
  br i1 %48, label %49, label %51

; <label>:49                                      ; preds = %41
  %50 = load i32* %len, align 4
  br label %52

; <label>:51                                      ; preds = %41
  br label %52

; <label>:52                                      ; preds = %51, %49
  %53 = phi i32 [ %50, %49 ], [ 12, %51 ]
  %54 = load %struct._IO_FILE** @ifp, align 8
  %55 = call i8* @fgets(i8* %46, i32 %53, %struct._IO_FILE* %54)
  br label %56

; <label>:56                                      ; preds = %52, %40, %29, %8, %6
  %57 = load %struct._IO_FILE** @ifp, align 8
  %58 = load i32* %save, align 4
  %59 = zext i32 %58 to i64
  %60 = call i32 @fseek(%struct._IO_FILE* %57, i64 %59, i32 0)
  br label %3

; <label>:61                                      ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @romm_coeff([3 x float]* %romm_cam) #0 {
  br label %1

; <label>:1                                       ; preds = %37, %0
  %i.0 = phi i32 [ 0, %0 ], [ %38, %37 ]
  %2 = icmp slt i32 %i.0, 3
  br i1 %2, label %3, label %39

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %34, %3
  %j.0 = phi i32 [ 0, %3 ], [ %35, %34 ]
  %5 = icmp slt i32 %j.0, 3
  br i1 %5, label %6, label %36

; <label>:6                                       ; preds = %4
  %7 = sext i32 %j.0 to i64
  %8 = sext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %8
  %10 = getelementptr inbounds [4 x float]* %9, i32 0, i64 %7
  store float 0.000000e+00, float* %10, align 4
  br label %11

; <label>:11                                      ; preds = %31, %6
  %k.0 = phi i32 [ 0, %6 ], [ %32, %31 ]
  %12 = icmp slt i32 %k.0, 3
  br i1 %12, label %13, label %33

; <label>:13                                      ; preds = %11
  %14 = sext i32 %k.0 to i64
  %15 = sext i32 %i.0 to i64
  %16 = getelementptr inbounds [3 x [3 x float]]* @romm_coeff.rgb_romm, i32 0, i64 %15
  %17 = getelementptr inbounds [3 x float]* %16, i32 0, i64 %14
  %18 = load float* %17, align 4
  %19 = sext i32 %j.0 to i64
  %20 = sext i32 %k.0 to i64
  %21 = getelementptr inbounds [3 x float]* %romm_cam, i64 %20
  %22 = getelementptr inbounds [3 x float]* %21, i32 0, i64 %19
  %23 = load float* %22, align 4
  %24 = fmul float %18, %23
  %25 = sext i32 %j.0 to i64
  %26 = sext i32 %i.0 to i64
  %27 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %26
  %28 = getelementptr inbounds [4 x float]* %27, i32 0, i64 %25
  %29 = load float* %28, align 4
  %30 = fadd float %29, %24
  store float %30, float* %28, align 4
  br label %31

; <label>:31                                      ; preds = %13
  %32 = add nsw i32 %k.0, 1
  br label %11

; <label>:33                                      ; preds = %11
  br label %34

; <label>:34                                      ; preds = %33
  %35 = add nsw i32 %j.0, 1
  br label %4

; <label>:36                                      ; preds = %4
  br label %37

; <label>:37                                      ; preds = %36
  %38 = add nsw i32 %i.0, 1
  br label %1

; <label>:39                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_mos(i32 %offset) #0 {
  %data = alloca [40 x i8], align 16
  %i = alloca i32, align 4
  %neut = alloca [4 x i32], align 16
  %planes = alloca i32, align 4
  %romm_cam = alloca [3 x [3 x float]], align 16
  store i32 0, i32* %planes, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = sext i32 %offset to i64
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  br label %4

; <label>:4                                       ; preds = %164, %0
  %frot.0 = phi i32 [ 0, %0 ], [ %frot.3, %164 ]
  %5 = call i32 @get4()
  %6 = icmp ne i32 %5, 1347114067
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %4
  br label %169

; <label>:8                                       ; preds = %4
  %9 = call i32 @get4()
  %10 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = call i64 @fread(i8* %10, i64 1, i64 40, %struct._IO_FILE* %11)
  %13 = call i32 @get4()
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i64 @ftell(%struct._IO_FILE* %14)
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %18 = call i32 @strcmp(i8* %17, i8* getelementptr inbounds ([18 x i8]* @.str130, i32 0, i32 0)) #10
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %22, label %20

; <label>:20                                      ; preds = %8
  %21 = sext i32 %16 to i64
  store i64 %21, i64* @thumb_offset, align 8
  store i32 %13, i32* @thumb_length, align 4
  br label %22

; <label>:22                                      ; preds = %20, %8
  %23 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %24 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([19 x i8]* @.str131, i32 0, i32 0)) #10
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %28, label %26

; <label>:26                                      ; preds = %22
  %27 = sext i32 %16 to i64
  store i64 %27, i64* @profile_offset, align 8
  store i32 %13, i32* @profile_length, align 4
  br label %28

; <label>:28                                      ; preds = %26, %22
  %29 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %30 = call i32 @strcmp(i8* %29, i8* getelementptr inbounds ([19 x i8]* @.str132, i32 0, i32 0)) #10
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %45, label %32

; <label>:32                                      ; preds = %28
  %33 = load %struct._IO_FILE** @ifp, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %i)
  %35 = load i32* %i, align 4
  %36 = zext i32 %35 to i64
  %37 = icmp ult i64 %36, 21
  br i1 %37, label %38, label %44

; <label>:38                                      ; preds = %32
  %39 = load i32* %i, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [21 x i8*]* @parse_mos.mod, i32 0, i64 %40
  %42 = load i8** %41, align 8
  %43 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %42) #4
  br label %44

; <label>:44                                      ; preds = %38, %32
  br label %45

; <label>:45                                      ; preds = %44, %28
  %46 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %47 = call i32 @strcmp(i8* %46, i8* getelementptr inbounds ([26 x i8]* @.str134, i32 0, i32 0)) #10
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %65, label %49

; <label>:49                                      ; preds = %45
  store i32 0, i32* %i, align 4
  br label %50

; <label>:50                                      ; preds = %60, %49
  %51 = load i32* %i, align 4
  %52 = icmp slt i32 %51, 9
  br i1 %52, label %53, label %63

; <label>:53                                      ; preds = %50
  %54 = call i32 @get4()
  %55 = call float @int_to_float(i32 %54)
  %56 = load i32* %i, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i64 0
  %59 = getelementptr inbounds [3 x float]* %58, i32 0, i64 %57
  store float %55, float* %59, align 4
  br label %60

; <label>:60                                      ; preds = %53
  %61 = load i32* %i, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %i, align 4
  br label %50

; <label>:63                                      ; preds = %50
  %64 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i32 0
  call void @romm_coeff([3 x float]* %64)
  br label %65

; <label>:65                                      ; preds = %63, %45
  %66 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %67 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([22 x i8]* @.str135, i32 0, i32 0)) #10
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %85, label %69

; <label>:69                                      ; preds = %65
  store i32 0, i32* %i, align 4
  br label %70

; <label>:70                                      ; preds = %80, %69
  %71 = load i32* %i, align 4
  %72 = icmp slt i32 %71, 9
  br i1 %72, label %73, label %83

; <label>:73                                      ; preds = %70
  %74 = load %struct._IO_FILE** @ifp, align 8
  %75 = load i32* %i, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i64 0
  %78 = getelementptr inbounds [3 x float]* %77, i32 0, i64 %76
  %79 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([3 x i8]* @.str136, i32 0, i32 0), float* %78)
  br label %80

; <label>:80                                      ; preds = %73
  %81 = load i32* %i, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %i, align 4
  br label %70

; <label>:83                                      ; preds = %70
  %84 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i32 0
  call void @romm_coeff([3 x float]* %84)
  br label %85

; <label>:85                                      ; preds = %83, %65
  %86 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %87 = call i32 @strcmp(i8* %86, i8* getelementptr inbounds ([26 x i8]* @.str137, i32 0, i32 0)) #10
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %92, label %89

; <label>:89                                      ; preds = %85
  %90 = load %struct._IO_FILE** @ifp, align 8
  %91 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %planes)
  br label %92

; <label>:92                                      ; preds = %89, %85
  %93 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %94 = call i32 @strcmp(i8* %93, i8* getelementptr inbounds ([27 x i8]* @.str138, i32 0, i32 0)) #10
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %99, label %96

; <label>:96                                      ; preds = %92
  %97 = load %struct._IO_FILE** @ifp, align 8
  %98 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* @flip)
  br label %99

; <label>:99                                      ; preds = %96, %92
  %100 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %101 = call i32 @strcmp(i8* %100, i8* getelementptr inbounds ([24 x i8]* @.str139, i32 0, i32 0)) #10
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %118, label %103

; <label>:103                                     ; preds = %99
  br label %104

; <label>:104                                     ; preds = %115, %103
  %c.0 = phi i32 [ 0, %103 ], [ %116, %115 ]
  %frot.1 = phi i32 [ %frot.0, %103 ], [ %frot.2, %115 ]
  %105 = icmp slt i32 %c.0, 4
  br i1 %105, label %106, label %117

; <label>:106                                     ; preds = %104
  %107 = load %struct._IO_FILE** @ifp, align 8
  %108 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %107, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %i)
  %109 = load i32* %i, align 4
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %111, label %114

; <label>:111                                     ; preds = %106
  %112 = ashr i32 %c.0, 1
  %113 = xor i32 %c.0, %112
  br label %114

; <label>:114                                     ; preds = %111, %106
  %frot.2 = phi i32 [ %113, %111 ], [ %frot.1, %106 ]
  br label %115

; <label>:115                                     ; preds = %114
  %116 = add nsw i32 %c.0, 1
  br label %104

; <label>:117                                     ; preds = %104
  br label %118

; <label>:118                                     ; preds = %117, %99
  %frot.3 = phi i32 [ %frot.0, %99 ], [ %frot.1, %117 ]
  %119 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %120 = call i32 @strcmp(i8* %119, i8* getelementptr inbounds ([23 x i8]* @.str140, i32 0, i32 0)) #10
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %128, label %122

; <label>:122                                     ; preds = %118
  %123 = load %struct._IO_FILE** @ifp, align 8
  %124 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %i)
  %125 = load i32* %i, align 4
  %126 = load i32* @flip, align 4
  %127 = sub nsw i32 %125, %126
  store i32 %127, i32* @flip, align 4
  br label %128

; <label>:128                                     ; preds = %122, %118
  %129 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([17 x i8]* @.str141, i32 0, i32 0)) #10
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %164, label %132

; <label>:132                                     ; preds = %128
  %133 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %134 = fcmp une float %133, 0.000000e+00
  br i1 %134, label %164, label %135

; <label>:135                                     ; preds = %132
  br label %136

; <label>:136                                     ; preds = %144, %135
  %c.1 = phi i32 [ 0, %135 ], [ %145, %144 ]
  %137 = icmp slt i32 %c.1, 4
  br i1 %137, label %138, label %146

; <label>:138                                     ; preds = %136
  %139 = load %struct._IO_FILE** @ifp, align 8
  %140 = getelementptr inbounds [4 x i32]* %neut, i32 0, i32 0
  %141 = sext i32 %c.1 to i64
  %142 = getelementptr inbounds i32* %140, i64 %141
  %143 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %139, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %142)
  br label %144

; <label>:144                                     ; preds = %138
  %145 = add nsw i32 %c.1, 1
  br label %136

; <label>:146                                     ; preds = %136
  br label %147

; <label>:147                                     ; preds = %161, %146
  %c.2 = phi i32 [ 0, %146 ], [ %162, %161 ]
  %148 = icmp slt i32 %c.2, 3
  br i1 %148, label %149, label %163

; <label>:149                                     ; preds = %147
  %150 = getelementptr inbounds [4 x i32]* %neut, i32 0, i64 0
  %151 = load i32* %150, align 4
  %152 = sitofp i32 %151 to float
  %153 = add nsw i32 %c.2, 1
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [4 x i32]* %neut, i32 0, i64 %154
  %156 = load i32* %155, align 4
  %157 = sitofp i32 %156 to float
  %158 = fdiv float %152, %157
  %159 = sext i32 %c.2 to i64
  %160 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %159
  store float %158, float* %160, align 4
  br label %161

; <label>:161                                     ; preds = %149
  %162 = add nsw i32 %c.2, 1
  br label %147

; <label>:163                                     ; preds = %147
  br label %164

; <label>:164                                     ; preds = %163, %132, %128
  call void @parse_mos(i32 %16)
  %165 = load %struct._IO_FILE** @ifp, align 8
  %166 = add nsw i32 %13, %16
  %167 = sext i32 %166 to i64
  %168 = call i32 @fseek(%struct._IO_FILE* %165, i64 %167, i32 0)
  br label %4

; <label>:169                                     ; preds = %7
  %170 = load i32* %planes, align 4
  %171 = icmp ne i32 %170, 0
  br i1 %171, label %172, label %186

; <label>:172                                     ; preds = %169
  %173 = load i32* %planes, align 4
  %174 = icmp eq i32 %173, 1
  %175 = zext i1 %174 to i32
  %176 = mul nsw i32 %175, 16843009
  %177 = load i32* @flip, align 4
  %178 = sdiv i32 %177, 90
  %179 = add nsw i32 %178, %frot.0
  %180 = and i32 %179, 3
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [5 x i8]* @.str142, i32 0, i64 %181
  %183 = load i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = mul nsw i32 %176, %184
  store i32 %185, i32* @filters, align 4
  br label %186

; <label>:186                                     ; preds = %172, %169
  ret void
}

declare i32 @fscanf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define void @linear_table(i32 %len) #0 {
  %1 = icmp ugt i32 %len, 4096
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  br label %3

; <label>:3                                       ; preds = %2, %0
  %.0 = phi i32 [ 4096, %2 ], [ %len, %0 ]
  call void @read_shorts(i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i32 0), i32 %.0)
  br label %4

; <label>:4                                       ; preds = %13, %3
  %i.0 = phi i32 [ %.0, %3 ], [ %14, %13 ]
  %5 = icmp slt i32 %i.0, 4096
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %4
  %7 = sub nsw i32 %i.0, 1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %8
  %10 = load i16* %9, align 2
  %11 = sext i32 %i.0 to i64
  %12 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %11
  store i16 %10, i16* %12, align 2
  br label %13

; <label>:13                                      ; preds = %6
  %14 = add nsw i32 %i.0, 1
  br label %4

; <label>:15                                      ; preds = %4
  %16 = load i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i64 4095), align 2
  %17 = zext i16 %16 to i32
  store i32 %17, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_kodak_ifd(i32 %base) #0 {
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %mul = alloca [3 x float], align 4
  %1 = call zeroext i16 @get2()
  %2 = zext i16 %1 to i32
  %3 = icmp ugt i32 %2, 1024
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  br label %112

; <label>:5                                       ; preds = %0
  br label %6

; <label>:6                                       ; preds = %107, %5
  %wbtemp.0 = phi i32 [ 6500, %5 ], [ %wbtemp.1, %107 ]
  %wbi.0 = phi i32 [ -2, %5 ], [ %wbi.2, %107 ]
  %entries.0 = phi i32 [ %2, %5 ], [ %7, %107 ]
  %7 = add i32 %entries.0, -1
  %8 = icmp ne i32 %entries.0, 0
  br i1 %8, label %9, label %112

; <label>:9                                       ; preds = %6
  call void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save)
  %10 = load i32* %tag, align 4
  %11 = icmp eq i32 %10, 1020
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %9
  %13 = load i32* %type, align 4
  %14 = call i32 @getint(i32 %13)
  br label %15

; <label>:15                                      ; preds = %12, %9
  %wbi.1 = phi i32 [ %14, %12 ], [ %wbi.0, %9 ]
  %16 = load i32* %tag, align 4
  %17 = icmp eq i32 %16, 1021
  br i1 %17, label %18, label %37

; <label>:18                                      ; preds = %15
  %19 = load i32* %len, align 4
  %20 = icmp eq i32 %19, 72
  br i1 %20, label %21, label %37

; <label>:21                                      ; preds = %18
  %22 = load %struct._IO_FILE** @ifp, align 8
  %23 = call i32 @fseek(%struct._IO_FILE* %22, i64 40, i32 1)
  br label %24

; <label>:24                                      ; preds = %34, %21
  %c.0 = phi i32 [ 0, %21 ], [ %35, %34 ]
  %25 = icmp slt i32 %c.0, 3
  br i1 %25, label %26, label %36

; <label>:26                                      ; preds = %24
  %27 = call zeroext i16 @get2()
  %28 = zext i16 %27 to i32
  %29 = sitofp i32 %28 to double
  %30 = fdiv double 2.048000e+03, %29
  %31 = fptrunc double %30 to float
  %32 = sext i32 %c.0 to i64
  %33 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %32
  store float %31, float* %33, align 4
  br label %34

; <label>:34                                      ; preds = %26
  %35 = add nsw i32 %c.0, 1
  br label %24

; <label>:36                                      ; preds = %24
  br label %37

; <label>:37                                      ; preds = %36, %18, %15
  %wbi.2 = phi i32 [ -2, %36 ], [ %wbi.1, %18 ], [ %wbi.1, %15 ]
  %38 = load i32* %tag, align 4
  %39 = icmp eq i32 %38, 2118
  br i1 %39, label %40, label %43

; <label>:40                                      ; preds = %37
  %41 = load i32* %type, align 4
  %42 = call i32 @getint(i32 %41)
  br label %43

; <label>:43                                      ; preds = %40, %37
  %wbtemp.1 = phi i32 [ %42, %40 ], [ %wbtemp.0, %37 ]
  %44 = load i32* %tag, align 4
  %45 = add nsw i32 2130, %wbi.2
  %46 = icmp eq i32 %44, %45
  br i1 %46, label %47, label %59

; <label>:47                                      ; preds = %43
  br label %48

; <label>:48                                      ; preds = %56, %47
  %c.1 = phi i32 [ 0, %47 ], [ %57, %56 ]
  %49 = icmp slt i32 %c.1, 3
  br i1 %49, label %50, label %58

; <label>:50                                      ; preds = %48
  %51 = load i32* %type, align 4
  %52 = call double @getreal(i32 %51)
  %53 = fptrunc double %52 to float
  %54 = sext i32 %c.1 to i64
  %55 = getelementptr inbounds [3 x float]* %mul, i32 0, i64 %54
  store float %53, float* %55, align 4
  br label %56

; <label>:56                                      ; preds = %50
  %57 = add nsw i32 %c.1, 1
  br label %48

; <label>:58                                      ; preds = %48
  br label %59

; <label>:59                                      ; preds = %58, %43
  %60 = load i32* %tag, align 4
  %61 = add nsw i32 2140, %wbi.2
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %63, label %95

; <label>:63                                      ; preds = %59
  %64 = icmp sge i32 %wbi.2, 0
  br i1 %64, label %65, label %95

; <label>:65                                      ; preds = %63
  br label %66

; <label>:66                                      ; preds = %92, %65
  %c.2 = phi i32 [ 0, %65 ], [ %93, %92 ]
  %67 = icmp slt i32 %c.2, 3
  br i1 %67, label %68, label %94

; <label>:68                                      ; preds = %66
  br label %69

; <label>:69                                      ; preds = %82, %68
  %i.0 = phi i32 [ 0, %68 ], [ %83, %82 ]
  %num.0 = phi float [ 0.000000e+00, %68 ], [ %81, %82 ]
  %70 = icmp slt i32 %i.0, 4
  br i1 %70, label %71, label %84

; <label>:71                                      ; preds = %69
  %72 = load i32* %type, align 4
  %73 = call double @getreal(i32 %72)
  %74 = sitofp i32 %wbtemp.1 to double
  %75 = fdiv double %74, 1.000000e+02
  %76 = sitofp i32 %i.0 to double
  %77 = call double @pow(double %75, double %76) #4
  %78 = fmul double %73, %77
  %79 = fpext float %num.0 to double
  %80 = fadd double %79, %78
  %81 = fptrunc double %80 to float
  br label %82

; <label>:82                                      ; preds = %71
  %83 = add nsw i32 %i.0, 1
  br label %69

; <label>:84                                      ; preds = %69
  %85 = sext i32 %c.2 to i64
  %86 = getelementptr inbounds [3 x float]* %mul, i32 0, i64 %85
  %87 = load float* %86, align 4
  %88 = fmul float %num.0, %87
  %89 = fdiv float 2.048000e+03, %88
  %90 = sext i32 %c.2 to i64
  %91 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %90
  store float %89, float* %91, align 4
  br label %92

; <label>:92                                      ; preds = %84
  %93 = add nsw i32 %c.2, 1
  br label %66

; <label>:94                                      ; preds = %66
  br label %95

; <label>:95                                      ; preds = %94, %63, %59
  %96 = load i32* %tag, align 4
  %97 = icmp eq i32 %96, 2317
  br i1 %97, label %98, label %100

; <label>:98                                      ; preds = %95
  %99 = load i32* %len, align 4
  call void @linear_table(i32 %99)
  br label %100

; <label>:100                                     ; preds = %98, %95
  %101 = load i32* %tag, align 4
  %102 = icmp eq i32 %101, 6020
  br i1 %102, label %103, label %107

; <label>:103                                     ; preds = %100
  %104 = load i32* %type, align 4
  %105 = call i32 @getint(i32 %104)
  %106 = uitofp i32 %105 to float
  store float %106, float* @iso_speed, align 4
  br label %107

; <label>:107                                     ; preds = %103, %100
  %108 = load %struct._IO_FILE** @ifp, align 8
  %109 = load i32* %save, align 4
  %110 = zext i32 %109 to i64
  %111 = call i32 @fseek(%struct._IO_FILE* %108, i64 %110, i32 0)
  br label %6

; <label>:112                                     ; preds = %6, %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_minolta(i32 %base) #0 {
  %1 = load i16* @order, align 2
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = sext i32 %base to i64
  %4 = call i32 @fseek(%struct._IO_FILE* %2, i64 %3, i32 0)
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i32 @getc_unlocked(%struct._IO_FILE* %5)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %18, label %8

; <label>:8                                       ; preds = %0
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i32 @getc_unlocked(%struct._IO_FILE* %9)
  %11 = sub nsw i32 %10, 77
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %18, label %13

; <label>:13                                      ; preds = %8
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i32 @getc_unlocked(%struct._IO_FILE* %14)
  %16 = sub nsw i32 %15, 82
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %13, %8, %0
  br label %83

; <label>:19                                      ; preds = %13
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i32 @getc_unlocked(%struct._IO_FILE* %20)
  %22 = mul nsw i32 %21, 257
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* @order, align 2
  %24 = call i32 @get4()
  %25 = add i32 %base, %24
  %26 = add i32 %25, 8
  br label %27

; <label>:27                                      ; preds = %74, %19
  %high.0 = phi i32 [ 0, %19 ], [ %high.1, %74 ]
  %wide.0 = phi i32 [ 0, %19 ], [ %wide.1, %74 ]
  %28 = load %struct._IO_FILE** @ifp, align 8
  %29 = call i64 @ftell(%struct._IO_FILE* %28)
  %30 = trunc i64 %29 to i32
  %31 = icmp slt i32 %30, %26
  br i1 %31, label %32, label %80

; <label>:32                                      ; preds = %27
  br label %33

; <label>:33                                      ; preds = %40, %32
  %tag.0 = phi i32 [ 0, %32 ], [ %39, %40 ]
  %i.0 = phi i32 [ 0, %32 ], [ %41, %40 ]
  %34 = icmp slt i32 %i.0, 4
  br i1 %34, label %35, label %42

; <label>:35                                      ; preds = %33
  %36 = shl i32 %tag.0, 8
  %37 = load %struct._IO_FILE** @ifp, align 8
  %38 = call i32 @getc_unlocked(%struct._IO_FILE* %37)
  %39 = or i32 %36, %38
  br label %40

; <label>:40                                      ; preds = %35
  %41 = add nsw i32 %i.0, 1
  br label %33

; <label>:42                                      ; preds = %33
  %43 = call i32 @get4()
  switch i32 %tag.0, label %74 [
    i32 5263940, label %44
    i32 5718599, label %51
    i32 5526615, label %69
  ]

; <label>:44                                      ; preds = %42
  %45 = load %struct._IO_FILE** @ifp, align 8
  %46 = call i32 @fseek(%struct._IO_FILE* %45, i64 8, i32 1)
  %47 = call zeroext i16 @get2()
  %48 = zext i16 %47 to i32
  %49 = call zeroext i16 @get2()
  %50 = zext i16 %49 to i32
  br label %74

; <label>:51                                      ; preds = %42
  %52 = call i32 @get4()
  %53 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str162, i32 0, i32 0)) #10
  %54 = icmp ne i32 %53, 0
  %55 = select i1 %54, i32 0, i32 3
  br label %56

; <label>:56                                      ; preds = %66, %51
  %c.0 = phi i32 [ 0, %51 ], [ %67, %66 ]
  %57 = icmp slt i32 %c.0, 4
  br i1 %57, label %58, label %68

; <label>:58                                      ; preds = %56
  %59 = call zeroext i16 @get2()
  %60 = uitofp i16 %59 to float
  %61 = ashr i32 %c.0, 1
  %62 = xor i32 %c.0, %61
  %63 = xor i32 %62, %55
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %64
  store float %60, float* %65, align 4
  br label %66

; <label>:66                                      ; preds = %58
  %67 = add nsw i32 %c.0, 1
  br label %56

; <label>:68                                      ; preds = %56
  br label %74

; <label>:69                                      ; preds = %42
  %70 = load %struct._IO_FILE** @ifp, align 8
  %71 = call i64 @ftell(%struct._IO_FILE* %70)
  %72 = trunc i64 %71 to i32
  call void @parse_tiff(i32 %72)
  %73 = sext i32 %26 to i64
  store i64 %73, i64* @data_offset, align 8
  br label %74

; <label>:74                                      ; preds = %69, %68, %44, %42
  %high.1 = phi i32 [ %high.0, %42 ], [ %high.0, %69 ], [ %high.0, %68 ], [ %48, %44 ]
  %wide.1 = phi i32 [ %wide.0, %42 ], [ %wide.0, %69 ], [ %wide.0, %68 ], [ %50, %44 ]
  %75 = load %struct._IO_FILE** @ifp, align 8
  %76 = add nsw i32 %30, %43
  %77 = add nsw i32 %76, 8
  %78 = sext i32 %77 to i64
  %79 = call i32 @fseek(%struct._IO_FILE* %75, i64 %78, i32 0)
  br label %27

; <label>:80                                      ; preds = %27
  %81 = trunc i32 %high.0 to i16
  store i16 %81, i16* @raw_height, align 2
  %82 = trunc i32 %wide.0 to i16
  store i16 %82, i16* @raw_width, align 2
  store i16 %1, i16* @order, align 2
  br label %83

; <label>:83                                      ; preds = %80, %18
  ret void
}

declare %struct._IO_FILE* @tmpfile() #1

; Function Attrs: nounwind uwtable
define void @parse_tiff(i32 %base) #0 {
  %jh = alloca %struct.jhead, align 8
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = sext i32 %base to i64
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = call zeroext i16 @get2()
  store i16 %4, i16* @order, align 2
  %5 = load i16* @order, align 2
  %6 = sext i16 %5 to i32
  %7 = icmp ne i32 %6, 18761
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %0
  %9 = load i16* @order, align 2
  %10 = sext i16 %9 to i32
  %11 = icmp ne i32 %10, 19789
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  br label %364

; <label>:13                                      ; preds = %8, %0
  %14 = call zeroext i16 @get2()
  call void @llvm.memset.p0i8.i64(i8* bitcast ([10 x %struct.anon.2]* @tiff_ifd to i8*), i8 0, i64 360, i32 16, i1 false)
  store i32 0, i32* @tiff_nifds, align 4
  br label %15

; <label>:15                                      ; preds = %26, %13
  %16 = call i32 @get4()
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %15
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = add nsw i32 %16, %base
  %21 = sext i32 %20 to i64
  %22 = call i32 @fseek(%struct._IO_FILE* %19, i64 %21, i32 0)
  %23 = call i32 @parse_tiff_ifd(i32 %base)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %18
  br label %27

; <label>:26                                      ; preds = %18
  br label %15

; <label>:27                                      ; preds = %25, %15
  store i32 16, i32* @thumb_misc, align 4
  %28 = load i64* @thumb_offset, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %46

; <label>:30                                      ; preds = %27
  %31 = load %struct._IO_FILE** @ifp, align 8
  %32 = load i64* @thumb_offset, align 8
  %33 = call i32 @fseek(%struct._IO_FILE* %31, i64 %32, i32 0)
  %34 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %45

; <label>:36                                      ; preds = %30
  %37 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %38 = load i32* %37, align 4
  store i32 %38, i32* @thumb_misc, align 4
  %39 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %40 = load i32* %39, align 4
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* @thumb_width, align 2
  %42 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %43 = load i32* %42, align 4
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* @thumb_height, align 2
  br label %45

; <label>:45                                      ; preds = %36, %30
  br label %46

; <label>:46                                      ; preds = %45, %27
  br label %47

; <label>:47                                      ; preds = %125, %46
  %raw.0 = phi i32 [ -1, %46 ], [ %raw.1, %125 ]
  %max_samp.0 = phi i32 [ 0, %46 ], [ %max_samp.2, %125 ]
  %i.0 = phi i32 [ 0, %46 ], [ %126, %125 ]
  %48 = load i32* @tiff_nifds, align 4
  %49 = icmp ult i32 %i.0, %48
  br i1 %49, label %50, label %127

; <label>:50                                      ; preds = %47
  %51 = sext i32 %i.0 to i64
  %52 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %51
  %53 = getelementptr inbounds %struct.anon.2* %52, i32 0, i32 7
  %54 = load i32* %53, align 4
  %55 = icmp slt i32 %max_samp.0, %54
  br i1 %55, label %56, label %61

; <label>:56                                      ; preds = %50
  %57 = sext i32 %i.0 to i64
  %58 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %57
  %59 = getelementptr inbounds %struct.anon.2* %58, i32 0, i32 7
  %60 = load i32* %59, align 4
  br label %61

; <label>:61                                      ; preds = %56, %50
  %max_samp.1 = phi i32 [ %60, %56 ], [ %max_samp.0, %50 ]
  %62 = icmp sgt i32 %max_samp.1, 3
  br i1 %62, label %63, label %64

; <label>:63                                      ; preds = %61
  br label %64

; <label>:64                                      ; preds = %63, %61
  %max_samp.2 = phi i32 [ 3, %63 ], [ %max_samp.1, %61 ]
  %65 = sext i32 %i.0 to i64
  %66 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %65
  %67 = getelementptr inbounds %struct.anon.2* %66, i32 0, i32 3
  %68 = load i32* %67, align 4
  %69 = icmp ne i32 %68, 6
  br i1 %69, label %76, label %70

; <label>:70                                      ; preds = %64
  %71 = sext i32 %i.0 to i64
  %72 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %71
  %73 = getelementptr inbounds %struct.anon.2* %72, i32 0, i32 7
  %74 = load i32* %73, align 4
  %75 = icmp ne i32 %74, 3
  br i1 %75, label %76, label %124

; <label>:76                                      ; preds = %70, %64
  %77 = sext i32 %i.0 to i64
  %78 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %77
  %79 = getelementptr inbounds %struct.anon.2* %78, i32 0, i32 0
  %80 = load i32* %79, align 4
  %81 = sext i32 %i.0 to i64
  %82 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %81
  %83 = getelementptr inbounds %struct.anon.2* %82, i32 0, i32 1
  %84 = load i32* %83, align 4
  %85 = mul nsw i32 %80, %84
  %86 = load i16* @raw_width, align 2
  %87 = zext i16 %86 to i32
  %88 = load i16* @raw_height, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nsw i32 %87, %89
  %91 = icmp sgt i32 %85, %90
  br i1 %91, label %92, label %124

; <label>:92                                      ; preds = %76
  %93 = sext i32 %i.0 to i64
  %94 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %93
  %95 = getelementptr inbounds %struct.anon.2* %94, i32 0, i32 0
  %96 = load i32* %95, align 4
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* @raw_width, align 2
  %98 = sext i32 %i.0 to i64
  %99 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %98
  %100 = getelementptr inbounds %struct.anon.2* %99, i32 0, i32 1
  %101 = load i32* %100, align 4
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* @raw_height, align 2
  %103 = sext i32 %i.0 to i64
  %104 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %103
  %105 = getelementptr inbounds %struct.anon.2* %104, i32 0, i32 2
  %106 = load i32* %105, align 4
  store i32 %106, i32* @tiff_bps, align 4
  %107 = sext i32 %i.0 to i64
  %108 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %107
  %109 = getelementptr inbounds %struct.anon.2* %108, i32 0, i32 3
  %110 = load i32* %109, align 4
  store i32 %110, i32* @tiff_compress, align 4
  %111 = sext i32 %i.0 to i64
  %112 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %111
  %113 = getelementptr inbounds %struct.anon.2* %112, i32 0, i32 5
  %114 = load i32* %113, align 4
  %115 = sext i32 %114 to i64
  store i64 %115, i64* @data_offset, align 8
  %116 = sext i32 %i.0 to i64
  %117 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %116
  %118 = getelementptr inbounds %struct.anon.2* %117, i32 0, i32 6
  %119 = load i32* %118, align 4
  store i32 %119, i32* @tiff_flip, align 4
  %120 = sext i32 %i.0 to i64
  %121 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %120
  %122 = getelementptr inbounds %struct.anon.2* %121, i32 0, i32 7
  %123 = load i32* %122, align 4
  store i32 %123, i32* @tiff_samples, align 4
  br label %124

; <label>:124                                     ; preds = %92, %76, %70
  %raw.1 = phi i32 [ %i.0, %92 ], [ %raw.0, %76 ], [ %raw.0, %70 ]
  br label %125

; <label>:125                                     ; preds = %124
  %126 = add nsw i32 %i.0, 1
  br label %47

; <label>:127                                     ; preds = %47
  %128 = load i16* @raw_width, align 2
  %129 = zext i16 %128 to i32
  %130 = add nsw i32 %129, 1
  %131 = sdiv i32 %130, 2
  %132 = load i16* @fuji_width, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nsw i32 %133, %131
  %135 = trunc i32 %134 to i16
  store i16 %135, i16* @fuji_width, align 2
  %136 = load i32* getelementptr inbounds ([10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 0, i32 6), align 4
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %140

; <label>:138                                     ; preds = %127
  %139 = load i32* getelementptr inbounds ([10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 0, i32 6), align 4
  store i32 %139, i32* @tiff_flip, align 4
  br label %140

; <label>:140                                     ; preds = %138, %127
  %141 = icmp sge i32 %raw.0, 0
  br i1 %141, label %142, label %216

; <label>:142                                     ; preds = %140
  %143 = load void (...)** @load_raw, align 8
  %144 = icmp ne void (...)* %143, null
  br i1 %144, label %216, label %145

; <label>:145                                     ; preds = %142
  %146 = load i32* @tiff_compress, align 4
  switch i32 %146, label %214 [
    i32 0, label %147
    i32 1, label %147
    i32 6, label %178
    i32 7, label %178
    i32 99, label %178
    i32 262, label %179
    i32 32767, label %180
    i32 32769, label %200
    i32 32773, label %201
    i32 34713, label %202
    i32 65535, label %203
    i32 65000, label %204
    i32 32867, label %213
  ]

; <label>:147                                     ; preds = %145, %145
  %148 = load i32* @tiff_bps, align 4
  switch i32 %148, label %163 [
    i32 8, label %149
    i32 12, label %150
    i32 14, label %162
    i32 16, label %162
  ]

; <label>:149                                     ; preds = %147
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %163

; <label>:150                                     ; preds = %147
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  %151 = sext i32 %raw.0 to i64
  %152 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %151
  %153 = getelementptr inbounds %struct.anon.2* %152, i32 0, i32 4
  %154 = load i32* %153, align 4
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %156, label %157

; <label>:156                                     ; preds = %150
  store i32 6, i32* @load_flags, align 4
  br label %157

; <label>:157                                     ; preds = %156, %150
  %158 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str105, i32 0, i32 0), i64 6) #10
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %160, label %161

; <label>:160                                     ; preds = %157
  br label %163

; <label>:161                                     ; preds = %157
  br label %162

; <label>:162                                     ; preds = %161, %147, %147
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %163

; <label>:163                                     ; preds = %162, %160, %149, %147
  %164 = sext i32 %raw.0 to i64
  %165 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %164
  %166 = getelementptr inbounds %struct.anon.2* %165, i32 0, i32 8
  %167 = load i32* %166, align 4
  %168 = mul nsw i32 %167, 5
  %169 = load i16* @raw_width, align 2
  %170 = zext i16 %169 to i32
  %171 = load i16* @raw_height, align 2
  %172 = zext i16 %171 to i32
  %173 = mul nsw i32 %170, %172
  %174 = mul nsw i32 %173, 8
  %175 = icmp eq i32 %168, %174
  br i1 %175, label %176, label %177

; <label>:176                                     ; preds = %163
  store void (...)* bitcast (void ()* @olympus_e300_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %177

; <label>:177                                     ; preds = %176, %163
  br label %215

; <label>:178                                     ; preds = %145, %145, %145
  store void (...)* bitcast (void ()* @lossless_jpeg_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %215

; <label>:179                                     ; preds = %145
  store void (...)* bitcast (void ()* @kodak_262_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %215

; <label>:180                                     ; preds = %145
  store void (...)* bitcast (void ()* @sony_arw2_load_raw to void (...)*), void (...)** @load_raw, align 8
  %181 = sext i32 %raw.0 to i64
  %182 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %181
  %183 = getelementptr inbounds %struct.anon.2* %182, i32 0, i32 8
  %184 = load i32* %183, align 4
  %185 = mul nsw i32 %184, 8
  %186 = load i16* @raw_width, align 2
  %187 = zext i16 %186 to i32
  %188 = load i16* @raw_height, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nsw i32 %187, %189
  %191 = load i32* @tiff_bps, align 4
  %192 = mul i32 %190, %191
  %193 = icmp eq i32 %185, %192
  br i1 %193, label %194, label %195

; <label>:194                                     ; preds = %180
  br label %215

; <label>:195                                     ; preds = %180
  %196 = load i16* @raw_height, align 2
  %197 = zext i16 %196 to i32
  %198 = add nsw i32 %197, 8
  %199 = trunc i32 %198 to i16
  store i16 %199, i16* @raw_height, align 2
  store void (...)* bitcast (void ()* @sony_arw_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %215

; <label>:200                                     ; preds = %145
  store i32 8, i32* @load_flags, align 4
  br label %201

; <label>:201                                     ; preds = %200, %145
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %215

; <label>:202                                     ; preds = %145
  store void (...)* bitcast (void ()* @nikon_compressed_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %215

; <label>:203                                     ; preds = %145
  store void (...)* bitcast (void ()* @pentax_k10_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %215

; <label>:204                                     ; preds = %145
  %205 = sext i32 %raw.0 to i64
  %206 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %205
  %207 = getelementptr inbounds %struct.anon.2* %206, i32 0, i32 4
  %208 = load i32* %207, align 4
  switch i32 %208, label %212 [
    i32 2, label %209
    i32 6, label %210
    i32 32803, label %211
  ]

; <label>:209                                     ; preds = %204
  store void (...)* bitcast (void ()* @kodak_rgb_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 0, i32* @filters, align 4
  br label %212

; <label>:210                                     ; preds = %204
  store void (...)* bitcast (void ()* @kodak_ycbcr_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 0, i32* @filters, align 4
  br label %212

; <label>:211                                     ; preds = %204
  store void (...)* bitcast (void ()* @kodak_65000_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %212

; <label>:212                                     ; preds = %211, %210, %209, %204
  br label %213

; <label>:213                                     ; preds = %212, %145
  br label %215

; <label>:214                                     ; preds = %145
  store i32 0, i32* @is_raw, align 4
  br label %215

; <label>:215                                     ; preds = %214, %213, %203, %202, %201, %195, %194, %179, %178, %177
  br label %216

; <label>:216                                     ; preds = %215, %142, %140
  %217 = load i32* @dng_version, align 4
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %236, label %219

; <label>:219                                     ; preds = %216
  %220 = load i32* @tiff_samples, align 4
  %221 = icmp eq i32 %220, 3
  br i1 %221, label %222, label %236

; <label>:222                                     ; preds = %219
  %223 = sext i32 %raw.0 to i64
  %224 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %223
  %225 = getelementptr inbounds %struct.anon.2* %224, i32 0, i32 8
  %226 = load i32* %225, align 4
  %227 = icmp ne i32 %226, 0
  br i1 %227, label %228, label %235

; <label>:228                                     ; preds = %222
  %229 = load i32* @tiff_bps, align 4
  %230 = icmp ne i32 %229, 14
  br i1 %230, label %231, label %235

; <label>:231                                     ; preds = %228
  %232 = load i32* @tiff_bps, align 4
  %233 = icmp ne i32 %232, 2048
  br i1 %233, label %234, label %235

; <label>:234                                     ; preds = %231
  store i32 0, i32* @is_raw, align 4
  br label %235

; <label>:235                                     ; preds = %234, %231, %228, %222
  br label %236

; <label>:236                                     ; preds = %235, %219, %216
  %237 = load i32* @dng_version, align 4
  %238 = icmp ne i32 %237, 0
  br i1 %238, label %252, label %239

; <label>:239                                     ; preds = %236
  %240 = load i32* @tiff_bps, align 4
  %241 = icmp eq i32 %240, 8
  br i1 %241, label %242, label %252

; <label>:242                                     ; preds = %239
  %243 = load i32* @tiff_compress, align 4
  %244 = icmp eq i32 %243, 1
  br i1 %244, label %245, label %252

; <label>:245                                     ; preds = %242
  %246 = sext i32 %raw.0 to i64
  %247 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %246
  %248 = getelementptr inbounds %struct.anon.2* %247, i32 0, i32 4
  %249 = load i32* %248, align 4
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %251, label %252

; <label>:251                                     ; preds = %245
  store i32 0, i32* @is_raw, align 4
  br label %252

; <label>:252                                     ; preds = %251, %245, %242, %239, %236
  %253 = load i32* @tiff_bps, align 4
  %254 = icmp eq i32 %253, 8
  br i1 %254, label %255, label %259

; <label>:255                                     ; preds = %252
  %256 = load i32* @tiff_samples, align 4
  %257 = icmp eq i32 %256, 4
  br i1 %257, label %258, label %259

; <label>:258                                     ; preds = %255
  store i32 0, i32* @is_raw, align 4
  br label %259

; <label>:259                                     ; preds = %258, %255, %252
  br label %260

; <label>:260                                     ; preds = %330, %259
  %thm.0 = phi i32 [ -1, %259 ], [ %thm.1, %330 ]
  %i.1 = phi i32 [ 0, %259 ], [ %331, %330 ]
  %261 = load i32* @tiff_nifds, align 4
  %262 = icmp ult i32 %i.1, %261
  br i1 %262, label %263, label %332

; <label>:263                                     ; preds = %260
  %264 = icmp ne i32 %i.1, %raw.0
  br i1 %264, label %265, label %329

; <label>:265                                     ; preds = %263
  %266 = sext i32 %i.1 to i64
  %267 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %266
  %268 = getelementptr inbounds %struct.anon.2* %267, i32 0, i32 7
  %269 = load i32* %268, align 4
  %270 = icmp eq i32 %269, %max_samp.0
  br i1 %270, label %271, label %329

; <label>:271                                     ; preds = %265
  %272 = sext i32 %i.1 to i64
  %273 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %272
  %274 = getelementptr inbounds %struct.anon.2* %273, i32 0, i32 0
  %275 = load i32* %274, align 4
  %276 = sext i32 %i.1 to i64
  %277 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %276
  %278 = getelementptr inbounds %struct.anon.2* %277, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = mul nsw i32 %275, %279
  %281 = sext i32 %i.1 to i64
  %282 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %281
  %283 = getelementptr inbounds %struct.anon.2* %282, i32 0, i32 2
  %284 = load i32* %283, align 4
  %285 = add nsw i32 %284, 1
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %286
  %288 = getelementptr inbounds %struct.anon.2* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = add nsw i32 %289, 1
  %291 = mul nsw i32 %285, %290
  %292 = sdiv i32 %280, %291
  %293 = load i16* @thumb_width, align 2
  %294 = zext i16 %293 to i32
  %295 = load i16* @thumb_height, align 2
  %296 = zext i16 %295 to i32
  %297 = mul nsw i32 %294, %296
  %298 = load i32* @thumb_misc, align 4
  %299 = add i32 %298, 1
  %300 = load i32* @thumb_misc, align 4
  %301 = add i32 %300, 1
  %302 = mul i32 %299, %301
  %303 = udiv i32 %297, %302
  %304 = icmp ugt i32 %292, %303
  br i1 %304, label %305, label %329

; <label>:305                                     ; preds = %271
  %306 = sext i32 %i.1 to i64
  %307 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %306
  %308 = getelementptr inbounds %struct.anon.2* %307, i32 0, i32 0
  %309 = load i32* %308, align 4
  %310 = trunc i32 %309 to i16
  store i16 %310, i16* @thumb_width, align 2
  %311 = sext i32 %i.1 to i64
  %312 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %311
  %313 = getelementptr inbounds %struct.anon.2* %312, i32 0, i32 1
  %314 = load i32* %313, align 4
  %315 = trunc i32 %314 to i16
  store i16 %315, i16* @thumb_height, align 2
  %316 = sext i32 %i.1 to i64
  %317 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %316
  %318 = getelementptr inbounds %struct.anon.2* %317, i32 0, i32 5
  %319 = load i32* %318, align 4
  %320 = sext i32 %319 to i64
  store i64 %320, i64* @thumb_offset, align 8
  %321 = sext i32 %i.1 to i64
  %322 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %321
  %323 = getelementptr inbounds %struct.anon.2* %322, i32 0, i32 8
  %324 = load i32* %323, align 4
  store i32 %324, i32* @thumb_length, align 4
  %325 = sext i32 %i.1 to i64
  %326 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %325
  %327 = getelementptr inbounds %struct.anon.2* %326, i32 0, i32 2
  %328 = load i32* %327, align 4
  store i32 %328, i32* @thumb_misc, align 4
  br label %329

; <label>:329                                     ; preds = %305, %271, %265, %263
  %thm.1 = phi i32 [ %i.1, %305 ], [ %thm.0, %271 ], [ %thm.0, %265 ], [ %thm.0, %263 ]
  br label %330

; <label>:330                                     ; preds = %329
  %331 = add nsw i32 %i.1, 1
  br label %260

; <label>:332                                     ; preds = %260
  %333 = icmp sge i32 %thm.0, 0
  br i1 %333, label %334, label %364

; <label>:334                                     ; preds = %332
  %335 = sext i32 %thm.0 to i64
  %336 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %335
  %337 = getelementptr inbounds %struct.anon.2* %336, i32 0, i32 7
  %338 = load i32* %337, align 4
  %339 = shl i32 %338, 5
  %340 = load i32* @thumb_misc, align 4
  %341 = or i32 %340, %339
  store i32 %341, i32* @thumb_misc, align 4
  %342 = sext i32 %thm.0 to i64
  %343 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %342
  %344 = getelementptr inbounds %struct.anon.2* %343, i32 0, i32 3
  %345 = load i32* %344, align 4
  switch i32 %345, label %363 [
    i32 0, label %346
    i32 1, label %347
    i32 65000, label %356
  ]

; <label>:346                                     ; preds = %334
  store void (%struct._IO_FILE*)* @layer_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %363

; <label>:347                                     ; preds = %334
  %348 = sext i32 %thm.0 to i64
  %349 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %348
  %350 = getelementptr inbounds %struct.anon.2* %349, i32 0, i32 2
  %351 = load i32* %350, align 4
  %352 = icmp sgt i32 %351, 8
  br i1 %352, label %353, label %354

; <label>:353                                     ; preds = %347
  store void (...)* bitcast (void ()* @kodak_thumb_load_raw to void (...)*), void (...)** @thumb_load_raw, align 8
  br label %355

; <label>:354                                     ; preds = %347
  store void (%struct._IO_FILE*)* @ppm_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %355

; <label>:355                                     ; preds = %354, %353
  br label %363

; <label>:356                                     ; preds = %334
  %357 = sext i32 %thm.0 to i64
  %358 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %357
  %359 = getelementptr inbounds %struct.anon.2* %358, i32 0, i32 4
  %360 = load i32* %359, align 4
  %361 = icmp eq i32 %360, 6
  %362 = select i1 %361, void (...)* bitcast (void ()* @kodak_ycbcr_load_raw to void (...)*), void (...)* bitcast (void ()* @kodak_rgb_load_raw to void (...)*)
  store void (...)* %362, void (...)** @thumb_load_raw, align 8
  br label %363

; <label>:363                                     ; preds = %356, %355, %346, %334
  br label %364

; <label>:364                                     ; preds = %363, %332, %12
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_external_jpeg() #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i8** @ifname, align 8
  %3 = call i8* @strrchr(i8* %2, i32 46) #10
  %4 = load i8** @ifname, align 8
  %5 = call i8* @strrchr(i8* %4, i32 47) #10
  %6 = icmp ne i8* %5, null
  br i1 %6, label %10, label %7

; <label>:7                                       ; preds = %0
  %8 = load i8** @ifname, align 8
  %9 = call i8* @strrchr(i8* %8, i32 92) #10
  br label %10

; <label>:10                                      ; preds = %7, %0
  %file.0 = phi i8* [ %5, %0 ], [ %9, %7 ]
  %11 = icmp ne i8* %file.0, null
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %10
  %13 = load i8** @ifname, align 8
  %14 = getelementptr inbounds i8* %13, i64 -1
  br label %15

; <label>:15                                      ; preds = %12, %10
  %file.1 = phi i8* [ %file.0, %10 ], [ %14, %12 ]
  %16 = getelementptr inbounds i8* %file.1, i32 1
  %17 = icmp ne i8* %3, null
  br i1 %17, label %18, label %26

; <label>:18                                      ; preds = %15
  %19 = call i64 @strlen(i8* %3) #10
  %20 = icmp ne i64 %19, 4
  br i1 %20, label %26, label %21

; <label>:21                                      ; preds = %18
  %22 = ptrtoint i8* %3 to i64
  %23 = ptrtoint i8* %16 to i64
  %24 = sub i64 %22, %23
  %25 = icmp ne i64 %24, 8
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %21, %18, %15
  br label %120

; <label>:27                                      ; preds = %21
  %28 = load i8** @ifname, align 8
  %29 = call i64 @strlen(i8* %28) #10
  %30 = add i64 %29, 1
  %31 = call noalias i8* @malloc(i64 %30) #4
  call void @merror(i8* %31, i8* getelementptr inbounds ([22 x i8]* @.str163, i32 0, i32 0))
  %32 = load i8** @ifname, align 8
  %33 = call i8* @strcpy(i8* %31, i8* %32) #4
  %34 = load i8** @ifname, align 8
  %35 = ptrtoint i8* %16 to i64
  %36 = ptrtoint i8* %34 to i64
  %37 = sub i64 %35, %36
  %38 = getelementptr inbounds i8* %31, i64 %37
  %39 = load i8** @ifname, align 8
  %40 = ptrtoint i8* %3 to i64
  %41 = ptrtoint i8* %39 to i64
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds i8* %31, i64 %42
  %44 = call i32 @strcasecmp(i8* %3, i8* getelementptr inbounds ([5 x i8]* @.str164, i32 0, i32 0)) #10
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %74

; <label>:46                                      ; preds = %27
  %47 = getelementptr inbounds i8* %3, i64 1
  %48 = load i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = sext i32 %49 to i64
  %51 = call i16** @__ctype_b_loc() #9
  %52 = load i16** %51, align 8
  %53 = getelementptr inbounds i16* %52, i64 %50
  %54 = load i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = and i32 %55, 256
  %57 = icmp ne i32 %56, 0
  %58 = select i1 %57, i8* getelementptr inbounds ([5 x i8]* @.str165, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str164, i32 0, i32 0)
  %59 = call i8* @strcpy(i8* %43, i8* %58) #4
  %60 = load i8* %16, align 1
  %61 = sext i8 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = call i16** @__ctype_b_loc() #9
  %64 = load i16** %63, align 8
  %65 = getelementptr inbounds i16* %64, i64 %62
  %66 = load i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, 2048
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %73

; <label>:70                                      ; preds = %46
  %71 = getelementptr inbounds i8* %16, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %71, i64 4, i32 1, i1 false)
  %72 = getelementptr inbounds i8* %38, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %16, i64 4, i32 1, i1 false)
  br label %73

; <label>:73                                      ; preds = %70, %46
  br label %96

; <label>:74                                      ; preds = %27
  br label %75

; <label>:75                                      ; preds = %94, %74
  %jext.0 = phi i8* [ %43, %74 ], [ %76, %94 ]
  %76 = getelementptr inbounds i8* %jext.0, i32 -1
  %77 = load i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = sext i32 %78 to i64
  %80 = call i16** @__ctype_b_loc() #9
  %81 = load i16** %80, align 8
  %82 = getelementptr inbounds i16* %81, i64 %79
  %83 = load i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = and i32 %84, 2048
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %95

; <label>:87                                      ; preds = %75
  %88 = load i8* %76, align 1
  %89 = sext i8 %88 to i32
  %90 = icmp ne i32 %89, 57
  br i1 %90, label %91, label %94

; <label>:91                                      ; preds = %87
  %92 = load i8* %76, align 1
  %93 = add i8 %92, 1
  store i8 %93, i8* %76, align 1
  br label %95

; <label>:94                                      ; preds = %87
  store i8 48, i8* %76, align 1
  br label %75

; <label>:95                                      ; preds = %91, %75
  br label %96

; <label>:96                                      ; preds = %95, %73
  %97 = load i8** @ifname, align 8
  %98 = call i32 @strcmp(i8* %31, i8* %97) #10
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %113

; <label>:100                                     ; preds = %96
  %101 = call %struct._IO_FILE* @fopen(i8* %31, i8* getelementptr inbounds ([3 x i8]* @.str64, i32 0, i32 0))
  store %struct._IO_FILE* %101, %struct._IO_FILE** @ifp, align 8
  %102 = icmp ne %struct._IO_FILE* %101, null
  br i1 %102, label %103, label %112

; <label>:103                                     ; preds = %100
  %104 = load i32* @verbose, align 4
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %109

; <label>:106                                     ; preds = %103
  %107 = load %struct._IO_FILE** @stderr, align 8
  %108 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %107, i8* getelementptr inbounds ([30 x i8]* @.str166, i32 0, i32 0), i8* %31)
  br label %109

; <label>:109                                     ; preds = %106, %103
  call void @parse_tiff(i32 12)
  store i64 0, i64* @thumb_offset, align 8
  store i32 1, i32* @is_raw, align 4
  %110 = load %struct._IO_FILE** @ifp, align 8
  %111 = call i32 @fclose(%struct._IO_FILE* %110)
  br label %112

; <label>:112                                     ; preds = %109, %100
  br label %113

; <label>:113                                     ; preds = %112, %96
  %114 = load i64* @timestamp, align 8
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %119, label %116

; <label>:116                                     ; preds = %113
  %117 = load %struct._IO_FILE** @stderr, align 8
  %118 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %117, i8* getelementptr inbounds ([33 x i8]* @.str167, i32 0, i32 0), i8* %31)
  br label %119

; <label>:119                                     ; preds = %116, %113
  call void @free(i8* %31) #4
  store %struct._IO_FILE* %1, %struct._IO_FILE** @ifp, align 8
  br label %120

; <label>:120                                     ; preds = %119, %26
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #6

; Function Attrs: nounwind uwtable
define void @ciff_block_1030() #0 {
  %1 = call zeroext i16 @get2()
  %2 = call i32 @get4()
  %3 = icmp ne i32 %2, 524296
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = call i32 @get4()
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %8, label %7

; <label>:7                                       ; preds = %4, %0
  br label %55

; <label>:8                                       ; preds = %4
  %9 = call zeroext i16 @get2()
  %10 = zext i16 %9 to i32
  %11 = icmp ne i32 %10, 10
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %8
  %13 = icmp ne i32 %10, 12
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %12
  br label %55

; <label>:15                                      ; preds = %12, %8
  br label %16

; <label>:16                                      ; preds = %53, %15
  %vbits.0 = phi i32 [ 0, %15 ], [ %vbits.1, %53 ]
  %row.0 = phi i32 [ 0, %15 ], [ %54, %53 ]
  %bitbuf.0 = phi i64 [ 0, %15 ], [ %bitbuf.1, %53 ]
  %i.0 = phi i32 [ 0, %15 ], [ %i.1, %53 ]
  %17 = icmp slt i32 %row.0, 8
  br i1 %17, label %18, label %55

; <label>:18                                      ; preds = %16
  br label %19

; <label>:19                                      ; preds = %50, %18
  %vbits.1 = phi i32 [ %vbits.0, %18 ], [ %49, %50 ]
  %col.0 = phi i32 [ 0, %18 ], [ %51, %50 ]
  %bitbuf.1 = phi i64 [ %bitbuf.0, %18 ], [ %bitbuf.2, %50 ]
  %i.1 = phi i32 [ %i.0, %18 ], [ %i.2, %50 ]
  %20 = icmp slt i32 %col.0, 8
  br i1 %20, label %21, label %52

; <label>:21                                      ; preds = %19
  %22 = icmp slt i32 %vbits.1, %10
  br i1 %22, label %23, label %37

; <label>:23                                      ; preds = %21
  %24 = shl i64 %bitbuf.1, 16
  %25 = call zeroext i16 @get2()
  %26 = zext i16 %25 to i32
  %27 = add nsw i32 %i.1, 1
  %28 = and i32 %i.1, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [2 x i16]* @ciff_block_1030.key, i32 0, i64 %29
  %31 = load i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = xor i32 %26, %32
  %34 = sext i32 %33 to i64
  %35 = or i64 %24, %34
  %36 = add nsw i32 %vbits.1, 16
  br label %37

; <label>:37                                      ; preds = %23, %21
  %vbits.2 = phi i32 [ %36, %23 ], [ %vbits.1, %21 ]
  %bitbuf.2 = phi i64 [ %35, %23 ], [ %bitbuf.1, %21 ]
  %i.2 = phi i32 [ %27, %23 ], [ %i.1, %21 ]
  %38 = sub nsw i32 64, %vbits.2
  %39 = zext i32 %38 to i64
  %40 = shl i64 %bitbuf.2, %39
  %41 = sub nsw i32 64, %10
  %42 = zext i32 %41 to i64
  %43 = lshr i64 %40, %42
  %44 = trunc i64 %43 to i16
  %45 = sext i32 %col.0 to i64
  %46 = sext i32 %row.0 to i64
  %47 = getelementptr inbounds [8 x [8 x i16]]* @white, i32 0, i64 %46
  %48 = getelementptr inbounds [8 x i16]* %47, i32 0, i64 %45
  store i16 %44, i16* %48, align 2
  %49 = sub nsw i32 %vbits.2, %10
  br label %50

; <label>:50                                      ; preds = %37
  %51 = add nsw i32 %col.0, 1
  br label %19

; <label>:52                                      ; preds = %19
  br label %53

; <label>:53                                      ; preds = %52
  %54 = add nsw i32 %row.0, 1
  br label %16

; <label>:55                                      ; preds = %16, %14, %7
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_ciff(i32 %offset, i32 %length) #0 {
  %key = alloca [2 x i16], align 2
  %1 = bitcast [2 x i16]* %key to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([2 x i16]* @parse_ciff.key to i8*), i64 4, i32 2, i1 false)
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = add nsw i32 %offset, %length
  %4 = sub nsw i32 %3, 4
  %5 = sext i32 %4 to i64
  %6 = call i32 @fseek(%struct._IO_FILE* %2, i64 %5, i32 0)
  %7 = call i32 @get4()
  %8 = add i32 %7, %offset
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = sext i32 %8 to i64
  %11 = call i32 @fseek(%struct._IO_FILE* %9, i64 %10, i32 0)
  %12 = call zeroext i16 @get2()
  %13 = zext i16 %12 to i32
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %0
  br label %332

; <label>:16                                      ; preds = %0
  br label %17

; <label>:17                                      ; preds = %328, %16
  %nrecs.0 = phi i32 [ %13, %16 ], [ %18, %328 ]
  %wbi.0 = phi i32 [ -1, %16 ], [ %wbi.4, %328 ]
  %18 = add nsw i32 %nrecs.0, -1
  %19 = icmp ne i32 %nrecs.0, 0
  br i1 %19, label %20, label %332

; <label>:20                                      ; preds = %17
  %21 = call zeroext i16 @get2()
  %22 = zext i16 %21 to i32
  %23 = call i32 @get4()
  %24 = load %struct._IO_FILE** @ifp, align 8
  %25 = call i64 @ftell(%struct._IO_FILE* %24)
  %26 = add nsw i64 %25, 4
  %27 = trunc i64 %26 to i32
  %28 = load %struct._IO_FILE** @ifp, align 8
  %29 = call i32 @get4()
  %30 = add i32 %offset, %29
  %31 = zext i32 %30 to i64
  %32 = call i32 @fseek(%struct._IO_FILE* %28, i64 %31, i32 0)
  %33 = ashr i32 %22, 8
  %34 = add nsw i32 %33, 8
  %35 = or i32 %34, 8
  %36 = icmp eq i32 %35, 56
  br i1 %36, label %37, label %41

; <label>:37                                      ; preds = %20
  %38 = load %struct._IO_FILE** @ifp, align 8
  %39 = call i64 @ftell(%struct._IO_FILE* %38)
  %40 = trunc i64 %39 to i32
  call void @parse_ciff(i32 %40, i32 %23)
  br label %41

; <label>:41                                      ; preds = %37, %20
  %42 = icmp eq i32 %22, 2064
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %41
  %44 = load %struct._IO_FILE** @ifp, align 8
  %45 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %44)
  br label %46

; <label>:46                                      ; preds = %43, %41
  %47 = icmp eq i32 %22, 2058
  br i1 %47, label %48, label %57

; <label>:48                                      ; preds = %46
  %49 = load %struct._IO_FILE** @ifp, align 8
  %50 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %49)
  %51 = load %struct._IO_FILE** @ifp, align 8
  %52 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0)) #10
  %53 = sub i64 %52, 63
  %54 = call i32 @fseek(%struct._IO_FILE* %51, i64 %53, i32 1)
  %55 = load %struct._IO_FILE** @ifp, align 8
  %56 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %55)
  br label %57

; <label>:57                                      ; preds = %48, %46
  %58 = icmp eq i32 %22, 6160
  br i1 %58, label %59, label %63

; <label>:59                                      ; preds = %57
  %60 = load %struct._IO_FILE** @ifp, align 8
  %61 = call i32 @fseek(%struct._IO_FILE* %60, i64 12, i32 1)
  %62 = call i32 @get4()
  store i32 %62, i32* @flip, align 4
  br label %63

; <label>:63                                      ; preds = %59, %57
  %64 = icmp eq i32 %22, 6197
  br i1 %64, label %65, label %67

; <label>:65                                      ; preds = %63
  %66 = call i32 @get4()
  store i32 %66, i32* @tiff_compress, align 4
  br label %67

; <label>:67                                      ; preds = %65, %63
  %68 = icmp eq i32 %22, 8199
  br i1 %68, label %69, label %72

; <label>:69                                      ; preds = %67
  %70 = load %struct._IO_FILE** @ifp, align 8
  %71 = call i64 @ftell(%struct._IO_FILE* %70)
  store i64 %71, i64* @thumb_offset, align 8
  store i32 %23, i32* @thumb_length, align 4
  br label %72

; <label>:72                                      ; preds = %69, %67
  %73 = icmp eq i32 %22, 6168
  br i1 %73, label %74, label %88

; <label>:74                                      ; preds = %72
  %75 = call i32 @get4()
  %76 = call i32 @get4()
  %77 = call float @int_to_float(i32 %76)
  %78 = fsub float -0.000000e+00, %77
  %79 = fpext float %78 to double
  %80 = call double @pow(double 2.000000e+00, double %79) #4
  %81 = fptrunc double %80 to float
  store float %81, float* @shutter, align 4
  %82 = call i32 @get4()
  %83 = call float @int_to_float(i32 %82)
  %84 = fdiv float %83, 2.000000e+00
  %85 = fpext float %84 to double
  %86 = call double @pow(double 2.000000e+00, double %85) #4
  %87 = fptrunc double %86 to float
  store float %87, float* @aperture, align 4
  br label %88

; <label>:88                                      ; preds = %74, %72
  %89 = icmp eq i32 %22, 4138
  br i1 %89, label %90, label %132

; <label>:90                                      ; preds = %88
  %91 = call i32 @get4()
  %92 = call zeroext i16 @get2()
  %93 = zext i16 %92 to i32
  %94 = sitofp i32 %93 to double
  %95 = fdiv double %94, 3.200000e+01
  %96 = fsub double %95, 4.000000e+00
  %97 = call double @pow(double 2.000000e+00, double %96) #4
  %98 = fmul double %97, 5.000000e+01
  %99 = fptrunc double %98 to float
  store float %99, float* @iso_speed, align 4
  %100 = call zeroext i16 @get2()
  %101 = call zeroext i16 @get2()
  %102 = sext i16 %101 to i32
  %103 = sitofp i32 %102 to double
  %104 = fdiv double %103, 6.400000e+01
  %105 = call double @pow(double 2.000000e+00, double %104) #4
  %106 = fptrunc double %105 to float
  store float %106, float* @aperture, align 4
  %107 = call zeroext i16 @get2()
  %108 = sext i16 %107 to i32
  %109 = sub nsw i32 0, %108
  %110 = sitofp i32 %109 to double
  %111 = fdiv double %110, 3.200000e+01
  %112 = call double @pow(double 2.000000e+00, double %111) #4
  %113 = fptrunc double %112 to float
  store float %113, float* @shutter, align 4
  %114 = call zeroext i16 @get2()
  %115 = call zeroext i16 @get2()
  %116 = zext i16 %115 to i32
  %117 = icmp sgt i32 %116, 17
  br i1 %117, label %118, label %119

; <label>:118                                     ; preds = %90
  br label %119

; <label>:119                                     ; preds = %118, %90
  %wbi.1 = phi i32 [ 0, %118 ], [ %116, %90 ]
  %120 = load %struct._IO_FILE** @ifp, align 8
  %121 = call i32 @fseek(%struct._IO_FILE* %120, i64 32, i32 1)
  %122 = load float* @shutter, align 4
  %123 = fpext float %122 to double
  %124 = fcmp ogt double %123, 1.000000e+06
  br i1 %124, label %125, label %131

; <label>:125                                     ; preds = %119
  %126 = call zeroext i16 @get2()
  %127 = zext i16 %126 to i32
  %128 = sitofp i32 %127 to double
  %129 = fdiv double %128, 1.000000e+01
  %130 = fptrunc double %129 to float
  store float %130, float* @shutter, align 4
  br label %131

; <label>:131                                     ; preds = %125, %119
  br label %132

; <label>:132                                     ; preds = %131, %88
  %wbi.2 = phi i32 [ %wbi.1, %131 ], [ %wbi.0, %88 ]
  %133 = icmp eq i32 %22, 4140
  br i1 %133, label %134, label %169

; <label>:134                                     ; preds = %132
  %135 = call zeroext i16 @get2()
  %136 = zext i16 %135 to i32
  %137 = icmp sgt i32 %136, 512
  br i1 %137, label %138, label %152

; <label>:138                                     ; preds = %134
  %139 = load %struct._IO_FILE** @ifp, align 8
  %140 = call i32 @fseek(%struct._IO_FILE* %139, i64 118, i32 1)
  br label %141

; <label>:141                                     ; preds = %149, %138
  %c.0 = phi i32 [ 0, %138 ], [ %150, %149 ]
  %142 = icmp slt i32 %c.0, 4
  br i1 %142, label %143, label %151

; <label>:143                                     ; preds = %141
  %144 = call zeroext i16 @get2()
  %145 = uitofp i16 %144 to float
  %146 = xor i32 %c.0, 2
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %147
  store float %145, float* %148, align 4
  br label %149

; <label>:149                                     ; preds = %143
  %150 = add nsw i32 %c.0, 1
  br label %141

; <label>:151                                     ; preds = %141
  br label %168

; <label>:152                                     ; preds = %134
  %153 = load %struct._IO_FILE** @ifp, align 8
  %154 = call i32 @fseek(%struct._IO_FILE* %153, i64 98, i32 1)
  br label %155

; <label>:155                                     ; preds = %165, %152
  %c.1 = phi i32 [ 0, %152 ], [ %166, %165 ]
  %156 = icmp slt i32 %c.1, 4
  br i1 %156, label %157, label %167

; <label>:157                                     ; preds = %155
  %158 = call zeroext i16 @get2()
  %159 = uitofp i16 %158 to float
  %160 = ashr i32 %c.1, 1
  %161 = xor i32 %c.1, %160
  %162 = xor i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %163
  store float %159, float* %164, align 4
  br label %165

; <label>:165                                     ; preds = %157
  %166 = add nsw i32 %c.1, 1
  br label %155

; <label>:167                                     ; preds = %155
  br label %168

; <label>:168                                     ; preds = %167, %151
  br label %169

; <label>:169                                     ; preds = %168, %132
  %170 = icmp eq i32 %22, 50
  br i1 %170, label %171, label %253

; <label>:171                                     ; preds = %169
  %172 = icmp eq i32 %23, 768
  br i1 %172, label %173, label %194

; <label>:173                                     ; preds = %171
  %174 = load %struct._IO_FILE** @ifp, align 8
  %175 = call i32 @fseek(%struct._IO_FILE* %174, i64 72, i32 1)
  br label %176

; <label>:176                                     ; preds = %188, %173
  %c.2 = phi i32 [ 0, %173 ], [ %189, %188 ]
  %177 = icmp slt i32 %c.2, 4
  br i1 %177, label %178, label %190

; <label>:178                                     ; preds = %176
  %179 = call zeroext i16 @get2()
  %180 = zext i16 %179 to i32
  %181 = sitofp i32 %180 to double
  %182 = fdiv double 1.024000e+03, %181
  %183 = fptrunc double %182 to float
  %184 = ashr i32 %c.2, 1
  %185 = xor i32 %c.2, %184
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %186
  store float %183, float* %187, align 4
  br label %188

; <label>:188                                     ; preds = %178
  %189 = add nsw i32 %c.2, 1
  br label %176

; <label>:190                                     ; preds = %176
  %191 = icmp ne i32 %wbi.2, 0
  br i1 %191, label %193, label %192

; <label>:192                                     ; preds = %190
  store float -1.000000e+00, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  br label %193

; <label>:193                                     ; preds = %192, %190
  br label %252

; <label>:194                                     ; preds = %171
  %195 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %196 = fcmp une float %195, 0.000000e+00
  br i1 %196, label %251, label %197

; <label>:197                                     ; preds = %194
  %198 = call zeroext i16 @get2()
  %199 = zext i16 %198 to i32
  %200 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 0
  %201 = load i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = icmp eq i32 %199, %202
  br i1 %203, label %204, label %214

; <label>:204                                     ; preds = %197
  %205 = sext i32 %wbi.2 to i64
  %206 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str168, i32 0, i32 0)) #10
  %207 = icmp ne i8* %206, null
  %208 = select i1 %207, i8* getelementptr inbounds ([19 x i8]* @.str169, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str170, i32 0, i32 0)
  %209 = getelementptr inbounds i8* %208, i64 %205
  %210 = load i8* %209, align 1
  %211 = sext i8 %210 to i32
  %212 = sub nsw i32 %211, 48
  %213 = add nsw i32 %212, 2
  br label %222

; <label>:214                                     ; preds = %197
  %215 = sext i32 %wbi.2 to i64
  %216 = getelementptr inbounds [19 x i8]* @.str171, i32 0, i64 %215
  %217 = load i8* %216, align 1
  %218 = sext i8 %217 to i32
  %219 = sub nsw i32 %218, 48
  %220 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 1
  store i16 0, i16* %220, align 2
  %221 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 0
  store i16 0, i16* %221, align 2
  br label %222

; <label>:222                                     ; preds = %214, %204
  %c.3 = phi i32 [ %213, %204 ], [ %219, %214 ]
  %223 = load %struct._IO_FILE** @ifp, align 8
  %224 = mul nsw i32 %c.3, 8
  %225 = add nsw i32 78, %224
  %226 = sext i32 %225 to i64
  %227 = call i32 @fseek(%struct._IO_FILE* %223, i64 %226, i32 1)
  br label %228

; <label>:228                                     ; preds = %245, %222
  %c.4 = phi i32 [ 0, %222 ], [ %246, %245 ]
  %229 = icmp slt i32 %c.4, 4
  br i1 %229, label %230, label %247

; <label>:230                                     ; preds = %228
  %231 = call zeroext i16 @get2()
  %232 = zext i16 %231 to i32
  %233 = and i32 %c.4, 1
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 %234
  %236 = load i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = xor i32 %232, %237
  %239 = sitofp i32 %238 to float
  %240 = ashr i32 %c.4, 1
  %241 = xor i32 %c.4, %240
  %242 = xor i32 %241, 1
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %243
  store float %239, float* %244, align 4
  br label %245

; <label>:245                                     ; preds = %230
  %246 = add nsw i32 %c.4, 1
  br label %228

; <label>:247                                     ; preds = %228
  %248 = icmp ne i32 %wbi.2, 0
  br i1 %248, label %250, label %249

; <label>:249                                     ; preds = %247
  store float -1.000000e+00, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  br label %250

; <label>:250                                     ; preds = %249, %247
  br label %251

; <label>:251                                     ; preds = %250, %194
  br label %252

; <label>:252                                     ; preds = %251, %193
  br label %253

; <label>:253                                     ; preds = %252, %169
  %254 = icmp eq i32 %22, 4265
  br i1 %254, label %255, label %281

; <label>:255                                     ; preds = %253
  %256 = icmp sgt i32 %23, 66
  br i1 %256, label %257, label %263

; <label>:257                                     ; preds = %255
  %258 = sext i32 %wbi.2 to i64
  %259 = getelementptr inbounds [11 x i8]* @.str172, i32 0, i64 %258
  %260 = load i8* %259, align 1
  %261 = sext i8 %260 to i32
  %262 = sub nsw i32 %261, 48
  br label %263

; <label>:263                                     ; preds = %257, %255
  %wbi.3 = phi i32 [ %262, %257 ], [ %wbi.2, %255 ]
  %264 = load %struct._IO_FILE** @ifp, align 8
  %265 = mul nsw i32 %wbi.3, 8
  %266 = add nsw i32 2, %265
  %267 = sext i32 %266 to i64
  %268 = call i32 @fseek(%struct._IO_FILE* %264, i64 %267, i32 1)
  br label %269

; <label>:269                                     ; preds = %278, %263
  %c.5 = phi i32 [ 0, %263 ], [ %279, %278 ]
  %270 = icmp slt i32 %c.5, 4
  br i1 %270, label %271, label %280

; <label>:271                                     ; preds = %269
  %272 = call zeroext i16 @get2()
  %273 = uitofp i16 %272 to float
  %274 = ashr i32 %c.5, 1
  %275 = xor i32 %c.5, %274
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %276
  store float %273, float* %277, align 4
  br label %278

; <label>:278                                     ; preds = %271
  %279 = add nsw i32 %c.5, 1
  br label %269

; <label>:280                                     ; preds = %269
  br label %281

; <label>:281                                     ; preds = %280, %253
  %wbi.4 = phi i32 [ %wbi.3, %280 ], [ %wbi.2, %253 ]
  %282 = icmp eq i32 %22, 4144
  br i1 %282, label %283, label %288

; <label>:283                                     ; preds = %281
  %284 = ashr i32 98368, %wbi.4
  %285 = and i32 %284, 1
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %288

; <label>:287                                     ; preds = %283
  call void @ciff_block_1030()
  br label %288

; <label>:288                                     ; preds = %287, %283, %281
  %289 = icmp eq i32 %22, 4145
  br i1 %289, label %290, label %294

; <label>:290                                     ; preds = %288
  %291 = call zeroext i16 @get2()
  %292 = call zeroext i16 @get2()
  store i16 %292, i16* @raw_width, align 2
  %293 = call zeroext i16 @get2()
  store i16 %293, i16* @raw_height, align 2
  br label %294

; <label>:294                                     ; preds = %290, %288
  %295 = icmp eq i32 %22, 20521
  br i1 %295, label %296, label %305

; <label>:296                                     ; preds = %294
  %297 = ashr i32 %23, 16
  %298 = sitofp i32 %297 to float
  store float %298, float* @focal_len, align 4
  %299 = and i32 %23, 65535
  %300 = icmp eq i32 %299, 2
  br i1 %300, label %301, label %304

; <label>:301                                     ; preds = %296
  %302 = load float* @focal_len, align 4
  %303 = fdiv float %302, 3.200000e+01
  store float %303, float* @focal_len, align 4
  br label %304

; <label>:304                                     ; preds = %301, %296
  br label %305

; <label>:305                                     ; preds = %304, %294
  %306 = icmp eq i32 %22, 22547
  br i1 %306, label %307, label %309

; <label>:307                                     ; preds = %305
  %308 = call float @int_to_float(i32 %23)
  store float %308, float* @flash_used, align 4
  br label %309

; <label>:309                                     ; preds = %307, %305
  %310 = icmp eq i32 %22, 22548
  br i1 %310, label %311, label %313

; <label>:311                                     ; preds = %309
  %312 = call float @int_to_float(i32 %23)
  store float %312, float* @canon_ev, align 4
  br label %313

; <label>:313                                     ; preds = %311, %309
  %314 = icmp eq i32 %22, 22551
  br i1 %314, label %315, label %316

; <label>:315                                     ; preds = %313
  store i32 %23, i32* @shot_order, align 4
  br label %316

; <label>:316                                     ; preds = %315, %313
  %317 = icmp eq i32 %22, 22580
  br i1 %317, label %318, label %319

; <label>:318                                     ; preds = %316
  store i32 %23, i32* @unique_id, align 4
  br label %319

; <label>:319                                     ; preds = %318, %316
  %320 = icmp eq i32 %22, 22542
  br i1 %320, label %321, label %323

; <label>:321                                     ; preds = %319
  %322 = sext i32 %23 to i64
  store i64 %322, i64* @timestamp, align 8
  br label %323

; <label>:323                                     ; preds = %321, %319
  %324 = icmp eq i32 %22, 6158
  br i1 %324, label %325, label %328

; <label>:325                                     ; preds = %323
  %326 = call i32 @get4()
  %327 = zext i32 %326 to i64
  store i64 %327, i64* @timestamp, align 8
  br label %328

; <label>:328                                     ; preds = %325, %323
  %329 = load %struct._IO_FILE** @ifp, align 8
  %330 = sext i32 %27 to i64
  %331 = call i32 @fseek(%struct._IO_FILE* %329, i64 %330, i32 0)
  br label %17

; <label>:332                                     ; preds = %17, %15
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_rollei() #0 {
  %line = alloca [128 x i8], align 16
  %t = alloca %struct.tm, align 8
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 0, i32 0)
  %3 = bitcast %struct.tm* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 56, i32 8, i1 false)
  br label %4

; <label>:4                                       ; preds = %72, %0
  %5 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i8* @fgets(i8* %5, i32 128, %struct._IO_FILE* %6)
  %8 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %9 = call i8* @strchr(i8* %8, i32 61) #10
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %4
  %12 = getelementptr inbounds i8* %9, i32 1
  store i8 0, i8* %9, align 1
  br label %18

; <label>:13                                      ; preds = %4
  %14 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %15 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %16 = call i64 @strlen(i8* %15) #10
  %17 = getelementptr inbounds i8* %14, i64 %16
  br label %18

; <label>:18                                      ; preds = %13, %11
  %val.0 = phi i8* [ %12, %11 ], [ %17, %13 ]
  %19 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %20 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([4 x i8]* @.str173, i32 0, i32 0)) #10
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %27, label %22

; <label>:22                                      ; preds = %18
  %23 = getelementptr inbounds %struct.tm* %t, i32 0, i32 3
  %24 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %25 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %26 = call i32 (i8*, i8*, ...)* @sscanf(i8* %val.0, i8* getelementptr inbounds ([9 x i8]* @.str8, i32 0, i32 0), i32* %23, i32* %24, i32* %25) #4
  br label %27

; <label>:27                                      ; preds = %22, %18
  %28 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %29 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([4 x i8]* @.str174, i32 0, i32 0)) #10
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %36, label %31

; <label>:31                                      ; preds = %27
  %32 = getelementptr inbounds %struct.tm* %t, i32 0, i32 2
  %33 = getelementptr inbounds %struct.tm* %t, i32 0, i32 1
  %34 = getelementptr inbounds %struct.tm* %t, i32 0, i32 0
  %35 = call i32 (i8*, i8*, ...)* @sscanf(i8* %val.0, i8* getelementptr inbounds ([9 x i8]* @.str175, i32 0, i32 0), i32* %32, i32* %33, i32* %34) #4
  br label %36

; <label>:36                                      ; preds = %31, %27
  %37 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %38 = call i32 @strcmp(i8* %37, i8* getelementptr inbounds ([4 x i8]* @.str176, i32 0, i32 0)) #10
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %43, label %40

; <label>:40                                      ; preds = %36
  %41 = call i32 @atoi(i8* %val.0) #10
  %42 = sext i32 %41 to i64
  store i64 %42, i64* @thumb_offset, align 8
  br label %43

; <label>:43                                      ; preds = %40, %36
  %44 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %45 = call i32 @strcmp(i8* %44, i8* getelementptr inbounds ([4 x i8]* @.str177, i32 0, i32 0)) #10
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %50, label %47

; <label>:47                                      ; preds = %43
  %48 = call i32 @atoi(i8* %val.0) #10
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* @raw_width, align 2
  br label %50

; <label>:50                                      ; preds = %47, %43
  %51 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([4 x i8]* @.str178, i32 0, i32 0)) #10
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %57, label %54

; <label>:54                                      ; preds = %50
  %55 = call i32 @atoi(i8* %val.0) #10
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* @raw_height, align 2
  br label %57

; <label>:57                                      ; preds = %54, %50
  %58 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %59 = call i32 @strcmp(i8* %58, i8* getelementptr inbounds ([4 x i8]* @.str179, i32 0, i32 0)) #10
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %64, label %61

; <label>:61                                      ; preds = %57
  %62 = call i32 @atoi(i8* %val.0) #10
  %63 = trunc i32 %62 to i16
  store i16 %63, i16* @thumb_width, align 2
  br label %64

; <label>:64                                      ; preds = %61, %57
  %65 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %66 = call i32 @strcmp(i8* %65, i8* getelementptr inbounds ([4 x i8]* @.str180, i32 0, i32 0)) #10
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %71, label %68

; <label>:68                                      ; preds = %64
  %69 = call i32 @atoi(i8* %val.0) #10
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* @thumb_height, align 2
  br label %71

; <label>:71                                      ; preds = %68, %64
  br label %72

; <label>:72                                      ; preds = %71
  %73 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %74 = call i32 @strncmp(i8* %73, i8* getelementptr inbounds ([5 x i8]* @.str181, i32 0, i32 0), i64 4) #10
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %4, label %76

; <label>:76                                      ; preds = %72
  %77 = load i64* @thumb_offset, align 8
  %78 = load i16* @thumb_width, align 2
  %79 = zext i16 %78 to i32
  %80 = load i16* @thumb_height, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nsw i32 %79, %81
  %83 = mul nsw i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = add nsw i64 %77, %84
  store i64 %85, i64* @data_offset, align 8
  %86 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %87 = load i32* %86, align 4
  %88 = sub nsw i32 %87, 1900
  store i32 %88, i32* %86, align 4
  %89 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %90 = load i32* %89, align 4
  %91 = sub nsw i32 %90, 1
  store i32 %91, i32* %89, align 4
  %92 = call i64 @mktime(%struct.tm* %t) #4
  %93 = icmp sgt i64 %92, 0
  br i1 %93, label %94, label %96

; <label>:94                                      ; preds = %76
  %95 = call i64 @mktime(%struct.tm* %t) #4
  store i64 %95, i64* @timestamp, align 8
  br label %96

; <label>:96                                      ; preds = %94, %76
  %97 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str182, i32 0, i32 0)) #4
  %98 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str183, i32 0, i32 0)) #4
  store void (%struct._IO_FILE*)* @rollei_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_sinar_ia() #0 {
  %str = alloca [8 x i8], align 1
  store i16 18761, i16* @order, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 4, i32 0)
  %3 = call i32 @get4()
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @get4()
  %6 = zext i32 %5 to i64
  %7 = call i32 @fseek(%struct._IO_FILE* %4, i64 %6, i32 0)
  br label %8

; <label>:8                                       ; preds = %34, %0
  %entries.0 = phi i32 [ %3, %0 ], [ %9, %34 ]
  %9 = add nsw i32 %entries.0, -1
  %10 = icmp ne i32 %entries.0, 0
  br i1 %10, label %11, label %35

; <label>:11                                      ; preds = %8
  %12 = call i32 @get4()
  %13 = call i32 @get4()
  %14 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %15 = load %struct._IO_FILE** @ifp, align 8
  %16 = call i64 @fread(i8* %14, i64 8, i64 1, %struct._IO_FILE* %15)
  %17 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %18 = call i32 @strcmp(i8* %17, i8* getelementptr inbounds ([5 x i8]* @.str184, i32 0, i32 0)) #10
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %22, label %20

; <label>:20                                      ; preds = %11
  %21 = sext i32 %12 to i64
  store i64 %21, i64* @meta_offset, align 8
  br label %22

; <label>:22                                      ; preds = %20, %11
  %23 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %24 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([6 x i8]* @.str185, i32 0, i32 0)) #10
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %28, label %26

; <label>:26                                      ; preds = %22
  %27 = sext i32 %12 to i64
  store i64 %27, i64* @thumb_offset, align 8
  br label %28

; <label>:28                                      ; preds = %26, %22
  %29 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %30 = call i32 @strcmp(i8* %29, i8* getelementptr inbounds ([5 x i8]* @.str186, i32 0, i32 0)) #10
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %34, label %32

; <label>:32                                      ; preds = %28
  %33 = sext i32 %12 to i64
  store i64 %33, i64* @data_offset, align 8
  br label %34

; <label>:34                                      ; preds = %32, %28
  br label %8

; <label>:35                                      ; preds = %8
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = load i64* @meta_offset, align 8
  %38 = add nsw i64 %37, 20
  %39 = call i32 @fseek(%struct._IO_FILE* %36, i64 %38, i32 0)
  %40 = load %struct._IO_FILE** @ifp, align 8
  %41 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %40)
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 63), align 1
  %42 = call i8* @strchr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i32 32) #10
  %43 = icmp ne i8* %42, null
  br i1 %43, label %44, label %47

; <label>:44                                      ; preds = %35
  %45 = getelementptr inbounds i8* %42, i64 1
  %46 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %45) #4
  store i8 0, i8* %42, align 1
  br label %47

; <label>:47                                      ; preds = %44, %35
  %48 = call zeroext i16 @get2()
  store i16 %48, i16* @raw_width, align 2
  %49 = call zeroext i16 @get2()
  store i16 %49, i16* @raw_height, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  %50 = call i32 @get4()
  %51 = call zeroext i16 @get2()
  store i16 %51, i16* @thumb_width, align 2
  %52 = call zeroext i16 @get2()
  store i16 %52, i16* @thumb_height, align 2
  store void (%struct._IO_FILE*)* @ppm_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  store i32 16383, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_phase_one(i32 %base) #0 {
  %romm_cam = alloca [3 x [3 x float]], align 16
  call void @llvm.memset.p0i8.i64(i8* bitcast (%struct.anon.1* @ph1 to i8*), i8 0, i64 28, i32 4, i1 false)
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = sext i32 %base to i64
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = call i32 @get4()
  %5 = and i32 %4, 65535
  %6 = trunc i32 %5 to i16
  store i16 %6, i16* @order, align 2
  %7 = call i32 @get4()
  %8 = lshr i32 %7, 8
  %9 = icmp ne i32 %8, 5398903
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %0
  br label %129

; <label>:11                                      ; preds = %0
  %12 = load %struct._IO_FILE** @ifp, align 8
  %13 = call i32 @get4()
  %14 = add i32 %13, %base
  %15 = zext i32 %14 to i64
  %16 = call i32 @fseek(%struct._IO_FILE* %12, i64 %15, i32 0)
  %17 = call i32 @get4()
  %18 = call i32 @get4()
  br label %19

; <label>:19                                      ; preds = %106, %11
  %entries.0 = phi i32 [ %17, %11 ], [ %20, %106 ]
  %20 = add i32 %entries.0, -1
  %21 = icmp ne i32 %entries.0, 0
  br i1 %21, label %22, label %110

; <label>:22                                      ; preds = %19
  %23 = call i32 @get4()
  %24 = call i32 @get4()
  %25 = call i32 @get4()
  %26 = call i32 @get4()
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i64 @ftell(%struct._IO_FILE* %27)
  %29 = trunc i64 %28 to i32
  %30 = load %struct._IO_FILE** @ifp, align 8
  %31 = add i32 %base, %26
  %32 = zext i32 %31 to i64
  %33 = call i32 @fseek(%struct._IO_FILE* %30, i64 %32, i32 0)
  switch i32 %23, label %106 [
    i32 256, label %34
    i32 262, label %41
    i32 263, label %54
    i32 264, label %65
    i32 265, label %67
    i32 266, label %69
    i32 267, label %71
    i32 268, label %73
    i32 269, label %75
    i32 270, label %77
    i32 271, label %78
    i32 272, label %81
    i32 274, label %84
    i32 528, label %86
    i32 538, label %88
    i32 540, label %89
    i32 541, label %92
    i32 546, label %93
    i32 547, label %97
    i32 769, label %99
  ]

; <label>:34                                      ; preds = %22
  %35 = and i32 %26, 3
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [5 x i8]* @.str187, i32 0, i64 %36
  %38 = load i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = sub nsw i32 %39, 48
  store i32 %40, i32* @flip, align 4
  br label %106

; <label>:41                                      ; preds = %22
  br label %42

; <label>:42                                      ; preds = %50, %41
  %i.0 = phi i32 [ 0, %41 ], [ %51, %50 ]
  %43 = icmp ult i32 %i.0, 9
  br i1 %43, label %44, label %52

; <label>:44                                      ; preds = %42
  %45 = call double @getreal(i32 11)
  %46 = fptrunc double %45 to float
  %47 = zext i32 %i.0 to i64
  %48 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i64 0
  %49 = getelementptr inbounds [3 x float]* %48, i32 0, i64 %47
  store float %46, float* %49, align 4
  br label %50

; <label>:50                                      ; preds = %44
  %51 = add i32 %i.0, 1
  br label %42

; <label>:52                                      ; preds = %42
  %53 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i32 0
  call void @romm_coeff([3 x float]* %53)
  br label %106

; <label>:54                                      ; preds = %22
  br label %55

; <label>:55                                      ; preds = %62, %54
  %c.0 = phi i32 [ 0, %54 ], [ %63, %62 ]
  %56 = icmp ult i32 %c.0, 3
  br i1 %56, label %57, label %64

; <label>:57                                      ; preds = %55
  %58 = call double @getreal(i32 11)
  %59 = fptrunc double %58 to float
  %60 = zext i32 %c.0 to i64
  %61 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %60
  store float %59, float* %61, align 4
  br label %62

; <label>:62                                      ; preds = %57
  %63 = add i32 %c.0, 1
  br label %55

; <label>:64                                      ; preds = %55
  br label %106

; <label>:65                                      ; preds = %22
  %66 = trunc i32 %26 to i16
  store i16 %66, i16* @raw_width, align 2
  br label %106

; <label>:67                                      ; preds = %22
  %68 = trunc i32 %26 to i16
  store i16 %68, i16* @raw_height, align 2
  br label %106

; <label>:69                                      ; preds = %22
  %70 = trunc i32 %26 to i16
  store i16 %70, i16* @left_margin, align 2
  br label %106

; <label>:71                                      ; preds = %22
  %72 = trunc i32 %26 to i16
  store i16 %72, i16* @top_margin, align 2
  br label %106

; <label>:73                                      ; preds = %22
  %74 = trunc i32 %26 to i16
  store i16 %74, i16* @width, align 2
  br label %106

; <label>:75                                      ; preds = %22
  %76 = trunc i32 %26 to i16
  store i16 %76, i16* @height, align 2
  br label %106

; <label>:77                                      ; preds = %22
  store i32 %26, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  br label %106

; <label>:78                                      ; preds = %22
  %79 = add i32 %26, %base
  %80 = zext i32 %79 to i64
  store i64 %80, i64* @data_offset, align 8
  br label %106

; <label>:81                                      ; preds = %22
  %82 = add i32 %26, %base
  %83 = zext i32 %82 to i64
  store i64 %83, i64* @meta_offset, align 8
  store i32 %25, i32* @meta_length, align 4
  br label %106

; <label>:84                                      ; preds = %22
  %85 = sub i32 %29, 4
  store i32 %85, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 1), align 4
  br label %106

; <label>:86                                      ; preds = %22
  %87 = call float @int_to_float(i32 %26)
  store float %87, float* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 6), align 4
  br label %106

; <label>:88                                      ; preds = %22
  store i32 %26, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 5), align 4
  br label %106

; <label>:89                                      ; preds = %22
  %90 = add i32 %26, %base
  %91 = zext i32 %90 to i64
  store i64 %91, i64* @strip_offset, align 8
  br label %106

; <label>:92                                      ; preds = %22
  store i32 %26, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 2), align 4
  br label %106

; <label>:93                                      ; preds = %22
  %94 = load i16* @left_margin, align 2
  %95 = zext i16 %94 to i32
  %96 = sub i32 %26, %95
  store i32 %96, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 4), align 4
  br label %106

; <label>:97                                      ; preds = %22
  %98 = add i32 %26, %base
  store i32 %98, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 3), align 4
  br label %106

; <label>:99                                      ; preds = %22
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 63), align 1
  %100 = load %struct._IO_FILE** @ifp, align 8
  %101 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 1, i64 63, %struct._IO_FILE* %100)
  %102 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str188, i32 0, i32 0)) #10
  %103 = icmp ne i8* %102, null
  br i1 %103, label %104, label %105

; <label>:104                                     ; preds = %99
  store i8 0, i8* %102, align 1
  br label %105

; <label>:105                                     ; preds = %104, %99
  br label %106

; <label>:106                                     ; preds = %105, %97, %93, %92, %89, %88, %86, %84, %81, %78, %77, %75, %73, %71, %69, %67, %65, %64, %52, %34, %22
  %107 = load %struct._IO_FILE** @ifp, align 8
  %108 = zext i32 %29 to i64
  %109 = call i32 @fseek(%struct._IO_FILE* %107, i64 %108, i32 0)
  br label %19

; <label>:110                                     ; preds = %19
  %111 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  %112 = icmp slt i32 %111, 3
  %113 = select i1 %112, void (...)* bitcast (void ()* @phase_one_load_raw to void (...)*), void (...)* bitcast (void ()* @phase_one_load_raw_c to void (...)*)
  store void (...)* %113, void (...)** @load_raw, align 8
  store i32 65535, i32* @maximum, align 4
  %114 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str189, i32 0, i32 0)) #4
  %115 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %116 = icmp ne i8 %115, 0
  br i1 %116, label %117, label %118

; <label>:117                                     ; preds = %110
  br label %129

; <label>:118                                     ; preds = %110
  %119 = load i16* @raw_height, align 2
  %120 = zext i16 %119 to i32
  switch i32 %120, label %129 [
    i32 2060, label %121
    i32 2682, label %123
    i32 4128, label %125
    i32 5488, label %127
  ]

; <label>:121                                     ; preds = %118
  %122 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str190, i32 0, i32 0)) #4
  br label %129

; <label>:123                                     ; preds = %118
  %124 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str191, i32 0, i32 0)) #4
  br label %129

; <label>:125                                     ; preds = %118
  %126 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str192, i32 0, i32 0)) #4
  br label %129

; <label>:127                                     ; preds = %118
  %128 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str193, i32 0, i32 0)) #4
  br label %129

; <label>:129                                     ; preds = %127, %125, %123, %121, %118, %117, %10
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_fuji(i32 %offset) #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = sext i32 %offset to i64
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = call i32 @get4()
  %5 = icmp ugt i32 %4, 255
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %0
  br label %74

; <label>:7                                       ; preds = %0
  br label %8

; <label>:8                                       ; preds = %58, %7
  %entries.0 = phi i32 [ %4, %7 ], [ %9, %58 ]
  %9 = add i32 %entries.0, -1
  %10 = icmp ne i32 %entries.0, 0
  br i1 %10, label %11, label %63

; <label>:11                                      ; preds = %8
  %12 = call zeroext i16 @get2()
  %13 = zext i16 %12 to i32
  %14 = call zeroext i16 @get2()
  %15 = zext i16 %14 to i32
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i64 @ftell(%struct._IO_FILE* %16)
  %18 = trunc i64 %17 to i32
  %19 = icmp eq i32 %13, 256
  br i1 %19, label %20, label %23

; <label>:20                                      ; preds = %11
  %21 = call zeroext i16 @get2()
  store i16 %21, i16* @raw_height, align 2
  %22 = call zeroext i16 @get2()
  store i16 %22, i16* @raw_width, align 2
  br label %44

; <label>:23                                      ; preds = %11
  %24 = icmp eq i32 %13, 289
  br i1 %24, label %25, label %36

; <label>:25                                      ; preds = %23
  %26 = call zeroext i16 @get2()
  store i16 %26, i16* @height, align 2
  %27 = call zeroext i16 @get2()
  store i16 %27, i16* @width, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp eq i32 %28, 4284
  br i1 %29, label %30, label %35

; <label>:30                                      ; preds = %25
  %31 = load i16* @width, align 2
  %32 = zext i16 %31 to i32
  %33 = add nsw i32 %32, 3
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* @width, align 2
  br label %35

; <label>:35                                      ; preds = %30, %25
  br label %43

; <label>:36                                      ; preds = %23
  %37 = icmp eq i32 %13, 304
  br i1 %37, label %38, label %42

; <label>:38                                      ; preds = %36
  %39 = load %struct._IO_FILE** @ifp, align 8
  %40 = call i32 @getc_unlocked(%struct._IO_FILE* %39)
  %41 = ashr i32 %40, 7
  store i32 %41, i32* @fuji_layout, align 4
  br label %42

; <label>:42                                      ; preds = %38, %36
  br label %43

; <label>:43                                      ; preds = %42, %35
  br label %44

; <label>:44                                      ; preds = %43, %20
  %45 = icmp eq i32 %13, 12272
  br i1 %45, label %46, label %58

; <label>:46                                      ; preds = %44
  br label %47

; <label>:47                                      ; preds = %55, %46
  %c.0 = phi i32 [ 0, %46 ], [ %56, %55 ]
  %48 = icmp ult i32 %c.0, 4
  br i1 %48, label %49, label %57

; <label>:49                                      ; preds = %47
  %50 = call zeroext i16 @get2()
  %51 = uitofp i16 %50 to float
  %52 = xor i32 %c.0, 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %53
  store float %51, float* %54, align 4
  br label %55

; <label>:55                                      ; preds = %49
  %56 = add i32 %c.0, 1
  br label %47

; <label>:57                                      ; preds = %47
  br label %58

; <label>:58                                      ; preds = %57, %44
  %59 = load %struct._IO_FILE** @ifp, align 8
  %60 = add i32 %18, %15
  %61 = zext i32 %60 to i64
  %62 = call i32 @fseek(%struct._IO_FILE* %59, i64 %61, i32 0)
  br label %8

; <label>:63                                      ; preds = %8
  %64 = load i32* @fuji_layout, align 4
  %65 = load i16* @height, align 2
  %66 = zext i16 %65 to i32
  %67 = shl i32 %66, %64
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* @height, align 2
  %69 = load i32* @fuji_layout, align 4
  %70 = load i16* @width, align 2
  %71 = zext i16 %70 to i32
  %72 = ashr i32 %71, %69
  %73 = trunc i32 %72 to i16
  store i16 %73, i16* @width, align 2
  br label %74

; <label>:74                                      ; preds = %63, %6
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @parse_jpeg(i32 %offset) #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = sext i32 %offset to i64
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  %6 = icmp ne i32 %5, 255
  br i1 %6, label %11, label %7

; <label>:7                                       ; preds = %0
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i32 @getc_unlocked(%struct._IO_FILE* %8)
  %10 = icmp ne i32 %9, 216
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %7, %0
  br label %53

; <label>:12                                      ; preds = %7
  br label %13

; <label>:13                                      ; preds = %46, %12
  %mark.0 = phi i32 [ undef, %12 ], [ %mark.1, %46 ]
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i32 @getc_unlocked(%struct._IO_FILE* %14)
  %16 = icmp eq i32 %15, 255
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %13
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = call i32 @getc_unlocked(%struct._IO_FILE* %18)
  %20 = icmp ne i32 %19, 218
  br label %21

; <label>:21                                      ; preds = %17, %13
  %mark.1 = phi i32 [ %19, %17 ], [ %mark.0, %13 ]
  %22 = phi i1 [ false, %13 ], [ %20, %17 ]
  br i1 %22, label %23, label %52

; <label>:23                                      ; preds = %21
  store i16 19789, i16* @order, align 2
  %24 = call zeroext i16 @get2()
  %25 = zext i16 %24 to i32
  %26 = sub nsw i32 %25, 2
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i64 @ftell(%struct._IO_FILE* %27)
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %mark.1, 192
  br i1 %30, label %33, label %31

; <label>:31                                      ; preds = %23
  %32 = icmp eq i32 %mark.1, 195
  br i1 %32, label %33, label %38

; <label>:33                                      ; preds = %31, %23
  %34 = load %struct._IO_FILE** @ifp, align 8
  %35 = call i32 @getc_unlocked(%struct._IO_FILE* %34)
  %36 = call zeroext i16 @get2()
  store i16 %36, i16* @raw_height, align 2
  %37 = call zeroext i16 @get2()
  store i16 %37, i16* @raw_width, align 2
  br label %38

; <label>:38                                      ; preds = %33, %31
  %39 = call zeroext i16 @get2()
  store i16 %39, i16* @order, align 2
  %40 = call i32 @get4()
  %41 = call i32 @get4()
  %42 = icmp eq i32 %41, 1212498256
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %38
  %44 = add nsw i32 %29, %40
  %45 = sub nsw i32 %26, %40
  call void @parse_ciff(i32 %44, i32 %45)
  br label %46

; <label>:46                                      ; preds = %43, %38
  %47 = add nsw i32 %29, 6
  call void @parse_tiff(i32 %47)
  %48 = load %struct._IO_FILE** @ifp, align 8
  %49 = add nsw i32 %29, %26
  %50 = sext i32 %49 to i64
  %51 = call i32 @fseek(%struct._IO_FILE* %48, i64 %50, i32 0)
  br label %13

; <label>:52                                      ; preds = %21
  br label %53

; <label>:53                                      ; preds = %52, %11
  %.0 = phi i32 [ 0, %11 ], [ 1, %52 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @parse_riff() #0 {
  %tag = alloca [4 x i8], align 1
  %date = alloca [64 x i8], align 16
  %month = alloca [64 x i8], align 16
  %t = alloca %struct.tm, align 8
  store i16 18761, i16* @order, align 2
  %1 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = call i64 @fread(i8* %1, i64 4, i64 1, %struct._IO_FILE* %2)
  %4 = call i32 @get4()
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i64 @ftell(%struct._IO_FILE* %5)
  %7 = zext i32 %4 to i64
  %8 = add nsw i64 %6, %7
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %11 = call i32 @memcmp(i8* %10, i8* getelementptr inbounds ([5 x i8]* @.str194, i32 0, i32 0), i64 4) #10
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %17

; <label>:13                                      ; preds = %0
  %14 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %15 = call i32 @memcmp(i8* %14, i8* getelementptr inbounds ([5 x i8]* @.str195, i32 0, i32 0), i64 4) #10
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %27, label %17

; <label>:17                                      ; preds = %13, %0
  %18 = call i32 @get4()
  br label %19

; <label>:19                                      ; preds = %25, %17
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i64 @ftell(%struct._IO_FILE* %20)
  %22 = add nsw i64 %21, 7
  %23 = zext i32 %9 to i64
  %24 = icmp slt i64 %22, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %19
  call void @parse_riff()
  br label %19

; <label>:26                                      ; preds = %19
  br label %109

; <label>:27                                      ; preds = %13
  %28 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %29 = call i32 @memcmp(i8* %28, i8* getelementptr inbounds ([5 x i8]* @.str196, i32 0, i32 0), i64 4) #10
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %55, label %31

; <label>:31                                      ; preds = %27
  br label %32

; <label>:32                                      ; preds = %53, %31
  %33 = load %struct._IO_FILE** @ifp, align 8
  %34 = call i64 @ftell(%struct._IO_FILE* %33)
  %35 = add nsw i64 %34, 7
  %36 = zext i32 %9 to i64
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %38, label %54

; <label>:38                                      ; preds = %32
  %39 = call zeroext i16 @get2()
  %40 = zext i16 %39 to i32
  %41 = call zeroext i16 @get2()
  %42 = zext i16 %41 to i32
  %43 = add i32 %40, 1
  %44 = lshr i32 %43, 1
  %45 = icmp eq i32 %44, 10
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %38
  %47 = icmp eq i32 %42, 20
  br i1 %47, label %48, label %49

; <label>:48                                      ; preds = %46
  call void @get_timestamp(i32 0)
  br label %53

; <label>:49                                      ; preds = %46, %38
  %50 = load %struct._IO_FILE** @ifp, align 8
  %51 = zext i32 %42 to i64
  %52 = call i32 @fseek(%struct._IO_FILE* %50, i64 %51, i32 1)
  br label %53

; <label>:53                                      ; preds = %49, %48
  br label %32

; <label>:54                                      ; preds = %32
  br label %108

; <label>:55                                      ; preds = %27
  %56 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %57 = call i32 @memcmp(i8* %56, i8* getelementptr inbounds ([5 x i8]* @.str197, i32 0, i32 0), i64 4) #10
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %103, label %59

; <label>:59                                      ; preds = %55
  %60 = icmp ult i32 %4, 64
  br i1 %60, label %61, label %103

; <label>:61                                      ; preds = %59
  %62 = getelementptr inbounds [64 x i8]* %date, i32 0, i32 0
  %63 = load %struct._IO_FILE** @ifp, align 8
  %64 = call i64 @fread(i8* %62, i64 64, i64 1, %struct._IO_FILE* %63)
  %65 = zext i32 %4 to i64
  %66 = getelementptr inbounds [64 x i8]* %date, i32 0, i64 %65
  store i8 0, i8* %66, align 1
  %67 = bitcast %struct.tm* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 56, i32 8, i1 false)
  %68 = getelementptr inbounds [64 x i8]* %date, i32 0, i32 0
  %69 = getelementptr inbounds [64 x i8]* %month, i32 0, i32 0
  %70 = getelementptr inbounds %struct.tm* %t, i32 0, i32 3
  %71 = getelementptr inbounds %struct.tm* %t, i32 0, i32 2
  %72 = getelementptr inbounds %struct.tm* %t, i32 0, i32 1
  %73 = getelementptr inbounds %struct.tm* %t, i32 0, i32 0
  %74 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %75 = call i32 (i8*, i8*, ...)* @sscanf(i8* %68, i8* getelementptr inbounds ([22 x i8]* @.str198, i32 0, i32 0), i8* %69, i32* %70, i32* %71, i32* %72, i32* %73, i32* %74) #4
  %76 = icmp eq i32 %75, 6
  br i1 %76, label %77, label %102

; <label>:77                                      ; preds = %61
  br label %78

; <label>:78                                      ; preds = %90, %77
  %i.0 = phi i32 [ 0, %77 ], [ %91, %90 ]
  %79 = icmp ult i32 %i.0, 12
  br i1 %79, label %80, label %87

; <label>:80                                      ; preds = %78
  %81 = zext i32 %i.0 to i64
  %82 = getelementptr inbounds [12 x [4 x i8]]* @parse_riff.mon, i32 0, i64 %81
  %83 = getelementptr inbounds [4 x i8]* %82, i32 0, i32 0
  %84 = getelementptr inbounds [64 x i8]* %month, i32 0, i32 0
  %85 = call i32 @strcasecmp(i8* %83, i8* %84) #10
  %86 = icmp ne i32 %85, 0
  br label %87

; <label>:87                                      ; preds = %80, %78
  %88 = phi i1 [ false, %78 ], [ %86, %80 ]
  br i1 %88, label %89, label %92

; <label>:89                                      ; preds = %87
  br label %90

; <label>:90                                      ; preds = %89
  %91 = add i32 %i.0, 1
  br label %78

; <label>:92                                      ; preds = %87
  %93 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  store i32 %i.0, i32* %93, align 4
  %94 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %95 = load i32* %94, align 4
  %96 = sub nsw i32 %95, 1900
  store i32 %96, i32* %94, align 4
  %97 = call i64 @mktime(%struct.tm* %t) #4
  %98 = icmp sgt i64 %97, 0
  br i1 %98, label %99, label %101

; <label>:99                                      ; preds = %92
  %100 = call i64 @mktime(%struct.tm* %t) #4
  store i64 %100, i64* @timestamp, align 8
  br label %101

; <label>:101                                     ; preds = %99, %92
  br label %102

; <label>:102                                     ; preds = %101, %61
  br label %107

; <label>:103                                     ; preds = %59, %55
  %104 = load %struct._IO_FILE** @ifp, align 8
  %105 = zext i32 %4 to i64
  %106 = call i32 @fseek(%struct._IO_FILE* %104, i64 %105, i32 1)
  br label %107

; <label>:107                                     ; preds = %103, %102
  br label %108

; <label>:108                                     ; preds = %107, %54
  br label %109

; <label>:109                                     ; preds = %108, %26
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define void @parse_smal(i32 %offset, i32 %fsize) #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = add nsw i32 %offset, 2
  %3 = sext i32 %2 to i64
  %4 = call i32 @fseek(%struct._IO_FILE* %1, i64 %3, i32 0)
  store i16 18761, i16* @order, align 2
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i32 @getc_unlocked(%struct._IO_FILE* %5)
  %7 = icmp eq i32 %6, 6
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %0
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i32 @fseek(%struct._IO_FILE* %9, i64 5, i32 1)
  br label %11

; <label>:11                                      ; preds = %8, %0
  %12 = call i32 @get4()
  %13 = icmp ne i32 %12, %fsize
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %11
  br label %34

; <label>:15                                      ; preds = %11
  %16 = icmp sgt i32 %6, 6
  br i1 %16, label %17, label %20

; <label>:17                                      ; preds = %15
  %18 = call i32 @get4()
  %19 = zext i32 %18 to i64
  store i64 %19, i64* @data_offset, align 8
  br label %20

; <label>:20                                      ; preds = %17, %15
  %21 = call zeroext i16 @get2()
  store i16 %21, i16* @height, align 2
  store i16 %21, i16* @raw_height, align 2
  %22 = call zeroext i16 @get2()
  store i16 %22, i16* @width, align 2
  store i16 %22, i16* @raw_width, align 2
  %23 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str199, i32 0, i32 0)) #4
  %24 = load i16* @width, align 2
  %25 = zext i16 %24 to i32
  %26 = load i16* @height, align 2
  %27 = zext i16 %26 to i32
  %28 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str200, i32 0, i32 0), i32 %6, i32 %25, i32 %27) #4
  %29 = icmp eq i32 %6, 6
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %20
  store void (...)* bitcast (void ()* @smal_v6_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %31

; <label>:31                                      ; preds = %30, %20
  %32 = icmp eq i32 %6, 9
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %31
  store void (...)* bitcast (void ()* @smal_v9_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %34

; <label>:34                                      ; preds = %33, %31, %14
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_cine() #0 {
  store i16 18761, i16* @order, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 4, i32 0)
  %3 = call zeroext i16 @get2()
  %4 = zext i16 %3 to i32
  %5 = icmp eq i32 %4, 2
  %6 = zext i1 %5 to i32
  store i32 %6, i32* @is_raw, align 4
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @fseek(%struct._IO_FILE* %7, i64 14, i32 1)
  %9 = call i32 @get4()
  %10 = load i32* @is_raw, align 4
  %11 = mul i32 %10, %9
  store i32 %11, i32* @is_raw, align 4
  %12 = call i32 @get4()
  %13 = call i32 @get4()
  %14 = call i32 @get4()
  %15 = call i32 @get4()
  %16 = zext i32 %15 to i64
  store i64 %16, i64* @timestamp, align 8
  %17 = call i32 @get4()
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %21

; <label>:19                                      ; preds = %0
  %20 = zext i32 %17 to i64
  store i64 %20, i64* @timestamp, align 8
  br label %21

; <label>:21                                      ; preds = %19, %0
  %22 = load %struct._IO_FILE** @ifp, align 8
  %23 = add i32 %12, 4
  %24 = zext i32 %23 to i64
  %25 = call i32 @fseek(%struct._IO_FILE* %22, i64 %24, i32 0)
  %26 = call i32 @get4()
  %27 = trunc i32 %26 to i16
  store i16 %27, i16* @raw_width, align 2
  %28 = call i32 @get4()
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* @raw_height, align 2
  %30 = call zeroext i16 @get2()
  %31 = call zeroext i16 @get2()
  %32 = zext i16 %31 to i32
  switch i32 %32, label %35 [
    i32 8, label %33
    i32 16, label %34
  ]

; <label>:33                                      ; preds = %21
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %35

; <label>:34                                      ; preds = %21
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %35

; <label>:35                                      ; preds = %34, %33, %21
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = add i32 %13, 792
  %38 = zext i32 %37 to i64
  %39 = call i32 @fseek(%struct._IO_FILE* %36, i64 %38, i32 0)
  %40 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str201, i32 0, i32 0)) #4
  %41 = call i32 @get4()
  %42 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32 %41) #4
  %43 = load %struct._IO_FILE** @ifp, align 8
  %44 = call i32 @fseek(%struct._IO_FILE* %43, i64 12, i32 1)
  %45 = call i32 @get4()
  %46 = and i32 %45, 16777215
  switch i32 %46, label %49 [
    i32 3, label %47
    i32 4, label %48
  ]

; <label>:47                                      ; preds = %35
  store i32 -1802201964, i32* @filters, align 4
  br label %50

; <label>:48                                      ; preds = %35
  store i32 1229539657, i32* @filters, align 4
  br label %50

; <label>:49                                      ; preds = %35
  store i32 0, i32* @is_raw, align 4
  br label %50

; <label>:50                                      ; preds = %49, %48, %47
  %51 = load %struct._IO_FILE** @ifp, align 8
  %52 = call i32 @fseek(%struct._IO_FILE* %51, i64 72, i32 1)
  %53 = call i32 @get4()
  %54 = add i32 %53, 3600
  %55 = urem i32 %54, 360
  switch i32 %55, label %60 [
    i32 270, label %56
    i32 180, label %57
    i32 90, label %58
    i32 0, label %59
  ]

; <label>:56                                      ; preds = %50
  store i32 4, i32* @flip, align 4
  br label %60

; <label>:57                                      ; preds = %50
  store i32 1, i32* @flip, align 4
  br label %60

; <label>:58                                      ; preds = %50
  store i32 7, i32* @flip, align 4
  br label %60

; <label>:59                                      ; preds = %50
  store i32 2, i32* @flip, align 4
  br label %60

; <label>:60                                      ; preds = %59, %58, %57, %56, %50
  %61 = call double @getreal(i32 11)
  %62 = fptrunc double %61 to float
  store float %62, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %63 = call double @getreal(i32 11)
  %64 = fptrunc double %63 to float
  store float %64, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %65 = call i32 @get4()
  %66 = shl i32 -1, %65
  %67 = xor i32 %66, -1
  store i32 %67, i32* @maximum, align 4
  %68 = load %struct._IO_FILE** @ifp, align 8
  %69 = call i32 @fseek(%struct._IO_FILE* %68, i64 668, i32 1)
  %70 = call i32 @get4()
  %71 = uitofp i32 %70 to double
  %72 = fdiv double %71, 1.000000e+09
  %73 = fptrunc double %72 to float
  store float %73, float* @shutter, align 4
  %74 = load %struct._IO_FILE** @ifp, align 8
  %75 = zext i32 %14 to i64
  %76 = call i32 @fseek(%struct._IO_FILE* %74, i64 %75, i32 0)
  %77 = load i32* @shot_select, align 4
  %78 = load i32* @is_raw, align 4
  %79 = icmp ult i32 %77, %78
  br i1 %79, label %80, label %86

; <label>:80                                      ; preds = %60
  %81 = load %struct._IO_FILE** @ifp, align 8
  %82 = load i32* @shot_select, align 4
  %83 = mul i32 %82, 8
  %84 = zext i32 %83 to i64
  %85 = call i32 @fseek(%struct._IO_FILE* %81, i64 %84, i32 1)
  br label %86

; <label>:86                                      ; preds = %80, %60
  %87 = call i32 @get4()
  %88 = zext i32 %87 to i64
  %89 = add nsw i64 %88, 8
  store i64 %89, i64* @data_offset, align 8
  %90 = call i32 @get4()
  %91 = zext i32 %90 to i64
  %92 = shl i64 %91, 32
  %93 = load i64* @data_offset, align 8
  %94 = add nsw i64 %93, %92
  store i64 %94, i64* @data_offset, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @foveon_gets(i32 %offset, i8* %str, i32 %len) #0 {
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = sext i32 %offset to i64
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  br label %4

; <label>:4                                       ; preds = %16, %0
  %i.0 = phi i32 [ 0, %0 ], [ %17, %16 ]
  %5 = sub nsw i32 %len, 1
  %6 = icmp slt i32 %i.0, %5
  br i1 %6, label %7, label %18

; <label>:7                                       ; preds = %4
  %8 = call zeroext i16 @get2()
  %9 = trunc i16 %8 to i8
  %10 = sext i32 %i.0 to i64
  %11 = getelementptr inbounds i8* %str, i64 %10
  store i8 %9, i8* %11, align 1
  %12 = sext i8 %9 to i32
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %7
  br label %18

; <label>:15                                      ; preds = %7
  br label %16

; <label>:16                                      ; preds = %15
  %17 = add nsw i32 %i.0, 1
  br label %4

; <label>:18                                      ; preds = %14, %4
  %19 = sext i32 %i.0 to i64
  %20 = getelementptr inbounds i8* %str, i64 %19
  store i8 0, i8* %20, align 1
  ret i8* %str
}

; Function Attrs: nounwind uwtable
define void @parse_foveon() #0 {
  %poff = alloca [256 x [2 x i32]], align 16
  %name = alloca [64 x i8], align 16
  %value = alloca [64 x i8], align 16
  store i16 18761, i16* @order, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 36, i32 0)
  %3 = call i32 @get4()
  store i32 %3, i32* @flip, align 4
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @fseek(%struct._IO_FILE* %4, i64 -4, i32 2)
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i32 @get4()
  %8 = zext i32 %7 to i64
  %9 = call i32 @fseek(%struct._IO_FILE* %6, i64 %8, i32 0)
  %10 = call i32 @get4()
  %11 = icmp ne i32 %10, 1682130259
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %0
  br label %202

; <label>:13                                      ; preds = %0
  %14 = call i32 @get4()
  %15 = call i32 @get4()
  br label %16

; <label>:16                                      ; preds = %197, %13
  %img.0 = phi i32 [ 0, %13 ], [ %img.1, %197 ]
  %entries.0 = phi i32 [ %15, %13 ], [ %17, %197 ]
  %17 = add nsw i32 %entries.0, -1
  %18 = icmp ne i32 %entries.0, 0
  br i1 %18, label %19, label %201

; <label>:19                                      ; preds = %16
  %20 = call i32 @get4()
  %21 = call i32 @get4()
  %22 = call i32 @get4()
  %23 = load %struct._IO_FILE** @ifp, align 8
  %24 = call i64 @ftell(%struct._IO_FILE* %23)
  %25 = trunc i64 %24 to i32
  %26 = load %struct._IO_FILE** @ifp, align 8
  %27 = sext i32 %20 to i64
  %28 = call i32 @fseek(%struct._IO_FILE* %26, i64 %27, i32 0)
  %29 = call i32 @get4()
  %30 = shl i32 %22, 24
  %31 = or i32 541279571, %30
  %32 = icmp ne i32 %29, %31
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %19
  br label %202

; <label>:34                                      ; preds = %19
  switch i32 %22, label %197 [
    i32 1195461961, label %35
    i32 843140425, label %35
    i32 1179468099, label %84
    i32 1347375696, label %92
  ]

; <label>:35                                      ; preds = %34, %34
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = call i32 @fseek(%struct._IO_FILE* %36, i64 12, i32 1)
  %38 = call i32 @get4()
  %39 = call i32 @get4()
  %40 = load i16* @raw_width, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp sgt i32 %38, %41
  br i1 %42, label %43, label %52

; <label>:43                                      ; preds = %35
  %44 = load i16* @raw_height, align 2
  %45 = zext i16 %44 to i32
  %46 = icmp sgt i32 %39, %45
  br i1 %46, label %47, label %52

; <label>:47                                      ; preds = %43
  %48 = trunc i32 %38 to i16
  store i16 %48, i16* @raw_width, align 2
  %49 = trunc i32 %39 to i16
  store i16 %49, i16* @raw_height, align 2
  %50 = add nsw i32 %20, 24
  %51 = sext i32 %50 to i64
  store i64 %51, i64* @data_offset, align 8
  br label %52

; <label>:52                                      ; preds = %47, %43, %35
  %53 = load %struct._IO_FILE** @ifp, align 8
  %54 = add nsw i32 %20, 28
  %55 = sext i32 %54 to i64
  %56 = call i32 @fseek(%struct._IO_FILE* %53, i64 %55, i32 0)
  %57 = load %struct._IO_FILE** @ifp, align 8
  %58 = call i32 @getc_unlocked(%struct._IO_FILE* %57)
  %59 = icmp eq i32 %58, 255
  br i1 %59, label %60, label %72

; <label>:60                                      ; preds = %52
  %61 = load %struct._IO_FILE** @ifp, align 8
  %62 = call i32 @getc_unlocked(%struct._IO_FILE* %61)
  %63 = icmp eq i32 %62, 216
  br i1 %63, label %64, label %72

; <label>:64                                      ; preds = %60
  %65 = load i32* @thumb_length, align 4
  %66 = sub nsw i32 %21, 28
  %67 = icmp ult i32 %65, %66
  br i1 %67, label %68, label %72

; <label>:68                                      ; preds = %64
  %69 = add nsw i32 %20, 28
  %70 = sext i32 %69 to i64
  store i64 %70, i64* @thumb_offset, align 8
  %71 = sub nsw i32 %21, 28
  store i32 %71, i32* @thumb_length, align 4
  store void (%struct._IO_FILE*)* @jpeg_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %72

; <label>:72                                      ; preds = %68, %64, %60, %52
  %73 = add nsw i32 %img.0, 1
  %74 = icmp eq i32 %73, 2
  br i1 %74, label %75, label %83

; <label>:75                                      ; preds = %72
  %76 = load i32* @thumb_length, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %83, label %78

; <label>:78                                      ; preds = %75
  %79 = add nsw i32 %20, 24
  %80 = sext i32 %79 to i64
  store i64 %80, i64* @thumb_offset, align 8
  %81 = trunc i32 %38 to i16
  store i16 %81, i16* @thumb_width, align 2
  %82 = trunc i32 %39 to i16
  store i16 %82, i16* @thumb_height, align 2
  store void (%struct._IO_FILE*)* @foveon_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %83

; <label>:83                                      ; preds = %78, %75, %72
  br label %197

; <label>:84                                      ; preds = %34
  %85 = add nsw i32 %20, 24
  %86 = sext i32 %85 to i64
  store i64 %86, i64* @meta_offset, align 8
  %87 = sub nsw i32 %21, 28
  store i32 %87, i32* @meta_length, align 4
  %88 = load i32* @meta_length, align 4
  %89 = icmp ugt i32 %88, 131072
  br i1 %89, label %90, label %91

; <label>:90                                      ; preds = %84
  store i32 131072, i32* @meta_length, align 4
  br label %91

; <label>:91                                      ; preds = %90, %84
  br label %197

; <label>:92                                      ; preds = %34
  %93 = call i32 @get4()
  %94 = call i32 @get4()
  %95 = load %struct._IO_FILE** @ifp, align 8
  %96 = call i32 @fseek(%struct._IO_FILE* %95, i64 12, i32 1)
  %97 = mul nsw i32 %94, 8
  %98 = add nsw i32 %97, 24
  %99 = add nsw i32 %20, %98
  %100 = icmp ugt i32 %94, 256
  br i1 %100, label %101, label %102

; <label>:101                                     ; preds = %92
  br label %102

; <label>:102                                     ; preds = %101, %92
  %pent.0 = phi i32 [ 256, %101 ], [ %94, %92 ]
  br label %103

; <label>:103                                     ; preds = %113, %102
  %i.0 = phi i32 [ 0, %102 ], [ %114, %113 ]
  %104 = mul nsw i32 %pent.0, 2
  %105 = icmp slt i32 %i.0, %104
  br i1 %105, label %106, label %115

; <label>:106                                     ; preds = %103
  %107 = call i32 @get4()
  %108 = mul i32 %107, 2
  %109 = add i32 %99, %108
  %110 = sext i32 %i.0 to i64
  %111 = getelementptr inbounds [256 x [2 x i32]]* %poff, i32 0, i64 0
  %112 = getelementptr inbounds [2 x i32]* %111, i32 0, i64 %110
  store i32 %109, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106
  %114 = add nsw i32 %i.0, 1
  br label %103

; <label>:115                                     ; preds = %103
  br label %116

; <label>:116                                     ; preds = %194, %115
  %i.1 = phi i32 [ 0, %115 ], [ %195, %194 ]
  %117 = icmp slt i32 %i.1, %pent.0
  br i1 %117, label %118, label %196

; <label>:118                                     ; preds = %116
  %119 = sext i32 %i.1 to i64
  %120 = getelementptr inbounds [256 x [2 x i32]]* %poff, i32 0, i64 %119
  %121 = getelementptr inbounds [2 x i32]* %120, i32 0, i64 0
  %122 = load i32* %121, align 4
  %123 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %124 = call i8* @foveon_gets(i32 %122, i8* %123, i32 64)
  %125 = sext i32 %i.1 to i64
  %126 = getelementptr inbounds [256 x [2 x i32]]* %poff, i32 0, i64 %125
  %127 = getelementptr inbounds [2 x i32]* %126, i32 0, i64 1
  %128 = load i32* %127, align 4
  %129 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %130 = call i8* @foveon_gets(i32 %128, i8* %129, i32 64)
  %131 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %132 = call i32 @strcmp(i8* %131, i8* getelementptr inbounds ([4 x i8]* @.str202, i32 0, i32 0)) #10
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %138, label %134

; <label>:134                                     ; preds = %118
  %135 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %136 = call i32 @atoi(i8* %135) #10
  %137 = sitofp i32 %136 to float
  store float %137, float* @iso_speed, align 4
  br label %138

; <label>:138                                     ; preds = %134, %118
  %139 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %140 = call i32 @strcmp(i8* %139, i8* getelementptr inbounds ([9 x i8]* @.str203, i32 0, i32 0)) #10
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %145, label %142

; <label>:142                                     ; preds = %138
  %143 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %144 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %143) #4
  br label %145

; <label>:145                                     ; preds = %142, %138
  %146 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %147 = call i32 @strcmp(i8* %146, i8* getelementptr inbounds ([9 x i8]* @.str204, i32 0, i32 0)) #10
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %152, label %149

; <label>:149                                     ; preds = %145
  %150 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %151 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %150) #4
  br label %152

; <label>:152                                     ; preds = %149, %145
  %153 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %154 = call i32 @strcmp(i8* %153, i8* getelementptr inbounds ([8 x i8]* @.str205, i32 0, i32 0)) #10
  %155 = icmp ne i32 %154, 0
  br i1 %155, label %159, label %156

; <label>:156                                     ; preds = %152
  %157 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %158 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i8* %157) #4
  br label %159

; <label>:159                                     ; preds = %156, %152
  %160 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* getelementptr inbounds ([5 x i8]* @.str206, i32 0, i32 0)) #10
  %162 = icmp ne i32 %161, 0
  br i1 %162, label %167, label %163

; <label>:163                                     ; preds = %159
  %164 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %165 = call i32 @atoi(i8* %164) #10
  %166 = sext i32 %165 to i64
  store i64 %166, i64* @timestamp, align 8
  br label %167

; <label>:167                                     ; preds = %163, %159
  %168 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %169 = call i32 @strcmp(i8* %168, i8* getelementptr inbounds ([8 x i8]* @.str207, i32 0, i32 0)) #10
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %177, label %171

; <label>:171                                     ; preds = %167
  %172 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %173 = call i32 @atoi(i8* %172) #10
  %174 = sitofp i32 %173 to double
  %175 = fdiv double %174, 1.000000e+06
  %176 = fptrunc double %175 to float
  store float %176, float* @shutter, align 4
  br label %177

; <label>:177                                     ; preds = %171, %167
  %178 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %179 = call i32 @strcmp(i8* %178, i8* getelementptr inbounds ([9 x i8]* @.str208, i32 0, i32 0)) #10
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %185, label %181

; <label>:181                                     ; preds = %177
  %182 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %183 = call double @atof(i8* %182) #10
  %184 = fptrunc double %183 to float
  store float %184, float* @aperture, align 4
  br label %185

; <label>:185                                     ; preds = %181, %177
  %186 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %187 = call i32 @strcmp(i8* %186, i8* getelementptr inbounds ([8 x i8]* @.str209, i32 0, i32 0)) #10
  %188 = icmp ne i32 %187, 0
  br i1 %188, label %193, label %189

; <label>:189                                     ; preds = %185
  %190 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %191 = call double @atof(i8* %190) #10
  %192 = fptrunc double %191 to float
  store float %192, float* @focal_len, align 4
  br label %193

; <label>:193                                     ; preds = %189, %185
  br label %194

; <label>:194                                     ; preds = %193
  %195 = add nsw i32 %i.1, 1
  br label %116

; <label>:196                                     ; preds = %116
  br label %197

; <label>:197                                     ; preds = %196, %91, %83, %34
  %img.1 = phi i32 [ %img.0, %34 ], [ %img.0, %196 ], [ %img.0, %91 ], [ %73, %83 ]
  %198 = load %struct._IO_FILE** @ifp, align 8
  %199 = sext i32 %25 to i64
  %200 = call i32 @fseek(%struct._IO_FILE* %198, i64 %199, i32 0)
  br label %16

; <label>:201                                     ; preds = %16
  store i32 1, i32* @is_foveon, align 4
  br label %202

; <label>:202                                     ; preds = %201, %33, %12
  ret void
}

; Function Attrs: nounwind uwtable
define void @jpeg_thumb(%struct._IO_FILE* %tfp) #0 {
  %exif = alloca [5 x i16], align 2
  %th = alloca %struct.tiff_hdr, align 4
  %1 = load i32* @thumb_length, align 4
  %2 = zext i32 %1 to i64
  %3 = call noalias i8* @malloc(i64 %2) #4
  call void @merror(i8* %3, i8* getelementptr inbounds ([13 x i8]* @.str608, i32 0, i32 0))
  %4 = load i32* @thumb_length, align 4
  %5 = zext i32 %4 to i64
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i64 @fread(i8* %3, i64 1, i64 %5, %struct._IO_FILE* %6)
  %8 = call i32 @fputc(i32 255, %struct._IO_FILE* %tfp)
  %9 = call i32 @fputc(i32 216, %struct._IO_FILE* %tfp)
  %10 = getelementptr inbounds i8* %3, i64 6
  %11 = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([5 x i8]* @.str429, i32 0, i32 0)) #10
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %22

; <label>:13                                      ; preds = %0
  %14 = bitcast [5 x i16]* %exif to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* getelementptr inbounds ([11 x i8]* @.str609, i32 0, i32 0), i64 10, i32 1, i1 false)
  %15 = call zeroext i16 @htons(i16 zeroext 1384) #9
  %16 = getelementptr inbounds [5 x i16]* %exif, i32 0, i64 1
  store i16 %15, i16* %16, align 2
  %17 = getelementptr inbounds [5 x i16]* %exif, i32 0, i32 0
  %18 = bitcast i16* %17 to i8*
  %19 = call i64 @fwrite(i8* %18, i64 1, i64 10, %struct._IO_FILE* %tfp)
  call void @tiff_head(%struct.tiff_hdr* %th, i32 0)
  %20 = bitcast %struct.tiff_hdr* %th to i8*
  %21 = call i64 @fwrite(i8* %20, i64 1, i64 1376, %struct._IO_FILE* %tfp)
  br label %22

; <label>:22                                      ; preds = %13, %0
  %23 = getelementptr inbounds i8* %3, i64 2
  %24 = load i32* @thumb_length, align 4
  %25 = sub i32 %24, 2
  %26 = zext i32 %25 to i64
  %27 = call i64 @fwrite(i8* %23, i64 1, i64 %26, %struct._IO_FILE* %tfp)
  call void @free(i8* %3) #4
  ret void
}

; Function Attrs: nounwind readonly
declare double @atof(i8*) #6

; Function Attrs: nounwind uwtable
define void @adobe_coeff(i8* %make, i8* %model) #0 {
  %cam_xyz = alloca [4 x [3 x double]], align 16
  %name = alloca [130 x i8], align 16
  %1 = getelementptr inbounds [130 x i8]* %name, i32 0, i32 0
  %2 = call i32 (i8*, i8*, ...)* @sprintf(i8* %1, i8* getelementptr inbounds ([6 x i8]* @.str419, i32 0, i32 0), i8* %make, i8* %model) #4
  br label %3

; <label>:3                                       ; preds = %64, %0
  %i.0 = phi i32 [ 0, %0 ], [ %65, %64 ]
  %4 = sext i32 %i.0 to i64
  %5 = icmp ult i64 %4, 211
  br i1 %5, label %6, label %66

; <label>:6                                       ; preds = %3
  %7 = getelementptr inbounds [130 x i8]* %name, i32 0, i32 0
  %8 = sext i32 %i.0 to i64
  %9 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %8
  %10 = getelementptr inbounds %struct.anon.3* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  %12 = sext i32 %i.0 to i64
  %13 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %12
  %14 = getelementptr inbounds %struct.anon.3* %13, i32 0, i32 0
  %15 = load i8** %14, align 8
  %16 = call i64 @strlen(i8* %15) #10
  %17 = call i32 @strncmp(i8* %7, i8* %11, i64 %16) #10
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %63, label %19

; <label>:19                                      ; preds = %6
  %20 = sext i32 %i.0 to i64
  %21 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %20
  %22 = getelementptr inbounds %struct.anon.3* %21, i32 0, i32 1
  %23 = load i16* %22, align 2
  %24 = icmp ne i16 %23, 0
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %19
  %26 = sext i32 %i.0 to i64
  %27 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %26
  %28 = getelementptr inbounds %struct.anon.3* %27, i32 0, i32 1
  %29 = load i16* %28, align 2
  %30 = zext i16 %29 to i32
  store i32 %30, i32* @black, align 4
  br label %31

; <label>:31                                      ; preds = %25, %19
  %32 = sext i32 %i.0 to i64
  %33 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %32
  %34 = getelementptr inbounds %struct.anon.3* %33, i32 0, i32 2
  %35 = load i16* %34, align 2
  %36 = icmp ne i16 %35, 0
  br i1 %36, label %37, label %43

; <label>:37                                      ; preds = %31
  %38 = sext i32 %i.0 to i64
  %39 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %38
  %40 = getelementptr inbounds %struct.anon.3* %39, i32 0, i32 2
  %41 = load i16* %40, align 2
  %42 = zext i16 %41 to i32
  store i32 %42, i32* @maximum, align 4
  br label %43

; <label>:43                                      ; preds = %37, %31
  br label %44

; <label>:44                                      ; preds = %59, %43
  %j.0 = phi i32 [ 0, %43 ], [ %60, %59 ]
  %45 = icmp slt i32 %j.0, 12
  br i1 %45, label %46, label %61

; <label>:46                                      ; preds = %44
  %47 = sext i32 %j.0 to i64
  %48 = sext i32 %i.0 to i64
  %49 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %48
  %50 = getelementptr inbounds %struct.anon.3* %49, i32 0, i32 3
  %51 = getelementptr inbounds [12 x i16]* %50, i32 0, i64 %47
  %52 = load i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = sitofp i32 %53 to double
  %55 = fdiv double %54, 1.000000e+04
  %56 = sext i32 %j.0 to i64
  %57 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i64 0
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 %56
  store double %55, double* %58, align 8
  br label %59

; <label>:59                                      ; preds = %46
  %60 = add nsw i32 %j.0, 1
  br label %44

; <label>:61                                      ; preds = %44
  %62 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i32 0
  call void @cam_xyz_coeff([3 x double]* %62)
  br label %66

; <label>:63                                      ; preds = %6
  br label %64

; <label>:64                                      ; preds = %63
  %65 = add nsw i32 %i.0, 1
  br label %3

; <label>:66                                      ; preds = %61, %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @simple_coeff(i32 %index) #0 {
  store i32 0, i32* @raw_color, align 4
  br label %1

; <label>:1                                       ; preds = %23, %0
  %i.0 = phi i32 [ 0, %0 ], [ %24, %23 ]
  %2 = icmp slt i32 %i.0, 3
  br i1 %2, label %3, label %25

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %20, %3
  %c.0 = phi i32 [ 0, %3 ], [ %21, %20 ]
  %5 = load i32* @colors, align 4
  %6 = icmp slt i32 %c.0, %5
  br i1 %6, label %7, label %22

; <label>:7                                       ; preds = %4
  %8 = load i32* @colors, align 4
  %9 = mul nsw i32 %i.0, %8
  %10 = add nsw i32 %9, %c.0
  %11 = sext i32 %10 to i64
  %12 = sext i32 %index to i64
  %13 = getelementptr inbounds [4 x [12 x float]]* @simple_coeff.table, i32 0, i64 %12
  %14 = getelementptr inbounds [12 x float]* %13, i32 0, i64 %11
  %15 = load float* %14, align 4
  %16 = sext i32 %c.0 to i64
  %17 = sext i32 %i.0 to i64
  %18 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %17
  %19 = getelementptr inbounds [4 x float]* %18, i32 0, i64 %16
  store float %15, float* %19, align 4
  br label %20

; <label>:20                                      ; preds = %7
  %21 = add nsw i32 %c.0, 1
  br label %4

; <label>:22                                      ; preds = %4
  br label %23

; <label>:23                                      ; preds = %22
  %24 = add nsw i32 %i.0, 1
  br label %1

; <label>:25                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define signext i16 @guess_byte_order(i32 %words) #0 {
  %test = alloca [4 x [2 x i8]], align 1
  %sum = alloca [2 x double], align 16
  %1 = bitcast [2 x double]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 0
  %3 = getelementptr inbounds [2 x i8]* %2, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 2, i64 2, %struct._IO_FILE* %4)
  %6 = sub nsw i32 %words, 2
  br label %7

; <label>:7                                       ; preds = %64, %0
  %t.0 = phi i32 [ 2, %0 ], [ %66, %64 ]
  %.0 = phi i32 [ %6, %0 ], [ %8, %64 ]
  %8 = add nsw i32 %.0, -1
  %9 = icmp ne i32 %.0, 0
  br i1 %9, label %10, label %67

; <label>:10                                      ; preds = %7
  %11 = sext i32 %t.0 to i64
  %12 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %11
  %13 = getelementptr inbounds [2 x i8]* %12, i32 0, i32 0
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i64 @fread(i8* %13, i64 2, i64 1, %struct._IO_FILE* %14)
  br label %16

; <label>:16                                      ; preds = %62, %10
  %msb.0 = phi i32 [ 0, %10 ], [ %63, %62 ]
  %17 = icmp slt i32 %msb.0, 2
  br i1 %17, label %18, label %64

; <label>:18                                      ; preds = %16
  %19 = sext i32 %msb.0 to i64
  %20 = xor i32 %t.0, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %21
  %23 = getelementptr inbounds [2 x i8]* %22, i32 0, i64 %19
  %24 = load i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl i32 %25, 8
  %27 = icmp ne i32 %msb.0, 0
  %28 = xor i1 %27, true
  %29 = zext i1 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = xor i32 %t.0, 2
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %32
  %34 = getelementptr inbounds [2 x i8]* %33, i32 0, i64 %30
  %35 = load i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %26, %36
  %38 = sext i32 %msb.0 to i64
  %39 = sext i32 %t.0 to i64
  %40 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %39
  %41 = getelementptr inbounds [2 x i8]* %40, i32 0, i64 %38
  %42 = load i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl i32 %43, 8
  %45 = icmp ne i32 %msb.0, 0
  %46 = xor i1 %45, true
  %47 = zext i1 %46 to i32
  %48 = sext i32 %47 to i64
  %49 = sext i32 %t.0 to i64
  %50 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %49
  %51 = getelementptr inbounds [2 x i8]* %50, i32 0, i64 %48
  %52 = load i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %44, %53
  %55 = sub nsw i32 %37, %54
  %56 = sitofp i32 %55 to double
  %57 = fmul double %56, %56
  %58 = sext i32 %msb.0 to i64
  %59 = getelementptr inbounds [2 x double]* %sum, i32 0, i64 %58
  %60 = load double* %59, align 8
  %61 = fadd double %60, %57
  store double %61, double* %59, align 8
  br label %62

; <label>:62                                      ; preds = %18
  %63 = add nsw i32 %msb.0, 1
  br label %16

; <label>:64                                      ; preds = %16
  %65 = add nsw i32 %t.0, 1
  %66 = and i32 %65, 3
  br label %7

; <label>:67                                      ; preds = %7
  %68 = getelementptr inbounds [2 x double]* %sum, i32 0, i64 0
  %69 = load double* %68, align 8
  %70 = getelementptr inbounds [2 x double]* %sum, i32 0, i64 1
  %71 = load double* %70, align 8
  %72 = fcmp olt double %69, %71
  %73 = select i1 %72, i32 19789, i32 18761
  %74 = trunc i32 %73 to i16
  ret i16 %74
}

; Function Attrs: nounwind uwtable
define void @identify() #0 {
  %head = alloca [32 x i8], align 16
  %jh = alloca %struct.jhead, align 8
  store i32 -1, i32* @filters, align 4
  store i32 -1, i32* @flip, align 4
  store i32 -1, i32* @tiff_flip, align 4
  store i16 0, i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  store i32 0, i32* @fuji_layout, align 4
  store i16 0, i16* @fuji_width, align 2
  store i16 0, i16* @raw_width, align 2
  store i16 0, i16* @raw_height, align 2
  store i16 0, i16* @left_margin, align 2
  store i16 0, i16* @top_margin, align 2
  store i16 0, i16* @width, align 2
  store i16 0, i16* @height, align 2
  store i32 0, i32* @maximum, align 4
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 0), align 1
  store i32 0, i32* @unique_id, align 4
  store float 0.000000e+00, float* @focal_len, align 4
  store float 0.000000e+00, float* @aperture, align 4
  store float 0.000000e+00, float* @shutter, align 4
  store float 0.000000e+00, float* @iso_speed, align 4
  call void @llvm.memset.p0i8.i64(i8* bitcast ([32 x i32]* @gpsdata to i8*), i8 0, i64 128, i32 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* bitcast ([8 x [8 x i16]]* @white to i8*), i8 0, i64 128, i32 16, i1 false)
  store i16 0, i16* @thumb_height, align 2
  store i16 0, i16* @thumb_width, align 2
  store i32 0, i32* @thumb_length, align 4
  store i64 0, i64* @thumb_offset, align 8
  store void (...)* null, void (...)** @thumb_load_raw, align 8
  store void (...)* null, void (...)** @load_raw, align 8
  store void (%struct._IO_FILE*)* @jpeg_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  store i32 0, i32* @tiff_compress, align 4
  store i32 0, i32* @tiff_bps, align 4
  store i32 0, i32* @meta_length, align 4
  store i64 0, i64* @data_offset, align 8
  store i32 0, i32* @load_flags, align 4
  store i32 0, i32* @dng_version, align 4
  store i32 0, i32* @zero_after_ff, align 4
  store i32 0, i32* @kodak_cbpp, align 4
  store i32 0, i32* @is_foveon, align 4
  store i32 0, i32* @black, align 4
  store i32 0, i32* @tiff_samples, align 4
  store i32 0, i32* @shot_order, align 4
  store i64 0, i64* @timestamp, align 8
  store i32 0, i32* @zero_is_bad, align 4
  store i32 0, i32* @data_error, align 4
  store i32 0, i32* @profile_length, align 4
  store i32 0, i32* @mix_green, align 4
  store i32 1, i32* @use_gamma, align 4
  store i32 1, i32* @raw_color, align 4
  store i32 1, i32* @is_raw, align 4
  store double 1.000000e+00, double* @pixel_aspect, align 8
  store i32 2147483647, i32* @tile_length, align 4
  store i32 2147483647, i32* @tile_width, align 4
  br label %1

; <label>:1                                       ; preds = %37, %0
  %i.0 = phi i32 [ 0, %0 ], [ %38, %37 ]
  %2 = icmp ult i32 %i.0, 4
  br i1 %2, label %3, label %39

; <label>:3                                       ; preds = %1
  %4 = icmp eq i32 %i.0, 1
  %5 = zext i1 %4 to i32
  %6 = sitofp i32 %5 to float
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %7
  store float %6, float* %8, align 4
  %9 = icmp ult i32 %i.0, 3
  %10 = zext i1 %9 to i32
  %11 = sitofp i32 %10 to float
  %12 = zext i32 %i.0 to i64
  %13 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %12
  store float %11, float* %13, align 4
  br label %14

; <label>:14                                      ; preds = %21, %3
  %c.0 = phi i32 [ 0, %3 ], [ %22, %21 ]
  %15 = icmp ult i32 %c.0, 3
  br i1 %15, label %16, label %23

; <label>:16                                      ; preds = %14
  %17 = zext i32 %i.0 to i64
  %18 = zext i32 %c.0 to i64
  %19 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %18
  %20 = getelementptr inbounds [4 x float]* %19, i32 0, i64 %17
  store float 0.000000e+00, float* %20, align 4
  br label %21

; <label>:21                                      ; preds = %16
  %22 = add i32 %c.0, 1
  br label %14

; <label>:23                                      ; preds = %14
  br label %24

; <label>:24                                      ; preds = %34, %23
  %c.1 = phi i32 [ 0, %23 ], [ %35, %34 ]
  %25 = icmp ult i32 %c.1, 3
  br i1 %25, label %26, label %36

; <label>:26                                      ; preds = %24
  %27 = icmp eq i32 %c.1, %i.0
  %28 = zext i1 %27 to i32
  %29 = sitofp i32 %28 to float
  %30 = zext i32 %i.0 to i64
  %31 = zext i32 %c.1 to i64
  %32 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %31
  %33 = getelementptr inbounds [4 x float]* %32, i32 0, i64 %30
  store float %29, float* %33, align 4
  br label %34

; <label>:34                                      ; preds = %26
  %35 = add i32 %c.1, 1
  br label %24

; <label>:36                                      ; preds = %24
  br label %37

; <label>:37                                      ; preds = %36
  %38 = add i32 %i.0, 1
  br label %1

; <label>:39                                      ; preds = %1
  store i32 3, i32* @colors, align 4
  store i32 12, i32* @tiff_bps, align 4
  br label %40

; <label>:40                                      ; preds = %46, %39
  %i.1 = phi i32 [ 0, %39 ], [ %47, %46 ]
  %41 = icmp ult i32 %i.1, 16384
  br i1 %41, label %42, label %48

; <label>:42                                      ; preds = %40
  %43 = trunc i32 %i.1 to i16
  %44 = zext i32 %i.1 to i64
  %45 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %44
  store i16 %43, i16* %45, align 2
  br label %46

; <label>:46                                      ; preds = %42
  %47 = add i32 %i.1, 1
  br label %40

; <label>:48                                      ; preds = %40
  %49 = call zeroext i16 @get2()
  store i16 %49, i16* @order, align 2
  %50 = call i32 @get4()
  %51 = load %struct._IO_FILE** @ifp, align 8
  %52 = call i32 @fseek(%struct._IO_FILE* %51, i64 0, i32 0)
  %53 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %54 = load %struct._IO_FILE** @ifp, align 8
  %55 = call i64 @fread(i8* %53, i64 1, i64 32, %struct._IO_FILE* %54)
  %56 = load %struct._IO_FILE** @ifp, align 8
  %57 = call i32 @fseek(%struct._IO_FILE* %56, i64 0, i32 2)
  %58 = load %struct._IO_FILE** @ifp, align 8
  %59 = call i64 @ftell(%struct._IO_FILE* %58)
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %62 = call i8* @memmem(i8* %61, i64 32, i8* getelementptr inbounds ([5 x i8]* @.str90, i32 0, i32 0), i64 4) #10
  %63 = icmp ne i8* %62, null
  br i1 %63, label %68, label %64

; <label>:64                                      ; preds = %48
  %65 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %66 = call i8* @memmem(i8* %65, i64 32, i8* getelementptr inbounds ([5 x i8]* @.str89, i32 0, i32 0), i64 4) #10
  %67 = icmp ne i8* %66, null
  br i1 %67, label %68, label %81

; <label>:68                                      ; preds = %64, %48
  %cp.0 = phi i8* [ %62, %48 ], [ %66, %64 ]
  %69 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %70 = ptrtoint i8* %cp.0 to i64
  %71 = ptrtoint i8* %69 to i64
  %72 = sub i64 %70, %71
  %73 = trunc i64 %72 to i32
  call void @parse_phase_one(i32 %73)
  %74 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %75 = ptrtoint i8* %cp.0 to i64
  %76 = ptrtoint i8* %74 to i64
  %77 = sub i64 %75, %76
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %80

; <label>:79                                      ; preds = %68
  call void @parse_tiff(i32 0)
  br label %80

; <label>:80                                      ; preds = %79, %68
  br label %305

; <label>:81                                      ; preds = %64
  %82 = load i16* @order, align 2
  %83 = sext i16 %82 to i32
  %84 = icmp eq i32 %83, 18761
  br i1 %84, label %89, label %85

; <label>:85                                      ; preds = %81
  %86 = load i16* @order, align 2
  %87 = sext i16 %86 to i32
  %88 = icmp eq i32 %87, 19789
  br i1 %88, label %89, label %99

; <label>:89                                      ; preds = %85, %81
  %90 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %91 = getelementptr inbounds i8* %90, i64 6
  %92 = call i32 @memcmp(i8* %91, i8* getelementptr inbounds ([9 x i8]* @.str427, i32 0, i32 0), i64 8) #10
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %97, label %94

; <label>:94                                      ; preds = %89
  %95 = zext i32 %50 to i64
  store i64 %95, i64* @data_offset, align 8
  %96 = sub i32 %60, %50
  call void @parse_ciff(i32 %50, i32 %96)
  br label %98

; <label>:97                                      ; preds = %89
  call void @parse_tiff(i32 0)
  br label %98

; <label>:98                                      ; preds = %97, %94
  br label %304

; <label>:99                                      ; preds = %85
  %100 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %101 = call i32 @memcmp(i8* %100, i8* getelementptr inbounds ([5 x i8]* @.str428, i32 0, i32 0), i64 4) #10
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %123, label %103

; <label>:103                                     ; preds = %99
  %104 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %105 = getelementptr inbounds i8* %104, i64 6
  %106 = call i32 @memcmp(i8* %105, i8* getelementptr inbounds ([5 x i8]* @.str429, i32 0, i32 0), i64 4) #10
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %123, label %108

; <label>:108                                     ; preds = %103
  %109 = load %struct._IO_FILE** @ifp, align 8
  %110 = call i32 @fseek(%struct._IO_FILE* %109, i64 4, i32 0)
  %111 = call zeroext i16 @get2()
  %112 = zext i16 %111 to i32
  %113 = add nsw i32 4, %112
  %114 = sext i32 %113 to i64
  store i64 %114, i64* @data_offset, align 8
  %115 = load %struct._IO_FILE** @ifp, align 8
  %116 = load i64* @data_offset, align 8
  %117 = call i32 @fseek(%struct._IO_FILE* %115, i64 %116, i32 0)
  %118 = load %struct._IO_FILE** @ifp, align 8
  %119 = call i32 @getc_unlocked(%struct._IO_FILE* %118)
  %120 = icmp ne i32 %119, 255
  br i1 %120, label %121, label %122

; <label>:121                                     ; preds = %108
  call void @parse_tiff(i32 12)
  br label %122

; <label>:122                                     ; preds = %121, %108
  store i64 0, i64* @thumb_offset, align 8
  br label %303

; <label>:123                                     ; preds = %103, %99
  %124 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %125 = getelementptr inbounds i8* %124, i64 25
  %126 = call i32 @memcmp(i8* %125, i8* getelementptr inbounds ([8 x i8]* @.str430, i32 0, i32 0), i64 7) #10
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %147, label %128

; <label>:128                                     ; preds = %123
  %129 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str431, i32 0, i32 0)) #4
  %130 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str432, i32 0, i32 0)) #4
  %131 = load %struct._IO_FILE** @ifp, align 8
  %132 = call i32 @fseek(%struct._IO_FILE* %131, i64 33, i32 0)
  call void @get_timestamp(i32 1)
  %133 = load %struct._IO_FILE** @ifp, align 8
  %134 = call i32 @fseek(%struct._IO_FILE* %133, i64 60, i32 0)
  br label %135

; <label>:135                                     ; preds = %144, %128
  %c.2 = phi i32 [ 0, %128 ], [ %145, %144 ]
  %136 = icmp ult i32 %c.2, 4
  br i1 %136, label %137, label %146

; <label>:137                                     ; preds = %135
  %138 = call i32 @get4()
  %139 = uitofp i32 %138 to float
  %140 = lshr i32 %c.2, 1
  %141 = xor i32 %c.2, %140
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %142
  store float %139, float* %143, align 4
  br label %144

; <label>:144                                     ; preds = %137
  %145 = add i32 %c.2, 1
  br label %135

; <label>:146                                     ; preds = %135
  br label %302

; <label>:147                                     ; preds = %123
  %148 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %149 = call i32 @strcmp(i8* %148, i8* getelementptr inbounds ([4 x i8]* @.str433, i32 0, i32 0)) #10
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %154, label %151

; <label>:151                                     ; preds = %147
  %152 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str434, i32 0, i32 0)) #4
  %153 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str435, i32 0, i32 0)) #4
  br label %301

; <label>:154                                     ; preds = %147
  %155 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %156 = call i32 @strcmp(i8* %155, i8* getelementptr inbounds ([5 x i8]* @.str436, i32 0, i32 0)) #10
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %161, label %158

; <label>:158                                     ; preds = %154
  %159 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str437, i32 0, i32 0)) #4
  %160 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str438, i32 0, i32 0)) #4
  br label %300

; <label>:161                                     ; preds = %154
  %162 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %163 = call i32 @strcmp(i8* %162, i8* getelementptr inbounds ([5 x i8]* @.str439, i32 0, i32 0)) #10
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %168, label %165

; <label>:165                                     ; preds = %161
  %166 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str437, i32 0, i32 0)) #4
  %167 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str440, i32 0, i32 0)) #4
  br label %299

; <label>:168                                     ; preds = %161
  %169 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %170 = call i32 @memcmp(i8* %169, i8* getelementptr inbounds ([9 x i8]* @.str94, i32 0, i32 0), i64 8) #10
  %171 = icmp ne i32 %170, 0
  br i1 %171, label %209, label %172

; <label>:172                                     ; preds = %168
  %173 = load %struct._IO_FILE** @ifp, align 8
  %174 = call i32 @fseek(%struct._IO_FILE* %173, i64 84, i32 0)
  %175 = call i32 @get4()
  %176 = zext i32 %175 to i64
  store i64 %176, i64* @thumb_offset, align 8
  %177 = call i32 @get4()
  store i32 %177, i32* @thumb_length, align 4
  %178 = load %struct._IO_FILE** @ifp, align 8
  %179 = call i32 @fseek(%struct._IO_FILE* %178, i64 92, i32 0)
  %180 = call i32 @get4()
  call void @parse_fuji(i32 %180)
  %181 = load i64* @thumb_offset, align 8
  %182 = icmp sgt i64 %181, 120
  br i1 %182, label %183, label %201

; <label>:183                                     ; preds = %172
  %184 = load %struct._IO_FILE** @ifp, align 8
  %185 = call i32 @fseek(%struct._IO_FILE* %184, i64 120, i32 0)
  %186 = call i32 @get4()
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %188, label %189

; <label>:188                                     ; preds = %183
  br label %189

; <label>:189                                     ; preds = %188, %183
  %190 = phi i1 [ false, %183 ], [ true, %188 ]
  %191 = zext i1 %190 to i32
  %192 = load i32* @is_raw, align 4
  %193 = add i32 %192, %191
  store i32 %193, i32* @is_raw, align 4
  %194 = load i32* @is_raw, align 4
  %195 = icmp eq i32 %194, 2
  br i1 %195, label %196, label %200

; <label>:196                                     ; preds = %189
  %197 = load i32* @shot_select, align 4
  %198 = icmp ne i32 %197, 0
  br i1 %198, label %199, label %200

; <label>:199                                     ; preds = %196
  call void @parse_fuji(i32 %186)
  br label %200

; <label>:200                                     ; preds = %199, %196, %189
  br label %201

; <label>:201                                     ; preds = %200, %172
  %202 = load %struct._IO_FILE** @ifp, align 8
  %203 = call i32 @fseek(%struct._IO_FILE* %202, i64 100, i32 0)
  %204 = call i32 @get4()
  %205 = zext i32 %204 to i64
  store i64 %205, i64* @data_offset, align 8
  %206 = load i64* @thumb_offset, align 8
  %207 = add nsw i64 %206, 12
  %208 = trunc i64 %207 to i32
  call void @parse_tiff(i32 %208)
  br label %298

; <label>:209                                     ; preds = %168
  %210 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %211 = call i32 @memcmp(i8* %210, i8* getelementptr inbounds ([5 x i8]* @.str194, i32 0, i32 0), i64 4) #10
  %212 = icmp ne i32 %211, 0
  br i1 %212, label %216, label %213

; <label>:213                                     ; preds = %209
  %214 = load %struct._IO_FILE** @ifp, align 8
  %215 = call i32 @fseek(%struct._IO_FILE* %214, i64 0, i32 0)
  call void @parse_riff()
  br label %297

; <label>:216                                     ; preds = %209
  %217 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %218 = call i32 @memcmp(i8* %217, i8* getelementptr inbounds ([7 x i8]* @.str441, i32 0, i32 0), i64 6) #10
  %219 = icmp ne i32 %218, 0
  br i1 %219, label %234, label %220

; <label>:220                                     ; preds = %216
  %221 = load %struct._IO_FILE** @ifp, align 8
  %222 = call i32 @fseek(%struct._IO_FILE* %221, i64 6, i32 0)
  %223 = load %struct._IO_FILE** @ifp, align 8
  %224 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 1, i64 8, %struct._IO_FILE* %223)
  %225 = load %struct._IO_FILE** @ifp, align 8
  %226 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 1, i64 8, %struct._IO_FILE* %225)
  %227 = load %struct._IO_FILE** @ifp, align 8
  %228 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i64 1, i64 16, %struct._IO_FILE* %227)
  %229 = call zeroext i16 @get2()
  %230 = zext i16 %229 to i64
  store i64 %230, i64* @data_offset, align 8
  %231 = call zeroext i16 @get2()
  %232 = call zeroext i16 @get2()
  store i16 %232, i16* @raw_width, align 2
  %233 = call zeroext i16 @get2()
  store i16 %233, i16* @raw_height, align 2
  store void (...)* bitcast (void ()* @nokia_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1633771873, i32* @filters, align 4
  br label %296

; <label>:234                                     ; preds = %216
  %235 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %236 = call i32 @memcmp(i8* %235, i8* getelementptr inbounds ([10 x i8]* @.str442, i32 0, i32 0), i64 9) #10
  %237 = icmp ne i32 %236, 0
  br i1 %237, label %239, label %238

; <label>:238                                     ; preds = %234
  call void @parse_rollei()
  br label %295

; <label>:239                                     ; preds = %234
  %240 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %241 = call i32 @memcmp(i8* %240, i8* getelementptr inbounds ([5 x i8]* @.str443, i32 0, i32 0), i64 4) #10
  %242 = icmp ne i32 %241, 0
  br i1 %242, label %244, label %243

; <label>:243                                     ; preds = %239
  call void @parse_sinar_ia()
  br label %294

; <label>:244                                     ; preds = %239
  %245 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %246 = call i32 @memcmp(i8* %245, i8* getelementptr inbounds ([5 x i8]* @.str444, i32 0, i32 0), i64 4) #10
  %247 = icmp ne i32 %246, 0
  br i1 %247, label %249, label %248

; <label>:248                                     ; preds = %244
  call void @parse_minolta(i32 0)
  br label %293

; <label>:249                                     ; preds = %244
  %250 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %251 = call i32 @memcmp(i8* %250, i8* getelementptr inbounds ([5 x i8]* @.str445, i32 0, i32 0), i64 4) #10
  %252 = icmp ne i32 %251, 0
  br i1 %252, label %254, label %253

; <label>:253                                     ; preds = %249
  call void @parse_foveon()
  br label %292

; <label>:254                                     ; preds = %249
  %255 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %256 = call i32 @memcmp(i8* %255, i8* getelementptr inbounds ([3 x i8]* @.str446, i32 0, i32 0), i64 2) #10
  %257 = icmp ne i32 %256, 0
  br i1 %257, label %259, label %258

; <label>:258                                     ; preds = %254
  call void @parse_cine()
  br label %291

; <label>:259                                     ; preds = %254
  br label %260

; <label>:260                                     ; preds = %288, %259
  %i.2 = phi i32 [ 0, %259 ], [ %289, %288 ]
  %261 = zext i32 %i.2 to i64
  %262 = icmp ult i64 %261, 68
  br i1 %262, label %263, label %290

; <label>:263                                     ; preds = %260
  %264 = zext i32 %i.2 to i64
  %265 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %264
  %266 = getelementptr inbounds %struct.anon.4* %265, i32 0, i32 0
  %267 = load i32* %266, align 4
  %268 = icmp eq i32 %60, %267
  br i1 %268, label %269, label %287

; <label>:269                                     ; preds = %263
  %270 = zext i32 %i.2 to i64
  %271 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %270
  %272 = getelementptr inbounds %struct.anon.4* %271, i32 0, i32 1
  %273 = getelementptr inbounds [12 x i8]* %272, i32 0, i32 0
  %274 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %273) #4
  %275 = zext i32 %i.2 to i64
  %276 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %275
  %277 = getelementptr inbounds %struct.anon.4* %276, i32 0, i32 2
  %278 = getelementptr inbounds [19 x i8]* %277, i32 0, i32 0
  %279 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %278) #4
  %280 = zext i32 %i.2 to i64
  %281 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %280
  %282 = getelementptr inbounds %struct.anon.4* %281, i32 0, i32 3
  %283 = load i8* %282, align 1
  %284 = icmp ne i8 %283, 0
  br i1 %284, label %285, label %286

; <label>:285                                     ; preds = %269
  call void @parse_external_jpeg()
  br label %286

; <label>:286                                     ; preds = %285, %269
  br label %287

; <label>:287                                     ; preds = %286, %263
  br label %288

; <label>:288                                     ; preds = %287
  %289 = add i32 %i.2, 1
  br label %260

; <label>:290                                     ; preds = %260
  br label %291

; <label>:291                                     ; preds = %290, %258
  br label %292

; <label>:292                                     ; preds = %291, %253
  br label %293

; <label>:293                                     ; preds = %292, %248
  br label %294

; <label>:294                                     ; preds = %293, %243
  br label %295

; <label>:295                                     ; preds = %294, %238
  br label %296

; <label>:296                                     ; preds = %295, %220
  br label %297

; <label>:297                                     ; preds = %296, %213
  br label %298

; <label>:298                                     ; preds = %297, %201
  br label %299

; <label>:299                                     ; preds = %298, %165
  br label %300

; <label>:300                                     ; preds = %299, %158
  br label %301

; <label>:301                                     ; preds = %300, %151
  br label %302

; <label>:302                                     ; preds = %301, %146
  br label %303

; <label>:303                                     ; preds = %302, %122
  br label %304

; <label>:304                                     ; preds = %303, %98
  br label %305

; <label>:305                                     ; preds = %304, %80
  %306 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %307 = sext i8 %306 to i32
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %309, label %310

; <label>:309                                     ; preds = %305
  call void @parse_smal(i32 0, i32 %60)
  br label %310

; <label>:310                                     ; preds = %309, %305
  %311 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %312 = sext i8 %311 to i32
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %316

; <label>:314                                     ; preds = %310
  store i32 0, i32* @is_raw, align 4
  %315 = call i32 @parse_jpeg(i32 0)
  br label %316

; <label>:316                                     ; preds = %314, %310
  br label %317

; <label>:317                                     ; preds = %332, %316
  %i.3 = phi i32 [ 0, %316 ], [ %333, %332 ]
  %318 = zext i32 %i.3 to i64
  %319 = icmp ult i64 %318, 15
  br i1 %319, label %320, label %334

; <label>:320                                     ; preds = %317
  %321 = zext i32 %i.3 to i64
  %322 = getelementptr inbounds [15 x i8*]* @identify.corp, i32 0, i64 %321
  %323 = load i8** %322, align 8
  %324 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %323) #10
  %325 = icmp ne i8* %324, null
  br i1 %325, label %326, label %331

; <label>:326                                     ; preds = %320
  %327 = zext i32 %i.3 to i64
  %328 = getelementptr inbounds [15 x i8*]* @identify.corp, i32 0, i64 %327
  %329 = load i8** %328, align 8
  %330 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %329) #4
  br label %331

; <label>:331                                     ; preds = %326, %320
  br label %332

; <label>:332                                     ; preds = %331
  %333 = add i32 %i.3, 1
  br label %317

; <label>:334                                     ; preds = %317
  %335 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0), i64 5) #10
  %336 = icmp ne i32 %335, 0
  br i1 %336, label %338, label %337

; <label>:337                                     ; preds = %334
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 16), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 16), align 1
  br label %338

; <label>:338                                     ; preds = %337, %334
  %339 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0)) #10
  %340 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 %339
  br label %341

; <label>:341                                     ; preds = %346, %338
  %cp.1 = phi i8* [ %340, %338 ], [ %342, %346 ]
  %342 = getelementptr inbounds i8* %cp.1, i32 -1
  %343 = load i8* %342, align 1
  %344 = sext i8 %343 to i32
  %345 = icmp eq i32 %344, 32
  br i1 %345, label %346, label %347

; <label>:346                                     ; preds = %341
  store i8 0, i8* %342, align 1
  br label %341

; <label>:347                                     ; preds = %341
  %348 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0)) #10
  %349 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 %348
  br label %350

; <label>:350                                     ; preds = %355, %347
  %cp.2 = phi i8* [ %349, %347 ], [ %351, %355 ]
  %351 = getelementptr inbounds i8* %cp.2, i32 -1
  %352 = load i8* %351, align 1
  %353 = sext i8 %352 to i32
  %354 = icmp eq i32 %353, 32
  br i1 %354, label %355, label %356

; <label>:355                                     ; preds = %350
  store i8 0, i8* %351, align 1
  br label %350

; <label>:356                                     ; preds = %350
  %357 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0)) #10
  %358 = trunc i64 %357 to i32
  %359 = zext i32 %358 to i64
  %360 = call i32 @strncasecmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 %359) #10
  %361 = icmp ne i32 %360, 0
  br i1 %361, label %374, label %362

; <label>:362                                     ; preds = %356
  %363 = add i32 %358, 1
  %364 = zext i32 %358 to i64
  %365 = getelementptr inbounds [64 x i8]* @model, i32 0, i64 %364
  %366 = load i8* %365, align 1
  %367 = sext i8 %366 to i32
  %368 = icmp eq i32 %367, 32
  br i1 %368, label %369, label %374

; <label>:369                                     ; preds = %362
  %370 = zext i32 %363 to i64
  %371 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 %370
  %372 = sub i32 64, %363
  %373 = zext i32 %372 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %371, i64 %373, i32 1, i1 false)
  br label %374

; <label>:374                                     ; preds = %369, %362, %356
  %375 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str447, i32 0, i32 0), i64 15) #10
  %376 = icmp ne i32 %375, 0
  br i1 %376, label %379, label %377

; <label>:377                                     ; preds = %374
  %378 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 15)) #4
  br label %379

; <label>:379                                     ; preds = %377, %374
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i64 511), align 1
  %380 = load i32* @is_raw, align 4
  %381 = icmp ne i32 %380, 0
  br i1 %381, label %383, label %382

; <label>:382                                     ; preds = %379
  br label %2239

; <label>:383                                     ; preds = %379
  %384 = load i32* @maximum, align 4
  %385 = icmp ne i32 %384, 0
  br i1 %385, label %390, label %386

; <label>:386                                     ; preds = %383
  %387 = load i32* @tiff_bps, align 4
  %388 = shl i32 1, %387
  %389 = sub nsw i32 %388, 1
  store i32 %389, i32* @maximum, align 4
  br label %390

; <label>:390                                     ; preds = %386, %383
  %391 = load i16* @height, align 2
  %392 = icmp ne i16 %391, 0
  br i1 %392, label %395, label %393

; <label>:393                                     ; preds = %390
  %394 = load i16* @raw_height, align 2
  store i16 %394, i16* @height, align 2
  br label %395

; <label>:395                                     ; preds = %393, %390
  %396 = load i16* @width, align 2
  %397 = icmp ne i16 %396, 0
  br i1 %397, label %400, label %398

; <label>:398                                     ; preds = %395
  %399 = load i16* @raw_width, align 2
  store i16 %399, i16* @width, align 2
  br label %400

; <label>:400                                     ; preds = %398, %395
  %401 = load i16* @fuji_width, align 2
  %402 = icmp ne i16 %401, 0
  br i1 %402, label %403, label %414

; <label>:403                                     ; preds = %400
  %404 = load i16* @height, align 2
  %405 = zext i16 %404 to i32
  %406 = load i16* @fuji_width, align 2
  %407 = zext i16 %406 to i32
  %408 = add nsw i32 %405, %407
  %409 = trunc i32 %408 to i16
  store i16 %409, i16* @width, align 2
  %410 = load i16* @width, align 2
  %411 = zext i16 %410 to i32
  %412 = sub nsw i32 %411, 1
  %413 = trunc i32 %412 to i16
  store i16 %413, i16* @height, align 2
  store double 1.000000e+00, double* @pixel_aspect, align 8
  br label %414

; <label>:414                                     ; preds = %403, %400
  %415 = load i16* @height, align 2
  %416 = zext i16 %415 to i32
  %417 = icmp eq i32 %416, 2624
  br i1 %417, label %418, label %423

; <label>:418                                     ; preds = %414
  %419 = load i16* @width, align 2
  %420 = zext i16 %419 to i32
  %421 = icmp eq i32 %420, 3936
  br i1 %421, label %422, label %423

; <label>:422                                     ; preds = %418
  store i16 2616, i16* @height, align 2
  store i16 3896, i16* @width, align 2
  br label %423

; <label>:423                                     ; preds = %422, %418, %414
  %424 = load i16* @height, align 2
  %425 = zext i16 %424 to i32
  %426 = icmp eq i32 %425, 3136
  br i1 %426, label %427, label %432

; <label>:427                                     ; preds = %423
  %428 = load i16* @width, align 2
  %429 = zext i16 %428 to i32
  %430 = icmp eq i32 %429, 4864
  br i1 %430, label %431, label %432

; <label>:431                                     ; preds = %427
  store i16 3124, i16* @height, align 2
  store i16 4688, i16* @width, align 2
  br label %432

; <label>:432                                     ; preds = %431, %427, %423
  %433 = load i16* @height, align 2
  %434 = zext i16 %433 to i32
  %435 = icmp eq i32 %434, 3014
  br i1 %435, label %436, label %441

; <label>:436                                     ; preds = %432
  %437 = load i16* @width, align 2
  %438 = zext i16 %437 to i32
  %439 = icmp eq i32 %438, 4096
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %436
  store i16 4014, i16* @width, align 2
  br label %441

; <label>:441                                     ; preds = %440, %436, %432
  %442 = load i32* @dng_version, align 4
  %443 = icmp ne i32 %442, 0
  br i1 %443, label %444, label %464

; <label>:444                                     ; preds = %441
  %445 = load i32* @filters, align 4
  %446 = icmp eq i32 %445, -1
  br i1 %446, label %447, label %448

; <label>:447                                     ; preds = %444
  store i32 0, i32* @filters, align 4
  br label %448

; <label>:448                                     ; preds = %447, %444
  %449 = load i32* @filters, align 4
  %450 = icmp ne i32 %449, 0
  br i1 %450, label %451, label %453

; <label>:451                                     ; preds = %448
  %452 = load i32* @tiff_samples, align 4
  store i32 %452, i32* @is_raw, align 4
  br label %455

; <label>:453                                     ; preds = %448
  %454 = load i32* @tiff_samples, align 4
  store i32 %454, i32* @colors, align 4
  br label %455

; <label>:455                                     ; preds = %453, %451
  %456 = load i32* @tiff_compress, align 4
  %457 = icmp eq i32 %456, 1
  br i1 %457, label %458, label %459

; <label>:458                                     ; preds = %455
  store void (...)* bitcast (void ()* @adobe_dng_load_raw_nc to void (...)*), void (...)** @load_raw, align 8
  br label %459

; <label>:459                                     ; preds = %458, %455
  %460 = load i32* @tiff_compress, align 4
  %461 = icmp eq i32 %460, 7
  br i1 %461, label %462, label %463

; <label>:462                                     ; preds = %459
  store void (...)* bitcast (void ()* @adobe_dng_load_raw_lj to void (...)*), void (...)** @load_raw, align 8
  br label %463

; <label>:463                                     ; preds = %462, %459
  br label %2174

; <label>:464                                     ; preds = %441
  %465 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0)) #10
  %466 = icmp ne i32 %465, 0
  %467 = xor i1 %466, true
  %468 = zext i1 %467 to i32
  br i1 %467, label %469, label %475

; <label>:469                                     ; preds = %464
  %470 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %471 = getelementptr inbounds i8* %470, i64 6
  %472 = call i32 @memcmp(i8* %471, i8* getelementptr inbounds ([9 x i8]* @.str427, i32 0, i32 0), i64 8) #10
  %473 = icmp ne i32 %472, 0
  %474 = select i1 %473, void (...)* bitcast (void ()* @lossless_jpeg_load_raw to void (...)*), void (...)* bitcast (void ()* @canon_compressed_load_raw to void (...)*)
  store void (...)* %474, void (...)** @load_raw, align 8
  br label %475

; <label>:475                                     ; preds = %469, %464
  %476 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0)) #10
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %496, label %478

; <label>:478                                     ; preds = %475
  %479 = load void (...)** @load_raw, align 8
  %480 = icmp ne void (...)* %479, null
  br i1 %480, label %482, label %481

; <label>:481                                     ; preds = %478
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %482

; <label>:482                                     ; preds = %481, %478
  %483 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %484 = sext i8 %483 to i32
  %485 = icmp eq i32 %484, 69
  br i1 %485, label %486, label %495

; <label>:486                                     ; preds = %482
  %487 = load i64* @data_offset, align 8
  %488 = icmp ne i64 %487, 0
  %489 = xor i1 %488, true
  %490 = zext i1 %489 to i32
  %491 = shl i32 %490, 2
  %492 = or i32 %491, 2
  %493 = load i32* @load_flags, align 4
  %494 = or i32 %493, %492
  store i32 %494, i32* @load_flags, align 4
  br label %495

; <label>:495                                     ; preds = %486, %482
  br label %496

; <label>:496                                     ; preds = %495, %475
  %497 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str424, i32 0, i32 0)) #10
  %498 = icmp ne i32 %497, 0
  br i1 %498, label %500, label %499

; <label>:499                                     ; preds = %496
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 3967, i32* @maximum, align 4
  br label %500

; <label>:500                                     ; preds = %499, %496
  %501 = load i32* @is_foveon, align 4
  %502 = icmp ne i32 %501, 0
  br i1 %502, label %503, label %519

; <label>:503                                     ; preds = %500
  %504 = load i16* @height, align 2
  %505 = zext i16 %504 to i32
  %506 = mul nsw i32 %505, 2
  %507 = load i16* @width, align 2
  %508 = zext i16 %507 to i32
  %509 = icmp slt i32 %506, %508
  br i1 %509, label %510, label %511

; <label>:510                                     ; preds = %503
  store double 5.000000e-01, double* @pixel_aspect, align 8
  br label %511

; <label>:511                                     ; preds = %510, %503
  %512 = load i16* @height, align 2
  %513 = zext i16 %512 to i32
  %514 = load i16* @width, align 2
  %515 = zext i16 %514 to i32
  %516 = icmp sgt i32 %513, %515
  br i1 %516, label %517, label %518

; <label>:517                                     ; preds = %511
  store double 2.000000e+00, double* @pixel_aspect, align 8
  br label %518

; <label>:518                                     ; preds = %517, %511
  store i32 0, i32* @filters, align 4
  store void (...)* bitcast (void ()* @foveon_load_raw to void (...)*), void (...)** @load_raw, align 8
  call void @simple_coeff(i32 0)
  br label %2136

; <label>:519                                     ; preds = %500
  %520 = icmp ne i32 %468, 0
  br i1 %520, label %521, label %538

; <label>:521                                     ; preds = %519
  %522 = load i32* @tiff_bps, align 4
  %523 = icmp eq i32 %522, 15
  br i1 %523, label %524, label %538

; <label>:524                                     ; preds = %521
  %525 = load i16* @width, align 2
  %526 = zext i16 %525 to i32
  switch i32 %526, label %537 [
    i32 3344, label %527
    i32 3872, label %532
  ]

; <label>:527                                     ; preds = %524
  %528 = load i16* @width, align 2
  %529 = zext i16 %528 to i32
  %530 = sub nsw i32 %529, 66
  %531 = trunc i32 %530 to i16
  store i16 %531, i16* @width, align 2
  br label %532

; <label>:532                                     ; preds = %527, %524
  %533 = load i16* @width, align 2
  %534 = zext i16 %533 to i32
  %535 = sub nsw i32 %534, 6
  %536 = trunc i32 %535 to i16
  store i16 %536, i16* @width, align 2
  br label %537

; <label>:537                                     ; preds = %532, %524
  store i32 0, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_sraw_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2135

; <label>:538                                     ; preds = %521, %519
  %539 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str448, i32 0, i32 0)) #10
  %540 = icmp ne i32 %539, 0
  br i1 %540, label %542, label %541

; <label>:541                                     ; preds = %538
  store i16 613, i16* @height, align 2
  store i16 854, i16* @width, align 2
  store i16 896, i16* @raw_width, align 2
  store double 0x3FEEEE104E447BEC, double* @pixel_aspect, align 8
  store i32 4, i32* @colors, align 4
  store i32 -505093660, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_600_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2134

; <label>:542                                     ; preds = %538
  %543 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str449, i32 0, i32 0)) #10
  %544 = icmp ne i32 %543, 0
  br i1 %544, label %545, label %548

; <label>:545                                     ; preds = %542
  %546 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str450, i32 0, i32 0)) #10
  %547 = icmp ne i32 %546, 0
  br i1 %547, label %549, label %548

; <label>:548                                     ; preds = %545, %542
  store i16 773, i16* @height, align 2
  store i16 960, i16* @width, align 2
  store i16 992, i16* @raw_width, align 2
  store double 0x3FF16E0689427379, double* @pixel_aspect, align 8
  store i32 4, i32* @colors, align 4
  store i32 508436046, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2133

; <label>:549                                     ; preds = %545
  %550 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str451, i32 0, i32 0)) #10
  %551 = icmp ne i32 %550, 0
  br i1 %551, label %553, label %552

; <label>:552                                     ; preds = %549
  store i16 968, i16* @height, align 2
  store i16 1290, i16* @width, align 2
  store i16 1320, i16* @raw_width, align 2
  store i32 4, i32* @colors, align 4
  store i32 458115870, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2132

; <label>:553                                     ; preds = %549
  %554 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str452, i32 0, i32 0)) #10
  %555 = icmp ne i32 %554, 0
  br i1 %555, label %557, label %556

; <label>:556                                     ; preds = %553
  store i16 1024, i16* @height, align 2
  store i16 1552, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 508251675, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2131

; <label>:557                                     ; preds = %553
  %558 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str453, i32 0, i32 0)) #10
  %559 = icmp ne i32 %558, 0
  br i1 %559, label %561, label %560

; <label>:560                                     ; preds = %557
  store i16 1752, i16* @height, align 2
  store i16 2344, i16* @width, align 2
  store i16 1766, i16* @raw_height, align 2
  store i16 2400, i16* @raw_width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2130

; <label>:561                                     ; preds = %557
  %562 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str454, i32 0, i32 0)) #10
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %565, label %564

; <label>:564                                     ; preds = %561
  store i16 1960, i16* @height, align 2
  store i16 2616, i16* @width, align 2
  store i16 1968, i16* @raw_height, align 2
  store i16 2664, i16* @raw_width, align 2
  store i16 4, i16* @top_margin, align 2
  store i16 4, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2129

; <label>:565                                     ; preds = %561
  %566 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str455, i32 0, i32 0)) #10
  %567 = icmp ne i32 %566, 0
  br i1 %567, label %569, label %568

; <label>:568                                     ; preds = %565
  store i16 1984, i16* @height, align 2
  store i16 2620, i16* @width, align 2
  store i16 1992, i16* @raw_height, align 2
  store i16 2672, i16* @raw_width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 10, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 0, i32* @raw_color, align 4
  br label %2128

; <label>:569                                     ; preds = %565
  %570 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str456, i32 0, i32 0)) #10
  %571 = icmp ne i32 %570, 0
  br i1 %571, label %578, label %572

; <label>:572                                     ; preds = %569
  %573 = call i32 @canon_s2is()
  %574 = icmp ne i32 %573, 0
  br i1 %574, label %575, label %577

; <label>:575                                     ; preds = %572
  %576 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 10), i8* getelementptr inbounds ([6 x i8]* @.str457, i32 0, i32 0)) #4
  br label %577

; <label>:577                                     ; preds = %575, %572
  store i16 1960, i16* @height, align 2
  store i16 2616, i16* @width, align 2
  store i16 1968, i16* @raw_height, align 2
  store i16 2672, i16* @raw_width, align 2
  store i16 8, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2127

; <label>:578                                     ; preds = %569
  %579 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str458, i32 0, i32 0)) #10
  %580 = icmp ne i32 %579, 0
  br i1 %580, label %582, label %581

; <label>:581                                     ; preds = %578
  store i16 2328, i16* @height, align 2
  store i16 3112, i16* @width, align 2
  store i16 2340, i16* @raw_height, align 2
  store i16 3152, i16* @raw_width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 36, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2126

; <label>:582                                     ; preds = %578
  %583 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str459, i32 0, i32 0)) #10
  %584 = icmp ne i32 %583, 0
  br i1 %584, label %586, label %585

; <label>:585                                     ; preds = %582
  store i16 2472, i16* @height, align 2
  store i16 3298, i16* @width, align 2
  store i16 2480, i16* @raw_height, align 2
  store i16 3336, i16* @raw_width, align 2
  store i16 5, i16* @top_margin, align 2
  store i16 6, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2125

; <label>:586                                     ; preds = %582
  %587 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str460, i32 0, i32 0)) #10
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %590, label %589

; <label>:589                                     ; preds = %586
  store i16 2472, i16* @height, align 2
  store i16 3288, i16* @width, align 2
  store i16 2484, i16* @raw_height, align 2
  store i16 3344, i16* @raw_width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2124

; <label>:590                                     ; preds = %586
  %591 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str461, i32 0, i32 0)) #10
  %592 = icmp ne i32 %591, 0
  br i1 %592, label %594, label %593

; <label>:593                                     ; preds = %590
  store i16 2760, i16* @height, align 2
  store i16 3672, i16* @width, align 2
  store i16 2772, i16* @raw_height, align 2
  store i16 3736, i16* @raw_width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2123

; <label>:594                                     ; preds = %590
  %595 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str462, i32 0, i32 0)) #10
  %596 = icmp ne i32 %595, 0
  br i1 %596, label %598, label %597

; <label>:597                                     ; preds = %594
  store i16 3024, i16* @height, align 2
  store i16 4032, i16* @width, align 2
  store i16 3048, i16* @raw_height, align 2
  store i16 4104, i16* @raw_width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 48, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2122

; <label>:598                                     ; preds = %594
  %599 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str463, i32 0, i32 0)) #10
  %600 = icmp ne i32 %599, 0
  br i1 %600, label %602, label %601

; <label>:601                                     ; preds = %598
  store i16 2128, i16* @height, align 2
  store i16 2840, i16* @width, align 2
  store i16 2136, i16* @raw_height, align 2
  store i16 2888, i16* @raw_width, align 2
  store i16 8, i16* @top_margin, align 2
  store i16 44, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2121

; <label>:602                                     ; preds = %598
  %603 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str464, i32 0, i32 0)) #10
  %604 = icmp ne i32 %603, 0
  br i1 %604, label %606, label %605

; <label>:605                                     ; preds = %602
  store i16 1896, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %2120

; <label>:606                                     ; preds = %602
  %607 = icmp ne i32 %468, 0
  br i1 %607, label %608, label %617

; <label>:608                                     ; preds = %606
  %609 = load i16* @raw_width, align 2
  %610 = zext i16 %609 to i32
  %611 = icmp eq i32 %610, 2144
  br i1 %611, label %612, label %617

; <label>:612                                     ; preds = %608
  store i16 1550, i16* @height, align 2
  store i16 2088, i16* @width, align 2
  store i16 8, i16* @top_margin, align 2
  store i16 4, i16* @left_margin, align 2
  %613 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str465, i32 0, i32 0)) #10
  %614 = icmp ne i32 %613, 0
  br i1 %614, label %616, label %615

; <label>:615                                     ; preds = %612
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %616

; <label>:616                                     ; preds = %615, %612
  br label %2119

; <label>:617                                     ; preds = %608, %606
  %618 = icmp ne i32 %468, 0
  br i1 %618, label %619, label %624

; <label>:619                                     ; preds = %617
  %620 = load i16* @raw_width, align 2
  %621 = zext i16 %620 to i32
  %622 = icmp eq i32 %621, 2224
  br i1 %622, label %623, label %624

; <label>:623                                     ; preds = %619
  store i16 1448, i16* @height, align 2
  store i16 2176, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 48, i16* @left_margin, align 2
  br label %2118

; <label>:624                                     ; preds = %619, %617
  %625 = icmp ne i32 %468, 0
  br i1 %625, label %626, label %631

; <label>:626                                     ; preds = %624
  %627 = load i16* @raw_width, align 2
  %628 = zext i16 %627 to i32
  %629 = icmp eq i32 %628, 2376
  br i1 %629, label %630, label %631

; <label>:630                                     ; preds = %626
  store i16 1720, i16* @height, align 2
  store i16 2312, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  br label %2117

; <label>:631                                     ; preds = %626, %624
  %632 = icmp ne i32 %468, 0
  br i1 %632, label %633, label %638

; <label>:633                                     ; preds = %631
  %634 = load i16* @raw_width, align 2
  %635 = zext i16 %634 to i32
  %636 = icmp eq i32 %635, 2672
  br i1 %636, label %637, label %638

; <label>:637                                     ; preds = %633
  store i16 1960, i16* @height, align 2
  store i16 2616, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  br label %2116

; <label>:638                                     ; preds = %633, %631
  %639 = icmp ne i32 %468, 0
  br i1 %639, label %640, label %649

; <label>:640                                     ; preds = %638
  %641 = load i16* @raw_width, align 2
  %642 = zext i16 %641 to i32
  %643 = icmp eq i32 %642, 3152
  br i1 %643, label %644, label %649

; <label>:644                                     ; preds = %640
  store i16 2056, i16* @height, align 2
  store i16 3088, i16* @width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 64, i16* @left_margin, align 2
  %645 = load i32* @unique_id, align 4
  %646 = icmp eq i32 %645, -2147483280
  br i1 %646, label %647, label %648

; <label>:647                                     ; preds = %644
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str466, i32 0, i32 0))
  br label %648

; <label>:648                                     ; preds = %647, %644
  br label %2115

; <label>:649                                     ; preds = %640, %638
  %650 = icmp ne i32 %468, 0
  br i1 %650, label %651, label %656

; <label>:651                                     ; preds = %649
  %652 = load i16* @raw_width, align 2
  %653 = zext i16 %652 to i32
  %654 = icmp eq i32 %653, 3160
  br i1 %654, label %655, label %656

; <label>:655                                     ; preds = %651
  store i16 2328, i16* @height, align 2
  store i16 3112, i16* @width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 44, i16* @left_margin, align 2
  br label %2114

; <label>:656                                     ; preds = %651, %649
  %657 = icmp ne i32 %468, 0
  br i1 %657, label %658, label %663

; <label>:658                                     ; preds = %656
  %659 = load i16* @raw_width, align 2
  %660 = zext i16 %659 to i32
  %661 = icmp eq i32 %660, 3344
  br i1 %661, label %662, label %663

; <label>:662                                     ; preds = %658
  store i16 2472, i16* @height, align 2
  store i16 3288, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 4, i16* @left_margin, align 2
  br label %2113

; <label>:663                                     ; preds = %658, %656
  %664 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str467, i32 0, i32 0)) #10
  %665 = icmp ne i32 %664, 0
  br i1 %665, label %669, label %666

; <label>:666                                     ; preds = %663
  store i32 1633771873, i32* @filters, align 4
  %667 = load i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i64 200), align 2
  %668 = zext i16 %667 to i32
  store i32 %668, i32* @black, align 4
  br label %2112

; <label>:669                                     ; preds = %663
  %670 = icmp ne i32 %468, 0
  br i1 %670, label %671, label %680

; <label>:671                                     ; preds = %669
  %672 = load i16* @raw_width, align 2
  %673 = zext i16 %672 to i32
  %674 = icmp eq i32 %673, 3516
  br i1 %674, label %675, label %680

; <label>:675                                     ; preds = %671
  store i16 14, i16* @top_margin, align 2
  store i16 42, i16* @left_margin, align 2
  %676 = load i32* @unique_id, align 4
  %677 = icmp eq i32 %676, -2147483255
  br i1 %677, label %678, label %679

; <label>:678                                     ; preds = %675
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str468, i32 0, i32 0))
  br label %679

; <label>:679                                     ; preds = %678, %675
  br label %789

; <label>:680                                     ; preds = %671, %669
  %681 = icmp ne i32 %468, 0
  br i1 %681, label %682, label %687

; <label>:682                                     ; preds = %680
  %683 = load i16* @raw_width, align 2
  %684 = zext i16 %683 to i32
  %685 = icmp eq i32 %684, 3596
  br i1 %685, label %686, label %687

; <label>:686                                     ; preds = %682
  store i16 12, i16* @top_margin, align 2
  store i16 74, i16* @left_margin, align 2
  br label %789

; <label>:687                                     ; preds = %682, %680
  %688 = icmp ne i32 %468, 0
  br i1 %688, label %689, label %694

; <label>:689                                     ; preds = %687
  %690 = load i16* @raw_width, align 2
  %691 = zext i16 %690 to i32
  %692 = icmp eq i32 %691, 3944
  br i1 %692, label %693, label %694

; <label>:693                                     ; preds = %689
  store i16 2602, i16* @height, align 2
  store i16 3908, i16* @width, align 2
  store i16 18, i16* @top_margin, align 2
  store i16 30, i16* @left_margin, align 2
  br label %2109

; <label>:694                                     ; preds = %689, %687
  %695 = icmp ne i32 %468, 0
  br i1 %695, label %696, label %713

; <label>:696                                     ; preds = %694
  %697 = load i16* @raw_width, align 2
  %698 = zext i16 %697 to i32
  %699 = icmp eq i32 %698, 3948
  br i1 %699, label %700, label %713

; <label>:700                                     ; preds = %696
  store i16 18, i16* @top_margin, align 2
  store i16 42, i16* @left_margin, align 2
  %701 = load i16* @height, align 2
  %702 = zext i16 %701 to i32
  %703 = sub nsw i32 %702, 2
  %704 = trunc i32 %703 to i16
  store i16 %704, i16* @height, align 2
  %705 = load i32* @unique_id, align 4
  %706 = icmp eq i32 %705, -2147483082
  br i1 %706, label %707, label %708

; <label>:707                                     ; preds = %700
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str469, i32 0, i32 0))
  br label %708

; <label>:708                                     ; preds = %707, %700
  %709 = load i32* @unique_id, align 4
  %710 = icmp eq i32 %709, -2147483052
  br i1 %710, label %711, label %712

; <label>:711                                     ; preds = %708
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str470, i32 0, i32 0))
  br label %712

; <label>:712                                     ; preds = %711, %708
  br label %789

; <label>:713                                     ; preds = %696, %694
  %714 = icmp ne i32 %468, 0
  br i1 %714, label %715, label %724

; <label>:715                                     ; preds = %713
  %716 = load i16* @raw_width, align 2
  %717 = zext i16 %716 to i32
  %718 = icmp eq i32 %717, 3984
  br i1 %718, label %719, label %724

; <label>:719                                     ; preds = %715
  store i16 20, i16* @top_margin, align 2
  store i16 76, i16* @left_margin, align 2
  %720 = load i16* @height, align 2
  %721 = zext i16 %720 to i32
  %722 = sub nsw i32 %721, 2
  %723 = trunc i32 %722 to i16
  store i16 %723, i16* @height, align 2
  br label %789

; <label>:724                                     ; preds = %715, %713
  %725 = icmp ne i32 %468, 0
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = load i16* @raw_width, align 2
  %728 = zext i16 %727 to i32
  %729 = icmp eq i32 %728, 4104
  br i1 %729, label %730, label %731

; <label>:730                                     ; preds = %726
  store i16 3024, i16* @height, align 2
  store i16 4032, i16* @width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 48, i16* @left_margin, align 2
  br label %2106

; <label>:731                                     ; preds = %726, %724
  %732 = icmp ne i32 %468, 0
  br i1 %732, label %733, label %746

; <label>:733                                     ; preds = %731
  %734 = load i16* @raw_width, align 2
  %735 = zext i16 %734 to i32
  %736 = icmp eq i32 %735, 4312
  br i1 %736, label %737, label %746

; <label>:737                                     ; preds = %733
  store i16 18, i16* @top_margin, align 2
  store i16 22, i16* @left_margin, align 2
  %738 = load i16* @height, align 2
  %739 = zext i16 %738 to i32
  %740 = sub nsw i32 %739, 2
  %741 = trunc i32 %740 to i16
  store i16 %741, i16* @height, align 2
  %742 = load i32* @unique_id, align 4
  %743 = icmp eq i32 %742, -2147483274
  br i1 %743, label %744, label %745

; <label>:744                                     ; preds = %737
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str471, i32 0, i32 0))
  br label %745

; <label>:745                                     ; preds = %744, %737
  br label %789

; <label>:746                                     ; preds = %733, %731
  %747 = icmp ne i32 %468, 0
  br i1 %747, label %748, label %753

; <label>:748                                     ; preds = %746
  %749 = load i16* @raw_width, align 2
  %750 = zext i16 %749 to i32
  %751 = icmp eq i32 %750, 4476
  br i1 %751, label %752, label %753

; <label>:752                                     ; preds = %748
  store i16 34, i16* @top_margin, align 2
  store i16 90, i16* @left_margin, align 2
  br label %789

; <label>:753                                     ; preds = %748, %746
  %754 = icmp ne i32 %468, 0
  br i1 %754, label %755, label %760

; <label>:755                                     ; preds = %753
  %756 = load i16* @raw_width, align 2
  %757 = zext i16 %756 to i32
  %758 = icmp eq i32 %757, 4480
  br i1 %758, label %759, label %760

; <label>:759                                     ; preds = %755
  store i16 3326, i16* @height, align 2
  store i16 4432, i16* @width, align 2
  store i16 10, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %2103

; <label>:760                                     ; preds = %755, %753
  %761 = icmp ne i32 %468, 0
  br i1 %761, label %762, label %771

; <label>:762                                     ; preds = %760
  %763 = load i16* @raw_width, align 2
  %764 = zext i16 %763 to i32
  %765 = icmp eq i32 %764, 1208
  br i1 %765, label %766, label %771

; <label>:766                                     ; preds = %762
  store i16 51, i16* @top_margin, align 2
  store i16 62, i16* @left_margin, align 2
  %767 = load i16* @width, align 2
  %768 = zext i16 %767 to i32
  %769 = mul nsw i32 %768, 4
  %770 = trunc i32 %769 to i16
  store i16 %770, i16* @width, align 2
  store i16 %770, i16* @raw_width, align 2
  br label %789

; <label>:771                                     ; preds = %762, %760
  %772 = icmp ne i32 %468, 0
  br i1 %772, label %773, label %782

; <label>:773                                     ; preds = %771
  %774 = load i16* @raw_width, align 2
  %775 = zext i16 %774 to i32
  %776 = icmp eq i32 %775, 1448
  br i1 %776, label %777, label %782

; <label>:777                                     ; preds = %773
  store i16 51, i16* @top_margin, align 2
  store i16 158, i16* @left_margin, align 2
  %778 = load i16* @width, align 2
  %779 = zext i16 %778 to i32
  %780 = mul nsw i32 %779, 4
  %781 = trunc i32 %780 to i16
  store i16 %781, i16* @width, align 2
  store i16 %781, i16* @raw_width, align 2
  br label %789

; <label>:782                                     ; preds = %773, %771
  %783 = icmp ne i32 %468, 0
  br i1 %783, label %784, label %802

; <label>:784                                     ; preds = %782
  %785 = load i16* @raw_width, align 2
  %786 = zext i16 %785 to i32
  %787 = icmp eq i32 %786, 5108
  br i1 %787, label %788, label %802

; <label>:788                                     ; preds = %784
  store i16 13, i16* @top_margin, align 2
  store i16 98, i16* @left_margin, align 2
  br label %789

; <label>:789                                     ; preds = %788, %777, %766, %752, %745, %719, %712, %686, %679
  %790 = load i16* @top_margin, align 2
  %791 = zext i16 %790 to i32
  %792 = load i16* @height, align 2
  %793 = zext i16 %792 to i32
  %794 = sub nsw i32 %793, %791
  %795 = trunc i32 %794 to i16
  store i16 %795, i16* @height, align 2
  %796 = load i16* @left_margin, align 2
  %797 = zext i16 %796 to i32
  %798 = load i16* @width, align 2
  %799 = zext i16 %798 to i32
  %800 = sub nsw i32 %799, %797
  %801 = trunc i32 %800 to i16
  store i16 %801, i16* @width, align 2
  br label %2100

; <label>:802                                     ; preds = %784, %782
  %803 = icmp ne i32 %468, 0
  br i1 %803, label %804, label %809

; <label>:804                                     ; preds = %802
  %805 = load i16* @raw_width, align 2
  %806 = zext i16 %805 to i32
  %807 = icmp eq i32 %806, 5712
  br i1 %807, label %808, label %809

; <label>:808                                     ; preds = %804
  store i16 3752, i16* @height, align 2
  store i16 5640, i16* @width, align 2
  store i16 20, i16* @top_margin, align 2
  store i16 62, i16* @left_margin, align 2
  br label %2099

; <label>:809                                     ; preds = %804, %802
  %810 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str472, i32 0, i32 0)) #10
  %811 = icmp ne i32 %810, 0
  br i1 %811, label %821, label %812

; <label>:812                                     ; preds = %809
  %813 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %814 = fpext float %813 to double
  %815 = fmul double %814, 0x3FDF16D4C4401F17
  %816 = fptrunc double %815 to float
  store float %816, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %817 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %818 = fpext float %817 to double
  %819 = fmul double %818, 0x3FE9D79F176B682D
  %820 = fptrunc double %819 to float
  store float %820, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %2098

; <label>:821                                     ; preds = %809
  %822 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str473, i32 0, i32 0)) #10
  %823 = icmp ne i32 %822, 0
  br i1 %823, label %829, label %824

; <label>:824                                     ; preds = %821
  %825 = load i16* @width, align 2
  %826 = zext i16 %825 to i32
  %827 = sub nsw i32 %826, 4
  %828 = trunc i32 %827 to i16
  store i16 %828, i16* @width, align 2
  store double 5.000000e-01, double* @pixel_aspect, align 8
  br label %2097

; <label>:829                                     ; preds = %821
  %830 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str474, i32 0, i32 0)) #10
  %831 = icmp ne i32 %830, 0
  br i1 %831, label %832, label %838

; <label>:832                                     ; preds = %829
  %833 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str475, i32 0, i32 0)) #10
  %834 = icmp ne i32 %833, 0
  br i1 %834, label %835, label %838

; <label>:835                                     ; preds = %832
  %836 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str476, i32 0, i32 0)) #10
  %837 = icmp ne i32 %836, 0
  br i1 %837, label %847, label %838

; <label>:838                                     ; preds = %835, %832, %829
  %839 = load i16* @height, align 2
  %840 = zext i16 %839 to i32
  %841 = sub nsw i32 %840, 3
  %842 = trunc i32 %841 to i16
  store i16 %842, i16* @height, align 2
  %843 = load i16* @width, align 2
  %844 = zext i16 %843 to i32
  %845 = sub nsw i32 %844, 4
  %846 = trunc i32 %845 to i16
  store i16 %846, i16* @width, align 2
  br label %2096

; <label>:847                                     ; preds = %835
  %848 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str477, i32 0, i32 0)) #10
  %849 = icmp ne i32 %848, 0
  br i1 %849, label %850, label %853

; <label>:850                                     ; preds = %847
  %851 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str478, i32 0, i32 0)) #10
  %852 = icmp ne i32 %851, 0
  br i1 %852, label %858, label %853

; <label>:853                                     ; preds = %850, %847
  %854 = load i16* @width, align 2
  %855 = zext i16 %854 to i32
  %856 = sub nsw i32 %855, 4
  %857 = trunc i32 %856 to i16
  store i16 %857, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %2095

; <label>:858                                     ; preds = %850
  %859 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str479, i32 0, i32 0), i64 3) #10
  %860 = icmp ne i32 %859, 0
  br i1 %860, label %861, label %867

; <label>:861                                     ; preds = %858
  %862 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str480, i32 0, i32 0), i64 3) #10
  %863 = icmp ne i32 %862, 0
  br i1 %863, label %864, label %867

; <label>:864                                     ; preds = %861
  %865 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str481, i32 0, i32 0), i64 3) #10
  %866 = icmp ne i32 %865, 0
  br i1 %866, label %870, label %867

; <label>:867                                     ; preds = %864, %861, %858
  %868 = load i16* @width, align 2
  %869 = add i16 %868, -1
  store i16 %869, i16* @width, align 2
  br label %2094

; <label>:870                                     ; preds = %864
  %871 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str482, i32 0, i32 0)) #10
  %872 = icmp ne i32 %871, 0
  br i1 %872, label %878, label %873

; <label>:873                                     ; preds = %870
  %874 = load i16* @width, align 2
  %875 = zext i16 %874 to i32
  %876 = sub nsw i32 %875, 42
  %877 = trunc i32 %876 to i16
  store i16 %877, i16* @width, align 2
  br label %2093

; <label>:878                                     ; preds = %870
  %879 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str483, i32 0, i32 0)) #10
  %880 = icmp ne i32 %879, 0
  br i1 %880, label %898, label %881

; <label>:881                                     ; preds = %878
  %882 = load i32* @tiff_compress, align 4
  %883 = icmp eq i32 %882, 34713
  br i1 %883, label %884, label %897

; <label>:884                                     ; preds = %881
  %885 = call i32 @nikon_is_compressed()
  %886 = icmp ne i32 %885, 0
  br i1 %886, label %897, label %887

; <label>:887                                     ; preds = %884
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  %888 = load i32* @load_flags, align 4
  %889 = or i32 %888, 8
  store i32 %889, i32* @load_flags, align 4
  %890 = load i16* @width, align 2
  %891 = zext i16 %890 to i32
  %892 = add nsw i32 %891, 3
  %893 = trunc i32 %892 to i16
  store i16 %893, i16* @width, align 2
  %894 = zext i16 %893 to i32
  %895 = add nsw i32 %894, 3
  %896 = trunc i32 %895 to i16
  store i16 %896, i16* @raw_width, align 2
  br label %897

; <label>:897                                     ; preds = %887, %884, %881
  br label %2092

; <label>:898                                     ; preds = %878
  %899 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str484, i32 0, i32 0)) #10
  %900 = icmp ne i32 %899, 0
  br i1 %900, label %906, label %901

; <label>:901                                     ; preds = %898
  store i16 1, i16* @left_margin, align 2
  %902 = load i16* @width, align 2
  %903 = zext i16 %902 to i32
  %904 = sub nsw i32 %903, 4
  %905 = trunc i32 %904 to i16
  store i16 %905, i16* @width, align 2
  store i32 -1802201964, i32* @filters, align 4
  br label %2091

; <label>:906                                     ; preds = %898
  %907 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str485, i32 0, i32 0), i64 3) #10
  %908 = icmp ne i32 %907, 0
  br i1 %908, label %914, label %909

; <label>:909                                     ; preds = %906
  store i16 6, i16* @left_margin, align 2
  %910 = load i16* @width, align 2
  %911 = zext i16 %910 to i32
  %912 = sub nsw i32 %911, 14
  %913 = trunc i32 %912 to i16
  store i16 %913, i16* @width, align 2
  br label %2090

; <label>:914                                     ; preds = %906
  %915 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str486, i32 0, i32 0), i64 3) #10
  %916 = icmp ne i32 %915, 0
  br i1 %916, label %932, label %917

; <label>:917                                     ; preds = %914
  %918 = load i16* @width, align 2
  %919 = zext i16 %918 to i32
  %920 = icmp eq i32 %919, 3264
  br i1 %920, label %921, label %926

; <label>:921                                     ; preds = %917
  %922 = load i16* @width, align 2
  %923 = zext i16 %922 to i32
  %924 = sub nsw i32 %923, 32
  %925 = trunc i32 %924 to i16
  store i16 %925, i16* @width, align 2
  br label %931

; <label>:926                                     ; preds = %917
  %927 = load i16* @width, align 2
  %928 = zext i16 %927 to i32
  %929 = sub nsw i32 %928, 8
  %930 = trunc i32 %929 to i16
  store i16 %930, i16* @width, align 2
  br label %931

; <label>:931                                     ; preds = %926, %921
  br label %2089

; <label>:932                                     ; preds = %914
  %933 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str487, i32 0, i32 0)) #10
  %934 = icmp ne i32 %933, 0
  br i1 %934, label %940, label %935

; <label>:935                                     ; preds = %932
  %936 = load i16* @width, align 2
  %937 = zext i16 %936 to i32
  %938 = sub nsw i32 %937, 32
  %939 = trunc i32 %938 to i16
  store i16 %939, i16* @width, align 2
  br label %2088

; <label>:940                                     ; preds = %932
  %941 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str488, i32 0, i32 0)) #10
  %942 = icmp ne i32 %941, 0
  br i1 %942, label %944, label %943

; <label>:943                                     ; preds = %940
  store i32 1, i32* @load_flags, align 4
  store i32 -1802201964, i32* @filters, align 4
  br label %2087

; <label>:944                                     ; preds = %940
  %945 = icmp eq i32 %60, 1581060
  br i1 %945, label %946, label %947

; <label>:946                                     ; preds = %944
  store i16 963, i16* @height, align 2
  store i16 1287, i16* @width, align 2
  store i16 1632, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @nikon_e900_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1012, i32* @maximum, align 4
  store i32 4, i32* @colors, align 4
  store i32 505290270, i32* @filters, align 4
  call void @simple_coeff(i32 3)
  store float 0x3FF3560420000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF18240C0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  store float 0x3FF1C3C9E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  br label %2086

; <label>:947                                     ; preds = %944
  %948 = icmp eq i32 %60, 2465792
  br i1 %948, label %949, label %950

; <label>:949                                     ; preds = %947
  store i16 1203, i16* @height, align 2
  store i16 1616, i16* @width, align 2
  store i16 2048, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @nikon_e900_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 4, i32* @colors, align 4
  store i32 1263225675, i32* @filters, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str489, i32 0, i32 0))
  br label %2085

; <label>:950                                     ; preds = %947
  %951 = icmp eq i32 %60, 4771840
  br i1 %951, label %952, label %965

; <label>:952                                     ; preds = %950
  store i16 1540, i16* @height, align 2
  store i16 2064, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -505290271, i32* @filters, align 4
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 6, i32* @load_flags, align 4
  %953 = load i64* @timestamp, align 8
  %954 = icmp ne i64 %953, 0
  br i1 %954, label %960, label %955

; <label>:955                                     ; preds = %952
  %956 = call i32 @nikon_e995()
  %957 = icmp ne i32 %956, 0
  br i1 %957, label %958, label %960

; <label>:958                                     ; preds = %955
  %959 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str490, i32 0, i32 0)) #4
  br label %960

; <label>:960                                     ; preds = %958, %955, %952
  %961 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str490, i32 0, i32 0)) #10
  %962 = icmp ne i32 %961, 0
  br i1 %962, label %963, label %964

; <label>:963                                     ; preds = %960
  store i32 -1263225676, i32* @filters, align 4
  call void @simple_coeff(i32 3)
  store float 0x3FF322D0E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF3EF9DC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  store float 0x3FF049BA60000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %964

; <label>:964                                     ; preds = %963, %960
  br label %2084

; <label>:965                                     ; preds = %950
  %966 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str491, i32 0, i32 0)) #10
  %967 = icmp ne i32 %966, 0
  br i1 %967, label %976, label %968

; <label>:968                                     ; preds = %965
  %969 = load i64* @timestamp, align 8
  %970 = icmp ne i64 %969, 0
  br i1 %970, label %975, label %971

; <label>:971                                     ; preds = %968
  %972 = call i32 @nikon_e2100()
  %973 = icmp ne i32 %972, 0
  br i1 %973, label %975, label %974

; <label>:974                                     ; preds = %971
  br label %980

; <label>:975                                     ; preds = %971, %968
  store i16 1206, i16* @height, align 2
  store i16 1616, i16* @width, align 2
  store i32 7, i32* @load_flags, align 4
  br label %2083

; <label>:976                                     ; preds = %965
  %977 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str492, i32 0, i32 0)) #10
  %978 = icmp ne i32 %977, 0
  br i1 %978, label %982, label %979

; <label>:979                                     ; preds = %976
  br label %980

; <label>:980                                     ; preds = %979, %974
  %981 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str492, i32 0, i32 0)) #4
  store i16 1204, i16* @height, align 2
  store i16 1616, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 1263225675, i32* @filters, align 4
  br label %2082

; <label>:982                                     ; preds = %976
  %983 = icmp eq i32 %60, 4775936
  br i1 %983, label %984, label %1001

; <label>:984                                     ; preds = %982
  store i16 1542, i16* @height, align 2
  store i16 2064, i16* @width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  store float 0x3FFD168720000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF9E35400000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %985 = load i64* @timestamp, align 8
  %986 = icmp ne i64 %985, 0
  br i1 %986, label %988, label %987

; <label>:987                                     ; preds = %984
  call void @nikon_3700()
  br label %988

; <label>:988                                     ; preds = %987, %984
  %989 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %990 = sext i8 %989 to i32
  %991 = icmp eq i32 %990, 69
  br i1 %991, label %992, label %996

; <label>:992                                     ; preds = %988
  %993 = call i32 @atoi(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 1)) #10
  %994 = icmp slt i32 %993, 3700
  br i1 %994, label %995, label %996

; <label>:995                                     ; preds = %992
  store i32 1229539657, i32* @filters, align 4
  br label %996

; <label>:996                                     ; preds = %995, %992, %988
  %997 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str493, i32 0, i32 0)) #10
  %998 = icmp ne i32 %997, 0
  br i1 %998, label %1000, label %999

; <label>:999                                     ; preds = %996
  store i32 1, i32* @flip, align 4
  store i32 370546198, i32* @filters, align 4
  store float 0x3FF54BC6A0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FFD1EB860000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1000

; <label>:1000                                    ; preds = %999, %996
  br label %2081

; <label>:1001                                    ; preds = %982
  %1002 = icmp eq i32 %60, 5869568
  br i1 %1002, label %1003, label %1018

; <label>:1003                                    ; preds = %1001
  store i16 1710, i16* @height, align 2
  store i16 2288, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  %1004 = load i64* @timestamp, align 8
  %1005 = icmp ne i64 %1004, 0
  br i1 %1005, label %1012, label %1006

; <label>:1006                                    ; preds = %1003
  %1007 = call i32 @minolta_z2()
  %1008 = icmp ne i32 %1007, 0
  br i1 %1008, label %1009, label %1012

; <label>:1009                                    ; preds = %1006
  %1010 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str422, i32 0, i32 0)) #4
  %1011 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str494, i32 0, i32 0)) #4
  br label %1012

; <label>:1012                                    ; preds = %1009, %1006, %1003
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  %1013 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %1014 = sext i8 %1013 to i32
  %1015 = icmp eq i32 %1014, 77
  %1016 = zext i1 %1015 to i32
  %1017 = add nsw i32 6, %1016
  store i32 %1017, i32* @load_flags, align 4
  br label %2080

; <label>:1018                                    ; preds = %1001
  %1019 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str495, i32 0, i32 0)) #10
  %1020 = icmp ne i32 %1019, 0
  br i1 %1020, label %1022, label %1021

; <label>:1021                                    ; preds = %1018
  store i16 1708, i16* @height, align 2
  store i16 2288, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %2079

; <label>:1022                                    ; preds = %1018
  %1023 = icmp eq i32 %60, 7438336
  br i1 %1023, label %1024, label %1025

; <label>:1024                                    ; preds = %1022
  store i16 1924, i16* @height, align 2
  store i16 2576, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %2078

; <label>:1025                                    ; preds = %1022
  %1026 = icmp eq i32 %60, 8998912
  br i1 %1026, label %1027, label %1028

; <label>:1027                                    ; preds = %1025
  store i16 2118, i16* @height, align 2
  store i16 2832, i16* @width, align 2
  store i32 3971, i32* @maximum, align 4
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  br label %2077

; <label>:1028                                    ; preds = %1025
  %1029 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str496, i32 0, i32 0)) #10
  %1030 = icmp ne i32 %1029, 0
  br i1 %1030, label %1031, label %1034

; <label>:1031                                    ; preds = %1028
  %1032 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str497, i32 0, i32 0)) #10
  %1033 = icmp ne i32 %1032, 0
  br i1 %1033, label %1035, label %1034

; <label>:1034                                    ; preds = %1031, %1028
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2076

; <label>:1035                                    ; preds = %1031
  %1036 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str94, i32 0, i32 0)) #10
  %1037 = icmp ne i32 %1036, 0
  br i1 %1037, label %1121, label %1038

; <label>:1038                                    ; preds = %1035
  %1039 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 7), i8* getelementptr inbounds ([6 x i8]* @.str498, i32 0, i32 0)) #10
  %1040 = icmp ne i32 %1039, 0
  br i1 %1040, label %1043, label %1041

; <label>:1041                                    ; preds = %1038
  %1042 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 7), i8* getelementptr inbounds ([7 x i8]* @.str499, i32 0, i32 0)) #4
  store i16 2144, i16* @height, align 2
  store i16 2880, i16* @width, align 2
  store i32 6, i32* @flip, align 4
  br label %1044

; <label>:1043                                    ; preds = %1038
  store i32 15872, i32* @maximum, align 4
  br label %1044

; <label>:1044                                    ; preds = %1043, %1041
  %1045 = load i32* @is_raw, align 4
  %1046 = icmp eq i32 %1045, 2
  br i1 %1046, label %1047, label %1051

; <label>:1047                                    ; preds = %1044
  %1048 = load i32* @shot_select, align 4
  %1049 = icmp ne i32 %1048, 0
  br i1 %1049, label %1050, label %1051

; <label>:1050                                    ; preds = %1047
  store i32 12032, i32* @maximum, align 4
  br label %1051

; <label>:1051                                    ; preds = %1050, %1047, %1044
  %1052 = load i16* @raw_height, align 2
  %1053 = zext i16 %1052 to i32
  %1054 = load i16* @height, align 2
  %1055 = zext i16 %1054 to i32
  %1056 = sub nsw i32 %1053, %1055
  %1057 = sdiv i32 %1056, 2
  %1058 = trunc i32 %1057 to i16
  store i16 %1058, i16* @top_margin, align 2
  %1059 = load i16* @raw_width, align 2
  %1060 = zext i16 %1059 to i32
  %1061 = load i16* @width, align 2
  %1062 = zext i16 %1061 to i32
  %1063 = sub nsw i32 %1060, %1062
  %1064 = sdiv i32 %1063, 2
  %1065 = trunc i32 %1064 to i16
  store i16 %1065, i16* @left_margin, align 2
  %1066 = load i32* @is_raw, align 4
  %1067 = icmp eq i32 %1066, 2
  br i1 %1067, label %1068, label %1093

; <label>:1068                                    ; preds = %1051
  %1069 = load i32* @shot_select, align 4
  %1070 = icmp ugt i32 %1069, 0
  %1071 = zext i1 %1070 to i32
  %1072 = load i32* @fuji_layout, align 4
  %1073 = icmp ne i32 %1072, 0
  br i1 %1073, label %1074, label %1080

; <label>:1074                                    ; preds = %1068
  %1075 = load i16* @raw_width, align 2
  %1076 = zext i16 %1075 to i32
  %1077 = mul nsw i32 %1076, 2
  %1078 = trunc i32 %1077 to i16
  store i16 %1078, i16* @raw_width, align 2
  %1079 = zext i16 %1078 to i32
  br label %1087

; <label>:1080                                    ; preds = %1068
  %1081 = load i16* @raw_height, align 2
  %1082 = zext i16 %1081 to i32
  %1083 = load i16* @raw_width, align 2
  %1084 = zext i16 %1083 to i32
  %1085 = mul nsw i32 %1082, %1084
  %1086 = mul nsw i32 %1085, 2
  br label %1087

; <label>:1087                                    ; preds = %1080, %1074
  %1088 = phi i32 [ %1079, %1074 ], [ %1086, %1080 ]
  %1089 = mul nsw i32 %1071, %1088
  %1090 = sext i32 %1089 to i64
  %1091 = load i64* @data_offset, align 8
  %1092 = add nsw i64 %1091, %1090
  store i64 %1092, i64* @data_offset, align 8
  br label %1093

; <label>:1093                                    ; preds = %1087, %1051
  %1094 = load i16* @width, align 2
  %1095 = zext i16 %1094 to i32
  %1096 = load i32* @fuji_layout, align 4
  %1097 = icmp ne i32 %1096, 0
  %1098 = xor i1 %1097, true
  %1099 = zext i1 %1098 to i32
  %1100 = ashr i32 %1095, %1099
  %1101 = trunc i32 %1100 to i16
  store i16 %1101, i16* @fuji_width, align 2
  %1102 = load i16* @height, align 2
  %1103 = zext i16 %1102 to i32
  %1104 = load i32* @fuji_layout, align 4
  %1105 = ashr i32 %1103, %1104
  %1106 = load i16* @fuji_width, align 2
  %1107 = zext i16 %1106 to i32
  %1108 = add nsw i32 %1105, %1107
  %1109 = trunc i32 %1108 to i16
  store i16 %1109, i16* @width, align 2
  %1110 = load i16* @height, align 2
  store i16 %1110, i16* @raw_height, align 2
  %1111 = load i16* @width, align 2
  %1112 = zext i16 %1111 to i32
  %1113 = sub nsw i32 %1112, 1
  %1114 = trunc i32 %1113 to i16
  store i16 %1114, i16* @height, align 2
  store void (...)* bitcast (void ()* @fuji_load_raw to void (...)*), void (...)** @load_raw, align 8
  %1115 = load i16* @fuji_width, align 2
  %1116 = zext i16 %1115 to i32
  %1117 = and i32 %1116, 1
  %1118 = icmp ne i32 %1117, 0
  br i1 %1118, label %1120, label %1119

; <label>:1119                                    ; preds = %1093
  store i32 1229539657, i32* @filters, align 4
  br label %1120

; <label>:1120                                    ; preds = %1119, %1093
  br label %2075

; <label>:1121                                    ; preds = %1035
  %1122 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str500, i32 0, i32 0)) #10
  %1123 = icmp ne i32 %1122, 0
  br i1 %1123, label %1125, label %1124

; <label>:1124                                    ; preds = %1121
  store i16 986, i16* @height, align 2
  store i16 1534, i16* @width, align 2
  store i64 513, i64* @data_offset, align 8
  store i32 1633771873, i32* @filters, align 4
  store void (...)* bitcast (void ()* @minolta_rd175_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2074

; <label>:1125                                    ; preds = %1121
  %1126 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str501, i32 0, i32 0)) #10
  %1127 = icmp ne i32 %1126, 0
  br i1 %1127, label %1129, label %1128

; <label>:1128                                    ; preds = %1125
  store i16 1712, i16* @height, align 2
  store i16 2312, i16* @width, align 2
  store i16 2336, i16* @raw_width, align 2
  br label %1185

; <label>:1129                                    ; preds = %1125
  %1130 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str502, i32 0, i32 0)) #10
  %1131 = icmp ne i32 %1130, 0
  br i1 %1131, label %1133, label %1132

; <label>:1132                                    ; preds = %1129
  br label %1174

; <label>:1133                                    ; preds = %1129
  %1134 = call i32 @strcasecmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str421, i32 0, i32 0)) #10
  %1135 = icmp ne i32 %1134, 0
  br i1 %1135, label %1189, label %1136

; <label>:1136                                    ; preds = %1133
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 4095, i32* @maximum, align 4
  %1137 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str503, i32 0, i32 0), i64 8) #10
  %1138 = icmp ne i32 %1137, 0
  br i1 %1138, label %1144, label %1139

; <label>:1139                                    ; preds = %1136
  %1140 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str162, i32 0, i32 0)) #10
  %1141 = icmp ne i32 %1140, 0
  br i1 %1141, label %1143, label %1142

; <label>:1142                                    ; preds = %1139
  store i32 1229539657, i32* @filters, align 4
  br label %1143

; <label>:1143                                    ; preds = %1142, %1139
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1188

; <label>:1144                                    ; preds = %1136
  %1145 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str504, i32 0, i32 0), i64 5) #10
  %1146 = icmp ne i32 %1145, 0
  br i1 %1146, label %1147, label %1153

; <label>:1147                                    ; preds = %1144
  %1148 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str505, i32 0, i32 0), i64 5) #10
  %1149 = icmp ne i32 %1148, 0
  br i1 %1149, label %1150, label %1153

; <label>:1150                                    ; preds = %1147
  %1151 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str506, i32 0, i32 0), i64 6) #10
  %1152 = icmp ne i32 %1151, 0
  br i1 %1152, label %1161, label %1153

; <label>:1153                                    ; preds = %1150, %1147, %1144
  %1154 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1155 = sext i8 %1154 to i32
  %1156 = icmp eq i32 %1155, 77
  %1157 = zext i1 %1156 to i32
  %1158 = sext i32 %1157 to i64
  %1159 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 6), i64 %1158
  %1160 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 20), i8* getelementptr inbounds ([12 x i8]* @.str507, i32 0, i32 0), i8* %1159) #4
  call void @adobe_coeff(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 20))
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1187

; <label>:1161                                    ; preds = %1150
  %1162 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str508, i32 0, i32 0), i64 8) #10
  %1163 = icmp ne i32 %1162, 0
  br i1 %1163, label %1186, label %1164

; <label>:1164                                    ; preds = %1161
  %1165 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 8), align 1
  %1166 = sext i8 %1165 to i32
  %1167 = icmp eq i32 %1166, 52
  br i1 %1167, label %1168, label %1169

; <label>:1168                                    ; preds = %1164
  store i16 1716, i16* @height, align 2
  store i16 2304, i16* @width, align 2
  br label %1182

; <label>:1169                                    ; preds = %1164
  %1170 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 8), align 1
  %1171 = sext i8 %1170 to i32
  %1172 = icmp eq i32 %1171, 53
  br i1 %1172, label %1173, label %1175

; <label>:1173                                    ; preds = %1169
  br label %1174

; <label>:1174                                    ; preds = %1173, %1132
  store i16 1956, i16* @height, align 2
  store i16 2607, i16* @width, align 2
  store i16 2624, i16* @raw_width, align 2
  br label %1181

; <label>:1175                                    ; preds = %1169
  %1176 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 8), align 1
  %1177 = sext i8 %1176 to i32
  %1178 = icmp eq i32 %1177, 54
  br i1 %1178, label %1179, label %1180

; <label>:1179                                    ; preds = %1175
  store i16 2136, i16* @height, align 2
  store i16 2848, i16* @width, align 2
  br label %1180

; <label>:1180                                    ; preds = %1179, %1175
  br label %1181

; <label>:1181                                    ; preds = %1180, %1174
  br label %1182

; <label>:1182                                    ; preds = %1181, %1168
  %1183 = load i64* @data_offset, align 8
  %1184 = add nsw i64 %1183, 14
  store i64 %1184, i64* @data_offset, align 8
  store i32 1633771873, i32* @filters, align 4
  br label %1185

; <label>:1185                                    ; preds = %1182, %1128
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 991, i32* @maximum, align 4
  store i16 19789, i16* @order, align 2
  br label %1186

; <label>:1186                                    ; preds = %1185, %1161
  br label %1187

; <label>:1187                                    ; preds = %1186, %1153
  br label %1188

; <label>:1188                                    ; preds = %1187, %1143
  br label %2071

; <label>:1189                                    ; preds = %1133
  %1190 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str509, i32 0, i32 0)) #10
  %1191 = icmp ne i32 %1190, 0
  br i1 %1191, label %1197, label %1192

; <label>:1192                                    ; preds = %1189
  %1193 = load i16* @height, align 2
  %1194 = zext i16 %1193 to i32
  %1195 = sub nsw i32 %1194, 2
  %1196 = trunc i32 %1195 to i16
  store i16 %1196, i16* @height, align 2
  br label %2070

; <label>:1197                                    ; preds = %1189
  %1198 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str510, i32 0, i32 0)) #10
  %1199 = icmp ne i32 %1198, 0
  br i1 %1199, label %1201, label %1200

; <label>:1200                                    ; preds = %1197
  store i32 370546198, i32* @filters, align 4
  br label %2069

; <label>:1201                                    ; preds = %1197
  %1202 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str511, i32 0, i32 0)) #10
  %1203 = icmp ne i32 %1202, 0
  br i1 %1203, label %1213, label %1204

; <label>:1204                                    ; preds = %1201
  %1205 = icmp eq i32 %60, 3178560
  br i1 %1205, label %1206, label %1211

; <label>:1206                                    ; preds = %1204
  store i16 1540, i16* @height, align 2
  store i16 2064, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  %1207 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %1208 = fmul float %1207, 4.000000e+00
  store float %1208, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %1209 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %1210 = fmul float %1209, 4.000000e+00
  store float %1210, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  store float 0x3FF6418940000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF3020C40000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1212

; <label>:1211                                    ; preds = %1204
  store i16 1544, i16* @height, align 2
  store i16 2068, i16* @width, align 2
  store i16 3136, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 3964, i32* @maximum, align 4
  store float 0x3FF23126E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF73F7CE0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1212

; <label>:1212                                    ; preds = %1211, %1206
  br label %2068

; <label>:1213                                    ; preds = %1201
  %1214 = icmp eq i32 %60, 6114240
  br i1 %1214, label %1215, label %1216

; <label>:1215                                    ; preds = %1213
  store i16 1737, i16* @height, align 2
  store i16 2324, i16* @width, align 2
  store i16 3520, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 3962, i32* @maximum, align 4
  store float 0x3FFFAE1480000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF91EB860000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2067

; <label>:1216                                    ; preds = %1213
  %1217 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str512, i32 0, i32 0)) #10
  %1218 = icmp ne i32 %1217, 0
  br i1 %1218, label %1220, label %1219

; <label>:1219                                    ; preds = %1216
  store i16 2302, i16* @height, align 2
  store i16 3072, i16* @width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  br label %2066

; <label>:1220                                    ; preds = %1216
  %1221 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str513, i32 0, i32 0)) #10
  %1222 = icmp ne i32 %1221, 0
  br i1 %1222, label %1229, label %1223

; <label>:1223                                    ; preds = %1220
  store i16 2448, i16* @height, align 2
  store i16 3264, i16* @width, align 2
  %1224 = load i16* @height, align 2
  %1225 = zext i16 %1224 to i32
  %1226 = udiv i32 %60, %1225
  %1227 = udiv i32 %1226, 2
  %1228 = trunc i32 %1227 to i16
  store i16 %1228, i16* @raw_width, align 2
  store i16 19789, i16* @order, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 65535, i32* @maximum, align 4
  br label %2065

; <label>:1229                                    ; preds = %1220
  %1230 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str514, i32 0, i32 0)) #10
  %1231 = icmp ne i32 %1230, 0
  br i1 %1231, label %1233, label %1232

; <label>:1232                                    ; preds = %1229
  store i16 484, i16* @height, align 2
  store i16 644, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 2, i32* @flip, align 4
  store i32 370546198, i32* @filters, align 4
  store i32 16, i32* @black, align 4
  store float 0x3FF18D4FE0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF20C49C0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2064

; <label>:1233                                    ; preds = %1229
  %1234 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str515, i32 0, i32 0)) #10
  %1235 = icmp ne i32 %1234, 0
  br i1 %1235, label %1237, label %1236

; <label>:1236                                    ; preds = %1233
  store i16 477, i16* @height, align 2
  store i16 640, i16* @width, align 2
  store i16 18761, i16* @order, align 2
  store i64 3840, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store float 0x3FF8F9DB20000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x4003A1CAC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2063

; <label>:1237                                    ; preds = %1233
  %1238 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str516, i32 0, i32 0)) #10
  %1239 = icmp ne i32 %1238, 0
  br i1 %1239, label %1245, label %1240

; <label>:1240                                    ; preds = %1237
  %1241 = load i16* @raw_height, align 2
  %1242 = zext i16 %1241 to i32
  store i16 2, i16* @top_margin, align 2
  %1243 = sub nsw i32 %1242, 2
  %1244 = trunc i32 %1243 to i16
  store i16 %1244, i16* @height, align 2
  br label %2062

; <label>:1245                                    ; preds = %1237
  %1246 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str517, i32 0, i32 0)) #10
  %1247 = icmp ne i32 %1246, 0
  br i1 %1247, label %1249, label %1248

; <label>:1248                                    ; preds = %1245
  store i16 1200, i16* @height, align 2
  store i16 1600, i16* @width, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1229539657, i32* @filters, align 4
  store float 0x3FF37CEDA0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  br label %2061

; <label>:1249                                    ; preds = %1245
  %1250 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str518, i32 0, i32 0)) #10
  %1251 = icmp ne i32 %1250, 0
  br i1 %1251, label %1253, label %1252

; <label>:1252                                    ; preds = %1249
  store i16 768, i16* @height, align 2
  store i16 1024, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2060

; <label>:1253                                    ; preds = %1249
  %1254 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str519, i32 0, i32 0)) #10
  %1255 = icmp ne i32 %1254, 0
  br i1 %1255, label %1257, label %1256

; <label>:1256                                    ; preds = %1253
  store i16 1040, i16* @height, align 2
  store i16 1392, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2059

; <label>:1257                                    ; preds = %1253
  %1258 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str520, i32 0, i32 0)) #10
  %1259 = icmp ne i32 %1258, 0
  br i1 %1259, label %1261, label %1260

; <label>:1260                                    ; preds = %1257
  store i16 1200, i16* @height, align 2
  store i16 1600, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2058

; <label>:1261                                    ; preds = %1257
  %1262 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str521, i32 0, i32 0)) #10
  %1263 = icmp ne i32 %1262, 0
  br i1 %1263, label %1267, label %1264

; <label>:1264                                    ; preds = %1261
  store i16 1958, i16* @height, align 2
  store i16 2588, i16* @width, align 2
  %1265 = icmp ult i32 %60, 7500000
  %1266 = select i1 %1265, void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*)
  store void (...)* %1266, void (...)** @load_raw, align 8
  store i32 65520, i32* @maximum, align 4
  br label %2057

; <label>:1267                                    ; preds = %1261
  %1268 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str522, i32 0, i32 0)) #10
  %1269 = icmp ne i32 %1268, 0
  br i1 %1269, label %1271, label %1270

; <label>:1270                                    ; preds = %1267
  store i16 2469, i16* @height, align 2
  store i16 3272, i16* @width, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 65520, i32* @maximum, align 4
  br label %2056

; <label>:1271                                    ; preds = %1267
  %1272 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str523, i32 0, i32 0)) #10
  %1273 = icmp ne i32 %1272, 0
  br i1 %1273, label %1277, label %1274

; <label>:1274                                    ; preds = %1271
  store i16 1024, i16* @height, align 2
  store i16 1375, i16* @width, align 2
  store i16 1376, i16* @raw_width, align 2
  store i32 1229539657, i32* @filters, align 4
  store i32 1023, i32* @maximum, align 4
  %1275 = icmp ult i32 %60, 2000000
  %1276 = select i1 %1275, void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*)
  store void (...)* %1276, void (...)** @load_raw, align 8
  br label %2055

; <label>:1277                                    ; preds = %1271
  %1278 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str524, i32 0, i32 0)) #10
  %1279 = icmp ne i32 %1278, 0
  br i1 %1279, label %1281, label %1280

; <label>:1280                                    ; preds = %1277
  store i16 1207, i16* @height, align 2
  store i16 1608, i16* @width, align 2
  store i16 18761, i16* @order, align 2
  store i32 370546198, i32* @filters, align 4
  store i64 3212, i64* @data_offset, align 8
  store i32 1023, i32* @maximum, align 4
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2054

; <label>:1281                                    ; preds = %1277
  %1282 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str525, i32 0, i32 0)) #10
  %1283 = icmp ne i32 %1282, 0
  br i1 %1283, label %1287, label %1284

; <label>:1284                                    ; preds = %1281
  store i16 3000, i16* @height, align 2
  store i16 2208, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  %1285 = icmp ult i32 %60, 10000000
  %1286 = select i1 %1285, void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*)
  store void (...)* %1286, void (...)** @load_raw, align 8
  store i32 65472, i32* @maximum, align 4
  br label %2053

; <label>:1287                                    ; preds = %1281
  %1288 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str526, i32 0, i32 0)) #10
  %1289 = icmp ne i32 %1288, 0
  br i1 %1289, label %1307, label %1290

; <label>:1290                                    ; preds = %1287
  store i16 1536, i16* @height, align 2
  store i16 2048, i16* @width, align 2
  store i16 2048, i16* @raw_width, align 2
  store i32 1633771873, i32* @filters, align 4
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1023, i32* @maximum, align 4
  store float 0x3FFB78D500000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF2353F80000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %1291 = load %struct._IO_FILE** @ifp, align 8
  %1292 = call i32 @fseek(%struct._IO_FILE* %1291, i64 3145728, i32 0)
  %1293 = call signext i16 @guess_byte_order(i32 65536)
  store i16 %1293, i16* @order, align 2
  %1294 = sext i16 %1293 to i32
  %1295 = icmp eq i32 %1294, 19789
  br i1 %1295, label %1296, label %1306

; <label>:1296                                    ; preds = %1290
  store i16 16, i16* @top_margin, align 2
  %1297 = load i16* @height, align 2
  %1298 = zext i16 %1297 to i32
  %1299 = sub nsw i32 %1298, 16
  %1300 = trunc i32 %1299 to i16
  store i16 %1300, i16* @height, align 2
  store i16 28, i16* @left_margin, align 2
  %1301 = load i16* @width, align 2
  %1302 = zext i16 %1301 to i32
  %1303 = sub nsw i32 %1302, 28
  %1304 = trunc i32 %1303 to i16
  store i16 %1304, i16* @width, align 2
  store i32 62912, i32* @maximum, align 4
  %1305 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str527, i32 0, i32 0)) #4
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  br label %1306

; <label>:1306                                    ; preds = %1296, %1290
  br label %2052

; <label>:1307                                    ; preds = %1287
  %1308 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str160, i32 0, i32 0)) #10
  %1309 = icmp ne i32 %1308, 0
  br i1 %1309, label %1335, label %1310

; <label>:1310                                    ; preds = %1307
  %1311 = load void (...)** @load_raw, align 8
  %1312 = icmp eq void (...)* %1311, bitcast (void ()* @lossless_jpeg_load_raw to void (...)*)
  br i1 %1312, label %1313, label %1314

; <label>:1313                                    ; preds = %1310
  store void (...)* bitcast (void ()* @hasselblad_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1314

; <label>:1314                                    ; preds = %1313, %1310
  %1315 = load i16* @raw_width, align 2
  %1316 = zext i16 %1315 to i32
  %1317 = icmp eq i32 %1316, 7262
  br i1 %1317, label %1318, label %1319

; <label>:1318                                    ; preds = %1314
  store i16 5444, i16* @height, align 2
  store i16 7248, i16* @width, align 2
  store i16 4, i16* @top_margin, align 2
  store i16 7, i16* @left_margin, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %1334

; <label>:1319                                    ; preds = %1314
  %1320 = load i16* @raw_width, align 2
  %1321 = zext i16 %1320 to i32
  %1322 = icmp eq i32 %1321, 4090
  br i1 %1322, label %1323, label %1333

; <label>:1323                                    ; preds = %1319
  %1324 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str528, i32 0, i32 0)) #4
  store i16 6, i16* @top_margin, align 2
  %1325 = load i16* @height, align 2
  %1326 = zext i16 %1325 to i32
  %1327 = sub nsw i32 %1326, 6
  %1328 = trunc i32 %1327 to i16
  store i16 %1328, i16* @height, align 2
  store i16 3, i16* @left_margin, align 2
  %1329 = load i16* @width, align 2
  %1330 = zext i16 %1329 to i32
  %1331 = sub nsw i32 %1330, 10
  %1332 = trunc i32 %1331 to i16
  store i16 %1332, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %1333

; <label>:1333                                    ; preds = %1323, %1319
  br label %1334

; <label>:1334                                    ; preds = %1333, %1318
  br label %2051

; <label>:1335                                    ; preds = %1307
  %1336 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str409, i32 0, i32 0)) #10
  %1337 = icmp ne i32 %1336, 0
  br i1 %1337, label %1354, label %1338

; <label>:1338                                    ; preds = %1335
  %1339 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %1340 = call i32 @memcmp(i8* %1339, i8* getelementptr inbounds ([5 x i8]* @.str529, i32 0, i32 0), i64 4) #10
  %1341 = icmp ne i32 %1340, 0
  br i1 %1341, label %1349, label %1342

; <label>:1342                                    ; preds = %1338
  %1343 = load %struct._IO_FILE** @ifp, align 8
  %1344 = call i32 @fseek(%struct._IO_FILE* %1343, i64 14, i32 0)
  %1345 = call i32 @get4()
  %1346 = trunc i32 %1345 to i16
  store i16 %1346, i16* @height, align 2
  %1347 = call i32 @get4()
  %1348 = trunc i32 %1347 to i16
  store i16 %1348, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  store i64 68, i64* @data_offset, align 8
  br label %1349

; <label>:1349                                    ; preds = %1342, %1338
  %1350 = load void (...)** @load_raw, align 8
  %1351 = icmp ne void (...)* %1350, null
  br i1 %1351, label %1353, label %1352

; <label>:1352                                    ; preds = %1349
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1353

; <label>:1353                                    ; preds = %1352, %1349
  store i32 16383, i32* @maximum, align 4
  br label %2050

; <label>:1354                                    ; preds = %1335
  %1355 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str155, i32 0, i32 0)) #10
  %1356 = icmp ne i32 %1355, 0
  br i1 %1356, label %1460, label %1357

; <label>:1357                                    ; preds = %1354
  store i32 16383, i32* @maximum, align 4
  %1358 = load %struct._IO_FILE** @ifp, align 8
  %1359 = load i64* @data_offset, align 8
  %1360 = call i32 @fseek(%struct._IO_FILE* %1358, i64 %1359, i32 0)
  %1361 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %1362 = icmp ne i32 %1361, 0
  br i1 %1362, label %1363, label %1368

; <label>:1363                                    ; preds = %1357
  %1364 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %1365 = load i32* %1364, align 4
  %1366 = icmp eq i32 %1365, 15
  br i1 %1366, label %1367, label %1368

; <label>:1367                                    ; preds = %1363
  store i32 8191, i32* @maximum, align 4
  br label %1368

; <label>:1368                                    ; preds = %1367, %1363, %1357
  %1369 = load i32* @tiff_samples, align 4
  %1370 = icmp ugt i32 %1369, 1
  br i1 %1370, label %1371, label %1372

; <label>:1371                                    ; preds = %1368
  store i32 0, i32* @filters, align 4
  br label %1372

; <label>:1372                                    ; preds = %1371, %1368
  %1373 = load i32* @tiff_samples, align 4
  %1374 = icmp ugt i32 %1373, 1
  br i1 %1374, label %1380, label %1375

; <label>:1375                                    ; preds = %1372
  %1376 = load i32* @tile_length, align 4
  %1377 = load i16* @raw_height, align 2
  %1378 = zext i16 %1377 to i32
  %1379 = icmp ult i32 %1376, %1378
  br i1 %1379, label %1380, label %1381

; <label>:1380                                    ; preds = %1375, %1372
  store void (...)* bitcast (void ()* @leaf_hdr_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1381

; <label>:1381                                    ; preds = %1380, %1375
  %1382 = load i16* @width, align 2
  %1383 = zext i16 %1382 to i32
  %1384 = load i16* @height, align 2
  %1385 = zext i16 %1384 to i32
  %1386 = or i32 %1383, %1385
  %1387 = icmp eq i32 %1386, 2048
  br i1 %1387, label %1388, label %1397

; <label>:1388                                    ; preds = %1381
  %1389 = load i32* @tiff_samples, align 4
  %1390 = icmp eq i32 %1389, 1
  br i1 %1390, label %1391, label %1394

; <label>:1391                                    ; preds = %1388
  store i32 1, i32* @filters, align 4
  %1392 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str530, i32 0, i32 0)) #4
  %1393 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str531, i32 0, i32 0)) #4
  store i16 8, i16* @top_margin, align 2
  store i16 18, i16* @left_margin, align 2
  store i16 2032, i16* @height, align 2
  store i16 2016, i16* @width, align 2
  br label %1396

; <label>:1394                                    ; preds = %1388
  %1395 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str111, i32 0, i32 0)) #4
  store i16 10, i16* @top_margin, align 2
  store i16 16, i16* @left_margin, align 2
  store i16 2028, i16* @height, align 2
  store i16 2022, i16* @width, align 2
  br label %1396

; <label>:1396                                    ; preds = %1394, %1391
  br label %1459

; <label>:1397                                    ; preds = %1381
  %1398 = load i16* @width, align 2
  %1399 = zext i16 %1398 to i32
  %1400 = load i16* @height, align 2
  %1401 = zext i16 %1400 to i32
  %1402 = add nsw i32 %1399, %1401
  %1403 = icmp eq i32 %1402, 5204
  br i1 %1403, label %1404, label %1428

; <label>:1404                                    ; preds = %1397
  %1405 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1406 = icmp ne i8 %1405, 0
  br i1 %1406, label %1409, label %1407

; <label>:1407                                    ; preds = %1404
  %1408 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str113, i32 0, i32 0)) #4
  br label %1409

; <label>:1409                                    ; preds = %1407, %1404
  %1410 = load i16* @width, align 2
  %1411 = zext i16 %1410 to i32
  %1412 = load i16* @height, align 2
  %1413 = zext i16 %1412 to i32
  %1414 = icmp sgt i32 %1411, %1413
  br i1 %1414, label %1415, label %1416

; <label>:1415                                    ; preds = %1409
  store i16 6, i16* @top_margin, align 2
  store i16 32, i16* @left_margin, align 2
  store i16 2048, i16* @height, align 2
  store i16 3072, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %1417

; <label>:1416                                    ; preds = %1409
  store i16 6, i16* @left_margin, align 2
  store i16 32, i16* @top_margin, align 2
  store i16 2048, i16* @width, align 2
  store i16 3072, i16* @height, align 2
  store i32 370546198, i32* @filters, align 4
  br label %1417

; <label>:1417                                    ; preds = %1416, %1415
  %1418 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %1419 = fcmp une float %1418, 0.000000e+00
  br i1 %1419, label %1420, label %1424

; <label>:1420                                    ; preds = %1417
  %1421 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1422 = sext i8 %1421 to i32
  %1423 = icmp eq i32 %1422, 86
  br i1 %1423, label %1424, label %1425

; <label>:1424                                    ; preds = %1420, %1417
  store i32 0, i32* @filters, align 4
  br label %1427

; <label>:1425                                    ; preds = %1420
  %1426 = load i32* @tiff_samples, align 4
  store i32 %1426, i32* @is_raw, align 4
  br label %1427

; <label>:1427                                    ; preds = %1425, %1424
  br label %1458

; <label>:1428                                    ; preds = %1397
  %1429 = load i16* @width, align 2
  %1430 = zext i16 %1429 to i32
  %1431 = icmp eq i32 %1430, 2116
  br i1 %1431, label %1432, label %1442

; <label>:1432                                    ; preds = %1428
  %1433 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0)) #4
  store i16 30, i16* @top_margin, align 2
  %1434 = load i16* @height, align 2
  %1435 = zext i16 %1434 to i32
  %1436 = sub nsw i32 %1435, 60
  %1437 = trunc i32 %1436 to i16
  store i16 %1437, i16* @height, align 2
  store i16 55, i16* @left_margin, align 2
  %1438 = load i16* @width, align 2
  %1439 = zext i16 %1438 to i32
  %1440 = sub nsw i32 %1439, 110
  %1441 = trunc i32 %1440 to i16
  store i16 %1441, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %1457

; <label>:1442                                    ; preds = %1428
  %1443 = load i16* @width, align 2
  %1444 = zext i16 %1443 to i32
  %1445 = icmp eq i32 %1444, 3171
  br i1 %1445, label %1446, label %1456

; <label>:1446                                    ; preds = %1442
  %1447 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0)) #4
  store i16 24, i16* @top_margin, align 2
  %1448 = load i16* @height, align 2
  %1449 = zext i16 %1448 to i32
  %1450 = sub nsw i32 %1449, 48
  %1451 = trunc i32 %1450 to i16
  store i16 %1451, i16* @height, align 2
  store i16 24, i16* @left_margin, align 2
  %1452 = load i16* @width, align 2
  %1453 = zext i16 %1452 to i32
  %1454 = sub nsw i32 %1453, 48
  %1455 = trunc i32 %1454 to i16
  store i16 %1455, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  br label %1456

; <label>:1456                                    ; preds = %1446, %1442
  br label %1457

; <label>:1457                                    ; preds = %1456, %1432
  br label %1458

; <label>:1458                                    ; preds = %1457, %1427
  br label %1459

; <label>:1459                                    ; preds = %1458, %1396
  br label %2049

; <label>:1460                                    ; preds = %1354
  %1461 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str98, i32 0, i32 0)) #10
  %1462 = icmp ne i32 %1461, 0
  br i1 %1462, label %1463, label %1466

; <label>:1463                                    ; preds = %1460
  %1464 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0)) #10
  %1465 = icmp ne i32 %1464, 0
  br i1 %1465, label %1603, label %1466

; <label>:1466                                    ; preds = %1463, %1460
  store i32 65520, i32* @maximum, align 4
  %1467 = zext i32 %60 to i64
  %1468 = load i64* @data_offset, align 8
  %1469 = sub nsw i64 %1467, %1468
  %1470 = load i16* @width, align 2
  %1471 = zext i16 %1470 to i32
  %1472 = mul nsw i32 %1471, 8
  %1473 = sdiv i32 %1472, 7
  %1474 = sext i32 %1473 to i64
  %1475 = sdiv i64 %1469, %1474
  %1476 = load i16* @height, align 2
  %1477 = zext i16 %1476 to i64
  %1478 = icmp eq i64 %1475, %1477
  br i1 %1478, label %1479, label %1480

; <label>:1479                                    ; preds = %1466
  store void (...)* bitcast (void ()* @panasonic_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1480

; <label>:1480                                    ; preds = %1479, %1466
  %1481 = load void (...)** @load_raw, align 8
  %1482 = icmp ne void (...)* %1481, null
  br i1 %1482, label %1484, label %1483

; <label>:1483                                    ; preds = %1480
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1484

; <label>:1484                                    ; preds = %1483, %1480
  %1485 = load i16* @width, align 2
  %1486 = zext i16 %1485 to i32
  switch i32 %1486, label %1602 [
    i32 2568, label %1487
    i32 3130, label %1488
    i32 3170, label %1489
    i32 3213, label %1499
    i32 3177, label %1504
    i32 3304, label %1509
    i32 3330, label %1514
    i32 3370, label %1519
    i32 3690, label %1533
    i32 3770, label %1538
    i32 3710, label %1551
    i32 3724, label %1552
    i32 3836, label %1557
    i32 3880, label %1568
    i32 4060, label %1573
    i32 4290, label %1579
    i32 4330, label %1584
    i32 4508, label %1597
  ]

; <label>:1487                                    ; preds = %1484
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str532, i32 0, i32 0))
  br label %1602

; <label>:1488                                    ; preds = %1484
  store i16 -14, i16* @left_margin, align 2
  br label %1489

; <label>:1489                                    ; preds = %1488, %1484
  %1490 = load i16* @left_margin, align 2
  %1491 = zext i16 %1490 to i32
  %1492 = add nsw i32 %1491, 18
  %1493 = trunc i32 %1492 to i16
  store i16 %1493, i16* @left_margin, align 2
  store i16 3096, i16* @width, align 2
  %1494 = load i16* @height, align 2
  %1495 = zext i16 %1494 to i32
  %1496 = icmp sgt i32 %1495, 2326
  br i1 %1496, label %1497, label %1498

; <label>:1497                                    ; preds = %1489
  store i16 2326, i16* @height, align 2
  store i16 13, i16* @top_margin, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %1498

; <label>:1498                                    ; preds = %1497, %1489
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str533, i32 0, i32 0))
  br label %1602

; <label>:1499                                    ; preds = %1484
  %1500 = load i16* @width, align 2
  %1501 = zext i16 %1500 to i32
  %1502 = sub nsw i32 %1501, 27
  %1503 = trunc i32 %1502 to i16
  store i16 %1503, i16* @width, align 2
  br label %1504

; <label>:1504                                    ; preds = %1499, %1484
  %1505 = load i16* @width, align 2
  %1506 = zext i16 %1505 to i32
  %1507 = sub nsw i32 %1506, 10
  %1508 = trunc i32 %1507 to i16
  store i16 %1508, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str534, i32 0, i32 0))
  br label %1602

; <label>:1509                                    ; preds = %1484
  %1510 = load i16* @width, align 2
  %1511 = zext i16 %1510 to i32
  %1512 = sub nsw i32 %1511, 17
  %1513 = trunc i32 %1512 to i16
  store i16 %1513, i16* @width, align 2
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str535, i32 0, i32 0))
  br label %1602

; <label>:1514                                    ; preds = %1484
  %1515 = load i16* @width, align 2
  %1516 = zext i16 %1515 to i32
  %1517 = add nsw i32 %1516, 43
  %1518 = trunc i32 %1517 to i16
  store i16 %1518, i16* @width, align 2
  store i16 -6, i16* @left_margin, align 2
  store i32 63472, i32* @maximum, align 4
  br label %1519

; <label>:1519                                    ; preds = %1514, %1484
  %1520 = load i16* @width, align 2
  %1521 = zext i16 %1520 to i32
  %1522 = sub nsw i32 %1521, 82
  %1523 = trunc i32 %1522 to i16
  store i16 %1523, i16* @width, align 2
  %1524 = load i16* @left_margin, align 2
  %1525 = zext i16 %1524 to i32
  %1526 = add nsw i32 %1525, 15
  %1527 = trunc i32 %1526 to i16
  store i16 %1527, i16* @left_margin, align 2
  %1528 = load i16* @height, align 2
  %1529 = zext i16 %1528 to i32
  %1530 = icmp sgt i32 %1529, 2480
  br i1 %1530, label %1531, label %1532

; <label>:1531                                    ; preds = %1519
  store i16 10, i16* @top_margin, align 2
  store i16 2470, i16* @height, align 2
  br label %1532

; <label>:1532                                    ; preds = %1531, %1519
  store i32 1229539657, i32* @filters, align 4
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str536, i32 0, i32 0))
  br label %1602

; <label>:1533                                    ; preds = %1484
  %1534 = load i16* @height, align 2
  %1535 = zext i16 %1534 to i32
  %1536 = sub nsw i32 %1535, 2
  %1537 = trunc i32 %1536 to i16
  store i16 %1537, i16* @height, align 2
  store i16 -14, i16* @left_margin, align 2
  store i32 63472, i32* @maximum, align 4
  br label %1538

; <label>:1538                                    ; preds = %1533, %1484
  store i16 3672, i16* @width, align 2
  %1539 = load i16* @height, align 2
  %1540 = add i16 %1539, -1
  store i16 %1540, i16* @height, align 2
  %1541 = zext i16 %1540 to i32
  %1542 = icmp eq i32 %1541, 2798
  br i1 %1542, label %1543, label %1545

; <label>:1543                                    ; preds = %1538
  store i16 2760, i16* @height, align 2
  br i1 true, label %1544, label %1545

; <label>:1544                                    ; preds = %1543
  store i16 15, i16* @top_margin, align 2
  br label %1546

; <label>:1545                                    ; preds = %1543, %1538
  store i32 1229539657, i32* @filters, align 4
  br label %1546

; <label>:1546                                    ; preds = %1545, %1544
  %1547 = load i16* @left_margin, align 2
  %1548 = zext i16 %1547 to i32
  %1549 = add nsw i32 %1548, 17
  %1550 = trunc i32 %1549 to i16
  store i16 %1550, i16* @left_margin, align 2
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str537, i32 0, i32 0))
  br label %1602

; <label>:1551                                    ; preds = %1484
  store i16 3682, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str538, i32 0, i32 0))
  br label %1602

; <label>:1552                                    ; preds = %1484
  %1553 = load i16* @width, align 2
  %1554 = zext i16 %1553 to i32
  %1555 = sub nsw i32 %1554, 14
  %1556 = trunc i32 %1555 to i16
  store i16 %1556, i16* @width, align 2
  br label %1557

; <label>:1557                                    ; preds = %1552, %1484
  %1558 = load i16* @width, align 2
  %1559 = zext i16 %1558 to i32
  %1560 = sub nsw i32 %1559, 42
  %1561 = trunc i32 %1560 to i16
  store i16 %1561, i16* @width, align 2
  br label %1562

; <label>:1562                                    ; preds = %1577, %1557
  store i32 370546198, i32* @filters, align 4
  %1563 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %1564 = sext i8 %1563 to i32
  %1565 = icmp ne i32 %1564, 80
  br i1 %1565, label %1566, label %1567

; <label>:1566                                    ; preds = %1562
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str539, i32 0, i32 0))
  br label %1567

; <label>:1567                                    ; preds = %1566, %1562
  br label %1602

; <label>:1568                                    ; preds = %1484
  %1569 = load i16* @width, align 2
  %1570 = zext i16 %1569 to i32
  %1571 = sub nsw i32 %1570, 22
  %1572 = trunc i32 %1571 to i16
  store i16 %1572, i16* @width, align 2
  store i16 6, i16* @left_margin, align 2
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str540, i32 0, i32 0))
  br label %1602

; <label>:1573                                    ; preds = %1484
  store i16 3982, i16* @width, align 2
  %1574 = load i16* @height, align 2
  %1575 = zext i16 %1574 to i32
  %1576 = icmp eq i32 %1575, 2250
  br i1 %1576, label %1577, label %1578

; <label>:1577                                    ; preds = %1573
  br label %1562

; <label>:1578                                    ; preds = %1573
  store i16 4018, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str541, i32 0, i32 0))
  br label %1602

; <label>:1579                                    ; preds = %1484
  %1580 = load i16* @height, align 2
  %1581 = zext i16 %1580 to i32
  %1582 = add nsw i32 %1581, 38
  %1583 = trunc i32 %1582 to i16
  store i16 %1583, i16* @height, align 2
  store i16 -14, i16* @left_margin, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %1584

; <label>:1584                                    ; preds = %1579, %1484
  store i16 4248, i16* @width, align 2
  %1585 = load i16* @height, align 2
  %1586 = zext i16 %1585 to i32
  %1587 = sub nsw i32 %1586, 39
  %1588 = trunc i32 %1587 to i16
  store i16 %1588, i16* @height, align 2
  %1589 = zext i16 %1588 to i32
  %1590 = icmp eq i32 %1589, 2400
  br i1 %1590, label %1591, label %1592

; <label>:1591                                    ; preds = %1584
  store i16 15, i16* @top_margin, align 2
  br label %1592

; <label>:1592                                    ; preds = %1591, %1584
  %1593 = load i16* @left_margin, align 2
  %1594 = zext i16 %1593 to i32
  %1595 = add nsw i32 %1594, 17
  %1596 = trunc i32 %1595 to i16
  store i16 %1596, i16* @left_margin, align 2
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str542, i32 0, i32 0))
  br label %1602

; <label>:1597                                    ; preds = %1484
  %1598 = load i16* @height, align 2
  %1599 = zext i16 %1598 to i32
  %1600 = sub nsw i32 %1599, 6
  %1601 = trunc i32 %1600 to i16
  store i16 %1601, i16* @height, align 2
  store i16 4429, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str543, i32 0, i32 0))
  br label %1602

; <label>:1602                                    ; preds = %1597, %1592, %1578, %1568, %1567, %1551, %1546, %1532, %1509, %1504, %1498, %1487, %1484
  br label %2048

; <label>:1603                                    ; preds = %1463
  %1604 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str544, i32 0, i32 0)) #10
  %1605 = icmp ne i32 %1604, 0
  br i1 %1605, label %1607, label %1606

; <label>:1606                                    ; preds = %1603
  store i16 1718, i16* @height, align 2
  store i16 2304, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  br label %2047

; <label>:1607                                    ; preds = %1603
  %1608 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0)) #10
  %1609 = icmp ne i32 %1608, 0
  br i1 %1609, label %1672, label %1610

; <label>:1610                                    ; preds = %1607
  %1611 = load i16* @height, align 2
  %1612 = zext i16 %1611 to i32
  %1613 = and i32 %1612, 1
  %1614 = load i16* @height, align 2
  %1615 = zext i16 %1614 to i32
  %1616 = add nsw i32 %1615, %1613
  %1617 = trunc i32 %1616 to i16
  store i16 %1617, i16* @height, align 2
  %1618 = load i32* @exif_cfa, align 4
  store i32 %1618, i32* @filters, align 4
  %1619 = load void (...)** @load_raw, align 8
  %1620 = icmp eq void (...)* %1619, bitcast (void ()* @olympus_e410_load_raw to void (...)*)
  br i1 %1620, label %1621, label %1624

; <label>:1621                                    ; preds = %1610
  %1622 = load i32* @black, align 4
  %1623 = lshr i32 %1622, 4
  store i32 %1623, i32* @black, align 4
  br label %1671

; <label>:1624                                    ; preds = %1610
  %1625 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str545, i32 0, i32 0)) #10
  %1626 = icmp ne i32 %1625, 0
  br i1 %1626, label %1627, label %1630

; <label>:1627                                    ; preds = %1624
  %1628 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str546, i32 0, i32 0), i64 4) #10
  %1629 = icmp ne i32 %1628, 0
  br i1 %1629, label %1633, label %1630

; <label>:1630                                    ; preds = %1627, %1624
  %1631 = load i32* @black, align 4
  %1632 = shl i32 %1631, 2
  store i32 %1632, i32* @black, align 4
  br label %1670

; <label>:1633                                    ; preds = %1627
  %1634 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str547, i32 0, i32 0)) #10
  %1635 = icmp ne i32 %1634, 0
  br i1 %1635, label %1636, label %1639

; <label>:1636                                    ; preds = %1633
  %1637 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str548, i32 0, i32 0)) #10
  %1638 = icmp ne i32 %1637, 0
  br i1 %1638, label %1648, label %1639

; <label>:1639                                    ; preds = %1636, %1633
  %1640 = load i16* @width, align 2
  %1641 = zext i16 %1640 to i32
  %1642 = sub nsw i32 %1641, 20
  %1643 = trunc i32 %1642 to i16
  store i16 %1643, i16* @width, align 2
  %1644 = load void (...)** @load_raw, align 8
  %1645 = icmp eq void (...)* %1644, bitcast (void ()* @unpacked_load_raw to void (...)*)
  br i1 %1645, label %1646, label %1647

; <label>:1646                                    ; preds = %1639
  store i32 64560, i32* @maximum, align 4
  store i32 0, i32* @black, align 4
  br label %1647

; <label>:1647                                    ; preds = %1646, %1639
  br label %1669

; <label>:1648                                    ; preds = %1636
  %1649 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str549, i32 0, i32 0)) #10
  %1650 = icmp ne i32 %1649, 0
  br i1 %1650, label %1660, label %1651

; <label>:1651                                    ; preds = %1648
  %1652 = load i16* @width, align 2
  %1653 = zext i16 %1652 to i32
  %1654 = sub nsw i32 %1653, 30
  %1655 = trunc i32 %1654 to i16
  store i16 %1655, i16* @width, align 2
  %1656 = load void (...)** @load_raw, align 8
  %1657 = icmp eq void (...)* %1656, bitcast (void ()* @unpacked_load_raw to void (...)*)
  br i1 %1657, label %1658, label %1659

; <label>:1658                                    ; preds = %1651
  store i32 63376, i32* @maximum, align 4
  br label %1659

; <label>:1659                                    ; preds = %1658, %1651
  br label %1668

; <label>:1660                                    ; preds = %1648
  %1661 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str550, i32 0, i32 0)) #10
  %1662 = icmp ne i32 %1661, 0
  br i1 %1662, label %1667, label %1663

; <label>:1663                                    ; preds = %1660
  %1664 = zext i32 %60 to i64
  store i64 10721280, i64* @thumb_offset, align 8
  %1665 = sub nsw i64 %1664, 10721280
  %1666 = trunc i64 %1665 to i32
  store i32 %1666, i32* @thumb_length, align 4
  store i16 480, i16* @thumb_height, align 2
  store i16 640, i16* @thumb_width, align 2
  br label %1667

; <label>:1667                                    ; preds = %1663, %1660
  br label %1668

; <label>:1668                                    ; preds = %1667, %1659
  br label %1669

; <label>:1669                                    ; preds = %1668, %1647
  br label %1670

; <label>:1670                                    ; preds = %1669, %1630
  br label %1671

; <label>:1671                                    ; preds = %1670, %1621
  br label %2046

; <label>:1672                                    ; preds = %1607
  %1673 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str432, i32 0, i32 0)) #10
  %1674 = icmp ne i32 %1673, 0
  br i1 %1674, label %1676, label %1675

; <label>:1675                                    ; preds = %1672
  store i16 2047, i16* @height, align 2
  store i16 3072, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  store i64 6656, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2045

; <label>:1676                                    ; preds = %1672
  %1677 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str551, i32 0, i32 0)) #10
  %1678 = icmp ne i32 %1677, 0
  br i1 %1678, label %1681, label %1679

; <label>:1679                                    ; preds = %1676
  store i16 3288, i16* @width, align 2
  store i16 5, i16* @left_margin, align 2
  store i64 862144, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @sony_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 -1667457892, i32* @filters, align 4
  store i32 4, i32* @colors, align 4
  %1680 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str552, i32 0, i32 0)) #4
  br label %2044

; <label>:1681                                    ; preds = %1676
  %1682 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str553, i32 0, i32 0)) #10
  %1683 = icmp ne i32 %1682, 0
  br i1 %1683, label %1685, label %1684

; <label>:1684                                    ; preds = %1681
  store i16 3109, i16* @width, align 2
  store i16 59, i16* @left_margin, align 2
  store i64 787392, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @sony_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2043

; <label>:1685                                    ; preds = %1681
  %1686 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0)) #10
  %1687 = icmp ne i32 %1686, 0
  br i1 %1687, label %1693, label %1688

; <label>:1688                                    ; preds = %1685
  %1689 = load i16* @raw_width, align 2
  %1690 = zext i16 %1689 to i32
  %1691 = icmp eq i32 %1690, 3984
  br i1 %1691, label %1692, label %1693

; <label>:1692                                    ; preds = %1688
  call void @adobe_coeff(i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str554, i32 0, i32 0))
  store i16 3925, i16* @width, align 2
  store i16 19789, i16* @order, align 2
  br label %2042

; <label>:1693                                    ; preds = %1688, %1685
  %1694 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str150, i32 0, i32 0)) #10
  %1695 = icmp ne i32 %1694, 0
  br i1 %1695, label %1699, label %1696

; <label>:1696                                    ; preds = %1693
  %1697 = load i16* @height, align 2
  %1698 = add i16 %1697, -1
  store i16 %1698, i16* @height, align 2
  br label %2041

; <label>:1699                                    ; preds = %1693
  %1700 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str555, i32 0, i32 0)) #10
  %1701 = icmp ne i32 %1700, 0
  br i1 %1701, label %1707, label %1702

; <label>:1702                                    ; preds = %1699
  %1703 = load i16* @height, align 2
  %1704 = zext i16 %1703 to i32
  %1705 = sub nsw i32 %1704, 4
  %1706 = trunc i32 %1705 to i16
  store i16 %1706, i16* @height, align 2
  br label %2040

; <label>:1707                                    ; preds = %1699
  %1708 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str556, i32 0, i32 0)) #10
  %1709 = icmp ne i32 %1708, 0
  br i1 %1709, label %1711, label %1710

; <label>:1710                                    ; preds = %1707
  store i16 480, i16* @height, align 2
  store i16 640, i16* @width, align 2
  br label %1715

; <label>:1711                                    ; preds = %1707
  %1712 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str557, i32 0, i32 0)) #10
  %1713 = icmp ne i32 %1712, 0
  br i1 %1713, label %1716, label %1714

; <label>:1714                                    ; preds = %1711
  store i16 2134, i16* @height, align 2
  store i16 2848, i16* @width, align 2
  br label %1715

; <label>:1715                                    ; preds = %1714, %1710
  store i32 0, i32* @filters, align 4
  store void (...)* bitcast (void ()* @kodak_yrgb_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2038

; <label>:1716                                    ; preds = %1711
  %1717 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str558, i32 0, i32 0)) #10
  %1718 = icmp ne i32 %1717, 0
  br i1 %1718, label %1720, label %1719

; <label>:1719                                    ; preds = %1716
  store i16 2152, i16* @height, align 2
  store i16 2152, i16* @raw_height, align 2
  store i16 2864, i16* @width, align 2
  store i16 2864, i16* @raw_width, align 2
  br label %1724

; <label>:1720                                    ; preds = %1716
  %1721 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str559, i32 0, i32 0)) #10
  %1722 = icmp ne i32 %1721, 0
  br i1 %1722, label %1738, label %1723

; <label>:1723                                    ; preds = %1720
  store i16 1744, i16* @height, align 2
  store i16 2336, i16* @width, align 2
  store i16 1779, i16* @raw_height, align 2
  store i16 2338, i16* @raw_width, align 2
  store i16 33, i16* @top_margin, align 2
  store i16 1, i16* @left_margin, align 2
  br label %1724

; <label>:1724                                    ; preds = %1723, %1719
  store i16 18761, i16* @order, align 2
  %1725 = load i16* @raw_height, align 2
  %1726 = zext i16 %1725 to i32
  %1727 = load i16* @raw_width, align 2
  %1728 = zext i16 %1727 to i32
  %1729 = mul nsw i32 %1726, %1728
  %1730 = sub i32 %60, %1729
  %1731 = zext i32 %1730 to i64
  store i64 %1731, i64* @data_offset, align 8
  %1732 = icmp ne i64 %1731, 0
  br i1 %1732, label %1733, label %1736

; <label>:1733                                    ; preds = %1724
  %1734 = load %struct._IO_FILE** @ifp, align 8
  %1735 = call i32 @fseek(%struct._IO_FILE* %1734, i64 168, i32 0)
  call void @read_shorts(i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i32 0), i32 256)
  br label %1737

; <label>:1736                                    ; preds = %1724
  store i32 0, i32* @use_gamma, align 4
  br label %1737

; <label>:1737                                    ; preds = %1736, %1733
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2036

; <label>:1738                                    ; preds = %1720
  %1739 = call i32 @strcasecmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0)) #10
  %1740 = icmp ne i32 %1739, 0
  br i1 %1740, label %1885, label %1741

; <label>:1741                                    ; preds = %1738
  %1742 = load i32* @filters, align 4
  %1743 = icmp eq i32 %1742, -1
  br i1 %1743, label %1744, label %1745

; <label>:1744                                    ; preds = %1741
  store i32 1633771873, i32* @filters, align 4
  br label %1745

; <label>:1745                                    ; preds = %1744, %1741
  %1746 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str560, i32 0, i32 0), i64 6) #10
  %1747 = icmp ne i32 %1746, 0
  br i1 %1747, label %1753, label %1748

; <label>:1748                                    ; preds = %1745
  %1749 = load i16* @width, align 2
  %1750 = zext i16 %1749 to i32
  %1751 = sub nsw i32 %1750, 4
  %1752 = trunc i32 %1751 to i16
  store i16 %1752, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1808

; <label>:1753                                    ; preds = %1745
  %1754 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str561, i32 0, i32 0)) #10
  %1755 = icmp ne i32 %1754, 0
  br i1 %1755, label %1761, label %1756

; <label>:1756                                    ; preds = %1753
  %1757 = load i16* @width, align 2
  %1758 = zext i16 %1757 to i32
  %1759 = sub nsw i32 %1758, 4
  %1760 = trunc i32 %1759 to i16
  store i16 %1760, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1807

; <label>:1761                                    ; preds = %1753
  %1762 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str562, i32 0, i32 0)) #10
  %1763 = icmp ne i32 %1762, 0
  br i1 %1763, label %1769, label %1764

; <label>:1764                                    ; preds = %1761
  %1765 = load i16* @width, align 2
  %1766 = zext i16 %1765 to i32
  %1767 = sub nsw i32 %1766, 4
  %1768 = trunc i32 %1767 to i16
  store i16 %1768, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1806

; <label>:1769                                    ; preds = %1761
  %1770 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str563, i32 0, i32 0)) #10
  %1771 = icmp ne i32 %1770, 0
  br i1 %1771, label %1777, label %1772

; <label>:1772                                    ; preds = %1769
  %1773 = load i16* @width, align 2
  %1774 = zext i16 %1773 to i32
  %1775 = sub nsw i32 %1774, 4
  %1776 = trunc i32 %1775 to i16
  store i16 %1776, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1805

; <label>:1777                                    ; preds = %1769
  %1778 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str564, i32 0, i32 0)) #10
  %1779 = icmp ne i32 %1778, 0
  br i1 %1779, label %1785, label %1780

; <label>:1780                                    ; preds = %1777
  %1781 = load i16* @width, align 2
  %1782 = zext i16 %1781 to i32
  %1783 = sub nsw i32 %1782, 4
  %1784 = trunc i32 %1783 to i16
  store i16 %1784, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1804

; <label>:1785                                    ; preds = %1777
  %1786 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str565, i32 0, i32 0)) #10
  %1787 = icmp ne i32 %1786, 0
  br i1 %1787, label %1793, label %1788

; <label>:1788                                    ; preds = %1785
  %1789 = load i16* @width, align 2
  %1790 = zext i16 %1789 to i32
  %1791 = sub nsw i32 %1790, 4
  %1792 = trunc i32 %1791 to i16
  store i16 %1792, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  store i32 1, i32* @colors, align 4
  store i32 0, i32* @filters, align 4
  br label %1803

; <label>:1793                                    ; preds = %1785
  %1794 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str566, i32 0, i32 0)) #10
  %1795 = icmp ne i32 %1794, 0
  br i1 %1795, label %1797, label %1796

; <label>:1796                                    ; preds = %1793
  store i32 214, i32* @black, align 4
  store i32 1, i32* @colors, align 4
  store i32 0, i32* @filters, align 4
  br label %1802

; <label>:1797                                    ; preds = %1793
  %1798 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str567, i32 0, i32 0)) #10
  %1799 = icmp ne i32 %1798, 0
  br i1 %1799, label %1801, label %1800

; <label>:1800                                    ; preds = %1797
  store i32 1, i32* @colors, align 4
  store i32 0, i32* @filters, align 4
  br label %1801

; <label>:1801                                    ; preds = %1800, %1797
  br label %1802

; <label>:1802                                    ; preds = %1801, %1796
  br label %1803

; <label>:1803                                    ; preds = %1802, %1788
  br label %1804

; <label>:1804                                    ; preds = %1803, %1780
  br label %1805

; <label>:1805                                    ; preds = %1804, %1772
  br label %1806

; <label>:1806                                    ; preds = %1805, %1764
  br label %1807

; <label>:1807                                    ; preds = %1806, %1756
  br label %1808

; <label>:1808                                    ; preds = %1807, %1748
  %1809 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 4), i8* getelementptr inbounds ([4 x i8]* @.str568, i32 0, i32 0)) #10
  %1810 = icmp ne i32 %1809, 0
  br i1 %1810, label %1813, label %1811

; <label>:1811                                    ; preds = %1808
  %1812 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str569, i32 0, i32 0)) #4
  br label %1813

; <label>:1813                                    ; preds = %1811, %1808
  %1814 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str570, i32 0, i32 0)) #10
  %1815 = icmp ne i8* %1814, null
  br i1 %1815, label %1816, label %1818

; <label>:1816                                    ; preds = %1813
  %1817 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str570, i32 0, i32 0)) #4
  store i64 15424, i64* @data_offset, align 8
  br label %1818

; <label>:1818                                    ; preds = %1816, %1813
  %1819 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str28, i32 0, i32 0), i64 3) #10
  %1820 = icmp ne i32 %1819, 0
  br i1 %1820, label %1850, label %1821

; <label>:1821                                    ; preds = %1818
  store i16 242, i16* @height, align 2
  %1822 = icmp ult i32 %60, 100000
  br i1 %1822, label %1823, label %1833

; <label>:1823                                    ; preds = %1821
  store i16 256, i16* @raw_width, align 2
  store i16 249, i16* @width, align 2
  %1824 = load i16* @height, align 2
  %1825 = zext i16 %1824 to i32
  %1826 = sitofp i32 %1825 to double
  %1827 = fmul double 4.000000e+00, %1826
  %1828 = load i16* @width, align 2
  %1829 = zext i16 %1828 to i32
  %1830 = sitofp i32 %1829 to double
  %1831 = fmul double 3.000000e+00, %1830
  %1832 = fdiv double %1827, %1831
  store double %1832, double* @pixel_aspect, align 8
  br label %1843

; <label>:1833                                    ; preds = %1821
  store i16 512, i16* @raw_width, align 2
  store i16 501, i16* @width, align 2
  %1834 = load i16* @height, align 2
  %1835 = zext i16 %1834 to i32
  %1836 = sitofp i32 %1835 to double
  %1837 = fmul double 4.930000e+02, %1836
  %1838 = load i16* @width, align 2
  %1839 = zext i16 %1838 to i32
  %1840 = sitofp i32 %1839 to double
  %1841 = fmul double 3.730000e+02, %1840
  %1842 = fdiv double %1837, %1841
  store double %1842, double* @pixel_aspect, align 8
  br label %1843

; <label>:1843                                    ; preds = %1833, %1823
  %1844 = load i16* @raw_width, align 2
  %1845 = zext i16 %1844 to i32
  %1846 = add nsw i32 %1845, 1
  %1847 = sext i32 %1846 to i64
  %1848 = load i64* @data_offset, align 8
  %1849 = add nsw i64 %1848, %1847
  store i64 %1849, i64* @data_offset, align 8
  store i32 4, i32* @colors, align 4
  store i32 -1920103027, i32* @filters, align 4
  call void @simple_coeff(i32 1)
  store float 0x3FF2DD2F20000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  store float 0x3FF3581060000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  store float 0x3FF09374C0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1884

; <label>:1850                                    ; preds = %1818
  %1851 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str571, i32 0, i32 0)) #10
  %1852 = icmp ne i32 %1851, 0
  br i1 %1852, label %1855, label %1853

; <label>:1853                                    ; preds = %1850
  %1854 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str572, i32 0, i32 0)) #4
  store i16 512, i16* @height, align 2
  store i16 768, i16* @width, align 2
  store i64 1152, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1883

; <label>:1855                                    ; preds = %1850
  %1856 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str573, i32 0, i32 0)) #10
  %1857 = icmp ne i8* %1856, null
  br i1 %1857, label %1858, label %1860

; <label>:1858                                    ; preds = %1855
  %1859 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str573, i32 0, i32 0)) #4
  store i16 512, i16* @height, align 2
  store i16 768, i16* @width, align 2
  store i64 19712, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1882

; <label>:1860                                    ; preds = %1855
  %1861 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str574, i32 0, i32 0)) #10
  %1862 = icmp ne i8* %1861, null
  br i1 %1862, label %1863, label %1876

; <label>:1863                                    ; preds = %1860
  %1864 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str574, i32 0, i32 0)) #4
  store i16 976, i16* @height, align 2
  store i16 848, i16* @width, align 2
  %1865 = load i16* @height, align 2
  %1866 = zext i16 %1865 to i32
  %1867 = sitofp i32 %1866 to double
  %1868 = fdiv double %1867, 7.500000e-01
  %1869 = load i16* @width, align 2
  %1870 = zext i16 %1869 to i32
  %1871 = sitofp i32 %1870 to double
  %1872 = fdiv double %1868, %1871
  store double %1872, double* @pixel_aspect, align 8
  %1873 = load i32* @tiff_compress, align 4
  %1874 = icmp eq i32 %1873, 7
  %1875 = select i1 %1874, void (...)* bitcast (void ()* @kodak_jpeg_load_raw to void (...)*), void (...)* bitcast (void ()* @kodak_dc120_load_raw to void (...)*)
  store void (...)* %1875, void (...)** @load_raw, align 8
  br label %1881

; <label>:1876                                    ; preds = %1860
  %1877 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str575, i32 0, i32 0)) #10
  %1878 = icmp ne i32 %1877, 0
  br i1 %1878, label %1880, label %1879

; <label>:1879                                    ; preds = %1876
  store i16 128, i16* @thumb_height, align 2
  store i16 192, i16* @thumb_width, align 2
  store i64 6144, i64* @thumb_offset, align 8
  store i32 360, i32* @thumb_misc, align 4
  store void (%struct._IO_FILE*)* @layer_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  store i16 1024, i16* @height, align 2
  store i16 1536, i16* @width, align 2
  store i64 79872, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 17, i32* @black, align 4
  br label %1880

; <label>:1880                                    ; preds = %1879, %1876
  br label %1881

; <label>:1881                                    ; preds = %1880, %1863
  br label %1882

; <label>:1882                                    ; preds = %1881, %1858
  br label %1883

; <label>:1883                                    ; preds = %1882, %1853
  br label %1884

; <label>:1884                                    ; preds = %1883, %1843
  br label %2035

; <label>:1885                                    ; preds = %1738
  %1886 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str435, i32 0, i32 0)) #10
  %1887 = icmp ne i32 %1886, 0
  br i1 %1887, label %1889, label %1888

; <label>:1888                                    ; preds = %1885
  store i16 512, i16* @height, align 2
  store i16 768, i16* @width, align 2
  store i64 3632, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1633771873, i32* @filters, align 4
  call void @simple_coeff(i32 2)
  br label %2034

; <label>:1889                                    ; preds = %1885
  %1890 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str438, i32 0, i32 0)) #10
  %1891 = icmp ne i32 %1890, 0
  br i1 %1891, label %1937, label %1892

; <label>:1892                                    ; preds = %1889
  %1893 = load %struct._IO_FILE** @ifp, align 8
  %1894 = call i32 @fseek(%struct._IO_FILE* %1893, i64 544, i32 0)
  %1895 = call zeroext i16 @get2()
  store i16 %1895, i16* @height, align 2
  %1896 = call zeroext i16 @get2()
  store i16 %1896, i16* @width, align 2
  %1897 = call i32 @get4()
  %1898 = call zeroext i16 @get2()
  %1899 = zext i16 %1898 to i32
  %1900 = icmp eq i32 %1899, 30
  %1901 = select i1 %1900, i32 738, i32 736
  %1902 = sext i32 %1901 to i64
  store i64 %1902, i64* @data_offset, align 8
  %1903 = load i16* @height, align 2
  %1904 = zext i16 %1903 to i32
  %1905 = load i16* @width, align 2
  %1906 = zext i16 %1905 to i32
  %1907 = icmp sgt i32 %1904, %1906
  br i1 %1907, label %1908, label %1936

; <label>:1908                                    ; preds = %1892
  %1909 = load i16* @width, align 2
  %1910 = zext i16 %1909 to i32
  %1911 = load i16* @height, align 2
  %1912 = zext i16 %1911 to i32
  %1913 = xor i32 %1912, %1910
  %1914 = trunc i32 %1913 to i16
  store i16 %1914, i16* @height, align 2
  %1915 = load i16* @height, align 2
  %1916 = zext i16 %1915 to i32
  %1917 = load i16* @width, align 2
  %1918 = zext i16 %1917 to i32
  %1919 = xor i32 %1918, %1916
  %1920 = trunc i32 %1919 to i16
  store i16 %1920, i16* @width, align 2
  %1921 = zext i16 %1920 to i32
  %1922 = load i16* @height, align 2
  %1923 = zext i16 %1922 to i32
  %1924 = xor i32 %1923, %1921
  %1925 = trunc i32 %1924 to i16
  store i16 %1925, i16* @height, align 2
  %1926 = load %struct._IO_FILE** @ifp, align 8
  %1927 = load i64* @data_offset, align 8
  %1928 = sub nsw i64 %1927, 6
  %1929 = call i32 @fseek(%struct._IO_FILE* %1926, i64 %1928, i32 0)
  %1930 = call zeroext i16 @get2()
  %1931 = zext i16 %1930 to i32
  %1932 = xor i32 %1931, -1
  %1933 = and i32 %1932, 3
  %1934 = icmp ne i32 %1933, 0
  %1935 = select i1 %1934, i32 5, i32 6
  store i32 %1935, i32* @flip, align 4
  br label %1936

; <label>:1936                                    ; preds = %1908, %1892
  store void (...)* bitcast (void ()* @quicktake_100_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1633771873, i32* @filters, align 4
  br label %2033

; <label>:1937                                    ; preds = %1889
  %1938 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str440, i32 0, i32 0)) #10
  %1939 = icmp ne i32 %1938, 0
  br i1 %1939, label %1952, label %1940

; <label>:1940                                    ; preds = %1937
  %1941 = getelementptr inbounds [32 x i8]* %head, i32 0, i64 5
  %1942 = load i8* %1941, align 1
  %1943 = sext i8 %1942 to i32
  %1944 = sub nsw i32 738, %1943
  %1945 = sext i32 %1944 to i64
  store i64 %1945, i64* @data_offset, align 8
  %1946 = getelementptr inbounds [32 x i8]* %head, i32 0, i64 5
  %1947 = load i8* %1946, align 1
  %1948 = icmp ne i8 %1947, 0
  br i1 %1948, label %1949, label %1951

; <label>:1949                                    ; preds = %1940
  %1950 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 10), i8* getelementptr inbounds ([4 x i8]* @.str576, i32 0, i32 0)) #4
  br label %1951

; <label>:1951                                    ; preds = %1949, %1940
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i16 480, i16* @height, align 2
  store i16 640, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %2032

; <label>:1952                                    ; preds = %1937
  %1953 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str182, i32 0, i32 0)) #10
  %1954 = icmp ne i32 %1953, 0
  br i1 %1954, label %1964, label %1955

; <label>:1955                                    ; preds = %1952
  %1956 = load void (...)** @load_raw, align 8
  %1957 = icmp ne void (...)* %1956, null
  br i1 %1957, label %1964, label %1958

; <label>:1958                                    ; preds = %1955
  %1959 = load i16* @raw_width, align 2
  %1960 = zext i16 %1959 to i32
  switch i32 %1960, label %1963 [
    i32 1316, label %1961
    i32 2568, label %1962
  ]

; <label>:1961                                    ; preds = %1958
  store i16 1030, i16* @height, align 2
  store i16 1300, i16* @width, align 2
  store i16 1, i16* @top_margin, align 2
  store i16 6, i16* @left_margin, align 2
  br label %1963

; <label>:1962                                    ; preds = %1958
  store i16 1960, i16* @height, align 2
  store i16 2560, i16* @width, align 2
  store i16 2, i16* @top_margin, align 2
  store i16 8, i16* @left_margin, align 2
  br label %1963

; <label>:1963                                    ; preds = %1962, %1961, %1958
  store i32 370546198, i32* @filters, align 4
  store void (...)* bitcast (void ()* @rollei_load_raw to void (...)*), void (...)** @load_raw, align 8
  store float 0x3FFCCCCCC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF4CCCCC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2031

; <label>:1964                                    ; preds = %1955, %1952
  %1965 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str577, i32 0, i32 0)) #10
  %1966 = icmp ne i32 %1965, 0
  br i1 %1966, label %1968, label %1967

; <label>:1967                                    ; preds = %1964
  store i16 768, i16* @height, align 2
  store i16 1024, i16* @width, align 2
  store i64 1024, i64* @data_offset, align 8
  store i32 1229539657, i32* @filters, align 4
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  store float 0x3FF23D70A0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x4005D70A40000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2030

; <label>:1968                                    ; preds = %1964
  %1969 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str578, i32 0, i32 0)) #10
  %1970 = icmp ne i32 %1969, 0
  br i1 %1970, label %1976, label %1971

; <label>:1971                                    ; preds = %1968
  store i16 1208, i16* @height, align 2
  store i16 1632, i16* @width, align 2
  %1972 = load i16* @width, align 2
  %1973 = zext i16 %1972 to i32
  %1974 = mul nsw i32 %1973, 2
  %1975 = sext i32 %1974 to i64
  store i64 %1975, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2029

; <label>:1976                                    ; preds = %1968
  %1977 = icmp eq i32 %60, 3217760
  br i1 %1977, label %1978, label %1979

; <label>:1978                                    ; preds = %1976
  store i16 1546, i16* @height, align 2
  store i16 2070, i16* @width, align 2
  store i16 2080, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2028

; <label>:1979                                    ; preds = %1976
  %1980 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str579, i32 0, i32 0)) #10
  %1981 = icmp ne i32 %1980, 0
  br i1 %1981, label %1983, label %1982

; <label>:1982                                    ; preds = %1979
  store i16 1700, i16* @height, align 2
  store i16 2260, i16* @width, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 65535, i32* @maximum, align 4
  br label %2027

; <label>:1983                                    ; preds = %1979
  %1984 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str580, i32 0, i32 0)) #10
  %1985 = icmp ne i32 %1984, 0
  br i1 %1985, label %1987, label %1986

; <label>:1986                                    ; preds = %1983
  store i16 1924, i16* @height, align 2
  store i16 2576, i16* @width, align 2
  store void (...)* bitcast (void ()* @casio_qv5700_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2026

; <label>:1987                                    ; preds = %1983
  %1988 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str581, i32 0, i32 0)) #10
  %1989 = icmp ne i32 %1988, 0
  br i1 %1989, label %1991, label %1990

; <label>:1990                                    ; preds = %1987
  store i16 1720, i16* @height, align 2
  store i16 2312, i16* @width, align 2
  store i16 3520, i16* @raw_width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %2025

; <label>:1991                                    ; preds = %1987
  %1992 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str582, i32 0, i32 0)) #10
  %1993 = icmp ne i32 %1992, 0
  br i1 %1993, label %1995, label %1994

; <label>:1994                                    ; preds = %1991
  store i16 1926, i16* @height, align 2
  store i16 2580, i16* @width, align 2
  store i16 3904, i16* @raw_width, align 2
  store float 0x3FF570A3E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FFAC08320000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2024

; <label>:1995                                    ; preds = %1991
  %1996 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str583, i32 0, i32 0)) #10
  %1997 = icmp ne i32 %1996, 0
  br i1 %1997, label %1999, label %1998

; <label>:1998                                    ; preds = %1995
  store i16 1544, i16* @height, align 2
  store i16 2058, i16* @width, align 2
  store i16 3136, i16* @raw_width, align 2
  store float 0x3FFA189380000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF1B22D00000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2023

; <label>:1999                                    ; preds = %1995
  %2000 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str584, i32 0, i32 0)) #10
  %2001 = icmp ne i32 %2000, 0
  br i1 %2001, label %2003, label %2002

; <label>:2002                                    ; preds = %1999
  store i16 1931, i16* @height, align 2
  store i16 2570, i16* @width, align 2
  store i16 3904, i16* @raw_width, align 2
  store float 0x40043B6460000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF2F5C280000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2022

; <label>:2003                                    ; preds = %1999
  %2004 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str585, i32 0, i32 0)) #10
  %2005 = icmp ne i32 %2004, 0
  br i1 %2005, label %2007, label %2006

; <label>:2006                                    ; preds = %2003
  store i16 1960, i16* @height, align 2
  store i16 2570, i16* @width, align 2
  store i16 3904, i16* @raw_width, align 2
  store float 0x3FF851EB80000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF50E5600000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2021

; <label>:2007                                    ; preds = %2003
  %2008 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str586, i32 0, i32 0)) #10
  %2009 = icmp ne i32 %2008, 0
  br i1 %2009, label %2011, label %2010

; <label>:2010                                    ; preds = %2007
  store i16 1928, i16* @height, align 2
  store i16 2568, i16* @width, align 2
  store i16 3852, i16* @raw_width, align 2
  store i32 4095, i32* @maximum, align 4
  store float 0x40008F5C20000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FFE147AE0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2020

; <label>:2011                                    ; preds = %2007
  %2012 = icmp eq i32 %60, 9313536
  br i1 %2012, label %2013, label %2014

; <label>:2013                                    ; preds = %2011
  store i16 2142, i16* @height, align 2
  store i16 2844, i16* @width, align 2
  store i16 4288, i16* @raw_width, align 2
  store float 0x3FFCC08320000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF3810620000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2019

; <label>:2014                                    ; preds = %2011
  %2015 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str587, i32 0, i32 0)) #10
  %2016 = icmp ne i32 %2015, 0
  br i1 %2016, label %2018, label %2017

; <label>:2017                                    ; preds = %2014
  store i16 2318, i16* @height, align 2
  store i16 3082, i16* @width, align 2
  store i16 4672, i16* @raw_width, align 2
  store float 0x3FFC20C4A0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF8106240000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2018

; <label>:2018                                    ; preds = %2017, %2014
  br label %2019

; <label>:2019                                    ; preds = %2018, %2013
  br label %2020

; <label>:2020                                    ; preds = %2019, %2010
  br label %2021

; <label>:2021                                    ; preds = %2020, %2006
  br label %2022

; <label>:2022                                    ; preds = %2021, %2002
  br label %2023

; <label>:2023                                    ; preds = %2022, %1998
  br label %2024

; <label>:2024                                    ; preds = %2023, %1994
  br label %2025

; <label>:2025                                    ; preds = %2024, %1990
  br label %2026

; <label>:2026                                    ; preds = %2025, %1986
  br label %2027

; <label>:2027                                    ; preds = %2026, %1982
  br label %2028

; <label>:2028                                    ; preds = %2027, %1978
  br label %2029

; <label>:2029                                    ; preds = %2028, %1971
  br label %2030

; <label>:2030                                    ; preds = %2029, %1967
  br label %2031

; <label>:2031                                    ; preds = %2030, %1963
  br label %2032

; <label>:2032                                    ; preds = %2031, %1951
  br label %2033

; <label>:2033                                    ; preds = %2032, %1936
  br label %2034

; <label>:2034                                    ; preds = %2033, %1888
  br label %2035

; <label>:2035                                    ; preds = %2034, %1884
  br label %2036

; <label>:2036                                    ; preds = %2035, %1737
  br label %2037

; <label>:2037                                    ; preds = %2036
  br label %2038

; <label>:2038                                    ; preds = %2037, %1715
  br label %2039

; <label>:2039                                    ; preds = %2038
  br label %2040

; <label>:2040                                    ; preds = %2039, %1702
  br label %2041

; <label>:2041                                    ; preds = %2040, %1696
  br label %2042

; <label>:2042                                    ; preds = %2041, %1692
  br label %2043

; <label>:2043                                    ; preds = %2042, %1684
  br label %2044

; <label>:2044                                    ; preds = %2043, %1679
  br label %2045

; <label>:2045                                    ; preds = %2044, %1675
  br label %2046

; <label>:2046                                    ; preds = %2045, %1671
  br label %2047

; <label>:2047                                    ; preds = %2046, %1606
  br label %2048

; <label>:2048                                    ; preds = %2047, %1602
  br label %2049

; <label>:2049                                    ; preds = %2048, %1459
  br label %2050

; <label>:2050                                    ; preds = %2049, %1353
  br label %2051

; <label>:2051                                    ; preds = %2050, %1334
  br label %2052

; <label>:2052                                    ; preds = %2051, %1306
  br label %2053

; <label>:2053                                    ; preds = %2052, %1284
  br label %2054

; <label>:2054                                    ; preds = %2053, %1280
  br label %2055

; <label>:2055                                    ; preds = %2054, %1274
  br label %2056

; <label>:2056                                    ; preds = %2055, %1270
  br label %2057

; <label>:2057                                    ; preds = %2056, %1264
  br label %2058

; <label>:2058                                    ; preds = %2057, %1260
  br label %2059

; <label>:2059                                    ; preds = %2058, %1256
  br label %2060

; <label>:2060                                    ; preds = %2059, %1252
  br label %2061

; <label>:2061                                    ; preds = %2060, %1248
  br label %2062

; <label>:2062                                    ; preds = %2061, %1240
  br label %2063

; <label>:2063                                    ; preds = %2062, %1236
  br label %2064

; <label>:2064                                    ; preds = %2063, %1232
  br label %2065

; <label>:2065                                    ; preds = %2064, %1223
  br label %2066

; <label>:2066                                    ; preds = %2065, %1219
  br label %2067

; <label>:2067                                    ; preds = %2066, %1215
  br label %2068

; <label>:2068                                    ; preds = %2067, %1212
  br label %2069

; <label>:2069                                    ; preds = %2068, %1200
  br label %2070

; <label>:2070                                    ; preds = %2069, %1192
  br label %2071

; <label>:2071                                    ; preds = %2070, %1188
  br label %2072

; <label>:2072                                    ; preds = %2071
  br label %2073

; <label>:2073                                    ; preds = %2072
  br label %2074

; <label>:2074                                    ; preds = %2073, %1124
  br label %2075

; <label>:2075                                    ; preds = %2074, %1120
  br label %2076

; <label>:2076                                    ; preds = %2075, %1034
  br label %2077

; <label>:2077                                    ; preds = %2076, %1027
  br label %2078

; <label>:2078                                    ; preds = %2077, %1024
  br label %2079

; <label>:2079                                    ; preds = %2078, %1021
  br label %2080

; <label>:2080                                    ; preds = %2079, %1012
  br label %2081

; <label>:2081                                    ; preds = %2080, %1000
  br label %2082

; <label>:2082                                    ; preds = %2081, %980
  br label %2083

; <label>:2083                                    ; preds = %2082, %975
  br label %2084

; <label>:2084                                    ; preds = %2083, %964
  br label %2085

; <label>:2085                                    ; preds = %2084, %949
  br label %2086

; <label>:2086                                    ; preds = %2085, %946
  br label %2087

; <label>:2087                                    ; preds = %2086, %943
  br label %2088

; <label>:2088                                    ; preds = %2087, %935
  br label %2089

; <label>:2089                                    ; preds = %2088, %931
  br label %2090

; <label>:2090                                    ; preds = %2089, %909
  br label %2091

; <label>:2091                                    ; preds = %2090, %901
  br label %2092

; <label>:2092                                    ; preds = %2091, %897
  br label %2093

; <label>:2093                                    ; preds = %2092, %873
  br label %2094

; <label>:2094                                    ; preds = %2093, %867
  br label %2095

; <label>:2095                                    ; preds = %2094, %853
  br label %2096

; <label>:2096                                    ; preds = %2095, %838
  br label %2097

; <label>:2097                                    ; preds = %2096, %824
  br label %2098

; <label>:2098                                    ; preds = %2097, %812
  br label %2099

; <label>:2099                                    ; preds = %2098, %808
  br label %2100

; <label>:2100                                    ; preds = %2099, %789
  br label %2101

; <label>:2101                                    ; preds = %2100
  br label %2102

; <label>:2102                                    ; preds = %2101
  br label %2103

; <label>:2103                                    ; preds = %2102, %759
  br label %2104

; <label>:2104                                    ; preds = %2103
  br label %2105

; <label>:2105                                    ; preds = %2104
  br label %2106

; <label>:2106                                    ; preds = %2105, %730
  br label %2107

; <label>:2107                                    ; preds = %2106
  br label %2108

; <label>:2108                                    ; preds = %2107
  br label %2109

; <label>:2109                                    ; preds = %2108, %693
  br label %2110

; <label>:2110                                    ; preds = %2109
  br label %2111

; <label>:2111                                    ; preds = %2110
  br label %2112

; <label>:2112                                    ; preds = %2111, %666
  br label %2113

; <label>:2113                                    ; preds = %2112, %662
  br label %2114

; <label>:2114                                    ; preds = %2113, %655
  br label %2115

; <label>:2115                                    ; preds = %2114, %648
  br label %2116

; <label>:2116                                    ; preds = %2115, %637
  br label %2117

; <label>:2117                                    ; preds = %2116, %630
  br label %2118

; <label>:2118                                    ; preds = %2117, %623
  br label %2119

; <label>:2119                                    ; preds = %2118, %616
  br label %2120

; <label>:2120                                    ; preds = %2119, %605
  br label %2121

; <label>:2121                                    ; preds = %2120, %601
  br label %2122

; <label>:2122                                    ; preds = %2121, %597
  br label %2123

; <label>:2123                                    ; preds = %2122, %593
  br label %2124

; <label>:2124                                    ; preds = %2123, %589
  br label %2125

; <label>:2125                                    ; preds = %2124, %585
  br label %2126

; <label>:2126                                    ; preds = %2125, %581
  br label %2127

; <label>:2127                                    ; preds = %2126, %577
  br label %2128

; <label>:2128                                    ; preds = %2127, %568
  br label %2129

; <label>:2129                                    ; preds = %2128, %564
  br label %2130

; <label>:2130                                    ; preds = %2129, %560
  br label %2131

; <label>:2131                                    ; preds = %2130, %556
  br label %2132

; <label>:2132                                    ; preds = %2131, %552
  br label %2133

; <label>:2133                                    ; preds = %2132, %548
  br label %2134

; <label>:2134                                    ; preds = %2133, %541
  br label %2135

; <label>:2135                                    ; preds = %2134, %537
  br label %2136

; <label>:2136                                    ; preds = %2135, %518
  %2137 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %2138 = icmp ne i8 %2137, 0
  br i1 %2138, label %2145, label %2139

; <label>:2139                                    ; preds = %2136
  %2140 = load i16* @width, align 2
  %2141 = zext i16 %2140 to i32
  %2142 = load i16* @height, align 2
  %2143 = zext i16 %2142 to i32
  %2144 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str588, i32 0, i32 0), i32 %2141, i32 %2143) #4
  br label %2145

; <label>:2145                                    ; preds = %2139, %2136
  %2146 = load i32* @filters, align 4
  %2147 = icmp eq i32 %2146, -1
  br i1 %2147, label %2148, label %2149

; <label>:2148                                    ; preds = %2145
  store i32 -1802201964, i32* @filters, align 4
  br label %2149

; <label>:2149                                    ; preds = %2148, %2145
  %2150 = load i32* @raw_color, align 4
  %2151 = icmp ne i32 %2150, 0
  br i1 %2151, label %2152, label %2153

; <label>:2152                                    ; preds = %2149
  call void @adobe_coeff(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0))
  br label %2153

; <label>:2153                                    ; preds = %2152, %2149
  %2154 = load i64* @thumb_offset, align 8
  %2155 = icmp ne i64 %2154, 0
  br i1 %2155, label %2156, label %2173

; <label>:2156                                    ; preds = %2153
  %2157 = load i16* @thumb_height, align 2
  %2158 = icmp ne i16 %2157, 0
  br i1 %2158, label %2173, label %2159

; <label>:2159                                    ; preds = %2156
  %2160 = load %struct._IO_FILE** @ifp, align 8
  %2161 = load i64* @thumb_offset, align 8
  %2162 = call i32 @fseek(%struct._IO_FILE* %2160, i64 %2161, i32 0)
  %2163 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %2164 = icmp ne i32 %2163, 0
  br i1 %2164, label %2165, label %2172

; <label>:2165                                    ; preds = %2159
  %2166 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %2167 = load i32* %2166, align 4
  %2168 = trunc i32 %2167 to i16
  store i16 %2168, i16* @thumb_width, align 2
  %2169 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %2170 = load i32* %2169, align 4
  %2171 = trunc i32 %2170 to i16
  store i16 %2171, i16* @thumb_height, align 2
  br label %2172

; <label>:2172                                    ; preds = %2165, %2159
  br label %2173

; <label>:2173                                    ; preds = %2172, %2156, %2153
  br label %2174

; <label>:2174                                    ; preds = %2173, %463
  %2175 = load void (...)** @load_raw, align 8
  %2176 = icmp ne void (...)* %2175, null
  br i1 %2176, label %2177, label %2181

; <label>:2177                                    ; preds = %2174
  %2178 = load i16* @height, align 2
  %2179 = zext i16 %2178 to i32
  %2180 = icmp slt i32 %2179, 22
  br i1 %2180, label %2181, label %2182

; <label>:2181                                    ; preds = %2177, %2174
  store i32 0, i32* @is_raw, align 4
  br label %2182

; <label>:2182                                    ; preds = %2181, %2177
  %2183 = load void (...)** @load_raw, align 8
  %2184 = icmp eq void (...)* %2183, bitcast (void ()* @kodak_jpeg_load_raw to void (...)*)
  br i1 %2184, label %2185, label %2189

; <label>:2185                                    ; preds = %2182
  %2186 = load %struct._IO_FILE** @stderr, align 8
  %2187 = load i8** @ifname, align 8
  %2188 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2186, i8* getelementptr inbounds ([40 x i8]* @.str589, i32 0, i32 0), i8* %2187)
  store i32 0, i32* @is_raw, align 4
  br label %2189

; <label>:2189                                    ; preds = %2185, %2182
  %2190 = load i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 0), align 1
  %2191 = icmp ne i8 %2190, 0
  br i1 %2191, label %2197, label %2192

; <label>:2192                                    ; preds = %2189
  %2193 = load i32* @colors, align 4
  %2194 = icmp eq i32 %2193, 3
  %2195 = select i1 %2194, i8* getelementptr inbounds ([4 x i8]* @.str590, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str591, i32 0, i32 0)
  %2196 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* %2195) #4
  br label %2197

; <label>:2197                                    ; preds = %2192, %2189
  %2198 = load i16* @raw_height, align 2
  %2199 = icmp ne i16 %2198, 0
  br i1 %2199, label %2202, label %2200

; <label>:2200                                    ; preds = %2197
  %2201 = load i16* @height, align 2
  store i16 %2201, i16* @raw_height, align 2
  br label %2202

; <label>:2202                                    ; preds = %2200, %2197
  %2203 = load i16* @raw_width, align 2
  %2204 = icmp ne i16 %2203, 0
  br i1 %2204, label %2207, label %2205

; <label>:2205                                    ; preds = %2202
  %2206 = load i16* @width, align 2
  store i16 %2206, i16* @raw_width, align 2
  br label %2207

; <label>:2207                                    ; preds = %2205, %2202
  %2208 = load i32* @filters, align 4
  %2209 = icmp ne i32 %2208, 0
  br i1 %2209, label %2210, label %2238

; <label>:2210                                    ; preds = %2207
  %2211 = load i32* @colors, align 4
  %2212 = icmp eq i32 %2211, 3
  br i1 %2212, label %2213, label %2238

; <label>:2213                                    ; preds = %2210
  br label %2214

; <label>:2214                                    ; preds = %2235, %2213
  %i.4 = phi i32 [ 0, %2213 ], [ %2236, %2235 ]
  %2215 = icmp ult i32 %i.4, 32
  br i1 %2215, label %2216, label %2237

; <label>:2216                                    ; preds = %2214
  %2217 = load i32* @filters, align 4
  %2218 = lshr i32 %2217, %i.4
  %2219 = and i32 %2218, 15
  %2220 = icmp eq i32 %2219, 9
  br i1 %2220, label %2221, label %2225

; <label>:2221                                    ; preds = %2216
  %2222 = shl i32 2, %i.4
  %2223 = load i32* @filters, align 4
  %2224 = or i32 %2223, %2222
  store i32 %2224, i32* @filters, align 4
  br label %2225

; <label>:2225                                    ; preds = %2221, %2216
  %2226 = load i32* @filters, align 4
  %2227 = lshr i32 %2226, %i.4
  %2228 = and i32 %2227, 15
  %2229 = icmp eq i32 %2228, 6
  br i1 %2229, label %2230, label %2234

; <label>:2230                                    ; preds = %2225
  %2231 = shl i32 8, %i.4
  %2232 = load i32* @filters, align 4
  %2233 = or i32 %2232, %2231
  store i32 %2233, i32* @filters, align 4
  br label %2234

; <label>:2234                                    ; preds = %2230, %2225
  br label %2235

; <label>:2235                                    ; preds = %2234
  %2236 = add i32 %i.4, 4
  br label %2214

; <label>:2237                                    ; preds = %2214
  br label %2238

; <label>:2238                                    ; preds = %2237, %2210, %2207
  br label %2239

; <label>:2239                                    ; preds = %2238, %382
  %2240 = load i32* @flip, align 4
  %2241 = icmp eq i32 %2240, -1
  br i1 %2241, label %2242, label %2244

; <label>:2242                                    ; preds = %2239
  %2243 = load i32* @tiff_flip, align 4
  store i32 %2243, i32* @flip, align 4
  br label %2244

; <label>:2244                                    ; preds = %2242, %2239
  %2245 = load i32* @flip, align 4
  %2246 = icmp eq i32 %2245, -1
  br i1 %2246, label %2247, label %2248

; <label>:2247                                    ; preds = %2244
  store i32 0, i32* @flip, align 4
  br label %2248

; <label>:2248                                    ; preds = %2247, %2244
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @memmem(i8*, i64, i8*, i64) #6

; Function Attrs: nounwind readonly
declare i32 @strncasecmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define void @convert_to_rgb() #0 {
  %out = alloca [3 x float], align 4
  %out_cam = alloca [3 x [4 x float]], align 16
  %inverse = alloca [3 x [3 x double]], align 16
  %bnd = alloca [2 x double], align 16
  %pbody = alloca [31 x i32], align 16
  %pcurve = alloca [4 x i32], align 16
  %1 = bitcast [2 x double]* %bnd to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = bitcast [31 x i32]* %pbody to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([31 x i32]* @convert_to_rgb.pbody to i8*), i64 124, i32 16, i1 false)
  %3 = bitcast [4 x i32]* %pcurve to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([4 x i32]* @convert_to_rgb.pcurve to i8*), i64 16, i32 16, i1 false)
  %4 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %5 = fcmp oge double %4, 1.000000e+00
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 %7
  store double 1.000000e+00, double* %8, align 8
  %9 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %10 = fcmp une double %9, 0.000000e+00
  br i1 %10, label %11, label %56

; <label>:11                                      ; preds = %0
  %12 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %13 = fsub double %12, 1.000000e+00
  %14 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %15 = fsub double %14, 1.000000e+00
  %16 = fmul double %13, %15
  %17 = fcmp ole double %16, 0.000000e+00
  br i1 %17, label %18, label %56

; <label>:18                                      ; preds = %11
  br label %19

; <label>:19                                      ; preds = %45, %18
  %i.0 = phi i32 [ 0, %18 ], [ %46, %45 ]
  %20 = icmp slt i32 %i.0, 36
  br i1 %20, label %21, label %47

; <label>:21                                      ; preds = %19
  %22 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 0
  %23 = load double* %22, align 8
  %24 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 1
  %25 = load double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %28 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %29 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %30 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %31 = fdiv double %29, %30
  %32 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %33 = fsub double -0.000000e+00, %32
  %34 = call double @pow(double %31, double %33) #4
  %35 = fsub double %34, 1.000000e+00
  %36 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %37 = fdiv double %35, %36
  %38 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %39 = fdiv double 1.000000e+00, %38
  %40 = fsub double %37, %39
  %41 = fcmp ogt double %40, -1.000000e+00
  %42 = zext i1 %41 to i32
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 %43
  store double %28, double* %44, align 8
  br label %45

; <label>:45                                      ; preds = %21
  %46 = add nsw i32 %i.0, 1
  br label %19

; <label>:47                                      ; preds = %19
  %48 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %49 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %50 = fdiv double 1.000000e+00, %49
  %51 = fsub double %50, 1.000000e+00
  %52 = fmul double %48, %51
  store double %52, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %53 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %54 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %55 = fdiv double %54, %53
  store double %55, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  br label %56

; <label>:56                                      ; preds = %47, %11, %0
  %57 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %58 = fdiv double %57, 2.000000e+00
  %59 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %60 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %61 = fmul double %59, %60
  %62 = fmul double %58, %61
  %63 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %64 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %65 = fsub double 1.000000e+00, %64
  %66 = fmul double %63, %65
  %67 = fsub double %62, %66
  %68 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %69 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %70 = fadd double 1.000000e+00, %69
  %71 = call double @pow(double %68, double %70) #4
  %72 = fsub double 1.000000e+00, %71
  %73 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %74 = fadd double 1.000000e+00, %73
  %75 = fmul double %72, %74
  %76 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %77 = fadd double 1.000000e+00, %76
  %78 = fdiv double %75, %77
  %79 = fadd double %67, %78
  %80 = fdiv double 1.000000e+00, %79
  %81 = fsub double %80, 1.000000e+00
  store double %81, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 4), align 8
  %82 = bitcast [3 x [4 x float]]* %out_cam to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* bitcast ([3 x [4 x float]]* @rgb_cam to i8*), i64 48, i32 16, i1 false)
  %83 = load i32* @colors, align 4
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %94, label %85

; <label>:85                                      ; preds = %56
  %86 = load i32* @document_mode, align 4
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %94, label %88

; <label>:88                                      ; preds = %85
  %89 = load i32* @output_color, align 4
  %90 = icmp slt i32 %89, 1
  br i1 %90, label %94, label %91

; <label>:91                                      ; preds = %88
  %92 = load i32* @output_color, align 4
  %93 = icmp sgt i32 %92, 5
  br label %94

; <label>:94                                      ; preds = %91, %88, %85, %56
  %95 = phi i1 [ true, %88 ], [ true, %85 ], [ true, %56 ], [ %93, %91 ]
  %96 = zext i1 %95 to i32
  %97 = load i32* @raw_color, align 4
  %98 = or i32 %97, %96
  store i32 %98, i32* @raw_color, align 4
  %99 = load i32* @raw_color, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %353, label %101

; <label>:101                                     ; preds = %94
  %102 = load i32* getelementptr inbounds ([20 x i32]* @convert_to_rgb.phead, i32 0, i64 0), align 4
  %103 = zext i32 %102 to i64
  %104 = call noalias i8* @calloc(i64 %103, i64 1) #4
  %105 = bitcast i8* %104 to i32*
  store i32* %105, i32** @oprof, align 8
  %106 = load i32** @oprof, align 8
  %107 = bitcast i32* %106 to i8*
  call void @merror(i8* %107, i8* getelementptr inbounds ([17 x i8]* @.str597, i32 0, i32 0))
  %108 = load i32** @oprof, align 8
  %109 = bitcast i32* %108 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* bitcast ([20 x i32]* @convert_to_rgb.phead to i8*), i64 80, i32 4, i1 false)
  %110 = load i32* @output_color, align 4
  %111 = icmp eq i32 %110, 5
  br i1 %111, label %112, label %118

; <label>:112                                     ; preds = %101
  %113 = load i32** @oprof, align 8
  %114 = getelementptr inbounds i32* %113, i64 5
  %115 = load i32* %114, align 4
  %116 = load i32** @oprof, align 8
  %117 = getelementptr inbounds i32* %116, i64 4
  store i32 %115, i32* %117, align 4
  br label %118

; <label>:118                                     ; preds = %112, %101
  %119 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 0
  %120 = load i32* %119, align 4
  %121 = mul i32 12, %120
  %122 = add i32 132, %121
  %123 = load i32** @oprof, align 8
  %124 = getelementptr inbounds i32* %123, i64 0
  store i32 %122, i32* %124, align 4
  br label %125

; <label>:125                                     ; preds = %162, %118
  %i.1 = phi i32 [ 0, %118 ], [ %163, %162 ]
  %126 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 0
  %127 = load i32* %126, align 4
  %128 = icmp ult i32 %i.1, %127
  br i1 %128, label %129, label %164

; <label>:129                                     ; preds = %125
  %130 = icmp ne i32 %i.1, 0
  br i1 %130, label %131, label %134

; <label>:131                                     ; preds = %129
  %132 = icmp sgt i32 %i.1, 1
  %133 = select i1 %132, i32 1482250784, i32 1684370275
  br label %135

; <label>:134                                     ; preds = %129
  br label %135

; <label>:135                                     ; preds = %134, %131
  %136 = phi i32 [ %133, %131 ], [ 1952807028, %134 ]
  %137 = load i32** @oprof, align 8
  %138 = getelementptr inbounds i32* %137, i64 0
  %139 = load i32* %138, align 4
  %140 = udiv i32 %139, 4
  %141 = zext i32 %140 to i64
  %142 = load i32** @oprof, align 8
  %143 = getelementptr inbounds i32* %142, i64 %141
  store i32 %136, i32* %143, align 4
  %144 = load i32** @oprof, align 8
  %145 = getelementptr inbounds i32* %144, i64 0
  %146 = load i32* %145, align 4
  %147 = mul nsw i32 %i.1, 3
  %148 = add nsw i32 %147, 2
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %149
  store i32 %146, i32* %150, align 4
  %151 = mul nsw i32 %i.1, 3
  %152 = add nsw i32 %151, 3
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %153
  %155 = load i32* %154, align 4
  %156 = add i32 %155, 3
  %157 = and i32 %156, -4
  %158 = load i32** @oprof, align 8
  %159 = getelementptr inbounds i32* %158, i64 0
  %160 = load i32* %159, align 4
  %161 = add i32 %160, %157
  store i32 %161, i32* %159, align 4
  br label %162

; <label>:162                                     ; preds = %135
  %163 = add nsw i32 %i.1, 1
  br label %125

; <label>:164                                     ; preds = %125
  %165 = load i32** @oprof, align 8
  %166 = getelementptr inbounds i32* %165, i64 32
  %167 = bitcast i32* %166 to i8*
  %168 = bitcast [31 x i32]* %pbody to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %167, i8* %168, i64 124, i32 4, i1 false)
  %169 = load i32* @output_color, align 4
  %170 = sub nsw i32 %169, 1
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [5 x i8*]* @convert_to_rgb.name, i32 0, i64 %171
  %173 = load i8** %172, align 8
  %174 = call i64 @strlen(i8* %173) #10
  %175 = add i64 %174, 1
  %176 = trunc i64 %175 to i32
  %177 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 5
  %178 = load i32* %177, align 4
  %179 = udiv i32 %178, 4
  %180 = add i32 %179, 2
  %181 = zext i32 %180 to i64
  %182 = load i32** @oprof, align 8
  %183 = getelementptr inbounds i32* %182, i64 %181
  store i32 %176, i32* %183, align 4
  %184 = load i32** @oprof, align 8
  %185 = bitcast i32* %184 to i8*
  %186 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 8
  %187 = load i32* %186, align 4
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds i8* %185, i64 %188
  %190 = getelementptr inbounds i8* %189, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %190, i8* bitcast ([3 x i32]* @convert_to_rgb.pwhite to i8*), i64 12, i32 1, i1 false)
  %191 = load i32* @output_bps, align 4
  %192 = icmp eq i32 %191, 8
  br i1 %192, label %193, label %201

; <label>:193                                     ; preds = %164
  %194 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 4), align 8
  %195 = fdiv double 2.560000e+02, %194
  %196 = fadd double %195, 5.000000e-01
  %197 = fptosi double %196 to i16
  %198 = sext i16 %197 to i32
  %199 = shl i32 %198, 16
  %200 = getelementptr inbounds [4 x i32]* %pcurve, i32 0, i64 3
  store i32 %199, i32* %200, align 4
  br label %201

; <label>:201                                     ; preds = %193, %164
  br label %202

; <label>:202                                     ; preds = %215, %201
  %i.2 = phi i32 [ 4, %201 ], [ %216, %215 ]
  %203 = icmp slt i32 %i.2, 7
  br i1 %203, label %204, label %217

; <label>:204                                     ; preds = %202
  %205 = load i32** @oprof, align 8
  %206 = bitcast i32* %205 to i8*
  %207 = mul nsw i32 %i.2, 3
  %208 = add nsw i32 %207, 2
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %209
  %211 = load i32* %210, align 4
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i8* %206, i64 %212
  %214 = bitcast [4 x i32]* %pcurve to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %213, i8* %214, i64 16, i32 1, i1 false)
  br label %215

; <label>:215                                     ; preds = %204
  %216 = add nsw i32 %i.2, 1
  br label %202

; <label>:217                                     ; preds = %202
  %218 = load i32* @output_color, align 4
  %219 = sub nsw i32 %218, 1
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [5 x [3 x double]*]* @convert_to_rgb.out_rgb, i32 0, i64 %220
  %222 = load [3 x double]** %221, align 8
  %223 = getelementptr inbounds [3 x [3 x double]]* %inverse, i32 0, i32 0
  call void @pseudoinverse([3 x double]* %222, [3 x double]* %223, i32 3)
  br label %224

; <label>:224                                     ; preds = %265, %217
  %i.3 = phi i32 [ 0, %217 ], [ %266, %265 ]
  %225 = icmp slt i32 %i.3, 3
  br i1 %225, label %226, label %267

; <label>:226                                     ; preds = %224
  br label %227

; <label>:227                                     ; preds = %262, %226
  %j.0 = phi i32 [ 0, %226 ], [ %263, %262 ]
  %228 = icmp slt i32 %j.0, 3
  br i1 %228, label %229, label %264

; <label>:229                                     ; preds = %227
  br label %230

; <label>:230                                     ; preds = %245, %229
  %num.0 = phi double [ 0.000000e+00, %229 ], [ %244, %245 ]
  %k.0 = phi i32 [ 0, %229 ], [ %246, %245 ]
  %231 = icmp slt i32 %k.0, 3
  br i1 %231, label %232, label %247

; <label>:232                                     ; preds = %230
  %233 = sext i32 %k.0 to i64
  %234 = sext i32 %i.3 to i64
  %235 = getelementptr inbounds [3 x [3 x double]]* @convert_to_rgb.xyzd50_srgb, i32 0, i64 %234
  %236 = getelementptr inbounds [3 x double]* %235, i32 0, i64 %233
  %237 = load double* %236, align 8
  %238 = sext i32 %k.0 to i64
  %239 = sext i32 %j.0 to i64
  %240 = getelementptr inbounds [3 x [3 x double]]* %inverse, i32 0, i64 %239
  %241 = getelementptr inbounds [3 x double]* %240, i32 0, i64 %238
  %242 = load double* %241, align 8
  %243 = fmul double %237, %242
  %244 = fadd double %num.0, %243
  br label %245

; <label>:245                                     ; preds = %232
  %246 = add nsw i32 %k.0, 1
  br label %230

; <label>:247                                     ; preds = %230
  %248 = fmul double %num.0, 6.553600e+04
  %249 = fadd double %248, 5.000000e-01
  %250 = fptoui double %249 to i32
  %251 = mul nsw i32 %j.0, 3
  %252 = add nsw i32 %251, 23
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %253
  %255 = load i32* %254, align 4
  %256 = udiv i32 %255, 4
  %257 = add i32 %256, %i.3
  %258 = add i32 %257, 2
  %259 = zext i32 %258 to i64
  %260 = load i32** @oprof, align 8
  %261 = getelementptr inbounds i32* %260, i64 %259
  store i32 %250, i32* %261, align 4
  br label %262

; <label>:262                                     ; preds = %247
  %263 = add nsw i32 %j.0, 1
  br label %227

; <label>:264                                     ; preds = %227
  br label %265

; <label>:265                                     ; preds = %264
  %266 = add nsw i32 %i.3, 1
  br label %224

; <label>:267                                     ; preds = %224
  br label %268

; <label>:268                                     ; preds = %281, %267
  %i.4 = phi i32 [ 0, %267 ], [ %282, %281 ]
  %269 = load i32* getelementptr inbounds ([20 x i32]* @convert_to_rgb.phead, i32 0, i64 0), align 4
  %270 = udiv i32 %269, 4
  %271 = icmp ult i32 %i.4, %270
  br i1 %271, label %272, label %283

; <label>:272                                     ; preds = %268
  %273 = sext i32 %i.4 to i64
  %274 = load i32** @oprof, align 8
  %275 = getelementptr inbounds i32* %274, i64 %273
  %276 = load i32* %275, align 4
  %277 = call i32 @htonl(i32 %276) #9
  %278 = sext i32 %i.4 to i64
  %279 = load i32** @oprof, align 8
  %280 = getelementptr inbounds i32* %279, i64 %278
  store i32 %277, i32* %280, align 4
  br label %281

; <label>:281                                     ; preds = %272
  %282 = add nsw i32 %i.4, 1
  br label %268

; <label>:283                                     ; preds = %268
  %284 = load i32** @oprof, align 8
  %285 = bitcast i32* %284 to i8*
  %286 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 2
  %287 = load i32* %286, align 4
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds i8* %285, i64 %288
  %290 = getelementptr inbounds i8* %289, i64 8
  %291 = call i8* @strcpy(i8* %290, i8* getelementptr inbounds ([24 x i8]* @.str598, i32 0, i32 0)) #4
  %292 = load i32** @oprof, align 8
  %293 = bitcast i32* %292 to i8*
  %294 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 5
  %295 = load i32* %294, align 4
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i8* %293, i64 %296
  %298 = getelementptr inbounds i8* %297, i64 12
  %299 = load i32* @output_color, align 4
  %300 = sub nsw i32 %299, 1
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds [5 x i8*]* @convert_to_rgb.name, i32 0, i64 %301
  %303 = load i8** %302, align 8
  %304 = call i8* @strcpy(i8* %298, i8* %303) #4
  br label %305

; <label>:305                                     ; preds = %350, %283
  %i.5 = phi i32 [ 0, %283 ], [ %351, %350 ]
  %306 = icmp slt i32 %i.5, 3
  br i1 %306, label %307, label %352

; <label>:307                                     ; preds = %305
  br label %308

; <label>:308                                     ; preds = %347, %307
  %j.1 = phi i32 [ 0, %307 ], [ %348, %347 ]
  %309 = load i32* @colors, align 4
  %310 = icmp slt i32 %j.1, %309
  br i1 %310, label %311, label %349

; <label>:311                                     ; preds = %308
  %312 = sext i32 %j.1 to i64
  %313 = sext i32 %i.5 to i64
  %314 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 %313
  %315 = getelementptr inbounds [4 x float]* %314, i32 0, i64 %312
  store float 0.000000e+00, float* %315, align 4
  br label %316

; <label>:316                                     ; preds = %344, %311
  %k.1 = phi i32 [ 0, %311 ], [ %345, %344 ]
  %317 = icmp slt i32 %k.1, 3
  br i1 %317, label %318, label %346

; <label>:318                                     ; preds = %316
  %319 = sext i32 %k.1 to i64
  %320 = sext i32 %i.5 to i64
  %321 = load i32* @output_color, align 4
  %322 = sub nsw i32 %321, 1
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [5 x [3 x double]*]* @convert_to_rgb.out_rgb, i32 0, i64 %323
  %325 = load [3 x double]** %324, align 8
  %326 = getelementptr inbounds [3 x double]* %325, i64 %320
  %327 = getelementptr inbounds [3 x double]* %326, i32 0, i64 %319
  %328 = load double* %327, align 8
  %329 = sext i32 %j.1 to i64
  %330 = sext i32 %k.1 to i64
  %331 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %330
  %332 = getelementptr inbounds [4 x float]* %331, i32 0, i64 %329
  %333 = load float* %332, align 4
  %334 = fpext float %333 to double
  %335 = fmul double %328, %334
  %336 = sext i32 %j.1 to i64
  %337 = sext i32 %i.5 to i64
  %338 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 %337
  %339 = getelementptr inbounds [4 x float]* %338, i32 0, i64 %336
  %340 = load float* %339, align 4
  %341 = fpext float %340 to double
  %342 = fadd double %341, %335
  %343 = fptrunc double %342 to float
  store float %343, float* %339, align 4
  br label %344

; <label>:344                                     ; preds = %318
  %345 = add nsw i32 %k.1, 1
  br label %316

; <label>:346                                     ; preds = %316
  br label %347

; <label>:347                                     ; preds = %346
  %348 = add nsw i32 %j.1, 1
  br label %308

; <label>:349                                     ; preds = %308
  br label %350

; <label>:350                                     ; preds = %349
  %351 = add nsw i32 %i.5, 1
  br label %305

; <label>:352                                     ; preds = %305
  br label %353

; <label>:353                                     ; preds = %352, %94
  %354 = load i32* @verbose, align 4
  %355 = icmp ne i32 %354, 0
  br i1 %355, label %356, label %367

; <label>:356                                     ; preds = %353
  %357 = load %struct._IO_FILE** @stderr, align 8
  %358 = load i32* @raw_color, align 4
  %359 = icmp ne i32 %358, 0
  %360 = select i1 %359, i8* getelementptr inbounds ([24 x i8]* @.str599, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8]* @.str600, i32 0, i32 0)
  %361 = load i32* @output_color, align 4
  %362 = sub nsw i32 %361, 1
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds [5 x i8*]* @convert_to_rgb.name, i32 0, i64 %363
  %365 = load i8** %364, align 8
  %366 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %357, i8* %360, i8* %365)
  br label %367

; <label>:367                                     ; preds = %356, %353
  call void @llvm.memset.p0i8.i64(i8* bitcast ([4 x [8192 x i32]]* @histogram to i8*), i8 0, i64 131072, i32 16, i1 false)
  %368 = load [4 x i16]** @image, align 8
  %369 = getelementptr inbounds [4 x i16]* %368, i64 0
  %370 = getelementptr inbounds [4 x i16]* %369, i32 0, i32 0
  br label %371

; <label>:371                                     ; preds = %513, %367
  %img.0 = phi i16* [ %370, %367 ], [ %img.1, %513 ]
  %row.0 = phi i32 [ 0, %367 ], [ %514, %513 ]
  %372 = load i16* @height, align 2
  %373 = zext i16 %372 to i32
  %374 = icmp slt i32 %row.0, %373
  br i1 %374, label %375, label %515

; <label>:375                                     ; preds = %371
  br label %376

; <label>:376                                     ; preds = %509, %375
  %img.1 = phi i16* [ %img.0, %375 ], [ %511, %509 ]
  %col.0 = phi i32 [ 0, %375 ], [ %510, %509 ]
  %377 = load i16* @width, align 2
  %378 = zext i16 %377 to i32
  %379 = icmp slt i32 %col.0, %378
  br i1 %379, label %380, label %512

; <label>:380                                     ; preds = %376
  %381 = load i32* @raw_color, align 4
  %382 = icmp ne i32 %381, 0
  br i1 %382, label %473, label %383

; <label>:383                                     ; preds = %380
  %384 = getelementptr inbounds [3 x float]* %out, i32 0, i64 2
  store float 0.000000e+00, float* %384, align 4
  %385 = getelementptr inbounds [3 x float]* %out, i32 0, i64 1
  store float 0.000000e+00, float* %385, align 4
  %386 = getelementptr inbounds [3 x float]* %out, i32 0, i64 0
  store float 0.000000e+00, float* %386, align 4
  br label %387

; <label>:387                                     ; preds = %430, %383
  %c.0 = phi i32 [ 0, %383 ], [ %431, %430 ]
  %388 = load i32* @colors, align 4
  %389 = icmp slt i32 %c.0, %388
  br i1 %389, label %390, label %432

; <label>:390                                     ; preds = %387
  %391 = sext i32 %c.0 to i64
  %392 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 0
  %393 = getelementptr inbounds [4 x float]* %392, i32 0, i64 %391
  %394 = load float* %393, align 4
  %395 = sext i32 %c.0 to i64
  %396 = getelementptr inbounds i16* %img.1, i64 %395
  %397 = load i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = sitofp i32 %398 to float
  %400 = fmul float %394, %399
  %401 = getelementptr inbounds [3 x float]* %out, i32 0, i64 0
  %402 = load float* %401, align 4
  %403 = fadd float %402, %400
  store float %403, float* %401, align 4
  %404 = sext i32 %c.0 to i64
  %405 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 1
  %406 = getelementptr inbounds [4 x float]* %405, i32 0, i64 %404
  %407 = load float* %406, align 4
  %408 = sext i32 %c.0 to i64
  %409 = getelementptr inbounds i16* %img.1, i64 %408
  %410 = load i16* %409, align 2
  %411 = zext i16 %410 to i32
  %412 = sitofp i32 %411 to float
  %413 = fmul float %407, %412
  %414 = getelementptr inbounds [3 x float]* %out, i32 0, i64 1
  %415 = load float* %414, align 4
  %416 = fadd float %415, %413
  store float %416, float* %414, align 4
  %417 = sext i32 %c.0 to i64
  %418 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 2
  %419 = getelementptr inbounds [4 x float]* %418, i32 0, i64 %417
  %420 = load float* %419, align 4
  %421 = sext i32 %c.0 to i64
  %422 = getelementptr inbounds i16* %img.1, i64 %421
  %423 = load i16* %422, align 2
  %424 = zext i16 %423 to i32
  %425 = sitofp i32 %424 to float
  %426 = fmul float %420, %425
  %427 = getelementptr inbounds [3 x float]* %out, i32 0, i64 2
  %428 = load float* %427, align 4
  %429 = fadd float %428, %426
  store float %429, float* %427, align 4
  br label %430

; <label>:430                                     ; preds = %390
  %431 = add nsw i32 %c.0, 1
  br label %387

; <label>:432                                     ; preds = %387
  br label %433

; <label>:433                                     ; preds = %470, %432
  %c.1 = phi i32 [ 0, %432 ], [ %471, %470 ]
  %434 = icmp slt i32 %c.1, 3
  br i1 %434, label %435, label %472

; <label>:435                                     ; preds = %433
  %436 = sext i32 %c.1 to i64
  %437 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %436
  %438 = load float* %437, align 4
  %439 = fptosi float %438 to i32
  %440 = icmp slt i32 %439, 65535
  br i1 %440, label %441, label %446

; <label>:441                                     ; preds = %435
  %442 = sext i32 %c.1 to i64
  %443 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %442
  %444 = load float* %443, align 4
  %445 = fptosi float %444 to i32
  br label %447

; <label>:446                                     ; preds = %435
  br label %447

; <label>:447                                     ; preds = %446, %441
  %448 = phi i32 [ %445, %441 ], [ 65535, %446 ]
  %449 = icmp sgt i32 0, %448
  br i1 %449, label %450, label %451

; <label>:450                                     ; preds = %447
  br label %465

; <label>:451                                     ; preds = %447
  %452 = sext i32 %c.1 to i64
  %453 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %452
  %454 = load float* %453, align 4
  %455 = fptosi float %454 to i32
  %456 = icmp slt i32 %455, 65535
  br i1 %456, label %457, label %462

; <label>:457                                     ; preds = %451
  %458 = sext i32 %c.1 to i64
  %459 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %458
  %460 = load float* %459, align 4
  %461 = fptosi float %460 to i32
  br label %463

; <label>:462                                     ; preds = %451
  br label %463

; <label>:463                                     ; preds = %462, %457
  %464 = phi i32 [ %461, %457 ], [ 65535, %462 ]
  br label %465

; <label>:465                                     ; preds = %463, %450
  %466 = phi i32 [ 0, %450 ], [ %464, %463 ]
  %467 = trunc i32 %466 to i16
  %468 = sext i32 %c.1 to i64
  %469 = getelementptr inbounds i16* %img.1, i64 %468
  store i16 %467, i16* %469, align 2
  br label %470

; <label>:470                                     ; preds = %465
  %471 = add nsw i32 %c.1, 1
  br label %433

; <label>:472                                     ; preds = %433
  br label %490

; <label>:473                                     ; preds = %380
  %474 = load i32* @document_mode, align 4
  %475 = icmp ne i32 %474, 0
  br i1 %475, label %476, label %489

; <label>:476                                     ; preds = %473
  %477 = load i32* @filters, align 4
  %478 = shl i32 %row.0, 1
  %479 = and i32 %478, 14
  %480 = and i32 %col.0, 1
  %481 = add nsw i32 %479, %480
  %482 = shl i32 %481, 1
  %483 = lshr i32 %477, %482
  %484 = and i32 %483, 3
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds i16* %img.1, i64 %485
  %487 = load i16* %486, align 2
  %488 = getelementptr inbounds i16* %img.1, i64 0
  store i16 %487, i16* %488, align 2
  br label %489

; <label>:489                                     ; preds = %476, %473
  br label %490

; <label>:490                                     ; preds = %489, %472
  br label %491

; <label>:491                                     ; preds = %506, %490
  %c.2 = phi i32 [ 0, %490 ], [ %507, %506 ]
  %492 = load i32* @colors, align 4
  %493 = icmp slt i32 %c.2, %492
  br i1 %493, label %494, label %508

; <label>:494                                     ; preds = %491
  %495 = sext i32 %c.2 to i64
  %496 = getelementptr inbounds i16* %img.1, i64 %495
  %497 = load i16* %496, align 2
  %498 = zext i16 %497 to i32
  %499 = ashr i32 %498, 3
  %500 = sext i32 %499 to i64
  %501 = sext i32 %c.2 to i64
  %502 = getelementptr inbounds [4 x [8192 x i32]]* @histogram, i32 0, i64 %501
  %503 = getelementptr inbounds [8192 x i32]* %502, i32 0, i64 %500
  %504 = load i32* %503, align 4
  %505 = add nsw i32 %504, 1
  store i32 %505, i32* %503, align 4
  br label %506

; <label>:506                                     ; preds = %494
  %507 = add nsw i32 %c.2, 1
  br label %491

; <label>:508                                     ; preds = %491
  br label %509

; <label>:509                                     ; preds = %508
  %510 = add nsw i32 %col.0, 1
  %511 = getelementptr inbounds i16* %img.1, i64 4
  br label %376

; <label>:512                                     ; preds = %376
  br label %513

; <label>:513                                     ; preds = %512
  %514 = add nsw i32 %row.0, 1
  br label %371

; <label>:515                                     ; preds = %371
  %516 = load i32* @colors, align 4
  %517 = icmp eq i32 %516, 4
  br i1 %517, label %518, label %522

; <label>:518                                     ; preds = %515
  %519 = load i32* @output_color, align 4
  %520 = icmp ne i32 %519, 0
  br i1 %520, label %521, label %522

; <label>:521                                     ; preds = %518
  store i32 3, i32* @colors, align 4
  br label %522

; <label>:522                                     ; preds = %521, %518, %515
  %523 = load i32* @document_mode, align 4
  %524 = icmp ne i32 %523, 0
  br i1 %524, label %525, label %529

; <label>:525                                     ; preds = %522
  %526 = load i32* @filters, align 4
  %527 = icmp ne i32 %526, 0
  br i1 %527, label %528, label %529

; <label>:528                                     ; preds = %525
  store i32 1, i32* @colors, align 4
  br label %529

; <label>:529                                     ; preds = %528, %525, %522
  ret void
}

; Function Attrs: nounwind uwtable
define void @fuji_rotate() #0 {
  %1 = load i16* @fuji_width, align 2
  %2 = icmp ne i16 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  br label %152

; <label>:4                                       ; preds = %0
  %5 = load i32* @verbose, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %4
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([30 x i8]* @.str601, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %7, %4
  %11 = load i16* @fuji_width, align 2
  %12 = zext i16 %11 to i32
  %13 = sub nsw i32 %12, 1
  %14 = load i16* @shrink, align 2
  %15 = zext i16 %14 to i32
  %16 = add nsw i32 %13, %15
  %17 = load i16* @shrink, align 2
  %18 = zext i16 %17 to i32
  %19 = ashr i32 %16, %18
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* @fuji_width, align 2
  %21 = call double @sqrt(double 5.000000e-01) #4
  %22 = load i16* @fuji_width, align 2
  %23 = zext i16 %22 to i32
  %24 = sitofp i32 %23 to double
  %25 = fdiv double %24, %21
  %26 = fptoui double %25 to i16
  %27 = load i16* @height, align 2
  %28 = zext i16 %27 to i32
  %29 = load i16* @fuji_width, align 2
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %28, %30
  %32 = sitofp i32 %31 to double
  %33 = fdiv double %32, %21
  %34 = fptoui double %33 to i16
  %35 = zext i16 %26 to i32
  %36 = zext i16 %34 to i32
  %37 = mul nsw i32 %35, %36
  %38 = sext i32 %37 to i64
  %39 = call noalias i8* @calloc(i64 %38, i64 8) #4
  %40 = bitcast i8* %39 to [4 x i16]*
  %41 = bitcast [4 x i16]* %40 to i8*
  call void @merror(i8* %41, i8* getelementptr inbounds ([14 x i8]* @.str602, i32 0, i32 0))
  br label %42

; <label>:42                                      ; preds = %147, %10
  %row.0 = phi i32 [ 0, %10 ], [ %148, %147 ]
  %43 = zext i16 %34 to i32
  %44 = icmp slt i32 %row.0, %43
  br i1 %44, label %45, label %149

; <label>:45                                      ; preds = %42
  br label %46

; <label>:46                                      ; preds = %144, %45
  %col.0 = phi i32 [ 0, %45 ], [ %145, %144 ]
  %47 = zext i16 %26 to i32
  %48 = icmp slt i32 %col.0, %47
  br i1 %48, label %49, label %146

; <label>:49                                      ; preds = %46
  %50 = load i16* @fuji_width, align 2
  %51 = zext i16 %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = sub nsw i32 %row.0, %col.0
  %54 = sitofp i32 %53 to double
  %55 = fmul double %54, %21
  %56 = fadd double %52, %55
  %57 = fptrunc double %56 to float
  %58 = fptoui float %57 to i32
  %59 = add nsw i32 %row.0, %col.0
  %60 = sitofp i32 %59 to double
  %61 = fmul double %60, %21
  %62 = fptrunc double %61 to float
  %63 = fptoui float %62 to i32
  %64 = load i16* @height, align 2
  %65 = zext i16 %64 to i32
  %66 = sub nsw i32 %65, 2
  %67 = icmp ugt i32 %58, %66
  br i1 %67, label %73, label %68

; <label>:68                                      ; preds = %49
  %69 = load i16* @width, align 2
  %70 = zext i16 %69 to i32
  %71 = sub nsw i32 %70, 2
  %72 = icmp ugt i32 %63, %71
  br i1 %72, label %73, label %74

; <label>:73                                      ; preds = %68, %49
  br label %144

; <label>:74                                      ; preds = %68
  %75 = uitofp i32 %58 to float
  %76 = fsub float %57, %75
  %77 = uitofp i32 %63 to float
  %78 = fsub float %62, %77
  %79 = load [4 x i16]** @image, align 8
  %80 = load i16* @width, align 2
  %81 = zext i16 %80 to i32
  %82 = mul i32 %58, %81
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [4 x i16]* %79, i64 %83
  %85 = zext i32 %63 to i64
  %86 = getelementptr inbounds [4 x i16]* %84, i64 %85
  br label %87

; <label>:87                                      ; preds = %141, %74
  %i.0 = phi i32 [ 0, %74 ], [ %142, %141 ]
  %88 = load i32* @colors, align 4
  %89 = icmp slt i32 %i.0, %88
  br i1 %89, label %90, label %143

; <label>:90                                      ; preds = %87
  %91 = sext i32 %i.0 to i64
  %92 = getelementptr inbounds [4 x i16]* %86, i64 0
  %93 = getelementptr inbounds [4 x i16]* %92, i32 0, i64 %91
  %94 = load i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = sitofp i32 %95 to float
  %97 = fsub float 1.000000e+00, %78
  %98 = fmul float %96, %97
  %99 = sext i32 %i.0 to i64
  %100 = getelementptr inbounds [4 x i16]* %86, i64 1
  %101 = getelementptr inbounds [4 x i16]* %100, i32 0, i64 %99
  %102 = load i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = sitofp i32 %103 to float
  %105 = fmul float %104, %78
  %106 = fadd float %98, %105
  %107 = fsub float 1.000000e+00, %76
  %108 = fmul float %106, %107
  %109 = sext i32 %i.0 to i64
  %110 = load i16* @width, align 2
  %111 = zext i16 %110 to i64
  %112 = getelementptr inbounds [4 x i16]* %86, i64 %111
  %113 = getelementptr inbounds [4 x i16]* %112, i32 0, i64 %109
  %114 = load i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = sitofp i32 %115 to float
  %117 = fsub float 1.000000e+00, %78
  %118 = fmul float %116, %117
  %119 = sext i32 %i.0 to i64
  %120 = load i16* @width, align 2
  %121 = zext i16 %120 to i32
  %122 = add nsw i32 %121, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [4 x i16]* %86, i64 %123
  %125 = getelementptr inbounds [4 x i16]* %124, i32 0, i64 %119
  %126 = load i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = sitofp i32 %127 to float
  %129 = fmul float %128, %78
  %130 = fadd float %118, %129
  %131 = fmul float %130, %76
  %132 = fadd float %108, %131
  %133 = fptoui float %132 to i16
  %134 = sext i32 %i.0 to i64
  %135 = zext i16 %26 to i32
  %136 = mul nsw i32 %row.0, %135
  %137 = add nsw i32 %136, %col.0
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [4 x i16]* %40, i64 %138
  %140 = getelementptr inbounds [4 x i16]* %139, i32 0, i64 %134
  store i16 %133, i16* %140, align 2
  br label %141

; <label>:141                                     ; preds = %90
  %142 = add nsw i32 %i.0, 1
  br label %87

; <label>:143                                     ; preds = %87
  br label %144

; <label>:144                                     ; preds = %143, %73
  %145 = add nsw i32 %col.0, 1
  br label %46

; <label>:146                                     ; preds = %46
  br label %147

; <label>:147                                     ; preds = %146
  %148 = add nsw i32 %row.0, 1
  br label %42

; <label>:149                                     ; preds = %42
  %150 = load [4 x i16]** @image, align 8
  %151 = bitcast [4 x i16]* %150 to i8*
  call void @free(i8* %151) #4
  store i16 %26, i16* @width, align 2
  store i16 %34, i16* @height, align 2
  store [4 x i16]* %40, [4 x i16]** @image, align 8
  store i16 0, i16* @fuji_width, align 2
  br label %152

; <label>:152                                     ; preds = %149, %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @stretch() #0 {
  %1 = load double* @pixel_aspect, align 8
  %2 = fcmp oeq double %1, 1.000000e+00
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %191

; <label>:4                                       ; preds = %0
  %5 = load i32* @verbose, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %4
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([25 x i8]* @.str603, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %7, %4
  %11 = load double* @pixel_aspect, align 8
  %12 = fcmp olt double %11, 1.000000e+00
  br i1 %12, label %13, label %100

; <label>:13                                      ; preds = %10
  %14 = load i16* @height, align 2
  %15 = zext i16 %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = load double* @pixel_aspect, align 8
  %18 = fdiv double %16, %17
  %19 = fadd double %18, 5.000000e-01
  %20 = fptoui double %19 to i16
  %21 = load i16* @width, align 2
  %22 = zext i16 %21 to i32
  %23 = zext i16 %20 to i32
  %24 = mul nsw i32 %22, %23
  %25 = sext i32 %24 to i64
  %26 = call noalias i8* @calloc(i64 %25, i64 8) #4
  %27 = bitcast i8* %26 to [4 x i16]*
  %28 = bitcast [4 x i16]* %27 to i8*
  call void @merror(i8* %28, i8* getelementptr inbounds ([10 x i8]* @.str604, i32 0, i32 0))
  br label %29

; <label>:29                                      ; preds = %95, %13
  %rc.0 = phi double [ 0.000000e+00, %13 ], [ %98, %95 ]
  %row.0 = phi i32 [ 0, %13 ], [ %96, %95 ]
  %30 = zext i16 %20 to i32
  %31 = icmp slt i32 %row.0, %30
  br i1 %31, label %32, label %99

; <label>:32                                      ; preds = %29
  %33 = fptosi double %rc.0 to i32
  %34 = sitofp i32 %33 to double
  %35 = fsub double %rc.0, %34
  %36 = load i16* @width, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nsw i32 %33, %37
  %39 = sext i32 %38 to i64
  %40 = load [4 x i16]** @image, align 8
  %41 = getelementptr inbounds [4 x i16]* %40, i64 %39
  %42 = getelementptr inbounds [4 x i16]* %41, i32 0, i32 0
  %43 = add nsw i32 %33, 1
  %44 = load i16* @height, align 2
  %45 = zext i16 %44 to i32
  %46 = icmp slt i32 %43, %45
  br i1 %46, label %47, label %53

; <label>:47                                      ; preds = %32
  %48 = load i16* @width, align 2
  %49 = zext i16 %48 to i32
  %50 = mul nsw i32 %49, 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i16* %42, i64 %51
  br label %53

; <label>:53                                      ; preds = %47, %32
  %pix1.0 = phi i16* [ %52, %47 ], [ %42, %32 ]
  br label %54

; <label>:54                                      ; preds = %90, %53
  %col.0 = phi i32 [ 0, %53 ], [ %91, %90 ]
  %pix1.1 = phi i16* [ %pix1.0, %53 ], [ %93, %90 ]
  %pix0.0 = phi i16* [ %42, %53 ], [ %92, %90 ]
  %55 = load i16* @width, align 2
  %56 = zext i16 %55 to i32
  %57 = icmp slt i32 %col.0, %56
  br i1 %57, label %58, label %94

; <label>:58                                      ; preds = %54
  br label %59

; <label>:59                                      ; preds = %87, %58
  %c.0 = phi i32 [ 0, %58 ], [ %88, %87 ]
  %60 = load i32* @colors, align 4
  %61 = icmp slt i32 %c.0, %60
  br i1 %61, label %62, label %89

; <label>:62                                      ; preds = %59
  %63 = sext i32 %c.0 to i64
  %64 = getelementptr inbounds i16* %pix0.0, i64 %63
  %65 = load i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = sitofp i32 %66 to double
  %68 = fsub double 1.000000e+00, %35
  %69 = fmul double %67, %68
  %70 = sext i32 %c.0 to i64
  %71 = getelementptr inbounds i16* %pix1.1, i64 %70
  %72 = load i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = sitofp i32 %73 to double
  %75 = fmul double %74, %35
  %76 = fadd double %69, %75
  %77 = fadd double %76, 5.000000e-01
  %78 = fptoui double %77 to i16
  %79 = sext i32 %c.0 to i64
  %80 = load i16* @width, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nsw i32 %row.0, %81
  %83 = add nsw i32 %82, %col.0
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [4 x i16]* %27, i64 %84
  %86 = getelementptr inbounds [4 x i16]* %85, i32 0, i64 %79
  store i16 %78, i16* %86, align 2
  br label %87

; <label>:87                                      ; preds = %62
  %88 = add nsw i32 %c.0, 1
  br label %59

; <label>:89                                      ; preds = %59
  br label %90

; <label>:90                                      ; preds = %89
  %91 = add nsw i32 %col.0, 1
  %92 = getelementptr inbounds i16* %pix0.0, i64 4
  %93 = getelementptr inbounds i16* %pix1.1, i64 4
  br label %54

; <label>:94                                      ; preds = %54
  br label %95

; <label>:95                                      ; preds = %94
  %96 = add nsw i32 %row.0, 1
  %97 = load double* @pixel_aspect, align 8
  %98 = fadd double %rc.0, %97
  br label %29

; <label>:99                                      ; preds = %29
  store i16 %20, i16* @height, align 2
  br label %188

; <label>:100                                     ; preds = %10
  %101 = load i16* @width, align 2
  %102 = zext i16 %101 to i32
  %103 = sitofp i32 %102 to double
  %104 = load double* @pixel_aspect, align 8
  %105 = fmul double %103, %104
  %106 = fadd double %105, 5.000000e-01
  %107 = fptoui double %106 to i16
  %108 = load i16* @height, align 2
  %109 = zext i16 %108 to i32
  %110 = zext i16 %107 to i32
  %111 = mul nsw i32 %109, %110
  %112 = sext i32 %111 to i64
  %113 = call noalias i8* @calloc(i64 %112, i64 8) #4
  %114 = bitcast i8* %113 to [4 x i16]*
  %115 = bitcast [4 x i16]* %114 to i8*
  call void @merror(i8* %115, i8* getelementptr inbounds ([10 x i8]* @.str604, i32 0, i32 0))
  br label %116

; <label>:116                                     ; preds = %182, %100
  %rc.1 = phi double [ 0.000000e+00, %100 ], [ %186, %182 ]
  %col.1 = phi i32 [ 0, %100 ], [ %183, %182 ]
  %117 = zext i16 %107 to i32
  %118 = icmp slt i32 %col.1, %117
  br i1 %118, label %119, label %187

; <label>:119                                     ; preds = %116
  %120 = fptosi double %rc.1 to i32
  %121 = sitofp i32 %120 to double
  %122 = fsub double %rc.1, %121
  %123 = sext i32 %120 to i64
  %124 = load [4 x i16]** @image, align 8
  %125 = getelementptr inbounds [4 x i16]* %124, i64 %123
  %126 = getelementptr inbounds [4 x i16]* %125, i32 0, i32 0
  %127 = add nsw i32 %120, 1
  %128 = load i16* @width, align 2
  %129 = zext i16 %128 to i32
  %130 = icmp slt i32 %127, %129
  br i1 %130, label %131, label %133

; <label>:131                                     ; preds = %119
  %132 = getelementptr inbounds i16* %126, i64 4
  br label %133

; <label>:133                                     ; preds = %131, %119
  %pix1.2 = phi i16* [ %132, %131 ], [ %126, %119 ]
  br label %134

; <label>:134                                     ; preds = %169, %133
  %row.1 = phi i32 [ 0, %133 ], [ %170, %169 ]
  %pix1.3 = phi i16* [ %pix1.2, %133 ], [ %180, %169 ]
  %pix0.1 = phi i16* [ %126, %133 ], [ %175, %169 ]
  %135 = load i16* @height, align 2
  %136 = zext i16 %135 to i32
  %137 = icmp slt i32 %row.1, %136
  br i1 %137, label %138, label %181

; <label>:138                                     ; preds = %134
  br label %139

; <label>:139                                     ; preds = %166, %138
  %c.1 = phi i32 [ 0, %138 ], [ %167, %166 ]
  %140 = load i32* @colors, align 4
  %141 = icmp slt i32 %c.1, %140
  br i1 %141, label %142, label %168

; <label>:142                                     ; preds = %139
  %143 = sext i32 %c.1 to i64
  %144 = getelementptr inbounds i16* %pix0.1, i64 %143
  %145 = load i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = sitofp i32 %146 to double
  %148 = fsub double 1.000000e+00, %122
  %149 = fmul double %147, %148
  %150 = sext i32 %c.1 to i64
  %151 = getelementptr inbounds i16* %pix1.3, i64 %150
  %152 = load i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = sitofp i32 %153 to double
  %155 = fmul double %154, %122
  %156 = fadd double %149, %155
  %157 = fadd double %156, 5.000000e-01
  %158 = fptoui double %157 to i16
  %159 = sext i32 %c.1 to i64
  %160 = zext i16 %107 to i32
  %161 = mul nsw i32 %row.1, %160
  %162 = add nsw i32 %161, %col.1
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [4 x i16]* %114, i64 %163
  %165 = getelementptr inbounds [4 x i16]* %164, i32 0, i64 %159
  store i16 %158, i16* %165, align 2
  br label %166

; <label>:166                                     ; preds = %142
  %167 = add nsw i32 %c.1, 1
  br label %139

; <label>:168                                     ; preds = %139
  br label %169

; <label>:169                                     ; preds = %168
  %170 = add nsw i32 %row.1, 1
  %171 = load i16* @width, align 2
  %172 = zext i16 %171 to i32
  %173 = mul nsw i32 %172, 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i16* %pix0.1, i64 %174
  %176 = load i16* @width, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nsw i32 %177, 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i16* %pix1.3, i64 %179
  br label %134

; <label>:181                                     ; preds = %134
  br label %182

; <label>:182                                     ; preds = %181
  %183 = add nsw i32 %col.1, 1
  %184 = load double* @pixel_aspect, align 8
  %185 = fdiv double 1.000000e+00, %184
  %186 = fadd double %rc.1, %185
  br label %116

; <label>:187                                     ; preds = %116
  store i16 %107, i16* @width, align 2
  br label %188

; <label>:188                                     ; preds = %187, %99
  %img.0 = phi [4 x i16]* [ %27, %99 ], [ %114, %187 ]
  %189 = load [4 x i16]** @image, align 8
  %190 = bitcast [4 x i16]* %189 to i8*
  call void @free(i8* %190) #4
  store [4 x i16]* %img.0, [4 x i16]** @image, align 8
  br label %191

; <label>:191                                     ; preds = %188, %3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @flip_index(i32 %row, i32 %col) #0 {
  %1 = load i32* @flip, align 4
  %2 = and i32 %1, 4
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %8

; <label>:4                                       ; preds = %0
  %5 = xor i32 %row, %col
  %6 = xor i32 %col, %5
  %7 = xor i32 %5, %6
  br label %8

; <label>:8                                       ; preds = %4, %0
  %.01 = phi i32 [ %6, %4 ], [ %col, %0 ]
  %.0 = phi i32 [ %7, %4 ], [ %row, %0 ]
  %9 = load i32* @flip, align 4
  %10 = and i32 %9, 2
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %17

; <label>:12                                      ; preds = %8
  %13 = load i16* @iheight, align 2
  %14 = zext i16 %13 to i32
  %15 = sub nsw i32 %14, 1
  %16 = sub nsw i32 %15, %.0
  br label %17

; <label>:17                                      ; preds = %12, %8
  %.1 = phi i32 [ %16, %12 ], [ %.0, %8 ]
  %18 = load i32* @flip, align 4
  %19 = and i32 %18, 1
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %26

; <label>:21                                      ; preds = %17
  %22 = load i16* @iwidth, align 2
  %23 = zext i16 %22 to i32
  %24 = sub nsw i32 %23, 1
  %25 = sub nsw i32 %24, %.01
  br label %26

; <label>:26                                      ; preds = %21, %17
  %.12 = phi i32 [ %25, %21 ], [ %.01, %17 ]
  %27 = load i16* @iwidth, align 2
  %28 = zext i16 %27 to i32
  %29 = mul nsw i32 %.1, %28
  %30 = add nsw i32 %29, %.12
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define void @gamma_lut(i8* %lut) #0 {
  %1 = load i16* @width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %2, %4
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 1.000000e-02
  %8 = fptosi double %7 to i32
  %9 = load i16* @fuji_width, align 2
  %10 = icmp ne i16 %9, 0
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = sdiv i32 %8, 2
  br label %13

; <label>:13                                      ; preds = %11, %0
  %perc.0 = phi i32 [ %12, %11 ], [ %8, %0 ]
  %14 = load i32* @highlight, align 4
  %15 = and i32 %14, -3
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %20, label %17

; <label>:17                                      ; preds = %13
  %18 = load i32* @no_auto_bright, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %17, %13
  br label %21

; <label>:21                                      ; preds = %20, %17
  %perc.1 = phi i32 [ -1, %20 ], [ %perc.0, %17 ]
  br label %22

; <label>:22                                      ; preds = %45, %21
  %c.0 = phi i32 [ 0, %21 ], [ %46, %45 ]
  %white.0 = phi float [ 0.000000e+00, %21 ], [ %white.1, %45 ]
  %23 = load i32* @colors, align 4
  %24 = icmp slt i32 %c.0, %23
  br i1 %24, label %25, label %47

; <label>:25                                      ; preds = %22
  br label %26

; <label>:26                                      ; preds = %38, %25
  %total.0 = phi i32 [ 0, %25 ], [ %35, %38 ]
  %val.0 = phi i32 [ 8192, %25 ], [ %27, %38 ]
  %27 = add nsw i32 %val.0, -1
  %28 = icmp sgt i32 %27, 32
  br i1 %28, label %29, label %39

; <label>:29                                      ; preds = %26
  %30 = sext i32 %27 to i64
  %31 = sext i32 %c.0 to i64
  %32 = getelementptr inbounds [4 x [8192 x i32]]* @histogram, i32 0, i64 %31
  %33 = getelementptr inbounds [8192 x i32]* %32, i32 0, i64 %30
  %34 = load i32* %33, align 4
  %35 = add nsw i32 %total.0, %34
  %36 = icmp sgt i32 %35, %perc.1
  br i1 %36, label %37, label %38

; <label>:37                                      ; preds = %29
  br label %39

; <label>:38                                      ; preds = %29
  br label %26

; <label>:39                                      ; preds = %37, %26
  %40 = sitofp i32 %27 to float
  %41 = fcmp olt float %white.0, %40
  br i1 %41, label %42, label %44

; <label>:42                                      ; preds = %39
  %43 = sitofp i32 %27 to float
  br label %44

; <label>:44                                      ; preds = %42, %39
  %white.1 = phi float [ %43, %42 ], [ %white.0, %39 ]
  br label %45

; <label>:45                                      ; preds = %44
  %46 = add nsw i32 %c.0, 1
  br label %22

; <label>:47                                      ; preds = %22
  %48 = load float* @bright, align 4
  %49 = fdiv float 8.000000e+00, %48
  %50 = fmul float %white.0, %49
  br label %51

; <label>:51                                      ; preds = %89, %47
  %i.0 = phi i32 [ 0, %47 ], [ %90, %89 ]
  %52 = icmp slt i32 %i.0, 65536
  br i1 %52, label %53, label %91

; <label>:53                                      ; preds = %51
  %54 = sitofp i32 %i.0 to float
  %55 = fdiv float %54, %50
  %56 = load i32* @use_gamma, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %60, label %58

; <label>:58                                      ; preds = %53
  %59 = fpext float %55 to double
  br label %79

; <label>:60                                      ; preds = %53
  %61 = fpext float %55 to double
  %62 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %63 = fcmp ole double %61, %62
  br i1 %63, label %64, label %68

; <label>:64                                      ; preds = %60
  %65 = fpext float %55 to double
  %66 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %67 = fmul double %65, %66
  br label %77

; <label>:68                                      ; preds = %60
  %69 = fpext float %55 to double
  %70 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %71 = call double @pow(double %69, double %70) #4
  %72 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %73 = fadd double 1.000000e+00, %72
  %74 = fmul double %71, %73
  %75 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %76 = fsub double %74, %75
  br label %77

; <label>:77                                      ; preds = %68, %64
  %78 = phi double [ %67, %64 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %77, %58
  %80 = phi double [ %59, %58 ], [ %78, %77 ]
  %81 = fmul double 2.560000e+02, %80
  %82 = fptosi double %81 to i32
  %83 = icmp sgt i32 %82, 255
  br i1 %83, label %84, label %85

; <label>:84                                      ; preds = %79
  br label %85

; <label>:85                                      ; preds = %84, %79
  %val.1 = phi i32 [ 255, %84 ], [ %82, %79 ]
  %86 = trunc i32 %val.1 to i8
  %87 = sext i32 %i.0 to i64
  %88 = getelementptr inbounds i8* %lut, i64 %87
  store i8 %86, i8* %88, align 1
  br label %89

; <label>:89                                      ; preds = %85
  %90 = add nsw i32 %i.0, 1
  br label %51

; <label>:91                                      ; preds = %51
  ret void
}

; Function Attrs: nounwind uwtable
define void @tiff_set(i16* %ntag, i16 zeroext %tag, i16 zeroext %type, i32 %count, i32 %val) #0 {
  %1 = getelementptr inbounds i16* %ntag, i64 1
  %2 = bitcast i16* %1 to %struct.tiff_tag*
  %3 = load i16* %ntag, align 2
  %4 = add i16 %3, 1
  store i16 %4, i16* %ntag, align 2
  %5 = zext i16 %3 to i32
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.tiff_tag* %2, i64 %6
  %8 = getelementptr inbounds %struct.tiff_tag* %7, i32 0, i32 0
  store i16 %tag, i16* %8, align 2
  %9 = getelementptr inbounds %struct.tiff_tag* %7, i32 0, i32 1
  store i16 %type, i16* %9, align 2
  %10 = getelementptr inbounds %struct.tiff_tag* %7, i32 0, i32 2
  store i32 %count, i32* %10, align 4
  %11 = zext i16 %type to i32
  %12 = icmp slt i32 %11, 3
  br i1 %12, label %13, label %29

; <label>:13                                      ; preds = %0
  %14 = icmp sle i32 %count, 4
  br i1 %14, label %15, label %29

; <label>:15                                      ; preds = %13
  br label %16

; <label>:16                                      ; preds = %26, %15
  %c.0 = phi i32 [ 0, %15 ], [ %27, %26 ]
  %17 = icmp slt i32 %c.0, 4
  br i1 %17, label %18, label %28

; <label>:18                                      ; preds = %16
  %19 = shl i32 %c.0, 3
  %20 = ashr i32 %val, %19
  %21 = trunc i32 %20 to i8
  %22 = sext i32 %c.0 to i64
  %23 = getelementptr inbounds %struct.tiff_tag* %7, i32 0, i32 3
  %24 = bitcast %union.anon.5* %23 to [4 x i8]*
  %25 = getelementptr inbounds [4 x i8]* %24, i32 0, i64 %22
  store i8 %21, i8* %25, align 1
  br label %26

; <label>:26                                      ; preds = %18
  %27 = add nsw i32 %c.0, 1
  br label %16

; <label>:28                                      ; preds = %16
  br label %52

; <label>:29                                      ; preds = %13, %0
  %30 = zext i16 %type to i32
  %31 = icmp eq i32 %30, 3
  br i1 %31, label %32, label %48

; <label>:32                                      ; preds = %29
  %33 = icmp sle i32 %count, 2
  br i1 %33, label %34, label %48

; <label>:34                                      ; preds = %32
  br label %35

; <label>:35                                      ; preds = %45, %34
  %c.1 = phi i32 [ 0, %34 ], [ %46, %45 ]
  %36 = icmp slt i32 %c.1, 2
  br i1 %36, label %37, label %47

; <label>:37                                      ; preds = %35
  %38 = shl i32 %c.1, 4
  %39 = ashr i32 %val, %38
  %40 = trunc i32 %39 to i16
  %41 = sext i32 %c.1 to i64
  %42 = getelementptr inbounds %struct.tiff_tag* %7, i32 0, i32 3
  %43 = bitcast %union.anon.5* %42 to [2 x i16]*
  %44 = getelementptr inbounds [2 x i16]* %43, i32 0, i64 %41
  store i16 %40, i16* %44, align 2
  br label %45

; <label>:45                                      ; preds = %37
  %46 = add nsw i32 %c.1, 1
  br label %35

; <label>:47                                      ; preds = %35
  br label %51

; <label>:48                                      ; preds = %32, %29
  %49 = getelementptr inbounds %struct.tiff_tag* %7, i32 0, i32 3
  %50 = bitcast %union.anon.5* %49 to i32*
  store i32 %val, i32* %50, align 4
  br label %51

; <label>:51                                      ; preds = %48, %47
  br label %52

; <label>:52                                      ; preds = %51, %28
  ret void
}

; Function Attrs: nounwind uwtable
define void @tiff_head(%struct.tiff_hdr* %th, i32 %full) #0 {
  %1 = bitcast %struct.tiff_hdr* %th to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 1376, i32 4, i1 false)
  %2 = call i32 @htonl(i32 1296910665) #9
  %3 = lshr i32 %2, 16
  %4 = trunc i32 %3 to i16
  %5 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 0
  store i16 %4, i16* %5, align 2
  %6 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 1
  store i16 42, i16* %6, align 2
  %7 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 2
  store i32 10, i32* %7, align 4
  %8 = icmp ne i32 %full, 0
  br i1 %8, label %9, label %57

; <label>:9                                       ; preds = %0
  %10 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  call void @tiff_set(i16* %10, i16 zeroext 254, i16 zeroext 4, i32 1, i32 0)
  %11 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %12 = load i16* @width, align 2
  %13 = zext i16 %12 to i32
  call void @tiff_set(i16* %11, i16 zeroext 256, i16 zeroext 4, i32 1, i32 %13)
  %14 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %15 = load i16* @height, align 2
  %16 = zext i16 %15 to i32
  call void @tiff_set(i16* %14, i16 zeroext 257, i16 zeroext 4, i32 1, i32 %16)
  %17 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %18 = load i32* @colors, align 4
  %19 = load i32* @output_bps, align 4
  call void @tiff_set(i16* %17, i16 zeroext 258, i16 zeroext 3, i32 %18, i32 %19)
  %20 = load i32* @colors, align 4
  %21 = icmp sgt i32 %20, 2
  br i1 %21, label %22, label %39

; <label>:22                                      ; preds = %9
  %23 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 13
  %24 = bitcast [4 x i16]* %23 to i8*
  %25 = bitcast %struct.tiff_hdr* %th to i8*
  %26 = ptrtoint i8* %24 to i64
  %27 = ptrtoint i8* %25 to i64
  %28 = sub i64 %26, %27
  %29 = trunc i64 %28 to i32
  %30 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %31 = load i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = sub nsw i32 %32, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 5
  %36 = getelementptr inbounds [23 x %struct.tiff_tag]* %35, i32 0, i64 %34
  %37 = getelementptr inbounds %struct.tiff_tag* %36, i32 0, i32 3
  %38 = bitcast %union.anon.5* %37 to i32*
  store i32 %29, i32* %38, align 4
  br label %39

; <label>:39                                      ; preds = %22, %9
  br label %40

; <label>:40                                      ; preds = %48, %39
  %c.0 = phi i32 [ 0, %39 ], [ %49, %48 ]
  %41 = icmp slt i32 %c.0, 4
  br i1 %41, label %42, label %50

; <label>:42                                      ; preds = %40
  %43 = load i32* @output_bps, align 4
  %44 = trunc i32 %43 to i16
  %45 = sext i32 %c.0 to i64
  %46 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 13
  %47 = getelementptr inbounds [4 x i16]* %46, i32 0, i64 %45
  store i16 %44, i16* %47, align 2
  br label %48

; <label>:48                                      ; preds = %42
  %49 = add nsw i32 %c.0, 1
  br label %40

; <label>:50                                      ; preds = %40
  %51 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  call void @tiff_set(i16* %51, i16 zeroext 259, i16 zeroext 3, i32 1, i32 1)
  %52 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %53 = load i32* @colors, align 4
  %54 = icmp sgt i32 %53, 1
  %55 = zext i1 %54 to i32
  %56 = add nsw i32 1, %55
  call void @tiff_set(i16* %52, i16 zeroext 262, i16 zeroext 3, i32 1, i32 %56)
  br label %57

; <label>:57                                      ; preds = %50, %0
  %58 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %59 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 16
  %60 = bitcast [512 x i8]* %59 to i8*
  %61 = bitcast %struct.tiff_hdr* %th to i8*
  %62 = ptrtoint i8* %60 to i64
  %63 = ptrtoint i8* %61 to i64
  %64 = sub i64 %62, %63
  %65 = trunc i64 %64 to i32
  call void @tiff_set(i16* %58, i16 zeroext 270, i16 zeroext 2, i32 512, i32 %65)
  %66 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %67 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 17
  %68 = bitcast [64 x i8]* %67 to i8*
  %69 = bitcast %struct.tiff_hdr* %th to i8*
  %70 = ptrtoint i8* %68 to i64
  %71 = ptrtoint i8* %69 to i64
  %72 = sub i64 %70, %71
  %73 = trunc i64 %72 to i32
  call void @tiff_set(i16* %66, i16 zeroext 271, i16 zeroext 2, i32 64, i32 %73)
  %74 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %75 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 18
  %76 = bitcast [64 x i8]* %75 to i8*
  %77 = bitcast %struct.tiff_hdr* %th to i8*
  %78 = ptrtoint i8* %76 to i64
  %79 = ptrtoint i8* %77 to i64
  %80 = sub i64 %78, %79
  %81 = trunc i64 %80 to i32
  call void @tiff_set(i16* %74, i16 zeroext 272, i16 zeroext 2, i32 64, i32 %81)
  %82 = icmp ne i32 %full, 0
  br i1 %82, label %83, label %112

; <label>:83                                      ; preds = %57
  %84 = load i32** @oprof, align 8
  %85 = icmp ne i32* %84, null
  br i1 %85, label %86, label %91

; <label>:86                                      ; preds = %83
  %87 = load i32** @oprof, align 8
  %88 = getelementptr inbounds i32* %87, i64 0
  %89 = load i32* %88, align 4
  %90 = call i32 @ntohl(i32 %89) #9
  br label %91

; <label>:91                                      ; preds = %86, %83
  %psize.0 = phi i32 [ %90, %86 ], [ 0, %83 ]
  %92 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %93 = sext i32 %psize.0 to i64
  %94 = add i64 1376, %93
  %95 = trunc i64 %94 to i32
  call void @tiff_set(i16* %92, i16 zeroext 273, i16 zeroext 4, i32 1, i32 %95)
  %96 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %97 = load i32* @colors, align 4
  call void @tiff_set(i16* %96, i16 zeroext 277, i16 zeroext 3, i32 1, i32 %97)
  %98 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %99 = load i16* @height, align 2
  %100 = zext i16 %99 to i32
  call void @tiff_set(i16* %98, i16 zeroext 278, i16 zeroext 4, i32 1, i32 %100)
  %101 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %102 = load i16* @height, align 2
  %103 = zext i16 %102 to i32
  %104 = load i16* @width, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nsw i32 %103, %105
  %107 = load i32* @colors, align 4
  %108 = mul nsw i32 %106, %107
  %109 = load i32* @output_bps, align 4
  %110 = mul nsw i32 %108, %109
  %111 = sdiv i32 %110, 8
  call void @tiff_set(i16* %101, i16 zeroext 279, i16 zeroext 4, i32 1, i32 %111)
  br label %120

; <label>:112                                     ; preds = %57
  %113 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %114 = load i32* @flip, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [9 x i8]* @.str605, i32 0, i64 %115
  %117 = load i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = sub nsw i32 %118, 48
  call void @tiff_set(i16* %113, i16 zeroext 274, i16 zeroext 3, i32 1, i32 %119)
  br label %120

; <label>:120                                     ; preds = %112, %91
  %psize.1 = phi i32 [ %psize.0, %91 ], [ 0, %112 ]
  %121 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %122 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %123 = getelementptr inbounds [10 x i32]* %122, i32 0, i64 0
  %124 = bitcast i32* %123 to i8*
  %125 = bitcast %struct.tiff_hdr* %th to i8*
  %126 = ptrtoint i8* %124 to i64
  %127 = ptrtoint i8* %125 to i64
  %128 = sub i64 %126, %127
  %129 = trunc i64 %128 to i32
  call void @tiff_set(i16* %121, i16 zeroext 282, i16 zeroext 5, i32 1, i32 %129)
  %130 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %131 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %132 = getelementptr inbounds [10 x i32]* %131, i32 0, i64 2
  %133 = bitcast i32* %132 to i8*
  %134 = bitcast %struct.tiff_hdr* %th to i8*
  %135 = ptrtoint i8* %133 to i64
  %136 = ptrtoint i8* %134 to i64
  %137 = sub i64 %135, %136
  %138 = trunc i64 %137 to i32
  call void @tiff_set(i16* %130, i16 zeroext 283, i16 zeroext 5, i32 1, i32 %138)
  %139 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  call void @tiff_set(i16* %139, i16 zeroext 284, i16 zeroext 3, i32 1, i32 1)
  %140 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  call void @tiff_set(i16* %140, i16 zeroext 296, i16 zeroext 3, i32 1, i32 2)
  %141 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %142 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 19
  %143 = bitcast [32 x i8]* %142 to i8*
  %144 = bitcast %struct.tiff_hdr* %th to i8*
  %145 = ptrtoint i8* %143 to i64
  %146 = ptrtoint i8* %144 to i64
  %147 = sub i64 %145, %146
  %148 = trunc i64 %147 to i32
  call void @tiff_set(i16* %141, i16 zeroext 305, i16 zeroext 2, i32 32, i32 %148)
  %149 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %150 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 20
  %151 = bitcast [20 x i8]* %150 to i8*
  %152 = bitcast %struct.tiff_hdr* %th to i8*
  %153 = ptrtoint i8* %151 to i64
  %154 = ptrtoint i8* %152 to i64
  %155 = sub i64 %153, %154
  %156 = trunc i64 %155 to i32
  call void @tiff_set(i16* %149, i16 zeroext 306, i16 zeroext 2, i32 20, i32 %156)
  %157 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %158 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 21
  %159 = bitcast [64 x i8]* %158 to i8*
  %160 = bitcast %struct.tiff_hdr* %th to i8*
  %161 = ptrtoint i8* %159 to i64
  %162 = ptrtoint i8* %160 to i64
  %163 = sub i64 %161, %162
  %164 = trunc i64 %163 to i32
  call void @tiff_set(i16* %157, i16 zeroext 315, i16 zeroext 2, i32 64, i32 %164)
  %165 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %166 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 8
  %167 = bitcast i16* %166 to i8*
  %168 = bitcast %struct.tiff_hdr* %th to i8*
  %169 = ptrtoint i8* %167 to i64
  %170 = ptrtoint i8* %168 to i64
  %171 = sub i64 %169, %170
  %172 = trunc i64 %171 to i32
  call void @tiff_set(i16* %165, i16 zeroext -30871, i16 zeroext 4, i32 1, i32 %172)
  %173 = icmp ne i32 %psize.1, 0
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %120
  %175 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  call void @tiff_set(i16* %175, i16 zeroext -30861, i16 zeroext 7, i32 %psize.1, i32 1376)
  br label %176

; <label>:176                                     ; preds = %174, %120
  %177 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 8
  %178 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %179 = getelementptr inbounds [10 x i32]* %178, i32 0, i64 4
  %180 = bitcast i32* %179 to i8*
  %181 = bitcast %struct.tiff_hdr* %th to i8*
  %182 = ptrtoint i8* %180 to i64
  %183 = ptrtoint i8* %181 to i64
  %184 = sub i64 %182, %183
  %185 = trunc i64 %184 to i32
  call void @tiff_set(i16* %177, i16 zeroext -32102, i16 zeroext 5, i32 1, i32 %185)
  %186 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 8
  %187 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %188 = getelementptr inbounds [10 x i32]* %187, i32 0, i64 6
  %189 = bitcast i32* %188 to i8*
  %190 = bitcast %struct.tiff_hdr* %th to i8*
  %191 = ptrtoint i8* %189 to i64
  %192 = ptrtoint i8* %190 to i64
  %193 = sub i64 %191, %192
  %194 = trunc i64 %193 to i32
  call void @tiff_set(i16* %186, i16 zeroext -32099, i16 zeroext 5, i32 1, i32 %194)
  %195 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 8
  %196 = load float* @iso_speed, align 4
  %197 = fptosi float %196 to i32
  call void @tiff_set(i16* %195, i16 zeroext -30681, i16 zeroext 3, i32 1, i32 %197)
  %198 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 8
  %199 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %200 = getelementptr inbounds [10 x i32]* %199, i32 0, i64 8
  %201 = bitcast i32* %200 to i8*
  %202 = bitcast %struct.tiff_hdr* %th to i8*
  %203 = ptrtoint i8* %201 to i64
  %204 = ptrtoint i8* %202 to i64
  %205 = sub i64 %203, %204
  %206 = trunc i64 %205 to i32
  call void @tiff_set(i16* %198, i16 zeroext -28150, i16 zeroext 5, i32 1, i32 %206)
  %207 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 1), align 4
  %208 = icmp ne i32 %207, 0
  br i1 %208, label %209, label %281

; <label>:209                                     ; preds = %176
  %210 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 4
  %211 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %212 = bitcast i16* %211 to i8*
  %213 = bitcast %struct.tiff_hdr* %th to i8*
  %214 = ptrtoint i8* %212 to i64
  %215 = ptrtoint i8* %213 to i64
  %216 = sub i64 %214, %215
  %217 = trunc i64 %216 to i32
  call void @tiff_set(i16* %210, i16 zeroext -30683, i16 zeroext 4, i32 1, i32 %217)
  %218 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  call void @tiff_set(i16* %218, i16 zeroext 0, i16 zeroext 1, i32 4, i32 514)
  %219 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %220 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 29), align 4
  call void @tiff_set(i16* %219, i16 zeroext 1, i16 zeroext 2, i32 2, i32 %220)
  %221 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %222 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %223 = getelementptr inbounds [26 x i32]* %222, i32 0, i64 0
  %224 = bitcast i32* %223 to i8*
  %225 = bitcast %struct.tiff_hdr* %th to i8*
  %226 = ptrtoint i8* %224 to i64
  %227 = ptrtoint i8* %225 to i64
  %228 = sub i64 %226, %227
  %229 = trunc i64 %228 to i32
  call void @tiff_set(i16* %221, i16 zeroext 2, i16 zeroext 5, i32 3, i32 %229)
  %230 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %231 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 30), align 4
  call void @tiff_set(i16* %230, i16 zeroext 3, i16 zeroext 2, i32 2, i32 %231)
  %232 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %233 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %234 = getelementptr inbounds [26 x i32]* %233, i32 0, i64 6
  %235 = bitcast i32* %234 to i8*
  %236 = bitcast %struct.tiff_hdr* %th to i8*
  %237 = ptrtoint i8* %235 to i64
  %238 = ptrtoint i8* %236 to i64
  %239 = sub i64 %237, %238
  %240 = trunc i64 %239 to i32
  call void @tiff_set(i16* %232, i16 zeroext 4, i16 zeroext 5, i32 3, i32 %240)
  %241 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %242 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 31), align 4
  call void @tiff_set(i16* %241, i16 zeroext 5, i16 zeroext 1, i32 1, i32 %242)
  %243 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %244 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %245 = getelementptr inbounds [26 x i32]* %244, i32 0, i64 18
  %246 = bitcast i32* %245 to i8*
  %247 = bitcast %struct.tiff_hdr* %th to i8*
  %248 = ptrtoint i8* %246 to i64
  %249 = ptrtoint i8* %247 to i64
  %250 = sub i64 %248, %249
  %251 = trunc i64 %250 to i32
  call void @tiff_set(i16* %243, i16 zeroext 6, i16 zeroext 5, i32 1, i32 %251)
  %252 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %253 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %254 = getelementptr inbounds [26 x i32]* %253, i32 0, i64 12
  %255 = bitcast i32* %254 to i8*
  %256 = bitcast %struct.tiff_hdr* %th to i8*
  %257 = ptrtoint i8* %255 to i64
  %258 = ptrtoint i8* %256 to i64
  %259 = sub i64 %257, %258
  %260 = trunc i64 %259 to i32
  call void @tiff_set(i16* %252, i16 zeroext 7, i16 zeroext 5, i32 3, i32 %260)
  %261 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %262 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %263 = getelementptr inbounds [26 x i32]* %262, i32 0, i64 20
  %264 = bitcast i32* %263 to i8*
  %265 = bitcast %struct.tiff_hdr* %th to i8*
  %266 = ptrtoint i8* %264 to i64
  %267 = ptrtoint i8* %265 to i64
  %268 = sub i64 %266, %267
  %269 = trunc i64 %268 to i32
  call void @tiff_set(i16* %261, i16 zeroext 18, i16 zeroext 2, i32 12, i32 %269)
  %270 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 11
  %271 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %272 = getelementptr inbounds [26 x i32]* %271, i32 0, i64 23
  %273 = bitcast i32* %272 to i8*
  %274 = bitcast %struct.tiff_hdr* %th to i8*
  %275 = ptrtoint i8* %273 to i64
  %276 = ptrtoint i8* %274 to i64
  %277 = sub i64 %275, %276
  %278 = trunc i64 %277 to i32
  call void @tiff_set(i16* %270, i16 zeroext 29, i16 zeroext 2, i32 12, i32 %278)
  %279 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 15
  %280 = bitcast [26 x i32]* %279 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %280, i8* bitcast ([32 x i32]* @gpsdata to i8*), i64 104, i32 4, i1 false)
  br label %281

; <label>:281                                     ; preds = %209, %176
  %282 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %283 = getelementptr inbounds [10 x i32]* %282, i32 0, i64 2
  store i32 300, i32* %283, align 4
  %284 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %285 = getelementptr inbounds [10 x i32]* %284, i32 0, i64 0
  store i32 300, i32* %285, align 4
  %286 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %287 = getelementptr inbounds [10 x i32]* %286, i32 0, i64 3
  store i32 1, i32* %287, align 4
  %288 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %289 = getelementptr inbounds [10 x i32]* %288, i32 0, i64 1
  store i32 1, i32* %289, align 4
  br label %290

; <label>:290                                     ; preds = %297, %281
  %c.1 = phi i32 [ 0, %281 ], [ %298, %297 ]
  %291 = icmp slt i32 %c.1, 6
  br i1 %291, label %292, label %299

; <label>:292                                     ; preds = %290
  %293 = add nsw i32 4, %c.1
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %296 = getelementptr inbounds [10 x i32]* %295, i32 0, i64 %294
  store i32 1000000, i32* %296, align 4
  br label %297

; <label>:297                                     ; preds = %292
  %298 = add nsw i32 %c.1, 1
  br label %290

; <label>:299                                     ; preds = %290
  %300 = load float* @shutter, align 4
  %301 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %302 = getelementptr inbounds [10 x i32]* %301, i32 0, i64 4
  %303 = load i32* %302, align 4
  %304 = sitofp i32 %303 to float
  %305 = fmul float %304, %300
  %306 = fptosi float %305 to i32
  store i32 %306, i32* %302, align 4
  %307 = load float* @aperture, align 4
  %308 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %309 = getelementptr inbounds [10 x i32]* %308, i32 0, i64 6
  %310 = load i32* %309, align 4
  %311 = sitofp i32 %310 to float
  %312 = fmul float %311, %307
  %313 = fptosi float %312 to i32
  store i32 %313, i32* %309, align 4
  %314 = load float* @focal_len, align 4
  %315 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 14
  %316 = getelementptr inbounds [10 x i32]* %315, i32 0, i64 8
  %317 = load i32* %316, align 4
  %318 = sitofp i32 %317 to float
  %319 = fmul float %318, %314
  %320 = fptosi float %319 to i32
  store i32 %320, i32* %316, align 4
  %321 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 16
  %322 = getelementptr inbounds [512 x i8]* %321, i32 0, i32 0
  %323 = call i8* @strncpy(i8* %322, i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i32 0), i64 512) #4
  %324 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 17
  %325 = getelementptr inbounds [64 x i8]* %324, i32 0, i32 0
  %326 = call i8* @strncpy(i8* %325, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 64) #4
  %327 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 18
  %328 = getelementptr inbounds [64 x i8]* %327, i32 0, i32 0
  %329 = call i8* @strncpy(i8* %328, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 64) #4
  %330 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 19
  %331 = getelementptr inbounds [32 x i8]* %330, i32 0, i32 0
  %332 = call i8* @strcpy(i8* %331, i8* getelementptr inbounds ([12 x i8]* @.str606, i32 0, i32 0)) #4
  %333 = call %struct.tm* @gmtime(i64* @timestamp) #4
  %334 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 20
  %335 = getelementptr inbounds [20 x i8]* %334, i32 0, i32 0
  %336 = getelementptr inbounds %struct.tm* %333, i32 0, i32 5
  %337 = load i32* %336, align 4
  %338 = add nsw i32 %337, 1900
  %339 = getelementptr inbounds %struct.tm* %333, i32 0, i32 4
  %340 = load i32* %339, align 4
  %341 = add nsw i32 %340, 1
  %342 = getelementptr inbounds %struct.tm* %333, i32 0, i32 3
  %343 = load i32* %342, align 4
  %344 = getelementptr inbounds %struct.tm* %333, i32 0, i32 2
  %345 = load i32* %344, align 4
  %346 = getelementptr inbounds %struct.tm* %333, i32 0, i32 1
  %347 = load i32* %346, align 4
  %348 = getelementptr inbounds %struct.tm* %333, i32 0, i32 0
  %349 = load i32* %348, align 4
  %350 = call i32 (i8*, i8*, ...)* @sprintf(i8* %335, i8* getelementptr inbounds ([30 x i8]* @.str607, i32 0, i32 0), i32 %338, i32 %341, i32 %343, i32 %345, i32 %347, i32 %349) #4
  %351 = getelementptr inbounds %struct.tiff_hdr* %th, i32 0, i32 21
  %352 = getelementptr inbounds [64 x i8]* %351, i32 0, i32 0
  %353 = call i8* @strncpy(i8* %352, i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64) #4
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @ntohl(i32) #5

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #3

; Function Attrs: nounwind
declare %struct.tm* @gmtime(i64*) #3

; Function Attrs: nounwind readnone
declare zeroext i16 @htons(i16 zeroext) #5

; Function Attrs: nounwind uwtable
define void @write_ppm_tiff(%struct._IO_FILE* %ofp) #0 {
  %th = alloca %struct.tiff_hdr, align 4
  %lut = alloca [65536 x i8], align 16
  %1 = load i16* @height, align 2
  store i16 %1, i16* @iheight, align 2
  %2 = load i16* @width, align 2
  store i16 %2, i16* @iwidth, align 2
  %3 = load i32* @flip, align 4
  %4 = and i32 %3, 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %24

; <label>:6                                       ; preds = %0
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = load i16* @height, align 2
  %10 = zext i16 %9 to i32
  %11 = xor i32 %10, %8
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* @height, align 2
  %13 = load i16* @height, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16* @width, align 2
  %16 = zext i16 %15 to i32
  %17 = xor i32 %16, %14
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* @width, align 2
  %19 = zext i16 %18 to i32
  %20 = load i16* @height, align 2
  %21 = zext i16 %20 to i32
  %22 = xor i32 %21, %19
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* @height, align 2
  br label %24

; <label>:24                                      ; preds = %6, %0
  %25 = load i16* @width, align 2
  %26 = zext i16 %25 to i64
  %27 = load i32* @colors, align 4
  %28 = load i32* @output_bps, align 4
  %29 = mul nsw i32 %27, %28
  %30 = sdiv i32 %29, 8
  %31 = sext i32 %30 to i64
  %32 = call noalias i8* @calloc(i64 %26, i64 %31) #4
  %33 = bitcast i8* %32 to i16*
  call void @merror(i8* %32, i8* getelementptr inbounds ([17 x i8]* @.str610, i32 0, i32 0))
  %34 = load i32* @output_tiff, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %51

; <label>:36                                      ; preds = %24
  call void @tiff_head(%struct.tiff_hdr* %th, i32 1)
  %37 = bitcast %struct.tiff_hdr* %th to i8*
  %38 = call i64 @fwrite(i8* %37, i64 1376, i64 1, %struct._IO_FILE* %ofp)
  %39 = load i32** @oprof, align 8
  %40 = icmp ne i32* %39, null
  br i1 %40, label %41, label %50

; <label>:41                                      ; preds = %36
  %42 = load i32** @oprof, align 8
  %43 = bitcast i32* %42 to i8*
  %44 = load i32** @oprof, align 8
  %45 = getelementptr inbounds i32* %44, i64 0
  %46 = load i32* %45, align 4
  %47 = call i32 @ntohl(i32 %46) #9
  %48 = zext i32 %47 to i64
  %49 = call i64 @fwrite(i8* %43, i64 %48, i64 1, %struct._IO_FILE* %ofp)
  br label %50

; <label>:50                                      ; preds = %41, %36
  br label %77

; <label>:51                                      ; preds = %24
  %52 = load i32* @colors, align 4
  %53 = icmp sgt i32 %52, 3
  br i1 %53, label %54, label %64

; <label>:54                                      ; preds = %51
  %55 = load i16* @width, align 2
  %56 = zext i16 %55 to i32
  %57 = load i16* @height, align 2
  %58 = zext i16 %57 to i32
  %59 = load i32* @colors, align 4
  %60 = load i32* @output_bps, align 4
  %61 = shl i32 1, %60
  %62 = sub nsw i32 %61, 1
  %63 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %ofp, i8* getelementptr inbounds ([61 x i8]* @.str611, i32 0, i32 0), i32 %56, i32 %58, i32 %59, i32 %62, i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0))
  br label %76

; <label>:64                                      ; preds = %51
  %65 = load i32* @colors, align 4
  %66 = sdiv i32 %65, 2
  %67 = add nsw i32 %66, 5
  %68 = load i16* @width, align 2
  %69 = zext i16 %68 to i32
  %70 = load i16* @height, align 2
  %71 = zext i16 %70 to i32
  %72 = load i32* @output_bps, align 4
  %73 = shl i32 1, %72
  %74 = sub nsw i32 %73, 1
  %75 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %ofp, i8* getelementptr inbounds ([14 x i8]* @.str612, i32 0, i32 0), i32 %67, i32 %69, i32 %71, i32 %74)
  br label %76

; <label>:76                                      ; preds = %64, %54
  br label %77

; <label>:77                                      ; preds = %76, %50
  %78 = load i32* @output_bps, align 4
  %79 = icmp eq i32 %78, 8
  br i1 %79, label %80, label %82

; <label>:80                                      ; preds = %77
  %81 = getelementptr inbounds [65536 x i8]* %lut, i32 0, i32 0
  call void @gamma_lut(i8* %81)
  br label %82

; <label>:82                                      ; preds = %80, %77
  %83 = call i32 @flip_index(i32 0, i32 0)
  %84 = call i32 @flip_index(i32 0, i32 1)
  %85 = sub nsw i32 %84, %83
  %86 = call i32 @flip_index(i32 1, i32 0)
  %87 = load i16* @width, align 2
  %88 = zext i16 %87 to i32
  %89 = call i32 @flip_index(i32 0, i32 %88)
  %90 = sub nsw i32 %86, %89
  br label %91

; <label>:91                                      ; preds = %176, %82
  %row.0 = phi i32 [ 0, %82 ], [ %177, %176 ]
  %soff.0 = phi i32 [ %83, %82 ], [ %178, %176 ]
  %92 = load i16* @height, align 2
  %93 = zext i16 %92 to i32
  %94 = icmp slt i32 %row.0, %93
  br i1 %94, label %95, label %179

; <label>:95                                      ; preds = %91
  br label %96

; <label>:96                                      ; preds = %145, %95
  %col.0 = phi i32 [ 0, %95 ], [ %146, %145 ]
  %soff.1 = phi i32 [ %soff.0, %95 ], [ %147, %145 ]
  %97 = load i16* @width, align 2
  %98 = zext i16 %97 to i32
  %99 = icmp slt i32 %col.0, %98
  br i1 %99, label %100, label %148

; <label>:100                                     ; preds = %96
  %101 = load i32* @output_bps, align 4
  %102 = icmp eq i32 %101, 8
  br i1 %102, label %103, label %125

; <label>:103                                     ; preds = %100
  br label %104

; <label>:104                                     ; preds = %122, %103
  %c.0 = phi i32 [ 0, %103 ], [ %123, %122 ]
  %105 = load i32* @colors, align 4
  %106 = icmp slt i32 %c.0, %105
  br i1 %106, label %107, label %124

; <label>:107                                     ; preds = %104
  %108 = sext i32 %c.0 to i64
  %109 = sext i32 %soff.1 to i64
  %110 = load [4 x i16]** @image, align 8
  %111 = getelementptr inbounds [4 x i16]* %110, i64 %109
  %112 = getelementptr inbounds [4 x i16]* %111, i32 0, i64 %108
  %113 = load i16* %112, align 2
  %114 = zext i16 %113 to i64
  %115 = getelementptr inbounds [65536 x i8]* %lut, i32 0, i64 %114
  %116 = load i8* %115, align 1
  %117 = load i32* @colors, align 4
  %118 = mul nsw i32 %col.0, %117
  %119 = add nsw i32 %118, %c.0
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8* %32, i64 %120
  store i8 %116, i8* %121, align 1
  br label %122

; <label>:122                                     ; preds = %107
  %123 = add nsw i32 %c.0, 1
  br label %104

; <label>:124                                     ; preds = %104
  br label %144

; <label>:125                                     ; preds = %100
  br label %126

; <label>:126                                     ; preds = %141, %125
  %c.1 = phi i32 [ 0, %125 ], [ %142, %141 ]
  %127 = load i32* @colors, align 4
  %128 = icmp slt i32 %c.1, %127
  br i1 %128, label %129, label %143

; <label>:129                                     ; preds = %126
  %130 = sext i32 %c.1 to i64
  %131 = sext i32 %soff.1 to i64
  %132 = load [4 x i16]** @image, align 8
  %133 = getelementptr inbounds [4 x i16]* %132, i64 %131
  %134 = getelementptr inbounds [4 x i16]* %133, i32 0, i64 %130
  %135 = load i16* %134, align 2
  %136 = load i32* @colors, align 4
  %137 = mul nsw i32 %col.0, %136
  %138 = add nsw i32 %137, %c.1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16* %33, i64 %139
  store i16 %135, i16* %140, align 2
  br label %141

; <label>:141                                     ; preds = %129
  %142 = add nsw i32 %c.1, 1
  br label %126

; <label>:143                                     ; preds = %126
  br label %144

; <label>:144                                     ; preds = %143, %124
  br label %145

; <label>:145                                     ; preds = %144
  %146 = add nsw i32 %col.0, 1
  %147 = add nsw i32 %soff.1, %85
  br label %96

; <label>:148                                     ; preds = %96
  %149 = load i32* @output_bps, align 4
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %151, label %167

; <label>:151                                     ; preds = %148
  %152 = load i32* @output_tiff, align 4
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %167, label %154

; <label>:154                                     ; preds = %151
  %155 = call zeroext i16 @htons(i16 zeroext 21930) #9
  %156 = zext i16 %155 to i32
  %157 = icmp ne i32 %156, 21930
  br i1 %157, label %158, label %167

; <label>:158                                     ; preds = %154
  %159 = bitcast i16* %33 to i8*
  %160 = bitcast i16* %33 to i8*
  %161 = load i16* @width, align 2
  %162 = zext i16 %161 to i32
  %163 = load i32* @colors, align 4
  %164 = mul nsw i32 %162, %163
  %165 = mul nsw i32 %164, 2
  %166 = sext i32 %165 to i64
  call void @swab(i8* %159, i8* %160, i64 %166) #4
  br label %167

; <label>:167                                     ; preds = %158, %154, %151, %148
  %168 = load i32* @colors, align 4
  %169 = load i32* @output_bps, align 4
  %170 = mul nsw i32 %168, %169
  %171 = sdiv i32 %170, 8
  %172 = sext i32 %171 to i64
  %173 = load i16* @width, align 2
  %174 = zext i16 %173 to i64
  %175 = call i64 @fwrite(i8* %32, i64 %172, i64 %174, %struct._IO_FILE* %ofp)
  br label %176

; <label>:176                                     ; preds = %167
  %177 = add nsw i32 %row.0, 1
  %178 = add nsw i32 %soff.1, %90
  br label %91

; <label>:179                                     ; preds = %91
  call void @free(i8* %32) #4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
  %ut = alloca %struct.utimbuf, align 8
  %1 = call i32 @putenv(i8* getelementptr inbounds ([7 x i8]* @.str613, i32 0, i32 0)) #4
  %2 = icmp eq i32 %argc, 1
  br i1 %2, label %3, label %43

; <label>:3                                       ; preds = %0
  %4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str614, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str615, i32 0, i32 0))
  %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([43 x i8]* @.str616, i32 0, i32 0))
  %6 = getelementptr inbounds i8** %argv, i64 0
  %7 = load i8** %6, align 8
  %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str617, i32 0, i32 0), i8* %7)
  %9 = call i32 @puts(i8* getelementptr inbounds ([33 x i8]* @.str618, i32 0, i32 0))
  %10 = call i32 @puts(i8* getelementptr inbounds ([46 x i8]* @.str619, i32 0, i32 0))
  %11 = call i32 @puts(i8* getelementptr inbounds ([43 x i8]* @.str620, i32 0, i32 0))
  %12 = call i32 @puts(i8* getelementptr inbounds ([47 x i8]* @.str621, i32 0, i32 0))
  %13 = call i32 @puts(i8* getelementptr inbounds ([43 x i8]* @.str622, i32 0, i32 0))
  %14 = call i32 @puts(i8* getelementptr inbounds ([48 x i8]* @.str623, i32 0, i32 0))
  %15 = call i32 @puts(i8* getelementptr inbounds ([48 x i8]* @.str624, i32 0, i32 0))
  %16 = call i32 @puts(i8* getelementptr inbounds ([52 x i8]* @.str625, i32 0, i32 0))
  %17 = call i32 @puts(i8* getelementptr inbounds ([50 x i8]* @.str626, i32 0, i32 0))
  %18 = call i32 @puts(i8* getelementptr inbounds ([38 x i8]* @.str627, i32 0, i32 0))
  %19 = call i32 @puts(i8* getelementptr inbounds ([49 x i8]* @.str628, i32 0, i32 0))
  %20 = call i32 @puts(i8* getelementptr inbounds ([39 x i8]* @.str629, i32 0, i32 0))
  %21 = call i32 @puts(i8* getelementptr inbounds ([50 x i8]* @.str630, i32 0, i32 0))
  %22 = call i32 @puts(i8* getelementptr inbounds ([47 x i8]* @.str631, i32 0, i32 0))
  %23 = call i32 @puts(i8* getelementptr inbounds ([33 x i8]* @.str632, i32 0, i32 0))
  %24 = call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @.str633, i32 0, i32 0))
  %25 = call i32 @puts(i8* getelementptr inbounds ([46 x i8]* @.str634, i32 0, i32 0))
  %26 = call i32 @puts(i8* getelementptr inbounds ([65 x i8]* @.str635, i32 0, i32 0))
  %27 = call i32 @puts(i8* getelementptr inbounds ([54 x i8]* @.str636, i32 0, i32 0))
  %28 = call i32 @puts(i8* getelementptr inbounds ([63 x i8]* @.str637, i32 0, i32 0))
  %29 = call i32 @puts(i8* getelementptr inbounds ([53 x i8]* @.str638, i32 0, i32 0))
  %30 = call i32 @puts(i8* getelementptr inbounds ([54 x i8]* @.str639, i32 0, i32 0))
  %31 = call i32 @puts(i8* getelementptr inbounds ([45 x i8]* @.str640, i32 0, i32 0))
  %32 = call i32 @puts(i8* getelementptr inbounds ([49 x i8]* @.str641, i32 0, i32 0))
  %33 = call i32 @puts(i8* getelementptr inbounds ([44 x i8]* @.str642, i32 0, i32 0))
  %34 = call i32 @puts(i8* getelementptr inbounds ([55 x i8]* @.str643, i32 0, i32 0))
  %35 = call i32 @puts(i8* getelementptr inbounds ([40 x i8]* @.str644, i32 0, i32 0))
  %36 = call i32 @puts(i8* getelementptr inbounds ([58 x i8]* @.str645, i32 0, i32 0))
  %37 = call i32 @puts(i8* getelementptr inbounds ([42 x i8]* @.str646, i32 0, i32 0))
  %38 = call i32 @puts(i8* getelementptr inbounds ([51 x i8]* @.str647, i32 0, i32 0))
  %39 = call i32 @puts(i8* getelementptr inbounds ([57 x i8]* @.str648, i32 0, i32 0))
  %40 = call i32 @puts(i8* getelementptr inbounds ([58 x i8]* @.str649, i32 0, i32 0))
  %41 = call i32 @puts(i8* getelementptr inbounds ([36 x i8]* @.str650, i32 0, i32 0))
  %42 = call i32 @puts(i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0))
  br label %987

; <label>:43                                      ; preds = %0
  %44 = sext i32 %argc to i64
  %45 = getelementptr inbounds i8** %argv, i64 %44
  store i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0), i8** %45, align 8
  br label %46

; <label>:46                                      ; preds = %285, %43
  %bpfile.0 = phi i8* [ null, %43 ], [ %bpfile.1, %285 ]
  %dark_frame.0 = phi i8* [ null, %43 ], [ %dark_frame.1, %285 ]
  %write_to_stdout.0 = phi i32 [ 0, %43 ], [ %write_to_stdout.1, %285 ]
  %use_fuji_rotate.0 = phi i32 [ 1, %43 ], [ %use_fuji_rotate.1, %285 ]
  %user_flip.0 = phi i32 [ -1, %43 ], [ %user_flip.1, %285 ]
  %user_sat.0 = phi i32 [ -1, %43 ], [ %user_sat.1, %285 ]
  %user_black.0 = phi i32 [ -1, %43 ], [ %user_black.1, %285 ]
  %user_qual.0 = phi i32 [ -1, %43 ], [ %user_qual.1, %285 ]
  %identify_only.0 = phi i32 [ 0, %43 ], [ %identify_only.1, %285 ]
  %thumbnail_only.0 = phi i32 [ 0, %43 ], [ %thumbnail_only.1, %285 ]
  %timestamp_only.0 = phi i32 [ 0, %43 ], [ %timestamp_only.1, %285 ]
  %arg.0 = phi i32 [ 1, %43 ], [ %arg.5, %285 ]
  %47 = sext i32 %arg.0 to i64
  %48 = getelementptr inbounds i8** %argv, i64 %47
  %49 = load i8** %48, align 8
  %50 = getelementptr inbounds i8* %49, i64 0
  %51 = load i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = sub nsw i32 %52, 2
  %54 = or i32 %53, 2
  %55 = icmp eq i32 %54, 43
  br i1 %55, label %56, label %286

; <label>:56                                      ; preds = %46
  %57 = add nsw i32 %arg.0, 1
  %58 = sext i32 %arg.0 to i64
  %59 = getelementptr inbounds i8** %argv, i64 %58
  %60 = load i8** %59, align 8
  %61 = getelementptr inbounds i8* %60, i64 1
  %62 = load i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = call i8* @strchr(i8* getelementptr inbounds ([13 x i8]* @.str651, i32 0, i32 0), i32 %63) #10
  %65 = icmp ne i8* %64, null
  br i1 %65, label %66, label %100

; <label>:66                                      ; preds = %56
  br label %67

; <label>:67                                      ; preds = %97, %66
  %i.0 = phi i32 [ 0, %66 ], [ %98, %97 ]
  %68 = ptrtoint i8* %64 to i64
  %69 = ptrtoint i8* getelementptr inbounds ([13 x i8]* @.str651, i32 0, i32 0) to i64
  %70 = sub i64 %68, %69
  %71 = getelementptr inbounds [13 x i8]* @.str652, i32 0, i64 %70
  %72 = load i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = sub nsw i32 %73, 48
  %75 = icmp slt i32 %i.0, %74
  br i1 %75, label %76, label %99

; <label>:76                                      ; preds = %67
  %77 = add nsw i32 %57, %i.0
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8** %argv, i64 %78
  %80 = load i8** %79, align 8
  %81 = getelementptr inbounds i8* %80, i64 0
  %82 = load i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = sext i32 %83 to i64
  %85 = call i16** @__ctype_b_loc() #9
  %86 = load i16** %85, align 8
  %87 = getelementptr inbounds i16* %86, i64 %84
  %88 = load i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = and i32 %89, 2048
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %96, label %92

; <label>:92                                      ; preds = %76
  %93 = load %struct._IO_FILE** @stderr, align 8
  %94 = sext i8 %62 to i32
  %95 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([31 x i8]* @.str653, i32 0, i32 0), i32 %94)
  br label %987

; <label>:96                                      ; preds = %76
  br label %97

; <label>:97                                      ; preds = %96
  %98 = add nsw i32 %i.0, 1
  br label %67

; <label>:99                                      ; preds = %67
  br label %100

; <label>:100                                     ; preds = %99, %56
  %101 = sext i8 %62 to i32
  switch i32 %101, label %281 [
    i32 110, label %102
    i32 98, label %109
    i32 114, label %116
    i32 67, label %131
    i32 103, label %144
    i32 107, label %156
    i32 83, label %162
    i32 116, label %168
    i32 113, label %174
    i32 109, label %180
    i32 72, label %186
    i32 115, label %192
    i32 111, label %206
    i32 80, label %235
    i32 75, label %240
    i32 122, label %245
    i32 101, label %246
    i32 105, label %247
    i32 99, label %248
    i32 118, label %249
    i32 104, label %250
    i32 102, label %251
    i32 65, label %252
    i32 97, label %266
    i32 119, label %267
    i32 77, label %268
    i32 68, label %272
    i32 100, label %272
    i32 106, label %277
    i32 87, label %278
    i32 84, label %279
    i32 52, label %280
  ]

; <label>:102                                     ; preds = %100
  %103 = add nsw i32 %57, 1
  %104 = sext i32 %57 to i64
  %105 = getelementptr inbounds i8** %argv, i64 %104
  %106 = load i8** %105, align 8
  %107 = call double @atof(i8* %106) #10
  %108 = fptrunc double %107 to float
  store float %108, float* @threshold, align 4
  br label %285

; <label>:109                                     ; preds = %100
  %110 = add nsw i32 %57, 1
  %111 = sext i32 %57 to i64
  %112 = getelementptr inbounds i8** %argv, i64 %111
  %113 = load i8** %112, align 8
  %114 = call double @atof(i8* %113) #10
  %115 = fptrunc double %114 to float
  store float %115, float* @bright, align 4
  br label %285

; <label>:116                                     ; preds = %100
  br label %117

; <label>:117                                     ; preds = %128, %116
  %c.0 = phi i32 [ 0, %116 ], [ %129, %128 ]
  %arg.1 = phi i32 [ %57, %116 ], [ %120, %128 ]
  %118 = icmp slt i32 %c.0, 4
  br i1 %118, label %119, label %130

; <label>:119                                     ; preds = %117
  %120 = add nsw i32 %arg.1, 1
  %121 = sext i32 %arg.1 to i64
  %122 = getelementptr inbounds i8** %argv, i64 %121
  %123 = load i8** %122, align 8
  %124 = call double @atof(i8* %123) #10
  %125 = fptrunc double %124 to float
  %126 = sext i32 %c.0 to i64
  %127 = getelementptr inbounds [4 x float]* @user_mul, i32 0, i64 %126
  store float %125, float* %127, align 4
  br label %128

; <label>:128                                     ; preds = %119
  %129 = add nsw i32 %c.0, 1
  br label %117

; <label>:130                                     ; preds = %117
  br label %285

; <label>:131                                     ; preds = %100
  %132 = add nsw i32 %57, 1
  %133 = sext i32 %57 to i64
  %134 = getelementptr inbounds i8** %argv, i64 %133
  %135 = load i8** %134, align 8
  %136 = call double @atof(i8* %135) #10
  %137 = fdiv double 1.000000e+00, %136
  store double %137, double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 0), align 8
  %138 = add nsw i32 %132, 1
  %139 = sext i32 %132 to i64
  %140 = getelementptr inbounds i8** %argv, i64 %139
  %141 = load i8** %140, align 8
  %142 = call double @atof(i8* %141) #10
  %143 = fdiv double 1.000000e+00, %142
  store double %143, double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 2), align 8
  br label %285

; <label>:144                                     ; preds = %100
  %145 = add nsw i32 %57, 1
  %146 = sext i32 %57 to i64
  %147 = getelementptr inbounds i8** %argv, i64 %146
  %148 = load i8** %147, align 8
  %149 = call double @atof(i8* %148) #10
  %150 = fdiv double 1.000000e+00, %149
  store double %150, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %151 = add nsw i32 %145, 1
  %152 = sext i32 %145 to i64
  %153 = getelementptr inbounds i8** %argv, i64 %152
  %154 = load i8** %153, align 8
  %155 = call double @atof(i8* %154) #10
  store double %155, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  br label %285

; <label>:156                                     ; preds = %100
  %157 = add nsw i32 %57, 1
  %158 = sext i32 %57 to i64
  %159 = getelementptr inbounds i8** %argv, i64 %158
  %160 = load i8** %159, align 8
  %161 = call i32 @atoi(i8* %160) #10
  br label %285

; <label>:162                                     ; preds = %100
  %163 = add nsw i32 %57, 1
  %164 = sext i32 %57 to i64
  %165 = getelementptr inbounds i8** %argv, i64 %164
  %166 = load i8** %165, align 8
  %167 = call i32 @atoi(i8* %166) #10
  br label %285

; <label>:168                                     ; preds = %100
  %169 = add nsw i32 %57, 1
  %170 = sext i32 %57 to i64
  %171 = getelementptr inbounds i8** %argv, i64 %170
  %172 = load i8** %171, align 8
  %173 = call i32 @atoi(i8* %172) #10
  br label %285

; <label>:174                                     ; preds = %100
  %175 = add nsw i32 %57, 1
  %176 = sext i32 %57 to i64
  %177 = getelementptr inbounds i8** %argv, i64 %176
  %178 = load i8** %177, align 8
  %179 = call i32 @atoi(i8* %178) #10
  br label %285

; <label>:180                                     ; preds = %100
  %181 = add nsw i32 %57, 1
  %182 = sext i32 %57 to i64
  %183 = getelementptr inbounds i8** %argv, i64 %182
  %184 = load i8** %183, align 8
  %185 = call i32 @atoi(i8* %184) #10
  store i32 %185, i32* @med_passes, align 4
  br label %285

; <label>:186                                     ; preds = %100
  %187 = add nsw i32 %57, 1
  %188 = sext i32 %57 to i64
  %189 = getelementptr inbounds i8** %argv, i64 %188
  %190 = load i8** %189, align 8
  %191 = call i32 @atoi(i8* %190) #10
  store i32 %191, i32* @highlight, align 4
  br label %285

; <label>:192                                     ; preds = %100
  %193 = sext i32 %57 to i64
  %194 = getelementptr inbounds i8** %argv, i64 %193
  %195 = load i8** %194, align 8
  %196 = call i32 @atoi(i8* %195) #10
  %197 = call i32 @abs(i32 %196) #9
  store i32 %197, i32* @shot_select, align 4
  %198 = add nsw i32 %57, 1
  %199 = sext i32 %57 to i64
  %200 = getelementptr inbounds i8** %argv, i64 %199
  %201 = load i8** %200, align 8
  %202 = call i32 @strcmp(i8* %201, i8* getelementptr inbounds ([4 x i8]* @.str654, i32 0, i32 0)) #10
  %203 = icmp ne i32 %202, 0
  %204 = xor i1 %203, true
  %205 = zext i1 %204 to i32
  store i32 %205, i32* @multi_out, align 4
  br label %285

; <label>:206                                     ; preds = %100
  %207 = sext i32 %57 to i64
  %208 = getelementptr inbounds i8** %argv, i64 %207
  %209 = load i8** %208, align 8
  %210 = getelementptr inbounds i8* %209, i64 0
  %211 = load i8* %210, align 1
  %212 = sext i8 %211 to i32
  %213 = sext i32 %212 to i64
  %214 = call i16** @__ctype_b_loc() #9
  %215 = load i16** %214, align 8
  %216 = getelementptr inbounds i16* %215, i64 %213
  %217 = load i16* %216, align 2
  %218 = zext i16 %217 to i32
  %219 = and i32 %218, 2048
  %220 = icmp ne i32 %219, 0
  br i1 %220, label %221, label %234

; <label>:221                                     ; preds = %206
  %222 = sext i32 %57 to i64
  %223 = getelementptr inbounds i8** %argv, i64 %222
  %224 = load i8** %223, align 8
  %225 = getelementptr inbounds i8* %224, i64 1
  %226 = load i8* %225, align 1
  %227 = icmp ne i8 %226, 0
  br i1 %227, label %234, label %228

; <label>:228                                     ; preds = %221
  %229 = add nsw i32 %57, 1
  %230 = sext i32 %57 to i64
  %231 = getelementptr inbounds i8** %argv, i64 %230
  %232 = load i8** %231, align 8
  %233 = call i32 @atoi(i8* %232) #10
  store i32 %233, i32* @output_color, align 4
  br label %234

; <label>:234                                     ; preds = %228, %221, %206
  %arg.2 = phi i32 [ %57, %221 ], [ %229, %228 ], [ %57, %206 ]
  br label %285

; <label>:235                                     ; preds = %100
  %236 = add nsw i32 %57, 1
  %237 = sext i32 %57 to i64
  %238 = getelementptr inbounds i8** %argv, i64 %237
  %239 = load i8** %238, align 8
  br label %285

; <label>:240                                     ; preds = %100
  %241 = add nsw i32 %57, 1
  %242 = sext i32 %57 to i64
  %243 = getelementptr inbounds i8** %argv, i64 %242
  %244 = load i8** %243, align 8
  br label %285

; <label>:245                                     ; preds = %100
  br label %285

; <label>:246                                     ; preds = %100
  br label %285

; <label>:247                                     ; preds = %100
  br label %285

; <label>:248                                     ; preds = %100
  br label %285

; <label>:249                                     ; preds = %100
  store i32 1, i32* @verbose, align 4
  br label %285

; <label>:250                                     ; preds = %100
  store i32 1, i32* @half_size, align 4
  br label %251

; <label>:251                                     ; preds = %250, %100
  store i32 1, i32* @four_color_rgb, align 4
  br label %285

; <label>:252                                     ; preds = %100
  br label %253

; <label>:253                                     ; preds = %263, %252
  %c.1 = phi i32 [ 0, %252 ], [ %264, %263 ]
  %arg.3 = phi i32 [ %57, %252 ], [ %256, %263 ]
  %254 = icmp slt i32 %c.1, 4
  br i1 %254, label %255, label %265

; <label>:255                                     ; preds = %253
  %256 = add nsw i32 %arg.3, 1
  %257 = sext i32 %arg.3 to i64
  %258 = getelementptr inbounds i8** %argv, i64 %257
  %259 = load i8** %258, align 8
  %260 = call i32 @atoi(i8* %259) #10
  %261 = sext i32 %c.1 to i64
  %262 = getelementptr inbounds [4 x i32]* @greybox, i32 0, i64 %261
  store i32 %260, i32* %262, align 4
  br label %263

; <label>:263                                     ; preds = %255
  %264 = add nsw i32 %c.1, 1
  br label %253

; <label>:265                                     ; preds = %253
  br label %266

; <label>:266                                     ; preds = %265, %100
  %arg.4 = phi i32 [ %57, %100 ], [ %arg.3, %265 ]
  store i32 1, i32* @use_auto_wb, align 4
  br label %285

; <label>:267                                     ; preds = %100
  store i32 1, i32* @use_camera_wb, align 4
  br label %285

; <label>:268                                     ; preds = %100
  %269 = sext i8 %51 to i32
  %270 = icmp eq i32 %269, 43
  %271 = zext i1 %270 to i32
  store i32 %271, i32* @use_camera_matrix, align 4
  br label %285

; <label>:272                                     ; preds = %100, %100
  %273 = sext i8 %62 to i32
  %274 = icmp eq i32 %273, 68
  %275 = zext i1 %274 to i32
  %276 = add nsw i32 1, %275
  store i32 %276, i32* @document_mode, align 4
  br label %277

; <label>:277                                     ; preds = %272, %100
  br label %285

; <label>:278                                     ; preds = %100
  store i32 1, i32* @no_auto_bright, align 4
  br label %285

; <label>:279                                     ; preds = %100
  store i32 1, i32* @output_tiff, align 4
  br label %285

; <label>:280                                     ; preds = %100
  store i32 16, i32* @output_bps, align 4
  br label %285

; <label>:281                                     ; preds = %100
  %282 = load %struct._IO_FILE** @stderr, align 8
  %283 = sext i8 %62 to i32
  %284 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %282, i8* getelementptr inbounds ([23 x i8]* @.str655, i32 0, i32 0), i32 %283)
  br label %987

; <label>:285                                     ; preds = %280, %279, %278, %277, %268, %267, %266, %251, %249, %248, %247, %246, %245, %240, %235, %234, %192, %186, %180, %174, %168, %162, %156, %144, %131, %130, %109, %102
  %bpfile.1 = phi i8* [ %bpfile.0, %280 ], [ %bpfile.0, %279 ], [ %bpfile.0, %278 ], [ %bpfile.0, %277 ], [ %bpfile.0, %268 ], [ %bpfile.0, %267 ], [ %bpfile.0, %266 ], [ %bpfile.0, %251 ], [ %bpfile.0, %249 ], [ %bpfile.0, %248 ], [ %bpfile.0, %247 ], [ %bpfile.0, %246 ], [ %bpfile.0, %245 ], [ %bpfile.0, %240 ], [ %239, %235 ], [ %bpfile.0, %234 ], [ %bpfile.0, %192 ], [ %bpfile.0, %186 ], [ %bpfile.0, %180 ], [ %bpfile.0, %174 ], [ %bpfile.0, %168 ], [ %bpfile.0, %162 ], [ %bpfile.0, %156 ], [ %bpfile.0, %144 ], [ %bpfile.0, %131 ], [ %bpfile.0, %130 ], [ %bpfile.0, %109 ], [ %bpfile.0, %102 ]
  %dark_frame.1 = phi i8* [ %dark_frame.0, %280 ], [ %dark_frame.0, %279 ], [ %dark_frame.0, %278 ], [ %dark_frame.0, %277 ], [ %dark_frame.0, %268 ], [ %dark_frame.0, %267 ], [ %dark_frame.0, %266 ], [ %dark_frame.0, %251 ], [ %dark_frame.0, %249 ], [ %dark_frame.0, %248 ], [ %dark_frame.0, %247 ], [ %dark_frame.0, %246 ], [ %dark_frame.0, %245 ], [ %244, %240 ], [ %dark_frame.0, %235 ], [ %dark_frame.0, %234 ], [ %dark_frame.0, %192 ], [ %dark_frame.0, %186 ], [ %dark_frame.0, %180 ], [ %dark_frame.0, %174 ], [ %dark_frame.0, %168 ], [ %dark_frame.0, %162 ], [ %dark_frame.0, %156 ], [ %dark_frame.0, %144 ], [ %dark_frame.0, %131 ], [ %dark_frame.0, %130 ], [ %dark_frame.0, %109 ], [ %dark_frame.0, %102 ]
  %write_to_stdout.1 = phi i32 [ %write_to_stdout.0, %280 ], [ %write_to_stdout.0, %279 ], [ %write_to_stdout.0, %278 ], [ %write_to_stdout.0, %277 ], [ %write_to_stdout.0, %268 ], [ %write_to_stdout.0, %267 ], [ %write_to_stdout.0, %266 ], [ %write_to_stdout.0, %251 ], [ %write_to_stdout.0, %249 ], [ 1, %248 ], [ %write_to_stdout.0, %247 ], [ %write_to_stdout.0, %246 ], [ %write_to_stdout.0, %245 ], [ %write_to_stdout.0, %240 ], [ %write_to_stdout.0, %235 ], [ %write_to_stdout.0, %234 ], [ %write_to_stdout.0, %192 ], [ %write_to_stdout.0, %186 ], [ %write_to_stdout.0, %180 ], [ %write_to_stdout.0, %174 ], [ %write_to_stdout.0, %168 ], [ %write_to_stdout.0, %162 ], [ %write_to_stdout.0, %156 ], [ %write_to_stdout.0, %144 ], [ %write_to_stdout.0, %131 ], [ %write_to_stdout.0, %130 ], [ %write_to_stdout.0, %109 ], [ %write_to_stdout.0, %102 ]
  %use_fuji_rotate.1 = phi i32 [ %use_fuji_rotate.0, %280 ], [ %use_fuji_rotate.0, %279 ], [ %use_fuji_rotate.0, %278 ], [ 0, %277 ], [ %use_fuji_rotate.0, %268 ], [ %use_fuji_rotate.0, %267 ], [ %use_fuji_rotate.0, %266 ], [ %use_fuji_rotate.0, %251 ], [ %use_fuji_rotate.0, %249 ], [ %use_fuji_rotate.0, %248 ], [ %use_fuji_rotate.0, %247 ], [ %use_fuji_rotate.0, %246 ], [ %use_fuji_rotate.0, %245 ], [ %use_fuji_rotate.0, %240 ], [ %use_fuji_rotate.0, %235 ], [ %use_fuji_rotate.0, %234 ], [ %use_fuji_rotate.0, %192 ], [ %use_fuji_rotate.0, %186 ], [ %use_fuji_rotate.0, %180 ], [ %use_fuji_rotate.0, %174 ], [ %use_fuji_rotate.0, %168 ], [ %use_fuji_rotate.0, %162 ], [ %use_fuji_rotate.0, %156 ], [ %use_fuji_rotate.0, %144 ], [ %use_fuji_rotate.0, %131 ], [ %use_fuji_rotate.0, %130 ], [ %use_fuji_rotate.0, %109 ], [ %use_fuji_rotate.0, %102 ]
  %user_flip.1 = phi i32 [ %user_flip.0, %280 ], [ %user_flip.0, %279 ], [ %user_flip.0, %278 ], [ %user_flip.0, %277 ], [ %user_flip.0, %268 ], [ %user_flip.0, %267 ], [ %user_flip.0, %266 ], [ %user_flip.0, %251 ], [ %user_flip.0, %249 ], [ %user_flip.0, %248 ], [ %user_flip.0, %247 ], [ %user_flip.0, %246 ], [ %user_flip.0, %245 ], [ %user_flip.0, %240 ], [ %user_flip.0, %235 ], [ %user_flip.0, %234 ], [ %user_flip.0, %192 ], [ %user_flip.0, %186 ], [ %user_flip.0, %180 ], [ %user_flip.0, %174 ], [ %173, %168 ], [ %user_flip.0, %162 ], [ %user_flip.0, %156 ], [ %user_flip.0, %144 ], [ %user_flip.0, %131 ], [ %user_flip.0, %130 ], [ %user_flip.0, %109 ], [ %user_flip.0, %102 ]
  %user_sat.1 = phi i32 [ %user_sat.0, %280 ], [ %user_sat.0, %279 ], [ %user_sat.0, %278 ], [ %user_sat.0, %277 ], [ %user_sat.0, %268 ], [ %user_sat.0, %267 ], [ %user_sat.0, %266 ], [ %user_sat.0, %251 ], [ %user_sat.0, %249 ], [ %user_sat.0, %248 ], [ %user_sat.0, %247 ], [ %user_sat.0, %246 ], [ %user_sat.0, %245 ], [ %user_sat.0, %240 ], [ %user_sat.0, %235 ], [ %user_sat.0, %234 ], [ %user_sat.0, %192 ], [ %user_sat.0, %186 ], [ %user_sat.0, %180 ], [ %user_sat.0, %174 ], [ %user_sat.0, %168 ], [ %167, %162 ], [ %user_sat.0, %156 ], [ %user_sat.0, %144 ], [ %user_sat.0, %131 ], [ %user_sat.0, %130 ], [ %user_sat.0, %109 ], [ %user_sat.0, %102 ]
  %user_black.1 = phi i32 [ %user_black.0, %280 ], [ %user_black.0, %279 ], [ %user_black.0, %278 ], [ %user_black.0, %277 ], [ %user_black.0, %268 ], [ %user_black.0, %267 ], [ %user_black.0, %266 ], [ %user_black.0, %251 ], [ %user_black.0, %249 ], [ %user_black.0, %248 ], [ %user_black.0, %247 ], [ %user_black.0, %246 ], [ %user_black.0, %245 ], [ %user_black.0, %240 ], [ %user_black.0, %235 ], [ %user_black.0, %234 ], [ %user_black.0, %192 ], [ %user_black.0, %186 ], [ %user_black.0, %180 ], [ %user_black.0, %174 ], [ %user_black.0, %168 ], [ %user_black.0, %162 ], [ %161, %156 ], [ %user_black.0, %144 ], [ %user_black.0, %131 ], [ %user_black.0, %130 ], [ %user_black.0, %109 ], [ %user_black.0, %102 ]
  %user_qual.1 = phi i32 [ %user_qual.0, %280 ], [ %user_qual.0, %279 ], [ %user_qual.0, %278 ], [ %user_qual.0, %277 ], [ %user_qual.0, %268 ], [ %user_qual.0, %267 ], [ %user_qual.0, %266 ], [ %user_qual.0, %251 ], [ %user_qual.0, %249 ], [ %user_qual.0, %248 ], [ %user_qual.0, %247 ], [ %user_qual.0, %246 ], [ %user_qual.0, %245 ], [ %user_qual.0, %240 ], [ %user_qual.0, %235 ], [ %user_qual.0, %234 ], [ %user_qual.0, %192 ], [ %user_qual.0, %186 ], [ %user_qual.0, %180 ], [ %179, %174 ], [ %user_qual.0, %168 ], [ %user_qual.0, %162 ], [ %user_qual.0, %156 ], [ %user_qual.0, %144 ], [ %user_qual.0, %131 ], [ %user_qual.0, %130 ], [ %user_qual.0, %109 ], [ %user_qual.0, %102 ]
  %identify_only.1 = phi i32 [ %identify_only.0, %280 ], [ %identify_only.0, %279 ], [ %identify_only.0, %278 ], [ %identify_only.0, %277 ], [ %identify_only.0, %268 ], [ %identify_only.0, %267 ], [ %identify_only.0, %266 ], [ %identify_only.0, %251 ], [ %identify_only.0, %249 ], [ %identify_only.0, %248 ], [ 1, %247 ], [ %identify_only.0, %246 ], [ %identify_only.0, %245 ], [ %identify_only.0, %240 ], [ %identify_only.0, %235 ], [ %identify_only.0, %234 ], [ %identify_only.0, %192 ], [ %identify_only.0, %186 ], [ %identify_only.0, %180 ], [ %identify_only.0, %174 ], [ %identify_only.0, %168 ], [ %identify_only.0, %162 ], [ %identify_only.0, %156 ], [ %identify_only.0, %144 ], [ %identify_only.0, %131 ], [ %identify_only.0, %130 ], [ %identify_only.0, %109 ], [ %identify_only.0, %102 ]
  %thumbnail_only.1 = phi i32 [ %thumbnail_only.0, %280 ], [ %thumbnail_only.0, %279 ], [ %thumbnail_only.0, %278 ], [ %thumbnail_only.0, %277 ], [ %thumbnail_only.0, %268 ], [ %thumbnail_only.0, %267 ], [ %thumbnail_only.0, %266 ], [ %thumbnail_only.0, %251 ], [ %thumbnail_only.0, %249 ], [ %thumbnail_only.0, %248 ], [ %thumbnail_only.0, %247 ], [ 1, %246 ], [ %thumbnail_only.0, %245 ], [ %thumbnail_only.0, %240 ], [ %thumbnail_only.0, %235 ], [ %thumbnail_only.0, %234 ], [ %thumbnail_only.0, %192 ], [ %thumbnail_only.0, %186 ], [ %thumbnail_only.0, %180 ], [ %thumbnail_only.0, %174 ], [ %thumbnail_only.0, %168 ], [ %thumbnail_only.0, %162 ], [ %thumbnail_only.0, %156 ], [ %thumbnail_only.0, %144 ], [ %thumbnail_only.0, %131 ], [ %thumbnail_only.0, %130 ], [ %thumbnail_only.0, %109 ], [ %thumbnail_only.0, %102 ]
  %timestamp_only.1 = phi i32 [ %timestamp_only.0, %280 ], [ %timestamp_only.0, %279 ], [ %timestamp_only.0, %278 ], [ %timestamp_only.0, %277 ], [ %timestamp_only.0, %268 ], [ %timestamp_only.0, %267 ], [ %timestamp_only.0, %266 ], [ %timestamp_only.0, %251 ], [ %timestamp_only.0, %249 ], [ %timestamp_only.0, %248 ], [ %timestamp_only.0, %247 ], [ %timestamp_only.0, %246 ], [ 1, %245 ], [ %timestamp_only.0, %240 ], [ %timestamp_only.0, %235 ], [ %timestamp_only.0, %234 ], [ %timestamp_only.0, %192 ], [ %timestamp_only.0, %186 ], [ %timestamp_only.0, %180 ], [ %timestamp_only.0, %174 ], [ %timestamp_only.0, %168 ], [ %timestamp_only.0, %162 ], [ %timestamp_only.0, %156 ], [ %timestamp_only.0, %144 ], [ %timestamp_only.0, %131 ], [ %timestamp_only.0, %130 ], [ %timestamp_only.0, %109 ], [ %timestamp_only.0, %102 ]
  %arg.5 = phi i32 [ %57, %280 ], [ %57, %279 ], [ %57, %278 ], [ %57, %277 ], [ %57, %268 ], [ %57, %267 ], [ %arg.4, %266 ], [ %57, %251 ], [ %57, %249 ], [ %57, %248 ], [ %57, %247 ], [ %57, %246 ], [ %57, %245 ], [ %241, %240 ], [ %236, %235 ], [ %arg.2, %234 ], [ %198, %192 ], [ %187, %186 ], [ %181, %180 ], [ %175, %174 ], [ %169, %168 ], [ %163, %162 ], [ %157, %156 ], [ %151, %144 ], [ %138, %131 ], [ %arg.1, %130 ], [ %110, %109 ], [ %103, %102 ]
  br label %46

; <label>:286                                     ; preds = %46
  %287 = load i32* @use_camera_matrix, align 4
  %288 = icmp slt i32 %287, 0
  br i1 %288, label %289, label %291

; <label>:289                                     ; preds = %286
  %290 = load i32* @use_camera_wb, align 4
  store i32 %290, i32* @use_camera_matrix, align 4
  br label %291

; <label>:291                                     ; preds = %289, %286
  %292 = icmp eq i32 %arg.0, %argc
  br i1 %292, label %293, label %296

; <label>:293                                     ; preds = %291
  %294 = load %struct._IO_FILE** @stderr, align 8
  %295 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %294, i8* getelementptr inbounds ([22 x i8]* @.str656, i32 0, i32 0))
  br label %987

; <label>:296                                     ; preds = %291
  %297 = icmp ne i32 %write_to_stdout.0, 0
  br i1 %297, label %298, label %305

; <label>:298                                     ; preds = %296
  %299 = call i32 @isatty(i32 1) #4
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %301, label %304

; <label>:301                                     ; preds = %298
  %302 = load %struct._IO_FILE** @stderr, align 8
  %303 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %302, i8* getelementptr inbounds ([42 x i8]* @.str657, i32 0, i32 0))
  br label %987

; <label>:304                                     ; preds = %298
  br label %305

; <label>:305                                     ; preds = %304, %296
  br label %306

; <label>:306                                     ; preds = %984, %305
  %status.0 = phi i32 [ 0, %305 ], [ %status.5, %984 ]
  %arg.6 = phi i32 [ %arg.0, %305 ], [ %985, %984 ]
  %307 = icmp slt i32 %arg.6, %argc
  br i1 %307, label %308, label %986

; <label>:308                                     ; preds = %306
  store [4 x i16]* null, [4 x i16]** @image, align 8
  store i32* null, i32** @oprof, align 8
  store i8* null, i8** @meta_data, align 8
  %309 = load %struct._IO_FILE** @stdout, align 8
  %310 = call i32 @_setjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0)) #11
  %311 = icmp ne i32 %310, 0
  br i1 %311, label %312, label %325

; <label>:312                                     ; preds = %308
  %313 = load %struct._IO_FILE** @ifp, align 8
  %314 = call i32 @fileno(%struct._IO_FILE* %313) #4
  %315 = icmp sgt i32 %314, 2
  br i1 %315, label %316, label %319

; <label>:316                                     ; preds = %312
  %317 = load %struct._IO_FILE** @ifp, align 8
  %318 = call i32 @fclose(%struct._IO_FILE* %317)
  br label %319

; <label>:319                                     ; preds = %316, %312
  %320 = call i32 @fileno(%struct._IO_FILE* %309) #4
  %321 = icmp sgt i32 %320, 2
  br i1 %321, label %322, label %324

; <label>:322                                     ; preds = %319
  %323 = call i32 @fclose(%struct._IO_FILE* %309)
  br label %324

; <label>:324                                     ; preds = %322, %319
  br label %951

; <label>:325                                     ; preds = %308
  %326 = sext i32 %arg.6 to i64
  %327 = getelementptr inbounds i8** %argv, i64 %326
  %328 = load i8** %327, align 8
  store i8* %328, i8** @ifname, align 8
  %329 = load i8** @ifname, align 8
  %330 = call %struct._IO_FILE* @fopen(i8* %329, i8* getelementptr inbounds ([3 x i8]* @.str64, i32 0, i32 0))
  store %struct._IO_FILE* %330, %struct._IO_FILE** @ifp, align 8
  %331 = icmp ne %struct._IO_FILE* %330, null
  br i1 %331, label %334, label %332

; <label>:332                                     ; preds = %325
  %333 = load i8** @ifname, align 8
  call void @perror(i8* %333)
  br label %984

; <label>:334                                     ; preds = %325
  call void @identify()
  %335 = load i32* @is_raw, align 4
  %336 = icmp ne i32 %335, 0
  %337 = xor i1 %336, true
  %338 = zext i1 %337 to i32
  %339 = icmp sge i32 %user_flip.0, 0
  br i1 %339, label %340, label %341

; <label>:340                                     ; preds = %334
  store i32 %user_flip.0, i32* @flip, align 4
  br label %341

; <label>:341                                     ; preds = %340, %334
  %342 = load i32* @flip, align 4
  %343 = add nsw i32 %342, 3600
  %344 = srem i32 %343, 360
  switch i32 %344, label %348 [
    i32 270, label %345
    i32 180, label %346
    i32 90, label %347
  ]

; <label>:345                                     ; preds = %341
  store i32 5, i32* @flip, align 4
  br label %348

; <label>:346                                     ; preds = %341
  store i32 3, i32* @flip, align 4
  br label %348

; <label>:347                                     ; preds = %341
  store i32 6, i32* @flip, align 4
  br label %348

; <label>:348                                     ; preds = %347, %346, %345, %341
  %349 = icmp ne i32 %timestamp_only.0, 0
  br i1 %349, label %350, label %383

; <label>:350                                     ; preds = %348
  %351 = load i64* @timestamp, align 8
  %352 = icmp ne i64 %351, 0
  %353 = xor i1 %352, true
  %354 = zext i1 %353 to i32
  br i1 %353, label %355, label %359

; <label>:355                                     ; preds = %350
  %356 = load %struct._IO_FILE** @stderr, align 8
  %357 = load i8** @ifname, align 8
  %358 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %356, i8* getelementptr inbounds ([22 x i8]* @.str658, i32 0, i32 0), i8* %357)
  br label %382

; <label>:359                                     ; preds = %350
  %360 = icmp ne i32 %identify_only.0, 0
  br i1 %360, label %361, label %366

; <label>:361                                     ; preds = %359
  %362 = load i64* @timestamp, align 8
  %363 = load i32* @shot_order, align 4
  %364 = load i8** @ifname, align 8
  %365 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str659, i32 0, i32 0), i64 %362, i32 %363, i8* %364)
  br label %381

; <label>:366                                     ; preds = %359
  %367 = load i32* @verbose, align 4
  %368 = icmp ne i32 %367, 0
  br i1 %368, label %369, label %375

; <label>:369                                     ; preds = %366
  %370 = load %struct._IO_FILE** @stderr, align 8
  %371 = load i8** @ifname, align 8
  %372 = load i64* @timestamp, align 8
  %373 = trunc i64 %372 to i32
  %374 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %370, i8* getelementptr inbounds ([20 x i8]* @.str660, i32 0, i32 0), i8* %371, i32 %373)
  br label %375

; <label>:375                                     ; preds = %369, %366
  %376 = load i64* @timestamp, align 8
  %377 = getelementptr inbounds %struct.utimbuf* %ut, i32 0, i32 1
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %struct.utimbuf* %ut, i32 0, i32 0
  store i64 %376, i64* %378, align 8
  %379 = load i8** @ifname, align 8
  %380 = call i32 @utime(i8* %379, %struct.utimbuf* %ut) #4
  br label %381

; <label>:381                                     ; preds = %375, %361
  br label %382

; <label>:382                                     ; preds = %381, %355
  br label %715

; <label>:383                                     ; preds = %348
  store void (%struct._IO_FILE*)* @write_ppm_tiff, void (%struct._IO_FILE*)** @write_fun, align 8
  %384 = icmp ne i32 %thumbnail_only.0, 0
  br i1 %384, label %385, label %409

; <label>:385                                     ; preds = %383
  %386 = load i64* @thumb_offset, align 8
  %387 = icmp ne i64 %386, 0
  %388 = xor i1 %387, true
  %389 = zext i1 %388 to i32
  br i1 %388, label %390, label %394

; <label>:390                                     ; preds = %385
  %391 = load %struct._IO_FILE** @stderr, align 8
  %392 = load i8** @ifname, align 8
  %393 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %391, i8* getelementptr inbounds ([22 x i8]* @.str661, i32 0, i32 0), i8* %392)
  br label %715

; <label>:394                                     ; preds = %385
  %395 = load void (...)** @thumb_load_raw, align 8
  %396 = icmp ne void (...)* %395, null
  br i1 %396, label %397, label %402

; <label>:397                                     ; preds = %394
  %398 = load void (...)** @thumb_load_raw, align 8
  store void (...)* %398, void (...)** @load_raw, align 8
  %399 = load i64* @thumb_offset, align 8
  store i64 %399, i64* @data_offset, align 8
  %400 = load i16* @thumb_height, align 2
  store i16 %400, i16* @height, align 2
  %401 = load i16* @thumb_width, align 2
  store i16 %401, i16* @width, align 2
  store i32 0, i32* @filters, align 4
  br label %407

; <label>:402                                     ; preds = %394
  %403 = load %struct._IO_FILE** @ifp, align 8
  %404 = load i64* @thumb_offset, align 8
  %405 = call i32 @fseek(%struct._IO_FILE* %403, i64 %404, i32 0)
  %406 = load void (%struct._IO_FILE*)** @write_thumb, align 8
  store void (%struct._IO_FILE*)* %406, void (%struct._IO_FILE*)** @write_fun, align 8
  br label %883

; <label>:407                                     ; preds = %397
  br label %408

; <label>:408                                     ; preds = %407
  br label %409

; <label>:409                                     ; preds = %408, %383
  %status.1 = phi i32 [ %389, %408 ], [ %338, %383 ]
  %410 = load void (...)** @load_raw, align 8
  %411 = icmp eq void (...)* %410, bitcast (void ()* @kodak_ycbcr_load_raw to void (...)*)
  br i1 %411, label %412, label %427

; <label>:412                                     ; preds = %409
  %413 = load i16* @height, align 2
  %414 = zext i16 %413 to i32
  %415 = and i32 %414, 1
  %416 = load i16* @height, align 2
  %417 = zext i16 %416 to i32
  %418 = add nsw i32 %417, %415
  %419 = trunc i32 %418 to i16
  store i16 %419, i16* @height, align 2
  %420 = load i16* @width, align 2
  %421 = zext i16 %420 to i32
  %422 = and i32 %421, 1
  %423 = load i16* @width, align 2
  %424 = zext i16 %423 to i32
  %425 = add nsw i32 %424, %422
  %426 = trunc i32 %425 to i16
  store i16 %426, i16* @width, align 2
  br label %427

; <label>:427                                     ; preds = %412, %409
  %428 = icmp ne i32 %identify_only.0, 0
  br i1 %428, label %429, label %513

; <label>:429                                     ; preds = %427
  %430 = load i32* @verbose, align 4
  %431 = icmp ne i32 %430, 0
  br i1 %431, label %432, label %513

; <label>:432                                     ; preds = %429
  %433 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %434 = sext i8 %433 to i32
  %435 = icmp ne i32 %434, 0
  br i1 %435, label %436, label %513

; <label>:436                                     ; preds = %432
  %437 = load i8** @ifname, align 8
  %438 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str662, i32 0, i32 0), i8* %437)
  %439 = call i8* @ctime(i64* @timestamp) #4
  %440 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str663, i32 0, i32 0), i8* %439)
  %441 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str664, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0))
  %442 = load i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i64 0), align 1
  %443 = icmp ne i8 %442, 0
  br i1 %443, label %444, label %446

; <label>:444                                     ; preds = %436
  %445 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str665, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0))
  br label %446

; <label>:446                                     ; preds = %444, %436
  %447 = load i32* @dng_version, align 4
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %463

; <label>:449                                     ; preds = %446
  %450 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str666, i32 0, i32 0))
  br label %451

; <label>:451                                     ; preds = %460, %449
  %i.1 = phi i32 [ 24, %449 ], [ %461, %460 ]
  %452 = icmp sge i32 %i.1, 0
  br i1 %452, label %453, label %462

; <label>:453                                     ; preds = %451
  %454 = load i32* @dng_version, align 4
  %455 = lshr i32 %454, %i.1
  %456 = and i32 %455, 255
  %457 = icmp ne i32 %i.1, 0
  %458 = select i1 %457, i32 46, i32 10
  %459 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str667, i32 0, i32 0), i32 %456, i32 %458)
  br label %460

; <label>:460                                     ; preds = %453
  %461 = sub nsw i32 %i.1, 8
  br label %451

; <label>:462                                     ; preds = %451
  br label %463

; <label>:463                                     ; preds = %462, %446
  %464 = load float* @iso_speed, align 4
  %465 = fptosi float %464 to i32
  %466 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str668, i32 0, i32 0), i32 %465)
  %467 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str669, i32 0, i32 0))
  %468 = load float* @shutter, align 4
  %469 = fcmp ogt float %468, 0.000000e+00
  br i1 %469, label %470, label %477

; <label>:470                                     ; preds = %463
  %471 = load float* @shutter, align 4
  %472 = fcmp olt float %471, 1.000000e+00
  br i1 %472, label %473, label %477

; <label>:473                                     ; preds = %470
  %474 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str670, i32 0, i32 0))
  %475 = load float* @shutter, align 4
  %476 = fdiv float 1.000000e+00, %475
  store float %476, float* @shutter, align 4
  br label %477

; <label>:477                                     ; preds = %473, %470, %463
  %478 = load float* @shutter, align 4
  %479 = fpext float %478 to double
  %480 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str671, i32 0, i32 0), double %479)
  %481 = load float* @aperture, align 4
  %482 = fpext float %481 to double
  %483 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str672, i32 0, i32 0), double %482)
  %484 = load float* @focal_len, align 4
  %485 = fpext float %484 to double
  %486 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([24 x i8]* @.str673, i32 0, i32 0), double %485)
  %487 = load i32* @profile_length, align 4
  %488 = icmp ne i32 %487, 0
  %489 = select i1 %488, i8* getelementptr inbounds ([4 x i8]* @.str675, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str676, i32 0, i32 0)
  %490 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str674, i32 0, i32 0), i8* %489)
  %491 = load i32* @is_raw, align 4
  %492 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str677, i32 0, i32 0), i32 %491)
  %493 = load double* @pixel_aspect, align 8
  %494 = fcmp une double %493, 1.000000e+00
  br i1 %494, label %495, label %498

; <label>:495                                     ; preds = %477
  %496 = load double* @pixel_aspect, align 8
  %497 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str678, i32 0, i32 0), double %496)
  br label %498

; <label>:498                                     ; preds = %495, %477
  %499 = load i64* @thumb_offset, align 8
  %500 = icmp ne i64 %499, 0
  br i1 %500, label %501, label %507

; <label>:501                                     ; preds = %498
  %502 = load i16* @thumb_width, align 2
  %503 = zext i16 %502 to i32
  %504 = load i16* @thumb_height, align 2
  %505 = zext i16 %504 to i32
  %506 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str679, i32 0, i32 0), i32 %503, i32 %505)
  br label %507

; <label>:507                                     ; preds = %501, %498
  %508 = load i16* @raw_width, align 2
  %509 = zext i16 %508 to i32
  %510 = load i16* @raw_height, align 2
  %511 = zext i16 %510 to i32
  %512 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str680, i32 0, i32 0), i32 %509, i32 %511)
  br label %521

; <label>:513                                     ; preds = %432, %429, %427
  %514 = load i32* @is_raw, align 4
  %515 = icmp ne i32 %514, 0
  br i1 %515, label %520, label %516

; <label>:516                                     ; preds = %513
  %517 = load %struct._IO_FILE** @stderr, align 8
  %518 = load i8** @ifname, align 8
  %519 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %517, i8* getelementptr inbounds ([23 x i8]* @.str681, i32 0, i32 0), i8* %518)
  br label %520

; <label>:520                                     ; preds = %516, %513
  br label %521

; <label>:521                                     ; preds = %520, %507
  %522 = load i32* @is_raw, align 4
  %523 = icmp ne i32 %522, 0
  br i1 %523, label %525, label %524

; <label>:524                                     ; preds = %521
  br label %715

; <label>:525                                     ; preds = %521
  %526 = load i32* @filters, align 4
  %527 = icmp ne i32 %526, 0
  br i1 %527, label %528, label %542

; <label>:528                                     ; preds = %525
  %529 = load i32* @half_size, align 4
  %530 = icmp ne i32 %529, 0
  br i1 %530, label %540, label %531

; <label>:531                                     ; preds = %528
  %532 = load float* @threshold, align 4
  %533 = fcmp une float %532, 0.000000e+00
  br i1 %533, label %540, label %534

; <label>:534                                     ; preds = %531
  %535 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 0), align 8
  %536 = fcmp une double %535, 1.000000e+00
  br i1 %536, label %540, label %537

; <label>:537                                     ; preds = %534
  %538 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 2), align 8
  %539 = fcmp une double %538, 1.000000e+00
  br label %540

; <label>:540                                     ; preds = %537, %534, %531, %528
  %541 = phi i1 [ true, %534 ], [ true, %531 ], [ true, %528 ], [ %539, %537 ]
  br label %542

; <label>:542                                     ; preds = %540, %525
  %543 = phi i1 [ false, %525 ], [ %541, %540 ]
  %544 = zext i1 %543 to i32
  %545 = trunc i32 %544 to i16
  store i16 %545, i16* @shrink, align 2
  %546 = load i16* @height, align 2
  %547 = zext i16 %546 to i32
  %548 = load i16* @shrink, align 2
  %549 = zext i16 %548 to i32
  %550 = add nsw i32 %547, %549
  %551 = load i16* @shrink, align 2
  %552 = zext i16 %551 to i32
  %553 = ashr i32 %550, %552
  %554 = trunc i32 %553 to i16
  store i16 %554, i16* @iheight, align 2
  %555 = load i16* @width, align 2
  %556 = zext i16 %555 to i32
  %557 = load i16* @shrink, align 2
  %558 = zext i16 %557 to i32
  %559 = add nsw i32 %556, %558
  %560 = load i16* @shrink, align 2
  %561 = zext i16 %560 to i32
  %562 = ashr i32 %559, %561
  %563 = trunc i32 %562 to i16
  store i16 %563, i16* @iwidth, align 2
  %564 = icmp ne i32 %identify_only.0, 0
  br i1 %564, label %565, label %718

; <label>:565                                     ; preds = %542
  %566 = load i32* @verbose, align 4
  %567 = icmp ne i32 %566, 0
  br i1 %567, label %568, label %711

; <label>:568                                     ; preds = %565
  %569 = icmp ne i32 %use_fuji_rotate.0, 0
  br i1 %569, label %570, label %623

; <label>:570                                     ; preds = %568
  %571 = load i16* @fuji_width, align 2
  %572 = icmp ne i16 %571, 0
  br i1 %572, label %573, label %599

; <label>:573                                     ; preds = %570
  %574 = load i16* @fuji_width, align 2
  %575 = zext i16 %574 to i32
  %576 = sub nsw i32 %575, 1
  %577 = load i16* @shrink, align 2
  %578 = zext i16 %577 to i32
  %579 = add nsw i32 %576, %578
  %580 = load i16* @shrink, align 2
  %581 = zext i16 %580 to i32
  %582 = ashr i32 %579, %581
  %583 = trunc i32 %582 to i16
  store i16 %583, i16* @fuji_width, align 2
  %584 = load i16* @fuji_width, align 2
  %585 = zext i16 %584 to i32
  %586 = sitofp i32 %585 to double
  %587 = call double @sqrt(double 5.000000e-01) #4
  %588 = fdiv double %586, %587
  %589 = fptoui double %588 to i16
  store i16 %589, i16* @iwidth, align 2
  %590 = load i16* @iheight, align 2
  %591 = zext i16 %590 to i32
  %592 = load i16* @fuji_width, align 2
  %593 = zext i16 %592 to i32
  %594 = sub nsw i32 %591, %593
  %595 = sitofp i32 %594 to double
  %596 = call double @sqrt(double 5.000000e-01) #4
  %597 = fdiv double %595, %596
  %598 = fptoui double %597 to i16
  store i16 %598, i16* @iheight, align 2
  br label %622

; <label>:599                                     ; preds = %570
  %600 = load double* @pixel_aspect, align 8
  %601 = fcmp olt double %600, 1.000000e+00
  br i1 %601, label %602, label %610

; <label>:602                                     ; preds = %599
  %603 = load i16* @iheight, align 2
  %604 = zext i16 %603 to i32
  %605 = sitofp i32 %604 to double
  %606 = load double* @pixel_aspect, align 8
  %607 = fdiv double %605, %606
  %608 = fadd double %607, 5.000000e-01
  %609 = fptoui double %608 to i16
  store i16 %609, i16* @iheight, align 2
  br label %610

; <label>:610                                     ; preds = %602, %599
  %611 = load double* @pixel_aspect, align 8
  %612 = fcmp ogt double %611, 1.000000e+00
  br i1 %612, label %613, label %621

; <label>:613                                     ; preds = %610
  %614 = load i16* @iwidth, align 2
  %615 = zext i16 %614 to i32
  %616 = sitofp i32 %615 to double
  %617 = load double* @pixel_aspect, align 8
  %618 = fmul double %616, %617
  %619 = fadd double %618, 5.000000e-01
  %620 = fptoui double %619 to i16
  store i16 %620, i16* @iwidth, align 2
  br label %621

; <label>:621                                     ; preds = %613, %610
  br label %622

; <label>:622                                     ; preds = %621, %573
  br label %623

; <label>:623                                     ; preds = %622, %568
  %624 = load i32* @flip, align 4
  %625 = and i32 %624, 4
  %626 = icmp ne i32 %625, 0
  br i1 %626, label %627, label %645

; <label>:627                                     ; preds = %623
  %628 = load i16* @iwidth, align 2
  %629 = zext i16 %628 to i32
  %630 = load i16* @iheight, align 2
  %631 = zext i16 %630 to i32
  %632 = xor i32 %631, %629
  %633 = trunc i32 %632 to i16
  store i16 %633, i16* @iheight, align 2
  %634 = load i16* @iheight, align 2
  %635 = zext i16 %634 to i32
  %636 = load i16* @iwidth, align 2
  %637 = zext i16 %636 to i32
  %638 = xor i32 %637, %635
  %639 = trunc i32 %638 to i16
  store i16 %639, i16* @iwidth, align 2
  %640 = zext i16 %639 to i32
  %641 = load i16* @iheight, align 2
  %642 = zext i16 %641 to i32
  %643 = xor i32 %642, %640
  %644 = trunc i32 %643 to i16
  store i16 %644, i16* @iheight, align 2
  br label %645

; <label>:645                                     ; preds = %627, %623
  %646 = load i16* @width, align 2
  %647 = zext i16 %646 to i32
  %648 = load i16* @height, align 2
  %649 = zext i16 %648 to i32
  %650 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str682, i32 0, i32 0), i32 %647, i32 %649)
  %651 = load i16* @iwidth, align 2
  %652 = zext i16 %651 to i32
  %653 = load i16* @iheight, align 2
  %654 = zext i16 %653 to i32
  %655 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str683, i32 0, i32 0), i32 %652, i32 %654)
  %656 = load i32* @colors, align 4
  %657 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str684, i32 0, i32 0), i32 %656)
  %658 = load i32* @filters, align 4
  %659 = icmp ne i32 %658, 0
  br i1 %659, label %660, label %680

; <label>:660                                     ; preds = %645
  %661 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str685, i32 0, i32 0))
  %662 = load i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 3), align 1
  %663 = icmp ne i8 %662, 0
  br i1 %663, label %665, label %664

; <label>:664                                     ; preds = %660
  store i8 71, i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 3), align 1
  br label %665

; <label>:665                                     ; preds = %664, %660
  br label %666

; <label>:666                                     ; preds = %677, %665
  %i.2 = phi i32 [ 0, %665 ], [ %678, %677 ]
  %667 = icmp slt i32 %i.2, 16
  br i1 %667, label %668, label %679

; <label>:668                                     ; preds = %666
  %669 = ashr i32 %i.2, 1
  %670 = and i32 %i.2, 1
  %671 = call i32 @fc(i32 %669, i32 %670)
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds [5 x i8]* @cdesc, i32 0, i64 %672
  %674 = load i8* %673, align 1
  %675 = sext i8 %674 to i32
  %676 = call i32 @putchar(i32 %675)
  br label %677

; <label>:677                                     ; preds = %668
  %678 = add nsw i32 %i.2, 1
  br label %666

; <label>:679                                     ; preds = %666
  br label %680

; <label>:680                                     ; preds = %679, %645
  %681 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str686, i32 0, i32 0))
  br label %682

; <label>:682                                     ; preds = %691, %680
  %c.2 = phi i32 [ 0, %680 ], [ %692, %691 ]
  %683 = load i32* @colors, align 4
  %684 = icmp slt i32 %c.2, %683
  br i1 %684, label %685, label %693

; <label>:685                                     ; preds = %682
  %686 = sext i32 %c.2 to i64
  %687 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %686
  %688 = load float* %687, align 4
  %689 = fpext float %688 to double
  %690 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str72, i32 0, i32 0), double %689)
  br label %691

; <label>:691                                     ; preds = %685
  %692 = add nsw i32 %c.2, 1
  br label %682

; <label>:693                                     ; preds = %682
  %694 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %695 = fcmp ogt float %694, 0.000000e+00
  br i1 %695, label %696, label %709

; <label>:696                                     ; preds = %693
  %697 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str687, i32 0, i32 0))
  br label %698

; <label>:698                                     ; preds = %706, %696
  %c.3 = phi i32 [ 0, %696 ], [ %707, %706 ]
  %699 = icmp slt i32 %c.3, 4
  br i1 %699, label %700, label %708

; <label>:700                                     ; preds = %698
  %701 = sext i32 %c.3 to i64
  %702 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %701
  %703 = load float* %702, align 4
  %704 = fpext float %703 to double
  %705 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str72, i32 0, i32 0), double %704)
  br label %706

; <label>:706                                     ; preds = %700
  %707 = add nsw i32 %c.3, 1
  br label %698

; <label>:708                                     ; preds = %698
  br label %709

; <label>:709                                     ; preds = %708, %693
  %710 = call i32 @putchar(i32 10)
  br label %714

; <label>:711                                     ; preds = %565
  %712 = load i8** @ifname, align 8
  %713 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str688, i32 0, i32 0), i8* %712, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0))
  br label %714

; <label>:714                                     ; preds = %711, %709
  br label %715

; <label>:715                                     ; preds = %714, %524, %390, %382
  %status.2 = phi i32 [ %354, %382 ], [ %389, %390 ], [ %status.1, %714 ], [ %status.1, %524 ]
  %716 = load %struct._IO_FILE** @ifp, align 8
  %717 = call i32 @fclose(%struct._IO_FILE* %716)
  br label %984

; <label>:718                                     ; preds = %542
  %719 = load i32* @use_camera_matrix, align 4
  %720 = icmp ne i32 %719, 0
  br i1 %720, label %721, label %726

; <label>:721                                     ; preds = %718
  %722 = load float* getelementptr inbounds ([3 x [4 x float]]* @cmatrix, i32 0, i64 0, i64 0), align 4
  %723 = fpext float %722 to double
  %724 = fcmp ogt double %723, 2.500000e-01
  br i1 %724, label %725, label %726

; <label>:725                                     ; preds = %721
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([3 x [4 x float]]* @rgb_cam to i8*), i8* bitcast ([3 x [4 x float]]* @cmatrix to i8*), i64 48, i32 16, i1 false)
  store i32 0, i32* @raw_color, align 4
  br label %726

; <label>:726                                     ; preds = %725, %721, %718
  %727 = load i16* @iheight, align 2
  %728 = zext i16 %727 to i32
  %729 = load i16* @iwidth, align 2
  %730 = zext i16 %729 to i32
  %731 = mul nsw i32 %728, %730
  %732 = sext i32 %731 to i64
  %733 = call noalias i8* @calloc(i64 %732, i64 8) #4
  %734 = bitcast i8* %733 to [4 x i16]*
  store [4 x i16]* %734, [4 x i16]** @image, align 8
  %735 = load [4 x i16]** @image, align 8
  %736 = bitcast [4 x i16]* %735 to i8*
  call void @merror(i8* %736, i8* getelementptr inbounds ([7 x i8]* @.str689, i32 0, i32 0))
  %737 = load i32* @meta_length, align 4
  %738 = icmp ne i32 %737, 0
  br i1 %738, label %739, label %744

; <label>:739                                     ; preds = %726
  %740 = load i32* @meta_length, align 4
  %741 = zext i32 %740 to i64
  %742 = call noalias i8* @malloc(i64 %741) #4
  store i8* %742, i8** @meta_data, align 8
  %743 = load i8** @meta_data, align 8
  call void @merror(i8* %743, i8* getelementptr inbounds ([7 x i8]* @.str689, i32 0, i32 0))
  br label %744

; <label>:744                                     ; preds = %739, %726
  %745 = load i32* @verbose, align 4
  %746 = icmp ne i32 %745, 0
  br i1 %746, label %747, label %751

; <label>:747                                     ; preds = %744
  %748 = load %struct._IO_FILE** @stderr, align 8
  %749 = load i8** @ifname, align 8
  %750 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %748, i8* getelementptr inbounds ([33 x i8]* @.str690, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %749)
  br label %751

; <label>:751                                     ; preds = %747, %744
  %752 = load i32* @shot_select, align 4
  %753 = load i32* @is_raw, align 4
  %754 = icmp uge i32 %752, %753
  br i1 %754, label %755, label %760

; <label>:755                                     ; preds = %751
  %756 = load %struct._IO_FILE** @stderr, align 8
  %757 = load i8** @ifname, align 8
  %758 = load i32* @shot_select, align 4
  %759 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %756, i8* getelementptr inbounds ([43 x i8]* @.str691, i32 0, i32 0), i8* %757, i32 %758)
  br label %760

; <label>:760                                     ; preds = %755, %751
  %761 = load %struct._IO_FILE** @ifp, align 8
  %762 = load i64* @data_offset, align 8
  %763 = call i32 @fseeko(%struct._IO_FILE* %761, i64 %762, i32 0)
  %764 = load void (...)** @load_raw, align 8
  call void (...)* %764()
  %765 = load i32* @zero_is_bad, align 4
  %766 = icmp ne i32 %765, 0
  br i1 %766, label %767, label %768

; <label>:767                                     ; preds = %760
  call void @remove_zeroes()
  br label %768

; <label>:768                                     ; preds = %767, %760
  call void @bad_pixels(i8* %bpfile.0)
  %769 = icmp ne i8* %dark_frame.0, null
  br i1 %769, label %770, label %771

; <label>:770                                     ; preds = %768
  call void @subtract(i8* %dark_frame.0)
  br label %771

; <label>:771                                     ; preds = %770, %768
  %772 = load i16* @fuji_width, align 2
  %773 = icmp ne i16 %772, 0
  %774 = xor i1 %773, true
  %775 = zext i1 %774 to i32
  %776 = add nsw i32 2, %775
  %777 = icmp sge i32 %user_qual.0, 0
  br i1 %777, label %778, label %779

; <label>:778                                     ; preds = %771
  br label %779

; <label>:779                                     ; preds = %778, %771
  %quality.0 = phi i32 [ %user_qual.0, %778 ], [ %776, %771 ]
  %780 = icmp sge i32 %user_black.0, 0
  br i1 %780, label %781, label %782

; <label>:781                                     ; preds = %779
  store i32 %user_black.0, i32* @black, align 4
  br label %782

; <label>:782                                     ; preds = %781, %779
  %783 = icmp sgt i32 %user_sat.0, 0
  br i1 %783, label %784, label %785

; <label>:784                                     ; preds = %782
  store i32 %user_sat.0, i32* @maximum, align 4
  br label %785

; <label>:785                                     ; preds = %784, %782
  %786 = load i32* @is_foveon, align 4
  %787 = icmp ne i32 %786, 0
  br i1 %787, label %788, label %792

; <label>:788                                     ; preds = %785
  %789 = load i32* @document_mode, align 4
  %790 = icmp ne i32 %789, 0
  br i1 %790, label %792, label %791

; <label>:791                                     ; preds = %788
  call void @foveon_interpolate()
  br label %792

; <label>:792                                     ; preds = %791, %788, %785
  %793 = load i32* @is_foveon, align 4
  %794 = icmp ne i32 %793, 0
  br i1 %794, label %799, label %795

; <label>:795                                     ; preds = %792
  %796 = load i32* @document_mode, align 4
  %797 = icmp slt i32 %796, 2
  br i1 %797, label %798, label %799

; <label>:798                                     ; preds = %795
  call void @scale_colors()
  br label %799

; <label>:799                                     ; preds = %798, %795, %792
  call void @pre_interpolate()
  %800 = load i32* @filters, align 4
  %801 = icmp ne i32 %800, 0
  br i1 %801, label %802, label %821

; <label>:802                                     ; preds = %799
  %803 = load i32* @document_mode, align 4
  %804 = icmp ne i32 %803, 0
  br i1 %804, label %821, label %805

; <label>:805                                     ; preds = %802
  %806 = icmp eq i32 %quality.0, 0
  br i1 %806, label %807, label %808

; <label>:807                                     ; preds = %805
  call void @lin_interpolate()
  br label %820

; <label>:808                                     ; preds = %805
  %809 = icmp eq i32 %quality.0, 1
  br i1 %809, label %813, label %810

; <label>:810                                     ; preds = %808
  %811 = load i32* @colors, align 4
  %812 = icmp sgt i32 %811, 3
  br i1 %812, label %813, label %814

; <label>:813                                     ; preds = %810, %808
  call void @vng_interpolate()
  br label %819

; <label>:814                                     ; preds = %810
  %815 = icmp eq i32 %quality.0, 2
  br i1 %815, label %816, label %817

; <label>:816                                     ; preds = %814
  call void @ppg_interpolate()
  br label %818

; <label>:817                                     ; preds = %814
  call void @ahd_interpolate()
  br label %818

; <label>:818                                     ; preds = %817, %816
  br label %819

; <label>:819                                     ; preds = %818, %813
  br label %820

; <label>:820                                     ; preds = %819, %807
  br label %821

; <label>:821                                     ; preds = %820, %802, %799
  %822 = load i32* @mix_green, align 4
  %823 = icmp ne i32 %822, 0
  br i1 %823, label %824, label %855

; <label>:824                                     ; preds = %821
  store i32 3, i32* @colors, align 4
  br label %825

; <label>:825                                     ; preds = %852, %824
  %i.3 = phi i32 [ 0, %824 ], [ %853, %852 ]
  %826 = load i16* @height, align 2
  %827 = zext i16 %826 to i32
  %828 = load i16* @width, align 2
  %829 = zext i16 %828 to i32
  %830 = mul nsw i32 %827, %829
  %831 = icmp slt i32 %i.3, %830
  br i1 %831, label %832, label %854

; <label>:832                                     ; preds = %825
  %833 = sext i32 %i.3 to i64
  %834 = load [4 x i16]** @image, align 8
  %835 = getelementptr inbounds [4 x i16]* %834, i64 %833
  %836 = getelementptr inbounds [4 x i16]* %835, i32 0, i64 1
  %837 = load i16* %836, align 2
  %838 = zext i16 %837 to i32
  %839 = sext i32 %i.3 to i64
  %840 = load [4 x i16]** @image, align 8
  %841 = getelementptr inbounds [4 x i16]* %840, i64 %839
  %842 = getelementptr inbounds [4 x i16]* %841, i32 0, i64 3
  %843 = load i16* %842, align 2
  %844 = zext i16 %843 to i32
  %845 = add nsw i32 %838, %844
  %846 = ashr i32 %845, 1
  %847 = trunc i32 %846 to i16
  %848 = sext i32 %i.3 to i64
  %849 = load [4 x i16]** @image, align 8
  %850 = getelementptr inbounds [4 x i16]* %849, i64 %848
  %851 = getelementptr inbounds [4 x i16]* %850, i32 0, i64 1
  store i16 %847, i16* %851, align 2
  br label %852

; <label>:852                                     ; preds = %832
  %853 = add nsw i32 %i.3, 1
  br label %825

; <label>:854                                     ; preds = %825
  br label %855

; <label>:855                                     ; preds = %854, %821
  %856 = load i32* @is_foveon, align 4
  %857 = icmp ne i32 %856, 0
  br i1 %857, label %862, label %858

; <label>:858                                     ; preds = %855
  %859 = load i32* @colors, align 4
  %860 = icmp eq i32 %859, 3
  br i1 %860, label %861, label %862

; <label>:861                                     ; preds = %858
  call void @median_filter()
  br label %862

; <label>:862                                     ; preds = %861, %858, %855
  %863 = load i32* @is_foveon, align 4
  %864 = icmp ne i32 %863, 0
  br i1 %864, label %869, label %865

; <label>:865                                     ; preds = %862
  %866 = load i32* @highlight, align 4
  %867 = icmp eq i32 %866, 2
  br i1 %867, label %868, label %869

; <label>:868                                     ; preds = %865
  call void @blend_highlights()
  br label %869

; <label>:869                                     ; preds = %868, %865, %862
  %870 = load i32* @is_foveon, align 4
  %871 = icmp ne i32 %870, 0
  br i1 %871, label %876, label %872

; <label>:872                                     ; preds = %869
  %873 = load i32* @highlight, align 4
  %874 = icmp sgt i32 %873, 2
  br i1 %874, label %875, label %876

; <label>:875                                     ; preds = %872
  call void @recover_highlights()
  br label %876

; <label>:876                                     ; preds = %875, %872, %869
  %877 = icmp ne i32 %use_fuji_rotate.0, 0
  br i1 %877, label %878, label %879

; <label>:878                                     ; preds = %876
  call void @fuji_rotate()
  br label %879

; <label>:879                                     ; preds = %878, %876
  call void @convert_to_rgb()
  %880 = icmp ne i32 %use_fuji_rotate.0, 0
  br i1 %880, label %881, label %882

; <label>:881                                     ; preds = %879
  call void @stretch()
  br label %882

; <label>:882                                     ; preds = %881, %879
  br label %883

; <label>:883                                     ; preds = %882, %402
  %status.3 = phi i32 [ %status.1, %882 ], [ %389, %402 ]
  %884 = load void (%struct._IO_FILE*)** @write_fun, align 8
  %885 = icmp eq void (%struct._IO_FILE*)* %884, @jpeg_thumb
  br i1 %885, label %886, label %887

; <label>:886                                     ; preds = %883
  br label %901

; <label>:887                                     ; preds = %883
  %888 = load i32* @output_tiff, align 4
  %889 = icmp ne i32 %888, 0
  br i1 %889, label %890, label %894

; <label>:890                                     ; preds = %887
  %891 = load void (%struct._IO_FILE*)** @write_fun, align 8
  %892 = icmp eq void (%struct._IO_FILE*)* %891, @write_ppm_tiff
  br i1 %892, label %893, label %894

; <label>:893                                     ; preds = %890
  br label %900

; <label>:894                                     ; preds = %890, %887
  %895 = load i32* @colors, align 4
  %896 = mul nsw i32 %895, 5
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds i8* getelementptr inbounds ([20 x i8]* @.str693, i32 0, i32 0), i64 %897
  %899 = getelementptr inbounds i8* %898, i64 -5
  br label %900

; <label>:900                                     ; preds = %894, %893
  %write_ext.0 = phi i8* [ getelementptr inbounds ([6 x i8]* @.str692, i32 0, i32 0), %893 ], [ %899, %894 ]
  br label %901

; <label>:901                                     ; preds = %900, %886
  %write_ext.1 = phi i8* [ getelementptr inbounds ([5 x i8]* @.str164, i32 0, i32 0), %886 ], [ %write_ext.0, %900 ]
  %902 = load i8** @ifname, align 8
  %903 = call i64 @strlen(i8* %902) #10
  %904 = add i64 %903, 64
  %905 = call noalias i8* @malloc(i64 %904) #4
  call void @merror(i8* %905, i8* getelementptr inbounds ([7 x i8]* @.str689, i32 0, i32 0))
  %906 = icmp ne i32 %write_to_stdout.0, 0
  br i1 %906, label %907, label %909

; <label>:907                                     ; preds = %901
  %908 = call i8* @strcpy(i8* %905, i8* getelementptr inbounds ([16 x i8]* @.str694, i32 0, i32 0)) #4
  br label %936

; <label>:909                                     ; preds = %901
  %910 = load i8** @ifname, align 8
  %911 = call i8* @strcpy(i8* %905, i8* %910) #4
  %912 = call i8* @strrchr(i8* %905, i32 46) #10
  %913 = icmp ne i8* %912, null
  br i1 %913, label %914, label %915

; <label>:914                                     ; preds = %909
  store i8 0, i8* %912, align 1
  br label %915

; <label>:915                                     ; preds = %914, %909
  %916 = load i32* @multi_out, align 4
  %917 = icmp ne i32 %916, 0
  br i1 %917, label %918, label %926

; <label>:918                                     ; preds = %915
  %919 = call i64 @strlen(i8* %905) #10
  %920 = getelementptr inbounds i8* %905, i64 %919
  %921 = load i32* @is_raw, align 4
  %922 = sub i32 %921, 1
  %923 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32 %922) #4
  %924 = load i32* @shot_select, align 4
  %925 = call i32 (i8*, i8*, ...)* @sprintf(i8* %920, i8* getelementptr inbounds ([6 x i8]* @.str695, i32 0, i32 0), i32 %923, i32 %924) #4
  br label %926

; <label>:926                                     ; preds = %918, %915
  %927 = icmp ne i32 %thumbnail_only.0, 0
  br i1 %927, label %928, label %930

; <label>:928                                     ; preds = %926
  %929 = call i8* @strcat(i8* %905, i8* getelementptr inbounds ([7 x i8]* @.str696, i32 0, i32 0)) #4
  br label %930

; <label>:930                                     ; preds = %928, %926
  %931 = call i8* @strcat(i8* %905, i8* %write_ext.1) #4
  %932 = call %struct._IO_FILE* @fopen(i8* %905, i8* getelementptr inbounds ([3 x i8]* @.str697, i32 0, i32 0))
  %933 = icmp ne %struct._IO_FILE* %932, null
  br i1 %933, label %935, label %934

; <label>:934                                     ; preds = %930
  call void @perror(i8* %905)
  br label %951

; <label>:935                                     ; preds = %930
  br label %936

; <label>:936                                     ; preds = %935, %907
  %ofp.0 = phi %struct._IO_FILE* [ %309, %907 ], [ %932, %935 ]
  %937 = load i32* @verbose, align 4
  %938 = icmp ne i32 %937, 0
  br i1 %938, label %939, label %942

; <label>:939                                     ; preds = %936
  %940 = load %struct._IO_FILE** @stderr, align 8
  %941 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %940, i8* getelementptr inbounds ([24 x i8]* @.str698, i32 0, i32 0), i8* %905)
  br label %942

; <label>:942                                     ; preds = %939, %936
  %943 = load void (%struct._IO_FILE*)** @write_fun, align 8
  call void %943(%struct._IO_FILE* %ofp.0)
  %944 = load %struct._IO_FILE** @ifp, align 8
  %945 = call i32 @fclose(%struct._IO_FILE* %944)
  %946 = load %struct._IO_FILE** @stdout, align 8
  %947 = icmp ne %struct._IO_FILE* %ofp.0, %946
  br i1 %947, label %948, label %950

; <label>:948                                     ; preds = %942
  %949 = call i32 @fclose(%struct._IO_FILE* %ofp.0)
  br label %950

; <label>:950                                     ; preds = %948, %942
  br label %951

; <label>:951                                     ; preds = %950, %934, %324
  %ofname.0 = phi i8* [ null, %324 ], [ %905, %950 ], [ %905, %934 ]
  %status.4 = phi i32 [ 1, %324 ], [ %status.3, %950 ], [ 1, %934 ]
  %952 = load i8** @meta_data, align 8
  %953 = icmp ne i8* %952, null
  br i1 %953, label %954, label %956

; <label>:954                                     ; preds = %951
  %955 = load i8** @meta_data, align 8
  call void @free(i8* %955) #4
  br label %956

; <label>:956                                     ; preds = %954, %951
  %957 = icmp ne i8* %ofname.0, null
  br i1 %957, label %958, label %959

; <label>:958                                     ; preds = %956
  call void @free(i8* %ofname.0) #4
  br label %959

; <label>:959                                     ; preds = %958, %956
  %960 = load i32** @oprof, align 8
  %961 = icmp ne i32* %960, null
  br i1 %961, label %962, label %965

; <label>:962                                     ; preds = %959
  %963 = load i32** @oprof, align 8
  %964 = bitcast i32* %963 to i8*
  call void @free(i8* %964) #4
  br label %965

; <label>:965                                     ; preds = %962, %959
  %966 = load [4 x i16]** @image, align 8
  %967 = icmp ne [4 x i16]* %966, null
  br i1 %967, label %968, label %971

; <label>:968                                     ; preds = %965
  %969 = load [4 x i16]** @image, align 8
  %970 = bitcast [4 x i16]* %969 to i8*
  call void @free(i8* %970) #4
  br label %971

; <label>:971                                     ; preds = %968, %965
  %972 = load i32* @multi_out, align 4
  %973 = icmp ne i32 %972, 0
  br i1 %973, label %974, label %983

; <label>:974                                     ; preds = %971
  %975 = load i32* @shot_select, align 4
  %976 = add i32 %975, 1
  store i32 %976, i32* @shot_select, align 4
  %977 = load i32* @is_raw, align 4
  %978 = icmp ult i32 %976, %977
  br i1 %978, label %979, label %981

; <label>:979                                     ; preds = %974
  %980 = add nsw i32 %arg.6, -1
  br label %982

; <label>:981                                     ; preds = %974
  store i32 0, i32* @shot_select, align 4
  br label %982

; <label>:982                                     ; preds = %981, %979
  %arg.7 = phi i32 [ %980, %979 ], [ %arg.6, %981 ]
  br label %983

; <label>:983                                     ; preds = %982, %971
  %arg.8 = phi i32 [ %arg.7, %982 ], [ %arg.6, %971 ]
  br label %984

; <label>:984                                     ; preds = %983, %715, %332
  %status.5 = phi i32 [ %status.4, %983 ], [ %status.2, %715 ], [ 1, %332 ]
  %arg.9 = phi i32 [ %arg.8, %983 ], [ %arg.6, %715 ], [ %arg.6, %332 ]
  %985 = add nsw i32 %arg.9, 1
  br label %306

; <label>:986                                     ; preds = %306
  br label %987

; <label>:987                                     ; preds = %986, %301, %293, %281, %92, %3
  %.0 = phi i32 [ 1, %3 ], [ 1, %92 ], [ 1, %281 ], [ 1, %293 ], [ 1, %301 ], [ %status.0, %986 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare i32 @putenv(i8*) #3

declare i32 @printf(i8*, ...) #1

declare i32 @puts(i8*) #1

; Function Attrs: nounwind
declare i32 @isatty(i32) #3

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) #7

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare i32 @utime(i8*, %struct.utimbuf*) #3

; Function Attrs: nounwind
declare i8* @ctime(i64*) #3

declare i32 @putchar(i32) #1

declare i32 @fseeko(%struct._IO_FILE*, i64, i32) #1

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #3

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #3

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind returns_twice "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind returns_twice }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.6.2 (tags/RELEASE_362/final)"}
