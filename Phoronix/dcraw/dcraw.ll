; ModuleID = 'dcraw.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.decode = type { [2 x %struct.decode*], i32 }
%struct.anon = type { i32, [12 x i8], [15 x i8] }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, float }
%struct.anon.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.3 = type { i8*, i16, i16, [12 x i16] }
%struct.anon.4 = type { i32, [12 x i8], [19 x i8], i8 }
%union.anon = type { i32 }
%union.anon.0 = type { double }
%struct.jhead = type { i32, i32, i32, i32, i32, i32, i32, [6 x i32], [6 x %struct.decode*], i16* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.tiff_hdr = type { i16, i16, i32, i16, i16, [23 x %struct.tiff_tag], i32, i16, i16, [4 x %struct.tiff_tag], i16, i16, [10 x %struct.tiff_tag], [4 x i16], [10 x i32], [26 x i32], [512 x i8], [64 x i8], [64 x i8], [32 x i8], [20 x i8], [64 x i8] }
%struct.tiff_tag = type { i16, i16, i32, %union.anon.5 }
%union.anon.5 = type { i32 }
%struct.utimbuf = type { i64, i64 }

@shot_select = global i32 0, align 4
@multi_out = global i32 0, align 4
@aber = global [4 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@gamm = global [5 x double] [double 4.500000e-01, double 4.500000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00], align 16
@bright = global float 1.000000e+00, align 4
@user_mul = global [4 x float] zeroinitializer, align 16
@threshold = global float 0.000000e+00, align 4
@half_size = global i32 0, align 4
@four_color_rgb = global i32 0, align 4
@document_mode = global i32 0, align 4
@highlight = global i32 0, align 4
@verbose = global i32 0, align 4
@use_auto_wb = global i32 0, align 4
@use_camera_wb = global i32 0, align 4
@use_camera_matrix = global i32 -1, align 4
@output_color = global i32 1, align 4
@output_bps = global i32 8, align 4
@output_tiff = global i32 0, align 4
@med_passes = global i32 0, align 4
@no_auto_bright = global i32 0, align 4
@greybox = global [4 x i32] [i32 0, i32 0, i32 -1, i32 -1], align 16
@xyz_rgb = constant [3 x [3 x double]] [[3 x double] [double 4.124530e-01, double 3.575800e-01, double 1.804230e-01], [3 x double] [double 2.126710e-01, double 7.151600e-01, double 7.216900e-02], [3 x double] [double 1.933400e-02, double 1.191930e-01, double 9.502270e-01]], align 16
@d65_white = constant [3 x float] [float 0x3FEE6A22C0000000, float 1.000000e+00, float 0x3FF16B8960000000], align 4
@fc.filter = internal constant [16 x [16 x i8]] [[16 x i8] c"\02\01\01\03\02\03\02\00\03\02\03\00\01\02\01\00", [16 x i8] c"\00\03\00\02\00\01\03\01\00\01\01\02\00\03\03\02", [16 x i8] c"\02\03\03\02\03\01\01\03\03\01\02\01\02\00\00\03", [16 x i8] c"\00\01\00\01\00\02\00\02\02\00\03\00\01\03\02\01", [16 x i8] c"\03\01\01\02\00\01\00\02\01\03\01\03\00\01\03\00", [16 x i8] c"\02\00\00\03\03\02\03\01\02\00\02\00\03\02\02\01", [16 x i8] c"\02\03\03\01\02\01\02\01\02\01\01\02\03\00\00\01", [16 x i8] c"\01\00\00\02\03\00\00\03\00\03\00\03\02\01\02\03", [16 x i8] c"\02\03\03\01\01\02\01\00\03\02\03\00\02\03\01\03", [16 x i8] c"\01\00\02\00\03\00\03\02\00\01\01\02\00\01\00\02", [16 x i8] c"\00\01\01\03\03\02\02\01\01\03\03\00\02\01\03\02", [16 x i8] c"\02\03\02\00\00\01\03\00\02\00\01\02\03\00\01\00", [16 x i8] c"\01\03\01\02\03\02\03\02\00\02\00\01\01\00\03\00", [16 x i8] c"\00\02\00\03\01\00\00\01\01\03\03\02\03\02\02\01", [16 x i8] c"\02\01\03\02\03\01\02\01\00\03\00\02\00\02\00\02", [16 x i8] c"\00\03\01\00\00\02\00\03\02\01\03\01\01\03\01\03"], align 16
@filters = common global i32 0, align 4
@left_margin = common global i16 0, align 2
@top_margin = common global i16 0, align 2
@stderr = external global %struct._IO_FILE*
@.str = private unnamed_addr constant [25 x i8] c"%s: Out of memory in %s\0A\00", align 1
@ifname = common global i8* null, align 8
@failure = common global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16
@data_error = common global i32 0, align 4
@.str1 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@ifp = common global %struct._IO_FILE* null, align 8
@.str2 = private unnamed_addr constant [24 x i8] c"Unexpected end of file\0A\00", align 1
@.str3 = private unnamed_addr constant [26 x i8] c"Corrupt data near 0x%llx\0A\00", align 1
@order = common global i16 0, align 2
@get2.str = private unnamed_addr constant [2 x i8] c"\FF\FF", align 1
@get4.str = private unnamed_addr constant [4 x i8] c"\FF\FF\FF\FF", align 1
@raw_width = common global i16 0, align 2
@width = common global i16 0, align 2
@height = common global i16 0, align 2
@shrink = common global i16 0, align 2
@iwidth = common global i16 0, align 2
@image = common global [4 x i16]* null, align 8
@black = common global i32 0, align 4
@canon_600_fixed_wb.mul = internal constant [4 x [5 x i16]] [[5 x i16] [i16 667, i16 358, i16 397, i16 565, i16 452], [5 x i16] [i16 731, i16 390, i16 367, i16 499, i16 517], [5 x i16] [i16 1119, i16 396, i16 348, i16 448, i16 537], [5 x i16] [i16 1399, i16 485, i16 431, i16 508, i16 688]], align 16
@pre_mul = common global [4 x float] zeroinitializer, align 16
@flash_used = common global float 0.000000e+00, align 4
@canon_ev = common global float 0.000000e+00, align 4
@canon_600_coeff.table = internal constant [6 x [12 x i16]] [[12 x i16] [i16 -190, i16 702, i16 -1878, i16 2390, i16 1861, i16 -1349, i16 905, i16 -393, i16 -432, i16 944, i16 2617, i16 -2105], [12 x i16] [i16 -1203, i16 1715, i16 -1136, i16 1648, i16 1388, i16 -876, i16 267, i16 245, i16 -1641, i16 2153, i16 3921, i16 -3409], [12 x i16] [i16 -615, i16 1127, i16 -1563, i16 2075, i16 1437, i16 -925, i16 509, i16 3, i16 -756, i16 1268, i16 2519, i16 -2007], [12 x i16] [i16 -190, i16 702, i16 -1886, i16 2398, i16 2153, i16 -1641, i16 763, i16 -251, i16 -452, i16 964, i16 3040, i16 -2528], [12 x i16] [i16 -190, i16 702, i16 -1878, i16 2390, i16 1861, i16 -1349, i16 905, i16 -393, i16 -432, i16 944, i16 2617, i16 -2105], [12 x i16] [i16 -807, i16 1319, i16 -1785, i16 2297, i16 1388, i16 -876, i16 769, i16 -257, i16 -230, i16 742, i16 2067, i16 -1555]], align 16
@raw_color = common global i32 0, align 4
@colors = common global i32 0, align 4
@rgb_cam = common global [3 x [4 x float]] zeroinitializer, align 16
@canon_600_load_raw.mul = internal constant [4 x [2 x i16]] [[2 x i16] [i16 1141, i16 1145], [2 x i16] [i16 1128, i16 1109], [2 x i16] [i16 1178, i16 1149], [2 x i16] [i16 1128, i16 1109]], align 16
@maximum = common global i32 0, align 4
@raw_height = common global i16 0, align 2
@getbits.bitbuf = internal global i32 0, align 4
@getbits.vbits = internal global i32 0, align 4
@getbits.reset = internal global i32 0, align 4
@zero_after_ff = common global i32 0, align 4
@first_decode = common global [2048 x %struct.decode] zeroinitializer, align 16
@free_decode = common global %struct.decode* null, align 8
@make_decoder.leaf = internal global i32 0, align 4
@.str4 = private unnamed_addr constant [28 x i8] c"%s: decoder table overflow\0A\00", align 1
@crw_init_tables.first_tree = internal constant [3 x [29 x i8]] [[29 x i8] c"\00\01\04\02\03\01\02\00\00\00\00\00\00\00\00\00\04\03\05\06\02\07\01\08\09\00\0A\0B\FF", [29 x i8] c"\00\02\02\03\01\01\01\01\02\00\00\00\00\00\00\00\03\02\04\01\05\00\06\07\09\08\0A\0B\FF", [29 x i8] c"\00\00\06\03\01\01\02\00\00\00\00\00\00\00\00\00\06\05\07\04\08\03\09\02\00\0A\01\0B\FF"], align 16
@crw_init_tables.second_tree = internal constant [3 x [180 x i8]] [[180 x i8] c"\00\02\02\02\01\04\02\01\02\05\01\01\00\00\00\8B\03\04\02\05\01\06\07\08\12\13\11\14\09\15\22\00!\16\0A\F0#\17$12\18\193%A4B5Q678)y&\1A9VW('RUXCvYwTa\F9qxu\96\97I\B7S\D7t\B6\98GH\95i\99\91\FA\B8h\B5\B9\D6\F7\D8gFE\94\89\F8\81\D5\F6\B4\88\B1*Dr\D9\87f\D4\F5:\A7s\A9\A8\86b\C7e\C8\C9\A1\F4\D1\E9Z\92\85\A6\E7\93\E8\C1\C6zd\E1Jj\E6\B3\F1\D3\A5\8A\B2\9A\BA\84\A4c\E5\C5\F3\D2\C4\82\AA\DA\E4\F2\CA\83\A3\A2\C3\EA\C2\E2\E3\FF\FF", [180 x i8] c"\00\02\02\01\04\01\04\01\03\03\01\00\00\00\00\8C\02\03\01\04\05\12\11\06\13\07\08\14\22\09!\00#\1512\0A\16\F0$3AB\19\17%\18Q4CR)5a9qb6S&8\1A7\81'\91yUE(rY\A1\B1DiTX\D1\FAW\E1\F1\B9IGcj\F9VF\A8*Jx\99:ut\86e\C1v\B6\96\D6\89\85\C9\F5\95\B4\C7\F7\8A\97\B8s\B7\D8\D9\87\A7zH\82\84\EA\F4\A6\C5Z\94\A4\C6\92\C3h\B5\C8\E4\E5\E6\E9\A2\A3\E3\C2fg\93\AA\D4\D5\E7\F8\88\9A\D7w\C4d\E2\98\A5\CA\DA\E8\F3\F6\A9\B2\B3\F2\D2\83\BA\D3\FF\FF", [180 x i8] c"\00\00\06\02\01\03\03\02\05\01\02\02\08\0A\00u\04\05\03\06\02\07\01\08\09\12\13\14\11\15\0A\16\17\F0\00\22!\18#\19$21%3874569yWXY(Vx'A)w&Bv\99\1AU\98\97\F9HT\96\89G\B7I\FAuh\B6gi\B9\B8\D8R\D7\88\B5tQF\D9\F8:\D6\87Ez\95\D5\F6\86\B4\A9\94S*\A8C\F5\F7\D4f\A7ZD\8A\C9\E8\C8\E7\9AjsJa\C7\F4\C6e\E9r\E6q\91\93\A6\DA\92\85b\F3\C5\B2\A4\84\BAd\A5\B3\D2\81\E5\D3\AA\C4\CA\F2\B1\E4\D1\83c\EA\C3\E2\82\F1\A3\C2\A1\C1\E3\A2\E1\FF\FF"], align 16
@second_decode = common global %struct.decode* null, align 8
@tiff_compress = common global i32 0, align 4
@.str5 = private unnamed_addr constant [28 x i8] c"canon_compressed_load_raw()\00", align 1
@dng_version = common global i32 0, align 4
@.str6 = private unnamed_addr constant [14 x i8] c"ljpeg_start()\00", align 1
@curve = common global [16385 x i16] zeroinitializer, align 16
@cr2_slice = common global [3 x i16] zeroinitializer, align 2
@make = common global [64 x i8] zeroinitializer, align 16
@.str7 = private unnamed_addr constant [6 x i8] c"KODAK\00", align 1
@model2 = common global [64 x i8] zeroinitializer, align 16
@.str8 = private unnamed_addr constant [9 x i8] c"%d.%d.%d\00", align 1
@unique_id = common global i32 0, align 4
@sraw_mul = common global [4 x i16] zeroinitializer, align 2
@is_raw = common global i32 0, align 4
@fuji_width = common global i16 0, align 2
@tiff_samples = common global i32 0, align 4
@tile_length = common global i32 0, align 4
@tile_width = common global i32 0, align 4
@.str9 = private unnamed_addr constant [24 x i8] c"adobe_dng_load_raw_nc()\00", align 1
@tiff_bps = common global i32 0, align 4
@nikon_compressed_load_raw.nikon_tree = internal constant [6 x [32 x i8]] [[32 x i8] c"\00\01\05\01\01\01\01\01\01\02\00\00\00\00\00\00\05\04\03\06\02\07\01\00\08\09\0B\0A\0C\00\00\00", [32 x i8] c"\00\01\05\01\01\01\01\01\01\02\00\00\00\00\00\009Z8'\16\05\04\03\02\01\00\0B\0C\0C\00\00", [32 x i8] c"\00\01\04\02\03\01\02\00\00\00\00\00\00\00\00\00\05\04\06\03\07\02\08\01\09\00\0A\0B\0C\00\00\00", [32 x i8] c"\00\01\04\03\01\01\01\01\01\02\00\00\00\00\00\00\05\06\04\07\08\03\09\02\01\00\0A\0B\0C\0D\0E\00", [32 x i8] c"\00\01\05\01\01\01\01\01\01\01\02\00\00\00\00\00\08\5CK:)\07\06\05\04\03\02\01\00\0D\0E\00", [32 x i8] c"\00\01\04\02\02\03\01\02\00\00\00\00\00\00\00\00\07\06\08\05\09\04\0A\03\0B\0C\02\00\01\0D\0E\00"], align 16
@meta_offset = common global i64 0, align 8
@data_offset = common global i64 0, align 8
@nikon_e995.often = internal constant [4 x i8] c"\00U\AA\FF", align 1
@nikon_3700.table = internal constant [4 x %struct.anon] [%struct.anon { i32 0, [12 x i8] c"PENTAX\00\00\00\00\00\00", [15 x i8] c"Optio 33WR\00\00\00\00\00" }, %struct.anon { i32 3, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [15 x i8] c"E3200\00\00\00\00\00\00\00\00\00\00" }, %struct.anon { i32 50, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [15 x i8] c"E3700\00\00\00\00\00\00\00\00\00\00" }, %struct.anon { i32 51, [12 x i8] c"OLYMPUS\00\00\00\00\00", [15 x i8] c"C740UZ\00\00\00\00\00\00\00\00\00" }], align 16
@model = common global [64 x i8] zeroinitializer, align 16
@fuji_layout = common global i32 0, align 4
@.str10 = private unnamed_addr constant [16 x i8] c"fuji_load_raw()\00", align 1
@thumb_width = common global i16 0, align 2
@thumb_height = common global i16 0, align 2
@thumb_length = common global i32 0, align 4
@.str11 = private unnamed_addr constant [12 x i8] c"ppm_thumb()\00", align 1
@.str12 = private unnamed_addr constant [14 x i8] c"P6\0A%d %d\0A255\0A\00", align 1
@layer_thumb.map = private unnamed_addr constant [2 x [4 x i8]] [[4 x i8] c"012\00", [4 x i8] c"102\00"], align 1
@thumb_misc = common global i32 0, align 4
@.str13 = private unnamed_addr constant [14 x i8] c"layer_thumb()\00", align 1
@.str14 = private unnamed_addr constant [15 x i8] c"P%d\0A%d %d\0A255\0A\00", align 1
@.str15 = private unnamed_addr constant [15 x i8] c"rollei_thumb()\00", align 1
@.str16 = private unnamed_addr constant [23 x i8] c"phase_one_flat_field()\00", align 1
@phase_one_correct.dir = internal constant [12 x [2 x i8]] [[2 x i8] c"\FF\FF", [2 x i8] c"\FF\01", [2 x i8] c"\01\FF", [2 x i8] c"\01\01", [2 x i8] c"\FE\00", [2 x i8] c"\00\FE", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\FE\FE", [2 x i8] c"\FE\02", [2 x i8] c"\02\FE", [2 x i8] c"\02\02"], align 16
@meta_length = common global i32 0, align 4
@.str17 = private unnamed_addr constant [25 x i8] c"Phase One correction...\0A\00", align 1
@ph1 = common global %struct.anon.1 zeroinitializer, align 4
@.str18 = private unnamed_addr constant [20 x i8] c"phase_one_correct()\00", align 1
@.str19 = private unnamed_addr constant [21 x i8] c"phase_one_load_raw()\00", align 1
@ph1_bits.bitbuf = internal global i64 0, align 8
@ph1_bits.vbits = internal global i32 0, align 4
@phase_one_load_raw_c.length = internal constant [10 x i32] [i32 8, i32 7, i32 6, i32 9, i32 11, i32 10, i32 5, i32 12, i32 14, i32 13], align 16
@.str20 = private unnamed_addr constant [23 x i8] c"phase_one_load_raw_c()\00", align 1
@strip_offset = common global i64 0, align 8
@.str21 = private unnamed_addr constant [20 x i8] c"leaf_hdr_load_raw()\00", align 1
@iheight = common global i16 0, align 2
@.str22 = private unnamed_addr constant [23 x i8] c"sinar_4shot_load_raw()\00", align 1
@load_flags = common global i32 0, align 4
@.str23 = private unnamed_addr constant [8 x i8] c"OLYMPUS\00", align 1
@.str24 = private unnamed_addr constant [20 x i8] c"unpacked_load_raw()\00", align 1
@.str25 = private unnamed_addr constant [17 x i8] c"nokia_load_raw()\00", align 1
@pana_bits.buf = internal global [16384 x i8] zeroinitializer, align 16
@pana_bits.vbits = internal global i32 0, align 4
@.str26 = private unnamed_addr constant [24 x i8] c"olympus_e300_load_raw()\00", align 1
@quicktake_100_load_raw.gstep = internal constant [16 x i16] [i16 -89, i16 -60, i16 -44, i16 -32, i16 -22, i16 -15, i16 -8, i16 -2, i16 2, i16 8, i16 15, i16 22, i16 32, i16 44, i16 60, i16 89], align 16
@quicktake_100_load_raw.rstep = internal constant [6 x [4 x i16]] [[4 x i16] [i16 -3, i16 -1, i16 1, i16 3], [4 x i16] [i16 -5, i16 -1, i16 1, i16 5], [4 x i16] [i16 -8, i16 -2, i16 2, i16 8], [4 x i16] [i16 -13, i16 -3, i16 3, i16 13], [4 x i16] [i16 -19, i16 -4, i16 4, i16 19], [4 x i16] [i16 -28, i16 -6, i16 6, i16 28]], align 16
@quicktake_100_load_raw.curve = internal constant [256 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 86, i16 88, i16 90, i16 92, i16 94, i16 97, i16 99, i16 101, i16 103, i16 105, i16 107, i16 110, i16 112, i16 114, i16 116, i16 118, i16 120, i16 123, i16 125, i16 127, i16 129, i16 131, i16 134, i16 136, i16 138, i16 140, i16 142, i16 144, i16 147, i16 149, i16 151, i16 153, i16 155, i16 158, i16 160, i16 162, i16 164, i16 166, i16 168, i16 171, i16 173, i16 175, i16 177, i16 179, i16 181, i16 184, i16 186, i16 188, i16 190, i16 192, i16 195, i16 197, i16 199, i16 201, i16 203, i16 205, i16 208, i16 210, i16 212, i16 214, i16 216, i16 218, i16 221, i16 223, i16 226, i16 230, i16 235, i16 239, i16 244, i16 248, i16 252, i16 257, i16 261, i16 265, i16 270, i16 274, i16 278, i16 283, i16 287, i16 291, i16 296, i16 300, i16 305, i16 309, i16 313, i16 318, i16 322, i16 326, i16 331, i16 335, i16 339, i16 344, i16 348, i16 352, i16 357, i16 361, i16 365, i16 370, i16 374, i16 379, i16 383, i16 387, i16 392, i16 396, i16 400, i16 405, i16 409, i16 413, i16 418, i16 422, i16 426, i16 431, i16 435, i16 440, i16 444, i16 448, i16 453, i16 457, i16 461, i16 466, i16 470, i16 474, i16 479, i16 483, i16 487, i16 492, i16 496, i16 500, i16 508, i16 519, i16 531, i16 542, i16 553, i16 564, i16 575, i16 587, i16 598, i16 609, i16 620, i16 631, i16 643, i16 654, i16 665, i16 676, i16 687, i16 698, i16 710, i16 721, i16 732, i16 743, i16 754, i16 766, i16 777, i16 788, i16 799, i16 810, i16 822, i16 833, i16 844, i16 855, i16 866, i16 878, i16 889, i16 900, i16 911, i16 922, i16 933, i16 945, i16 956, i16 967, i16 978, i16 989, i16 1001, i16 1012, i16 1023], align 16
@radc_token.dstart = internal global [18 x %struct.decode*] zeroinitializer, align 16
@radc_token.dindex = internal global %struct.decode* null, align 8
@radc_token.s = internal global i32* null, align 8
@radc_token.source = internal constant [260 x i32] [i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 4, i32 2, i32 5, i32 7, i32 6, i32 5, i32 7, i32 6, i32 7, i32 8, i32 1, i32 0, i32 2, i32 1, i32 3, i32 3, i32 4, i32 4, i32 5, i32 2, i32 6, i32 7, i32 7, i32 6, i32 8, i32 5, i32 8, i32 8, i32 2, i32 1, i32 2, i32 3, i32 3, i32 0, i32 3, i32 2, i32 3, i32 4, i32 4, i32 6, i32 5, i32 5, i32 6, i32 7, i32 6, i32 8, i32 2, i32 0, i32 2, i32 1, i32 2, i32 3, i32 3, i32 2, i32 4, i32 4, i32 5, i32 6, i32 6, i32 7, i32 7, i32 5, i32 7, i32 8, i32 2, i32 1, i32 2, i32 4, i32 3, i32 0, i32 3, i32 2, i32 3, i32 3, i32 4, i32 7, i32 5, i32 5, i32 6, i32 6, i32 6, i32 8, i32 2, i32 3, i32 3, i32 1, i32 3, i32 2, i32 3, i32 4, i32 3, i32 5, i32 3, i32 6, i32 4, i32 7, i32 5, i32 0, i32 5, i32 8, i32 2, i32 3, i32 2, i32 6, i32 3, i32 0, i32 3, i32 1, i32 4, i32 4, i32 4, i32 5, i32 4, i32 7, i32 5, i32 2, i32 5, i32 8, i32 2, i32 4, i32 2, i32 7, i32 3, i32 3, i32 3, i32 6, i32 4, i32 1, i32 4, i32 2, i32 4, i32 5, i32 5, i32 0, i32 5, i32 8, i32 2, i32 6, i32 3, i32 1, i32 3, i32 3, i32 3, i32 5, i32 3, i32 7, i32 3, i32 8, i32 4, i32 0, i32 5, i32 2, i32 5, i32 4, i32 2, i32 0, i32 2, i32 1, i32 3, i32 2, i32 3, i32 3, i32 4, i32 4, i32 4, i32 5, i32 5, i32 6, i32 5, i32 7, i32 4, i32 8, i32 1, i32 0, i32 2, i32 2, i32 2, i32 -2, i32 1, i32 -3, i32 1, i32 3, i32 2, i32 -17, i32 2, i32 -5, i32 2, i32 5, i32 2, i32 17, i32 2, i32 -7, i32 2, i32 2, i32 2, i32 9, i32 2, i32 18, i32 2, i32 -18, i32 2, i32 -9, i32 2, i32 -2, i32 2, i32 7, i32 2, i32 -28, i32 2, i32 28, i32 3, i32 -49, i32 3, i32 -9, i32 3, i32 9, i32 4, i32 49, i32 5, i32 -79, i32 5, i32 79, i32 2, i32 -1, i32 2, i32 13, i32 2, i32 26, i32 3, i32 39, i32 4, i32 -16, i32 5, i32 55, i32 6, i32 -37, i32 6, i32 76, i32 2, i32 -26, i32 2, i32 -13, i32 2, i32 1, i32 3, i32 -39, i32 4, i32 16, i32 5, i32 -55, i32 6, i32 -76, i32 6, i32 37], align 16
@kodak_cbpp = common global i32 0, align 4
@kodak_radc_load_raw.last = private unnamed_addr constant [3 x i16] [i16 16, i16 16, i16 16], align 2
@use_gamma = common global i32 0, align 4
@kodak_dc120_load_raw.mul = internal constant [4 x i32] [i32 162, i32 192, i32 187, i32 92], align 16
@kodak_dc120_load_raw.add = internal constant [4 x i32] [i32 0, i32 636, i32 424, i32 212], align 16
@.str27 = private unnamed_addr constant [21 x i8] c"eight_bit_load_raw()\00", align 1
@.str28 = private unnamed_addr constant [4 x i8] c"DC2\00", align 1
@.str29 = private unnamed_addr constant [22 x i8] c"kodak_yrgb_load_raw()\00", align 1
@kodak_262_load_raw.kodak_tree = internal constant [2 x [26 x i8]] [[26 x i8] c"\00\01\05\01\01\02\00\00\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09", [26 x i8] c"\00\03\01\01\01\01\01\02\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09"], align 16
@.str30 = private unnamed_addr constant [21 x i8] c"kodak_262_load_raw()\00", align 1
@sony_decrypt.pad = internal global [128 x i32] zeroinitializer, align 16
@sony_decrypt.p = internal global i32 0, align 4
@.str31 = private unnamed_addr constant [16 x i8] c"sony_load_raw()\00", align 1
@.str32 = private unnamed_addr constant [21 x i8] c"sony_arw2_load_raw()\00", align 1
@smal_decode_segment.hist = private unnamed_addr constant [3 x [13 x i8]] [[13 x i8] c"\07\07\00\00?7/'\1F\17\0F\07\00", [13 x i8] c"\07\07\00\00?7/'\1F\17\0F\07\00", [13 x i8] c"\03\03\00\00?/\1F\0F\00\00\00\00\00"], align 16
@foveon_decoder.huff = internal global [1024 x i32] zeroinitializer, align 16
@.str33 = private unnamed_addr constant [15 x i8] c"foveon_thumb()\00", align 1
@meta_data = common global i8* null, align 8
@.str34 = private unnamed_addr constant [4 x i8] c"CMb\00", align 1
@.str35 = private unnamed_addr constant [21 x i8] c"foveon_camf_matrix()\00", align 1
@.str36 = private unnamed_addr constant [28 x i8] c"%s: \22%s\22 matrix not found!\0A\00", align 1
@.str37 = private unnamed_addr constant [20 x i8] c"foveon_make_curve()\00", align 1
@foveon_interpolate.hood = internal constant [16 x i16] [i16 -1, i16 -1, i16 -1, i16 0, i16 -1, i16 1, i16 0, i16 -1, i16 0, i16 1, i16 1, i16 -1, i16 1, i16 0, i16 1, i16 1], align 16
@.str38 = private unnamed_addr constant [25 x i8] c"Foveon interpolation...\0A\00", align 1
@.str39 = private unnamed_addr constant [19 x i8] c"DarkShieldColRange\00", align 1
@.str40 = private unnamed_addr constant [15 x i8] c"PostPolyMatrix\00", align 1
@.str41 = private unnamed_addr constant [16 x i8] c"SaturationLevel\00", align 1
@.str42 = private unnamed_addr constant [14 x i8] c"KeepImageArea\00", align 1
@.str43 = private unnamed_addr constant [16 x i8] c"ActiveImageArea\00", align 1
@.str44 = private unnamed_addr constant [9 x i8] c"ChromaDQ\00", align 1
@.str45 = private unnamed_addr constant [14 x i8] c"IncludeBlocks\00", align 1
@.str46 = private unnamed_addr constant [8 x i8] c"ColorDQ\00", align 1
@.str47 = private unnamed_addr constant [14 x i8] c"ColorDQCamRGB\00", align 1
@.str48 = private unnamed_addr constant [13 x i8] c"ColumnFilter\00", align 1
@.str49 = private unnamed_addr constant [10 x i8] c"DarkDrift\00", align 1
@.str50 = private unnamed_addr constant [17 x i8] c"DarkShieldBottom\00", align 1
@.str51 = private unnamed_addr constant [14 x i8] c"DarkShieldTop\00", align 1
@.str52 = private unnamed_addr constant [24 x i8] c"WhiteBalanceIlluminants\00", align 1
@.str53 = private unnamed_addr constant [32 x i8] c"%s: Invalid white balance \22%s\22\0A\00", align 1
@.str54 = private unnamed_addr constant [24 x i8] c"WhiteBalanceCorrections\00", align 1
@.str55 = private unnamed_addr constant [13 x i8] c"%sRGBNeutral\00", align 1
@.str56 = private unnamed_addr constant [12 x i8] c"SpatialGain\00", align 1
@.str57 = private unnamed_addr constant [10 x i8] c"BadPixels\00", align 1
@.str58 = private unnamed_addr constant [21 x i8] c"foveon_interpolate()\00", align 1
@.str59 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str60 = private unnamed_addr constant [12 x i8] c"/.badpixels\00", align 1
@.str61 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@timestamp = common global i64 0, align 8
@.str62 = private unnamed_addr constant [22 x i8] c"Fixed dead pixels at:\00", align 1
@.str63 = private unnamed_addr constant [7 x i8] c" %d,%d\00", align 1
@.str64 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str65 = private unnamed_addr constant [29 x i8] c"%s is not a valid PGM file!\0A\00", align 1
@.str66 = private unnamed_addr constant [30 x i8] c"%s has the wrong dimensions!\0A\00", align 1
@.str67 = private unnamed_addr constant [11 x i8] c"subtract()\00", align 1
@wavelet_denoise.noise = internal constant [8 x float] [float 0x3FE99B3D00000000, float 0x3FD1810620000000, float 0x3FBEC56D60000000, float 0x3FADF3B640000000, float 0x3F9DCC6400000000, float 0x3F8F212D80000000, float 0x3F80624DE0000000, float 0x3F7205BC00000000], align 16
@.str68 = private unnamed_addr constant [22 x i8] c"Wavelet denoising...\0A\00", align 1
@.str69 = private unnamed_addr constant [18 x i8] c"wavelet_denoise()\00", align 1
@cam_mul = common global [4 x float] zeroinitializer, align 16
@white = common global [8 x [8 x i16]] zeroinitializer, align 16
@.str70 = private unnamed_addr constant [38 x i8] c"%s: Cannot use camera white balance.\0A\00", align 1
@.str71 = private unnamed_addr constant [57 x i8] c"Scaling with darkness %d, saturation %d, and\0Amultipliers\00", align 1
@.str72 = private unnamed_addr constant [4 x i8] c" %f\00", align 1
@.str73 = private unnamed_addr constant [36 x i8] c"Correcting chromatic aberration...\0A\00", align 1
@.str74 = private unnamed_addr constant [15 x i8] c"scale_colors()\00", align 1
@.str75 = private unnamed_addr constant [18 x i8] c"pre_interpolate()\00", align 1
@mix_green = common global i32 0, align 4
@.str76 = private unnamed_addr constant [27 x i8] c"Bilinear interpolation...\0A\00", align 1
@vng_interpolate.cp = internal global i8* null, align 8
@vng_interpolate.terms = internal constant [384 x i8] c"\FE\FE\00\FF\00\01\FE\FE\00\00\01\01\FE\FF\FF\00\00\01\FE\FF\00\FF\00\02\FE\FF\00\00\00\03\FE\FF\00\01\01\01\FE\00\00\FF\00\06\FE\00\00\00\01\02\FE\00\00\01\00\03\FE\01\FF\00\00\04\FE\01\00\FF\01\04\FE\01\00\00\00\06\FE\01\00\01\00\02\FE\02\00\00\01\04\FE\02\00\01\00\04\FF\FE\FF\00\00\80\FF\FE\00\FF\00\01\FF\FE\01\FF\00\01\FF\FE\01\00\01\01\FF\FF\FF\01\00\88\FF\FF\01\FE\00@\FF\FF\01\FF\00\22\FF\FF\01\00\003\FF\FF\01\01\01\11\FF\00\FF\02\00\08\FF\00\00\FF\00D\FF\00\00\01\00\11\FF\00\01\FE\01@\FF\00\01\FF\00f\FF\00\01\00\01\22\FF\00\01\01\003\FF\00\01\02\01\10\FF\01\01\FF\01D\FF\01\01\00\00f\FF\01\01\01\00\22\FF\01\01\02\00\10\FF\02\00\01\00\04\FF\02\01\00\01\04\FF\02\01\01\00\04\00\FE\00\00\01\80\00\FF\00\01\01\88\00\FF\01\FE\00@\00\FF\01\00\00\11\00\FF\02\FE\00@\00\FF\02\FF\00 \00\FF\02\00\000\00\FF\02\01\01\10\00\00\00\02\01\08\00\00\02\FE\01@\00\00\02\FF\00`\00\00\02\00\01 \00\00\02\01\000\00\00\02\02\01\10\00\01\01\00\00D\00\01\01\02\00\10\00\01\02\FF\01@\00\01\02\00\00`\00\01\02\01\00 \00\01\02\02\00\10\01\FE\01\00\00\80\01\FF\01\01\00\88\01\00\01\02\00\08\01\00\02\FF\00@\01\00\02\01\00\10", align 16
@vng_interpolate.chood = internal constant [16 x i8] c"\FF\FF\FF\00\FF\01\00\01\01\01\01\00\01\FF\00\FF", align 16
@.str77 = private unnamed_addr constant [22 x i8] c"VNG interpolation...\0A\00", align 1
@.str78 = private unnamed_addr constant [18 x i8] c"vng_interpolate()\00", align 1
@.str79 = private unnamed_addr constant [22 x i8] c"PPG interpolation...\0A\00", align 1
@ahd_interpolate.dir = internal constant [4 x i32] [i32 -1, i32 1, i32 -256, i32 256], align 16
@.str80 = private unnamed_addr constant [22 x i8] c"AHD interpolation...\0A\00", align 1
@.str81 = private unnamed_addr constant [18 x i8] c"ahd_interpolate()\00", align 1
@median_filter.opt = internal constant [38 x i8] c"\01\02\04\05\07\08\00\01\03\04\06\07\01\02\04\05\07\08\00\03\05\08\04\07\03\06\01\04\02\05\04\07\04\02\06\04\04\02", align 16
@.str82 = private unnamed_addr constant [26 x i8] c"Median filter pass %d...\0A\00", align 1
@blend_highlights.trans = internal constant [2 x [4 x [4 x float]]] [[4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0x3FFBB67AE0000000, float 0xBFFBB67AE0000000, float 0.000000e+00, float 0.000000e+00], [4 x float] [float -1.000000e+00, float -1.000000e+00, float 2.000000e+00, float 0.000000e+00], [4 x float] zeroinitializer], [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00]]], align 16
@blend_highlights.itrans = internal constant [2 x [4 x [4 x float]]] [[4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0x3FEBB67AE0000000, float -5.000000e-01, float 0.000000e+00], [4 x float] [float 1.000000e+00, float 0xBFEBB67AE0000000, float -5.000000e-01, float 0.000000e+00], [4 x float] [float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] zeroinitializer], [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00], [4 x float] [float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00]]], align 16
@.str83 = private unnamed_addr constant [24 x i8] c"Blending highlights...\0A\00", align 1
@recover_highlights.dir = internal constant [8 x [2 x i8]] [[2 x i8] c"\FF\FF", [2 x i8] c"\FF\00", [2 x i8] c"\FF\01", [2 x i8] c"\00\01", [2 x i8] c"\01\01", [2 x i8] c"\01\00", [2 x i8] c"\01\FF", [2 x i8] c"\00\FF"], align 16
@.str84 = private unnamed_addr constant [26 x i8] c"Rebuilding highlights...\0A\00", align 1
@.str85 = private unnamed_addr constant [21 x i8] c"recover_highlights()\00", align 1
@.str86 = private unnamed_addr constant [15 x i8] c"11124811248488\00", align 1
@thumb_offset = common global i64 0, align 8
@parse_makernote.xlat = internal constant [2 x [256 x i8]] [[256 x i8] c"\C1\BFm\0DY\C5\13\9D\83akO\C7\7F==SY\E3\C7\E9/\95\A7\95\1F\DF\7F+)\C7\0D\DF\07\EFq\89=\13=;\13\FB\0D\89\C1e\1F\B3\0Dk)\E3\FB\EF\A3kG\7F\955\A7GO\C7\F1Y\955\11)a\F1=\B3+\0DC\89\C1\9D\9D\89e\F1\E9\DF\BF=\7FS\97\E5\E9\95\17\1D=\8B\FB\C7\E3g\A7\07\F1q\A7S\B5)\89\E5+\A7\17)\E9O\C5emk\EF\0D\89I/\B3CSe\1DI\A3\13\89Y\EFk\EFe\1D\0BY\13\E3O\9D\B3)C+\07\1D\95YYG\FB\E5\E9aG/5\7F\17\7F\EF\7F\95\95q\D3\A3\0Bq\A3\AD\0B;\B5\FB\A3\BFO\83\1D\AD\E9/qe\A3\E5\075=\0D\B5\E9\E5G;\9D\EF5\A3\BF\B3\DFS\D3\97SIq\075aq/C/\11\DF\17\97\FB\95;\7Fk\D3%\BF\AD\C7\C5\C5\B5\8B\EF/\D3\07k%I\95%Imq\C7", [256 x i8] c"\A7\BC\C9\AD\91\DF\85\E5\D4x\D5\17F|)LM\03\E9%h\11\86\B3\BD\F7oa\22\A2&4*\BE\1EF\14h\9DD\18\C2@\F4~_\1B\AD\0B\94\B6g\B4\0B\E1\EA\95\9Cf\DC\E7]l\05\DA\D5\DFz\EF\F6\DB\1F\82L\C0hG\A1\BD\EE9PVJ\DD\DF\A5\F8\C6\DA\CA\90\CA\01B\9D\8B\0CsCu\05\94\DE$\B3\804\E5,\DC\9B?\CA3E\D0\DB_\F5R\C3!\DA\E2\22rk>\D0[\A8\87\8C\06]\0F\DD\09\19\93\D0\B9\FC\8B\0F\84`3\1C\9BE\F1\F0\A3\94:\12w3MDx(<\9E\FDeW\16\94k\FBY\D0\C8\226\DB\D2c\98C\A1\04\87\86\F7\A6&\BB\D6YM\BFj.\AA+\EF\E6x\B6N\E0/\DC|\BEW\192~*\D0\B8\BA)\00<R}\A8I;-\EB%I\FA\A3\AA9\A7\C5\A7P\116\FB\C6gJ\F5\A5\12e~\B0\DF\AFN\B3a\7F/"], align 16
@.str87 = private unnamed_addr constant [4 x i8] c"KDK\00", align 1
@.str88 = private unnamed_addr constant [4 x i8] c"VER\00", align 1
@.str89 = private unnamed_addr constant [5 x i8] c"IIII\00", align 1
@.str90 = private unnamed_addr constant [5 x i8] c"MMMM\00", align 1
@.str91 = private unnamed_addr constant [3 x i8] c"KC\00", align 1
@.str92 = private unnamed_addr constant [4 x i8] c"MLY\00", align 1
@.str93 = private unnamed_addr constant [6 x i8] c"Nikon\00", align 1
@.str94 = private unnamed_addr constant [9 x i8] c"FUJIFILM\00", align 1
@.str95 = private unnamed_addr constant [5 x i8] c"SONY\00", align 1
@.str96 = private unnamed_addr constant [10 x i8] c"Panasonic\00", align 1
@.str97 = private unnamed_addr constant [6 x i8] c"OLYMP\00", align 1
@.str98 = private unnamed_addr constant [6 x i8] c"LEICA\00", align 1
@.str99 = private unnamed_addr constant [6 x i8] c"Ricoh\00", align 1
@.str100 = private unnamed_addr constant [6 x i8] c"EPSON\00", align 1
@.str101 = private unnamed_addr constant [4 x i8] c"AOC\00", align 1
@.str102 = private unnamed_addr constant [4 x i8] c"QVC\00", align 1
@.str103 = private unnamed_addr constant [6 x i8] c"NIKON\00", align 1
@iso_speed = common global float 0.000000e+00, align 4
@aperture = common global float 0.000000e+00, align 4
@shutter = common global float 0.000000e+00, align 4
@shot_order = common global i32 0, align 4
@.str104 = private unnamed_addr constant [6 x i8] c"Canon\00", align 1
@artist = common global [64 x i8] zeroinitializer, align 16
@.str105 = private unnamed_addr constant [7 x i8] c"PENTAX\00", align 1
@.str106 = private unnamed_addr constant [19 x i8] c"012347800000005896\00", align 1
@.str107 = private unnamed_addr constant [13 x i8] c"66666>666;6A\00", align 1
@flip = common global i32 0, align 4
@cmatrix = common global [3 x [4 x float]] zeroinitializer, align 16
@load_raw = common global void (...)* null, align 8
@.str108 = private unnamed_addr constant [18 x i8] c"%d:%d:%d %d:%d:%d\00", align 1
@.str109 = private unnamed_addr constant [8 x i8] c"EASTMAN\00", align 1
@focal_len = common global float 0.000000e+00, align 4
@exif_cfa = common global i32 0, align 4
@gpsdata = common global [32 x i32] zeroinitializer, align 16
@romm_coeff.rgb_romm = internal constant [3 x [3 x float]] [[3 x float] [float 0x4000460700000000, float 0xBFE7470640000000, float 0xBFD3A20DE0000000], [3 x float] [float 0xBFCD49ADC0000000, float 0x3FF3B52980000000, float 0xBF67EFE0C0000000], [3 x float] [float 0xBF818A86E0000000, float 0xBFC39E7320000000, float 0x3FF296E480000000]], align 16
@parse_mos.mod = internal global [21 x i8*] [i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str111, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str112, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str113, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str114, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str116, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str117, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str119, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str120, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str121, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str122, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str123, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str124, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str126, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str129, i32 0, i32 0)], align 16
@.str110 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str111 = private unnamed_addr constant [5 x i8] c"DCB2\00", align 1
@.str112 = private unnamed_addr constant [7 x i8] c"Volare\00", align 1
@.str113 = private unnamed_addr constant [8 x i8] c"Cantare\00", align 1
@.str114 = private unnamed_addr constant [6 x i8] c"CMost\00", align 1
@.str115 = private unnamed_addr constant [8 x i8] c"Valeo 6\00", align 1
@.str116 = private unnamed_addr constant [9 x i8] c"Valeo 11\00", align 1
@.str117 = private unnamed_addr constant [9 x i8] c"Valeo 22\00", align 1
@.str118 = private unnamed_addr constant [10 x i8] c"Valeo 11p\00", align 1
@.str119 = private unnamed_addr constant [9 x i8] c"Valeo 17\00", align 1
@.str120 = private unnamed_addr constant [9 x i8] c"Aptus 17\00", align 1
@.str121 = private unnamed_addr constant [9 x i8] c"Aptus 22\00", align 1
@.str122 = private unnamed_addr constant [9 x i8] c"Aptus 75\00", align 1
@.str123 = private unnamed_addr constant [9 x i8] c"Aptus 65\00", align 1
@.str124 = private unnamed_addr constant [10 x i8] c"Aptus 54S\00", align 1
@.str125 = private unnamed_addr constant [10 x i8] c"Aptus 65S\00", align 1
@.str126 = private unnamed_addr constant [10 x i8] c"Aptus 75S\00", align 1
@.str127 = private unnamed_addr constant [6 x i8] c"AFi 5\00", align 1
@.str128 = private unnamed_addr constant [6 x i8] c"AFi 6\00", align 1
@.str129 = private unnamed_addr constant [6 x i8] c"AFi 7\00", align 1
@.str130 = private unnamed_addr constant [18 x i8] c"JPEG_preview_data\00", align 1
@.str131 = private unnamed_addr constant [19 x i8] c"icc_camera_profile\00", align 1
@profile_offset = common global i64 0, align 8
@profile_length = common global i32 0, align 4
@.str132 = private unnamed_addr constant [19 x i8] c"ShootObj_back_type\00", align 1
@.str133 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str134 = private unnamed_addr constant [26 x i8] c"icc_camera_to_tone_matrix\00", align 1
@.str135 = private unnamed_addr constant [22 x i8] c"CaptProf_color_matrix\00", align 1
@.str136 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str137 = private unnamed_addr constant [26 x i8] c"CaptProf_number_of_planes\00", align 1
@.str138 = private unnamed_addr constant [27 x i8] c"CaptProf_raw_data_rotation\00", align 1
@.str139 = private unnamed_addr constant [24 x i8] c"CaptProf_mosaic_pattern\00", align 1
@.str140 = private unnamed_addr constant [23 x i8] c"ImgProf_rotation_angle\00", align 1
@.str141 = private unnamed_addr constant [17 x i8] c"NeutObj_neutrals\00", align 1
@.str142 = private unnamed_addr constant [5 x i8] c"\94a\16I\00", align 1
@parse_tiff_ifd.cfa_pc = private unnamed_addr constant [4 x i8] c"\00\01\02\03", align 1
@parse_tiff_ifd.ab = private unnamed_addr constant [4 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@parse_tiff_ifd.xyz = private unnamed_addr constant [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@parse_tiff_ifd.sony_curve = private unnamed_addr constant [6 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 4095], align 16
@tiff_nifds = common global i32 0, align 4
@tiff_ifd = common global [10 x %struct.anon.2] zeroinitializer, align 16
@desc = common global [512 x i8] zeroinitializer, align 16
@.str143 = private unnamed_addr constant [9 x i8] c"50132467\00", align 1
@.str144 = private unnamed_addr constant [6 x i8] c"Adobe\00", align 1
@.str145 = private unnamed_addr constant [6 x i8] c"dcraw\00", align 1
@.str146 = private unnamed_addr constant [6 x i8] c"UFRaw\00", align 1
@.str147 = private unnamed_addr constant [7 x i8] c"Bibble\00", align 1
@.str148 = private unnamed_addr constant [11 x i8] c"Nikon Scan\00", align 1
@.str149 = private unnamed_addr constant [27 x i8] c"Digital Photo Professional\00", align 1
@.str150 = private unnamed_addr constant [10 x i8] c"DSLR-A100\00", align 1
@.str151 = private unnamed_addr constant [8 x i8] c"Sarnoff\00", align 1
@.str152 = private unnamed_addr constant [4 x i8] c"\03\04\05\00", align 1
@.str153 = private unnamed_addr constant [5 x i8] c"\05\03\04\01\00", align 1
@.str154 = private unnamed_addr constant [7 x i8] c"MATRIX\00", align 1
@.str155 = private unnamed_addr constant [5 x i8] c"Leaf\00", align 1
@.str156 = private unnamed_addr constant [7 x i8] c"Imacon\00", align 1
@.str157 = private unnamed_addr constant [14 x i8] c"Ixpress %d-Mp\00", align 1
@.str158 = private unnamed_addr constant [9 x i8] c"Neutral \00", align 1
@.str159 = private unnamed_addr constant [9 x i8] c"%f %f %f\00", align 1
@.str160 = private unnamed_addr constant [11 x i8] c"Hasselblad\00", align 1
@.str161 = private unnamed_addr constant [4 x i8] c"DNG\00", align 1
@cdesc = common global [5 x i8] zeroinitializer, align 1
@pixel_aspect = common global double 0.000000e+00, align 8
@tiff_flip = common global i32 0, align 4
@write_thumb = common global void (%struct._IO_FILE*)* null, align 8
@thumb_load_raw = common global void (...)* null, align 8
@.str162 = private unnamed_addr constant [12 x i8] c"DiMAGE A200\00", align 1
@.str163 = private unnamed_addr constant [22 x i8] c"parse_external_jpeg()\00", align 1
@.str164 = private unnamed_addr constant [5 x i8] c".jpg\00", align 1
@.str165 = private unnamed_addr constant [5 x i8] c".JPG\00", align 1
@.str166 = private unnamed_addr constant [30 x i8] c"Reading metadata from %s ...\0A\00", align 1
@.str167 = private unnamed_addr constant [33 x i8] c"Failed to read metadata from %s\0A\00", align 1
@ciff_block_1030.key = internal constant [2 x i16] [i16 1040, i16 17907], align 2
@parse_ciff.key = private unnamed_addr constant [2 x i16] [i16 1040, i16 17907], align 2
@.str168 = private unnamed_addr constant [5 x i8] c"Pro1\00", align 1
@.str169 = private unnamed_addr constant [19 x i8] c"012346000000000000\00", align 1
@.str170 = private unnamed_addr constant [19 x i8] c"01345:000000006008\00", align 1
@.str171 = private unnamed_addr constant [19 x i8] c"023457000000006000\00", align 1
@.str172 = private unnamed_addr constant [11 x i8] c"0134567028\00", align 1
@.str173 = private unnamed_addr constant [4 x i8] c"DAT\00", align 1
@.str174 = private unnamed_addr constant [4 x i8] c"TIM\00", align 1
@.str175 = private unnamed_addr constant [9 x i8] c"%d:%d:%d\00", align 1
@.str176 = private unnamed_addr constant [4 x i8] c"HDR\00", align 1
@.str177 = private unnamed_addr constant [4 x i8] c"X  \00", align 1
@.str178 = private unnamed_addr constant [4 x i8] c"Y  \00", align 1
@.str179 = private unnamed_addr constant [4 x i8] c"TX \00", align 1
@.str180 = private unnamed_addr constant [4 x i8] c"TY \00", align 1
@.str181 = private unnamed_addr constant [5 x i8] c"EOHD\00", align 1
@.str182 = private unnamed_addr constant [7 x i8] c"Rollei\00", align 1
@.str183 = private unnamed_addr constant [9 x i8] c"d530flex\00", align 1
@.str184 = private unnamed_addr constant [5 x i8] c"META\00", align 1
@.str185 = private unnamed_addr constant [6 x i8] c"THUMB\00", align 1
@.str186 = private unnamed_addr constant [5 x i8] c"RAW0\00", align 1
@.str187 = private unnamed_addr constant [5 x i8] c"0653\00", align 1
@.str188 = private unnamed_addr constant [8 x i8] c" camera\00", align 1
@.str189 = private unnamed_addr constant [10 x i8] c"Phase One\00", align 1
@.str190 = private unnamed_addr constant [11 x i8] c"LightPhase\00", align 1
@.str191 = private unnamed_addr constant [5 x i8] c"H 10\00", align 1
@.str192 = private unnamed_addr constant [5 x i8] c"H 20\00", align 1
@.str193 = private unnamed_addr constant [5 x i8] c"H 25\00", align 1
@parse_riff.mon = internal constant [12 x [4 x i8]] [[4 x i8] c"Jan\00", [4 x i8] c"Feb\00", [4 x i8] c"Mar\00", [4 x i8] c"Apr\00", [4 x i8] c"May\00", [4 x i8] c"Jun\00", [4 x i8] c"Jul\00", [4 x i8] c"Aug\00", [4 x i8] c"Sep\00", [4 x i8] c"Oct\00", [4 x i8] c"Nov\00", [4 x i8] c"Dec\00"], align 16
@.str194 = private unnamed_addr constant [5 x i8] c"RIFF\00", align 1
@.str195 = private unnamed_addr constant [5 x i8] c"LIST\00", align 1
@.str196 = private unnamed_addr constant [5 x i8] c"nctg\00", align 1
@.str197 = private unnamed_addr constant [5 x i8] c"IDIT\00", align 1
@.str198 = private unnamed_addr constant [22 x i8] c"%*s %s %d %d:%d:%d %d\00", align 1
@.str199 = private unnamed_addr constant [5 x i8] c"SMaL\00", align 1
@.str200 = private unnamed_addr constant [10 x i8] c"v%d %dx%d\00", align 1
@.str201 = private unnamed_addr constant [5 x i8] c"CINE\00", align 1
@.str202 = private unnamed_addr constant [4 x i8] c"ISO\00", align 1
@.str203 = private unnamed_addr constant [9 x i8] c"CAMMANUF\00", align 1
@.str204 = private unnamed_addr constant [9 x i8] c"CAMMODEL\00", align 1
@.str205 = private unnamed_addr constant [8 x i8] c"WB_DESC\00", align 1
@.str206 = private unnamed_addr constant [5 x i8] c"TIME\00", align 1
@.str207 = private unnamed_addr constant [8 x i8] c"EXPTIME\00", align 1
@.str208 = private unnamed_addr constant [9 x i8] c"APERTURE\00", align 1
@.str209 = private unnamed_addr constant [8 x i8] c"FLENGTH\00", align 1
@is_foveon = common global i32 0, align 4
@adobe_coeff.table = internal constant [211 x %struct.anon.3] [%struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str210, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 17576, i16 -3191, i16 -3318, i16 5210, i16 6733, i16 -1942, i16 9031, i16 1280, i16 -124, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str211, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 24542, i16 -10860, i16 -3401, i16 -1490, i16 11370, i16 -297, i16 2858, i16 -605, i16 3225, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str212, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 20482, i16 -7172, i16 -3125, i16 -1033, i16 10410, i16 -285, i16 2542, i16 226, i16 3136, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str213, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9805, i16 -2689, i16 -1312, i16 -5803, i16 13064, i16 3068, i16 -2438, i16 3075, i16 8775, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str214, i32 0, i32 0), i16 0, i16 4000, [12 x i16] [i16 6188, i16 -1341, i16 -890, i16 -7168, i16 14489, i16 2937, i16 -2640, i16 3228, i16 8483, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str215, i32 0, i32 0), i16 0, i16 15600, [12 x i16] [i16 4716, i16 603, i16 -830, i16 -7798, i16 15474, i16 2480, i16 -1496, i16 1937, i16 6651, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str216, i32 0, i32 0), i16 0, i16 3692, [12 x i16] [i16 6347, i16 -479, i16 -972, i16 -8297, i16 15954, i16 2480, i16 -1968, i16 2131, i16 7649, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str217, i32 0, i32 0), i16 0, i16 4000, [12 x i16] [i16 8197, i16 -2000, i16 -1118, i16 -6714, i16 14335, i16 2592, i16 -2536, i16 3178, i16 8266, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str218, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14155, i16 -5065, i16 -1382, i16 -6550, i16 14633, i16 2039, i16 -1623, i16 1824, i16 6561, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str219, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 6599, i16 -537, i16 -891, i16 -8071, i16 15783, i16 2424, i16 -1983, i16 2234, i16 7462, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str220, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 6257, i16 -303, i16 -1000, i16 -7880, i16 15621, i16 2396, i16 -1714, i16 1904, i16 7046, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str221, i32 0, i32 0), i16 0, i16 16224, [12 x i16] [i16 6071, i16 -747, i16 -856, i16 -7653, i16 15365, i16 2441, i16 -2025, i16 2553, i16 7315, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str222, i32 0, i32 0), i16 0, i16 15763, [12 x i16] [i16 4920, i16 616, i16 -593, i16 -6493, i16 13964, i16 2784, i16 -1774, i16 3178, i16 7005, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str223, i32 0, i32 0), i16 0, i16 4000, [12 x i16] [i16 8197, i16 -2000, i16 -1118, i16 -6714, i16 14335, i16 2592, i16 -2536, i16 3178, i16 8266, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str224, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 6018, i16 -617, i16 -965, i16 -8645, i16 15881, i16 2975, i16 -1530, i16 1719, i16 7642, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str225, i32 0, i32 0), i16 0, i16 3726, [12 x i16] [i16 7054, i16 -1501, i16 -990, i16 -8156, i16 15544, i16 2812, i16 -1278, i16 1414, i16 7796, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str226, i32 0, i32 0), i16 0, i16 14605, [12 x i16] [i16 5784, i16 -262, i16 -821, i16 -7539, i16 15064, i16 2672, i16 -1982, i16 2681, i16 7427, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str227, i32 0, i32 0), i16 0, i16 3651, [12 x i16] [i16 6771, i16 -1139, i16 -977, i16 -7818, i16 15123, i16 2928, i16 -1244, i16 1437, i16 7533, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str228, i32 0, i32 0), i16 0, i16 15280, [12 x i16] [i16 5859, i16 -211, i16 -930, i16 -8255, i16 16017, i16 2353, i16 -1732, i16 1887, i16 7448, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str229, i32 0, i32 0), i16 0, i16 3712, [12 x i16] [i16 6517, i16 -602, i16 -867, i16 -8180, i16 15926, i16 2378, i16 -1618, i16 1771, i16 7633, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str230, i32 0, i32 0), i16 0, i16 3712, [12 x i16] [i16 6240, i16 -466, i16 -822, i16 -8180, i16 15825, i16 2500, i16 -1801, i16 1938, i16 8042, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str231, i32 0, i32 0), i16 0, i16 15280, [12 x i16] [i16 6291, i16 -540, i16 -976, i16 -8350, i16 16145, i16 2311, i16 -1714, i16 1858, i16 7326, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str232, i32 0, i32 0), i16 0, i16 3712, [12 x i16] [i16 6264, i16 -582, i16 -724, i16 -8312, i16 15948, i16 2504, i16 -1744, i16 1919, i16 8664, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str233, i32 0, i32 0), i16 0, i16 3616, [12 x i16] [i16 4374, i16 3631, i16 -1743, i16 -7520, i16 15212, i16 2472, i16 -2892, i16 3632, i16 8161, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str234, i32 0, i32 0), i16 0, i16 3616, [12 x i16] [i16 6806, i16 -179, i16 -1020, i16 -8097, i16 16415, i16 1687, i16 -3267, i16 4236, i16 7690, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str235, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8197, i16 -2000, i16 -1118, i16 -6714, i16 14335, i16 2592, i16 -2536, i16 3178, i16 8266, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str236, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5300, i16 9846, i16 1776, i16 3436, i16 684, i16 3939, i16 -5540, i16 9879, i16 6200, i16 -1404, i16 11175, i16 217] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str237, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -4801, i16 9475, i16 1952, i16 2926, i16 1611, i16 4094, i16 -5259, i16 10164, i16 5947, i16 -1554, i16 10883, i16 547] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str238, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11093, i16 -3906, i16 -1028, i16 -5047, i16 12492, i16 2879, i16 -1003, i16 1750, i16 5561, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str239, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -4778, i16 9467, i16 2172, i16 4743, i16 -1141, i16 4344, i16 -5146, i16 9908, i16 6077, i16 -1566, i16 11051, i16 557] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str240, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9087, i16 -2693, i16 -1049, i16 -6715, i16 14382, i16 2537, i16 -2291, i16 2819, i16 7790, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str241, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9212, i16 -2781, i16 -1073, i16 -6573, i16 14189, i16 2605, i16 -2300, i16 2844, i16 7664, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str242, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9757, i16 -2872, i16 -933, i16 -5972, i16 13861, i16 2301, i16 -1622, i16 2328, i16 7212, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str243, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9877, i16 -3775, i16 -871, i16 -7613, i16 14807, i16 3072, i16 -1448, i16 1305, i16 7485, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str244, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7368, i16 -2141, i16 -598, i16 -5621, i16 13254, i16 2625, i16 -1418, i16 1696, i16 5743, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str245, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10062, i16 -3522, i16 -999, i16 -7643, i16 15117, i16 2730, i16 -765, i16 817, i16 7323, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str246, i32 0, i32 0), i16 34, i16 0, [12 x i16] [i16 -4155, i16 9818, i16 1529, i16 3939, i16 -25, i16 4522, i16 -5521, i16 9870, i16 6610, i16 -2238, i16 10873, i16 1342] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str247, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -4963, i16 9896, i16 2235, i16 4642, i16 -987, i16 4294, i16 -5162, i16 10011, i16 5859, i16 -1770, i16 11230, i16 577] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str248, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10566, i16 -3652, i16 -1129, i16 -6552, i16 14662, i16 2006, i16 -2197, i16 2581, i16 7670, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str249, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8510, i16 -2487, i16 -940, i16 -6869, i16 14231, i16 2900, i16 -2318, i16 2829, i16 9013, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str250, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8163, i16 -2333, i16 -955, i16 -6682, i16 14174, i16 2751, i16 -2077, i16 2597, i16 8041, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str251, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8882, i16 -2571, i16 -863, i16 -6348, i16 14234, i16 2288, i16 -1516, i16 2172, i16 6569, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str252, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8795, i16 -2482, i16 -797, i16 -7804, i16 15403, i16 2573, i16 -1422, i16 1996, i16 7082, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str253, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9976, i16 -3810, i16 -832, i16 -7115, i16 14463, i16 2906, i16 -901, i16 989, i16 7889, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str254, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 15591, i16 -6402, i16 -1592, i16 -5365, i16 13198, i16 2168, i16 -1300, i16 1824, i16 5075, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str255, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 15265, i16 -6193, i16 -1558, i16 -4125, i16 12116, i16 2010, i16 -888, i16 1639, i16 5220, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str256, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14201, i16 -5308, i16 -1757, i16 -6087, i16 14472, i16 1617, i16 -2191, i16 3105, i16 5348, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str257, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 13124, i16 -5329, i16 -1390, i16 -3602, i16 11658, i16 1944, i16 -1612, i16 2863, i16 4885, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str258, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9427, i16 -3036, i16 -959, i16 -2581, i16 10671, i16 1911, i16 -1039, i16 1982, i16 4430, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str259, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14573, i16 -5482, i16 -1546, i16 -1266, i16 9799, i16 1468, i16 -1040, i16 1912, i16 3810, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str260, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 14062, i16 -5199, i16 -1446, i16 -4712, i16 12470, i16 2243, i16 -1286, i16 2028, i16 4836, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str261, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3390, i16 480, i16 -500, i16 -800, i16 3610, i16 340, i16 -550, i16 2336, i16 1192, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str262, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3390, i16 480, i16 -500, i16 -800, i16 3610, i16 340, i16 -550, i16 2336, i16 1192, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([5 x i8]* @.str201, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 20183, i16 -4295, i16 -423, i16 -3940, i16 15330, i16 3985, i16 -280, i16 4870, i16 9800, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str263, i32 0, i32 0), i16 0, i16 3870, [12 x i16] [i16 7777, i16 1285, i16 -1053, i16 -9280, i16 16543, i16 2916, i16 -3677, i16 5679, i16 7060, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str264, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 6827, i16 -1878, i16 -732, i16 -8429, i16 16012, i16 2564, i16 -704, i16 592, i16 7145, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str265, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11044, i16 -3888, i16 -1120, i16 -7248, i16 15168, i16 2208, i16 -1531, i16 2277, i16 8069, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([22 x i8]* @.str266, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9183, i16 -2526, i16 -1078, i16 -7461, i16 15071, i16 2574, i16 -2022, i16 2440, i16 8639, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str267, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11044, i16 -3888, i16 -1120, i16 -7248, i16 15168, i16 2208, i16 -1531, i16 2277, i16 8069, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str268, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10004, i16 -3219, i16 -1201, i16 -7036, i16 15047, i16 2107, i16 -1863, i16 2565, i16 7736, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([24 x i8]* @.str269, i32 0, i32 0), i16 514, i16 0, [12 x i16] [i16 11521, i16 -4355, i16 -1065, i16 -6524, i16 13767, i16 3058, i16 -1466, i16 1984, i16 6045, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([24 x i8]* @.str270, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10004, i16 -3219, i16 -1201, i16 -7036, i16 15047, i16 2107, i16 -1863, i16 2565, i16 7736, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str271, i32 0, i32 0), i16 128, i16 0, [12 x i16] [i16 12492, i16 -4690, i16 -1402, i16 -7033, i16 15423, i16 1647, i16 -1507, i16 2111, i16 7697, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str272, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11807, i16 -4612, i16 -1294, i16 -8927, i16 16968, i16 1988, i16 -2120, i16 2741, i16 8006, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str273, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12300, i16 -5110, i16 -1304, i16 -9117, i16 17143, i16 1998, i16 -1947, i16 2448, i16 8100, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str274, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8754, i16 -2732, i16 -1019, i16 -7204, i16 15069, i16 2276, i16 -1702, i16 2334, i16 6982, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str275, i32 0, i32 0), i16 0, i16 15872, [12 x i16] [i16 11940, i16 -4431, i16 -1255, i16 -6766, i16 14428, i16 2542, i16 -993, i16 1165, i16 7421, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str276, i32 0, i32 0), i16 0, i16 15872, [12 x i16] [i16 11940, i16 -4431, i16 -1255, i16 -6766, i16 14428, i16 2542, i16 -993, i16 1165, i16 7421, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str277, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9636, i16 -2804, i16 -988, i16 -7442, i16 15040, i16 2589, i16 -1803, i16 2311, i16 8621, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str278, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9636, i16 -2804, i16 -988, i16 -7442, i16 15040, i16 2589, i16 -1803, i16 2311, i16 8621, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str279, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12628, i16 -4887, i16 -1401, i16 -6861, i16 14996, i16 1962, i16 -2198, i16 2782, i16 7091, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str280, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10190, i16 -3506, i16 -1312, i16 -7153, i16 15051, i16 2238, i16 -2003, i16 2399, i16 7505, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str281, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10491, i16 -3423, i16 -1145, i16 -7385, i16 15027, i16 2538, i16 -1809, i16 2275, i16 8692, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str282, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10491, i16 -3423, i16 -1145, i16 -7385, i16 15027, i16 2538, i16 -1809, i16 2275, i16 8692, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str283, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12343, i16 -4515, i16 -1285, i16 -7165, i16 14899, i16 2435, i16 -1895, i16 2496, i16 8800, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([23 x i8]* @.str284, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12343, i16 -4515, i16 -1285, i16 -7165, i16 14899, i16 2435, i16 -1895, i16 2496, i16 8800, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str285, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 21461, i16 -10807, i16 -1441, i16 -2332, i16 10599, i16 1999, i16 289, i16 875, i16 7703, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str286, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12300, i16 -5110, i16 -1304, i16 -9117, i16 17143, i16 1998, i16 -1947, i16 2448, i16 8100, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str287, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7025, i16 -1415, i16 -704, i16 -5188, i16 13765, i16 1424, i16 -1248, i16 2742, i16 6038, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str288, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 13891, i16 -6055, i16 -803, i16 -465, i16 9919, i16 642, i16 2121, i16 82, i16 1291, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str289, i32 0, i32 0), i16 8, i16 0, [12 x i16] [i16 17523, i16 -4827, i16 -2510, i16 756, i16 8546, i16 -137, i16 6113, i16 1649, i16 2250, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str290, i32 0, i32 0), i16 8, i16 0, [12 x i16] [i16 20620, i16 -7572, i16 -2801, i16 -103, i16 10073, i16 -396, i16 3551, i16 -233, i16 2220, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str291, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10868, i16 -1852, i16 -644, i16 -1537, i16 11083, i16 484, i16 2343, i16 628, i16 2216, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str292, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10592, i16 -2206, i16 -967, i16 -1944, i16 11685, i16 230, i16 2206, i16 670, i16 1273, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str293, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10592, i16 -2206, i16 -967, i16 -1944, i16 11685, i16 230, i16 2206, i16 670, i16 1273, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str294, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9898, i16 -2700, i16 -940, i16 -2478, i16 12219, i16 206, i16 1985, i16 634, i16 1031, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str295, i32 0, i32 0), i16 180, i16 0, [12 x i16] [i16 24542, i16 -10860, i16 -3401, i16 -1490, i16 11370, i16 -297, i16 2858, i16 -605, i16 3225, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str296, i32 0, i32 0), i16 188, i16 0, [12 x i16] [i16 20482, i16 -7172, i16 -3125, i16 -1033, i16 10410, i16 -285, i16 2542, i16 226, i16 3136, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str297, i32 0, i32 0), i16 180, i16 0, [12 x i16] [i16 23617, i16 -10175, i16 -3149, i16 -2054, i16 11749, i16 -272, i16 2586, i16 -489, i16 3453, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str298, i32 0, i32 0), i16 185, i16 0, [12 x i16] [i16 13095, i16 -6231, i16 154, i16 12221, i16 -21, i16 -2137, i16 895, i16 4602, i16 2258, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str299, i32 0, i32 0), i16 214, i16 0, [12 x i16] [i16 18244, i16 -6351, i16 -2739, i16 -791, i16 11193, i16 -521, i16 3711, i16 -129, i16 2802, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str300, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11775, i16 -5884, i16 950, i16 9556, i16 1846, i16 -1286, i16 -1019, i16 6221, i16 2728, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str301, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16623, i16 -6309, i16 -1411, i16 -4344, i16 13923, i16 323, i16 2285, i16 274, i16 2926, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str302, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5494, i16 2393, i16 -232, i16 -6427, i16 13850, i16 2846, i16 -1876, i16 3997, i16 5445, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str303, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5494, i16 2393, i16 -232, i16 -6427, i16 13850, i16 2846, i16 -1876, i16 3997, i16 5445, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str304, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7791, i16 3128, i16 -776, i16 -8588, i16 16458, i16 2039, i16 -2455, i16 4006, i16 6198, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str305, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16414, i16 -6060, i16 -1470, i16 -3555, i16 13037, i16 473, i16 2545, i16 122, i16 4948, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str306, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 21179, i16 -8316, i16 -2918, i16 -915, i16 11019, i16 -165, i16 3477, i16 -180, i16 4210, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str307, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9658, i16 -3314, i16 -823, i16 -5163, i16 12695, i16 2768, i16 -1342, i16 1843, i16 6044, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str308, i32 0, i32 0), i16 0, i16 3964, [12 x i16] [i16 10511, i16 -3836, i16 -1102, i16 -6946, i16 14587, i16 2558, i16 -1481, i16 1792, i16 6246, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str309, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 12805, i16 -4662, i16 -1376, i16 -7480, i16 15267, i16 2360, i16 -1626, i16 2194, i16 7904, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str310, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3952, i16 2189, i16 449, i16 -6701, i16 14585, i16 2275, i16 -4536, i16 7349, i16 6536, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str311, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 3952, i16 2189, i16 449, i16 -6701, i16 14585, i16 2275, i16 -4536, i16 7349, i16 6536, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str312, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8236, i16 1746, i16 -1314, i16 -8251, i16 15953, i16 2428, i16 -3673, i16 5786, i16 5771, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str313, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7914, i16 1414, i16 -1190, i16 -8777, i16 16582, i16 2280, i16 -2811, i16 4605, i16 5562, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str314, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7914, i16 1414, i16 -1190, i16 -8777, i16 16582, i16 2280, i16 -2811, i16 4605, i16 5562, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([5 x i8]* @.str155, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8236, i16 1746, i16 -1314, i16 -8251, i16 15953, i16 2428, i16 -3673, i16 5786, i16 5771, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str315, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7645, i16 2579, i16 -1363, i16 -8689, i16 16717, i16 2015, i16 -3712, i16 5941, i16 5961, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str316, i32 0, i32 0), i16 110, i16 0, [12 x i16] [i16 16695, i16 -3761, i16 -2151, i16 155, i16 9682, i16 163, i16 3433, i16 951, i16 4904, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str317, i32 0, i32 0), i16 0, i16 3965, [12 x i16] [i16 8983, i16 -2942, i16 -963, i16 -6556, i16 14476, i16 2237, i16 -2426, i16 2887, i16 8014, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str318, i32 0, i32 0), i16 0, i16 3965, [12 x i16] [i16 11368, i16 -3894, i16 -1242, i16 -6521, i16 14358, i16 2339, i16 -2475, i16 3056, i16 7285, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str319, i32 0, i32 0), i16 0, i16 3965, [12 x i16] [i16 9144, i16 -2777, i16 -998, i16 -6676, i16 14556, i16 2281, i16 -2470, i16 3019, i16 7744, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str320, i32 0, i32 0), i16 0, i16 3979, [12 x i16] [i16 9274, i16 -2547, i16 -1167, i16 -8220, i16 16323, i16 1943, i16 -2273, i16 2720, i16 8340, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str321, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8560, i16 -2487, i16 -986, i16 -8112, i16 15535, i16 2771, i16 -1209, i16 1324, i16 7743, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str322, i32 0, i32 0), i16 0, i16 3983, [12 x i16] [i16 9097, i16 -2726, i16 -1053, i16 -8073, i16 15506, i16 2762, i16 -966, i16 981, i16 7763, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str323, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11280, i16 -3564, i16 -1370, i16 -4655, i16 12374, i16 2282, i16 -1423, i16 2168, i16 5396, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str324, i32 0, i32 0), i16 0, i16 4091, [12 x i16] [i16 10284, i16 -3283, i16 -1086, i16 -7957, i16 15762, i16 2316, i16 -829, i16 882, i16 6644, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str325, i32 0, i32 0), i16 0, i16 4091, [12 x i16] [i16 10239, i16 -3104, i16 -1099, i16 -8037, i16 15727, i16 2451, i16 -927, i16 925, i16 6871, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str326, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5902, i16 -933, i16 -782, i16 -8983, i16 16719, i16 2354, i16 -1402, i16 1455, i16 6464, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str327, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7577, i16 -2166, i16 -926, i16 -7454, i16 15592, i16 1934, i16 -2377, i16 2808, i16 8606, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str328, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7702, i16 -2245, i16 -975, i16 -9114, i16 17242, i16 1875, i16 -2679, i16 3055, i16 8521, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str329, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16772, i16 -4726, i16 -2141, i16 -7611, i16 15713, i16 1972, i16 -2846, i16 3494, i16 9521, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str330, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5710, i16 -901, i16 -615, i16 -8594, i16 16617, i16 2024, i16 -2975, i16 4120, i16 6830, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str331, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10231, i16 -2769, i16 -1255, i16 -8301, i16 15900, i16 2552, i16 -797, i16 680, i16 7148, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str332, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8819, i16 -2543, i16 -911, i16 -9025, i16 16928, i16 2151, i16 -1329, i16 1213, i16 8449, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str333, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 6992, i16 -1668, i16 -806, i16 -8138, i16 15748, i16 2543, i16 -874, i16 850, i16 7897, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str334, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7732, i16 -2422, i16 -789, i16 -8238, i16 15884, i16 2498, i16 -859, i16 783, i16 7330, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str335, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8736, i16 -2458, i16 -935, i16 -9075, i16 16894, i16 2251, i16 -1354, i16 1242, i16 8263, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str336, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8139, i16 -2171, i16 -663, i16 -8747, i16 16541, i16 2295, i16 -1925, i16 2008, i16 8093, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str337, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7732, i16 -2422, i16 -789, i16 -8238, i16 15884, i16 2498, i16 -859, i16 783, i16 7330, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str338, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8629, i16 -2410, i16 -883, i16 -9055, i16 16940, i16 2171, i16 -1490, i16 1363, i16 8520, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str339, i32 0, i32 0), i16 0, i16 3840, [12 x i16] [i16 7309, i16 -1403, i16 -519, i16 -8474, i16 16008, i16 2622, i16 -2434, i16 2826, i16 8064, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str340, i32 0, i32 0), i16 0, i16 4028, [12 x i16] [i16 8367, i16 -2248, i16 -763, i16 -8758, i16 16447, i16 2422, i16 -1527, i16 1550, i16 8053, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str341, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9030, i16 -1992, i16 -715, i16 -8465, i16 16302, i16 2255, i16 -2689, i16 3217, i16 8069, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str342, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8139, i16 -2171, i16 -663, i16 -8747, i16 16541, i16 2295, i16 -1925, i16 2008, i16 8093, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str343, i32 0, i32 0), i16 0, i16 989, [12 x i16] [i16 -3746, i16 10611, i16 1665, i16 9621, i16 -1734, i16 2114, i16 -2389, i16 7082, i16 3064, i16 3406, i16 6116, i16 -244] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str344, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str345, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 13142, i16 -4152, i16 -1596, i16 -4655, i16 12374, i16 2282, i16 -1769, i16 2696, i16 6711, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str346, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str347, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11280, i16 -3564, i16 -1370, i16 -4655, i16 12374, i16 2282, i16 -1423, i16 2168, i16 5396, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str348, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str349, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5547, i16 11762, i16 2189, i16 5814, i16 -558, i16 3342, i16 -4924, i16 9840, i16 5949, i16 688, i16 9083, i16 96] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str350, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9349, i16 -2987, i16 -1001, i16 -7919, i16 15766, i16 2266, i16 -2098, i16 2680, i16 6839, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str351, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 -5368, i16 11478, i16 2368, i16 5537, i16 -113, i16 3148, i16 -4969, i16 10021, i16 5782, i16 778, i16 9028, i16 211] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str352, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7842, i16 -2320, i16 -992, i16 -8154, i16 15718, i16 2599, i16 -1098, i16 1342, i16 7560, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str353, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8489, i16 -2583, i16 -1036, i16 -8051, i16 15583, i16 2643, i16 -1307, i16 1407, i16 7354, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str354, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7971, i16 -2314, i16 -913, i16 -8451, i16 15762, i16 2894, i16 -1442, i16 1520, i16 7610, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str355, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9698, i16 -3367, i16 -914, i16 -4706, i16 12584, i16 2368, i16 -837, i16 968, i16 5801, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str356, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10508, i16 -3124, i16 -1273, i16 -6079, i16 14294, i16 1901, i16 -1653, i16 2306, i16 6237, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str357, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10445, i16 -3362, i16 -1307, i16 -7662, i16 15690, i16 2058, i16 -1135, i16 1176, i16 7602, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str358, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10252, i16 -3531, i16 -1095, i16 -7114, i16 14850, i16 2436, i16 -1451, i16 1723, i16 6365, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str359, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10793, i16 -3791, i16 -1146, i16 -7498, i16 15177, i16 2488, i16 -1390, i16 1577, i16 7321, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str360, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8606, i16 -2509, i16 -1014, i16 -8238, i16 15714, i16 2703, i16 -942, i16 979, i16 7760, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str361, i32 0, i32 0), i16 0, i16 -64, [12 x i16] [i16 12745, i16 -4500, i16 -1416, i16 -6062, i16 14542, i16 1580, i16 -1934, i16 2256, i16 6603, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str362, i32 0, i32 0), i16 0, i16 -16, [12 x i16] [i16 11846, i16 -4767, i16 -945, i16 -7027, i16 15878, i16 1089, i16 -2699, i16 4122, i16 8311, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str363, i32 0, i32 0), i16 0, i16 -64, [12 x i16] [i16 13173, i16 -4732, i16 -1499, i16 -5807, i16 14036, i16 1895, i16 -2045, i16 2452, i16 7142, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str364, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7828, i16 -1761, i16 -348, i16 -5788, i16 14071, i16 1830, i16 -2853, i16 4518, i16 6557, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str365, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8961, i16 -2473, i16 -1084, i16 -7979, i16 15990, i16 2067, i16 -2319, i16 3035, i16 8249, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str366, i32 0, i32 0), i16 0, i16 3993, [12 x i16] [i16 9487, i16 -2875, i16 -1115, i16 -7533, i16 15606, i16 2010, i16 -1618, i16 2100, i16 7389, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str367, i32 0, i32 0), i16 0, i16 -16, [12 x i16] [i16 6169, i16 -1483, i16 -21, i16 -7107, i16 14761, i16 2536, i16 -2904, i16 3580, i16 8568, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str368, i32 0, i32 0), i16 0, i16 3946, [12 x i16] [i16 8856, i16 -2582, i16 -1026, i16 -7761, i16 15766, i16 2082, i16 -2009, i16 2575, i16 7469, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str369, i32 0, i32 0), i16 0, i16 4055, [12 x i16] [i16 8746, i16 -2425, i16 -1095, i16 -7594, i16 15612, i16 2073, i16 -1780, i16 2309, i16 7416, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str370, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8136, i16 -1968, i16 -299, i16 -5481, i16 13742, i16 1871, i16 -2556, i16 4205, i16 6630, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str371, i32 0, i32 0), i16 0, i16 3946, [12 x i16] [i16 8785, i16 -2529, i16 -1033, i16 -7639, i16 15624, i16 2112, i16 -1783, i16 2300, i16 7817, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str372, i32 0, i32 0), i16 0, i16 4050, [12 x i16] [i16 8344, i16 -2322, i16 -1020, i16 -7596, i16 15635, i16 2048, i16 -1748, i16 2269, i16 7287, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str373, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 12078, i16 -4836, i16 -1069, i16 -6671, i16 14306, i16 2578, i16 -786, i16 939, i16 7418, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str374, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11766, i16 -4445, i16 -1067, i16 -6901, i16 14421, i16 2707, i16 -1029, i16 1217, i16 7572, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str375, i32 0, i32 0), i16 0, i16 4095, [12 x i16] [i16 9493, i16 -3415, i16 -666, i16 -5211, i16 12334, i16 3260, i16 -1548, i16 2262, i16 6482, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str376, i32 0, i32 0), i16 0, i16 4094, [12 x i16] [i16 10593, i16 -3607, i16 -1010, i16 -5881, i16 13127, i16 3084, i16 -1200, i16 1805, i16 6721, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str377, i32 0, i32 0), i16 0, i16 4094, [12 x i16] [i16 11597, i16 -4006, i16 -1049, i16 -5432, i16 12799, i16 2957, i16 -1029, i16 1750, i16 6516, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str378, i32 0, i32 0), i16 0, i16 4089, [12 x i16] [i16 10915, i16 -3677, i16 -982, i16 -5587, i16 12986, i16 2911, i16 -1168, i16 1968, i16 6223, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str379, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11522, i16 -4044, i16 -1146, i16 -4736, i16 12172, i16 2904, i16 -988, i16 1829, i16 6039, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str380, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10504, i16 -2438, i16 -1189, i16 -8603, i16 16207, i16 2531, i16 -1022, i16 863, i16 12242, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str381, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10829, i16 -2838, i16 -1115, i16 -8339, i16 15817, i16 2696, i16 -837, i16 680, i16 11939, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str382, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10504, i16 -2438, i16 -1189, i16 -8603, i16 16207, i16 2531, i16 -1022, i16 863, i16 12242, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str383, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10371, i16 -2333, i16 -1206, i16 -8688, i16 16231, i16 2602, i16 -1230, i16 1116, i16 11282, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str384, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9651, i16 -2059, i16 -1189, i16 -8881, i16 16512, i16 2487, i16 -1460, i16 1345, i16 10687, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str385, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9566, i16 -2863, i16 -803, i16 -7170, i16 15172, i16 2112, i16 -818, i16 803, i16 9705, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str386, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11095, i16 -3157, i16 -1324, i16 -8377, i16 15834, i16 2720, i16 -1108, i16 947, i16 11688, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str387, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9427, i16 -2714, i16 -868, i16 -7493, i16 16092, i16 1373, i16 -2199, i16 3264, i16 7180, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str388, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9186, i16 -2678, i16 -907, i16 -8693, i16 16517, i16 2260, i16 -1129, i16 1094, i16 8524, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str389, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11057, i16 -3604, i16 -1155, i16 -5152, i16 13046, i16 2329, i16 -282, i16 375, i16 8104, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str390, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11057, i16 -3604, i16 -1155, i16 -5152, i16 13046, i16 2329, i16 -282, i16 375, i16 8104, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str391, i32 0, i32 0), i16 0, i16 -2064, [12 x i16] [i16 8986, i16 -2755, i16 -802, i16 -6341, i16 13575, i16 3077, i16 -1476, i16 2144, i16 6379, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str392, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9932, i16 -3060, i16 -935, i16 -5809, i16 13331, i16 2753, i16 -1267, i16 2155, i16 5575, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str393, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 10109, i16 -3488, i16 -993, i16 -5412, i16 12812, i16 2916, i16 -1305, i16 2140, i16 5543, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str394, i32 0, i32 0), i16 0, i16 -1716, [12 x i16] [i16 10976, i16 -4029, i16 -1141, i16 -7918, i16 15491, i16 2600, i16 -1670, i16 2071, i16 8246, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str395, i32 0, i32 0), i16 0, i16 -16, [12 x i16] [i16 7906, i16 -2709, i16 -594, i16 -6231, i16 13351, i16 3220, i16 -1922, i16 2631, i16 6537, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str396, i32 0, i32 0), i16 15, i16 3990, [12 x i16] [i16 8025, i16 -1942, i16 -1050, i16 -7920, i16 15904, i16 2100, i16 -2456, i16 3005, i16 7039, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str397, i32 0, i32 0), i16 0, i16 -2052, [12 x i16] [i16 8054, i16 -1885, i16 -1025, i16 -8349, i16 16367, i16 2040, i16 -2805, i16 3542, i16 7629, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str398, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 11340, i16 -4069, i16 -1275, i16 -7555, i16 15266, i16 2448, i16 -2960, i16 3426, i16 7685, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str399, i32 0, i32 0), i16 0, i16 -2064, [12 x i16] [i16 10704, i16 -4187, i16 -1230, i16 -8314, i16 15952, i16 2501, i16 -920, i16 945, i16 8927, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str400, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 8048, i16 -2810, i16 -623, i16 -6450, i16 13519, i16 3272, i16 -1700, i16 2146, i16 7049, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str401, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 8128, i16 -2668, i16 -655, i16 -6134, i16 13307, i16 3161, i16 -1782, i16 2568, i16 6083, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([20 x i8]* @.str402, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 9082, i16 -2907, i16 -925, i16 -6119, i16 13377, i16 3058, i16 -1797, i16 2641, i16 5609, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str403, i32 0, i32 0), i16 15, i16 4095, [12 x i16] [i16 8199, i16 -2065, i16 -1056, i16 -8124, i16 16156, i16 2033, i16 -2458, i16 3022, i16 7220, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str404, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 1313, i16 1855, i16 -109, i16 -6715, i16 15908, i16 808, i16 -327, i16 1840, i16 6020, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str405, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 2905, i16 732, i16 -237, i16 -8134, i16 16626, i16 1476, i16 -3038, i16 4253, i16 7517, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str406, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 4516, i16 -245, i16 -37, i16 -7020, i16 14976, i16 2173, i16 -3206, i16 4671, i16 7087, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str407, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 5053, i16 -24, i16 -117, i16 -5684, i16 14076, i16 1702, i16 -2619, i16 4492, i16 5849, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str408, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 10504, i16 -2438, i16 -1189, i16 -8603, i16 16207, i16 2531, i16 -1022, i16 863, i16 12242, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([6 x i8]* @.str409, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 16442, i16 -2956, i16 -2422, i16 -2877, i16 12128, i16 750, i16 -1136, i16 6066, i16 4559, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str410, i32 0, i32 0), i16 491, i16 0, [12 x i16] [i16 7924, i16 -1910, i16 -777, i16 -8226, i16 15459, i16 2998, i16 -1517, i16 2199, i16 6818, i16 -7242, i16 11401, i16 3481] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str411, i32 0, i32 0), i16 512, i16 0, [12 x i16] [i16 8512, i16 -2641, i16 -694, i16 -8042, i16 15670, i16 2526, i16 -1821, i16 2117, i16 7414, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str412, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 7511, i16 -2571, i16 -692, i16 -7894, i16 15088, i16 3060, i16 -948, i16 1111, i16 8128, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str413, i32 0, i32 0), i16 0, i16 4075, [12 x i16] [i16 9437, i16 -2811, i16 -774, i16 -8405, i16 16215, i16 2290, i16 -710, i16 596, i16 7181, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str414, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9847, i16 -3091, i16 -928, i16 -8485, i16 16345, i16 2225, i16 -715, i16 595, i16 7103, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str415, i32 0, i32 0), i16 0, i16 0, [12 x i16] [i16 9847, i16 -3091, i16 -928, i16 -8485, i16 16345, i16 2225, i16 -715, i16 595, i16 7103, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str416, i32 0, i32 0), i16 0, i16 4092, [12 x i16] [i16 6038, i16 -1484, i16 -578, i16 -9146, i16 16746, i16 2513, i16 -875, i16 746, i16 7217, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str417, i32 0, i32 0), i16 254, i16 8190, [12 x i16] [i16 5775, i16 -805, i16 -359, i16 -8574, i16 16295, i16 2391, i16 -1943, i16 2341, i16 7249, i16 0, i16 0, i16 0] }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str418, i32 0, i32 0), i16 254, i16 8190, [12 x i16] [i16 5209, i16 -1072, i16 -397, i16 -8845, i16 16120, i16 2919, i16 -1618, i16 1803, i16 8654, i16 0, i16 0, i16 0] }], align 16
@.str210 = private unnamed_addr constant [16 x i8] c"Apple QuickTake\00", align 1
@.str211 = private unnamed_addr constant [16 x i8] c"Canon EOS D2000\00", align 1
@.str212 = private unnamed_addr constant [16 x i8] c"Canon EOS D6000\00", align 1
@.str213 = private unnamed_addr constant [14 x i8] c"Canon EOS D30\00", align 1
@.str214 = private unnamed_addr constant [14 x i8] c"Canon EOS D60\00", align 1
@.str215 = private unnamed_addr constant [21 x i8] c"Canon EOS 5D Mark II\00", align 1
@.str216 = private unnamed_addr constant [13 x i8] c"Canon EOS 5D\00", align 1
@.str217 = private unnamed_addr constant [14 x i8] c"Canon EOS 10D\00", align 1
@.str218 = private unnamed_addr constant [15 x i8] c"Canon EOS 20Da\00", align 1
@.str219 = private unnamed_addr constant [14 x i8] c"Canon EOS 20D\00", align 1
@.str220 = private unnamed_addr constant [14 x i8] c"Canon EOS 30D\00", align 1
@.str221 = private unnamed_addr constant [14 x i8] c"Canon EOS 40D\00", align 1
@.str222 = private unnamed_addr constant [14 x i8] c"Canon EOS 50D\00", align 1
@.str223 = private unnamed_addr constant [15 x i8] c"Canon EOS 300D\00", align 1
@.str224 = private unnamed_addr constant [15 x i8] c"Canon EOS 350D\00", align 1
@.str225 = private unnamed_addr constant [15 x i8] c"Canon EOS 400D\00", align 1
@.str226 = private unnamed_addr constant [15 x i8] c"Canon EOS 450D\00", align 1
@.str227 = private unnamed_addr constant [16 x i8] c"Canon EOS 1000D\00", align 1
@.str228 = private unnamed_addr constant [23 x i8] c"Canon EOS-1Ds Mark III\00", align 1
@.str229 = private unnamed_addr constant [22 x i8] c"Canon EOS-1Ds Mark II\00", align 1
@.str230 = private unnamed_addr constant [23 x i8] c"Canon EOS-1D Mark II N\00", align 1
@.str231 = private unnamed_addr constant [22 x i8] c"Canon EOS-1D Mark III\00", align 1
@.str232 = private unnamed_addr constant [21 x i8] c"Canon EOS-1D Mark II\00", align 1
@.str233 = private unnamed_addr constant [14 x i8] c"Canon EOS-1DS\00", align 1
@.str234 = private unnamed_addr constant [13 x i8] c"Canon EOS-1D\00", align 1
@.str235 = private unnamed_addr constant [10 x i8] c"Canon EOS\00", align 1
@.str236 = private unnamed_addr constant [20 x i8] c"Canon PowerShot A50\00", align 1
@.str237 = private unnamed_addr constant [19 x i8] c"Canon PowerShot A5\00", align 1
@.str238 = private unnamed_addr constant [20 x i8] c"Canon PowerShot G10\00", align 1
@.str239 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G1\00", align 1
@.str240 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G2\00", align 1
@.str241 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G3\00", align 1
@.str242 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G5\00", align 1
@.str243 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G6\00", align 1
@.str244 = private unnamed_addr constant [19 x i8] c"Canon PowerShot G9\00", align 1
@.str245 = private unnamed_addr constant [21 x i8] c"Canon PowerShot Pro1\00", align 1
@.str246 = private unnamed_addr constant [22 x i8] c"Canon PowerShot Pro70\00", align 1
@.str247 = private unnamed_addr constant [22 x i8] c"Canon PowerShot Pro90\00", align 1
@.str248 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S30\00", align 1
@.str249 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S40\00", align 1
@.str250 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S45\00", align 1
@.str251 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S50\00", align 1
@.str252 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S60\00", align 1
@.str253 = private unnamed_addr constant [20 x i8] c"Canon PowerShot S70\00", align 1
@.str254 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A610\00", align 1
@.str255 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A620\00", align 1
@.str256 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A630\00", align 1
@.str257 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A640\00", align 1
@.str258 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A650\00", align 1
@.str259 = private unnamed_addr constant [21 x i8] c"Canon PowerShot A720\00", align 1
@.str260 = private unnamed_addr constant [22 x i8] c"Canon PowerShot S3 IS\00", align 1
@.str261 = private unnamed_addr constant [9 x i8] c"CINE 650\00", align 1
@.str262 = private unnamed_addr constant [9 x i8] c"CINE 660\00", align 1
@.str263 = private unnamed_addr constant [17 x i8] c"Contax N Digital\00", align 1
@.str264 = private unnamed_addr constant [11 x i8] c"EPSON R-D1\00", align 1
@.str265 = private unnamed_addr constant [22 x i8] c"FUJIFILM FinePix E550\00", align 1
@.str266 = private unnamed_addr constant [22 x i8] c"FUJIFILM FinePix E900\00", align 1
@.str267 = private unnamed_addr constant [20 x i8] c"FUJIFILM FinePix F8\00", align 1
@.str268 = private unnamed_addr constant [20 x i8] c"FUJIFILM FinePix F7\00", align 1
@.str269 = private unnamed_addr constant [24 x i8] c"FUJIFILM FinePix S100FS\00", align 1
@.str270 = private unnamed_addr constant [24 x i8] c"FUJIFILM FinePix S20Pro\00", align 1
@.str271 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S2Pro\00", align 1
@.str272 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S3Pro\00", align 1
@.str273 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5Pro\00", align 1
@.str274 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5000\00", align 1
@.str275 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5100\00", align 1
@.str276 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5500\00", align 1
@.str277 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5200\00", align 1
@.str278 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S5600\00", align 1
@.str279 = private unnamed_addr constant [20 x i8] c"FUJIFILM FinePix S6\00", align 1
@.str280 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S7000\00", align 1
@.str281 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9000\00", align 1
@.str282 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9500\00", align 1
@.str283 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9100\00", align 1
@.str284 = private unnamed_addr constant [23 x i8] c"FUJIFILM FinePix S9600\00", align 1
@.str285 = private unnamed_addr constant [14 x i8] c"FUJIFILM IS-1\00", align 1
@.str286 = private unnamed_addr constant [16 x i8] c"FUJIFILM IS Pro\00", align 1
@.str287 = private unnamed_addr constant [15 x i8] c"Imacon Ixpress\00", align 1
@.str288 = private unnamed_addr constant [13 x i8] c"KODAK NC2000\00", align 1
@.str289 = private unnamed_addr constant [14 x i8] c"Kodak DCS315C\00", align 1
@.str290 = private unnamed_addr constant [14 x i8] c"Kodak DCS330C\00", align 1
@.str291 = private unnamed_addr constant [13 x i8] c"KODAK DCS420\00", align 1
@.str292 = private unnamed_addr constant [13 x i8] c"KODAK DCS460\00", align 1
@.str293 = private unnamed_addr constant [14 x i8] c"KODAK EOSDCS1\00", align 1
@.str294 = private unnamed_addr constant [15 x i8] c"KODAK EOSDCS3B\00", align 1
@.str295 = private unnamed_addr constant [14 x i8] c"Kodak DCS520C\00", align 1
@.str296 = private unnamed_addr constant [14 x i8] c"Kodak DCS560C\00", align 1
@.str297 = private unnamed_addr constant [14 x i8] c"Kodak DCS620C\00", align 1
@.str298 = private unnamed_addr constant [14 x i8] c"Kodak DCS620X\00", align 1
@.str299 = private unnamed_addr constant [14 x i8] c"Kodak DCS660C\00", align 1
@.str300 = private unnamed_addr constant [14 x i8] c"Kodak DCS720X\00", align 1
@.str301 = private unnamed_addr constant [14 x i8] c"Kodak DCS760C\00", align 1
@.str302 = private unnamed_addr constant [18 x i8] c"Kodak DCS Pro SLR\00", align 1
@.str303 = private unnamed_addr constant [19 x i8] c"Kodak DCS Pro 14nx\00", align 1
@.str304 = private unnamed_addr constant [17 x i8] c"Kodak DCS Pro 14\00", align 1
@.str305 = private unnamed_addr constant [17 x i8] c"Kodak ProBack645\00", align 1
@.str306 = private unnamed_addr constant [14 x i8] c"Kodak ProBack\00", align 1
@.str307 = private unnamed_addr constant [11 x i8] c"KODAK P712\00", align 1
@.str308 = private unnamed_addr constant [11 x i8] c"KODAK P850\00", align 1
@.str309 = private unnamed_addr constant [11 x i8] c"KODAK P880\00", align 1
@.str310 = private unnamed_addr constant [11 x i8] c"Leaf CMost\00", align 1
@.str311 = private unnamed_addr constant [13 x i8] c"Leaf Valeo 6\00", align 1
@.str312 = private unnamed_addr constant [15 x i8] c"Leaf Aptus 54S\00", align 1
@.str313 = private unnamed_addr constant [14 x i8] c"Leaf Aptus 65\00", align 1
@.str314 = private unnamed_addr constant [14 x i8] c"Leaf Aptus 75\00", align 1
@.str315 = private unnamed_addr constant [10 x i8] c"Mamiya ZD\00", align 1
@.str316 = private unnamed_addr constant [12 x i8] c"Micron 2010\00", align 1
@.str317 = private unnamed_addr constant [17 x i8] c"Minolta DiMAGE 5\00", align 1
@.str318 = private unnamed_addr constant [19 x i8] c"Minolta DiMAGE 7Hi\00", align 1
@.str319 = private unnamed_addr constant [17 x i8] c"Minolta DiMAGE 7\00", align 1
@.str320 = private unnamed_addr constant [18 x i8] c"Minolta DiMAGE A1\00", align 1
@.str321 = private unnamed_addr constant [20 x i8] c"MINOLTA DiMAGE A200\00", align 1
@.str322 = private unnamed_addr constant [18 x i8] c"Minolta DiMAGE A2\00", align 1
@.str323 = private unnamed_addr constant [18 x i8] c"Minolta DiMAGE Z2\00", align 1
@.str324 = private unnamed_addr constant [16 x i8] c"MINOLTA DYNAX 5\00", align 1
@.str325 = private unnamed_addr constant [16 x i8] c"MINOLTA DYNAX 7\00", align 1
@.str326 = private unnamed_addr constant [11 x i8] c"NIKON D100\00", align 1
@.str327 = private unnamed_addr constant [10 x i8] c"NIKON D1H\00", align 1
@.str328 = private unnamed_addr constant [10 x i8] c"NIKON D1X\00", align 1
@.str329 = private unnamed_addr constant [9 x i8] c"NIKON D1\00", align 1
@.str330 = private unnamed_addr constant [10 x i8] c"NIKON D2H\00", align 1
@.str331 = private unnamed_addr constant [10 x i8] c"NIKON D2X\00", align 1
@.str332 = private unnamed_addr constant [11 x i8] c"NIKON D40X\00", align 1
@.str333 = private unnamed_addr constant [10 x i8] c"NIKON D40\00", align 1
@.str334 = private unnamed_addr constant [10 x i8] c"NIKON D50\00", align 1
@.str335 = private unnamed_addr constant [10 x i8] c"NIKON D60\00", align 1
@.str336 = private unnamed_addr constant [11 x i8] c"NIKON D700\00", align 1
@.str337 = private unnamed_addr constant [10 x i8] c"NIKON D70\00", align 1
@.str338 = private unnamed_addr constant [10 x i8] c"NIKON D80\00", align 1
@.str339 = private unnamed_addr constant [10 x i8] c"NIKON D90\00", align 1
@.str340 = private unnamed_addr constant [11 x i8] c"NIKON D200\00", align 1
@.str341 = private unnamed_addr constant [11 x i8] c"NIKON D300\00", align 1
@.str342 = private unnamed_addr constant [9 x i8] c"NIKON D3\00", align 1
@.str343 = private unnamed_addr constant [11 x i8] c"NIKON E950\00", align 1
@.str344 = private unnamed_addr constant [11 x i8] c"NIKON E995\00", align 1
@.str345 = private unnamed_addr constant [12 x i8] c"NIKON E2100\00", align 1
@.str346 = private unnamed_addr constant [12 x i8] c"NIKON E2500\00", align 1
@.str347 = private unnamed_addr constant [12 x i8] c"NIKON E4300\00", align 1
@.str348 = private unnamed_addr constant [12 x i8] c"NIKON E4500\00", align 1
@.str349 = private unnamed_addr constant [12 x i8] c"NIKON E5000\00", align 1
@.str350 = private unnamed_addr constant [12 x i8] c"NIKON E5400\00", align 1
@.str351 = private unnamed_addr constant [12 x i8] c"NIKON E5700\00", align 1
@.str352 = private unnamed_addr constant [12 x i8] c"NIKON E8400\00", align 1
@.str353 = private unnamed_addr constant [12 x i8] c"NIKON E8700\00", align 1
@.str354 = private unnamed_addr constant [12 x i8] c"NIKON E8800\00", align 1
@.str355 = private unnamed_addr constant [20 x i8] c"NIKON COOLPIX P6000\00", align 1
@.str356 = private unnamed_addr constant [14 x i8] c"OLYMPUS C5050\00", align 1
@.str357 = private unnamed_addr constant [14 x i8] c"OLYMPUS C5060\00", align 1
@.str358 = private unnamed_addr constant [14 x i8] c"OLYMPUS C7070\00", align 1
@.str359 = private unnamed_addr constant [12 x i8] c"OLYMPUS C70\00", align 1
@.str360 = private unnamed_addr constant [12 x i8] c"OLYMPUS C80\00", align 1
@.str361 = private unnamed_addr constant [13 x i8] c"OLYMPUS E-10\00", align 1
@.str362 = private unnamed_addr constant [12 x i8] c"OLYMPUS E-1\00", align 1
@.str363 = private unnamed_addr constant [13 x i8] c"OLYMPUS E-20\00", align 1
@.str364 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-300\00", align 1
@.str365 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-330\00", align 1
@.str366 = private unnamed_addr constant [12 x i8] c"OLYMPUS E-3\00", align 1
@.str367 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-400\00", align 1
@.str368 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-410\00", align 1
@.str369 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-420\00", align 1
@.str370 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-500\00", align 1
@.str371 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-510\00", align 1
@.str372 = private unnamed_addr constant [14 x i8] c"OLYMPUS E-520\00", align 1
@.str373 = private unnamed_addr constant [14 x i8] c"OLYMPUS SP350\00", align 1
@.str374 = private unnamed_addr constant [12 x i8] c"OLYMPUS SP3\00", align 1
@.str375 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP500UZ\00", align 1
@.str376 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP510UZ\00", align 1
@.str377 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP550UZ\00", align 1
@.str378 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP560UZ\00", align 1
@.str379 = private unnamed_addr constant [16 x i8] c"OLYMPUS SP570UZ\00", align 1
@.str380 = private unnamed_addr constant [16 x i8] c"PENTAX *ist DL2\00", align 1
@.str381 = private unnamed_addr constant [15 x i8] c"PENTAX *ist DL\00", align 1
@.str382 = private unnamed_addr constant [16 x i8] c"PENTAX *ist DS2\00", align 1
@.str383 = private unnamed_addr constant [15 x i8] c"PENTAX *ist DS\00", align 1
@.str384 = private unnamed_addr constant [14 x i8] c"PENTAX *ist D\00", align 1
@.str385 = private unnamed_addr constant [12 x i8] c"PENTAX K10D\00", align 1
@.str386 = private unnamed_addr constant [10 x i8] c"PENTAX K1\00", align 1
@.str387 = private unnamed_addr constant [12 x i8] c"PENTAX K20D\00", align 1
@.str388 = private unnamed_addr constant [13 x i8] c"PENTAX K200D\00", align 1
@.str389 = private unnamed_addr constant [13 x i8] c"PENTAX K2000\00", align 1
@.str390 = private unnamed_addr constant [11 x i8] c"PENTAX K-m\00", align 1
@.str391 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-FZ8\00", align 1
@.str392 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ18\00", align 1
@.str393 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ28\00", align 1
@.str394 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ30\00", align 1
@.str395 = private unnamed_addr constant [19 x i8] c"Panasonic DMC-FZ50\00", align 1
@.str396 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-L10\00", align 1
@.str397 = private unnamed_addr constant [17 x i8] c"Panasonic DMC-L1\00", align 1
@.str398 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LC1\00", align 1
@.str399 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LX1\00", align 1
@.str400 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LX2\00", align 1
@.str401 = private unnamed_addr constant [18 x i8] c"Panasonic DMC-LX3\00", align 1
@.str402 = private unnamed_addr constant [20 x i8] c"Panasonic DMC-FX150\00", align 1
@.str403 = private unnamed_addr constant [17 x i8] c"Panasonic DMC-G1\00", align 1
@.str404 = private unnamed_addr constant [15 x i8] c"Phase One H 20\00", align 1
@.str405 = private unnamed_addr constant [14 x i8] c"Phase One P 2\00", align 1
@.str406 = private unnamed_addr constant [15 x i8] c"Phase One P 30\00", align 1
@.str407 = private unnamed_addr constant [15 x i8] c"Phase One P 45\00", align 1
@.str408 = private unnamed_addr constant [13 x i8] c"SAMSUNG GX-1\00", align 1
@.str409 = private unnamed_addr constant [6 x i8] c"Sinar\00", align 1
@.str410 = private unnamed_addr constant [14 x i8] c"SONY DSC-F828\00", align 1
@.str411 = private unnamed_addr constant [12 x i8] c"SONY DSC-R1\00", align 1
@.str412 = private unnamed_addr constant [12 x i8] c"SONY DSC-V3\00", align 1
@.str413 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A100\00", align 1
@.str414 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A200\00", align 1
@.str415 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A300\00", align 1
@.str416 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A350\00", align 1
@.str417 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A700\00", align 1
@.str418 = private unnamed_addr constant [15 x i8] c"SONY DSLR-A900\00", align 1
@.str419 = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@simple_coeff.table = internal constant [4 x [12 x float]] [[12 x float] [float 0x3FF67381E0000000, float 0xBFCC8E8A80000000, float 0xBFBA027520000000, float 0xBFE0D77320000000, float 0x3FF7B4A240000000, float 0x3F916872C0000000, float 0xBF86F00680000000, float 0x3F92BD3C40000000, float 0x3FED295EA0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [12 x float] [float 2.250000e+00, float 7.500000e-01, float -1.750000e+00, float -2.500000e-01, float -2.500000e-01, float 7.500000e-01, float 7.500000e-01, float -2.500000e-01, float -2.500000e-01, float -1.750000e+00, float 7.500000e-01, float 2.250000e+00], [12 x float] [float 0x3FFE49BA60000000, float 0xBFDAC08320000000, float 0xBFDE76C8C0000000, float 0xBFDFAE1480000000, float 0x3FFC5E3540000000, float 0xBFD1CAC080000000, float 0xBFF045A1C0000000, float 0xBFE4F5C280000000, float 0x4005604180000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [12 x float] [float 0xBFFEFB00C0000000, float 0x3FFCCE9D60000000, float 0xBFF72CFFA0000000, float 0x4004ACB200000000, float 0x3FF67C6000000000, float 0xBFE0CC6E60000000, float 0xBFD2807360000000, float 0x3FDA27D020000000, float 0xBFF3478960000000, float 0x3FF1511E00000000, float 0x400787EB60000000, float 0xBFFD196A60000000]], align 16
@identify.table = internal constant [68 x %struct.anon.4] [%struct.anon.4 { i32 62464, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"DC20\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 124928, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"DC20\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1652736, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"DCS200\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 4159302, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C330\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 4162462, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C330\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 460800, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603v\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 614400, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603v\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6163328, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6166488, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 9116448, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"C603y\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 311696, [12 x i8] c"ST Micro\00\00\00\00", [19 x i8] c"STV680 VGA\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 614400, [12 x i8] c"Kodak\00\00\00\00\00\00\00", [19 x i8] c"KAI-0340\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 787456, [12 x i8] c"Creative\00\00\00\00", [19 x i8] c"PC-CAM 600\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1138688, [12 x i8] c"Minolta\00\00\00\00\00", [19 x i8] c"RD175\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 3840000, [12 x i8] c"Foculus\00\00\00\00\00", [19 x i8] c"531C\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 786432, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-080C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1447680, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-145C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1920000, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-201C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 5067304, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-510C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 10134608, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-510C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 16157136, [12 x i8] c"AVT\00\00\00\00\00\00\00\00\00", [19 x i8] c"F-810C\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1409024, [12 x i8] c"Sony\00\00\00\00\00\00\00\00", [19 x i8] c"XCD-SX910CR\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 2818048, [12 x i8] c"Sony\00\00\00\00\00\00\00\00", [19 x i8] c"XCD-SX910CR\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 3884928, [12 x i8] c"Micron\00\00\00\00\00\00", [19 x i8] c"2010\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6624000, [12 x i8] c"Pixelink\00\00\00\00", [19 x i8] c"A782\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 13248000, [12 x i8] c"Pixelink\00\00\00\00", [19 x i8] c"A782\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6291456, [12 x i8] c"RoverShot\00\00\00", [19 x i8] c"3320AF\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6553440, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A460\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6653280, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A530\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 6573120, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A610\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 9219600, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A620\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 10341600, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A720\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 10383120, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A630\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 12945240, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A640\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 15636240, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot A650\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 5298000, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot SD300\00\00\00\00", i8 0 }, %struct.anon.4 { i32 7710960, [12 x i8] c"Canon\00\00\00\00\00\00\00", [19 x i8] c"PowerShot S3 IS\00\00\00\00", i8 0 }, %struct.anon.4 { i32 5939200, [12 x i8] c"OLYMPUS\00\00\00\00\00", [19 x i8] c"C770UZ\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 0 }, %struct.anon.4 { i32 1581060, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E900\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 2465792, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E950\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 2940928, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E2100\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4771840, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E990\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4775936, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E3700\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 5869568, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E4300\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 5865472, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E4500\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7438336, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"E5000\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 8998912, [12 x i8] c"NIKON\00\00\00\00\00\00\00", [19 x i8] c"COOLPIX S6\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 1976352, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-2000UX\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 3217760, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-3*00EX\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 6218368, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-5700\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 6054400, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-R41\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7530816, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-R51\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7684000, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"QV-4000\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4948608, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-S100\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7542528, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-Z50\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7753344, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-Z55\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 7426656, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-P505\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 9313536, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-P600\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 10979200, [12 x i8] c"CASIO\00\00\00\00\00\00\00", [19 x i8] c"EX-P700\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 3178560, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio S\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 4841984, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio S\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 6114240, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio S4\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 10702848, [12 x i8] c"PENTAX\00\00\00\00\00\00", [19 x i8] c"Optio 750Z\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 16098048, [12 x i8] c"SAMSUNG\00\00\00\00\00", [19 x i8] c"S85\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 16215552, [12 x i8] c"SAMSUNG\00\00\00\00\00", [19 x i8] c"S85\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i8 1 }, %struct.anon.4 { i32 12582980, [12 x i8] c"Sinar\00\00\00\00\00\00\00", [19 x i8] zeroinitializer, i8 0 }, %struct.anon.4 { i32 33292868, [12 x i8] c"Sinar\00\00\00\00\00\00\00", [19 x i8] zeroinitializer, i8 0 }, %struct.anon.4 { i32 44390468, [12 x i8] c"Sinar\00\00\00\00\00\00\00", [19 x i8] zeroinitializer, i8 0 }], align 16
@identify.corp = internal global [15 x i8*] [i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str100, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str420, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str105, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str421, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str422, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str423, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str424, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str409, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str189, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str425, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str426, i32 0, i32 0)], align 16
@.str420 = private unnamed_addr constant [6 x i8] c"Kodak\00", align 1
@.str421 = private unnamed_addr constant [8 x i8] c"MINOLTA\00", align 1
@.str422 = private unnamed_addr constant [8 x i8] c"Minolta\00", align 1
@.str423 = private unnamed_addr constant [7 x i8] c"Konica\00", align 1
@.str424 = private unnamed_addr constant [6 x i8] c"CASIO\00", align 1
@.str425 = private unnamed_addr constant [8 x i8] c"SAMSUNG\00", align 1
@.str426 = private unnamed_addr constant [7 x i8] c"Mamiya\00", align 1
@zero_is_bad = common global i32 0, align 4
@.str427 = private unnamed_addr constant [9 x i8] c"HEAPCCDR\00", align 1
@.str428 = private unnamed_addr constant [5 x i8] c"\FF\D8\FF\E1\00", align 1
@.str429 = private unnamed_addr constant [5 x i8] c"Exif\00", align 1
@.str430 = private unnamed_addr constant [8 x i8] c"ARECOYK\00", align 1
@.str431 = private unnamed_addr constant [7 x i8] c"Contax\00", align 1
@.str432 = private unnamed_addr constant [10 x i8] c"N Digital\00", align 1
@.str433 = private unnamed_addr constant [4 x i8] c"PXN\00", align 1
@.str434 = private unnamed_addr constant [9 x i8] c"Logitech\00", align 1
@.str435 = private unnamed_addr constant [16 x i8] c"Fotoman Pixtura\00", align 1
@.str436 = private unnamed_addr constant [5 x i8] c"qktk\00", align 1
@.str437 = private unnamed_addr constant [6 x i8] c"Apple\00", align 1
@.str438 = private unnamed_addr constant [14 x i8] c"QuickTake 100\00", align 1
@.str439 = private unnamed_addr constant [5 x i8] c"qktn\00", align 1
@.str440 = private unnamed_addr constant [14 x i8] c"QuickTake 150\00", align 1
@.str441 = private unnamed_addr constant [7 x i8] c"\00\01\00\01\00@\00", align 1
@.str442 = private unnamed_addr constant [10 x i8] c"DSC-Image\00", align 1
@.str443 = private unnamed_addr constant [5 x i8] c"PWAD\00", align 1
@.str444 = private unnamed_addr constant [5 x i8] c"\00MRM\00", align 1
@.str445 = private unnamed_addr constant [5 x i8] c"FOVb\00", align 1
@.str446 = private unnamed_addr constant [3 x i8] c"CI\00", align 1
@.str447 = private unnamed_addr constant [16 x i8] c"Digital Camera \00", align 1
@.str448 = private unnamed_addr constant [14 x i8] c"PowerShot 600\00", align 1
@.str449 = private unnamed_addr constant [13 x i8] c"PowerShot A5\00", align 1
@.str450 = private unnamed_addr constant [18 x i8] c"PowerShot A5 Zoom\00", align 1
@.str451 = private unnamed_addr constant [14 x i8] c"PowerShot A50\00", align 1
@.str452 = private unnamed_addr constant [16 x i8] c"PowerShot Pro70\00", align 1
@.str453 = private unnamed_addr constant [16 x i8] c"PowerShot SD300\00", align 1
@.str454 = private unnamed_addr constant [15 x i8] c"PowerShot A460\00", align 1
@.str455 = private unnamed_addr constant [15 x i8] c"PowerShot A530\00", align 1
@.str456 = private unnamed_addr constant [15 x i8] c"PowerShot A610\00", align 1
@.str457 = private unnamed_addr constant [6 x i8] c"S2 IS\00", align 1
@.str458 = private unnamed_addr constant [15 x i8] c"PowerShot A620\00", align 1
@.str459 = private unnamed_addr constant [15 x i8] c"PowerShot A720\00", align 1
@.str460 = private unnamed_addr constant [15 x i8] c"PowerShot A630\00", align 1
@.str461 = private unnamed_addr constant [15 x i8] c"PowerShot A640\00", align 1
@.str462 = private unnamed_addr constant [15 x i8] c"PowerShot A650\00", align 1
@.str463 = private unnamed_addr constant [16 x i8] c"PowerShot S3 IS\00", align 1
@.str464 = private unnamed_addr constant [19 x i8] c"PowerShot Pro90 IS\00", align 1
@.str465 = private unnamed_addr constant [13 x i8] c"PowerShot G1\00", align 1
@.str466 = private unnamed_addr constant [9 x i8] c"EOS 300D\00", align 1
@.str467 = private unnamed_addr constant [11 x i8] c"EOS D2000C\00", align 1
@.str468 = private unnamed_addr constant [9 x i8] c"EOS 350D\00", align 1
@.str469 = private unnamed_addr constant [9 x i8] c"EOS 400D\00", align 1
@.str470 = private unnamed_addr constant [10 x i8] c"EOS 1000D\00", align 1
@.str471 = private unnamed_addr constant [9 x i8] c"EOS 450D\00", align 1
@.str472 = private unnamed_addr constant [3 x i8] c"D1\00", align 1
@.str473 = private unnamed_addr constant [4 x i8] c"D1X\00", align 1
@.str474 = private unnamed_addr constant [5 x i8] c"D40X\00", align 1
@.str475 = private unnamed_addr constant [4 x i8] c"D60\00", align 1
@.str476 = private unnamed_addr constant [4 x i8] c"D80\00", align 1
@.str477 = private unnamed_addr constant [3 x i8] c"D3\00", align 1
@.str478 = private unnamed_addr constant [5 x i8] c"D700\00", align 1
@.str479 = private unnamed_addr constant [4 x i8] c"D40\00", align 1
@.str480 = private unnamed_addr constant [4 x i8] c"D50\00", align 1
@.str481 = private unnamed_addr constant [4 x i8] c"D70\00", align 1
@.str482 = private unnamed_addr constant [4 x i8] c"D90\00", align 1
@.str483 = private unnamed_addr constant [5 x i8] c"D100\00", align 1
@.str484 = private unnamed_addr constant [5 x i8] c"D200\00", align 1
@.str485 = private unnamed_addr constant [4 x i8] c"D2H\00", align 1
@.str486 = private unnamed_addr constant [4 x i8] c"D2X\00", align 1
@.str487 = private unnamed_addr constant [5 x i8] c"D300\00", align 1
@.str488 = private unnamed_addr constant [14 x i8] c"COOLPIX P6000\00", align 1
@.str489 = private unnamed_addr constant [5 x i8] c"E950\00", align 1
@.str490 = private unnamed_addr constant [5 x i8] c"E995\00", align 1
@.str491 = private unnamed_addr constant [6 x i8] c"E2100\00", align 1
@.str492 = private unnamed_addr constant [6 x i8] c"E2500\00", align 1
@.str493 = private unnamed_addr constant [11 x i8] c"Optio 33WR\00", align 1
@.str494 = private unnamed_addr constant [10 x i8] c"DiMAGE Z2\00", align 1
@.str495 = private unnamed_addr constant [6 x i8] c"E4500\00", align 1
@.str496 = private unnamed_addr constant [14 x i8] c"FinePix S5100\00", align 1
@.str497 = private unnamed_addr constant [14 x i8] c"FinePix S5500\00", align 1
@.str498 = private unnamed_addr constant [6 x i8] c"S2Pro\00", align 1
@.str499 = private unnamed_addr constant [7 x i8] c" S2Pro\00", align 1
@.str500 = private unnamed_addr constant [6 x i8] c"RD175\00", align 1
@.str501 = private unnamed_addr constant [8 x i8] c"KD-400Z\00", align 1
@.str502 = private unnamed_addr constant [8 x i8] c"KD-510Z\00", align 1
@.str503 = private unnamed_addr constant [9 x i8] c"DiMAGE A\00", align 1
@.str504 = private unnamed_addr constant [6 x i8] c"ALPHA\00", align 1
@.str505 = private unnamed_addr constant [6 x i8] c"DYNAX\00", align 1
@.str506 = private unnamed_addr constant [7 x i8] c"MAXXUM\00", align 1
@.str507 = private unnamed_addr constant [12 x i8] c"DYNAX %-10s\00", align 1
@.str508 = private unnamed_addr constant [9 x i8] c"DiMAGE G\00", align 1
@.str509 = private unnamed_addr constant [8 x i8] c"*ist DS\00", align 1
@.str510 = private unnamed_addr constant [5 x i8] c"K20D\00", align 1
@.str511 = private unnamed_addr constant [8 x i8] c"Optio S\00", align 1
@.str512 = private unnamed_addr constant [11 x i8] c"Optio 750Z\00", align 1
@.str513 = private unnamed_addr constant [4 x i8] c"S85\00", align 1
@.str514 = private unnamed_addr constant [11 x i8] c"STV680 VGA\00", align 1
@.str515 = private unnamed_addr constant [9 x i8] c"KAI-0340\00", align 1
@.str516 = private unnamed_addr constant [4 x i8] c"N95\00", align 1
@.str517 = private unnamed_addr constant [5 x i8] c"531C\00", align 1
@.str518 = private unnamed_addr constant [7 x i8] c"F-080C\00", align 1
@.str519 = private unnamed_addr constant [7 x i8] c"F-145C\00", align 1
@.str520 = private unnamed_addr constant [7 x i8] c"F-201C\00", align 1
@.str521 = private unnamed_addr constant [7 x i8] c"F-510C\00", align 1
@.str522 = private unnamed_addr constant [7 x i8] c"F-810C\00", align 1
@.str523 = private unnamed_addr constant [12 x i8] c"XCD-SX910CR\00", align 1
@.str524 = private unnamed_addr constant [5 x i8] c"2010\00", align 1
@.str525 = private unnamed_addr constant [5 x i8] c"A782\00", align 1
@.str526 = private unnamed_addr constant [7 x i8] c"3320AF\00", align 1
@.str527 = private unnamed_addr constant [4 x i8] c"ISG\00", align 1
@.str528 = private unnamed_addr constant [5 x i8] c"V96C\00", align 1
@.str529 = private unnamed_addr constant [5 x i8] c"8BPS\00", align 1
@.str530 = private unnamed_addr constant [5 x i8] c"RBTG\00", align 1
@.str531 = private unnamed_addr constant [11 x i8] c"CatchLight\00", align 1
@.str532 = private unnamed_addr constant [8 x i8] c"DMC-LC1\00", align 1
@.str533 = private unnamed_addr constant [8 x i8] c"DMC-FZ8\00", align 1
@.str534 = private unnamed_addr constant [7 x i8] c"DMC-L1\00", align 1
@.str535 = private unnamed_addr constant [9 x i8] c"DMC-FZ30\00", align 1
@.str536 = private unnamed_addr constant [9 x i8] c"DMC-FZ18\00", align 1
@.str537 = private unnamed_addr constant [9 x i8] c"DMC-FZ50\00", align 1
@.str538 = private unnamed_addr constant [8 x i8] c"DMC-L10\00", align 1
@.str539 = private unnamed_addr constant [8 x i8] c"DMC-LX3\00", align 1
@.str540 = private unnamed_addr constant [8 x i8] c"DMC-LX1\00", align 1
@.str541 = private unnamed_addr constant [7 x i8] c"DMC-G1\00", align 1
@.str542 = private unnamed_addr constant [8 x i8] c"DMC-LX2\00", align 1
@.str543 = private unnamed_addr constant [10 x i8] c"DMC-FX150\00", align 1
@.str544 = private unnamed_addr constant [7 x i8] c"C770UZ\00", align 1
@.str545 = private unnamed_addr constant [5 x i8] c"E-10\00", align 1
@.str546 = private unnamed_addr constant [5 x i8] c"E-20\00", align 1
@.str547 = private unnamed_addr constant [6 x i8] c"E-300\00", align 1
@.str548 = private unnamed_addr constant [6 x i8] c"E-500\00", align 1
@.str549 = private unnamed_addr constant [6 x i8] c"E-330\00", align 1
@.str550 = private unnamed_addr constant [8 x i8] c"SP550UZ\00", align 1
@.str551 = private unnamed_addr constant [9 x i8] c"DSC-F828\00", align 1
@.str552 = private unnamed_addr constant [5 x i8] c"RGBE\00", align 1
@.str553 = private unnamed_addr constant [7 x i8] c"DSC-V3\00", align 1
@.str554 = private unnamed_addr constant [7 x i8] c"DSC-R1\00", align 1
@.str555 = private unnamed_addr constant [10 x i8] c"DSLR-A350\00", align 1
@.str556 = private unnamed_addr constant [6 x i8] c"C603v\00", align 1
@.str557 = private unnamed_addr constant [6 x i8] c"C603y\00", align 1
@.str558 = private unnamed_addr constant [5 x i8] c"C603\00", align 1
@.str559 = private unnamed_addr constant [5 x i8] c"C330\00", align 1
@.str560 = private unnamed_addr constant [7 x i8] c"NC2000\00", align 1
@.str561 = private unnamed_addr constant [9 x i8] c"EOSDCS3B\00", align 1
@.str562 = private unnamed_addr constant [8 x i8] c"EOSDCS1\00", align 1
@.str563 = private unnamed_addr constant [7 x i8] c"DCS420\00", align 1
@.str564 = private unnamed_addr constant [7 x i8] c"DCS460\00", align 1
@.str565 = private unnamed_addr constant [8 x i8] c"DCS460A\00", align 1
@.str566 = private unnamed_addr constant [8 x i8] c"DCS660M\00", align 1
@.str567 = private unnamed_addr constant [8 x i8] c"DCS760M\00", align 1
@.str568 = private unnamed_addr constant [4 x i8] c"20X\00", align 1
@.str569 = private unnamed_addr constant [5 x i8] c"MYCY\00", align 1
@.str570 = private unnamed_addr constant [5 x i8] c"DC25\00", align 1
@.str571 = private unnamed_addr constant [3 x i8] c"40\00", align 1
@.str572 = private unnamed_addr constant [5 x i8] c"DC40\00", align 1
@.str573 = private unnamed_addr constant [5 x i8] c"DC50\00", align 1
@.str574 = private unnamed_addr constant [6 x i8] c"DC120\00", align 1
@.str575 = private unnamed_addr constant [7 x i8] c"DCS200\00", align 1
@.str576 = private unnamed_addr constant [4 x i8] c"200\00", align 1
@.str577 = private unnamed_addr constant [11 x i8] c"PC-CAM 600\00", align 1
@.str578 = private unnamed_addr constant [10 x i8] c"QV-2000UX\00", align 1
@.str579 = private unnamed_addr constant [8 x i8] c"QV-4000\00", align 1
@.str580 = private unnamed_addr constant [8 x i8] c"QV-5700\00", align 1
@.str581 = private unnamed_addr constant [7 x i8] c"QV-R41\00", align 1
@.str582 = private unnamed_addr constant [7 x i8] c"QV-R51\00", align 1
@.str583 = private unnamed_addr constant [8 x i8] c"EX-S100\00", align 1
@.str584 = private unnamed_addr constant [7 x i8] c"EX-Z50\00", align 1
@.str585 = private unnamed_addr constant [7 x i8] c"EX-Z55\00", align 1
@.str586 = private unnamed_addr constant [8 x i8] c"EX-P505\00", align 1
@.str587 = private unnamed_addr constant [8 x i8] c"EX-P700\00", align 1
@.str588 = private unnamed_addr constant [6 x i8] c"%dx%d\00", align 1
@.str589 = private unnamed_addr constant [40 x i8] c"%s: You must link dcraw with libjpeg!!\0A\00", align 1
@.str590 = private unnamed_addr constant [4 x i8] c"RGB\00", align 1
@.str591 = private unnamed_addr constant [5 x i8] c"GMCY\00", align 1
@convert_to_rgb.xyzd50_srgb = internal constant [3 x [3 x double]] [[3 x double] [double 4.360830e-01, double 3.850830e-01, double 1.430550e-01], [3 x double] [double 2.225070e-01, double 7.168880e-01, double 6.060800e-02], [3 x double] [double 1.393000e-02, double 9.709700e-02, double 7.140220e-01]], align 16
@convert_to_rgb.rgb_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00]], align 16
@convert_to_rgb.adobe_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 7.151460e-01, double 2.848560e-01, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 4.116600e-02, double 9.588390e-01]], align 16
@convert_to_rgb.wide_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 5.930870e-01, double 4.047100e-01, double 2.206000e-03], [3 x double] [double 9.541300e-02, double 8.431490e-01, double 6.143900e-02], [3 x double] [double 1.162100e-02, double 6.909100e-02, double 9.192880e-01]], align 16
@convert_to_rgb.prophoto_rgb = internal constant [3 x [3 x double]] [[3 x double] [double 5.293170e-01, double 3.300920e-01, double 1.405880e-01], [3 x double] [double 9.836800e-02, double 8.734650e-01, double 2.816900e-02], [3 x double] [double 1.687900e-02, double 1.176630e-01, double 8.654570e-01]], align 16
@convert_to_rgb.out_rgb = internal global [5 x [3 x double]*] [[3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.rgb_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.adobe_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.wide_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @convert_to_rgb.prophoto_rgb, i32 0, i32 0), [3 x double]* getelementptr inbounds ([3 x [3 x double]]* @xyz_rgb, i32 0, i32 0)], align 16
@convert_to_rgb.name = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8]* @.str592, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str593, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str594, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str595, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str596, i32 0, i32 0)], align 16
@.str592 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str593 = private unnamed_addr constant [17 x i8] c"Adobe RGB (1998)\00", align 1
@.str594 = private unnamed_addr constant [14 x i8] c"WideGamut D65\00", align 1
@.str595 = private unnamed_addr constant [13 x i8] c"ProPhoto D65\00", align 1
@.str596 = private unnamed_addr constant [4 x i8] c"XYZ\00", align 1
@convert_to_rgb.phead = internal constant [20 x i32] [i32 1024, i32 0, i32 34603008, i32 1835955314, i32 1380401696, i32 1482250784, i32 0, i32 0, i32 0, i32 1633907568, i32 0, i32 0, i32 1852796517, i32 0, i32 0, i32 0, i32 0, i32 63190, i32 65536, i32 54061], align 16
@convert_to_rgb.pbody = private unnamed_addr constant [31 x i32] [i32 10, i32 1668313716, i32 0, i32 36, i32 1684370275, i32 0, i32 40, i32 2004119668, i32 0, i32 20, i32 1651208308, i32 0, i32 20, i32 1918128707, i32 0, i32 14, i32 1733579331, i32 0, i32 14, i32 1649693251, i32 0, i32 14, i32 1918392666, i32 0, i32 20, i32 1733843290, i32 0, i32 20, i32 1649957210, i32 0, i32 20], align 16
@convert_to_rgb.pwhite = internal constant [3 x i32] [i32 62289, i32 65536, i32 71372], align 4
@convert_to_rgb.pcurve = private unnamed_addr constant [4 x i32] [i32 1668641398, i32 0, i32 1, i32 16777216], align 16
@oprof = common global i32* null, align 8
@.str597 = private unnamed_addr constant [17 x i8] c"convert_to_rgb()\00", align 1
@.str598 = private unnamed_addr constant [24 x i8] c"auto-generated by dcraw\00", align 1
@.str599 = private unnamed_addr constant [24 x i8] c"Building histograms...\0A\00", align 1
@.str600 = private unnamed_addr constant [32 x i8] c"Converting to %s colorspace...\0A\00", align 1
@histogram = common global [4 x [8192 x i32]] zeroinitializer, align 16
@.str601 = private unnamed_addr constant [30 x i8] c"Rotating image 45 degrees...\0A\00", align 1
@.str602 = private unnamed_addr constant [14 x i8] c"fuji_rotate()\00", align 1
@.str603 = private unnamed_addr constant [25 x i8] c"Stretching the image...\0A\00", align 1
@.str604 = private unnamed_addr constant [10 x i8] c"stretch()\00", align 1
@.str605 = private unnamed_addr constant [9 x i8] c"12435867\00", align 1
@.str606 = private unnamed_addr constant [12 x i8] c"dcraw v8.93\00", align 1
@.str607 = private unnamed_addr constant [30 x i8] c"%04d:%02d:%02d %02d:%02d:%02d\00", align 1
@.str608 = private unnamed_addr constant [13 x i8] c"jpeg_thumb()\00", align 1
@.str609 = private unnamed_addr constant [11 x i8] c"\FF\E1  Exif\00\00\00", align 1
@.str610 = private unnamed_addr constant [17 x i8] c"write_ppm_tiff()\00", align 1
@.str611 = private unnamed_addr constant [61 x i8] c"P7\0AWIDTH %d\0AHEIGHT %d\0ADEPTH %d\0AMAXVAL %d\0ATUPLTYPE %s\0AENDHDR\0A\00", align 1
@.str612 = private unnamed_addr constant [14 x i8] c"P%d\0A%d %d\0A%d\0A\00", align 1
@.str613 = private unnamed_addr constant [7 x i8] c"TZ=UTC\00", align 1
@.str614 = private unnamed_addr constant [31 x i8] c"\0ARaw photo decoder \22dcraw\22 v%s\00", align 1
@.str615 = private unnamed_addr constant [5 x i8] c"8.93\00", align 1
@.str616 = private unnamed_addr constant [43 x i8] c"\0Aby Dave Coffin, dcoffin a cybercom o net\0A\00", align 1
@.str617 = private unnamed_addr constant [36 x i8] c"\0AUsage:  %s [OPTION]... [FILE]...\0A\0A\00", align 1
@.str618 = private unnamed_addr constant [33 x i8] c"-v        Print verbose messages\00", align 1
@.str619 = private unnamed_addr constant [46 x i8] c"-c        Write image data to standard output\00", align 1
@.str620 = private unnamed_addr constant [43 x i8] c"-e        Extract embedded thumbnail image\00", align 1
@.str621 = private unnamed_addr constant [47 x i8] c"-i        Identify files without decoding them\00", align 1
@.str622 = private unnamed_addr constant [43 x i8] c"-i -v     Identify files and show metadata\00", align 1
@.str623 = private unnamed_addr constant [48 x i8] c"-z        Change file dates to camera timestamp\00", align 1
@.str624 = private unnamed_addr constant [48 x i8] c"-w        Use camera white balance, if possible\00", align 1
@.str625 = private unnamed_addr constant [52 x i8] c"-a        Average the whole image for white balance\00", align 1
@.str626 = private unnamed_addr constant [50 x i8] c"-A <x y w h> Average a grey box for white balance\00", align 1
@.str627 = private unnamed_addr constant [38 x i8] c"-r <r g b g> Set custom white balance\00", align 1
@.str628 = private unnamed_addr constant [49 x i8] c"+M/-M     Use/don't use an embedded color matrix\00", align 1
@.str629 = private unnamed_addr constant [39 x i8] c"-C <r b>  Correct chromatic aberration\00", align 1
@.str630 = private unnamed_addr constant [50 x i8] c"-P <file> Fix the dead pixels listed in this file\00", align 1
@.str631 = private unnamed_addr constant [47 x i8] c"-K <file> Subtract dark frame (16-bit raw PGM)\00", align 1
@.str632 = private unnamed_addr constant [33 x i8] c"-k <num>  Set the darkness level\00", align 1
@.str633 = private unnamed_addr constant [35 x i8] c"-S <num>  Set the saturation level\00", align 1
@.str634 = private unnamed_addr constant [46 x i8] c"-n <num>  Set threshold for wavelet denoising\00", align 1
@.str635 = private unnamed_addr constant [65 x i8] c"-H [0-9]  Highlight mode (0=clip, 1=unclip, 2=blend, 3+=rebuild)\00", align 1
@.str636 = private unnamed_addr constant [54 x i8] c"-t [0-7]  Flip image (0=none, 3=180, 5=90CCW, 6=90CW)\00", align 1
@.str637 = private unnamed_addr constant [63 x i8] c"-o [0-5]  Output colorspace (raw,sRGB,Adobe,Wide,ProPhoto,XYZ)\00", align 1
@.str638 = private unnamed_addr constant [53 x i8] c"-d        Document mode (no color, no interpolation)\00", align 1
@.str639 = private unnamed_addr constant [54 x i8] c"-D        Document mode without scaling (totally raw)\00", align 1
@.str640 = private unnamed_addr constant [45 x i8] c"-j        Don't stretch or rotate raw pixels\00", align 1
@.str641 = private unnamed_addr constant [49 x i8] c"-W        Don't automatically brighten the image\00", align 1
@.str642 = private unnamed_addr constant [44 x i8] c"-b <num>  Adjust brightness (default = 1.0)\00", align 1
@.str643 = private unnamed_addr constant [55 x i8] c"-g <p ts> Set custom gamma curve (default = 2.222 4.5)\00", align 1
@.str644 = private unnamed_addr constant [40 x i8] c"-q [0-3]  Set the interpolation quality\00", align 1
@.str645 = private unnamed_addr constant [58 x i8] c"-h        Half-size color image (twice as fast as \22-q 0\22)\00", align 1
@.str646 = private unnamed_addr constant [42 x i8] c"-f        Interpolate RGGB as four colors\00", align 1
@.str647 = private unnamed_addr constant [51 x i8] c"-m <num>  Apply a 3x3 median filter to R-G and B-G\00", align 1
@.str648 = private unnamed_addr constant [57 x i8] c"-s [0..N-1] Select one raw image or \22all\22 from each file\00", align 1
@.str649 = private unnamed_addr constant [58 x i8] c"-4        Write 16-bit linear instead of 8-bit with gamma\00", align 1
@.str650 = private unnamed_addr constant [36 x i8] c"-T        Write TIFF instead of PPM\00", align 1
@.str651 = private unnamed_addr constant [13 x i8] c"nbrkStqmHACg\00", align 1
@.str652 = private unnamed_addr constant [13 x i8] c"114111111422\00", align 1
@.str653 = private unnamed_addr constant [31 x i8] c"Non-numeric argument to \22-%c\22\0A\00", align 1
@.str654 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str655 = private unnamed_addr constant [23 x i8] c"Unknown option \22-%c\22.\0A\00", align 1
@.str656 = private unnamed_addr constant [22 x i8] c"No files to process.\0A\00", align 1
@.str657 = private unnamed_addr constant [42 x i8] c"Will not write an image to the terminal!\0A\00", align 1
@stdout = external global %struct._IO_FILE*
@.str658 = private unnamed_addr constant [22 x i8] c"%s has no timestamp.\0A\00", align 1
@.str659 = private unnamed_addr constant [14 x i8] c"%10ld%10d %s\0A\00", align 1
@.str660 = private unnamed_addr constant [20 x i8] c"%s time set to %d.\0A\00", align 1
@write_fun = common global void (%struct._IO_FILE*)* null, align 8
@.str661 = private unnamed_addr constant [22 x i8] c"%s has no thumbnail.\0A\00", align 1
@.str662 = private unnamed_addr constant [15 x i8] c"\0AFilename: %s\0A\00", align 1
@.str663 = private unnamed_addr constant [14 x i8] c"Timestamp: %s\00", align 1
@.str664 = private unnamed_addr constant [15 x i8] c"Camera: %s %s\0A\00", align 1
@.str665 = private unnamed_addr constant [11 x i8] c"Owner: %s\0A\00", align 1
@.str666 = private unnamed_addr constant [14 x i8] c"DNG Version: \00", align 1
@.str667 = private unnamed_addr constant [5 x i8] c"%d%c\00", align 1
@.str668 = private unnamed_addr constant [15 x i8] c"ISO speed: %d\0A\00", align 1
@.str669 = private unnamed_addr constant [10 x i8] c"Shutter: \00", align 1
@.str670 = private unnamed_addr constant [3 x i8] c"1/\00", align 1
@.str671 = private unnamed_addr constant [11 x i8] c"%0.1f sec\0A\00", align 1
@.str672 = private unnamed_addr constant [19 x i8] c"Aperture: f/%0.1f\0A\00", align 1
@.str673 = private unnamed_addr constant [24 x i8] c"Focal length: %0.1f mm\0A\00", align 1
@.str674 = private unnamed_addr constant [26 x i8] c"Embedded ICC profile: %s\0A\00", align 1
@.str675 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str676 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str677 = private unnamed_addr constant [26 x i8] c"Number of raw images: %d\0A\00", align 1
@.str678 = private unnamed_addr constant [27 x i8] c"Pixel Aspect Ratio: %0.6f\0A\00", align 1
@.str679 = private unnamed_addr constant [23 x i8] c"Thumb size:  %4d x %d\0A\00", align 1
@.str680 = private unnamed_addr constant [23 x i8] c"Full size:   %4d x %d\0A\00", align 1
@.str681 = private unnamed_addr constant [23 x i8] c"Cannot decode file %s\0A\00", align 1
@.str682 = private unnamed_addr constant [23 x i8] c"Image size:  %4d x %d\0A\00", align 1
@.str683 = private unnamed_addr constant [23 x i8] c"Output size: %4d x %d\0A\00", align 1
@.str684 = private unnamed_addr constant [15 x i8] c"Raw colors: %d\00", align 1
@.str685 = private unnamed_addr constant [18 x i8] c"\0AFilter pattern: \00", align 1
@.str686 = private unnamed_addr constant [23 x i8] c"\0ADaylight multipliers:\00", align 1
@.str687 = private unnamed_addr constant [21 x i8] c"\0ACamera multipliers:\00", align 1
@.str688 = private unnamed_addr constant [22 x i8] c"%s is a %s %s image.\0A\00", align 1
@.str689 = private unnamed_addr constant [7 x i8] c"main()\00", align 1
@.str690 = private unnamed_addr constant [33 x i8] c"Loading %s %s image from %s ...\0A\00", align 1
@.str691 = private unnamed_addr constant [43 x i8] c"%s: \22-s %d\22 requests a nonexistent image!\0A\00", align 1
@.str692 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str693 = private unnamed_addr constant [20 x i8] c".pgm\00.ppm\00.ppm\00.pam\00", align 1
@.str694 = private unnamed_addr constant [16 x i8] c"standard output\00", align 1
@.str695 = private unnamed_addr constant [6 x i8] c"_%0*d\00", align 1
@.str696 = private unnamed_addr constant [7 x i8] c".thumb\00", align 1
@.str697 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str698 = private unnamed_addr constant [24 x i8] c"Writing data to %s ...\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fc(i32 %row, i32 %col) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %row, i32* %2, align 4
  store i32 %col, i32* %3, align 4
  %4 = load i32* @filters, align 4
  %5 = icmp ne i32 %4, 1
  br i1 %5, label %6, label %17

; <label>:6                                       ; preds = %0
  %7 = load i32* @filters, align 4
  %8 = load i32* %2, align 4
  %9 = shl i32 %8, 1
  %10 = and i32 %9, 14
  %11 = load i32* %3, align 4
  %12 = and i32 %11, 1
  %13 = add nsw i32 %10, %12
  %14 = shl i32 %13, 1
  %15 = lshr i32 %7, %14
  %16 = and i32 %15, 3
  store i32 %16, i32* %1
  br label %34

; <label>:17                                      ; preds = %0
  %18 = load i32* %3, align 4
  %19 = load i16* @left_margin, align 2
  %20 = zext i16 %19 to i32
  %21 = add nsw i32 %18, %20
  %22 = and i32 %21, 15
  %23 = sext i32 %22 to i64
  %24 = load i32* %2, align 4
  %25 = load i16* @top_margin, align 2
  %26 = zext i16 %25 to i32
  %27 = add nsw i32 %24, %26
  %28 = and i32 %27, 15
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [16 x [16 x i8]]* @fc.filter, i32 0, i64 %29
  %31 = getelementptr inbounds [16 x i8]* %30, i32 0, i64 %23
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i32
  store i32 %33, i32* %1
  br label %34

; <label>:34                                      ; preds = %17, %6
  %35 = load i32* %1
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define void @merror(i8* %ptr, i8* %where) #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  store i8* %ptr, i8** %1, align 8
  store i8* %where, i8** %2, align 8
  %3 = load i8** %1, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  ret void

; <label>:6                                       ; preds = %0
  %7 = load %struct._IO_FILE** @stderr, align 8
  %8 = load i8** @ifname, align 8
  %9 = load i8** %2, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8]* @.str, i32 0, i32 0), i8* %8, i8* %9)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0), i32 1) #8
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @longjmp(%struct.__jmp_buf_tag*, i32) #2

; Function Attrs: nounwind uwtable
define void @derror() #0 {
  %1 = load i32* @data_error, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %19, label %3

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = load i8** @ifname, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i8* %5)
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @feof(%struct._IO_FILE* %7) #4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %3
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([24 x i8]* @.str2, i32 0, i32 0))
  br label %18

; <label>:13                                      ; preds = %3
  %14 = load %struct._IO_FILE** @stderr, align 8
  %15 = load %struct._IO_FILE** @ifp, align 8
  %16 = call i64 @ftello(%struct._IO_FILE* %15)
  %17 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([26 x i8]* @.str3, i32 0, i32 0), i64 %16)
  br label %18

; <label>:18                                      ; preds = %13, %10
  br label %19

; <label>:19                                      ; preds = %18, %0
  store i32 1, i32* @data_error, align 4
  ret void
}

; Function Attrs: nounwind
declare i32 @feof(%struct._IO_FILE*) #3

declare i64 @ftello(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define zeroext i16 @sget2(i8* %s) #0 {
  %1 = alloca i16, align 2
  %2 = alloca i8*, align 8
  store i8* %s, i8** %2, align 8
  %3 = load i16* @order, align 2
  %4 = sext i16 %3 to i32
  %5 = icmp eq i32 %4, 18761
  br i1 %5, label %6, label %18

; <label>:6                                       ; preds = %0
  %7 = load i8** %2, align 8
  %8 = getelementptr inbounds i8* %7, i64 0
  %9 = load i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = load i8** %2, align 8
  %12 = getelementptr inbounds i8* %11, i64 1
  %13 = load i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl i32 %14, 8
  %16 = or i32 %10, %15
  %17 = trunc i32 %16 to i16
  store i16 %17, i16* %1
  br label %30

; <label>:18                                      ; preds = %0
  %19 = load i8** %2, align 8
  %20 = getelementptr inbounds i8* %19, i64 0
  %21 = load i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = shl i32 %22, 8
  %24 = load i8** %2, align 8
  %25 = getelementptr inbounds i8* %24, i64 1
  %26 = load i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = or i32 %23, %27
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %1
  br label %30

; <label>:30                                      ; preds = %18, %6
  %31 = load i16* %1
  ret i16 %31
}

; Function Attrs: nounwind uwtable
define zeroext i16 @get2() #0 {
  %str = alloca [2 x i8], align 1
  %1 = bitcast [2 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([2 x i8]* @get2.str, i32 0, i32 0), i64 2, i32 1, i1 false)
  %2 = getelementptr inbounds [2 x i8]* %str, i32 0, i32 0
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = call i64 @fread(i8* %2, i64 1, i64 2, %struct._IO_FILE* %3)
  %5 = getelementptr inbounds [2 x i8]* %str, i32 0, i32 0
  %6 = call zeroext i16 @sget2(i8* %5)
  ret i16 %6
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define i32 @sget4(i8* %s) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  store i8* %s, i8** %2, align 8
  %3 = load i16* @order, align 2
  %4 = sext i16 %3 to i32
  %5 = icmp eq i32 %4, 18761
  br i1 %5, label %6, label %29

; <label>:6                                       ; preds = %0
  %7 = load i8** %2, align 8
  %8 = getelementptr inbounds i8* %7, i64 0
  %9 = load i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = load i8** %2, align 8
  %12 = getelementptr inbounds i8* %11, i64 1
  %13 = load i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl i32 %14, 8
  %16 = or i32 %10, %15
  %17 = load i8** %2, align 8
  %18 = getelementptr inbounds i8* %17, i64 2
  %19 = load i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl i32 %20, 16
  %22 = or i32 %16, %21
  %23 = load i8** %2, align 8
  %24 = getelementptr inbounds i8* %23, i64 3
  %25 = load i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl i32 %26, 24
  %28 = or i32 %22, %27
  store i32 %28, i32* %1
  br label %52

; <label>:29                                      ; preds = %0
  %30 = load i8** %2, align 8
  %31 = getelementptr inbounds i8* %30, i64 0
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl i32 %33, 24
  %35 = load i8** %2, align 8
  %36 = getelementptr inbounds i8* %35, i64 1
  %37 = load i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %38, 16
  %40 = or i32 %34, %39
  %41 = load i8** %2, align 8
  %42 = getelementptr inbounds i8* %41, i64 2
  %43 = load i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl i32 %44, 8
  %46 = or i32 %40, %45
  %47 = load i8** %2, align 8
  %48 = getelementptr inbounds i8* %47, i64 3
  %49 = load i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %46, %50
  store i32 %51, i32* %1
  br label %52

; <label>:52                                      ; preds = %29, %6
  %53 = load i32* %1
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define i32 @get4() #0 {
  %str = alloca [4 x i8], align 1
  %1 = bitcast [4 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([4 x i8]* @get4.str, i32 0, i32 0), i64 4, i32 1, i1 false)
  %2 = getelementptr inbounds [4 x i8]* %str, i32 0, i32 0
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = call i64 @fread(i8* %2, i64 1, i64 4, %struct._IO_FILE* %3)
  %5 = getelementptr inbounds [4 x i8]* %str, i32 0, i32 0
  %6 = call i32 @sget4(i8* %5)
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define i32 @getint(i32 %type) #0 {
  %1 = alloca i32, align 4
  store i32 %type, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = icmp eq i32 %2, 3
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = call zeroext i16 @get2()
  %6 = zext i16 %5 to i32
  br label %9

; <label>:7                                       ; preds = %0
  %8 = call i32 @get4()
  br label %9

; <label>:9                                       ; preds = %7, %4
  %10 = phi i32 [ %6, %4 ], [ %8, %7 ]
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define float @int_to_float(i32 %i) #0 {
  %1 = alloca i32, align 4
  %u = alloca %union.anon, align 4
  store i32 %i, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = bitcast %union.anon* %u to i32*
  store i32 %2, i32* %3, align 4
  %4 = bitcast %union.anon* %u to float*
  %5 = load float* %4, align 4
  ret float %5
}

; Function Attrs: nounwind uwtable
define double @getreal(i32 %type) #0 {
  %1 = alloca double, align 8
  %2 = alloca i32, align 4
  %u = alloca %union.anon.0, align 8
  %i = alloca i32, align 4
  %rev = alloca i32, align 4
  store i32 %type, i32* %2, align 4
  %3 = load i32* %2, align 4
  switch i32 %3, label %69 [
    i32 3, label %4
    i32 4, label %7
    i32 5, label %10
    i32 8, label %19
    i32 9, label %22
    i32 10, label %25
    i32 11, label %34
    i32 12, label %38
  ]

; <label>:4                                       ; preds = %0
  %5 = call zeroext i16 @get2()
  %6 = uitofp i16 %5 to double
  store double %6, double* %1
  br label %73

; <label>:7                                       ; preds = %0
  %8 = call i32 @get4()
  %9 = uitofp i32 %8 to double
  store double %9, double* %1
  br label %73

; <label>:10                                      ; preds = %0
  %11 = call i32 @get4()
  %12 = uitofp i32 %11 to double
  %13 = bitcast %union.anon.0* %u to double*
  store double %12, double* %13, align 8
  %14 = bitcast %union.anon.0* %u to double*
  %15 = load double* %14, align 8
  %16 = call i32 @get4()
  %17 = uitofp i32 %16 to double
  %18 = fdiv double %15, %17
  store double %18, double* %1
  br label %73

; <label>:19                                      ; preds = %0
  %20 = call zeroext i16 @get2()
  %21 = sitofp i16 %20 to double
  store double %21, double* %1
  br label %73

; <label>:22                                      ; preds = %0
  %23 = call i32 @get4()
  %24 = sitofp i32 %23 to double
  store double %24, double* %1
  br label %73

; <label>:25                                      ; preds = %0
  %26 = call i32 @get4()
  %27 = sitofp i32 %26 to double
  %28 = bitcast %union.anon.0* %u to double*
  store double %27, double* %28, align 8
  %29 = bitcast %union.anon.0* %u to double*
  %30 = load double* %29, align 8
  %31 = call i32 @get4()
  %32 = sitofp i32 %31 to double
  %33 = fdiv double %30, %32
  store double %33, double* %1
  br label %73

; <label>:34                                      ; preds = %0
  %35 = call i32 @get4()
  %36 = call float @int_to_float(i32 %35)
  %37 = fpext float %36 to double
  store double %37, double* %1
  br label %73

; <label>:38                                      ; preds = %0
  %39 = load i16* @order, align 2
  %40 = sext i16 %39 to i32
  %41 = icmp eq i32 %40, 18761
  %42 = zext i1 %41 to i32
  %43 = call zeroext i16 @ntohs(i16 zeroext 4660) #9
  %44 = zext i16 %43 to i32
  %45 = icmp eq i32 %44, 4660
  %46 = zext i1 %45 to i32
  %47 = icmp eq i32 %42, %46
  %48 = zext i1 %47 to i32
  %49 = mul nsw i32 7, %48
  store i32 %49, i32* %rev, align 4
  store i32 0, i32* %i, align 4
  br label %50

; <label>:50                                      ; preds = %63, %38
  %51 = load i32* %i, align 4
  %52 = icmp slt i32 %51, 8
  br i1 %52, label %53, label %66

; <label>:53                                      ; preds = %50
  %54 = load %struct._IO_FILE** @ifp, align 8
  %55 = call i32 @getc_unlocked(%struct._IO_FILE* %54)
  %56 = trunc i32 %55 to i8
  %57 = load i32* %i, align 4
  %58 = load i32* %rev, align 4
  %59 = xor i32 %57, %58
  %60 = sext i32 %59 to i64
  %61 = bitcast %union.anon.0* %u to [8 x i8]*
  %62 = getelementptr inbounds [8 x i8]* %61, i32 0, i64 %60
  store i8 %56, i8* %62, align 1
  br label %63

; <label>:63                                      ; preds = %53
  %64 = load i32* %i, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %i, align 4
  br label %50

; <label>:66                                      ; preds = %50
  %67 = bitcast %union.anon.0* %u to double*
  %68 = load double* %67, align 8
  store double %68, double* %1
  br label %73

; <label>:69                                      ; preds = %0
  %70 = load %struct._IO_FILE** @ifp, align 8
  %71 = call i32 @getc_unlocked(%struct._IO_FILE* %70)
  %72 = sitofp i32 %71 to double
  store double %72, double* %1
  br label %73

; <label>:73                                      ; preds = %69, %66, %34, %25, %22, %19, %10, %7, %4
  %74 = load double* %1
  ret double %74
}

; Function Attrs: nounwind readnone
declare zeroext i16 @ntohs(i16 zeroext) #5

declare i32 @getc_unlocked(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @read_shorts(i16* %pixel, i32 %count) #0 {
  %1 = alloca i16*, align 8
  %2 = alloca i32, align 4
  store i16* %pixel, i16** %1, align 8
  store i32 %count, i32* %2, align 4
  %3 = load i16** %1, align 8
  %4 = bitcast i16* %3 to i8*
  %5 = load i32* %2, align 4
  %6 = sext i32 %5 to i64
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i64 @fread(i8* %4, i64 2, i64 %6, %struct._IO_FILE* %7)
  %9 = load i32* %2, align 4
  %10 = sext i32 %9 to i64
  %11 = icmp ult i64 %8, %10
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %0
  call void @derror()
  br label %13

; <label>:13                                      ; preds = %12, %0
  %14 = load i16* @order, align 2
  %15 = sext i16 %14 to i32
  %16 = icmp eq i32 %15, 18761
  %17 = zext i1 %16 to i32
  %18 = call zeroext i16 @ntohs(i16 zeroext 4660) #9
  %19 = zext i16 %18 to i32
  %20 = icmp eq i32 %19, 4660
  %21 = zext i1 %20 to i32
  %22 = icmp eq i32 %17, %21
  br i1 %22, label %23, label %31

; <label>:23                                      ; preds = %13
  %24 = load i16** %1, align 8
  %25 = bitcast i16* %24 to i8*
  %26 = load i16** %1, align 8
  %27 = bitcast i16* %26 to i8*
  %28 = load i32* %2, align 4
  %29 = mul nsw i32 %28, 2
  %30 = sext i32 %29 to i64
  call void @swab(i8* %25, i8* %27, i64 %30) #4
  br label %31

; <label>:31                                      ; preds = %23, %13
  ret void
}

; Function Attrs: nounwind
declare void @swab(i8*, i8*, i64) #3

; Function Attrs: nounwind uwtable
define void @canon_black(double* %dark) #0 {
  %1 = alloca double*, align 8
  %c = alloca i32, align 4
  %diff = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store double* %dark, double** %1, align 8
  %2 = load i16* @raw_width, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @width, align 2
  %5 = zext i16 %4 to i32
  %6 = add nsw i32 %5, 4
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  br label %114

; <label>:9                                       ; preds = %0
  store i32 0, i32* %c, align 4
  br label %10

; <label>:10                                      ; preds = %31, %9
  %11 = load i32* %c, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %34

; <label>:13                                      ; preds = %10
  %14 = load i16* @raw_width, align 2
  %15 = zext i16 %14 to i32
  %16 = load i16* @width, align 2
  %17 = zext i16 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = sub nsw i32 %18, 2
  %20 = load i16* @height, align 2
  %21 = zext i16 %20 to i32
  %22 = mul nsw i32 %19, %21
  %23 = ashr i32 %22, 1
  %24 = sitofp i32 %23 to double
  %25 = load i32* %c, align 4
  %26 = sext i32 %25 to i64
  %27 = load double** %1, align 8
  %28 = getelementptr inbounds double* %27, i64 %26
  %29 = load double* %28, align 8
  %30 = fdiv double %29, %24
  store double %30, double* %28, align 8
  br label %31

; <label>:31                                      ; preds = %13
  %32 = load i32* %c, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %c, align 4
  br label %10

; <label>:34                                      ; preds = %10
  %35 = load double** %1, align 8
  %36 = getelementptr inbounds double* %35, i64 0
  %37 = load double* %36, align 8
  %38 = load double** %1, align 8
  %39 = getelementptr inbounds double* %38, i64 1
  %40 = load double* %39, align 8
  %41 = fsub double %37, %40
  %42 = fptosi double %41 to i32
  store i32 %42, i32* %diff, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %97

; <label>:44                                      ; preds = %34
  store i32 0, i32* %row, align 4
  br label %45

; <label>:45                                      ; preds = %93, %44
  %46 = load i32* %row, align 4
  %47 = load i16* @height, align 2
  %48 = zext i16 %47 to i32
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %96

; <label>:50                                      ; preds = %45
  store i32 1, i32* %col, align 4
  br label %51

; <label>:51                                      ; preds = %89, %50
  %52 = load i32* %col, align 4
  %53 = load i16* @width, align 2
  %54 = zext i16 %53 to i32
  %55 = icmp slt i32 %52, %54
  br i1 %55, label %56, label %92

; <label>:56                                      ; preds = %51
  %57 = load i32* %diff, align 4
  %58 = load i32* @filters, align 4
  %59 = load i32* %row, align 4
  %60 = shl i32 %59, 1
  %61 = and i32 %60, 14
  %62 = load i32* %col, align 4
  %63 = and i32 %62, 1
  %64 = add nsw i32 %61, %63
  %65 = shl i32 %64, 1
  %66 = lshr i32 %58, %65
  %67 = and i32 %66, 3
  %68 = zext i32 %67 to i64
  %69 = load i32* %row, align 4
  %70 = load i16* @shrink, align 2
  %71 = zext i16 %70 to i32
  %72 = ashr i32 %69, %71
  %73 = load i16* @iwidth, align 2
  %74 = zext i16 %73 to i32
  %75 = mul nsw i32 %72, %74
  %76 = load i32* %col, align 4
  %77 = load i16* @shrink, align 2
  %78 = zext i16 %77 to i32
  %79 = ashr i32 %76, %78
  %80 = add nsw i32 %75, %79
  %81 = sext i32 %80 to i64
  %82 = load [4 x i16]** @image, align 8
  %83 = getelementptr inbounds [4 x i16]* %82, i64 %81
  %84 = getelementptr inbounds [4 x i16]* %83, i32 0, i64 %68
  %85 = load i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nsw i32 %86, %57
  %88 = trunc i32 %87 to i16
  store i16 %88, i16* %84, align 2
  br label %89

; <label>:89                                      ; preds = %56
  %90 = load i32* %col, align 4
  %91 = add nsw i32 %90, 2
  store i32 %91, i32* %col, align 4
  br label %51

; <label>:92                                      ; preds = %51
  br label %93

; <label>:93                                      ; preds = %92
  %94 = load i32* %row, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %row, align 4
  br label %45

; <label>:96                                      ; preds = %45
  br label %97

; <label>:97                                      ; preds = %96, %34
  %98 = load i32* %diff, align 4
  %99 = sitofp i32 %98 to double
  %100 = load double** %1, align 8
  %101 = getelementptr inbounds double* %100, i64 1
  %102 = load double* %101, align 8
  %103 = fadd double %102, %99
  store double %103, double* %101, align 8
  %104 = load double** %1, align 8
  %105 = getelementptr inbounds double* %104, i64 0
  %106 = load double* %105, align 8
  %107 = load double** %1, align 8
  %108 = getelementptr inbounds double* %107, i64 1
  %109 = load double* %108, align 8
  %110 = fadd double %106, %109
  %111 = fadd double %110, 1.000000e+00
  %112 = fdiv double %111, 2.000000e+00
  %113 = fptoui double %112 to i32
  store i32 %113, i32* @black, align 4
  br label %114

; <label>:114                                     ; preds = %97, %8
  ret void
}

; Function Attrs: nounwind uwtable
define void @canon_600_fixed_wb(i32 %temp) #0 {
  %1 = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %i = alloca i32, align 4
  %frac = alloca float, align 4
  store i32 %temp, i32* %1, align 4
  store float 0.000000e+00, float* %frac, align 4
  store i32 4, i32* %lo, align 4
  br label %2

; <label>:2                                       ; preds = %16, %0
  %3 = load i32* %lo, align 4
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* %lo, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %17

; <label>:6                                       ; preds = %2
  %7 = load i32* %lo, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %8
  %10 = getelementptr inbounds [5 x i16]* %9, i32 0, i32 0
  %11 = load i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = load i32* %1, align 4
  %14 = icmp sle i32 %12, %13
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %6
  br label %17

; <label>:16                                      ; preds = %6
  br label %2

; <label>:17                                      ; preds = %15, %2
  store i32 0, i32* %hi, align 4
  br label %18

; <label>:18                                      ; preds = %32, %17
  %19 = load i32* %hi, align 4
  %20 = icmp slt i32 %19, 3
  br i1 %20, label %21, label %35

; <label>:21                                      ; preds = %18
  %22 = load i32* %hi, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %23
  %25 = getelementptr inbounds [5 x i16]* %24, i32 0, i32 0
  %26 = load i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = load i32* %1, align 4
  %29 = icmp sge i32 %27, %28
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %21
  br label %35

; <label>:31                                      ; preds = %21
  br label %32

; <label>:32                                      ; preds = %31
  %33 = load i32* %hi, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %hi, align 4
  br label %18

; <label>:35                                      ; preds = %30, %18
  %36 = load i32* %lo, align 4
  %37 = load i32* %hi, align 4
  %38 = icmp ne i32 %36, %37
  br i1 %38, label %39, label %64

; <label>:39                                      ; preds = %35
  %40 = load i32* %1, align 4
  %41 = load i32* %lo, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %42
  %44 = getelementptr inbounds [5 x i16]* %43, i32 0, i32 0
  %45 = load i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = sub nsw i32 %40, %46
  %48 = sitofp i32 %47 to float
  %49 = load i32* %hi, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %50
  %52 = getelementptr inbounds [5 x i16]* %51, i32 0, i32 0
  %53 = load i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = load i32* %lo, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %56
  %58 = getelementptr inbounds [5 x i16]* %57, i32 0, i32 0
  %59 = load i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = sub nsw i32 %54, %60
  %62 = sitofp i32 %61 to float
  %63 = fdiv float %48, %62
  store float %63, float* %frac, align 4
  br label %64

; <label>:64                                      ; preds = %39, %35
  store i32 1, i32* %i, align 4
  br label %65

; <label>:65                                      ; preds = %98, %64
  %66 = load i32* %i, align 4
  %67 = icmp slt i32 %66, 5
  br i1 %67, label %68, label %101

; <label>:68                                      ; preds = %65
  %69 = load float* %frac, align 4
  %70 = load i32* %i, align 4
  %71 = sext i32 %70 to i64
  %72 = load i32* %hi, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %73
  %75 = getelementptr inbounds [5 x i16]* %74, i32 0, i64 %71
  %76 = load i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = sitofp i32 %77 to float
  %79 = fmul float %69, %78
  %80 = load float* %frac, align 4
  %81 = fsub float 1.000000e+00, %80
  %82 = load i32* %i, align 4
  %83 = sext i32 %82 to i64
  %84 = load i32* %lo, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [4 x [5 x i16]]* @canon_600_fixed_wb.mul, i32 0, i64 %85
  %87 = getelementptr inbounds [5 x i16]* %86, i32 0, i64 %83
  %88 = load i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = sitofp i32 %89 to float
  %91 = fmul float %81, %90
  %92 = fadd float %79, %91
  %93 = fdiv float 1.000000e+00, %92
  %94 = load i32* %i, align 4
  %95 = sub nsw i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %96
  store float %93, float* %97, align 4
  br label %98

; <label>:98                                      ; preds = %68
  %99 = load i32* %i, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %i, align 4
  br label %65

; <label>:101                                     ; preds = %65
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @canon_600_color(i32* %ratio, i32 %mar) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32, align 4
  %clipped = alloca i32, align 4
  %target = alloca i32, align 4
  %miss = alloca i32, align 4
  store i32* %ratio, i32** %2, align 8
  store i32 %mar, i32* %3, align 4
  store i32 0, i32* %clipped, align 4
  %4 = load float* @flash_used, align 4
  %5 = fcmp une float %4, 0.000000e+00
  br i1 %5, label %6, label %23

; <label>:6                                       ; preds = %0
  %7 = load i32** %2, align 8
  %8 = getelementptr inbounds i32* %7, i64 1
  %9 = load i32* %8, align 4
  %10 = icmp slt i32 %9, -104
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %6
  %12 = load i32** %2, align 8
  %13 = getelementptr inbounds i32* %12, i64 1
  store i32 -104, i32* %13, align 4
  store i32 1, i32* %clipped, align 4
  br label %14

; <label>:14                                      ; preds = %11, %6
  %15 = load i32** %2, align 8
  %16 = getelementptr inbounds i32* %15, i64 1
  %17 = load i32* %16, align 4
  %18 = icmp sgt i32 %17, 12
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %14
  %20 = load i32** %2, align 8
  %21 = getelementptr inbounds i32* %20, i64 1
  store i32 12, i32* %21, align 4
  store i32 1, i32* %clipped, align 4
  br label %22

; <label>:22                                      ; preds = %19, %14
  br label %51

; <label>:23                                      ; preds = %0
  %24 = load i32** %2, align 8
  %25 = getelementptr inbounds i32* %24, i64 1
  %26 = load i32* %25, align 4
  %27 = icmp slt i32 %26, -264
  br i1 %27, label %33, label %28

; <label>:28                                      ; preds = %23
  %29 = load i32** %2, align 8
  %30 = getelementptr inbounds i32* %29, i64 1
  %31 = load i32* %30, align 4
  %32 = icmp sgt i32 %31, 461
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %28, %23
  store i32 2, i32* %1
  br label %121

; <label>:34                                      ; preds = %28
  %35 = load i32** %2, align 8
  %36 = getelementptr inbounds i32* %35, i64 1
  %37 = load i32* %36, align 4
  %38 = icmp slt i32 %37, -50
  br i1 %38, label %39, label %42

; <label>:39                                      ; preds = %34
  %40 = load i32** %2, align 8
  %41 = getelementptr inbounds i32* %40, i64 1
  store i32 -50, i32* %41, align 4
  store i32 1, i32* %clipped, align 4
  br label %42

; <label>:42                                      ; preds = %39, %34
  %43 = load i32** %2, align 8
  %44 = getelementptr inbounds i32* %43, i64 1
  %45 = load i32* %44, align 4
  %46 = icmp sgt i32 %45, 307
  br i1 %46, label %47, label %50

; <label>:47                                      ; preds = %42
  %48 = load i32** %2, align 8
  %49 = getelementptr inbounds i32* %48, i64 1
  store i32 307, i32* %49, align 4
  store i32 1, i32* %clipped, align 4
  br label %50

; <label>:50                                      ; preds = %47, %42
  br label %51

; <label>:51                                      ; preds = %50, %22
  %52 = load float* @flash_used, align 4
  %53 = fcmp une float %52, 0.000000e+00
  br i1 %53, label %59, label %54

; <label>:54                                      ; preds = %51
  %55 = load i32** %2, align 8
  %56 = getelementptr inbounds i32* %55, i64 1
  %57 = load i32* %56, align 4
  %58 = icmp slt i32 %57, 197
  br i1 %58, label %59, label %66

; <label>:59                                      ; preds = %54, %51
  %60 = load i32** %2, align 8
  %61 = getelementptr inbounds i32* %60, i64 1
  %62 = load i32* %61, align 4
  %63 = mul nsw i32 398, %62
  %64 = ashr i32 %63, 10
  %65 = sub nsw i32 -38, %64
  br label %73

; <label>:66                                      ; preds = %54
  %67 = load i32** %2, align 8
  %68 = getelementptr inbounds i32* %67, i64 1
  %69 = load i32* %68, align 4
  %70 = mul nsw i32 48, %69
  %71 = ashr i32 %70, 10
  %72 = add nsw i32 -123, %71
  br label %73

; <label>:73                                      ; preds = %66, %59
  %74 = phi i32 [ %65, %59 ], [ %72, %66 ]
  store i32 %74, i32* %target, align 4
  %75 = load i32* %target, align 4
  %76 = load i32* %3, align 4
  %77 = sub nsw i32 %75, %76
  %78 = load i32** %2, align 8
  %79 = getelementptr inbounds i32* %78, i64 0
  %80 = load i32* %79, align 4
  %81 = icmp sle i32 %77, %80
  br i1 %81, label %82, label %93

; <label>:82                                      ; preds = %73
  %83 = load i32* %target, align 4
  %84 = add nsw i32 %83, 20
  %85 = load i32** %2, align 8
  %86 = getelementptr inbounds i32* %85, i64 0
  %87 = load i32* %86, align 4
  %88 = icmp sge i32 %84, %87
  br i1 %88, label %89, label %93

; <label>:89                                      ; preds = %82
  %90 = load i32* %clipped, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %93, label %92

; <label>:92                                      ; preds = %89
  store i32 0, i32* %1
  br label %121

; <label>:93                                      ; preds = %89, %82, %73
  %94 = load i32* %target, align 4
  %95 = load i32** %2, align 8
  %96 = getelementptr inbounds i32* %95, i64 0
  %97 = load i32* %96, align 4
  %98 = sub nsw i32 %94, %97
  store i32 %98, i32* %miss, align 4
  %99 = load i32* %miss, align 4
  %100 = call i32 @abs(i32 %99) #9
  %101 = load i32* %3, align 4
  %102 = mul nsw i32 %101, 4
  %103 = icmp sge i32 %100, %102
  br i1 %103, label %104, label %105

; <label>:104                                     ; preds = %93
  store i32 2, i32* %1
  br label %121

; <label>:105                                     ; preds = %93
  %106 = load i32* %miss, align 4
  %107 = icmp slt i32 %106, -20
  br i1 %107, label %108, label %109

; <label>:108                                     ; preds = %105
  store i32 -20, i32* %miss, align 4
  br label %109

; <label>:109                                     ; preds = %108, %105
  %110 = load i32* %miss, align 4
  %111 = load i32* %3, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %113, label %115

; <label>:113                                     ; preds = %109
  %114 = load i32* %3, align 4
  store i32 %114, i32* %miss, align 4
  br label %115

; <label>:115                                     ; preds = %113, %109
  %116 = load i32* %target, align 4
  %117 = load i32* %miss, align 4
  %118 = sub nsw i32 %116, %117
  %119 = load i32** %2, align 8
  %120 = getelementptr inbounds i32* %119, i64 0
  store i32 %118, i32* %120, align 4
  store i32 1, i32* %1
  br label %121

; <label>:121                                     ; preds = %115, %104, %92, %33
  %122 = load i32* %1
  ret i32 %122
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #5

; Function Attrs: nounwind uwtable
define void @canon_600_auto_wb() #0 {
  %mar = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  %count = alloca [2 x i32], align 4
  %test = alloca [8 x i32], align 16
  %total = alloca [2 x [8 x i32]], align 16
  %ratio = alloca [2 x [2 x i32]], align 16
  %stat = alloca [2 x i32], align 4
  %1 = bitcast [2 x i32]* %count to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 8, i32 4, i1 false)
  %2 = bitcast [2 x [8 x i32]]* %total to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 64, i32 16, i1 false)
  %3 = load float* @canon_ev, align 4
  %4 = fpext float %3 to double
  %5 = fadd double %4, 5.000000e-01
  %6 = fptosi double %5 to i32
  store i32 %6, i32* %i, align 4
  %7 = load i32* %i, align 4
  %8 = icmp slt i32 %7, 10
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %0
  store i32 150, i32* %mar, align 4
  br label %19

; <label>:10                                      ; preds = %0
  %11 = load i32* %i, align 4
  %12 = icmp sgt i32 %11, 12
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %10
  store i32 20, i32* %mar, align 4
  br label %18

; <label>:14                                      ; preds = %10
  %15 = load i32* %i, align 4
  %16 = mul nsw i32 20, %15
  %17 = sub nsw i32 280, %16
  store i32 %17, i32* %mar, align 4
  br label %18

; <label>:18                                      ; preds = %14, %13
  br label %19

; <label>:19                                      ; preds = %18, %9
  %20 = load float* @flash_used, align 4
  %21 = fcmp une float %20, 0.000000e+00
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %19
  store i32 80, i32* %mar, align 4
  br label %23

; <label>:23                                      ; preds = %22, %19
  store i32 14, i32* %row, align 4
  br label %24

; <label>:24                                      ; preds = %294, %23
  %25 = load i32* %row, align 4
  %26 = load i16* @height, align 2
  %27 = zext i16 %26 to i32
  %28 = sub nsw i32 %27, 14
  %29 = icmp slt i32 %25, %28
  br i1 %29, label %30, label %297

; <label>:30                                      ; preds = %24
  store i32 10, i32* %col, align 4
  br label %31

; <label>:31                                      ; preds = %290, %30
  %32 = load i32* %col, align 4
  %33 = load i16* @width, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %293

; <label>:36                                      ; preds = %31
  store i32 0, i32* %i, align 4
  br label %37

; <label>:37                                      ; preds = %103, %36
  %38 = load i32* %i, align 4
  %39 = icmp slt i32 %38, 8
  br i1 %39, label %40, label %106

; <label>:40                                      ; preds = %37
  %41 = load i32* @filters, align 4
  %42 = load i32* %row, align 4
  %43 = load i32* %i, align 4
  %44 = ashr i32 %43, 1
  %45 = add nsw i32 %42, %44
  %46 = shl i32 %45, 1
  %47 = and i32 %46, 14
  %48 = load i32* %col, align 4
  %49 = load i32* %i, align 4
  %50 = and i32 %49, 1
  %51 = add nsw i32 %48, %50
  %52 = and i32 %51, 1
  %53 = add nsw i32 %47, %52
  %54 = shl i32 %53, 1
  %55 = lshr i32 %41, %54
  %56 = and i32 %55, 3
  %57 = zext i32 %56 to i64
  %58 = load i32* %row, align 4
  %59 = load i32* %i, align 4
  %60 = ashr i32 %59, 1
  %61 = add nsw i32 %58, %60
  %62 = load i16* @shrink, align 2
  %63 = zext i16 %62 to i32
  %64 = ashr i32 %61, %63
  %65 = load i16* @iwidth, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nsw i32 %64, %66
  %68 = load i32* %col, align 4
  %69 = load i32* %i, align 4
  %70 = and i32 %69, 1
  %71 = add nsw i32 %68, %70
  %72 = load i16* @shrink, align 2
  %73 = zext i16 %72 to i32
  %74 = ashr i32 %71, %73
  %75 = add nsw i32 %67, %74
  %76 = sext i32 %75 to i64
  %77 = load [4 x i16]** @image, align 8
  %78 = getelementptr inbounds [4 x i16]* %77, i64 %76
  %79 = getelementptr inbounds [4 x i16]* %78, i32 0, i64 %57
  %80 = load i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = load i32* %i, align 4
  %83 = and i32 %82, 4
  %84 = load i32* @filters, align 4
  %85 = load i32* %row, align 4
  %86 = load i32* %i, align 4
  %87 = ashr i32 %86, 1
  %88 = add nsw i32 %85, %87
  %89 = shl i32 %88, 1
  %90 = and i32 %89, 14
  %91 = load i32* %col, align 4
  %92 = load i32* %i, align 4
  %93 = and i32 %92, 1
  %94 = add nsw i32 %91, %93
  %95 = and i32 %94, 1
  %96 = add nsw i32 %90, %95
  %97 = shl i32 %96, 1
  %98 = lshr i32 %84, %97
  %99 = and i32 %98, 3
  %100 = add i32 %83, %99
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %101
  store i32 %81, i32* %102, align 4
  br label %103

; <label>:103                                     ; preds = %40
  %104 = load i32* %i, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %i, align 4
  br label %37

; <label>:106                                     ; preds = %37
  store i32 0, i32* %i, align 4
  br label %107

; <label>:107                                     ; preds = %124, %106
  %108 = load i32* %i, align 4
  %109 = icmp slt i32 %108, 8
  br i1 %109, label %110, label %127

; <label>:110                                     ; preds = %107
  %111 = load i32* %i, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %112
  %114 = load i32* %113, align 4
  %115 = icmp slt i32 %114, 150
  br i1 %115, label %122, label %116

; <label>:116                                     ; preds = %110
  %117 = load i32* %i, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %118
  %120 = load i32* %119, align 4
  %121 = icmp sgt i32 %120, 1500
  br i1 %121, label %122, label %123

; <label>:122                                     ; preds = %116, %110
  br label %289

; <label>:123                                     ; preds = %116
  br label %124

; <label>:124                                     ; preds = %123
  %125 = load i32* %i, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %i, align 4
  br label %107

; <label>:127                                     ; preds = %107
  store i32 0, i32* %i, align 4
  br label %128

; <label>:128                                     ; preds = %146, %127
  %129 = load i32* %i, align 4
  %130 = icmp slt i32 %129, 4
  br i1 %130, label %131, label %149

; <label>:131                                     ; preds = %128
  %132 = load i32* %i, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %133
  %135 = load i32* %134, align 4
  %136 = load i32* %i, align 4
  %137 = add nsw i32 %136, 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %138
  %140 = load i32* %139, align 4
  %141 = sub nsw i32 %135, %140
  %142 = call i32 @abs(i32 %141) #9
  %143 = icmp sgt i32 %142, 50
  br i1 %143, label %144, label %145

; <label>:144                                     ; preds = %131
  br label %289

; <label>:145                                     ; preds = %131
  br label %146

; <label>:146                                     ; preds = %145
  %147 = load i32* %i, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %i, align 4
  br label %128

; <label>:149                                     ; preds = %128
  store i32 0, i32* %i, align 4
  br label %150

; <label>:150                                     ; preds = %203, %149
  %151 = load i32* %i, align 4
  %152 = icmp slt i32 %151, 2
  br i1 %152, label %153, label %206

; <label>:153                                     ; preds = %150
  store i32 0, i32* %j, align 4
  br label %154

; <label>:154                                     ; preds = %190, %153
  %155 = load i32* %j, align 4
  %156 = icmp slt i32 %155, 4
  br i1 %156, label %157, label %193

; <label>:157                                     ; preds = %154
  %158 = load i32* %i, align 4
  %159 = mul nsw i32 %158, 4
  %160 = load i32* %j, align 4
  %161 = add nsw i32 %159, %160
  %162 = add nsw i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %163
  %165 = load i32* %164, align 4
  %166 = load i32* %i, align 4
  %167 = mul nsw i32 %166, 4
  %168 = load i32* %j, align 4
  %169 = add nsw i32 %167, %168
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %170
  %172 = load i32* %171, align 4
  %173 = sub nsw i32 %165, %172
  %174 = shl i32 %173, 10
  %175 = load i32* %i, align 4
  %176 = mul nsw i32 %175, 4
  %177 = load i32* %j, align 4
  %178 = add nsw i32 %176, %177
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %179
  %181 = load i32* %180, align 4
  %182 = sdiv i32 %174, %181
  %183 = load i32* %j, align 4
  %184 = ashr i32 %183, 1
  %185 = sext i32 %184 to i64
  %186 = load i32* %i, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [2 x [2 x i32]]* %ratio, i32 0, i64 %187
  %189 = getelementptr inbounds [2 x i32]* %188, i32 0, i64 %185
  store i32 %182, i32* %189, align 4
  br label %190

; <label>:190                                     ; preds = %157
  %191 = load i32* %j, align 4
  %192 = add nsw i32 %191, 2
  store i32 %192, i32* %j, align 4
  br label %154

; <label>:193                                     ; preds = %154
  %194 = load i32* %i, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [2 x [2 x i32]]* %ratio, i32 0, i64 %195
  %197 = getelementptr inbounds [2 x i32]* %196, i32 0, i32 0
  %198 = load i32* %mar, align 4
  %199 = call i32 @canon_600_color(i32* %197, i32 %198)
  %200 = load i32* %i, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 %201
  store i32 %199, i32* %202, align 4
  br label %203

; <label>:203                                     ; preds = %193
  %204 = load i32* %i, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %i, align 4
  br label %150

; <label>:206                                     ; preds = %150
  %207 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 0
  %208 = load i32* %207, align 4
  %209 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 1
  %210 = load i32* %209, align 4
  %211 = or i32 %208, %210
  store i32 %211, i32* %st, align 4
  %212 = icmp sgt i32 %211, 1
  br i1 %212, label %213, label %214

; <label>:213                                     ; preds = %206
  br label %289

; <label>:214                                     ; preds = %206
  store i32 0, i32* %i, align 4
  br label %215

; <label>:215                                     ; preds = %260, %214
  %216 = load i32* %i, align 4
  %217 = icmp slt i32 %216, 2
  br i1 %217, label %218, label %263

; <label>:218                                     ; preds = %215
  %219 = load i32* %i, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [2 x i32]* %stat, i32 0, i64 %220
  %222 = load i32* %221, align 4
  %223 = icmp ne i32 %222, 0
  br i1 %223, label %224, label %259

; <label>:224                                     ; preds = %218
  store i32 0, i32* %j, align 4
  br label %225

; <label>:225                                     ; preds = %255, %224
  %226 = load i32* %j, align 4
  %227 = icmp slt i32 %226, 2
  br i1 %227, label %228, label %258

; <label>:228                                     ; preds = %225
  %229 = load i32* %i, align 4
  %230 = mul nsw i32 %229, 4
  %231 = load i32* %j, align 4
  %232 = mul nsw i32 %231, 2
  %233 = add nsw i32 %230, %232
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %234
  %236 = load i32* %235, align 4
  %237 = load i32* %j, align 4
  %238 = sext i32 %237 to i64
  %239 = load i32* %i, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [2 x [2 x i32]]* %ratio, i32 0, i64 %240
  %242 = getelementptr inbounds [2 x i32]* %241, i32 0, i64 %238
  %243 = load i32* %242, align 4
  %244 = add nsw i32 1024, %243
  %245 = mul nsw i32 %236, %244
  %246 = ashr i32 %245, 10
  %247 = load i32* %i, align 4
  %248 = mul nsw i32 %247, 4
  %249 = load i32* %j, align 4
  %250 = mul nsw i32 %249, 2
  %251 = add nsw i32 %248, %250
  %252 = add nsw i32 %251, 1
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %253
  store i32 %246, i32* %254, align 4
  br label %255

; <label>:255                                     ; preds = %228
  %256 = load i32* %j, align 4
  %257 = add nsw i32 %256, 1
  store i32 %257, i32* %j, align 4
  br label %225

; <label>:258                                     ; preds = %225
  br label %259

; <label>:259                                     ; preds = %258, %218
  br label %260

; <label>:260                                     ; preds = %259
  %261 = load i32* %i, align 4
  %262 = add nsw i32 %261, 1
  store i32 %262, i32* %i, align 4
  br label %215

; <label>:263                                     ; preds = %215
  store i32 0, i32* %i, align 4
  br label %264

; <label>:264                                     ; preds = %280, %263
  %265 = load i32* %i, align 4
  %266 = icmp slt i32 %265, 8
  br i1 %266, label %267, label %283

; <label>:267                                     ; preds = %264
  %268 = load i32* %i, align 4
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds [8 x i32]* %test, i32 0, i64 %269
  %271 = load i32* %270, align 4
  %272 = load i32* %i, align 4
  %273 = sext i32 %272 to i64
  %274 = load i32* %st, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [2 x [8 x i32]]* %total, i32 0, i64 %275
  %277 = getelementptr inbounds [8 x i32]* %276, i32 0, i64 %273
  %278 = load i32* %277, align 4
  %279 = add nsw i32 %278, %271
  store i32 %279, i32* %277, align 4
  br label %280

; <label>:280                                     ; preds = %267
  %281 = load i32* %i, align 4
  %282 = add nsw i32 %281, 1
  store i32 %282, i32* %i, align 4
  br label %264

; <label>:283                                     ; preds = %264
  %284 = load i32* %st, align 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 %285
  %287 = load i32* %286, align 4
  %288 = add nsw i32 %287, 1
  store i32 %288, i32* %286, align 4
  br label %289

; <label>:289                                     ; preds = %283, %213, %144, %122
  br label %290

; <label>:290                                     ; preds = %289
  %291 = load i32* %col, align 4
  %292 = add nsw i32 %291, 2
  store i32 %292, i32* %col, align 4
  br label %31

; <label>:293                                     ; preds = %31
  br label %294

; <label>:294                                     ; preds = %293
  %295 = load i32* %row, align 4
  %296 = add nsw i32 %295, 4
  store i32 %296, i32* %row, align 4
  br label %24

; <label>:297                                     ; preds = %24
  %298 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 0
  %299 = load i32* %298, align 4
  %300 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 1
  %301 = load i32* %300, align 4
  %302 = or i32 %299, %301
  %303 = icmp ne i32 %302, 0
  br i1 %303, label %304, label %342

; <label>:304                                     ; preds = %297
  %305 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 0
  %306 = load i32* %305, align 4
  %307 = mul nsw i32 %306, 200
  %308 = getelementptr inbounds [2 x i32]* %count, i32 0, i64 1
  %309 = load i32* %308, align 4
  %310 = icmp slt i32 %307, %309
  %311 = zext i1 %310 to i32
  store i32 %311, i32* %st, align 4
  store i32 0, i32* %i, align 4
  br label %312

; <label>:312                                     ; preds = %338, %304
  %313 = load i32* %i, align 4
  %314 = icmp slt i32 %313, 4
  br i1 %314, label %315, label %341

; <label>:315                                     ; preds = %312
  %316 = load i32* %i, align 4
  %317 = sext i32 %316 to i64
  %318 = load i32* %st, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds [2 x [8 x i32]]* %total, i32 0, i64 %319
  %321 = getelementptr inbounds [8 x i32]* %320, i32 0, i64 %317
  %322 = load i32* %321, align 4
  %323 = load i32* %i, align 4
  %324 = add nsw i32 %323, 4
  %325 = sext i32 %324 to i64
  %326 = load i32* %st, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds [2 x [8 x i32]]* %total, i32 0, i64 %327
  %329 = getelementptr inbounds [8 x i32]* %328, i32 0, i64 %325
  %330 = load i32* %329, align 4
  %331 = add nsw i32 %322, %330
  %332 = sitofp i32 %331 to double
  %333 = fdiv double 1.000000e+00, %332
  %334 = fptrunc double %333 to float
  %335 = load i32* %i, align 4
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %336
  store float %334, float* %337, align 4
  br label %338

; <label>:338                                     ; preds = %315
  %339 = load i32* %i, align 4
  %340 = add nsw i32 %339, 1
  store i32 %340, i32* %i, align 4
  br label %312

; <label>:341                                     ; preds = %312
  br label %342

; <label>:342                                     ; preds = %341, %297
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define void @canon_600_coeff() #0 {
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %mc = alloca float, align 4
  %yc = alloca float, align 4
  store i32 0, i32* %t, align 4
  %1 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  %2 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %3 = fdiv float %1, %2
  store float %3, float* %mc, align 4
  %4 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  %5 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %6 = fdiv float %4, %5
  store float %6, float* %yc, align 4
  %7 = load float* %mc, align 4
  %8 = fcmp ogt float %7, 1.000000e+00
  br i1 %8, label %9, label %18

; <label>:9                                       ; preds = %0
  %10 = load float* %mc, align 4
  %11 = fpext float %10 to double
  %12 = fcmp ole double %11, 1.280000e+00
  br i1 %12, label %13, label %18

; <label>:13                                      ; preds = %9
  %14 = load float* %yc, align 4
  %15 = fpext float %14 to double
  %16 = fcmp olt double %15, 8.789000e-01
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %13
  store i32 1, i32* %t, align 4
  br label %18

; <label>:18                                      ; preds = %17, %13, %9, %0
  %19 = load float* %mc, align 4
  %20 = fpext float %19 to double
  %21 = fcmp ogt double %20, 1.280000e+00
  br i1 %21, label %22, label %36

; <label>:22                                      ; preds = %18
  %23 = load float* %mc, align 4
  %24 = fcmp ole float %23, 2.000000e+00
  br i1 %24, label %25, label %36

; <label>:25                                      ; preds = %22
  %26 = load float* %yc, align 4
  %27 = fpext float %26 to double
  %28 = fcmp olt double %27, 8.789000e-01
  br i1 %28, label %29, label %30

; <label>:29                                      ; preds = %25
  store i32 3, i32* %t, align 4
  br label %35

; <label>:30                                      ; preds = %25
  %31 = load float* %yc, align 4
  %32 = fcmp ole float %31, 2.000000e+00
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %30
  store i32 4, i32* %t, align 4
  br label %34

; <label>:34                                      ; preds = %33, %30
  br label %35

; <label>:35                                      ; preds = %34, %29
  br label %36

; <label>:36                                      ; preds = %35, %22, %18
  %37 = load float* @flash_used, align 4
  %38 = fcmp une float %37, 0.000000e+00
  br i1 %38, label %39, label %40

; <label>:39                                      ; preds = %36
  store i32 5, i32* %t, align 4
  br label %40

; <label>:40                                      ; preds = %39, %36
  store i32 0, i32* %i, align 4
  store i32 0, i32* @raw_color, align 4
  br label %41

; <label>:41                                      ; preds = %74, %40
  %42 = load i32* %i, align 4
  %43 = icmp slt i32 %42, 3
  br i1 %43, label %44, label %77

; <label>:44                                      ; preds = %41
  store i32 0, i32* %c, align 4
  br label %45

; <label>:45                                      ; preds = %70, %44
  %46 = load i32* %c, align 4
  %47 = load i32* @colors, align 4
  %48 = icmp slt i32 %46, %47
  br i1 %48, label %49, label %73

; <label>:49                                      ; preds = %45
  %50 = load i32* %i, align 4
  %51 = mul nsw i32 %50, 4
  %52 = load i32* %c, align 4
  %53 = add nsw i32 %51, %52
  %54 = sext i32 %53 to i64
  %55 = load i32* %t, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [6 x [12 x i16]]* @canon_600_coeff.table, i32 0, i64 %56
  %58 = getelementptr inbounds [12 x i16]* %57, i32 0, i64 %54
  %59 = load i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = sitofp i32 %60 to double
  %62 = fdiv double %61, 1.024000e+03
  %63 = fptrunc double %62 to float
  %64 = load i32* %c, align 4
  %65 = sext i32 %64 to i64
  %66 = load i32* %i, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %67
  %69 = getelementptr inbounds [4 x float]* %68, i32 0, i64 %65
  store float %63, float* %69, align 4
  br label %70

; <label>:70                                      ; preds = %49
  %71 = load i32* %c, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %c, align 4
  br label %45

; <label>:73                                      ; preds = %45
  br label %74

; <label>:74                                      ; preds = %73
  %75 = load i32* %i, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %i, align 4
  br label %41

; <label>:77                                      ; preds = %41
  ret void
}

; Function Attrs: nounwind uwtable
define void @canon_600_load_raw() #0 {
  %data = alloca [1120 x i8], align 16
  %dp = alloca i8*, align 8
  %pixel = alloca [896 x i16], align 16
  %pix = alloca i16*, align 8
  %irow = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %val = alloca i32, align 4
  store i32 0, i32* %row, align 4
  store i32 0, i32* %irow, align 4
  br label %1

; <label>:1                                       ; preds = %220, %0
  %2 = load i32* %irow, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %223

; <label>:6                                       ; preds = %1
  %7 = getelementptr inbounds [1120 x i8]* %data, i32 0, i32 0
  %8 = load i16* @raw_width, align 2
  %9 = zext i16 %8 to i32
  %10 = mul nsw i32 %9, 5
  %11 = sdiv i32 %10, 4
  %12 = sext i32 %11 to i64
  %13 = load %struct._IO_FILE** @ifp, align 8
  %14 = call i64 @fread(i8* %7, i64 1, i64 %12, %struct._IO_FILE* %13)
  %15 = load i16* @raw_width, align 2
  %16 = zext i16 %15 to i32
  %17 = mul nsw i32 %16, 5
  %18 = sdiv i32 %17, 4
  %19 = sext i32 %18 to i64
  %20 = icmp ult i64 %14, %19
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %6
  call void @derror()
  br label %22

; <label>:22                                      ; preds = %21, %6
  %23 = getelementptr inbounds [1120 x i8]* %data, i32 0, i32 0
  store i8* %23, i8** %dp, align 8
  %24 = getelementptr inbounds [896 x i16]* %pixel, i32 0, i32 0
  store i16* %24, i16** %pix, align 8
  br label %25

; <label>:25                                      ; preds = %147, %22
  %26 = load i8** %dp, align 8
  %27 = getelementptr inbounds [1120 x i8]* %data, i32 0, i32 0
  %28 = getelementptr inbounds i8* %27, i64 1120
  %29 = icmp ult i8* %26, %28
  br i1 %29, label %30, label %152

; <label>:30                                      ; preds = %25
  %31 = load i8** %dp, align 8
  %32 = getelementptr inbounds i8* %31, i64 0
  %33 = load i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl i32 %34, 2
  %36 = load i8** %dp, align 8
  %37 = getelementptr inbounds i8* %36, i64 1
  %38 = load i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = ashr i32 %39, 6
  %41 = add nsw i32 %35, %40
  %42 = trunc i32 %41 to i16
  %43 = load i16** %pix, align 8
  %44 = getelementptr inbounds i16* %43, i64 0
  store i16 %42, i16* %44, align 2
  %45 = load i8** %dp, align 8
  %46 = getelementptr inbounds i8* %45, i64 2
  %47 = load i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 %48, 2
  %50 = load i8** %dp, align 8
  %51 = getelementptr inbounds i8* %50, i64 1
  %52 = load i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = ashr i32 %53, 4
  %55 = and i32 %54, 3
  %56 = add nsw i32 %49, %55
  %57 = trunc i32 %56 to i16
  %58 = load i16** %pix, align 8
  %59 = getelementptr inbounds i16* %58, i64 1
  store i16 %57, i16* %59, align 2
  %60 = load i8** %dp, align 8
  %61 = getelementptr inbounds i8* %60, i64 3
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = shl i32 %63, 2
  %65 = load i8** %dp, align 8
  %66 = getelementptr inbounds i8* %65, i64 1
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = ashr i32 %68, 2
  %70 = and i32 %69, 3
  %71 = add nsw i32 %64, %70
  %72 = trunc i32 %71 to i16
  %73 = load i16** %pix, align 8
  %74 = getelementptr inbounds i16* %73, i64 2
  store i16 %72, i16* %74, align 2
  %75 = load i8** %dp, align 8
  %76 = getelementptr inbounds i8* %75, i64 4
  %77 = load i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 %78, 2
  %80 = load i8** %dp, align 8
  %81 = getelementptr inbounds i8* %80, i64 1
  %82 = load i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = and i32 %83, 3
  %85 = add nsw i32 %79, %84
  %86 = trunc i32 %85 to i16
  %87 = load i16** %pix, align 8
  %88 = getelementptr inbounds i16* %87, i64 3
  store i16 %86, i16* %88, align 2
  %89 = load i8** %dp, align 8
  %90 = getelementptr inbounds i8* %89, i64 5
  %91 = load i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = shl i32 %92, 2
  %94 = load i8** %dp, align 8
  %95 = getelementptr inbounds i8* %94, i64 9
  %96 = load i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = and i32 %97, 3
  %99 = add nsw i32 %93, %98
  %100 = trunc i32 %99 to i16
  %101 = load i16** %pix, align 8
  %102 = getelementptr inbounds i16* %101, i64 4
  store i16 %100, i16* %102, align 2
  %103 = load i8** %dp, align 8
  %104 = getelementptr inbounds i8* %103, i64 6
  %105 = load i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl i32 %106, 2
  %108 = load i8** %dp, align 8
  %109 = getelementptr inbounds i8* %108, i64 9
  %110 = load i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = ashr i32 %111, 2
  %113 = and i32 %112, 3
  %114 = add nsw i32 %107, %113
  %115 = trunc i32 %114 to i16
  %116 = load i16** %pix, align 8
  %117 = getelementptr inbounds i16* %116, i64 5
  store i16 %115, i16* %117, align 2
  %118 = load i8** %dp, align 8
  %119 = getelementptr inbounds i8* %118, i64 7
  %120 = load i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = shl i32 %121, 2
  %123 = load i8** %dp, align 8
  %124 = getelementptr inbounds i8* %123, i64 9
  %125 = load i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = ashr i32 %126, 4
  %128 = and i32 %127, 3
  %129 = add nsw i32 %122, %128
  %130 = trunc i32 %129 to i16
  %131 = load i16** %pix, align 8
  %132 = getelementptr inbounds i16* %131, i64 6
  store i16 %130, i16* %132, align 2
  %133 = load i8** %dp, align 8
  %134 = getelementptr inbounds i8* %133, i64 8
  %135 = load i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = shl i32 %136, 2
  %138 = load i8** %dp, align 8
  %139 = getelementptr inbounds i8* %138, i64 9
  %140 = load i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = ashr i32 %141, 6
  %143 = add nsw i32 %137, %142
  %144 = trunc i32 %143 to i16
  %145 = load i16** %pix, align 8
  %146 = getelementptr inbounds i16* %145, i64 7
  store i16 %144, i16* %146, align 2
  br label %147

; <label>:147                                     ; preds = %30
  %148 = load i8** %dp, align 8
  %149 = getelementptr inbounds i8* %148, i64 10
  store i8* %149, i8** %dp, align 8
  %150 = load i16** %pix, align 8
  %151 = getelementptr inbounds i16* %150, i64 8
  store i16* %151, i16** %pix, align 8
  br label %25

; <label>:152                                     ; preds = %25
  store i32 0, i32* %col, align 4
  br label %153

; <label>:153                                     ; preds = %190, %152
  %154 = load i32* %col, align 4
  %155 = load i16* @width, align 2
  %156 = zext i16 %155 to i32
  %157 = icmp slt i32 %154, %156
  br i1 %157, label %158, label %193

; <label>:158                                     ; preds = %153
  %159 = load i32* %col, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [896 x i16]* %pixel, i32 0, i64 %160
  %162 = load i16* %161, align 2
  %163 = load i32* @filters, align 4
  %164 = load i32* %row, align 4
  %165 = shl i32 %164, 1
  %166 = and i32 %165, 14
  %167 = load i32* %col, align 4
  %168 = and i32 %167, 1
  %169 = add nsw i32 %166, %168
  %170 = shl i32 %169, 1
  %171 = lshr i32 %163, %170
  %172 = and i32 %171, 3
  %173 = zext i32 %172 to i64
  %174 = load i32* %row, align 4
  %175 = load i16* @shrink, align 2
  %176 = zext i16 %175 to i32
  %177 = ashr i32 %174, %176
  %178 = load i16* @iwidth, align 2
  %179 = zext i16 %178 to i32
  %180 = mul nsw i32 %177, %179
  %181 = load i32* %col, align 4
  %182 = load i16* @shrink, align 2
  %183 = zext i16 %182 to i32
  %184 = ashr i32 %181, %183
  %185 = add nsw i32 %180, %184
  %186 = sext i32 %185 to i64
  %187 = load [4 x i16]** @image, align 8
  %188 = getelementptr inbounds [4 x i16]* %187, i64 %186
  %189 = getelementptr inbounds [4 x i16]* %188, i32 0, i64 %173
  store i16 %162, i16* %189, align 2
  br label %190

; <label>:190                                     ; preds = %158
  %191 = load i32* %col, align 4
  %192 = add nsw i32 %191, 1
  store i32 %192, i32* %col, align 4
  br label %153

; <label>:193                                     ; preds = %153
  %194 = load i16* @width, align 2
  %195 = zext i16 %194 to i32
  store i32 %195, i32* %col, align 4
  br label %196

; <label>:196                                     ; preds = %209, %193
  %197 = load i32* %col, align 4
  %198 = load i16* @raw_width, align 2
  %199 = zext i16 %198 to i32
  %200 = icmp slt i32 %197, %199
  br i1 %200, label %201, label %212

; <label>:201                                     ; preds = %196
  %202 = load i32* %col, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds [896 x i16]* %pixel, i32 0, i64 %203
  %205 = load i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = load i32* @black, align 4
  %208 = add i32 %207, %206
  store i32 %208, i32* @black, align 4
  br label %209

; <label>:209                                     ; preds = %201
  %210 = load i32* %col, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %col, align 4
  br label %196

; <label>:212                                     ; preds = %196
  %213 = load i32* %row, align 4
  %214 = add nsw i32 %213, 2
  store i32 %214, i32* %row, align 4
  %215 = load i16* @height, align 2
  %216 = zext i16 %215 to i32
  %217 = icmp sgt i32 %214, %216
  br i1 %217, label %218, label %219

; <label>:218                                     ; preds = %212
  store i32 1, i32* %row, align 4
  br label %219

; <label>:219                                     ; preds = %218, %212
  br label %220

; <label>:220                                     ; preds = %219
  %221 = load i32* %irow, align 4
  %222 = add nsw i32 %221, 1
  store i32 %222, i32* %irow, align 4
  br label %1

; <label>:223                                     ; preds = %1
  %224 = load i16* @raw_width, align 2
  %225 = zext i16 %224 to i32
  %226 = load i16* @width, align 2
  %227 = zext i16 %226 to i32
  %228 = icmp sgt i32 %225, %227
  br i1 %228, label %229, label %241

; <label>:229                                     ; preds = %223
  %230 = load i32* @black, align 4
  %231 = load i16* @raw_width, align 2
  %232 = zext i16 %231 to i32
  %233 = load i16* @width, align 2
  %234 = zext i16 %233 to i32
  %235 = sub nsw i32 %232, %234
  %236 = load i16* @height, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nsw i32 %235, %237
  %239 = udiv i32 %230, %238
  %240 = sub i32 %239, 4
  store i32 %240, i32* @black, align 4
  br label %241

; <label>:241                                     ; preds = %229, %223
  store i32 0, i32* %row, align 4
  br label %242

; <label>:242                                     ; preds = %334, %241
  %243 = load i32* %row, align 4
  %244 = load i16* @height, align 2
  %245 = zext i16 %244 to i32
  %246 = icmp slt i32 %243, %245
  br i1 %246, label %247, label %337

; <label>:247                                     ; preds = %242
  store i32 0, i32* %col, align 4
  br label %248

; <label>:248                                     ; preds = %330, %247
  %249 = load i32* %col, align 4
  %250 = load i16* @width, align 2
  %251 = zext i16 %250 to i32
  %252 = icmp slt i32 %249, %251
  br i1 %252, label %253, label %333

; <label>:253                                     ; preds = %248
  %254 = load i32* @filters, align 4
  %255 = load i32* %row, align 4
  %256 = shl i32 %255, 1
  %257 = and i32 %256, 14
  %258 = load i32* %col, align 4
  %259 = and i32 %258, 1
  %260 = add nsw i32 %257, %259
  %261 = shl i32 %260, 1
  %262 = lshr i32 %254, %261
  %263 = and i32 %262, 3
  %264 = zext i32 %263 to i64
  %265 = load i32* %row, align 4
  %266 = load i16* @shrink, align 2
  %267 = zext i16 %266 to i32
  %268 = ashr i32 %265, %267
  %269 = load i16* @iwidth, align 2
  %270 = zext i16 %269 to i32
  %271 = mul nsw i32 %268, %270
  %272 = load i32* %col, align 4
  %273 = load i16* @shrink, align 2
  %274 = zext i16 %273 to i32
  %275 = ashr i32 %272, %274
  %276 = add nsw i32 %271, %275
  %277 = sext i32 %276 to i64
  %278 = load [4 x i16]** @image, align 8
  %279 = getelementptr inbounds [4 x i16]* %278, i64 %277
  %280 = getelementptr inbounds [4 x i16]* %279, i32 0, i64 %264
  %281 = load i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = load i32* @black, align 4
  %284 = sub i32 %282, %283
  store i32 %284, i32* %val, align 4
  %285 = icmp slt i32 %284, 0
  br i1 %285, label %286, label %287

; <label>:286                                     ; preds = %253
  store i32 0, i32* %val, align 4
  br label %287

; <label>:287                                     ; preds = %286, %253
  %288 = load i32* %val, align 4
  %289 = load i32* %col, align 4
  %290 = and i32 %289, 1
  %291 = sext i32 %290 to i64
  %292 = load i32* %row, align 4
  %293 = and i32 %292, 3
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds [4 x [2 x i16]]* @canon_600_load_raw.mul, i32 0, i64 %294
  %296 = getelementptr inbounds [2 x i16]* %295, i32 0, i64 %291
  %297 = load i16* %296, align 2
  %298 = sext i16 %297 to i32
  %299 = mul nsw i32 %288, %298
  %300 = ashr i32 %299, 9
  store i32 %300, i32* %val, align 4
  %301 = load i32* %val, align 4
  %302 = trunc i32 %301 to i16
  %303 = load i32* @filters, align 4
  %304 = load i32* %row, align 4
  %305 = shl i32 %304, 1
  %306 = and i32 %305, 14
  %307 = load i32* %col, align 4
  %308 = and i32 %307, 1
  %309 = add nsw i32 %306, %308
  %310 = shl i32 %309, 1
  %311 = lshr i32 %303, %310
  %312 = and i32 %311, 3
  %313 = zext i32 %312 to i64
  %314 = load i32* %row, align 4
  %315 = load i16* @shrink, align 2
  %316 = zext i16 %315 to i32
  %317 = ashr i32 %314, %316
  %318 = load i16* @iwidth, align 2
  %319 = zext i16 %318 to i32
  %320 = mul nsw i32 %317, %319
  %321 = load i32* %col, align 4
  %322 = load i16* @shrink, align 2
  %323 = zext i16 %322 to i32
  %324 = ashr i32 %321, %323
  %325 = add nsw i32 %320, %324
  %326 = sext i32 %325 to i64
  %327 = load [4 x i16]** @image, align 8
  %328 = getelementptr inbounds [4 x i16]* %327, i64 %326
  %329 = getelementptr inbounds [4 x i16]* %328, i32 0, i64 %313
  store i16 %302, i16* %329, align 2
  br label %330

; <label>:330                                     ; preds = %287
  %331 = load i32* %col, align 4
  %332 = add nsw i32 %331, 1
  store i32 %332, i32* %col, align 4
  br label %248

; <label>:333                                     ; preds = %248
  br label %334

; <label>:334                                     ; preds = %333
  %335 = load i32* %row, align 4
  %336 = add nsw i32 %335, 1
  store i32 %336, i32* %row, align 4
  br label %242

; <label>:337                                     ; preds = %242
  call void @canon_600_fixed_wb(i32 1311)
  call void @canon_600_auto_wb()
  call void @canon_600_coeff()
  %338 = load i32* @black, align 4
  %339 = sub i32 1023, %338
  %340 = mul i32 %339, 1109
  %341 = lshr i32 %340, 9
  store i32 %341, i32* @maximum, align 4
  store i32 0, i32* @black, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @remove_zeroes() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %tot = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %row, align 4
  br label %1

; <label>:1                                       ; preds = %205, %0
  %2 = load i32* %row, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp ult i32 %2, %4
  br i1 %5, label %6, label %208

; <label>:6                                       ; preds = %1
  store i32 0, i32* %col, align 4
  br label %7

; <label>:7                                       ; preds = %201, %6
  %8 = load i32* %col, align 4
  %9 = load i16* @width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp ult i32 %8, %10
  br i1 %11, label %12, label %204

; <label>:12                                      ; preds = %7
  %13 = load i32* @filters, align 4
  %14 = load i32* %row, align 4
  %15 = shl i32 %14, 1
  %16 = and i32 %15, 14
  %17 = load i32* %col, align 4
  %18 = and i32 %17, 1
  %19 = add i32 %16, %18
  %20 = shl i32 %19, 1
  %21 = lshr i32 %13, %20
  %22 = and i32 %21, 3
  %23 = zext i32 %22 to i64
  %24 = load i32* %row, align 4
  %25 = load i16* @shrink, align 2
  %26 = zext i16 %25 to i32
  %27 = lshr i32 %24, %26
  %28 = load i16* @iwidth, align 2
  %29 = zext i16 %28 to i32
  %30 = mul i32 %27, %29
  %31 = load i32* %col, align 4
  %32 = load i16* @shrink, align 2
  %33 = zext i16 %32 to i32
  %34 = lshr i32 %31, %33
  %35 = add i32 %30, %34
  %36 = zext i32 %35 to i64
  %37 = load [4 x i16]** @image, align 8
  %38 = getelementptr inbounds [4 x i16]* %37, i64 %36
  %39 = getelementptr inbounds [4 x i16]* %38, i32 0, i64 %23
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %200

; <label>:43                                      ; preds = %12
  store i32 0, i32* %n, align 4
  store i32 0, i32* %tot, align 4
  %44 = load i32* %row, align 4
  %45 = sub i32 %44, 2
  store i32 %45, i32* %r, align 4
  br label %46

; <label>:46                                      ; preds = %161, %43
  %47 = load i32* %r, align 4
  %48 = load i32* %row, align 4
  %49 = add i32 %48, 2
  %50 = icmp ule i32 %47, %49
  br i1 %50, label %51, label %164

; <label>:51                                      ; preds = %46
  %52 = load i32* %col, align 4
  %53 = sub i32 %52, 2
  store i32 %53, i32* %c, align 4
  br label %54

; <label>:54                                      ; preds = %157, %51
  %55 = load i32* %c, align 4
  %56 = load i32* %col, align 4
  %57 = add i32 %56, 2
  %58 = icmp ule i32 %55, %57
  br i1 %58, label %59, label %160

; <label>:59                                      ; preds = %54
  %60 = load i32* %r, align 4
  %61 = load i16* @height, align 2
  %62 = zext i16 %61 to i32
  %63 = icmp ult i32 %60, %62
  br i1 %63, label %64, label %156

; <label>:64                                      ; preds = %59
  %65 = load i32* %c, align 4
  %66 = load i16* @width, align 2
  %67 = zext i16 %66 to i32
  %68 = icmp ult i32 %65, %67
  br i1 %68, label %69, label %156

; <label>:69                                      ; preds = %64
  %70 = load i32* @filters, align 4
  %71 = load i32* %r, align 4
  %72 = shl i32 %71, 1
  %73 = and i32 %72, 14
  %74 = load i32* %c, align 4
  %75 = and i32 %74, 1
  %76 = add i32 %73, %75
  %77 = shl i32 %76, 1
  %78 = lshr i32 %70, %77
  %79 = and i32 %78, 3
  %80 = load i32* @filters, align 4
  %81 = load i32* %row, align 4
  %82 = shl i32 %81, 1
  %83 = and i32 %82, 14
  %84 = load i32* %col, align 4
  %85 = and i32 %84, 1
  %86 = add i32 %83, %85
  %87 = shl i32 %86, 1
  %88 = lshr i32 %80, %87
  %89 = and i32 %88, 3
  %90 = icmp eq i32 %79, %89
  br i1 %90, label %91, label %156

; <label>:91                                      ; preds = %69
  %92 = load i32* @filters, align 4
  %93 = load i32* %r, align 4
  %94 = shl i32 %93, 1
  %95 = and i32 %94, 14
  %96 = load i32* %c, align 4
  %97 = and i32 %96, 1
  %98 = add i32 %95, %97
  %99 = shl i32 %98, 1
  %100 = lshr i32 %92, %99
  %101 = and i32 %100, 3
  %102 = zext i32 %101 to i64
  %103 = load i32* %r, align 4
  %104 = load i16* @shrink, align 2
  %105 = zext i16 %104 to i32
  %106 = lshr i32 %103, %105
  %107 = load i16* @iwidth, align 2
  %108 = zext i16 %107 to i32
  %109 = mul i32 %106, %108
  %110 = load i32* %c, align 4
  %111 = load i16* @shrink, align 2
  %112 = zext i16 %111 to i32
  %113 = lshr i32 %110, %112
  %114 = add i32 %109, %113
  %115 = zext i32 %114 to i64
  %116 = load [4 x i16]** @image, align 8
  %117 = getelementptr inbounds [4 x i16]* %116, i64 %115
  %118 = getelementptr inbounds [4 x i16]* %117, i32 0, i64 %102
  %119 = load i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %122, label %156

; <label>:122                                     ; preds = %91
  %123 = load i32* %n, align 4
  %124 = add i32 %123, 1
  store i32 %124, i32* %n, align 4
  %125 = load i32* @filters, align 4
  %126 = load i32* %r, align 4
  %127 = shl i32 %126, 1
  %128 = and i32 %127, 14
  %129 = load i32* %c, align 4
  %130 = and i32 %129, 1
  %131 = add i32 %128, %130
  %132 = shl i32 %131, 1
  %133 = lshr i32 %125, %132
  %134 = and i32 %133, 3
  %135 = zext i32 %134 to i64
  %136 = load i32* %r, align 4
  %137 = load i16* @shrink, align 2
  %138 = zext i16 %137 to i32
  %139 = lshr i32 %136, %138
  %140 = load i16* @iwidth, align 2
  %141 = zext i16 %140 to i32
  %142 = mul i32 %139, %141
  %143 = load i32* %c, align 4
  %144 = load i16* @shrink, align 2
  %145 = zext i16 %144 to i32
  %146 = lshr i32 %143, %145
  %147 = add i32 %142, %146
  %148 = zext i32 %147 to i64
  %149 = load [4 x i16]** @image, align 8
  %150 = getelementptr inbounds [4 x i16]* %149, i64 %148
  %151 = getelementptr inbounds [4 x i16]* %150, i32 0, i64 %135
  %152 = load i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = load i32* %tot, align 4
  %155 = add i32 %154, %153
  store i32 %155, i32* %tot, align 4
  br label %156

; <label>:156                                     ; preds = %122, %91, %69, %64, %59
  br label %157

; <label>:157                                     ; preds = %156
  %158 = load i32* %c, align 4
  %159 = add i32 %158, 1
  store i32 %159, i32* %c, align 4
  br label %54

; <label>:160                                     ; preds = %54
  br label %161

; <label>:161                                     ; preds = %160
  %162 = load i32* %r, align 4
  %163 = add i32 %162, 1
  store i32 %163, i32* %r, align 4
  br label %46

; <label>:164                                     ; preds = %46
  %165 = load i32* %n, align 4
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %199

; <label>:167                                     ; preds = %164
  %168 = load i32* %tot, align 4
  %169 = load i32* %n, align 4
  %170 = udiv i32 %168, %169
  %171 = trunc i32 %170 to i16
  %172 = load i32* @filters, align 4
  %173 = load i32* %row, align 4
  %174 = shl i32 %173, 1
  %175 = and i32 %174, 14
  %176 = load i32* %col, align 4
  %177 = and i32 %176, 1
  %178 = add i32 %175, %177
  %179 = shl i32 %178, 1
  %180 = lshr i32 %172, %179
  %181 = and i32 %180, 3
  %182 = zext i32 %181 to i64
  %183 = load i32* %row, align 4
  %184 = load i16* @shrink, align 2
  %185 = zext i16 %184 to i32
  %186 = lshr i32 %183, %185
  %187 = load i16* @iwidth, align 2
  %188 = zext i16 %187 to i32
  %189 = mul i32 %186, %188
  %190 = load i32* %col, align 4
  %191 = load i16* @shrink, align 2
  %192 = zext i16 %191 to i32
  %193 = lshr i32 %190, %192
  %194 = add i32 %189, %193
  %195 = zext i32 %194 to i64
  %196 = load [4 x i16]** @image, align 8
  %197 = getelementptr inbounds [4 x i16]* %196, i64 %195
  %198 = getelementptr inbounds [4 x i16]* %197, i32 0, i64 %182
  store i16 %171, i16* %198, align 2
  br label %199

; <label>:199                                     ; preds = %167, %164
  br label %200

; <label>:200                                     ; preds = %199, %12
  br label %201

; <label>:201                                     ; preds = %200
  %202 = load i32* %col, align 4
  %203 = add i32 %202, 1
  store i32 %203, i32* %col, align 4
  br label %7

; <label>:204                                     ; preds = %7
  br label %205

; <label>:205                                     ; preds = %204
  %206 = load i32* %row, align 4
  %207 = add i32 %206, 1
  store i32 %207, i32* %row, align 4
  br label %1

; <label>:208                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @canon_s2is() #0 {
  %1 = alloca i32, align 4
  %row = alloca i32, align 4
  store i32 0, i32* %row, align 4
  br label %2

; <label>:2                                       ; preds = %17, %0
  %3 = load i32* %row, align 4
  %4 = icmp ult i32 %3, 100
  br i1 %4, label %5, label %20

; <label>:5                                       ; preds = %2
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = load i32* %row, align 4
  %8 = mul i32 %7, 3340
  %9 = add i32 %8, 3284
  %10 = zext i32 %9 to i64
  %11 = call i32 @fseek(%struct._IO_FILE* %6, i64 %10, i32 0)
  %12 = load %struct._IO_FILE** @ifp, align 8
  %13 = call i32 @_IO_getc(%struct._IO_FILE* %12)
  %14 = icmp sgt i32 %13, 15
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %5
  store i32 1, i32* %1
  br label %21

; <label>:16                                      ; preds = %5
  br label %17

; <label>:17                                      ; preds = %16
  %18 = load i32* %row, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %row, align 4
  br label %2

; <label>:20                                      ; preds = %2
  store i32 0, i32* %1
  br label %21

; <label>:21                                      ; preds = %20, %15
  %22 = load i32* %1
  ret i32 %22
}

declare i32 @fseek(%struct._IO_FILE*, i64, i32) #1

declare i32 @_IO_getc(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @canon_a5_load_raw() #0 {
  %data = alloca [2565 x i16], align 16
  %dp = alloca i16*, align 8
  %pixel = alloca i16, align 2
  %vbits = alloca i32, align 4
  %buf = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %bc = alloca i32, align 4
  store i32 0, i32* %vbits, align 4
  store i32 0, i32* %buf, align 4
  store i32 0, i32* %bc, align 4
  store i16 18761, i16* @order, align 2
  %1 = load i16* @top_margin, align 2
  %2 = zext i16 %1 to i32
  %3 = sub nsw i32 0, %2
  store i32 %3, i32* %row, align 4
  br label %4

; <label>:4                                       ; preds = %111, %0
  %5 = load i32* %row, align 4
  %6 = load i16* @raw_height, align 2
  %7 = zext i16 %6 to i32
  %8 = load i16* @top_margin, align 2
  %9 = zext i16 %8 to i32
  %10 = sub nsw i32 %7, %9
  %11 = icmp slt i32 %5, %10
  br i1 %11, label %12, label %114

; <label>:12                                      ; preds = %4
  %13 = getelementptr inbounds [2565 x i16]* %data, i32 0, i32 0
  store i16* %13, i16** %dp, align 8
  %14 = load i16* @raw_width, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nsw i32 %15, 10
  %17 = sdiv i32 %16, 16
  call void @read_shorts(i16* %13, i32 %17)
  %18 = load i16* @left_margin, align 2
  %19 = zext i16 %18 to i32
  %20 = sub nsw i32 0, %19
  store i32 %20, i32* %col, align 4
  br label %21

; <label>:21                                      ; preds = %107, %12
  %22 = load i32* %col, align 4
  %23 = load i16* @raw_width, align 2
  %24 = zext i16 %23 to i32
  %25 = load i16* @left_margin, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %24, %26
  %28 = icmp slt i32 %22, %27
  br i1 %28, label %29, label %110

; <label>:29                                      ; preds = %21
  %30 = load i32* %vbits, align 4
  %31 = sub nsw i32 %30, 10
  store i32 %31, i32* %vbits, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %43

; <label>:33                                      ; preds = %29
  %34 = load i32* %vbits, align 4
  %35 = add nsw i32 %34, 16
  store i32 %35, i32* %vbits, align 4
  %36 = load i32* %buf, align 4
  %37 = shl i32 %36, 16
  %38 = load i16** %dp, align 8
  %39 = getelementptr inbounds i16* %38, i32 1
  store i16* %39, i16** %dp, align 8
  %40 = load i16* %38, align 2
  %41 = zext i16 %40 to i32
  %42 = add nsw i32 %37, %41
  store i32 %42, i32* %buf, align 4
  br label %43

; <label>:43                                      ; preds = %33, %29
  %44 = load i32* %buf, align 4
  %45 = load i32* %vbits, align 4
  %46 = ashr i32 %44, %45
  %47 = and i32 %46, 1023
  %48 = trunc i32 %47 to i16
  store i16 %48, i16* %pixel, align 2
  %49 = load i32* %row, align 4
  %50 = load i16* @height, align 2
  %51 = zext i16 %50 to i32
  %52 = icmp ult i32 %49, %51
  br i1 %52, label %53, label %87

; <label>:53                                      ; preds = %43
  %54 = load i32* %col, align 4
  %55 = load i16* @width, align 2
  %56 = zext i16 %55 to i32
  %57 = icmp ult i32 %54, %56
  br i1 %57, label %58, label %87

; <label>:58                                      ; preds = %53
  %59 = load i16* %pixel, align 2
  %60 = load i32* @filters, align 4
  %61 = load i32* %row, align 4
  %62 = shl i32 %61, 1
  %63 = and i32 %62, 14
  %64 = load i32* %col, align 4
  %65 = and i32 %64, 1
  %66 = add nsw i32 %63, %65
  %67 = shl i32 %66, 1
  %68 = lshr i32 %60, %67
  %69 = and i32 %68, 3
  %70 = zext i32 %69 to i64
  %71 = load i32* %row, align 4
  %72 = load i16* @shrink, align 2
  %73 = zext i16 %72 to i32
  %74 = ashr i32 %71, %73
  %75 = load i16* @iwidth, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nsw i32 %74, %76
  %78 = load i32* %col, align 4
  %79 = load i16* @shrink, align 2
  %80 = zext i16 %79 to i32
  %81 = ashr i32 %78, %80
  %82 = add nsw i32 %77, %81
  %83 = sext i32 %82 to i64
  %84 = load [4 x i16]** @image, align 8
  %85 = getelementptr inbounds [4 x i16]* %84, i64 %83
  %86 = getelementptr inbounds [4 x i16]* %85, i32 0, i64 %70
  store i16 %59, i16* %86, align 2
  br label %106

; <label>:87                                      ; preds = %53, %43
  %88 = load i32* %col, align 4
  %89 = load i16* @left_margin, align 2
  %90 = zext i16 %89 to i32
  %91 = sub nsw i32 1, %90
  %92 = icmp sgt i32 %88, %91
  br i1 %92, label %93, label %105

; <label>:93                                      ; preds = %87
  %94 = load i32* %col, align 4
  %95 = load i16* @width, align 2
  %96 = zext i16 %95 to i32
  %97 = icmp ne i32 %94, %96
  br i1 %97, label %98, label %105

; <label>:98                                      ; preds = %93
  %99 = load i32* %bc, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %bc, align 4
  %101 = load i16* %pixel, align 2
  %102 = zext i16 %101 to i32
  %103 = load i32* @black, align 4
  %104 = add i32 %103, %102
  store i32 %104, i32* @black, align 4
  br label %105

; <label>:105                                     ; preds = %98, %93, %87
  br label %106

; <label>:106                                     ; preds = %105, %58
  br label %107

; <label>:107                                     ; preds = %106
  %108 = load i32* %col, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %col, align 4
  br label %21

; <label>:110                                     ; preds = %21
  br label %111

; <label>:111                                     ; preds = %110
  %112 = load i32* %row, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %row, align 4
  br label %4

; <label>:114                                     ; preds = %4
  %115 = load i32* %bc, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %121

; <label>:117                                     ; preds = %114
  %118 = load i32* %bc, align 4
  %119 = load i32* @black, align 4
  %120 = udiv i32 %119, %118
  store i32 %120, i32* @black, align 4
  br label %121

; <label>:121                                     ; preds = %117, %114
  store i32 1023, i32* @maximum, align 4
  %122 = load i16* @raw_width, align 2
  %123 = zext i16 %122 to i32
  %124 = icmp sgt i32 %123, 1600
  br i1 %124, label %125, label %126

; <label>:125                                     ; preds = %121
  call void @remove_zeroes()
  br label %126

; <label>:126                                     ; preds = %125, %121
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @getbits(i32 %nbits) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %nbits, i32* %2, align 4
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  store i32 0, i32* @getbits.reset, align 4
  store i32 0, i32* @getbits.vbits, align 4
  store i32 0, i32* @getbits.bitbuf, align 4
  store i32 0, i32* %1
  br label %59

; <label>:6                                       ; preds = %0
  %7 = load i32* %2, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %12, label %9

; <label>:9                                       ; preds = %6
  %10 = load i32* @getbits.reset, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %9, %6
  store i32 0, i32* %1
  br label %59

; <label>:13                                      ; preds = %9
  br label %14

; <label>:14                                      ; preds = %37, %13
  %15 = load i32* @getbits.vbits, align 4
  %16 = load i32* %2, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %46

; <label>:18                                      ; preds = %14
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = call i32 @getc_unlocked(%struct._IO_FILE* %19)
  store i32 %20, i32* %c, align 4
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %18
  call void @derror()
  br label %23

; <label>:23                                      ; preds = %22, %18
  %24 = load i32* @zero_after_ff, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %33

; <label>:26                                      ; preds = %23
  %27 = load i32* %c, align 4
  %28 = icmp eq i32 %27, 255
  br i1 %28, label %29, label %33

; <label>:29                                      ; preds = %26
  %30 = load %struct._IO_FILE** @ifp, align 8
  %31 = call i32 @getc_unlocked(%struct._IO_FILE* %30)
  %32 = icmp ne i32 %31, 0
  br label %33

; <label>:33                                      ; preds = %29, %26, %23
  %34 = phi i1 [ false, %26 ], [ false, %23 ], [ %32, %29 ]
  %35 = zext i1 %34 to i32
  store i32 %35, i32* @getbits.reset, align 4
  br i1 %34, label %36, label %37

; <label>:36                                      ; preds = %33
  store i32 0, i32* %1
  br label %59

; <label>:37                                      ; preds = %33
  %38 = load i32* @getbits.bitbuf, align 4
  %39 = shl i32 %38, 8
  %40 = load i32* %c, align 4
  %41 = trunc i32 %40 to i8
  %42 = zext i8 %41 to i32
  %43 = add i32 %39, %42
  store i32 %43, i32* @getbits.bitbuf, align 4
  %44 = load i32* @getbits.vbits, align 4
  %45 = add nsw i32 %44, 8
  store i32 %45, i32* @getbits.vbits, align 4
  br label %14

; <label>:46                                      ; preds = %14
  %47 = load i32* %2, align 4
  %48 = load i32* @getbits.vbits, align 4
  %49 = sub nsw i32 %48, %47
  store i32 %49, i32* @getbits.vbits, align 4
  %50 = load i32* @getbits.bitbuf, align 4
  %51 = load i32* %2, align 4
  %52 = sub nsw i32 32, %51
  %53 = load i32* @getbits.vbits, align 4
  %54 = sub nsw i32 %52, %53
  %55 = shl i32 %50, %54
  %56 = load i32* %2, align 4
  %57 = sub nsw i32 32, %56
  %58 = lshr i32 %55, %57
  store i32 %58, i32* %1
  br label %59

; <label>:59                                      ; preds = %46, %36, %12, %5
  %60 = load i32* %1
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define void @init_decoder() #0 {
  call void @llvm.memset.p0i8.i64(i8* bitcast ([2048 x %struct.decode]* @first_decode to i8*), i8 0, i64 49152, i32 16, i1 false)
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** @free_decode, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @make_decoder(i8* %source, i32 %level) #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %cur = alloca %struct.decode*, align 8
  %i = alloca i32, align 4
  %next = alloca i32, align 4
  store i8* %source, i8** %1, align 8
  store i32 %level, i32* %2, align 4
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  store i32 0, i32* @make_decoder.leaf, align 4
  br label %6

; <label>:6                                       ; preds = %5, %0
  %7 = load %struct.decode** @free_decode, align 8
  %8 = getelementptr inbounds %struct.decode* %7, i32 1
  store %struct.decode* %8, %struct.decode** @free_decode, align 8
  store %struct.decode* %7, %struct.decode** %cur, align 8
  %9 = load %struct.decode** @free_decode, align 8
  %10 = icmp ugt %struct.decode* %9, getelementptr inbounds (%struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), i64 2048)
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %6
  %12 = load %struct._IO_FILE** @stderr, align 8
  %13 = load i8** @ifname, align 8
  %14 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([28 x i8]* @.str4, i32 0, i32 0), i8* %13)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0), i32 2) #8
  unreachable

; <label>:15                                      ; preds = %6
  store i32 0, i32* %next, align 4
  store i32 0, i32* %i, align 4
  br label %16

; <label>:16                                      ; preds = %25, %15
  %17 = load i32* %i, align 4
  %18 = load i32* @make_decoder.leaf, align 4
  %19 = icmp sle i32 %17, %18
  br i1 %19, label %20, label %23

; <label>:20                                      ; preds = %16
  %21 = load i32* %next, align 4
  %22 = icmp slt i32 %21, 16
  br label %23

; <label>:23                                      ; preds = %20, %16
  %24 = phi i1 [ false, %16 ], [ %22, %20 ]
  br i1 %24, label %25, label %35

; <label>:25                                      ; preds = %23
  %26 = load i32* %next, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %next, align 4
  %28 = sext i32 %26 to i64
  %29 = load i8** %1, align 8
  %30 = getelementptr inbounds i8* %29, i64 %28
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = load i32* %i, align 4
  %34 = add nsw i32 %33, %32
  store i32 %34, i32* %i, align 4
  br label %16

; <label>:35                                      ; preds = %23
  %36 = load i32* %i, align 4
  %37 = load i32* @make_decoder.leaf, align 4
  %38 = icmp sgt i32 %36, %37
  br i1 %38, label %39, label %72

; <label>:39                                      ; preds = %35
  %40 = load i32* %2, align 4
  %41 = load i32* %next, align 4
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %60

; <label>:43                                      ; preds = %39
  %44 = load %struct.decode** @free_decode, align 8
  %45 = load %struct.decode** %cur, align 8
  %46 = getelementptr inbounds %struct.decode* %45, i32 0, i32 0
  %47 = getelementptr inbounds [2 x %struct.decode*]* %46, i32 0, i64 0
  store %struct.decode* %44, %struct.decode** %47, align 8
  %48 = load i8** %1, align 8
  %49 = load i32* %2, align 4
  %50 = add nsw i32 %49, 1
  %51 = call i8* @make_decoder(i8* %48, i32 %50)
  %52 = load %struct.decode** @free_decode, align 8
  %53 = load %struct.decode** %cur, align 8
  %54 = getelementptr inbounds %struct.decode* %53, i32 0, i32 0
  %55 = getelementptr inbounds [2 x %struct.decode*]* %54, i32 0, i64 1
  store %struct.decode* %52, %struct.decode** %55, align 8
  %56 = load i8** %1, align 8
  %57 = load i32* %2, align 4
  %58 = add nsw i32 %57, 1
  %59 = call i8* @make_decoder(i8* %56, i32 %58)
  br label %71

; <label>:60                                      ; preds = %39
  %61 = load i32* @make_decoder.leaf, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* @make_decoder.leaf, align 4
  %63 = add nsw i32 16, %61
  %64 = sext i32 %63 to i64
  %65 = load i8** %1, align 8
  %66 = getelementptr inbounds i8* %65, i64 %64
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = load %struct.decode** %cur, align 8
  %70 = getelementptr inbounds %struct.decode* %69, i32 0, i32 1
  store i32 %68, i32* %70, align 4
  br label %71

; <label>:71                                      ; preds = %60, %43
  br label %72

; <label>:72                                      ; preds = %71, %35
  %73 = load i8** %1, align 8
  %74 = getelementptr inbounds i8* %73, i64 16
  %75 = load i32* @make_decoder.leaf, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8* %74, i64 %76
  ret i8* %77
}

; Function Attrs: nounwind uwtable
define void @crw_init_tables(i32 %table) #0 {
  %1 = alloca i32, align 4
  store i32 %table, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = icmp ugt i32 %2, 2
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i32 2, i32* %1, align 4
  br label %5

; <label>:5                                       ; preds = %4, %0
  call void @init_decoder()
  %6 = load i32* %1, align 4
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [3 x [29 x i8]]* @crw_init_tables.first_tree, i32 0, i64 %7
  %9 = getelementptr inbounds [29 x i8]* %8, i32 0, i32 0
  %10 = call i8* @make_decoder(i8* %9, i32 0)
  %11 = load %struct.decode** @free_decode, align 8
  store %struct.decode* %11, %struct.decode** @second_decode, align 8
  %12 = load i32* %1, align 4
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [3 x [180 x i8]]* @crw_init_tables.second_tree, i32 0, i64 %13
  %15 = getelementptr inbounds [180 x i8]* %14, i32 0, i32 0
  %16 = call i8* @make_decoder(i8* %15, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @canon_has_lowbits() #0 {
  %1 = alloca i32, align 4
  %test = alloca [16384 x i8], align 16
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 1, i32* %ret, align 4
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %2, i64 0, i32 0)
  %4 = getelementptr inbounds [16384 x i8]* %test, i32 0, i32 0
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i64 @fread(i8* %4, i64 1, i64 16384, %struct._IO_FILE* %5)
  store i32 540, i32* %i, align 4
  br label %7

; <label>:7                                       ; preds = %28, %0
  %8 = load i32* %i, align 4
  %9 = sext i32 %8 to i64
  %10 = icmp ult i64 %9, 16383
  br i1 %10, label %11, label %31

; <label>:11                                      ; preds = %7
  %12 = load i32* %i, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [16384 x i8]* %test, i32 0, i64 %13
  %15 = load i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp eq i32 %16, 255
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %11
  %19 = load i32* %i, align 4
  %20 = add nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [16384 x i8]* %test, i32 0, i64 %21
  %23 = load i8* %22, align 1
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %18
  store i32 1, i32* %1
  br label %33

; <label>:26                                      ; preds = %18
  store i32 0, i32* %ret, align 4
  br label %27

; <label>:27                                      ; preds = %26, %11
  br label %28

; <label>:28                                      ; preds = %27
  %29 = load i32* %i, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %i, align 4
  br label %7

; <label>:31                                      ; preds = %7
  %32 = load i32* %ret, align 4
  store i32 %32, i32* %1
  br label %33

; <label>:33                                      ; preds = %31, %25
  %34 = load i32* %1
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define void @canon_compressed_load_raw() #0 {
  %pixel = alloca i16*, align 8
  %prow = alloca i16*, align 8
  %nblocks = alloca i32, align 4
  %lowbits = alloca i32, align 4
  %i = alloca i32, align 4
  %row = alloca i32, align 4
  %r = alloca i32, align 4
  %col = alloca i32, align 4
  %save = alloca i32, align 4
  %val = alloca i32, align 4
  %irow = alloca i32, align 4
  %icol = alloca i32, align 4
  %decode = alloca %struct.decode*, align 8
  %dindex = alloca %struct.decode*, align 8
  %block = alloca i32, align 4
  %diffbuf = alloca [64 x i32], align 16
  %leaf = alloca i32, align 4
  %len = alloca i32, align 4
  %diff = alloca i32, align 4
  %carry = alloca i32, align 4
  %pnum = alloca i32, align 4
  %base = alloca [2 x i32], align 4
  %dark = alloca [2 x double], align 16
  %c = alloca i8, align 1
  store i32 0, i32* %carry, align 4
  store i32 0, i32* %pnum, align 4
  %1 = bitcast [2 x double]* %dark to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = load i32* @tiff_compress, align 4
  call void @crw_init_tables(i32 %2)
  %3 = load i16* @raw_width, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %4, 8
  %6 = sext i32 %5 to i64
  %7 = call noalias i8* @calloc(i64 %6, i64 2) #4
  %8 = bitcast i8* %7 to i16*
  store i16* %8, i16** %pixel, align 8
  %9 = load i16** %pixel, align 8
  %10 = bitcast i16* %9 to i8*
  call void @merror(i8* %10, i8* getelementptr inbounds ([28 x i8]* @.str5, i32 0, i32 0))
  %11 = call i32 @canon_has_lowbits()
  store i32 %11, i32* %lowbits, align 4
  %12 = load i32* %lowbits, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %15, label %14

; <label>:14                                      ; preds = %0
  store i32 1023, i32* @maximum, align 4
  br label %15

; <label>:15                                      ; preds = %14, %0
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = load i32* %lowbits, align 4
  %18 = load i16* @raw_height, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nsw i32 %17, %19
  %21 = load i16* @raw_width, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nsw i32 %20, %22
  %24 = sdiv i32 %23, 4
  %25 = add nsw i32 540, %24
  %26 = sext i32 %25 to i64
  %27 = call i32 @fseek(%struct._IO_FILE* %16, i64 %26, i32 0)
  store i32 1, i32* @zero_after_ff, align 4
  %28 = call i32 @getbits(i32 -1)
  store i32 0, i32* %row, align 4
  br label %29

; <label>:29                                      ; preds = %348, %15
  %30 = load i32* %row, align 4
  %31 = load i16* @raw_height, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %34, label %351

; <label>:34                                      ; preds = %29
  %35 = load i16* @raw_height, align 2
  %36 = zext i16 %35 to i32
  %37 = load i32* %row, align 4
  %38 = sub nsw i32 %36, %37
  %39 = icmp slt i32 8, %38
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %34
  br label %46

; <label>:41                                      ; preds = %34
  %42 = load i16* @raw_height, align 2
  %43 = zext i16 %42 to i32
  %44 = load i32* %row, align 4
  %45 = sub nsw i32 %43, %44
  br label %46

; <label>:46                                      ; preds = %41, %40
  %47 = phi i32 [ 8, %40 ], [ %45, %41 ]
  %48 = load i16* @raw_width, align 2
  %49 = zext i16 %48 to i32
  %50 = mul nsw i32 %47, %49
  %51 = ashr i32 %50, 6
  store i32 %51, i32* %nblocks, align 4
  store i32 0, i32* %block, align 4
  br label %52

; <label>:52                                      ; preds = %176, %46
  %53 = load i32* %block, align 4
  %54 = load i32* %nblocks, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %179

; <label>:56                                      ; preds = %52
  %57 = bitcast [64 x i32]* %diffbuf to i8*
  call void @llvm.memset.p0i8.i64(i8* %57, i8 0, i64 256, i32 16, i1 false)
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** %decode, align 8
  store i32 0, i32* %i, align 4
  br label %58

; <label>:58                                      ; preds = %125, %56
  %59 = load i32* %i, align 4
  %60 = icmp slt i32 %59, 64
  br i1 %60, label %61, label %128

; <label>:61                                      ; preds = %58
  %62 = load %struct.decode** %decode, align 8
  store %struct.decode* %62, %struct.decode** %dindex, align 8
  br label %63

; <label>:63                                      ; preds = %69, %61
  %64 = load %struct.decode** %dindex, align 8
  %65 = getelementptr inbounds %struct.decode* %64, i32 0, i32 0
  %66 = getelementptr inbounds [2 x %struct.decode*]* %65, i32 0, i64 0
  %67 = load %struct.decode** %66, align 8
  %68 = icmp ne %struct.decode* %67, null
  br i1 %68, label %69, label %76

; <label>:69                                      ; preds = %63
  %70 = call i32 @getbits(i32 1)
  %71 = zext i32 %70 to i64
  %72 = load %struct.decode** %dindex, align 8
  %73 = getelementptr inbounds %struct.decode* %72, i32 0, i32 0
  %74 = getelementptr inbounds [2 x %struct.decode*]* %73, i32 0, i64 %71
  %75 = load %struct.decode** %74, align 8
  store %struct.decode* %75, %struct.decode** %dindex, align 8
  br label %63

; <label>:76                                      ; preds = %63
  %77 = load %struct.decode** %dindex, align 8
  %78 = getelementptr inbounds %struct.decode* %77, i32 0, i32 1
  %79 = load i32* %78, align 4
  store i32 %79, i32* %leaf, align 4
  %80 = load %struct.decode** @second_decode, align 8
  store %struct.decode* %80, %struct.decode** %decode, align 8
  %81 = load i32* %leaf, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %87

; <label>:83                                      ; preds = %76
  %84 = load i32* %i, align 4
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %87

; <label>:86                                      ; preds = %83
  br label %128

; <label>:87                                      ; preds = %83, %76
  %88 = load i32* %leaf, align 4
  %89 = icmp eq i32 %88, 255
  br i1 %89, label %90, label %91

; <label>:90                                      ; preds = %87
  br label %125

; <label>:91                                      ; preds = %87
  %92 = load i32* %leaf, align 4
  %93 = ashr i32 %92, 4
  %94 = load i32* %i, align 4
  %95 = add nsw i32 %94, %93
  store i32 %95, i32* %i, align 4
  %96 = load i32* %leaf, align 4
  %97 = and i32 %96, 15
  store i32 %97, i32* %len, align 4
  %98 = load i32* %len, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

; <label>:100                                     ; preds = %91
  br label %125

; <label>:101                                     ; preds = %91
  %102 = load i32* %len, align 4
  %103 = call i32 @getbits(i32 %102)
  store i32 %103, i32* %diff, align 4
  %104 = load i32* %diff, align 4
  %105 = load i32* %len, align 4
  %106 = sub nsw i32 %105, 1
  %107 = shl i32 1, %106
  %108 = and i32 %104, %107
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %116

; <label>:110                                     ; preds = %101
  %111 = load i32* %len, align 4
  %112 = shl i32 1, %111
  %113 = sub nsw i32 %112, 1
  %114 = load i32* %diff, align 4
  %115 = sub nsw i32 %114, %113
  store i32 %115, i32* %diff, align 4
  br label %116

; <label>:116                                     ; preds = %110, %101
  %117 = load i32* %i, align 4
  %118 = icmp slt i32 %117, 64
  br i1 %118, label %119, label %124

; <label>:119                                     ; preds = %116
  %120 = load i32* %diff, align 4
  %121 = load i32* %i, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 %122
  store i32 %120, i32* %123, align 4
  br label %124

; <label>:124                                     ; preds = %119, %116
  br label %125

; <label>:125                                     ; preds = %124, %100, %90
  %126 = load i32* %i, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %i, align 4
  br label %58

; <label>:128                                     ; preds = %86, %58
  %129 = load i32* %carry, align 4
  %130 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 0
  %131 = load i32* %130, align 4
  %132 = add nsw i32 %131, %129
  store i32 %132, i32* %130, align 4
  %133 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 0
  %134 = load i32* %133, align 4
  store i32 %134, i32* %carry, align 4
  store i32 0, i32* %i, align 4
  br label %135

; <label>:135                                     ; preds = %172, %128
  %136 = load i32* %i, align 4
  %137 = icmp slt i32 %136, 64
  br i1 %137, label %138, label %175

; <label>:138                                     ; preds = %135
  %139 = load i32* %pnum, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %pnum, align 4
  %141 = load i16* @raw_width, align 2
  %142 = zext i16 %141 to i32
  %143 = srem i32 %139, %142
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148

; <label>:145                                     ; preds = %138
  %146 = getelementptr inbounds [2 x i32]* %base, i32 0, i64 1
  store i32 512, i32* %146, align 4
  %147 = getelementptr inbounds [2 x i32]* %base, i32 0, i64 0
  store i32 512, i32* %147, align 4
  br label %148

; <label>:148                                     ; preds = %145, %138
  %149 = load i32* %i, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [64 x i32]* %diffbuf, i32 0, i64 %150
  %152 = load i32* %151, align 4
  %153 = load i32* %i, align 4
  %154 = and i32 %153, 1
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [2 x i32]* %base, i32 0, i64 %155
  %157 = load i32* %156, align 4
  %158 = add nsw i32 %157, %152
  store i32 %158, i32* %156, align 4
  %159 = trunc i32 %158 to i16
  %160 = load i32* %block, align 4
  %161 = shl i32 %160, 6
  %162 = load i32* %i, align 4
  %163 = add nsw i32 %161, %162
  %164 = sext i32 %163 to i64
  %165 = load i16** %pixel, align 8
  %166 = getelementptr inbounds i16* %165, i64 %164
  store i16 %159, i16* %166, align 2
  %167 = zext i16 %159 to i32
  %168 = ashr i32 %167, 10
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %171

; <label>:170                                     ; preds = %148
  call void @derror()
  br label %171

; <label>:171                                     ; preds = %170, %148
  br label %172

; <label>:172                                     ; preds = %171
  %173 = load i32* %i, align 4
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %i, align 4
  br label %135

; <label>:175                                     ; preds = %135
  br label %176

; <label>:176                                     ; preds = %175
  %177 = load i32* %block, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %block, align 4
  br label %52

; <label>:179                                     ; preds = %52
  %180 = load i32* %lowbits, align 4
  %181 = icmp ne i32 %180, 0
  br i1 %181, label %182, label %247

; <label>:182                                     ; preds = %179
  %183 = load %struct._IO_FILE** @ifp, align 8
  %184 = call i64 @ftell(%struct._IO_FILE* %183)
  %185 = trunc i64 %184 to i32
  store i32 %185, i32* %save, align 4
  %186 = load %struct._IO_FILE** @ifp, align 8
  %187 = load i32* %row, align 4
  %188 = load i16* @raw_width, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nsw i32 %187, %189
  %191 = sdiv i32 %190, 4
  %192 = add nsw i32 26, %191
  %193 = sext i32 %192 to i64
  %194 = call i32 @fseek(%struct._IO_FILE* %186, i64 %193, i32 0)
  %195 = load i16** %pixel, align 8
  store i16* %195, i16** %prow, align 8
  store i32 0, i32* %i, align 4
  br label %196

; <label>:196                                     ; preds = %239, %182
  %197 = load i32* %i, align 4
  %198 = load i16* @raw_width, align 2
  %199 = zext i16 %198 to i32
  %200 = mul nsw i32 %199, 2
  %201 = icmp slt i32 %197, %200
  br i1 %201, label %202, label %242

; <label>:202                                     ; preds = %196
  %203 = load %struct._IO_FILE** @ifp, align 8
  %204 = call i32 @getc_unlocked(%struct._IO_FILE* %203)
  %205 = trunc i32 %204 to i8
  store i8 %205, i8* %c, align 1
  store i32 0, i32* %r, align 4
  br label %206

; <label>:206                                     ; preds = %233, %202
  %207 = load i32* %r, align 4
  %208 = icmp slt i32 %207, 8
  br i1 %208, label %209, label %238

; <label>:209                                     ; preds = %206
  %210 = load i16** %prow, align 8
  %211 = load i16* %210, align 2
  %212 = zext i16 %211 to i32
  %213 = shl i32 %212, 2
  %214 = load i8* %c, align 1
  %215 = zext i8 %214 to i32
  %216 = load i32* %r, align 4
  %217 = ashr i32 %215, %216
  %218 = and i32 %217, 3
  %219 = add nsw i32 %213, %218
  store i32 %219, i32* %val, align 4
  %220 = load i16* @raw_width, align 2
  %221 = zext i16 %220 to i32
  %222 = icmp eq i32 %221, 2672
  br i1 %222, label %223, label %229

; <label>:223                                     ; preds = %209
  %224 = load i32* %val, align 4
  %225 = icmp slt i32 %224, 512
  br i1 %225, label %226, label %229

; <label>:226                                     ; preds = %223
  %227 = load i32* %val, align 4
  %228 = add nsw i32 %227, 2
  store i32 %228, i32* %val, align 4
  br label %229

; <label>:229                                     ; preds = %226, %223, %209
  %230 = load i32* %val, align 4
  %231 = trunc i32 %230 to i16
  %232 = load i16** %prow, align 8
  store i16 %231, i16* %232, align 2
  br label %233

; <label>:233                                     ; preds = %229
  %234 = load i32* %r, align 4
  %235 = add nsw i32 %234, 2
  store i32 %235, i32* %r, align 4
  %236 = load i16** %prow, align 8
  %237 = getelementptr inbounds i16* %236, i32 1
  store i16* %237, i16** %prow, align 8
  br label %206

; <label>:238                                     ; preds = %206
  br label %239

; <label>:239                                     ; preds = %238
  %240 = load i32* %i, align 4
  %241 = add nsw i32 %240, 1
  store i32 %241, i32* %i, align 4
  br label %196

; <label>:242                                     ; preds = %196
  %243 = load %struct._IO_FILE** @ifp, align 8
  %244 = load i32* %save, align 4
  %245 = sext i32 %244 to i64
  %246 = call i32 @fseek(%struct._IO_FILE* %243, i64 %245, i32 0)
  br label %247

; <label>:247                                     ; preds = %242, %179
  store i32 0, i32* %r, align 4
  br label %248

; <label>:248                                     ; preds = %344, %247
  %249 = load i32* %r, align 4
  %250 = icmp slt i32 %249, 8
  br i1 %250, label %251, label %347

; <label>:251                                     ; preds = %248
  %252 = load i32* %row, align 4
  %253 = load i16* @top_margin, align 2
  %254 = zext i16 %253 to i32
  %255 = sub nsw i32 %252, %254
  %256 = load i32* %r, align 4
  %257 = add nsw i32 %255, %256
  store i32 %257, i32* %irow, align 4
  %258 = load i32* %irow, align 4
  %259 = load i16* @height, align 2
  %260 = zext i16 %259 to i32
  %261 = icmp uge i32 %258, %260
  br i1 %261, label %262, label %263

; <label>:262                                     ; preds = %251
  br label %344

; <label>:263                                     ; preds = %251
  store i32 0, i32* %col, align 4
  br label %264

; <label>:264                                     ; preds = %340, %263
  %265 = load i32* %col, align 4
  %266 = load i16* @raw_width, align 2
  %267 = zext i16 %266 to i32
  %268 = icmp slt i32 %265, %267
  br i1 %268, label %269, label %343

; <label>:269                                     ; preds = %264
  %270 = load i32* %col, align 4
  %271 = load i16* @left_margin, align 2
  %272 = zext i16 %271 to i32
  %273 = sub nsw i32 %270, %272
  store i32 %273, i32* %icol, align 4
  %274 = load i32* %icol, align 4
  %275 = load i16* @width, align 2
  %276 = zext i16 %275 to i32
  %277 = icmp ult i32 %274, %276
  br i1 %277, label %278, label %316

; <label>:278                                     ; preds = %269
  %279 = load i32* %r, align 4
  %280 = load i16* @raw_width, align 2
  %281 = zext i16 %280 to i32
  %282 = mul nsw i32 %279, %281
  %283 = load i32* %col, align 4
  %284 = add nsw i32 %282, %283
  %285 = sext i32 %284 to i64
  %286 = load i16** %pixel, align 8
  %287 = getelementptr inbounds i16* %286, i64 %285
  %288 = load i16* %287, align 2
  %289 = load i32* @filters, align 4
  %290 = load i32* %irow, align 4
  %291 = shl i32 %290, 1
  %292 = and i32 %291, 14
  %293 = load i32* %icol, align 4
  %294 = and i32 %293, 1
  %295 = add i32 %292, %294
  %296 = shl i32 %295, 1
  %297 = lshr i32 %289, %296
  %298 = and i32 %297, 3
  %299 = zext i32 %298 to i64
  %300 = load i32* %irow, align 4
  %301 = load i16* @shrink, align 2
  %302 = zext i16 %301 to i32
  %303 = lshr i32 %300, %302
  %304 = load i16* @iwidth, align 2
  %305 = zext i16 %304 to i32
  %306 = mul i32 %303, %305
  %307 = load i32* %icol, align 4
  %308 = load i16* @shrink, align 2
  %309 = zext i16 %308 to i32
  %310 = lshr i32 %307, %309
  %311 = add i32 %306, %310
  %312 = zext i32 %311 to i64
  %313 = load [4 x i16]** @image, align 8
  %314 = getelementptr inbounds [4 x i16]* %313, i64 %312
  %315 = getelementptr inbounds [4 x i16]* %314, i32 0, i64 %299
  store i16 %288, i16* %315, align 2
  br label %339

; <label>:316                                     ; preds = %269
  %317 = load i32* %col, align 4
  %318 = icmp sgt i32 %317, 1
  br i1 %318, label %319, label %338

; <label>:319                                     ; preds = %316
  %320 = load i32* %r, align 4
  %321 = load i16* @raw_width, align 2
  %322 = zext i16 %321 to i32
  %323 = mul nsw i32 %320, %322
  %324 = load i32* %col, align 4
  %325 = add nsw i32 %323, %324
  %326 = sext i32 %325 to i64
  %327 = load i16** %pixel, align 8
  %328 = getelementptr inbounds i16* %327, i64 %326
  %329 = load i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = sitofp i32 %330 to double
  %332 = load i32* %icol, align 4
  %333 = and i32 %332, 1
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds [2 x double]* %dark, i32 0, i64 %334
  %336 = load double* %335, align 8
  %337 = fadd double %336, %331
  store double %337, double* %335, align 8
  br label %338

; <label>:338                                     ; preds = %319, %316
  br label %339

; <label>:339                                     ; preds = %338, %278
  br label %340

; <label>:340                                     ; preds = %339
  %341 = load i32* %col, align 4
  %342 = add nsw i32 %341, 1
  store i32 %342, i32* %col, align 4
  br label %264

; <label>:343                                     ; preds = %264
  br label %344

; <label>:344                                     ; preds = %343, %262
  %345 = load i32* %r, align 4
  %346 = add nsw i32 %345, 1
  store i32 %346, i32* %r, align 4
  br label %248

; <label>:347                                     ; preds = %248
  br label %348

; <label>:348                                     ; preds = %347
  %349 = load i32* %row, align 4
  %350 = add nsw i32 %349, 8
  store i32 %350, i32* %row, align 4
  br label %29

; <label>:351                                     ; preds = %29
  %352 = load i16** %pixel, align 8
  %353 = bitcast i16* %352 to i8*
  call void @free(i8* %353) #4
  %354 = getelementptr inbounds [2 x double]* %dark, i32 0, i32 0
  call void @canon_black(double* %354)
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #3

declare i64 @ftell(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define i32 @ljpeg_start(%struct.jhead* %jh, i32 %info_only) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.jhead*, align 8
  %3 = alloca i32, align 4
  %c = alloca i32, align 4
  %tag = alloca i32, align 4
  %len = alloca i32, align 4
  %data = alloca [65536 x i8], align 16
  %dp = alloca i8*, align 8
  store %struct.jhead* %jh, %struct.jhead** %2, align 8
  store i32 %info_only, i32* %3, align 4
  %4 = load i32* %3, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %0
  call void @init_decoder()
  br label %7

; <label>:7                                       ; preds = %6, %0
  %8 = load %struct.jhead** %2, align 8
  %9 = bitcast %struct.jhead* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 112, i32 8, i1 false)
  store i32 0, i32* %c, align 4
  br label %10

; <label>:10                                      ; preds = %20, %7
  %11 = load i32* %c, align 4
  %12 = icmp slt i32 %11, 6
  br i1 %12, label %13, label %23

; <label>:13                                      ; preds = %10
  %14 = load %struct.decode** @free_decode, align 8
  %15 = load i32* %c, align 4
  %16 = sext i32 %15 to i64
  %17 = load %struct.jhead** %2, align 8
  %18 = getelementptr inbounds %struct.jhead* %17, i32 0, i32 8
  %19 = getelementptr inbounds [6 x %struct.decode*]* %18, i32 0, i64 %16
  store %struct.decode* %14, %struct.decode** %19, align 8
  br label %20

; <label>:20                                      ; preds = %13
  %21 = load i32* %c, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %c, align 4
  br label %10

; <label>:23                                      ; preds = %10
  %24 = load %struct.jhead** %2, align 8
  %25 = getelementptr inbounds %struct.jhead* %24, i32 0, i32 6
  store i32 2147483647, i32* %25, align 4
  %26 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i64 @fread(i8* %26, i64 2, i64 1, %struct._IO_FILE* %27)
  %29 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %30 = load i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 216
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %23
  store i32 0, i32* %1
  br label %263

; <label>:34                                      ; preds = %23
  br label %35

; <label>:35                                      ; preds = %194, %34
  %36 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %37 = load %struct._IO_FILE** @ifp, align 8
  %38 = call i64 @fread(i8* %36, i64 2, i64 2, %struct._IO_FILE* %37)
  %39 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %40 = load i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl i32 %41, 8
  %43 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %42, %45
  store i32 %46, i32* %tag, align 4
  %47 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 2
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl i32 %49, 8
  %51 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 3
  %52 = load i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %50, %53
  %55 = sub nsw i32 %54, 2
  store i32 %55, i32* %len, align 4
  %56 = load i32* %tag, align 4
  %57 = icmp sle i32 %56, 65280
  br i1 %57, label %58, label %59

; <label>:58                                      ; preds = %35
  store i32 0, i32* %1
  br label %263

; <label>:59                                      ; preds = %35
  %60 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %61 = load i32* %len, align 4
  %62 = sext i32 %61 to i64
  %63 = load %struct._IO_FILE** @ifp, align 8
  %64 = call i64 @fread(i8* %60, i64 1, i64 %62, %struct._IO_FILE* %63)
  %65 = load i32* %tag, align 4
  switch i32 %65, label %193 [
    i32 65475, label %66
    i32 65472, label %80
    i32 65476, label %124
    i32 65498, label %156
    i32 65501, label %182
  ]

; <label>:66                                      ; preds = %59
  %67 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 7
  %68 = load i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = ashr i32 %69, 4
  %71 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 7
  %72 = load i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = and i32 %73, 15
  %75 = mul nsw i32 %70, %74
  %76 = sub nsw i32 %75, 1
  %77 = and i32 %76, 3
  %78 = load %struct.jhead** %2, align 8
  %79 = getelementptr inbounds %struct.jhead* %78, i32 0, i32 4
  store i32 %77, i32* %79, align 4
  br label %80

; <label>:80                                      ; preds = %59, %66
  %81 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %82 = load i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = load %struct.jhead** %2, align 8
  %85 = getelementptr inbounds %struct.jhead* %84, i32 0, i32 0
  store i32 %83, i32* %85, align 4
  %86 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = shl i32 %88, 8
  %90 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 2
  %91 = load i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = or i32 %89, %92
  %94 = load %struct.jhead** %2, align 8
  %95 = getelementptr inbounds %struct.jhead* %94, i32 0, i32 1
  store i32 %93, i32* %95, align 4
  %96 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 3
  %97 = load i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = shl i32 %98, 8
  %100 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 4
  %101 = load i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = or i32 %99, %102
  %104 = load %struct.jhead** %2, align 8
  %105 = getelementptr inbounds %struct.jhead* %104, i32 0, i32 2
  store i32 %103, i32* %105, align 4
  %106 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 5
  %107 = load i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = load %struct.jhead** %2, align 8
  %110 = getelementptr inbounds %struct.jhead* %109, i32 0, i32 4
  %111 = load i32* %110, align 4
  %112 = add nsw i32 %108, %111
  %113 = load %struct.jhead** %2, align 8
  %114 = getelementptr inbounds %struct.jhead* %113, i32 0, i32 3
  store i32 %112, i32* %114, align 4
  %115 = load i32* %len, align 4
  %116 = icmp eq i32 %115, 9
  br i1 %116, label %117, label %123

; <label>:117                                     ; preds = %80
  %118 = load i32* @dng_version, align 4
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %123, label %120

; <label>:120                                     ; preds = %117
  %121 = load %struct._IO_FILE** @ifp, align 8
  %122 = call i32 @_IO_getc(%struct._IO_FILE* %121)
  br label %123

; <label>:123                                     ; preds = %120, %117, %80
  br label %193

; <label>:124                                     ; preds = %59
  %125 = load i32* %3, align 4
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %128

; <label>:127                                     ; preds = %124
  br label %193

; <label>:128                                     ; preds = %124
  %129 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  store i8* %129, i8** %dp, align 8
  br label %130

; <label>:130                                     ; preds = %144, %128
  %131 = load i8** %dp, align 8
  %132 = getelementptr inbounds [65536 x i8]* %data, i32 0, i32 0
  %133 = load i32* %len, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8* %132, i64 %134
  %136 = icmp ult i8* %131, %135
  br i1 %136, label %137, label %142

; <label>:137                                     ; preds = %130
  %138 = load i8** %dp, align 8
  %139 = load i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = icmp slt i32 %140, 4
  br label %142

; <label>:142                                     ; preds = %137, %130
  %143 = phi i1 [ false, %130 ], [ %141, %137 ]
  br i1 %143, label %144, label %155

; <label>:144                                     ; preds = %142
  %145 = load %struct.decode** @free_decode, align 8
  %146 = load i8** %dp, align 8
  %147 = load i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = load %struct.jhead** %2, align 8
  %150 = getelementptr inbounds %struct.jhead* %149, i32 0, i32 8
  %151 = getelementptr inbounds [6 x %struct.decode*]* %150, i32 0, i64 %148
  store %struct.decode* %145, %struct.decode** %151, align 8
  %152 = load i8** %dp, align 8
  %153 = getelementptr inbounds i8* %152, i32 1
  store i8* %153, i8** %dp, align 8
  %154 = call i8* @make_decoder(i8* %153, i32 0)
  store i8* %154, i8** %dp, align 8
  br label %130

; <label>:155                                     ; preds = %142
  br label %193

; <label>:156                                     ; preds = %59
  %157 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %158 = load i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = mul nsw i32 %159, 2
  %161 = add nsw i32 1, %160
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 %162
  %164 = load i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = load %struct.jhead** %2, align 8
  %167 = getelementptr inbounds %struct.jhead* %166, i32 0, i32 5
  store i32 %165, i32* %167, align 4
  %168 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %169 = load i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = mul nsw i32 %170, 2
  %172 = add nsw i32 3, %171
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 %173
  %175 = load i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = and i32 %176, 15
  %178 = load %struct.jhead** %2, align 8
  %179 = getelementptr inbounds %struct.jhead* %178, i32 0, i32 0
  %180 = load i32* %179, align 4
  %181 = sub nsw i32 %180, %177
  store i32 %181, i32* %179, align 4
  br label %193

; <label>:182                                     ; preds = %59
  %183 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 0
  %184 = load i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = shl i32 %185, 8
  %187 = getelementptr inbounds [65536 x i8]* %data, i32 0, i64 1
  %188 = load i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = or i32 %186, %189
  %191 = load %struct.jhead** %2, align 8
  %192 = getelementptr inbounds %struct.jhead* %191, i32 0, i32 6
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %182, %59, %156, %155, %127, %123
  br label %194

; <label>:194                                     ; preds = %193
  %195 = load i32* %tag, align 4
  %196 = icmp ne i32 %195, 65498
  br i1 %196, label %35, label %197

; <label>:197                                     ; preds = %194
  %198 = load i32* %3, align 4
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %200, label %201

; <label>:200                                     ; preds = %197
  store i32 1, i32* %1
  br label %263

; <label>:201                                     ; preds = %197
  %202 = load %struct.jhead** %2, align 8
  %203 = getelementptr inbounds %struct.jhead* %202, i32 0, i32 4
  %204 = load i32* %203, align 4
  %205 = icmp ne i32 %204, 0
  br i1 %205, label %206, label %246

; <label>:206                                     ; preds = %201
  store i32 0, i32* %c, align 4
  br label %207

; <label>:207                                     ; preds = %221, %206
  %208 = load i32* %c, align 4
  %209 = icmp slt i32 %208, 4
  br i1 %209, label %210, label %224

; <label>:210                                     ; preds = %207
  %211 = load %struct.jhead** %2, align 8
  %212 = getelementptr inbounds %struct.jhead* %211, i32 0, i32 8
  %213 = getelementptr inbounds [6 x %struct.decode*]* %212, i32 0, i64 1
  %214 = load %struct.decode** %213, align 8
  %215 = load i32* %c, align 4
  %216 = add nsw i32 2, %215
  %217 = sext i32 %216 to i64
  %218 = load %struct.jhead** %2, align 8
  %219 = getelementptr inbounds %struct.jhead* %218, i32 0, i32 8
  %220 = getelementptr inbounds [6 x %struct.decode*]* %219, i32 0, i64 %217
  store %struct.decode* %214, %struct.decode** %220, align 8
  br label %221

; <label>:221                                     ; preds = %210
  %222 = load i32* %c, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %c, align 4
  br label %207

; <label>:224                                     ; preds = %207
  store i32 0, i32* %c, align 4
  br label %225

; <label>:225                                     ; preds = %242, %224
  %226 = load i32* %c, align 4
  %227 = load %struct.jhead** %2, align 8
  %228 = getelementptr inbounds %struct.jhead* %227, i32 0, i32 4
  %229 = load i32* %228, align 4
  %230 = icmp slt i32 %226, %229
  br i1 %230, label %231, label %245

; <label>:231                                     ; preds = %225
  %232 = load %struct.jhead** %2, align 8
  %233 = getelementptr inbounds %struct.jhead* %232, i32 0, i32 8
  %234 = getelementptr inbounds [6 x %struct.decode*]* %233, i32 0, i64 0
  %235 = load %struct.decode** %234, align 8
  %236 = load i32* %c, align 4
  %237 = add nsw i32 1, %236
  %238 = sext i32 %237 to i64
  %239 = load %struct.jhead** %2, align 8
  %240 = getelementptr inbounds %struct.jhead* %239, i32 0, i32 8
  %241 = getelementptr inbounds [6 x %struct.decode*]* %240, i32 0, i64 %238
  store %struct.decode* %235, %struct.decode** %241, align 8
  br label %242

; <label>:242                                     ; preds = %231
  %243 = load i32* %c, align 4
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %c, align 4
  br label %225

; <label>:245                                     ; preds = %225
  br label %246

; <label>:246                                     ; preds = %245, %201
  %247 = load %struct.jhead** %2, align 8
  %248 = getelementptr inbounds %struct.jhead* %247, i32 0, i32 2
  %249 = load i32* %248, align 4
  %250 = load %struct.jhead** %2, align 8
  %251 = getelementptr inbounds %struct.jhead* %250, i32 0, i32 3
  %252 = load i32* %251, align 4
  %253 = mul nsw i32 %249, %252
  %254 = sext i32 %253 to i64
  %255 = call noalias i8* @calloc(i64 %254, i64 4) #4
  %256 = bitcast i8* %255 to i16*
  %257 = load %struct.jhead** %2, align 8
  %258 = getelementptr inbounds %struct.jhead* %257, i32 0, i32 9
  store i16* %256, i16** %258, align 8
  %259 = load %struct.jhead** %2, align 8
  %260 = getelementptr inbounds %struct.jhead* %259, i32 0, i32 9
  %261 = load i16** %260, align 8
  %262 = bitcast i16* %261 to i8*
  call void @merror(i8* %262, i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0))
  store i32 1, i32* @zero_after_ff, align 4
  store i32 1, i32* %1
  br label %263

; <label>:263                                     ; preds = %246, %200, %58, %33
  %264 = load i32* %1
  ret i32 %264
}

; Function Attrs: nounwind uwtable
define i32 @ljpeg_diff(%struct.decode* %dindex) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.decode*, align 8
  %len = alloca i32, align 4
  %diff = alloca i32, align 4
  store %struct.decode* %dindex, %struct.decode** %2, align 8
  br label %3

; <label>:3                                       ; preds = %9, %0
  %4 = load %struct.decode** %2, align 8
  %5 = getelementptr inbounds %struct.decode* %4, i32 0, i32 0
  %6 = getelementptr inbounds [2 x %struct.decode*]* %5, i32 0, i64 0
  %7 = load %struct.decode** %6, align 8
  %8 = icmp ne %struct.decode* %7, null
  br i1 %8, label %9, label %16

; <label>:9                                       ; preds = %3
  %10 = call i32 @getbits(i32 1)
  %11 = zext i32 %10 to i64
  %12 = load %struct.decode** %2, align 8
  %13 = getelementptr inbounds %struct.decode* %12, i32 0, i32 0
  %14 = getelementptr inbounds [2 x %struct.decode*]* %13, i32 0, i64 %11
  %15 = load %struct.decode** %14, align 8
  store %struct.decode* %15, %struct.decode** %2, align 8
  br label %3

; <label>:16                                      ; preds = %3
  %17 = load %struct.decode** %2, align 8
  %18 = getelementptr inbounds %struct.decode* %17, i32 0, i32 1
  %19 = load i32* %18, align 4
  store i32 %19, i32* %len, align 4
  %20 = load i32* %len, align 4
  %21 = icmp eq i32 %20, 16
  br i1 %21, label %22, label %29

; <label>:22                                      ; preds = %16
  %23 = load i32* @dng_version, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %22
  %26 = load i32* @dng_version, align 4
  %27 = icmp uge i32 %26, 16842752
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %25, %22
  store i32 -32768, i32* %1
  br label %46

; <label>:29                                      ; preds = %25, %16
  %30 = load i32* %len, align 4
  %31 = call i32 @getbits(i32 %30)
  store i32 %31, i32* %diff, align 4
  %32 = load i32* %diff, align 4
  %33 = load i32* %len, align 4
  %34 = sub nsw i32 %33, 1
  %35 = shl i32 1, %34
  %36 = and i32 %32, %35
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38                                      ; preds = %29
  %39 = load i32* %len, align 4
  %40 = shl i32 1, %39
  %41 = sub nsw i32 %40, 1
  %42 = load i32* %diff, align 4
  %43 = sub nsw i32 %42, %41
  store i32 %43, i32* %diff, align 4
  br label %44

; <label>:44                                      ; preds = %38, %29
  %45 = load i32* %diff, align 4
  store i32 %45, i32* %1
  br label %46

; <label>:46                                      ; preds = %44, %28
  %47 = load i32* %1
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define i16* @ljpeg_row(i32 %jrow, %struct.jhead* %jh) #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.jhead*, align 8
  %col = alloca i32, align 4
  %c = alloca i32, align 4
  %diff = alloca i32, align 4
  %pred = alloca i32, align 4
  %spred = alloca i32, align 4
  %mark = alloca i16, align 2
  %row = alloca [3 x i16*], align 16
  store i32 %jrow, i32* %1, align 4
  store %struct.jhead* %jh, %struct.jhead** %2, align 8
  store i32 0, i32* %spred, align 4
  store i16 0, i16* %mark, align 2
  %3 = load i32* %1, align 4
  %4 = load %struct.jhead** %2, align 8
  %5 = getelementptr inbounds %struct.jhead* %4, i32 0, i32 2
  %6 = load i32* %5, align 4
  %7 = mul nsw i32 %3, %6
  %8 = load %struct.jhead** %2, align 8
  %9 = getelementptr inbounds %struct.jhead* %8, i32 0, i32 6
  %10 = load i32* %9, align 4
  %11 = srem i32 %7, %10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %56

; <label>:13                                      ; preds = %0
  store i32 0, i32* %c, align 4
  br label %14

; <label>:14                                      ; preds = %28, %13
  %15 = load i32* %c, align 4
  %16 = icmp slt i32 %15, 6
  br i1 %16, label %17, label %31

; <label>:17                                      ; preds = %14
  %18 = load %struct.jhead** %2, align 8
  %19 = getelementptr inbounds %struct.jhead* %18, i32 0, i32 0
  %20 = load i32* %19, align 4
  %21 = sub nsw i32 %20, 1
  %22 = shl i32 1, %21
  %23 = load i32* %c, align 4
  %24 = sext i32 %23 to i64
  %25 = load %struct.jhead** %2, align 8
  %26 = getelementptr inbounds %struct.jhead* %25, i32 0, i32 7
  %27 = getelementptr inbounds [6 x i32]* %26, i32 0, i64 %24
  store i32 %22, i32* %27, align 4
  br label %28

; <label>:28                                      ; preds = %17
  %29 = load i32* %c, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %c, align 4
  br label %14

; <label>:31                                      ; preds = %14
  %32 = load i32* %1, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %54

; <label>:34                                      ; preds = %31
  br label %35

; <label>:35                                      ; preds = %51, %34
  %36 = load i16* %mark, align 2
  %37 = zext i16 %36 to i32
  %38 = shl i32 %37, 8
  %39 = load %struct._IO_FILE** @ifp, align 8
  %40 = call i32 @getc_unlocked(%struct._IO_FILE* %39)
  store i32 %40, i32* %c, align 4
  %41 = add nsw i32 %38, %40
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %mark, align 2
  br label %43

; <label>:43                                      ; preds = %35
  %44 = load i32* %c, align 4
  %45 = icmp ne i32 %44, -1
  br i1 %45, label %46, label %51

; <label>:46                                      ; preds = %43
  %47 = load i16* %mark, align 2
  %48 = zext i16 %47 to i32
  %49 = ashr i32 %48, 4
  %50 = icmp ne i32 %49, 4093
  br label %51

; <label>:51                                      ; preds = %46, %43
  %52 = phi i1 [ false, %43 ], [ %50, %46 ]
  br i1 %52, label %35, label %53

; <label>:53                                      ; preds = %51
  br label %54

; <label>:54                                      ; preds = %53, %31
  %55 = call i32 @getbits(i32 -1)
  br label %56

; <label>:56                                      ; preds = %54, %0
  store i32 0, i32* %c, align 4
  br label %57

; <label>:57                                      ; preds = %81, %56
  %58 = load i32* %c, align 4
  %59 = icmp slt i32 %58, 3
  br i1 %59, label %60, label %84

; <label>:60                                      ; preds = %57
  %61 = load %struct.jhead** %2, align 8
  %62 = getelementptr inbounds %struct.jhead* %61, i32 0, i32 9
  %63 = load i16** %62, align 8
  %64 = load %struct.jhead** %2, align 8
  %65 = getelementptr inbounds %struct.jhead* %64, i32 0, i32 2
  %66 = load i32* %65, align 4
  %67 = load %struct.jhead** %2, align 8
  %68 = getelementptr inbounds %struct.jhead* %67, i32 0, i32 3
  %69 = load i32* %68, align 4
  %70 = mul nsw i32 %66, %69
  %71 = load i32* %1, align 4
  %72 = load i32* %c, align 4
  %73 = add nsw i32 %71, %72
  %74 = and i32 %73, 1
  %75 = mul nsw i32 %70, %74
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i16* %63, i64 %76
  %78 = load i32* %c, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 %79
  store i16* %77, i16** %80, align 8
  br label %81

; <label>:81                                      ; preds = %60
  %82 = load i32* %c, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %c, align 4
  br label %57

; <label>:84                                      ; preds = %57
  store i32 0, i32* %col, align 4
  br label %85

; <label>:85                                      ; preds = %283, %84
  %86 = load i32* %col, align 4
  %87 = load %struct.jhead** %2, align 8
  %88 = getelementptr inbounds %struct.jhead* %87, i32 0, i32 2
  %89 = load i32* %88, align 4
  %90 = icmp slt i32 %86, %89
  br i1 %90, label %91, label %286

; <label>:91                                      ; preds = %85
  store i32 0, i32* %c, align 4
  br label %92

; <label>:92                                      ; preds = %279, %91
  %93 = load i32* %c, align 4
  %94 = load %struct.jhead** %2, align 8
  %95 = getelementptr inbounds %struct.jhead* %94, i32 0, i32 3
  %96 = load i32* %95, align 4
  %97 = icmp slt i32 %93, %96
  br i1 %97, label %98, label %282

; <label>:98                                      ; preds = %92
  %99 = load i32* %c, align 4
  %100 = sext i32 %99 to i64
  %101 = load %struct.jhead** %2, align 8
  %102 = getelementptr inbounds %struct.jhead* %101, i32 0, i32 8
  %103 = getelementptr inbounds [6 x %struct.decode*]* %102, i32 0, i64 %100
  %104 = load %struct.decode** %103, align 8
  %105 = call i32 @ljpeg_diff(%struct.decode* %104)
  store i32 %105, i32* %diff, align 4
  %106 = load %struct.jhead** %2, align 8
  %107 = getelementptr inbounds %struct.jhead* %106, i32 0, i32 4
  %108 = load i32* %107, align 4
  %109 = icmp ne i32 %108, 0
  br i1 %109, label %110, label %123

; <label>:110                                     ; preds = %98
  %111 = load i32* %c, align 4
  %112 = load %struct.jhead** %2, align 8
  %113 = getelementptr inbounds %struct.jhead* %112, i32 0, i32 4
  %114 = load i32* %113, align 4
  %115 = icmp sle i32 %111, %114
  br i1 %115, label %116, label %123

; <label>:116                                     ; preds = %110
  %117 = load i32* %col, align 4
  %118 = load i32* %c, align 4
  %119 = or i32 %117, %118
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %121, label %123

; <label>:121                                     ; preds = %116
  %122 = load i32* %spred, align 4
  store i32 %122, i32* %pred, align 4
  br label %149

; <label>:123                                     ; preds = %116, %110, %98
  %124 = load i32* %col, align 4
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %126, label %137

; <label>:126                                     ; preds = %123
  %127 = load %struct.jhead** %2, align 8
  %128 = getelementptr inbounds %struct.jhead* %127, i32 0, i32 3
  %129 = load i32* %128, align 4
  %130 = sub nsw i32 0, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 0
  %133 = load i16** %132, align 8
  %134 = getelementptr inbounds i16* %133, i64 %131
  %135 = load i16* %134, align 2
  %136 = zext i16 %135 to i32
  store i32 %136, i32* %pred, align 4
  br label %148

; <label>:137                                     ; preds = %123
  %138 = load i32* %diff, align 4
  %139 = load i32* %c, align 4
  %140 = sext i32 %139 to i64
  %141 = load %struct.jhead** %2, align 8
  %142 = getelementptr inbounds %struct.jhead* %141, i32 0, i32 7
  %143 = getelementptr inbounds [6 x i32]* %142, i32 0, i64 %140
  %144 = load i32* %143, align 4
  %145 = add nsw i32 %144, %138
  store i32 %145, i32* %143, align 4
  %146 = load i32* %diff, align 4
  %147 = sub nsw i32 %145, %146
  store i32 %147, i32* %pred, align 4
  br label %148

; <label>:148                                     ; preds = %137, %126
  br label %149

; <label>:149                                     ; preds = %148, %121
  %150 = load i32* %1, align 4
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %247

; <label>:152                                     ; preds = %149
  %153 = load i32* %col, align 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %247

; <label>:155                                     ; preds = %152
  %156 = load %struct.jhead** %2, align 8
  %157 = getelementptr inbounds %struct.jhead* %156, i32 0, i32 5
  %158 = load i32* %157, align 4
  switch i32 %158, label %245 [
    i32 1, label %159
    i32 2, label %160
    i32 3, label %166
    i32 4, label %177
    i32 5, label %196
    i32 6, label %216
    i32 7, label %236
  ]

; <label>:159                                     ; preds = %155
  br label %246

; <label>:160                                     ; preds = %155
  %161 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %162 = load i16** %161, align 8
  %163 = getelementptr inbounds i16* %162, i64 0
  %164 = load i16* %163, align 2
  %165 = zext i16 %164 to i32
  store i32 %165, i32* %pred, align 4
  br label %246

; <label>:166                                     ; preds = %155
  %167 = load %struct.jhead** %2, align 8
  %168 = getelementptr inbounds %struct.jhead* %167, i32 0, i32 3
  %169 = load i32* %168, align 4
  %170 = sub nsw i32 0, %169
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %173 = load i16** %172, align 8
  %174 = getelementptr inbounds i16* %173, i64 %171
  %175 = load i16* %174, align 2
  %176 = zext i16 %175 to i32
  store i32 %176, i32* %pred, align 4
  br label %246

; <label>:177                                     ; preds = %155
  %178 = load i32* %pred, align 4
  %179 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %180 = load i16** %179, align 8
  %181 = getelementptr inbounds i16* %180, i64 0
  %182 = load i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = add nsw i32 %178, %183
  %185 = load %struct.jhead** %2, align 8
  %186 = getelementptr inbounds %struct.jhead* %185, i32 0, i32 3
  %187 = load i32* %186, align 4
  %188 = sub nsw i32 0, %187
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %191 = load i16** %190, align 8
  %192 = getelementptr inbounds i16* %191, i64 %189
  %193 = load i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = sub nsw i32 %184, %194
  store i32 %195, i32* %pred, align 4
  br label %246

; <label>:196                                     ; preds = %155
  %197 = load i32* %pred, align 4
  %198 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %199 = load i16** %198, align 8
  %200 = getelementptr inbounds i16* %199, i64 0
  %201 = load i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = load %struct.jhead** %2, align 8
  %204 = getelementptr inbounds %struct.jhead* %203, i32 0, i32 3
  %205 = load i32* %204, align 4
  %206 = sub nsw i32 0, %205
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %209 = load i16** %208, align 8
  %210 = getelementptr inbounds i16* %209, i64 %207
  %211 = load i16* %210, align 2
  %212 = zext i16 %211 to i32
  %213 = sub nsw i32 %202, %212
  %214 = ashr i32 %213, 1
  %215 = add nsw i32 %197, %214
  store i32 %215, i32* %pred, align 4
  br label %246

; <label>:216                                     ; preds = %155
  %217 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %218 = load i16** %217, align 8
  %219 = getelementptr inbounds i16* %218, i64 0
  %220 = load i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = load i32* %pred, align 4
  %223 = load %struct.jhead** %2, align 8
  %224 = getelementptr inbounds %struct.jhead* %223, i32 0, i32 3
  %225 = load i32* %224, align 4
  %226 = sub nsw i32 0, %225
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %229 = load i16** %228, align 8
  %230 = getelementptr inbounds i16* %229, i64 %227
  %231 = load i16* %230, align 2
  %232 = zext i16 %231 to i32
  %233 = sub nsw i32 %222, %232
  %234 = ashr i32 %233, 1
  %235 = add nsw i32 %221, %234
  store i32 %235, i32* %pred, align 4
  br label %246

; <label>:236                                     ; preds = %155
  %237 = load i32* %pred, align 4
  %238 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %239 = load i16** %238, align 8
  %240 = getelementptr inbounds i16* %239, i64 0
  %241 = load i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = add nsw i32 %237, %242
  %244 = ashr i32 %243, 1
  store i32 %244, i32* %pred, align 4
  br label %246

; <label>:245                                     ; preds = %155
  store i32 0, i32* %pred, align 4
  br label %246

; <label>:246                                     ; preds = %245, %236, %216, %196, %177, %166, %160, %159
  br label %247

; <label>:247                                     ; preds = %246, %152, %149
  %248 = load i32* %pred, align 4
  %249 = load i32* %diff, align 4
  %250 = add nsw i32 %248, %249
  %251 = trunc i32 %250 to i16
  %252 = getelementptr inbounds [3 x i16*]* %row, i32 0, i32 0
  %253 = load i16** %252, align 8
  store i16 %251, i16* %253, align 2
  %254 = zext i16 %251 to i32
  %255 = load %struct.jhead** %2, align 8
  %256 = getelementptr inbounds %struct.jhead* %255, i32 0, i32 0
  %257 = load i32* %256, align 4
  %258 = ashr i32 %254, %257
  %259 = icmp ne i32 %258, 0
  br i1 %259, label %260, label %261

; <label>:260                                     ; preds = %247
  call void @derror()
  br label %261

; <label>:261                                     ; preds = %260, %247
  %262 = load i32* %c, align 4
  %263 = load %struct.jhead** %2, align 8
  %264 = getelementptr inbounds %struct.jhead* %263, i32 0, i32 4
  %265 = load i32* %264, align 4
  %266 = icmp sle i32 %262, %265
  br i1 %266, label %267, label %272

; <label>:267                                     ; preds = %261
  %268 = getelementptr inbounds [3 x i16*]* %row, i32 0, i32 0
  %269 = load i16** %268, align 8
  %270 = load i16* %269, align 2
  %271 = zext i16 %270 to i32
  store i32 %271, i32* %spred, align 4
  br label %272

; <label>:272                                     ; preds = %267, %261
  %273 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 0
  %274 = load i16** %273, align 8
  %275 = getelementptr inbounds i16* %274, i32 1
  store i16* %275, i16** %273, align 8
  %276 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 1
  %277 = load i16** %276, align 8
  %278 = getelementptr inbounds i16* %277, i32 1
  store i16* %278, i16** %276, align 8
  br label %279

; <label>:279                                     ; preds = %272
  %280 = load i32* %c, align 4
  %281 = add nsw i32 %280, 1
  store i32 %281, i32* %c, align 4
  br label %92

; <label>:282                                     ; preds = %92
  br label %283

; <label>:283                                     ; preds = %282
  %284 = load i32* %col, align 4
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* %col, align 4
  br label %85

; <label>:286                                     ; preds = %85
  %287 = getelementptr inbounds [3 x i16*]* %row, i32 0, i64 2
  %288 = load i16** %287, align 8
  ret i16* %288
}

; Function Attrs: nounwind uwtable
define void @lossless_jpeg_load_raw() #0 {
  %jwide = alloca i32, align 4
  %jrow = alloca i32, align 4
  %jcol = alloca i32, align 4
  %val = alloca i32, align 4
  %jidx = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %dark = alloca [2 x double], align 16
  %jh = alloca %struct.jhead, align 8
  %min = alloca i32, align 4
  %rp = alloca i16*, align 8
  store i32 0, i32* %row, align 4
  store i32 0, i32* %col, align 4
  %1 = bitcast [2 x double]* %dark to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  store i32 2147483647, i32* %min, align 4
  %2 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %215

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %7 = load i32* %6, align 4
  %8 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %9 = load i32* %8, align 4
  %10 = mul nsw i32 %7, %9
  store i32 %10, i32* %jwide, align 4
  store i32 0, i32* %jrow, align 4
  br label %11

; <label>:11                                      ; preds = %203, %5
  %12 = load i32* %jrow, align 4
  %13 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %16, label %206

; <label>:16                                      ; preds = %11
  %17 = load i32* %jrow, align 4
  %18 = call i16* @ljpeg_row(i32 %17, %struct.jhead* %jh)
  store i16* %18, i16** %rp, align 8
  store i32 0, i32* %jcol, align 4
  br label %19

; <label>:19                                      ; preds = %199, %16
  %20 = load i32* %jcol, align 4
  %21 = load i32* %jwide, align 4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %202

; <label>:23                                      ; preds = %19
  %24 = load i16** %rp, align 8
  %25 = getelementptr inbounds i16* %24, i32 1
  store i16* %25, i16** %rp, align 8
  %26 = load i16* %24, align 2
  %27 = zext i16 %26 to i32
  store i32 %27, i32* %val, align 4
  %28 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %29 = load i32* %28, align 4
  %30 = icmp sle i32 %29, 12
  br i1 %30, label %31, label %38

; <label>:31                                      ; preds = %23
  %32 = load i32* %val, align 4
  %33 = and i32 %32, 4095
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %34
  %36 = load i16* %35, align 2
  %37 = zext i16 %36 to i32
  store i32 %37, i32* %val, align 4
  br label %38

; <label>:38                                      ; preds = %31, %23
  %39 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %40 = icmp ne i16 %39, 0
  br i1 %40, label %41, label %93

; <label>:41                                      ; preds = %38
  %42 = load i32* %jrow, align 4
  %43 = load i32* %jwide, align 4
  %44 = mul nsw i32 %42, %43
  %45 = load i32* %jcol, align 4
  %46 = add nsw i32 %44, %45
  store i32 %46, i32* %jidx, align 4
  %47 = load i32* %jidx, align 4
  %48 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %49 = zext i16 %48 to i32
  %50 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %51 = load i32* %50, align 4
  %52 = mul nsw i32 %49, %51
  %53 = sdiv i32 %47, %52
  store i32 %53, i32* %i, align 4
  %54 = load i32* %i, align 4
  %55 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %56 = zext i16 %55 to i32
  %57 = icmp sge i32 %54, %56
  %58 = zext i1 %57 to i32
  store i32 %58, i32* %j, align 4
  br i1 %57, label %59, label %62

; <label>:59                                      ; preds = %41
  %60 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %61 = zext i16 %60 to i32
  store i32 %61, i32* %i, align 4
  br label %62

; <label>:62                                      ; preds = %59, %41
  %63 = load i32* %i, align 4
  %64 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %65 = zext i16 %64 to i32
  %66 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %67 = load i32* %66, align 4
  %68 = mul nsw i32 %65, %67
  %69 = mul nsw i32 %63, %68
  %70 = load i32* %jidx, align 4
  %71 = sub nsw i32 %70, %69
  store i32 %71, i32* %jidx, align 4
  %72 = load i32* %jidx, align 4
  %73 = load i32* %j, align 4
  %74 = add nsw i32 1, %73
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [3 x i16]* @cr2_slice, i32 0, i64 %75
  %77 = load i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = sdiv i32 %72, %78
  store i32 %79, i32* %row, align 4
  %80 = load i32* %jidx, align 4
  %81 = load i32* %j, align 4
  %82 = add nsw i32 1, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [3 x i16]* @cr2_slice, i32 0, i64 %83
  %85 = load i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = srem i32 %80, %86
  %88 = load i32* %i, align 4
  %89 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %90 = zext i16 %89 to i32
  %91 = mul nsw i32 %88, %90
  %92 = add nsw i32 %87, %91
  store i32 %92, i32* %col, align 4
  br label %93

; <label>:93                                      ; preds = %62, %38
  %94 = load i16* @raw_width, align 2
  %95 = zext i16 %94 to i32
  %96 = icmp eq i32 %95, 3984
  br i1 %96, label %97, label %108

; <label>:97                                      ; preds = %93
  %98 = load i32* %col, align 4
  %99 = sub nsw i32 %98, 2
  store i32 %99, i32* %col, align 4
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %101, label %108

; <label>:101                                     ; preds = %97
  %102 = load i32* %row, align 4
  %103 = add nsw i32 %102, -1
  store i32 %103, i32* %row, align 4
  %104 = load i16* @raw_width, align 2
  %105 = zext i16 %104 to i32
  %106 = load i32* %col, align 4
  %107 = add nsw i32 %106, %105
  store i32 %107, i32* %col, align 4
  br label %108

; <label>:108                                     ; preds = %101, %97, %93
  %109 = load i32* %row, align 4
  %110 = load i16* @top_margin, align 2
  %111 = zext i16 %110 to i32
  %112 = sub nsw i32 %109, %111
  %113 = load i16* @height, align 2
  %114 = zext i16 %113 to i32
  %115 = icmp ult i32 %112, %114
  br i1 %115, label %116, label %189

; <label>:116                                     ; preds = %108
  %117 = load i32* %col, align 4
  %118 = load i16* @left_margin, align 2
  %119 = zext i16 %118 to i32
  %120 = sub nsw i32 %117, %119
  %121 = load i16* @width, align 2
  %122 = zext i16 %121 to i32
  %123 = icmp ult i32 %120, %122
  br i1 %123, label %124, label %172

; <label>:124                                     ; preds = %116
  %125 = load i32* %val, align 4
  %126 = trunc i32 %125 to i16
  %127 = load i32* @filters, align 4
  %128 = load i32* %row, align 4
  %129 = load i16* @top_margin, align 2
  %130 = zext i16 %129 to i32
  %131 = sub nsw i32 %128, %130
  %132 = shl i32 %131, 1
  %133 = and i32 %132, 14
  %134 = load i32* %col, align 4
  %135 = load i16* @left_margin, align 2
  %136 = zext i16 %135 to i32
  %137 = sub nsw i32 %134, %136
  %138 = and i32 %137, 1
  %139 = add nsw i32 %133, %138
  %140 = shl i32 %139, 1
  %141 = lshr i32 %127, %140
  %142 = and i32 %141, 3
  %143 = zext i32 %142 to i64
  %144 = load i32* %row, align 4
  %145 = load i16* @top_margin, align 2
  %146 = zext i16 %145 to i32
  %147 = sub nsw i32 %144, %146
  %148 = load i16* @shrink, align 2
  %149 = zext i16 %148 to i32
  %150 = ashr i32 %147, %149
  %151 = load i16* @iwidth, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nsw i32 %150, %152
  %154 = load i32* %col, align 4
  %155 = load i16* @left_margin, align 2
  %156 = zext i16 %155 to i32
  %157 = sub nsw i32 %154, %156
  %158 = load i16* @shrink, align 2
  %159 = zext i16 %158 to i32
  %160 = ashr i32 %157, %159
  %161 = add nsw i32 %153, %160
  %162 = sext i32 %161 to i64
  %163 = load [4 x i16]** @image, align 8
  %164 = getelementptr inbounds [4 x i16]* %163, i64 %162
  %165 = getelementptr inbounds [4 x i16]* %164, i32 0, i64 %143
  store i16 %126, i16* %165, align 2
  %166 = load i32* %min, align 4
  %167 = load i32* %val, align 4
  %168 = icmp sgt i32 %166, %167
  br i1 %168, label %169, label %171

; <label>:169                                     ; preds = %124
  %170 = load i32* %val, align 4
  store i32 %170, i32* %min, align 4
  br label %171

; <label>:171                                     ; preds = %169, %124
  br label %188

; <label>:172                                     ; preds = %116
  %173 = load i32* %col, align 4
  %174 = icmp sgt i32 %173, 1
  br i1 %174, label %175, label %187

; <label>:175                                     ; preds = %172
  %176 = load i32* %val, align 4
  %177 = sitofp i32 %176 to double
  %178 = load i32* %col, align 4
  %179 = load i16* @left_margin, align 2
  %180 = zext i16 %179 to i32
  %181 = sub nsw i32 %178, %180
  %182 = and i32 %181, 1
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds [2 x double]* %dark, i32 0, i64 %183
  %185 = load double* %184, align 8
  %186 = fadd double %185, %177
  store double %186, double* %184, align 8
  br label %187

; <label>:187                                     ; preds = %175, %172
  br label %188

; <label>:188                                     ; preds = %187, %171
  br label %189

; <label>:189                                     ; preds = %188, %108
  %190 = load i32* %col, align 4
  %191 = add nsw i32 %190, 1
  store i32 %191, i32* %col, align 4
  %192 = load i16* @raw_width, align 2
  %193 = zext i16 %192 to i32
  %194 = icmp sge i32 %191, %193
  br i1 %194, label %195, label %198

; <label>:195                                     ; preds = %189
  %196 = load i32* %row, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %row, align 4
  store i32 0, i32* %col, align 4
  br label %198

; <label>:198                                     ; preds = %195, %189
  br label %199

; <label>:199                                     ; preds = %198
  %200 = load i32* %jcol, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %jcol, align 4
  br label %19

; <label>:202                                     ; preds = %19
  br label %203

; <label>:203                                     ; preds = %202
  %204 = load i32* %jrow, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %jrow, align 4
  br label %11

; <label>:206                                     ; preds = %11
  %207 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %208 = load i16** %207, align 8
  %209 = bitcast i16* %208 to i8*
  call void @free(i8* %209) #4
  %210 = getelementptr inbounds [2 x double]* %dark, i32 0, i32 0
  call void @canon_black(double* %210)
  %211 = call i32 @strcasecmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0)) #10
  %212 = icmp ne i32 %211, 0
  br i1 %212, label %215, label %213

; <label>:213                                     ; preds = %206
  %214 = load i32* %min, align 4
  store i32 %214, i32* @black, align 4
  br label %215

; <label>:215                                     ; preds = %4, %213, %206
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define void @canon_sraw_load_raw() #0 {
  %jh = alloca %struct.jhead, align 8
  %rp = alloca i16*, align 8
  %ip = alloca [4 x i16]*, align 8
  %jwide = alloca i32, align 4
  %slice = alloca i32, align 4
  %scol = alloca i32, align 4
  %ecol = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %jrow = alloca i32, align 4
  %jcol = alloca i32, align 4
  %pix = alloca [3 x i32], align 4
  %c = alloca i32, align 4
  %v = alloca [3 x i32], align 4
  %ver = alloca i32, align 4
  %hue = alloca i32, align 4
  %cp = alloca i8*, align 8
  store i16* null, i16** %rp, align 8
  store i32 0, i32* %jrow, align 4
  store i32 0, i32* %jcol, align 4
  %1 = bitcast [3 x i32]* %v to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 12, i32 4, i1 false)
  %2 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %604

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %7 = load i32* %6, align 4
  %8 = ashr i32 %7, 1
  store i32 %8, i32* %6, align 4
  %9 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %10 = load i32* %9, align 4
  %11 = mul nsw i32 %8, %10
  store i32 %11, i32* %jwide, align 4
  store i32 0, i32* %slice, align 4
  store i32 0, i32* %ecol, align 4
  br label %12

; <label>:12                                      ; preds = %156, %5
  %13 = load i32* %slice, align 4
  %14 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %15 = zext i16 %14 to i32
  %16 = icmp sle i32 %13, %15
  br i1 %16, label %17, label %159

; <label>:17                                      ; preds = %12
  %18 = load i32* %ecol, align 4
  store i32 %18, i32* %scol, align 4
  %19 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 1), align 2
  %20 = zext i16 %19 to i32
  %21 = mul nsw i32 %20, 2
  %22 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %23 = load i32* %22, align 4
  %24 = sdiv i32 %21, %23
  %25 = load i32* %ecol, align 4
  %26 = add nsw i32 %25, %24
  store i32 %26, i32* %ecol, align 4
  %27 = load i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  %28 = icmp ne i16 %27, 0
  br i1 %28, label %29, label %35

; <label>:29                                      ; preds = %17
  %30 = load i32* %ecol, align 4
  %31 = load i16* @raw_width, align 2
  %32 = zext i16 %31 to i32
  %33 = sub nsw i32 %32, 1
  %34 = icmp sgt i32 %30, %33
  br i1 %34, label %35, label %39

; <label>:35                                      ; preds = %29, %17
  %36 = load i16* @raw_width, align 2
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, -2
  store i32 %38, i32* %ecol, align 4
  br label %39

; <label>:39                                      ; preds = %35, %29
  store i32 0, i32* %row, align 4
  br label %40

; <label>:40                                      ; preds = %148, %39
  %41 = load i32* %row, align 4
  %42 = load i16* @height, align 2
  %43 = zext i16 %42 to i32
  %44 = icmp slt i32 %41, %43
  br i1 %44, label %45, label %155

; <label>:45                                      ; preds = %40
  %46 = load [4 x i16]** @image, align 8
  %47 = load i32* %row, align 4
  %48 = load i16* @width, align 2
  %49 = zext i16 %48 to i32
  %50 = mul nsw i32 %47, %49
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [4 x i16]* %46, i64 %51
  store [4 x i16]* %52, [4 x i16]** %ip, align 8
  %53 = load i32* %scol, align 4
  store i32 %53, i32* %col, align 4
  br label %54

; <label>:54                                      ; preds = %140, %45
  %55 = load i32* %col, align 4
  %56 = load i32* %ecol, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %147

; <label>:58                                      ; preds = %54
  %59 = load i32* %jwide, align 4
  %60 = load i32* %jcol, align 4
  %61 = srem i32 %60, %59
  store i32 %61, i32* %jcol, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %67

; <label>:63                                      ; preds = %58
  %64 = load i32* %jrow, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %jrow, align 4
  %66 = call i16* @ljpeg_row(i32 %64, %struct.jhead* %jh)
  store i16* %66, i16** %rp, align 8
  br label %67

; <label>:67                                      ; preds = %63, %58
  %68 = load i32* %col, align 4
  %69 = load i16* @width, align 2
  %70 = zext i16 %69 to i32
  %71 = icmp sge i32 %68, %70
  br i1 %71, label %72, label %73

; <label>:72                                      ; preds = %67
  br label %140

; <label>:73                                      ; preds = %67
  store i32 0, i32* %c, align 4
  br label %74

; <label>:74                                      ; preds = %102, %73
  %75 = load i32* %c, align 4
  %76 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %77 = load i32* %76, align 4
  %78 = sub nsw i32 %77, 2
  %79 = icmp slt i32 %75, %78
  br i1 %79, label %80, label %105

; <label>:80                                      ; preds = %74
  %81 = load i32* %jcol, align 4
  %82 = load i32* %c, align 4
  %83 = add nsw i32 %81, %82
  %84 = sext i32 %83 to i64
  %85 = load i16** %rp, align 8
  %86 = getelementptr inbounds i16* %85, i64 %84
  %87 = load i16* %86, align 2
  %88 = load i32* %col, align 4
  %89 = load i32* %c, align 4
  %90 = ashr i32 %89, 1
  %91 = load i16* @width, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nsw i32 %90, %92
  %94 = add nsw i32 %88, %93
  %95 = load i32* %c, align 4
  %96 = and i32 %95, 1
  %97 = add nsw i32 %94, %96
  %98 = sext i32 %97 to i64
  %99 = load [4 x i16]** %ip, align 8
  %100 = getelementptr inbounds [4 x i16]* %99, i64 %98
  %101 = getelementptr inbounds [4 x i16]* %100, i32 0, i64 0
  store i16 %87, i16* %101, align 2
  br label %102

; <label>:102                                     ; preds = %80
  %103 = load i32* %c, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %c, align 4
  br label %74

; <label>:105                                     ; preds = %74
  %106 = load i32* %jcol, align 4
  %107 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %108 = load i32* %107, align 4
  %109 = add nsw i32 %106, %108
  %110 = sub nsw i32 %109, 2
  %111 = sext i32 %110 to i64
  %112 = load i16** %rp, align 8
  %113 = getelementptr inbounds i16* %112, i64 %111
  %114 = load i16* %113, align 2
  %115 = sext i16 %114 to i32
  %116 = sub nsw i32 %115, 16384
  %117 = trunc i32 %116 to i16
  %118 = load i32* %col, align 4
  %119 = sext i32 %118 to i64
  %120 = load [4 x i16]** %ip, align 8
  %121 = getelementptr inbounds [4 x i16]* %120, i64 %119
  %122 = getelementptr inbounds [4 x i16]* %121, i32 0, i64 1
  store i16 %117, i16* %122, align 2
  %123 = load i32* %jcol, align 4
  %124 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %125 = load i32* %124, align 4
  %126 = add nsw i32 %123, %125
  %127 = sub nsw i32 %126, 1
  %128 = sext i32 %127 to i64
  %129 = load i16** %rp, align 8
  %130 = getelementptr inbounds i16* %129, i64 %128
  %131 = load i16* %130, align 2
  %132 = sext i16 %131 to i32
  %133 = sub nsw i32 %132, 16384
  %134 = trunc i32 %133 to i16
  %135 = load i32* %col, align 4
  %136 = sext i32 %135 to i64
  %137 = load [4 x i16]** %ip, align 8
  %138 = getelementptr inbounds [4 x i16]* %137, i64 %136
  %139 = getelementptr inbounds [4 x i16]* %138, i32 0, i64 2
  store i16 %134, i16* %139, align 2
  br label %140

; <label>:140                                     ; preds = %105, %72
  %141 = load i32* %col, align 4
  %142 = add nsw i32 %141, 2
  store i32 %142, i32* %col, align 4
  %143 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %144 = load i32* %143, align 4
  %145 = load i32* %jcol, align 4
  %146 = add nsw i32 %145, %144
  store i32 %146, i32* %jcol, align 4
  br label %54

; <label>:147                                     ; preds = %54
  br label %148

; <label>:148                                     ; preds = %147
  %149 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %150 = load i32* %149, align 4
  %151 = ashr i32 %150, 1
  %152 = sub nsw i32 %151, 1
  %153 = load i32* %row, align 4
  %154 = add nsw i32 %153, %152
  store i32 %154, i32* %row, align 4
  br label %40

; <label>:155                                     ; preds = %40
  br label %156

; <label>:156                                     ; preds = %155
  %157 = load i32* %slice, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %slice, align 4
  br label %12

; <label>:159                                     ; preds = %12
  store i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i8** %cp, align 8
  br label %160

; <label>:160                                     ; preds = %181, %159
  %161 = load i8** %cp, align 8
  %162 = load i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %165, label %178

; <label>:165                                     ; preds = %160
  %166 = load i8** %cp, align 8
  %167 = load i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = sext i32 %168 to i64
  %170 = call i16** @__ctype_b_loc() #9
  %171 = load i16** %170, align 8
  %172 = getelementptr inbounds i16* %171, i64 %169
  %173 = load i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = and i32 %174, 2048
  %176 = icmp ne i32 %175, 0
  %177 = xor i1 %176, true
  br label %178

; <label>:178                                     ; preds = %165, %160
  %179 = phi i1 [ false, %160 ], [ %177, %165 ]
  br i1 %179, label %180, label %184

; <label>:180                                     ; preds = %178
  br label %181

; <label>:181                                     ; preds = %180
  %182 = load i8** %cp, align 8
  %183 = getelementptr inbounds i8* %182, i32 1
  store i8* %183, i8** %cp, align 8
  br label %160

; <label>:184                                     ; preds = %178
  %185 = load i8** %cp, align 8
  %186 = getelementptr inbounds [3 x i32]* %v, i32 0, i32 0
  %187 = getelementptr inbounds [3 x i32]* %v, i32 0, i32 0
  %188 = getelementptr inbounds i32* %187, i64 1
  %189 = getelementptr inbounds [3 x i32]* %v, i32 0, i32 0
  %190 = getelementptr inbounds i32* %189, i64 2
  %191 = call i32 (i8*, i8*, ...)* @sscanf(i8* %185, i8* getelementptr inbounds ([9 x i8]* @.str8, i32 0, i32 0), i32* %186, i32* %188, i32* %190) #4
  %192 = getelementptr inbounds [3 x i32]* %v, i32 0, i64 0
  %193 = load i32* %192, align 4
  %194 = mul nsw i32 %193, 1000
  %195 = getelementptr inbounds [3 x i32]* %v, i32 0, i64 1
  %196 = load i32* %195, align 4
  %197 = add nsw i32 %194, %196
  %198 = mul nsw i32 %197, 1000
  %199 = getelementptr inbounds [3 x i32]* %v, i32 0, i64 2
  %200 = load i32* %199, align 4
  %201 = add nsw i32 %198, %200
  store i32 %201, i32* %ver, align 4
  %202 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %203 = load i32* %202, align 4
  %204 = add nsw i32 %203, 1
  %205 = shl i32 %204, 2
  store i32 %205, i32* %hue, align 4
  %206 = load i32* @unique_id, align 4
  %207 = icmp eq i32 %206, -2147483112
  br i1 %207, label %208, label %218

; <label>:208                                     ; preds = %184
  %209 = load i32* %ver, align 4
  %210 = icmp sgt i32 %209, 1000006
  br i1 %210, label %211, label %218

; <label>:211                                     ; preds = %208
  %212 = load i32* %ver, align 4
  %213 = icmp slt i32 %212, 3000000
  br i1 %213, label %214, label %218

; <label>:214                                     ; preds = %211
  %215 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %216 = load i32* %215, align 4
  %217 = shl i32 %216, 1
  store i32 %217, i32* %hue, align 4
  br label %218

; <label>:218                                     ; preds = %214, %211, %208, %184
  %219 = load [4 x i16]** @image, align 8
  store [4 x i16]* %219, [4 x i16]** %ip, align 8
  %220 = load [4 x i16]** %ip, align 8
  %221 = getelementptr inbounds [4 x i16]* %220, i64 0
  %222 = getelementptr inbounds [4 x i16]* %221, i32 0, i32 0
  store i16* %222, i16** %rp, align 8
  store i32 0, i32* %row, align 4
  br label %223

; <label>:223                                     ; preds = %389, %218
  %224 = load i32* %row, align 4
  %225 = load i16* @height, align 2
  %226 = zext i16 %225 to i32
  %227 = icmp slt i32 %224, %226
  br i1 %227, label %228, label %397

; <label>:228                                     ; preds = %223
  %229 = load i32* %row, align 4
  %230 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 4
  %231 = load i32* %230, align 4
  %232 = ashr i32 %231, 1
  %233 = and i32 %229, %232
  %234 = icmp ne i32 %233, 0
  br i1 %234, label %235, label %315

; <label>:235                                     ; preds = %228
  store i32 0, i32* %col, align 4
  br label %236

; <label>:236                                     ; preds = %311, %235
  %237 = load i32* %col, align 4
  %238 = load i16* @width, align 2
  %239 = zext i16 %238 to i32
  %240 = icmp slt i32 %237, %239
  br i1 %240, label %241, label %314

; <label>:241                                     ; preds = %236
  store i32 1, i32* %c, align 4
  br label %242

; <label>:242                                     ; preds = %307, %241
  %243 = load i32* %c, align 4
  %244 = icmp slt i32 %243, 3
  br i1 %244, label %245, label %310

; <label>:245                                     ; preds = %242
  %246 = load i32* %row, align 4
  %247 = load i16* @height, align 2
  %248 = zext i16 %247 to i32
  %249 = sub nsw i32 %248, 1
  %250 = icmp eq i32 %246, %249
  br i1 %250, label %251, label %270

; <label>:251                                     ; preds = %245
  %252 = load i32* %c, align 4
  %253 = sext i32 %252 to i64
  %254 = load i32* %col, align 4
  %255 = load i16* @width, align 2
  %256 = zext i16 %255 to i32
  %257 = sub nsw i32 %254, %256
  %258 = sext i32 %257 to i64
  %259 = load [4 x i16]** %ip, align 8
  %260 = getelementptr inbounds [4 x i16]* %259, i64 %258
  %261 = getelementptr inbounds [4 x i16]* %260, i32 0, i64 %253
  %262 = load i16* %261, align 2
  %263 = load i32* %c, align 4
  %264 = sext i32 %263 to i64
  %265 = load i32* %col, align 4
  %266 = sext i32 %265 to i64
  %267 = load [4 x i16]** %ip, align 8
  %268 = getelementptr inbounds [4 x i16]* %267, i64 %266
  %269 = getelementptr inbounds [4 x i16]* %268, i32 0, i64 %264
  store i16 %262, i16* %269, align 2
  br label %306

; <label>:270                                     ; preds = %245
  %271 = load i32* %c, align 4
  %272 = sext i32 %271 to i64
  %273 = load i32* %col, align 4
  %274 = load i16* @width, align 2
  %275 = zext i16 %274 to i32
  %276 = sub nsw i32 %273, %275
  %277 = sext i32 %276 to i64
  %278 = load [4 x i16]** %ip, align 8
  %279 = getelementptr inbounds [4 x i16]* %278, i64 %277
  %280 = getelementptr inbounds [4 x i16]* %279, i32 0, i64 %272
  %281 = load i16* %280, align 2
  %282 = sext i16 %281 to i32
  %283 = load i32* %c, align 4
  %284 = sext i32 %283 to i64
  %285 = load i32* %col, align 4
  %286 = load i16* @width, align 2
  %287 = zext i16 %286 to i32
  %288 = add nsw i32 %285, %287
  %289 = sext i32 %288 to i64
  %290 = load [4 x i16]** %ip, align 8
  %291 = getelementptr inbounds [4 x i16]* %290, i64 %289
  %292 = getelementptr inbounds [4 x i16]* %291, i32 0, i64 %284
  %293 = load i16* %292, align 2
  %294 = sext i16 %293 to i32
  %295 = add nsw i32 %282, %294
  %296 = add nsw i32 %295, 1
  %297 = ashr i32 %296, 1
  %298 = trunc i32 %297 to i16
  %299 = load i32* %c, align 4
  %300 = sext i32 %299 to i64
  %301 = load i32* %col, align 4
  %302 = sext i32 %301 to i64
  %303 = load [4 x i16]** %ip, align 8
  %304 = getelementptr inbounds [4 x i16]* %303, i64 %302
  %305 = getelementptr inbounds [4 x i16]* %304, i32 0, i64 %300
  store i16 %298, i16* %305, align 2
  br label %306

; <label>:306                                     ; preds = %270, %251
  br label %307

; <label>:307                                     ; preds = %306
  %308 = load i32* %c, align 4
  %309 = add nsw i32 %308, 1
  store i32 %309, i32* %c, align 4
  br label %242

; <label>:310                                     ; preds = %242
  br label %311

; <label>:311                                     ; preds = %310
  %312 = load i32* %col, align 4
  %313 = add nsw i32 %312, 2
  store i32 %313, i32* %col, align 4
  br label %236

; <label>:314                                     ; preds = %236
  br label %315

; <label>:315                                     ; preds = %314, %228
  store i32 1, i32* %col, align 4
  br label %316

; <label>:316                                     ; preds = %385, %315
  %317 = load i32* %col, align 4
  %318 = load i16* @width, align 2
  %319 = zext i16 %318 to i32
  %320 = icmp slt i32 %317, %319
  br i1 %320, label %321, label %388

; <label>:321                                     ; preds = %316
  store i32 1, i32* %c, align 4
  br label %322

; <label>:322                                     ; preds = %381, %321
  %323 = load i32* %c, align 4
  %324 = icmp slt i32 %323, 3
  br i1 %324, label %325, label %384

; <label>:325                                     ; preds = %322
  %326 = load i32* %col, align 4
  %327 = load i16* @width, align 2
  %328 = zext i16 %327 to i32
  %329 = sub nsw i32 %328, 1
  %330 = icmp eq i32 %326, %329
  br i1 %330, label %331, label %348

; <label>:331                                     ; preds = %325
  %332 = load i32* %c, align 4
  %333 = sext i32 %332 to i64
  %334 = load i32* %col, align 4
  %335 = sub nsw i32 %334, 1
  %336 = sext i32 %335 to i64
  %337 = load [4 x i16]** %ip, align 8
  %338 = getelementptr inbounds [4 x i16]* %337, i64 %336
  %339 = getelementptr inbounds [4 x i16]* %338, i32 0, i64 %333
  %340 = load i16* %339, align 2
  %341 = load i32* %c, align 4
  %342 = sext i32 %341 to i64
  %343 = load i32* %col, align 4
  %344 = sext i32 %343 to i64
  %345 = load [4 x i16]** %ip, align 8
  %346 = getelementptr inbounds [4 x i16]* %345, i64 %344
  %347 = getelementptr inbounds [4 x i16]* %346, i32 0, i64 %342
  store i16 %340, i16* %347, align 2
  br label %380

; <label>:348                                     ; preds = %325
  %349 = load i32* %c, align 4
  %350 = sext i32 %349 to i64
  %351 = load i32* %col, align 4
  %352 = sub nsw i32 %351, 1
  %353 = sext i32 %352 to i64
  %354 = load [4 x i16]** %ip, align 8
  %355 = getelementptr inbounds [4 x i16]* %354, i64 %353
  %356 = getelementptr inbounds [4 x i16]* %355, i32 0, i64 %350
  %357 = load i16* %356, align 2
  %358 = sext i16 %357 to i32
  %359 = load i32* %c, align 4
  %360 = sext i32 %359 to i64
  %361 = load i32* %col, align 4
  %362 = add nsw i32 %361, 1
  %363 = sext i32 %362 to i64
  %364 = load [4 x i16]** %ip, align 8
  %365 = getelementptr inbounds [4 x i16]* %364, i64 %363
  %366 = getelementptr inbounds [4 x i16]* %365, i32 0, i64 %360
  %367 = load i16* %366, align 2
  %368 = sext i16 %367 to i32
  %369 = add nsw i32 %358, %368
  %370 = add nsw i32 %369, 1
  %371 = ashr i32 %370, 1
  %372 = trunc i32 %371 to i16
  %373 = load i32* %c, align 4
  %374 = sext i32 %373 to i64
  %375 = load i32* %col, align 4
  %376 = sext i32 %375 to i64
  %377 = load [4 x i16]** %ip, align 8
  %378 = getelementptr inbounds [4 x i16]* %377, i64 %376
  %379 = getelementptr inbounds [4 x i16]* %378, i32 0, i64 %374
  store i16 %372, i16* %379, align 2
  br label %380

; <label>:380                                     ; preds = %348, %331
  br label %381

; <label>:381                                     ; preds = %380
  %382 = load i32* %c, align 4
  %383 = add nsw i32 %382, 1
  store i32 %383, i32* %c, align 4
  br label %322

; <label>:384                                     ; preds = %322
  br label %385

; <label>:385                                     ; preds = %384
  %386 = load i32* %col, align 4
  %387 = add nsw i32 %386, 2
  store i32 %387, i32* %col, align 4
  br label %316

; <label>:388                                     ; preds = %316
  br label %389

; <label>:389                                     ; preds = %388
  %390 = load i32* %row, align 4
  %391 = add nsw i32 %390, 1
  store i32 %391, i32* %row, align 4
  %392 = load i16* @width, align 2
  %393 = zext i16 %392 to i32
  %394 = load [4 x i16]** %ip, align 8
  %395 = sext i32 %393 to i64
  %396 = getelementptr inbounds [4 x i16]* %394, i64 %395
  store [4 x i16]* %396, [4 x i16]** %ip, align 8
  br label %223

; <label>:397                                     ; preds = %223
  br label %398

; <label>:398                                     ; preds = %597, %397
  %399 = load i16** %rp, align 8
  %400 = load [4 x i16]** %ip, align 8
  %401 = getelementptr inbounds [4 x i16]* %400, i64 0
  %402 = getelementptr inbounds [4 x i16]* %401, i32 0, i32 0
  %403 = icmp ult i16* %399, %402
  br i1 %403, label %404, label %600

; <label>:404                                     ; preds = %398
  %405 = load i32* @unique_id, align 4
  %406 = icmp ult i32 %405, -2147483136
  br i1 %406, label %407, label %449

; <label>:407                                     ; preds = %404
  %408 = load i16** %rp, align 8
  %409 = getelementptr inbounds i16* %408, i64 0
  %410 = load i16* %409, align 2
  %411 = sext i16 %410 to i32
  %412 = load i16** %rp, align 8
  %413 = getelementptr inbounds i16* %412, i64 2
  %414 = load i16* %413, align 2
  %415 = sext i16 %414 to i32
  %416 = add nsw i32 %411, %415
  %417 = sub nsw i32 %416, 512
  %418 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 0
  store i32 %417, i32* %418, align 4
  %419 = load i16** %rp, align 8
  %420 = getelementptr inbounds i16* %419, i64 0
  %421 = load i16* %420, align 2
  %422 = sext i16 %421 to i32
  %423 = load i16** %rp, align 8
  %424 = getelementptr inbounds i16* %423, i64 1
  %425 = load i16* %424, align 2
  %426 = sext i16 %425 to i32
  %427 = add nsw i32 %422, %426
  %428 = sub nsw i32 %427, 512
  %429 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 2
  store i32 %428, i32* %429, align 4
  %430 = load i16** %rp, align 8
  %431 = getelementptr inbounds i16* %430, i64 0
  %432 = load i16* %431, align 2
  %433 = sext i16 %432 to i32
  %434 = load i16** %rp, align 8
  %435 = getelementptr inbounds i16* %434, i64 1
  %436 = load i16* %435, align 2
  %437 = sext i16 %436 to i32
  %438 = mul nsw i32 -778, %437
  %439 = load i16** %rp, align 8
  %440 = getelementptr inbounds i16* %439, i64 2
  %441 = load i16* %440, align 2
  %442 = sext i16 %441 to i32
  %443 = shl i32 %442, 11
  %444 = sub nsw i32 %438, %443
  %445 = ashr i32 %444, 12
  %446 = add nsw i32 %433, %445
  %447 = sub nsw i32 %446, 512
  %448 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 1
  store i32 %447, i32* %448, align 4
  br label %524

; <label>:449                                     ; preds = %404
  %450 = load i16** %rp, align 8
  %451 = getelementptr inbounds i16* %450, i64 1
  %452 = load i16* %451, align 2
  %453 = sext i16 %452 to i32
  %454 = shl i32 %453, 2
  %455 = load i32* %hue, align 4
  %456 = add nsw i32 %454, %455
  %457 = trunc i32 %456 to i16
  %458 = load i16** %rp, align 8
  %459 = getelementptr inbounds i16* %458, i64 1
  store i16 %457, i16* %459, align 2
  %460 = load i16** %rp, align 8
  %461 = getelementptr inbounds i16* %460, i64 2
  %462 = load i16* %461, align 2
  %463 = sext i16 %462 to i32
  %464 = shl i32 %463, 2
  %465 = load i32* %hue, align 4
  %466 = add nsw i32 %464, %465
  %467 = trunc i32 %466 to i16
  %468 = load i16** %rp, align 8
  %469 = getelementptr inbounds i16* %468, i64 2
  store i16 %467, i16* %469, align 2
  %470 = load i16** %rp, align 8
  %471 = getelementptr inbounds i16* %470, i64 0
  %472 = load i16* %471, align 2
  %473 = sext i16 %472 to i32
  %474 = load i16** %rp, align 8
  %475 = getelementptr inbounds i16* %474, i64 1
  %476 = load i16* %475, align 2
  %477 = sext i16 %476 to i32
  %478 = mul nsw i32 200, %477
  %479 = load i16** %rp, align 8
  %480 = getelementptr inbounds i16* %479, i64 2
  %481 = load i16* %480, align 2
  %482 = sext i16 %481 to i32
  %483 = mul nsw i32 22929, %482
  %484 = add nsw i32 %478, %483
  %485 = ashr i32 %484, 14
  %486 = add nsw i32 %473, %485
  %487 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 0
  store i32 %486, i32* %487, align 4
  %488 = load i16** %rp, align 8
  %489 = getelementptr inbounds i16* %488, i64 0
  %490 = load i16* %489, align 2
  %491 = sext i16 %490 to i32
  %492 = load i16** %rp, align 8
  %493 = getelementptr inbounds i16* %492, i64 1
  %494 = load i16* %493, align 2
  %495 = sext i16 %494 to i32
  %496 = mul nsw i32 -5640, %495
  %497 = load i16** %rp, align 8
  %498 = getelementptr inbounds i16* %497, i64 2
  %499 = load i16* %498, align 2
  %500 = sext i16 %499 to i32
  %501 = mul nsw i32 11751, %500
  %502 = sub nsw i32 %496, %501
  %503 = ashr i32 %502, 14
  %504 = add nsw i32 %491, %503
  %505 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 1
  store i32 %504, i32* %505, align 4
  %506 = load i16** %rp, align 8
  %507 = getelementptr inbounds i16* %506, i64 0
  %508 = load i16* %507, align 2
  %509 = sext i16 %508 to i32
  %510 = load i16** %rp, align 8
  %511 = getelementptr inbounds i16* %510, i64 1
  %512 = load i16* %511, align 2
  %513 = sext i16 %512 to i32
  %514 = mul nsw i32 29040, %513
  %515 = load i16** %rp, align 8
  %516 = getelementptr inbounds i16* %515, i64 2
  %517 = load i16* %516, align 2
  %518 = sext i16 %517 to i32
  %519 = mul nsw i32 101, %518
  %520 = sub nsw i32 %514, %519
  %521 = ashr i32 %520, 14
  %522 = add nsw i32 %509, %521
  %523 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 2
  store i32 %522, i32* %523, align 4
  br label %524

; <label>:524                                     ; preds = %449, %407
  store i32 0, i32* %c, align 4
  br label %525

; <label>:525                                     ; preds = %593, %524
  %526 = load i32* %c, align 4
  %527 = icmp slt i32 %526, 3
  br i1 %527, label %528, label %596

; <label>:528                                     ; preds = %525
  %529 = load i32* %c, align 4
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %530
  %532 = load i32* %531, align 4
  %533 = load i32* %c, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %534
  %536 = load i16* %535, align 2
  %537 = zext i16 %536 to i32
  %538 = mul nsw i32 %532, %537
  %539 = ashr i32 %538, 10
  %540 = icmp slt i32 %539, 65535
  br i1 %540, label %541, label %553

; <label>:541                                     ; preds = %528
  %542 = load i32* %c, align 4
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %543
  %545 = load i32* %544, align 4
  %546 = load i32* %c, align 4
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %547
  %549 = load i16* %548, align 2
  %550 = zext i16 %549 to i32
  %551 = mul nsw i32 %545, %550
  %552 = ashr i32 %551, 10
  br label %554

; <label>:553                                     ; preds = %528
  br label %554

; <label>:554                                     ; preds = %553, %541
  %555 = phi i32 [ %552, %541 ], [ 65535, %553 ]
  %556 = icmp sgt i32 0, %555
  br i1 %556, label %557, label %558

; <label>:557                                     ; preds = %554
  br label %586

; <label>:558                                     ; preds = %554
  %559 = load i32* %c, align 4
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %560
  %562 = load i32* %561, align 4
  %563 = load i32* %c, align 4
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %564
  %566 = load i16* %565, align 2
  %567 = zext i16 %566 to i32
  %568 = mul nsw i32 %562, %567
  %569 = ashr i32 %568, 10
  %570 = icmp slt i32 %569, 65535
  br i1 %570, label %571, label %583

; <label>:571                                     ; preds = %558
  %572 = load i32* %c, align 4
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds [3 x i32]* %pix, i32 0, i64 %573
  %575 = load i32* %574, align 4
  %576 = load i32* %c, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %577
  %579 = load i16* %578, align 2
  %580 = zext i16 %579 to i32
  %581 = mul nsw i32 %575, %580
  %582 = ashr i32 %581, 10
  br label %584

; <label>:583                                     ; preds = %558
  br label %584

; <label>:584                                     ; preds = %583, %571
  %585 = phi i32 [ %582, %571 ], [ 65535, %583 ]
  br label %586

; <label>:586                                     ; preds = %584, %557
  %587 = phi i32 [ 0, %557 ], [ %585, %584 ]
  %588 = trunc i32 %587 to i16
  %589 = load i32* %c, align 4
  %590 = sext i32 %589 to i64
  %591 = load i16** %rp, align 8
  %592 = getelementptr inbounds i16* %591, i64 %590
  store i16 %588, i16* %592, align 2
  br label %593

; <label>:593                                     ; preds = %586
  %594 = load i32* %c, align 4
  %595 = add nsw i32 %594, 1
  store i32 %595, i32* %c, align 4
  br label %525

; <label>:596                                     ; preds = %525
  br label %597

; <label>:597                                     ; preds = %596
  %598 = load i16** %rp, align 8
  %599 = getelementptr inbounds i16* %598, i64 4
  store i16* %599, i16** %rp, align 8
  br label %398

; <label>:600                                     ; preds = %398
  %601 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %602 = load i16** %601, align 8
  %603 = bitcast i16* %602 to i8*
  call void @free(i8* %603) #4
  store i32 16383, i32* @maximum, align 4
  br label %604

; <label>:604                                     ; preds = %600, %4
  ret void
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #5

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define void @adobe_copy_pixel(i32 %row, i32 %col, i16** %rp) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i16**, align 8
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %row, i32* %1, align 4
  store i32 %col, i32* %2, align 4
  store i16** %rp, i16*** %3, align 8
  %4 = load i16* @top_margin, align 2
  %5 = zext i16 %4 to i32
  %6 = load i32* %1, align 4
  %7 = sub nsw i32 %6, %5
  store i32 %7, i32* %1, align 4
  store i32 %7, i32* %r, align 4
  %8 = load i16* @left_margin, align 2
  %9 = zext i16 %8 to i32
  %10 = load i32* %2, align 4
  %11 = sub nsw i32 %10, %9
  store i32 %11, i32* %2, align 4
  store i32 %11, i32* %c, align 4
  %12 = load i32* @is_raw, align 4
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %14, label %21

; <label>:14                                      ; preds = %0
  %15 = load i32* @shot_select, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %14
  %18 = load i16*** %3, align 8
  %19 = load i16** %18, align 8
  %20 = getelementptr inbounds i16* %19, i32 1
  store i16* %20, i16** %18, align 8
  br label %21

; <label>:21                                      ; preds = %17, %14, %0
  %22 = load i32* @filters, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %106

; <label>:24                                      ; preds = %21
  %25 = load i16* @fuji_width, align 2
  %26 = icmp ne i16 %25, 0
  br i1 %26, label %27, label %41

; <label>:27                                      ; preds = %24
  %28 = load i32* %1, align 4
  %29 = load i16* @fuji_width, align 2
  %30 = zext i16 %29 to i32
  %31 = add nsw i32 %28, %30
  %32 = sub nsw i32 %31, 1
  %33 = load i32* %2, align 4
  %34 = ashr i32 %33, 1
  %35 = sub nsw i32 %32, %34
  store i32 %35, i32* %r, align 4
  %36 = load i32* %1, align 4
  %37 = load i32* %2, align 4
  %38 = add nsw i32 %37, 1
  %39 = ashr i32 %38, 1
  %40 = add nsw i32 %36, %39
  store i32 %40, i32* %c, align 4
  br label %41

; <label>:41                                      ; preds = %27, %24
  %42 = load i32* %r, align 4
  %43 = load i16* @height, align 2
  %44 = zext i16 %43 to i32
  %45 = icmp ult i32 %42, %44
  br i1 %45, label %46, label %100

; <label>:46                                      ; preds = %41
  %47 = load i32* %c, align 4
  %48 = load i16* @width, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp ult i32 %47, %49
  br i1 %50, label %51, label %100

; <label>:51                                      ; preds = %46
  %52 = load i16*** %3, align 8
  %53 = load i16** %52, align 8
  %54 = load i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = icmp slt i32 %55, 4096
  br i1 %56, label %57, label %65

; <label>:57                                      ; preds = %51
  %58 = load i16*** %3, align 8
  %59 = load i16** %58, align 8
  %60 = load i16* %59, align 2
  %61 = zext i16 %60 to i64
  %62 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %61
  %63 = load i16* %62, align 2
  %64 = zext i16 %63 to i32
  br label %70

; <label>:65                                      ; preds = %51
  %66 = load i16*** %3, align 8
  %67 = load i16** %66, align 8
  %68 = load i16* %67, align 2
  %69 = zext i16 %68 to i32
  br label %70

; <label>:70                                      ; preds = %65, %57
  %71 = phi i32 [ %64, %57 ], [ %69, %65 ]
  %72 = trunc i32 %71 to i16
  %73 = load i32* @filters, align 4
  %74 = load i32* %r, align 4
  %75 = shl i32 %74, 1
  %76 = and i32 %75, 14
  %77 = load i32* %c, align 4
  %78 = and i32 %77, 1
  %79 = add i32 %76, %78
  %80 = shl i32 %79, 1
  %81 = lshr i32 %73, %80
  %82 = and i32 %81, 3
  %83 = zext i32 %82 to i64
  %84 = load i32* %r, align 4
  %85 = load i16* @shrink, align 2
  %86 = zext i16 %85 to i32
  %87 = lshr i32 %84, %86
  %88 = load i16* @iwidth, align 2
  %89 = zext i16 %88 to i32
  %90 = mul i32 %87, %89
  %91 = load i32* %c, align 4
  %92 = load i16* @shrink, align 2
  %93 = zext i16 %92 to i32
  %94 = lshr i32 %91, %93
  %95 = add i32 %90, %94
  %96 = zext i32 %95 to i64
  %97 = load [4 x i16]** @image, align 8
  %98 = getelementptr inbounds [4 x i16]* %97, i64 %96
  %99 = getelementptr inbounds [4 x i16]* %98, i32 0, i64 %83
  store i16 %72, i16* %99, align 2
  br label %100

; <label>:100                                     ; preds = %70, %46, %41
  %101 = load i32* @is_raw, align 4
  %102 = load i16*** %3, align 8
  %103 = load i16** %102, align 8
  %104 = zext i32 %101 to i64
  %105 = getelementptr inbounds i16* %103, i64 %104
  store i16* %105, i16** %102, align 8
  br label %174

; <label>:106                                     ; preds = %21
  %107 = load i32* %r, align 4
  %108 = load i16* @height, align 2
  %109 = zext i16 %108 to i32
  %110 = icmp ult i32 %107, %109
  br i1 %110, label %111, label %168

; <label>:111                                     ; preds = %106
  %112 = load i32* %c, align 4
  %113 = load i16* @width, align 2
  %114 = zext i16 %113 to i32
  %115 = icmp ult i32 %112, %114
  br i1 %115, label %116, label %168

; <label>:116                                     ; preds = %111
  store i32 0, i32* %c, align 4
  br label %117

; <label>:117                                     ; preds = %164, %116
  %118 = load i32* %c, align 4
  %119 = load i32* @tiff_samples, align 4
  %120 = icmp ult i32 %118, %119
  br i1 %120, label %121, label %167

; <label>:121                                     ; preds = %117
  %122 = load i32* %c, align 4
  %123 = zext i32 %122 to i64
  %124 = load i16*** %3, align 8
  %125 = load i16** %124, align 8
  %126 = getelementptr inbounds i16* %125, i64 %123
  %127 = load i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = icmp slt i32 %128, 4096
  br i1 %129, label %130, label %141

; <label>:130                                     ; preds = %121
  %131 = load i32* %c, align 4
  %132 = zext i32 %131 to i64
  %133 = load i16*** %3, align 8
  %134 = load i16** %133, align 8
  %135 = getelementptr inbounds i16* %134, i64 %132
  %136 = load i16* %135, align 2
  %137 = zext i16 %136 to i64
  %138 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %137
  %139 = load i16* %138, align 2
  %140 = zext i16 %139 to i32
  br label %149

; <label>:141                                     ; preds = %121
  %142 = load i32* %c, align 4
  %143 = zext i32 %142 to i64
  %144 = load i16*** %3, align 8
  %145 = load i16** %144, align 8
  %146 = getelementptr inbounds i16* %145, i64 %143
  %147 = load i16* %146, align 2
  %148 = zext i16 %147 to i32
  br label %149

; <label>:149                                     ; preds = %141, %130
  %150 = phi i32 [ %140, %130 ], [ %148, %141 ]
  %151 = trunc i32 %150 to i16
  %152 = load i32* %c, align 4
  %153 = zext i32 %152 to i64
  %154 = load i32* %1, align 4
  %155 = load i16* @width, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nsw i32 %154, %156
  %158 = load i32* %2, align 4
  %159 = add nsw i32 %157, %158
  %160 = sext i32 %159 to i64
  %161 = load [4 x i16]** @image, align 8
  %162 = getelementptr inbounds [4 x i16]* %161, i64 %160
  %163 = getelementptr inbounds [4 x i16]* %162, i32 0, i64 %153
  store i16 %151, i16* %163, align 2
  br label %164

; <label>:164                                     ; preds = %149
  %165 = load i32* %c, align 4
  %166 = add i32 %165, 1
  store i32 %166, i32* %c, align 4
  br label %117

; <label>:167                                     ; preds = %117
  br label %168

; <label>:168                                     ; preds = %167, %111, %106
  %169 = load i32* @tiff_samples, align 4
  %170 = load i16*** %3, align 8
  %171 = load i16** %170, align 8
  %172 = zext i32 %169 to i64
  %173 = getelementptr inbounds i16* %171, i64 %172
  store i16* %173, i16** %170, align 8
  br label %174

; <label>:174                                     ; preds = %168, %100
  %175 = load i32* @is_raw, align 4
  %176 = icmp eq i32 %175, 2
  br i1 %176, label %177, label %184

; <label>:177                                     ; preds = %174
  %178 = load i32* @shot_select, align 4
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %180, label %184

; <label>:180                                     ; preds = %177
  %181 = load i16*** %3, align 8
  %182 = load i16** %181, align 8
  %183 = getelementptr inbounds i16* %182, i32 -1
  store i16* %183, i16** %181, align 8
  br label %184

; <label>:184                                     ; preds = %180, %177, %174
  ret void
}

; Function Attrs: nounwind uwtable
define void @adobe_dng_load_raw_lj() #0 {
  %save = alloca i32, align 4
  %trow = alloca i32, align 4
  %tcol = alloca i32, align 4
  %jwide = alloca i32, align 4
  %jrow = alloca i32, align 4
  %jcol = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %jh = alloca %struct.jhead, align 8
  %rp = alloca i16*, align 8
  store i32 0, i32* %trow, align 4
  store i32 0, i32* %tcol, align 4
  br label %1

; <label>:1                                       ; preds = %91, %0
  %2 = load i32* %trow, align 4
  %3 = load i16* @raw_height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp ult i32 %2, %4
  br i1 %5, label %6, label %95

; <label>:6                                       ; preds = %1
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i64 @ftell(%struct._IO_FILE* %7)
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %save, align 4
  %10 = load i32* @tile_length, align 4
  %11 = icmp ult i32 %10, 2147483647
  br i1 %11, label %12, label %17

; <label>:12                                      ; preds = %6
  %13 = load %struct._IO_FILE** @ifp, align 8
  %14 = call i32 @get4()
  %15 = zext i32 %14 to i64
  %16 = call i32 @fseek(%struct._IO_FILE* %13, i64 %15, i32 0)
  br label %17

; <label>:17                                      ; preds = %12, %6
  %18 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %21, label %20

; <label>:20                                      ; preds = %17
  br label %95

; <label>:21                                      ; preds = %17
  %22 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %23 = load i32* %22, align 4
  store i32 %23, i32* %jwide, align 4
  %24 = load i32* @filters, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %31

; <label>:26                                      ; preds = %21
  %27 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %28 = load i32* %27, align 4
  %29 = load i32* %jwide, align 4
  %30 = mul i32 %29, %28
  store i32 %30, i32* %jwide, align 4
  br label %31

; <label>:31                                      ; preds = %26, %21
  %32 = load i32* @is_raw, align 4
  %33 = load i32* %jwide, align 4
  %34 = udiv i32 %33, %32
  store i32 %34, i32* %jwide, align 4
  store i32 0, i32* %jrow, align 4
  store i32 0, i32* %col, align 4
  store i32 0, i32* %row, align 4
  br label %35

; <label>:35                                      ; preds = %71, %31
  %36 = load i32* %jrow, align 4
  %37 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %38 = load i32* %37, align 4
  %39 = icmp ult i32 %36, %38
  br i1 %39, label %40, label %74

; <label>:40                                      ; preds = %35
  %41 = load i32* %jrow, align 4
  %42 = call i16* @ljpeg_row(i32 %41, %struct.jhead* %jh)
  store i16* %42, i16** %rp, align 8
  store i32 0, i32* %jcol, align 4
  br label %43

; <label>:43                                      ; preds = %67, %40
  %44 = load i32* %jcol, align 4
  %45 = load i32* %jwide, align 4
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %47, label %70

; <label>:47                                      ; preds = %43
  %48 = load i32* %trow, align 4
  %49 = load i32* %row, align 4
  %50 = add i32 %48, %49
  %51 = load i32* %tcol, align 4
  %52 = load i32* %col, align 4
  %53 = add i32 %51, %52
  call void @adobe_copy_pixel(i32 %50, i32 %53, i16** %rp)
  %54 = load i32* %col, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %col, align 4
  %56 = load i32* @tile_width, align 4
  %57 = icmp uge i32 %55, %56
  br i1 %57, label %63, label %58

; <label>:58                                      ; preds = %47
  %59 = load i32* %col, align 4
  %60 = load i16* @raw_width, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp uge i32 %59, %61
  br i1 %62, label %63, label %66

; <label>:63                                      ; preds = %58, %47
  store i32 0, i32* %col, align 4
  %64 = load i32* %row, align 4
  %65 = add i32 %64, 1
  store i32 %65, i32* %row, align 4
  br label %66

; <label>:66                                      ; preds = %63, %58
  br label %67

; <label>:67                                      ; preds = %66
  %68 = load i32* %jcol, align 4
  %69 = add i32 %68, 1
  store i32 %69, i32* %jcol, align 4
  br label %43

; <label>:70                                      ; preds = %43
  br label %71

; <label>:71                                      ; preds = %70
  %72 = load i32* %jrow, align 4
  %73 = add i32 %72, 1
  store i32 %73, i32* %jrow, align 4
  br label %35

; <label>:74                                      ; preds = %35
  %75 = load %struct._IO_FILE** @ifp, align 8
  %76 = load i32* %save, align 4
  %77 = add i32 %76, 4
  %78 = zext i32 %77 to i64
  %79 = call i32 @fseek(%struct._IO_FILE* %75, i64 %78, i32 0)
  %80 = load i32* @tile_width, align 4
  %81 = load i32* %tcol, align 4
  %82 = add i32 %81, %80
  store i32 %82, i32* %tcol, align 4
  %83 = load i16* @raw_width, align 2
  %84 = zext i16 %83 to i32
  %85 = icmp uge i32 %82, %84
  br i1 %85, label %86, label %91

; <label>:86                                      ; preds = %74
  %87 = load i32* @tile_length, align 4
  store i32 0, i32* %tcol, align 4
  %88 = add i32 %87, 0
  %89 = load i32* %trow, align 4
  %90 = add i32 %89, %88
  store i32 %90, i32* %trow, align 4
  br label %91

; <label>:91                                      ; preds = %86, %74
  %92 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %93 = load i16** %92, align 8
  %94 = bitcast i16* %93 to i8*
  call void @free(i8* %94) #4
  br label %1

; <label>:95                                      ; preds = %20, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @adobe_dng_load_raw_nc() #0 {
  %pixel = alloca i16*, align 8
  %rp = alloca i16*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i32* @tiff_samples, align 4
  %4 = mul i32 %2, %3
  %5 = zext i32 %4 to i64
  %6 = call noalias i8* @calloc(i64 %5, i64 2) #4
  %7 = bitcast i8* %6 to i16*
  store i16* %7, i16** %pixel, align 8
  %8 = load i16** %pixel, align 8
  %9 = bitcast i16* %8 to i8*
  call void @merror(i8* %9, i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %10

; <label>:10                                      ; preds = %59, %0
  %11 = load i32* %row, align 4
  %12 = load i16* @raw_height, align 2
  %13 = zext i16 %12 to i32
  %14 = icmp slt i32 %11, %13
  br i1 %14, label %15, label %62

; <label>:15                                      ; preds = %10
  %16 = load i32* @tiff_bps, align 4
  %17 = icmp eq i32 %16, 16
  br i1 %17, label %18, label %24

; <label>:18                                      ; preds = %15
  %19 = load i16** %pixel, align 8
  %20 = load i16* @raw_width, align 2
  %21 = zext i16 %20 to i32
  %22 = load i32* @tiff_samples, align 4
  %23 = mul i32 %21, %22
  call void @read_shorts(i16* %19, i32 %23)
  br label %45

; <label>:24                                      ; preds = %15
  %25 = call i32 @getbits(i32 -1)
  store i32 0, i32* %col, align 4
  br label %26

; <label>:26                                      ; preds = %41, %24
  %27 = load i32* %col, align 4
  %28 = load i16* @raw_width, align 2
  %29 = zext i16 %28 to i32
  %30 = load i32* @tiff_samples, align 4
  %31 = mul i32 %29, %30
  %32 = icmp ult i32 %27, %31
  br i1 %32, label %33, label %44

; <label>:33                                      ; preds = %26
  %34 = load i32* @tiff_bps, align 4
  %35 = call i32 @getbits(i32 %34)
  %36 = trunc i32 %35 to i16
  %37 = load i32* %col, align 4
  %38 = sext i32 %37 to i64
  %39 = load i16** %pixel, align 8
  %40 = getelementptr inbounds i16* %39, i64 %38
  store i16 %36, i16* %40, align 2
  br label %41

; <label>:41                                      ; preds = %33
  %42 = load i32* %col, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %col, align 4
  br label %26

; <label>:44                                      ; preds = %26
  br label %45

; <label>:45                                      ; preds = %44, %18
  %46 = load i16** %pixel, align 8
  store i16* %46, i16** %rp, align 8
  store i32 0, i32* %col, align 4
  br label %47

; <label>:47                                      ; preds = %55, %45
  %48 = load i32* %col, align 4
  %49 = load i16* @raw_width, align 2
  %50 = zext i16 %49 to i32
  %51 = icmp slt i32 %48, %50
  br i1 %51, label %52, label %58

; <label>:52                                      ; preds = %47
  %53 = load i32* %row, align 4
  %54 = load i32* %col, align 4
  call void @adobe_copy_pixel(i32 %53, i32 %54, i16** %rp)
  br label %55

; <label>:55                                      ; preds = %52
  %56 = load i32* %col, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %col, align 4
  br label %47

; <label>:58                                      ; preds = %47
  br label %59

; <label>:59                                      ; preds = %58
  %60 = load i32* %row, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %row, align 4
  br label %10

; <label>:62                                      ; preds = %10
  %63 = load i16** %pixel, align 8
  %64 = bitcast i16* %63 to i8*
  call void @free(i8* %64) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @pentax_tree() #0 {
  %bit = alloca [2 x [13 x i16]], align 16
  %cur = alloca %struct.decode*, align 8
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @init_decoder()
  store i32 0, i32* %c, align 4
  br label %1

; <label>:1                                       ; preds = %10, %0
  %2 = load i32* %c, align 4
  %3 = icmp slt i32 %2, 13
  br i1 %3, label %4, label %13

; <label>:4                                       ; preds = %1
  %5 = call zeroext i16 @get2()
  %6 = load i32* %c, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 0
  %9 = getelementptr inbounds [13 x i16]* %8, i32 0, i64 %7
  store i16 %5, i16* %9, align 2
  br label %10

; <label>:10                                      ; preds = %4
  %11 = load i32* %c, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %c, align 4
  br label %1

; <label>:13                                      ; preds = %1
  store i32 0, i32* %c, align 4
  br label %14

; <label>:14                                      ; preds = %26, %13
  %15 = load i32* %c, align 4
  %16 = icmp slt i32 %15, 13
  br i1 %16, label %17, label %29

; <label>:17                                      ; preds = %14
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = call i32 @getc_unlocked(%struct._IO_FILE* %18)
  %20 = and i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = load i32* %c, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 1
  %25 = getelementptr inbounds [13 x i16]* %24, i32 0, i64 %23
  store i16 %21, i16* %25, align 2
  br label %26

; <label>:26                                      ; preds = %17
  %27 = load i32* %c, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %c, align 4
  br label %14

; <label>:29                                      ; preds = %14
  store i32 0, i32* %c, align 4
  br label %30

; <label>:30                                      ; preds = %83, %29
  %31 = load i32* %c, align 4
  %32 = icmp slt i32 %31, 13
  br i1 %32, label %33, label %86

; <label>:33                                      ; preds = %30
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** %cur, align 8
  store i32 0, i32* %i, align 4
  br label %34

; <label>:34                                      ; preds = %76, %33
  %35 = load i32* %i, align 4
  %36 = load i32* %c, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 1
  %39 = getelementptr inbounds [13 x i16]* %38, i32 0, i64 %37
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp slt i32 %35, %41
  br i1 %42, label %43, label %79

; <label>:43                                      ; preds = %34
  %44 = load i32* %c, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [2 x [13 x i16]]* %bit, i32 0, i64 0
  %47 = getelementptr inbounds [13 x i16]* %46, i32 0, i64 %45
  %48 = load i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = load i32* %i, align 4
  %51 = sub nsw i32 11, %50
  %52 = ashr i32 %49, %51
  %53 = and i32 %52, 1
  store i32 %53, i32* %j, align 4
  %54 = load i32* %j, align 4
  %55 = sext i32 %54 to i64
  %56 = load %struct.decode** %cur, align 8
  %57 = getelementptr inbounds %struct.decode* %56, i32 0, i32 0
  %58 = getelementptr inbounds [2 x %struct.decode*]* %57, i32 0, i64 %55
  %59 = load %struct.decode** %58, align 8
  %60 = icmp ne %struct.decode* %59, null
  br i1 %60, label %69, label %61

; <label>:61                                      ; preds = %43
  %62 = load %struct.decode** @free_decode, align 8
  %63 = getelementptr inbounds %struct.decode* %62, i32 1
  store %struct.decode* %63, %struct.decode** @free_decode, align 8
  %64 = load i32* %j, align 4
  %65 = sext i32 %64 to i64
  %66 = load %struct.decode** %cur, align 8
  %67 = getelementptr inbounds %struct.decode* %66, i32 0, i32 0
  %68 = getelementptr inbounds [2 x %struct.decode*]* %67, i32 0, i64 %65
  store %struct.decode* %63, %struct.decode** %68, align 8
  br label %69

; <label>:69                                      ; preds = %61, %43
  %70 = load i32* %j, align 4
  %71 = sext i32 %70 to i64
  %72 = load %struct.decode** %cur, align 8
  %73 = getelementptr inbounds %struct.decode* %72, i32 0, i32 0
  %74 = getelementptr inbounds [2 x %struct.decode*]* %73, i32 0, i64 %71
  %75 = load %struct.decode** %74, align 8
  store %struct.decode* %75, %struct.decode** %cur, align 8
  br label %76

; <label>:76                                      ; preds = %69
  %77 = load i32* %i, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %i, align 4
  br label %34

; <label>:79                                      ; preds = %34
  %80 = load i32* %c, align 4
  %81 = load %struct.decode** %cur, align 8
  %82 = getelementptr inbounds %struct.decode* %81, i32 0, i32 1
  store i32 %80, i32* %82, align 4
  br label %83

; <label>:83                                      ; preds = %79
  %84 = load i32* %c, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %c, align 4
  br label %30

; <label>:86                                      ; preds = %30
  ret void
}

; Function Attrs: nounwind uwtable
define void @pentax_k10_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %diff = alloca i32, align 4
  %vpred = alloca [2 x [2 x i16]], align 2
  %hpred = alloca [2 x i16], align 2
  %1 = bitcast [2 x [2 x i16]]* %vpred to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 8, i32 2, i1 false)
  %2 = call i32 @getbits(i32 -1)
  store i32 0, i32* %row, align 4
  br label %3

; <label>:3                                       ; preds = %97, %0
  %4 = load i32* %row, align 4
  %5 = load i16* @height, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %8, label %100

; <label>:8                                       ; preds = %3
  store i32 0, i32* %col, align 4
  br label %9

; <label>:9                                       ; preds = %93, %8
  %10 = load i32* %col, align 4
  %11 = load i16* @raw_width, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %10, %12
  br i1 %13, label %14, label %96

; <label>:14                                      ; preds = %9
  %15 = call i32 @ljpeg_diff(%struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0))
  store i32 %15, i32* %diff, align 4
  %16 = load i32* %col, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %34

; <label>:18                                      ; preds = %14
  %19 = load i32* %diff, align 4
  %20 = load i32* %col, align 4
  %21 = sext i32 %20 to i64
  %22 = load i32* %row, align 4
  %23 = and i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [2 x [2 x i16]]* %vpred, i32 0, i64 %24
  %26 = getelementptr inbounds [2 x i16]* %25, i32 0, i64 %21
  %27 = load i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %28, %19
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %26, align 2
  %31 = load i32* %col, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %32
  store i16 %30, i16* %33, align 2
  br label %44

; <label>:34                                      ; preds = %14
  %35 = load i32* %diff, align 4
  %36 = load i32* %col, align 4
  %37 = and i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %38
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = add nsw i32 %41, %35
  %43 = trunc i32 %42 to i16
  store i16 %43, i16* %39, align 2
  br label %44

; <label>:44                                      ; preds = %34, %18
  %45 = load i32* %col, align 4
  %46 = load i16* @width, align 2
  %47 = zext i16 %46 to i32
  %48 = icmp slt i32 %45, %47
  br i1 %48, label %49, label %82

; <label>:49                                      ; preds = %44
  %50 = load i32* %col, align 4
  %51 = and i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %52
  %54 = load i16* %53, align 2
  %55 = load i32* @filters, align 4
  %56 = load i32* %row, align 4
  %57 = shl i32 %56, 1
  %58 = and i32 %57, 14
  %59 = load i32* %col, align 4
  %60 = and i32 %59, 1
  %61 = add nsw i32 %58, %60
  %62 = shl i32 %61, 1
  %63 = lshr i32 %55, %62
  %64 = and i32 %63, 3
  %65 = zext i32 %64 to i64
  %66 = load i32* %row, align 4
  %67 = load i16* @shrink, align 2
  %68 = zext i16 %67 to i32
  %69 = ashr i32 %66, %68
  %70 = load i16* @iwidth, align 2
  %71 = zext i16 %70 to i32
  %72 = mul nsw i32 %69, %71
  %73 = load i32* %col, align 4
  %74 = load i16* @shrink, align 2
  %75 = zext i16 %74 to i32
  %76 = ashr i32 %73, %75
  %77 = add nsw i32 %72, %76
  %78 = sext i32 %77 to i64
  %79 = load [4 x i16]** @image, align 8
  %80 = getelementptr inbounds [4 x i16]* %79, i64 %78
  %81 = getelementptr inbounds [4 x i16]* %80, i32 0, i64 %65
  store i16 %54, i16* %81, align 2
  br label %82

; <label>:82                                      ; preds = %49, %44
  %83 = load i32* %col, align 4
  %84 = and i32 %83, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %85
  %87 = load i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = ashr i32 %88, 12
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %92

; <label>:91                                      ; preds = %82
  call void @derror()
  br label %92

; <label>:92                                      ; preds = %91, %82
  br label %93

; <label>:93                                      ; preds = %92
  %94 = load i32* %col, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %col, align 4
  br label %9

; <label>:96                                      ; preds = %9
  br label %97

; <label>:97                                      ; preds = %96
  %98 = load i32* %row, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %row, align 4
  br label %3

; <label>:100                                     ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @nikon_compressed_load_raw() #0 {
  %dindex = alloca %struct.decode*, align 8
  %ver0 = alloca i16, align 2
  %ver1 = alloca i16, align 2
  %vpred = alloca [2 x [2 x i16]], align 2
  %hpred = alloca [2 x i16], align 2
  %csize = alloca i16, align 2
  %i = alloca i32, align 4
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %step = alloca i32, align 4
  %huff = alloca i32, align 4
  %split = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %len = alloca i32, align 4
  %shl = alloca i32, align 4
  %diff = alloca i32, align 4
  store i32 0, i32* %step, align 4
  store i32 0, i32* %huff, align 4
  store i32 0, i32* %split, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i64* @meta_offset, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  %6 = trunc i32 %5 to i16
  store i16 %6, i16* %ver0, align 2
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @getc_unlocked(%struct._IO_FILE* %7)
  %9 = trunc i32 %8 to i16
  store i16 %9, i16* %ver1, align 2
  %10 = load i16* %ver0, align 2
  %11 = zext i16 %10 to i32
  %12 = icmp eq i32 %11, 73
  br i1 %12, label %17, label %13

; <label>:13                                      ; preds = %0
  %14 = load i16* %ver1, align 2
  %15 = zext i16 %14 to i32
  %16 = icmp eq i32 %15, 88
  br i1 %16, label %17, label %20

; <label>:17                                      ; preds = %13, %0
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = call i32 @fseek(%struct._IO_FILE* %18, i64 2110, i32 1)
  br label %20

; <label>:20                                      ; preds = %17, %13
  %21 = load i16* %ver0, align 2
  %22 = zext i16 %21 to i32
  %23 = icmp eq i32 %22, 70
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %20
  store i32 2, i32* %huff, align 4
  br label %25

; <label>:25                                      ; preds = %24, %20
  %26 = load i32* @tiff_bps, align 4
  %27 = icmp eq i32 %26, 14
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %25
  %29 = load i32* %huff, align 4
  %30 = add nsw i32 %29, 3
  store i32 %30, i32* %huff, align 4
  br label %31

; <label>:31                                      ; preds = %28, %25
  %32 = getelementptr inbounds [2 x [2 x i16]]* %vpred, i32 0, i64 0
  %33 = getelementptr inbounds [2 x i16]* %32, i32 0, i32 0
  call void @read_shorts(i16* %33, i32 4)
  %34 = load i32* @tiff_bps, align 4
  %35 = shl i32 1, %34
  %36 = and i32 %35, 32767
  store i32 %36, i32* %max, align 4
  %37 = call zeroext i16 @get2()
  store i16 %37, i16* %csize, align 2
  %38 = zext i16 %37 to i32
  %39 = icmp sgt i32 %38, 1
  br i1 %39, label %40, label %46

; <label>:40                                      ; preds = %31
  %41 = load i32* %max, align 4
  %42 = load i16* %csize, align 2
  %43 = zext i16 %42 to i32
  %44 = sub nsw i32 %43, 1
  %45 = sdiv i32 %41, %44
  store i32 %45, i32* %step, align 4
  br label %46

; <label>:46                                      ; preds = %40, %31
  %47 = load i16* %ver0, align 2
  %48 = zext i16 %47 to i32
  %49 = icmp eq i32 %48, 68
  br i1 %49, label %50, label %126

; <label>:50                                      ; preds = %46
  %51 = load i16* %ver1, align 2
  %52 = zext i16 %51 to i32
  %53 = icmp eq i32 %52, 32
  br i1 %53, label %54, label %126

; <label>:54                                      ; preds = %50
  %55 = load i32* %step, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %126

; <label>:57                                      ; preds = %54
  store i32 0, i32* %i, align 4
  br label %58

; <label>:58                                      ; preds = %70, %57
  %59 = load i32* %i, align 4
  %60 = load i16* %csize, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp slt i32 %59, %61
  br i1 %62, label %63, label %73

; <label>:63                                      ; preds = %58
  %64 = call zeroext i16 @get2()
  %65 = load i32* %i, align 4
  %66 = load i32* %step, align 4
  %67 = mul nsw i32 %65, %66
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %68
  store i16 %64, i16* %69, align 2
  br label %70

; <label>:70                                      ; preds = %63
  %71 = load i32* %i, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %i, align 4
  br label %58

; <label>:73                                      ; preds = %58
  store i32 0, i32* %i, align 4
  br label %74

; <label>:74                                      ; preds = %116, %73
  %75 = load i32* %i, align 4
  %76 = load i32* %max, align 4
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %78, label %119

; <label>:78                                      ; preds = %74
  %79 = load i32* %i, align 4
  %80 = load i32* %i, align 4
  %81 = load i32* %step, align 4
  %82 = srem i32 %80, %81
  %83 = sub nsw i32 %79, %82
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %84
  %86 = load i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = load i32* %step, align 4
  %89 = load i32* %i, align 4
  %90 = load i32* %step, align 4
  %91 = srem i32 %89, %90
  %92 = sub nsw i32 %88, %91
  %93 = mul nsw i32 %87, %92
  %94 = load i32* %i, align 4
  %95 = load i32* %i, align 4
  %96 = load i32* %step, align 4
  %97 = srem i32 %95, %96
  %98 = sub nsw i32 %94, %97
  %99 = load i32* %step, align 4
  %100 = add nsw i32 %98, %99
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %101
  %103 = load i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = load i32* %i, align 4
  %106 = load i32* %step, align 4
  %107 = srem i32 %105, %106
  %108 = mul nsw i32 %104, %107
  %109 = add nsw i32 %93, %108
  %110 = load i32* %step, align 4
  %111 = sdiv i32 %109, %110
  %112 = trunc i32 %111 to i16
  %113 = load i32* %i, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %114
  store i16 %112, i16* %115, align 2
  br label %116

; <label>:116                                     ; preds = %78
  %117 = load i32* %i, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %i, align 4
  br label %74

; <label>:119                                     ; preds = %74
  %120 = load %struct._IO_FILE** @ifp, align 8
  %121 = load i64* @meta_offset, align 8
  %122 = add nsw i64 %121, 562
  %123 = call i32 @fseek(%struct._IO_FILE* %120, i64 %122, i32 0)
  %124 = call zeroext i16 @get2()
  %125 = zext i16 %124 to i32
  store i32 %125, i32* %split, align 4
  br label %138

; <label>:126                                     ; preds = %54, %50, %46
  %127 = load i16* %ver0, align 2
  %128 = zext i16 %127 to i32
  %129 = icmp ne i32 %128, 70
  br i1 %129, label %130, label %137

; <label>:130                                     ; preds = %126
  %131 = load i16* %csize, align 2
  %132 = zext i16 %131 to i32
  %133 = icmp sle i32 %132, 16385
  br i1 %133, label %134, label %137

; <label>:134                                     ; preds = %130
  %135 = load i16* %csize, align 2
  %136 = zext i16 %135 to i32
  store i32 %136, i32* %max, align 4
  call void @read_shorts(i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i32 0), i32 %136)
  br label %137

; <label>:137                                     ; preds = %134, %130, %126
  br label %138

; <label>:138                                     ; preds = %137, %119
  br label %139

; <label>:139                                     ; preds = %153, %138
  %140 = load i32* %max, align 4
  %141 = sub nsw i32 %140, 2
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %142
  %144 = load i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = load i32* %max, align 4
  %147 = sub nsw i32 %146, 1
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %148
  %150 = load i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = icmp eq i32 %145, %151
  br i1 %152, label %153, label %156

; <label>:153                                     ; preds = %139
  %154 = load i32* %max, align 4
  %155 = add nsw i32 %154, -1
  store i32 %155, i32* %max, align 4
  br label %139

; <label>:156                                     ; preds = %139
  call void @init_decoder()
  %157 = load i32* %huff, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [6 x [32 x i8]]* @nikon_compressed_load_raw.nikon_tree, i32 0, i64 %158
  %160 = getelementptr inbounds [32 x i8]* %159, i32 0, i32 0
  %161 = call i8* @make_decoder(i8* %160, i32 0)
  %162 = load %struct._IO_FILE** @ifp, align 8
  %163 = load i64* @data_offset, align 8
  %164 = call i32 @fseek(%struct._IO_FILE* %162, i64 %163, i32 0)
  %165 = call i32 @getbits(i32 -1)
  store i32 0, i32* %row, align 4
  store i32 0, i32* %min, align 4
  br label %166

; <label>:166                                     ; preds = %373, %156
  %167 = load i32* %row, align 4
  %168 = load i16* @height, align 2
  %169 = zext i16 %168 to i32
  %170 = icmp slt i32 %167, %169
  br i1 %170, label %171, label %376

; <label>:171                                     ; preds = %166
  %172 = load i32* %split, align 4
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %187

; <label>:174                                     ; preds = %171
  %175 = load i32* %row, align 4
  %176 = load i32* %split, align 4
  %177 = icmp eq i32 %175, %176
  br i1 %177, label %178, label %187

; <label>:178                                     ; preds = %174
  call void @init_decoder()
  %179 = load i32* %huff, align 4
  %180 = add nsw i32 %179, 1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [6 x [32 x i8]]* @nikon_compressed_load_raw.nikon_tree, i32 0, i64 %181
  %183 = getelementptr inbounds [32 x i8]* %182, i32 0, i32 0
  %184 = call i8* @make_decoder(i8* %183, i32 0)
  store i32 16, i32* %min, align 4
  %185 = load i32* %max, align 4
  %186 = add nsw i32 %185, 32
  store i32 %186, i32* %max, align 4
  br label %187

; <label>:187                                     ; preds = %178, %174, %171
  store i32 0, i32* %col, align 4
  br label %188

; <label>:188                                     ; preds = %369, %187
  %189 = load i32* %col, align 4
  %190 = load i16* @raw_width, align 2
  %191 = zext i16 %190 to i32
  %192 = icmp slt i32 %189, %191
  br i1 %192, label %193, label %372

; <label>:193                                     ; preds = %188
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** %dindex, align 8
  br label %194

; <label>:194                                     ; preds = %200, %193
  %195 = load %struct.decode** %dindex, align 8
  %196 = getelementptr inbounds %struct.decode* %195, i32 0, i32 0
  %197 = getelementptr inbounds [2 x %struct.decode*]* %196, i32 0, i64 0
  %198 = load %struct.decode** %197, align 8
  %199 = icmp ne %struct.decode* %198, null
  br i1 %199, label %200, label %207

; <label>:200                                     ; preds = %194
  %201 = call i32 @getbits(i32 1)
  %202 = zext i32 %201 to i64
  %203 = load %struct.decode** %dindex, align 8
  %204 = getelementptr inbounds %struct.decode* %203, i32 0, i32 0
  %205 = getelementptr inbounds [2 x %struct.decode*]* %204, i32 0, i64 %202
  %206 = load %struct.decode** %205, align 8
  store %struct.decode* %206, %struct.decode** %dindex, align 8
  br label %194

; <label>:207                                     ; preds = %194
  %208 = load %struct.decode** %dindex, align 8
  %209 = getelementptr inbounds %struct.decode* %208, i32 0, i32 1
  %210 = load i32* %209, align 4
  %211 = and i32 %210, 15
  store i32 %211, i32* %len, align 4
  %212 = load %struct.decode** %dindex, align 8
  %213 = getelementptr inbounds %struct.decode* %212, i32 0, i32 1
  %214 = load i32* %213, align 4
  %215 = ashr i32 %214, 4
  store i32 %215, i32* %shl, align 4
  %216 = load i32* %len, align 4
  %217 = load i32* %shl, align 4
  %218 = sub nsw i32 %216, %217
  %219 = call i32 @getbits(i32 %218)
  %220 = shl i32 %219, 1
  %221 = add i32 %220, 1
  %222 = load i32* %shl, align 4
  %223 = shl i32 %221, %222
  %224 = lshr i32 %223, 1
  store i32 %224, i32* %diff, align 4
  %225 = load i32* %diff, align 4
  %226 = load i32* %len, align 4
  %227 = sub nsw i32 %226, 1
  %228 = shl i32 1, %227
  %229 = and i32 %225, %228
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %241

; <label>:231                                     ; preds = %207
  %232 = load i32* %len, align 4
  %233 = shl i32 1, %232
  %234 = load i32* %shl, align 4
  %235 = icmp ne i32 %234, 0
  %236 = xor i1 %235, true
  %237 = zext i1 %236 to i32
  %238 = sub nsw i32 %233, %237
  %239 = load i32* %diff, align 4
  %240 = sub nsw i32 %239, %238
  store i32 %240, i32* %diff, align 4
  br label %241

; <label>:241                                     ; preds = %231, %207
  %242 = load i32* %col, align 4
  %243 = icmp slt i32 %242, 2
  br i1 %243, label %244, label %260

; <label>:244                                     ; preds = %241
  %245 = load i32* %diff, align 4
  %246 = load i32* %col, align 4
  %247 = sext i32 %246 to i64
  %248 = load i32* %row, align 4
  %249 = and i32 %248, 1
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [2 x [2 x i16]]* %vpred, i32 0, i64 %250
  %252 = getelementptr inbounds [2 x i16]* %251, i32 0, i64 %247
  %253 = load i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = add nsw i32 %254, %245
  %256 = trunc i32 %255 to i16
  store i16 %256, i16* %252, align 2
  %257 = load i32* %col, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %258
  store i16 %256, i16* %259, align 2
  br label %270

; <label>:260                                     ; preds = %241
  %261 = load i32* %diff, align 4
  %262 = load i32* %col, align 4
  %263 = and i32 %262, 1
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %264
  %266 = load i16* %265, align 2
  %267 = zext i16 %266 to i32
  %268 = add nsw i32 %267, %261
  %269 = trunc i32 %268 to i16
  store i16 %269, i16* %265, align 2
  br label %270

; <label>:270                                     ; preds = %260, %244
  %271 = load i32* %col, align 4
  %272 = and i32 %271, 1
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %273
  %275 = load i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = load i32* %min, align 4
  %278 = add nsw i32 %276, %277
  %279 = trunc i32 %278 to i16
  %280 = zext i16 %279 to i32
  %281 = load i32* %max, align 4
  %282 = icmp sge i32 %280, %281
  br i1 %282, label %283, label %284

; <label>:283                                     ; preds = %270
  call void @derror()
  br label %284

; <label>:284                                     ; preds = %283, %270
  %285 = load i32* %col, align 4
  %286 = load i16* @left_margin, align 2
  %287 = zext i16 %286 to i32
  %288 = sub nsw i32 %285, %287
  %289 = load i16* @width, align 2
  %290 = zext i16 %289 to i32
  %291 = icmp ult i32 %288, %290
  br i1 %291, label %292, label %368

; <label>:292                                     ; preds = %284
  %293 = load i32* %col, align 4
  %294 = and i32 %293, 1
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %295
  %297 = load i16* %296, align 2
  %298 = sext i16 %297 to i32
  %299 = icmp slt i32 %298, 16383
  br i1 %299, label %300, label %307

; <label>:300                                     ; preds = %292
  %301 = load i32* %col, align 4
  %302 = and i32 %301, 1
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %303
  %305 = load i16* %304, align 2
  %306 = sext i16 %305 to i32
  br label %308

; <label>:307                                     ; preds = %292
  br label %308

; <label>:308                                     ; preds = %307, %300
  %309 = phi i32 [ %306, %300 ], [ 16383, %307 ]
  %310 = icmp sgt i32 0, %309
  br i1 %310, label %311, label %312

; <label>:311                                     ; preds = %308
  br label %330

; <label>:312                                     ; preds = %308
  %313 = load i32* %col, align 4
  %314 = and i32 %313, 1
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %315
  %317 = load i16* %316, align 2
  %318 = sext i16 %317 to i32
  %319 = icmp slt i32 %318, 16383
  br i1 %319, label %320, label %327

; <label>:320                                     ; preds = %312
  %321 = load i32* %col, align 4
  %322 = and i32 %321, 1
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [2 x i16]* %hpred, i32 0, i64 %323
  %325 = load i16* %324, align 2
  %326 = sext i16 %325 to i32
  br label %328

; <label>:327                                     ; preds = %312
  br label %328

; <label>:328                                     ; preds = %327, %320
  %329 = phi i32 [ %326, %320 ], [ 16383, %327 ]
  br label %330

; <label>:330                                     ; preds = %328, %311
  %331 = phi i32 [ 0, %311 ], [ %329, %328 ]
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %332
  %334 = load i16* %333, align 2
  %335 = load i32* @filters, align 4
  %336 = load i32* %row, align 4
  %337 = shl i32 %336, 1
  %338 = and i32 %337, 14
  %339 = load i32* %col, align 4
  %340 = load i16* @left_margin, align 2
  %341 = zext i16 %340 to i32
  %342 = sub nsw i32 %339, %341
  %343 = and i32 %342, 1
  %344 = add nsw i32 %338, %343
  %345 = shl i32 %344, 1
  %346 = lshr i32 %335, %345
  %347 = and i32 %346, 3
  %348 = zext i32 %347 to i64
  %349 = load i32* %row, align 4
  %350 = load i16* @shrink, align 2
  %351 = zext i16 %350 to i32
  %352 = ashr i32 %349, %351
  %353 = load i16* @iwidth, align 2
  %354 = zext i16 %353 to i32
  %355 = mul nsw i32 %352, %354
  %356 = load i32* %col, align 4
  %357 = load i16* @left_margin, align 2
  %358 = zext i16 %357 to i32
  %359 = sub nsw i32 %356, %358
  %360 = load i16* @shrink, align 2
  %361 = zext i16 %360 to i32
  %362 = ashr i32 %359, %361
  %363 = add nsw i32 %355, %362
  %364 = sext i32 %363 to i64
  %365 = load [4 x i16]** @image, align 8
  %366 = getelementptr inbounds [4 x i16]* %365, i64 %364
  %367 = getelementptr inbounds [4 x i16]* %366, i32 0, i64 %348
  store i16 %334, i16* %367, align 2
  br label %368

; <label>:368                                     ; preds = %330, %284
  br label %369

; <label>:369                                     ; preds = %368
  %370 = load i32* %col, align 4
  %371 = add nsw i32 %370, 1
  store i32 %371, i32* %col, align 4
  br label %188

; <label>:372                                     ; preds = %188
  br label %373

; <label>:373                                     ; preds = %372
  %374 = load i32* %row, align 4
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* %row, align 4
  br label %166

; <label>:376                                     ; preds = %166
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @nikon_is_compressed() #0 {
  %1 = alloca i32, align 4
  %test = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = load i64* @data_offset, align 8
  %4 = call i32 @fseek(%struct._IO_FILE* %2, i64 %3, i32 0)
  %5 = getelementptr inbounds [256 x i8]* %test, i32 0, i32 0
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i64 @fread(i8* %5, i64 1, i64 256, %struct._IO_FILE* %6)
  store i32 15, i32* %i, align 4
  br label %8

; <label>:8                                       ; preds = %19, %0
  %9 = load i32* %i, align 4
  %10 = icmp slt i32 %9, 256
  br i1 %10, label %11, label %22

; <label>:11                                      ; preds = %8
  %12 = load i32* %i, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [256 x i8]* %test, i32 0, i64 %13
  %15 = load i8* %14, align 1
  %16 = icmp ne i8 %15, 0
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %11
  store i32 1, i32* %1
  br label %23

; <label>:18                                      ; preds = %11
  br label %19

; <label>:19                                      ; preds = %18
  %20 = load i32* %i, align 4
  %21 = add nsw i32 %20, 16
  store i32 %21, i32* %i, align 4
  br label %8

; <label>:22                                      ; preds = %8
  store i32 0, i32* %1
  br label %23

; <label>:23                                      ; preds = %22, %17
  %24 = load i32* %1
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define i32 @nikon_e995() #0 {
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  %histo = alloca [256 x i32], align 16
  %2 = bitcast [256 x i32]* %histo to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 1024, i32 16, i1 false)
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = call i32 @fseek(%struct._IO_FILE* %3, i64 -2000, i32 2)
  store i32 0, i32* %i, align 4
  br label %5

; <label>:5                                       ; preds = %15, %0
  %6 = load i32* %i, align 4
  %7 = icmp slt i32 %6, 2000
  br i1 %7, label %8, label %18

; <label>:8                                       ; preds = %5
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i32 @getc_unlocked(%struct._IO_FILE* %9)
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [256 x i32]* %histo, i32 0, i64 %11
  %13 = load i32* %12, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %12, align 4
  br label %15

; <label>:15                                      ; preds = %8
  %16 = load i32* %i, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %i, align 4
  br label %5

; <label>:18                                      ; preds = %5
  store i32 0, i32* %i, align 4
  br label %19

; <label>:19                                      ; preds = %33, %18
  %20 = load i32* %i, align 4
  %21 = icmp slt i32 %20, 4
  br i1 %21, label %22, label %36

; <label>:22                                      ; preds = %19
  %23 = load i32* %i, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [4 x i8]* @nikon_e995.often, i32 0, i64 %24
  %26 = load i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [256 x i32]* %histo, i32 0, i64 %27
  %29 = load i32* %28, align 4
  %30 = icmp slt i32 %29, 200
  br i1 %30, label %31, label %32

; <label>:31                                      ; preds = %22
  store i32 0, i32* %1
  br label %37

; <label>:32                                      ; preds = %22
  br label %33

; <label>:33                                      ; preds = %32
  %34 = load i32* %i, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %i, align 4
  br label %19

; <label>:36                                      ; preds = %19
  store i32 1, i32* %1
  br label %37

; <label>:37                                      ; preds = %36, %31
  %38 = load i32* %1
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define i32 @nikon_e2100() #0 {
  %1 = alloca i32, align 4
  %t = alloca [12 x i8], align 1
  %i = alloca i32, align 4
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %2, i64 0, i32 0)
  store i32 0, i32* %i, align 4
  br label %4

; <label>:4                                       ; preds = %47, %0
  %5 = load i32* %i, align 4
  %6 = icmp slt i32 %5, 1024
  br i1 %6, label %7, label %50

; <label>:7                                       ; preds = %4
  %8 = getelementptr inbounds [12 x i8]* %t, i32 0, i32 0
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i64 @fread(i8* %8, i64 1, i64 12, %struct._IO_FILE* %9)
  %11 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 2
  %12 = load i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 4
  %15 = load i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = and i32 %13, %16
  %18 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 7
  %19 = load i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = and i32 %17, %20
  %22 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 9
  %23 = load i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = and i32 %21, %24
  %26 = ashr i32 %25, 4
  %27 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 1
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %26, %29
  %31 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 6
  %32 = load i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %30, %33
  %35 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 8
  %36 = load i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = and i32 %34, %37
  %39 = getelementptr inbounds [12 x i8]* %t, i32 0, i64 11
  %40 = load i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = and i32 %38, %41
  %43 = and i32 %42, 3
  %44 = icmp ne i32 %43, 3
  br i1 %44, label %45, label %46

; <label>:45                                      ; preds = %7
  store i32 0, i32* %1
  br label %51

; <label>:46                                      ; preds = %7
  br label %47

; <label>:47                                      ; preds = %46
  %48 = load i32* %i, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %i, align 4
  br label %4

; <label>:50                                      ; preds = %4
  store i32 1, i32* %1
  br label %51

; <label>:51                                      ; preds = %50, %45
  %52 = load i32* %1
  ret i32 %52
}

; Function Attrs: nounwind uwtable
define void @nikon_3700() #0 {
  %bits = alloca i32, align 4
  %i = alloca i32, align 4
  %dp = alloca [24 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 3072, i32 0)
  %3 = getelementptr inbounds [24 x i8]* %dp, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 1, i64 24, %struct._IO_FILE* %4)
  %6 = getelementptr inbounds [24 x i8]* %dp, i32 0, i64 8
  %7 = load i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = and i32 %8, 3
  %10 = shl i32 %9, 4
  %11 = getelementptr inbounds [24 x i8]* %dp, i32 0, i64 20
  %12 = load i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = and i32 %13, 3
  %15 = or i32 %10, %14
  store i32 %15, i32* %bits, align 4
  store i32 0, i32* %i, align 4
  br label %16

; <label>:16                                      ; preds = %42, %0
  %17 = load i32* %i, align 4
  %18 = sext i32 %17 to i64
  %19 = icmp ult i64 %18, 4
  br i1 %19, label %20, label %45

; <label>:20                                      ; preds = %16
  %21 = load i32* %bits, align 4
  %22 = load i32* %i, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [4 x %struct.anon]* @nikon_3700.table, i32 0, i64 %23
  %25 = getelementptr inbounds %struct.anon* %24, i32 0, i32 0
  %26 = load i32* %25, align 4
  %27 = icmp eq i32 %21, %26
  br i1 %27, label %28, label %41

; <label>:28                                      ; preds = %20
  %29 = load i32* %i, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [4 x %struct.anon]* @nikon_3700.table, i32 0, i64 %30
  %32 = getelementptr inbounds %struct.anon* %31, i32 0, i32 1
  %33 = getelementptr inbounds [12 x i8]* %32, i32 0, i32 0
  %34 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %33) #4
  %35 = load i32* %i, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [4 x %struct.anon]* @nikon_3700.table, i32 0, i64 %36
  %38 = getelementptr inbounds %struct.anon* %37, i32 0, i32 2
  %39 = getelementptr inbounds [15 x i8]* %38, i32 0, i32 0
  %40 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %39) #4
  br label %41

; <label>:41                                      ; preds = %28, %20
  br label %42

; <label>:42                                      ; preds = %41
  %43 = load i32* %i, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %i, align 4
  br label %16

; <label>:45                                      ; preds = %16
  ret void
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @minolta_z2() #0 {
  %i = alloca i32, align 4
  %nz = alloca i32, align 4
  %tail = alloca [424 x i8], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 -424, i32 2)
  %3 = getelementptr inbounds [424 x i8]* %tail, i32 0, i32 0
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @fread(i8* %3, i64 1, i64 424, %struct._IO_FILE* %4)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %nz, align 4
  br label %6

; <label>:6                                       ; preds = %20, %0
  %7 = load i32* %i, align 4
  %8 = sext i32 %7 to i64
  %9 = icmp ult i64 %8, 424
  br i1 %9, label %10, label %23

; <label>:10                                      ; preds = %6
  %11 = load i32* %i, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [424 x i8]* %tail, i32 0, i64 %12
  %14 = load i8* %13, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %19

; <label>:16                                      ; preds = %10
  %17 = load i32* %nz, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %nz, align 4
  br label %19

; <label>:19                                      ; preds = %16, %10
  br label %20

; <label>:20                                      ; preds = %19
  %21 = load i32* %i, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %i, align 4
  br label %6

; <label>:23                                      ; preds = %6
  %24 = load i32* %nz, align 4
  %25 = icmp sgt i32 %24, 20
  %26 = zext i1 %25 to i32
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define void @nikon_e900_load_raw() #0 {
  %offset = alloca i32, align 4
  %irow = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 0, i32* %offset, align 4
  store i32 0, i32* %irow, align 4
  br label %1

; <label>:1                                       ; preds = %68, %0
  %2 = load i32* %irow, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %71

; <label>:6                                       ; preds = %1
  %7 = load i32* %irow, align 4
  %8 = mul nsw i32 %7, 2
  %9 = load i16* @height, align 2
  %10 = zext i16 %9 to i32
  %11 = srem i32 %8, %10
  store i32 %11, i32* %row, align 4
  %12 = load i32* %row, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %19

; <label>:14                                      ; preds = %6
  %15 = load i32* %offset, align 4
  %16 = sub nsw i32 0, %15
  %17 = and i32 %16, -4096
  %18 = sub nsw i32 0, %17
  store i32 %18, i32* %offset, align 4
  br label %19

; <label>:19                                      ; preds = %14, %6
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = load i32* %offset, align 4
  %22 = sext i32 %21 to i64
  %23 = call i32 @fseek(%struct._IO_FILE* %20, i64 %22, i32 0)
  %24 = load i16* @raw_width, align 2
  %25 = zext i16 %24 to i32
  %26 = load i32* %offset, align 4
  %27 = add nsw i32 %26, %25
  store i32 %27, i32* %offset, align 4
  %28 = call i32 @getbits(i32 -1)
  store i32 0, i32* %col, align 4
  br label %29

; <label>:29                                      ; preds = %64, %19
  %30 = load i32* %col, align 4
  %31 = load i16* @width, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %34, label %67

; <label>:34                                      ; preds = %29
  %35 = call i32 @getbits(i32 10)
  %36 = trunc i32 %35 to i16
  %37 = load i32* @filters, align 4
  %38 = load i32* %row, align 4
  %39 = shl i32 %38, 1
  %40 = and i32 %39, 14
  %41 = load i32* %col, align 4
  %42 = and i32 %41, 1
  %43 = add nsw i32 %40, %42
  %44 = shl i32 %43, 1
  %45 = lshr i32 %37, %44
  %46 = and i32 %45, 3
  %47 = zext i32 %46 to i64
  %48 = load i32* %row, align 4
  %49 = load i16* @shrink, align 2
  %50 = zext i16 %49 to i32
  %51 = ashr i32 %48, %50
  %52 = load i16* @iwidth, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nsw i32 %51, %53
  %55 = load i32* %col, align 4
  %56 = load i16* @shrink, align 2
  %57 = zext i16 %56 to i32
  %58 = ashr i32 %55, %57
  %59 = add nsw i32 %54, %58
  %60 = sext i32 %59 to i64
  %61 = load [4 x i16]** @image, align 8
  %62 = getelementptr inbounds [4 x i16]* %61, i64 %60
  %63 = getelementptr inbounds [4 x i16]* %62, i32 0, i64 %47
  store i16 %36, i16* %63, align 2
  br label %64

; <label>:64                                      ; preds = %34
  %65 = load i32* %col, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %col, align 4
  br label %29

; <label>:67                                      ; preds = %29
  br label %68

; <label>:68                                      ; preds = %67
  %69 = load i32* %irow, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %irow, align 4
  br label %1

; <label>:71                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @fuji_load_raw() #0 {
  %pixel = alloca i16*, align 8
  %wide = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i16* @top_margin, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @raw_width, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %3, %5
  %7 = load i16* @left_margin, align 2
  %8 = zext i16 %7 to i32
  %9 = add nsw i32 %6, %8
  %10 = mul nsw i32 %9, 2
  %11 = sext i32 %10 to i64
  %12 = call i32 @fseek(%struct._IO_FILE* %1, i64 %11, i32 1)
  %13 = load i16* @fuji_width, align 2
  %14 = zext i16 %13 to i32
  %15 = load i32* @fuji_layout, align 4
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = zext i1 %17 to i32
  %19 = shl i32 %14, %18
  store i32 %19, i32* %wide, align 4
  %20 = load i32* %wide, align 4
  %21 = sext i32 %20 to i64
  %22 = call noalias i8* @calloc(i64 %21, i64 2) #4
  %23 = bitcast i8* %22 to i16*
  store i16* %23, i16** %pixel, align 8
  %24 = load i16** %pixel, align 8
  %25 = bitcast i16* %24 to i8*
  call void @merror(i8* %25, i8* getelementptr inbounds ([16 x i8]* @.str10, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %26

; <label>:26                                      ; preds = %114, %0
  %27 = load i32* %row, align 4
  %28 = load i16* @raw_height, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %31, label %117

; <label>:31                                      ; preds = %26
  %32 = load i16** %pixel, align 8
  %33 = load i32* %wide, align 4
  call void @read_shorts(i16* %32, i32 %33)
  %34 = load %struct._IO_FILE** @ifp, align 8
  %35 = load i16* @raw_width, align 2
  %36 = zext i16 %35 to i32
  %37 = load i32* %wide, align 4
  %38 = sub nsw i32 %36, %37
  %39 = mul nsw i32 2, %38
  %40 = sext i32 %39 to i64
  %41 = call i32 @fseek(%struct._IO_FILE* %34, i64 %40, i32 1)
  store i32 0, i32* %col, align 4
  br label %42

; <label>:42                                      ; preds = %110, %31
  %43 = load i32* %col, align 4
  %44 = load i32* %wide, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %46, label %113

; <label>:46                                      ; preds = %42
  %47 = load i32* @fuji_layout, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %63

; <label>:49                                      ; preds = %46
  %50 = load i16* @fuji_width, align 2
  %51 = zext i16 %50 to i32
  %52 = sub nsw i32 %51, 1
  %53 = load i32* %col, align 4
  %54 = sub nsw i32 %52, %53
  %55 = load i32* %row, align 4
  %56 = ashr i32 %55, 1
  %57 = add nsw i32 %54, %56
  store i32 %57, i32* %r, align 4
  %58 = load i32* %col, align 4
  %59 = load i32* %row, align 4
  %60 = add nsw i32 %59, 1
  %61 = ashr i32 %60, 1
  %62 = add nsw i32 %58, %61
  store i32 %62, i32* %c, align 4
  br label %77

; <label>:63                                      ; preds = %46
  %64 = load i16* @fuji_width, align 2
  %65 = zext i16 %64 to i32
  %66 = sub nsw i32 %65, 1
  %67 = load i32* %row, align 4
  %68 = add nsw i32 %66, %67
  %69 = load i32* %col, align 4
  %70 = ashr i32 %69, 1
  %71 = sub nsw i32 %68, %70
  store i32 %71, i32* %r, align 4
  %72 = load i32* %row, align 4
  %73 = load i32* %col, align 4
  %74 = add nsw i32 %73, 1
  %75 = ashr i32 %74, 1
  %76 = add nsw i32 %72, %75
  store i32 %76, i32* %c, align 4
  br label %77

; <label>:77                                      ; preds = %63, %49
  %78 = load i32* %col, align 4
  %79 = sext i32 %78 to i64
  %80 = load i16** %pixel, align 8
  %81 = getelementptr inbounds i16* %80, i64 %79
  %82 = load i16* %81, align 2
  %83 = load i32* @filters, align 4
  %84 = load i32* %r, align 4
  %85 = shl i32 %84, 1
  %86 = and i32 %85, 14
  %87 = load i32* %c, align 4
  %88 = and i32 %87, 1
  %89 = add nsw i32 %86, %88
  %90 = shl i32 %89, 1
  %91 = lshr i32 %83, %90
  %92 = and i32 %91, 3
  %93 = zext i32 %92 to i64
  %94 = load i32* %r, align 4
  %95 = load i16* @shrink, align 2
  %96 = zext i16 %95 to i32
  %97 = ashr i32 %94, %96
  %98 = load i16* @iwidth, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nsw i32 %97, %99
  %101 = load i32* %c, align 4
  %102 = load i16* @shrink, align 2
  %103 = zext i16 %102 to i32
  %104 = ashr i32 %101, %103
  %105 = add nsw i32 %100, %104
  %106 = sext i32 %105 to i64
  %107 = load [4 x i16]** @image, align 8
  %108 = getelementptr inbounds [4 x i16]* %107, i64 %106
  %109 = getelementptr inbounds [4 x i16]* %108, i32 0, i64 %93
  store i16 %82, i16* %109, align 2
  br label %110

; <label>:110                                     ; preds = %77
  %111 = load i32* %col, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %col, align 4
  br label %42

; <label>:113                                     ; preds = %42
  br label %114

; <label>:114                                     ; preds = %113
  %115 = load i32* %row, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %row, align 4
  br label %26

; <label>:117                                     ; preds = %26
  %118 = load i16** %pixel, align 8
  %119 = bitcast i16* %118 to i8*
  call void @free(i8* %119) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @ppm_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = alloca %struct._IO_FILE*, align 8
  %thumb = alloca i8*, align 8
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %1, align 8
  %2 = load i16* @thumb_width, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @thumb_height, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %3, %5
  %7 = mul nsw i32 %6, 3
  store i32 %7, i32* @thumb_length, align 4
  %8 = load i32* @thumb_length, align 4
  %9 = zext i32 %8 to i64
  %10 = call noalias i8* @malloc(i64 %9) #4
  store i8* %10, i8** %thumb, align 8
  %11 = load i8** %thumb, align 8
  call void @merror(i8* %11, i8* getelementptr inbounds ([12 x i8]* @.str11, i32 0, i32 0))
  %12 = load %struct._IO_FILE** %1, align 8
  %13 = load i16* @thumb_width, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16* @thumb_height, align 2
  %16 = zext i16 %15 to i32
  %17 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([14 x i8]* @.str12, i32 0, i32 0), i32 %14, i32 %16)
  %18 = load i8** %thumb, align 8
  %19 = load i32* @thumb_length, align 4
  %20 = zext i32 %19 to i64
  %21 = load %struct._IO_FILE** @ifp, align 8
  %22 = call i64 @fread(i8* %18, i64 1, i64 %20, %struct._IO_FILE* %21)
  %23 = load i8** %thumb, align 8
  %24 = load i32* @thumb_length, align 4
  %25 = zext i32 %24 to i64
  %26 = load %struct._IO_FILE** %1, align 8
  %27 = call i64 @fwrite(i8* %23, i64 1, i64 %25, %struct._IO_FILE* %26)
  %28 = load i8** %thumb, align 8
  call void @free(i8* %28) #4
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @layer_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %thumb = alloca i8*, align 8
  %map = alloca [2 x [4 x i8]], align 1
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %1, align 8
  %2 = bitcast [2 x [4 x i8]]* %map to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* getelementptr inbounds ([2 x [4 x i8]]* @layer_thumb.map, i32 0, i32 0, i32 0), i64 8, i32 1, i1 false)
  %3 = load i32* @thumb_misc, align 4
  %4 = lshr i32 %3, 5
  %5 = and i32 %4, 7
  store i32 %5, i32* @colors, align 4
  %6 = load i16* @thumb_width, align 2
  %7 = zext i16 %6 to i32
  %8 = load i16* @thumb_height, align 2
  %9 = zext i16 %8 to i32
  %10 = mul nsw i32 %7, %9
  store i32 %10, i32* @thumb_length, align 4
  %11 = load i32* @colors, align 4
  %12 = sext i32 %11 to i64
  %13 = load i32* @thumb_length, align 4
  %14 = zext i32 %13 to i64
  %15 = call noalias i8* @calloc(i64 %12, i64 %14) #4
  store i8* %15, i8** %thumb, align 8
  %16 = load i8** %thumb, align 8
  call void @merror(i8* %16, i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0))
  %17 = load %struct._IO_FILE** %1, align 8
  %18 = load i32* @colors, align 4
  %19 = ashr i32 %18, 1
  %20 = add nsw i32 5, %19
  %21 = load i16* @thumb_width, align 2
  %22 = zext i16 %21 to i32
  %23 = load i16* @thumb_height, align 2
  %24 = zext i16 %23 to i32
  %25 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([15 x i8]* @.str14, i32 0, i32 0), i32 %20, i32 %22, i32 %24)
  %26 = load i8** %thumb, align 8
  %27 = load i32* @thumb_length, align 4
  %28 = zext i32 %27 to i64
  %29 = load i32* @colors, align 4
  %30 = sext i32 %29 to i64
  %31 = load %struct._IO_FILE** @ifp, align 8
  %32 = call i64 @fread(i8* %26, i64 %28, i64 %30, %struct._IO_FILE* %31)
  store i32 0, i32* %i, align 4
  br label %33

; <label>:33                                      ; preds = %68, %0
  %34 = load i32* %i, align 4
  %35 = load i32* @thumb_length, align 4
  %36 = icmp ult i32 %34, %35
  br i1 %36, label %37, label %71

; <label>:37                                      ; preds = %33
  store i32 0, i32* %c, align 4
  br label %38

; <label>:38                                      ; preds = %64, %37
  %39 = load i32* %c, align 4
  %40 = load i32* @colors, align 4
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %67

; <label>:42                                      ; preds = %38
  %43 = load i32* %i, align 4
  %44 = load i32* @thumb_length, align 4
  %45 = load i32* %c, align 4
  %46 = sext i32 %45 to i64
  %47 = load i32* @thumb_misc, align 4
  %48 = lshr i32 %47, 8
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [2 x [4 x i8]]* %map, i32 0, i64 %49
  %51 = getelementptr inbounds [4 x i8]* %50, i32 0, i64 %46
  %52 = load i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = sub nsw i32 %53, 48
  %55 = mul i32 %44, %54
  %56 = add i32 %43, %55
  %57 = zext i32 %56 to i64
  %58 = load i8** %thumb, align 8
  %59 = getelementptr inbounds i8* %58, i64 %57
  %60 = load i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = load %struct._IO_FILE** %1, align 8
  %63 = call i32 @_IO_putc(i32 %61, %struct._IO_FILE* %62)
  br label %64

; <label>:64                                      ; preds = %42
  %65 = load i32* %c, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %c, align 4
  br label %38

; <label>:67                                      ; preds = %38
  br label %68

; <label>:68                                      ; preds = %67
  %69 = load i32* %i, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %i, align 4
  br label %33

; <label>:71                                      ; preds = %33
  %72 = load i8** %thumb, align 8
  call void @free(i8* %72) #4
  ret void
}

declare i32 @_IO_putc(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @rollei_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %thumb = alloca i16*, align 8
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %1, align 8
  %2 = load i16* @thumb_width, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @thumb_height, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %3, %5
  store i32 %6, i32* @thumb_length, align 4
  %7 = load i32* @thumb_length, align 4
  %8 = zext i32 %7 to i64
  %9 = call noalias i8* @calloc(i64 %8, i64 2) #4
  %10 = bitcast i8* %9 to i16*
  store i16* %10, i16** %thumb, align 8
  %11 = load i16** %thumb, align 8
  %12 = bitcast i16* %11 to i8*
  call void @merror(i8* %12, i8* getelementptr inbounds ([15 x i8]* @.str15, i32 0, i32 0))
  %13 = load %struct._IO_FILE** %1, align 8
  %14 = load i16* @thumb_width, align 2
  %15 = zext i16 %14 to i32
  %16 = load i16* @thumb_height, align 2
  %17 = zext i16 %16 to i32
  %18 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([14 x i8]* @.str12, i32 0, i32 0), i32 %15, i32 %17)
  %19 = load i16** %thumb, align 8
  %20 = load i32* @thumb_length, align 4
  call void @read_shorts(i16* %19, i32 %20)
  store i32 0, i32* %i, align 4
  br label %21

; <label>:21                                      ; preds = %55, %0
  %22 = load i32* %i, align 4
  %23 = load i32* @thumb_length, align 4
  %24 = icmp ult i32 %22, %23
  br i1 %24, label %25, label %58

; <label>:25                                      ; preds = %21
  %26 = load i32* %i, align 4
  %27 = zext i32 %26 to i64
  %28 = load i16** %thumb, align 8
  %29 = getelementptr inbounds i16* %28, i64 %27
  %30 = load i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = shl i32 %31, 3
  %33 = load %struct._IO_FILE** %1, align 8
  %34 = call i32 @_IO_putc(i32 %32, %struct._IO_FILE* %33)
  %35 = load i32* %i, align 4
  %36 = zext i32 %35 to i64
  %37 = load i16** %thumb, align 8
  %38 = getelementptr inbounds i16* %37, i64 %36
  %39 = load i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = ashr i32 %40, 5
  %42 = shl i32 %41, 2
  %43 = load %struct._IO_FILE** %1, align 8
  %44 = call i32 @_IO_putc(i32 %42, %struct._IO_FILE* %43)
  %45 = load i32* %i, align 4
  %46 = zext i32 %45 to i64
  %47 = load i16** %thumb, align 8
  %48 = getelementptr inbounds i16* %47, i64 %46
  %49 = load i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = ashr i32 %50, 11
  %52 = shl i32 %51, 3
  %53 = load %struct._IO_FILE** %1, align 8
  %54 = call i32 @_IO_putc(i32 %52, %struct._IO_FILE* %53)
  br label %55

; <label>:55                                      ; preds = %25
  %56 = load i32* %i, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* %i, align 4
  br label %21

; <label>:58                                      ; preds = %21
  %59 = load i16** %thumb, align 8
  %60 = bitcast i16* %59 to i8*
  call void @free(i8* %60) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @rollei_load_raw() #0 {
  %pixel = alloca [10 x i8], align 1
  %iten = alloca i32, align 4
  %isix = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %todo = alloca [16 x i32], align 16
  store i32 0, i32* %iten, align 4
  store i32 0, i32* %buffer, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @raw_height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %2, %4
  %6 = mul nsw i32 %5, 5
  %7 = sdiv i32 %6, 8
  store i32 %7, i32* %isix, align 4
  br label %8

; <label>:8                                       ; preds = %147, %0
  %9 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i32 0
  %10 = load %struct._IO_FILE** @ifp, align 8
  %11 = call i64 @fread(i8* %9, i64 1, i64 10, %struct._IO_FILE* %10)
  %12 = icmp eq i64 %11, 10
  br i1 %12, label %13, label %148

; <label>:13                                      ; preds = %8
  store i32 0, i32* %i, align 4
  br label %14

; <label>:14                                      ; preds = %49, %13
  %15 = load i32* %i, align 4
  %16 = icmp ult i32 %15, 10
  br i1 %16, label %17, label %52

; <label>:17                                      ; preds = %14
  %18 = load i32* %iten, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %iten, align 4
  %20 = load i32* %i, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %21
  store i32 %18, i32* %22, align 4
  %23 = load i32* %i, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i64 %24
  %26 = load i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shl i32 %27, 8
  %29 = load i32* %i, align 4
  %30 = add i32 %29, 1
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i64 %31
  %33 = load i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %28, %34
  %36 = load i32* %i, align 4
  %37 = add i32 %36, 1
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %38
  store i32 %35, i32* %39, align 4
  %40 = load i32* %i, align 4
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds [10 x i8]* %pixel, i32 0, i64 %41
  %43 = load i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = ashr i32 %44, 2
  %46 = load i32* %buffer, align 4
  %47 = shl i32 %46, 6
  %48 = or i32 %45, %47
  store i32 %48, i32* %buffer, align 4
  br label %49

; <label>:49                                      ; preds = %17
  %50 = load i32* %i, align 4
  %51 = add i32 %50, 2
  store i32 %51, i32* %i, align 4
  br label %14

; <label>:52                                      ; preds = %14
  br label %53

; <label>:53                                      ; preds = %71, %52
  %54 = load i32* %i, align 4
  %55 = icmp ult i32 %54, 16
  br i1 %55, label %56, label %74

; <label>:56                                      ; preds = %53
  %57 = load i32* %isix, align 4
  %58 = add i32 %57, 1
  store i32 %58, i32* %isix, align 4
  %59 = load i32* %i, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %60
  store i32 %57, i32* %61, align 4
  %62 = load i32* %buffer, align 4
  %63 = load i32* %i, align 4
  %64 = sub i32 14, %63
  %65 = mul i32 %64, 5
  %66 = lshr i32 %62, %65
  %67 = load i32* %i, align 4
  %68 = add i32 %67, 1
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %69
  store i32 %66, i32* %70, align 4
  br label %71

; <label>:71                                      ; preds = %56
  %72 = load i32* %i, align 4
  %73 = add i32 %72, 2
  store i32 %73, i32* %i, align 4
  br label %53

; <label>:74                                      ; preds = %53
  store i32 0, i32* %i, align 4
  br label %75

; <label>:75                                      ; preds = %144, %74
  %76 = load i32* %i, align 4
  %77 = icmp ult i32 %76, 16
  br i1 %77, label %78, label %147

; <label>:78                                      ; preds = %75
  %79 = load i32* %i, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %80
  %82 = load i32* %81, align 4
  %83 = load i16* @raw_width, align 2
  %84 = zext i16 %83 to i32
  %85 = udiv i32 %82, %84
  %86 = load i16* @top_margin, align 2
  %87 = zext i16 %86 to i32
  %88 = sub i32 %85, %87
  store i32 %88, i32* %row, align 4
  %89 = load i32* %i, align 4
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %90
  %92 = load i32* %91, align 4
  %93 = load i16* @raw_width, align 2
  %94 = zext i16 %93 to i32
  %95 = urem i32 %92, %94
  %96 = load i16* @left_margin, align 2
  %97 = zext i16 %96 to i32
  %98 = sub i32 %95, %97
  store i32 %98, i32* %col, align 4
  %99 = load i32* %row, align 4
  %100 = load i16* @height, align 2
  %101 = zext i16 %100 to i32
  %102 = icmp ult i32 %99, %101
  br i1 %102, label %103, label %143

; <label>:103                                     ; preds = %78
  %104 = load i32* %col, align 4
  %105 = load i16* @width, align 2
  %106 = zext i16 %105 to i32
  %107 = icmp ult i32 %104, %106
  br i1 %107, label %108, label %143

; <label>:108                                     ; preds = %103
  %109 = load i32* %i, align 4
  %110 = add i32 %109, 1
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds [16 x i32]* %todo, i32 0, i64 %111
  %113 = load i32* %112, align 4
  %114 = and i32 %113, 1023
  %115 = trunc i32 %114 to i16
  %116 = load i32* @filters, align 4
  %117 = load i32* %row, align 4
  %118 = shl i32 %117, 1
  %119 = and i32 %118, 14
  %120 = load i32* %col, align 4
  %121 = and i32 %120, 1
  %122 = add i32 %119, %121
  %123 = shl i32 %122, 1
  %124 = lshr i32 %116, %123
  %125 = and i32 %124, 3
  %126 = zext i32 %125 to i64
  %127 = load i32* %row, align 4
  %128 = load i16* @shrink, align 2
  %129 = zext i16 %128 to i32
  %130 = lshr i32 %127, %129
  %131 = load i16* @iwidth, align 2
  %132 = zext i16 %131 to i32
  %133 = mul i32 %130, %132
  %134 = load i32* %col, align 4
  %135 = load i16* @shrink, align 2
  %136 = zext i16 %135 to i32
  %137 = lshr i32 %134, %136
  %138 = add i32 %133, %137
  %139 = zext i32 %138 to i64
  %140 = load [4 x i16]** @image, align 8
  %141 = getelementptr inbounds [4 x i16]* %140, i64 %139
  %142 = getelementptr inbounds [4 x i16]* %141, i32 0, i64 %126
  store i16 %115, i16* %142, align 2
  br label %143

; <label>:143                                     ; preds = %108, %103, %78
  br label %144

; <label>:144                                     ; preds = %143
  %145 = load i32* %i, align 4
  %146 = add i32 %145, 2
  store i32 %146, i32* %i, align 4
  br label %75

; <label>:147                                     ; preds = %75
  br label %8

; <label>:148                                     ; preds = %8
  store i32 1023, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @bayer(i32 %row, i32 %col) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %row, i32* %1, align 4
  store i32 %col, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %42

; <label>:7                                       ; preds = %0
  %8 = load i32* %2, align 4
  %9 = load i16* @width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp ult i32 %8, %10
  br i1 %11, label %12, label %42

; <label>:12                                      ; preds = %7
  %13 = load i32* @filters, align 4
  %14 = load i32* %1, align 4
  %15 = shl i32 %14, 1
  %16 = and i32 %15, 14
  %17 = load i32* %2, align 4
  %18 = and i32 %17, 1
  %19 = add i32 %16, %18
  %20 = shl i32 %19, 1
  %21 = lshr i32 %13, %20
  %22 = and i32 %21, 3
  %23 = zext i32 %22 to i64
  %24 = load i32* %1, align 4
  %25 = load i16* @shrink, align 2
  %26 = zext i16 %25 to i32
  %27 = lshr i32 %24, %26
  %28 = load i16* @iwidth, align 2
  %29 = zext i16 %28 to i32
  %30 = mul i32 %27, %29
  %31 = load i32* %2, align 4
  %32 = load i16* @shrink, align 2
  %33 = zext i16 %32 to i32
  %34 = lshr i32 %31, %33
  %35 = add i32 %30, %34
  %36 = zext i32 %35 to i64
  %37 = load [4 x i16]** @image, align 8
  %38 = getelementptr inbounds [4 x i16]* %37, i64 %36
  %39 = getelementptr inbounds [4 x i16]* %38, i32 0, i64 %23
  %40 = load i16* %39, align 2
  %41 = zext i16 %40 to i32
  br label %43

; <label>:42                                      ; preds = %7, %0
  br label %43

; <label>:43                                      ; preds = %42, %12
  %44 = phi i32 [ %41, %12 ], [ 0, %42 ]
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define void @phase_one_flat_field(i32 %is_float, i32 %nc) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %head = alloca [8 x i16], align 16
  %wide = alloca i32, align 4
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  %c = alloca i32, align 4
  %rend = alloca i32, align 4
  %cend = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %mrow = alloca float*, align 8
  %num = alloca float, align 4
  %mult = alloca [4 x float], align 16
  store i32 %is_float, i32* %1, align 4
  store i32 %nc, i32* %2, align 4
  %3 = getelementptr inbounds [8 x i16]* %head, i32 0, i32 0
  call void @read_shorts(i16* %3, i32 8)
  %4 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 2
  %5 = load i16* %4, align 2
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %8 = load i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = sdiv i32 %6, %9
  store i32 %10, i32* %wide, align 4
  %11 = load i32* %2, align 4
  %12 = load i32* %wide, align 4
  %13 = mul i32 %11, %12
  %14 = zext i32 %13 to i64
  %15 = call noalias i8* @calloc(i64 %14, i64 4) #4
  %16 = bitcast i8* %15 to float*
  store float* %16, float** %mrow, align 8
  %17 = load float** %mrow, align 8
  %18 = bitcast float* %17 to i8*
  call void @merror(i8* %18, i8* getelementptr inbounds ([23 x i8]* @.str16, i32 0, i32 0))
  store i32 0, i32* %y, align 4
  br label %19

; <label>:19                                      ; preds = %384, %0
  %20 = load i32* %y, align 4
  %21 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 3
  %22 = load i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %25 = load i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sdiv i32 %23, %26
  %28 = icmp ult i32 %20, %27
  br i1 %28, label %29, label %387

; <label>:29                                      ; preds = %19
  store i32 0, i32* %x, align 4
  br label %30

; <label>:30                                      ; preds = %95, %29
  %31 = load i32* %x, align 4
  %32 = load i32* %wide, align 4
  %33 = icmp ult i32 %31, %32
  br i1 %33, label %34, label %98

; <label>:34                                      ; preds = %30
  store i32 0, i32* %c, align 4
  br label %35

; <label>:35                                      ; preds = %91, %34
  %36 = load i32* %c, align 4
  %37 = load i32* %2, align 4
  %38 = icmp ult i32 %36, %37
  br i1 %38, label %39, label %94

; <label>:39                                      ; preds = %35
  %40 = load i32* %1, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %44

; <label>:42                                      ; preds = %39
  %43 = call double @getreal(i32 11)
  br label %49

; <label>:44                                      ; preds = %39
  %45 = call zeroext i16 @get2()
  %46 = zext i16 %45 to i32
  %47 = sitofp i32 %46 to double
  %48 = fdiv double %47, 3.276800e+04
  br label %49

; <label>:49                                      ; preds = %44, %42
  %50 = phi double [ %43, %42 ], [ %48, %44 ]
  %51 = fptrunc double %50 to float
  store float %51, float* %num, align 4
  %52 = load i32* %y, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %64

; <label>:54                                      ; preds = %49
  %55 = load float* %num, align 4
  %56 = load i32* %c, align 4
  %57 = load i32* %wide, align 4
  %58 = mul i32 %56, %57
  %59 = load i32* %x, align 4
  %60 = add i32 %58, %59
  %61 = zext i32 %60 to i64
  %62 = load float** %mrow, align 8
  %63 = getelementptr inbounds float* %62, i64 %61
  store float %55, float* %63, align 4
  br label %90

; <label>:64                                      ; preds = %49
  %65 = load float* %num, align 4
  %66 = load i32* %c, align 4
  %67 = load i32* %wide, align 4
  %68 = mul i32 %66, %67
  %69 = load i32* %x, align 4
  %70 = add i32 %68, %69
  %71 = zext i32 %70 to i64
  %72 = load float** %mrow, align 8
  %73 = getelementptr inbounds float* %72, i64 %71
  %74 = load float* %73, align 4
  %75 = fsub float %65, %74
  %76 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %77 = load i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = sitofp i32 %78 to float
  %80 = fdiv float %75, %79
  %81 = load i32* %c, align 4
  %82 = add i32 %81, 1
  %83 = load i32* %wide, align 4
  %84 = mul i32 %82, %83
  %85 = load i32* %x, align 4
  %86 = add i32 %84, %85
  %87 = zext i32 %86 to i64
  %88 = load float** %mrow, align 8
  %89 = getelementptr inbounds float* %88, i64 %87
  store float %80, float* %89, align 4
  br label %90

; <label>:90                                      ; preds = %64, %54
  br label %91

; <label>:91                                      ; preds = %90
  %92 = load i32* %c, align 4
  %93 = add i32 %92, 2
  store i32 %93, i32* %c, align 4
  br label %35

; <label>:94                                      ; preds = %35
  br label %95

; <label>:95                                      ; preds = %94
  %96 = load i32* %x, align 4
  %97 = add i32 %96, 1
  store i32 %97, i32* %x, align 4
  br label %30

; <label>:98                                      ; preds = %30
  %99 = load i32* %y, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

; <label>:101                                     ; preds = %98
  br label %384

; <label>:102                                     ; preds = %98
  %103 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 1
  %104 = load i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = load i16* @top_margin, align 2
  %107 = zext i16 %106 to i32
  %108 = sub nsw i32 %105, %107
  %109 = load i32* %y, align 4
  %110 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %111 = load i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = mul i32 %109, %112
  %114 = add i32 %108, %113
  store i32 %114, i32* %rend, align 4
  %115 = load i32* %rend, align 4
  %116 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 5
  %117 = load i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = sub i32 %115, %118
  store i32 %119, i32* %row, align 4
  br label %120

; <label>:120                                     ; preds = %380, %102
  %121 = load i32* %row, align 4
  %122 = load i16* @height, align 2
  %123 = zext i16 %122 to i32
  %124 = icmp ult i32 %121, %123
  br i1 %124, label %125, label %129

; <label>:125                                     ; preds = %120
  %126 = load i32* %row, align 4
  %127 = load i32* %rend, align 4
  %128 = icmp ult i32 %126, %127
  br label %129

; <label>:129                                     ; preds = %125, %120
  %130 = phi i1 [ false, %120 ], [ %128, %125 ]
  br i1 %130, label %131, label %383

; <label>:131                                     ; preds = %129
  store i32 1, i32* %x, align 4
  br label %132

; <label>:132                                     ; preds = %338, %131
  %133 = load i32* %x, align 4
  %134 = load i32* %wide, align 4
  %135 = icmp ult i32 %133, %134
  br i1 %135, label %136, label %341

; <label>:136                                     ; preds = %132
  store i32 0, i32* %c, align 4
  br label %137

; <label>:137                                     ; preds = %178, %136
  %138 = load i32* %c, align 4
  %139 = load i32* %2, align 4
  %140 = icmp ult i32 %138, %139
  br i1 %140, label %141, label %181

; <label>:141                                     ; preds = %137
  %142 = load i32* %c, align 4
  %143 = load i32* %wide, align 4
  %144 = mul i32 %142, %143
  %145 = load i32* %x, align 4
  %146 = add i32 %144, %145
  %147 = sub i32 %146, 1
  %148 = zext i32 %147 to i64
  %149 = load float** %mrow, align 8
  %150 = getelementptr inbounds float* %149, i64 %148
  %151 = load float* %150, align 4
  %152 = load i32* %c, align 4
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %153
  store float %151, float* %154, align 4
  %155 = load i32* %c, align 4
  %156 = load i32* %wide, align 4
  %157 = mul i32 %155, %156
  %158 = load i32* %x, align 4
  %159 = add i32 %157, %158
  %160 = zext i32 %159 to i64
  %161 = load float** %mrow, align 8
  %162 = getelementptr inbounds float* %161, i64 %160
  %163 = load float* %162, align 4
  %164 = load i32* %c, align 4
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %165
  %167 = load float* %166, align 4
  %168 = fsub float %163, %167
  %169 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %170 = load i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = sitofp i32 %171 to float
  %173 = fdiv float %168, %172
  %174 = load i32* %c, align 4
  %175 = add i32 %174, 1
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %176
  store float %173, float* %177, align 4
  br label %178

; <label>:178                                     ; preds = %141
  %179 = load i32* %c, align 4
  %180 = add i32 %179, 2
  store i32 %180, i32* %c, align 4
  br label %137

; <label>:181                                     ; preds = %137
  %182 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 0
  %183 = load i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = load i16* @left_margin, align 2
  %186 = zext i16 %185 to i32
  %187 = sub nsw i32 %184, %186
  %188 = load i32* %x, align 4
  %189 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %190 = load i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul i32 %188, %191
  %193 = add i32 %187, %192
  store i32 %193, i32* %cend, align 4
  %194 = load i32* %cend, align 4
  %195 = getelementptr inbounds [8 x i16]* %head, i32 0, i64 4
  %196 = load i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = sub i32 %194, %197
  store i32 %198, i32* %col, align 4
  br label %199

; <label>:199                                     ; preds = %334, %181
  %200 = load i32* %col, align 4
  %201 = load i16* @width, align 2
  %202 = zext i16 %201 to i32
  %203 = icmp ult i32 %200, %202
  br i1 %203, label %204, label %208

; <label>:204                                     ; preds = %199
  %205 = load i32* %col, align 4
  %206 = load i32* %cend, align 4
  %207 = icmp ult i32 %205, %206
  br label %208

; <label>:208                                     ; preds = %204, %199
  %209 = phi i1 [ false, %199 ], [ %207, %204 ]
  br i1 %209, label %210, label %337

; <label>:210                                     ; preds = %208
  %211 = load i32* %2, align 4
  %212 = icmp sgt i32 %211, 2
  br i1 %212, label %213, label %224

; <label>:213                                     ; preds = %210
  %214 = load i32* @filters, align 4
  %215 = load i32* %row, align 4
  %216 = shl i32 %215, 1
  %217 = and i32 %216, 14
  %218 = load i32* %col, align 4
  %219 = and i32 %218, 1
  %220 = add i32 %217, %219
  %221 = shl i32 %220, 1
  %222 = lshr i32 %214, %221
  %223 = and i32 %222, 3
  br label %225

; <label>:224                                     ; preds = %210
  br label %225

; <label>:225                                     ; preds = %224, %213
  %226 = phi i32 [ %223, %213 ], [ 0, %224 ]
  store i32 %226, i32* %c, align 4
  %227 = load i32* %c, align 4
  %228 = and i32 %227, 1
  %229 = icmp ne i32 %228, 0
  br i1 %229, label %314, label %230

; <label>:230                                     ; preds = %225
  %231 = load i32* @filters, align 4
  %232 = load i32* %row, align 4
  %233 = shl i32 %232, 1
  %234 = and i32 %233, 14
  %235 = load i32* %col, align 4
  %236 = and i32 %235, 1
  %237 = add i32 %234, %236
  %238 = shl i32 %237, 1
  %239 = lshr i32 %231, %238
  %240 = and i32 %239, 3
  %241 = zext i32 %240 to i64
  %242 = load i32* %row, align 4
  %243 = load i16* @shrink, align 2
  %244 = zext i16 %243 to i32
  %245 = lshr i32 %242, %244
  %246 = load i16* @iwidth, align 2
  %247 = zext i16 %246 to i32
  %248 = mul i32 %245, %247
  %249 = load i32* %col, align 4
  %250 = load i16* @shrink, align 2
  %251 = zext i16 %250 to i32
  %252 = lshr i32 %249, %251
  %253 = add i32 %248, %252
  %254 = zext i32 %253 to i64
  %255 = load [4 x i16]** @image, align 8
  %256 = getelementptr inbounds [4 x i16]* %255, i64 %254
  %257 = getelementptr inbounds [4 x i16]* %256, i32 0, i64 %241
  %258 = load i16* %257, align 2
  %259 = zext i16 %258 to i32
  %260 = sitofp i32 %259 to float
  %261 = load i32* %c, align 4
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %262
  %264 = load float* %263, align 4
  %265 = fmul float %260, %264
  %266 = fptoui float %265 to i32
  store i32 %266, i32* %c, align 4
  %267 = load i32* %c, align 4
  %268 = icmp ult i32 %267, 65535
  br i1 %268, label %269, label %271

; <label>:269                                     ; preds = %230
  %270 = load i32* %c, align 4
  br label %272

; <label>:271                                     ; preds = %230
  br label %272

; <label>:272                                     ; preds = %271, %269
  %273 = phi i32 [ %270, %269 ], [ 65535, %271 ]
  %274 = icmp ugt i32 0, %273
  br i1 %274, label %275, label %276

; <label>:275                                     ; preds = %272
  br label %284

; <label>:276                                     ; preds = %272
  %277 = load i32* %c, align 4
  %278 = icmp ult i32 %277, 65535
  br i1 %278, label %279, label %281

; <label>:279                                     ; preds = %276
  %280 = load i32* %c, align 4
  br label %282

; <label>:281                                     ; preds = %276
  br label %282

; <label>:282                                     ; preds = %281, %279
  %283 = phi i32 [ %280, %279 ], [ 65535, %281 ]
  br label %284

; <label>:284                                     ; preds = %282, %275
  %285 = phi i32 [ 0, %275 ], [ %283, %282 ]
  %286 = trunc i32 %285 to i16
  %287 = load i32* @filters, align 4
  %288 = load i32* %row, align 4
  %289 = shl i32 %288, 1
  %290 = and i32 %289, 14
  %291 = load i32* %col, align 4
  %292 = and i32 %291, 1
  %293 = add i32 %290, %292
  %294 = shl i32 %293, 1
  %295 = lshr i32 %287, %294
  %296 = and i32 %295, 3
  %297 = zext i32 %296 to i64
  %298 = load i32* %row, align 4
  %299 = load i16* @shrink, align 2
  %300 = zext i16 %299 to i32
  %301 = lshr i32 %298, %300
  %302 = load i16* @iwidth, align 2
  %303 = zext i16 %302 to i32
  %304 = mul i32 %301, %303
  %305 = load i32* %col, align 4
  %306 = load i16* @shrink, align 2
  %307 = zext i16 %306 to i32
  %308 = lshr i32 %305, %307
  %309 = add i32 %304, %308
  %310 = zext i32 %309 to i64
  %311 = load [4 x i16]** @image, align 8
  %312 = getelementptr inbounds [4 x i16]* %311, i64 %310
  %313 = getelementptr inbounds [4 x i16]* %312, i32 0, i64 %297
  store i16 %286, i16* %313, align 2
  br label %314

; <label>:314                                     ; preds = %284, %225
  store i32 0, i32* %c, align 4
  br label %315

; <label>:315                                     ; preds = %330, %314
  %316 = load i32* %c, align 4
  %317 = load i32* %2, align 4
  %318 = icmp ult i32 %316, %317
  br i1 %318, label %319, label %333

; <label>:319                                     ; preds = %315
  %320 = load i32* %c, align 4
  %321 = add i32 %320, 1
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %322
  %324 = load float* %323, align 4
  %325 = load i32* %c, align 4
  %326 = zext i32 %325 to i64
  %327 = getelementptr inbounds [4 x float]* %mult, i32 0, i64 %326
  %328 = load float* %327, align 4
  %329 = fadd float %328, %324
  store float %329, float* %327, align 4
  br label %330

; <label>:330                                     ; preds = %319
  %331 = load i32* %c, align 4
  %332 = add i32 %331, 2
  store i32 %332, i32* %c, align 4
  br label %315

; <label>:333                                     ; preds = %315
  br label %334

; <label>:334                                     ; preds = %333
  %335 = load i32* %col, align 4
  %336 = add i32 %335, 1
  store i32 %336, i32* %col, align 4
  br label %199

; <label>:337                                     ; preds = %208
  br label %338

; <label>:338                                     ; preds = %337
  %339 = load i32* %x, align 4
  %340 = add i32 %339, 1
  store i32 %340, i32* %x, align 4
  br label %132

; <label>:341                                     ; preds = %132
  store i32 0, i32* %x, align 4
  br label %342

; <label>:342                                     ; preds = %376, %341
  %343 = load i32* %x, align 4
  %344 = load i32* %wide, align 4
  %345 = icmp ult i32 %343, %344
  br i1 %345, label %346, label %379

; <label>:346                                     ; preds = %342
  store i32 0, i32* %c, align 4
  br label %347

; <label>:347                                     ; preds = %372, %346
  %348 = load i32* %c, align 4
  %349 = load i32* %2, align 4
  %350 = icmp ult i32 %348, %349
  br i1 %350, label %351, label %375

; <label>:351                                     ; preds = %347
  %352 = load i32* %c, align 4
  %353 = add i32 %352, 1
  %354 = load i32* %wide, align 4
  %355 = mul i32 %353, %354
  %356 = load i32* %x, align 4
  %357 = add i32 %355, %356
  %358 = zext i32 %357 to i64
  %359 = load float** %mrow, align 8
  %360 = getelementptr inbounds float* %359, i64 %358
  %361 = load float* %360, align 4
  %362 = load i32* %c, align 4
  %363 = load i32* %wide, align 4
  %364 = mul i32 %362, %363
  %365 = load i32* %x, align 4
  %366 = add i32 %364, %365
  %367 = zext i32 %366 to i64
  %368 = load float** %mrow, align 8
  %369 = getelementptr inbounds float* %368, i64 %367
  %370 = load float* %369, align 4
  %371 = fadd float %370, %361
  store float %371, float* %369, align 4
  br label %372

; <label>:372                                     ; preds = %351
  %373 = load i32* %c, align 4
  %374 = add i32 %373, 2
  store i32 %374, i32* %c, align 4
  br label %347

; <label>:375                                     ; preds = %347
  br label %376

; <label>:376                                     ; preds = %375
  %377 = load i32* %x, align 4
  %378 = add i32 %377, 1
  store i32 %378, i32* %x, align 4
  br label %342

; <label>:379                                     ; preds = %342
  br label %380

; <label>:380                                     ; preds = %379
  %381 = load i32* %row, align 4
  %382 = add i32 %381, 1
  store i32 %382, i32* %row, align 4
  br label %120

; <label>:383                                     ; preds = %129
  br label %384

; <label>:384                                     ; preds = %383, %101
  %385 = load i32* %y, align 4
  %386 = add i32 %385, 1
  store i32 %386, i32* %y, align 4
  br label %19

; <label>:387                                     ; preds = %19
  %388 = load float** %mrow, align 8
  %389 = bitcast float* %388 to i8*
  call void @free(i8* %389) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @phase_one_correct() #0 {
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %data = alloca i32, align 4
  %save = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %cip = alloca i32, align 4
  %val = alloca [4 x i32], align 16
  %dev = alloca [4 x i32], align 16
  %sum = alloca i32, align 4
  %max = alloca i32, align 4
  %head = alloca [9 x i32], align 16
  %diff = alloca i32, align 4
  %mindiff = alloca i32, align 4
  %off_412 = alloca i32, align 4
  %poly = alloca [8 x float], align 16
  %num = alloca float, align 4
  %cfrac = alloca float, align 4
  %frac = alloca float, align 4
  %mult = alloca [2 x float], align 4
  %yval = alloca [2 x float*], align 16
  %curve = alloca [65536 x i16], align 16
  %xval = alloca [2 x i16*], align 16
  store i32 2147483647, i32* %mindiff, align 4
  store i32 0, i32* %off_412, align 4
  %1 = load i32* @half_size, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = load i32* @meta_length, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %1014

; <label>:7                                       ; preds = %3
  %8 = load i32* @verbose, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %7
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([25 x i8]* @.str17, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = load i64* @meta_offset, align 8
  %16 = call i32 @fseek(%struct._IO_FILE* %14, i64 %15, i32 0)
  %17 = call zeroext i16 @get2()
  store i16 %17, i16* @order, align 2
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = call i32 @fseek(%struct._IO_FILE* %18, i64 6, i32 1)
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = load i64* @meta_offset, align 8
  %22 = call i32 @get4()
  %23 = zext i32 %22 to i64
  %24 = add nsw i64 %21, %23
  %25 = call i32 @fseek(%struct._IO_FILE* %20, i64 %24, i32 0)
  %26 = call i32 @get4()
  store i32 %26, i32* %entries, align 4
  %27 = call i32 @get4()
  br label %28

; <label>:28                                      ; preds = %629, %13
  %29 = load i32* %entries, align 4
  %30 = add i32 %29, -1
  store i32 %30, i32* %entries, align 4
  %31 = icmp ne i32 %29, 0
  br i1 %31, label %32, label %634

; <label>:32                                      ; preds = %28
  %33 = call i32 @get4()
  store i32 %33, i32* %tag, align 4
  %34 = call i32 @get4()
  store i32 %34, i32* %len, align 4
  %35 = call i32 @get4()
  store i32 %35, i32* %data, align 4
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = call i64 @ftell(%struct._IO_FILE* %36)
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %save, align 4
  %39 = load %struct._IO_FILE** @ifp, align 8
  %40 = load i64* @meta_offset, align 8
  %41 = load i32* %data, align 4
  %42 = zext i32 %41 to i64
  %43 = add nsw i64 %40, %42
  %44 = call i32 @fseek(%struct._IO_FILE* %39, i64 %43, i32 0)
  %45 = load i32* %tag, align 4
  %46 = icmp eq i32 %45, 1049
  br i1 %46, label %47, label %118

; <label>:47                                      ; preds = %32
  %48 = call i32 @get4()
  store i32 0, i32* %i, align 4
  br label %49

; <label>:49                                      ; preds = %58, %47
  %50 = load i32* %i, align 4
  %51 = icmp slt i32 %50, 8
  br i1 %51, label %52, label %61

; <label>:52                                      ; preds = %49
  %53 = call double @getreal(i32 11)
  %54 = fptrunc double %53 to float
  %55 = load i32* %i, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 %56
  store float %54, float* %57, align 4
  br label %58

; <label>:58                                      ; preds = %52
  %59 = load i32* %i, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %i, align 4
  br label %49

; <label>:61                                      ; preds = %49
  %62 = load float* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 6), align 4
  %63 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 7
  %64 = load float* %63, align 4
  %65 = fsub float %62, %64
  %66 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 6
  %67 = load float* %66, align 4
  %68 = fmul float %65, %67
  %69 = fadd float %68, 1.000000e+00
  %70 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 3
  %71 = load float* %70, align 4
  %72 = fadd float %71, %69
  store float %72, float* %70, align 4
  store i32 0, i32* %i, align 4
  br label %73

; <label>:73                                      ; preds = %114, %61
  %74 = load i32* %i, align 4
  %75 = icmp slt i32 %74, 65536
  br i1 %75, label %76, label %117

; <label>:76                                      ; preds = %73
  %77 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 5
  %78 = load float* %77, align 4
  %79 = load i32* %i, align 4
  %80 = sitofp i32 %79 to float
  %81 = fmul float %78, %80
  %82 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 3
  %83 = load float* %82, align 4
  %84 = fadd float %81, %83
  %85 = load i32* %i, align 4
  %86 = sitofp i32 %85 to float
  %87 = fmul float %84, %86
  %88 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 1
  %89 = load float* %88, align 4
  %90 = fadd float %87, %89
  store float %90, float* %num, align 4
  %91 = load float* %num, align 4
  %92 = fcmp olt float %91, 6.553500e+04
  br i1 %92, label %93, label %95

; <label>:93                                      ; preds = %76
  %94 = load float* %num, align 4
  br label %96

; <label>:95                                      ; preds = %76
  br label %96

; <label>:96                                      ; preds = %95, %93
  %97 = phi float [ %94, %93 ], [ 6.553500e+04, %95 ]
  %98 = fcmp ogt float 0.000000e+00, %97
  br i1 %98, label %99, label %100

; <label>:99                                      ; preds = %96
  br label %108

; <label>:100                                     ; preds = %96
  %101 = load float* %num, align 4
  %102 = fcmp olt float %101, 6.553500e+04
  br i1 %102, label %103, label %105

; <label>:103                                     ; preds = %100
  %104 = load float* %num, align 4
  br label %106

; <label>:105                                     ; preds = %100
  br label %106

; <label>:106                                     ; preds = %105, %103
  %107 = phi float [ %104, %103 ], [ 6.553500e+04, %105 ]
  br label %108

; <label>:108                                     ; preds = %106, %99
  %109 = phi float [ 0.000000e+00, %99 ], [ %107, %106 ]
  %110 = fptoui float %109 to i16
  %111 = load i32* %i, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [65536 x i16]* %curve, i32 0, i64 %112
  store i16 %110, i16* %113, align 2
  br label %114

; <label>:114                                     ; preds = %108
  %115 = load i32* %i, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %i, align 4
  br label %73

; <label>:117                                     ; preds = %73
  br label %193

; <label>:118                                     ; preds = %32
  %119 = load i32* %tag, align 4
  %120 = icmp eq i32 %119, 1050
  br i1 %120, label %121, label %276

; <label>:121                                     ; preds = %118
  store i32 0, i32* %i, align 4
  br label %122

; <label>:122                                     ; preds = %131, %121
  %123 = load i32* %i, align 4
  %124 = icmp slt i32 %123, 4
  br i1 %124, label %125, label %134

; <label>:125                                     ; preds = %122
  %126 = call double @getreal(i32 11)
  %127 = fptrunc double %126 to float
  %128 = load i32* %i, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 %129
  store float %127, float* %130, align 4
  br label %131

; <label>:131                                     ; preds = %125
  %132 = load i32* %i, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %i, align 4
  br label %122

; <label>:134                                     ; preds = %122
  store i32 0, i32* %i, align 4
  br label %135

; <label>:135                                     ; preds = %189, %134
  %136 = load i32* %i, align 4
  %137 = icmp slt i32 %136, 65536
  br i1 %137, label %138, label %192

; <label>:138                                     ; preds = %135
  store float 0.000000e+00, float* %num, align 4
  store i32 4, i32* %j, align 4
  br label %139

; <label>:139                                     ; preds = %143, %138
  %140 = load i32* %j, align 4
  %141 = add nsw i32 %140, -1
  store i32 %141, i32* %j, align 4
  %142 = icmp ne i32 %140, 0
  br i1 %142, label %143, label %153

; <label>:143                                     ; preds = %139
  %144 = load float* %num, align 4
  %145 = load i32* %i, align 4
  %146 = sitofp i32 %145 to float
  %147 = fmul float %144, %146
  %148 = load i32* %j, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [8 x float]* %poly, i32 0, i64 %149
  %151 = load float* %150, align 4
  %152 = fadd float %147, %151
  store float %152, float* %num, align 4
  br label %139

; <label>:153                                     ; preds = %139
  %154 = load float* %num, align 4
  %155 = load i32* %i, align 4
  %156 = sitofp i32 %155 to float
  %157 = fadd float %154, %156
  %158 = fcmp olt float %157, 6.553500e+04
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %153
  %160 = load float* %num, align 4
  %161 = load i32* %i, align 4
  %162 = sitofp i32 %161 to float
  %163 = fadd float %160, %162
  br label %165

; <label>:164                                     ; preds = %153
  br label %165

; <label>:165                                     ; preds = %164, %159
  %166 = phi float [ %163, %159 ], [ 6.553500e+04, %164 ]
  %167 = fcmp ogt float 0.000000e+00, %166
  br i1 %167, label %168, label %169

; <label>:168                                     ; preds = %165
  br label %183

; <label>:169                                     ; preds = %165
  %170 = load float* %num, align 4
  %171 = load i32* %i, align 4
  %172 = sitofp i32 %171 to float
  %173 = fadd float %170, %172
  %174 = fcmp olt float %173, 6.553500e+04
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %169
  %176 = load float* %num, align 4
  %177 = load i32* %i, align 4
  %178 = sitofp i32 %177 to float
  %179 = fadd float %176, %178
  br label %181

; <label>:180                                     ; preds = %169
  br label %181

; <label>:181                                     ; preds = %180, %175
  %182 = phi float [ %179, %175 ], [ 6.553500e+04, %180 ]
  br label %183

; <label>:183                                     ; preds = %181, %168
  %184 = phi float [ 0.000000e+00, %168 ], [ %182, %181 ]
  %185 = fptoui float %184 to i16
  %186 = load i32* %i, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [65536 x i16]* %curve, i32 0, i64 %187
  store i16 %185, i16* %188, align 2
  br label %189

; <label>:189                                     ; preds = %183
  %190 = load i32* %i, align 4
  %191 = add nsw i32 %190, 1
  store i32 %191, i32* %i, align 4
  br label %135

; <label>:192                                     ; preds = %135
  br label %193

; <label>:193                                     ; preds = %192, %117
  store i32 0, i32* %row, align 4
  br label %194

; <label>:194                                     ; preds = %272, %193
  %195 = load i32* %row, align 4
  %196 = load i16* @height, align 2
  %197 = zext i16 %196 to i32
  %198 = icmp ult i32 %195, %197
  br i1 %198, label %199, label %275

; <label>:199                                     ; preds = %194
  %200 = load i32* %tag, align 4
  %201 = and i32 %200, 1
  %202 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 4), align 4
  %203 = mul i32 %201, %202
  store i32 %203, i32* %col, align 4
  br label %204

; <label>:204                                     ; preds = %268, %199
  %205 = load i32* %col, align 4
  %206 = load i16* @width, align 2
  %207 = zext i16 %206 to i32
  %208 = icmp ult i32 %205, %207
  br i1 %208, label %209, label %271

; <label>:209                                     ; preds = %204
  %210 = load i32* @filters, align 4
  %211 = load i32* %row, align 4
  %212 = shl i32 %211, 1
  %213 = and i32 %212, 14
  %214 = load i32* %col, align 4
  %215 = and i32 %214, 1
  %216 = add i32 %213, %215
  %217 = shl i32 %216, 1
  %218 = lshr i32 %210, %217
  %219 = and i32 %218, 3
  %220 = zext i32 %219 to i64
  %221 = load i32* %row, align 4
  %222 = load i16* @shrink, align 2
  %223 = zext i16 %222 to i32
  %224 = lshr i32 %221, %223
  %225 = load i16* @iwidth, align 2
  %226 = zext i16 %225 to i32
  %227 = mul i32 %224, %226
  %228 = load i32* %col, align 4
  %229 = load i16* @shrink, align 2
  %230 = zext i16 %229 to i32
  %231 = lshr i32 %228, %230
  %232 = add i32 %227, %231
  %233 = zext i32 %232 to i64
  %234 = load [4 x i16]** @image, align 8
  %235 = getelementptr inbounds [4 x i16]* %234, i64 %233
  %236 = getelementptr inbounds [4 x i16]* %235, i32 0, i64 %220
  %237 = load i16* %236, align 2
  %238 = zext i16 %237 to i64
  %239 = getelementptr inbounds [65536 x i16]* %curve, i32 0, i64 %238
  %240 = load i16* %239, align 2
  %241 = load i32* @filters, align 4
  %242 = load i32* %row, align 4
  %243 = shl i32 %242, 1
  %244 = and i32 %243, 14
  %245 = load i32* %col, align 4
  %246 = and i32 %245, 1
  %247 = add i32 %244, %246
  %248 = shl i32 %247, 1
  %249 = lshr i32 %241, %248
  %250 = and i32 %249, 3
  %251 = zext i32 %250 to i64
  %252 = load i32* %row, align 4
  %253 = load i16* @shrink, align 2
  %254 = zext i16 %253 to i32
  %255 = lshr i32 %252, %254
  %256 = load i16* @iwidth, align 2
  %257 = zext i16 %256 to i32
  %258 = mul i32 %255, %257
  %259 = load i32* %col, align 4
  %260 = load i16* @shrink, align 2
  %261 = zext i16 %260 to i32
  %262 = lshr i32 %259, %261
  %263 = add i32 %258, %262
  %264 = zext i32 %263 to i64
  %265 = load [4 x i16]** @image, align 8
  %266 = getelementptr inbounds [4 x i16]* %265, i64 %264
  %267 = getelementptr inbounds [4 x i16]* %266, i32 0, i64 %251
  store i16 %240, i16* %267, align 2
  br label %268

; <label>:268                                     ; preds = %209
  %269 = load i32* %col, align 4
  %270 = add i32 %269, 1
  store i32 %270, i32* %col, align 4
  br label %204

; <label>:271                                     ; preds = %204
  br label %272

; <label>:272                                     ; preds = %271
  %273 = load i32* %row, align 4
  %274 = add i32 %273, 1
  store i32 %274, i32* %row, align 4
  br label %194

; <label>:275                                     ; preds = %194
  br label %628

; <label>:276                                     ; preds = %118
  %277 = load i32* %tag, align 4
  %278 = icmp eq i32 %277, 1024
  br i1 %278, label %279, label %587

; <label>:279                                     ; preds = %276
  br label %280

; <label>:280                                     ; preds = %585, %508, %302, %279
  %281 = load i32* %len, align 4
  %282 = sub nsw i32 %281, 8
  store i32 %282, i32* %len, align 4
  %283 = icmp sge i32 %282, 0
  br i1 %283, label %284, label %586

; <label>:284                                     ; preds = %280
  %285 = call zeroext i16 @get2()
  %286 = zext i16 %285 to i32
  %287 = load i16* @left_margin, align 2
  %288 = zext i16 %287 to i32
  %289 = sub nsw i32 %286, %288
  store i32 %289, i32* %col, align 4
  %290 = call zeroext i16 @get2()
  %291 = zext i16 %290 to i32
  %292 = load i16* @top_margin, align 2
  %293 = zext i16 %292 to i32
  %294 = sub nsw i32 %291, %293
  store i32 %294, i32* %row, align 4
  %295 = call zeroext i16 @get2()
  %296 = zext i16 %295 to i32
  store i32 %296, i32* %type, align 4
  %297 = call zeroext i16 @get2()
  %298 = load i32* %col, align 4
  %299 = load i16* @width, align 2
  %300 = zext i16 %299 to i32
  %301 = icmp uge i32 %298, %300
  br i1 %301, label %302, label %303

; <label>:302                                     ; preds = %284
  br label %280

; <label>:303                                     ; preds = %284
  %304 = load i32* %type, align 4
  %305 = icmp eq i32 %304, 131
  br i1 %305, label %306, label %500

; <label>:306                                     ; preds = %303
  store i32 0, i32* %row, align 4
  br label %307

; <label>:307                                     ; preds = %496, %306
  %308 = load i32* %row, align 4
  %309 = load i16* @height, align 2
  %310 = zext i16 %309 to i32
  %311 = icmp ult i32 %308, %310
  br i1 %311, label %312, label %499

; <label>:312                                     ; preds = %307
  %313 = load i32* @filters, align 4
  %314 = load i32* %row, align 4
  %315 = shl i32 %314, 1
  %316 = and i32 %315, 14
  %317 = load i32* %col, align 4
  %318 = and i32 %317, 1
  %319 = add i32 %316, %318
  %320 = shl i32 %319, 1
  %321 = lshr i32 %313, %320
  %322 = and i32 %321, 3
  %323 = icmp eq i32 %322, 1
  br i1 %323, label %324, label %423

; <label>:324                                     ; preds = %312
  store i32 0, i32* %i, align 4
  store i32 0, i32* %sum, align 4
  br label %325

; <label>:325                                     ; preds = %351, %324
  %326 = load i32* %i, align 4
  %327 = icmp slt i32 %326, 4
  br i1 %327, label %328, label %354

; <label>:328                                     ; preds = %325
  %329 = load i32* %row, align 4
  %330 = load i32* %i, align 4
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %331
  %333 = getelementptr inbounds [2 x i8]* %332, i32 0, i64 0
  %334 = load i8* %333, align 1
  %335 = sext i8 %334 to i32
  %336 = add i32 %329, %335
  %337 = load i32* %col, align 4
  %338 = load i32* %i, align 4
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %339
  %341 = getelementptr inbounds [2 x i8]* %340, i32 0, i64 1
  %342 = load i8* %341, align 1
  %343 = sext i8 %342 to i32
  %344 = add i32 %337, %343
  %345 = call i32 @bayer(i32 %336, i32 %344)
  %346 = load i32* %i, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 %347
  store i32 %345, i32* %348, align 4
  %349 = load i32* %sum, align 4
  %350 = add nsw i32 %349, %345
  store i32 %350, i32* %sum, align 4
  br label %351

; <label>:351                                     ; preds = %328
  %352 = load i32* %i, align 4
  %353 = add nsw i32 %352, 1
  store i32 %353, i32* %i, align 4
  br label %325

; <label>:354                                     ; preds = %325
  store i32 0, i32* %i, align 4
  store i32 0, i32* %max, align 4
  br label %355

; <label>:355                                     ; preds = %382, %354
  %356 = load i32* %i, align 4
  %357 = icmp slt i32 %356, 4
  br i1 %357, label %358, label %385

; <label>:358                                     ; preds = %355
  %359 = load i32* %i, align 4
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 %360
  %362 = load i32* %361, align 4
  %363 = shl i32 %362, 2
  %364 = load i32* %sum, align 4
  %365 = sub nsw i32 %363, %364
  %366 = call i32 @abs(i32 %365) #9
  %367 = load i32* %i, align 4
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds [4 x i32]* %dev, i32 0, i64 %368
  store i32 %366, i32* %369, align 4
  %370 = load i32* %max, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [4 x i32]* %dev, i32 0, i64 %371
  %373 = load i32* %372, align 4
  %374 = load i32* %i, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds [4 x i32]* %dev, i32 0, i64 %375
  %377 = load i32* %376, align 4
  %378 = icmp slt i32 %373, %377
  br i1 %378, label %379, label %381

; <label>:379                                     ; preds = %358
  %380 = load i32* %i, align 4
  store i32 %380, i32* %max, align 4
  br label %381

; <label>:381                                     ; preds = %379, %358
  br label %382

; <label>:382                                     ; preds = %381
  %383 = load i32* %i, align 4
  %384 = add nsw i32 %383, 1
  store i32 %384, i32* %i, align 4
  br label %355

; <label>:385                                     ; preds = %355
  %386 = load i32* %sum, align 4
  %387 = load i32* %max, align 4
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 %388
  %390 = load i32* %389, align 4
  %391 = sub nsw i32 %386, %390
  %392 = sitofp i32 %391 to double
  %393 = fdiv double %392, 3.000000e+00
  %394 = fadd double %393, 5.000000e-01
  %395 = fptoui double %394 to i16
  %396 = load i32* @filters, align 4
  %397 = load i32* %row, align 4
  %398 = shl i32 %397, 1
  %399 = and i32 %398, 14
  %400 = load i32* %col, align 4
  %401 = and i32 %400, 1
  %402 = add i32 %399, %401
  %403 = shl i32 %402, 1
  %404 = lshr i32 %396, %403
  %405 = and i32 %404, 3
  %406 = zext i32 %405 to i64
  %407 = load i32* %row, align 4
  %408 = load i16* @shrink, align 2
  %409 = zext i16 %408 to i32
  %410 = lshr i32 %407, %409
  %411 = load i16* @iwidth, align 2
  %412 = zext i16 %411 to i32
  %413 = mul i32 %410, %412
  %414 = load i32* %col, align 4
  %415 = load i16* @shrink, align 2
  %416 = zext i16 %415 to i32
  %417 = lshr i32 %414, %416
  %418 = add i32 %413, %417
  %419 = zext i32 %418 to i64
  %420 = load [4 x i16]** @image, align 8
  %421 = getelementptr inbounds [4 x i16]* %420, i64 %419
  %422 = getelementptr inbounds [4 x i16]* %421, i32 0, i64 %406
  store i16 %395, i16* %422, align 2
  br label %495

; <label>:423                                     ; preds = %312
  store i32 0, i32* %sum, align 4
  store i32 8, i32* %i, align 4
  br label %424

; <label>:424                                     ; preds = %447, %423
  %425 = load i32* %i, align 4
  %426 = icmp slt i32 %425, 12
  br i1 %426, label %427, label %450

; <label>:427                                     ; preds = %424
  %428 = load i32* %row, align 4
  %429 = load i32* %i, align 4
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %430
  %432 = getelementptr inbounds [2 x i8]* %431, i32 0, i64 0
  %433 = load i8* %432, align 1
  %434 = sext i8 %433 to i32
  %435 = add i32 %428, %434
  %436 = load i32* %col, align 4
  %437 = load i32* %i, align 4
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %438
  %440 = getelementptr inbounds [2 x i8]* %439, i32 0, i64 1
  %441 = load i8* %440, align 1
  %442 = sext i8 %441 to i32
  %443 = add i32 %436, %442
  %444 = call i32 @bayer(i32 %435, i32 %443)
  %445 = load i32* %sum, align 4
  %446 = add nsw i32 %445, %444
  store i32 %446, i32* %sum, align 4
  br label %447

; <label>:447                                     ; preds = %427
  %448 = load i32* %i, align 4
  %449 = add nsw i32 %448, 1
  store i32 %449, i32* %i, align 4
  br label %424

; <label>:450                                     ; preds = %424
  %451 = load i32* %sum, align 4
  %452 = sitofp i32 %451 to double
  %453 = fmul double %452, 7.322330e-02
  %454 = fadd double 5.000000e-01, %453
  %455 = load i32* %row, align 4
  %456 = load i32* %col, align 4
  %457 = sub i32 %456, 2
  %458 = call i32 @bayer(i32 %455, i32 %457)
  %459 = load i32* %row, align 4
  %460 = load i32* %col, align 4
  %461 = add i32 %460, 2
  %462 = call i32 @bayer(i32 %459, i32 %461)
  %463 = add nsw i32 %458, %462
  %464 = sitofp i32 %463 to double
  %465 = fmul double %464, 3.535534e-01
  %466 = fadd double %454, %465
  %467 = fptoui double %466 to i16
  %468 = load i32* @filters, align 4
  %469 = load i32* %row, align 4
  %470 = shl i32 %469, 1
  %471 = and i32 %470, 14
  %472 = load i32* %col, align 4
  %473 = and i32 %472, 1
  %474 = add i32 %471, %473
  %475 = shl i32 %474, 1
  %476 = lshr i32 %468, %475
  %477 = and i32 %476, 3
  %478 = zext i32 %477 to i64
  %479 = load i32* %row, align 4
  %480 = load i16* @shrink, align 2
  %481 = zext i16 %480 to i32
  %482 = lshr i32 %479, %481
  %483 = load i16* @iwidth, align 2
  %484 = zext i16 %483 to i32
  %485 = mul i32 %482, %484
  %486 = load i32* %col, align 4
  %487 = load i16* @shrink, align 2
  %488 = zext i16 %487 to i32
  %489 = lshr i32 %486, %488
  %490 = add i32 %485, %489
  %491 = zext i32 %490 to i64
  %492 = load [4 x i16]** @image, align 8
  %493 = getelementptr inbounds [4 x i16]* %492, i64 %491
  %494 = getelementptr inbounds [4 x i16]* %493, i32 0, i64 %478
  store i16 %467, i16* %494, align 2
  br label %495

; <label>:495                                     ; preds = %450, %385
  br label %496

; <label>:496                                     ; preds = %495
  %497 = load i32* %row, align 4
  %498 = add i32 %497, 1
  store i32 %498, i32* %row, align 4
  br label %307

; <label>:499                                     ; preds = %307
  br label %585

; <label>:500                                     ; preds = %303
  %501 = load i32* %type, align 4
  %502 = icmp eq i32 %501, 129
  br i1 %502, label %503, label %584

; <label>:503                                     ; preds = %500
  %504 = load i32* %row, align 4
  %505 = load i16* @height, align 2
  %506 = zext i16 %505 to i32
  %507 = icmp uge i32 %504, %506
  br i1 %507, label %508, label %509

; <label>:508                                     ; preds = %503
  br label %280

; <label>:509                                     ; preds = %503
  %510 = load i32* @filters, align 4
  %511 = load i32* %row, align 4
  %512 = shl i32 %511, 1
  %513 = and i32 %512, 14
  %514 = load i32* %col, align 4
  %515 = and i32 %514, 1
  %516 = add i32 %513, %515
  %517 = shl i32 %516, 1
  %518 = lshr i32 %510, %517
  %519 = and i32 %518, 3
  %520 = icmp ne i32 %519, 1
  %521 = zext i1 %520 to i32
  %522 = mul nsw i32 %521, 4
  store i32 %522, i32* %j, align 4
  store i32 0, i32* %sum, align 4
  %523 = load i32* %j, align 4
  store i32 %523, i32* %i, align 4
  br label %524

; <label>:524                                     ; preds = %549, %509
  %525 = load i32* %i, align 4
  %526 = load i32* %j, align 4
  %527 = add nsw i32 %526, 8
  %528 = icmp slt i32 %525, %527
  br i1 %528, label %529, label %552

; <label>:529                                     ; preds = %524
  %530 = load i32* %row, align 4
  %531 = load i32* %i, align 4
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %532
  %534 = getelementptr inbounds [2 x i8]* %533, i32 0, i64 0
  %535 = load i8* %534, align 1
  %536 = sext i8 %535 to i32
  %537 = add i32 %530, %536
  %538 = load i32* %col, align 4
  %539 = load i32* %i, align 4
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds [12 x [2 x i8]]* @phase_one_correct.dir, i32 0, i64 %540
  %542 = getelementptr inbounds [2 x i8]* %541, i32 0, i64 1
  %543 = load i8* %542, align 1
  %544 = sext i8 %543 to i32
  %545 = add i32 %538, %544
  %546 = call i32 @bayer(i32 %537, i32 %545)
  %547 = load i32* %sum, align 4
  %548 = add nsw i32 %547, %546
  store i32 %548, i32* %sum, align 4
  br label %549

; <label>:549                                     ; preds = %529
  %550 = load i32* %i, align 4
  %551 = add nsw i32 %550, 1
  store i32 %551, i32* %i, align 4
  br label %524

; <label>:552                                     ; preds = %524
  %553 = load i32* %sum, align 4
  %554 = add nsw i32 %553, 4
  %555 = ashr i32 %554, 3
  %556 = trunc i32 %555 to i16
  %557 = load i32* @filters, align 4
  %558 = load i32* %row, align 4
  %559 = shl i32 %558, 1
  %560 = and i32 %559, 14
  %561 = load i32* %col, align 4
  %562 = and i32 %561, 1
  %563 = add i32 %560, %562
  %564 = shl i32 %563, 1
  %565 = lshr i32 %557, %564
  %566 = and i32 %565, 3
  %567 = zext i32 %566 to i64
  %568 = load i32* %row, align 4
  %569 = load i16* @shrink, align 2
  %570 = zext i16 %569 to i32
  %571 = lshr i32 %568, %570
  %572 = load i16* @iwidth, align 2
  %573 = zext i16 %572 to i32
  %574 = mul i32 %571, %573
  %575 = load i32* %col, align 4
  %576 = load i16* @shrink, align 2
  %577 = zext i16 %576 to i32
  %578 = lshr i32 %575, %577
  %579 = add i32 %574, %578
  %580 = zext i32 %579 to i64
  %581 = load [4 x i16]** @image, align 8
  %582 = getelementptr inbounds [4 x i16]* %581, i64 %580
  %583 = getelementptr inbounds [4 x i16]* %582, i32 0, i64 %567
  store i16 %556, i16* %583, align 2
  br label %584

; <label>:584                                     ; preds = %552, %500
  br label %585

; <label>:585                                     ; preds = %584, %499
  br label %280

; <label>:586                                     ; preds = %280
  br label %627

; <label>:587                                     ; preds = %276
  %588 = load i32* %tag, align 4
  %589 = icmp eq i32 %588, 1025
  br i1 %589, label %590, label %591

; <label>:590                                     ; preds = %587
  call void @phase_one_flat_field(i32 1, i32 2)
  br label %626

; <label>:591                                     ; preds = %587
  %592 = load i32* %tag, align 4
  %593 = icmp eq i32 %592, 1046
  br i1 %593, label %597, label %594

; <label>:594                                     ; preds = %591
  %595 = load i32* %tag, align 4
  %596 = icmp eq i32 %595, 1040
  br i1 %596, label %597, label %598

; <label>:597                                     ; preds = %594, %591
  call void @phase_one_flat_field(i32 0, i32 2)
  br label %625

; <label>:598                                     ; preds = %594
  %599 = load i32* %tag, align 4
  %600 = icmp eq i32 %599, 1035
  br i1 %600, label %601, label %602

; <label>:601                                     ; preds = %598
  call void @phase_one_flat_field(i32 0, i32 4)
  br label %624

; <label>:602                                     ; preds = %598
  %603 = load i32* %tag, align 4
  %604 = icmp eq i32 %603, 1042
  br i1 %604, label %605, label %623

; <label>:605                                     ; preds = %602
  %606 = load %struct._IO_FILE** @ifp, align 8
  %607 = call i32 @fseek(%struct._IO_FILE* %606, i64 36, i32 1)
  %608 = call zeroext i16 @get2()
  %609 = zext i16 %608 to i32
  %610 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 5), align 4
  %611 = sub nsw i32 %609, %610
  %612 = call i32 @abs(i32 %611) #9
  store i32 %612, i32* %diff, align 4
  %613 = load i32* %mindiff, align 4
  %614 = load i32* %diff, align 4
  %615 = icmp sgt i32 %613, %614
  br i1 %615, label %616, label %622

; <label>:616                                     ; preds = %605
  %617 = load i32* %diff, align 4
  store i32 %617, i32* %mindiff, align 4
  %618 = load %struct._IO_FILE** @ifp, align 8
  %619 = call i64 @ftell(%struct._IO_FILE* %618)
  %620 = sub nsw i64 %619, 38
  %621 = trunc i64 %620 to i32
  store i32 %621, i32* %off_412, align 4
  br label %622

; <label>:622                                     ; preds = %616, %605
  br label %623

; <label>:623                                     ; preds = %622, %602
  br label %624

; <label>:624                                     ; preds = %623, %601
  br label %625

; <label>:625                                     ; preds = %624, %597
  br label %626

; <label>:626                                     ; preds = %625, %590
  br label %627

; <label>:627                                     ; preds = %626, %586
  br label %628

; <label>:628                                     ; preds = %627, %275
  br label %629

; <label>:629                                     ; preds = %628
  %630 = load %struct._IO_FILE** @ifp, align 8
  %631 = load i32* %save, align 4
  %632 = zext i32 %631 to i64
  %633 = call i32 @fseek(%struct._IO_FILE* %630, i64 %632, i32 0)
  br label %28

; <label>:634                                     ; preds = %28
  %635 = load i32* %off_412, align 4
  %636 = icmp ne i32 %635, 0
  br i1 %636, label %637, label %1014

; <label>:637                                     ; preds = %634
  %638 = load %struct._IO_FILE** @ifp, align 8
  %639 = load i32* %off_412, align 4
  %640 = sext i32 %639 to i64
  %641 = call i32 @fseek(%struct._IO_FILE* %638, i64 %640, i32 0)
  store i32 0, i32* %i, align 4
  br label %642

; <label>:642                                     ; preds = %651, %637
  %643 = load i32* %i, align 4
  %644 = icmp slt i32 %643, 9
  br i1 %644, label %645, label %654

; <label>:645                                     ; preds = %642
  %646 = call i32 @get4()
  %647 = and i32 %646, 32767
  %648 = load i32* %i, align 4
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %649
  store i32 %647, i32* %650, align 4
  br label %651

; <label>:651                                     ; preds = %645
  %652 = load i32* %i, align 4
  %653 = add nsw i32 %652, 1
  store i32 %653, i32* %i, align 4
  br label %642

; <label>:654                                     ; preds = %642
  %655 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %656 = load i32* %655, align 4
  %657 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %658 = load i32* %657, align 4
  %659 = mul nsw i32 %656, %658
  %660 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 2
  %661 = load i32* %660, align 4
  %662 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 4
  %663 = load i32* %662, align 4
  %664 = mul nsw i32 %661, %663
  %665 = add nsw i32 %659, %664
  %666 = sext i32 %665 to i64
  %667 = call noalias i8* @calloc(i64 %666, i64 6) #4
  %668 = bitcast i8* %667 to float*
  %669 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  store float* %668, float** %669, align 8
  %670 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %671 = load float** %670, align 8
  %672 = bitcast float* %671 to i8*
  call void @merror(i8* %672, i8* getelementptr inbounds ([20 x i8]* @.str18, i32 0, i32 0))
  %673 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %674 = load float** %673, align 8
  %675 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %676 = load i32* %675, align 4
  %677 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %678 = load i32* %677, align 4
  %679 = mul nsw i32 %676, %678
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds float* %674, i64 %680
  %682 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 1
  store float* %681, float** %682, align 8
  %683 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 1
  %684 = load float** %683, align 8
  %685 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 2
  %686 = load i32* %685, align 4
  %687 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 4
  %688 = load i32* %687, align 4
  %689 = mul nsw i32 %686, %688
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds float* %684, i64 %690
  %692 = bitcast float* %691 to i16*
  %693 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  store i16* %692, i16** %693, align 8
  %694 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %695 = load i16** %694, align 8
  %696 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %697 = load i32* %696, align 4
  %698 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %699 = load i32* %698, align 4
  %700 = mul nsw i32 %697, %699
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds i16* %695, i64 %701
  %703 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 1
  store i16* %702, i16** %703, align 8
  %704 = call zeroext i16 @get2()
  store i32 0, i32* %i, align 4
  br label %705

; <label>:705                                     ; preds = %737, %654
  %706 = load i32* %i, align 4
  %707 = icmp slt i32 %706, 2
  br i1 %707, label %708, label %740

; <label>:708                                     ; preds = %705
  store i32 0, i32* %j, align 4
  br label %709

; <label>:709                                     ; preds = %733, %708
  %710 = load i32* %j, align 4
  %711 = load i32* %i, align 4
  %712 = add nsw i32 %711, 1
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %713
  %715 = load i32* %714, align 4
  %716 = load i32* %i, align 4
  %717 = add nsw i32 %716, 3
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %718
  %720 = load i32* %719, align 4
  %721 = mul nsw i32 %715, %720
  %722 = icmp slt i32 %710, %721
  br i1 %722, label %723, label %736

; <label>:723                                     ; preds = %709
  %724 = call double @getreal(i32 11)
  %725 = fptrunc double %724 to float
  %726 = load i32* %j, align 4
  %727 = sext i32 %726 to i64
  %728 = load i32* %i, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 %729
  %731 = load float** %730, align 8
  %732 = getelementptr inbounds float* %731, i64 %727
  store float %725, float* %732, align 4
  br label %733

; <label>:733                                     ; preds = %723
  %734 = load i32* %j, align 4
  %735 = add nsw i32 %734, 1
  store i32 %735, i32* %j, align 4
  br label %709

; <label>:736                                     ; preds = %709
  br label %737

; <label>:737                                     ; preds = %736
  %738 = load i32* %i, align 4
  %739 = add nsw i32 %738, 1
  store i32 %739, i32* %i, align 4
  br label %705

; <label>:740                                     ; preds = %705
  store i32 0, i32* %i, align 4
  br label %741

; <label>:741                                     ; preds = %772, %740
  %742 = load i32* %i, align 4
  %743 = icmp slt i32 %742, 2
  br i1 %743, label %744, label %775

; <label>:744                                     ; preds = %741
  store i32 0, i32* %j, align 4
  br label %745

; <label>:745                                     ; preds = %768, %744
  %746 = load i32* %j, align 4
  %747 = load i32* %i, align 4
  %748 = add nsw i32 %747, 1
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %749
  %751 = load i32* %750, align 4
  %752 = load i32* %i, align 4
  %753 = add nsw i32 %752, 3
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 %754
  %756 = load i32* %755, align 4
  %757 = mul nsw i32 %751, %756
  %758 = icmp slt i32 %746, %757
  br i1 %758, label %759, label %771

; <label>:759                                     ; preds = %745
  %760 = call zeroext i16 @get2()
  %761 = load i32* %j, align 4
  %762 = sext i32 %761 to i64
  %763 = load i32* %i, align 4
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 %764
  %766 = load i16** %765, align 8
  %767 = getelementptr inbounds i16* %766, i64 %762
  store i16 %760, i16* %767, align 2
  br label %768

; <label>:768                                     ; preds = %759
  %769 = load i32* %j, align 4
  %770 = add nsw i32 %769, 1
  store i32 %770, i32* %j, align 4
  br label %745

; <label>:771                                     ; preds = %745
  br label %772

; <label>:772                                     ; preds = %771
  %773 = load i32* %i, align 4
  %774 = add nsw i32 %773, 1
  store i32 %774, i32* %i, align 4
  br label %741

; <label>:775                                     ; preds = %741
  store i32 0, i32* %row, align 4
  br label %776

; <label>:776                                     ; preds = %1007, %775
  %777 = load i32* %row, align 4
  %778 = load i16* @height, align 2
  %779 = zext i16 %778 to i32
  %780 = icmp ult i32 %777, %779
  br i1 %780, label %781, label %1010

; <label>:781                                     ; preds = %776
  store i32 0, i32* %col, align 4
  br label %782

; <label>:782                                     ; preds = %1003, %781
  %783 = load i32* %col, align 4
  %784 = load i16* @width, align 2
  %785 = zext i16 %784 to i32
  %786 = icmp ult i32 %783, %785
  br i1 %786, label %787, label %1006

; <label>:787                                     ; preds = %782
  %788 = load i32* %col, align 4
  %789 = uitofp i32 %788 to float
  %790 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 3
  %791 = load i32* %790, align 4
  %792 = sitofp i32 %791 to float
  %793 = fmul float %789, %792
  %794 = load i16* @raw_width, align 2
  %795 = zext i16 %794 to i32
  %796 = sitofp i32 %795 to float
  %797 = fdiv float %793, %796
  store float %797, float* %cfrac, align 4
  %798 = load float* %cfrac, align 4
  %799 = fptosi float %798 to i32
  store i32 %799, i32* %cip, align 4
  %800 = sitofp i32 %799 to float
  %801 = load float* %cfrac, align 4
  %802 = fsub float %801, %800
  store float %802, float* %cfrac, align 4
  %803 = load i32* @filters, align 4
  %804 = load i32* %row, align 4
  %805 = shl i32 %804, 1
  %806 = and i32 %805, 14
  %807 = load i32* %col, align 4
  %808 = and i32 %807, 1
  %809 = add i32 %806, %808
  %810 = shl i32 %809, 1
  %811 = lshr i32 %803, %810
  %812 = and i32 %811, 3
  %813 = zext i32 %812 to i64
  %814 = load i32* %row, align 4
  %815 = load i16* @shrink, align 2
  %816 = zext i16 %815 to i32
  %817 = lshr i32 %814, %816
  %818 = load i16* @iwidth, align 2
  %819 = zext i16 %818 to i32
  %820 = mul i32 %817, %819
  %821 = load i32* %col, align 4
  %822 = load i16* @shrink, align 2
  %823 = zext i16 %822 to i32
  %824 = lshr i32 %821, %823
  %825 = add i32 %820, %824
  %826 = zext i32 %825 to i64
  %827 = load [4 x i16]** @image, align 8
  %828 = getelementptr inbounds [4 x i16]* %827, i64 %826
  %829 = getelementptr inbounds [4 x i16]* %828, i32 0, i64 %813
  %830 = load i16* %829, align 2
  %831 = zext i16 %830 to i32
  %832 = sitofp i32 %831 to double
  %833 = fmul double %832, 5.000000e-01
  %834 = fptrunc double %833 to float
  store float %834, float* %num, align 4
  %835 = load i32* %cip, align 4
  store i32 %835, i32* %i, align 4
  br label %836

; <label>:836                                     ; preds = %932, %787
  %837 = load i32* %i, align 4
  %838 = load i32* %cip, align 4
  %839 = add nsw i32 %838, 2
  %840 = icmp slt i32 %837, %839
  br i1 %840, label %841, label %935

; <label>:841                                     ; preds = %836
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %842

; <label>:842                                     ; preds = %865, %841
  %843 = load i32* %j, align 4
  %844 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %845 = load i32* %844, align 4
  %846 = icmp slt i32 %843, %845
  br i1 %846, label %847, label %868

; <label>:847                                     ; preds = %842
  %848 = load float* %num, align 4
  %849 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %850 = load i32* %849, align 4
  %851 = load i32* %i, align 4
  %852 = mul nsw i32 %850, %851
  %853 = load i32* %j, align 4
  %854 = add nsw i32 %852, %853
  store i32 %854, i32* %k, align 4
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %857 = load i16** %856, align 8
  %858 = getelementptr inbounds i16* %857, i64 %855
  %859 = load i16* %858, align 2
  %860 = zext i16 %859 to i32
  %861 = sitofp i32 %860 to float
  %862 = fcmp olt float %848, %861
  br i1 %862, label %863, label %864

; <label>:863                                     ; preds = %847
  br label %868

; <label>:864                                     ; preds = %847
  br label %865

; <label>:865                                     ; preds = %864
  %866 = load i32* %j, align 4
  %867 = add nsw i32 %866, 1
  store i32 %867, i32* %j, align 4
  br label %842

; <label>:868                                     ; preds = %863, %842
  %869 = load i32* %j, align 4
  %870 = icmp eq i32 %869, 0
  br i1 %870, label %876, label %871

; <label>:871                                     ; preds = %868
  %872 = load i32* %j, align 4
  %873 = getelementptr inbounds [9 x i32]* %head, i32 0, i64 1
  %874 = load i32* %873, align 4
  %875 = icmp eq i32 %872, %874
  br i1 %875, label %876, label %877

; <label>:876                                     ; preds = %871, %868
  br label %906

; <label>:877                                     ; preds = %871
  %878 = load i32* %k, align 4
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %881 = load i16** %880, align 8
  %882 = getelementptr inbounds i16* %881, i64 %879
  %883 = load i16* %882, align 2
  %884 = zext i16 %883 to i32
  %885 = sitofp i32 %884 to float
  %886 = load float* %num, align 4
  %887 = fsub float %885, %886
  %888 = load i32* %k, align 4
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %891 = load i16** %890, align 8
  %892 = getelementptr inbounds i16* %891, i64 %889
  %893 = load i16* %892, align 2
  %894 = zext i16 %893 to i32
  %895 = load i32* %k, align 4
  %896 = sub nsw i32 %895, 1
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds [2 x i16*]* %xval, i32 0, i64 0
  %899 = load i16** %898, align 8
  %900 = getelementptr inbounds i16* %899, i64 %897
  %901 = load i16* %900, align 2
  %902 = zext i16 %901 to i32
  %903 = sub nsw i32 %894, %902
  %904 = sitofp i32 %903 to float
  %905 = fdiv float %887, %904
  br label %906

; <label>:906                                     ; preds = %877, %876
  %907 = phi float [ 0.000000e+00, %876 ], [ %905, %877 ]
  store float %907, float* %frac, align 4
  %908 = load i32* %k, align 4
  %909 = sub nsw i32 %908, 1
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %912 = load float** %911, align 8
  %913 = getelementptr inbounds float* %912, i64 %910
  %914 = load float* %913, align 4
  %915 = load float* %frac, align 4
  %916 = fmul float %914, %915
  %917 = load i32* %k, align 4
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %920 = load float** %919, align 8
  %921 = getelementptr inbounds float* %920, i64 %918
  %922 = load float* %921, align 4
  %923 = load float* %frac, align 4
  %924 = fsub float 1.000000e+00, %923
  %925 = fmul float %922, %924
  %926 = fadd float %916, %925
  %927 = load i32* %i, align 4
  %928 = load i32* %cip, align 4
  %929 = sub nsw i32 %927, %928
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds [2 x float]* %mult, i32 0, i64 %930
  store float %926, float* %931, align 4
  br label %932

; <label>:932                                     ; preds = %906
  %933 = load i32* %i, align 4
  %934 = add nsw i32 %933, 1
  store i32 %934, i32* %i, align 4
  br label %836

; <label>:935                                     ; preds = %836
  %936 = getelementptr inbounds [2 x float]* %mult, i32 0, i64 0
  %937 = load float* %936, align 4
  %938 = load float* %cfrac, align 4
  %939 = fsub float 1.000000e+00, %938
  %940 = fmul float %937, %939
  %941 = getelementptr inbounds [2 x float]* %mult, i32 0, i64 1
  %942 = load float* %941, align 4
  %943 = load float* %cfrac, align 4
  %944 = fmul float %942, %943
  %945 = fadd float %940, %944
  %946 = load i32* %row, align 4
  %947 = load i16* @top_margin, align 2
  %948 = zext i16 %947 to i32
  %949 = add i32 %946, %948
  %950 = uitofp i32 %949 to float
  %951 = fmul float %945, %950
  %952 = load float* %num, align 4
  %953 = fadd float %951, %952
  %954 = fmul float %953, 2.000000e+00
  %955 = fptosi float %954 to i32
  store i32 %955, i32* %i, align 4
  %956 = load i32* %i, align 4
  %957 = icmp slt i32 %956, 65535
  br i1 %957, label %958, label %960

; <label>:958                                     ; preds = %935
  %959 = load i32* %i, align 4
  br label %961

; <label>:960                                     ; preds = %935
  br label %961

; <label>:961                                     ; preds = %960, %958
  %962 = phi i32 [ %959, %958 ], [ 65535, %960 ]
  %963 = icmp sgt i32 0, %962
  br i1 %963, label %964, label %965

; <label>:964                                     ; preds = %961
  br label %973

; <label>:965                                     ; preds = %961
  %966 = load i32* %i, align 4
  %967 = icmp slt i32 %966, 65535
  br i1 %967, label %968, label %970

; <label>:968                                     ; preds = %965
  %969 = load i32* %i, align 4
  br label %971

; <label>:970                                     ; preds = %965
  br label %971

; <label>:971                                     ; preds = %970, %968
  %972 = phi i32 [ %969, %968 ], [ 65535, %970 ]
  br label %973

; <label>:973                                     ; preds = %971, %964
  %974 = phi i32 [ 0, %964 ], [ %972, %971 ]
  %975 = trunc i32 %974 to i16
  %976 = load i32* @filters, align 4
  %977 = load i32* %row, align 4
  %978 = shl i32 %977, 1
  %979 = and i32 %978, 14
  %980 = load i32* %col, align 4
  %981 = and i32 %980, 1
  %982 = add i32 %979, %981
  %983 = shl i32 %982, 1
  %984 = lshr i32 %976, %983
  %985 = and i32 %984, 3
  %986 = zext i32 %985 to i64
  %987 = load i32* %row, align 4
  %988 = load i16* @shrink, align 2
  %989 = zext i16 %988 to i32
  %990 = lshr i32 %987, %989
  %991 = load i16* @iwidth, align 2
  %992 = zext i16 %991 to i32
  %993 = mul i32 %990, %992
  %994 = load i32* %col, align 4
  %995 = load i16* @shrink, align 2
  %996 = zext i16 %995 to i32
  %997 = lshr i32 %994, %996
  %998 = add i32 %993, %997
  %999 = zext i32 %998 to i64
  %1000 = load [4 x i16]** @image, align 8
  %1001 = getelementptr inbounds [4 x i16]* %1000, i64 %999
  %1002 = getelementptr inbounds [4 x i16]* %1001, i32 0, i64 %986
  store i16 %975, i16* %1002, align 2
  br label %1003

; <label>:1003                                    ; preds = %973
  %1004 = load i32* %col, align 4
  %1005 = add i32 %1004, 1
  store i32 %1005, i32* %col, align 4
  br label %782

; <label>:1006                                    ; preds = %782
  br label %1007

; <label>:1007                                    ; preds = %1006
  %1008 = load i32* %row, align 4
  %1009 = add i32 %1008, 1
  store i32 %1009, i32* %row, align 4
  br label %776

; <label>:1010                                    ; preds = %776
  %1011 = getelementptr inbounds [2 x float*]* %yval, i32 0, i64 0
  %1012 = load float** %1011, align 8
  %1013 = bitcast float* %1012 to i8*
  call void @free(i8* %1013) #4
  br label %1014

; <label>:1014                                    ; preds = %6, %1010, %634
  ret void
}

; Function Attrs: nounwind uwtable
define void @phase_one_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %pixel = alloca i16*, align 8
  %akey = alloca i16, align 2
  %bkey = alloca i16, align 2
  %mask = alloca i16, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 1), align 4
  %3 = sext i32 %2 to i64
  %4 = call i32 @fseek(%struct._IO_FILE* %1, i64 %3, i32 0)
  %5 = call zeroext i16 @get2()
  store i16 %5, i16* %akey, align 2
  %6 = call zeroext i16 @get2()
  store i16 %6, i16* %bkey, align 2
  %7 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  %8 = icmp eq i32 %7, 1
  %9 = select i1 %8, i32 21845, i32 4948
  %10 = trunc i32 %9 to i16
  store i16 %10, i16* %mask, align 2
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = load i64* @data_offset, align 8
  %13 = load i16* @top_margin, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16* @raw_width, align 2
  %16 = zext i16 %15 to i32
  %17 = mul nsw i32 %14, %16
  %18 = mul nsw i32 %17, 2
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %12, %19
  %21 = call i32 @fseek(%struct._IO_FILE* %11, i64 %20, i32 0)
  %22 = load i16* @raw_width, align 2
  %23 = zext i16 %22 to i64
  %24 = call noalias i8* @calloc(i64 %23, i64 2) #4
  %25 = bitcast i8* %24 to i16*
  store i16* %25, i16** %pixel, align 8
  %26 = load i16** %pixel, align 8
  %27 = bitcast i16* %26 to i8*
  call void @merror(i8* %27, i8* getelementptr inbounds ([21 x i8]* @.str19, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %28

; <label>:28                                      ; preds = %144, %0
  %29 = load i32* %row, align 4
  %30 = load i16* @height, align 2
  %31 = zext i16 %30 to i32
  %32 = icmp slt i32 %29, %31
  br i1 %32, label %33, label %147

; <label>:33                                      ; preds = %28
  %34 = load i16** %pixel, align 8
  %35 = load i16* @raw_width, align 2
  %36 = zext i16 %35 to i32
  call void @read_shorts(i16* %34, i32 %36)
  store i32 0, i32* %col, align 4
  br label %37

; <label>:37                                      ; preds = %95, %33
  %38 = load i32* %col, align 4
  %39 = load i16* @raw_width, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp slt i32 %38, %40
  br i1 %41, label %42, label %98

; <label>:42                                      ; preds = %37
  %43 = load i32* %col, align 4
  %44 = add nsw i32 %43, 0
  %45 = sext i32 %44 to i64
  %46 = load i16** %pixel, align 8
  %47 = getelementptr inbounds i16* %46, i64 %45
  %48 = load i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = load i16* %akey, align 2
  %51 = zext i16 %50 to i32
  %52 = xor i32 %49, %51
  store i32 %52, i32* %a, align 4
  %53 = load i32* %col, align 4
  %54 = add nsw i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = load i16** %pixel, align 8
  %57 = getelementptr inbounds i16* %56, i64 %55
  %58 = load i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = load i16* %bkey, align 2
  %61 = zext i16 %60 to i32
  %62 = xor i32 %59, %61
  store i32 %62, i32* %b, align 4
  %63 = load i32* %a, align 4
  %64 = load i16* %mask, align 2
  %65 = zext i16 %64 to i32
  %66 = and i32 %63, %65
  %67 = load i32* %b, align 4
  %68 = load i16* %mask, align 2
  %69 = zext i16 %68 to i32
  %70 = xor i32 %69, -1
  %71 = and i32 %67, %70
  %72 = or i32 %66, %71
  %73 = trunc i32 %72 to i16
  %74 = load i32* %col, align 4
  %75 = add nsw i32 %74, 0
  %76 = sext i32 %75 to i64
  %77 = load i16** %pixel, align 8
  %78 = getelementptr inbounds i16* %77, i64 %76
  store i16 %73, i16* %78, align 2
  %79 = load i32* %b, align 4
  %80 = load i16* %mask, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %79, %81
  %83 = load i32* %a, align 4
  %84 = load i16* %mask, align 2
  %85 = zext i16 %84 to i32
  %86 = xor i32 %85, -1
  %87 = and i32 %83, %86
  %88 = or i32 %82, %87
  %89 = trunc i32 %88 to i16
  %90 = load i32* %col, align 4
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = load i16** %pixel, align 8
  %94 = getelementptr inbounds i16* %93, i64 %92
  store i16 %89, i16* %94, align 2
  br label %95

; <label>:95                                      ; preds = %42
  %96 = load i32* %col, align 4
  %97 = add nsw i32 %96, 2
  store i32 %97, i32* %col, align 4
  br label %37

; <label>:98                                      ; preds = %37
  store i32 0, i32* %col, align 4
  br label %99

; <label>:99                                      ; preds = %140, %98
  %100 = load i32* %col, align 4
  %101 = load i16* @width, align 2
  %102 = zext i16 %101 to i32
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %143

; <label>:104                                     ; preds = %99
  %105 = load i32* %col, align 4
  %106 = load i16* @left_margin, align 2
  %107 = zext i16 %106 to i32
  %108 = add nsw i32 %105, %107
  %109 = sext i32 %108 to i64
  %110 = load i16** %pixel, align 8
  %111 = getelementptr inbounds i16* %110, i64 %109
  %112 = load i16* %111, align 2
  %113 = load i32* @filters, align 4
  %114 = load i32* %row, align 4
  %115 = shl i32 %114, 1
  %116 = and i32 %115, 14
  %117 = load i32* %col, align 4
  %118 = and i32 %117, 1
  %119 = add nsw i32 %116, %118
  %120 = shl i32 %119, 1
  %121 = lshr i32 %113, %120
  %122 = and i32 %121, 3
  %123 = zext i32 %122 to i64
  %124 = load i32* %row, align 4
  %125 = load i16* @shrink, align 2
  %126 = zext i16 %125 to i32
  %127 = ashr i32 %124, %126
  %128 = load i16* @iwidth, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nsw i32 %127, %129
  %131 = load i32* %col, align 4
  %132 = load i16* @shrink, align 2
  %133 = zext i16 %132 to i32
  %134 = ashr i32 %131, %133
  %135 = add nsw i32 %130, %134
  %136 = sext i32 %135 to i64
  %137 = load [4 x i16]** @image, align 8
  %138 = getelementptr inbounds [4 x i16]* %137, i64 %136
  %139 = getelementptr inbounds [4 x i16]* %138, i32 0, i64 %123
  store i16 %112, i16* %139, align 2
  br label %140

; <label>:140                                     ; preds = %104
  %141 = load i32* %col, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %col, align 4
  br label %99

; <label>:143                                     ; preds = %99
  br label %144

; <label>:144                                     ; preds = %143
  %145 = load i32* %row, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %row, align 4
  br label %28

; <label>:147                                     ; preds = %28
  %148 = load i16** %pixel, align 8
  %149 = bitcast i16* %148 to i8*
  call void @free(i8* %149) #4
  call void @phase_one_correct()
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @ph1_bits(i32 %nbits) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %nbits, i32* %2, align 4
  %3 = load i32* %2, align 4
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  store i32 0, i32* @ph1_bits.vbits, align 4
  store i64 0, i64* @ph1_bits.bitbuf, align 8
  store i32 0, i32* %1
  br label %36

; <label>:6                                       ; preds = %0
  %7 = load i32* %2, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  store i32 0, i32* %1
  br label %36

; <label>:10                                      ; preds = %6
  %11 = load i32* %2, align 4
  %12 = load i32* @ph1_bits.vbits, align 4
  %13 = sub nsw i32 %12, %11
  store i32 %13, i32* @ph1_bits.vbits, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %23

; <label>:15                                      ; preds = %10
  %16 = load i64* @ph1_bits.bitbuf, align 8
  %17 = shl i64 %16, 32
  %18 = call i32 @get4()
  %19 = zext i32 %18 to i64
  %20 = or i64 %17, %19
  store i64 %20, i64* @ph1_bits.bitbuf, align 8
  %21 = load i32* @ph1_bits.vbits, align 4
  %22 = add nsw i32 %21, 32
  store i32 %22, i32* @ph1_bits.vbits, align 4
  br label %23

; <label>:23                                      ; preds = %15, %10
  %24 = load i64* @ph1_bits.bitbuf, align 8
  %25 = load i32* %2, align 4
  %26 = sub nsw i32 64, %25
  %27 = load i32* @ph1_bits.vbits, align 4
  %28 = sub nsw i32 %26, %27
  %29 = zext i32 %28 to i64
  %30 = shl i64 %24, %29
  %31 = load i32* %2, align 4
  %32 = sub nsw i32 64, %31
  %33 = zext i32 %32 to i64
  %34 = lshr i64 %30, %33
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %1
  br label %36

; <label>:36                                      ; preds = %23, %9, %5
  %37 = load i32* %1
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define void @phase_one_load_raw_c() #0 {
  %offset = alloca i32*, align 8
  %len = alloca [2 x i32], align 4
  %pred = alloca [2 x i32], align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pixel = alloca i16*, align 8
  %black = alloca [2 x i16]*, align 8
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i16* @raw_height, align 2
  %4 = zext i16 %3 to i32
  %5 = mul nsw i32 %4, 4
  %6 = add nsw i32 %2, %5
  %7 = sext i32 %6 to i64
  %8 = call noalias i8* @calloc(i64 %7, i64 2) #4
  %9 = bitcast i8* %8 to i16*
  store i16* %9, i16** %pixel, align 8
  %10 = load i16** %pixel, align 8
  %11 = bitcast i16* %10 to i8*
  call void @merror(i8* %11, i8* getelementptr inbounds ([23 x i8]* @.str20, i32 0, i32 0))
  %12 = load i16** %pixel, align 8
  %13 = load i16* @raw_width, align 2
  %14 = zext i16 %13 to i32
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16* %12, i64 %15
  %17 = bitcast i16* %16 to i32*
  store i32* %17, i32** %offset, align 8
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = load i64* @strip_offset, align 8
  %20 = call i32 @fseek(%struct._IO_FILE* %18, i64 %19, i32 0)
  store i32 0, i32* %row, align 4
  br label %21

; <label>:21                                      ; preds = %32, %0
  %22 = load i32* %row, align 4
  %23 = load i16* @raw_height, align 2
  %24 = zext i16 %23 to i32
  %25 = icmp slt i32 %22, %24
  br i1 %25, label %26, label %35

; <label>:26                                      ; preds = %21
  %27 = call i32 @get4()
  %28 = load i32* %row, align 4
  %29 = sext i32 %28 to i64
  %30 = load i32** %offset, align 8
  %31 = getelementptr inbounds i32* %30, i64 %29
  store i32 %27, i32* %31, align 4
  br label %32

; <label>:32                                      ; preds = %26
  %33 = load i32* %row, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %row, align 4
  br label %21

; <label>:35                                      ; preds = %21
  %36 = load i32** %offset, align 8
  %37 = bitcast i32* %36 to [2 x i16]*
  %38 = load i16* @raw_height, align 2
  %39 = zext i16 %38 to i32
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [2 x i16]* %37, i64 %40
  store [2 x i16]* %41, [2 x i16]** %black, align 8
  %42 = load %struct._IO_FILE** @ifp, align 8
  %43 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 3), align 4
  %44 = sext i32 %43 to i64
  %45 = call i32 @fseek(%struct._IO_FILE* %42, i64 %44, i32 0)
  %46 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 3), align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %55

; <label>:48                                      ; preds = %35
  %49 = load [2 x i16]** %black, align 8
  %50 = getelementptr inbounds [2 x i16]* %49, i64 0
  %51 = getelementptr inbounds [2 x i16]* %50, i32 0, i32 0
  %52 = load i16* @raw_height, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nsw i32 %53, 2
  call void @read_shorts(i16* %51, i32 %54)
  br label %55

; <label>:55                                      ; preds = %48, %35
  store i32 0, i32* %i, align 4
  br label %56

; <label>:56                                      ; preds = %70, %55
  %57 = load i32* %i, align 4
  %58 = icmp slt i32 %57, 256
  br i1 %58, label %59, label %73

; <label>:59                                      ; preds = %56
  %60 = load i32* %i, align 4
  %61 = load i32* %i, align 4
  %62 = mul nsw i32 %60, %61
  %63 = sitofp i32 %62 to double
  %64 = fdiv double %63, 3.969000e+00
  %65 = fadd double %64, 5.000000e-01
  %66 = fptoui double %65 to i16
  %67 = load i32* %i, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %68
  store i16 %66, i16* %69, align 2
  br label %70

; <label>:70                                      ; preds = %59
  %71 = load i32* %i, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %i, align 4
  br label %56

; <label>:73                                      ; preds = %56
  store i32 0, i32* %row, align 4
  br label %74

; <label>:74                                      ; preds = %308, %73
  %75 = load i32* %row, align 4
  %76 = load i16* @raw_height, align 2
  %77 = zext i16 %76 to i32
  %78 = icmp slt i32 %75, %77
  br i1 %78, label %79, label %311

; <label>:79                                      ; preds = %74
  %80 = load %struct._IO_FILE** @ifp, align 8
  %81 = load i64* @data_offset, align 8
  %82 = load i32* %row, align 4
  %83 = sext i32 %82 to i64
  %84 = load i32** %offset, align 8
  %85 = getelementptr inbounds i32* %84, i64 %83
  %86 = load i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %81, %87
  %89 = call i32 @fseek(%struct._IO_FILE* %80, i64 %88, i32 0)
  %90 = call i32 @ph1_bits(i32 -1)
  %91 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 0, i32* %91, align 4
  %92 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 0, i32* %92, align 4
  store i32 0, i32* %col, align 4
  br label %93

; <label>:93                                      ; preds = %221, %79
  %94 = load i32* %col, align 4
  %95 = load i16* @raw_width, align 2
  %96 = zext i16 %95 to i32
  %97 = icmp slt i32 %94, %96
  br i1 %97, label %98, label %224

; <label>:98                                      ; preds = %93
  %99 = load i32* %col, align 4
  %100 = load i16* @raw_width, align 2
  %101 = zext i16 %100 to i32
  %102 = and i32 %101, -8
  %103 = icmp sge i32 %99, %102
  br i1 %103, label %104, label %107

; <label>:104                                     ; preds = %98
  %105 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 1
  store i32 14, i32* %105, align 4
  %106 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 0
  store i32 14, i32* %106, align 4
  br label %150

; <label>:107                                     ; preds = %98
  %108 = load i32* %col, align 4
  %109 = and i32 %108, 7
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %149

; <label>:111                                     ; preds = %107
  store i32 0, i32* %i, align 4
  br label %112

; <label>:112                                     ; preds = %145, %111
  %113 = load i32* %i, align 4
  %114 = icmp slt i32 %113, 2
  br i1 %114, label %115, label %148

; <label>:115                                     ; preds = %112
  store i32 0, i32* %j, align 4
  br label %116

; <label>:116                                     ; preds = %126, %115
  %117 = load i32* %j, align 4
  %118 = icmp slt i32 %117, 5
  br i1 %118, label %119, label %123

; <label>:119                                     ; preds = %116
  %120 = call i32 @ph1_bits(i32 1)
  %121 = icmp ne i32 %120, 0
  %122 = xor i1 %121, true
  br label %123

; <label>:123                                     ; preds = %119, %116
  %124 = phi i1 [ false, %116 ], [ %122, %119 ]
  br i1 %124, label %125, label %129

; <label>:125                                     ; preds = %123
  br label %126

; <label>:126                                     ; preds = %125
  %127 = load i32* %j, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %j, align 4
  br label %116

; <label>:129                                     ; preds = %123
  %130 = load i32* %j, align 4
  %131 = add nsw i32 %130, -1
  store i32 %131, i32* %j, align 4
  %132 = icmp ne i32 %130, 0
  br i1 %132, label %133, label %144

; <label>:133                                     ; preds = %129
  %134 = load i32* %j, align 4
  %135 = mul nsw i32 %134, 2
  %136 = call i32 @ph1_bits(i32 1)
  %137 = add i32 %135, %136
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [10 x i32]* @phase_one_load_raw_c.length, i32 0, i64 %138
  %140 = load i32* %139, align 4
  %141 = load i32* %i, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %142
  store i32 %140, i32* %143, align 4
  br label %144

; <label>:144                                     ; preds = %133, %129
  br label %145

; <label>:145                                     ; preds = %144
  %146 = load i32* %i, align 4
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %i, align 4
  br label %112

; <label>:148                                     ; preds = %112
  br label %149

; <label>:149                                     ; preds = %148, %107
  br label %150

; <label>:150                                     ; preds = %149, %104
  %151 = load i32* %col, align 4
  %152 = and i32 %151, 1
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %153
  %155 = load i32* %154, align 4
  store i32 %155, i32* %i, align 4
  %156 = icmp eq i32 %155, 14
  br i1 %156, label %157, label %168

; <label>:157                                     ; preds = %150
  %158 = call i32 @ph1_bits(i32 16)
  %159 = load i32* %col, align 4
  %160 = and i32 %159, 1
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %161
  store i32 %158, i32* %162, align 4
  %163 = trunc i32 %158 to i16
  %164 = load i32* %col, align 4
  %165 = sext i32 %164 to i64
  %166 = load i16** %pixel, align 8
  %167 = getelementptr inbounds i16* %166, i64 %165
  store i16 %163, i16* %167, align 2
  br label %187

; <label>:168                                     ; preds = %150
  %169 = load i32* %i, align 4
  %170 = call i32 @ph1_bits(i32 %169)
  %171 = add i32 %170, 1
  %172 = load i32* %i, align 4
  %173 = sub nsw i32 %172, 1
  %174 = shl i32 1, %173
  %175 = sub i32 %171, %174
  %176 = load i32* %col, align 4
  %177 = and i32 %176, 1
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %178
  %180 = load i32* %179, align 4
  %181 = add i32 %180, %175
  store i32 %181, i32* %179, align 4
  %182 = trunc i32 %181 to i16
  %183 = load i32* %col, align 4
  %184 = sext i32 %183 to i64
  %185 = load i16** %pixel, align 8
  %186 = getelementptr inbounds i16* %185, i64 %184
  store i16 %182, i16* %186, align 2
  br label %187

; <label>:187                                     ; preds = %168, %157
  %188 = load i32* %col, align 4
  %189 = and i32 %188, 1
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %190
  %192 = load i32* %191, align 4
  %193 = ashr i32 %192, 16
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %195, label %196

; <label>:195                                     ; preds = %187
  call void @derror()
  br label %196

; <label>:196                                     ; preds = %195, %187
  %197 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  %198 = icmp eq i32 %197, 5
  br i1 %198, label %199, label %220

; <label>:199                                     ; preds = %196
  %200 = load i32* %col, align 4
  %201 = sext i32 %200 to i64
  %202 = load i16** %pixel, align 8
  %203 = getelementptr inbounds i16* %202, i64 %201
  %204 = load i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = icmp slt i32 %205, 256
  br i1 %206, label %207, label %220

; <label>:207                                     ; preds = %199
  %208 = load i32* %col, align 4
  %209 = sext i32 %208 to i64
  %210 = load i16** %pixel, align 8
  %211 = getelementptr inbounds i16* %210, i64 %209
  %212 = load i16* %211, align 2
  %213 = zext i16 %212 to i64
  %214 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %213
  %215 = load i16* %214, align 2
  %216 = load i32* %col, align 4
  %217 = sext i32 %216 to i64
  %218 = load i16** %pixel, align 8
  %219 = getelementptr inbounds i16* %218, i64 %217
  store i16 %215, i16* %219, align 2
  br label %220

; <label>:220                                     ; preds = %207, %199, %196
  br label %221

; <label>:221                                     ; preds = %220
  %222 = load i32* %col, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %col, align 4
  br label %93

; <label>:224                                     ; preds = %93
  %225 = load i32* %row, align 4
  %226 = load i16* @top_margin, align 2
  %227 = zext i16 %226 to i32
  %228 = sub nsw i32 %225, %227
  %229 = load i16* @height, align 2
  %230 = zext i16 %229 to i32
  %231 = icmp ult i32 %228, %230
  br i1 %231, label %232, label %307

; <label>:232                                     ; preds = %224
  store i32 0, i32* %col, align 4
  br label %233

; <label>:233                                     ; preds = %303, %232
  %234 = load i32* %col, align 4
  %235 = load i16* @width, align 2
  %236 = zext i16 %235 to i32
  %237 = icmp slt i32 %234, %236
  br i1 %237, label %238, label %306

; <label>:238                                     ; preds = %233
  %239 = load i32* %col, align 4
  %240 = load i16* @left_margin, align 2
  %241 = zext i16 %240 to i32
  %242 = add nsw i32 %239, %241
  %243 = sext i32 %242 to i64
  %244 = load i16** %pixel, align 8
  %245 = getelementptr inbounds i16* %244, i64 %243
  %246 = load i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = shl i32 %247, 2
  %249 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 2), align 4
  %250 = sub nsw i32 %248, %249
  %251 = load i32* %col, align 4
  %252 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 4), align 4
  %253 = icmp sge i32 %251, %252
  %254 = zext i1 %253 to i32
  %255 = sext i32 %254 to i64
  %256 = load i32* %row, align 4
  %257 = sext i32 %256 to i64
  %258 = load [2 x i16]** %black, align 8
  %259 = getelementptr inbounds [2 x i16]* %258, i64 %257
  %260 = getelementptr inbounds [2 x i16]* %259, i32 0, i64 %255
  %261 = load i16* %260, align 2
  %262 = sext i16 %261 to i32
  %263 = add nsw i32 %250, %262
  store i32 %263, i32* %i, align 4
  %264 = load i32* %i, align 4
  %265 = icmp sgt i32 %264, 0
  br i1 %265, label %266, label %302

; <label>:266                                     ; preds = %238
  %267 = load i32* %i, align 4
  %268 = trunc i32 %267 to i16
  %269 = load i32* @filters, align 4
  %270 = load i32* %row, align 4
  %271 = load i16* @top_margin, align 2
  %272 = zext i16 %271 to i32
  %273 = sub nsw i32 %270, %272
  %274 = shl i32 %273, 1
  %275 = and i32 %274, 14
  %276 = load i32* %col, align 4
  %277 = and i32 %276, 1
  %278 = add nsw i32 %275, %277
  %279 = shl i32 %278, 1
  %280 = lshr i32 %269, %279
  %281 = and i32 %280, 3
  %282 = zext i32 %281 to i64
  %283 = load i32* %row, align 4
  %284 = load i16* @top_margin, align 2
  %285 = zext i16 %284 to i32
  %286 = sub nsw i32 %283, %285
  %287 = load i16* @shrink, align 2
  %288 = zext i16 %287 to i32
  %289 = ashr i32 %286, %288
  %290 = load i16* @iwidth, align 2
  %291 = zext i16 %290 to i32
  %292 = mul nsw i32 %289, %291
  %293 = load i32* %col, align 4
  %294 = load i16* @shrink, align 2
  %295 = zext i16 %294 to i32
  %296 = ashr i32 %293, %295
  %297 = add nsw i32 %292, %296
  %298 = sext i32 %297 to i64
  %299 = load [4 x i16]** @image, align 8
  %300 = getelementptr inbounds [4 x i16]* %299, i64 %298
  %301 = getelementptr inbounds [4 x i16]* %300, i32 0, i64 %282
  store i16 %268, i16* %301, align 2
  br label %302

; <label>:302                                     ; preds = %266, %238
  br label %303

; <label>:303                                     ; preds = %302
  %304 = load i32* %col, align 4
  %305 = add nsw i32 %304, 1
  store i32 %305, i32* %col, align 4
  br label %233

; <label>:306                                     ; preds = %233
  br label %307

; <label>:307                                     ; preds = %306, %224
  br label %308

; <label>:308                                     ; preds = %307
  %309 = load i32* %row, align 4
  %310 = add nsw i32 %309, 1
  store i32 %310, i32* %row, align 4
  br label %74

; <label>:311                                     ; preds = %74
  %312 = load i16** %pixel, align 8
  %313 = bitcast i16* %312 to i8*
  call void @free(i8* %313) #4
  call void @phase_one_correct()
  %314 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 2), align 4
  %315 = sub nsw i32 65532, %314
  store i32 %315, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @hasselblad_load_raw() #0 {
  %jh = alloca %struct.jhead, align 8
  %dindex = alloca %struct.decode*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %pred = alloca [2 x i32], align 4
  %len = alloca [2 x i32], align 4
  %diff = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 0)
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  br label %160

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 9
  %6 = load i16** %5, align 8
  %7 = bitcast i16* %6 to i8*
  call void @free(i8* %7) #4
  store i16 18761, i16* @order, align 2
  %8 = call i32 @ph1_bits(i32 -1)
  %9 = load i16* @top_margin, align 2
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 0, %10
  store i32 %11, i32* %row, align 4
  br label %12

; <label>:12                                      ; preds = %156, %4
  %13 = load i32* %row, align 4
  %14 = load i16* @height, align 2
  %15 = zext i16 %14 to i32
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %17, label %159

; <label>:17                                      ; preds = %12
  %18 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 32768, i32* %18, align 4
  %19 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 32768, i32* %19, align 4
  %20 = load i16* @left_margin, align 2
  %21 = zext i16 %20 to i32
  %22 = sub nsw i32 0, %21
  store i32 %22, i32* %col, align 4
  br label %23

; <label>:23                                      ; preds = %152, %17
  %24 = load i32* %col, align 4
  %25 = load i16* @raw_width, align 2
  %26 = zext i16 %25 to i32
  %27 = load i16* @left_margin, align 2
  %28 = zext i16 %27 to i32
  %29 = sub nsw i32 %26, %28
  %30 = icmp slt i32 %24, %29
  br i1 %30, label %31, label %155

; <label>:31                                      ; preds = %23
  store i32 0, i32* %i, align 4
  br label %32

; <label>:32                                      ; preds = %59, %31
  %33 = load i32* %i, align 4
  %34 = icmp slt i32 %33, 2
  br i1 %34, label %35, label %62

; <label>:35                                      ; preds = %32
  %36 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 8
  %37 = getelementptr inbounds [6 x %struct.decode*]* %36, i32 0, i64 0
  %38 = load %struct.decode** %37, align 8
  store %struct.decode* %38, %struct.decode** %dindex, align 8
  br label %39

; <label>:39                                      ; preds = %45, %35
  %40 = load %struct.decode** %dindex, align 8
  %41 = getelementptr inbounds %struct.decode* %40, i32 0, i32 0
  %42 = getelementptr inbounds [2 x %struct.decode*]* %41, i32 0, i64 0
  %43 = load %struct.decode** %42, align 8
  %44 = icmp ne %struct.decode* %43, null
  br i1 %44, label %45, label %52

; <label>:45                                      ; preds = %39
  %46 = call i32 @ph1_bits(i32 1)
  %47 = zext i32 %46 to i64
  %48 = load %struct.decode** %dindex, align 8
  %49 = getelementptr inbounds %struct.decode* %48, i32 0, i32 0
  %50 = getelementptr inbounds [2 x %struct.decode*]* %49, i32 0, i64 %47
  %51 = load %struct.decode** %50, align 8
  store %struct.decode* %51, %struct.decode** %dindex, align 8
  br label %39

; <label>:52                                      ; preds = %39
  %53 = load %struct.decode** %dindex, align 8
  %54 = getelementptr inbounds %struct.decode* %53, i32 0, i32 1
  %55 = load i32* %54, align 4
  %56 = load i32* %i, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %57
  store i32 %55, i32* %58, align 4
  br label %59

; <label>:59                                      ; preds = %52
  %60 = load i32* %i, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %i, align 4
  br label %32

; <label>:62                                      ; preds = %32
  store i32 0, i32* %i, align 4
  br label %63

; <label>:63                                      ; preds = %148, %62
  %64 = load i32* %i, align 4
  %65 = icmp slt i32 %64, 2
  br i1 %65, label %66, label %151

; <label>:66                                      ; preds = %63
  %67 = load i32* %i, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %68
  %70 = load i32* %69, align 4
  %71 = call i32 @ph1_bits(i32 %70)
  store i32 %71, i32* %diff, align 4
  %72 = load i32* %diff, align 4
  %73 = load i32* %i, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %74
  %76 = load i32* %75, align 4
  %77 = sub nsw i32 %76, 1
  %78 = shl i32 1, %77
  %79 = and i32 %72, %78
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %90

; <label>:81                                      ; preds = %66
  %82 = load i32* %i, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [2 x i32]* %len, i32 0, i64 %83
  %85 = load i32* %84, align 4
  %86 = shl i32 1, %85
  %87 = sub nsw i32 %86, 1
  %88 = load i32* %diff, align 4
  %89 = sub nsw i32 %88, %87
  store i32 %89, i32* %diff, align 4
  br label %90

; <label>:90                                      ; preds = %81, %66
  %91 = load i32* %diff, align 4
  %92 = icmp eq i32 %91, 65535
  br i1 %92, label %93, label %94

; <label>:93                                      ; preds = %90
  store i32 -32768, i32* %diff, align 4
  br label %94

; <label>:94                                      ; preds = %93, %90
  %95 = load i32* %diff, align 4
  %96 = load i32* %i, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %97
  %99 = load i32* %98, align 4
  %100 = add nsw i32 %99, %95
  store i32 %100, i32* %98, align 4
  %101 = load i32* %row, align 4
  %102 = icmp sge i32 %101, 0
  br i1 %102, label %103, label %147

; <label>:103                                     ; preds = %94
  %104 = load i32* %col, align 4
  %105 = load i32* %i, align 4
  %106 = add nsw i32 %104, %105
  %107 = load i16* @width, align 2
  %108 = zext i16 %107 to i32
  %109 = icmp ult i32 %106, %108
  br i1 %109, label %110, label %147

; <label>:110                                     ; preds = %103
  %111 = load i32* %i, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %112
  %114 = load i32* %113, align 4
  %115 = trunc i32 %114 to i16
  %116 = load i32* @filters, align 4
  %117 = load i32* %row, align 4
  %118 = shl i32 %117, 1
  %119 = and i32 %118, 14
  %120 = load i32* %col, align 4
  %121 = load i32* %i, align 4
  %122 = add nsw i32 %120, %121
  %123 = and i32 %122, 1
  %124 = add nsw i32 %119, %123
  %125 = shl i32 %124, 1
  %126 = lshr i32 %116, %125
  %127 = and i32 %126, 3
  %128 = zext i32 %127 to i64
  %129 = load i32* %row, align 4
  %130 = load i16* @shrink, align 2
  %131 = zext i16 %130 to i32
  %132 = ashr i32 %129, %131
  %133 = load i16* @iwidth, align 2
  %134 = zext i16 %133 to i32
  %135 = mul nsw i32 %132, %134
  %136 = load i32* %col, align 4
  %137 = load i32* %i, align 4
  %138 = add nsw i32 %136, %137
  %139 = load i16* @shrink, align 2
  %140 = zext i16 %139 to i32
  %141 = ashr i32 %138, %140
  %142 = add nsw i32 %135, %141
  %143 = sext i32 %142 to i64
  %144 = load [4 x i16]** @image, align 8
  %145 = getelementptr inbounds [4 x i16]* %144, i64 %143
  %146 = getelementptr inbounds [4 x i16]* %145, i32 0, i64 %128
  store i16 %115, i16* %146, align 2
  br label %147

; <label>:147                                     ; preds = %110, %103, %94
  br label %148

; <label>:148                                     ; preds = %147
  %149 = load i32* %i, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %i, align 4
  br label %63

; <label>:151                                     ; preds = %63
  br label %152

; <label>:152                                     ; preds = %151
  %153 = load i32* %col, align 4
  %154 = add nsw i32 %153, 2
  store i32 %154, i32* %col, align 4
  br label %23

; <label>:155                                     ; preds = %23
  br label %156

; <label>:156                                     ; preds = %155
  %157 = load i32* %row, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %row, align 4
  br label %12

; <label>:159                                     ; preds = %12
  store i32 65535, i32* @maximum, align 4
  br label %160

; <label>:160                                     ; preds = %159, %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @leaf_hdr_load_raw() #0 {
  %pixel = alloca i16*, align 8
  %tile = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 0, i32* %tile, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i64
  %3 = call noalias i8* @calloc(i64 %2, i64 2) #4
  %4 = bitcast i8* %3 to i16*
  store i16* %4, i16** %pixel, align 8
  %5 = load i16** %pixel, align 8
  %6 = bitcast i16* %5 to i8*
  call void @merror(i8* %6, i8* getelementptr inbounds ([20 x i8]* @.str21, i32 0, i32 0))
  store i32 0, i32* %c, align 4
  br label %7

; <label>:7                                       ; preds = %128, %0
  %8 = load i32* %c, align 4
  %9 = load i32* @tiff_samples, align 4
  %10 = icmp ult i32 %8, %9
  br i1 %10, label %11, label %131

; <label>:11                                      ; preds = %7
  store i32 0, i32* %r, align 4
  br label %12

; <label>:12                                      ; preds = %124, %11
  %13 = load i32* %r, align 4
  %14 = load i16* @raw_height, align 2
  %15 = zext i16 %14 to i32
  %16 = icmp ult i32 %13, %15
  br i1 %16, label %17, label %127

; <label>:17                                      ; preds = %12
  %18 = load i32* %r, align 4
  %19 = load i32* @tile_length, align 4
  %20 = urem i32 %18, %19
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %39

; <label>:22                                      ; preds = %17
  %23 = load %struct._IO_FILE** @ifp, align 8
  %24 = load i64* @data_offset, align 8
  %25 = load i32* %tile, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %tile, align 4
  %27 = mul i32 4, %25
  %28 = zext i32 %27 to i64
  %29 = add nsw i64 %24, %28
  %30 = call i32 @fseek(%struct._IO_FILE* %23, i64 %29, i32 0)
  %31 = load %struct._IO_FILE** @ifp, align 8
  %32 = call i32 @get4()
  %33 = load i16* @left_margin, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nsw i32 2, %34
  %36 = add i32 %32, %35
  %37 = zext i32 %36 to i64
  %38 = call i32 @fseek(%struct._IO_FILE* %31, i64 %37, i32 0)
  br label %39

; <label>:39                                      ; preds = %22, %17
  %40 = load i32* @filters, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %47

; <label>:42                                      ; preds = %39
  %43 = load i32* %c, align 4
  %44 = load i32* @shot_select, align 4
  %45 = icmp ne i32 %43, %44
  br i1 %45, label %46, label %47

; <label>:46                                      ; preds = %42
  br label %124

; <label>:47                                      ; preds = %42, %39
  %48 = load i16** %pixel, align 8
  %49 = load i16* @raw_width, align 2
  %50 = zext i16 %49 to i32
  call void @read_shorts(i16* %48, i32 %50)
  %51 = load i32* %r, align 4
  %52 = load i16* @top_margin, align 2
  %53 = zext i16 %52 to i32
  %54 = sub i32 %51, %53
  store i32 %54, i32* %row, align 4
  %55 = load i16* @height, align 2
  %56 = zext i16 %55 to i32
  %57 = icmp uge i32 %54, %56
  br i1 %57, label %58, label %59

; <label>:58                                      ; preds = %47
  br label %124

; <label>:59                                      ; preds = %47
  store i32 0, i32* %col, align 4
  br label %60

; <label>:60                                      ; preds = %120, %59
  %61 = load i32* %col, align 4
  %62 = load i16* @width, align 2
  %63 = zext i16 %62 to i32
  %64 = icmp ult i32 %61, %63
  br i1 %64, label %65, label %123

; <label>:65                                      ; preds = %60
  %66 = load i32* @filters, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %101

; <label>:68                                      ; preds = %65
  %69 = load i32* %col, align 4
  %70 = zext i32 %69 to i64
  %71 = load i16** %pixel, align 8
  %72 = getelementptr inbounds i16* %71, i64 %70
  %73 = load i16* %72, align 2
  %74 = load i32* @filters, align 4
  %75 = load i32* %row, align 4
  %76 = shl i32 %75, 1
  %77 = and i32 %76, 14
  %78 = load i32* %col, align 4
  %79 = and i32 %78, 1
  %80 = add i32 %77, %79
  %81 = shl i32 %80, 1
  %82 = lshr i32 %74, %81
  %83 = and i32 %82, 3
  %84 = zext i32 %83 to i64
  %85 = load i32* %row, align 4
  %86 = load i16* @shrink, align 2
  %87 = zext i16 %86 to i32
  %88 = lshr i32 %85, %87
  %89 = load i16* @iwidth, align 2
  %90 = zext i16 %89 to i32
  %91 = mul i32 %88, %90
  %92 = load i32* %col, align 4
  %93 = load i16* @shrink, align 2
  %94 = zext i16 %93 to i32
  %95 = lshr i32 %92, %94
  %96 = add i32 %91, %95
  %97 = zext i32 %96 to i64
  %98 = load [4 x i16]** @image, align 8
  %99 = getelementptr inbounds [4 x i16]* %98, i64 %97
  %100 = getelementptr inbounds [4 x i16]* %99, i32 0, i64 %84
  store i16 %73, i16* %100, align 2
  br label %119

; <label>:101                                     ; preds = %65
  %102 = load i32* %col, align 4
  %103 = zext i32 %102 to i64
  %104 = load i16** %pixel, align 8
  %105 = getelementptr inbounds i16* %104, i64 %103
  %106 = load i16* %105, align 2
  %107 = load i32* %c, align 4
  %108 = zext i32 %107 to i64
  %109 = load i32* %row, align 4
  %110 = load i16* @width, align 2
  %111 = zext i16 %110 to i32
  %112 = mul i32 %109, %111
  %113 = load i32* %col, align 4
  %114 = add i32 %112, %113
  %115 = zext i32 %114 to i64
  %116 = load [4 x i16]** @image, align 8
  %117 = getelementptr inbounds [4 x i16]* %116, i64 %115
  %118 = getelementptr inbounds [4 x i16]* %117, i32 0, i64 %108
  store i16 %106, i16* %118, align 2
  br label %119

; <label>:119                                     ; preds = %101, %68
  br label %120

; <label>:120                                     ; preds = %119
  %121 = load i32* %col, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %col, align 4
  br label %60

; <label>:123                                     ; preds = %60
  br label %124

; <label>:124                                     ; preds = %123, %58, %46
  %125 = load i32* %r, align 4
  %126 = add i32 %125, 1
  store i32 %126, i32* %r, align 4
  br label %12

; <label>:127                                     ; preds = %12
  br label %128

; <label>:128                                     ; preds = %127
  %129 = load i32* %c, align 4
  %130 = add i32 %129, 1
  store i32 %130, i32* %c, align 4
  br label %7

; <label>:131                                     ; preds = %7
  %132 = load i16** %pixel, align 8
  %133 = bitcast i16* %132 to i8*
  call void @free(i8* %133) #4
  %134 = load i32* @filters, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %137, label %136

; <label>:136                                     ; preds = %131
  store i32 65535, i32* @maximum, align 4
  store i32 1, i32* @raw_color, align 4
  br label %137

; <label>:137                                     ; preds = %136, %131
  ret void
}

; Function Attrs: nounwind uwtable
define void @sinar_4shot_load_raw() #0 {
  %pixel = alloca i16*, align 8
  %shot = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %1 = load i32* @shot_select, align 4
  store i32 %1, i32* %shot, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = load i32* @half_size, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %28

; <label>:6                                       ; preds = %3, %0
  %7 = load i32* %shot, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %12

; <label>:9                                       ; preds = %6
  %10 = load i32* %shot, align 4
  %11 = add i32 %10, -1
  store i32 %11, i32* %shot, align 4
  br label %12

; <label>:12                                      ; preds = %9, %6
  %13 = load i32* %shot, align 4
  %14 = icmp ugt i32 %13, 3
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %12
  store i32 3, i32* %shot, align 4
  br label %16

; <label>:16                                      ; preds = %15, %12
  %17 = load %struct._IO_FILE** @ifp, align 8
  %18 = load i64* @data_offset, align 8
  %19 = load i32* %shot, align 4
  %20 = mul i32 %19, 4
  %21 = zext i32 %20 to i64
  %22 = add nsw i64 %18, %21
  %23 = call i32 @fseek(%struct._IO_FILE* %17, i64 %22, i32 0)
  %24 = load %struct._IO_FILE** @ifp, align 8
  %25 = call i32 @get4()
  %26 = zext i32 %25 to i64
  %27 = call i32 @fseek(%struct._IO_FILE* %24, i64 %26, i32 0)
  call void @unpacked_load_raw()
  br label %142

; <label>:28                                      ; preds = %3
  %29 = load [4 x i16]** @image, align 8
  %30 = bitcast [4 x i16]* %29 to i8*
  call void @free(i8* %30) #4
  %31 = load i16* @height, align 2
  store i16 %31, i16* @iheight, align 2
  %32 = zext i16 %31 to i32
  %33 = load i16* @width, align 2
  store i16 %33, i16* @iwidth, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nsw i32 %32, %34
  %36 = sext i32 %35 to i64
  %37 = call noalias i8* @calloc(i64 %36, i64 8) #4
  %38 = bitcast i8* %37 to [4 x i16]*
  store [4 x i16]* %38, [4 x i16]** @image, align 8
  %39 = load [4 x i16]** @image, align 8
  %40 = bitcast [4 x i16]* %39 to i8*
  call void @merror(i8* %40, i8* getelementptr inbounds ([23 x i8]* @.str22, i32 0, i32 0))
  %41 = load i16* @raw_width, align 2
  %42 = zext i16 %41 to i64
  %43 = call noalias i8* @calloc(i64 %42, i64 2) #4
  %44 = bitcast i8* %43 to i16*
  store i16* %44, i16** %pixel, align 8
  %45 = load i16** %pixel, align 8
  %46 = bitcast i16* %45 to i8*
  call void @merror(i8* %46, i8* getelementptr inbounds ([23 x i8]* @.str22, i32 0, i32 0))
  store i32 0, i32* %shot, align 4
  br label %47

; <label>:47                                      ; preds = %136, %28
  %48 = load i32* %shot, align 4
  %49 = icmp ult i32 %48, 4
  br i1 %49, label %50, label %139

; <label>:50                                      ; preds = %47
  %51 = load %struct._IO_FILE** @ifp, align 8
  %52 = load i64* @data_offset, align 8
  %53 = load i32* %shot, align 4
  %54 = mul i32 %53, 4
  %55 = zext i32 %54 to i64
  %56 = add nsw i64 %52, %55
  %57 = call i32 @fseek(%struct._IO_FILE* %51, i64 %56, i32 0)
  %58 = load %struct._IO_FILE** @ifp, align 8
  %59 = call i32 @get4()
  %60 = zext i32 %59 to i64
  %61 = call i32 @fseek(%struct._IO_FILE* %58, i64 %60, i32 0)
  store i32 0, i32* %row, align 4
  br label %62

; <label>:62                                      ; preds = %132, %50
  %63 = load i32* %row, align 4
  %64 = load i16* @raw_height, align 2
  %65 = zext i16 %64 to i32
  %66 = icmp ult i32 %63, %65
  br i1 %66, label %67, label %135

; <label>:67                                      ; preds = %62
  %68 = load i16** %pixel, align 8
  %69 = load i16* @raw_width, align 2
  %70 = zext i16 %69 to i32
  call void @read_shorts(i16* %68, i32 %70)
  %71 = load i32* %row, align 4
  %72 = load i16* @top_margin, align 2
  %73 = zext i16 %72 to i32
  %74 = sub i32 %71, %73
  %75 = load i32* %shot, align 4
  %76 = lshr i32 %75, 1
  %77 = and i32 %76, 1
  %78 = sub i32 %74, %77
  store i32 %78, i32* %r, align 4
  %79 = load i16* @height, align 2
  %80 = zext i16 %79 to i32
  %81 = icmp uge i32 %78, %80
  br i1 %81, label %82, label %83

; <label>:82                                      ; preds = %67
  br label %132

; <label>:83                                      ; preds = %67
  store i32 0, i32* %col, align 4
  br label %84

; <label>:84                                      ; preds = %128, %83
  %85 = load i32* %col, align 4
  %86 = load i16* @raw_width, align 2
  %87 = zext i16 %86 to i32
  %88 = icmp ult i32 %85, %87
  br i1 %88, label %89, label %131

; <label>:89                                      ; preds = %84
  %90 = load i32* %col, align 4
  %91 = load i16* @left_margin, align 2
  %92 = zext i16 %91 to i32
  %93 = sub i32 %90, %92
  %94 = load i32* %shot, align 4
  %95 = and i32 %94, 1
  %96 = sub i32 %93, %95
  store i32 %96, i32* %c, align 4
  %97 = load i16* @width, align 2
  %98 = zext i16 %97 to i32
  %99 = icmp uge i32 %96, %98
  br i1 %99, label %100, label %101

; <label>:100                                     ; preds = %89
  br label %128

; <label>:101                                     ; preds = %89
  %102 = load i32* %col, align 4
  %103 = zext i32 %102 to i64
  %104 = load i16** %pixel, align 8
  %105 = getelementptr inbounds i16* %104, i64 %103
  %106 = load i16* %105, align 2
  %107 = load i32* @filters, align 4
  %108 = load i32* %row, align 4
  %109 = shl i32 %108, 1
  %110 = and i32 %109, 14
  %111 = load i32* %col, align 4
  %112 = and i32 %111, 1
  %113 = add i32 %110, %112
  %114 = shl i32 %113, 1
  %115 = lshr i32 %107, %114
  %116 = and i32 %115, 3
  %117 = zext i32 %116 to i64
  %118 = load i32* %r, align 4
  %119 = load i16* @width, align 2
  %120 = zext i16 %119 to i32
  %121 = mul i32 %118, %120
  %122 = load i32* %c, align 4
  %123 = add i32 %121, %122
  %124 = zext i32 %123 to i64
  %125 = load [4 x i16]** @image, align 8
  %126 = getelementptr inbounds [4 x i16]* %125, i64 %124
  %127 = getelementptr inbounds [4 x i16]* %126, i32 0, i64 %117
  store i16 %106, i16* %127, align 2
  br label %128

; <label>:128                                     ; preds = %101, %100
  %129 = load i32* %col, align 4
  %130 = add i32 %129, 1
  store i32 %130, i32* %col, align 4
  br label %84

; <label>:131                                     ; preds = %84
  br label %132

; <label>:132                                     ; preds = %131, %82
  %133 = load i32* %row, align 4
  %134 = add i32 %133, 1
  store i32 %134, i32* %row, align 4
  br label %62

; <label>:135                                     ; preds = %62
  br label %136

; <label>:136                                     ; preds = %135
  %137 = load i32* %shot, align 4
  %138 = add i32 %137, 1
  store i32 %138, i32* %shot, align 4
  br label %47

; <label>:139                                     ; preds = %47
  %140 = load i16** %pixel, align 8
  %141 = bitcast i16* %140 to i8*
  call void @free(i8* %141) #4
  store i32 0, i32* @filters, align 4
  store i16 0, i16* @shrink, align 2
  br label %142

; <label>:142                                     ; preds = %139, %16
  ret void
}

; Function Attrs: nounwind uwtable
define void @imacon_full_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 0, i32* %row, align 4
  br label %1

; <label>:1                                       ; preds = %27, %0
  %2 = load i32* %row, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %30

; <label>:6                                       ; preds = %1
  store i32 0, i32* %col, align 4
  br label %7

; <label>:7                                       ; preds = %23, %6
  %8 = load i32* %col, align 4
  %9 = load i16* @width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %26

; <label>:12                                      ; preds = %7
  %13 = load i32* %row, align 4
  %14 = load i16* @width, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nsw i32 %13, %15
  %17 = load i32* %col, align 4
  %18 = add nsw i32 %16, %17
  %19 = sext i32 %18 to i64
  %20 = load [4 x i16]** @image, align 8
  %21 = getelementptr inbounds [4 x i16]* %20, i64 %19
  %22 = getelementptr inbounds [4 x i16]* %21, i32 0, i32 0
  call void @read_shorts(i16* %22, i32 3)
  br label %23

; <label>:23                                      ; preds = %12
  %24 = load i32* %col, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %col, align 4
  br label %7

; <label>:26                                      ; preds = %7
  br label %27

; <label>:27                                      ; preds = %26
  %28 = load i32* %row, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %row, align 4
  br label %1

; <label>:30                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @packed_12_load_raw() #0 {
  %vbits = alloca i32, align 4
  %rbits = alloca i32, align 4
  %irow = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %bitbuf = alloca i64, align 8
  store i32 0, i32* %vbits, align 4
  store i32 0, i32* %rbits, align 4
  store i64 0, i64* %bitbuf, align 8
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = mul nsw i32 %2, 2
  %4 = load i16* @width, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %5, 3
  %7 = icmp sge i32 %3, %6
  br i1 %7, label %8, label %22

; <label>:8                                       ; preds = %0
  %9 = load i16* @raw_width, align 2
  %10 = zext i16 %9 to i32
  %11 = mul nsw i32 %10, 8
  store i32 %11, i32* %rbits, align 4
  %12 = load i16* @raw_width, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nsw i32 %13, 2
  %15 = sdiv i32 %14, 3
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* @raw_width, align 2
  %17 = load i16* @raw_width, align 2
  %18 = zext i16 %17 to i32
  %19 = mul nsw i32 %18, 12
  %20 = load i32* %rbits, align 4
  %21 = sub nsw i32 %20, %19
  store i32 %21, i32* %rbits, align 4
  br label %22

; <label>:22                                      ; preds = %8, %0
  %23 = load i32* @load_flags, align 4
  %24 = and i32 %23, 1
  %25 = icmp ne i32 %24, 0
  %26 = select i1 %25, i32 18761, i32 19789
  %27 = trunc i32 %26 to i16
  store i16 %27, i16* @order, align 2
  store i32 0, i32* %irow, align 4
  br label %28

; <label>:28                                      ; preds = %171, %22
  %29 = load i32* %irow, align 4
  %30 = load i16* @height, align 2
  %31 = zext i16 %30 to i32
  %32 = icmp slt i32 %29, %31
  br i1 %32, label %33, label %174

; <label>:33                                      ; preds = %28
  %34 = load i32* %irow, align 4
  store i32 %34, i32* %row, align 4
  %35 = load i32* @load_flags, align 4
  %36 = and i32 %35, 2
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %82

; <label>:38                                      ; preds = %33
  %39 = load i32* %irow, align 4
  %40 = mul nsw i32 %39, 2
  %41 = load i16* @height, align 2
  %42 = zext i16 %41 to i32
  %43 = srem i32 %40, %42
  %44 = load i32* %irow, align 4
  %45 = load i16* @height, align 2
  %46 = zext i16 %45 to i32
  %47 = sdiv i32 %46, 2
  %48 = sdiv i32 %44, %47
  %49 = add nsw i32 %43, %48
  store i32 %49, i32* %row, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %82

; <label>:51                                      ; preds = %38
  %52 = load i32* @load_flags, align 4
  %53 = and i32 %52, 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %82

; <label>:55                                      ; preds = %51
  store i32 0, i32* %vbits, align 4
  %56 = load i32* @tiff_compress, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %73

; <label>:58                                      ; preds = %55
  %59 = load %struct._IO_FILE** @ifp, align 8
  %60 = load i64* @data_offset, align 8
  %61 = load i16* @width, align 2
  %62 = zext i16 %61 to i32
  %63 = sub nsw i32 0, %62
  %64 = load i16* @height, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nsw i32 %63, %65
  %67 = mul nsw i32 %66, 3
  %68 = sdiv i32 %67, 4
  %69 = and i32 %68, -2048
  %70 = sext i32 %69 to i64
  %71 = sub nsw i64 %60, %70
  %72 = call i32 @fseek(%struct._IO_FILE* %59, i64 %71, i32 0)
  br label %81

; <label>:73                                      ; preds = %55
  %74 = load %struct._IO_FILE** @ifp, align 8
  %75 = call i32 @fseek(%struct._IO_FILE* %74, i64 0, i32 2)
  %76 = load %struct._IO_FILE** @ifp, align 8
  %77 = load %struct._IO_FILE** @ifp, align 8
  %78 = call i64 @ftell(%struct._IO_FILE* %77)
  %79 = sdiv i64 %78, 2
  %80 = call i32 @fseek(%struct._IO_FILE* %76, i64 %79, i32 0)
  br label %81

; <label>:81                                      ; preds = %73, %58
  br label %82

; <label>:82                                      ; preds = %81, %51, %38, %33
  store i32 0, i32* %col, align 4
  br label %83

; <label>:83                                      ; preds = %164, %82
  %84 = load i32* %col, align 4
  %85 = load i16* @raw_width, align 2
  %86 = zext i16 %85 to i32
  %87 = icmp slt i32 %84, %86
  br i1 %87, label %88, label %167

; <label>:88                                      ; preds = %83
  %89 = load i32* %vbits, align 4
  %90 = sub nsw i32 %89, 12
  store i32 %90, i32* %vbits, align 4
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %92, label %100

; <label>:92                                      ; preds = %88
  %93 = load i64* %bitbuf, align 8
  %94 = shl i64 %93, 32
  %95 = call i32 @get4()
  %96 = zext i32 %95 to i64
  %97 = or i64 %94, %96
  store i64 %97, i64* %bitbuf, align 8
  %98 = load i32* %vbits, align 4
  %99 = add nsw i32 %98, 32
  store i32 %99, i32* %vbits, align 4
  br label %100

; <label>:100                                     ; preds = %92, %88
  %101 = load i32* %col, align 4
  %102 = load i16* @left_margin, align 2
  %103 = zext i16 %102 to i32
  %104 = sub nsw i32 %101, %103
  %105 = load i16* @width, align 2
  %106 = zext i16 %105 to i32
  %107 = icmp ult i32 %104, %106
  br i1 %107, label %108, label %149

; <label>:108                                     ; preds = %100
  %109 = load i64* %bitbuf, align 8
  %110 = load i32* %vbits, align 4
  %111 = sub nsw i32 52, %110
  %112 = zext i32 %111 to i64
  %113 = shl i64 %109, %112
  %114 = lshr i64 %113, 52
  %115 = trunc i64 %114 to i16
  %116 = load i32* @filters, align 4
  %117 = load i32* %row, align 4
  %118 = shl i32 %117, 1
  %119 = and i32 %118, 14
  %120 = load i32* %col, align 4
  %121 = load i16* @left_margin, align 2
  %122 = zext i16 %121 to i32
  %123 = sub nsw i32 %120, %122
  %124 = and i32 %123, 1
  %125 = add nsw i32 %119, %124
  %126 = shl i32 %125, 1
  %127 = lshr i32 %116, %126
  %128 = and i32 %127, 3
  %129 = zext i32 %128 to i64
  %130 = load i32* %row, align 4
  %131 = load i16* @shrink, align 2
  %132 = zext i16 %131 to i32
  %133 = ashr i32 %130, %132
  %134 = load i16* @iwidth, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nsw i32 %133, %135
  %137 = load i32* %col, align 4
  %138 = load i16* @left_margin, align 2
  %139 = zext i16 %138 to i32
  %140 = sub nsw i32 %137, %139
  %141 = load i16* @shrink, align 2
  %142 = zext i16 %141 to i32
  %143 = ashr i32 %140, %142
  %144 = add nsw i32 %136, %143
  %145 = sext i32 %144 to i64
  %146 = load [4 x i16]** @image, align 8
  %147 = getelementptr inbounds [4 x i16]* %146, i64 %145
  %148 = getelementptr inbounds [4 x i16]* %147, i32 0, i64 %129
  store i16 %115, i16* %148, align 2
  br label %149

; <label>:149                                     ; preds = %108, %100
  %150 = load i32* @load_flags, align 4
  %151 = and i32 %150, 8
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %153, label %163

; <label>:153                                     ; preds = %149
  %154 = load i32* %col, align 4
  %155 = srem i32 %154, 10
  %156 = icmp eq i32 %155, 9
  br i1 %156, label %157, label %163

; <label>:157                                     ; preds = %153
  store i32 0, i32* %vbits, align 4
  %158 = load i64* %bitbuf, align 8
  %159 = and i64 %158, 255
  %160 = icmp ne i64 %159, 0
  br i1 %160, label %161, label %162

; <label>:161                                     ; preds = %157
  call void @derror()
  br label %162

; <label>:162                                     ; preds = %161, %157
  br label %163

; <label>:163                                     ; preds = %162, %153, %149
  br label %164

; <label>:164                                     ; preds = %163
  %165 = load i32* %col, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %col, align 4
  br label %83

; <label>:167                                     ; preds = %83
  %168 = load i32* %rbits, align 4
  %169 = load i32* %vbits, align 4
  %170 = sub nsw i32 %169, %168
  store i32 %170, i32* %vbits, align 4
  br label %171

; <label>:171                                     ; preds = %167
  %172 = load i32* %irow, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %irow, align 4
  br label %28

; <label>:174                                     ; preds = %28
  %175 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0)) #10
  %176 = icmp ne i32 %175, 0
  br i1 %176, label %180, label %177

; <label>:177                                     ; preds = %174
  %178 = load i32* @black, align 4
  %179 = lshr i32 %178, 4
  store i32 %179, i32* @black, align 4
  br label %180

; <label>:180                                     ; preds = %177, %174
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define void @unpacked_load_raw() #0 {
  %pixel = alloca i16*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %bits = alloca i32, align 4
  store i32 0, i32* %bits, align 4
  br label %1

; <label>:1                                       ; preds = %7, %0
  %2 = load i32* %bits, align 4
  %3 = add nsw i32 %2, 1
  store i32 %3, i32* %bits, align 4
  %4 = shl i32 1, %3
  %5 = load i32* @maximum, align 4
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  br label %1

; <label>:8                                       ; preds = %1
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = load i16* @top_margin, align 2
  %11 = zext i16 %10 to i32
  %12 = load i16* @raw_width, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nsw i32 %11, %13
  %15 = load i16* @left_margin, align 2
  %16 = zext i16 %15 to i32
  %17 = add nsw i32 %14, %16
  %18 = mul nsw i32 %17, 2
  %19 = sext i32 %18 to i64
  %20 = call i32 @fseek(%struct._IO_FILE* %9, i64 %19, i32 1)
  %21 = load i16* @width, align 2
  %22 = zext i16 %21 to i64
  %23 = call noalias i8* @calloc(i64 %22, i64 2) #4
  %24 = bitcast i8* %23 to i16*
  store i16* %24, i16** %pixel, align 8
  %25 = load i16** %pixel, align 8
  %26 = bitcast i16* %25 to i8*
  call void @merror(i8* %26, i8* getelementptr inbounds ([20 x i8]* @.str24, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %27

; <label>:27                                      ; preds = %86, %8
  %28 = load i32* %row, align 4
  %29 = load i16* @height, align 2
  %30 = zext i16 %29 to i32
  %31 = icmp slt i32 %28, %30
  br i1 %31, label %32, label %89

; <label>:32                                      ; preds = %27
  %33 = load i16** %pixel, align 8
  %34 = load i16* @width, align 2
  %35 = zext i16 %34 to i32
  call void @read_shorts(i16* %33, i32 %35)
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = load i16* @raw_width, align 2
  %38 = zext i16 %37 to i32
  %39 = load i16* @width, align 2
  %40 = zext i16 %39 to i32
  %41 = sub nsw i32 %38, %40
  %42 = mul nsw i32 2, %41
  %43 = sext i32 %42 to i64
  %44 = call i32 @fseek(%struct._IO_FILE* %36, i64 %43, i32 1)
  store i32 0, i32* %col, align 4
  br label %45

; <label>:45                                      ; preds = %82, %32
  %46 = load i32* %col, align 4
  %47 = load i16* @width, align 2
  %48 = zext i16 %47 to i32
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %85

; <label>:50                                      ; preds = %45
  %51 = load i32* %col, align 4
  %52 = sext i32 %51 to i64
  %53 = load i16** %pixel, align 8
  %54 = getelementptr inbounds i16* %53, i64 %52
  %55 = load i16* %54, align 2
  %56 = load i32* %row, align 4
  %57 = load i32* %col, align 4
  %58 = call i32 @fc(i32 %56, i32 %57)
  %59 = sext i32 %58 to i64
  %60 = load i32* %row, align 4
  %61 = load i16* @shrink, align 2
  %62 = zext i16 %61 to i32
  %63 = ashr i32 %60, %62
  %64 = load i16* @iwidth, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nsw i32 %63, %65
  %67 = load i32* %col, align 4
  %68 = load i16* @shrink, align 2
  %69 = zext i16 %68 to i32
  %70 = ashr i32 %67, %69
  %71 = add nsw i32 %66, %70
  %72 = sext i32 %71 to i64
  %73 = load [4 x i16]** @image, align 8
  %74 = getelementptr inbounds [4 x i16]* %73, i64 %72
  %75 = getelementptr inbounds [4 x i16]* %74, i32 0, i64 %59
  store i16 %55, i16* %75, align 2
  %76 = zext i16 %55 to i32
  %77 = load i32* %bits, align 4
  %78 = ashr i32 %76, %77
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %81

; <label>:80                                      ; preds = %50
  call void @derror()
  br label %81

; <label>:81                                      ; preds = %80, %50
  br label %82

; <label>:82                                      ; preds = %81
  %83 = load i32* %col, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %col, align 4
  br label %45

; <label>:85                                      ; preds = %45
  br label %86

; <label>:86                                      ; preds = %85
  %87 = load i32* %row, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %row, align 4
  br label %27

; <label>:89                                      ; preds = %27
  %90 = load i16** %pixel, align 8
  %91 = bitcast i16* %90 to i8*
  call void @free(i8* %91) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @nokia_load_raw() #0 {
  %data = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %pixel = alloca i16*, align 8
  %pix = alloca i16*, align 8
  %dwide = alloca i32, align 4
  %row = alloca i32, align 4
  %c = alloca i32, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = mul nsw i32 %2, 5
  %4 = sdiv i32 %3, 4
  store i32 %4, i32* %dwide, align 4
  %5 = load i32* %dwide, align 4
  %6 = load i16* @raw_width, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nsw i32 %7, 2
  %9 = add nsw i32 %5, %8
  %10 = sext i32 %9 to i64
  %11 = call noalias i8* @malloc(i64 %10) #4
  store i8* %11, i8** %data, align 8
  %12 = load i8** %data, align 8
  call void @merror(i8* %12, i8* getelementptr inbounds ([17 x i8]* @.str25, i32 0, i32 0))
  %13 = load i8** %data, align 8
  %14 = load i32* %dwide, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8* %13, i64 %15
  %17 = bitcast i8* %16 to i16*
  store i16* %17, i16** %pixel, align 8
  store i32 0, i32* %row, align 4
  br label %18

; <label>:18                                      ; preds = %153, %0
  %19 = load i32* %row, align 4
  %20 = load i16* @raw_height, align 2
  %21 = zext i16 %20 to i32
  %22 = icmp slt i32 %19, %21
  br i1 %22, label %23, label %156

; <label>:23                                      ; preds = %18
  %24 = load i8** %data, align 8
  %25 = load i32* %dwide, align 4
  %26 = sext i32 %25 to i64
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = call i64 @fread(i8* %24, i64 1, i64 %26, %struct._IO_FILE* %27)
  %29 = load i32* %dwide, align 4
  %30 = sext i32 %29 to i64
  %31 = icmp ult i64 %28, %30
  br i1 %31, label %32, label %33

; <label>:32                                      ; preds = %23
  call void @derror()
  br label %33

; <label>:33                                      ; preds = %32, %23
  %34 = load i8** %data, align 8
  store i8* %34, i8** %dp, align 8
  %35 = load i16** %pixel, align 8
  store i16* %35, i16** %pix, align 8
  br label %36

; <label>:36                                      ; preds = %74, %33
  %37 = load i16** %pix, align 8
  %38 = load i16** %pixel, align 8
  %39 = load i16* @raw_width, align 2
  %40 = zext i16 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16* %38, i64 %41
  %43 = icmp ult i16* %37, %42
  br i1 %43, label %44, label %79

; <label>:44                                      ; preds = %36
  store i32 0, i32* %c, align 4
  br label %45

; <label>:45                                      ; preds = %70, %44
  %46 = load i32* %c, align 4
  %47 = icmp slt i32 %46, 4
  br i1 %47, label %48, label %73

; <label>:48                                      ; preds = %45
  %49 = load i32* %c, align 4
  %50 = sext i32 %49 to i64
  %51 = load i8** %dp, align 8
  %52 = getelementptr inbounds i8* %51, i64 %50
  %53 = load i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl i32 %54, 2
  %56 = load i8** %dp, align 8
  %57 = getelementptr inbounds i8* %56, i64 4
  %58 = load i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = load i32* %c, align 4
  %61 = shl i32 %60, 1
  %62 = ashr i32 %59, %61
  %63 = and i32 %62, 3
  %64 = or i32 %55, %63
  %65 = trunc i32 %64 to i16
  %66 = load i32* %c, align 4
  %67 = sext i32 %66 to i64
  %68 = load i16** %pix, align 8
  %69 = getelementptr inbounds i16* %68, i64 %67
  store i16 %65, i16* %69, align 2
  br label %70

; <label>:70                                      ; preds = %48
  %71 = load i32* %c, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %c, align 4
  br label %45

; <label>:73                                      ; preds = %45
  br label %74

; <label>:74                                      ; preds = %73
  %75 = load i8** %dp, align 8
  %76 = getelementptr inbounds i8* %75, i64 5
  store i8* %76, i8** %dp, align 8
  %77 = load i16** %pix, align 8
  %78 = getelementptr inbounds i16* %77, i64 4
  store i16* %78, i16** %pix, align 8
  br label %36

; <label>:79                                      ; preds = %36
  %80 = load i32* %row, align 4
  %81 = load i16* @top_margin, align 2
  %82 = zext i16 %81 to i32
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %84, label %103

; <label>:84                                      ; preds = %79
  store i32 0, i32* %c, align 4
  br label %85

; <label>:85                                      ; preds = %99, %84
  %86 = load i32* %c, align 4
  %87 = load i16* @width, align 2
  %88 = zext i16 %87 to i32
  %89 = icmp slt i32 %86, %88
  br i1 %89, label %90, label %102

; <label>:90                                      ; preds = %85
  %91 = load i32* %c, align 4
  %92 = sext i32 %91 to i64
  %93 = load i16** %pixel, align 8
  %94 = getelementptr inbounds i16* %93, i64 %92
  %95 = load i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = load i32* @black, align 4
  %98 = add i32 %97, %96
  store i32 %98, i32* @black, align 4
  br label %99

; <label>:99                                      ; preds = %90
  %100 = load i32* %c, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %c, align 4
  br label %85

; <label>:102                                     ; preds = %85
  br label %152

; <label>:103                                     ; preds = %79
  store i32 0, i32* %c, align 4
  br label %104

; <label>:104                                     ; preds = %148, %103
  %105 = load i32* %c, align 4
  %106 = load i16* @width, align 2
  %107 = zext i16 %106 to i32
  %108 = icmp slt i32 %105, %107
  br i1 %108, label %109, label %151

; <label>:109                                     ; preds = %104
  %110 = load i32* %c, align 4
  %111 = sext i32 %110 to i64
  %112 = load i16** %pixel, align 8
  %113 = getelementptr inbounds i16* %112, i64 %111
  %114 = load i16* %113, align 2
  %115 = load i32* @filters, align 4
  %116 = load i32* %row, align 4
  %117 = load i16* @top_margin, align 2
  %118 = zext i16 %117 to i32
  %119 = sub nsw i32 %116, %118
  %120 = shl i32 %119, 1
  %121 = and i32 %120, 14
  %122 = load i32* %c, align 4
  %123 = and i32 %122, 1
  %124 = add nsw i32 %121, %123
  %125 = shl i32 %124, 1
  %126 = lshr i32 %115, %125
  %127 = and i32 %126, 3
  %128 = zext i32 %127 to i64
  %129 = load i32* %row, align 4
  %130 = load i16* @top_margin, align 2
  %131 = zext i16 %130 to i32
  %132 = sub nsw i32 %129, %131
  %133 = load i16* @shrink, align 2
  %134 = zext i16 %133 to i32
  %135 = ashr i32 %132, %134
  %136 = load i16* @iwidth, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nsw i32 %135, %137
  %139 = load i32* %c, align 4
  %140 = load i16* @shrink, align 2
  %141 = zext i16 %140 to i32
  %142 = ashr i32 %139, %141
  %143 = add nsw i32 %138, %142
  %144 = sext i32 %143 to i64
  %145 = load [4 x i16]** @image, align 8
  %146 = getelementptr inbounds [4 x i16]* %145, i64 %144
  %147 = getelementptr inbounds [4 x i16]* %146, i32 0, i64 %128
  store i16 %114, i16* %147, align 2
  br label %148

; <label>:148                                     ; preds = %109
  %149 = load i32* %c, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %c, align 4
  br label %104

; <label>:151                                     ; preds = %104
  br label %152

; <label>:152                                     ; preds = %151, %102
  br label %153

; <label>:153                                     ; preds = %152
  %154 = load i32* %row, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %row, align 4
  br label %18

; <label>:156                                     ; preds = %18
  %157 = load i8** %data, align 8
  call void @free(i8* %157) #4
  %158 = load i16* @top_margin, align 2
  %159 = icmp ne i16 %158, 0
  br i1 %159, label %160, label %168

; <label>:160                                     ; preds = %156
  %161 = load i16* @top_margin, align 2
  %162 = zext i16 %161 to i32
  %163 = load i16* @width, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nsw i32 %162, %164
  %166 = load i32* @black, align 4
  %167 = udiv i32 %166, %165
  store i32 %167, i32* @black, align 4
  br label %168

; <label>:168                                     ; preds = %160, %156
  store i32 1023, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @pana_bits(i32 %nbits) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %byte = alloca i32, align 4
  store i32 %nbits, i32* %2, align 4
  %3 = load i32* %2, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  store i32 0, i32* @pana_bits.vbits, align 4
  store i32 0, i32* %1
  br label %50

; <label>:6                                       ; preds = %0
  %7 = load i32* @pana_bits.vbits, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %22, label %9

; <label>:9                                       ; preds = %6
  %10 = load i32* @load_flags, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8* getelementptr inbounds ([16384 x i8]* @pana_bits.buf, i32 0, i32 0), i64 %11
  %13 = load i32* @load_flags, align 4
  %14 = sub i32 16384, %13
  %15 = zext i32 %14 to i64
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i64 @fread(i8* %12, i64 1, i64 %15, %struct._IO_FILE* %16)
  %18 = load i32* @load_flags, align 4
  %19 = zext i32 %18 to i64
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i64 @fread(i8* getelementptr inbounds ([16384 x i8]* @pana_bits.buf, i32 0, i32 0), i64 1, i64 %19, %struct._IO_FILE* %20)
  br label %22

; <label>:22                                      ; preds = %9, %6
  %23 = load i32* @pana_bits.vbits, align 4
  %24 = load i32* %2, align 4
  %25 = sub nsw i32 %23, %24
  %26 = and i32 %25, 131071
  store i32 %26, i32* @pana_bits.vbits, align 4
  %27 = load i32* @pana_bits.vbits, align 4
  %28 = ashr i32 %27, 3
  %29 = xor i32 %28, 16368
  store i32 %29, i32* %byte, align 4
  %30 = load i32* %byte, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [16384 x i8]* @pana_bits.buf, i32 0, i64 %31
  %33 = load i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = load i32* %byte, align 4
  %36 = add nsw i32 %35, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [16384 x i8]* @pana_bits.buf, i32 0, i64 %37
  %39 = load i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl i32 %40, 8
  %42 = or i32 %34, %41
  %43 = load i32* @pana_bits.vbits, align 4
  %44 = and i32 %43, 7
  %45 = ashr i32 %42, %44
  %46 = load i32* %2, align 4
  %47 = shl i32 -1, %46
  %48 = xor i32 %47, -1
  %49 = and i32 %45, %48
  store i32 %49, i32* %1
  br label %50

; <label>:50                                      ; preds = %22, %5
  %51 = load i32* %1
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define void @panasonic_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sh = alloca i32, align 4
  %pred = alloca [2 x i32], align 4
  %nonz = alloca [2 x i32], align 4
  store i32 0, i32* %sh, align 4
  %1 = call i32 @pana_bits(i32 0)
  store i32 0, i32* %row, align 4
  br label %2

; <label>:2                                       ; preds = %146, %0
  %3 = load i32* %row, align 4
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %7, label %149

; <label>:7                                       ; preds = %2
  store i32 0, i32* %col, align 4
  br label %8

; <label>:8                                       ; preds = %142, %7
  %9 = load i32* %col, align 4
  %10 = load i16* @raw_width, align 2
  %11 = zext i16 %10 to i32
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %145

; <label>:13                                      ; preds = %8
  %14 = load i32* %col, align 4
  %15 = srem i32 %14, 14
  store i32 %15, i32* %i, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 1
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 0
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 0, i32* %21, align 4
  br label %22

; <label>:22                                      ; preds = %17, %13
  %23 = load i32* %i, align 4
  %24 = srem i32 %23, 3
  %25 = icmp eq i32 %24, 2
  br i1 %25, label %26, label %30

; <label>:26                                      ; preds = %22
  %27 = call i32 @pana_bits(i32 2)
  %28 = sub i32 3, %27
  %29 = ashr i32 4, %28
  store i32 %29, i32* %sh, align 4
  br label %30

; <label>:30                                      ; preds = %26, %22
  %31 = load i32* %i, align 4
  %32 = and i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 %33
  %35 = load i32* %34, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %74

; <label>:37                                      ; preds = %30
  %38 = call i32 @pana_bits(i32 8)
  store i32 %38, i32* %j, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %73

; <label>:40                                      ; preds = %37
  %41 = load i32* %sh, align 4
  %42 = shl i32 128, %41
  %43 = load i32* %i, align 4
  %44 = and i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %45
  %47 = load i32* %46, align 4
  %48 = sub nsw i32 %47, %42
  store i32 %48, i32* %46, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %53, label %50

; <label>:50                                      ; preds = %40
  %51 = load i32* %sh, align 4
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %53, label %63

; <label>:53                                      ; preds = %50, %40
  %54 = load i32* %sh, align 4
  %55 = shl i32 -1, %54
  %56 = xor i32 %55, -1
  %57 = load i32* %i, align 4
  %58 = and i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %59
  %61 = load i32* %60, align 4
  %62 = and i32 %61, %56
  store i32 %62, i32* %60, align 4
  br label %63

; <label>:63                                      ; preds = %53, %50
  %64 = load i32* %j, align 4
  %65 = load i32* %sh, align 4
  %66 = shl i32 %64, %65
  %67 = load i32* %i, align 4
  %68 = and i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %69
  %71 = load i32* %70, align 4
  %72 = add nsw i32 %71, %66
  store i32 %72, i32* %70, align 4
  br label %73

; <label>:73                                      ; preds = %63, %37
  br label %98

; <label>:74                                      ; preds = %30
  %75 = call i32 @pana_bits(i32 8)
  %76 = load i32* %i, align 4
  %77 = and i32 %76, 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 %78
  store i32 %75, i32* %79, align 4
  %80 = icmp ne i32 %75, 0
  br i1 %80, label %84, label %81

; <label>:81                                      ; preds = %74
  %82 = load i32* %i, align 4
  %83 = icmp sgt i32 %82, 11
  br i1 %83, label %84, label %97

; <label>:84                                      ; preds = %81, %74
  %85 = load i32* %i, align 4
  %86 = and i32 %85, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [2 x i32]* %nonz, i32 0, i64 %87
  %89 = load i32* %88, align 4
  %90 = shl i32 %89, 4
  %91 = call i32 @pana_bits(i32 4)
  %92 = or i32 %90, %91
  %93 = load i32* %i, align 4
  %94 = and i32 %93, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %95
  store i32 %92, i32* %96, align 4
  br label %97

; <label>:97                                      ; preds = %84, %81
  br label %98

; <label>:98                                      ; preds = %97, %73
  %99 = load i32* %col, align 4
  %100 = load i16* @width, align 2
  %101 = zext i16 %100 to i32
  %102 = icmp slt i32 %99, %101
  br i1 %102, label %103, label %141

; <label>:103                                     ; preds = %98
  %104 = load i32* %col, align 4
  %105 = and i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %106
  %108 = load i32* %107, align 4
  %109 = trunc i32 %108 to i16
  %110 = load i32* @filters, align 4
  %111 = load i32* %row, align 4
  %112 = shl i32 %111, 1
  %113 = and i32 %112, 14
  %114 = load i32* %col, align 4
  %115 = and i32 %114, 1
  %116 = add nsw i32 %113, %115
  %117 = shl i32 %116, 1
  %118 = lshr i32 %110, %117
  %119 = and i32 %118, 3
  %120 = zext i32 %119 to i64
  %121 = load i32* %row, align 4
  %122 = load i16* @shrink, align 2
  %123 = zext i16 %122 to i32
  %124 = ashr i32 %121, %123
  %125 = load i16* @iwidth, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nsw i32 %124, %126
  %128 = load i32* %col, align 4
  %129 = load i16* @shrink, align 2
  %130 = zext i16 %129 to i32
  %131 = ashr i32 %128, %130
  %132 = add nsw i32 %127, %131
  %133 = sext i32 %132 to i64
  %134 = load [4 x i16]** @image, align 8
  %135 = getelementptr inbounds [4 x i16]* %134, i64 %133
  %136 = getelementptr inbounds [4 x i16]* %135, i32 0, i64 %120
  store i16 %109, i16* %136, align 2
  %137 = zext i16 %109 to i32
  %138 = icmp sgt i32 %137, 4098
  br i1 %138, label %139, label %140

; <label>:139                                     ; preds = %103
  call void @derror()
  br label %140

; <label>:140                                     ; preds = %139, %103
  br label %141

; <label>:141                                     ; preds = %140, %98
  br label %142

; <label>:142                                     ; preds = %141
  %143 = load i32* %col, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %col, align 4
  br label %8

; <label>:145                                     ; preds = %8
  br label %146

; <label>:146                                     ; preds = %145
  %147 = load i32* %row, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %row, align 4
  br label %2

; <label>:149                                     ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define void @olympus_e300_load_raw() #0 {
  %data = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %pixel = alloca i16*, align 8
  %pix = alloca i16*, align 8
  %dwide = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = mul nsw i32 %2, 16
  %4 = sdiv i32 %3, 10
  store i32 %4, i32* %dwide, align 4
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = load i32* %dwide, align 4
  %7 = load i16* @top_margin, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nsw i32 %6, %8
  %10 = sext i32 %9 to i64
  %11 = call i32 @fseek(%struct._IO_FILE* %5, i64 %10, i32 1)
  %12 = load i32* %dwide, align 4
  %13 = load i16* @raw_width, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nsw i32 %14, 2
  %16 = add nsw i32 %12, %15
  %17 = sext i32 %16 to i64
  %18 = call noalias i8* @malloc(i64 %17) #4
  store i8* %18, i8** %data, align 8
  %19 = load i8** %data, align 8
  call void @merror(i8* %19, i8* getelementptr inbounds ([24 x i8]* @.str26, i32 0, i32 0))
  %20 = load i8** %data, align 8
  %21 = load i32* %dwide, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8* %20, i64 %22
  %24 = bitcast i8* %23 to i16*
  store i16* %24, i16** %pixel, align 8
  store i32 0, i32* %row, align 4
  br label %25

; <label>:25                                      ; preds = %161, %0
  %26 = load i32* %row, align 4
  %27 = load i16* @height, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %164

; <label>:30                                      ; preds = %25
  %31 = load i8** %data, align 8
  %32 = load i32* %dwide, align 4
  %33 = sext i32 %32 to i64
  %34 = load %struct._IO_FILE** @ifp, align 8
  %35 = call i64 @fread(i8* %31, i64 1, i64 %33, %struct._IO_FILE* %34)
  %36 = load i32* %dwide, align 4
  %37 = sext i32 %36 to i64
  %38 = icmp ult i64 %35, %37
  br i1 %38, label %39, label %40

; <label>:39                                      ; preds = %30
  call void @derror()
  br label %40

; <label>:40                                      ; preds = %39, %30
  %41 = load i8** %data, align 8
  store i8* %41, i8** %dp, align 8
  %42 = load i16** %pixel, align 8
  store i16* %42, i16** %pix, align 8
  br label %43

; <label>:43                                      ; preds = %107, %40
  %44 = load i16** %pix, align 8
  %45 = load i16** %pixel, align 8
  %46 = load i16* @raw_width, align 2
  %47 = zext i16 %46 to i32
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16* %45, i64 %48
  %50 = icmp ult i16* %44, %49
  br i1 %50, label %51, label %112

; <label>:51                                      ; preds = %43
  %52 = load i8** %dp, align 8
  %53 = load i8** %data, align 8
  %54 = ptrtoint i8* %52 to i64
  %55 = ptrtoint i8* %53 to i64
  %56 = sub i64 %54, %55
  %57 = and i64 %56, 15
  %58 = icmp eq i64 %57, 15
  br i1 %58, label %59, label %79

; <label>:59                                      ; preds = %51
  %60 = load i8** %dp, align 8
  %61 = getelementptr inbounds i8* %60, i32 1
  store i8* %61, i8** %dp, align 8
  %62 = load i8* %60, align 1
  %63 = zext i8 %62 to i32
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %78

; <label>:65                                      ; preds = %59
  %66 = load i16** %pix, align 8
  %67 = load i16** %pixel, align 8
  %68 = load i16* @width, align 2
  %69 = zext i16 %68 to i32
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i16* %67, i64 %70
  %72 = load i16* @left_margin, align 2
  %73 = zext i16 %72 to i32
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i16* %71, i64 %74
  %76 = icmp ult i16* %66, %75
  br i1 %76, label %77, label %78

; <label>:77                                      ; preds = %65
  call void @derror()
  br label %78

; <label>:78                                      ; preds = %77, %65, %59
  br label %79

; <label>:79                                      ; preds = %78, %51
  %80 = load i8** %dp, align 8
  %81 = getelementptr inbounds i8* %80, i64 1
  %82 = load i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = shl i32 %83, 8
  %85 = load i8** %dp, align 8
  %86 = getelementptr inbounds i8* %85, i64 0
  %87 = load i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = or i32 %84, %88
  %90 = trunc i32 %89 to i16
  %91 = load i16** %pix, align 8
  %92 = getelementptr inbounds i16* %91, i64 0
  store i16 %90, i16* %92, align 2
  %93 = load i8** %dp, align 8
  %94 = getelementptr inbounds i8* %93, i64 2
  %95 = load i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = shl i32 %96, 4
  %98 = load i8** %dp, align 8
  %99 = getelementptr inbounds i8* %98, i64 1
  %100 = load i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = ashr i32 %101, 4
  %103 = or i32 %97, %102
  %104 = trunc i32 %103 to i16
  %105 = load i16** %pix, align 8
  %106 = getelementptr inbounds i16* %105, i64 1
  store i16 %104, i16* %106, align 2
  br label %107

; <label>:107                                     ; preds = %79
  %108 = load i8** %dp, align 8
  %109 = getelementptr inbounds i8* %108, i64 3
  store i8* %109, i8** %dp, align 8
  %110 = load i16** %pix, align 8
  %111 = getelementptr inbounds i16* %110, i64 2
  store i16* %111, i16** %pix, align 8
  br label %43

; <label>:112                                     ; preds = %43
  store i32 0, i32* %col, align 4
  br label %113

; <label>:113                                     ; preds = %157, %112
  %114 = load i32* %col, align 4
  %115 = load i16* @width, align 2
  %116 = zext i16 %115 to i32
  %117 = icmp slt i32 %114, %116
  br i1 %117, label %118, label %160

; <label>:118                                     ; preds = %113
  %119 = load i32* %col, align 4
  %120 = load i16* @left_margin, align 2
  %121 = zext i16 %120 to i32
  %122 = add nsw i32 %119, %121
  %123 = sext i32 %122 to i64
  %124 = load i16** %pixel, align 8
  %125 = getelementptr inbounds i16* %124, i64 %123
  %126 = load i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = and i32 %127, 4095
  %129 = trunc i32 %128 to i16
  %130 = load i32* @filters, align 4
  %131 = load i32* %row, align 4
  %132 = shl i32 %131, 1
  %133 = and i32 %132, 14
  %134 = load i32* %col, align 4
  %135 = and i32 %134, 1
  %136 = add nsw i32 %133, %135
  %137 = shl i32 %136, 1
  %138 = lshr i32 %130, %137
  %139 = and i32 %138, 3
  %140 = zext i32 %139 to i64
  %141 = load i32* %row, align 4
  %142 = load i16* @shrink, align 2
  %143 = zext i16 %142 to i32
  %144 = ashr i32 %141, %143
  %145 = load i16* @iwidth, align 2
  %146 = zext i16 %145 to i32
  %147 = mul nsw i32 %144, %146
  %148 = load i32* %col, align 4
  %149 = load i16* @shrink, align 2
  %150 = zext i16 %149 to i32
  %151 = ashr i32 %148, %150
  %152 = add nsw i32 %147, %151
  %153 = sext i32 %152 to i64
  %154 = load [4 x i16]** @image, align 8
  %155 = getelementptr inbounds [4 x i16]* %154, i64 %153
  %156 = getelementptr inbounds [4 x i16]* %155, i32 0, i64 %140
  store i16 %129, i16* %156, align 2
  br label %157

; <label>:157                                     ; preds = %118
  %158 = load i32* %col, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %col, align 4
  br label %113

; <label>:160                                     ; preds = %113
  br label %161

; <label>:161                                     ; preds = %160
  %162 = load i32* %row, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %row, align 4
  br label %25

; <label>:164                                     ; preds = %25
  %165 = load i8** %data, align 8
  call void @free(i8* %165) #4
  %166 = load i32* @maximum, align 4
  %167 = lshr i32 %166, 4
  store i32 %167, i32* @maximum, align 4
  %168 = load i32* @black, align 4
  %169 = lshr i32 %168, 4
  store i32 %169, i32* @black, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @olympus_e410_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %nbits = alloca i32, align 4
  %sign = alloca i32, align 4
  %low = alloca i32, align 4
  %high = alloca i32, align 4
  %i = alloca i32, align 4
  %w = alloca i32, align 4
  %n = alloca i32, align 4
  %nw = alloca i32, align 4
  %acarry = alloca [2 x [3 x i32]], align 16
  %carry = alloca i32*, align 8
  %pred = alloca i32, align 4
  %diff = alloca i32, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 7, i32 1)
  %3 = call i32 @getbits(i32 -1)
  store i32 0, i32* %row, align 4
  br label %4

; <label>:4                                       ; preds = %419, %0
  %5 = load i32* %row, align 4
  %6 = load i16* @height, align 2
  %7 = zext i16 %6 to i32
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %9, label %422

; <label>:9                                       ; preds = %4
  %10 = bitcast [2 x [3 x i32]]* %acarry to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 24, i32 16, i1 false)
  store i32 0, i32* %col, align 4
  br label %11

; <label>:11                                      ; preds = %415, %9
  %12 = load i32* %col, align 4
  %13 = load i16* @width, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %16, label %418

; <label>:16                                      ; preds = %11
  %17 = load i32* %col, align 4
  %18 = and i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [2 x [3 x i32]]* %acarry, i32 0, i64 %19
  %21 = getelementptr inbounds [3 x i32]* %20, i32 0, i32 0
  store i32* %21, i32** %carry, align 8
  %22 = load i32** %carry, align 8
  %23 = getelementptr inbounds i32* %22, i64 2
  %24 = load i32* %23, align 4
  %25 = icmp slt i32 %24, 3
  %26 = zext i1 %25 to i32
  %27 = mul nsw i32 2, %26
  store i32 %27, i32* %i, align 4
  %28 = load i32* %i, align 4
  %29 = add nsw i32 2, %28
  store i32 %29, i32* %nbits, align 4
  br label %30

; <label>:30                                      ; preds = %42, %16
  %31 = load i32** %carry, align 8
  %32 = getelementptr inbounds i32* %31, i64 0
  %33 = load i32* %32, align 4
  %34 = trunc i32 %33 to i16
  %35 = zext i16 %34 to i32
  %36 = load i32* %nbits, align 4
  %37 = load i32* %i, align 4
  %38 = add nsw i32 %36, %37
  %39 = ashr i32 %35, %38
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %45

; <label>:41                                      ; preds = %30
  br label %42

; <label>:42                                      ; preds = %41
  %43 = load i32* %nbits, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %nbits, align 4
  br label %30

; <label>:45                                      ; preds = %30
  %46 = call i32 @getbits(i32 1)
  %47 = mul i32 %46, -1
  store i32 %47, i32* %sign, align 4
  %48 = call i32 @getbits(i32 2)
  store i32 %48, i32* %low, align 4
  store i32 0, i32* %high, align 4
  br label %49

; <label>:49                                      ; preds = %57, %45
  %50 = load i32* %high, align 4
  %51 = icmp slt i32 %50, 12
  br i1 %51, label %52, label %60

; <label>:52                                      ; preds = %49
  %53 = call i32 @getbits(i32 1)
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %56

; <label>:55                                      ; preds = %52
  br label %60

; <label>:56                                      ; preds = %52
  br label %57

; <label>:57                                      ; preds = %56
  %58 = load i32* %high, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %high, align 4
  br label %49

; <label>:60                                      ; preds = %55, %49
  %61 = load i32* %high, align 4
  %62 = icmp eq i32 %61, 12
  br i1 %62, label %63, label %68

; <label>:63                                      ; preds = %60
  %64 = load i32* %nbits, align 4
  %65 = sub nsw i32 16, %64
  %66 = call i32 @getbits(i32 %65)
  %67 = lshr i32 %66, 1
  store i32 %67, i32* %high, align 4
  br label %68

; <label>:68                                      ; preds = %63, %60
  %69 = load i32* %high, align 4
  %70 = load i32* %nbits, align 4
  %71 = shl i32 %69, %70
  %72 = load i32* %nbits, align 4
  %73 = call i32 @getbits(i32 %72)
  %74 = or i32 %71, %73
  %75 = load i32** %carry, align 8
  %76 = getelementptr inbounds i32* %75, i64 0
  store i32 %74, i32* %76, align 4
  %77 = load i32** %carry, align 8
  %78 = getelementptr inbounds i32* %77, i64 0
  %79 = load i32* %78, align 4
  %80 = load i32* %sign, align 4
  %81 = xor i32 %79, %80
  %82 = load i32** %carry, align 8
  %83 = getelementptr inbounds i32* %82, i64 1
  %84 = load i32* %83, align 4
  %85 = add nsw i32 %81, %84
  store i32 %85, i32* %diff, align 4
  %86 = load i32* %diff, align 4
  %87 = mul nsw i32 %86, 3
  %88 = load i32** %carry, align 8
  %89 = getelementptr inbounds i32* %88, i64 1
  %90 = load i32* %89, align 4
  %91 = add nsw i32 %87, %90
  %92 = ashr i32 %91, 5
  %93 = load i32** %carry, align 8
  %94 = getelementptr inbounds i32* %93, i64 1
  store i32 %92, i32* %94, align 4
  %95 = load i32** %carry, align 8
  %96 = getelementptr inbounds i32* %95, i64 0
  %97 = load i32* %96, align 4
  %98 = icmp sgt i32 %97, 16
  br i1 %98, label %99, label %100

; <label>:99                                      ; preds = %68
  br label %105

; <label>:100                                     ; preds = %68
  %101 = load i32** %carry, align 8
  %102 = getelementptr inbounds i32* %101, i64 2
  %103 = load i32* %102, align 4
  %104 = add nsw i32 %103, 1
  br label %105

; <label>:105                                     ; preds = %100, %99
  %106 = phi i32 [ 0, %99 ], [ %104, %100 ]
  %107 = load i32** %carry, align 8
  %108 = getelementptr inbounds i32* %107, i64 2
  store i32 %106, i32* %108, align 4
  %109 = load i32* %row, align 4
  %110 = icmp slt i32 %109, 2
  br i1 %110, label %111, label %115

; <label>:111                                     ; preds = %105
  %112 = load i32* %col, align 4
  %113 = icmp slt i32 %112, 2
  br i1 %113, label %114, label %115

; <label>:114                                     ; preds = %111
  store i32 0, i32* %pred, align 4
  br label %375

; <label>:115                                     ; preds = %111, %105
  %116 = load i32* %row, align 4
  %117 = icmp slt i32 %116, 2
  br i1 %117, label %118, label %150

; <label>:118                                     ; preds = %115
  %119 = load i32* @filters, align 4
  %120 = load i32* %row, align 4
  %121 = shl i32 %120, 1
  %122 = and i32 %121, 14
  %123 = load i32* %col, align 4
  %124 = sub nsw i32 %123, 2
  %125 = and i32 %124, 1
  %126 = add nsw i32 %122, %125
  %127 = shl i32 %126, 1
  %128 = lshr i32 %119, %127
  %129 = and i32 %128, 3
  %130 = zext i32 %129 to i64
  %131 = load i32* %row, align 4
  %132 = load i16* @shrink, align 2
  %133 = zext i16 %132 to i32
  %134 = ashr i32 %131, %133
  %135 = load i16* @iwidth, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nsw i32 %134, %136
  %138 = load i32* %col, align 4
  %139 = sub nsw i32 %138, 2
  %140 = load i16* @shrink, align 2
  %141 = zext i16 %140 to i32
  %142 = ashr i32 %139, %141
  %143 = add nsw i32 %137, %142
  %144 = sext i32 %143 to i64
  %145 = load [4 x i16]** @image, align 8
  %146 = getelementptr inbounds [4 x i16]* %145, i64 %144
  %147 = getelementptr inbounds [4 x i16]* %146, i32 0, i64 %130
  %148 = load i16* %147, align 2
  %149 = zext i16 %148 to i32
  store i32 %149, i32* %pred, align 4
  br label %374

; <label>:150                                     ; preds = %115
  %151 = load i32* %col, align 4
  %152 = icmp slt i32 %151, 2
  br i1 %152, label %153, label %185

; <label>:153                                     ; preds = %150
  %154 = load i32* @filters, align 4
  %155 = load i32* %row, align 4
  %156 = sub nsw i32 %155, 2
  %157 = shl i32 %156, 1
  %158 = and i32 %157, 14
  %159 = load i32* %col, align 4
  %160 = and i32 %159, 1
  %161 = add nsw i32 %158, %160
  %162 = shl i32 %161, 1
  %163 = lshr i32 %154, %162
  %164 = and i32 %163, 3
  %165 = zext i32 %164 to i64
  %166 = load i32* %row, align 4
  %167 = sub nsw i32 %166, 2
  %168 = load i16* @shrink, align 2
  %169 = zext i16 %168 to i32
  %170 = ashr i32 %167, %169
  %171 = load i16* @iwidth, align 2
  %172 = zext i16 %171 to i32
  %173 = mul nsw i32 %170, %172
  %174 = load i32* %col, align 4
  %175 = load i16* @shrink, align 2
  %176 = zext i16 %175 to i32
  %177 = ashr i32 %174, %176
  %178 = add nsw i32 %173, %177
  %179 = sext i32 %178 to i64
  %180 = load [4 x i16]** @image, align 8
  %181 = getelementptr inbounds [4 x i16]* %180, i64 %179
  %182 = getelementptr inbounds [4 x i16]* %181, i32 0, i64 %165
  %183 = load i16* %182, align 2
  %184 = zext i16 %183 to i32
  store i32 %184, i32* %pred, align 4
  br label %373

; <label>:185                                     ; preds = %150
  %186 = load i32* @filters, align 4
  %187 = load i32* %row, align 4
  %188 = shl i32 %187, 1
  %189 = and i32 %188, 14
  %190 = load i32* %col, align 4
  %191 = sub nsw i32 %190, 2
  %192 = and i32 %191, 1
  %193 = add nsw i32 %189, %192
  %194 = shl i32 %193, 1
  %195 = lshr i32 %186, %194
  %196 = and i32 %195, 3
  %197 = zext i32 %196 to i64
  %198 = load i32* %row, align 4
  %199 = load i16* @shrink, align 2
  %200 = zext i16 %199 to i32
  %201 = ashr i32 %198, %200
  %202 = load i16* @iwidth, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nsw i32 %201, %203
  %205 = load i32* %col, align 4
  %206 = sub nsw i32 %205, 2
  %207 = load i16* @shrink, align 2
  %208 = zext i16 %207 to i32
  %209 = ashr i32 %206, %208
  %210 = add nsw i32 %204, %209
  %211 = sext i32 %210 to i64
  %212 = load [4 x i16]** @image, align 8
  %213 = getelementptr inbounds [4 x i16]* %212, i64 %211
  %214 = getelementptr inbounds [4 x i16]* %213, i32 0, i64 %197
  %215 = load i16* %214, align 2
  %216 = zext i16 %215 to i32
  store i32 %216, i32* %w, align 4
  %217 = load i32* @filters, align 4
  %218 = load i32* %row, align 4
  %219 = sub nsw i32 %218, 2
  %220 = shl i32 %219, 1
  %221 = and i32 %220, 14
  %222 = load i32* %col, align 4
  %223 = and i32 %222, 1
  %224 = add nsw i32 %221, %223
  %225 = shl i32 %224, 1
  %226 = lshr i32 %217, %225
  %227 = and i32 %226, 3
  %228 = zext i32 %227 to i64
  %229 = load i32* %row, align 4
  %230 = sub nsw i32 %229, 2
  %231 = load i16* @shrink, align 2
  %232 = zext i16 %231 to i32
  %233 = ashr i32 %230, %232
  %234 = load i16* @iwidth, align 2
  %235 = zext i16 %234 to i32
  %236 = mul nsw i32 %233, %235
  %237 = load i32* %col, align 4
  %238 = load i16* @shrink, align 2
  %239 = zext i16 %238 to i32
  %240 = ashr i32 %237, %239
  %241 = add nsw i32 %236, %240
  %242 = sext i32 %241 to i64
  %243 = load [4 x i16]** @image, align 8
  %244 = getelementptr inbounds [4 x i16]* %243, i64 %242
  %245 = getelementptr inbounds [4 x i16]* %244, i32 0, i64 %228
  %246 = load i16* %245, align 2
  %247 = zext i16 %246 to i32
  store i32 %247, i32* %n, align 4
  %248 = load i32* @filters, align 4
  %249 = load i32* %row, align 4
  %250 = sub nsw i32 %249, 2
  %251 = shl i32 %250, 1
  %252 = and i32 %251, 14
  %253 = load i32* %col, align 4
  %254 = sub nsw i32 %253, 2
  %255 = and i32 %254, 1
  %256 = add nsw i32 %252, %255
  %257 = shl i32 %256, 1
  %258 = lshr i32 %248, %257
  %259 = and i32 %258, 3
  %260 = zext i32 %259 to i64
  %261 = load i32* %row, align 4
  %262 = sub nsw i32 %261, 2
  %263 = load i16* @shrink, align 2
  %264 = zext i16 %263 to i32
  %265 = ashr i32 %262, %264
  %266 = load i16* @iwidth, align 2
  %267 = zext i16 %266 to i32
  %268 = mul nsw i32 %265, %267
  %269 = load i32* %col, align 4
  %270 = sub nsw i32 %269, 2
  %271 = load i16* @shrink, align 2
  %272 = zext i16 %271 to i32
  %273 = ashr i32 %270, %272
  %274 = add nsw i32 %268, %273
  %275 = sext i32 %274 to i64
  %276 = load [4 x i16]** @image, align 8
  %277 = getelementptr inbounds [4 x i16]* %276, i64 %275
  %278 = getelementptr inbounds [4 x i16]* %277, i32 0, i64 %260
  %279 = load i16* %278, align 2
  %280 = zext i16 %279 to i32
  store i32 %280, i32* %nw, align 4
  %281 = load i32* %w, align 4
  %282 = load i32* %nw, align 4
  %283 = icmp slt i32 %281, %282
  br i1 %283, label %284, label %288

; <label>:284                                     ; preds = %185
  %285 = load i32* %nw, align 4
  %286 = load i32* %n, align 4
  %287 = icmp slt i32 %285, %286
  br i1 %287, label %296, label %288

; <label>:288                                     ; preds = %284, %185
  %289 = load i32* %n, align 4
  %290 = load i32* %nw, align 4
  %291 = icmp slt i32 %289, %290
  br i1 %291, label %292, label %338

; <label>:292                                     ; preds = %288
  %293 = load i32* %nw, align 4
  %294 = load i32* %w, align 4
  %295 = icmp slt i32 %293, %294
  br i1 %295, label %296, label %338

; <label>:296                                     ; preds = %292, %284
  %297 = load i32* %w, align 4
  %298 = load i32* %nw, align 4
  %299 = sub nsw i32 %297, %298
  %300 = load i32* %w, align 4
  %301 = load i32* %nw, align 4
  %302 = sub nsw i32 %300, %301
  %303 = ashr i32 %302, 31
  %304 = xor i32 %299, %303
  %305 = load i32* %w, align 4
  %306 = load i32* %nw, align 4
  %307 = sub nsw i32 %305, %306
  %308 = ashr i32 %307, 31
  %309 = sub nsw i32 %304, %308
  %310 = icmp sgt i32 %309, 32
  br i1 %310, label %326, label %311

; <label>:311                                     ; preds = %296
  %312 = load i32* %n, align 4
  %313 = load i32* %nw, align 4
  %314 = sub nsw i32 %312, %313
  %315 = load i32* %n, align 4
  %316 = load i32* %nw, align 4
  %317 = sub nsw i32 %315, %316
  %318 = ashr i32 %317, 31
  %319 = xor i32 %314, %318
  %320 = load i32* %n, align 4
  %321 = load i32* %nw, align 4
  %322 = sub nsw i32 %320, %321
  %323 = ashr i32 %322, 31
  %324 = sub nsw i32 %319, %323
  %325 = icmp sgt i32 %324, 32
  br i1 %325, label %326, label %332

; <label>:326                                     ; preds = %311, %296
  %327 = load i32* %w, align 4
  %328 = load i32* %n, align 4
  %329 = add nsw i32 %327, %328
  %330 = load i32* %nw, align 4
  %331 = sub nsw i32 %329, %330
  store i32 %331, i32* %pred, align 4
  br label %337

; <label>:332                                     ; preds = %311
  %333 = load i32* %w, align 4
  %334 = load i32* %n, align 4
  %335 = add nsw i32 %333, %334
  %336 = ashr i32 %335, 1
  store i32 %336, i32* %pred, align 4
  br label %337

; <label>:337                                     ; preds = %332, %326
  br label %372

; <label>:338                                     ; preds = %292, %288
  %339 = load i32* %w, align 4
  %340 = load i32* %nw, align 4
  %341 = sub nsw i32 %339, %340
  %342 = load i32* %w, align 4
  %343 = load i32* %nw, align 4
  %344 = sub nsw i32 %342, %343
  %345 = ashr i32 %344, 31
  %346 = xor i32 %341, %345
  %347 = load i32* %w, align 4
  %348 = load i32* %nw, align 4
  %349 = sub nsw i32 %347, %348
  %350 = ashr i32 %349, 31
  %351 = sub nsw i32 %346, %350
  %352 = load i32* %n, align 4
  %353 = load i32* %nw, align 4
  %354 = sub nsw i32 %352, %353
  %355 = load i32* %n, align 4
  %356 = load i32* %nw, align 4
  %357 = sub nsw i32 %355, %356
  %358 = ashr i32 %357, 31
  %359 = xor i32 %354, %358
  %360 = load i32* %n, align 4
  %361 = load i32* %nw, align 4
  %362 = sub nsw i32 %360, %361
  %363 = ashr i32 %362, 31
  %364 = sub nsw i32 %359, %363
  %365 = icmp sgt i32 %351, %364
  br i1 %365, label %366, label %368

; <label>:366                                     ; preds = %338
  %367 = load i32* %w, align 4
  br label %370

; <label>:368                                     ; preds = %338
  %369 = load i32* %n, align 4
  br label %370

; <label>:370                                     ; preds = %368, %366
  %371 = phi i32 [ %367, %366 ], [ %369, %368 ]
  store i32 %371, i32* %pred, align 4
  br label %372

; <label>:372                                     ; preds = %370, %337
  br label %373

; <label>:373                                     ; preds = %372, %153
  br label %374

; <label>:374                                     ; preds = %373, %118
  br label %375

; <label>:375                                     ; preds = %374, %114
  %376 = load i32* %pred, align 4
  %377 = load i32* %diff, align 4
  %378 = shl i32 %377, 2
  %379 = load i32* %low, align 4
  %380 = or i32 %378, %379
  %381 = add nsw i32 %376, %380
  %382 = trunc i32 %381 to i16
  %383 = load i32* @filters, align 4
  %384 = load i32* %row, align 4
  %385 = shl i32 %384, 1
  %386 = and i32 %385, 14
  %387 = load i32* %col, align 4
  %388 = and i32 %387, 1
  %389 = add nsw i32 %386, %388
  %390 = shl i32 %389, 1
  %391 = lshr i32 %383, %390
  %392 = and i32 %391, 3
  %393 = zext i32 %392 to i64
  %394 = load i32* %row, align 4
  %395 = load i16* @shrink, align 2
  %396 = zext i16 %395 to i32
  %397 = ashr i32 %394, %396
  %398 = load i16* @iwidth, align 2
  %399 = zext i16 %398 to i32
  %400 = mul nsw i32 %397, %399
  %401 = load i32* %col, align 4
  %402 = load i16* @shrink, align 2
  %403 = zext i16 %402 to i32
  %404 = ashr i32 %401, %403
  %405 = add nsw i32 %400, %404
  %406 = sext i32 %405 to i64
  %407 = load [4 x i16]** @image, align 8
  %408 = getelementptr inbounds [4 x i16]* %407, i64 %406
  %409 = getelementptr inbounds [4 x i16]* %408, i32 0, i64 %393
  store i16 %382, i16* %409, align 2
  %410 = zext i16 %382 to i32
  %411 = ashr i32 %410, 12
  %412 = icmp ne i32 %411, 0
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %375
  call void @derror()
  br label %414

; <label>:414                                     ; preds = %413, %375
  br label %415

; <label>:415                                     ; preds = %414
  %416 = load i32* %col, align 4
  %417 = add nsw i32 %416, 1
  store i32 %417, i32* %col, align 4
  br label %11

; <label>:418                                     ; preds = %11
  br label %419

; <label>:419                                     ; preds = %418
  %420 = load i32* %row, align 4
  %421 = add nsw i32 %420, 1
  store i32 %421, i32* %row, align 4
  br label %4

; <label>:422                                     ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @minolta_rd175_load_raw() #0 {
  %pixel = alloca [768 x i8], align 16
  %irow = alloca i32, align 4
  %box = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 0, i32* %irow, align 4
  br label %1

; <label>:1                                       ; preds = %218, %0
  %2 = load i32* %irow, align 4
  %3 = icmp ult i32 %2, 1481
  br i1 %3, label %4, label %221

; <label>:4                                       ; preds = %1
  %5 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i32 0
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i64 @fread(i8* %5, i64 1, i64 768, %struct._IO_FILE* %6)
  %8 = icmp ult i64 %7, 768
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %4
  call void @derror()
  br label %10

; <label>:10                                      ; preds = %9, %4
  %11 = load i32* %irow, align 4
  %12 = udiv i32 %11, 82
  store i32 %12, i32* %box, align 4
  %13 = load i32* %irow, align 4
  %14 = urem i32 %13, 82
  %15 = mul i32 %14, 12
  %16 = load i32* %box, align 4
  %17 = icmp ult i32 %16, 12
  br i1 %17, label %18, label %21

; <label>:18                                      ; preds = %10
  %19 = load i32* %box, align 4
  %20 = or i32 %19, 1
  br label %25

; <label>:21                                      ; preds = %10
  %22 = load i32* %box, align 4
  %23 = sub i32 %22, 12
  %24 = mul i32 %23, 2
  br label %25

; <label>:25                                      ; preds = %21, %18
  %26 = phi i32 [ %20, %18 ], [ %24, %21 ]
  %27 = add i32 %15, %26
  store i32 %27, i32* %row, align 4
  %28 = load i32* %irow, align 4
  switch i32 %28, label %33 [
    i32 1477, label %29
    i32 1479, label %29
    i32 1476, label %30
    i32 1480, label %31
    i32 1478, label %32
  ]

; <label>:29                                      ; preds = %25, %25
  br label %218

; <label>:30                                      ; preds = %25
  store i32 984, i32* %row, align 4
  br label %33

; <label>:31                                      ; preds = %25
  store i32 985, i32* %row, align 4
  br label %33

; <label>:32                                      ; preds = %25
  store i32 985, i32* %row, align 4
  store i32 1, i32* %box, align 4
  br label %33

; <label>:33                                      ; preds = %32, %25, %31, %30
  %34 = load i32* %box, align 4
  %35 = icmp ult i32 %34, 12
  br i1 %35, label %36, label %171

; <label>:36                                      ; preds = %33
  %37 = load i32* %box, align 4
  %38 = and i32 %37, 1
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %171

; <label>:40                                      ; preds = %36
  store i32 0, i32* %col, align 4
  br label %41

; <label>:41                                      ; preds = %107, %40
  %42 = load i32* %col, align 4
  %43 = icmp ult i32 %42, 1533
  br i1 %43, label %44, label %112

; <label>:44                                      ; preds = %41
  %45 = load i32* %col, align 4
  %46 = icmp ne i32 %45, 1
  br i1 %46, label %47, label %106

; <label>:47                                      ; preds = %44
  %48 = load i32* %col, align 4
  %49 = add i32 %48, 1
  %50 = and i32 %49, 2
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %68

; <label>:52                                      ; preds = %47
  %53 = load i32* %col, align 4
  %54 = udiv i32 %53, 2
  %55 = sub i32 %54, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %56
  %58 = load i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = load i32* %col, align 4
  %61 = udiv i32 %60, 2
  %62 = add i32 %61, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %63
  %65 = load i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nsw i32 %59, %66
  br label %76

; <label>:68                                      ; preds = %47
  %69 = load i32* %col, align 4
  %70 = udiv i32 %69, 2
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %71
  %73 = load i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl i32 %74, 1
  br label %76

; <label>:76                                      ; preds = %68, %52
  %77 = phi i32 [ %67, %52 ], [ %75, %68 ]
  %78 = trunc i32 %77 to i16
  %79 = load i32* @filters, align 4
  %80 = load i32* %row, align 4
  %81 = shl i32 %80, 1
  %82 = and i32 %81, 14
  %83 = load i32* %col, align 4
  %84 = and i32 %83, 1
  %85 = add i32 %82, %84
  %86 = shl i32 %85, 1
  %87 = lshr i32 %79, %86
  %88 = and i32 %87, 3
  %89 = zext i32 %88 to i64
  %90 = load i32* %row, align 4
  %91 = load i16* @shrink, align 2
  %92 = zext i16 %91 to i32
  %93 = lshr i32 %90, %92
  %94 = load i16* @iwidth, align 2
  %95 = zext i16 %94 to i32
  %96 = mul i32 %93, %95
  %97 = load i32* %col, align 4
  %98 = load i16* @shrink, align 2
  %99 = zext i16 %98 to i32
  %100 = lshr i32 %97, %99
  %101 = add i32 %96, %100
  %102 = zext i32 %101 to i64
  %103 = load [4 x i16]** @image, align 8
  %104 = getelementptr inbounds [4 x i16]* %103, i64 %102
  %105 = getelementptr inbounds [4 x i16]* %104, i32 0, i64 %89
  store i16 %78, i16* %105, align 2
  br label %106

; <label>:106                                     ; preds = %76, %44
  br label %107

; <label>:107                                     ; preds = %106
  %108 = load i32* %col, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %col, align 4
  %110 = load i32* %row, align 4
  %111 = xor i32 %110, 1
  store i32 %111, i32* %row, align 4
  br label %41

; <label>:112                                     ; preds = %41
  %113 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 1
  %114 = load i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = shl i32 %115, 1
  %117 = trunc i32 %116 to i16
  %118 = load i32* @filters, align 4
  %119 = load i32* %row, align 4
  %120 = shl i32 %119, 1
  %121 = and i32 %120, 14
  %122 = add i32 %121, 1
  %123 = shl i32 %122, 1
  %124 = lshr i32 %118, %123
  %125 = and i32 %124, 3
  %126 = zext i32 %125 to i64
  %127 = load i32* %row, align 4
  %128 = load i16* @shrink, align 2
  %129 = zext i16 %128 to i32
  %130 = lshr i32 %127, %129
  %131 = load i16* @iwidth, align 2
  %132 = zext i16 %131 to i32
  %133 = mul i32 %130, %132
  %134 = load i16* @shrink, align 2
  %135 = zext i16 %134 to i32
  %136 = ashr i32 1, %135
  %137 = add i32 %133, %136
  %138 = zext i32 %137 to i64
  %139 = load [4 x i16]** @image, align 8
  %140 = getelementptr inbounds [4 x i16]* %139, i64 %138
  %141 = getelementptr inbounds [4 x i16]* %140, i32 0, i64 %126
  store i16 %117, i16* %141, align 2
  %142 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 765
  %143 = load i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = shl i32 %144, 1
  %146 = trunc i32 %145 to i16
  %147 = load i32* @filters, align 4
  %148 = load i32* %row, align 4
  %149 = shl i32 %148, 1
  %150 = and i32 %149, 14
  %151 = add i32 %150, 1
  %152 = shl i32 %151, 1
  %153 = lshr i32 %147, %152
  %154 = and i32 %153, 3
  %155 = zext i32 %154 to i64
  %156 = load i32* %row, align 4
  %157 = load i16* @shrink, align 2
  %158 = zext i16 %157 to i32
  %159 = lshr i32 %156, %158
  %160 = load i16* @iwidth, align 2
  %161 = zext i16 %160 to i32
  %162 = mul i32 %159, %161
  %163 = load i16* @shrink, align 2
  %164 = zext i16 %163 to i32
  %165 = ashr i32 1533, %164
  %166 = add i32 %162, %165
  %167 = zext i32 %166 to i64
  %168 = load [4 x i16]** @image, align 8
  %169 = getelementptr inbounds [4 x i16]* %168, i64 %167
  %170 = getelementptr inbounds [4 x i16]* %169, i32 0, i64 %155
  store i16 %146, i16* %170, align 2
  br label %217

; <label>:171                                     ; preds = %36, %33
  %172 = load i32* %row, align 4
  %173 = and i32 %172, 1
  store i32 %173, i32* %col, align 4
  br label %174

; <label>:174                                     ; preds = %213, %171
  %175 = load i32* %col, align 4
  %176 = icmp ult i32 %175, 1534
  br i1 %176, label %177, label %216

; <label>:177                                     ; preds = %174
  %178 = load i32* %col, align 4
  %179 = udiv i32 %178, 2
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [768 x i8]* %pixel, i32 0, i64 %180
  %182 = load i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = shl i32 %183, 1
  %185 = trunc i32 %184 to i16
  %186 = load i32* @filters, align 4
  %187 = load i32* %row, align 4
  %188 = shl i32 %187, 1
  %189 = and i32 %188, 14
  %190 = load i32* %col, align 4
  %191 = and i32 %190, 1
  %192 = add i32 %189, %191
  %193 = shl i32 %192, 1
  %194 = lshr i32 %186, %193
  %195 = and i32 %194, 3
  %196 = zext i32 %195 to i64
  %197 = load i32* %row, align 4
  %198 = load i16* @shrink, align 2
  %199 = zext i16 %198 to i32
  %200 = lshr i32 %197, %199
  %201 = load i16* @iwidth, align 2
  %202 = zext i16 %201 to i32
  %203 = mul i32 %200, %202
  %204 = load i32* %col, align 4
  %205 = load i16* @shrink, align 2
  %206 = zext i16 %205 to i32
  %207 = lshr i32 %204, %206
  %208 = add i32 %203, %207
  %209 = zext i32 %208 to i64
  %210 = load [4 x i16]** @image, align 8
  %211 = getelementptr inbounds [4 x i16]* %210, i64 %209
  %212 = getelementptr inbounds [4 x i16]* %211, i32 0, i64 %196
  store i16 %185, i16* %212, align 2
  br label %213

; <label>:213                                     ; preds = %177
  %214 = load i32* %col, align 4
  %215 = add i32 %214, 2
  store i32 %215, i32* %col, align 4
  br label %174

; <label>:216                                     ; preds = %174
  br label %217

; <label>:217                                     ; preds = %216, %112
  br label %218

; <label>:218                                     ; preds = %217, %29
  %219 = load i32* %irow, align 4
  %220 = add i32 %219, 1
  store i32 %220, i32* %irow, align 4
  br label %1

; <label>:221                                     ; preds = %1
  store i32 510, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @casio_qv5700_load_raw() #0 {
  %data = alloca [3232 x i8], align 16
  %dp = alloca i8*, align 8
  %pixel = alloca [2576 x i16], align 16
  %pix = alloca i16*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 0, i32* %row, align 4
  br label %1

; <label>:1                                       ; preds = %123, %0
  %2 = load i32* %row, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %126

; <label>:6                                       ; preds = %1
  %7 = getelementptr inbounds [3232 x i8]* %data, i32 0, i32 0
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i64 @fread(i8* %7, i64 1, i64 3232, %struct._IO_FILE* %8)
  %10 = getelementptr inbounds [3232 x i8]* %data, i32 0, i32 0
  store i8* %10, i8** %dp, align 8
  %11 = getelementptr inbounds [2576 x i16]* %pixel, i32 0, i32 0
  store i16* %11, i16** %pix, align 8
  br label %12

; <label>:12                                      ; preds = %73, %6
  %13 = load i8** %dp, align 8
  %14 = getelementptr inbounds [3232 x i8]* %data, i32 0, i32 0
  %15 = getelementptr inbounds i8* %14, i64 3220
  %16 = icmp ult i8* %13, %15
  br i1 %16, label %17, label %78

; <label>:17                                      ; preds = %12
  %18 = load i8** %dp, align 8
  %19 = getelementptr inbounds i8* %18, i64 0
  %20 = load i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 %21, 2
  %23 = load i8** %dp, align 8
  %24 = getelementptr inbounds i8* %23, i64 1
  %25 = load i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = ashr i32 %26, 6
  %28 = add nsw i32 %22, %27
  %29 = trunc i32 %28 to i16
  %30 = load i16** %pix, align 8
  %31 = getelementptr inbounds i16* %30, i64 0
  store i16 %29, i16* %31, align 2
  %32 = load i8** %dp, align 8
  %33 = getelementptr inbounds i8* %32, i64 1
  %34 = load i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl i32 %35, 4
  %37 = load i8** %dp, align 8
  %38 = getelementptr inbounds i8* %37, i64 2
  %39 = load i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = ashr i32 %40, 4
  %42 = add nsw i32 %36, %41
  %43 = trunc i32 %42 to i16
  %44 = load i16** %pix, align 8
  %45 = getelementptr inbounds i16* %44, i64 1
  store i16 %43, i16* %45, align 2
  %46 = load i8** %dp, align 8
  %47 = getelementptr inbounds i8* %46, i64 2
  %48 = load i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl i32 %49, 6
  %51 = load i8** %dp, align 8
  %52 = getelementptr inbounds i8* %51, i64 3
  %53 = load i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = ashr i32 %54, 2
  %56 = add nsw i32 %50, %55
  %57 = trunc i32 %56 to i16
  %58 = load i16** %pix, align 8
  %59 = getelementptr inbounds i16* %58, i64 2
  store i16 %57, i16* %59, align 2
  %60 = load i8** %dp, align 8
  %61 = getelementptr inbounds i8* %60, i64 3
  %62 = load i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = shl i32 %63, 8
  %65 = load i8** %dp, align 8
  %66 = getelementptr inbounds i8* %65, i64 4
  %67 = load i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 %64, %68
  %70 = trunc i32 %69 to i16
  %71 = load i16** %pix, align 8
  %72 = getelementptr inbounds i16* %71, i64 3
  store i16 %70, i16* %72, align 2
  br label %73

; <label>:73                                      ; preds = %17
  %74 = load i8** %dp, align 8
  %75 = getelementptr inbounds i8* %74, i64 5
  store i8* %75, i8** %dp, align 8
  %76 = load i16** %pix, align 8
  %77 = getelementptr inbounds i16* %76, i64 4
  store i16* %77, i16** %pix, align 8
  br label %12

; <label>:78                                      ; preds = %12
  store i32 0, i32* %col, align 4
  br label %79

; <label>:79                                      ; preds = %119, %78
  %80 = load i32* %col, align 4
  %81 = load i16* @width, align 2
  %82 = zext i16 %81 to i32
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %84, label %122

; <label>:84                                      ; preds = %79
  %85 = load i32* %col, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [2576 x i16]* %pixel, i32 0, i64 %86
  %88 = load i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = and i32 %89, 1023
  %91 = trunc i32 %90 to i16
  %92 = load i32* @filters, align 4
  %93 = load i32* %row, align 4
  %94 = shl i32 %93, 1
  %95 = and i32 %94, 14
  %96 = load i32* %col, align 4
  %97 = and i32 %96, 1
  %98 = add nsw i32 %95, %97
  %99 = shl i32 %98, 1
  %100 = lshr i32 %92, %99
  %101 = and i32 %100, 3
  %102 = zext i32 %101 to i64
  %103 = load i32* %row, align 4
  %104 = load i16* @shrink, align 2
  %105 = zext i16 %104 to i32
  %106 = ashr i32 %103, %105
  %107 = load i16* @iwidth, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nsw i32 %106, %108
  %110 = load i32* %col, align 4
  %111 = load i16* @shrink, align 2
  %112 = zext i16 %111 to i32
  %113 = ashr i32 %110, %112
  %114 = add nsw i32 %109, %113
  %115 = sext i32 %114 to i64
  %116 = load [4 x i16]** @image, align 8
  %117 = getelementptr inbounds [4 x i16]* %116, i64 %115
  %118 = getelementptr inbounds [4 x i16]* %117, i32 0, i64 %102
  store i16 %91, i16* %118, align 2
  br label %119

; <label>:119                                     ; preds = %84
  %120 = load i32* %col, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %col, align 4
  br label %79

; <label>:122                                     ; preds = %79
  br label %123

; <label>:123                                     ; preds = %122
  %124 = load i32* %row, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %row, align 4
  br label %1

; <label>:126                                     ; preds = %1
  store i32 1020, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @quicktake_100_load_raw() #0 {
  %pixel = alloca [484 x [644 x i8]], align 16
  %rb = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %sharp = alloca i32, align 4
  %val = alloca i32, align 4
  store i32 0, i32* %val, align 4
  %1 = call i32 @getbits(i32 -1)
  %2 = bitcast [484 x [644 x i8]]* %pixel to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 -128, i64 311696, i32 16, i1 false)
  store i32 2, i32* %row, align 4
  br label %3

; <label>:3                                       ; preds = %141, %0
  %4 = load i32* %row, align 4
  %5 = load i16* @height, align 2
  %6 = zext i16 %5 to i32
  %7 = add nsw i32 %6, 2
  %8 = icmp slt i32 %4, %7
  br i1 %8, label %9, label %144

; <label>:9                                       ; preds = %3
  %10 = load i32* %row, align 4
  %11 = and i32 %10, 1
  %12 = add nsw i32 2, %11
  store i32 %12, i32* %col, align 4
  br label %13

; <label>:13                                      ; preds = %129, %9
  %14 = load i32* %col, align 4
  %15 = load i16* @width, align 2
  %16 = zext i16 %15 to i32
  %17 = add nsw i32 %16, 2
  %18 = icmp slt i32 %14, %17
  br i1 %18, label %19, label %132

; <label>:19                                      ; preds = %13
  %20 = load i32* %col, align 4
  %21 = sub nsw i32 %20, 1
  %22 = sext i32 %21 to i64
  %23 = load i32* %row, align 4
  %24 = sub nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %25
  %27 = getelementptr inbounds [644 x i8]* %26, i32 0, i64 %22
  %28 = load i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = load i32* %col, align 4
  %31 = add nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = load i32* %row, align 4
  %34 = sub nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %35
  %37 = getelementptr inbounds [644 x i8]* %36, i32 0, i64 %32
  %38 = load i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nsw i32 2, %39
  %41 = add nsw i32 %29, %40
  %42 = load i32* %col, align 4
  %43 = sub nsw i32 %42, 2
  %44 = sext i32 %43 to i64
  %45 = load i32* %row, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %46
  %48 = getelementptr inbounds [644 x i8]* %47, i32 0, i64 %44
  %49 = load i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add nsw i32 %41, %50
  %52 = ashr i32 %51, 2
  %53 = call i32 @getbits(i32 4)
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [16 x i16]* @quicktake_100_load_raw.gstep, i32 0, i64 %54
  %56 = load i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = add nsw i32 %52, %57
  store i32 %58, i32* %val, align 4
  %59 = load i32* %val, align 4
  %60 = icmp slt i32 %59, 255
  br i1 %60, label %61, label %63

; <label>:61                                      ; preds = %19
  %62 = load i32* %val, align 4
  br label %64

; <label>:63                                      ; preds = %19
  br label %64

; <label>:64                                      ; preds = %63, %61
  %65 = phi i32 [ %62, %61 ], [ 255, %63 ]
  %66 = icmp sgt i32 0, %65
  br i1 %66, label %67, label %68

; <label>:67                                      ; preds = %64
  br label %76

; <label>:68                                      ; preds = %64
  %69 = load i32* %val, align 4
  %70 = icmp slt i32 %69, 255
  br i1 %70, label %71, label %73

; <label>:71                                      ; preds = %68
  %72 = load i32* %val, align 4
  br label %74

; <label>:73                                      ; preds = %68
  br label %74

; <label>:74                                      ; preds = %73, %71
  %75 = phi i32 [ %72, %71 ], [ 255, %73 ]
  br label %76

; <label>:76                                      ; preds = %74, %67
  %77 = phi i32 [ 0, %67 ], [ %75, %74 ]
  store i32 %77, i32* %val, align 4
  %78 = trunc i32 %77 to i8
  %79 = load i32* %col, align 4
  %80 = sext i32 %79 to i64
  %81 = load i32* %row, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %82
  %84 = getelementptr inbounds [644 x i8]* %83, i32 0, i64 %80
  store i8 %78, i8* %84, align 1
  %85 = load i32* %col, align 4
  %86 = icmp slt i32 %85, 4
  br i1 %86, label %87, label %106

; <label>:87                                      ; preds = %76
  %88 = load i32* %val, align 4
  %89 = trunc i32 %88 to i8
  %90 = load i32* %row, align 4
  %91 = xor i32 %90, -1
  %92 = and i32 %91, 1
  %93 = sext i32 %92 to i64
  %94 = load i32* %row, align 4
  %95 = add nsw i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %96
  %98 = getelementptr inbounds [644 x i8]* %97, i32 0, i64 %93
  store i8 %89, i8* %98, align 1
  %99 = load i32* %col, align 4
  %100 = sub nsw i32 %99, 2
  %101 = sext i32 %100 to i64
  %102 = load i32* %row, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %103
  %105 = getelementptr inbounds [644 x i8]* %104, i32 0, i64 %101
  store i8 %89, i8* %105, align 1
  br label %106

; <label>:106                                     ; preds = %87, %76
  %107 = load i32* %row, align 4
  %108 = icmp eq i32 %107, 2
  br i1 %108, label %109, label %128

; <label>:109                                     ; preds = %106
  %110 = load i32* %val, align 4
  %111 = trunc i32 %110 to i8
  %112 = load i32* %col, align 4
  %113 = add nsw i32 %112, 3
  %114 = sext i32 %113 to i64
  %115 = load i32* %row, align 4
  %116 = sub nsw i32 %115, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %117
  %119 = getelementptr inbounds [644 x i8]* %118, i32 0, i64 %114
  store i8 %111, i8* %119, align 1
  %120 = load i32* %col, align 4
  %121 = add nsw i32 %120, 1
  %122 = sext i32 %121 to i64
  %123 = load i32* %row, align 4
  %124 = sub nsw i32 %123, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %125
  %127 = getelementptr inbounds [644 x i8]* %126, i32 0, i64 %122
  store i8 %111, i8* %127, align 1
  br label %128

; <label>:128                                     ; preds = %109, %106
  br label %129

; <label>:129                                     ; preds = %128
  %130 = load i32* %col, align 4
  %131 = add nsw i32 %130, 2
  store i32 %131, i32* %col, align 4
  br label %13

; <label>:132                                     ; preds = %13
  %133 = load i32* %val, align 4
  %134 = trunc i32 %133 to i8
  %135 = load i32* %col, align 4
  %136 = sext i32 %135 to i64
  %137 = load i32* %row, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %138
  %140 = getelementptr inbounds [644 x i8]* %139, i32 0, i64 %136
  store i8 %134, i8* %140, align 1
  br label %141

; <label>:141                                     ; preds = %132
  %142 = load i32* %row, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %row, align 4
  br label %3

; <label>:144                                     ; preds = %3
  store i32 0, i32* %rb, align 4
  br label %145

; <label>:145                                     ; preds = %485, %144
  %146 = load i32* %rb, align 4
  %147 = icmp slt i32 %146, 2
  br i1 %147, label %148, label %488

; <label>:148                                     ; preds = %145
  %149 = load i32* %rb, align 4
  %150 = add nsw i32 2, %149
  store i32 %150, i32* %row, align 4
  br label %151

; <label>:151                                     ; preds = %481, %148
  %152 = load i32* %row, align 4
  %153 = load i16* @height, align 2
  %154 = zext i16 %153 to i32
  %155 = add nsw i32 %154, 2
  %156 = icmp slt i32 %152, %155
  br i1 %156, label %157, label %484

; <label>:157                                     ; preds = %151
  %158 = load i32* %row, align 4
  %159 = and i32 %158, 1
  %160 = sub nsw i32 3, %159
  store i32 %160, i32* %col, align 4
  br label %161

; <label>:161                                     ; preds = %477, %157
  %162 = load i32* %col, align 4
  %163 = load i16* @width, align 2
  %164 = zext i16 %163 to i32
  %165 = add nsw i32 %164, 2
  %166 = icmp slt i32 %162, %165
  br i1 %166, label %167, label %480

; <label>:167                                     ; preds = %161
  %168 = load i32* %row, align 4
  %169 = icmp slt i32 %168, 4
  br i1 %169, label %173, label %170

; <label>:170                                     ; preds = %167
  %171 = load i32* %col, align 4
  %172 = icmp slt i32 %171, 4
  br i1 %172, label %173, label %174

; <label>:173                                     ; preds = %170, %167
  store i32 2, i32* %sharp, align 4
  br label %393

; <label>:174                                     ; preds = %170
  %175 = load i32* %col, align 4
  %176 = sext i32 %175 to i64
  %177 = load i32* %row, align 4
  %178 = sub nsw i32 %177, 2
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %179
  %181 = getelementptr inbounds [644 x i8]* %180, i32 0, i64 %176
  %182 = load i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = load i32* %col, align 4
  %185 = sub nsw i32 %184, 2
  %186 = sext i32 %185 to i64
  %187 = load i32* %row, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %188
  %190 = getelementptr inbounds [644 x i8]* %189, i32 0, i64 %186
  %191 = load i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = sub nsw i32 %183, %192
  %194 = load i32* %col, align 4
  %195 = sext i32 %194 to i64
  %196 = load i32* %row, align 4
  %197 = sub nsw i32 %196, 2
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %198
  %200 = getelementptr inbounds [644 x i8]* %199, i32 0, i64 %195
  %201 = load i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = load i32* %col, align 4
  %204 = sub nsw i32 %203, 2
  %205 = sext i32 %204 to i64
  %206 = load i32* %row, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %207
  %209 = getelementptr inbounds [644 x i8]* %208, i32 0, i64 %205
  %210 = load i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = sub nsw i32 %202, %211
  %213 = ashr i32 %212, 31
  %214 = xor i32 %193, %213
  %215 = load i32* %col, align 4
  %216 = sext i32 %215 to i64
  %217 = load i32* %row, align 4
  %218 = sub nsw i32 %217, 2
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %219
  %221 = getelementptr inbounds [644 x i8]* %220, i32 0, i64 %216
  %222 = load i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = load i32* %col, align 4
  %225 = sub nsw i32 %224, 2
  %226 = sext i32 %225 to i64
  %227 = load i32* %row, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %228
  %230 = getelementptr inbounds [644 x i8]* %229, i32 0, i64 %226
  %231 = load i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = sub nsw i32 %223, %232
  %234 = ashr i32 %233, 31
  %235 = sub nsw i32 %214, %234
  %236 = load i32* %col, align 4
  %237 = sext i32 %236 to i64
  %238 = load i32* %row, align 4
  %239 = sub nsw i32 %238, 2
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %240
  %242 = getelementptr inbounds [644 x i8]* %241, i32 0, i64 %237
  %243 = load i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = load i32* %col, align 4
  %246 = sub nsw i32 %245, 2
  %247 = sext i32 %246 to i64
  %248 = load i32* %row, align 4
  %249 = sub nsw i32 %248, 2
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %250
  %252 = getelementptr inbounds [644 x i8]* %251, i32 0, i64 %247
  %253 = load i8* %252, align 1
  %254 = zext i8 %253 to i32
  %255 = sub nsw i32 %244, %254
  %256 = load i32* %col, align 4
  %257 = sext i32 %256 to i64
  %258 = load i32* %row, align 4
  %259 = sub nsw i32 %258, 2
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %260
  %262 = getelementptr inbounds [644 x i8]* %261, i32 0, i64 %257
  %263 = load i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = load i32* %col, align 4
  %266 = sub nsw i32 %265, 2
  %267 = sext i32 %266 to i64
  %268 = load i32* %row, align 4
  %269 = sub nsw i32 %268, 2
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %270
  %272 = getelementptr inbounds [644 x i8]* %271, i32 0, i64 %267
  %273 = load i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = sub nsw i32 %264, %274
  %276 = ashr i32 %275, 31
  %277 = xor i32 %255, %276
  %278 = load i32* %col, align 4
  %279 = sext i32 %278 to i64
  %280 = load i32* %row, align 4
  %281 = sub nsw i32 %280, 2
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %282
  %284 = getelementptr inbounds [644 x i8]* %283, i32 0, i64 %279
  %285 = load i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = load i32* %col, align 4
  %288 = sub nsw i32 %287, 2
  %289 = sext i32 %288 to i64
  %290 = load i32* %row, align 4
  %291 = sub nsw i32 %290, 2
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %292
  %294 = getelementptr inbounds [644 x i8]* %293, i32 0, i64 %289
  %295 = load i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = sub nsw i32 %286, %296
  %298 = ashr i32 %297, 31
  %299 = sub nsw i32 %277, %298
  %300 = add nsw i32 %235, %299
  %301 = load i32* %col, align 4
  %302 = sub nsw i32 %301, 2
  %303 = sext i32 %302 to i64
  %304 = load i32* %row, align 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %305
  %307 = getelementptr inbounds [644 x i8]* %306, i32 0, i64 %303
  %308 = load i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = load i32* %col, align 4
  %311 = sub nsw i32 %310, 2
  %312 = sext i32 %311 to i64
  %313 = load i32* %row, align 4
  %314 = sub nsw i32 %313, 2
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %315
  %317 = getelementptr inbounds [644 x i8]* %316, i32 0, i64 %312
  %318 = load i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = sub nsw i32 %309, %319
  %321 = load i32* %col, align 4
  %322 = sub nsw i32 %321, 2
  %323 = sext i32 %322 to i64
  %324 = load i32* %row, align 4
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %325
  %327 = getelementptr inbounds [644 x i8]* %326, i32 0, i64 %323
  %328 = load i8* %327, align 1
  %329 = zext i8 %328 to i32
  %330 = load i32* %col, align 4
  %331 = sub nsw i32 %330, 2
  %332 = sext i32 %331 to i64
  %333 = load i32* %row, align 4
  %334 = sub nsw i32 %333, 2
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %335
  %337 = getelementptr inbounds [644 x i8]* %336, i32 0, i64 %332
  %338 = load i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = sub nsw i32 %329, %339
  %341 = ashr i32 %340, 31
  %342 = xor i32 %320, %341
  %343 = load i32* %col, align 4
  %344 = sub nsw i32 %343, 2
  %345 = sext i32 %344 to i64
  %346 = load i32* %row, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %347
  %349 = getelementptr inbounds [644 x i8]* %348, i32 0, i64 %345
  %350 = load i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = load i32* %col, align 4
  %353 = sub nsw i32 %352, 2
  %354 = sext i32 %353 to i64
  %355 = load i32* %row, align 4
  %356 = sub nsw i32 %355, 2
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %357
  %359 = getelementptr inbounds [644 x i8]* %358, i32 0, i64 %354
  %360 = load i8* %359, align 1
  %361 = zext i8 %360 to i32
  %362 = sub nsw i32 %351, %361
  %363 = ashr i32 %362, 31
  %364 = sub nsw i32 %342, %363
  %365 = add nsw i32 %300, %364
  store i32 %365, i32* %val, align 4
  %366 = load i32* %val, align 4
  %367 = icmp slt i32 %366, 4
  br i1 %367, label %368, label %369

; <label>:368                                     ; preds = %174
  br label %391

; <label>:369                                     ; preds = %174
  %370 = load i32* %val, align 4
  %371 = icmp slt i32 %370, 8
  br i1 %371, label %372, label %373

; <label>:372                                     ; preds = %369
  br label %389

; <label>:373                                     ; preds = %369
  %374 = load i32* %val, align 4
  %375 = icmp slt i32 %374, 16
  br i1 %375, label %376, label %377

; <label>:376                                     ; preds = %373
  br label %387

; <label>:377                                     ; preds = %373
  %378 = load i32* %val, align 4
  %379 = icmp slt i32 %378, 32
  br i1 %379, label %380, label %381

; <label>:380                                     ; preds = %377
  br label %385

; <label>:381                                     ; preds = %377
  %382 = load i32* %val, align 4
  %383 = icmp slt i32 %382, 48
  %384 = select i1 %383, i32 4, i32 5
  br label %385

; <label>:385                                     ; preds = %381, %380
  %386 = phi i32 [ 3, %380 ], [ %384, %381 ]
  br label %387

; <label>:387                                     ; preds = %385, %376
  %388 = phi i32 [ 2, %376 ], [ %386, %385 ]
  br label %389

; <label>:389                                     ; preds = %387, %372
  %390 = phi i32 [ 1, %372 ], [ %388, %387 ]
  br label %391

; <label>:391                                     ; preds = %389, %368
  %392 = phi i32 [ 0, %368 ], [ %390, %389 ]
  store i32 %392, i32* %sharp, align 4
  br label %393

; <label>:393                                     ; preds = %391, %173
  %394 = load i32* %col, align 4
  %395 = sext i32 %394 to i64
  %396 = load i32* %row, align 4
  %397 = sub nsw i32 %396, 2
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %398
  %400 = getelementptr inbounds [644 x i8]* %399, i32 0, i64 %395
  %401 = load i8* %400, align 1
  %402 = zext i8 %401 to i32
  %403 = load i32* %col, align 4
  %404 = sub nsw i32 %403, 2
  %405 = sext i32 %404 to i64
  %406 = load i32* %row, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %407
  %409 = getelementptr inbounds [644 x i8]* %408, i32 0, i64 %405
  %410 = load i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = add nsw i32 %402, %411
  %413 = ashr i32 %412, 1
  %414 = call i32 @getbits(i32 2)
  %415 = zext i32 %414 to i64
  %416 = load i32* %sharp, align 4
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds [6 x [4 x i16]]* @quicktake_100_load_raw.rstep, i32 0, i64 %417
  %419 = getelementptr inbounds [4 x i16]* %418, i32 0, i64 %415
  %420 = load i16* %419, align 2
  %421 = sext i16 %420 to i32
  %422 = add nsw i32 %413, %421
  store i32 %422, i32* %val, align 4
  %423 = load i32* %val, align 4
  %424 = icmp slt i32 %423, 255
  br i1 %424, label %425, label %427

; <label>:425                                     ; preds = %393
  %426 = load i32* %val, align 4
  br label %428

; <label>:427                                     ; preds = %393
  br label %428

; <label>:428                                     ; preds = %427, %425
  %429 = phi i32 [ %426, %425 ], [ 255, %427 ]
  %430 = icmp sgt i32 0, %429
  br i1 %430, label %431, label %432

; <label>:431                                     ; preds = %428
  br label %440

; <label>:432                                     ; preds = %428
  %433 = load i32* %val, align 4
  %434 = icmp slt i32 %433, 255
  br i1 %434, label %435, label %437

; <label>:435                                     ; preds = %432
  %436 = load i32* %val, align 4
  br label %438

; <label>:437                                     ; preds = %432
  br label %438

; <label>:438                                     ; preds = %437, %435
  %439 = phi i32 [ %436, %435 ], [ 255, %437 ]
  br label %440

; <label>:440                                     ; preds = %438, %431
  %441 = phi i32 [ 0, %431 ], [ %439, %438 ]
  store i32 %441, i32* %val, align 4
  %442 = trunc i32 %441 to i8
  %443 = load i32* %col, align 4
  %444 = sext i32 %443 to i64
  %445 = load i32* %row, align 4
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %446
  %448 = getelementptr inbounds [644 x i8]* %447, i32 0, i64 %444
  store i8 %442, i8* %448, align 1
  %449 = load i32* %row, align 4
  %450 = icmp slt i32 %449, 4
  br i1 %450, label %451, label %462

; <label>:451                                     ; preds = %440
  %452 = load i32* %val, align 4
  %453 = trunc i32 %452 to i8
  %454 = load i32* %col, align 4
  %455 = add nsw i32 %454, 2
  %456 = sext i32 %455 to i64
  %457 = load i32* %row, align 4
  %458 = sub nsw i32 %457, 2
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %459
  %461 = getelementptr inbounds [644 x i8]* %460, i32 0, i64 %456
  store i8 %453, i8* %461, align 1
  br label %462

; <label>:462                                     ; preds = %451, %440
  %463 = load i32* %col, align 4
  %464 = icmp slt i32 %463, 4
  br i1 %464, label %465, label %476

; <label>:465                                     ; preds = %462
  %466 = load i32* %val, align 4
  %467 = trunc i32 %466 to i8
  %468 = load i32* %col, align 4
  %469 = sub nsw i32 %468, 2
  %470 = sext i32 %469 to i64
  %471 = load i32* %row, align 4
  %472 = add nsw i32 %471, 2
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %473
  %475 = getelementptr inbounds [644 x i8]* %474, i32 0, i64 %470
  store i8 %467, i8* %475, align 1
  br label %476

; <label>:476                                     ; preds = %465, %462
  br label %477

; <label>:477                                     ; preds = %476
  %478 = load i32* %col, align 4
  %479 = add nsw i32 %478, 2
  store i32 %479, i32* %col, align 4
  br label %161

; <label>:480                                     ; preds = %161
  br label %481

; <label>:481                                     ; preds = %480
  %482 = load i32* %row, align 4
  %483 = add nsw i32 %482, 2
  store i32 %483, i32* %row, align 4
  br label %151

; <label>:484                                     ; preds = %151
  br label %485

; <label>:485                                     ; preds = %484
  %486 = load i32* %rb, align 4
  %487 = add nsw i32 %486, 1
  store i32 %487, i32* %rb, align 4
  br label %145

; <label>:488                                     ; preds = %145
  store i32 2, i32* %row, align 4
  br label %489

; <label>:489                                     ; preds = %567, %488
  %490 = load i32* %row, align 4
  %491 = load i16* @height, align 2
  %492 = zext i16 %491 to i32
  %493 = add nsw i32 %492, 2
  %494 = icmp slt i32 %490, %493
  br i1 %494, label %495, label %570

; <label>:495                                     ; preds = %489
  %496 = load i32* %row, align 4
  %497 = and i32 %496, 1
  %498 = sub nsw i32 3, %497
  store i32 %498, i32* %col, align 4
  br label %499

; <label>:499                                     ; preds = %563, %495
  %500 = load i32* %col, align 4
  %501 = load i16* @width, align 2
  %502 = zext i16 %501 to i32
  %503 = add nsw i32 %502, 2
  %504 = icmp slt i32 %500, %503
  br i1 %504, label %505, label %566

; <label>:505                                     ; preds = %499
  %506 = load i32* %col, align 4
  %507 = sub nsw i32 %506, 1
  %508 = sext i32 %507 to i64
  %509 = load i32* %row, align 4
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %510
  %512 = getelementptr inbounds [644 x i8]* %511, i32 0, i64 %508
  %513 = load i8* %512, align 1
  %514 = zext i8 %513 to i32
  %515 = load i32* %col, align 4
  %516 = sext i32 %515 to i64
  %517 = load i32* %row, align 4
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %518
  %520 = getelementptr inbounds [644 x i8]* %519, i32 0, i64 %516
  %521 = load i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = shl i32 %522, 2
  %524 = add nsw i32 %514, %523
  %525 = load i32* %col, align 4
  %526 = add nsw i32 %525, 1
  %527 = sext i32 %526 to i64
  %528 = load i32* %row, align 4
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %529
  %531 = getelementptr inbounds [644 x i8]* %530, i32 0, i64 %527
  %532 = load i8* %531, align 1
  %533 = zext i8 %532 to i32
  %534 = add nsw i32 %524, %533
  %535 = ashr i32 %534, 1
  %536 = sub nsw i32 %535, 256
  store i32 %536, i32* %val, align 4
  %537 = load i32* %val, align 4
  %538 = icmp slt i32 %537, 255
  br i1 %538, label %539, label %541

; <label>:539                                     ; preds = %505
  %540 = load i32* %val, align 4
  br label %542

; <label>:541                                     ; preds = %505
  br label %542

; <label>:542                                     ; preds = %541, %539
  %543 = phi i32 [ %540, %539 ], [ 255, %541 ]
  %544 = icmp sgt i32 0, %543
  br i1 %544, label %545, label %546

; <label>:545                                     ; preds = %542
  br label %554

; <label>:546                                     ; preds = %542
  %547 = load i32* %val, align 4
  %548 = icmp slt i32 %547, 255
  br i1 %548, label %549, label %551

; <label>:549                                     ; preds = %546
  %550 = load i32* %val, align 4
  br label %552

; <label>:551                                     ; preds = %546
  br label %552

; <label>:552                                     ; preds = %551, %549
  %553 = phi i32 [ %550, %549 ], [ 255, %551 ]
  br label %554

; <label>:554                                     ; preds = %552, %545
  %555 = phi i32 [ 0, %545 ], [ %553, %552 ]
  %556 = trunc i32 %555 to i8
  %557 = load i32* %col, align 4
  %558 = sext i32 %557 to i64
  %559 = load i32* %row, align 4
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %560
  %562 = getelementptr inbounds [644 x i8]* %561, i32 0, i64 %558
  store i8 %556, i8* %562, align 1
  br label %563

; <label>:563                                     ; preds = %554
  %564 = load i32* %col, align 4
  %565 = add nsw i32 %564, 2
  store i32 %565, i32* %col, align 4
  br label %499

; <label>:566                                     ; preds = %499
  br label %567

; <label>:567                                     ; preds = %566
  %568 = load i32* %row, align 4
  %569 = add nsw i32 %568, 1
  store i32 %569, i32* %row, align 4
  br label %489

; <label>:570                                     ; preds = %489
  store i32 0, i32* %row, align 4
  br label %571

; <label>:571                                     ; preds = %626, %570
  %572 = load i32* %row, align 4
  %573 = load i16* @height, align 2
  %574 = zext i16 %573 to i32
  %575 = icmp slt i32 %572, %574
  br i1 %575, label %576, label %629

; <label>:576                                     ; preds = %571
  store i32 0, i32* %col, align 4
  br label %577

; <label>:577                                     ; preds = %622, %576
  %578 = load i32* %col, align 4
  %579 = load i16* @width, align 2
  %580 = zext i16 %579 to i32
  %581 = icmp slt i32 %578, %580
  br i1 %581, label %582, label %625

; <label>:582                                     ; preds = %577
  %583 = load i32* %col, align 4
  %584 = add nsw i32 %583, 2
  %585 = sext i32 %584 to i64
  %586 = load i32* %row, align 4
  %587 = add nsw i32 %586, 2
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds [484 x [644 x i8]]* %pixel, i32 0, i64 %588
  %590 = getelementptr inbounds [644 x i8]* %589, i32 0, i64 %585
  %591 = load i8* %590, align 1
  %592 = zext i8 %591 to i64
  %593 = getelementptr inbounds [256 x i16]* @quicktake_100_load_raw.curve, i32 0, i64 %592
  %594 = load i16* %593, align 2
  %595 = load i32* @filters, align 4
  %596 = load i32* %row, align 4
  %597 = shl i32 %596, 1
  %598 = and i32 %597, 14
  %599 = load i32* %col, align 4
  %600 = and i32 %599, 1
  %601 = add nsw i32 %598, %600
  %602 = shl i32 %601, 1
  %603 = lshr i32 %595, %602
  %604 = and i32 %603, 3
  %605 = zext i32 %604 to i64
  %606 = load i32* %row, align 4
  %607 = load i16* @shrink, align 2
  %608 = zext i16 %607 to i32
  %609 = ashr i32 %606, %608
  %610 = load i16* @iwidth, align 2
  %611 = zext i16 %610 to i32
  %612 = mul nsw i32 %609, %611
  %613 = load i32* %col, align 4
  %614 = load i16* @shrink, align 2
  %615 = zext i16 %614 to i32
  %616 = ashr i32 %613, %615
  %617 = add nsw i32 %612, %616
  %618 = sext i32 %617 to i64
  %619 = load [4 x i16]** @image, align 8
  %620 = getelementptr inbounds [4 x i16]* %619, i64 %618
  %621 = getelementptr inbounds [4 x i16]* %620, i32 0, i64 %605
  store i16 %594, i16* %621, align 2
  br label %622

; <label>:622                                     ; preds = %582
  %623 = load i32* %col, align 4
  %624 = add nsw i32 %623, 1
  store i32 %624, i32* %col, align 4
  br label %577

; <label>:625                                     ; preds = %577
  br label %626

; <label>:626                                     ; preds = %625
  %627 = load i32* %row, align 4
  %628 = add nsw i32 %627, 1
  store i32 %628, i32* %row, align 4
  br label %571

; <label>:629                                     ; preds = %571
  store i32 1023, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32* @make_decoder_int(i32* %source, i32 %level) #0 {
  %1 = alloca i32*, align 8
  %2 = alloca i32, align 4
  %cur = alloca %struct.decode*, align 8
  store i32* %source, i32** %1, align 8
  store i32 %level, i32* %2, align 4
  %3 = load %struct.decode** @free_decode, align 8
  %4 = getelementptr inbounds %struct.decode* %3, i32 1
  store %struct.decode* %4, %struct.decode** @free_decode, align 8
  store %struct.decode* %3, %struct.decode** %cur, align 8
  %5 = load i32* %2, align 4
  %6 = load i32** %1, align 8
  %7 = getelementptr inbounds i32* %6, i64 0
  %8 = load i32* %7, align 4
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %10, label %27

; <label>:10                                      ; preds = %0
  %11 = load %struct.decode** @free_decode, align 8
  %12 = load %struct.decode** %cur, align 8
  %13 = getelementptr inbounds %struct.decode* %12, i32 0, i32 0
  %14 = getelementptr inbounds [2 x %struct.decode*]* %13, i32 0, i64 0
  store %struct.decode* %11, %struct.decode** %14, align 8
  %15 = load i32** %1, align 8
  %16 = load i32* %2, align 4
  %17 = add nsw i32 %16, 1
  %18 = call i32* @make_decoder_int(i32* %15, i32 %17)
  store i32* %18, i32** %1, align 8
  %19 = load %struct.decode** @free_decode, align 8
  %20 = load %struct.decode** %cur, align 8
  %21 = getelementptr inbounds %struct.decode* %20, i32 0, i32 0
  %22 = getelementptr inbounds [2 x %struct.decode*]* %21, i32 0, i64 1
  store %struct.decode* %19, %struct.decode** %22, align 8
  %23 = load i32** %1, align 8
  %24 = load i32* %2, align 4
  %25 = add nsw i32 %24, 1
  %26 = call i32* @make_decoder_int(i32* %23, i32 %25)
  store i32* %26, i32** %1, align 8
  br label %35

; <label>:27                                      ; preds = %0
  %28 = load i32** %1, align 8
  %29 = getelementptr inbounds i32* %28, i64 1
  %30 = load i32* %29, align 4
  %31 = load %struct.decode** %cur, align 8
  %32 = getelementptr inbounds %struct.decode* %31, i32 0, i32 1
  store i32 %30, i32* %32, align 4
  %33 = load i32** %1, align 8
  %34 = getelementptr inbounds i32* %33, i64 2
  store i32* %34, i32** %1, align 8
  br label %35

; <label>:35                                      ; preds = %27, %10
  %36 = load i32** %1, align 8
  ret i32* %36
}

; Function Attrs: nounwind uwtable
define i32 @radc_token(i32 %tree) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %tree, i32* %2, align 4
  %3 = load %struct.decode** @free_decode, align 8
  %4 = icmp eq %struct.decode* %3, getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0)
  br i1 %4, label %5, label %20

; <label>:5                                       ; preds = %0
  store i32* getelementptr inbounds ([260 x i32]* @radc_token.source, i32 0, i32 0), i32** @radc_token.s, align 8
  store i32 0, i32* %t, align 4
  br label %6

; <label>:6                                       ; preds = %16, %5
  %7 = load i32* %t, align 4
  %8 = icmp slt i32 %7, 18
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %6
  %10 = load %struct.decode** @free_decode, align 8
  %11 = load i32* %t, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [18 x %struct.decode*]* @radc_token.dstart, i32 0, i64 %12
  store %struct.decode* %10, %struct.decode** %13, align 8
  %14 = load i32** @radc_token.s, align 8
  %15 = call i32* @make_decoder_int(i32* %14, i32 0)
  store i32* %15, i32** @radc_token.s, align 8
  br label %16

; <label>:16                                      ; preds = %9
  %17 = load i32* %t, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %t, align 4
  br label %6

; <label>:19                                      ; preds = %6
  br label %20

; <label>:20                                      ; preds = %19, %0
  %21 = load i32* %2, align 4
  %22 = icmp eq i32 %21, 18
  br i1 %22, label %23, label %34

; <label>:23                                      ; preds = %20
  %24 = load i32* @kodak_cbpp, align 4
  %25 = icmp eq i32 %24, 243
  br i1 %25, label %26, label %30

; <label>:26                                      ; preds = %23
  %27 = call i32 @getbits(i32 6)
  %28 = shl i32 %27, 2
  %29 = add i32 %28, 2
  store i32 %29, i32* %1
  br label %56

; <label>:30                                      ; preds = %23
  %31 = call i32 @getbits(i32 5)
  %32 = shl i32 %31, 3
  %33 = add i32 %32, 4
  store i32 %33, i32* %1
  br label %56

; <label>:34                                      ; preds = %20
  %35 = load i32* %2, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [18 x %struct.decode*]* @radc_token.dstart, i32 0, i64 %36
  %38 = load %struct.decode** %37, align 8
  store %struct.decode* %38, %struct.decode** @radc_token.dindex, align 8
  br label %39

; <label>:39                                      ; preds = %45, %34
  %40 = load %struct.decode** @radc_token.dindex, align 8
  %41 = getelementptr inbounds %struct.decode* %40, i32 0, i32 0
  %42 = getelementptr inbounds [2 x %struct.decode*]* %41, i32 0, i64 0
  %43 = load %struct.decode** %42, align 8
  %44 = icmp ne %struct.decode* %43, null
  br i1 %44, label %45, label %52

; <label>:45                                      ; preds = %39
  %46 = call i32 @getbits(i32 1)
  %47 = zext i32 %46 to i64
  %48 = load %struct.decode** @radc_token.dindex, align 8
  %49 = getelementptr inbounds %struct.decode* %48, i32 0, i32 0
  %50 = getelementptr inbounds [2 x %struct.decode*]* %49, i32 0, i64 %47
  %51 = load %struct.decode** %50, align 8
  store %struct.decode* %51, %struct.decode** @radc_token.dindex, align 8
  br label %39

; <label>:52                                      ; preds = %39
  %53 = load %struct.decode** @radc_token.dindex, align 8
  %54 = getelementptr inbounds %struct.decode* %53, i32 0, i32 1
  %55 = load i32* %54, align 4
  store i32 %55, i32* %1
  br label %56

; <label>:56                                      ; preds = %52, %30, %26
  %57 = load i32* %1
  ret i32 %57
}

; Function Attrs: nounwind uwtable
define void @kodak_radc_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %tree = alloca i32, align 4
  %nreps = alloca i32, align 4
  %rep = alloca i32, align 4
  %step = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %s = alloca i32, align 4
  %r = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %val = alloca i32, align 4
  %last = alloca [3 x i16], align 2
  %mul = alloca [3 x i16], align 2
  %buf = alloca [3 x [3 x [386 x i16]]], align 16
  %1 = bitcast [3 x i16]* %last to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([3 x i16]* @kodak_radc_load_raw.last to i8*), i64 6, i32 2, i1 false)
  call void @init_decoder()
  %2 = call i32 @getbits(i32 -1)
  store i32 0, i32* %i, align 4
  br label %3

; <label>:3                                       ; preds = %13, %0
  %4 = load i32* %i, align 4
  %5 = sext i32 %4 to i64
  %6 = icmp ult i64 %5, 3474
  br i1 %6, label %7, label %16

; <label>:7                                       ; preds = %3
  %8 = load i32* %i, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 0
  %11 = getelementptr inbounds [3 x [386 x i16]]* %10, i32 0, i64 0
  %12 = getelementptr inbounds [386 x i16]* %11, i32 0, i64 %9
  store i16 2048, i16* %12, align 2
  br label %13

; <label>:13                                      ; preds = %7
  %14 = load i32* %i, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %i, align 4
  br label %3

; <label>:16                                      ; preds = %3
  store i32 0, i32* %row, align 4
  br label %17

; <label>:17                                      ; preds = %826, %16
  %18 = load i32* %row, align 4
  %19 = load i16* @height, align 2
  %20 = zext i16 %19 to i32
  %21 = icmp slt i32 %18, %20
  br i1 %21, label %22, label %829

; <label>:22                                      ; preds = %17
  store i32 0, i32* %c, align 4
  br label %23

; <label>:23                                      ; preds = %32, %22
  %24 = load i32* %c, align 4
  %25 = icmp slt i32 %24, 3
  br i1 %25, label %26, label %35

; <label>:26                                      ; preds = %23
  %27 = call i32 @getbits(i32 6)
  %28 = trunc i32 %27 to i16
  %29 = load i32* %c, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %30
  store i16 %28, i16* %31, align 2
  br label %32

; <label>:32                                      ; preds = %26
  %33 = load i32* %c, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %c, align 4
  br label %23

; <label>:35                                      ; preds = %23
  store i32 0, i32* %c, align 4
  br label %36

; <label>:36                                      ; preds = %646, %35
  %37 = load i32* %c, align 4
  %38 = icmp slt i32 %37, 3
  br i1 %38, label %39, label %649

; <label>:39                                      ; preds = %36
  %40 = load i32* %c, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [3 x i16]* %last, i32 0, i64 %41
  %43 = load i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = sdiv i32 16777216, %44
  %46 = add nsw i32 %45, 2047
  %47 = ashr i32 %46, 12
  %48 = load i32* %c, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %49
  %51 = load i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %47, %52
  store i32 %53, i32* %val, align 4
  %54 = load i32* %val, align 4
  %55 = icmp sgt i32 %54, 65564
  %56 = select i1 %55, i32 10, i32 12
  store i32 %56, i32* %s, align 4
  %57 = load i32* %s, align 4
  %58 = sub nsw i32 %57, 1
  %59 = shl i32 -1, %58
  %60 = xor i32 %59, -1
  store i32 %60, i32* %x, align 4
  %61 = load i32* %s, align 4
  %62 = sub nsw i32 12, %61
  %63 = load i32* %val, align 4
  %64 = shl i32 %63, %62
  store i32 %64, i32* %val, align 4
  store i32 0, i32* %i, align 4
  br label %65

; <label>:65                                      ; preds = %93, %39
  %66 = load i32* %i, align 4
  %67 = sext i32 %66 to i64
  %68 = icmp ult i64 %67, 1158
  br i1 %68, label %69, label %96

; <label>:69                                      ; preds = %65
  %70 = load i32* %i, align 4
  %71 = sext i32 %70 to i64
  %72 = load i32* %c, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %73
  %75 = getelementptr inbounds [3 x [386 x i16]]* %74, i32 0, i64 0
  %76 = getelementptr inbounds [386 x i16]* %75, i32 0, i64 %71
  %77 = load i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = load i32* %val, align 4
  %80 = mul nsw i32 %78, %79
  %81 = load i32* %x, align 4
  %82 = add nsw i32 %80, %81
  %83 = load i32* %s, align 4
  %84 = ashr i32 %82, %83
  %85 = trunc i32 %84 to i16
  %86 = load i32* %i, align 4
  %87 = sext i32 %86 to i64
  %88 = load i32* %c, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %89
  %91 = getelementptr inbounds [3 x [386 x i16]]* %90, i32 0, i64 0
  %92 = getelementptr inbounds [386 x i16]* %91, i32 0, i64 %87
  store i16 %85, i16* %92, align 2
  br label %93

; <label>:93                                      ; preds = %69
  %94 = load i32* %i, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %i, align 4
  br label %65

; <label>:96                                      ; preds = %65
  %97 = load i32* %c, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %98
  %100 = load i16* %99, align 2
  %101 = load i32* %c, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [3 x i16]* %last, i32 0, i64 %102
  store i16 %100, i16* %103, align 2
  store i32 0, i32* %r, align 4
  br label %104

; <label>:104                                     ; preds = %642, %96
  %105 = load i32* %r, align 4
  %106 = load i32* %c, align 4
  %107 = icmp ne i32 %106, 0
  %108 = xor i1 %107, true
  %109 = zext i1 %108 to i32
  %110 = icmp sle i32 %105, %109
  br i1 %110, label %111, label %645

; <label>:111                                     ; preds = %104
  %112 = load i32* %c, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %113
  %115 = load i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = shl i32 %116, 7
  %118 = trunc i32 %117 to i16
  %119 = load i16* @width, align 2
  %120 = zext i16 %119 to i32
  %121 = sdiv i32 %120, 2
  %122 = sext i32 %121 to i64
  %123 = load i32* %c, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %124
  %126 = getelementptr inbounds [3 x [386 x i16]]* %125, i32 0, i64 2
  %127 = getelementptr inbounds [386 x i16]* %126, i32 0, i64 %122
  store i16 %118, i16* %127, align 2
  %128 = load i16* @width, align 2
  %129 = zext i16 %128 to i32
  %130 = sdiv i32 %129, 2
  %131 = sext i32 %130 to i64
  %132 = load i32* %c, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %133
  %135 = getelementptr inbounds [3 x [386 x i16]]* %134, i32 0, i64 1
  %136 = getelementptr inbounds [386 x i16]* %135, i32 0, i64 %131
  store i16 %118, i16* %136, align 2
  store i32 1, i32* %tree, align 4
  %137 = load i16* @width, align 2
  %138 = zext i16 %137 to i32
  %139 = sdiv i32 %138, 2
  store i32 %139, i32* %col, align 4
  br label %140

; <label>:140                                     ; preds = %475, %111
  %141 = load i32* %col, align 4
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %476

; <label>:143                                     ; preds = %140
  %144 = load i32* %tree, align 4
  %145 = call i32 @radc_token(i32 %144)
  store i32 %145, i32* %tree, align 4
  %146 = icmp ne i32 %145, 0
  br i1 %146, label %147, label %300

; <label>:147                                     ; preds = %143
  %148 = load i32* %col, align 4
  %149 = sub nsw i32 %148, 2
  store i32 %149, i32* %col, align 4
  %150 = load i32* %tree, align 4
  %151 = icmp eq i32 %150, 8
  br i1 %151, label %152, label %191

; <label>:152                                     ; preds = %147
  store i32 1, i32* %y, align 4
  br label %153

; <label>:153                                     ; preds = %187, %152
  %154 = load i32* %y, align 4
  %155 = icmp slt i32 %154, 3
  br i1 %155, label %156, label %190

; <label>:156                                     ; preds = %153
  %157 = load i32* %col, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %x, align 4
  br label %159

; <label>:159                                     ; preds = %183, %156
  %160 = load i32* %x, align 4
  %161 = load i32* %col, align 4
  %162 = icmp sge i32 %160, %161
  br i1 %162, label %163, label %186

; <label>:163                                     ; preds = %159
  %164 = load i32* %tree, align 4
  %165 = add nsw i32 %164, 10
  %166 = call i32 @radc_token(i32 %165)
  %167 = load i32* %c, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %168
  %170 = load i16* %169, align 2
  %171 = sext i16 %170 to i32
  %172 = mul nsw i32 %166, %171
  %173 = trunc i32 %172 to i16
  %174 = load i32* %x, align 4
  %175 = sext i32 %174 to i64
  %176 = load i32* %y, align 4
  %177 = sext i32 %176 to i64
  %178 = load i32* %c, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %179
  %181 = getelementptr inbounds [3 x [386 x i16]]* %180, i32 0, i64 %177
  %182 = getelementptr inbounds [386 x i16]* %181, i32 0, i64 %175
  store i16 %173, i16* %182, align 2
  br label %183

; <label>:183                                     ; preds = %163
  %184 = load i32* %x, align 4
  %185 = add nsw i32 %184, -1
  store i32 %185, i32* %x, align 4
  br label %159

; <label>:186                                     ; preds = %159
  br label %187

; <label>:187                                     ; preds = %186
  %188 = load i32* %y, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %y, align 4
  br label %153

; <label>:190                                     ; preds = %153
  br label %299

; <label>:191                                     ; preds = %147
  store i32 1, i32* %y, align 4
  br label %192

; <label>:192                                     ; preds = %295, %191
  %193 = load i32* %y, align 4
  %194 = icmp slt i32 %193, 3
  br i1 %194, label %195, label %298

; <label>:195                                     ; preds = %192
  %196 = load i32* %col, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %x, align 4
  br label %198

; <label>:198                                     ; preds = %291, %195
  %199 = load i32* %x, align 4
  %200 = load i32* %col, align 4
  %201 = icmp sge i32 %199, %200
  br i1 %201, label %202, label %294

; <label>:202                                     ; preds = %198
  %203 = load i32* %tree, align 4
  %204 = add nsw i32 %203, 10
  %205 = call i32 @radc_token(i32 %204)
  %206 = mul nsw i32 %205, 16
  %207 = load i32* %c, align 4
  %208 = icmp ne i32 %207, 0
  br i1 %208, label %209, label %236

; <label>:209                                     ; preds = %202
  %210 = load i32* %x, align 4
  %211 = sext i32 %210 to i64
  %212 = load i32* %y, align 4
  %213 = sub nsw i32 %212, 1
  %214 = sext i32 %213 to i64
  %215 = load i32* %c, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %216
  %218 = getelementptr inbounds [3 x [386 x i16]]* %217, i32 0, i64 %214
  %219 = getelementptr inbounds [386 x i16]* %218, i32 0, i64 %211
  %220 = load i16* %219, align 2
  %221 = sext i16 %220 to i32
  %222 = load i32* %x, align 4
  %223 = add nsw i32 %222, 1
  %224 = sext i32 %223 to i64
  %225 = load i32* %y, align 4
  %226 = sext i32 %225 to i64
  %227 = load i32* %c, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %228
  %230 = getelementptr inbounds [3 x [386 x i16]]* %229, i32 0, i64 %226
  %231 = getelementptr inbounds [386 x i16]* %230, i32 0, i64 %224
  %232 = load i16* %231, align 2
  %233 = sext i16 %232 to i32
  %234 = add nsw i32 %221, %233
  %235 = sdiv i32 %234, 2
  br label %278

; <label>:236                                     ; preds = %202
  %237 = load i32* %x, align 4
  %238 = add nsw i32 %237, 1
  %239 = sext i32 %238 to i64
  %240 = load i32* %y, align 4
  %241 = sub nsw i32 %240, 1
  %242 = sext i32 %241 to i64
  %243 = load i32* %c, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %244
  %246 = getelementptr inbounds [3 x [386 x i16]]* %245, i32 0, i64 %242
  %247 = getelementptr inbounds [386 x i16]* %246, i32 0, i64 %239
  %248 = load i16* %247, align 2
  %249 = sext i16 %248 to i32
  %250 = load i32* %x, align 4
  %251 = sext i32 %250 to i64
  %252 = load i32* %y, align 4
  %253 = sub nsw i32 %252, 1
  %254 = sext i32 %253 to i64
  %255 = load i32* %c, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %256
  %258 = getelementptr inbounds [3 x [386 x i16]]* %257, i32 0, i64 %254
  %259 = getelementptr inbounds [386 x i16]* %258, i32 0, i64 %251
  %260 = load i16* %259, align 2
  %261 = sext i16 %260 to i32
  %262 = mul nsw i32 2, %261
  %263 = add nsw i32 %249, %262
  %264 = load i32* %x, align 4
  %265 = add nsw i32 %264, 1
  %266 = sext i32 %265 to i64
  %267 = load i32* %y, align 4
  %268 = sext i32 %267 to i64
  %269 = load i32* %c, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %270
  %272 = getelementptr inbounds [3 x [386 x i16]]* %271, i32 0, i64 %268
  %273 = getelementptr inbounds [386 x i16]* %272, i32 0, i64 %266
  %274 = load i16* %273, align 2
  %275 = sext i16 %274 to i32
  %276 = add nsw i32 %263, %275
  %277 = sdiv i32 %276, 4
  br label %278

; <label>:278                                     ; preds = %236, %209
  %279 = phi i32 [ %235, %209 ], [ %277, %236 ]
  %280 = add nsw i32 %206, %279
  %281 = trunc i32 %280 to i16
  %282 = load i32* %x, align 4
  %283 = sext i32 %282 to i64
  %284 = load i32* %y, align 4
  %285 = sext i32 %284 to i64
  %286 = load i32* %c, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %287
  %289 = getelementptr inbounds [3 x [386 x i16]]* %288, i32 0, i64 %285
  %290 = getelementptr inbounds [386 x i16]* %289, i32 0, i64 %283
  store i16 %281, i16* %290, align 2
  br label %291

; <label>:291                                     ; preds = %278
  %292 = load i32* %x, align 4
  %293 = add nsw i32 %292, -1
  store i32 %293, i32* %x, align 4
  br label %198

; <label>:294                                     ; preds = %198
  br label %295

; <label>:295                                     ; preds = %294
  %296 = load i32* %y, align 4
  %297 = add nsw i32 %296, 1
  store i32 %297, i32* %y, align 4
  br label %192

; <label>:298                                     ; preds = %192
  br label %299

; <label>:299                                     ; preds = %298, %190
  br label %475

; <label>:300                                     ; preds = %143
  br label %301

; <label>:301                                     ; preds = %471, %300
  %302 = load i32* %col, align 4
  %303 = icmp sgt i32 %302, 2
  br i1 %303, label %304, label %307

; <label>:304                                     ; preds = %301
  %305 = call i32 @radc_token(i32 9)
  %306 = add nsw i32 %305, 1
  br label %308

; <label>:307                                     ; preds = %301
  br label %308

; <label>:308                                     ; preds = %307, %304
  %309 = phi i32 [ %306, %304 ], [ 1, %307 ]
  store i32 %309, i32* %nreps, align 4
  store i32 0, i32* %rep, align 4
  br label %310

; <label>:310                                     ; preds = %467, %308
  %311 = load i32* %rep, align 4
  %312 = icmp slt i32 %311, 8
  br i1 %312, label %313, label %320

; <label>:313                                     ; preds = %310
  %314 = load i32* %rep, align 4
  %315 = load i32* %nreps, align 4
  %316 = icmp slt i32 %314, %315
  br i1 %316, label %317, label %320

; <label>:317                                     ; preds = %313
  %318 = load i32* %col, align 4
  %319 = icmp sgt i32 %318, 0
  br label %320

; <label>:320                                     ; preds = %317, %313, %310
  %321 = phi i1 [ false, %313 ], [ false, %310 ], [ %319, %317 ]
  br i1 %321, label %322, label %470

; <label>:322                                     ; preds = %320
  %323 = load i32* %col, align 4
  %324 = sub nsw i32 %323, 2
  store i32 %324, i32* %col, align 4
  store i32 1, i32* %y, align 4
  br label %325

; <label>:325                                     ; preds = %423, %322
  %326 = load i32* %y, align 4
  %327 = icmp slt i32 %326, 3
  br i1 %327, label %328, label %426

; <label>:328                                     ; preds = %325
  %329 = load i32* %col, align 4
  %330 = add nsw i32 %329, 1
  store i32 %330, i32* %x, align 4
  br label %331

; <label>:331                                     ; preds = %419, %328
  %332 = load i32* %x, align 4
  %333 = load i32* %col, align 4
  %334 = icmp sge i32 %332, %333
  br i1 %334, label %335, label %422

; <label>:335                                     ; preds = %331
  %336 = load i32* %c, align 4
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %365

; <label>:338                                     ; preds = %335
  %339 = load i32* %x, align 4
  %340 = sext i32 %339 to i64
  %341 = load i32* %y, align 4
  %342 = sub nsw i32 %341, 1
  %343 = sext i32 %342 to i64
  %344 = load i32* %c, align 4
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %345
  %347 = getelementptr inbounds [3 x [386 x i16]]* %346, i32 0, i64 %343
  %348 = getelementptr inbounds [386 x i16]* %347, i32 0, i64 %340
  %349 = load i16* %348, align 2
  %350 = sext i16 %349 to i32
  %351 = load i32* %x, align 4
  %352 = add nsw i32 %351, 1
  %353 = sext i32 %352 to i64
  %354 = load i32* %y, align 4
  %355 = sext i32 %354 to i64
  %356 = load i32* %c, align 4
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %357
  %359 = getelementptr inbounds [3 x [386 x i16]]* %358, i32 0, i64 %355
  %360 = getelementptr inbounds [386 x i16]* %359, i32 0, i64 %353
  %361 = load i16* %360, align 2
  %362 = sext i16 %361 to i32
  %363 = add nsw i32 %350, %362
  %364 = sdiv i32 %363, 2
  br label %407

; <label>:365                                     ; preds = %335
  %366 = load i32* %x, align 4
  %367 = add nsw i32 %366, 1
  %368 = sext i32 %367 to i64
  %369 = load i32* %y, align 4
  %370 = sub nsw i32 %369, 1
  %371 = sext i32 %370 to i64
  %372 = load i32* %c, align 4
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %373
  %375 = getelementptr inbounds [3 x [386 x i16]]* %374, i32 0, i64 %371
  %376 = getelementptr inbounds [386 x i16]* %375, i32 0, i64 %368
  %377 = load i16* %376, align 2
  %378 = sext i16 %377 to i32
  %379 = load i32* %x, align 4
  %380 = sext i32 %379 to i64
  %381 = load i32* %y, align 4
  %382 = sub nsw i32 %381, 1
  %383 = sext i32 %382 to i64
  %384 = load i32* %c, align 4
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %385
  %387 = getelementptr inbounds [3 x [386 x i16]]* %386, i32 0, i64 %383
  %388 = getelementptr inbounds [386 x i16]* %387, i32 0, i64 %380
  %389 = load i16* %388, align 2
  %390 = sext i16 %389 to i32
  %391 = mul nsw i32 2, %390
  %392 = add nsw i32 %378, %391
  %393 = load i32* %x, align 4
  %394 = add nsw i32 %393, 1
  %395 = sext i32 %394 to i64
  %396 = load i32* %y, align 4
  %397 = sext i32 %396 to i64
  %398 = load i32* %c, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %399
  %401 = getelementptr inbounds [3 x [386 x i16]]* %400, i32 0, i64 %397
  %402 = getelementptr inbounds [386 x i16]* %401, i32 0, i64 %395
  %403 = load i16* %402, align 2
  %404 = sext i16 %403 to i32
  %405 = add nsw i32 %392, %404
  %406 = sdiv i32 %405, 4
  br label %407

; <label>:407                                     ; preds = %365, %338
  %408 = phi i32 [ %364, %338 ], [ %406, %365 ]
  %409 = trunc i32 %408 to i16
  %410 = load i32* %x, align 4
  %411 = sext i32 %410 to i64
  %412 = load i32* %y, align 4
  %413 = sext i32 %412 to i64
  %414 = load i32* %c, align 4
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %415
  %417 = getelementptr inbounds [3 x [386 x i16]]* %416, i32 0, i64 %413
  %418 = getelementptr inbounds [386 x i16]* %417, i32 0, i64 %411
  store i16 %409, i16* %418, align 2
  br label %419

; <label>:419                                     ; preds = %407
  %420 = load i32* %x, align 4
  %421 = add nsw i32 %420, -1
  store i32 %421, i32* %x, align 4
  br label %331

; <label>:422                                     ; preds = %331
  br label %423

; <label>:423                                     ; preds = %422
  %424 = load i32* %y, align 4
  %425 = add nsw i32 %424, 1
  store i32 %425, i32* %y, align 4
  br label %325

; <label>:426                                     ; preds = %325
  %427 = load i32* %rep, align 4
  %428 = and i32 %427, 1
  %429 = icmp ne i32 %428, 0
  br i1 %429, label %430, label %466

; <label>:430                                     ; preds = %426
  %431 = call i32 @radc_token(i32 10)
  %432 = shl i32 %431, 4
  store i32 %432, i32* %step, align 4
  store i32 1, i32* %y, align 4
  br label %433

; <label>:433                                     ; preds = %462, %430
  %434 = load i32* %y, align 4
  %435 = icmp slt i32 %434, 3
  br i1 %435, label %436, label %465

; <label>:436                                     ; preds = %433
  %437 = load i32* %col, align 4
  %438 = add nsw i32 %437, 1
  store i32 %438, i32* %x, align 4
  br label %439

; <label>:439                                     ; preds = %458, %436
  %440 = load i32* %x, align 4
  %441 = load i32* %col, align 4
  %442 = icmp sge i32 %440, %441
  br i1 %442, label %443, label %461

; <label>:443                                     ; preds = %439
  %444 = load i32* %step, align 4
  %445 = load i32* %x, align 4
  %446 = sext i32 %445 to i64
  %447 = load i32* %y, align 4
  %448 = sext i32 %447 to i64
  %449 = load i32* %c, align 4
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %450
  %452 = getelementptr inbounds [3 x [386 x i16]]* %451, i32 0, i64 %448
  %453 = getelementptr inbounds [386 x i16]* %452, i32 0, i64 %446
  %454 = load i16* %453, align 2
  %455 = sext i16 %454 to i32
  %456 = add nsw i32 %455, %444
  %457 = trunc i32 %456 to i16
  store i16 %457, i16* %453, align 2
  br label %458

; <label>:458                                     ; preds = %443
  %459 = load i32* %x, align 4
  %460 = add nsw i32 %459, -1
  store i32 %460, i32* %x, align 4
  br label %439

; <label>:461                                     ; preds = %439
  br label %462

; <label>:462                                     ; preds = %461
  %463 = load i32* %y, align 4
  %464 = add nsw i32 %463, 1
  store i32 %464, i32* %y, align 4
  br label %433

; <label>:465                                     ; preds = %433
  br label %466

; <label>:466                                     ; preds = %465, %426
  br label %467

; <label>:467                                     ; preds = %466
  %468 = load i32* %rep, align 4
  %469 = add nsw i32 %468, 1
  store i32 %469, i32* %rep, align 4
  br label %310

; <label>:470                                     ; preds = %320
  br label %471

; <label>:471                                     ; preds = %470
  %472 = load i32* %nreps, align 4
  %473 = icmp eq i32 %472, 9
  br i1 %473, label %301, label %474

; <label>:474                                     ; preds = %471
  br label %475

; <label>:475                                     ; preds = %474, %299
  br label %140

; <label>:476                                     ; preds = %140
  store i32 0, i32* %y, align 4
  br label %477

; <label>:477                                     ; preds = %614, %476
  %478 = load i32* %y, align 4
  %479 = icmp slt i32 %478, 2
  br i1 %479, label %480, label %617

; <label>:480                                     ; preds = %477
  store i32 0, i32* %x, align 4
  br label %481

; <label>:481                                     ; preds = %610, %480
  %482 = load i32* %x, align 4
  %483 = load i16* @width, align 2
  %484 = zext i16 %483 to i32
  %485 = sdiv i32 %484, 2
  %486 = icmp slt i32 %482, %485
  br i1 %486, label %487, label %613

; <label>:487                                     ; preds = %481
  %488 = load i32* %x, align 4
  %489 = sext i32 %488 to i64
  %490 = load i32* %y, align 4
  %491 = add nsw i32 %490, 1
  %492 = sext i32 %491 to i64
  %493 = load i32* %c, align 4
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %494
  %496 = getelementptr inbounds [3 x [386 x i16]]* %495, i32 0, i64 %492
  %497 = getelementptr inbounds [386 x i16]* %496, i32 0, i64 %489
  %498 = load i16* %497, align 2
  %499 = sext i16 %498 to i32
  %500 = shl i32 %499, 4
  %501 = load i32* %c, align 4
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds [3 x i16]* %mul, i32 0, i64 %502
  %504 = load i16* %503, align 2
  %505 = sext i16 %504 to i32
  %506 = sdiv i32 %500, %505
  store i32 %506, i32* %val, align 4
  %507 = load i32* %val, align 4
  %508 = icmp slt i32 %507, 0
  br i1 %508, label %509, label %510

; <label>:509                                     ; preds = %487
  store i32 0, i32* %val, align 4
  br label %510

; <label>:510                                     ; preds = %509, %487
  %511 = load i32* %c, align 4
  %512 = icmp ne i32 %511, 0
  br i1 %512, label %513, label %563

; <label>:513                                     ; preds = %510
  %514 = load i32* %val, align 4
  %515 = trunc i32 %514 to i16
  %516 = load i32* @filters, align 4
  %517 = load i32* %row, align 4
  %518 = load i32* %y, align 4
  %519 = mul nsw i32 %518, 2
  %520 = add nsw i32 %517, %519
  %521 = load i32* %c, align 4
  %522 = add nsw i32 %520, %521
  %523 = sub nsw i32 %522, 1
  %524 = shl i32 %523, 1
  %525 = and i32 %524, 14
  %526 = load i32* %x, align 4
  %527 = mul nsw i32 %526, 2
  %528 = add nsw i32 %527, 2
  %529 = load i32* %c, align 4
  %530 = sub nsw i32 %528, %529
  %531 = and i32 %530, 1
  %532 = add nsw i32 %525, %531
  %533 = shl i32 %532, 1
  %534 = lshr i32 %516, %533
  %535 = and i32 %534, 3
  %536 = zext i32 %535 to i64
  %537 = load i32* %row, align 4
  %538 = load i32* %y, align 4
  %539 = mul nsw i32 %538, 2
  %540 = add nsw i32 %537, %539
  %541 = load i32* %c, align 4
  %542 = add nsw i32 %540, %541
  %543 = sub nsw i32 %542, 1
  %544 = load i16* @shrink, align 2
  %545 = zext i16 %544 to i32
  %546 = ashr i32 %543, %545
  %547 = load i16* @iwidth, align 2
  %548 = zext i16 %547 to i32
  %549 = mul nsw i32 %546, %548
  %550 = load i32* %x, align 4
  %551 = mul nsw i32 %550, 2
  %552 = add nsw i32 %551, 2
  %553 = load i32* %c, align 4
  %554 = sub nsw i32 %552, %553
  %555 = load i16* @shrink, align 2
  %556 = zext i16 %555 to i32
  %557 = ashr i32 %554, %556
  %558 = add nsw i32 %549, %557
  %559 = sext i32 %558 to i64
  %560 = load [4 x i16]** @image, align 8
  %561 = getelementptr inbounds [4 x i16]* %560, i64 %559
  %562 = getelementptr inbounds [4 x i16]* %561, i32 0, i64 %536
  store i16 %515, i16* %562, align 2
  br label %609

; <label>:563                                     ; preds = %510
  %564 = load i32* %val, align 4
  %565 = trunc i32 %564 to i16
  %566 = load i32* @filters, align 4
  %567 = load i32* %row, align 4
  %568 = load i32* %r, align 4
  %569 = mul nsw i32 %568, 2
  %570 = add nsw i32 %567, %569
  %571 = load i32* %y, align 4
  %572 = add nsw i32 %570, %571
  %573 = shl i32 %572, 1
  %574 = and i32 %573, 14
  %575 = load i32* %x, align 4
  %576 = mul nsw i32 %575, 2
  %577 = load i32* %y, align 4
  %578 = add nsw i32 %576, %577
  %579 = and i32 %578, 1
  %580 = add nsw i32 %574, %579
  %581 = shl i32 %580, 1
  %582 = lshr i32 %566, %581
  %583 = and i32 %582, 3
  %584 = zext i32 %583 to i64
  %585 = load i32* %row, align 4
  %586 = load i32* %r, align 4
  %587 = mul nsw i32 %586, 2
  %588 = add nsw i32 %585, %587
  %589 = load i32* %y, align 4
  %590 = add nsw i32 %588, %589
  %591 = load i16* @shrink, align 2
  %592 = zext i16 %591 to i32
  %593 = ashr i32 %590, %592
  %594 = load i16* @iwidth, align 2
  %595 = zext i16 %594 to i32
  %596 = mul nsw i32 %593, %595
  %597 = load i32* %x, align 4
  %598 = mul nsw i32 %597, 2
  %599 = load i32* %y, align 4
  %600 = add nsw i32 %598, %599
  %601 = load i16* @shrink, align 2
  %602 = zext i16 %601 to i32
  %603 = ashr i32 %600, %602
  %604 = add nsw i32 %596, %603
  %605 = sext i32 %604 to i64
  %606 = load [4 x i16]** @image, align 8
  %607 = getelementptr inbounds [4 x i16]* %606, i64 %605
  %608 = getelementptr inbounds [4 x i16]* %607, i32 0, i64 %584
  store i16 %565, i16* %608, align 2
  br label %609

; <label>:609                                     ; preds = %563, %513
  br label %610

; <label>:610                                     ; preds = %609
  %611 = load i32* %x, align 4
  %612 = add nsw i32 %611, 1
  store i32 %612, i32* %x, align 4
  br label %481

; <label>:613                                     ; preds = %481
  br label %614

; <label>:614                                     ; preds = %613
  %615 = load i32* %y, align 4
  %616 = add nsw i32 %615, 1
  store i32 %616, i32* %y, align 4
  br label %477

; <label>:617                                     ; preds = %477
  %618 = load i32* %c, align 4
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %619
  %621 = getelementptr inbounds [3 x [386 x i16]]* %620, i32 0, i64 0
  %622 = getelementptr inbounds [386 x i16]* %621, i32 0, i32 0
  %623 = load i32* %c, align 4
  %624 = icmp ne i32 %623, 0
  %625 = xor i1 %624, true
  %626 = zext i1 %625 to i32
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds i16* %622, i64 %627
  %629 = bitcast i16* %628 to i8*
  %630 = load i32* %c, align 4
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds [3 x [3 x [386 x i16]]]* %buf, i32 0, i64 %631
  %633 = getelementptr inbounds [3 x [386 x i16]]* %632, i32 0, i64 2
  %634 = bitcast [386 x i16]* %633 to i8*
  %635 = load i32* %c, align 4
  %636 = icmp ne i32 %635, 0
  %637 = xor i1 %636, true
  %638 = zext i1 %637 to i32
  %639 = mul nsw i32 2, %638
  %640 = sext i32 %639 to i64
  %641 = sub i64 772, %640
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %629, i8* %634, i64 %641, i32 2, i1 false)
  br label %642

; <label>:642                                     ; preds = %617
  %643 = load i32* %r, align 4
  %644 = add nsw i32 %643, 1
  store i32 %644, i32* %r, align 4
  br label %104

; <label>:645                                     ; preds = %104
  br label %646

; <label>:646                                     ; preds = %645
  %647 = load i32* %c, align 4
  %648 = add nsw i32 %647, 1
  store i32 %648, i32* %c, align 4
  br label %36

; <label>:649                                     ; preds = %36
  %650 = load i32* %row, align 4
  store i32 %650, i32* %y, align 4
  br label %651

; <label>:651                                     ; preds = %822, %649
  %652 = load i32* %y, align 4
  %653 = load i32* %row, align 4
  %654 = add nsw i32 %653, 4
  %655 = icmp slt i32 %652, %654
  br i1 %655, label %656, label %825

; <label>:656                                     ; preds = %651
  store i32 0, i32* %x, align 4
  br label %657

; <label>:657                                     ; preds = %818, %656
  %658 = load i32* %x, align 4
  %659 = load i16* @width, align 2
  %660 = zext i16 %659 to i32
  %661 = icmp slt i32 %658, %660
  br i1 %661, label %662, label %821

; <label>:662                                     ; preds = %657
  %663 = load i32* %x, align 4
  %664 = load i32* %y, align 4
  %665 = add nsw i32 %663, %664
  %666 = and i32 %665, 1
  %667 = icmp ne i32 %666, 0
  br i1 %667, label %668, label %817

; <label>:668                                     ; preds = %662
  %669 = load i32* %x, align 4
  %670 = icmp ne i32 %669, 0
  br i1 %670, label %671, label %674

; <label>:671                                     ; preds = %668
  %672 = load i32* %x, align 4
  %673 = sub nsw i32 %672, 1
  br label %677

; <label>:674                                     ; preds = %668
  %675 = load i32* %x, align 4
  %676 = add nsw i32 %675, 1
  br label %677

; <label>:677                                     ; preds = %674, %671
  %678 = phi i32 [ %673, %671 ], [ %676, %674 ]
  store i32 %678, i32* %r, align 4
  %679 = load i32* %x, align 4
  %680 = add nsw i32 %679, 1
  %681 = load i16* @width, align 2
  %682 = zext i16 %681 to i32
  %683 = icmp slt i32 %680, %682
  br i1 %683, label %684, label %687

; <label>:684                                     ; preds = %677
  %685 = load i32* %x, align 4
  %686 = add nsw i32 %685, 1
  br label %690

; <label>:687                                     ; preds = %677
  %688 = load i32* %x, align 4
  %689 = sub nsw i32 %688, 1
  br label %690

; <label>:690                                     ; preds = %687, %684
  %691 = phi i32 [ %686, %684 ], [ %689, %687 ]
  store i32 %691, i32* %s, align 4
  %692 = load i32* @filters, align 4
  %693 = load i32* %y, align 4
  %694 = shl i32 %693, 1
  %695 = and i32 %694, 14
  %696 = load i32* %x, align 4
  %697 = and i32 %696, 1
  %698 = add nsw i32 %695, %697
  %699 = shl i32 %698, 1
  %700 = lshr i32 %692, %699
  %701 = and i32 %700, 3
  %702 = zext i32 %701 to i64
  %703 = load i32* %y, align 4
  %704 = load i16* @shrink, align 2
  %705 = zext i16 %704 to i32
  %706 = ashr i32 %703, %705
  %707 = load i16* @iwidth, align 2
  %708 = zext i16 %707 to i32
  %709 = mul nsw i32 %706, %708
  %710 = load i32* %x, align 4
  %711 = load i16* @shrink, align 2
  %712 = zext i16 %711 to i32
  %713 = ashr i32 %710, %712
  %714 = add nsw i32 %709, %713
  %715 = sext i32 %714 to i64
  %716 = load [4 x i16]** @image, align 8
  %717 = getelementptr inbounds [4 x i16]* %716, i64 %715
  %718 = getelementptr inbounds [4 x i16]* %717, i32 0, i64 %702
  %719 = load i16* %718, align 2
  %720 = zext i16 %719 to i32
  %721 = sub nsw i32 %720, 2048
  %722 = mul nsw i32 %721, 2
  %723 = load i32* @filters, align 4
  %724 = load i32* %y, align 4
  %725 = shl i32 %724, 1
  %726 = and i32 %725, 14
  %727 = load i32* %r, align 4
  %728 = and i32 %727, 1
  %729 = add nsw i32 %726, %728
  %730 = shl i32 %729, 1
  %731 = lshr i32 %723, %730
  %732 = and i32 %731, 3
  %733 = zext i32 %732 to i64
  %734 = load i32* %y, align 4
  %735 = load i16* @shrink, align 2
  %736 = zext i16 %735 to i32
  %737 = ashr i32 %734, %736
  %738 = load i16* @iwidth, align 2
  %739 = zext i16 %738 to i32
  %740 = mul nsw i32 %737, %739
  %741 = load i32* %r, align 4
  %742 = load i16* @shrink, align 2
  %743 = zext i16 %742 to i32
  %744 = ashr i32 %741, %743
  %745 = add nsw i32 %740, %744
  %746 = sext i32 %745 to i64
  %747 = load [4 x i16]** @image, align 8
  %748 = getelementptr inbounds [4 x i16]* %747, i64 %746
  %749 = getelementptr inbounds [4 x i16]* %748, i32 0, i64 %733
  %750 = load i16* %749, align 2
  %751 = zext i16 %750 to i32
  %752 = load i32* @filters, align 4
  %753 = load i32* %y, align 4
  %754 = shl i32 %753, 1
  %755 = and i32 %754, 14
  %756 = load i32* %s, align 4
  %757 = and i32 %756, 1
  %758 = add nsw i32 %755, %757
  %759 = shl i32 %758, 1
  %760 = lshr i32 %752, %759
  %761 = and i32 %760, 3
  %762 = zext i32 %761 to i64
  %763 = load i32* %y, align 4
  %764 = load i16* @shrink, align 2
  %765 = zext i16 %764 to i32
  %766 = ashr i32 %763, %765
  %767 = load i16* @iwidth, align 2
  %768 = zext i16 %767 to i32
  %769 = mul nsw i32 %766, %768
  %770 = load i32* %s, align 4
  %771 = load i16* @shrink, align 2
  %772 = zext i16 %771 to i32
  %773 = ashr i32 %770, %772
  %774 = add nsw i32 %769, %773
  %775 = sext i32 %774 to i64
  %776 = load [4 x i16]** @image, align 8
  %777 = getelementptr inbounds [4 x i16]* %776, i64 %775
  %778 = getelementptr inbounds [4 x i16]* %777, i32 0, i64 %762
  %779 = load i16* %778, align 2
  %780 = zext i16 %779 to i32
  %781 = add nsw i32 %751, %780
  %782 = sdiv i32 %781, 2
  %783 = add nsw i32 %722, %782
  store i32 %783, i32* %val, align 4
  %784 = load i32* %val, align 4
  %785 = icmp slt i32 %784, 0
  br i1 %785, label %786, label %787

; <label>:786                                     ; preds = %690
  store i32 0, i32* %val, align 4
  br label %787

; <label>:787                                     ; preds = %786, %690
  %788 = load i32* %val, align 4
  %789 = trunc i32 %788 to i16
  %790 = load i32* @filters, align 4
  %791 = load i32* %y, align 4
  %792 = shl i32 %791, 1
  %793 = and i32 %792, 14
  %794 = load i32* %x, align 4
  %795 = and i32 %794, 1
  %796 = add nsw i32 %793, %795
  %797 = shl i32 %796, 1
  %798 = lshr i32 %790, %797
  %799 = and i32 %798, 3
  %800 = zext i32 %799 to i64
  %801 = load i32* %y, align 4
  %802 = load i16* @shrink, align 2
  %803 = zext i16 %802 to i32
  %804 = ashr i32 %801, %803
  %805 = load i16* @iwidth, align 2
  %806 = zext i16 %805 to i32
  %807 = mul nsw i32 %804, %806
  %808 = load i32* %x, align 4
  %809 = load i16* @shrink, align 2
  %810 = zext i16 %809 to i32
  %811 = ashr i32 %808, %810
  %812 = add nsw i32 %807, %811
  %813 = sext i32 %812 to i64
  %814 = load [4 x i16]** @image, align 8
  %815 = getelementptr inbounds [4 x i16]* %814, i64 %813
  %816 = getelementptr inbounds [4 x i16]* %815, i32 0, i64 %800
  store i16 %789, i16* %816, align 2
  br label %817

; <label>:817                                     ; preds = %787, %662
  br label %818

; <label>:818                                     ; preds = %817
  %819 = load i32* %x, align 4
  %820 = add nsw i32 %819, 1
  store i32 %820, i32* %x, align 4
  br label %657

; <label>:821                                     ; preds = %657
  br label %822

; <label>:822                                     ; preds = %821
  %823 = load i32* %y, align 4
  %824 = add nsw i32 %823, 1
  store i32 %824, i32* %y, align 4
  br label %651

; <label>:825                                     ; preds = %651
  br label %826

; <label>:826                                     ; preds = %825
  %827 = load i32* %row, align 4
  %828 = add nsw i32 %827, 4
  store i32 %828, i32* %row, align 4
  br label %17

; <label>:829                                     ; preds = %17
  store i32 4095, i32* @maximum, align 4
  store i32 0, i32* @use_gamma, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_jpeg_load_raw() #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_dc120_load_raw() #0 {
  %pixel = alloca [848 x i8], align 16
  %row = alloca i32, align 4
  %shift = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 0, i32* %row, align 4
  br label %1

; <label>:1                                       ; preds = %71, %0
  %2 = load i32* %row, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %74

; <label>:6                                       ; preds = %1
  %7 = getelementptr inbounds [848 x i8]* %pixel, i32 0, i32 0
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i64 @fread(i8* %7, i64 1, i64 848, %struct._IO_FILE* %8)
  %10 = icmp ult i64 %9, 848
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %6
  call void @derror()
  br label %12

; <label>:12                                      ; preds = %11, %6
  %13 = load i32* %row, align 4
  %14 = load i32* %row, align 4
  %15 = and i32 %14, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [4 x i32]* @kodak_dc120_load_raw.mul, i32 0, i64 %16
  %18 = load i32* %17, align 4
  %19 = mul nsw i32 %13, %18
  %20 = load i32* %row, align 4
  %21 = and i32 %20, 3
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i32]* @kodak_dc120_load_raw.add, i32 0, i64 %22
  %24 = load i32* %23, align 4
  %25 = add nsw i32 %19, %24
  store i32 %25, i32* %shift, align 4
  store i32 0, i32* %col, align 4
  br label %26

; <label>:26                                      ; preds = %67, %12
  %27 = load i32* %col, align 4
  %28 = load i16* @width, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %31, label %70

; <label>:31                                      ; preds = %26
  %32 = load i32* %col, align 4
  %33 = load i32* %shift, align 4
  %34 = add nsw i32 %32, %33
  %35 = srem i32 %34, 848
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [848 x i8]* %pixel, i32 0, i64 %36
  %38 = load i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = load i32* @filters, align 4
  %41 = load i32* %row, align 4
  %42 = shl i32 %41, 1
  %43 = and i32 %42, 14
  %44 = load i32* %col, align 4
  %45 = and i32 %44, 1
  %46 = add nsw i32 %43, %45
  %47 = shl i32 %46, 1
  %48 = lshr i32 %40, %47
  %49 = and i32 %48, 3
  %50 = zext i32 %49 to i64
  %51 = load i32* %row, align 4
  %52 = load i16* @shrink, align 2
  %53 = zext i16 %52 to i32
  %54 = ashr i32 %51, %53
  %55 = load i16* @iwidth, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nsw i32 %54, %56
  %58 = load i32* %col, align 4
  %59 = load i16* @shrink, align 2
  %60 = zext i16 %59 to i32
  %61 = ashr i32 %58, %60
  %62 = add nsw i32 %57, %61
  %63 = sext i32 %62 to i64
  %64 = load [4 x i16]** @image, align 8
  %65 = getelementptr inbounds [4 x i16]* %64, i64 %63
  %66 = getelementptr inbounds [4 x i16]* %65, i32 0, i64 %50
  store i16 %39, i16* %66, align 2
  br label %67

; <label>:67                                      ; preds = %31
  %68 = load i32* %col, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %col, align 4
  br label %26

; <label>:70                                      ; preds = %26
  br label %71

; <label>:71                                      ; preds = %70
  %72 = load i32* %row, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %row, align 4
  br label %1

; <label>:74                                      ; preds = %1
  store i32 255, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @eight_bit_load_raw() #0 {
  %pixel = alloca i8*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %val = alloca i32, align 4
  %lblack = alloca i32, align 4
  store i32 0, i32* %lblack, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i64
  %3 = call noalias i8* @calloc(i64 %2, i64 1) #4
  store i8* %3, i8** %pixel, align 8
  %4 = load i8** %pixel, align 8
  call void @merror(i8* %4, i8* getelementptr inbounds ([21 x i8]* @.str27, i32 0, i32 0))
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = load i16* @top_margin, align 2
  %7 = zext i16 %6 to i32
  %8 = load i16* @raw_width, align 2
  %9 = zext i16 %8 to i32
  %10 = mul nsw i32 %7, %9
  %11 = sext i32 %10 to i64
  %12 = call i32 @fseek(%struct._IO_FILE* %5, i64 %11, i32 1)
  store i32 0, i32* %row, align 4
  br label %13

; <label>:13                                      ; preds = %96, %0
  %14 = load i32* %row, align 4
  %15 = load i16* @height, align 2
  %16 = zext i16 %15 to i32
  %17 = icmp ult i32 %14, %16
  br i1 %17, label %18, label %99

; <label>:18                                      ; preds = %13
  %19 = load i8** %pixel, align 8
  %20 = load i16* @raw_width, align 2
  %21 = zext i16 %20 to i64
  %22 = load %struct._IO_FILE** @ifp, align 8
  %23 = call i64 @fread(i8* %19, i64 1, i64 %21, %struct._IO_FILE* %22)
  %24 = load i16* @raw_width, align 2
  %25 = zext i16 %24 to i64
  %26 = icmp ult i64 %23, %25
  br i1 %26, label %27, label %28

; <label>:27                                      ; preds = %18
  call void @derror()
  br label %28

; <label>:28                                      ; preds = %27, %18
  store i32 0, i32* %col, align 4
  br label %29

; <label>:29                                      ; preds = %92, %28
  %30 = load i32* %col, align 4
  %31 = load i16* @raw_width, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp ult i32 %30, %32
  br i1 %33, label %34, label %95

; <label>:34                                      ; preds = %29
  %35 = load i32* %col, align 4
  %36 = zext i32 %35 to i64
  %37 = load i8** %pixel, align 8
  %38 = getelementptr inbounds i8* %37, i64 %36
  %39 = load i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %40
  %42 = load i16* %41, align 2
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %val, align 4
  %44 = load i32* %col, align 4
  %45 = load i16* @left_margin, align 2
  %46 = zext i16 %45 to i32
  %47 = sub i32 %44, %46
  %48 = load i16* @width, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp ult i32 %47, %49
  br i1 %50, label %51, label %87

; <label>:51                                      ; preds = %34
  %52 = load i32* %val, align 4
  %53 = trunc i32 %52 to i16
  %54 = load i32* @filters, align 4
  %55 = load i32* %row, align 4
  %56 = shl i32 %55, 1
  %57 = and i32 %56, 14
  %58 = load i32* %col, align 4
  %59 = load i16* @left_margin, align 2
  %60 = zext i16 %59 to i32
  %61 = sub i32 %58, %60
  %62 = and i32 %61, 1
  %63 = add i32 %57, %62
  %64 = shl i32 %63, 1
  %65 = lshr i32 %54, %64
  %66 = and i32 %65, 3
  %67 = zext i32 %66 to i64
  %68 = load i32* %row, align 4
  %69 = load i16* @shrink, align 2
  %70 = zext i16 %69 to i32
  %71 = lshr i32 %68, %70
  %72 = load i16* @iwidth, align 2
  %73 = zext i16 %72 to i32
  %74 = mul i32 %71, %73
  %75 = load i32* %col, align 4
  %76 = load i16* @left_margin, align 2
  %77 = zext i16 %76 to i32
  %78 = sub i32 %75, %77
  %79 = load i16* @shrink, align 2
  %80 = zext i16 %79 to i32
  %81 = lshr i32 %78, %80
  %82 = add i32 %74, %81
  %83 = zext i32 %82 to i64
  %84 = load [4 x i16]** @image, align 8
  %85 = getelementptr inbounds [4 x i16]* %84, i64 %83
  %86 = getelementptr inbounds [4 x i16]* %85, i32 0, i64 %67
  store i16 %53, i16* %86, align 2
  br label %91

; <label>:87                                      ; preds = %34
  %88 = load i32* %val, align 4
  %89 = load i32* %lblack, align 4
  %90 = add i32 %89, %88
  store i32 %90, i32* %lblack, align 4
  br label %91

; <label>:91                                      ; preds = %87, %51
  br label %92

; <label>:92                                      ; preds = %91
  %93 = load i32* %col, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %col, align 4
  br label %29

; <label>:95                                      ; preds = %29
  br label %96

; <label>:96                                      ; preds = %95
  %97 = load i32* %row, align 4
  %98 = add i32 %97, 1
  store i32 %98, i32* %row, align 4
  br label %13

; <label>:99                                      ; preds = %13
  %100 = load i8** %pixel, align 8
  call void @free(i8* %100) #4
  %101 = load i16* @raw_width, align 2
  %102 = zext i16 %101 to i32
  %103 = load i16* @width, align 2
  %104 = zext i16 %103 to i32
  %105 = add nsw i32 %104, 1
  %106 = icmp sgt i32 %102, %105
  br i1 %106, label %107, label %118

; <label>:107                                     ; preds = %99
  %108 = load i32* %lblack, align 4
  %109 = load i16* @raw_width, align 2
  %110 = zext i16 %109 to i32
  %111 = load i16* @width, align 2
  %112 = zext i16 %111 to i32
  %113 = sub nsw i32 %110, %112
  %114 = load i16* @height, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nsw i32 %113, %115
  %117 = udiv i32 %108, %116
  store i32 %117, i32* @black, align 4
  br label %118

; <label>:118                                     ; preds = %107, %99
  %119 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str28, i32 0, i32 0), i64 3) #10
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %122, label %121

; <label>:121                                     ; preds = %118
  store i32 0, i32* @black, align 4
  br label %122

; <label>:122                                     ; preds = %121, %118
  %123 = load i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i64 255), align 2
  %124 = zext i16 %123 to i32
  store i32 %124, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define void @kodak_yrgb_load_raw() #0 {
  %pixel = alloca i8*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %y = alloca i32, align 4
  %cb = alloca i32, align 4
  %cr = alloca i32, align 4
  %rgb = alloca [3 x i32], align 4
  %c = alloca i32, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i64
  %3 = call noalias i8* @calloc(i64 %2, i64 3) #4
  store i8* %3, i8** %pixel, align 8
  %4 = load i8** %pixel, align 8
  call void @merror(i8* %4, i8* getelementptr inbounds ([22 x i8]* @.str29, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %5

; <label>:5                                       ; preds = %141, %0
  %6 = load i32* %row, align 4
  %7 = load i16* @height, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %6, %8
  br i1 %9, label %10, label %144

; <label>:10                                      ; preds = %5
  %11 = load i32* %row, align 4
  %12 = xor i32 %11, -1
  %13 = and i32 %12, 1
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %24

; <label>:15                                      ; preds = %10
  %16 = load i8** %pixel, align 8
  %17 = load i16* @raw_width, align 2
  %18 = zext i16 %17 to i64
  %19 = load %struct._IO_FILE** @ifp, align 8
  %20 = call i64 @fread(i8* %16, i64 %18, i64 3, %struct._IO_FILE* %19)
  %21 = icmp ult i64 %20, 3
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %15
  call void @derror()
  br label %23

; <label>:23                                      ; preds = %22, %15
  br label %24

; <label>:24                                      ; preds = %23, %10
  store i32 0, i32* %col, align 4
  br label %25

; <label>:25                                      ; preds = %137, %24
  %26 = load i32* %col, align 4
  %27 = load i16* @raw_width, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %140

; <label>:30                                      ; preds = %25
  %31 = load i16* @width, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nsw i32 %32, 2
  %34 = load i32* %row, align 4
  %35 = and i32 %34, 1
  %36 = mul nsw i32 %33, %35
  %37 = load i32* %col, align 4
  %38 = add nsw i32 %36, %37
  %39 = sext i32 %38 to i64
  %40 = load i8** %pixel, align 8
  %41 = getelementptr inbounds i8* %40, i64 %39
  %42 = load i8* %41, align 1
  %43 = zext i8 %42 to i32
  store i32 %43, i32* %y, align 4
  %44 = load i16* @width, align 2
  %45 = zext i16 %44 to i32
  %46 = load i32* %col, align 4
  %47 = and i32 %46, -2
  %48 = add nsw i32 %45, %47
  %49 = sext i32 %48 to i64
  %50 = load i8** %pixel, align 8
  %51 = getelementptr inbounds i8* %50, i64 %49
  %52 = load i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %53, 128
  store i32 %54, i32* %cb, align 4
  %55 = load i16* @width, align 2
  %56 = zext i16 %55 to i32
  %57 = load i32* %col, align 4
  %58 = and i32 %57, -2
  %59 = add nsw i32 %56, %58
  %60 = add nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = load i8** %pixel, align 8
  %63 = getelementptr inbounds i8* %62, i64 %61
  %64 = load i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = sub nsw i32 %65, 128
  store i32 %66, i32* %cr, align 4
  %67 = load i32* %y, align 4
  %68 = load i32* %cb, align 4
  %69 = load i32* %cr, align 4
  %70 = add nsw i32 %68, %69
  %71 = add nsw i32 %70, 2
  %72 = ashr i32 %71, 2
  %73 = sub nsw i32 %67, %72
  %74 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %76 = load i32* %75, align 4
  %77 = load i32* %cb, align 4
  %78 = add nsw i32 %76, %77
  %79 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 2
  store i32 %78, i32* %79, align 4
  %80 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %81 = load i32* %80, align 4
  %82 = load i32* %cr, align 4
  %83 = add nsw i32 %81, %82
  %84 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 0
  store i32 %83, i32* %84, align 4
  store i32 0, i32* %c, align 4
  br label %85

; <label>:85                                      ; preds = %133, %30
  %86 = load i32* %c, align 4
  %87 = icmp slt i32 %86, 3
  br i1 %87, label %88, label %136

; <label>:88                                      ; preds = %85
  %89 = load i32* %c, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %90
  %92 = load i32* %91, align 4
  %93 = icmp slt i32 %92, 255
  br i1 %93, label %94, label %99

; <label>:94                                      ; preds = %88
  %95 = load i32* %c, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %96
  %98 = load i32* %97, align 4
  br label %100

; <label>:99                                      ; preds = %88
  br label %100

; <label>:100                                     ; preds = %99, %94
  %101 = phi i32 [ %98, %94 ], [ 255, %99 ]
  %102 = icmp sgt i32 0, %101
  br i1 %102, label %103, label %104

; <label>:103                                     ; preds = %100
  br label %118

; <label>:104                                     ; preds = %100
  %105 = load i32* %c, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %106
  %108 = load i32* %107, align 4
  %109 = icmp slt i32 %108, 255
  br i1 %109, label %110, label %115

; <label>:110                                     ; preds = %104
  %111 = load i32* %c, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %112
  %114 = load i32* %113, align 4
  br label %116

; <label>:115                                     ; preds = %104
  br label %116

; <label>:116                                     ; preds = %115, %110
  %117 = phi i32 [ %114, %110 ], [ 255, %115 ]
  br label %118

; <label>:118                                     ; preds = %116, %103
  %119 = phi i32 [ 0, %103 ], [ %117, %116 ]
  %120 = trunc i32 %119 to i16
  %121 = load i32* %c, align 4
  %122 = sext i32 %121 to i64
  %123 = load i32* %row, align 4
  %124 = load i16* @width, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nsw i32 %123, %125
  %127 = load i32* %col, align 4
  %128 = add nsw i32 %126, %127
  %129 = sext i32 %128 to i64
  %130 = load [4 x i16]** @image, align 8
  %131 = getelementptr inbounds [4 x i16]* %130, i64 %129
  %132 = getelementptr inbounds [4 x i16]* %131, i32 0, i64 %122
  store i16 %120, i16* %132, align 2
  br label %133

; <label>:133                                     ; preds = %118
  %134 = load i32* %c, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %c, align 4
  br label %85

; <label>:136                                     ; preds = %85
  br label %137

; <label>:137                                     ; preds = %136
  %138 = load i32* %col, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %col, align 4
  br label %25

; <label>:140                                     ; preds = %25
  br label %141

; <label>:141                                     ; preds = %140
  %142 = load i32* %row, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %row, align 4
  br label %5

; <label>:144                                     ; preds = %5
  %145 = load i8** %pixel, align 8
  call void @free(i8* %145) #4
  store i32 0, i32* @use_gamma, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_262_load_raw() #0 {
  %decode = alloca [2 x %struct.decode*], align 16
  %pixel = alloca i8*, align 8
  %strip = alloca i32*, align 8
  %ns = alloca i32, align 4
  %i = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %chess = alloca i32, align 4
  %pi = alloca i32, align 4
  %pi1 = alloca i32, align 4
  %pi2 = alloca i32, align 4
  %pred = alloca i32, align 4
  %val = alloca i32, align 4
  store i32 0, i32* %pi, align 4
  call void @init_decoder()
  store i32 0, i32* %i, align 4
  br label %1

; <label>:1                                       ; preds = %14, %0
  %2 = load i32* %i, align 4
  %3 = icmp slt i32 %2, 2
  br i1 %3, label %4, label %17

; <label>:4                                       ; preds = %1
  %5 = load %struct.decode** @free_decode, align 8
  %6 = load i32* %i, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [2 x %struct.decode*]* %decode, i32 0, i64 %7
  store %struct.decode* %5, %struct.decode** %8, align 8
  %9 = load i32* %i, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [2 x [26 x i8]]* @kodak_262_load_raw.kodak_tree, i32 0, i64 %10
  %12 = getelementptr inbounds [26 x i8]* %11, i32 0, i32 0
  %13 = call i8* @make_decoder(i8* %12, i32 0)
  br label %14

; <label>:14                                      ; preds = %4
  %15 = load i32* %i, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %i, align 4
  br label %1

; <label>:17                                      ; preds = %1
  %18 = load i16* @raw_height, align 2
  %19 = zext i16 %18 to i32
  %20 = add nsw i32 %19, 63
  %21 = ashr i32 %20, 5
  store i32 %21, i32* %ns, align 4
  %22 = load i16* @raw_width, align 2
  %23 = zext i16 %22 to i32
  %24 = mul nsw i32 %23, 32
  %25 = load i32* %ns, align 4
  %26 = mul nsw i32 %25, 4
  %27 = add nsw i32 %24, %26
  %28 = sext i32 %27 to i64
  %29 = call noalias i8* @malloc(i64 %28) #4
  store i8* %29, i8** %pixel, align 8
  %30 = load i8** %pixel, align 8
  call void @merror(i8* %30, i8* getelementptr inbounds ([21 x i8]* @.str30, i32 0, i32 0))
  %31 = load i8** %pixel, align 8
  %32 = load i16* @raw_width, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nsw i32 %33, 32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8* %31, i64 %35
  %37 = bitcast i8* %36 to i32*
  store i32* %37, i32** %strip, align 8
  store i16 19789, i16* @order, align 2
  store i32 0, i32* %i, align 4
  br label %38

; <label>:38                                      ; preds = %48, %17
  %39 = load i32* %i, align 4
  %40 = load i32* %ns, align 4
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %51

; <label>:42                                      ; preds = %38
  %43 = call i32 @get4()
  %44 = load i32* %i, align 4
  %45 = sext i32 %44 to i64
  %46 = load i32** %strip, align 8
  %47 = getelementptr inbounds i32* %46, i64 %45
  store i32 %43, i32* %47, align 4
  br label %48

; <label>:48                                      ; preds = %42
  %49 = load i32* %i, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %i, align 4
  br label %38

; <label>:51                                      ; preds = %38
  store i32 0, i32* %row, align 4
  br label %52

; <label>:52                                      ; preds = %235, %51
  %53 = load i32* %row, align 4
  %54 = load i16* @raw_height, align 2
  %55 = zext i16 %54 to i32
  %56 = icmp slt i32 %53, %55
  br i1 %56, label %57, label %238

; <label>:57                                      ; preds = %52
  %58 = load i32* %row, align 4
  %59 = and i32 %58, 31
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %72

; <label>:61                                      ; preds = %57
  %62 = load %struct._IO_FILE** @ifp, align 8
  %63 = load i32* %row, align 4
  %64 = ashr i32 %63, 5
  %65 = sext i32 %64 to i64
  %66 = load i32** %strip, align 8
  %67 = getelementptr inbounds i32* %66, i64 %65
  %68 = load i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = call i32 @fseek(%struct._IO_FILE* %62, i64 %69, i32 0)
  %71 = call i32 @getbits(i32 -1)
  store i32 0, i32* %pi, align 4
  br label %72

; <label>:72                                      ; preds = %61, %57
  store i32 0, i32* %col, align 4
  br label %73

; <label>:73                                      ; preds = %231, %72
  %74 = load i32* %col, align 4
  %75 = load i16* @raw_width, align 2
  %76 = zext i16 %75 to i32
  %77 = icmp slt i32 %74, %76
  br i1 %77, label %78, label %234

; <label>:78                                      ; preds = %73
  %79 = load i32* %row, align 4
  %80 = load i32* %col, align 4
  %81 = add nsw i32 %79, %80
  %82 = and i32 %81, 1
  store i32 %82, i32* %chess, align 4
  %83 = load i32* %chess, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %88

; <label>:85                                      ; preds = %78
  %86 = load i32* %pi, align 4
  %87 = sub nsw i32 %86, 2
  br label %94

; <label>:88                                      ; preds = %78
  %89 = load i32* %pi, align 4
  %90 = load i16* @raw_width, align 2
  %91 = zext i16 %90 to i32
  %92 = sub nsw i32 %89, %91
  %93 = sub nsw i32 %92, 1
  br label %94

; <label>:94                                      ; preds = %88, %85
  %95 = phi i32 [ %87, %85 ], [ %93, %88 ]
  store i32 %95, i32* %pi1, align 4
  %96 = load i32* %chess, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %104

; <label>:98                                      ; preds = %94
  %99 = load i32* %pi, align 4
  %100 = load i16* @raw_width, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nsw i32 2, %101
  %103 = sub nsw i32 %99, %102
  br label %110

; <label>:104                                     ; preds = %94
  %105 = load i32* %pi, align 4
  %106 = load i16* @raw_width, align 2
  %107 = zext i16 %106 to i32
  %108 = sub nsw i32 %105, %107
  %109 = add nsw i32 %108, 1
  br label %110

; <label>:110                                     ; preds = %104, %98
  %111 = phi i32 [ %103, %98 ], [ %109, %104 ]
  store i32 %111, i32* %pi2, align 4
  %112 = load i32* %col, align 4
  %113 = load i32* %chess, align 4
  %114 = icmp sle i32 %112, %113
  br i1 %114, label %115, label %116

; <label>:115                                     ; preds = %110
  store i32 -1, i32* %pi1, align 4
  br label %116

; <label>:116                                     ; preds = %115, %110
  %117 = load i32* %pi1, align 4
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %119, label %121

; <label>:119                                     ; preds = %116
  %120 = load i32* %pi2, align 4
  store i32 %120, i32* %pi1, align 4
  br label %121

; <label>:121                                     ; preds = %119, %116
  %122 = load i32* %pi2, align 4
  %123 = icmp slt i32 %122, 0
  br i1 %123, label %124, label %126

; <label>:124                                     ; preds = %121
  %125 = load i32* %pi1, align 4
  store i32 %125, i32* %pi2, align 4
  br label %126

; <label>:126                                     ; preds = %124, %121
  %127 = load i32* %pi1, align 4
  %128 = icmp slt i32 %127, 0
  br i1 %128, label %129, label %135

; <label>:129                                     ; preds = %126
  %130 = load i32* %col, align 4
  %131 = icmp sgt i32 %130, 1
  br i1 %131, label %132, label %135

; <label>:132                                     ; preds = %129
  %133 = load i32* %pi, align 4
  %134 = sub nsw i32 %133, 2
  store i32 %134, i32* %pi2, align 4
  store i32 %134, i32* %pi1, align 4
  br label %135

; <label>:135                                     ; preds = %132, %129, %126
  %136 = load i32* %pi1, align 4
  %137 = icmp slt i32 %136, 0
  br i1 %137, label %138, label %139

; <label>:138                                     ; preds = %135
  br label %154

; <label>:139                                     ; preds = %135
  %140 = load i32* %pi1, align 4
  %141 = sext i32 %140 to i64
  %142 = load i8** %pixel, align 8
  %143 = getelementptr inbounds i8* %142, i64 %141
  %144 = load i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = load i32* %pi2, align 4
  %147 = sext i32 %146 to i64
  %148 = load i8** %pixel, align 8
  %149 = getelementptr inbounds i8* %148, i64 %147
  %150 = load i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nsw i32 %145, %151
  %153 = ashr i32 %152, 1
  br label %154

; <label>:154                                     ; preds = %139, %138
  %155 = phi i32 [ 0, %138 ], [ %153, %139 ]
  store i32 %155, i32* %pred, align 4
  %156 = load i32* %pred, align 4
  %157 = load i32* %chess, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [2 x %struct.decode*]* %decode, i32 0, i64 %158
  %160 = load %struct.decode** %159, align 8
  %161 = call i32 @ljpeg_diff(%struct.decode* %160)
  %162 = add nsw i32 %156, %161
  store i32 %162, i32* %val, align 4
  %163 = trunc i32 %162 to i8
  %164 = load i32* %pi, align 4
  %165 = sext i32 %164 to i64
  %166 = load i8** %pixel, align 8
  %167 = getelementptr inbounds i8* %166, i64 %165
  store i8 %163, i8* %167, align 1
  %168 = load i32* %val, align 4
  %169 = ashr i32 %168, 8
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %172

; <label>:171                                     ; preds = %154
  call void @derror()
  br label %172

; <label>:172                                     ; preds = %171, %154
  %173 = load i32* %pi, align 4
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %pi, align 4
  %175 = sext i32 %173 to i64
  %176 = load i8** %pixel, align 8
  %177 = getelementptr inbounds i8* %176, i64 %175
  %178 = load i8* %177, align 1
  %179 = zext i8 %178 to i64
  %180 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %179
  %181 = load i16* %180, align 2
  %182 = zext i16 %181 to i32
  store i32 %182, i32* %val, align 4
  %183 = load i32* %col, align 4
  %184 = load i16* @left_margin, align 2
  %185 = zext i16 %184 to i32
  %186 = sub nsw i32 %183, %185
  %187 = load i16* @width, align 2
  %188 = zext i16 %187 to i32
  %189 = icmp ult i32 %186, %188
  br i1 %189, label %190, label %226

; <label>:190                                     ; preds = %172
  %191 = load i32* %val, align 4
  %192 = trunc i32 %191 to i16
  %193 = load i32* @filters, align 4
  %194 = load i32* %row, align 4
  %195 = shl i32 %194, 1
  %196 = and i32 %195, 14
  %197 = load i32* %col, align 4
  %198 = load i16* @left_margin, align 2
  %199 = zext i16 %198 to i32
  %200 = sub nsw i32 %197, %199
  %201 = and i32 %200, 1
  %202 = add nsw i32 %196, %201
  %203 = shl i32 %202, 1
  %204 = lshr i32 %193, %203
  %205 = and i32 %204, 3
  %206 = zext i32 %205 to i64
  %207 = load i32* %row, align 4
  %208 = load i16* @shrink, align 2
  %209 = zext i16 %208 to i32
  %210 = ashr i32 %207, %209
  %211 = load i16* @iwidth, align 2
  %212 = zext i16 %211 to i32
  %213 = mul nsw i32 %210, %212
  %214 = load i32* %col, align 4
  %215 = load i16* @left_margin, align 2
  %216 = zext i16 %215 to i32
  %217 = sub nsw i32 %214, %216
  %218 = load i16* @shrink, align 2
  %219 = zext i16 %218 to i32
  %220 = ashr i32 %217, %219
  %221 = add nsw i32 %213, %220
  %222 = sext i32 %221 to i64
  %223 = load [4 x i16]** @image, align 8
  %224 = getelementptr inbounds [4 x i16]* %223, i64 %222
  %225 = getelementptr inbounds [4 x i16]* %224, i32 0, i64 %206
  store i16 %192, i16* %225, align 2
  br label %230

; <label>:226                                     ; preds = %172
  %227 = load i32* %val, align 4
  %228 = load i32* @black, align 4
  %229 = add i32 %228, %227
  store i32 %229, i32* @black, align 4
  br label %230

; <label>:230                                     ; preds = %226, %190
  br label %231

; <label>:231                                     ; preds = %230
  %232 = load i32* %col, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %col, align 4
  br label %73

; <label>:234                                     ; preds = %73
  br label %235

; <label>:235                                     ; preds = %234
  %236 = load i32* %row, align 4
  %237 = add nsw i32 %236, 1
  store i32 %237, i32* %row, align 4
  br label %52

; <label>:238                                     ; preds = %52
  %239 = load i8** %pixel, align 8
  call void @free(i8* %239) #4
  %240 = load i16* @raw_width, align 2
  %241 = zext i16 %240 to i32
  %242 = load i16* @width, align 2
  %243 = zext i16 %242 to i32
  %244 = icmp sgt i32 %241, %243
  br i1 %244, label %245, label %256

; <label>:245                                     ; preds = %238
  %246 = load i16* @raw_width, align 2
  %247 = zext i16 %246 to i32
  %248 = load i16* @width, align 2
  %249 = zext i16 %248 to i32
  %250 = sub nsw i32 %247, %249
  %251 = load i16* @height, align 2
  %252 = zext i16 %251 to i32
  %253 = mul nsw i32 %250, %252
  %254 = load i32* @black, align 4
  %255 = udiv i32 %254, %253
  store i32 %255, i32* @black, align 4
  br label %256

; <label>:256                                     ; preds = %245, %238
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @kodak_65000_decode(i16* %out, i32 %bsize) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i16*, align 8
  %3 = alloca i32, align 4
  %c = alloca i8, align 1
  %blen = alloca [768 x i8], align 16
  %raw = alloca [6 x i16], align 2
  %bitbuf = alloca i64, align 8
  %save = alloca i32, align 4
  %bits = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %diff = alloca i32, align 4
  store i16* %out, i16** %2, align 8
  store i32 %bsize, i32* %3, align 4
  store i64 0, i64* %bitbuf, align 8
  store i32 0, i32* %bits, align 4
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i64 @ftell(%struct._IO_FILE* %4)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %save, align 4
  %7 = load i32* %3, align 4
  %8 = add nsw i32 %7, 3
  %9 = and i32 %8, -4
  store i32 %9, i32* %3, align 4
  store i32 0, i32* %i, align 4
  br label %10

; <label>:10                                      ; preds = %119, %0
  %11 = load i32* %i, align 4
  %12 = load i32* %3, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %122

; <label>:14                                      ; preds = %10
  %15 = load %struct._IO_FILE** @ifp, align 8
  %16 = call i32 @getc_unlocked(%struct._IO_FILE* %15)
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %c, align 1
  %18 = load i8* %c, align 1
  %19 = zext i8 %18 to i32
  %20 = and i32 %19, 15
  %21 = trunc i32 %20 to i8
  %22 = load i32* %i, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [768 x i8]* %blen, i32 0, i64 %23
  store i8 %21, i8* %24, align 1
  %25 = zext i8 %21 to i32
  %26 = icmp sgt i32 %25, 12
  br i1 %26, label %38, label %27

; <label>:27                                      ; preds = %14
  %28 = load i8* %c, align 1
  %29 = zext i8 %28 to i32
  %30 = ashr i32 %29, 4
  %31 = trunc i32 %30 to i8
  %32 = load i32* %i, align 4
  %33 = add nsw i32 %32, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [768 x i8]* %blen, i32 0, i64 %34
  store i8 %31, i8* %35, align 1
  %36 = zext i8 %31 to i32
  %37 = icmp sgt i32 %36, 12
  br i1 %37, label %38, label %118

; <label>:38                                      ; preds = %27, %14
  %39 = load %struct._IO_FILE** @ifp, align 8
  %40 = load i32* %save, align 4
  %41 = sext i32 %40 to i64
  %42 = call i32 @fseek(%struct._IO_FILE* %39, i64 %41, i32 0)
  store i32 0, i32* %i, align 4
  br label %43

; <label>:43                                      ; preds = %114, %38
  %44 = load i32* %i, align 4
  %45 = load i32* %3, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %117

; <label>:47                                      ; preds = %43
  %48 = getelementptr inbounds [6 x i16]* %raw, i32 0, i32 0
  call void @read_shorts(i16* %48, i32 6)
  %49 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 0
  %50 = load i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = ashr i32 %51, 12
  %53 = shl i32 %52, 8
  %54 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 2
  %55 = load i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = ashr i32 %56, 12
  %58 = shl i32 %57, 4
  %59 = or i32 %53, %58
  %60 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 4
  %61 = load i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = ashr i32 %62, 12
  %64 = or i32 %59, %63
  %65 = trunc i32 %64 to i16
  %66 = load i32* %i, align 4
  %67 = sext i32 %66 to i64
  %68 = load i16** %2, align 8
  %69 = getelementptr inbounds i16* %68, i64 %67
  store i16 %65, i16* %69, align 2
  %70 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 1
  %71 = load i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = ashr i32 %72, 12
  %74 = shl i32 %73, 8
  %75 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 3
  %76 = load i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = ashr i32 %77, 12
  %79 = shl i32 %78, 4
  %80 = or i32 %74, %79
  %81 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 5
  %82 = load i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = ashr i32 %83, 12
  %85 = or i32 %80, %84
  %86 = trunc i32 %85 to i16
  %87 = load i32* %i, align 4
  %88 = add nsw i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = load i16** %2, align 8
  %91 = getelementptr inbounds i16* %90, i64 %89
  store i16 %86, i16* %91, align 2
  store i32 0, i32* %j, align 4
  br label %92

; <label>:92                                      ; preds = %110, %47
  %93 = load i32* %j, align 4
  %94 = icmp slt i32 %93, 6
  br i1 %94, label %95, label %113

; <label>:95                                      ; preds = %92
  %96 = load i32* %j, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [6 x i16]* %raw, i32 0, i64 %97
  %99 = load i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = and i32 %100, 4095
  %102 = trunc i32 %101 to i16
  %103 = load i32* %i, align 4
  %104 = add nsw i32 %103, 2
  %105 = load i32* %j, align 4
  %106 = add nsw i32 %104, %105
  %107 = sext i32 %106 to i64
  %108 = load i16** %2, align 8
  %109 = getelementptr inbounds i16* %108, i64 %107
  store i16 %102, i16* %109, align 2
  br label %110

; <label>:110                                     ; preds = %95
  %111 = load i32* %j, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %j, align 4
  br label %92

; <label>:113                                     ; preds = %92
  br label %114

; <label>:114                                     ; preds = %113
  %115 = load i32* %i, align 4
  %116 = add nsw i32 %115, 8
  store i32 %116, i32* %i, align 4
  br label %43

; <label>:117                                     ; preds = %43
  store i32 1, i32* %1
  br label %210

; <label>:118                                     ; preds = %27
  br label %119

; <label>:119                                     ; preds = %118
  %120 = load i32* %i, align 4
  %121 = add nsw i32 %120, 2
  store i32 %121, i32* %i, align 4
  br label %10

; <label>:122                                     ; preds = %10
  %123 = load i32* %3, align 4
  %124 = and i32 %123, 7
  %125 = icmp eq i32 %124, 4
  br i1 %125, label %126, label %136

; <label>:126                                     ; preds = %122
  %127 = load %struct._IO_FILE** @ifp, align 8
  %128 = call i32 @getc_unlocked(%struct._IO_FILE* %127)
  %129 = shl i32 %128, 8
  %130 = sext i32 %129 to i64
  store i64 %130, i64* %bitbuf, align 8
  %131 = load %struct._IO_FILE** @ifp, align 8
  %132 = call i32 @getc_unlocked(%struct._IO_FILE* %131)
  %133 = sext i32 %132 to i64
  %134 = load i64* %bitbuf, align 8
  %135 = add nsw i64 %134, %133
  store i64 %135, i64* %bitbuf, align 8
  store i32 16, i32* %bits, align 4
  br label %136

; <label>:136                                     ; preds = %126, %122
  store i32 0, i32* %i, align 4
  br label %137

; <label>:137                                     ; preds = %206, %136
  %138 = load i32* %i, align 4
  %139 = load i32* %3, align 4
  %140 = icmp slt i32 %138, %139
  br i1 %140, label %141, label %209

; <label>:141                                     ; preds = %137
  %142 = load i32* %i, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [768 x i8]* %blen, i32 0, i64 %143
  %145 = load i8* %144, align 1
  %146 = zext i8 %145 to i32
  store i32 %146, i32* %len, align 4
  %147 = load i32* %bits, align 4
  %148 = load i32* %len, align 4
  %149 = icmp slt i32 %147, %148
  br i1 %149, label %150, label %172

; <label>:150                                     ; preds = %141
  store i32 0, i32* %j, align 4
  br label %151

; <label>:151                                     ; preds = %166, %150
  %152 = load i32* %j, align 4
  %153 = icmp slt i32 %152, 32
  br i1 %153, label %154, label %169

; <label>:154                                     ; preds = %151
  %155 = load %struct._IO_FILE** @ifp, align 8
  %156 = call i32 @getc_unlocked(%struct._IO_FILE* %155)
  %157 = sext i32 %156 to i64
  %158 = load i32* %bits, align 4
  %159 = load i32* %j, align 4
  %160 = xor i32 %159, 8
  %161 = add nsw i32 %158, %160
  %162 = zext i32 %161 to i64
  %163 = shl i64 %157, %162
  %164 = load i64* %bitbuf, align 8
  %165 = add nsw i64 %164, %163
  store i64 %165, i64* %bitbuf, align 8
  br label %166

; <label>:166                                     ; preds = %154
  %167 = load i32* %j, align 4
  %168 = add nsw i32 %167, 8
  store i32 %168, i32* %j, align 4
  br label %151

; <label>:169                                     ; preds = %151
  %170 = load i32* %bits, align 4
  %171 = add nsw i32 %170, 32
  store i32 %171, i32* %bits, align 4
  br label %172

; <label>:172                                     ; preds = %169, %141
  %173 = load i64* %bitbuf, align 8
  %174 = load i32* %len, align 4
  %175 = sub nsw i32 16, %174
  %176 = ashr i32 65535, %175
  %177 = sext i32 %176 to i64
  %178 = and i64 %173, %177
  %179 = trunc i64 %178 to i32
  store i32 %179, i32* %diff, align 4
  %180 = load i32* %len, align 4
  %181 = load i64* %bitbuf, align 8
  %182 = zext i32 %180 to i64
  %183 = ashr i64 %181, %182
  store i64 %183, i64* %bitbuf, align 8
  %184 = load i32* %len, align 4
  %185 = load i32* %bits, align 4
  %186 = sub nsw i32 %185, %184
  store i32 %186, i32* %bits, align 4
  %187 = load i32* %diff, align 4
  %188 = load i32* %len, align 4
  %189 = sub nsw i32 %188, 1
  %190 = shl i32 1, %189
  %191 = and i32 %187, %190
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %199

; <label>:193                                     ; preds = %172
  %194 = load i32* %len, align 4
  %195 = shl i32 1, %194
  %196 = sub nsw i32 %195, 1
  %197 = load i32* %diff, align 4
  %198 = sub nsw i32 %197, %196
  store i32 %198, i32* %diff, align 4
  br label %199

; <label>:199                                     ; preds = %193, %172
  %200 = load i32* %diff, align 4
  %201 = trunc i32 %200 to i16
  %202 = load i32* %i, align 4
  %203 = sext i32 %202 to i64
  %204 = load i16** %2, align 8
  %205 = getelementptr inbounds i16* %204, i64 %203
  store i16 %201, i16* %205, align 2
  br label %206

; <label>:206                                     ; preds = %199
  %207 = load i32* %i, align 4
  %208 = add nsw i32 %207, 1
  store i32 %208, i32* %i, align 4
  br label %137

; <label>:209                                     ; preds = %137
  store i32 0, i32* %1
  br label %210

; <label>:210                                     ; preds = %209, %117
  %211 = load i32* %1
  ret i32 %211
}

; Function Attrs: nounwind uwtable
define void @kodak_65000_load_raw() #0 {
  %buf = alloca [256 x i16], align 16
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %len = alloca i32, align 4
  %pred = alloca [2 x i32], align 4
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %row, align 4
  br label %1

; <label>:1                                       ; preds = %105, %0
  %2 = load i32* %row, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %108

; <label>:6                                       ; preds = %1
  store i32 0, i32* %col, align 4
  br label %7

; <label>:7                                       ; preds = %101, %6
  %8 = load i32* %col, align 4
  %9 = load i16* @width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %104

; <label>:12                                      ; preds = %7
  %13 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 1
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 0
  store i32 0, i32* %14, align 4
  %15 = load i16* @width, align 2
  %16 = zext i16 %15 to i32
  %17 = load i32* %col, align 4
  %18 = sub nsw i32 %16, %17
  %19 = icmp slt i32 256, %18
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %12
  br label %26

; <label>:21                                      ; preds = %12
  %22 = load i16* @width, align 2
  %23 = zext i16 %22 to i32
  %24 = load i32* %col, align 4
  %25 = sub nsw i32 %23, %24
  br label %26

; <label>:26                                      ; preds = %21, %20
  %27 = phi i32 [ 256, %20 ], [ %25, %21 ]
  store i32 %27, i32* %len, align 4
  %28 = getelementptr inbounds [256 x i16]* %buf, i32 0, i32 0
  %29 = load i32* %len, align 4
  %30 = call i32 @kodak_65000_decode(i16* %28, i32 %29)
  store i32 %30, i32* %ret, align 4
  store i32 0, i32* %i, align 4
  br label %31

; <label>:31                                      ; preds = %97, %26
  %32 = load i32* %i, align 4
  %33 = load i32* %len, align 4
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %35, label %100

; <label>:35                                      ; preds = %31
  %36 = load i32* %ret, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %44

; <label>:38                                      ; preds = %35
  %39 = load i32* %i, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [256 x i16]* %buf, i32 0, i64 %40
  %42 = load i16* %41, align 2
  %43 = sext i16 %42 to i32
  br label %56

; <label>:44                                      ; preds = %35
  %45 = load i32* %i, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [256 x i16]* %buf, i32 0, i64 %46
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = load i32* %i, align 4
  %51 = and i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [2 x i32]* %pred, i32 0, i64 %52
  %54 = load i32* %53, align 4
  %55 = add nsw i32 %54, %49
  store i32 %55, i32* %53, align 4
  br label %56

; <label>:56                                      ; preds = %44, %38
  %57 = phi i32 [ %43, %38 ], [ %55, %44 ]
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %58
  %60 = load i16* %59, align 2
  %61 = load i32* @filters, align 4
  %62 = load i32* %row, align 4
  %63 = shl i32 %62, 1
  %64 = and i32 %63, 14
  %65 = load i32* %col, align 4
  %66 = load i32* %i, align 4
  %67 = add nsw i32 %65, %66
  %68 = and i32 %67, 1
  %69 = add nsw i32 %64, %68
  %70 = shl i32 %69, 1
  %71 = lshr i32 %61, %70
  %72 = and i32 %71, 3
  %73 = zext i32 %72 to i64
  %74 = load i32* %row, align 4
  %75 = load i16* @shrink, align 2
  %76 = zext i16 %75 to i32
  %77 = ashr i32 %74, %76
  %78 = load i16* @iwidth, align 2
  %79 = zext i16 %78 to i32
  %80 = mul nsw i32 %77, %79
  %81 = load i32* %col, align 4
  %82 = load i32* %i, align 4
  %83 = add nsw i32 %81, %82
  %84 = load i16* @shrink, align 2
  %85 = zext i16 %84 to i32
  %86 = ashr i32 %83, %85
  %87 = add nsw i32 %80, %86
  %88 = sext i32 %87 to i64
  %89 = load [4 x i16]** @image, align 8
  %90 = getelementptr inbounds [4 x i16]* %89, i64 %88
  %91 = getelementptr inbounds [4 x i16]* %90, i32 0, i64 %73
  store i16 %60, i16* %91, align 2
  %92 = zext i16 %60 to i32
  %93 = ashr i32 %92, 12
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %96

; <label>:95                                      ; preds = %56
  call void @derror()
  br label %96

; <label>:96                                      ; preds = %95, %56
  br label %97

; <label>:97                                      ; preds = %96
  %98 = load i32* %i, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %i, align 4
  br label %31

; <label>:100                                     ; preds = %31
  br label %101

; <label>:101                                     ; preds = %100
  %102 = load i32* %col, align 4
  %103 = add nsw i32 %102, 256
  store i32 %103, i32* %col, align 4
  br label %7

; <label>:104                                     ; preds = %7
  br label %105

; <label>:105                                     ; preds = %104
  %106 = load i32* %row, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %row, align 4
  br label %1

; <label>:108                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_ycbcr_load_raw() #0 {
  %buf = alloca [384 x i16], align 16
  %bp = alloca i16*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %len = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %y = alloca [2 x [2 x i32]], align 16
  %cb = alloca i32, align 4
  %cr = alloca i32, align 4
  %rgb = alloca [3 x i32], align 4
  %ip = alloca i16*, align 8
  store i32 0, i32* %row, align 4
  br label %1

; <label>:1                                       ; preds = %212, %0
  %2 = load i32* %row, align 4
  %3 = load i16* @height, align 2
  %4 = zext i16 %3 to i32
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %215

; <label>:6                                       ; preds = %1
  store i32 0, i32* %col, align 4
  br label %7

; <label>:7                                       ; preds = %208, %6
  %8 = load i32* %col, align 4
  %9 = load i16* @width, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %211

; <label>:12                                      ; preds = %7
  %13 = load i16* @width, align 2
  %14 = zext i16 %13 to i32
  %15 = load i32* %col, align 4
  %16 = sub nsw i32 %14, %15
  %17 = icmp slt i32 128, %16
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %12
  br label %24

; <label>:19                                      ; preds = %12
  %20 = load i16* @width, align 2
  %21 = zext i16 %20 to i32
  %22 = load i32* %col, align 4
  %23 = sub nsw i32 %21, %22
  br label %24

; <label>:24                                      ; preds = %19, %18
  %25 = phi i32 [ 128, %18 ], [ %23, %19 ]
  store i32 %25, i32* %len, align 4
  %26 = getelementptr inbounds [384 x i16]* %buf, i32 0, i32 0
  %27 = load i32* %len, align 4
  %28 = mul nsw i32 %27, 3
  %29 = call i32 @kodak_65000_decode(i16* %26, i32 %28)
  store i32 0, i32* %cr, align 4
  store i32 0, i32* %cb, align 4
  %30 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 1
  %31 = getelementptr inbounds [2 x i32]* %30, i32 0, i64 1
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 0
  %33 = getelementptr inbounds [2 x i32]* %32, i32 0, i64 1
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds [384 x i16]* %buf, i32 0, i32 0
  store i16* %34, i16** %bp, align 8
  store i32 0, i32* %i, align 4
  br label %35

; <label>:35                                      ; preds = %202, %24
  %36 = load i32* %i, align 4
  %37 = load i32* %len, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %207

; <label>:39                                      ; preds = %35
  %40 = load i16** %bp, align 8
  %41 = getelementptr inbounds i16* %40, i64 4
  %42 = load i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = load i32* %cb, align 4
  %45 = add nsw i32 %44, %43
  store i32 %45, i32* %cb, align 4
  %46 = load i16** %bp, align 8
  %47 = getelementptr inbounds i16* %46, i64 5
  %48 = load i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = load i32* %cr, align 4
  %51 = add nsw i32 %50, %49
  store i32 %51, i32* %cr, align 4
  %52 = load i32* %cb, align 4
  %53 = load i32* %cr, align 4
  %54 = add nsw i32 %52, %53
  %55 = add nsw i32 %54, 2
  %56 = ashr i32 %55, 2
  %57 = sub nsw i32 0, %56
  %58 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %60 = load i32* %59, align 4
  %61 = load i32* %cb, align 4
  %62 = add nsw i32 %60, %61
  %63 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 2
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 1
  %65 = load i32* %64, align 4
  %66 = load i32* %cr, align 4
  %67 = add nsw i32 %65, %66
  %68 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 0
  store i32 %67, i32* %68, align 4
  store i32 0, i32* %j, align 4
  br label %69

; <label>:69                                      ; preds = %198, %39
  %70 = load i32* %j, align 4
  %71 = icmp slt i32 %70, 2
  br i1 %71, label %72, label %201

; <label>:72                                      ; preds = %69
  store i32 0, i32* %k, align 4
  br label %73

; <label>:73                                      ; preds = %194, %72
  %74 = load i32* %k, align 4
  %75 = icmp slt i32 %74, 2
  br i1 %75, label %76, label %197

; <label>:76                                      ; preds = %73
  %77 = load i32* %k, align 4
  %78 = xor i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = load i32* %j, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %81
  %83 = getelementptr inbounds [2 x i32]* %82, i32 0, i64 %79
  %84 = load i32* %83, align 4
  %85 = load i16** %bp, align 8
  %86 = getelementptr inbounds i16* %85, i32 1
  store i16* %86, i16** %bp, align 8
  %87 = load i16* %85, align 2
  %88 = sext i16 %87 to i32
  %89 = add nsw i32 %84, %88
  %90 = load i32* %k, align 4
  %91 = sext i32 %90 to i64
  %92 = load i32* %j, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %93
  %95 = getelementptr inbounds [2 x i32]* %94, i32 0, i64 %91
  store i32 %89, i32* %95, align 4
  %96 = ashr i32 %89, 10
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %99

; <label>:98                                      ; preds = %76
  call void @derror()
  br label %99

; <label>:99                                      ; preds = %98, %76
  %100 = load i32* %row, align 4
  %101 = load i32* %j, align 4
  %102 = add nsw i32 %100, %101
  %103 = load i16* @width, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nsw i32 %102, %104
  %106 = load i32* %col, align 4
  %107 = add nsw i32 %105, %106
  %108 = load i32* %i, align 4
  %109 = add nsw i32 %107, %108
  %110 = load i32* %k, align 4
  %111 = add nsw i32 %109, %110
  %112 = sext i32 %111 to i64
  %113 = load [4 x i16]** @image, align 8
  %114 = getelementptr inbounds [4 x i16]* %113, i64 %112
  %115 = getelementptr inbounds [4 x i16]* %114, i32 0, i32 0
  store i16* %115, i16** %ip, align 8
  store i32 0, i32* %c, align 4
  br label %116

; <label>:116                                     ; preds = %190, %99
  %117 = load i32* %c, align 4
  %118 = icmp slt i32 %117, 3
  br i1 %118, label %119, label %193

; <label>:119                                     ; preds = %116
  %120 = load i32* %k, align 4
  %121 = sext i32 %120 to i64
  %122 = load i32* %j, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %123
  %125 = getelementptr inbounds [2 x i32]* %124, i32 0, i64 %121
  %126 = load i32* %125, align 4
  %127 = load i32* %c, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %128
  %130 = load i32* %129, align 4
  %131 = add nsw i32 %126, %130
  %132 = icmp slt i32 %131, 4095
  br i1 %132, label %133, label %146

; <label>:133                                     ; preds = %119
  %134 = load i32* %k, align 4
  %135 = sext i32 %134 to i64
  %136 = load i32* %j, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %137
  %139 = getelementptr inbounds [2 x i32]* %138, i32 0, i64 %135
  %140 = load i32* %139, align 4
  %141 = load i32* %c, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %142
  %144 = load i32* %143, align 4
  %145 = add nsw i32 %140, %144
  br label %147

; <label>:146                                     ; preds = %119
  br label %147

; <label>:147                                     ; preds = %146, %133
  %148 = phi i32 [ %145, %133 ], [ 4095, %146 ]
  %149 = icmp sgt i32 0, %148
  br i1 %149, label %150, label %151

; <label>:150                                     ; preds = %147
  br label %181

; <label>:151                                     ; preds = %147
  %152 = load i32* %k, align 4
  %153 = sext i32 %152 to i64
  %154 = load i32* %j, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %155
  %157 = getelementptr inbounds [2 x i32]* %156, i32 0, i64 %153
  %158 = load i32* %157, align 4
  %159 = load i32* %c, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %160
  %162 = load i32* %161, align 4
  %163 = add nsw i32 %158, %162
  %164 = icmp slt i32 %163, 4095
  br i1 %164, label %165, label %178

; <label>:165                                     ; preds = %151
  %166 = load i32* %k, align 4
  %167 = sext i32 %166 to i64
  %168 = load i32* %j, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [2 x [2 x i32]]* %y, i32 0, i64 %169
  %171 = getelementptr inbounds [2 x i32]* %170, i32 0, i64 %167
  %172 = load i32* %171, align 4
  %173 = load i32* %c, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %174
  %176 = load i32* %175, align 4
  %177 = add nsw i32 %172, %176
  br label %179

; <label>:178                                     ; preds = %151
  br label %179

; <label>:179                                     ; preds = %178, %165
  %180 = phi i32 [ %177, %165 ], [ 4095, %178 ]
  br label %181

; <label>:181                                     ; preds = %179, %150
  %182 = phi i32 [ 0, %150 ], [ %180, %179 ]
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %183
  %185 = load i16* %184, align 2
  %186 = load i32* %c, align 4
  %187 = sext i32 %186 to i64
  %188 = load i16** %ip, align 8
  %189 = getelementptr inbounds i16* %188, i64 %187
  store i16 %185, i16* %189, align 2
  br label %190

; <label>:190                                     ; preds = %181
  %191 = load i32* %c, align 4
  %192 = add nsw i32 %191, 1
  store i32 %192, i32* %c, align 4
  br label %116

; <label>:193                                     ; preds = %116
  br label %194

; <label>:194                                     ; preds = %193
  %195 = load i32* %k, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %k, align 4
  br label %73

; <label>:197                                     ; preds = %73
  br label %198

; <label>:198                                     ; preds = %197
  %199 = load i32* %j, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %j, align 4
  br label %69

; <label>:201                                     ; preds = %69
  br label %202

; <label>:202                                     ; preds = %201
  %203 = load i32* %i, align 4
  %204 = add nsw i32 %203, 2
  store i32 %204, i32* %i, align 4
  %205 = load i16** %bp, align 8
  %206 = getelementptr inbounds i16* %205, i64 2
  store i16* %206, i16** %bp, align 8
  br label %35

; <label>:207                                     ; preds = %35
  br label %208

; <label>:208                                     ; preds = %207
  %209 = load i32* %col, align 4
  %210 = add nsw i32 %209, 128
  store i32 %210, i32* %col, align 4
  br label %7

; <label>:211                                     ; preds = %7
  br label %212

; <label>:212                                     ; preds = %211
  %213 = load i32* %row, align 4
  %214 = add nsw i32 %213, 2
  store i32 %214, i32* %row, align 4
  br label %1

; <label>:215                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_rgb_load_raw() #0 {
  %buf = alloca [768 x i16], align 16
  %bp = alloca i16*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %len = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %rgb = alloca [3 x i32], align 4
  %ip = alloca i16*, align 8
  %1 = load [4 x i16]** @image, align 8
  %2 = getelementptr inbounds [4 x i16]* %1, i64 0
  %3 = getelementptr inbounds [4 x i16]* %2, i32 0, i32 0
  store i16* %3, i16** %ip, align 8
  store i32 0, i32* %row, align 4
  br label %4

; <label>:4                                       ; preds = %77, %0
  %5 = load i32* %row, align 4
  %6 = load i16* @height, align 2
  %7 = zext i16 %6 to i32
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %9, label %80

; <label>:9                                       ; preds = %4
  store i32 0, i32* %col, align 4
  br label %10

; <label>:10                                      ; preds = %73, %9
  %11 = load i32* %col, align 4
  %12 = load i16* @width, align 2
  %13 = zext i16 %12 to i32
  %14 = icmp slt i32 %11, %13
  br i1 %14, label %15, label %76

; <label>:15                                      ; preds = %10
  %16 = load i16* @width, align 2
  %17 = zext i16 %16 to i32
  %18 = load i32* %col, align 4
  %19 = sub nsw i32 %17, %18
  %20 = icmp slt i32 256, %19
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %15
  br label %27

; <label>:22                                      ; preds = %15
  %23 = load i16* @width, align 2
  %24 = zext i16 %23 to i32
  %25 = load i32* %col, align 4
  %26 = sub nsw i32 %24, %25
  br label %27

; <label>:27                                      ; preds = %22, %21
  %28 = phi i32 [ 256, %21 ], [ %26, %22 ]
  store i32 %28, i32* %len, align 4
  %29 = getelementptr inbounds [768 x i16]* %buf, i32 0, i32 0
  %30 = load i32* %len, align 4
  %31 = mul nsw i32 %30, 3
  %32 = call i32 @kodak_65000_decode(i16* %29, i32 %31)
  %33 = bitcast [3 x i32]* %rgb to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 12, i32 4, i1 false)
  %34 = getelementptr inbounds [768 x i16]* %buf, i32 0, i32 0
  store i16* %34, i16** %bp, align 8
  store i32 0, i32* %i, align 4
  br label %35

; <label>:35                                      ; preds = %67, %27
  %36 = load i32* %i, align 4
  %37 = load i32* %len, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %72

; <label>:39                                      ; preds = %35
  store i32 0, i32* %c, align 4
  br label %40

; <label>:40                                      ; preds = %63, %39
  %41 = load i32* %c, align 4
  %42 = icmp slt i32 %41, 3
  br i1 %42, label %43, label %66

; <label>:43                                      ; preds = %40
  %44 = load i16** %bp, align 8
  %45 = getelementptr inbounds i16* %44, i32 1
  store i16* %45, i16** %bp, align 8
  %46 = load i16* %44, align 2
  %47 = sext i16 %46 to i32
  %48 = load i32* %c, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [3 x i32]* %rgb, i32 0, i64 %49
  %51 = load i32* %50, align 4
  %52 = add nsw i32 %51, %47
  store i32 %52, i32* %50, align 4
  %53 = trunc i32 %52 to i16
  %54 = load i32* %c, align 4
  %55 = sext i32 %54 to i64
  %56 = load i16** %ip, align 8
  %57 = getelementptr inbounds i16* %56, i64 %55
  store i16 %53, i16* %57, align 2
  %58 = zext i16 %53 to i32
  %59 = ashr i32 %58, 12
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %62

; <label>:61                                      ; preds = %43
  call void @derror()
  br label %62

; <label>:62                                      ; preds = %61, %43
  br label %63

; <label>:63                                      ; preds = %62
  %64 = load i32* %c, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %c, align 4
  br label %40

; <label>:66                                      ; preds = %40
  br label %67

; <label>:67                                      ; preds = %66
  %68 = load i32* %i, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %i, align 4
  %70 = load i16** %ip, align 8
  %71 = getelementptr inbounds i16* %70, i64 4
  store i16* %71, i16** %ip, align 8
  br label %35

; <label>:72                                      ; preds = %35
  br label %73

; <label>:73                                      ; preds = %72
  %74 = load i32* %col, align 4
  %75 = add nsw i32 %74, 256
  store i32 %75, i32* %col, align 4
  br label %10

; <label>:76                                      ; preds = %10
  br label %77

; <label>:77                                      ; preds = %76
  %78 = load i32* %row, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %row, align 4
  br label %4

; <label>:80                                      ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @kodak_thumb_load_raw() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %1 = load i32* @thumb_misc, align 4
  %2 = lshr i32 %1, 5
  store i32 %2, i32* @colors, align 4
  store i32 0, i32* %row, align 4
  br label %3

; <label>:3                                       ; preds = %30, %0
  %4 = load i32* %row, align 4
  %5 = load i16* @height, align 2
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %8, label %33

; <label>:8                                       ; preds = %3
  store i32 0, i32* %col, align 4
  br label %9

; <label>:9                                       ; preds = %26, %8
  %10 = load i32* %col, align 4
  %11 = load i16* @width, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %10, %12
  br i1 %13, label %14, label %29

; <label>:14                                      ; preds = %9
  %15 = load i32* %row, align 4
  %16 = load i16* @width, align 2
  %17 = zext i16 %16 to i32
  %18 = mul nsw i32 %15, %17
  %19 = load i32* %col, align 4
  %20 = add nsw i32 %18, %19
  %21 = sext i32 %20 to i64
  %22 = load [4 x i16]** @image, align 8
  %23 = getelementptr inbounds [4 x i16]* %22, i64 %21
  %24 = getelementptr inbounds [4 x i16]* %23, i32 0, i32 0
  %25 = load i32* @colors, align 4
  call void @read_shorts(i16* %24, i32 %25)
  br label %26

; <label>:26                                      ; preds = %14
  %27 = load i32* %col, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %col, align 4
  br label %9

; <label>:29                                      ; preds = %9
  br label %30

; <label>:30                                      ; preds = %29
  %31 = load i32* %row, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %row, align 4
  br label %3

; <label>:33                                      ; preds = %3
  %34 = load i32* @thumb_misc, align 4
  %35 = and i32 %34, 31
  %36 = shl i32 1, %35
  %37 = sub nsw i32 %36, 1
  store i32 %37, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sony_decrypt(i32* %data, i32 %len, i32 %start, i32 %key) #0 {
  %1 = alloca i32*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32* %data, i32** %1, align 8
  store i32 %len, i32* %2, align 4
  store i32 %start, i32* %3, align 4
  store i32 %key, i32* %4, align 4
  %5 = load i32* %3, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %81

; <label>:7                                       ; preds = %0
  store i32 0, i32* @sony_decrypt.p, align 4
  br label %8

; <label>:8                                       ; preds = %18, %7
  %9 = load i32* @sony_decrypt.p, align 4
  %10 = icmp ult i32 %9, 4
  br i1 %10, label %11, label %21

; <label>:11                                      ; preds = %8
  %12 = load i32* %4, align 4
  %13 = mul nsw i32 %12, 48828125
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %4, align 4
  %15 = load i32* @sony_decrypt.p, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %16
  store i32 %14, i32* %17, align 4
  br label %18

; <label>:18                                      ; preds = %11
  %19 = load i32* @sony_decrypt.p, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* @sony_decrypt.p, align 4
  br label %8

; <label>:21                                      ; preds = %8
  %22 = load i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 3), align 4
  %23 = shl i32 %22, 1
  %24 = load i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 0), align 4
  %25 = load i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 2), align 4
  %26 = xor i32 %24, %25
  %27 = lshr i32 %26, 31
  %28 = or i32 %23, %27
  store i32 %28, i32* getelementptr inbounds ([128 x i32]* @sony_decrypt.pad, i32 0, i64 3), align 4
  store i32 4, i32* @sony_decrypt.p, align 4
  br label %29

; <label>:29                                      ; preds = %61, %21
  %30 = load i32* @sony_decrypt.p, align 4
  %31 = icmp ult i32 %30, 127
  br i1 %31, label %32, label %64

; <label>:32                                      ; preds = %29
  %33 = load i32* @sony_decrypt.p, align 4
  %34 = sub i32 %33, 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %35
  %37 = load i32* %36, align 4
  %38 = load i32* @sony_decrypt.p, align 4
  %39 = sub i32 %38, 2
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %40
  %42 = load i32* %41, align 4
  %43 = xor i32 %37, %42
  %44 = shl i32 %43, 1
  %45 = load i32* @sony_decrypt.p, align 4
  %46 = sub i32 %45, 3
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %47
  %49 = load i32* %48, align 4
  %50 = load i32* @sony_decrypt.p, align 4
  %51 = sub i32 %50, 1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %52
  %54 = load i32* %53, align 4
  %55 = xor i32 %49, %54
  %56 = lshr i32 %55, 31
  %57 = or i32 %44, %56
  %58 = load i32* @sony_decrypt.p, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %59
  store i32 %57, i32* %60, align 4
  br label %61

; <label>:61                                      ; preds = %32
  %62 = load i32* @sony_decrypt.p, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* @sony_decrypt.p, align 4
  br label %29

; <label>:64                                      ; preds = %29
  store i32 0, i32* @sony_decrypt.p, align 4
  br label %65

; <label>:65                                      ; preds = %77, %64
  %66 = load i32* @sony_decrypt.p, align 4
  %67 = icmp ult i32 %66, 127
  br i1 %67, label %68, label %80

; <label>:68                                      ; preds = %65
  %69 = load i32* @sony_decrypt.p, align 4
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %70
  %72 = load i32* %71, align 4
  %73 = call i32 @htonl(i32 %72) #9
  %74 = load i32* @sony_decrypt.p, align 4
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %75
  store i32 %73, i32* %76, align 4
  br label %77

; <label>:77                                      ; preds = %68
  %78 = load i32* @sony_decrypt.p, align 4
  %79 = add i32 %78, 1
  store i32 %79, i32* @sony_decrypt.p, align 4
  br label %65

; <label>:80                                      ; preds = %65
  br label %81

; <label>:81                                      ; preds = %80, %0
  br label %82

; <label>:82                                      ; preds = %86, %81
  %83 = load i32* %2, align 4
  %84 = add nsw i32 %83, -1
  store i32 %84, i32* %2, align 4
  %85 = icmp ne i32 %83, 0
  br i1 %85, label %86, label %109

; <label>:86                                      ; preds = %82
  %87 = load i32* @sony_decrypt.p, align 4
  %88 = add i32 %87, 1
  %89 = and i32 %88, 127
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %90
  %92 = load i32* %91, align 4
  %93 = load i32* @sony_decrypt.p, align 4
  %94 = add i32 %93, 65
  %95 = and i32 %94, 127
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %96
  %98 = load i32* %97, align 4
  %99 = xor i32 %92, %98
  %100 = load i32* @sony_decrypt.p, align 4
  %101 = add i32 %100, 1
  store i32 %101, i32* @sony_decrypt.p, align 4
  %102 = and i32 %100, 127
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [128 x i32]* @sony_decrypt.pad, i32 0, i64 %103
  store i32 %99, i32* %104, align 4
  %105 = load i32** %1, align 8
  %106 = getelementptr inbounds i32* %105, i32 1
  store i32* %106, i32** %1, align 8
  %107 = load i32* %105, align 4
  %108 = xor i32 %107, %99
  store i32 %108, i32* %105, align 4
  br label %82

; <label>:109                                     ; preds = %82
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @htonl(i32) #5

; Function Attrs: nounwind uwtable
define void @sony_load_raw() #0 {
  %head = alloca [40 x i8], align 16
  %pixel = alloca i16*, align 8
  %i = alloca i32, align 4
  %key = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 200896, i32 0)
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  %6 = mul i32 %5, 4
  %7 = sub i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = call i32 @fseek(%struct._IO_FILE* %3, i64 %8, i32 1)
  store i16 19789, i16* @order, align 2
  %10 = call i32 @get4()
  store i32 %10, i32* %key, align 4
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = call i32 @fseek(%struct._IO_FILE* %11, i64 164600, i32 0)
  %13 = getelementptr inbounds [40 x i8]* %head, i32 0, i32 0
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i64 @fread(i8* %13, i64 1, i64 40, %struct._IO_FILE* %14)
  %16 = getelementptr inbounds [40 x i8]* %head, i32 0, i32 0
  %17 = bitcast i8* %16 to i32*
  %18 = load i32* %key, align 4
  call void @sony_decrypt(i32* %17, i32 10, i32 1, i32 %18)
  store i32 26, i32* %i, align 4
  br label %19

; <label>:19                                      ; preds = %23, %0
  %20 = load i32* %i, align 4
  %21 = add i32 %20, -1
  store i32 %21, i32* %i, align 4
  %22 = icmp ugt i32 %20, 22
  br i1 %22, label %23, label %32

; <label>:23                                      ; preds = %19
  %24 = load i32* %key, align 4
  %25 = shl i32 %24, 8
  %26 = load i32* %i, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [40 x i8]* %head, i32 0, i64 %27
  %29 = load i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = or i32 %25, %30
  store i32 %31, i32* %key, align 4
  br label %19

; <label>:32                                      ; preds = %19
  %33 = load %struct._IO_FILE** @ifp, align 8
  %34 = load i64* @data_offset, align 8
  %35 = call i32 @fseek(%struct._IO_FILE* %33, i64 %34, i32 0)
  %36 = load i16* @raw_width, align 2
  %37 = zext i16 %36 to i64
  %38 = call noalias i8* @calloc(i64 %37, i64 2) #4
  %39 = bitcast i8* %38 to i16*
  store i16* %39, i16** %pixel, align 8
  %40 = load i16** %pixel, align 8
  %41 = bitcast i16* %40 to i8*
  call void @merror(i8* %41, i8* getelementptr inbounds ([16 x i8]* @.str31, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %42

; <label>:42                                      ; preds = %139, %32
  %43 = load i32* %row, align 4
  %44 = load i16* @height, align 2
  %45 = zext i16 %44 to i32
  %46 = icmp ult i32 %43, %45
  br i1 %46, label %47, label %142

; <label>:47                                      ; preds = %42
  %48 = load i16** %pixel, align 8
  %49 = bitcast i16* %48 to i8*
  %50 = load i16* @raw_width, align 2
  %51 = zext i16 %50 to i64
  %52 = load %struct._IO_FILE** @ifp, align 8
  %53 = call i64 @fread(i8* %49, i64 2, i64 %51, %struct._IO_FILE* %52)
  %54 = load i16* @raw_width, align 2
  %55 = zext i16 %54 to i64
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %57, label %58

; <label>:57                                      ; preds = %47
  call void @derror()
  br label %58

; <label>:58                                      ; preds = %57, %47
  %59 = load i16** %pixel, align 8
  %60 = bitcast i16* %59 to i32*
  %61 = load i16* @raw_width, align 2
  %62 = zext i16 %61 to i32
  %63 = sdiv i32 %62, 2
  %64 = load i32* %row, align 4
  %65 = icmp ne i32 %64, 0
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = load i32* %key, align 4
  call void @sony_decrypt(i32* %60, i32 %63, i32 %67, i32 %68)
  store i32 9, i32* %col, align 4
  br label %69

; <label>:69                                      ; preds = %84, %58
  %70 = load i32* %col, align 4
  %71 = load i16* @left_margin, align 2
  %72 = zext i16 %71 to i32
  %73 = icmp ult i32 %70, %72
  br i1 %73, label %74, label %87

; <label>:74                                      ; preds = %69
  %75 = load i32* %col, align 4
  %76 = zext i32 %75 to i64
  %77 = load i16** %pixel, align 8
  %78 = getelementptr inbounds i16* %77, i64 %76
  %79 = load i16* %78, align 2
  %80 = call zeroext i16 @ntohs(i16 zeroext %79) #9
  %81 = zext i16 %80 to i32
  %82 = load i32* @black, align 4
  %83 = add i32 %82, %81
  store i32 %83, i32* @black, align 4
  br label %84

; <label>:84                                      ; preds = %74
  %85 = load i32* %col, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %col, align 4
  br label %69

; <label>:87                                      ; preds = %69
  store i32 0, i32* %col, align 4
  br label %88

; <label>:88                                      ; preds = %135, %87
  %89 = load i32* %col, align 4
  %90 = load i16* @width, align 2
  %91 = zext i16 %90 to i32
  %92 = icmp ult i32 %89, %91
  br i1 %92, label %93, label %138

; <label>:93                                      ; preds = %88
  %94 = load i32* %col, align 4
  %95 = load i16* @left_margin, align 2
  %96 = zext i16 %95 to i32
  %97 = add i32 %94, %96
  %98 = zext i32 %97 to i64
  %99 = load i16** %pixel, align 8
  %100 = getelementptr inbounds i16* %99, i64 %98
  %101 = load i16* %100, align 2
  %102 = call zeroext i16 @ntohs(i16 zeroext %101) #9
  %103 = load i32* @filters, align 4
  %104 = load i32* %row, align 4
  %105 = shl i32 %104, 1
  %106 = and i32 %105, 14
  %107 = load i32* %col, align 4
  %108 = and i32 %107, 1
  %109 = add i32 %106, %108
  %110 = shl i32 %109, 1
  %111 = lshr i32 %103, %110
  %112 = and i32 %111, 3
  %113 = zext i32 %112 to i64
  %114 = load i32* %row, align 4
  %115 = load i16* @shrink, align 2
  %116 = zext i16 %115 to i32
  %117 = lshr i32 %114, %116
  %118 = load i16* @iwidth, align 2
  %119 = zext i16 %118 to i32
  %120 = mul i32 %117, %119
  %121 = load i32* %col, align 4
  %122 = load i16* @shrink, align 2
  %123 = zext i16 %122 to i32
  %124 = lshr i32 %121, %123
  %125 = add i32 %120, %124
  %126 = zext i32 %125 to i64
  %127 = load [4 x i16]** @image, align 8
  %128 = getelementptr inbounds [4 x i16]* %127, i64 %126
  %129 = getelementptr inbounds [4 x i16]* %128, i32 0, i64 %113
  store i16 %102, i16* %129, align 2
  %130 = zext i16 %102 to i32
  %131 = ashr i32 %130, 14
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %134

; <label>:133                                     ; preds = %93
  call void @derror()
  br label %134

; <label>:134                                     ; preds = %133, %93
  br label %135

; <label>:135                                     ; preds = %134
  %136 = load i32* %col, align 4
  %137 = add i32 %136, 1
  store i32 %137, i32* %col, align 4
  br label %88

; <label>:138                                     ; preds = %88
  br label %139

; <label>:139                                     ; preds = %138
  %140 = load i32* %row, align 4
  %141 = add i32 %140, 1
  store i32 %141, i32* %row, align 4
  br label %42

; <label>:142                                     ; preds = %42
  %143 = load i16** %pixel, align 8
  %144 = bitcast i16* %143 to i8*
  call void @free(i8* %144) #4
  %145 = load i16* @left_margin, align 2
  %146 = zext i16 %145 to i32
  %147 = icmp sgt i32 %146, 9
  br i1 %147, label %148, label %157

; <label>:148                                     ; preds = %142
  %149 = load i16* @left_margin, align 2
  %150 = zext i16 %149 to i32
  %151 = sub nsw i32 %150, 9
  %152 = load i16* @height, align 2
  %153 = zext i16 %152 to i32
  %154 = mul nsw i32 %151, %153
  %155 = load i32* @black, align 4
  %156 = udiv i32 %155, %154
  store i32 %156, i32* @black, align 4
  br label %157

; <label>:157                                     ; preds = %148, %142
  store i32 16368, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sony_arw_load_raw() #0 {
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %len = alloca i32, align 4
  %diff = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32 0, i32* %sum, align 4
  %1 = call i32 @getbits(i32 -1)
  %2 = load i16* @raw_width, align 2
  %3 = zext i16 %2 to i32
  store i32 %3, i32* %col, align 4
  br label %4

; <label>:4                                       ; preds = %108, %0
  %5 = load i32* %col, align 4
  %6 = add nsw i32 %5, -1
  store i32 %6, i32* %col, align 4
  %7 = icmp ne i32 %5, 0
  br i1 %7, label %8, label %109

; <label>:8                                       ; preds = %4
  store i32 0, i32* %row, align 4
  br label %9

; <label>:9                                       ; preds = %105, %8
  %10 = load i32* %row, align 4
  %11 = load i16* @raw_height, align 2
  %12 = zext i16 %11 to i32
  %13 = add nsw i32 %12, 1
  %14 = icmp slt i32 %10, %13
  br i1 %14, label %15, label %108

; <label>:15                                      ; preds = %9
  %16 = load i32* %row, align 4
  %17 = load i16* @raw_height, align 2
  %18 = zext i16 %17 to i32
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %15
  store i32 1, i32* %row, align 4
  br label %21

; <label>:21                                      ; preds = %20, %15
  %22 = call i32 @getbits(i32 2)
  %23 = sub i32 4, %22
  store i32 %23, i32* %len, align 4
  %24 = load i32* %len, align 4
  %25 = icmp eq i32 %24, 3
  br i1 %25, label %26, label %30

; <label>:26                                      ; preds = %21
  %27 = call i32 @getbits(i32 1)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29                                      ; preds = %26
  store i32 0, i32* %len, align 4
  br label %30

; <label>:30                                      ; preds = %29, %26, %21
  %31 = load i32* %len, align 4
  %32 = icmp eq i32 %31, 4
  br i1 %32, label %33, label %47

; <label>:33                                      ; preds = %30
  br label %34

; <label>:34                                      ; preds = %43, %33
  %35 = load i32* %len, align 4
  %36 = icmp slt i32 %35, 17
  br i1 %36, label %37, label %41

; <label>:37                                      ; preds = %34
  %38 = call i32 @getbits(i32 1)
  %39 = icmp ne i32 %38, 0
  %40 = xor i1 %39, true
  br label %41

; <label>:41                                      ; preds = %37, %34
  %42 = phi i1 [ false, %34 ], [ %40, %37 ]
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %41
  %44 = load i32* %len, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %len, align 4
  br label %34

; <label>:46                                      ; preds = %41
  br label %47

; <label>:47                                      ; preds = %46, %30
  %48 = load i32* %len, align 4
  %49 = call i32 @getbits(i32 %48)
  store i32 %49, i32* %diff, align 4
  %50 = load i32* %diff, align 4
  %51 = load i32* %len, align 4
  %52 = sub nsw i32 %51, 1
  %53 = shl i32 1, %52
  %54 = and i32 %50, %53
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %62

; <label>:56                                      ; preds = %47
  %57 = load i32* %len, align 4
  %58 = shl i32 1, %57
  %59 = sub nsw i32 %58, 1
  %60 = load i32* %diff, align 4
  %61 = sub nsw i32 %60, %59
  store i32 %61, i32* %diff, align 4
  br label %62

; <label>:62                                      ; preds = %56, %47
  %63 = load i32* %diff, align 4
  %64 = load i32* %sum, align 4
  %65 = add nsw i32 %64, %63
  store i32 %65, i32* %sum, align 4
  %66 = ashr i32 %65, 12
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %69

; <label>:68                                      ; preds = %62
  call void @derror()
  br label %69

; <label>:69                                      ; preds = %68, %62
  %70 = load i32* %row, align 4
  %71 = load i16* @height, align 2
  %72 = zext i16 %71 to i32
  %73 = icmp slt i32 %70, %72
  br i1 %73, label %74, label %104

; <label>:74                                      ; preds = %69
  %75 = load i32* %sum, align 4
  %76 = trunc i32 %75 to i16
  %77 = load i32* @filters, align 4
  %78 = load i32* %row, align 4
  %79 = shl i32 %78, 1
  %80 = and i32 %79, 14
  %81 = load i32* %col, align 4
  %82 = and i32 %81, 1
  %83 = add nsw i32 %80, %82
  %84 = shl i32 %83, 1
  %85 = lshr i32 %77, %84
  %86 = and i32 %85, 3
  %87 = zext i32 %86 to i64
  %88 = load i32* %row, align 4
  %89 = load i16* @shrink, align 2
  %90 = zext i16 %89 to i32
  %91 = ashr i32 %88, %90
  %92 = load i16* @iwidth, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nsw i32 %91, %93
  %95 = load i32* %col, align 4
  %96 = load i16* @shrink, align 2
  %97 = zext i16 %96 to i32
  %98 = ashr i32 %95, %97
  %99 = add nsw i32 %94, %98
  %100 = sext i32 %99 to i64
  %101 = load [4 x i16]** @image, align 8
  %102 = getelementptr inbounds [4 x i16]* %101, i64 %100
  %103 = getelementptr inbounds [4 x i16]* %102, i32 0, i64 %87
  store i16 %76, i16* %103, align 2
  br label %104

; <label>:104                                     ; preds = %74, %69
  br label %105

; <label>:105                                     ; preds = %104
  %106 = load i32* %row, align 4
  %107 = add nsw i32 %106, 2
  store i32 %107, i32* %row, align 4
  br label %9

; <label>:108                                     ; preds = %9
  br label %4

; <label>:109                                     ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sony_arw2_load_raw() #0 {
  %data = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %pix = alloca [16 x i16], align 16
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %val = alloca i32, align 4
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %imax = alloca i32, align 4
  %imin = alloca i32, align 4
  %sh = alloca i32, align 4
  %bit = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = load i16* @raw_width, align 2
  %2 = zext i16 %1 to i32
  %3 = load i32* @tiff_bps, align 4
  %4 = mul i32 %2, %3
  %5 = lshr i32 %4, 3
  %6 = zext i32 %5 to i64
  %7 = call noalias i8* @malloc(i64 %6) #4
  store i8* %7, i8** %data, align 8
  %8 = load i8** %data, align 8
  call void @merror(i8* %8, i8* getelementptr inbounds ([21 x i8]* @.str32, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %9

; <label>:9                                       ; preds = %286, %0
  %10 = load i32* %row, align 4
  %11 = load i16* @height, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %10, %12
  br i1 %13, label %14, label %289

; <label>:14                                      ; preds = %9
  %15 = load i8** %data, align 8
  %16 = load i16* @raw_width, align 2
  %17 = zext i16 %16 to i32
  %18 = load i32* @tiff_bps, align 4
  %19 = mul i32 %17, %18
  %20 = lshr i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = load %struct._IO_FILE** @ifp, align 8
  %23 = call i64 @fread(i8* %15, i64 1, i64 %21, %struct._IO_FILE* %22)
  %24 = load i32* @tiff_bps, align 4
  %25 = icmp eq i32 %24, 8
  br i1 %25, label %26, label %185

; <label>:26                                      ; preds = %14
  %27 = load i8** %data, align 8
  store i8* %27, i8** %dp, align 8
  store i32 0, i32* %col, align 4
  br label %28

; <label>:28                                      ; preds = %181, %26
  %29 = load i32* %col, align 4
  %30 = load i16* @width, align 2
  %31 = zext i16 %30 to i32
  %32 = sub nsw i32 %31, 30
  %33 = icmp slt i32 %29, %32
  br i1 %33, label %34, label %184

; <label>:34                                      ; preds = %28
  %35 = load i8** %dp, align 8
  %36 = call i32 @sget4(i8* %35)
  store i32 %36, i32* %val, align 4
  %37 = and i32 2047, %36
  store i32 %37, i32* %max, align 4
  %38 = load i32* %val, align 4
  %39 = ashr i32 %38, 11
  %40 = and i32 2047, %39
  store i32 %40, i32* %min, align 4
  %41 = load i32* %val, align 4
  %42 = ashr i32 %41, 22
  %43 = and i32 15, %42
  store i32 %43, i32* %imax, align 4
  %44 = load i32* %val, align 4
  %45 = ashr i32 %44, 26
  %46 = and i32 15, %45
  store i32 %46, i32* %imin, align 4
  store i32 0, i32* %sh, align 4
  br label %47

; <label>:47                                      ; preds = %60, %34
  %48 = load i32* %sh, align 4
  %49 = icmp slt i32 %48, 4
  br i1 %49, label %50, label %57

; <label>:50                                      ; preds = %47
  %51 = load i32* %sh, align 4
  %52 = shl i32 128, %51
  %53 = load i32* %max, align 4
  %54 = load i32* %min, align 4
  %55 = sub nsw i32 %53, %54
  %56 = icmp sle i32 %52, %55
  br label %57

; <label>:57                                      ; preds = %50, %47
  %58 = phi i1 [ false, %47 ], [ %56, %50 ]
  br i1 %58, label %59, label %63

; <label>:59                                      ; preds = %57
  br label %60

; <label>:60                                      ; preds = %59
  %61 = load i32* %sh, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %sh, align 4
  br label %47

; <label>:63                                      ; preds = %57
  store i32 30, i32* %bit, align 4
  store i32 0, i32* %i, align 4
  br label %64

; <label>:64                                      ; preds = %122, %63
  %65 = load i32* %i, align 4
  %66 = icmp slt i32 %65, 16
  br i1 %66, label %67, label %125

; <label>:67                                      ; preds = %64
  %68 = load i32* %i, align 4
  %69 = load i32* %imax, align 4
  %70 = icmp eq i32 %68, %69
  br i1 %70, label %71, label %77

; <label>:71                                      ; preds = %67
  %72 = load i32* %max, align 4
  %73 = trunc i32 %72 to i16
  %74 = load i32* %i, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %75
  store i16 %73, i16* %76, align 2
  br label %121

; <label>:77                                      ; preds = %67
  %78 = load i32* %i, align 4
  %79 = load i32* %imin, align 4
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %81, label %87

; <label>:81                                      ; preds = %77
  %82 = load i32* %min, align 4
  %83 = trunc i32 %82 to i16
  %84 = load i32* %i, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %85
  store i16 %83, i16* %86, align 2
  br label %120

; <label>:87                                      ; preds = %77
  %88 = load i8** %dp, align 8
  %89 = load i32* %bit, align 4
  %90 = ashr i32 %89, 3
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8* %88, i64 %91
  %93 = call zeroext i16 @sget2(i8* %92)
  %94 = zext i16 %93 to i32
  %95 = load i32* %bit, align 4
  %96 = and i32 %95, 7
  %97 = ashr i32 %94, %96
  %98 = and i32 %97, 127
  %99 = load i32* %sh, align 4
  %100 = shl i32 %98, %99
  %101 = load i32* %min, align 4
  %102 = add nsw i32 %100, %101
  %103 = trunc i32 %102 to i16
  %104 = load i32* %i, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %105
  store i16 %103, i16* %106, align 2
  %107 = load i32* %i, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %108
  %110 = load i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = icmp sgt i32 %111, 2047
  br i1 %112, label %113, label %117

; <label>:113                                     ; preds = %87
  %114 = load i32* %i, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %115
  store i16 2047, i16* %116, align 2
  br label %117

; <label>:117                                     ; preds = %113, %87
  %118 = load i32* %bit, align 4
  %119 = add nsw i32 %118, 7
  store i32 %119, i32* %bit, align 4
  br label %120

; <label>:120                                     ; preds = %117, %81
  br label %121

; <label>:121                                     ; preds = %120, %71
  br label %122

; <label>:122                                     ; preds = %121
  %123 = load i32* %i, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %i, align 4
  br label %64

; <label>:125                                     ; preds = %64
  store i32 0, i32* %i, align 4
  br label %126

; <label>:126                                     ; preds = %169, %125
  %127 = load i32* %i, align 4
  %128 = icmp slt i32 %127, 16
  br i1 %128, label %129, label %174

; <label>:129                                     ; preds = %126
  %130 = load i32* %i, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [16 x i16]* %pix, i32 0, i64 %131
  %133 = load i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = shl i32 %134, 1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %136
  %138 = load i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = ashr i32 %139, 1
  %141 = trunc i32 %140 to i16
  %142 = load i32* @filters, align 4
  %143 = load i32* %row, align 4
  %144 = shl i32 %143, 1
  %145 = and i32 %144, 14
  %146 = load i32* %col, align 4
  %147 = and i32 %146, 1
  %148 = add nsw i32 %145, %147
  %149 = shl i32 %148, 1
  %150 = lshr i32 %142, %149
  %151 = and i32 %150, 3
  %152 = zext i32 %151 to i64
  %153 = load i32* %row, align 4
  %154 = load i16* @shrink, align 2
  %155 = zext i16 %154 to i32
  %156 = ashr i32 %153, %155
  %157 = load i16* @iwidth, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nsw i32 %156, %158
  %160 = load i32* %col, align 4
  %161 = load i16* @shrink, align 2
  %162 = zext i16 %161 to i32
  %163 = ashr i32 %160, %162
  %164 = add nsw i32 %159, %163
  %165 = sext i32 %164 to i64
  %166 = load [4 x i16]** @image, align 8
  %167 = getelementptr inbounds [4 x i16]* %166, i64 %165
  %168 = getelementptr inbounds [4 x i16]* %167, i32 0, i64 %152
  store i16 %141, i16* %168, align 2
  br label %169

; <label>:169                                     ; preds = %129
  %170 = load i32* %i, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %i, align 4
  %172 = load i32* %col, align 4
  %173 = add nsw i32 %172, 2
  store i32 %173, i32* %col, align 4
  br label %126

; <label>:174                                     ; preds = %126
  %175 = load i32* %col, align 4
  %176 = and i32 %175, 1
  %177 = icmp ne i32 %176, 0
  %178 = select i1 %177, i32 1, i32 31
  %179 = load i32* %col, align 4
  %180 = sub nsw i32 %179, %178
  store i32 %180, i32* %col, align 4
  br label %181

; <label>:181                                     ; preds = %174
  %182 = load i8** %dp, align 8
  %183 = getelementptr inbounds i8* %182, i64 16
  store i8* %183, i8** %dp, align 8
  br label %28

; <label>:184                                     ; preds = %28
  br label %285

; <label>:185                                     ; preds = %14
  %186 = load i32* @tiff_bps, align 4
  %187 = icmp eq i32 %186, 12
  br i1 %187, label %188, label %284

; <label>:188                                     ; preds = %185
  %189 = load i8** %data, align 8
  store i8* %189, i8** %dp, align 8
  store i32 0, i32* %col, align 4
  br label %190

; <label>:190                                     ; preds = %278, %188
  %191 = load i32* %col, align 4
  %192 = load i16* @width, align 2
  %193 = zext i16 %192 to i32
  %194 = icmp slt i32 %191, %193
  br i1 %194, label %195, label %283

; <label>:195                                     ; preds = %190
  %196 = load i8** %dp, align 8
  %197 = getelementptr inbounds i8* %196, i64 1
  %198 = load i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = shl i32 %199, 8
  %201 = load i8** %dp, align 8
  %202 = getelementptr inbounds i8* %201, i64 0
  %203 = load i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = or i32 %200, %204
  %206 = and i32 %205, 4095
  %207 = shl i32 %206, 1
  %208 = trunc i32 %207 to i16
  %209 = load i32* @filters, align 4
  %210 = load i32* %row, align 4
  %211 = shl i32 %210, 1
  %212 = and i32 %211, 14
  %213 = load i32* %col, align 4
  %214 = and i32 %213, 1
  %215 = add nsw i32 %212, %214
  %216 = shl i32 %215, 1
  %217 = lshr i32 %209, %216
  %218 = and i32 %217, 3
  %219 = zext i32 %218 to i64
  %220 = load i32* %row, align 4
  %221 = load i16* @shrink, align 2
  %222 = zext i16 %221 to i32
  %223 = ashr i32 %220, %222
  %224 = load i16* @iwidth, align 2
  %225 = zext i16 %224 to i32
  %226 = mul nsw i32 %223, %225
  %227 = load i32* %col, align 4
  %228 = load i16* @shrink, align 2
  %229 = zext i16 %228 to i32
  %230 = ashr i32 %227, %229
  %231 = add nsw i32 %226, %230
  %232 = sext i32 %231 to i64
  %233 = load [4 x i16]** @image, align 8
  %234 = getelementptr inbounds [4 x i16]* %233, i64 %232
  %235 = getelementptr inbounds [4 x i16]* %234, i32 0, i64 %219
  store i16 %208, i16* %235, align 2
  %236 = load i8** %dp, align 8
  %237 = getelementptr inbounds i8* %236, i64 2
  %238 = load i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = shl i32 %239, 4
  %241 = load i8** %dp, align 8
  %242 = getelementptr inbounds i8* %241, i64 1
  %243 = load i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = ashr i32 %244, 4
  %246 = or i32 %240, %245
  %247 = shl i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = load i32* @filters, align 4
  %250 = load i32* %row, align 4
  %251 = shl i32 %250, 1
  %252 = and i32 %251, 14
  %253 = load i32* %col, align 4
  %254 = add nsw i32 %253, 1
  %255 = and i32 %254, 1
  %256 = add nsw i32 %252, %255
  %257 = shl i32 %256, 1
  %258 = lshr i32 %249, %257
  %259 = and i32 %258, 3
  %260 = zext i32 %259 to i64
  %261 = load i32* %row, align 4
  %262 = load i16* @shrink, align 2
  %263 = zext i16 %262 to i32
  %264 = ashr i32 %261, %263
  %265 = load i16* @iwidth, align 2
  %266 = zext i16 %265 to i32
  %267 = mul nsw i32 %264, %266
  %268 = load i32* %col, align 4
  %269 = add nsw i32 %268, 1
  %270 = load i16* @shrink, align 2
  %271 = zext i16 %270 to i32
  %272 = ashr i32 %269, %271
  %273 = add nsw i32 %267, %272
  %274 = sext i32 %273 to i64
  %275 = load [4 x i16]** @image, align 8
  %276 = getelementptr inbounds [4 x i16]* %275, i64 %274
  %277 = getelementptr inbounds [4 x i16]* %276, i32 0, i64 %260
  store i16 %248, i16* %277, align 2
  br label %278

; <label>:278                                     ; preds = %195
  %279 = load i8** %dp, align 8
  %280 = getelementptr inbounds i8* %279, i64 3
  store i8* %280, i8** %dp, align 8
  %281 = load i32* %col, align 4
  %282 = add nsw i32 %281, 2
  store i32 %282, i32* %col, align 4
  br label %190

; <label>:283                                     ; preds = %190
  br label %284

; <label>:284                                     ; preds = %283, %185
  br label %285

; <label>:285                                     ; preds = %284, %184
  br label %286

; <label>:286                                     ; preds = %285
  %287 = load i32* %row, align 4
  %288 = add nsw i32 %287, 1
  store i32 %288, i32* %row, align 4
  br label %9

; <label>:289                                     ; preds = %9
  %290 = load i8** %data, align 8
  call void @free(i8* %290) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @smal_decode_segment([2 x i32]* %seg, i32 %holes) #0 {
  %1 = alloca [2 x i32]*, align 8
  %2 = alloca i32, align 4
  %hist = alloca [3 x [13 x i8]], align 16
  %low = alloca i32, align 4
  %high = alloca i32, align 4
  %carry = alloca i32, align 4
  %nbits = alloca i32, align 4
  %s = alloca i32, align 4
  %count = alloca i32, align 4
  %bin = alloca i32, align 4
  %next = alloca i32, align 4
  %i = alloca i32, align 4
  %sym = alloca [3 x i32], align 4
  %diff = alloca i8, align 1
  %pred = alloca [2 x i8], align 1
  %data = alloca i16, align 2
  %range = alloca i16, align 2
  %pix = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store [2 x i32]* %seg, [2 x i32]** %1, align 8
  store i32 %holes, i32* %2, align 4
  %3 = bitcast [3 x [13 x i8]]* %hist to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* getelementptr inbounds ([3 x [13 x i8]]* @smal_decode_segment.hist, i32 0, i32 0, i32 0), i64 39, i32 16, i1 false)
  store i32 255, i32* %high, align 4
  store i32 0, i32* %carry, align 4
  store i32 8, i32* %nbits, align 4
  %4 = bitcast [2 x i8]* %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 2, i32 1, i1 false)
  store i16 0, i16* %data, align 2
  store i16 0, i16* %range, align 2
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = load [2 x i32]** %1, align 8
  %7 = getelementptr inbounds [2 x i32]* %6, i64 0
  %8 = getelementptr inbounds [2 x i32]* %7, i32 0, i64 1
  %9 = load i32* %8, align 4
  %10 = add i32 %9, 1
  %11 = zext i32 %10 to i64
  %12 = call i32 @fseek(%struct._IO_FILE* %5, i64 %11, i32 0)
  %13 = call i32 @getbits(i32 -1)
  %14 = load [2 x i32]** %1, align 8
  %15 = getelementptr inbounds [2 x i32]* %14, i64 0
  %16 = getelementptr inbounds [2 x i32]* %15, i32 0, i64 0
  %17 = load i32* %16, align 4
  store i32 %17, i32* %pix, align 4
  br label %18

; <label>:18                                      ; preds = %482, %0
  %19 = load i32* %pix, align 4
  %20 = load [2 x i32]** %1, align 8
  %21 = getelementptr inbounds [2 x i32]* %20, i64 1
  %22 = getelementptr inbounds [2 x i32]* %21, i32 0, i64 0
  %23 = load i32* %22, align 4
  %24 = icmp ult i32 %19, %23
  br i1 %24, label %25, label %485

; <label>:25                                      ; preds = %18
  store i32 0, i32* %s, align 4
  br label %26

; <label>:26                                      ; preds = %353, %25
  %27 = load i32* %s, align 4
  %28 = icmp slt i32 %27, 3
  br i1 %28, label %29, label %356

; <label>:29                                      ; preds = %26
  %30 = load i16* %data, align 2
  %31 = zext i16 %30 to i32
  %32 = load i32* %nbits, align 4
  %33 = shl i32 %31, %32
  %34 = load i32* %nbits, align 4
  %35 = call i32 @getbits(i32 %34)
  %36 = or i32 %33, %35
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %data, align 2
  %38 = load i32* %carry, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %52

; <label>:40                                      ; preds = %29
  %41 = load i32* %carry, align 4
  %42 = add nsw i32 %41, 1
  %43 = load i32* %nbits, align 4
  %44 = add nsw i32 %43, %42
  store i32 %44, i32* %nbits, align 4
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %40
  %47 = load i32* %nbits, align 4
  %48 = sub nsw i32 %47, 1
  br label %50

; <label>:49                                      ; preds = %40
  br label %50

; <label>:50                                      ; preds = %49, %46
  %51 = phi i32 [ %48, %46 ], [ 0, %49 ]
  store i32 %51, i32* %carry, align 4
  br label %52

; <label>:52                                      ; preds = %50, %29
  br label %53

; <label>:53                                      ; preds = %65, %52
  %54 = load i32* %nbits, align 4
  %55 = add nsw i32 %54, -1
  store i32 %55, i32* %nbits, align 4
  %56 = icmp sge i32 %55, 0
  br i1 %56, label %57, label %66

; <label>:57                                      ; preds = %53
  %58 = load i16* %data, align 2
  %59 = zext i16 %58 to i32
  %60 = load i32* %nbits, align 4
  %61 = ashr i32 %59, %60
  %62 = and i32 %61, 255
  %63 = icmp eq i32 %62, 255
  br i1 %63, label %64, label %65

; <label>:64                                      ; preds = %57
  br label %66

; <label>:65                                      ; preds = %57
  br label %53

; <label>:66                                      ; preds = %64, %53
  %67 = load i32* %nbits, align 4
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %93

; <label>:69                                      ; preds = %66
  %70 = load i16* %data, align 2
  %71 = zext i16 %70 to i32
  %72 = load i32* %nbits, align 4
  %73 = sub nsw i32 %72, 1
  %74 = shl i32 1, %73
  %75 = sub nsw i32 %74, 1
  %76 = and i32 %71, %75
  %77 = shl i32 %76, 1
  %78 = load i16* %data, align 2
  %79 = zext i16 %78 to i32
  %80 = load i16* %data, align 2
  %81 = zext i16 %80 to i32
  %82 = load i32* %nbits, align 4
  %83 = sub nsw i32 %82, 1
  %84 = shl i32 1, %83
  %85 = and i32 %81, %84
  %86 = shl i32 %85, 1
  %87 = add nsw i32 %79, %86
  %88 = load i32* %nbits, align 4
  %89 = shl i32 -1, %88
  %90 = and i32 %87, %89
  %91 = or i32 %77, %90
  %92 = trunc i32 %91 to i16
  store i16 %92, i16* %data, align 2
  br label %93

; <label>:93                                      ; preds = %69, %66
  %94 = load i32* %nbits, align 4
  %95 = icmp sge i32 %94, 0
  br i1 %95, label %96, label %104

; <label>:96                                      ; preds = %93
  %97 = call i32 @getbits(i32 1)
  %98 = load i16* %data, align 2
  %99 = zext i16 %98 to i32
  %100 = add i32 %99, %97
  %101 = trunc i32 %100 to i16
  store i16 %101, i16* %data, align 2
  %102 = load i32* %nbits, align 4
  %103 = sub nsw i32 %102, 8
  store i32 %103, i32* %carry, align 4
  br label %104

; <label>:104                                     ; preds = %96, %93
  %105 = load i16* %data, align 2
  %106 = zext i16 %105 to i32
  %107 = load i16* %range, align 2
  %108 = zext i16 %107 to i32
  %109 = sub nsw i32 %106, %108
  %110 = add nsw i32 %109, 1
  %111 = and i32 %110, 65535
  %112 = shl i32 %111, 2
  %113 = sub nsw i32 %112, 1
  %114 = load i32* %high, align 4
  %115 = ashr i32 %114, 4
  %116 = sdiv i32 %113, %115
  store i32 %116, i32* %count, align 4
  store i32 0, i32* %bin, align 4
  br label %117

; <label>:117                                     ; preds = %130, %104
  %118 = load i32* %bin, align 4
  %119 = add nsw i32 %118, 5
  %120 = sext i32 %119 to i64
  %121 = load i32* %s, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %122
  %124 = getelementptr inbounds [13 x i8]* %123, i32 0, i64 %120
  %125 = load i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = load i32* %count, align 4
  %128 = icmp sgt i32 %126, %127
  br i1 %128, label %129, label %133

; <label>:129                                     ; preds = %117
  br label %130

; <label>:130                                     ; preds = %129
  %131 = load i32* %bin, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %bin, align 4
  br label %117

; <label>:133                                     ; preds = %117
  %134 = load i32* %bin, align 4
  %135 = add nsw i32 %134, 5
  %136 = sext i32 %135 to i64
  %137 = load i32* %s, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %138
  %140 = getelementptr inbounds [13 x i8]* %139, i32 0, i64 %136
  %141 = load i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = load i32* %high, align 4
  %144 = ashr i32 %143, 4
  %145 = mul nsw i32 %142, %144
  %146 = ashr i32 %145, 2
  store i32 %146, i32* %low, align 4
  %147 = load i32* %bin, align 4
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %163

; <label>:149                                     ; preds = %133
  %150 = load i32* %bin, align 4
  %151 = add nsw i32 %150, 4
  %152 = sext i32 %151 to i64
  %153 = load i32* %s, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %154
  %156 = getelementptr inbounds [13 x i8]* %155, i32 0, i64 %152
  %157 = load i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = load i32* %high, align 4
  %160 = ashr i32 %159, 4
  %161 = mul nsw i32 %158, %160
  %162 = ashr i32 %161, 2
  store i32 %162, i32* %high, align 4
  br label %163

; <label>:163                                     ; preds = %149, %133
  %164 = load i32* %low, align 4
  %165 = load i32* %high, align 4
  %166 = sub nsw i32 %165, %164
  store i32 %166, i32* %high, align 4
  store i32 0, i32* %nbits, align 4
  br label %167

; <label>:167                                     ; preds = %173, %163
  %168 = load i32* %high, align 4
  %169 = load i32* %nbits, align 4
  %170 = shl i32 %168, %169
  %171 = icmp slt i32 %170, 128
  br i1 %171, label %172, label %176

; <label>:172                                     ; preds = %167
  br label %173

; <label>:173                                     ; preds = %172
  %174 = load i32* %nbits, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %nbits, align 4
  br label %167

; <label>:176                                     ; preds = %167
  %177 = load i16* %range, align 2
  %178 = zext i16 %177 to i32
  %179 = load i32* %low, align 4
  %180 = add nsw i32 %178, %179
  %181 = load i32* %nbits, align 4
  %182 = shl i32 %180, %181
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %range, align 2
  %184 = load i32* %nbits, align 4
  %185 = load i32* %high, align 4
  %186 = shl i32 %185, %184
  store i32 %186, i32* %high, align 4
  %187 = load i32* %s, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %188
  %190 = getelementptr inbounds [13 x i8]* %189, i32 0, i64 1
  %191 = load i8* %190, align 1
  %192 = zext i8 %191 to i32
  store i32 %192, i32* %next, align 4
  %193 = load i32* %s, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %194
  %196 = getelementptr inbounds [13 x i8]* %195, i32 0, i64 2
  %197 = load i8* %196, align 1
  %198 = add i8 %197, 1
  store i8 %198, i8* %196, align 1
  %199 = zext i8 %198 to i32
  %200 = load i32* %s, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %201
  %203 = getelementptr inbounds [13 x i8]* %202, i32 0, i64 3
  %204 = load i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = icmp sgt i32 %199, %205
  br i1 %206, label %207, label %246

; <label>:207                                     ; preds = %176
  %208 = load i32* %next, align 4
  %209 = add nsw i32 %208, 1
  %210 = load i32* %s, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %211
  %213 = getelementptr inbounds [13 x i8]* %212, i32 0, i64 0
  %214 = load i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = and i32 %209, %215
  store i32 %216, i32* %next, align 4
  %217 = load i32* %next, align 4
  %218 = add nsw i32 %217, 4
  %219 = sext i32 %218 to i64
  %220 = load i32* %s, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %221
  %223 = getelementptr inbounds [13 x i8]* %222, i32 0, i64 %219
  %224 = load i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = load i32* %next, align 4
  %227 = add nsw i32 %226, 5
  %228 = sext i32 %227 to i64
  %229 = load i32* %s, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %230
  %232 = getelementptr inbounds [13 x i8]* %231, i32 0, i64 %228
  %233 = load i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = sub nsw i32 %225, %234
  %236 = ashr i32 %235, 2
  %237 = trunc i32 %236 to i8
  %238 = load i32* %s, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %239
  %241 = getelementptr inbounds [13 x i8]* %240, i32 0, i64 3
  store i8 %237, i8* %241, align 1
  %242 = load i32* %s, align 4
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %243
  %245 = getelementptr inbounds [13 x i8]* %244, i32 0, i64 2
  store i8 1, i8* %245, align 1
  br label %246

; <label>:246                                     ; preds = %207, %176
  %247 = load i32* %s, align 4
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %248
  %250 = getelementptr inbounds [13 x i8]* %249, i32 0, i64 1
  %251 = load i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = add nsw i32 %252, 4
  %254 = sext i32 %253 to i64
  %255 = load i32* %s, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %256
  %258 = getelementptr inbounds [13 x i8]* %257, i32 0, i64 %254
  %259 = load i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = load i32* %s, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %262
  %264 = getelementptr inbounds [13 x i8]* %263, i32 0, i64 1
  %265 = load i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = add nsw i32 %266, 5
  %268 = sext i32 %267 to i64
  %269 = load i32* %s, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %270
  %272 = getelementptr inbounds [13 x i8]* %271, i32 0, i64 %268
  %273 = load i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = sub nsw i32 %260, %274
  %276 = icmp sgt i32 %275, 1
  br i1 %276, label %277, label %342

; <label>:277                                     ; preds = %246
  %278 = load i32* %bin, align 4
  %279 = load i32* %s, align 4
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %280
  %282 = getelementptr inbounds [13 x i8]* %281, i32 0, i64 1
  %283 = load i8* %282, align 1
  %284 = zext i8 %283 to i32
  %285 = icmp slt i32 %278, %284
  br i1 %285, label %286, label %311

; <label>:286                                     ; preds = %277
  %287 = load i32* %bin, align 4
  store i32 %287, i32* %i, align 4
  br label %288

; <label>:288                                     ; preds = %307, %286
  %289 = load i32* %i, align 4
  %290 = load i32* %s, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %291
  %293 = getelementptr inbounds [13 x i8]* %292, i32 0, i64 1
  %294 = load i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = icmp slt i32 %289, %295
  br i1 %296, label %297, label %310

; <label>:297                                     ; preds = %288
  %298 = load i32* %i, align 4
  %299 = add nsw i32 %298, 5
  %300 = sext i32 %299 to i64
  %301 = load i32* %s, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %302
  %304 = getelementptr inbounds [13 x i8]* %303, i32 0, i64 %300
  %305 = load i8* %304, align 1
  %306 = add i8 %305, -1
  store i8 %306, i8* %304, align 1
  br label %307

; <label>:307                                     ; preds = %297
  %308 = load i32* %i, align 4
  %309 = add nsw i32 %308, 1
  store i32 %309, i32* %i, align 4
  br label %288

; <label>:310                                     ; preds = %288
  br label %341

; <label>:311                                     ; preds = %277
  %312 = load i32* %next, align 4
  %313 = load i32* %bin, align 4
  %314 = icmp sle i32 %312, %313
  br i1 %314, label %315, label %340

; <label>:315                                     ; preds = %311
  %316 = load i32* %s, align 4
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %317
  %319 = getelementptr inbounds [13 x i8]* %318, i32 0, i64 1
  %320 = load i8* %319, align 1
  %321 = zext i8 %320 to i32
  store i32 %321, i32* %i, align 4
  br label %322

; <label>:322                                     ; preds = %336, %315
  %323 = load i32* %i, align 4
  %324 = load i32* %bin, align 4
  %325 = icmp slt i32 %323, %324
  br i1 %325, label %326, label %339

; <label>:326                                     ; preds = %322
  %327 = load i32* %i, align 4
  %328 = add nsw i32 %327, 5
  %329 = sext i32 %328 to i64
  %330 = load i32* %s, align 4
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %331
  %333 = getelementptr inbounds [13 x i8]* %332, i32 0, i64 %329
  %334 = load i8* %333, align 1
  %335 = add i8 %334, 1
  store i8 %335, i8* %333, align 1
  br label %336

; <label>:336                                     ; preds = %326
  %337 = load i32* %i, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %i, align 4
  br label %322

; <label>:339                                     ; preds = %322
  br label %340

; <label>:340                                     ; preds = %339, %311
  br label %341

; <label>:341                                     ; preds = %340, %310
  br label %342

; <label>:342                                     ; preds = %341, %246
  %343 = load i32* %next, align 4
  %344 = trunc i32 %343 to i8
  %345 = load i32* %s, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds [3 x [13 x i8]]* %hist, i32 0, i64 %346
  %348 = getelementptr inbounds [13 x i8]* %347, i32 0, i64 1
  store i8 %344, i8* %348, align 1
  %349 = load i32* %bin, align 4
  %350 = load i32* %s, align 4
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 %351
  store i32 %349, i32* %352, align 4
  br label %353

; <label>:353                                     ; preds = %342
  %354 = load i32* %s, align 4
  %355 = add nsw i32 %354, 1
  store i32 %355, i32* %s, align 4
  br label %26

; <label>:356                                     ; preds = %26
  %357 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 2
  %358 = load i32* %357, align 4
  %359 = shl i32 %358, 5
  %360 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 1
  %361 = load i32* %360, align 4
  %362 = shl i32 %361, 2
  %363 = or i32 %359, %362
  %364 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 0
  %365 = load i32* %364, align 4
  %366 = and i32 %365, 3
  %367 = or i32 %363, %366
  %368 = trunc i32 %367 to i8
  store i8 %368, i8* %diff, align 1
  %369 = getelementptr inbounds [3 x i32]* %sym, i32 0, i64 0
  %370 = load i32* %369, align 4
  %371 = and i32 %370, 4
  %372 = icmp ne i32 %371, 0
  br i1 %372, label %373, label %385

; <label>:373                                     ; preds = %356
  %374 = load i8* %diff, align 1
  %375 = zext i8 %374 to i32
  %376 = icmp ne i32 %375, 0
  br i1 %376, label %377, label %381

; <label>:377                                     ; preds = %373
  %378 = load i8* %diff, align 1
  %379 = zext i8 %378 to i32
  %380 = sub nsw i32 0, %379
  br label %382

; <label>:381                                     ; preds = %373
  br label %382

; <label>:382                                     ; preds = %381, %377
  %383 = phi i32 [ %380, %377 ], [ 128, %381 ]
  %384 = trunc i32 %383 to i8
  store i8 %384, i8* %diff, align 1
  br label %385

; <label>:385                                     ; preds = %382, %356
  %386 = load %struct._IO_FILE** @ifp, align 8
  %387 = call i64 @ftell(%struct._IO_FILE* %386)
  %388 = add nsw i64 %387, 12
  %389 = load [2 x i32]** %1, align 8
  %390 = getelementptr inbounds [2 x i32]* %389, i64 1
  %391 = getelementptr inbounds [2 x i32]* %390, i32 0, i64 1
  %392 = load i32* %391, align 4
  %393 = zext i32 %392 to i64
  %394 = icmp sge i64 %388, %393
  br i1 %394, label %395, label %396

; <label>:395                                     ; preds = %385
  store i8 0, i8* %diff, align 1
  br label %396

; <label>:396                                     ; preds = %395, %385
  %397 = load i8* %diff, align 1
  %398 = zext i8 %397 to i32
  %399 = load i32* %pix, align 4
  %400 = and i32 %399, 1
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds [2 x i8]* %pred, i32 0, i64 %401
  %403 = load i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = add nsw i32 %404, %398
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %402, align 1
  %407 = load i32* %pix, align 4
  %408 = load i16* @raw_width, align 2
  %409 = zext i16 %408 to i32
  %410 = udiv i32 %407, %409
  %411 = load i16* @top_margin, align 2
  %412 = zext i16 %411 to i32
  %413 = sub i32 %410, %412
  store i32 %413, i32* %row, align 4
  %414 = load i32* %pix, align 4
  %415 = load i16* @raw_width, align 2
  %416 = zext i16 %415 to i32
  %417 = urem i32 %414, %416
  %418 = load i16* @left_margin, align 2
  %419 = zext i16 %418 to i32
  %420 = sub i32 %417, %419
  store i32 %420, i32* %col, align 4
  %421 = load i32* %row, align 4
  %422 = load i16* @height, align 2
  %423 = zext i16 %422 to i32
  %424 = icmp ult i32 %421, %423
  br i1 %424, label %425, label %464

; <label>:425                                     ; preds = %396
  %426 = load i32* %col, align 4
  %427 = load i16* @width, align 2
  %428 = zext i16 %427 to i32
  %429 = icmp ult i32 %426, %428
  br i1 %429, label %430, label %464

; <label>:430                                     ; preds = %425
  %431 = load i32* %pix, align 4
  %432 = and i32 %431, 1
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds [2 x i8]* %pred, i32 0, i64 %433
  %435 = load i8* %434, align 1
  %436 = zext i8 %435 to i16
  %437 = load i32* @filters, align 4
  %438 = load i32* %row, align 4
  %439 = shl i32 %438, 1
  %440 = and i32 %439, 14
  %441 = load i32* %col, align 4
  %442 = and i32 %441, 1
  %443 = add i32 %440, %442
  %444 = shl i32 %443, 1
  %445 = lshr i32 %437, %444
  %446 = and i32 %445, 3
  %447 = zext i32 %446 to i64
  %448 = load i32* %row, align 4
  %449 = load i16* @shrink, align 2
  %450 = zext i16 %449 to i32
  %451 = lshr i32 %448, %450
  %452 = load i16* @iwidth, align 2
  %453 = zext i16 %452 to i32
  %454 = mul i32 %451, %453
  %455 = load i32* %col, align 4
  %456 = load i16* @shrink, align 2
  %457 = zext i16 %456 to i32
  %458 = lshr i32 %455, %457
  %459 = add i32 %454, %458
  %460 = zext i32 %459 to i64
  %461 = load [4 x i16]** @image, align 8
  %462 = getelementptr inbounds [4 x i16]* %461, i64 %460
  %463 = getelementptr inbounds [4 x i16]* %462, i32 0, i64 %447
  store i16 %436, i16* %463, align 2
  br label %464

; <label>:464                                     ; preds = %430, %425, %396
  %465 = load i32* %pix, align 4
  %466 = and i32 %465, 1
  %467 = icmp ne i32 %466, 0
  br i1 %467, label %481, label %468

; <label>:468                                     ; preds = %464
  %469 = load i32* %2, align 4
  %470 = load i32* %row, align 4
  %471 = load i16* @raw_height, align 2
  %472 = zext i16 %471 to i32
  %473 = sub i32 %470, %472
  %474 = and i32 %473, 7
  %475 = ashr i32 %469, %474
  %476 = and i32 %475, 1
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %478, label %481

; <label>:478                                     ; preds = %468
  %479 = load i32* %pix, align 4
  %480 = add i32 %479, 2
  store i32 %480, i32* %pix, align 4
  br label %481

; <label>:481                                     ; preds = %478, %468, %464
  br label %482

; <label>:482                                     ; preds = %481
  %483 = load i32* %pix, align 4
  %484 = add i32 %483, 1
  store i32 %484, i32* %pix, align 4
  br label %18

; <label>:485                                     ; preds = %18
  store i32 255, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @smal_v6_load_raw() #0 {
  %seg = alloca [2 x [2 x i32]], align 16
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 16, i32 0)
  %3 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 0
  %4 = getelementptr inbounds [2 x i32]* %3, i32 0, i64 0
  store i32 0, i32* %4, align 4
  %5 = call zeroext i16 @get2()
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 0
  %8 = getelementptr inbounds [2 x i32]* %7, i32 0, i64 1
  store i32 %6, i32* %8, align 4
  %9 = load i16* @raw_width, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16* @raw_height, align 2
  %12 = zext i16 %11 to i32
  %13 = mul nsw i32 %10, %12
  %14 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 1
  %15 = getelementptr inbounds [2 x i32]* %14, i32 0, i64 0
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i64 1
  %17 = getelementptr inbounds [2 x i32]* %16, i32 0, i64 1
  store i32 2147483647, i32* %17, align 4
  %18 = getelementptr inbounds [2 x [2 x i32]]* %seg, i32 0, i32 0
  call void @smal_decode_segment([2 x i32]* %18, i32 0)
  store i32 0, i32* @use_gamma, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @median4(i32* %p) #0 {
  %1 = alloca i32*, align 8
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %sum = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %p, i32** %1, align 8
  %2 = load i32** %1, align 8
  %3 = getelementptr inbounds i32* %2, i64 0
  %4 = load i32* %3, align 4
  store i32 %4, i32* %sum, align 4
  store i32 %4, i32* %max, align 4
  store i32 %4, i32* %min, align 4
  store i32 1, i32* %i, align 4
  br label %5

; <label>:5                                       ; preds = %44, %0
  %6 = load i32* %i, align 4
  %7 = icmp slt i32 %6, 4
  br i1 %7, label %8, label %47

; <label>:8                                       ; preds = %5
  %9 = load i32* %i, align 4
  %10 = sext i32 %9 to i64
  %11 = load i32** %1, align 8
  %12 = getelementptr inbounds i32* %11, i64 %10
  %13 = load i32* %12, align 4
  %14 = load i32* %sum, align 4
  %15 = add nsw i32 %14, %13
  store i32 %15, i32* %sum, align 4
  %16 = load i32* %min, align 4
  %17 = load i32* %i, align 4
  %18 = sext i32 %17 to i64
  %19 = load i32** %1, align 8
  %20 = getelementptr inbounds i32* %19, i64 %18
  %21 = load i32* %20, align 4
  %22 = icmp sgt i32 %16, %21
  br i1 %22, label %23, label %29

; <label>:23                                      ; preds = %8
  %24 = load i32* %i, align 4
  %25 = sext i32 %24 to i64
  %26 = load i32** %1, align 8
  %27 = getelementptr inbounds i32* %26, i64 %25
  %28 = load i32* %27, align 4
  store i32 %28, i32* %min, align 4
  br label %29

; <label>:29                                      ; preds = %23, %8
  %30 = load i32* %max, align 4
  %31 = load i32* %i, align 4
  %32 = sext i32 %31 to i64
  %33 = load i32** %1, align 8
  %34 = getelementptr inbounds i32* %33, i64 %32
  %35 = load i32* %34, align 4
  %36 = icmp slt i32 %30, %35
  br i1 %36, label %37, label %43

; <label>:37                                      ; preds = %29
  %38 = load i32* %i, align 4
  %39 = sext i32 %38 to i64
  %40 = load i32** %1, align 8
  %41 = getelementptr inbounds i32* %40, i64 %39
  %42 = load i32* %41, align 4
  store i32 %42, i32* %max, align 4
  br label %43

; <label>:43                                      ; preds = %37, %29
  br label %44

; <label>:44                                      ; preds = %43
  %45 = load i32* %i, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %i, align 4
  br label %5

; <label>:47                                      ; preds = %5
  %48 = load i32* %sum, align 4
  %49 = load i32* %min, align 4
  %50 = sub nsw i32 %48, %49
  %51 = load i32* %max, align 4
  %52 = sub nsw i32 %50, %51
  %53 = ashr i32 %52, 1
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define void @fill_holes(i32 %holes) #0 {
  %1 = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %val = alloca [4 x i32], align 16
  store i32 %holes, i32* %1, align 4
  store i32 2, i32* %row, align 4
  br label %2

; <label>:2                                       ; preds = %482, %0
  %3 = load i32* %row, align 4
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = sub nsw i32 %5, 2
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %485

; <label>:8                                       ; preds = %2
  %9 = load i32* %1, align 4
  %10 = load i32* %row, align 4
  %11 = load i16* @raw_height, align 2
  %12 = zext i16 %11 to i32
  %13 = sub nsw i32 %10, %12
  %14 = and i32 %13, 7
  %15 = ashr i32 %9, %14
  %16 = and i32 %15, 1
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %19, label %18

; <label>:18                                      ; preds = %8
  br label %482

; <label>:19                                      ; preds = %8
  store i32 1, i32* %col, align 4
  br label %20

; <label>:20                                      ; preds = %193, %19
  %21 = load i32* %col, align 4
  %22 = load i16* @width, align 2
  %23 = zext i16 %22 to i32
  %24 = sub nsw i32 %23, 1
  %25 = icmp slt i32 %21, %24
  br i1 %25, label %26, label %196

; <label>:26                                      ; preds = %20
  %27 = load i32* @filters, align 4
  %28 = load i32* %row, align 4
  %29 = sub nsw i32 %28, 1
  %30 = shl i32 %29, 1
  %31 = and i32 %30, 14
  %32 = load i32* %col, align 4
  %33 = sub nsw i32 %32, 1
  %34 = and i32 %33, 1
  %35 = add nsw i32 %31, %34
  %36 = shl i32 %35, 1
  %37 = lshr i32 %27, %36
  %38 = and i32 %37, 3
  %39 = zext i32 %38 to i64
  %40 = load i32* %row, align 4
  %41 = sub nsw i32 %40, 1
  %42 = load i16* @shrink, align 2
  %43 = zext i16 %42 to i32
  %44 = ashr i32 %41, %43
  %45 = load i16* @iwidth, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nsw i32 %44, %46
  %48 = load i32* %col, align 4
  %49 = sub nsw i32 %48, 1
  %50 = load i16* @shrink, align 2
  %51 = zext i16 %50 to i32
  %52 = ashr i32 %49, %51
  %53 = add nsw i32 %47, %52
  %54 = sext i32 %53 to i64
  %55 = load [4 x i16]** @image, align 8
  %56 = getelementptr inbounds [4 x i16]* %55, i64 %54
  %57 = getelementptr inbounds [4 x i16]* %56, i32 0, i64 %39
  %58 = load i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 0
  store i32 %59, i32* %60, align 4
  %61 = load i32* @filters, align 4
  %62 = load i32* %row, align 4
  %63 = sub nsw i32 %62, 1
  %64 = shl i32 %63, 1
  %65 = and i32 %64, 14
  %66 = load i32* %col, align 4
  %67 = add nsw i32 %66, 1
  %68 = and i32 %67, 1
  %69 = add nsw i32 %65, %68
  %70 = shl i32 %69, 1
  %71 = lshr i32 %61, %70
  %72 = and i32 %71, 3
  %73 = zext i32 %72 to i64
  %74 = load i32* %row, align 4
  %75 = sub nsw i32 %74, 1
  %76 = load i16* @shrink, align 2
  %77 = zext i16 %76 to i32
  %78 = ashr i32 %75, %77
  %79 = load i16* @iwidth, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nsw i32 %78, %80
  %82 = load i32* %col, align 4
  %83 = add nsw i32 %82, 1
  %84 = load i16* @shrink, align 2
  %85 = zext i16 %84 to i32
  %86 = ashr i32 %83, %85
  %87 = add nsw i32 %81, %86
  %88 = sext i32 %87 to i64
  %89 = load [4 x i16]** @image, align 8
  %90 = getelementptr inbounds [4 x i16]* %89, i64 %88
  %91 = getelementptr inbounds [4 x i16]* %90, i32 0, i64 %73
  %92 = load i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 1
  store i32 %93, i32* %94, align 4
  %95 = load i32* @filters, align 4
  %96 = load i32* %row, align 4
  %97 = add nsw i32 %96, 1
  %98 = shl i32 %97, 1
  %99 = and i32 %98, 14
  %100 = load i32* %col, align 4
  %101 = sub nsw i32 %100, 1
  %102 = and i32 %101, 1
  %103 = add nsw i32 %99, %102
  %104 = shl i32 %103, 1
  %105 = lshr i32 %95, %104
  %106 = and i32 %105, 3
  %107 = zext i32 %106 to i64
  %108 = load i32* %row, align 4
  %109 = add nsw i32 %108, 1
  %110 = load i16* @shrink, align 2
  %111 = zext i16 %110 to i32
  %112 = ashr i32 %109, %111
  %113 = load i16* @iwidth, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nsw i32 %112, %114
  %116 = load i32* %col, align 4
  %117 = sub nsw i32 %116, 1
  %118 = load i16* @shrink, align 2
  %119 = zext i16 %118 to i32
  %120 = ashr i32 %117, %119
  %121 = add nsw i32 %115, %120
  %122 = sext i32 %121 to i64
  %123 = load [4 x i16]** @image, align 8
  %124 = getelementptr inbounds [4 x i16]* %123, i64 %122
  %125 = getelementptr inbounds [4 x i16]* %124, i32 0, i64 %107
  %126 = load i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 2
  store i32 %127, i32* %128, align 4
  %129 = load i32* @filters, align 4
  %130 = load i32* %row, align 4
  %131 = add nsw i32 %130, 1
  %132 = shl i32 %131, 1
  %133 = and i32 %132, 14
  %134 = load i32* %col, align 4
  %135 = add nsw i32 %134, 1
  %136 = and i32 %135, 1
  %137 = add nsw i32 %133, %136
  %138 = shl i32 %137, 1
  %139 = lshr i32 %129, %138
  %140 = and i32 %139, 3
  %141 = zext i32 %140 to i64
  %142 = load i32* %row, align 4
  %143 = add nsw i32 %142, 1
  %144 = load i16* @shrink, align 2
  %145 = zext i16 %144 to i32
  %146 = ashr i32 %143, %145
  %147 = load i16* @iwidth, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nsw i32 %146, %148
  %150 = load i32* %col, align 4
  %151 = add nsw i32 %150, 1
  %152 = load i16* @shrink, align 2
  %153 = zext i16 %152 to i32
  %154 = ashr i32 %151, %153
  %155 = add nsw i32 %149, %154
  %156 = sext i32 %155 to i64
  %157 = load [4 x i16]** @image, align 8
  %158 = getelementptr inbounds [4 x i16]* %157, i64 %156
  %159 = getelementptr inbounds [4 x i16]* %158, i32 0, i64 %141
  %160 = load i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 3
  store i32 %161, i32* %162, align 4
  %163 = getelementptr inbounds [4 x i32]* %val, i32 0, i32 0
  %164 = call i32 @median4(i32* %163)
  %165 = trunc i32 %164 to i16
  %166 = load i32* @filters, align 4
  %167 = load i32* %row, align 4
  %168 = shl i32 %167, 1
  %169 = and i32 %168, 14
  %170 = load i32* %col, align 4
  %171 = and i32 %170, 1
  %172 = add nsw i32 %169, %171
  %173 = shl i32 %172, 1
  %174 = lshr i32 %166, %173
  %175 = and i32 %174, 3
  %176 = zext i32 %175 to i64
  %177 = load i32* %row, align 4
  %178 = load i16* @shrink, align 2
  %179 = zext i16 %178 to i32
  %180 = ashr i32 %177, %179
  %181 = load i16* @iwidth, align 2
  %182 = zext i16 %181 to i32
  %183 = mul nsw i32 %180, %182
  %184 = load i32* %col, align 4
  %185 = load i16* @shrink, align 2
  %186 = zext i16 %185 to i32
  %187 = ashr i32 %184, %186
  %188 = add nsw i32 %183, %187
  %189 = sext i32 %188 to i64
  %190 = load [4 x i16]** @image, align 8
  %191 = getelementptr inbounds [4 x i16]* %190, i64 %189
  %192 = getelementptr inbounds [4 x i16]* %191, i32 0, i64 %176
  store i16 %165, i16* %192, align 2
  br label %193

; <label>:193                                     ; preds = %26
  %194 = load i32* %col, align 4
  %195 = add nsw i32 %194, 4
  store i32 %195, i32* %col, align 4
  br label %20

; <label>:196                                     ; preds = %20
  store i32 2, i32* %col, align 4
  br label %197

; <label>:197                                     ; preds = %478, %196
  %198 = load i32* %col, align 4
  %199 = load i16* @width, align 2
  %200 = zext i16 %199 to i32
  %201 = sub nsw i32 %200, 2
  %202 = icmp slt i32 %198, %201
  br i1 %202, label %203, label %481

; <label>:203                                     ; preds = %197
  %204 = load i32* %1, align 4
  %205 = load i32* %row, align 4
  %206 = sub nsw i32 %205, 2
  %207 = load i16* @raw_height, align 2
  %208 = zext i16 %207 to i32
  %209 = sub nsw i32 %206, %208
  %210 = and i32 %209, 7
  %211 = ashr i32 %204, %210
  %212 = and i32 %211, 1
  %213 = icmp ne i32 %212, 0
  br i1 %213, label %225, label %214

; <label>:214                                     ; preds = %203
  %215 = load i32* %1, align 4
  %216 = load i32* %row, align 4
  %217 = add nsw i32 %216, 2
  %218 = load i16* @raw_height, align 2
  %219 = zext i16 %218 to i32
  %220 = sub nsw i32 %217, %219
  %221 = and i32 %220, 7
  %222 = ashr i32 %215, %221
  %223 = and i32 %222, 1
  %224 = icmp ne i32 %223, 0
  br i1 %224, label %225, label %318

; <label>:225                                     ; preds = %214, %203
  %226 = load i32* @filters, align 4
  %227 = load i32* %row, align 4
  %228 = shl i32 %227, 1
  %229 = and i32 %228, 14
  %230 = load i32* %col, align 4
  %231 = sub nsw i32 %230, 2
  %232 = and i32 %231, 1
  %233 = add nsw i32 %229, %232
  %234 = shl i32 %233, 1
  %235 = lshr i32 %226, %234
  %236 = and i32 %235, 3
  %237 = zext i32 %236 to i64
  %238 = load i32* %row, align 4
  %239 = load i16* @shrink, align 2
  %240 = zext i16 %239 to i32
  %241 = ashr i32 %238, %240
  %242 = load i16* @iwidth, align 2
  %243 = zext i16 %242 to i32
  %244 = mul nsw i32 %241, %243
  %245 = load i32* %col, align 4
  %246 = sub nsw i32 %245, 2
  %247 = load i16* @shrink, align 2
  %248 = zext i16 %247 to i32
  %249 = ashr i32 %246, %248
  %250 = add nsw i32 %244, %249
  %251 = sext i32 %250 to i64
  %252 = load [4 x i16]** @image, align 8
  %253 = getelementptr inbounds [4 x i16]* %252, i64 %251
  %254 = getelementptr inbounds [4 x i16]* %253, i32 0, i64 %237
  %255 = load i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = load i32* @filters, align 4
  %258 = load i32* %row, align 4
  %259 = shl i32 %258, 1
  %260 = and i32 %259, 14
  %261 = load i32* %col, align 4
  %262 = add nsw i32 %261, 2
  %263 = and i32 %262, 1
  %264 = add nsw i32 %260, %263
  %265 = shl i32 %264, 1
  %266 = lshr i32 %257, %265
  %267 = and i32 %266, 3
  %268 = zext i32 %267 to i64
  %269 = load i32* %row, align 4
  %270 = load i16* @shrink, align 2
  %271 = zext i16 %270 to i32
  %272 = ashr i32 %269, %271
  %273 = load i16* @iwidth, align 2
  %274 = zext i16 %273 to i32
  %275 = mul nsw i32 %272, %274
  %276 = load i32* %col, align 4
  %277 = add nsw i32 %276, 2
  %278 = load i16* @shrink, align 2
  %279 = zext i16 %278 to i32
  %280 = ashr i32 %277, %279
  %281 = add nsw i32 %275, %280
  %282 = sext i32 %281 to i64
  %283 = load [4 x i16]** @image, align 8
  %284 = getelementptr inbounds [4 x i16]* %283, i64 %282
  %285 = getelementptr inbounds [4 x i16]* %284, i32 0, i64 %268
  %286 = load i16* %285, align 2
  %287 = zext i16 %286 to i32
  %288 = add nsw i32 %256, %287
  %289 = ashr i32 %288, 1
  %290 = trunc i32 %289 to i16
  %291 = load i32* @filters, align 4
  %292 = load i32* %row, align 4
  %293 = shl i32 %292, 1
  %294 = and i32 %293, 14
  %295 = load i32* %col, align 4
  %296 = and i32 %295, 1
  %297 = add nsw i32 %294, %296
  %298 = shl i32 %297, 1
  %299 = lshr i32 %291, %298
  %300 = and i32 %299, 3
  %301 = zext i32 %300 to i64
  %302 = load i32* %row, align 4
  %303 = load i16* @shrink, align 2
  %304 = zext i16 %303 to i32
  %305 = ashr i32 %302, %304
  %306 = load i16* @iwidth, align 2
  %307 = zext i16 %306 to i32
  %308 = mul nsw i32 %305, %307
  %309 = load i32* %col, align 4
  %310 = load i16* @shrink, align 2
  %311 = zext i16 %310 to i32
  %312 = ashr i32 %309, %311
  %313 = add nsw i32 %308, %312
  %314 = sext i32 %313 to i64
  %315 = load [4 x i16]** @image, align 8
  %316 = getelementptr inbounds [4 x i16]* %315, i64 %314
  %317 = getelementptr inbounds [4 x i16]* %316, i32 0, i64 %301
  store i16 %290, i16* %317, align 2
  br label %477

; <label>:318                                     ; preds = %214
  %319 = load i32* @filters, align 4
  %320 = load i32* %row, align 4
  %321 = shl i32 %320, 1
  %322 = and i32 %321, 14
  %323 = load i32* %col, align 4
  %324 = sub nsw i32 %323, 2
  %325 = and i32 %324, 1
  %326 = add nsw i32 %322, %325
  %327 = shl i32 %326, 1
  %328 = lshr i32 %319, %327
  %329 = and i32 %328, 3
  %330 = zext i32 %329 to i64
  %331 = load i32* %row, align 4
  %332 = load i16* @shrink, align 2
  %333 = zext i16 %332 to i32
  %334 = ashr i32 %331, %333
  %335 = load i16* @iwidth, align 2
  %336 = zext i16 %335 to i32
  %337 = mul nsw i32 %334, %336
  %338 = load i32* %col, align 4
  %339 = sub nsw i32 %338, 2
  %340 = load i16* @shrink, align 2
  %341 = zext i16 %340 to i32
  %342 = ashr i32 %339, %341
  %343 = add nsw i32 %337, %342
  %344 = sext i32 %343 to i64
  %345 = load [4 x i16]** @image, align 8
  %346 = getelementptr inbounds [4 x i16]* %345, i64 %344
  %347 = getelementptr inbounds [4 x i16]* %346, i32 0, i64 %330
  %348 = load i16* %347, align 2
  %349 = zext i16 %348 to i32
  %350 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 0
  store i32 %349, i32* %350, align 4
  %351 = load i32* @filters, align 4
  %352 = load i32* %row, align 4
  %353 = shl i32 %352, 1
  %354 = and i32 %353, 14
  %355 = load i32* %col, align 4
  %356 = add nsw i32 %355, 2
  %357 = and i32 %356, 1
  %358 = add nsw i32 %354, %357
  %359 = shl i32 %358, 1
  %360 = lshr i32 %351, %359
  %361 = and i32 %360, 3
  %362 = zext i32 %361 to i64
  %363 = load i32* %row, align 4
  %364 = load i16* @shrink, align 2
  %365 = zext i16 %364 to i32
  %366 = ashr i32 %363, %365
  %367 = load i16* @iwidth, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nsw i32 %366, %368
  %370 = load i32* %col, align 4
  %371 = add nsw i32 %370, 2
  %372 = load i16* @shrink, align 2
  %373 = zext i16 %372 to i32
  %374 = ashr i32 %371, %373
  %375 = add nsw i32 %369, %374
  %376 = sext i32 %375 to i64
  %377 = load [4 x i16]** @image, align 8
  %378 = getelementptr inbounds [4 x i16]* %377, i64 %376
  %379 = getelementptr inbounds [4 x i16]* %378, i32 0, i64 %362
  %380 = load i16* %379, align 2
  %381 = zext i16 %380 to i32
  %382 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 1
  store i32 %381, i32* %382, align 4
  %383 = load i32* @filters, align 4
  %384 = load i32* %row, align 4
  %385 = sub nsw i32 %384, 2
  %386 = shl i32 %385, 1
  %387 = and i32 %386, 14
  %388 = load i32* %col, align 4
  %389 = and i32 %388, 1
  %390 = add nsw i32 %387, %389
  %391 = shl i32 %390, 1
  %392 = lshr i32 %383, %391
  %393 = and i32 %392, 3
  %394 = zext i32 %393 to i64
  %395 = load i32* %row, align 4
  %396 = sub nsw i32 %395, 2
  %397 = load i16* @shrink, align 2
  %398 = zext i16 %397 to i32
  %399 = ashr i32 %396, %398
  %400 = load i16* @iwidth, align 2
  %401 = zext i16 %400 to i32
  %402 = mul nsw i32 %399, %401
  %403 = load i32* %col, align 4
  %404 = load i16* @shrink, align 2
  %405 = zext i16 %404 to i32
  %406 = ashr i32 %403, %405
  %407 = add nsw i32 %402, %406
  %408 = sext i32 %407 to i64
  %409 = load [4 x i16]** @image, align 8
  %410 = getelementptr inbounds [4 x i16]* %409, i64 %408
  %411 = getelementptr inbounds [4 x i16]* %410, i32 0, i64 %394
  %412 = load i16* %411, align 2
  %413 = zext i16 %412 to i32
  %414 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 2
  store i32 %413, i32* %414, align 4
  %415 = load i32* @filters, align 4
  %416 = load i32* %row, align 4
  %417 = add nsw i32 %416, 2
  %418 = shl i32 %417, 1
  %419 = and i32 %418, 14
  %420 = load i32* %col, align 4
  %421 = and i32 %420, 1
  %422 = add nsw i32 %419, %421
  %423 = shl i32 %422, 1
  %424 = lshr i32 %415, %423
  %425 = and i32 %424, 3
  %426 = zext i32 %425 to i64
  %427 = load i32* %row, align 4
  %428 = add nsw i32 %427, 2
  %429 = load i16* @shrink, align 2
  %430 = zext i16 %429 to i32
  %431 = ashr i32 %428, %430
  %432 = load i16* @iwidth, align 2
  %433 = zext i16 %432 to i32
  %434 = mul nsw i32 %431, %433
  %435 = load i32* %col, align 4
  %436 = load i16* @shrink, align 2
  %437 = zext i16 %436 to i32
  %438 = ashr i32 %435, %437
  %439 = add nsw i32 %434, %438
  %440 = sext i32 %439 to i64
  %441 = load [4 x i16]** @image, align 8
  %442 = getelementptr inbounds [4 x i16]* %441, i64 %440
  %443 = getelementptr inbounds [4 x i16]* %442, i32 0, i64 %426
  %444 = load i16* %443, align 2
  %445 = zext i16 %444 to i32
  %446 = getelementptr inbounds [4 x i32]* %val, i32 0, i64 3
  store i32 %445, i32* %446, align 4
  %447 = getelementptr inbounds [4 x i32]* %val, i32 0, i32 0
  %448 = call i32 @median4(i32* %447)
  %449 = trunc i32 %448 to i16
  %450 = load i32* @filters, align 4
  %451 = load i32* %row, align 4
  %452 = shl i32 %451, 1
  %453 = and i32 %452, 14
  %454 = load i32* %col, align 4
  %455 = and i32 %454, 1
  %456 = add nsw i32 %453, %455
  %457 = shl i32 %456, 1
  %458 = lshr i32 %450, %457
  %459 = and i32 %458, 3
  %460 = zext i32 %459 to i64
  %461 = load i32* %row, align 4
  %462 = load i16* @shrink, align 2
  %463 = zext i16 %462 to i32
  %464 = ashr i32 %461, %463
  %465 = load i16* @iwidth, align 2
  %466 = zext i16 %465 to i32
  %467 = mul nsw i32 %464, %466
  %468 = load i32* %col, align 4
  %469 = load i16* @shrink, align 2
  %470 = zext i16 %469 to i32
  %471 = ashr i32 %468, %470
  %472 = add nsw i32 %467, %471
  %473 = sext i32 %472 to i64
  %474 = load [4 x i16]** @image, align 8
  %475 = getelementptr inbounds [4 x i16]* %474, i64 %473
  %476 = getelementptr inbounds [4 x i16]* %475, i32 0, i64 %460
  store i16 %449, i16* %476, align 2
  br label %477

; <label>:477                                     ; preds = %318, %225
  br label %478

; <label>:478                                     ; preds = %477
  %479 = load i32* %col, align 4
  %480 = add nsw i32 %479, 4
  store i32 %480, i32* %col, align 4
  br label %197

; <label>:481                                     ; preds = %197
  br label %482

; <label>:482                                     ; preds = %481, %18
  %483 = load i32* %row, align 4
  %484 = add nsw i32 %483, 1
  store i32 %484, i32* %row, align 4
  br label %2

; <label>:485                                     ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define void @smal_v9_load_raw() #0 {
  %seg = alloca [256 x [2 x i32]], align 16
  %offset = alloca i32, align 4
  %nseg = alloca i32, align 4
  %holes = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 67, i32 0)
  %3 = call i32 @get4()
  store i32 %3, i32* %offset, align 4
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @getc_unlocked(%struct._IO_FILE* %4)
  store i32 %5, i32* %nseg, align 4
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = load i32* %offset, align 4
  %8 = zext i32 %7 to i64
  %9 = call i32 @fseek(%struct._IO_FILE* %6, i64 %8, i32 0)
  store i32 0, i32* %i, align 4
  br label %10

; <label>:10                                      ; preds = %29, %0
  %11 = load i32* %i, align 4
  %12 = load i32* %nseg, align 4
  %13 = mul i32 %12, 2
  %14 = icmp ult i32 %11, %13
  br i1 %14, label %15, label %32

; <label>:15                                      ; preds = %10
  %16 = call i32 @get4()
  %17 = zext i32 %16 to i64
  %18 = load i64* @data_offset, align 8
  %19 = load i32* %i, align 4
  %20 = and i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = mul nsw i64 %18, %21
  %23 = add nsw i64 %17, %22
  %24 = trunc i64 %23 to i32
  %25 = load i32* %i, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i64 0
  %28 = getelementptr inbounds [2 x i32]* %27, i32 0, i64 %26
  store i32 %24, i32* %28, align 4
  br label %29

; <label>:29                                      ; preds = %15
  %30 = load i32* %i, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %i, align 4
  br label %10

; <label>:32                                      ; preds = %10
  %33 = load %struct._IO_FILE** @ifp, align 8
  %34 = call i32 @fseek(%struct._IO_FILE* %33, i64 78, i32 0)
  %35 = load %struct._IO_FILE** @ifp, align 8
  %36 = call i32 @getc_unlocked(%struct._IO_FILE* %35)
  store i32 %36, i32* %holes, align 4
  %37 = load %struct._IO_FILE** @ifp, align 8
  %38 = call i32 @fseek(%struct._IO_FILE* %37, i64 88, i32 0)
  %39 = load i16* @raw_height, align 2
  %40 = zext i16 %39 to i32
  %41 = load i16* @raw_width, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nsw i32 %40, %42
  %44 = load i32* %nseg, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i64 %45
  %47 = getelementptr inbounds [2 x i32]* %46, i32 0, i64 0
  store i32 %43, i32* %47, align 4
  %48 = call i32 @get4()
  %49 = zext i32 %48 to i64
  %50 = load i64* @data_offset, align 8
  %51 = add nsw i64 %49, %50
  %52 = trunc i64 %51 to i32
  %53 = load i32* %nseg, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i64 %54
  %56 = getelementptr inbounds [2 x i32]* %55, i32 0, i64 1
  store i32 %52, i32* %56, align 4
  store i32 0, i32* %i, align 4
  br label %57

; <label>:57                                      ; preds = %67, %32
  %58 = load i32* %i, align 4
  %59 = load i32* %nseg, align 4
  %60 = icmp ult i32 %58, %59
  br i1 %60, label %61, label %70

; <label>:61                                      ; preds = %57
  %62 = getelementptr inbounds [256 x [2 x i32]]* %seg, i32 0, i32 0
  %63 = load i32* %i, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [2 x i32]* %62, i64 %64
  %66 = load i32* %holes, align 4
  call void @smal_decode_segment([2 x i32]* %65, i32 %66)
  br label %67

; <label>:67                                      ; preds = %61
  %68 = load i32* %i, align 4
  %69 = add i32 %68, 1
  store i32 %69, i32* %i, align 4
  br label %57

; <label>:70                                      ; preds = %57
  %71 = load i32* %holes, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %75

; <label>:73                                      ; preds = %70
  %74 = load i32* %holes, align 4
  call void @fill_holes(i32 %74)
  br label %75

; <label>:75                                      ; preds = %73, %70
  ret void
}

; Function Attrs: nounwind uwtable
define void @foveon_decoder(i32 %size, i32 %code) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %cur = alloca %struct.decode*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %size, i32* %1, align 4
  store i32 %code, i32* %2, align 4
  %3 = load i32* %2, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %19, label %5

; <label>:5                                       ; preds = %0
  store i32 0, i32* %i, align 4
  br label %6

; <label>:6                                       ; preds = %15, %5
  %7 = load i32* %i, align 4
  %8 = load i32* %1, align 4
  %9 = icmp ult i32 %7, %8
  br i1 %9, label %10, label %18

; <label>:10                                      ; preds = %6
  %11 = call i32 @get4()
  %12 = load i32* %i, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [1024 x i32]* @foveon_decoder.huff, i32 0, i64 %13
  store i32 %11, i32* %14, align 4
  br label %15

; <label>:15                                      ; preds = %10
  %16 = load i32* %i, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %i, align 4
  br label %6

; <label>:18                                      ; preds = %6
  call void @init_decoder()
  br label %19

; <label>:19                                      ; preds = %18, %0
  %20 = load %struct.decode** @free_decode, align 8
  %21 = getelementptr inbounds %struct.decode* %20, i32 1
  store %struct.decode* %21, %struct.decode** @free_decode, align 8
  store %struct.decode* %20, %struct.decode** %cur, align 8
  %22 = load %struct.decode** @free_decode, align 8
  %23 = icmp ugt %struct.decode* %22, getelementptr inbounds (%struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), i64 2048)
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %19
  %25 = load %struct._IO_FILE** @stderr, align 8
  %26 = load i8** @ifname, align 8
  %27 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([28 x i8]* @.str4, i32 0, i32 0), i8* %26)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0), i32 2) #8
  unreachable

; <label>:28                                      ; preds = %19
  %29 = load i32* %2, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %52

; <label>:31                                      ; preds = %28
  store i32 0, i32* %i, align 4
  br label %32

; <label>:32                                      ; preds = %48, %31
  %33 = load i32* %i, align 4
  %34 = load i32* %1, align 4
  %35 = icmp ult i32 %33, %34
  br i1 %35, label %36, label %51

; <label>:36                                      ; preds = %32
  %37 = load i32* %i, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [1024 x i32]* @foveon_decoder.huff, i32 0, i64 %38
  %40 = load i32* %39, align 4
  %41 = load i32* %2, align 4
  %42 = icmp eq i32 %40, %41
  br i1 %42, label %43, label %47

; <label>:43                                      ; preds = %36
  %44 = load i32* %i, align 4
  %45 = load %struct.decode** %cur, align 8
  %46 = getelementptr inbounds %struct.decode* %45, i32 0, i32 1
  store i32 %44, i32* %46, align 4
  br label %78

; <label>:47                                      ; preds = %36
  br label %48

; <label>:48                                      ; preds = %47
  %49 = load i32* %i, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %i, align 4
  br label %32

; <label>:51                                      ; preds = %32
  br label %52

; <label>:52                                      ; preds = %51, %28
  %53 = load i32* %2, align 4
  %54 = lshr i32 %53, 27
  store i32 %54, i32* %len, align 4
  %55 = icmp sgt i32 %54, 26
  br i1 %55, label %56, label %57

; <label>:56                                      ; preds = %52
  br label %78

; <label>:57                                      ; preds = %52
  %58 = load i32* %len, align 4
  %59 = add nsw i32 %58, 1
  %60 = shl i32 %59, 27
  %61 = load i32* %2, align 4
  %62 = and i32 %61, 67108863
  %63 = shl i32 %62, 1
  %64 = or i32 %60, %63
  store i32 %64, i32* %2, align 4
  %65 = load %struct.decode** @free_decode, align 8
  %66 = load %struct.decode** %cur, align 8
  %67 = getelementptr inbounds %struct.decode* %66, i32 0, i32 0
  %68 = getelementptr inbounds [2 x %struct.decode*]* %67, i32 0, i64 0
  store %struct.decode* %65, %struct.decode** %68, align 8
  %69 = load i32* %1, align 4
  %70 = load i32* %2, align 4
  call void @foveon_decoder(i32 %69, i32 %70)
  %71 = load %struct.decode** @free_decode, align 8
  %72 = load %struct.decode** %cur, align 8
  %73 = getelementptr inbounds %struct.decode* %72, i32 0, i32 0
  %74 = getelementptr inbounds [2 x %struct.decode*]* %73, i32 0, i64 1
  store %struct.decode* %71, %struct.decode** %74, align 8
  %75 = load i32* %1, align 4
  %76 = load i32* %2, align 4
  %77 = add i32 %76, 1
  call void @foveon_decoder(i32 %75, i32 %77)
  br label %78

; <label>:78                                      ; preds = %57, %56, %43
  ret void
}

; Function Attrs: nounwind uwtable
define void @foveon_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = alloca %struct._IO_FILE*, align 8
  %bwide = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %bitbuf = alloca i32, align 4
  %bit = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %buf = alloca i8*, align 8
  %dindex = alloca %struct.decode*, align 8
  %pred = alloca [3 x i16], align 2
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %1, align 8
  store i32 0, i32* %bitbuf, align 4
  store i32 1, i32* %bit, align 4
  %2 = call i32 @get4()
  store i32 %2, i32* %bwide, align 4
  %3 = load %struct._IO_FILE** %1, align 8
  %4 = load i16* @thumb_width, align 2
  %5 = zext i16 %4 to i32
  %6 = load i16* @thumb_height, align 2
  %7 = zext i16 %6 to i32
  %8 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([14 x i8]* @.str12, i32 0, i32 0), i32 %5, i32 %7)
  %9 = load i32* %bwide, align 4
  %10 = icmp ugt i32 %9, 0
  br i1 %10, label %11, label %44

; <label>:11                                      ; preds = %0
  %12 = load i32* %bwide, align 4
  %13 = load i16* @thumb_width, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nsw i32 %14, 3
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %11
  br label %131

; <label>:18                                      ; preds = %11
  %19 = load i32* %bwide, align 4
  %20 = zext i32 %19 to i64
  %21 = call noalias i8* @malloc(i64 %20) #4
  store i8* %21, i8** %buf, align 8
  %22 = load i8** %buf, align 8
  call void @merror(i8* %22, i8* getelementptr inbounds ([15 x i8]* @.str33, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %23

; <label>:23                                      ; preds = %39, %18
  %24 = load i32* %row, align 4
  %25 = load i16* @thumb_height, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp ult i32 %24, %26
  br i1 %27, label %28, label %42

; <label>:28                                      ; preds = %23
  %29 = load i8** %buf, align 8
  %30 = load i32* %bwide, align 4
  %31 = zext i32 %30 to i64
  %32 = load %struct._IO_FILE** @ifp, align 8
  %33 = call i64 @fread(i8* %29, i64 1, i64 %31, %struct._IO_FILE* %32)
  %34 = load i8** %buf, align 8
  %35 = load i16* @thumb_width, align 2
  %36 = zext i16 %35 to i64
  %37 = load %struct._IO_FILE** %1, align 8
  %38 = call i64 @fwrite(i8* %34, i64 3, i64 %36, %struct._IO_FILE* %37)
  br label %39

; <label>:39                                      ; preds = %28
  %40 = load i32* %row, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %row, align 4
  br label %23

; <label>:42                                      ; preds = %23
  %43 = load i8** %buf, align 8
  call void @free(i8* %43) #4
  br label %131

; <label>:44                                      ; preds = %0
  call void @foveon_decoder(i32 256, i32 0)
  store i32 0, i32* %row, align 4
  br label %45

; <label>:45                                      ; preds = %128, %44
  %46 = load i32* %row, align 4
  %47 = load i16* @thumb_height, align 2
  %48 = zext i16 %47 to i32
  %49 = icmp ult i32 %46, %48
  br i1 %49, label %50, label %131

; <label>:50                                      ; preds = %45
  %51 = bitcast [3 x i16]* %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %51, i8 0, i64 6, i32 2, i1 false)
  %52 = load i32* %bit, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %56, label %54

; <label>:54                                      ; preds = %50
  %55 = call i32 @get4()
  br label %56

; <label>:56                                      ; preds = %54, %50
  store i32 0, i32* %col, align 4
  store i32 0, i32* %bit, align 4
  br label %57

; <label>:57                                      ; preds = %124, %56
  %58 = load i32* %col, align 4
  %59 = load i16* @thumb_width, align 2
  %60 = zext i16 %59 to i32
  %61 = icmp ult i32 %58, %60
  br i1 %61, label %62, label %127

; <label>:62                                      ; preds = %57
  store i32 0, i32* %c, align 4
  br label %63

; <label>:63                                      ; preds = %120, %62
  %64 = load i32* %c, align 4
  %65 = icmp ult i32 %64, 3
  br i1 %65, label %66, label %123

; <label>:66                                      ; preds = %63
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** %dindex, align 8
  br label %67

; <label>:67                                      ; preds = %92, %66
  %68 = load %struct.decode** %dindex, align 8
  %69 = getelementptr inbounds %struct.decode* %68, i32 0, i32 0
  %70 = getelementptr inbounds [2 x %struct.decode*]* %69, i32 0, i64 0
  %71 = load %struct.decode** %70, align 8
  %72 = icmp ne %struct.decode* %71, null
  br i1 %72, label %73, label %102

; <label>:73                                      ; preds = %67
  %74 = load i32* %bit, align 4
  %75 = sub i32 %74, 1
  %76 = and i32 %75, 31
  store i32 %76, i32* %bit, align 4
  %77 = icmp eq i32 %76, 31
  br i1 %77, label %78, label %92

; <label>:78                                      ; preds = %73
  store i32 0, i32* %i, align 4
  br label %79

; <label>:79                                      ; preds = %88, %78
  %80 = load i32* %i, align 4
  %81 = icmp ult i32 %80, 4
  br i1 %81, label %82, label %91

; <label>:82                                      ; preds = %79
  %83 = load i32* %bitbuf, align 4
  %84 = shl i32 %83, 8
  %85 = load %struct._IO_FILE** @ifp, align 8
  %86 = call i32 @getc_unlocked(%struct._IO_FILE* %85)
  %87 = add i32 %84, %86
  store i32 %87, i32* %bitbuf, align 4
  br label %88

; <label>:88                                      ; preds = %82
  %89 = load i32* %i, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %i, align 4
  br label %79

; <label>:91                                      ; preds = %79
  br label %92

; <label>:92                                      ; preds = %91, %73
  %93 = load i32* %bitbuf, align 4
  %94 = load i32* %bit, align 4
  %95 = lshr i32 %93, %94
  %96 = and i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %struct.decode** %dindex, align 8
  %99 = getelementptr inbounds %struct.decode* %98, i32 0, i32 0
  %100 = getelementptr inbounds [2 x %struct.decode*]* %99, i32 0, i64 %97
  %101 = load %struct.decode** %100, align 8
  store %struct.decode* %101, %struct.decode** %dindex, align 8
  br label %67

; <label>:102                                     ; preds = %67
  %103 = load %struct.decode** %dindex, align 8
  %104 = getelementptr inbounds %struct.decode* %103, i32 0, i32 1
  %105 = load i32* %104, align 4
  %106 = load i32* %c, align 4
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [3 x i16]* %pred, i32 0, i64 %107
  %109 = load i16* %108, align 2
  %110 = sext i16 %109 to i32
  %111 = add nsw i32 %110, %105
  %112 = trunc i32 %111 to i16
  store i16 %112, i16* %108, align 2
  %113 = load i32* %c, align 4
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [3 x i16]* %pred, i32 0, i64 %114
  %116 = load i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = load %struct._IO_FILE** %1, align 8
  %119 = call i32 @fputc(i32 %117, %struct._IO_FILE* %118)
  br label %120

; <label>:120                                     ; preds = %102
  %121 = load i32* %c, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %c, align 4
  br label %63

; <label>:123                                     ; preds = %63
  br label %124

; <label>:124                                     ; preds = %123
  %125 = load i32* %col, align 4
  %126 = add i32 %125, 1
  store i32 %126, i32* %col, align 4
  br label %57

; <label>:127                                     ; preds = %57
  br label %128

; <label>:128                                     ; preds = %127
  %129 = load i32* %row, align 4
  %130 = add i32 %129, 1
  store i32 %130, i32* %row, align 4
  br label %45

; <label>:131                                     ; preds = %17, %42, %45
  ret void
}

declare i32 @fputc(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @foveon_load_camf() #0 {
  %key = alloca i32, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = load i64* @meta_offset, align 8
  %3 = call i32 @fseek(%struct._IO_FILE* %1, i64 %2, i32 0)
  %4 = call i32 @get4()
  store i32 %4, i32* %key, align 4
  %5 = load i8** @meta_data, align 8
  %6 = load i32* @meta_length, align 4
  %7 = zext i32 %6 to i64
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i64 @fread(i8* %5, i64 1, i64 %7, %struct._IO_FILE* %8)
  store i32 0, i32* %i, align 4
  br label %10

; <label>:10                                      ; preds = %40, %0
  %11 = load i32* %i, align 4
  %12 = load i32* @meta_length, align 4
  %13 = icmp ult i32 %11, %12
  br i1 %13, label %14, label %43

; <label>:14                                      ; preds = %10
  %15 = load i32* %key, align 4
  %16 = mul i32 %15, 1597
  %17 = add i32 %16, 51749
  %18 = urem i32 %17, 244944
  store i32 %18, i32* %key, align 4
  %19 = load i32* %key, align 4
  %20 = zext i32 %19 to i64
  %21 = mul nsw i64 %20, 301593171
  %22 = ashr i64 %21, 24
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %val, align 4
  %24 = load i32* %key, align 4
  %25 = shl i32 %24, 8
  %26 = load i32* %val, align 4
  %27 = sub i32 %25, %26
  %28 = lshr i32 %27, 1
  %29 = load i32* %val, align 4
  %30 = add i32 %28, %29
  %31 = lshr i32 %30, 17
  %32 = load i32* %i, align 4
  %33 = zext i32 %32 to i64
  %34 = load i8** @meta_data, align 8
  %35 = getelementptr inbounds i8* %34, i64 %33
  %36 = load i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = xor i32 %37, %31
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %35, align 1
  br label %40

; <label>:40                                      ; preds = %14
  %41 = load i32* %i, align 4
  %42 = add i32 %41, 1
  store i32 %42, i32* %i, align 4
  br label %10

; <label>:43                                      ; preds = %10
  ret void
}

; Function Attrs: nounwind uwtable
define void @foveon_load_raw() #0 {
  %dindex = alloca %struct.decode*, align 8
  %diff = alloca [1024 x i16], align 16
  %bitbuf = alloca i32, align 4
  %pred = alloca [3 x i32], align 4
  %fixed = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %bit = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %bitbuf, align 4
  store i32 -1, i32* %bit, align 4
  %1 = call i32 @get4()
  store i32 %1, i32* %fixed, align 4
  %2 = getelementptr inbounds [1024 x i16]* %diff, i32 0, i32 0
  call void @read_shorts(i16* %2, i32 1024)
  %3 = load i32* %fixed, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  call void @foveon_decoder(i32 1024, i32 0)
  br label %6

; <label>:6                                       ; preds = %5, %0
  store i32 0, i32* %row, align 4
  br label %7

; <label>:7                                       ; preds = %161, %6
  %8 = load i32* %row, align 4
  %9 = load i16* @height, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %164

; <label>:12                                      ; preds = %7
  %13 = bitcast [3 x i32]* %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 12, i32 4, i1 false)
  %14 = load i32* %bit, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %24, label %16

; <label>:16                                      ; preds = %12
  %17 = load i32* %fixed, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %24, label %19

; <label>:19                                      ; preds = %16
  %20 = call i32 @atoi(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 2)) #10
  %21 = icmp slt i32 %20, 14
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %19
  %23 = call i32 @get4()
  br label %24

; <label>:24                                      ; preds = %22, %19, %16, %12
  store i32 0, i32* %bit, align 4
  store i32 0, i32* %col, align 4
  br label %25

; <label>:25                                      ; preds = %157, %24
  %26 = load i32* %col, align 4
  %27 = load i16* @width, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %160

; <label>:30                                      ; preds = %25
  %31 = load i32* %fixed, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %58

; <label>:33                                      ; preds = %30
  %34 = call i32 @get4()
  store i32 %34, i32* %bitbuf, align 4
  store i32 0, i32* %c, align 4
  br label %35

; <label>:35                                      ; preds = %54, %33
  %36 = load i32* %c, align 4
  %37 = icmp slt i32 %36, 3
  br i1 %37, label %38, label %57

; <label>:38                                      ; preds = %35
  %39 = load i32* %bitbuf, align 4
  %40 = load i32* %c, align 4
  %41 = mul nsw i32 %40, 10
  %42 = lshr i32 %39, %41
  %43 = and i32 %42, 1023
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [1024 x i16]* %diff, i32 0, i64 %44
  %46 = load i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = load i32* %c, align 4
  %49 = sub nsw i32 2, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %50
  %52 = load i32* %51, align 4
  %53 = add nsw i32 %52, %47
  store i32 %53, i32* %51, align 4
  br label %54

; <label>:54                                      ; preds = %38
  %55 = load i32* %c, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %c, align 4
  br label %35

; <label>:57                                      ; preds = %35
  br label %131

; <label>:58                                      ; preds = %30
  store i32 0, i32* %c, align 4
  br label %59

; <label>:59                                      ; preds = %127, %58
  %60 = load i32* %c, align 4
  %61 = icmp slt i32 %60, 3
  br i1 %61, label %62, label %130

; <label>:62                                      ; preds = %59
  store %struct.decode* getelementptr inbounds ([2048 x %struct.decode]* @first_decode, i32 0, i32 0), %struct.decode** %dindex, align 8
  br label %63

; <label>:63                                      ; preds = %88, %62
  %64 = load %struct.decode** %dindex, align 8
  %65 = getelementptr inbounds %struct.decode* %64, i32 0, i32 0
  %66 = getelementptr inbounds [2 x %struct.decode*]* %65, i32 0, i64 0
  %67 = load %struct.decode** %66, align 8
  %68 = icmp ne %struct.decode* %67, null
  br i1 %68, label %69, label %98

; <label>:69                                      ; preds = %63
  %70 = load i32* %bit, align 4
  %71 = sub nsw i32 %70, 1
  %72 = and i32 %71, 31
  store i32 %72, i32* %bit, align 4
  %73 = icmp eq i32 %72, 31
  br i1 %73, label %74, label %88

; <label>:74                                      ; preds = %69
  store i32 0, i32* %i, align 4
  br label %75

; <label>:75                                      ; preds = %84, %74
  %76 = load i32* %i, align 4
  %77 = icmp slt i32 %76, 4
  br i1 %77, label %78, label %87

; <label>:78                                      ; preds = %75
  %79 = load i32* %bitbuf, align 4
  %80 = shl i32 %79, 8
  %81 = load %struct._IO_FILE** @ifp, align 8
  %82 = call i32 @getc_unlocked(%struct._IO_FILE* %81)
  %83 = add i32 %80, %82
  store i32 %83, i32* %bitbuf, align 4
  br label %84

; <label>:84                                      ; preds = %78
  %85 = load i32* %i, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %i, align 4
  br label %75

; <label>:87                                      ; preds = %75
  br label %88

; <label>:88                                      ; preds = %87, %69
  %89 = load i32* %bitbuf, align 4
  %90 = load i32* %bit, align 4
  %91 = lshr i32 %89, %90
  %92 = and i32 %91, 1
  %93 = zext i32 %92 to i64
  %94 = load %struct.decode** %dindex, align 8
  %95 = getelementptr inbounds %struct.decode* %94, i32 0, i32 0
  %96 = getelementptr inbounds [2 x %struct.decode*]* %95, i32 0, i64 %93
  %97 = load %struct.decode** %96, align 8
  store %struct.decode* %97, %struct.decode** %dindex, align 8
  br label %63

; <label>:98                                      ; preds = %63
  %99 = load %struct.decode** %dindex, align 8
  %100 = getelementptr inbounds %struct.decode* %99, i32 0, i32 1
  %101 = load i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [1024 x i16]* %diff, i32 0, i64 %102
  %104 = load i16* %103, align 2
  %105 = sext i16 %104 to i32
  %106 = load i32* %c, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %107
  %109 = load i32* %108, align 4
  %110 = add nsw i32 %109, %105
  store i32 %110, i32* %108, align 4
  %111 = load i32* %c, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %112
  %114 = load i32* %113, align 4
  %115 = ashr i32 %114, 16
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %126

; <label>:117                                     ; preds = %98
  %118 = load i32* %c, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %119
  %121 = load i32* %120, align 4
  %122 = xor i32 %121, -1
  %123 = ashr i32 %122, 16
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %126

; <label>:125                                     ; preds = %117
  call void @derror()
  br label %126

; <label>:126                                     ; preds = %125, %117, %98
  br label %127

; <label>:127                                     ; preds = %126
  %128 = load i32* %c, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %c, align 4
  br label %59

; <label>:130                                     ; preds = %59
  br label %131

; <label>:131                                     ; preds = %130, %57
  store i32 0, i32* %c, align 4
  br label %132

; <label>:132                                     ; preds = %153, %131
  %133 = load i32* %c, align 4
  %134 = icmp slt i32 %133, 3
  br i1 %134, label %135, label %156

; <label>:135                                     ; preds = %132
  %136 = load i32* %c, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [3 x i32]* %pred, i32 0, i64 %137
  %139 = load i32* %138, align 4
  %140 = trunc i32 %139 to i16
  %141 = load i32* %c, align 4
  %142 = sext i32 %141 to i64
  %143 = load i32* %row, align 4
  %144 = load i16* @width, align 2
  %145 = zext i16 %144 to i32
  %146 = mul nsw i32 %143, %145
  %147 = load i32* %col, align 4
  %148 = add nsw i32 %146, %147
  %149 = sext i32 %148 to i64
  %150 = load [4 x i16]** @image, align 8
  %151 = getelementptr inbounds [4 x i16]* %150, i64 %149
  %152 = getelementptr inbounds [4 x i16]* %151, i32 0, i64 %142
  store i16 %140, i16* %152, align 2
  br label %153

; <label>:153                                     ; preds = %135
  %154 = load i32* %c, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %c, align 4
  br label %132

; <label>:156                                     ; preds = %132
  br label %157

; <label>:157                                     ; preds = %156
  %158 = load i32* %col, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %col, align 4
  br label %25

; <label>:160                                     ; preds = %25
  br label %161

; <label>:161                                     ; preds = %160
  %162 = load i32* %row, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %row, align 4
  br label %7

; <label>:164                                     ; preds = %7
  %165 = load i32* @document_mode, align 4
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %197

; <label>:167                                     ; preds = %164
  store i32 0, i32* %i, align 4
  br label %168

; <label>:168                                     ; preds = %193, %167
  %169 = load i32* %i, align 4
  %170 = load i16* @height, align 2
  %171 = zext i16 %170 to i32
  %172 = load i16* @width, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nsw i32 %171, %173
  %175 = mul nsw i32 %174, 4
  %176 = icmp slt i32 %169, %175
  br i1 %176, label %177, label %196

; <label>:177                                     ; preds = %168
  %178 = load i32* %i, align 4
  %179 = sext i32 %178 to i64
  %180 = load [4 x i16]** @image, align 8
  %181 = getelementptr inbounds [4 x i16]* %180, i64 0
  %182 = getelementptr inbounds [4 x i16]* %181, i32 0, i64 %179
  %183 = load i16* %182, align 2
  %184 = sext i16 %183 to i32
  %185 = icmp slt i32 %184, 0
  br i1 %185, label %186, label %192

; <label>:186                                     ; preds = %177
  %187 = load i32* %i, align 4
  %188 = sext i32 %187 to i64
  %189 = load [4 x i16]** @image, align 8
  %190 = getelementptr inbounds [4 x i16]* %189, i64 0
  %191 = getelementptr inbounds [4 x i16]* %190, i32 0, i64 %188
  store i16 0, i16* %191, align 2
  br label %192

; <label>:192                                     ; preds = %186, %177
  br label %193

; <label>:193                                     ; preds = %192
  %194 = load i32* %i, align 4
  %195 = add nsw i32 %194, 1
  store i32 %195, i32* %i, align 4
  br label %168

; <label>:196                                     ; preds = %168
  br label %197

; <label>:197                                     ; preds = %196, %164
  call void @foveon_load_camf()
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #6

; Function Attrs: nounwind uwtable
define i8* @foveon_camf_param(i8* %block, i8* %param) #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %idx = alloca i32, align 4
  %num = alloca i32, align 4
  %pos = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %dp = alloca i8*, align 8
  store i8* %block, i8** %2, align 8
  store i8* %param, i8** %3, align 8
  store i32 0, i32* %idx, align 4
  br label %4

; <label>:4                                       ; preds = %74, %0
  %5 = load i32* %idx, align 4
  %6 = load i32* @meta_length, align 4
  %7 = icmp ult i32 %5, %6
  br i1 %7, label %8, label %80

; <label>:8                                       ; preds = %4
  %9 = load i8** @meta_data, align 8
  %10 = load i32* %idx, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8* %9, i64 %11
  store i8* %12, i8** %pos, align 8
  %13 = load i8** %pos, align 8
  %14 = call i32 @strncmp(i8* %13, i8* getelementptr inbounds ([4 x i8]* @.str34, i32 0, i32 0), i64 3) #10
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %8
  br label %80

; <label>:17                                      ; preds = %8
  %18 = load i8** %pos, align 8
  %19 = getelementptr inbounds i8* %18, i64 3
  %20 = load i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 80
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %17
  br label %74

; <label>:24                                      ; preds = %17
  %25 = load i8** %2, align 8
  %26 = load i8** %pos, align 8
  %27 = load i8** %pos, align 8
  %28 = getelementptr inbounds i8* %27, i64 12
  %29 = call i32 @sget4(i8* %28)
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8* %26, i64 %30
  %32 = call i32 @strcmp(i8* %25, i8* %31) #10
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %24
  br label %74

; <label>:35                                      ; preds = %24
  %36 = load i8** %pos, align 8
  %37 = load i8** %pos, align 8
  %38 = getelementptr inbounds i8* %37, i64 16
  %39 = call i32 @sget4(i8* %38)
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8* %36, i64 %40
  store i8* %41, i8** %cp, align 8
  %42 = load i8** %cp, align 8
  %43 = call i32 @sget4(i8* %42)
  store i32 %43, i32* %num, align 4
  %44 = load i8** %pos, align 8
  %45 = load i8** %cp, align 8
  %46 = getelementptr inbounds i8* %45, i64 4
  %47 = call i32 @sget4(i8* %46)
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8* %44, i64 %48
  store i8* %49, i8** %dp, align 8
  br label %50

; <label>:50                                      ; preds = %72, %35
  %51 = load i32* %num, align 4
  %52 = add i32 %51, -1
  store i32 %52, i32* %num, align 4
  %53 = icmp ne i32 %51, 0
  br i1 %53, label %54, label %73

; <label>:54                                      ; preds = %50
  %55 = load i8** %cp, align 8
  %56 = getelementptr inbounds i8* %55, i64 8
  store i8* %56, i8** %cp, align 8
  %57 = load i8** %3, align 8
  %58 = load i8** %dp, align 8
  %59 = load i8** %cp, align 8
  %60 = call i32 @sget4(i8* %59)
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds i8* %58, i64 %61
  %63 = call i32 @strcmp(i8* %57, i8* %62) #10
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %72, label %65

; <label>:65                                      ; preds = %54
  %66 = load i8** %dp, align 8
  %67 = load i8** %cp, align 8
  %68 = getelementptr inbounds i8* %67, i64 4
  %69 = call i32 @sget4(i8* %68)
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8* %66, i64 %70
  store i8* %71, i8** %1
  br label %81

; <label>:72                                      ; preds = %54
  br label %50

; <label>:73                                      ; preds = %50
  br label %74

; <label>:74                                      ; preds = %73, %34, %23
  %75 = load i8** %pos, align 8
  %76 = getelementptr inbounds i8* %75, i64 8
  %77 = call i32 @sget4(i8* %76)
  %78 = load i32* %idx, align 4
  %79 = add i32 %78, %77
  store i32 %79, i32* %idx, align 4
  br label %4

; <label>:80                                      ; preds = %16, %4
  store i8* null, i8** %1
  br label %81

; <label>:81                                      ; preds = %80, %65
  %82 = load i8** %1
  ret i8* %82
}

; Function Attrs: nounwind uwtable
define i8* @foveon_camf_matrix(i32* %dim, i8* %name) #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %type = alloca i32, align 4
  %ndim = alloca i32, align 4
  %size = alloca i32, align 4
  %mat = alloca i32*, align 8
  %pos = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %dsize = alloca double, align 8
  store i32* %dim, i32** %2, align 8
  store i8* %name, i8** %3, align 8
  store i32 0, i32* %idx, align 4
  br label %4

; <label>:4                                       ; preds = %145, %0
  %5 = load i32* %idx, align 4
  %6 = load i32* @meta_length, align 4
  %7 = icmp ult i32 %5, %6
  br i1 %7, label %8, label %151

; <label>:8                                       ; preds = %4
  %9 = load i8** @meta_data, align 8
  %10 = load i32* %idx, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8* %9, i64 %11
  store i8* %12, i8** %pos, align 8
  %13 = load i8** %pos, align 8
  %14 = call i32 @strncmp(i8* %13, i8* getelementptr inbounds ([4 x i8]* @.str34, i32 0, i32 0), i64 3) #10
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %8
  br label %151

; <label>:17                                      ; preds = %8
  %18 = load i8** %pos, align 8
  %19 = getelementptr inbounds i8* %18, i64 3
  %20 = load i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 77
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %17
  br label %145

; <label>:24                                      ; preds = %17
  %25 = load i8** %3, align 8
  %26 = load i8** %pos, align 8
  %27 = load i8** %pos, align 8
  %28 = getelementptr inbounds i8* %27, i64 12
  %29 = call i32 @sget4(i8* %28)
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8* %26, i64 %30
  %32 = call i32 @strcmp(i8* %25, i8* %31) #10
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %24
  br label %145

; <label>:35                                      ; preds = %24
  %36 = load i32** %2, align 8
  %37 = getelementptr inbounds i32* %36, i64 2
  store i32 1, i32* %37, align 4
  %38 = load i32** %2, align 8
  %39 = getelementptr inbounds i32* %38, i64 1
  store i32 1, i32* %39, align 4
  %40 = load i32** %2, align 8
  %41 = getelementptr inbounds i32* %40, i64 0
  store i32 1, i32* %41, align 4
  %42 = load i8** %pos, align 8
  %43 = load i8** %pos, align 8
  %44 = getelementptr inbounds i8* %43, i64 16
  %45 = call i32 @sget4(i8* %44)
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8* %42, i64 %46
  store i8* %47, i8** %cp, align 8
  %48 = load i8** %cp, align 8
  %49 = call i32 @sget4(i8* %48)
  store i32 %49, i32* %type, align 4
  %50 = load i8** %cp, align 8
  %51 = getelementptr inbounds i8* %50, i64 4
  %52 = call i32 @sget4(i8* %51)
  store i32 %52, i32* %ndim, align 4
  %53 = icmp ugt i32 %52, 3
  br i1 %53, label %54, label %55

; <label>:54                                      ; preds = %35
  br label %151

; <label>:55                                      ; preds = %35
  %56 = load i8** %pos, align 8
  %57 = load i8** %cp, align 8
  %58 = getelementptr inbounds i8* %57, i64 8
  %59 = call i32 @sget4(i8* %58)
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i8* %56, i64 %60
  store i8* %61, i8** %dp, align 8
  %62 = load i32* %ndim, align 4
  store i32 %62, i32* %i, align 4
  br label %63

; <label>:63                                      ; preds = %67, %55
  %64 = load i32* %i, align 4
  %65 = add i32 %64, -1
  store i32 %65, i32* %i, align 4
  %66 = icmp ne i32 %64, 0
  br i1 %66, label %67, label %76

; <label>:67                                      ; preds = %63
  %68 = load i8** %cp, align 8
  %69 = getelementptr inbounds i8* %68, i64 12
  store i8* %69, i8** %cp, align 8
  %70 = load i8** %cp, align 8
  %71 = call i32 @sget4(i8* %70)
  %72 = load i32* %i, align 4
  %73 = zext i32 %72 to i64
  %74 = load i32** %2, align 8
  %75 = getelementptr inbounds i32* %74, i64 %73
  store i32 %71, i32* %75, align 4
  br label %63

; <label>:76                                      ; preds = %63
  %77 = load i32** %2, align 8
  %78 = getelementptr inbounds i32* %77, i64 0
  %79 = load i32* %78, align 4
  %80 = uitofp i32 %79 to double
  %81 = load i32** %2, align 8
  %82 = getelementptr inbounds i32* %81, i64 1
  %83 = load i32* %82, align 4
  %84 = uitofp i32 %83 to double
  %85 = fmul double %80, %84
  %86 = load i32** %2, align 8
  %87 = getelementptr inbounds i32* %86, i64 2
  %88 = load i32* %87, align 4
  %89 = uitofp i32 %88 to double
  %90 = fmul double %85, %89
  store double %90, double* %dsize, align 8
  %91 = load i32* @meta_length, align 4
  %92 = udiv i32 %91, 4
  %93 = uitofp i32 %92 to double
  %94 = fcmp ogt double %90, %93
  br i1 %94, label %95, label %96

; <label>:95                                      ; preds = %76
  br label %151

; <label>:96                                      ; preds = %76
  %97 = load double* %dsize, align 8
  %98 = fptoui double %97 to i32
  store i32 %98, i32* %size, align 4
  %99 = mul i32 %98, 4
  %100 = zext i32 %99 to i64
  %101 = call noalias i8* @malloc(i64 %100) #4
  %102 = bitcast i8* %101 to i32*
  store i32* %102, i32** %mat, align 8
  %103 = load i32** %mat, align 8
  %104 = bitcast i32* %103 to i8*
  call void @merror(i8* %104, i8* getelementptr inbounds ([21 x i8]* @.str35, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %105

; <label>:105                                     ; preds = %139, %96
  %106 = load i32* %i, align 4
  %107 = load i32* %size, align 4
  %108 = icmp ult i32 %106, %107
  br i1 %108, label %109, label %142

; <label>:109                                     ; preds = %105
  %110 = load i32* %type, align 4
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %126

; <label>:112                                     ; preds = %109
  %113 = load i32* %type, align 4
  %114 = icmp ne i32 %113, 6
  br i1 %114, label %115, label %126

; <label>:115                                     ; preds = %112
  %116 = load i8** %dp, align 8
  %117 = load i32* %i, align 4
  %118 = mul i32 %117, 4
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds i8* %116, i64 %119
  %121 = call i32 @sget4(i8* %120)
  %122 = load i32* %i, align 4
  %123 = zext i32 %122 to i64
  %124 = load i32** %mat, align 8
  %125 = getelementptr inbounds i32* %124, i64 %123
  store i32 %121, i32* %125, align 4
  br label %138

; <label>:126                                     ; preds = %112, %109
  %127 = load i8** %dp, align 8
  %128 = load i32* %i, align 4
  %129 = mul i32 %128, 2
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i8* %127, i64 %130
  %132 = call i32 @sget4(i8* %131)
  %133 = and i32 %132, 65535
  %134 = load i32* %i, align 4
  %135 = zext i32 %134 to i64
  %136 = load i32** %mat, align 8
  %137 = getelementptr inbounds i32* %136, i64 %135
  store i32 %133, i32* %137, align 4
  br label %138

; <label>:138                                     ; preds = %126, %115
  br label %139

; <label>:139                                     ; preds = %138
  %140 = load i32* %i, align 4
  %141 = add i32 %140, 1
  store i32 %141, i32* %i, align 4
  br label %105

; <label>:142                                     ; preds = %105
  %143 = load i32** %mat, align 8
  %144 = bitcast i32* %143 to i8*
  store i8* %144, i8** %1
  br label %156

; <label>:145                                     ; preds = %34, %23
  %146 = load i8** %pos, align 8
  %147 = getelementptr inbounds i8* %146, i64 8
  %148 = call i32 @sget4(i8* %147)
  %149 = load i32* %idx, align 4
  %150 = add i32 %149, %148
  store i32 %150, i32* %idx, align 4
  br label %4

; <label>:151                                     ; preds = %95, %54, %16, %4
  %152 = load %struct._IO_FILE** @stderr, align 8
  %153 = load i8** @ifname, align 8
  %154 = load i8** %3, align 8
  %155 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %152, i8* getelementptr inbounds ([28 x i8]* @.str36, i32 0, i32 0), i8* %153, i8* %154)
  store i8* null, i8** %1
  br label %156

; <label>:156                                     ; preds = %151, %142
  %157 = load i8** %1
  ret i8* %157
}

; Function Attrs: nounwind uwtable
define i32 @foveon_fixed(i8* %ptr, i32 %size, i8* %name) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %dim = alloca [3 x i32], align 4
  store i8* %ptr, i8** %2, align 8
  store i32 %size, i32* %3, align 4
  store i8* %name, i8** %4, align 8
  %5 = getelementptr inbounds [3 x i32]* %dim, i32 0, i32 0
  %6 = load i8** %4, align 8
  %7 = call i8* @foveon_camf_matrix(i32* %5, i8* %6)
  store i8* %7, i8** %dp, align 8
  %8 = load i8** %dp, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %11, label %10

; <label>:10                                      ; preds = %0
  store i32 0, i32* %1
  br label %18

; <label>:11                                      ; preds = %0
  %12 = load i8** %2, align 8
  %13 = load i8** %dp, align 8
  %14 = load i32* %3, align 4
  %15 = mul nsw i32 %14, 4
  %16 = sext i32 %15 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 %16, i32 1, i1 false)
  %17 = load i8** %dp, align 8
  call void @free(i8* %17) #4
  store i32 1, i32* %1
  br label %18

; <label>:18                                      ; preds = %11, %10
  %19 = load i32* %1
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define float @foveon_avg(i16* %pix, i32* %range, float %cfilt) #0 {
  %1 = alloca float, align 4
  %2 = alloca i16*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca float, align 4
  %i = alloca i32, align 4
  %val = alloca float, align 4
  %min = alloca float, align 4
  %max = alloca float, align 4
  %sum = alloca float, align 4
  store i16* %pix, i16** %2, align 8
  store i32* %range, i32** %3, align 8
  store float %cfilt, float* %4, align 4
  store float 0x47EFFFFFE0000000, float* %min, align 4
  store float 0xC7EFFFFFE0000000, float* %max, align 4
  store float 0.000000e+00, float* %sum, align 4
  %5 = load i32** %3, align 8
  %6 = getelementptr inbounds i32* %5, i64 0
  %7 = load i32* %6, align 4
  store i32 %7, i32* %i, align 4
  br label %8

; <label>:8                                       ; preds = %57, %0
  %9 = load i32* %i, align 4
  %10 = load i32** %3, align 8
  %11 = getelementptr inbounds i32* %10, i64 1
  %12 = load i32* %11, align 4
  %13 = icmp sle i32 %9, %12
  br i1 %13, label %14, label %60

; <label>:14                                      ; preds = %8
  %15 = load i32* %i, align 4
  %16 = mul nsw i32 %15, 4
  %17 = sext i32 %16 to i64
  %18 = load i16** %2, align 8
  %19 = getelementptr inbounds i16* %18, i64 %17
  %20 = load i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = sitofp i32 %21 to float
  %23 = load i32* %i, align 4
  %24 = mul nsw i32 %23, 4
  %25 = sext i32 %24 to i64
  %26 = load i16** %2, align 8
  %27 = getelementptr inbounds i16* %26, i64 %25
  %28 = load i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = load i32* %i, align 4
  %31 = sub nsw i32 %30, 1
  %32 = mul nsw i32 %31, 4
  %33 = sext i32 %32 to i64
  %34 = load i16** %2, align 8
  %35 = getelementptr inbounds i16* %34, i64 %33
  %36 = load i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = sub nsw i32 %29, %37
  %39 = sitofp i32 %38 to float
  %40 = load float* %4, align 4
  %41 = fmul float %39, %40
  %42 = fadd float %22, %41
  store float %42, float* %val, align 4
  %43 = load float* %sum, align 4
  %44 = fadd float %43, %42
  store float %44, float* %sum, align 4
  %45 = load float* %min, align 4
  %46 = load float* %val, align 4
  %47 = fcmp ogt float %45, %46
  br i1 %47, label %48, label %50

; <label>:48                                      ; preds = %14
  %49 = load float* %val, align 4
  store float %49, float* %min, align 4
  br label %50

; <label>:50                                      ; preds = %48, %14
  %51 = load float* %max, align 4
  %52 = load float* %val, align 4
  %53 = fcmp olt float %51, %52
  br i1 %53, label %54, label %56

; <label>:54                                      ; preds = %50
  %55 = load float* %val, align 4
  store float %55, float* %max, align 4
  br label %56

; <label>:56                                      ; preds = %54, %50
  br label %57

; <label>:57                                      ; preds = %56
  %58 = load i32* %i, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %i, align 4
  br label %8

; <label>:60                                      ; preds = %8
  %61 = load i32** %3, align 8
  %62 = getelementptr inbounds i32* %61, i64 1
  %63 = load i32* %62, align 4
  %64 = load i32** %3, align 8
  %65 = getelementptr inbounds i32* %64, i64 0
  %66 = load i32* %65, align 4
  %67 = sub nsw i32 %63, %66
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %72

; <label>:69                                      ; preds = %60
  %70 = load float* %sum, align 4
  %71 = fdiv float %70, 2.000000e+00
  store float %71, float* %1
  br label %88

; <label>:72                                      ; preds = %60
  %73 = load float* %sum, align 4
  %74 = load float* %min, align 4
  %75 = fsub float %73, %74
  %76 = load float* %max, align 4
  %77 = fsub float %75, %76
  %78 = load i32** %3, align 8
  %79 = getelementptr inbounds i32* %78, i64 1
  %80 = load i32* %79, align 4
  %81 = load i32** %3, align 8
  %82 = getelementptr inbounds i32* %81, i64 0
  %83 = load i32* %82, align 4
  %84 = sub nsw i32 %80, %83
  %85 = sub nsw i32 %84, 1
  %86 = sitofp i32 %85 to float
  %87 = fdiv float %77, %86
  store float %87, float* %1
  br label %88

; <label>:88                                      ; preds = %72, %69
  %89 = load float* %1
  ret float %89
}

; Function Attrs: nounwind uwtable
define i16* @foveon_make_curve(double %max, double %mul, double %filt) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %curve = alloca i16*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %x = alloca double, align 8
  store double %max, double* %1, align 8
  store double %mul, double* %2, align 8
  store double %filt, double* %3, align 8
  %4 = load double* %3, align 8
  %5 = fcmp une double %4, 0.000000e+00
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %0
  store double 8.000000e-01, double* %3, align 8
  br label %7

; <label>:7                                       ; preds = %6, %0
  %8 = load double* %1, align 8
  %9 = fmul double 0x402921FB54442D18, %8
  %10 = load double* %3, align 8
  %11 = fdiv double %9, %10
  %12 = fptoui double %11 to i32
  store i32 %12, i32* %size, align 4
  %13 = load i32* %size, align 4
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %7
  %16 = load i32* %size, align 4
  %17 = add i32 %16, -1
  store i32 %17, i32* %size, align 4
  br label %18

; <label>:18                                      ; preds = %15, %7
  %19 = load i32* %size, align 4
  %20 = add i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = call noalias i8* @calloc(i64 %21, i64 2) #4
  %23 = bitcast i8* %22 to i16*
  store i16* %23, i16** %curve, align 8
  %24 = load i16** %curve, align 8
  %25 = bitcast i16* %24 to i8*
  call void @merror(i8* %25, i8* getelementptr inbounds ([20 x i8]* @.str37, i32 0, i32 0))
  %26 = load i32* %size, align 4
  %27 = trunc i32 %26 to i16
  %28 = load i16** %curve, align 8
  %29 = getelementptr inbounds i16* %28, i64 0
  store i16 %27, i16* %29, align 2
  store i32 0, i32* %i, align 4
  br label %30

; <label>:30                                      ; preds = %63, %18
  %31 = load i32* %i, align 4
  %32 = load i32* %size, align 4
  %33 = icmp ult i32 %31, %32
  br i1 %33, label %34, label %66

; <label>:34                                      ; preds = %30
  %35 = load i32* %i, align 4
  %36 = uitofp i32 %35 to double
  %37 = load double* %3, align 8
  %38 = fmul double %36, %37
  %39 = load double* %1, align 8
  %40 = fdiv double %38, %39
  %41 = fdiv double %40, 4.000000e+00
  store double %41, double* %x, align 8
  %42 = load double* %x, align 8
  %43 = call double @cos(double %42) #4
  %44 = fadd double %43, 1.000000e+00
  %45 = fdiv double %44, 2.000000e+00
  %46 = load i32* %i, align 4
  %47 = uitofp i32 %46 to double
  %48 = load double* %3, align 8
  %49 = fmul double %47, %48
  %50 = load double* %2, align 8
  %51 = fdiv double %49, %50
  %52 = call double @tanh(double %51) #4
  %53 = fmul double %45, %52
  %54 = load double* %2, align 8
  %55 = fmul double %53, %54
  %56 = fadd double %55, 5.000000e-01
  %57 = fptosi double %56 to i16
  %58 = load i32* %i, align 4
  %59 = add i32 %58, 1
  %60 = zext i32 %59 to i64
  %61 = load i16** %curve, align 8
  %62 = getelementptr inbounds i16* %61, i64 %60
  store i16 %57, i16* %62, align 2
  br label %63

; <label>:63                                      ; preds = %34
  %64 = load i32* %i, align 4
  %65 = add i32 %64, 1
  store i32 %65, i32* %i, align 4
  br label %30

; <label>:66                                      ; preds = %30
  %67 = load i16** %curve, align 8
  ret i16* %67
}

; Function Attrs: nounwind
declare double @cos(double) #3

; Function Attrs: nounwind
declare double @tanh(double) #3

; Function Attrs: nounwind uwtable
define void @foveon_make_curves(i16** %curvep, float* %dq, float* %div, float %filt) #0 {
  %1 = alloca i16**, align 8
  %2 = alloca float*, align 8
  %3 = alloca float*, align 8
  %4 = alloca float, align 4
  %mul = alloca [3 x double], align 16
  %max = alloca double, align 8
  %c = alloca i32, align 4
  store i16** %curvep, i16*** %1, align 8
  store float* %dq, float** %2, align 8
  store float* %div, float** %3, align 8
  store float %filt, float* %4, align 4
  store double 0.000000e+00, double* %max, align 8
  store i32 0, i32* %c, align 4
  br label %5

; <label>:5                                       ; preds = %24, %0
  %6 = load i32* %c, align 4
  %7 = icmp slt i32 %6, 3
  br i1 %7, label %8, label %27

; <label>:8                                       ; preds = %5
  %9 = load i32* %c, align 4
  %10 = sext i32 %9 to i64
  %11 = load float** %2, align 8
  %12 = getelementptr inbounds float* %11, i64 %10
  %13 = load float* %12, align 4
  %14 = load i32* %c, align 4
  %15 = sext i32 %14 to i64
  %16 = load float** %3, align 8
  %17 = getelementptr inbounds float* %16, i64 %15
  %18 = load float* %17, align 4
  %19 = fdiv float %13, %18
  %20 = fpext float %19 to double
  %21 = load i32* %c, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %22
  store double %20, double* %23, align 8
  br label %24

; <label>:24                                      ; preds = %8
  %25 = load i32* %c, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %c, align 4
  br label %5

; <label>:27                                      ; preds = %5
  store i32 0, i32* %c, align 4
  br label %28

; <label>:28                                      ; preds = %44, %27
  %29 = load i32* %c, align 4
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %47

; <label>:31                                      ; preds = %28
  %32 = load double* %max, align 8
  %33 = load i32* %c, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %34
  %36 = load double* %35, align 8
  %37 = fcmp olt double %32, %36
  br i1 %37, label %38, label %43

; <label>:38                                      ; preds = %31
  %39 = load i32* %c, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %40
  %42 = load double* %41, align 8
  store double %42, double* %max, align 8
  br label %43

; <label>:43                                      ; preds = %38, %31
  br label %44

; <label>:44                                      ; preds = %43
  %45 = load i32* %c, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %c, align 4
  br label %28

; <label>:47                                      ; preds = %28
  store i32 0, i32* %c, align 4
  br label %48

; <label>:48                                      ; preds = %64, %47
  %49 = load i32* %c, align 4
  %50 = icmp slt i32 %49, 3
  br i1 %50, label %51, label %67

; <label>:51                                      ; preds = %48
  %52 = load double* %max, align 8
  %53 = load i32* %c, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [3 x double]* %mul, i32 0, i64 %54
  %56 = load double* %55, align 8
  %57 = load float* %4, align 4
  %58 = fpext float %57 to double
  %59 = call i16* @foveon_make_curve(double %52, double %56, double %58)
  %60 = load i32* %c, align 4
  %61 = sext i32 %60 to i64
  %62 = load i16*** %1, align 8
  %63 = getelementptr inbounds i16** %62, i64 %61
  store i16* %59, i16** %63, align 8
  br label %64

; <label>:64                                      ; preds = %51
  %65 = load i32* %c, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %c, align 4
  br label %48

; <label>:67                                      ; preds = %48
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @foveon_apply_curve(i16* %curve, i32 %i) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i16*, align 8
  %3 = alloca i32, align 4
  store i16* %curve, i16** %2, align 8
  store i32 %i, i32* %3, align 4
  %4 = load i32* %3, align 4
  %5 = call i32 @abs(i32 %4) #9
  %6 = load i16** %2, align 8
  %7 = getelementptr inbounds i16* %6, i64 0
  %8 = load i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = icmp sge i32 %5, %9
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %0
  store i32 0, i32* %1
  br label %34

; <label>:12                                      ; preds = %0
  %13 = load i32* %3, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %24

; <label>:15                                      ; preds = %12
  %16 = load i32* %3, align 4
  %17 = sub nsw i32 1, %16
  %18 = sext i32 %17 to i64
  %19 = load i16** %2, align 8
  %20 = getelementptr inbounds i16* %19, i64 %18
  %21 = load i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = sub nsw i32 0, %22
  br label %32

; <label>:24                                      ; preds = %12
  %25 = load i32* %3, align 4
  %26 = add nsw i32 1, %25
  %27 = sext i32 %26 to i64
  %28 = load i16** %2, align 8
  %29 = getelementptr inbounds i16* %28, i64 %27
  %30 = load i16* %29, align 2
  %31 = sext i16 %30 to i32
  br label %32

; <label>:32                                      ; preds = %24, %15
  %33 = phi i32 [ %23, %15 ], [ %31, %24 ]
  store i32 %33, i32* %1
  br label %34

; <label>:34                                      ; preds = %32, %11
  %35 = load i32* %1
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define void @foveon_interpolate() #0 {
  %pix = alloca i16*, align 8
  %prev = alloca [3 x i16], align 2
  %curve = alloca [8 x i16*], align 16
  %shrink = alloca [3 x i16]*, align 8
  %cfilt = alloca float, align 4
  %ddft = alloca [3 x [3 x [2 x float]]], align 16
  %ppm = alloca [3 x [3 x [3 x float]]], align 16
  %cam_xyz = alloca [3 x [3 x float]], align 16
  %correct = alloca [3 x [3 x float]], align 16
  %last = alloca [3 x [3 x float]], align 16
  %trans = alloca [3 x [3 x float]], align 16
  %chroma_dq = alloca [3 x float], align 4
  %color_dq = alloca [3 x float], align 4
  %diag = alloca [3 x [3 x float]], align 16
  %div = alloca [3 x float], align 4
  %black = alloca [3 x float]*, align 8
  %sgain = alloca [3 x float]*, align 8
  %sgrow = alloca [3 x float]*, align 8
  %fsum = alloca [3 x float], align 4
  %val = alloca float, align 4
  %frow = alloca float, align 4
  %num = alloca float, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca i32, align 4
  %sgx = alloca i32, align 4
  %irow = alloca i32, align 4
  %sum = alloca i32, align 4
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %limit = alloca i32, align 4
  %dscr = alloca [2 x [2 x i32]], align 16
  %dstb = alloca [4 x i32], align 16
  %smrow = alloca [7 x [3 x i32]*], align 16
  %total = alloca [4 x i32], align 16
  %ipix = alloca [3 x i32], align 4
  %work = alloca [3 x [3 x i32]], align 16
  %smlast = alloca i32, align 4
  %smred = alloca i32, align 4
  %smred_p = alloca i32, align 4
  %dev = alloca [3 x i32], align 4
  %satlev = alloca [3 x i32], align 4
  %keep = alloca [4 x i32], align 16
  %active = alloca [4 x i32], align 16
  %dim = alloca [3 x i32], align 4
  %badpix = alloca i32*, align 8
  %dsum = alloca double, align 8
  %trsum = alloca [3 x double], align 16
  %str = alloca [128 x i8], align 16
  %cp = alloca i8*, align 8
  store float 0.000000e+00, float* %cfilt, align 4
  store i32 0, i32* %smred_p, align 4
  store double 0.000000e+00, double* %dsum, align 8
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8]* @.str38, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = getelementptr inbounds [2 x [2 x i32]]* %dscr, i32 0, i32 0
  %8 = bitcast [2 x i32]* %7 to i8*
  %9 = call i32 @foveon_fixed(i8* %8, i32 4, i8* getelementptr inbounds ([19 x i8]* @.str39, i32 0, i32 0))
  %10 = getelementptr inbounds [3 x [3 x [3 x float]]]* %ppm, i32 0, i64 0
  %11 = getelementptr inbounds [3 x [3 x float]]* %10, i32 0, i64 0
  %12 = getelementptr inbounds [3 x float]* %11, i32 0, i32 0
  %13 = bitcast float* %12 to i8*
  %14 = call i32 @foveon_fixed(i8* %13, i32 27, i8* getelementptr inbounds ([15 x i8]* @.str40, i32 0, i32 0))
  %15 = getelementptr inbounds [3 x i32]* %satlev, i32 0, i32 0
  %16 = bitcast i32* %15 to i8*
  %17 = call i32 @foveon_fixed(i8* %16, i32 3, i8* getelementptr inbounds ([16 x i8]* @.str41, i32 0, i32 0))
  %18 = getelementptr inbounds [4 x i32]* %keep, i32 0, i32 0
  %19 = bitcast i32* %18 to i8*
  %20 = call i32 @foveon_fixed(i8* %19, i32 4, i8* getelementptr inbounds ([14 x i8]* @.str42, i32 0, i32 0))
  %21 = getelementptr inbounds [4 x i32]* %active, i32 0, i32 0
  %22 = bitcast i32* %21 to i8*
  %23 = call i32 @foveon_fixed(i8* %22, i32 4, i8* getelementptr inbounds ([16 x i8]* @.str43, i32 0, i32 0))
  %24 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i32 0
  %25 = bitcast float* %24 to i8*
  %26 = call i32 @foveon_fixed(i8* %25, i32 3, i8* getelementptr inbounds ([9 x i8]* @.str44, i32 0, i32 0))
  %27 = getelementptr inbounds [3 x float]* %color_dq, i32 0, i32 0
  %28 = bitcast float* %27 to i8*
  %29 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str46, i32 0, i32 0))
  %30 = icmp ne i8* %29, null
  %31 = select i1 %30, i8* getelementptr inbounds ([8 x i8]* @.str46, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str47, i32 0, i32 0)
  %32 = call i32 @foveon_fixed(i8* %28, i32 3, i8* %31)
  %33 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str48, i32 0, i32 0))
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %38

; <label>:35                                      ; preds = %6
  %36 = bitcast float* %cfilt to i8*
  %37 = call i32 @foveon_fixed(i8* %36, i32 1, i8* getelementptr inbounds ([13 x i8]* @.str48, i32 0, i32 0))
  br label %38

; <label>:38                                      ; preds = %35, %6
  %39 = bitcast [3 x [3 x [2 x float]]]* %ddft to i8*
  call void @llvm.memset.p0i8.i64(i8* %39, i8 0, i64 72, i32 16, i1 false)
  %40 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str49, i32 0, i32 0))
  %41 = icmp ne i8* %40, null
  br i1 %41, label %42, label %49

; <label>:42                                      ; preds = %38
  %43 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %44 = getelementptr inbounds [3 x [2 x float]]* %43, i32 0, i64 0
  %45 = getelementptr inbounds [2 x float]* %44, i32 0, i32 0
  %46 = bitcast float* %45 to i8*
  %47 = call i32 @foveon_fixed(i8* %46, i32 12, i8* getelementptr inbounds ([10 x i8]* @.str49, i32 0, i32 0))
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %153, label %49

; <label>:49                                      ; preds = %42, %38
  store i32 0, i32* %i, align 4
  br label %50

; <label>:50                                      ; preds = %149, %49
  %51 = load i32* %i, align 4
  %52 = icmp slt i32 %51, 2
  br i1 %52, label %53, label %152

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i32 0
  %55 = bitcast i32* %54 to i8*
  %56 = load i32* %i, align 4
  %57 = icmp ne i32 %56, 0
  %58 = select i1 %57, i8* getelementptr inbounds ([17 x i8]* @.str50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str51, i32 0, i32 0)
  %59 = call i32 @foveon_fixed(i8* %55, i32 4, i8* %58)
  %60 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 1
  %61 = load i32* %60, align 4
  store i32 %61, i32* %row, align 4
  br label %62

; <label>:62                                      ; preds = %113, %53
  %63 = load i32* %row, align 4
  %64 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 3
  %65 = load i32* %64, align 4
  %66 = icmp sle i32 %63, %65
  br i1 %66, label %67, label %116

; <label>:67                                      ; preds = %62
  %68 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 0
  %69 = load i32* %68, align 4
  store i32 %69, i32* %col, align 4
  br label %70

; <label>:70                                      ; preds = %109, %67
  %71 = load i32* %col, align 4
  %72 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 2
  %73 = load i32* %72, align 4
  %74 = icmp sle i32 %71, %73
  br i1 %74, label %75, label %112

; <label>:75                                      ; preds = %70
  store i32 0, i32* %c, align 4
  br label %76

; <label>:76                                      ; preds = %105, %75
  %77 = load i32* %c, align 4
  %78 = icmp slt i32 %77, 3
  br i1 %78, label %79, label %108

; <label>:79                                      ; preds = %76
  %80 = load i32* %c, align 4
  %81 = sext i32 %80 to i64
  %82 = load i32* %row, align 4
  %83 = load i16* @width, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nsw i32 %82, %84
  %86 = load i32* %col, align 4
  %87 = add nsw i32 %85, %86
  %88 = sext i32 %87 to i64
  %89 = load [4 x i16]** @image, align 8
  %90 = getelementptr inbounds [4 x i16]* %89, i64 %88
  %91 = getelementptr inbounds [4 x i16]* %90, i32 0, i64 %81
  %92 = load i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = sitofp i32 %93 to float
  %95 = load i32* %c, align 4
  %96 = sext i32 %95 to i64
  %97 = load i32* %i, align 4
  %98 = add nsw i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 %99
  %101 = getelementptr inbounds [3 x [2 x float]]* %100, i32 0, i64 %96
  %102 = getelementptr inbounds [2 x float]* %101, i32 0, i64 1
  %103 = load float* %102, align 4
  %104 = fadd float %103, %94
  store float %104, float* %102, align 4
  br label %105

; <label>:105                                     ; preds = %79
  %106 = load i32* %c, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %c, align 4
  br label %76

; <label>:108                                     ; preds = %76
  br label %109

; <label>:109                                     ; preds = %108
  %110 = load i32* %col, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %col, align 4
  br label %70

; <label>:112                                     ; preds = %70
  br label %113

; <label>:113                                     ; preds = %112
  %114 = load i32* %row, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %row, align 4
  br label %62

; <label>:116                                     ; preds = %62
  store i32 0, i32* %c, align 4
  br label %117

; <label>:117                                     ; preds = %145, %116
  %118 = load i32* %c, align 4
  %119 = icmp slt i32 %118, 3
  br i1 %119, label %120, label %148

; <label>:120                                     ; preds = %117
  %121 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 3
  %122 = load i32* %121, align 4
  %123 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 1
  %124 = load i32* %123, align 4
  %125 = sub nsw i32 %122, %124
  %126 = add nsw i32 %125, 1
  %127 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 2
  %128 = load i32* %127, align 4
  %129 = getelementptr inbounds [4 x i32]* %dstb, i32 0, i64 0
  %130 = load i32* %129, align 4
  %131 = sub nsw i32 %128, %130
  %132 = add nsw i32 %131, 1
  %133 = mul nsw i32 %126, %132
  %134 = sitofp i32 %133 to float
  %135 = load i32* %c, align 4
  %136 = sext i32 %135 to i64
  %137 = load i32* %i, align 4
  %138 = add nsw i32 %137, 1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 %139
  %141 = getelementptr inbounds [3 x [2 x float]]* %140, i32 0, i64 %136
  %142 = getelementptr inbounds [2 x float]* %141, i32 0, i64 1
  %143 = load float* %142, align 4
  %144 = fdiv float %143, %134
  store float %144, float* %142, align 4
  br label %145

; <label>:145                                     ; preds = %120
  %146 = load i32* %c, align 4
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %c, align 4
  br label %117

; <label>:148                                     ; preds = %117
  br label %149

; <label>:149                                     ; preds = %148
  %150 = load i32* %i, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %i, align 4
  br label %50

; <label>:152                                     ; preds = %50
  br label %153

; <label>:153                                     ; preds = %152, %42
  %154 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([24 x i8]* @.str52, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0))
  store i8* %154, i8** %cp, align 8
  %155 = icmp ne i8* %154, null
  br i1 %155, label %160, label %156

; <label>:156                                     ; preds = %153
  %157 = load %struct._IO_FILE** @stderr, align 8
  %158 = load i8** @ifname, align 8
  %159 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %157, i8* getelementptr inbounds ([32 x i8]* @.str53, i32 0, i32 0), i8* %158, i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0))
  br label %3339

; <label>:160                                     ; preds = %153
  %161 = getelementptr inbounds [3 x [3 x float]]* %cam_xyz, i32 0, i32 0
  %162 = bitcast [3 x float]* %161 to i8*
  %163 = load i8** %cp, align 8
  %164 = call i32 @foveon_fixed(i8* %162, i32 9, i8* %163)
  %165 = getelementptr inbounds [3 x [3 x float]]* %correct, i32 0, i32 0
  %166 = bitcast [3 x float]* %165 to i8*
  %167 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([24 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0))
  %168 = call i32 @foveon_fixed(i8* %166, i32 9, i8* %167)
  %169 = bitcast [3 x [3 x float]]* %last to i8*
  call void @llvm.memset.p0i8.i64(i8* %169, i8 0, i64 36, i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %170

; <label>:170                                     ; preds = %213, %160
  %171 = load i32* %i, align 4
  %172 = icmp slt i32 %171, 3
  br i1 %172, label %173, label %216

; <label>:173                                     ; preds = %170
  store i32 0, i32* %j, align 4
  br label %174

; <label>:174                                     ; preds = %209, %173
  %175 = load i32* %j, align 4
  %176 = icmp slt i32 %175, 3
  br i1 %176, label %177, label %212

; <label>:177                                     ; preds = %174
  store i32 0, i32* %c, align 4
  br label %178

; <label>:178                                     ; preds = %205, %177
  %179 = load i32* %c, align 4
  %180 = icmp slt i32 %179, 3
  br i1 %180, label %181, label %208

; <label>:181                                     ; preds = %178
  %182 = load i32* %c, align 4
  %183 = sext i32 %182 to i64
  %184 = load i32* %i, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [3 x [3 x float]]* %correct, i32 0, i64 %185
  %187 = getelementptr inbounds [3 x float]* %186, i32 0, i64 %183
  %188 = load float* %187, align 4
  %189 = load i32* %j, align 4
  %190 = sext i32 %189 to i64
  %191 = load i32* %c, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [3 x [3 x float]]* %cam_xyz, i32 0, i64 %192
  %194 = getelementptr inbounds [3 x float]* %193, i32 0, i64 %190
  %195 = load float* %194, align 4
  %196 = fmul float %188, %195
  %197 = load i32* %j, align 4
  %198 = sext i32 %197 to i64
  %199 = load i32* %i, align 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %200
  %202 = getelementptr inbounds [3 x float]* %201, i32 0, i64 %198
  %203 = load float* %202, align 4
  %204 = fadd float %203, %196
  store float %204, float* %202, align 4
  br label %205

; <label>:205                                     ; preds = %181
  %206 = load i32* %c, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %c, align 4
  br label %178

; <label>:208                                     ; preds = %178
  br label %209

; <label>:209                                     ; preds = %208
  %210 = load i32* %j, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %j, align 4
  br label %174

; <label>:212                                     ; preds = %174
  br label %213

; <label>:213                                     ; preds = %212
  %214 = load i32* %i, align 4
  %215 = add nsw i32 %214, 1
  store i32 %215, i32* %i, align 4
  br label %170

; <label>:216                                     ; preds = %170
  store i32 0, i32* %i, align 4
  br label %217

; <label>:217                                     ; preds = %282, %216
  %218 = load i32* %i, align 4
  %219 = icmp slt i32 %218, 3
  br i1 %219, label %220, label %285

; <label>:220                                     ; preds = %217
  store i32 0, i32* %c, align 4
  br label %221

; <label>:221                                     ; preds = %278, %220
  %222 = load i32* %c, align 4
  %223 = icmp slt i32 %222, 3
  br i1 %223, label %224, label %281

; <label>:224                                     ; preds = %221
  %225 = load i32* %c, align 4
  %226 = add nsw i32 %225, 1
  %227 = srem i32 %226, 3
  %228 = sext i32 %227 to i64
  %229 = load i32* %i, align 4
  %230 = add nsw i32 %229, 1
  %231 = srem i32 %230, 3
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %232
  %234 = getelementptr inbounds [3 x float]* %233, i32 0, i64 %228
  %235 = load float* %234, align 4
  %236 = load i32* %c, align 4
  %237 = add nsw i32 %236, 2
  %238 = srem i32 %237, 3
  %239 = sext i32 %238 to i64
  %240 = load i32* %i, align 4
  %241 = add nsw i32 %240, 2
  %242 = srem i32 %241, 3
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %243
  %245 = getelementptr inbounds [3 x float]* %244, i32 0, i64 %239
  %246 = load float* %245, align 4
  %247 = fmul float %235, %246
  %248 = load i32* %c, align 4
  %249 = add nsw i32 %248, 2
  %250 = srem i32 %249, 3
  %251 = sext i32 %250 to i64
  %252 = load i32* %i, align 4
  %253 = add nsw i32 %252, 1
  %254 = srem i32 %253, 3
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %255
  %257 = getelementptr inbounds [3 x float]* %256, i32 0, i64 %251
  %258 = load float* %257, align 4
  %259 = load i32* %c, align 4
  %260 = add nsw i32 %259, 1
  %261 = srem i32 %260, 3
  %262 = sext i32 %261 to i64
  %263 = load i32* %i, align 4
  %264 = add nsw i32 %263, 2
  %265 = srem i32 %264, 3
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %266
  %268 = getelementptr inbounds [3 x float]* %267, i32 0, i64 %262
  %269 = load float* %268, align 4
  %270 = fmul float %258, %269
  %271 = fsub float %247, %270
  %272 = load i32* %i, align 4
  %273 = sext i32 %272 to i64
  %274 = load i32* %c, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %275
  %277 = getelementptr inbounds [3 x float]* %276, i32 0, i64 %273
  store float %271, float* %277, align 4
  br label %278

; <label>:278                                     ; preds = %224
  %279 = load i32* %c, align 4
  %280 = add nsw i32 %279, 1
  store i32 %280, i32* %c, align 4
  br label %221

; <label>:281                                     ; preds = %221
  br label %282

; <label>:282                                     ; preds = %281
  %283 = load i32* %i, align 4
  %284 = add nsw i32 %283, 1
  store i32 %284, i32* %i, align 4
  br label %217

; <label>:285                                     ; preds = %217
  store i32 0, i32* %c, align 4
  br label %286

; <label>:286                                     ; preds = %317, %285
  %287 = load i32* %c, align 4
  %288 = icmp slt i32 %287, 3
  br i1 %288, label %289, label %320

; <label>:289                                     ; preds = %286
  %290 = load i32* %c, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %291
  %293 = getelementptr inbounds [3 x float]* %292, i32 0, i64 0
  %294 = load float* %293, align 4
  %295 = fpext float %294 to double
  %296 = fmul double %295, 3.127000e-01
  %297 = load i32* %c, align 4
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %298
  %300 = getelementptr inbounds [3 x float]* %299, i32 0, i64 1
  %301 = load float* %300, align 4
  %302 = fpext float %301 to double
  %303 = fmul double %302, 3.290000e-01
  %304 = fadd double %296, %303
  %305 = load i32* %c, align 4
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [3 x [3 x float]]* %diag, i32 0, i64 %306
  %308 = getelementptr inbounds [3 x float]* %307, i32 0, i64 2
  %309 = load float* %308, align 4
  %310 = fpext float %309 to double
  %311 = fmul double %310, 3.583000e-01
  %312 = fadd double %304, %311
  %313 = fptrunc double %312 to float
  %314 = load i32* %c, align 4
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %315
  store float %313, float* %316, align 4
  br label %317

; <label>:317                                     ; preds = %289
  %318 = load i32* %c, align 4
  %319 = add nsw i32 %318, 1
  store i32 %319, i32* %c, align 4
  br label %286

; <label>:320                                     ; preds = %286
  %321 = getelementptr inbounds [128 x i8]* %str, i32 0, i32 0
  %322 = call i32 (i8*, i8*, ...)* @sprintf(i8* %321, i8* getelementptr inbounds ([13 x i8]* @.str55, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0)) #4
  %323 = getelementptr inbounds [128 x i8]* %str, i32 0, i32 0
  %324 = call i8* @foveon_camf_param(i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* %323)
  %325 = icmp ne i8* %324, null
  br i1 %325, label %326, label %331

; <label>:326                                     ; preds = %320
  %327 = getelementptr inbounds [3 x float]* %div, i32 0, i32 0
  %328 = bitcast float* %327 to i8*
  %329 = getelementptr inbounds [128 x i8]* %str, i32 0, i32 0
  %330 = call i32 @foveon_fixed(i8* %328, i32 3, i8* %329)
  br label %331

; <label>:331                                     ; preds = %326, %320
  store float 0.000000e+00, float* %num, align 4
  store i32 0, i32* %c, align 4
  br label %332

; <label>:332                                     ; preds = %348, %331
  %333 = load i32* %c, align 4
  %334 = icmp slt i32 %333, 3
  br i1 %334, label %335, label %351

; <label>:335                                     ; preds = %332
  %336 = load float* %num, align 4
  %337 = load i32* %c, align 4
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %338
  %340 = load float* %339, align 4
  %341 = fcmp olt float %336, %340
  br i1 %341, label %342, label %347

; <label>:342                                     ; preds = %335
  %343 = load i32* %c, align 4
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %344
  %346 = load float* %345, align 4
  store float %346, float* %num, align 4
  br label %347

; <label>:347                                     ; preds = %342, %335
  br label %348

; <label>:348                                     ; preds = %347
  %349 = load i32* %c, align 4
  %350 = add nsw i32 %349, 1
  store i32 %350, i32* %c, align 4
  br label %332

; <label>:351                                     ; preds = %332
  store i32 0, i32* %c, align 4
  br label %352

; <label>:352                                     ; preds = %362, %351
  %353 = load i32* %c, align 4
  %354 = icmp slt i32 %353, 3
  br i1 %354, label %355, label %365

; <label>:355                                     ; preds = %352
  %356 = load float* %num, align 4
  %357 = load i32* %c, align 4
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %358
  %360 = load float* %359, align 4
  %361 = fdiv float %360, %356
  store float %361, float* %359, align 4
  br label %362

; <label>:362                                     ; preds = %355
  %363 = load i32* %c, align 4
  %364 = add nsw i32 %363, 1
  store i32 %364, i32* %c, align 4
  br label %352

; <label>:365                                     ; preds = %352
  %366 = bitcast [3 x [3 x float]]* %trans to i8*
  call void @llvm.memset.p0i8.i64(i8* %366, i8 0, i64 36, i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %367

; <label>:367                                     ; preds = %415, %365
  %368 = load i32* %i, align 4
  %369 = icmp slt i32 %368, 3
  br i1 %369, label %370, label %418

; <label>:370                                     ; preds = %367
  store i32 0, i32* %j, align 4
  br label %371

; <label>:371                                     ; preds = %411, %370
  %372 = load i32* %j, align 4
  %373 = icmp slt i32 %372, 3
  br i1 %373, label %374, label %414

; <label>:374                                     ; preds = %371
  store i32 0, i32* %c, align 4
  br label %375

; <label>:375                                     ; preds = %407, %374
  %376 = load i32* %c, align 4
  %377 = icmp slt i32 %376, 3
  br i1 %377, label %378, label %410

; <label>:378                                     ; preds = %375
  %379 = load i32* %c, align 4
  %380 = sext i32 %379 to i64
  %381 = load i32* %i, align 4
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %382
  %384 = getelementptr inbounds [4 x float]* %383, i32 0, i64 %380
  %385 = load float* %384, align 4
  %386 = load i32* %j, align 4
  %387 = sext i32 %386 to i64
  %388 = load i32* %c, align 4
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %389
  %391 = getelementptr inbounds [3 x float]* %390, i32 0, i64 %387
  %392 = load float* %391, align 4
  %393 = fmul float %385, %392
  %394 = load i32* %j, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %395
  %397 = load float* %396, align 4
  %398 = fmul float %393, %397
  %399 = load i32* %j, align 4
  %400 = sext i32 %399 to i64
  %401 = load i32* %i, align 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %402
  %404 = getelementptr inbounds [3 x float]* %403, i32 0, i64 %400
  %405 = load float* %404, align 4
  %406 = fadd float %405, %398
  store float %406, float* %404, align 4
  br label %407

; <label>:407                                     ; preds = %378
  %408 = load i32* %c, align 4
  %409 = add nsw i32 %408, 1
  store i32 %409, i32* %c, align 4
  br label %375

; <label>:410                                     ; preds = %375
  br label %411

; <label>:411                                     ; preds = %410
  %412 = load i32* %j, align 4
  %413 = add nsw i32 %412, 1
  store i32 %413, i32* %j, align 4
  br label %371

; <label>:414                                     ; preds = %371
  br label %415

; <label>:415                                     ; preds = %414
  %416 = load i32* %i, align 4
  %417 = add nsw i32 %416, 1
  store i32 %417, i32* %i, align 4
  br label %367

; <label>:418                                     ; preds = %367
  store i32 0, i32* %c, align 4
  br label %419

; <label>:419                                     ; preds = %444, %418
  %420 = load i32* %c, align 4
  %421 = icmp slt i32 %420, 3
  br i1 %421, label %422, label %447

; <label>:422                                     ; preds = %419
  %423 = load i32* %c, align 4
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %424
  %426 = getelementptr inbounds [3 x float]* %425, i32 0, i64 0
  %427 = load float* %426, align 4
  %428 = load i32* %c, align 4
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %429
  %431 = getelementptr inbounds [3 x float]* %430, i32 0, i64 1
  %432 = load float* %431, align 4
  %433 = fadd float %427, %432
  %434 = load i32* %c, align 4
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %435
  %437 = getelementptr inbounds [3 x float]* %436, i32 0, i64 2
  %438 = load float* %437, align 4
  %439 = fadd float %433, %438
  %440 = fpext float %439 to double
  %441 = load i32* %c, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 %442
  store double %440, double* %443, align 8
  br label %444

; <label>:444                                     ; preds = %422
  %445 = load i32* %c, align 4
  %446 = add nsw i32 %445, 1
  store i32 %446, i32* %c, align 4
  br label %419

; <label>:447                                     ; preds = %419
  %448 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 0
  %449 = load double* %448, align 8
  %450 = fmul double 6.000000e+00, %449
  %451 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 1
  %452 = load double* %451, align 8
  %453 = fmul double 1.100000e+01, %452
  %454 = fadd double %450, %453
  %455 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 2
  %456 = load double* %455, align 8
  %457 = fmul double 3.000000e+00, %456
  %458 = fadd double %454, %457
  %459 = fdiv double %458, 2.000000e+01
  store double %459, double* %dsum, align 8
  store i32 0, i32* %i, align 4
  br label %460

; <label>:460                                     ; preds = %494, %447
  %461 = load i32* %i, align 4
  %462 = icmp slt i32 %461, 3
  br i1 %462, label %463, label %497

; <label>:463                                     ; preds = %460
  store i32 0, i32* %c, align 4
  br label %464

; <label>:464                                     ; preds = %490, %463
  %465 = load i32* %c, align 4
  %466 = icmp slt i32 %465, 3
  br i1 %466, label %467, label %493

; <label>:467                                     ; preds = %464
  %468 = load i32* %c, align 4
  %469 = sext i32 %468 to i64
  %470 = load i32* %i, align 4
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %471
  %473 = getelementptr inbounds [3 x float]* %472, i32 0, i64 %469
  %474 = load float* %473, align 4
  %475 = fpext float %474 to double
  %476 = load double* %dsum, align 8
  %477 = fmul double %475, %476
  %478 = load i32* %i, align 4
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds [3 x double]* %trsum, i32 0, i64 %479
  %481 = load double* %480, align 8
  %482 = fdiv double %477, %481
  %483 = fptrunc double %482 to float
  %484 = load i32* %c, align 4
  %485 = sext i32 %484 to i64
  %486 = load i32* %i, align 4
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %487
  %489 = getelementptr inbounds [3 x float]* %488, i32 0, i64 %485
  store float %483, float* %489, align 4
  br label %490

; <label>:490                                     ; preds = %467
  %491 = load i32* %c, align 4
  %492 = add nsw i32 %491, 1
  store i32 %492, i32* %c, align 4
  br label %464

; <label>:493                                     ; preds = %464
  br label %494

; <label>:494                                     ; preds = %493
  %495 = load i32* %i, align 4
  %496 = add nsw i32 %495, 1
  store i32 %496, i32* %i, align 4
  br label %460

; <label>:497                                     ; preds = %460
  %498 = bitcast [3 x [3 x float]]* %trans to i8*
  call void @llvm.memset.p0i8.i64(i8* %498, i8 0, i64 36, i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %499

; <label>:499                                     ; preds = %541, %497
  %500 = load i32* %i, align 4
  %501 = icmp slt i32 %500, 3
  br i1 %501, label %502, label %544

; <label>:502                                     ; preds = %499
  store i32 0, i32* %j, align 4
  br label %503

; <label>:503                                     ; preds = %537, %502
  %504 = load i32* %j, align 4
  %505 = icmp slt i32 %504, 3
  br i1 %505, label %506, label %540

; <label>:506                                     ; preds = %503
  store i32 0, i32* %c, align 4
  br label %507

; <label>:507                                     ; preds = %533, %506
  %508 = load i32* %c, align 4
  %509 = icmp slt i32 %508, 3
  br i1 %509, label %510, label %536

; <label>:510                                     ; preds = %507
  %511 = load i32* %i, align 4
  %512 = load i32* %c, align 4
  %513 = icmp eq i32 %511, %512
  %514 = select i1 %513, i32 32, i32 -1
  %515 = sitofp i32 %514 to float
  %516 = load i32* %j, align 4
  %517 = sext i32 %516 to i64
  %518 = load i32* %c, align 4
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 %519
  %521 = getelementptr inbounds [3 x float]* %520, i32 0, i64 %517
  %522 = load float* %521, align 4
  %523 = fmul float %515, %522
  %524 = fdiv float %523, 3.000000e+01
  %525 = load i32* %j, align 4
  %526 = sext i32 %525 to i64
  %527 = load i32* %i, align 4
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %528
  %530 = getelementptr inbounds [3 x float]* %529, i32 0, i64 %526
  %531 = load float* %530, align 4
  %532 = fadd float %531, %524
  store float %532, float* %530, align 4
  br label %533

; <label>:533                                     ; preds = %510
  %534 = load i32* %c, align 4
  %535 = add nsw i32 %534, 1
  store i32 %535, i32* %c, align 4
  br label %507

; <label>:536                                     ; preds = %507
  br label %537

; <label>:537                                     ; preds = %536
  %538 = load i32* %j, align 4
  %539 = add nsw i32 %538, 1
  store i32 %539, i32* %j, align 4
  br label %503

; <label>:540                                     ; preds = %503
  br label %541

; <label>:541                                     ; preds = %540
  %542 = load i32* %i, align 4
  %543 = add nsw i32 %542, 1
  store i32 %543, i32* %i, align 4
  br label %499

; <label>:544                                     ; preds = %499
  %545 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i32 0
  %546 = getelementptr inbounds [3 x float]* %color_dq, i32 0, i32 0
  %547 = getelementptr inbounds [3 x float]* %div, i32 0, i32 0
  %548 = load float* %cfilt, align 4
  call void @foveon_make_curves(i16** %545, float* %546, float* %547, float %548)
  store i32 0, i32* %c, align 4
  br label %549

; <label>:549                                     ; preds = %558, %544
  %550 = load i32* %c, align 4
  %551 = icmp slt i32 %550, 3
  br i1 %551, label %552, label %561

; <label>:552                                     ; preds = %549
  %553 = load i32* %c, align 4
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i64 %554
  %556 = load float* %555, align 4
  %557 = fdiv float %556, 3.000000e+00
  store float %557, float* %555, align 4
  br label %558

; <label>:558                                     ; preds = %552
  %559 = load i32* %c, align 4
  %560 = add nsw i32 %559, 1
  store i32 %560, i32* %c, align 4
  br label %549

; <label>:561                                     ; preds = %549
  %562 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i32 0
  %563 = getelementptr inbounds i16** %562, i64 3
  %564 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i32 0
  %565 = getelementptr inbounds [3 x float]* %div, i32 0, i32 0
  %566 = load float* %cfilt, align 4
  call void @foveon_make_curves(i16** %563, float* %564, float* %565, float %566)
  store i32 0, i32* %c, align 4
  br label %567

; <label>:567                                     ; preds = %583, %561
  %568 = load i32* %c, align 4
  %569 = icmp slt i32 %568, 3
  br i1 %569, label %570, label %586

; <label>:570                                     ; preds = %567
  %571 = load i32* %c, align 4
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds [3 x float]* %chroma_dq, i32 0, i64 %572
  %574 = load float* %573, align 4
  %575 = load i32* %c, align 4
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %576
  %578 = load float* %577, align 4
  %579 = fdiv float %574, %578
  %580 = fpext float %579 to double
  %581 = load double* %dsum, align 8
  %582 = fadd double %581, %580
  store double %582, double* %dsum, align 8
  br label %583

; <label>:583                                     ; preds = %570
  %584 = load i32* %c, align 4
  %585 = add nsw i32 %584, 1
  store i32 %585, i32* %c, align 4
  br label %567

; <label>:586                                     ; preds = %567
  %587 = load double* %dsum, align 8
  %588 = load double* %dsum, align 8
  %589 = load float* %cfilt, align 4
  %590 = fpext float %589 to double
  %591 = call i16* @foveon_make_curve(double %587, double %588, double %590)
  %592 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 6
  store i16* %591, i16** %592, align 8
  %593 = load double* %dsum, align 8
  %594 = fmul double %593, 2.000000e+00
  %595 = load double* %dsum, align 8
  %596 = fmul double %595, 2.000000e+00
  %597 = load float* %cfilt, align 4
  %598 = fpext float %597 to double
  %599 = call i16* @foveon_make_curve(double %594, double %596, double %598)
  %600 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 7
  store i16* %599, i16** %600, align 8
  %601 = getelementptr inbounds [3 x i32]* %dim, i32 0, i32 0
  %602 = call i8* @foveon_camf_matrix(i32* %601, i8* getelementptr inbounds ([12 x i8]* @.str56, i32 0, i32 0))
  %603 = bitcast i8* %602 to [3 x float]*
  store [3 x float]* %603, [3 x float]** %sgain, align 8
  %604 = load [3 x float]** %sgain, align 8
  %605 = icmp ne [3 x float]* %604, null
  br i1 %605, label %607, label %606

; <label>:606                                     ; preds = %586
  br label %3339

; <label>:607                                     ; preds = %586
  %608 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %609 = load i32* %608, align 4
  %610 = zext i32 %609 to i64
  %611 = call noalias i8* @calloc(i64 %610, i64 12) #4
  %612 = bitcast i8* %611 to [3 x float]*
  store [3 x float]* %612, [3 x float]** %sgrow, align 8
  %613 = load i16* @width, align 2
  %614 = zext i16 %613 to i32
  %615 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %616 = load i32* %615, align 4
  %617 = add i32 %614, %616
  %618 = sub i32 %617, 2
  %619 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %620 = load i32* %619, align 4
  %621 = sub i32 %620, 1
  %622 = udiv i32 %618, %621
  store i32 %622, i32* %sgx, align 4
  %623 = load i16* @height, align 2
  %624 = zext i16 %623 to i64
  %625 = call noalias i8* @calloc(i64 %624, i64 12) #4
  %626 = bitcast i8* %625 to [3 x float]*
  store [3 x float]* %626, [3 x float]** %black, align 8
  store i32 0, i32* %row, align 4
  br label %627

; <label>:627                                     ; preds = %739, %607
  %628 = load i32* %row, align 4
  %629 = load i16* @height, align 2
  %630 = zext i16 %629 to i32
  %631 = icmp slt i32 %628, %630
  br i1 %631, label %632, label %742

; <label>:632                                     ; preds = %627
  store i32 0, i32* %i, align 4
  br label %633

; <label>:633                                     ; preds = %673, %632
  %634 = load i32* %i, align 4
  %635 = icmp slt i32 %634, 6
  br i1 %635, label %636, label %676

; <label>:636                                     ; preds = %633
  %637 = load i32* %i, align 4
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %640 = getelementptr inbounds [3 x [2 x float]]* %639, i32 0, i64 0
  %641 = getelementptr inbounds [2 x float]* %640, i32 0, i64 %638
  %642 = load float* %641, align 4
  %643 = fpext float %642 to double
  %644 = load i32* %row, align 4
  %645 = sitofp i32 %644 to double
  %646 = load i16* @height, align 2
  %647 = zext i16 %646 to i32
  %648 = sitofp i32 %647 to double
  %649 = fsub double %648, 1.000000e+00
  %650 = fdiv double %645, %649
  %651 = load i32* %i, align 4
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 2
  %654 = getelementptr inbounds [3 x [2 x float]]* %653, i32 0, i64 0
  %655 = getelementptr inbounds [2 x float]* %654, i32 0, i64 %652
  %656 = load float* %655, align 4
  %657 = load i32* %i, align 4
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %660 = getelementptr inbounds [3 x [2 x float]]* %659, i32 0, i64 0
  %661 = getelementptr inbounds [2 x float]* %660, i32 0, i64 %658
  %662 = load float* %661, align 4
  %663 = fsub float %656, %662
  %664 = fpext float %663 to double
  %665 = fmul double %650, %664
  %666 = fadd double %643, %665
  %667 = fptrunc double %666 to float
  %668 = load i32* %i, align 4
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %671 = getelementptr inbounds [3 x [2 x float]]* %670, i32 0, i64 0
  %672 = getelementptr inbounds [2 x float]* %671, i32 0, i64 %669
  store float %667, float* %672, align 4
  br label %673

; <label>:673                                     ; preds = %636
  %674 = load i32* %i, align 4
  %675 = add nsw i32 %674, 1
  store i32 %675, i32* %i, align 4
  br label %633

; <label>:676                                     ; preds = %633
  store i32 0, i32* %c, align 4
  br label %677

; <label>:677                                     ; preds = %735, %676
  %678 = load i32* %c, align 4
  %679 = icmp slt i32 %678, 3
  br i1 %679, label %680, label %738

; <label>:680                                     ; preds = %677
  %681 = load i32* %row, align 4
  %682 = load i16* @width, align 2
  %683 = zext i16 %682 to i32
  %684 = mul nsw i32 %681, %683
  %685 = sext i32 %684 to i64
  %686 = load [4 x i16]** @image, align 8
  %687 = getelementptr inbounds [4 x i16]* %686, i64 %685
  %688 = getelementptr inbounds [4 x i16]* %687, i32 0, i32 0
  %689 = load i32* %c, align 4
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i16* %688, i64 %690
  %692 = getelementptr inbounds [2 x [2 x i32]]* %dscr, i32 0, i64 0
  %693 = getelementptr inbounds [2 x i32]* %692, i32 0, i32 0
  %694 = load float* %cfilt, align 4
  %695 = call float @foveon_avg(i16* %691, i32* %693, float %694)
  %696 = load i32* %row, align 4
  %697 = load i16* @width, align 2
  %698 = zext i16 %697 to i32
  %699 = mul nsw i32 %696, %698
  %700 = sext i32 %699 to i64
  %701 = load [4 x i16]** @image, align 8
  %702 = getelementptr inbounds [4 x i16]* %701, i64 %700
  %703 = getelementptr inbounds [4 x i16]* %702, i32 0, i32 0
  %704 = load i32* %c, align 4
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds i16* %703, i64 %705
  %707 = getelementptr inbounds [2 x [2 x i32]]* %dscr, i32 0, i64 1
  %708 = getelementptr inbounds [2 x i32]* %707, i32 0, i32 0
  %709 = load float* %cfilt, align 4
  %710 = call float @foveon_avg(i16* %706, i32* %708, float %709)
  %711 = fmul float %710, 3.000000e+00
  %712 = fadd float %695, %711
  %713 = load i32* %c, align 4
  %714 = sext i32 %713 to i64
  %715 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %716 = getelementptr inbounds [3 x [2 x float]]* %715, i32 0, i64 %714
  %717 = getelementptr inbounds [2 x float]* %716, i32 0, i64 0
  %718 = load float* %717, align 4
  %719 = fsub float %712, %718
  %720 = fdiv float %719, 4.000000e+00
  %721 = load i32* %c, align 4
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %724 = getelementptr inbounds [3 x [2 x float]]* %723, i32 0, i64 %722
  %725 = getelementptr inbounds [2 x float]* %724, i32 0, i64 1
  %726 = load float* %725, align 4
  %727 = fsub float %720, %726
  %728 = load i32* %c, align 4
  %729 = sext i32 %728 to i64
  %730 = load i32* %row, align 4
  %731 = sext i32 %730 to i64
  %732 = load [3 x float]** %black, align 8
  %733 = getelementptr inbounds [3 x float]* %732, i64 %731
  %734 = getelementptr inbounds [3 x float]* %733, i32 0, i64 %729
  store float %727, float* %734, align 4
  br label %735

; <label>:735                                     ; preds = %680
  %736 = load i32* %c, align 4
  %737 = add nsw i32 %736, 1
  store i32 %737, i32* %c, align 4
  br label %677

; <label>:738                                     ; preds = %677
  br label %739

; <label>:739                                     ; preds = %738
  %740 = load i32* %row, align 4
  %741 = add nsw i32 %740, 1
  store i32 %741, i32* %row, align 4
  br label %627

; <label>:742                                     ; preds = %627
  %743 = load [3 x float]** %black, align 8
  %744 = bitcast [3 x float]* %743 to i8*
  %745 = load [3 x float]** %black, align 8
  %746 = getelementptr inbounds [3 x float]* %745, i64 8
  %747 = bitcast [3 x float]* %746 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %744, i8* %747, i64 96, i32 4, i1 false)
  %748 = load [3 x float]** %black, align 8
  %749 = load i16* @height, align 2
  %750 = zext i16 %749 to i32
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds [3 x float]* %748, i64 %751
  %753 = getelementptr inbounds [3 x float]* %752, i64 -11
  %754 = bitcast [3 x float]* %753 to i8*
  %755 = load [3 x float]** %black, align 8
  %756 = load i16* @height, align 2
  %757 = zext i16 %756 to i32
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds [3 x float]* %755, i64 %758
  %760 = getelementptr inbounds [3 x float]* %759, i64 -22
  %761 = bitcast [3 x float]* %760 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %754, i8* %761, i64 132, i32 4, i1 false)
  %762 = bitcast [3 x [3 x float]]* %last to i8*
  %763 = load [3 x float]** %black, align 8
  %764 = bitcast [3 x float]* %763 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %762, i8* %764, i64 36, i32 4, i1 false)
  store i32 1, i32* %row, align 4
  br label %765

; <label>:765                                     ; preds = %896, %742
  %766 = load i32* %row, align 4
  %767 = load i16* @height, align 2
  %768 = zext i16 %767 to i32
  %769 = sub nsw i32 %768, 1
  %770 = icmp slt i32 %766, %769
  br i1 %770, label %771, label %899

; <label>:771                                     ; preds = %765
  store i32 0, i32* %c, align 4
  br label %772

; <label>:772                                     ; preds = %880, %771
  %773 = load i32* %c, align 4
  %774 = icmp slt i32 %773, 3
  br i1 %774, label %775, label %883

; <label>:775                                     ; preds = %772
  %776 = load i32* %c, align 4
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %779 = getelementptr inbounds [3 x float]* %778, i32 0, i64 %777
  %780 = load float* %779, align 4
  %781 = load i32* %c, align 4
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %784 = getelementptr inbounds [3 x float]* %783, i32 0, i64 %782
  %785 = load float* %784, align 4
  %786 = fcmp ogt float %780, %785
  br i1 %786, label %787, label %833

; <label>:787                                     ; preds = %775
  %788 = load i32* %c, align 4
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %791 = getelementptr inbounds [3 x float]* %790, i32 0, i64 %789
  %792 = load float* %791, align 4
  %793 = load i32* %c, align 4
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %796 = getelementptr inbounds [3 x float]* %795, i32 0, i64 %794
  %797 = load float* %796, align 4
  %798 = fcmp ogt float %792, %797
  br i1 %798, label %799, label %832

; <label>:799                                     ; preds = %787
  %800 = load i32* %c, align 4
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %803 = getelementptr inbounds [3 x float]* %802, i32 0, i64 %801
  %804 = load float* %803, align 4
  %805 = load i32* %c, align 4
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %808 = getelementptr inbounds [3 x float]* %807, i32 0, i64 %806
  %809 = load float* %808, align 4
  %810 = fcmp ogt float %804, %809
  br i1 %810, label %811, label %817

; <label>:811                                     ; preds = %799
  %812 = load i32* %c, align 4
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %815 = getelementptr inbounds [3 x float]* %814, i32 0, i64 %813
  %816 = load float* %815, align 4
  br label %823

; <label>:817                                     ; preds = %799
  %818 = load i32* %c, align 4
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %821 = getelementptr inbounds [3 x float]* %820, i32 0, i64 %819
  %822 = load float* %821, align 4
  br label %823

; <label>:823                                     ; preds = %817, %811
  %824 = phi float [ %816, %811 ], [ %822, %817 ]
  %825 = load i32* %c, align 4
  %826 = sext i32 %825 to i64
  %827 = load i32* %row, align 4
  %828 = sext i32 %827 to i64
  %829 = load [3 x float]** %black, align 8
  %830 = getelementptr inbounds [3 x float]* %829, i64 %828
  %831 = getelementptr inbounds [3 x float]* %830, i32 0, i64 %826
  store float %824, float* %831, align 4
  br label %832

; <label>:832                                     ; preds = %823, %787
  br label %879

; <label>:833                                     ; preds = %775
  %834 = load i32* %c, align 4
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %837 = getelementptr inbounds [3 x float]* %836, i32 0, i64 %835
  %838 = load float* %837, align 4
  %839 = load i32* %c, align 4
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %842 = getelementptr inbounds [3 x float]* %841, i32 0, i64 %840
  %843 = load float* %842, align 4
  %844 = fcmp olt float %838, %843
  br i1 %844, label %845, label %878

; <label>:845                                     ; preds = %833
  %846 = load i32* %c, align 4
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %849 = getelementptr inbounds [3 x float]* %848, i32 0, i64 %847
  %850 = load float* %849, align 4
  %851 = load i32* %c, align 4
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %854 = getelementptr inbounds [3 x float]* %853, i32 0, i64 %852
  %855 = load float* %854, align 4
  %856 = fcmp olt float %850, %855
  br i1 %856, label %857, label %863

; <label>:857                                     ; preds = %845
  %858 = load i32* %c, align 4
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %861 = getelementptr inbounds [3 x float]* %860, i32 0, i64 %859
  %862 = load float* %861, align 4
  br label %869

; <label>:863                                     ; preds = %845
  %864 = load i32* %c, align 4
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %867 = getelementptr inbounds [3 x float]* %866, i32 0, i64 %865
  %868 = load float* %867, align 4
  br label %869

; <label>:869                                     ; preds = %863, %857
  %870 = phi float [ %862, %857 ], [ %868, %863 ]
  %871 = load i32* %c, align 4
  %872 = sext i32 %871 to i64
  %873 = load i32* %row, align 4
  %874 = sext i32 %873 to i64
  %875 = load [3 x float]** %black, align 8
  %876 = getelementptr inbounds [3 x float]* %875, i64 %874
  %877 = getelementptr inbounds [3 x float]* %876, i32 0, i64 %872
  store float %870, float* %877, align 4
  br label %878

; <label>:878                                     ; preds = %869, %833
  br label %879

; <label>:879                                     ; preds = %878, %832
  br label %880

; <label>:880                                     ; preds = %879
  %881 = load i32* %c, align 4
  %882 = add nsw i32 %881, 1
  store i32 %882, i32* %c, align 4
  br label %772

; <label>:883                                     ; preds = %772
  %884 = bitcast [3 x [3 x float]]* %last to i8*
  %885 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i32 0
  %886 = getelementptr inbounds [3 x float]* %885, i64 1
  %887 = bitcast [3 x float]* %886 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %884, i8* %887, i64 24, i32 4, i1 false)
  %888 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 2
  %889 = bitcast [3 x float]* %888 to i8*
  %890 = load i32* %row, align 4
  %891 = add nsw i32 %890, 1
  %892 = sext i32 %891 to i64
  %893 = load [3 x float]** %black, align 8
  %894 = getelementptr inbounds [3 x float]* %893, i64 %892
  %895 = bitcast [3 x float]* %894 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %889, i8* %895, i64 12, i32 4, i1 false)
  br label %896

; <label>:896                                     ; preds = %883
  %897 = load i32* %row, align 4
  %898 = add nsw i32 %897, 1
  store i32 %898, i32* %row, align 4
  br label %765

; <label>:899                                     ; preds = %765
  store i32 0, i32* %c, align 4
  br label %900

; <label>:900                                     ; preds = %923, %899
  %901 = load i32* %c, align 4
  %902 = icmp slt i32 %901, 3
  br i1 %902, label %903, label %926

; <label>:903                                     ; preds = %900
  %904 = load i32* %c, align 4
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %907 = getelementptr inbounds [3 x float]* %906, i32 0, i64 %905
  %908 = load float* %907, align 4
  %909 = load i32* %c, align 4
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 1
  %912 = getelementptr inbounds [3 x float]* %911, i32 0, i64 %910
  %913 = load float* %912, align 4
  %914 = fadd float %908, %913
  %915 = fdiv float %914, 2.000000e+00
  %916 = load i32* %c, align 4
  %917 = sext i32 %916 to i64
  %918 = load i32* %row, align 4
  %919 = sext i32 %918 to i64
  %920 = load [3 x float]** %black, align 8
  %921 = getelementptr inbounds [3 x float]* %920, i64 %919
  %922 = getelementptr inbounds [3 x float]* %921, i32 0, i64 %917
  store float %915, float* %922, align 4
  br label %923

; <label>:923                                     ; preds = %903
  %924 = load i32* %c, align 4
  %925 = add nsw i32 %924, 1
  store i32 %925, i32* %c, align 4
  br label %900

; <label>:926                                     ; preds = %900
  store i32 0, i32* %c, align 4
  br label %927

; <label>:927                                     ; preds = %950, %926
  %928 = load i32* %c, align 4
  %929 = icmp slt i32 %928, 3
  br i1 %929, label %930, label %953

; <label>:930                                     ; preds = %927
  %931 = load i32* %c, align 4
  %932 = sext i32 %931 to i64
  %933 = load [3 x float]** %black, align 8
  %934 = getelementptr inbounds [3 x float]* %933, i64 1
  %935 = getelementptr inbounds [3 x float]* %934, i32 0, i64 %932
  %936 = load float* %935, align 4
  %937 = load i32* %c, align 4
  %938 = sext i32 %937 to i64
  %939 = load [3 x float]** %black, align 8
  %940 = getelementptr inbounds [3 x float]* %939, i64 3
  %941 = getelementptr inbounds [3 x float]* %940, i32 0, i64 %938
  %942 = load float* %941, align 4
  %943 = fadd float %936, %942
  %944 = fdiv float %943, 2.000000e+00
  %945 = load i32* %c, align 4
  %946 = sext i32 %945 to i64
  %947 = load [3 x float]** %black, align 8
  %948 = getelementptr inbounds [3 x float]* %947, i64 0
  %949 = getelementptr inbounds [3 x float]* %948, i32 0, i64 %946
  store float %944, float* %949, align 4
  br label %950

; <label>:950                                     ; preds = %930
  %951 = load i32* %c, align 4
  %952 = add nsw i32 %951, 1
  store i32 %952, i32* %c, align 4
  br label %927

; <label>:953                                     ; preds = %927
  %954 = call double @exp(double 0xBFA5555555555555) #4
  %955 = fsub double 1.000000e+00, %954
  %956 = fptrunc double %955 to float
  store float %956, float* %val, align 4
  %957 = bitcast [3 x float]* %fsum to i8*
  %958 = load [3 x float]** %black, align 8
  %959 = bitcast [3 x float]* %958 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %957, i8* %959, i64 12, i32 4, i1 false)
  store i32 1, i32* %row, align 4
  br label %960

; <label>:960                                     ; preds = %1016, %953
  %961 = load i32* %row, align 4
  %962 = load i16* @height, align 2
  %963 = zext i16 %962 to i32
  %964 = icmp slt i32 %961, %963
  br i1 %964, label %965, label %1019

; <label>:965                                     ; preds = %960
  store i32 0, i32* %c, align 4
  br label %966

; <label>:966                                     ; preds = %1012, %965
  %967 = load i32* %c, align 4
  %968 = icmp slt i32 %967, 3
  br i1 %968, label %969, label %1015

; <label>:969                                     ; preds = %966
  %970 = load i32* %c, align 4
  %971 = sext i32 %970 to i64
  %972 = load i32* %row, align 4
  %973 = sext i32 %972 to i64
  %974 = load [3 x float]** %black, align 8
  %975 = getelementptr inbounds [3 x float]* %974, i64 %973
  %976 = getelementptr inbounds [3 x float]* %975, i32 0, i64 %971
  %977 = load float* %976, align 4
  %978 = load i32* %c, align 4
  %979 = sext i32 %978 to i64
  %980 = load i32* %row, align 4
  %981 = sub nsw i32 %980, 1
  %982 = sext i32 %981 to i64
  %983 = load [3 x float]** %black, align 8
  %984 = getelementptr inbounds [3 x float]* %983, i64 %982
  %985 = getelementptr inbounds [3 x float]* %984, i32 0, i64 %979
  %986 = load float* %985, align 4
  %987 = fsub float %977, %986
  %988 = load float* %val, align 4
  %989 = fmul float %987, %988
  %990 = load i32* %c, align 4
  %991 = sext i32 %990 to i64
  %992 = load i32* %row, align 4
  %993 = sub nsw i32 %992, 1
  %994 = sext i32 %993 to i64
  %995 = load [3 x float]** %black, align 8
  %996 = getelementptr inbounds [3 x float]* %995, i64 %994
  %997 = getelementptr inbounds [3 x float]* %996, i32 0, i64 %991
  %998 = load float* %997, align 4
  %999 = fadd float %989, %998
  %1000 = load i32* %c, align 4
  %1001 = sext i32 %1000 to i64
  %1002 = load i32* %row, align 4
  %1003 = sext i32 %1002 to i64
  %1004 = load [3 x float]** %black, align 8
  %1005 = getelementptr inbounds [3 x float]* %1004, i64 %1003
  %1006 = getelementptr inbounds [3 x float]* %1005, i32 0, i64 %1001
  store float %999, float* %1006, align 4
  %1007 = load i32* %c, align 4
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1008
  %1010 = load float* %1009, align 4
  %1011 = fadd float %1010, %999
  store float %1011, float* %1009, align 4
  br label %1012

; <label>:1012                                    ; preds = %969
  %1013 = load i32* %c, align 4
  %1014 = add nsw i32 %1013, 1
  store i32 %1014, i32* %c, align 4
  br label %966

; <label>:1015                                    ; preds = %966
  br label %1016

; <label>:1016                                    ; preds = %1015
  %1017 = load i32* %row, align 4
  %1018 = add nsw i32 %1017, 1
  store i32 %1018, i32* %row, align 4
  br label %960

; <label>:1019                                    ; preds = %960
  %1020 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %1021 = bitcast [3 x float]* %1020 to i8*
  %1022 = load i16* @height, align 2
  %1023 = zext i16 %1022 to i32
  %1024 = sub nsw i32 %1023, 1
  %1025 = sext i32 %1024 to i64
  %1026 = load [3 x float]** %black, align 8
  %1027 = getelementptr inbounds [3 x float]* %1026, i64 %1025
  %1028 = bitcast [3 x float]* %1027 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1021, i8* %1028, i64 12, i32 4, i1 false)
  store i32 0, i32* %c, align 4
  br label %1029

; <label>:1029                                    ; preds = %1041, %1019
  %1030 = load i32* %c, align 4
  %1031 = icmp slt i32 %1030, 3
  br i1 %1031, label %1032, label %1044

; <label>:1032                                    ; preds = %1029
  %1033 = load i16* @height, align 2
  %1034 = zext i16 %1033 to i32
  %1035 = sitofp i32 %1034 to float
  %1036 = load i32* %c, align 4
  %1037 = sext i32 %1036 to i64
  %1038 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1037
  %1039 = load float* %1038, align 4
  %1040 = fdiv float %1039, %1035
  store float %1040, float* %1038, align 4
  br label %1041

; <label>:1041                                    ; preds = %1032
  %1042 = load i32* %c, align 4
  %1043 = add nsw i32 %1042, 1
  store i32 %1043, i32* %c, align 4
  br label %1029

; <label>:1044                                    ; preds = %1029
  %1045 = load i16* @height, align 2
  %1046 = zext i16 %1045 to i32
  store i32 %1046, i32* %row, align 4
  br label %1047

; <label>:1047                                    ; preds = %1097, %1044
  %1048 = load i32* %row, align 4
  %1049 = add nsw i32 %1048, -1
  store i32 %1049, i32* %row, align 4
  %1050 = icmp ne i32 %1048, 0
  br i1 %1050, label %1051, label %1098

; <label>:1051                                    ; preds = %1047
  store i32 0, i32* %c, align 4
  br label %1052

; <label>:1052                                    ; preds = %1094, %1051
  %1053 = load i32* %c, align 4
  %1054 = icmp slt i32 %1053, 3
  br i1 %1054, label %1055, label %1097

; <label>:1055                                    ; preds = %1052
  %1056 = load i32* %c, align 4
  %1057 = sext i32 %1056 to i64
  %1058 = load i32* %row, align 4
  %1059 = sext i32 %1058 to i64
  %1060 = load [3 x float]** %black, align 8
  %1061 = getelementptr inbounds [3 x float]* %1060, i64 %1059
  %1062 = getelementptr inbounds [3 x float]* %1061, i32 0, i64 %1057
  %1063 = load float* %1062, align 4
  %1064 = load i32* %c, align 4
  %1065 = sext i32 %1064 to i64
  %1066 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1065
  %1067 = load float* %1066, align 4
  %1068 = fsub float %1063, %1067
  %1069 = load i32* %c, align 4
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %1072 = getelementptr inbounds [3 x float]* %1071, i32 0, i64 %1070
  %1073 = load float* %1072, align 4
  %1074 = fsub float %1068, %1073
  %1075 = load float* %val, align 4
  %1076 = fmul float %1074, %1075
  %1077 = load i32* %c, align 4
  %1078 = sext i32 %1077 to i64
  %1079 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %1080 = getelementptr inbounds [3 x float]* %1079, i32 0, i64 %1078
  %1081 = load float* %1080, align 4
  %1082 = fadd float %1076, %1081
  %1083 = load i32* %c, align 4
  %1084 = sext i32 %1083 to i64
  %1085 = load i32* %row, align 4
  %1086 = sext i32 %1085 to i64
  %1087 = load [3 x float]** %black, align 8
  %1088 = getelementptr inbounds [3 x float]* %1087, i64 %1086
  %1089 = getelementptr inbounds [3 x float]* %1088, i32 0, i64 %1084
  store float %1082, float* %1089, align 4
  %1090 = load i32* %c, align 4
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds [3 x [3 x float]]* %last, i32 0, i64 0
  %1093 = getelementptr inbounds [3 x float]* %1092, i32 0, i64 %1091
  store float %1082, float* %1093, align 4
  br label %1094

; <label>:1094                                    ; preds = %1055
  %1095 = load i32* %c, align 4
  %1096 = add nsw i32 %1095, 1
  store i32 %1096, i32* %c, align 4
  br label %1052

; <label>:1097                                    ; preds = %1052
  br label %1047

; <label>:1098                                    ; preds = %1047
  %1099 = bitcast [4 x i32]* %total to i8*
  call void @llvm.memset.p0i8.i64(i8* %1099, i8 0, i64 16, i32 16, i1 false)
  store i32 2, i32* %row, align 4
  br label %1100

; <label>:1100                                    ; preds = %1146, %1098
  %1101 = load i32* %row, align 4
  %1102 = load i16* @height, align 2
  %1103 = zext i16 %1102 to i32
  %1104 = icmp slt i32 %1101, %1103
  br i1 %1104, label %1105, label %1149

; <label>:1105                                    ; preds = %1100
  store i32 2, i32* %col, align 4
  br label %1106

; <label>:1106                                    ; preds = %1142, %1105
  %1107 = load i32* %col, align 4
  %1108 = load i16* @width, align 2
  %1109 = zext i16 %1108 to i32
  %1110 = icmp slt i32 %1107, %1109
  br i1 %1110, label %1111, label %1145

; <label>:1111                                    ; preds = %1106
  store i32 0, i32* %c, align 4
  br label %1112

; <label>:1112                                    ; preds = %1135, %1111
  %1113 = load i32* %c, align 4
  %1114 = icmp slt i32 %1113, 3
  br i1 %1114, label %1115, label %1138

; <label>:1115                                    ; preds = %1112
  %1116 = load i32* %c, align 4
  %1117 = sext i32 %1116 to i64
  %1118 = load i32* %row, align 4
  %1119 = load i16* @width, align 2
  %1120 = zext i16 %1119 to i32
  %1121 = mul nsw i32 %1118, %1120
  %1122 = load i32* %col, align 4
  %1123 = add nsw i32 %1121, %1122
  %1124 = sext i32 %1123 to i64
  %1125 = load [4 x i16]** @image, align 8
  %1126 = getelementptr inbounds [4 x i16]* %1125, i64 %1124
  %1127 = getelementptr inbounds [4 x i16]* %1126, i32 0, i64 %1117
  %1128 = load i16* %1127, align 2
  %1129 = sext i16 %1128 to i32
  %1130 = load i32* %c, align 4
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %1131
  %1133 = load i32* %1132, align 4
  %1134 = add nsw i32 %1133, %1129
  store i32 %1134, i32* %1132, align 4
  br label %1135

; <label>:1135                                    ; preds = %1115
  %1136 = load i32* %c, align 4
  %1137 = add nsw i32 %1136, 1
  store i32 %1137, i32* %c, align 4
  br label %1112

; <label>:1138                                    ; preds = %1112
  %1139 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %1140 = load i32* %1139, align 4
  %1141 = add nsw i32 %1140, 1
  store i32 %1141, i32* %1139, align 4
  br label %1142

; <label>:1142                                    ; preds = %1138
  %1143 = load i32* %col, align 4
  %1144 = add nsw i32 %1143, 4
  store i32 %1144, i32* %col, align 4
  br label %1106

; <label>:1145                                    ; preds = %1106
  br label %1146

; <label>:1146                                    ; preds = %1145
  %1147 = load i32* %row, align 4
  %1148 = add nsw i32 %1147, 4
  store i32 %1148, i32* %row, align 4
  br label %1100

; <label>:1149                                    ; preds = %1100
  store i32 0, i32* %row, align 4
  br label %1150

; <label>:1150                                    ; preds = %1192, %1149
  %1151 = load i32* %row, align 4
  %1152 = load i16* @height, align 2
  %1153 = zext i16 %1152 to i32
  %1154 = icmp slt i32 %1151, %1153
  br i1 %1154, label %1155, label %1195

; <label>:1155                                    ; preds = %1150
  store i32 0, i32* %c, align 4
  br label %1156

; <label>:1156                                    ; preds = %1188, %1155
  %1157 = load i32* %c, align 4
  %1158 = icmp slt i32 %1157, 3
  br i1 %1158, label %1159, label %1191

; <label>:1159                                    ; preds = %1156
  %1160 = load i32* %c, align 4
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1161
  %1163 = load float* %1162, align 4
  %1164 = fdiv float %1163, 2.000000e+00
  %1165 = fpext float %1164 to double
  %1166 = load i32* %c, align 4
  %1167 = sext i32 %1166 to i64
  %1168 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %1167
  %1169 = load i32* %1168, align 4
  %1170 = sitofp i32 %1169 to double
  %1171 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %1172 = load i32* %1171, align 4
  %1173 = sitofp i32 %1172 to double
  %1174 = fmul double %1173, 1.000000e+02
  %1175 = fdiv double %1170, %1174
  %1176 = fadd double %1165, %1175
  %1177 = load i32* %c, align 4
  %1178 = sext i32 %1177 to i64
  %1179 = load i32* %row, align 4
  %1180 = sext i32 %1179 to i64
  %1181 = load [3 x float]** %black, align 8
  %1182 = getelementptr inbounds [3 x float]* %1181, i64 %1180
  %1183 = getelementptr inbounds [3 x float]* %1182, i32 0, i64 %1178
  %1184 = load float* %1183, align 4
  %1185 = fpext float %1184 to double
  %1186 = fadd double %1185, %1176
  %1187 = fptrunc double %1186 to float
  store float %1187, float* %1183, align 4
  br label %1188

; <label>:1188                                    ; preds = %1159
  %1189 = load i32* %c, align 4
  %1190 = add nsw i32 %1189, 1
  store i32 %1190, i32* %c, align 4
  br label %1156

; <label>:1191                                    ; preds = %1156
  br label %1192

; <label>:1192                                    ; preds = %1191
  %1193 = load i32* %row, align 4
  %1194 = add nsw i32 %1193, 1
  store i32 %1194, i32* %row, align 4
  br label %1150

; <label>:1195                                    ; preds = %1150
  store i32 0, i32* %row, align 4
  br label %1196

; <label>:1196                                    ; preds = %1618, %1195
  %1197 = load i32* %row, align 4
  %1198 = load i16* @height, align 2
  %1199 = zext i16 %1198 to i32
  %1200 = icmp slt i32 %1197, %1199
  br i1 %1200, label %1201, label %1621

; <label>:1201                                    ; preds = %1196
  store i32 0, i32* %i, align 4
  br label %1202

; <label>:1202                                    ; preds = %1242, %1201
  %1203 = load i32* %i, align 4
  %1204 = icmp slt i32 %1203, 6
  br i1 %1204, label %1205, label %1245

; <label>:1205                                    ; preds = %1202
  %1206 = load i32* %i, align 4
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %1209 = getelementptr inbounds [3 x [2 x float]]* %1208, i32 0, i64 0
  %1210 = getelementptr inbounds [2 x float]* %1209, i32 0, i64 %1207
  %1211 = load float* %1210, align 4
  %1212 = fpext float %1211 to double
  %1213 = load i32* %row, align 4
  %1214 = sitofp i32 %1213 to double
  %1215 = load i16* @height, align 2
  %1216 = zext i16 %1215 to i32
  %1217 = sitofp i32 %1216 to double
  %1218 = fsub double %1217, 1.000000e+00
  %1219 = fdiv double %1214, %1218
  %1220 = load i32* %i, align 4
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 2
  %1223 = getelementptr inbounds [3 x [2 x float]]* %1222, i32 0, i64 0
  %1224 = getelementptr inbounds [2 x float]* %1223, i32 0, i64 %1221
  %1225 = load float* %1224, align 4
  %1226 = load i32* %i, align 4
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 1
  %1229 = getelementptr inbounds [3 x [2 x float]]* %1228, i32 0, i64 0
  %1230 = getelementptr inbounds [2 x float]* %1229, i32 0, i64 %1227
  %1231 = load float* %1230, align 4
  %1232 = fsub float %1225, %1231
  %1233 = fpext float %1232 to double
  %1234 = fmul double %1219, %1233
  %1235 = fadd double %1212, %1234
  %1236 = fptrunc double %1235 to float
  %1237 = load i32* %i, align 4
  %1238 = sext i32 %1237 to i64
  %1239 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %1240 = getelementptr inbounds [3 x [2 x float]]* %1239, i32 0, i64 0
  %1241 = getelementptr inbounds [2 x float]* %1240, i32 0, i64 %1238
  store float %1236, float* %1241, align 4
  br label %1242

; <label>:1242                                    ; preds = %1205
  %1243 = load i32* %i, align 4
  %1244 = add nsw i32 %1243, 1
  store i32 %1244, i32* %i, align 4
  br label %1202

; <label>:1245                                    ; preds = %1202
  %1246 = load i32* %row, align 4
  %1247 = load i16* @width, align 2
  %1248 = zext i16 %1247 to i32
  %1249 = mul nsw i32 %1246, %1248
  %1250 = sext i32 %1249 to i64
  %1251 = load [4 x i16]** @image, align 8
  %1252 = getelementptr inbounds [4 x i16]* %1251, i64 %1250
  %1253 = getelementptr inbounds [4 x i16]* %1252, i32 0, i32 0
  store i16* %1253, i16** %pix, align 8
  %1254 = bitcast [3 x i16]* %prev to i8*
  %1255 = load i16** %pix, align 8
  %1256 = bitcast i16* %1255 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1254, i8* %1256, i64 6, i32 2, i1 false)
  %1257 = load i32* %row, align 4
  %1258 = sitofp i32 %1257 to double
  %1259 = load i16* @height, align 2
  %1260 = zext i16 %1259 to i32
  %1261 = sitofp i32 %1260 to double
  %1262 = fsub double %1261, 1.000000e+00
  %1263 = fdiv double %1258, %1262
  %1264 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 2
  %1265 = load i32* %1264, align 4
  %1266 = sub i32 %1265, 1
  %1267 = uitofp i32 %1266 to double
  %1268 = fmul double %1263, %1267
  %1269 = fptrunc double %1268 to float
  store float %1269, float* %frow, align 4
  %1270 = load float* %frow, align 4
  %1271 = fptosi float %1270 to i32
  store i32 %1271, i32* %irow, align 4
  %1272 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 2
  %1273 = load i32* %1272, align 4
  %1274 = sub i32 %1273, 1
  %1275 = icmp eq i32 %1271, %1274
  br i1 %1275, label %1276, label %1279

; <label>:1276                                    ; preds = %1245
  %1277 = load i32* %irow, align 4
  %1278 = add nsw i32 %1277, -1
  store i32 %1278, i32* %irow, align 4
  br label %1279

; <label>:1279                                    ; preds = %1276, %1245
  %1280 = load i32* %irow, align 4
  %1281 = sitofp i32 %1280 to float
  %1282 = load float* %frow, align 4
  %1283 = fsub float %1282, %1281
  store float %1283, float* %frow, align 4
  store i32 0, i32* %i, align 4
  br label %1284

; <label>:1284                                    ; preds = %1338, %1279
  %1285 = load i32* %i, align 4
  %1286 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %1287 = load i32* %1286, align 4
  %1288 = icmp ult i32 %1285, %1287
  br i1 %1288, label %1289, label %1341

; <label>:1289                                    ; preds = %1284
  store i32 0, i32* %c, align 4
  br label %1290

; <label>:1290                                    ; preds = %1334, %1289
  %1291 = load i32* %c, align 4
  %1292 = icmp slt i32 %1291, 3
  br i1 %1292, label %1293, label %1337

; <label>:1293                                    ; preds = %1290
  %1294 = load i32* %c, align 4
  %1295 = sext i32 %1294 to i64
  %1296 = load i32* %irow, align 4
  %1297 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %1298 = load i32* %1297, align 4
  %1299 = mul i32 %1296, %1298
  %1300 = load i32* %i, align 4
  %1301 = add i32 %1299, %1300
  %1302 = zext i32 %1301 to i64
  %1303 = load [3 x float]** %sgain, align 8
  %1304 = getelementptr inbounds [3 x float]* %1303, i64 %1302
  %1305 = getelementptr inbounds [3 x float]* %1304, i32 0, i64 %1295
  %1306 = load float* %1305, align 4
  %1307 = load float* %frow, align 4
  %1308 = fsub float 1.000000e+00, %1307
  %1309 = fmul float %1306, %1308
  %1310 = load i32* %c, align 4
  %1311 = sext i32 %1310 to i64
  %1312 = load i32* %irow, align 4
  %1313 = add nsw i32 %1312, 1
  %1314 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %1315 = load i32* %1314, align 4
  %1316 = mul i32 %1313, %1315
  %1317 = load i32* %i, align 4
  %1318 = add i32 %1316, %1317
  %1319 = zext i32 %1318 to i64
  %1320 = load [3 x float]** %sgain, align 8
  %1321 = getelementptr inbounds [3 x float]* %1320, i64 %1319
  %1322 = getelementptr inbounds [3 x float]* %1321, i32 0, i64 %1311
  %1323 = load float* %1322, align 4
  %1324 = load float* %frow, align 4
  %1325 = fmul float %1323, %1324
  %1326 = fadd float %1309, %1325
  %1327 = load i32* %c, align 4
  %1328 = sext i32 %1327 to i64
  %1329 = load i32* %i, align 4
  %1330 = sext i32 %1329 to i64
  %1331 = load [3 x float]** %sgrow, align 8
  %1332 = getelementptr inbounds [3 x float]* %1331, i64 %1330
  %1333 = getelementptr inbounds [3 x float]* %1332, i32 0, i64 %1328
  store float %1326, float* %1333, align 4
  br label %1334

; <label>:1334                                    ; preds = %1293
  %1335 = load i32* %c, align 4
  %1336 = add nsw i32 %1335, 1
  store i32 %1336, i32* %c, align 4
  br label %1290

; <label>:1337                                    ; preds = %1290
  br label %1338

; <label>:1338                                    ; preds = %1337
  %1339 = load i32* %i, align 4
  %1340 = add nsw i32 %1339, 1
  store i32 %1340, i32* %i, align 4
  br label %1284

; <label>:1341                                    ; preds = %1284
  store i32 0, i32* %col, align 4
  br label %1342

; <label>:1342                                    ; preds = %1614, %1341
  %1343 = load i32* %col, align 4
  %1344 = load i16* @width, align 2
  %1345 = zext i16 %1344 to i32
  %1346 = icmp slt i32 %1343, %1345
  br i1 %1346, label %1347, label %1617

; <label>:1347                                    ; preds = %1342
  store i32 0, i32* %c, align 4
  br label %1348

; <label>:1348                                    ; preds = %1429, %1347
  %1349 = load i32* %c, align 4
  %1350 = icmp slt i32 %1349, 3
  br i1 %1350, label %1351, label %1432

; <label>:1351                                    ; preds = %1348
  %1352 = load i32* %c, align 4
  %1353 = sext i32 %1352 to i64
  %1354 = load i16** %pix, align 8
  %1355 = getelementptr inbounds i16* %1354, i64 %1353
  %1356 = load i16* %1355, align 2
  %1357 = sext i16 %1356 to i32
  %1358 = load i32* %c, align 4
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds [3 x i16]* %prev, i32 0, i64 %1359
  %1361 = load i16* %1360, align 2
  %1362 = sext i16 %1361 to i32
  %1363 = sub nsw i32 %1357, %1362
  store i32 %1363, i32* %diff, align 4
  %1364 = load i32* %c, align 4
  %1365 = sext i32 %1364 to i64
  %1366 = load i16** %pix, align 8
  %1367 = getelementptr inbounds i16* %1366, i64 %1365
  %1368 = load i16* %1367, align 2
  %1369 = load i32* %c, align 4
  %1370 = sext i32 %1369 to i64
  %1371 = getelementptr inbounds [3 x i16]* %prev, i32 0, i64 %1370
  store i16 %1368, i16* %1371, align 2
  %1372 = load i32* %c, align 4
  %1373 = sext i32 %1372 to i64
  %1374 = load i16** %pix, align 8
  %1375 = getelementptr inbounds i16* %1374, i64 %1373
  %1376 = load i16* %1375, align 2
  %1377 = sext i16 %1376 to i32
  %1378 = sitofp i32 %1377 to double
  %1379 = load i32* %diff, align 4
  %1380 = load i32* %diff, align 4
  %1381 = load i32* %diff, align 4
  %1382 = mul nsw i32 %1380, %1381
  %1383 = ashr i32 %1382, 14
  %1384 = add nsw i32 %1379, %1383
  %1385 = sitofp i32 %1384 to float
  %1386 = load float* %cfilt, align 4
  %1387 = fmul float %1385, %1386
  %1388 = load i32* %c, align 4
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %1391 = getelementptr inbounds [3 x [2 x float]]* %1390, i32 0, i64 %1389
  %1392 = getelementptr inbounds [2 x float]* %1391, i32 0, i64 1
  %1393 = load float* %1392, align 4
  %1394 = fsub float %1387, %1393
  %1395 = fpext float %1394 to double
  %1396 = load i32* %c, align 4
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds [3 x [3 x [2 x float]]]* %ddft, i32 0, i64 0
  %1399 = getelementptr inbounds [3 x [2 x float]]* %1398, i32 0, i64 %1397
  %1400 = getelementptr inbounds [2 x float]* %1399, i32 0, i64 0
  %1401 = load float* %1400, align 4
  %1402 = fpext float %1401 to double
  %1403 = load i32* %col, align 4
  %1404 = sitofp i32 %1403 to float
  %1405 = load i16* @width, align 2
  %1406 = zext i16 %1405 to i32
  %1407 = sitofp i32 %1406 to float
  %1408 = fdiv float %1404, %1407
  %1409 = fpext float %1408 to double
  %1410 = fsub double %1409, 5.000000e-01
  %1411 = fmul double %1402, %1410
  %1412 = fsub double %1395, %1411
  %1413 = load i32* %c, align 4
  %1414 = sext i32 %1413 to i64
  %1415 = load i32* %row, align 4
  %1416 = sext i32 %1415 to i64
  %1417 = load [3 x float]** %black, align 8
  %1418 = getelementptr inbounds [3 x float]* %1417, i64 %1416
  %1419 = getelementptr inbounds [3 x float]* %1418, i32 0, i64 %1414
  %1420 = load float* %1419, align 4
  %1421 = fpext float %1420 to double
  %1422 = fsub double %1412, %1421
  %1423 = call double @floor(double %1422) #9
  %1424 = fadd double %1378, %1423
  %1425 = fptosi double %1424 to i32
  %1426 = load i32* %c, align 4
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1427
  store i32 %1425, i32* %1428, align 4
  br label %1429

; <label>:1429                                    ; preds = %1351
  %1430 = load i32* %c, align 4
  %1431 = add nsw i32 %1430, 1
  store i32 %1431, i32* %c, align 4
  br label %1348

; <label>:1432                                    ; preds = %1348
  store i32 0, i32* %c, align 4
  br label %1433

; <label>:1433                                    ; preds = %1485, %1432
  %1434 = load i32* %c, align 4
  %1435 = icmp slt i32 %1434, 3
  br i1 %1435, label %1436, label %1488

; <label>:1436                                    ; preds = %1433
  %1437 = load i32* %c, align 4
  %1438 = sext i32 %1437 to i64
  %1439 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1438
  %1440 = load i32* %1439, align 4
  %1441 = load i32* %c, align 4
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1442
  %1444 = load i32* %1443, align 4
  %1445 = mul nsw i32 %1440, %1444
  %1446 = ashr i32 %1445, 14
  %1447 = load i32* %c, align 4
  %1448 = sext i32 %1447 to i64
  %1449 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 0
  %1450 = getelementptr inbounds [3 x i32]* %1449, i32 0, i64 %1448
  store i32 %1446, i32* %1450, align 4
  %1451 = load i32* %c, align 4
  %1452 = sext i32 %1451 to i64
  %1453 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1452
  %1454 = load i32* %1453, align 4
  %1455 = load i32* %c, align 4
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 0
  %1458 = getelementptr inbounds [3 x i32]* %1457, i32 0, i64 %1456
  %1459 = load i32* %1458, align 4
  %1460 = mul nsw i32 %1454, %1459
  %1461 = ashr i32 %1460, 14
  %1462 = load i32* %c, align 4
  %1463 = sext i32 %1462 to i64
  %1464 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 2
  %1465 = getelementptr inbounds [3 x i32]* %1464, i32 0, i64 %1463
  store i32 %1461, i32* %1465, align 4
  %1466 = load i32* %c, align 4
  %1467 = add nsw i32 %1466, 1
  %1468 = srem i32 %1467, 3
  %1469 = sext i32 %1468 to i64
  %1470 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1469
  %1471 = load i32* %1470, align 4
  %1472 = load i32* %c, align 4
  %1473 = add nsw i32 %1472, 2
  %1474 = srem i32 %1473, 3
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1475
  %1477 = load i32* %1476, align 4
  %1478 = mul nsw i32 %1471, %1477
  %1479 = ashr i32 %1478, 14
  %1480 = load i32* %c, align 4
  %1481 = sub nsw i32 2, %1480
  %1482 = sext i32 %1481 to i64
  %1483 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 1
  %1484 = getelementptr inbounds [3 x i32]* %1483, i32 0, i64 %1482
  store i32 %1479, i32* %1484, align 4
  br label %1485

; <label>:1485                                    ; preds = %1436
  %1486 = load i32* %c, align 4
  %1487 = add nsw i32 %1486, 1
  store i32 %1487, i32* %c, align 4
  br label %1433

; <label>:1488                                    ; preds = %1433
  store i32 0, i32* %c, align 4
  br label %1489

; <label>:1489                                    ; preds = %1608, %1488
  %1490 = load i32* %c, align 4
  %1491 = icmp slt i32 %1490, 3
  br i1 %1491, label %1492, label %1611

; <label>:1492                                    ; preds = %1489
  store i32 0, i32* %i, align 4
  store float 0.000000e+00, float* %val, align 4
  br label %1493

; <label>:1493                                    ; preds = %1526, %1492
  %1494 = load i32* %i, align 4
  %1495 = icmp slt i32 %1494, 3
  br i1 %1495, label %1496, label %1529

; <label>:1496                                    ; preds = %1493
  store i32 0, i32* %j, align 4
  br label %1497

; <label>:1497                                    ; preds = %1522, %1496
  %1498 = load i32* %j, align 4
  %1499 = icmp slt i32 %1498, 3
  br i1 %1499, label %1500, label %1525

; <label>:1500                                    ; preds = %1497
  %1501 = load i32* %j, align 4
  %1502 = sext i32 %1501 to i64
  %1503 = load i32* %i, align 4
  %1504 = sext i32 %1503 to i64
  %1505 = load i32* %c, align 4
  %1506 = sext i32 %1505 to i64
  %1507 = getelementptr inbounds [3 x [3 x [3 x float]]]* %ppm, i32 0, i64 %1506
  %1508 = getelementptr inbounds [3 x [3 x float]]* %1507, i32 0, i64 %1504
  %1509 = getelementptr inbounds [3 x float]* %1508, i32 0, i64 %1502
  %1510 = load float* %1509, align 4
  %1511 = load i32* %j, align 4
  %1512 = sext i32 %1511 to i64
  %1513 = load i32* %i, align 4
  %1514 = sext i32 %1513 to i64
  %1515 = getelementptr inbounds [3 x [3 x i32]]* %work, i32 0, i64 %1514
  %1516 = getelementptr inbounds [3 x i32]* %1515, i32 0, i64 %1512
  %1517 = load i32* %1516, align 4
  %1518 = sitofp i32 %1517 to float
  %1519 = fmul float %1510, %1518
  %1520 = load float* %val, align 4
  %1521 = fadd float %1520, %1519
  store float %1521, float* %val, align 4
  br label %1522

; <label>:1522                                    ; preds = %1500
  %1523 = load i32* %j, align 4
  %1524 = add nsw i32 %1523, 1
  store i32 %1524, i32* %j, align 4
  br label %1497

; <label>:1525                                    ; preds = %1497
  br label %1526

; <label>:1526                                    ; preds = %1525
  %1527 = load i32* %i, align 4
  %1528 = add nsw i32 %1527, 1
  store i32 %1528, i32* %i, align 4
  br label %1493

; <label>:1529                                    ; preds = %1493
  %1530 = load i32* %c, align 4
  %1531 = sext i32 %1530 to i64
  %1532 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1531
  %1533 = load i32* %1532, align 4
  %1534 = sitofp i32 %1533 to double
  %1535 = load float* %val, align 4
  %1536 = fpext float %1535 to double
  %1537 = call double @floor(double %1536) #9
  %1538 = fadd double %1534, %1537
  %1539 = load i32* %c, align 4
  %1540 = sext i32 %1539 to i64
  %1541 = load i32* %col, align 4
  %1542 = load i32* %sgx, align 4
  %1543 = sdiv i32 %1541, %1542
  %1544 = sext i32 %1543 to i64
  %1545 = load [3 x float]** %sgrow, align 8
  %1546 = getelementptr inbounds [3 x float]* %1545, i64 %1544
  %1547 = getelementptr inbounds [3 x float]* %1546, i32 0, i64 %1540
  %1548 = load float* %1547, align 4
  %1549 = load i32* %sgx, align 4
  %1550 = load i32* %col, align 4
  %1551 = load i32* %sgx, align 4
  %1552 = srem i32 %1550, %1551
  %1553 = sub nsw i32 %1549, %1552
  %1554 = sitofp i32 %1553 to float
  %1555 = fmul float %1548, %1554
  %1556 = load i32* %c, align 4
  %1557 = sext i32 %1556 to i64
  %1558 = load i32* %col, align 4
  %1559 = load i32* %sgx, align 4
  %1560 = sdiv i32 %1558, %1559
  %1561 = add nsw i32 %1560, 1
  %1562 = sext i32 %1561 to i64
  %1563 = load [3 x float]** %sgrow, align 8
  %1564 = getelementptr inbounds [3 x float]* %1563, i64 %1562
  %1565 = getelementptr inbounds [3 x float]* %1564, i32 0, i64 %1557
  %1566 = load float* %1565, align 4
  %1567 = load i32* %col, align 4
  %1568 = load i32* %sgx, align 4
  %1569 = srem i32 %1567, %1568
  %1570 = sitofp i32 %1569 to float
  %1571 = fmul float %1566, %1570
  %1572 = fadd float %1555, %1571
  %1573 = fpext float %1572 to double
  %1574 = fmul double %1538, %1573
  %1575 = load i32* %sgx, align 4
  %1576 = sitofp i32 %1575 to double
  %1577 = fdiv double %1574, %1576
  %1578 = load i32* %c, align 4
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %1579
  %1581 = load float* %1580, align 4
  %1582 = fpext float %1581 to double
  %1583 = fdiv double %1577, %1582
  %1584 = call double @floor(double %1583) #9
  %1585 = fptosi double %1584 to i32
  %1586 = load i32* %c, align 4
  %1587 = sext i32 %1586 to i64
  %1588 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1587
  store i32 %1585, i32* %1588, align 4
  %1589 = load i32* %c, align 4
  %1590 = sext i32 %1589 to i64
  %1591 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1590
  %1592 = load i32* %1591, align 4
  %1593 = icmp sgt i32 %1592, 32000
  br i1 %1593, label %1594, label %1598

; <label>:1594                                    ; preds = %1529
  %1595 = load i32* %c, align 4
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1596
  store i32 32000, i32* %1597, align 4
  br label %1598

; <label>:1598                                    ; preds = %1594, %1529
  %1599 = load i32* %c, align 4
  %1600 = sext i32 %1599 to i64
  %1601 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %1600
  %1602 = load i32* %1601, align 4
  %1603 = trunc i32 %1602 to i16
  %1604 = load i32* %c, align 4
  %1605 = sext i32 %1604 to i64
  %1606 = load i16** %pix, align 8
  %1607 = getelementptr inbounds i16* %1606, i64 %1605
  store i16 %1603, i16* %1607, align 2
  br label %1608

; <label>:1608                                    ; preds = %1598
  %1609 = load i32* %c, align 4
  %1610 = add nsw i32 %1609, 1
  store i32 %1610, i32* %c, align 4
  br label %1489

; <label>:1611                                    ; preds = %1489
  %1612 = load i16** %pix, align 8
  %1613 = getelementptr inbounds i16* %1612, i64 4
  store i16* %1613, i16** %pix, align 8
  br label %1614

; <label>:1614                                    ; preds = %1611
  %1615 = load i32* %col, align 4
  %1616 = add nsw i32 %1615, 1
  store i32 %1616, i32* %col, align 4
  br label %1342

; <label>:1617                                    ; preds = %1342
  br label %1618

; <label>:1618                                    ; preds = %1617
  %1619 = load i32* %row, align 4
  %1620 = add nsw i32 %1619, 1
  store i32 %1620, i32* %row, align 4
  br label %1196

; <label>:1621                                    ; preds = %1196
  %1622 = load [3 x float]** %black, align 8
  %1623 = bitcast [3 x float]* %1622 to i8*
  call void @free(i8* %1623) #4
  %1624 = load [3 x float]** %sgrow, align 8
  %1625 = bitcast [3 x float]* %1624 to i8*
  call void @free(i8* %1625) #4
  %1626 = load [3 x float]** %sgain, align 8
  %1627 = bitcast [3 x float]* %1626 to i8*
  call void @free(i8* %1627) #4
  %1628 = getelementptr inbounds [3 x i32]* %dim, i32 0, i32 0
  %1629 = call i8* @foveon_camf_matrix(i32* %1628, i8* getelementptr inbounds ([10 x i8]* @.str57, i32 0, i32 0))
  %1630 = bitcast i8* %1629 to i32*
  store i32* %1630, i32** %badpix, align 8
  %1631 = icmp ne i32* %1630, null
  br i1 %1631, label %1632, label %1776

; <label>:1632                                    ; preds = %1621
  store i32 0, i32* %i, align 4
  br label %1633

; <label>:1633                                    ; preds = %1770, %1632
  %1634 = load i32* %i, align 4
  %1635 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 0
  %1636 = load i32* %1635, align 4
  %1637 = icmp ult i32 %1634, %1636
  br i1 %1637, label %1638, label %1773

; <label>:1638                                    ; preds = %1633
  %1639 = load i32* %i, align 4
  %1640 = sext i32 %1639 to i64
  %1641 = load i32** %badpix, align 8
  %1642 = getelementptr inbounds i32* %1641, i64 %1640
  %1643 = load i32* %1642, align 4
  %1644 = lshr i32 %1643, 8
  %1645 = and i32 %1644, 4095
  %1646 = getelementptr inbounds [4 x i32]* %keep, i32 0, i64 0
  %1647 = load i32* %1646, align 4
  %1648 = sub i32 %1645, %1647
  store i32 %1648, i32* %col, align 4
  %1649 = load i32* %i, align 4
  %1650 = sext i32 %1649 to i64
  %1651 = load i32** %badpix, align 8
  %1652 = getelementptr inbounds i32* %1651, i64 %1650
  %1653 = load i32* %1652, align 4
  %1654 = lshr i32 %1653, 20
  %1655 = getelementptr inbounds [4 x i32]* %keep, i32 0, i64 1
  %1656 = load i32* %1655, align 4
  %1657 = sub i32 %1654, %1656
  store i32 %1657, i32* %row, align 4
  %1658 = load i32* %row, align 4
  %1659 = sub nsw i32 %1658, 1
  %1660 = load i16* @height, align 2
  %1661 = zext i16 %1660 to i32
  %1662 = sub nsw i32 %1661, 3
  %1663 = icmp ugt i32 %1659, %1662
  br i1 %1663, label %1671, label %1664

; <label>:1664                                    ; preds = %1638
  %1665 = load i32* %col, align 4
  %1666 = sub nsw i32 %1665, 1
  %1667 = load i16* @width, align 2
  %1668 = zext i16 %1667 to i32
  %1669 = sub nsw i32 %1668, 3
  %1670 = icmp ugt i32 %1666, %1669
  br i1 %1670, label %1671, label %1672

; <label>:1671                                    ; preds = %1664, %1638
  br label %1770

; <label>:1672                                    ; preds = %1664
  %1673 = bitcast [3 x float]* %fsum to i8*
  call void @llvm.memset.p0i8.i64(i8* %1673, i8 0, i64 12, i32 4, i1 false)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %sum, align 4
  br label %1674

; <label>:1674                                    ; preds = %1734, %1672
  %1675 = load i32* %j, align 4
  %1676 = icmp slt i32 %1675, 8
  br i1 %1676, label %1677, label %1737

; <label>:1677                                    ; preds = %1674
  %1678 = load i32* %i, align 4
  %1679 = sext i32 %1678 to i64
  %1680 = load i32** %badpix, align 8
  %1681 = getelementptr inbounds i32* %1680, i64 %1679
  %1682 = load i32* %1681, align 4
  %1683 = load i32* %j, align 4
  %1684 = shl i32 1, %1683
  %1685 = and i32 %1682, %1684
  %1686 = icmp ne i32 %1685, 0
  br i1 %1686, label %1687, label %1733

; <label>:1687                                    ; preds = %1677
  store i32 0, i32* %c, align 4
  br label %1688

; <label>:1688                                    ; preds = %1727, %1687
  %1689 = load i32* %c, align 4
  %1690 = icmp slt i32 %1689, 3
  br i1 %1690, label %1691, label %1730

; <label>:1691                                    ; preds = %1688
  %1692 = load i32* %c, align 4
  %1693 = sext i32 %1692 to i64
  %1694 = load i32* %row, align 4
  %1695 = load i32* %j, align 4
  %1696 = mul nsw i32 %1695, 2
  %1697 = sext i32 %1696 to i64
  %1698 = getelementptr inbounds [16 x i16]* @foveon_interpolate.hood, i32 0, i64 %1697
  %1699 = load i16* %1698, align 2
  %1700 = sext i16 %1699 to i32
  %1701 = add nsw i32 %1694, %1700
  %1702 = load i16* @width, align 2
  %1703 = zext i16 %1702 to i32
  %1704 = mul nsw i32 %1701, %1703
  %1705 = load i32* %col, align 4
  %1706 = add nsw i32 %1704, %1705
  %1707 = load i32* %j, align 4
  %1708 = mul nsw i32 %1707, 2
  %1709 = add nsw i32 %1708, 1
  %1710 = sext i32 %1709 to i64
  %1711 = getelementptr inbounds [16 x i16]* @foveon_interpolate.hood, i32 0, i64 %1710
  %1712 = load i16* %1711, align 2
  %1713 = sext i16 %1712 to i32
  %1714 = add nsw i32 %1706, %1713
  %1715 = sext i32 %1714 to i64
  %1716 = load [4 x i16]** @image, align 8
  %1717 = getelementptr inbounds [4 x i16]* %1716, i64 %1715
  %1718 = getelementptr inbounds [4 x i16]* %1717, i32 0, i64 %1693
  %1719 = load i16* %1718, align 2
  %1720 = sext i16 %1719 to i32
  %1721 = sitofp i32 %1720 to float
  %1722 = load i32* %c, align 4
  %1723 = sext i32 %1722 to i64
  %1724 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1723
  %1725 = load float* %1724, align 4
  %1726 = fadd float %1725, %1721
  store float %1726, float* %1724, align 4
  br label %1727

; <label>:1727                                    ; preds = %1691
  %1728 = load i32* %c, align 4
  %1729 = add nsw i32 %1728, 1
  store i32 %1729, i32* %c, align 4
  br label %1688

; <label>:1730                                    ; preds = %1688
  %1731 = load i32* %sum, align 4
  %1732 = add nsw i32 %1731, 1
  store i32 %1732, i32* %sum, align 4
  br label %1733

; <label>:1733                                    ; preds = %1730, %1677
  br label %1734

; <label>:1734                                    ; preds = %1733
  %1735 = load i32* %j, align 4
  %1736 = add nsw i32 %1735, 1
  store i32 %1736, i32* %j, align 4
  br label %1674

; <label>:1737                                    ; preds = %1674
  %1738 = load i32* %sum, align 4
  %1739 = icmp ne i32 %1738, 0
  br i1 %1739, label %1740, label %1769

; <label>:1740                                    ; preds = %1737
  store i32 0, i32* %c, align 4
  br label %1741

; <label>:1741                                    ; preds = %1765, %1740
  %1742 = load i32* %c, align 4
  %1743 = icmp slt i32 %1742, 3
  br i1 %1743, label %1744, label %1768

; <label>:1744                                    ; preds = %1741
  %1745 = load i32* %c, align 4
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr inbounds [3 x float]* %fsum, i32 0, i64 %1746
  %1748 = load float* %1747, align 4
  %1749 = load i32* %sum, align 4
  %1750 = sitofp i32 %1749 to float
  %1751 = fdiv float %1748, %1750
  %1752 = fptosi float %1751 to i16
  %1753 = load i32* %c, align 4
  %1754 = sext i32 %1753 to i64
  %1755 = load i32* %row, align 4
  %1756 = load i16* @width, align 2
  %1757 = zext i16 %1756 to i32
  %1758 = mul nsw i32 %1755, %1757
  %1759 = load i32* %col, align 4
  %1760 = add nsw i32 %1758, %1759
  %1761 = sext i32 %1760 to i64
  %1762 = load [4 x i16]** @image, align 8
  %1763 = getelementptr inbounds [4 x i16]* %1762, i64 %1761
  %1764 = getelementptr inbounds [4 x i16]* %1763, i32 0, i64 %1754
  store i16 %1752, i16* %1764, align 2
  br label %1765

; <label>:1765                                    ; preds = %1744
  %1766 = load i32* %c, align 4
  %1767 = add nsw i32 %1766, 1
  store i32 %1767, i32* %c, align 4
  br label %1741

; <label>:1768                                    ; preds = %1741
  br label %1769

; <label>:1769                                    ; preds = %1768, %1737
  br label %1770

; <label>:1770                                    ; preds = %1769, %1671
  %1771 = load i32* %i, align 4
  %1772 = add nsw i32 %1771, 1
  store i32 %1772, i32* %i, align 4
  br label %1633

; <label>:1773                                    ; preds = %1633
  %1774 = load i32** %badpix, align 8
  %1775 = bitcast i32* %1774 to i8*
  call void @free(i8* %1775) #4
  br label %1776

; <label>:1776                                    ; preds = %1773, %1621
  %1777 = load i16* @width, align 2
  %1778 = zext i16 %1777 to i32
  %1779 = mul nsw i32 %1778, 5
  %1780 = sext i32 %1779 to i64
  %1781 = call noalias i8* @calloc(i64 %1780, i64 12) #4
  %1782 = bitcast i8* %1781 to [3 x i32]*
  %1783 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  store [3 x i32]* %1782, [3 x i32]** %1783, align 8
  %1784 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  %1785 = load [3 x i32]** %1784, align 8
  %1786 = bitcast [3 x i32]* %1785 to i8*
  call void @merror(i8* %1786, i8* getelementptr inbounds ([21 x i8]* @.str58, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %1787

; <label>:1787                                    ; preds = %1802, %1776
  %1788 = load i32* %i, align 4
  %1789 = icmp slt i32 %1788, 5
  br i1 %1789, label %1790, label %1805

; <label>:1790                                    ; preds = %1787
  %1791 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  %1792 = load [3 x i32]** %1791, align 8
  %1793 = load i32* %i, align 4
  %1794 = load i16* @width, align 2
  %1795 = zext i16 %1794 to i32
  %1796 = mul nsw i32 %1793, %1795
  %1797 = sext i32 %1796 to i64
  %1798 = getelementptr inbounds [3 x i32]* %1792, i64 %1797
  %1799 = load i32* %i, align 4
  %1800 = sext i32 %1799 to i64
  %1801 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1800
  store [3 x i32]* %1798, [3 x i32]** %1801, align 8
  br label %1802

; <label>:1802                                    ; preds = %1790
  %1803 = load i32* %i, align 4
  %1804 = add nsw i32 %1803, 1
  store i32 %1804, i32* %i, align 4
  br label %1787

; <label>:1805                                    ; preds = %1787
  store i32 -1, i32* %smlast, align 4
  store i32 2, i32* %row, align 4
  br label %1806

; <label>:1806                                    ; preds = %1989, %1805
  %1807 = load i32* %row, align 4
  %1808 = load i16* @height, align 2
  %1809 = zext i16 %1808 to i32
  %1810 = sub nsw i32 %1809, 2
  %1811 = icmp slt i32 %1807, %1810
  br i1 %1811, label %1812, label %1992

; <label>:1812                                    ; preds = %1806
  br label %1813

; <label>:1813                                    ; preds = %1892, %1812
  %1814 = load i32* %smlast, align 4
  %1815 = load i32* %row, align 4
  %1816 = add nsw i32 %1815, 2
  %1817 = icmp slt i32 %1814, %1816
  br i1 %1817, label %1818, label %1893

; <label>:1818                                    ; preds = %1813
  store i32 0, i32* %i, align 4
  br label %1819

; <label>:1819                                    ; preds = %1832, %1818
  %1820 = load i32* %i, align 4
  %1821 = icmp slt i32 %1820, 6
  br i1 %1821, label %1822, label %1835

; <label>:1822                                    ; preds = %1819
  %1823 = load i32* %i, align 4
  %1824 = sext i32 %1823 to i64
  %1825 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1824
  %1826 = load [3 x i32]** %1825, align 8
  %1827 = load i32* %i, align 4
  %1828 = add nsw i32 %1827, 5
  %1829 = srem i32 %1828, 6
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %1830
  store [3 x i32]* %1826, [3 x i32]** %1831, align 8
  br label %1832

; <label>:1832                                    ; preds = %1822
  %1833 = load i32* %i, align 4
  %1834 = add nsw i32 %1833, 1
  store i32 %1834, i32* %i, align 4
  br label %1819

; <label>:1835                                    ; preds = %1819
  %1836 = load i32* %smlast, align 4
  %1837 = add nsw i32 %1836, 1
  store i32 %1837, i32* %smlast, align 4
  %1838 = load i16* @width, align 2
  %1839 = zext i16 %1838 to i32
  %1840 = mul nsw i32 %1837, %1839
  %1841 = add nsw i32 %1840, 2
  %1842 = sext i32 %1841 to i64
  %1843 = load [4 x i16]** @image, align 8
  %1844 = getelementptr inbounds [4 x i16]* %1843, i64 %1842
  %1845 = getelementptr inbounds [4 x i16]* %1844, i32 0, i32 0
  store i16* %1845, i16** %pix, align 8
  store i32 2, i32* %col, align 4
  br label %1846

; <label>:1846                                    ; preds = %1889, %1835
  %1847 = load i32* %col, align 4
  %1848 = load i16* @width, align 2
  %1849 = zext i16 %1848 to i32
  %1850 = sub nsw i32 %1849, 2
  %1851 = icmp slt i32 %1847, %1850
  br i1 %1851, label %1852, label %1892

; <label>:1852                                    ; preds = %1846
  %1853 = load i16** %pix, align 8
  %1854 = getelementptr inbounds i16* %1853, i64 0
  %1855 = load i16* %1854, align 2
  %1856 = sext i16 %1855 to i32
  %1857 = mul nsw i32 %1856, 6
  %1858 = load i16** %pix, align 8
  %1859 = getelementptr inbounds i16* %1858, i64 -4
  %1860 = load i16* %1859, align 2
  %1861 = sext i16 %1860 to i32
  %1862 = load i16** %pix, align 8
  %1863 = getelementptr inbounds i16* %1862, i64 4
  %1864 = load i16* %1863, align 2
  %1865 = sext i16 %1864 to i32
  %1866 = add nsw i32 %1861, %1865
  %1867 = mul nsw i32 %1866, 4
  %1868 = add nsw i32 %1857, %1867
  %1869 = load i16** %pix, align 8
  %1870 = getelementptr inbounds i16* %1869, i64 -8
  %1871 = load i16* %1870, align 2
  %1872 = sext i16 %1871 to i32
  %1873 = add nsw i32 %1868, %1872
  %1874 = load i16** %pix, align 8
  %1875 = getelementptr inbounds i16* %1874, i64 8
  %1876 = load i16* %1875, align 2
  %1877 = sext i16 %1876 to i32
  %1878 = add nsw i32 %1873, %1877
  %1879 = add nsw i32 %1878, 8
  %1880 = ashr i32 %1879, 4
  %1881 = load i32* %col, align 4
  %1882 = sext i32 %1881 to i64
  %1883 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %1884 = load [3 x i32]** %1883, align 8
  %1885 = getelementptr inbounds [3 x i32]* %1884, i64 %1882
  %1886 = getelementptr inbounds [3 x i32]* %1885, i32 0, i64 0
  store i32 %1880, i32* %1886, align 4
  %1887 = load i16** %pix, align 8
  %1888 = getelementptr inbounds i16* %1887, i64 4
  store i16* %1888, i16** %pix, align 8
  br label %1889

; <label>:1889                                    ; preds = %1852
  %1890 = load i32* %col, align 4
  %1891 = add nsw i32 %1890, 1
  store i32 %1891, i32* %col, align 4
  br label %1846

; <label>:1892                                    ; preds = %1846
  br label %1813

; <label>:1893                                    ; preds = %1813
  %1894 = load i32* %row, align 4
  %1895 = load i16* @width, align 2
  %1896 = zext i16 %1895 to i32
  %1897 = mul nsw i32 %1894, %1896
  %1898 = add nsw i32 %1897, 2
  %1899 = sext i32 %1898 to i64
  %1900 = load [4 x i16]** @image, align 8
  %1901 = getelementptr inbounds [4 x i16]* %1900, i64 %1899
  %1902 = getelementptr inbounds [4 x i16]* %1901, i32 0, i32 0
  store i16* %1902, i16** %pix, align 8
  store i32 2, i32* %col, align 4
  br label %1903

; <label>:1903                                    ; preds = %1985, %1893
  %1904 = load i32* %col, align 4
  %1905 = load i16* @width, align 2
  %1906 = zext i16 %1905 to i32
  %1907 = sub nsw i32 %1906, 2
  %1908 = icmp slt i32 %1904, %1907
  br i1 %1908, label %1909, label %1988

; <label>:1909                                    ; preds = %1903
  %1910 = load i32* %col, align 4
  %1911 = sext i32 %1910 to i64
  %1912 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %1913 = load [3 x i32]** %1912, align 8
  %1914 = getelementptr inbounds [3 x i32]* %1913, i64 %1911
  %1915 = getelementptr inbounds [3 x i32]* %1914, i32 0, i64 0
  %1916 = load i32* %1915, align 4
  %1917 = mul nsw i32 6, %1916
  %1918 = load i32* %col, align 4
  %1919 = sext i32 %1918 to i64
  %1920 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %1921 = load [3 x i32]** %1920, align 8
  %1922 = getelementptr inbounds [3 x i32]* %1921, i64 %1919
  %1923 = getelementptr inbounds [3 x i32]* %1922, i32 0, i64 0
  %1924 = load i32* %1923, align 4
  %1925 = load i32* %col, align 4
  %1926 = sext i32 %1925 to i64
  %1927 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 3
  %1928 = load [3 x i32]** %1927, align 8
  %1929 = getelementptr inbounds [3 x i32]* %1928, i64 %1926
  %1930 = getelementptr inbounds [3 x i32]* %1929, i32 0, i64 0
  %1931 = load i32* %1930, align 4
  %1932 = add nsw i32 %1924, %1931
  %1933 = mul nsw i32 4, %1932
  %1934 = add nsw i32 %1917, %1933
  %1935 = load i32* %col, align 4
  %1936 = sext i32 %1935 to i64
  %1937 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 0
  %1938 = load [3 x i32]** %1937, align 8
  %1939 = getelementptr inbounds [3 x i32]* %1938, i64 %1936
  %1940 = getelementptr inbounds [3 x i32]* %1939, i32 0, i64 0
  %1941 = load i32* %1940, align 4
  %1942 = add nsw i32 %1934, %1941
  %1943 = load i32* %col, align 4
  %1944 = sext i32 %1943 to i64
  %1945 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %1946 = load [3 x i32]** %1945, align 8
  %1947 = getelementptr inbounds [3 x i32]* %1946, i64 %1944
  %1948 = getelementptr inbounds [3 x i32]* %1947, i32 0, i64 0
  %1949 = load i32* %1948, align 4
  %1950 = add nsw i32 %1942, %1949
  %1951 = add nsw i32 %1950, 8
  %1952 = ashr i32 %1951, 4
  store i32 %1952, i32* %smred, align 4
  %1953 = load i32* %col, align 4
  %1954 = icmp eq i32 %1953, 2
  br i1 %1954, label %1955, label %1957

; <label>:1955                                    ; preds = %1909
  %1956 = load i32* %smred, align 4
  store i32 %1956, i32* %smred_p, align 4
  br label %1957

; <label>:1957                                    ; preds = %1955, %1909
  %1958 = load i16** %pix, align 8
  %1959 = getelementptr inbounds i16* %1958, i64 0
  %1960 = load i16* %1959, align 2
  %1961 = sext i16 %1960 to i32
  %1962 = load i16** %pix, align 8
  %1963 = getelementptr inbounds i16* %1962, i64 0
  %1964 = load i16* %1963, align 2
  %1965 = sext i16 %1964 to i32
  %1966 = load i32* %smred, align 4
  %1967 = mul nsw i32 %1966, 7
  %1968 = load i32* %smred_p, align 4
  %1969 = add nsw i32 %1967, %1968
  %1970 = ashr i32 %1969, 3
  %1971 = sub nsw i32 %1965, %1970
  %1972 = ashr i32 %1971, 3
  %1973 = add nsw i32 %1961, %1972
  store i32 %1973, i32* %i, align 4
  %1974 = load i32* %i, align 4
  %1975 = icmp sgt i32 %1974, 32000
  br i1 %1975, label %1976, label %1977

; <label>:1976                                    ; preds = %1957
  store i32 32000, i32* %i, align 4
  br label %1977

; <label>:1977                                    ; preds = %1976, %1957
  %1978 = load i32* %i, align 4
  %1979 = trunc i32 %1978 to i16
  %1980 = load i16** %pix, align 8
  %1981 = getelementptr inbounds i16* %1980, i64 0
  store i16 %1979, i16* %1981, align 2
  %1982 = load i32* %smred, align 4
  store i32 %1982, i32* %smred_p, align 4
  %1983 = load i16** %pix, align 8
  %1984 = getelementptr inbounds i16* %1983, i64 4
  store i16* %1984, i16** %pix, align 8
  br label %1985

; <label>:1985                                    ; preds = %1977
  %1986 = load i32* %col, align 4
  %1987 = add nsw i32 %1986, 1
  store i32 %1987, i32* %col, align 4
  br label %1903

; <label>:1988                                    ; preds = %1903
  br label %1989

; <label>:1989                                    ; preds = %1988
  %1990 = load i32* %row, align 4
  %1991 = add nsw i32 %1990, 1
  store i32 %1991, i32* %row, align 4
  br label %1806

; <label>:1992                                    ; preds = %1806
  store i32 65535, i32* %min, align 4
  store i32 0, i32* %c, align 4
  br label %1993

; <label>:1993                                    ; preds = %2014, %1992
  %1994 = load i32* %c, align 4
  %1995 = icmp slt i32 %1994, 3
  br i1 %1995, label %1996, label %2017

; <label>:1996                                    ; preds = %1993
  %1997 = load i32* %c, align 4
  %1998 = sext i32 %1997 to i64
  %1999 = getelementptr inbounds [3 x i32]* %satlev, i32 0, i64 %1998
  %2000 = load i32* %1999, align 4
  %2001 = sitofp i32 %2000 to float
  %2002 = load i32* %c, align 4
  %2003 = sext i32 %2002 to i64
  %2004 = getelementptr inbounds [3 x float]* %div, i32 0, i64 %2003
  %2005 = load float* %2004, align 4
  %2006 = fdiv float %2001, %2005
  %2007 = fptosi float %2006 to i32
  store i32 %2007, i32* %i, align 4
  %2008 = load i32* %min, align 4
  %2009 = load i32* %i, align 4
  %2010 = icmp sgt i32 %2008, %2009
  br i1 %2010, label %2011, label %2013

; <label>:2011                                    ; preds = %1996
  %2012 = load i32* %i, align 4
  store i32 %2012, i32* %min, align 4
  br label %2013

; <label>:2013                                    ; preds = %2011, %1996
  br label %2014

; <label>:2014                                    ; preds = %2013
  %2015 = load i32* %c, align 4
  %2016 = add nsw i32 %2015, 1
  store i32 %2016, i32* %c, align 4
  br label %1993

; <label>:2017                                    ; preds = %1993
  %2018 = load i32* %min, align 4
  %2019 = mul nsw i32 %2018, 9
  %2020 = ashr i32 %2019, 4
  store i32 %2020, i32* %limit, align 4
  %2021 = load [4 x i16]** @image, align 8
  %2022 = getelementptr inbounds [4 x i16]* %2021, i64 0
  %2023 = getelementptr inbounds [4 x i16]* %2022, i32 0, i32 0
  store i16* %2023, i16** %pix, align 8
  br label %2024

; <label>:2024                                    ; preds = %2161, %2017
  %2025 = load i16** %pix, align 8
  %2026 = load i16* @height, align 2
  %2027 = zext i16 %2026 to i32
  %2028 = load i16* @width, align 2
  %2029 = zext i16 %2028 to i32
  %2030 = mul nsw i32 %2027, %2029
  %2031 = sext i32 %2030 to i64
  %2032 = load [4 x i16]** @image, align 8
  %2033 = getelementptr inbounds [4 x i16]* %2032, i64 %2031
  %2034 = getelementptr inbounds [4 x i16]* %2033, i32 0, i32 0
  %2035 = icmp ult i16* %2025, %2034
  br i1 %2035, label %2036, label %2164

; <label>:2036                                    ; preds = %2024
  %2037 = load i16** %pix, align 8
  %2038 = getelementptr inbounds i16* %2037, i64 0
  %2039 = load i16* %2038, align 2
  %2040 = sext i16 %2039 to i32
  %2041 = load i32* %limit, align 4
  %2042 = icmp sle i32 %2040, %2041
  br i1 %2042, label %2057, label %2043

; <label>:2043                                    ; preds = %2036
  %2044 = load i16** %pix, align 8
  %2045 = getelementptr inbounds i16* %2044, i64 1
  %2046 = load i16* %2045, align 2
  %2047 = sext i16 %2046 to i32
  %2048 = load i32* %limit, align 4
  %2049 = icmp sle i32 %2047, %2048
  br i1 %2049, label %2057, label %2050

; <label>:2050                                    ; preds = %2043
  %2051 = load i16** %pix, align 8
  %2052 = getelementptr inbounds i16* %2051, i64 2
  %2053 = load i16* %2052, align 2
  %2054 = sext i16 %2053 to i32
  %2055 = load i32* %limit, align 4
  %2056 = icmp sle i32 %2054, %2055
  br i1 %2056, label %2057, label %2058

; <label>:2057                                    ; preds = %2050, %2043, %2036
  br label %2161

; <label>:2058                                    ; preds = %2050
  %2059 = load i16** %pix, align 8
  %2060 = getelementptr inbounds i16* %2059, i64 0
  %2061 = load i16* %2060, align 2
  %2062 = sext i16 %2061 to i32
  store i32 %2062, i32* %max, align 4
  store i32 %2062, i32* %min, align 4
  store i32 1, i32* %c, align 4
  br label %2063

; <label>:2063                                    ; preds = %2099, %2058
  %2064 = load i32* %c, align 4
  %2065 = icmp slt i32 %2064, 3
  br i1 %2065, label %2066, label %2102

; <label>:2066                                    ; preds = %2063
  %2067 = load i32* %min, align 4
  %2068 = load i32* %c, align 4
  %2069 = sext i32 %2068 to i64
  %2070 = load i16** %pix, align 8
  %2071 = getelementptr inbounds i16* %2070, i64 %2069
  %2072 = load i16* %2071, align 2
  %2073 = sext i16 %2072 to i32
  %2074 = icmp sgt i32 %2067, %2073
  br i1 %2074, label %2075, label %2082

; <label>:2075                                    ; preds = %2066
  %2076 = load i32* %c, align 4
  %2077 = sext i32 %2076 to i64
  %2078 = load i16** %pix, align 8
  %2079 = getelementptr inbounds i16* %2078, i64 %2077
  %2080 = load i16* %2079, align 2
  %2081 = sext i16 %2080 to i32
  store i32 %2081, i32* %min, align 4
  br label %2082

; <label>:2082                                    ; preds = %2075, %2066
  %2083 = load i32* %max, align 4
  %2084 = load i32* %c, align 4
  %2085 = sext i32 %2084 to i64
  %2086 = load i16** %pix, align 8
  %2087 = getelementptr inbounds i16* %2086, i64 %2085
  %2088 = load i16* %2087, align 2
  %2089 = sext i16 %2088 to i32
  %2090 = icmp slt i32 %2083, %2089
  br i1 %2090, label %2091, label %2098

; <label>:2091                                    ; preds = %2082
  %2092 = load i32* %c, align 4
  %2093 = sext i32 %2092 to i64
  %2094 = load i16** %pix, align 8
  %2095 = getelementptr inbounds i16* %2094, i64 %2093
  %2096 = load i16* %2095, align 2
  %2097 = sext i16 %2096 to i32
  store i32 %2097, i32* %max, align 4
  br label %2098

; <label>:2098                                    ; preds = %2091, %2082
  br label %2099

; <label>:2099                                    ; preds = %2098
  %2100 = load i32* %c, align 4
  %2101 = add nsw i32 %2100, 1
  store i32 %2101, i32* %c, align 4
  br label %2063

; <label>:2102                                    ; preds = %2063
  %2103 = load i32* %min, align 4
  %2104 = load i32* %limit, align 4
  %2105 = mul nsw i32 %2104, 2
  %2106 = icmp sge i32 %2103, %2105
  br i1 %2106, label %2107, label %2116

; <label>:2107                                    ; preds = %2102
  %2108 = load i32* %max, align 4
  %2109 = trunc i32 %2108 to i16
  %2110 = load i16** %pix, align 8
  %2111 = getelementptr inbounds i16* %2110, i64 2
  store i16 %2109, i16* %2111, align 2
  %2112 = load i16** %pix, align 8
  %2113 = getelementptr inbounds i16* %2112, i64 1
  store i16 %2109, i16* %2113, align 2
  %2114 = load i16** %pix, align 8
  %2115 = getelementptr inbounds i16* %2114, i64 0
  store i16 %2109, i16* %2115, align 2
  br label %2160

; <label>:2116                                    ; preds = %2102
  %2117 = load i32* %min, align 4
  %2118 = load i32* %limit, align 4
  %2119 = sub nsw i32 %2117, %2118
  %2120 = shl i32 %2119, 14
  %2121 = load i32* %limit, align 4
  %2122 = sdiv i32 %2120, %2121
  %2123 = sub nsw i32 16384, %2122
  store i32 %2123, i32* %i, align 4
  %2124 = load i32* %i, align 4
  %2125 = load i32* %i, align 4
  %2126 = mul nsw i32 %2124, %2125
  %2127 = ashr i32 %2126, 14
  %2128 = sub nsw i32 16384, %2127
  store i32 %2128, i32* %i, align 4
  %2129 = load i32* %i, align 4
  %2130 = load i32* %i, align 4
  %2131 = mul nsw i32 %2129, %2130
  %2132 = ashr i32 %2131, 14
  store i32 %2132, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %2133

; <label>:2133                                    ; preds = %2156, %2116
  %2134 = load i32* %c, align 4
  %2135 = icmp slt i32 %2134, 3
  br i1 %2135, label %2136, label %2159

; <label>:2136                                    ; preds = %2133
  %2137 = load i32* %max, align 4
  %2138 = load i32* %c, align 4
  %2139 = sext i32 %2138 to i64
  %2140 = load i16** %pix, align 8
  %2141 = getelementptr inbounds i16* %2140, i64 %2139
  %2142 = load i16* %2141, align 2
  %2143 = sext i16 %2142 to i32
  %2144 = sub nsw i32 %2137, %2143
  %2145 = load i32* %i, align 4
  %2146 = mul nsw i32 %2144, %2145
  %2147 = ashr i32 %2146, 14
  %2148 = load i32* %c, align 4
  %2149 = sext i32 %2148 to i64
  %2150 = load i16** %pix, align 8
  %2151 = getelementptr inbounds i16* %2150, i64 %2149
  %2152 = load i16* %2151, align 2
  %2153 = sext i16 %2152 to i32
  %2154 = add nsw i32 %2153, %2147
  %2155 = trunc i32 %2154 to i16
  store i16 %2155, i16* %2151, align 2
  br label %2156

; <label>:2156                                    ; preds = %2136
  %2157 = load i32* %c, align 4
  %2158 = add nsw i32 %2157, 1
  store i32 %2158, i32* %c, align 4
  br label %2133

; <label>:2159                                    ; preds = %2133
  br label %2160

; <label>:2160                                    ; preds = %2159, %2107
  br label %2161

; <label>:2161                                    ; preds = %2160, %2057
  %2162 = load i16** %pix, align 8
  %2163 = getelementptr inbounds i16* %2162, i64 4
  store i16* %2163, i16** %pix, align 8
  br label %2024

; <label>:2164                                    ; preds = %2024
  store i32 -1, i32* %smlast, align 4
  store i32 2, i32* %row, align 4
  br label %2165

; <label>:2165                                    ; preds = %2366, %2164
  %2166 = load i32* %row, align 4
  %2167 = load i16* @height, align 2
  %2168 = zext i16 %2167 to i32
  %2169 = sub nsw i32 %2168, 2
  %2170 = icmp slt i32 %2166, %2169
  br i1 %2170, label %2171, label %2369

; <label>:2171                                    ; preds = %2165
  br label %2172

; <label>:2172                                    ; preds = %2258, %2171
  %2173 = load i32* %smlast, align 4
  %2174 = load i32* %row, align 4
  %2175 = add nsw i32 %2174, 2
  %2176 = icmp slt i32 %2173, %2175
  br i1 %2176, label %2177, label %2259

; <label>:2177                                    ; preds = %2172
  store i32 0, i32* %i, align 4
  br label %2178

; <label>:2178                                    ; preds = %2191, %2177
  %2179 = load i32* %i, align 4
  %2180 = icmp slt i32 %2179, 6
  br i1 %2180, label %2181, label %2194

; <label>:2181                                    ; preds = %2178
  %2182 = load i32* %i, align 4
  %2183 = sext i32 %2182 to i64
  %2184 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %2183
  %2185 = load [3 x i32]** %2184, align 8
  %2186 = load i32* %i, align 4
  %2187 = add nsw i32 %2186, 5
  %2188 = srem i32 %2187, 6
  %2189 = sext i32 %2188 to i64
  %2190 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %2189
  store [3 x i32]* %2185, [3 x i32]** %2190, align 8
  br label %2191

; <label>:2191                                    ; preds = %2181
  %2192 = load i32* %i, align 4
  %2193 = add nsw i32 %2192, 1
  store i32 %2193, i32* %i, align 4
  br label %2178

; <label>:2194                                    ; preds = %2178
  %2195 = load i32* %smlast, align 4
  %2196 = add nsw i32 %2195, 1
  store i32 %2196, i32* %smlast, align 4
  %2197 = load i16* @width, align 2
  %2198 = zext i16 %2197 to i32
  %2199 = mul nsw i32 %2196, %2198
  %2200 = add nsw i32 %2199, 2
  %2201 = sext i32 %2200 to i64
  %2202 = load [4 x i16]** @image, align 8
  %2203 = getelementptr inbounds [4 x i16]* %2202, i64 %2201
  %2204 = getelementptr inbounds [4 x i16]* %2203, i32 0, i32 0
  store i16* %2204, i16** %pix, align 8
  store i32 2, i32* %col, align 4
  br label %2205

; <label>:2205                                    ; preds = %2255, %2194
  %2206 = load i32* %col, align 4
  %2207 = load i16* @width, align 2
  %2208 = zext i16 %2207 to i32
  %2209 = sub nsw i32 %2208, 2
  %2210 = icmp slt i32 %2206, %2209
  br i1 %2210, label %2211, label %2258

; <label>:2211                                    ; preds = %2205
  store i32 0, i32* %c, align 4
  br label %2212

; <label>:2212                                    ; preds = %2249, %2211
  %2213 = load i32* %c, align 4
  %2214 = icmp slt i32 %2213, 3
  br i1 %2214, label %2215, label %2252

; <label>:2215                                    ; preds = %2212
  %2216 = load i32* %c, align 4
  %2217 = sub nsw i32 %2216, 4
  %2218 = sext i32 %2217 to i64
  %2219 = load i16** %pix, align 8
  %2220 = getelementptr inbounds i16* %2219, i64 %2218
  %2221 = load i16* %2220, align 2
  %2222 = sext i16 %2221 to i32
  %2223 = load i32* %c, align 4
  %2224 = sext i32 %2223 to i64
  %2225 = load i16** %pix, align 8
  %2226 = getelementptr inbounds i16* %2225, i64 %2224
  %2227 = load i16* %2226, align 2
  %2228 = sext i16 %2227 to i32
  %2229 = mul nsw i32 2, %2228
  %2230 = add nsw i32 %2222, %2229
  %2231 = load i32* %c, align 4
  %2232 = add nsw i32 %2231, 4
  %2233 = sext i32 %2232 to i64
  %2234 = load i16** %pix, align 8
  %2235 = getelementptr inbounds i16* %2234, i64 %2233
  %2236 = load i16* %2235, align 2
  %2237 = sext i16 %2236 to i32
  %2238 = add nsw i32 %2230, %2237
  %2239 = add nsw i32 %2238, 2
  %2240 = ashr i32 %2239, 2
  %2241 = load i32* %c, align 4
  %2242 = sext i32 %2241 to i64
  %2243 = load i32* %col, align 4
  %2244 = sext i32 %2243 to i64
  %2245 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %2246 = load [3 x i32]** %2245, align 8
  %2247 = getelementptr inbounds [3 x i32]* %2246, i64 %2244
  %2248 = getelementptr inbounds [3 x i32]* %2247, i32 0, i64 %2242
  store i32 %2240, i32* %2248, align 4
  br label %2249

; <label>:2249                                    ; preds = %2215
  %2250 = load i32* %c, align 4
  %2251 = add nsw i32 %2250, 1
  store i32 %2251, i32* %c, align 4
  br label %2212

; <label>:2252                                    ; preds = %2212
  %2253 = load i16** %pix, align 8
  %2254 = getelementptr inbounds i16* %2253, i64 4
  store i16* %2254, i16** %pix, align 8
  br label %2255

; <label>:2255                                    ; preds = %2252
  %2256 = load i32* %col, align 4
  %2257 = add nsw i32 %2256, 1
  store i32 %2257, i32* %col, align 4
  br label %2205

; <label>:2258                                    ; preds = %2205
  br label %2172

; <label>:2259                                    ; preds = %2172
  %2260 = load i32* %row, align 4
  %2261 = load i16* @width, align 2
  %2262 = zext i16 %2261 to i32
  %2263 = mul nsw i32 %2260, %2262
  %2264 = add nsw i32 %2263, 2
  %2265 = sext i32 %2264 to i64
  %2266 = load [4 x i16]** @image, align 8
  %2267 = getelementptr inbounds [4 x i16]* %2266, i64 %2265
  %2268 = getelementptr inbounds [4 x i16]* %2267, i32 0, i32 0
  store i16* %2268, i16** %pix, align 8
  store i32 2, i32* %col, align 4
  br label %2269

; <label>:2269                                    ; preds = %2362, %2259
  %2270 = load i32* %col, align 4
  %2271 = load i16* @width, align 2
  %2272 = zext i16 %2271 to i32
  %2273 = sub nsw i32 %2272, 2
  %2274 = icmp slt i32 %2270, %2273
  br i1 %2274, label %2275, label %2365

; <label>:2275                                    ; preds = %2269
  store i32 0, i32* %c, align 4
  br label %2276

; <label>:2276                                    ; preds = %2325, %2275
  %2277 = load i32* %c, align 4
  %2278 = icmp slt i32 %2277, 3
  br i1 %2278, label %2279, label %2328

; <label>:2279                                    ; preds = %2276
  %2280 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 7
  %2281 = load i16** %2280, align 8
  %2282 = load i32* %c, align 4
  %2283 = sext i32 %2282 to i64
  %2284 = load i16** %pix, align 8
  %2285 = getelementptr inbounds i16* %2284, i64 %2283
  %2286 = load i16* %2285, align 2
  %2287 = sext i16 %2286 to i32
  %2288 = load i32* %c, align 4
  %2289 = sext i32 %2288 to i64
  %2290 = load i32* %col, align 4
  %2291 = sext i32 %2290 to i64
  %2292 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %2293 = load [3 x i32]** %2292, align 8
  %2294 = getelementptr inbounds [3 x i32]* %2293, i64 %2291
  %2295 = getelementptr inbounds [3 x i32]* %2294, i32 0, i64 %2289
  %2296 = load i32* %2295, align 4
  %2297 = load i32* %c, align 4
  %2298 = sext i32 %2297 to i64
  %2299 = load i32* %col, align 4
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %2302 = load [3 x i32]** %2301, align 8
  %2303 = getelementptr inbounds [3 x i32]* %2302, i64 %2300
  %2304 = getelementptr inbounds [3 x i32]* %2303, i32 0, i64 %2298
  %2305 = load i32* %2304, align 4
  %2306 = mul nsw i32 2, %2305
  %2307 = add nsw i32 %2296, %2306
  %2308 = load i32* %c, align 4
  %2309 = sext i32 %2308 to i64
  %2310 = load i32* %col, align 4
  %2311 = sext i32 %2310 to i64
  %2312 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 3
  %2313 = load [3 x i32]** %2312, align 8
  %2314 = getelementptr inbounds [3 x i32]* %2313, i64 %2311
  %2315 = getelementptr inbounds [3 x i32]* %2314, i32 0, i64 %2309
  %2316 = load i32* %2315, align 4
  %2317 = add nsw i32 %2307, %2316
  %2318 = ashr i32 %2317, 2
  %2319 = sub nsw i32 %2287, %2318
  %2320 = call i32 @foveon_apply_curve(i16* %2281, i32 %2319)
  %2321 = sub nsw i32 0, %2320
  %2322 = load i32* %c, align 4
  %2323 = sext i32 %2322 to i64
  %2324 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 %2323
  store i32 %2321, i32* %2324, align 4
  br label %2325

; <label>:2325                                    ; preds = %2279
  %2326 = load i32* %c, align 4
  %2327 = add nsw i32 %2326, 1
  store i32 %2327, i32* %c, align 4
  br label %2276

; <label>:2328                                    ; preds = %2276
  %2329 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 0
  %2330 = load i32* %2329, align 4
  %2331 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 1
  %2332 = load i32* %2331, align 4
  %2333 = add nsw i32 %2330, %2332
  %2334 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 2
  %2335 = load i32* %2334, align 4
  %2336 = add nsw i32 %2333, %2335
  %2337 = ashr i32 %2336, 3
  store i32 %2337, i32* %sum, align 4
  store i32 0, i32* %c, align 4
  br label %2338

; <label>:2338                                    ; preds = %2356, %2328
  %2339 = load i32* %c, align 4
  %2340 = icmp slt i32 %2339, 3
  br i1 %2340, label %2341, label %2359

; <label>:2341                                    ; preds = %2338
  %2342 = load i32* %c, align 4
  %2343 = sext i32 %2342 to i64
  %2344 = getelementptr inbounds [3 x i32]* %dev, i32 0, i64 %2343
  %2345 = load i32* %2344, align 4
  %2346 = load i32* %sum, align 4
  %2347 = sub nsw i32 %2345, %2346
  %2348 = load i32* %c, align 4
  %2349 = sext i32 %2348 to i64
  %2350 = load i16** %pix, align 8
  %2351 = getelementptr inbounds i16* %2350, i64 %2349
  %2352 = load i16* %2351, align 2
  %2353 = sext i16 %2352 to i32
  %2354 = add nsw i32 %2353, %2347
  %2355 = trunc i32 %2354 to i16
  store i16 %2355, i16* %2351, align 2
  br label %2356

; <label>:2356                                    ; preds = %2341
  %2357 = load i32* %c, align 4
  %2358 = add nsw i32 %2357, 1
  store i32 %2358, i32* %c, align 4
  br label %2338

; <label>:2359                                    ; preds = %2338
  %2360 = load i16** %pix, align 8
  %2361 = getelementptr inbounds i16* %2360, i64 4
  store i16* %2361, i16** %pix, align 8
  br label %2362

; <label>:2362                                    ; preds = %2359
  %2363 = load i32* %col, align 4
  %2364 = add nsw i32 %2363, 1
  store i32 %2364, i32* %col, align 4
  br label %2269

; <label>:2365                                    ; preds = %2269
  br label %2366

; <label>:2366                                    ; preds = %2365
  %2367 = load i32* %row, align 4
  %2368 = add nsw i32 %2367, 1
  store i32 %2368, i32* %row, align 4
  br label %2165

; <label>:2369                                    ; preds = %2165
  store i32 -1, i32* %smlast, align 4
  store i32 2, i32* %row, align 4
  br label %2370

; <label>:2370                                    ; preds = %2605, %2369
  %2371 = load i32* %row, align 4
  %2372 = load i16* @height, align 2
  %2373 = zext i16 %2372 to i32
  %2374 = sub nsw i32 %2373, 2
  %2375 = icmp slt i32 %2371, %2374
  br i1 %2375, label %2376, label %2608

; <label>:2376                                    ; preds = %2370
  br label %2377

; <label>:2377                                    ; preds = %2478, %2376
  %2378 = load i32* %smlast, align 4
  %2379 = load i32* %row, align 4
  %2380 = add nsw i32 %2379, 2
  %2381 = icmp slt i32 %2378, %2380
  br i1 %2381, label %2382, label %2479

; <label>:2382                                    ; preds = %2377
  store i32 0, i32* %i, align 4
  br label %2383

; <label>:2383                                    ; preds = %2396, %2382
  %2384 = load i32* %i, align 4
  %2385 = icmp slt i32 %2384, 6
  br i1 %2385, label %2386, label %2399

; <label>:2386                                    ; preds = %2383
  %2387 = load i32* %i, align 4
  %2388 = sext i32 %2387 to i64
  %2389 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %2388
  %2390 = load [3 x i32]** %2389, align 8
  %2391 = load i32* %i, align 4
  %2392 = add nsw i32 %2391, 5
  %2393 = srem i32 %2392, 6
  %2394 = sext i32 %2393 to i64
  %2395 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %2394
  store [3 x i32]* %2390, [3 x i32]** %2395, align 8
  br label %2396

; <label>:2396                                    ; preds = %2386
  %2397 = load i32* %i, align 4
  %2398 = add nsw i32 %2397, 1
  store i32 %2398, i32* %i, align 4
  br label %2383

; <label>:2399                                    ; preds = %2383
  %2400 = load i32* %smlast, align 4
  %2401 = add nsw i32 %2400, 1
  store i32 %2401, i32* %smlast, align 4
  %2402 = load i16* @width, align 2
  %2403 = zext i16 %2402 to i32
  %2404 = mul nsw i32 %2401, %2403
  %2405 = add nsw i32 %2404, 2
  %2406 = sext i32 %2405 to i64
  %2407 = load [4 x i16]** @image, align 8
  %2408 = getelementptr inbounds [4 x i16]* %2407, i64 %2406
  %2409 = getelementptr inbounds [4 x i16]* %2408, i32 0, i32 0
  store i16* %2409, i16** %pix, align 8
  store i32 2, i32* %col, align 4
  br label %2410

; <label>:2410                                    ; preds = %2475, %2399
  %2411 = load i32* %col, align 4
  %2412 = load i16* @width, align 2
  %2413 = zext i16 %2412 to i32
  %2414 = sub nsw i32 %2413, 2
  %2415 = icmp slt i32 %2411, %2414
  br i1 %2415, label %2416, label %2478

; <label>:2416                                    ; preds = %2410
  store i32 0, i32* %c, align 4
  br label %2417

; <label>:2417                                    ; preds = %2469, %2416
  %2418 = load i32* %c, align 4
  %2419 = icmp slt i32 %2418, 3
  br i1 %2419, label %2420, label %2472

; <label>:2420                                    ; preds = %2417
  %2421 = load i32* %c, align 4
  %2422 = sub nsw i32 %2421, 8
  %2423 = sext i32 %2422 to i64
  %2424 = load i16** %pix, align 8
  %2425 = getelementptr inbounds i16* %2424, i64 %2423
  %2426 = load i16* %2425, align 2
  %2427 = sext i16 %2426 to i32
  %2428 = load i32* %c, align 4
  %2429 = sub nsw i32 %2428, 4
  %2430 = sext i32 %2429 to i64
  %2431 = load i16** %pix, align 8
  %2432 = getelementptr inbounds i16* %2431, i64 %2430
  %2433 = load i16* %2432, align 2
  %2434 = sext i16 %2433 to i32
  %2435 = add nsw i32 %2427, %2434
  %2436 = load i32* %c, align 4
  %2437 = sext i32 %2436 to i64
  %2438 = load i16** %pix, align 8
  %2439 = getelementptr inbounds i16* %2438, i64 %2437
  %2440 = load i16* %2439, align 2
  %2441 = sext i16 %2440 to i32
  %2442 = add nsw i32 %2435, %2441
  %2443 = load i32* %c, align 4
  %2444 = add nsw i32 %2443, 4
  %2445 = sext i32 %2444 to i64
  %2446 = load i16** %pix, align 8
  %2447 = getelementptr inbounds i16* %2446, i64 %2445
  %2448 = load i16* %2447, align 2
  %2449 = sext i16 %2448 to i32
  %2450 = add nsw i32 %2442, %2449
  %2451 = load i32* %c, align 4
  %2452 = add nsw i32 %2451, 8
  %2453 = sext i32 %2452 to i64
  %2454 = load i16** %pix, align 8
  %2455 = getelementptr inbounds i16* %2454, i64 %2453
  %2456 = load i16* %2455, align 2
  %2457 = sext i16 %2456 to i32
  %2458 = add nsw i32 %2450, %2457
  %2459 = add nsw i32 %2458, 2
  %2460 = ashr i32 %2459, 2
  %2461 = load i32* %c, align 4
  %2462 = sext i32 %2461 to i64
  %2463 = load i32* %col, align 4
  %2464 = sext i32 %2463 to i64
  %2465 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 4
  %2466 = load [3 x i32]** %2465, align 8
  %2467 = getelementptr inbounds [3 x i32]* %2466, i64 %2464
  %2468 = getelementptr inbounds [3 x i32]* %2467, i32 0, i64 %2462
  store i32 %2460, i32* %2468, align 4
  br label %2469

; <label>:2469                                    ; preds = %2420
  %2470 = load i32* %c, align 4
  %2471 = add nsw i32 %2470, 1
  store i32 %2471, i32* %c, align 4
  br label %2417

; <label>:2472                                    ; preds = %2417
  %2473 = load i16** %pix, align 8
  %2474 = getelementptr inbounds i16* %2473, i64 4
  store i16* %2474, i16** %pix, align 8
  br label %2475

; <label>:2475                                    ; preds = %2472
  %2476 = load i32* %col, align 4
  %2477 = add nsw i32 %2476, 1
  store i32 %2477, i32* %col, align 4
  br label %2410

; <label>:2478                                    ; preds = %2410
  br label %2377

; <label>:2479                                    ; preds = %2377
  %2480 = load i32* %row, align 4
  %2481 = load i16* @width, align 2
  %2482 = zext i16 %2481 to i32
  %2483 = mul nsw i32 %2480, %2482
  %2484 = add nsw i32 %2483, 2
  %2485 = sext i32 %2484 to i64
  %2486 = load [4 x i16]** @image, align 8
  %2487 = getelementptr inbounds [4 x i16]* %2486, i64 %2485
  %2488 = getelementptr inbounds [4 x i16]* %2487, i32 0, i32 0
  store i16* %2488, i16** %pix, align 8
  store i32 2, i32* %col, align 4
  br label %2489

; <label>:2489                                    ; preds = %2601, %2479
  %2490 = load i32* %col, align 4
  %2491 = load i16* @width, align 2
  %2492 = zext i16 %2491 to i32
  %2493 = sub nsw i32 %2492, 2
  %2494 = icmp slt i32 %2490, %2493
  br i1 %2494, label %2495, label %2604

; <label>:2495                                    ; preds = %2489
  %2496 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  store i32 375, i32* %2496, align 4
  store i32 60, i32* %sum, align 4
  store i32 0, i32* %c, align 4
  br label %2497

; <label>:2497                                    ; preds = %2543, %2495
  %2498 = load i32* %c, align 4
  %2499 = icmp slt i32 %2498, 3
  br i1 %2499, label %2500, label %2546

; <label>:2500                                    ; preds = %2497
  store i32 0, i32* %i, align 4
  %2501 = load i32* %c, align 4
  %2502 = sext i32 %2501 to i64
  %2503 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %2502
  store i32 0, i32* %2503, align 4
  br label %2504

; <label>:2504                                    ; preds = %2524, %2500
  %2505 = load i32* %i, align 4
  %2506 = icmp slt i32 %2505, 5
  br i1 %2506, label %2507, label %2527

; <label>:2507                                    ; preds = %2504
  %2508 = load i32* %c, align 4
  %2509 = sext i32 %2508 to i64
  %2510 = load i32* %col, align 4
  %2511 = sext i32 %2510 to i64
  %2512 = load i32* %i, align 4
  %2513 = sext i32 %2512 to i64
  %2514 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 %2513
  %2515 = load [3 x i32]** %2514, align 8
  %2516 = getelementptr inbounds [3 x i32]* %2515, i64 %2511
  %2517 = getelementptr inbounds [3 x i32]* %2516, i32 0, i64 %2509
  %2518 = load i32* %2517, align 4
  %2519 = load i32* %c, align 4
  %2520 = sext i32 %2519 to i64
  %2521 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %2520
  %2522 = load i32* %2521, align 4
  %2523 = add nsw i32 %2522, %2518
  store i32 %2523, i32* %2521, align 4
  br label %2524

; <label>:2524                                    ; preds = %2507
  %2525 = load i32* %i, align 4
  %2526 = add nsw i32 %2525, 1
  store i32 %2526, i32* %i, align 4
  br label %2504

; <label>:2527                                    ; preds = %2504
  %2528 = load i32* %c, align 4
  %2529 = sext i32 %2528 to i64
  %2530 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %2529
  %2531 = load i32* %2530, align 4
  %2532 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %2533 = load i32* %2532, align 4
  %2534 = add nsw i32 %2533, %2531
  store i32 %2534, i32* %2532, align 4
  %2535 = load i32* %c, align 4
  %2536 = sext i32 %2535 to i64
  %2537 = load i16** %pix, align 8
  %2538 = getelementptr inbounds i16* %2537, i64 %2536
  %2539 = load i16* %2538, align 2
  %2540 = sext i16 %2539 to i32
  %2541 = load i32* %sum, align 4
  %2542 = add nsw i32 %2541, %2540
  store i32 %2542, i32* %sum, align 4
  br label %2543

; <label>:2543                                    ; preds = %2527
  %2544 = load i32* %c, align 4
  %2545 = add nsw i32 %2544, 1
  store i32 %2545, i32* %c, align 4
  br label %2497

; <label>:2546                                    ; preds = %2497
  %2547 = load i32* %sum, align 4
  %2548 = icmp slt i32 %2547, 0
  br i1 %2548, label %2549, label %2550

; <label>:2549                                    ; preds = %2546
  store i32 0, i32* %sum, align 4
  br label %2550

; <label>:2550                                    ; preds = %2549, %2546
  %2551 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %2552 = load i32* %2551, align 4
  %2553 = icmp sgt i32 %2552, 375
  br i1 %2553, label %2554, label %2560

; <label>:2554                                    ; preds = %2550
  %2555 = load i32* %sum, align 4
  %2556 = shl i32 %2555, 16
  %2557 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 3
  %2558 = load i32* %2557, align 4
  %2559 = sdiv i32 %2556, %2558
  br label %2563

; <label>:2560                                    ; preds = %2550
  %2561 = load i32* %sum, align 4
  %2562 = mul nsw i32 %2561, 174
  br label %2563

; <label>:2563                                    ; preds = %2560, %2554
  %2564 = phi i32 [ %2559, %2554 ], [ %2562, %2560 ]
  store i32 %2564, i32* %j, align 4
  store i32 0, i32* %c, align 4
  br label %2565

; <label>:2565                                    ; preds = %2595, %2563
  %2566 = load i32* %c, align 4
  %2567 = icmp slt i32 %2566, 3
  br i1 %2567, label %2568, label %2598

; <label>:2568                                    ; preds = %2565
  %2569 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 6
  %2570 = load i16** %2569, align 8
  %2571 = load i32* %j, align 4
  %2572 = load i32* %c, align 4
  %2573 = sext i32 %2572 to i64
  %2574 = getelementptr inbounds [4 x i32]* %total, i32 0, i64 %2573
  %2575 = load i32* %2574, align 4
  %2576 = mul nsw i32 %2571, %2575
  %2577 = add nsw i32 %2576, 32768
  %2578 = ashr i32 %2577, 16
  %2579 = load i32* %c, align 4
  %2580 = sext i32 %2579 to i64
  %2581 = load i16** %pix, align 8
  %2582 = getelementptr inbounds i16* %2581, i64 %2580
  %2583 = load i16* %2582, align 2
  %2584 = sext i16 %2583 to i32
  %2585 = sub nsw i32 %2578, %2584
  %2586 = call i32 @foveon_apply_curve(i16* %2570, i32 %2585)
  %2587 = load i32* %c, align 4
  %2588 = sext i32 %2587 to i64
  %2589 = load i16** %pix, align 8
  %2590 = getelementptr inbounds i16* %2589, i64 %2588
  %2591 = load i16* %2590, align 2
  %2592 = sext i16 %2591 to i32
  %2593 = add nsw i32 %2592, %2586
  %2594 = trunc i32 %2593 to i16
  store i16 %2594, i16* %2590, align 2
  br label %2595

; <label>:2595                                    ; preds = %2568
  %2596 = load i32* %c, align 4
  %2597 = add nsw i32 %2596, 1
  store i32 %2597, i32* %c, align 4
  br label %2565

; <label>:2598                                    ; preds = %2565
  %2599 = load i16** %pix, align 8
  %2600 = getelementptr inbounds i16* %2599, i64 4
  store i16* %2600, i16** %pix, align 8
  br label %2601

; <label>:2601                                    ; preds = %2598
  %2602 = load i32* %col, align 4
  %2603 = add nsw i32 %2602, 1
  store i32 %2603, i32* %col, align 4
  br label %2489

; <label>:2604                                    ; preds = %2489
  br label %2605

; <label>:2605                                    ; preds = %2604
  %2606 = load i32* %row, align 4
  %2607 = add nsw i32 %2606, 1
  store i32 %2607, i32* %row, align 4
  br label %2370

; <label>:2608                                    ; preds = %2370
  %2609 = load [4 x i16]** @image, align 8
  %2610 = getelementptr inbounds [4 x i16]* %2609, i64 0
  %2611 = getelementptr inbounds [4 x i16]* %2610, i32 0, i32 0
  store i16* %2611, i16** %pix, align 8
  br label %2612

; <label>:2612                                    ; preds = %2766, %2608
  %2613 = load i16** %pix, align 8
  %2614 = load i16* @height, align 2
  %2615 = zext i16 %2614 to i32
  %2616 = load i16* @width, align 2
  %2617 = zext i16 %2616 to i32
  %2618 = mul nsw i32 %2615, %2617
  %2619 = sext i32 %2618 to i64
  %2620 = load [4 x i16]** @image, align 8
  %2621 = getelementptr inbounds [4 x i16]* %2620, i64 %2619
  %2622 = getelementptr inbounds [4 x i16]* %2621, i32 0, i32 0
  %2623 = icmp ult i16* %2613, %2622
  br i1 %2623, label %2624, label %2769

; <label>:2624                                    ; preds = %2612
  store i32 0, i32* %c, align 4
  br label %2625

; <label>:2625                                    ; preds = %2648, %2624
  %2626 = load i32* %c, align 4
  %2627 = icmp slt i32 %2626, 3
  br i1 %2627, label %2628, label %2651

; <label>:2628                                    ; preds = %2625
  %2629 = load i32* %c, align 4
  %2630 = sext i32 %2629 to i64
  %2631 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %2630
  %2632 = load i16** %2631, align 8
  %2633 = load i32* %c, align 4
  %2634 = sext i32 %2633 to i64
  %2635 = load i16** %pix, align 8
  %2636 = getelementptr inbounds i16* %2635, i64 %2634
  %2637 = load i16* %2636, align 2
  %2638 = sext i16 %2637 to i32
  %2639 = call i32 @foveon_apply_curve(i16* %2632, i32 %2638)
  %2640 = load i32* %c, align 4
  %2641 = sext i32 %2640 to i64
  %2642 = load i16** %pix, align 8
  %2643 = getelementptr inbounds i16* %2642, i64 %2641
  %2644 = load i16* %2643, align 2
  %2645 = sext i16 %2644 to i32
  %2646 = sub nsw i32 %2645, %2639
  %2647 = trunc i32 %2646 to i16
  store i16 %2647, i16* %2643, align 2
  br label %2648

; <label>:2648                                    ; preds = %2628
  %2649 = load i32* %c, align 4
  %2650 = add nsw i32 %2649, 1
  store i32 %2650, i32* %c, align 4
  br label %2625

; <label>:2651                                    ; preds = %2625
  %2652 = load i16** %pix, align 8
  %2653 = getelementptr inbounds i16* %2652, i64 0
  %2654 = load i16* %2653, align 2
  %2655 = sext i16 %2654 to i32
  %2656 = load i16** %pix, align 8
  %2657 = getelementptr inbounds i16* %2656, i64 1
  %2658 = load i16* %2657, align 2
  %2659 = sext i16 %2658 to i32
  %2660 = add nsw i32 %2655, %2659
  %2661 = load i16** %pix, align 8
  %2662 = getelementptr inbounds i16* %2661, i64 1
  %2663 = load i16* %2662, align 2
  %2664 = sext i16 %2663 to i32
  %2665 = add nsw i32 %2660, %2664
  %2666 = load i16** %pix, align 8
  %2667 = getelementptr inbounds i16* %2666, i64 2
  %2668 = load i16* %2667, align 2
  %2669 = sext i16 %2668 to i32
  %2670 = add nsw i32 %2665, %2669
  %2671 = ashr i32 %2670, 2
  store i32 %2671, i32* %sum, align 4
  store i32 0, i32* %c, align 4
  br label %2672

; <label>:2672                                    ; preds = %2697, %2651
  %2673 = load i32* %c, align 4
  %2674 = icmp slt i32 %2673, 3
  br i1 %2674, label %2675, label %2700

; <label>:2675                                    ; preds = %2672
  %2676 = load i32* %c, align 4
  %2677 = sext i32 %2676 to i64
  %2678 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %2677
  %2679 = load i16** %2678, align 8
  %2680 = load i32* %c, align 4
  %2681 = sext i32 %2680 to i64
  %2682 = load i16** %pix, align 8
  %2683 = getelementptr inbounds i16* %2682, i64 %2681
  %2684 = load i16* %2683, align 2
  %2685 = sext i16 %2684 to i32
  %2686 = load i32* %sum, align 4
  %2687 = sub nsw i32 %2685, %2686
  %2688 = call i32 @foveon_apply_curve(i16* %2679, i32 %2687)
  %2689 = load i32* %c, align 4
  %2690 = sext i32 %2689 to i64
  %2691 = load i16** %pix, align 8
  %2692 = getelementptr inbounds i16* %2691, i64 %2690
  %2693 = load i16* %2692, align 2
  %2694 = sext i16 %2693 to i32
  %2695 = sub nsw i32 %2694, %2688
  %2696 = trunc i32 %2695 to i16
  store i16 %2696, i16* %2692, align 2
  br label %2697

; <label>:2697                                    ; preds = %2675
  %2698 = load i32* %c, align 4
  %2699 = add nsw i32 %2698, 1
  store i32 %2699, i32* %c, align 4
  br label %2672

; <label>:2700                                    ; preds = %2672
  store i32 0, i32* %c, align 4
  br label %2701

; <label>:2701                                    ; preds = %2745, %2700
  %2702 = load i32* %c, align 4
  %2703 = icmp slt i32 %2702, 3
  br i1 %2703, label %2704, label %2748

; <label>:2704                                    ; preds = %2701
  store i32 0, i32* %i, align 4
  store double 0.000000e+00, double* %dsum, align 8
  br label %2705

; <label>:2705                                    ; preds = %2727, %2704
  %2706 = load i32* %i, align 4
  %2707 = icmp slt i32 %2706, 3
  br i1 %2707, label %2708, label %2730

; <label>:2708                                    ; preds = %2705
  %2709 = load i32* %i, align 4
  %2710 = sext i32 %2709 to i64
  %2711 = load i32* %c, align 4
  %2712 = sext i32 %2711 to i64
  %2713 = getelementptr inbounds [3 x [3 x float]]* %trans, i32 0, i64 %2712
  %2714 = getelementptr inbounds [3 x float]* %2713, i32 0, i64 %2710
  %2715 = load float* %2714, align 4
  %2716 = load i32* %i, align 4
  %2717 = sext i32 %2716 to i64
  %2718 = load i16** %pix, align 8
  %2719 = getelementptr inbounds i16* %2718, i64 %2717
  %2720 = load i16* %2719, align 2
  %2721 = sext i16 %2720 to i32
  %2722 = sitofp i32 %2721 to float
  %2723 = fmul float %2715, %2722
  %2724 = fpext float %2723 to double
  %2725 = load double* %dsum, align 8
  %2726 = fadd double %2725, %2724
  store double %2726, double* %dsum, align 8
  br label %2727

; <label>:2727                                    ; preds = %2708
  %2728 = load i32* %i, align 4
  %2729 = add nsw i32 %2728, 1
  store i32 %2729, i32* %i, align 4
  br label %2705

; <label>:2730                                    ; preds = %2705
  %2731 = load double* %dsum, align 8
  %2732 = fcmp olt double %2731, 0.000000e+00
  br i1 %2732, label %2733, label %2734

; <label>:2733                                    ; preds = %2730
  store double 0.000000e+00, double* %dsum, align 8
  br label %2734

; <label>:2734                                    ; preds = %2733, %2730
  %2735 = load double* %dsum, align 8
  %2736 = fcmp ogt double %2735, 2.400000e+04
  br i1 %2736, label %2737, label %2738

; <label>:2737                                    ; preds = %2734
  store double 2.400000e+04, double* %dsum, align 8
  br label %2738

; <label>:2738                                    ; preds = %2737, %2734
  %2739 = load double* %dsum, align 8
  %2740 = fadd double %2739, 5.000000e-01
  %2741 = fptosi double %2740 to i32
  %2742 = load i32* %c, align 4
  %2743 = sext i32 %2742 to i64
  %2744 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2743
  store i32 %2741, i32* %2744, align 4
  br label %2745

; <label>:2745                                    ; preds = %2738
  %2746 = load i32* %c, align 4
  %2747 = add nsw i32 %2746, 1
  store i32 %2747, i32* %c, align 4
  br label %2701

; <label>:2748                                    ; preds = %2701
  store i32 0, i32* %c, align 4
  br label %2749

; <label>:2749                                    ; preds = %2762, %2748
  %2750 = load i32* %c, align 4
  %2751 = icmp slt i32 %2750, 3
  br i1 %2751, label %2752, label %2765

; <label>:2752                                    ; preds = %2749
  %2753 = load i32* %c, align 4
  %2754 = sext i32 %2753 to i64
  %2755 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2754
  %2756 = load i32* %2755, align 4
  %2757 = trunc i32 %2756 to i16
  %2758 = load i32* %c, align 4
  %2759 = sext i32 %2758 to i64
  %2760 = load i16** %pix, align 8
  %2761 = getelementptr inbounds i16* %2760, i64 %2759
  store i16 %2757, i16* %2761, align 2
  br label %2762

; <label>:2762                                    ; preds = %2752
  %2763 = load i32* %c, align 4
  %2764 = add nsw i32 %2763, 1
  store i32 %2764, i32* %c, align 4
  br label %2749

; <label>:2765                                    ; preds = %2749
  br label %2766

; <label>:2766                                    ; preds = %2765
  %2767 = load i16** %pix, align 8
  %2768 = getelementptr inbounds i16* %2767, i64 4
  store i16* %2768, i16** %pix, align 8
  br label %2612

; <label>:2769                                    ; preds = %2612
  %2770 = load i16* @width, align 2
  %2771 = zext i16 %2770 to i32
  %2772 = sdiv i32 %2771, 4
  %2773 = load i16* @height, align 2
  %2774 = zext i16 %2773 to i32
  %2775 = sdiv i32 %2774, 4
  %2776 = mul nsw i32 %2772, %2775
  %2777 = sext i32 %2776 to i64
  %2778 = call noalias i8* @calloc(i64 %2777, i64 6) #4
  %2779 = bitcast i8* %2778 to [3 x i16]*
  store [3 x i16]* %2779, [3 x i16]** %shrink, align 8
  %2780 = load [3 x i16]** %shrink, align 8
  %2781 = bitcast [3 x i16]* %2780 to i8*
  call void @merror(i8* %2781, i8* getelementptr inbounds ([21 x i8]* @.str58, i32 0, i32 0))
  %2782 = load i16* @height, align 2
  %2783 = zext i16 %2782 to i32
  %2784 = sdiv i32 %2783, 4
  store i32 %2784, i32* %row, align 4
  br label %2785

; <label>:2785                                    ; preds = %2927, %2769
  %2786 = load i32* %row, align 4
  %2787 = add nsw i32 %2786, -1
  store i32 %2787, i32* %row, align 4
  %2788 = icmp ne i32 %2786, 0
  br i1 %2788, label %2789, label %2928

; <label>:2789                                    ; preds = %2785
  store i32 0, i32* %col, align 4
  br label %2790

; <label>:2790                                    ; preds = %2924, %2789
  %2791 = load i32* %col, align 4
  %2792 = load i16* @width, align 2
  %2793 = zext i16 %2792 to i32
  %2794 = sdiv i32 %2793, 4
  %2795 = icmp slt i32 %2791, %2794
  br i1 %2795, label %2796, label %2927

; <label>:2796                                    ; preds = %2790
  %2797 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 2
  store i32 0, i32* %2797, align 4
  %2798 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 1
  store i32 0, i32* %2798, align 4
  %2799 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 0
  store i32 0, i32* %2799, align 4
  store i32 0, i32* %i, align 4
  br label %2800

; <label>:2800                                    ; preds = %2845, %2796
  %2801 = load i32* %i, align 4
  %2802 = icmp slt i32 %2801, 4
  br i1 %2802, label %2803, label %2848

; <label>:2803                                    ; preds = %2800
  store i32 0, i32* %j, align 4
  br label %2804

; <label>:2804                                    ; preds = %2841, %2803
  %2805 = load i32* %j, align 4
  %2806 = icmp slt i32 %2805, 4
  br i1 %2806, label %2807, label %2844

; <label>:2807                                    ; preds = %2804
  store i32 0, i32* %c, align 4
  br label %2808

; <label>:2808                                    ; preds = %2837, %2807
  %2809 = load i32* %c, align 4
  %2810 = icmp slt i32 %2809, 3
  br i1 %2810, label %2811, label %2840

; <label>:2811                                    ; preds = %2808
  %2812 = load i32* %c, align 4
  %2813 = sext i32 %2812 to i64
  %2814 = load i32* %row, align 4
  %2815 = mul nsw i32 %2814, 4
  %2816 = load i32* %i, align 4
  %2817 = add nsw i32 %2815, %2816
  %2818 = load i16* @width, align 2
  %2819 = zext i16 %2818 to i32
  %2820 = mul nsw i32 %2817, %2819
  %2821 = load i32* %col, align 4
  %2822 = mul nsw i32 %2821, 4
  %2823 = add nsw i32 %2820, %2822
  %2824 = load i32* %j, align 4
  %2825 = add nsw i32 %2823, %2824
  %2826 = sext i32 %2825 to i64
  %2827 = load [4 x i16]** @image, align 8
  %2828 = getelementptr inbounds [4 x i16]* %2827, i64 %2826
  %2829 = getelementptr inbounds [4 x i16]* %2828, i32 0, i64 %2813
  %2830 = load i16* %2829, align 2
  %2831 = sext i16 %2830 to i32
  %2832 = load i32* %c, align 4
  %2833 = sext i32 %2832 to i64
  %2834 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2833
  %2835 = load i32* %2834, align 4
  %2836 = add nsw i32 %2835, %2831
  store i32 %2836, i32* %2834, align 4
  br label %2837

; <label>:2837                                    ; preds = %2811
  %2838 = load i32* %c, align 4
  %2839 = add nsw i32 %2838, 1
  store i32 %2839, i32* %c, align 4
  br label %2808

; <label>:2840                                    ; preds = %2808
  br label %2841

; <label>:2841                                    ; preds = %2840
  %2842 = load i32* %j, align 4
  %2843 = add nsw i32 %2842, 1
  store i32 %2843, i32* %j, align 4
  br label %2804

; <label>:2844                                    ; preds = %2804
  br label %2845

; <label>:2845                                    ; preds = %2844
  %2846 = load i32* %i, align 4
  %2847 = add nsw i32 %2846, 1
  store i32 %2847, i32* %i, align 4
  br label %2800

; <label>:2848                                    ; preds = %2800
  store i32 0, i32* %c, align 4
  br label %2849

; <label>:2849                                    ; preds = %2920, %2848
  %2850 = load i32* %c, align 4
  %2851 = icmp slt i32 %2850, 3
  br i1 %2851, label %2852, label %2923

; <label>:2852                                    ; preds = %2849
  %2853 = load i32* %row, align 4
  %2854 = add nsw i32 %2853, 2
  %2855 = load i16* @height, align 2
  %2856 = zext i16 %2855 to i32
  %2857 = sdiv i32 %2856, 4
  %2858 = icmp sgt i32 %2854, %2857
  br i1 %2858, label %2859, label %2879

; <label>:2859                                    ; preds = %2852
  %2860 = load i32* %c, align 4
  %2861 = sext i32 %2860 to i64
  %2862 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2861
  %2863 = load i32* %2862, align 4
  %2864 = ashr i32 %2863, 4
  %2865 = trunc i32 %2864 to i16
  %2866 = load i32* %c, align 4
  %2867 = sext i32 %2866 to i64
  %2868 = load i32* %row, align 4
  %2869 = load i16* @width, align 2
  %2870 = zext i16 %2869 to i32
  %2871 = sdiv i32 %2870, 4
  %2872 = mul nsw i32 %2868, %2871
  %2873 = load i32* %col, align 4
  %2874 = add nsw i32 %2872, %2873
  %2875 = sext i32 %2874 to i64
  %2876 = load [3 x i16]** %shrink, align 8
  %2877 = getelementptr inbounds [3 x i16]* %2876, i64 %2875
  %2878 = getelementptr inbounds [3 x i16]* %2877, i32 0, i64 %2867
  store i16 %2865, i16* %2878, align 2
  br label %2919

; <label>:2879                                    ; preds = %2852
  %2880 = load i32* %c, align 4
  %2881 = sext i32 %2880 to i64
  %2882 = load i32* %row, align 4
  %2883 = add nsw i32 %2882, 1
  %2884 = load i16* @width, align 2
  %2885 = zext i16 %2884 to i32
  %2886 = sdiv i32 %2885, 4
  %2887 = mul nsw i32 %2883, %2886
  %2888 = load i32* %col, align 4
  %2889 = add nsw i32 %2887, %2888
  %2890 = sext i32 %2889 to i64
  %2891 = load [3 x i16]** %shrink, align 8
  %2892 = getelementptr inbounds [3 x i16]* %2891, i64 %2890
  %2893 = getelementptr inbounds [3 x i16]* %2892, i32 0, i64 %2881
  %2894 = load i16* %2893, align 2
  %2895 = sext i16 %2894 to i32
  %2896 = mul nsw i32 %2895, 1840
  %2897 = load i32* %c, align 4
  %2898 = sext i32 %2897 to i64
  %2899 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2898
  %2900 = load i32* %2899, align 4
  %2901 = mul nsw i32 %2900, 141
  %2902 = add nsw i32 %2896, %2901
  %2903 = add nsw i32 %2902, 2048
  %2904 = ashr i32 %2903, 12
  %2905 = trunc i32 %2904 to i16
  %2906 = load i32* %c, align 4
  %2907 = sext i32 %2906 to i64
  %2908 = load i32* %row, align 4
  %2909 = load i16* @width, align 2
  %2910 = zext i16 %2909 to i32
  %2911 = sdiv i32 %2910, 4
  %2912 = mul nsw i32 %2908, %2911
  %2913 = load i32* %col, align 4
  %2914 = add nsw i32 %2912, %2913
  %2915 = sext i32 %2914 to i64
  %2916 = load [3 x i16]** %shrink, align 8
  %2917 = getelementptr inbounds [3 x i16]* %2916, i64 %2915
  %2918 = getelementptr inbounds [3 x i16]* %2917, i32 0, i64 %2907
  store i16 %2905, i16* %2918, align 2
  br label %2919

; <label>:2919                                    ; preds = %2879, %2859
  br label %2920

; <label>:2920                                    ; preds = %2919
  %2921 = load i32* %c, align 4
  %2922 = add nsw i32 %2921, 1
  store i32 %2922, i32* %c, align 4
  br label %2849

; <label>:2923                                    ; preds = %2849
  br label %2924

; <label>:2924                                    ; preds = %2923
  %2925 = load i32* %col, align 4
  %2926 = add nsw i32 %2925, 1
  store i32 %2926, i32* %col, align 4
  br label %2790

; <label>:2927                                    ; preds = %2790
  br label %2785

; <label>:2928                                    ; preds = %2785
  store i32 0, i32* %row, align 4
  br label %2929

; <label>:2929                                    ; preds = %3263, %2928
  %2930 = load i32* %row, align 4
  %2931 = load i16* @height, align 2
  %2932 = zext i16 %2931 to i32
  %2933 = and i32 %2932, -4
  %2934 = icmp slt i32 %2930, %2933
  br i1 %2934, label %2935, label %3266

; <label>:2935                                    ; preds = %2929
  %2936 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 2
  store i32 0, i32* %2936, align 4
  %2937 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 1
  store i32 0, i32* %2937, align 4
  %2938 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 0
  store i32 0, i32* %2938, align 4
  %2939 = load i32* %row, align 4
  %2940 = and i32 %2939, 3
  %2941 = icmp eq i32 %2940, 0
  br i1 %2941, label %2942, label %2997

; <label>:2942                                    ; preds = %2935
  %2943 = load i16* @width, align 2
  %2944 = zext i16 %2943 to i32
  %2945 = and i32 %2944, -4
  store i32 %2945, i32* %col, align 4
  br label %2946

; <label>:2946                                    ; preds = %2995, %2942
  %2947 = load i32* %col, align 4
  %2948 = add nsw i32 %2947, -1
  store i32 %2948, i32* %col, align 4
  %2949 = icmp ne i32 %2947, 0
  br i1 %2949, label %2950, label %2996

; <label>:2950                                    ; preds = %2946
  store i32 0, i32* %c, align 4
  br label %2951

; <label>:2951                                    ; preds = %2992, %2950
  %2952 = load i32* %c, align 4
  %2953 = icmp slt i32 %2952, 3
  br i1 %2953, label %2954, label %2995

; <label>:2954                                    ; preds = %2951
  %2955 = load i32* %c, align 4
  %2956 = sext i32 %2955 to i64
  %2957 = load i32* %row, align 4
  %2958 = sdiv i32 %2957, 4
  %2959 = load i16* @width, align 2
  %2960 = zext i16 %2959 to i32
  %2961 = sdiv i32 %2960, 4
  %2962 = mul nsw i32 %2958, %2961
  %2963 = load i32* %col, align 4
  %2964 = sdiv i32 %2963, 4
  %2965 = add nsw i32 %2962, %2964
  %2966 = sext i32 %2965 to i64
  %2967 = load [3 x i16]** %shrink, align 8
  %2968 = getelementptr inbounds [3 x i16]* %2967, i64 %2966
  %2969 = getelementptr inbounds [3 x i16]* %2968, i32 0, i64 %2956
  %2970 = load i16* %2969, align 2
  %2971 = sext i16 %2970 to i32
  %2972 = mul nsw i32 %2971, 1485
  %2973 = load i32* %c, align 4
  %2974 = sext i32 %2973 to i64
  %2975 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2974
  %2976 = load i32* %2975, align 4
  %2977 = mul nsw i32 %2976, 6707
  %2978 = add nsw i32 %2972, %2977
  %2979 = add nsw i32 %2978, 4096
  %2980 = ashr i32 %2979, 13
  %2981 = load i32* %c, align 4
  %2982 = sext i32 %2981 to i64
  %2983 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %2982
  store i32 %2980, i32* %2983, align 4
  %2984 = load i32* %c, align 4
  %2985 = sext i32 %2984 to i64
  %2986 = load i32* %col, align 4
  %2987 = sext i32 %2986 to i64
  %2988 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 0
  %2989 = load [3 x i32]** %2988, align 8
  %2990 = getelementptr inbounds [3 x i32]* %2989, i64 %2987
  %2991 = getelementptr inbounds [3 x i32]* %2990, i32 0, i64 %2985
  store i32 %2980, i32* %2991, align 4
  br label %2992

; <label>:2992                                    ; preds = %2954
  %2993 = load i32* %c, align 4
  %2994 = add nsw i32 %2993, 1
  store i32 %2994, i32* %c, align 4
  br label %2951

; <label>:2995                                    ; preds = %2951
  br label %2946

; <label>:2996                                    ; preds = %2946
  br label %2997

; <label>:2997                                    ; preds = %2996, %2935
  %2998 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 2
  store i32 0, i32* %2998, align 4
  %2999 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 1
  store i32 0, i32* %2999, align 4
  %3000 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 0
  store i32 0, i32* %3000, align 4
  store i32 0, i32* %col, align 4
  br label %3001

; <label>:3001                                    ; preds = %3045, %2997
  %3002 = load i32* %col, align 4
  %3003 = load i16* @width, align 2
  %3004 = zext i16 %3003 to i32
  %3005 = and i32 %3004, -4
  %3006 = icmp slt i32 %3002, %3005
  br i1 %3006, label %3007, label %3048

; <label>:3007                                    ; preds = %3001
  store i32 0, i32* %c, align 4
  br label %3008

; <label>:3008                                    ; preds = %3041, %3007
  %3009 = load i32* %c, align 4
  %3010 = icmp slt i32 %3009, 3
  br i1 %3010, label %3011, label %3044

; <label>:3011                                    ; preds = %3008
  %3012 = load i32* %c, align 4
  %3013 = sext i32 %3012 to i64
  %3014 = load i32* %col, align 4
  %3015 = sext i32 %3014 to i64
  %3016 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 0
  %3017 = load [3 x i32]** %3016, align 8
  %3018 = getelementptr inbounds [3 x i32]* %3017, i64 %3015
  %3019 = getelementptr inbounds [3 x i32]* %3018, i32 0, i64 %3013
  %3020 = load i32* %3019, align 4
  %3021 = mul nsw i32 %3020, 1485
  %3022 = load i32* %c, align 4
  %3023 = sext i32 %3022 to i64
  %3024 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %3023
  %3025 = load i32* %3024, align 4
  %3026 = mul nsw i32 %3025, 6707
  %3027 = add nsw i32 %3021, %3026
  %3028 = add nsw i32 %3027, 4096
  %3029 = ashr i32 %3028, 13
  %3030 = load i32* %c, align 4
  %3031 = sext i32 %3030 to i64
  %3032 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %3031
  store i32 %3029, i32* %3032, align 4
  %3033 = load i32* %c, align 4
  %3034 = sext i32 %3033 to i64
  %3035 = load i32* %col, align 4
  %3036 = sext i32 %3035 to i64
  %3037 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %3038 = load [3 x i32]** %3037, align 8
  %3039 = getelementptr inbounds [3 x i32]* %3038, i64 %3036
  %3040 = getelementptr inbounds [3 x i32]* %3039, i32 0, i64 %3034
  store i32 %3029, i32* %3040, align 4
  br label %3041

; <label>:3041                                    ; preds = %3011
  %3042 = load i32* %c, align 4
  %3043 = add nsw i32 %3042, 1
  store i32 %3043, i32* %c, align 4
  br label %3008

; <label>:3044                                    ; preds = %3008
  br label %3045

; <label>:3045                                    ; preds = %3044
  %3046 = load i32* %col, align 4
  %3047 = add nsw i32 %3046, 1
  store i32 %3047, i32* %col, align 4
  br label %3001

; <label>:3048                                    ; preds = %3001
  %3049 = load i32* %row, align 4
  %3050 = icmp eq i32 %3049, 0
  br i1 %3050, label %3051, label %3061

; <label>:3051                                    ; preds = %3048
  %3052 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %3053 = load [3 x i32]** %3052, align 8
  %3054 = bitcast [3 x i32]* %3053 to i8*
  %3055 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %3056 = load [3 x i32]** %3055, align 8
  %3057 = bitcast [3 x i32]* %3056 to i8*
  %3058 = load i16* @width, align 2
  %3059 = zext i16 %3058 to i64
  %3060 = mul i64 12, %3059
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3054, i8* %3057, i64 %3060, i32 4, i1 false)
  br label %3112

; <label>:3061                                    ; preds = %3048
  store i32 0, i32* %col, align 4
  br label %3062

; <label>:3062                                    ; preds = %3108, %3061
  %3063 = load i32* %col, align 4
  %3064 = load i16* @width, align 2
  %3065 = zext i16 %3064 to i32
  %3066 = and i32 %3065, -4
  %3067 = icmp slt i32 %3063, %3066
  br i1 %3067, label %3068, label %3111

; <label>:3068                                    ; preds = %3062
  store i32 0, i32* %c, align 4
  br label %3069

; <label>:3069                                    ; preds = %3104, %3068
  %3070 = load i32* %c, align 4
  %3071 = icmp slt i32 %3070, 3
  br i1 %3071, label %3072, label %3107

; <label>:3072                                    ; preds = %3069
  %3073 = load i32* %c, align 4
  %3074 = sext i32 %3073 to i64
  %3075 = load i32* %col, align 4
  %3076 = sext i32 %3075 to i64
  %3077 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %3078 = load [3 x i32]** %3077, align 8
  %3079 = getelementptr inbounds [3 x i32]* %3078, i64 %3076
  %3080 = getelementptr inbounds [3 x i32]* %3079, i32 0, i64 %3074
  %3081 = load i32* %3080, align 4
  %3082 = mul nsw i32 %3081, 6707
  %3083 = load i32* %c, align 4
  %3084 = sext i32 %3083 to i64
  %3085 = load i32* %col, align 4
  %3086 = sext i32 %3085 to i64
  %3087 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 1
  %3088 = load [3 x i32]** %3087, align 8
  %3089 = getelementptr inbounds [3 x i32]* %3088, i64 %3086
  %3090 = getelementptr inbounds [3 x i32]* %3089, i32 0, i64 %3084
  %3091 = load i32* %3090, align 4
  %3092 = mul nsw i32 %3091, 1485
  %3093 = add nsw i32 %3082, %3092
  %3094 = add nsw i32 %3093, 4096
  %3095 = ashr i32 %3094, 13
  %3096 = load i32* %c, align 4
  %3097 = sext i32 %3096 to i64
  %3098 = load i32* %col, align 4
  %3099 = sext i32 %3098 to i64
  %3100 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %3101 = load [3 x i32]** %3100, align 8
  %3102 = getelementptr inbounds [3 x i32]* %3101, i64 %3099
  %3103 = getelementptr inbounds [3 x i32]* %3102, i32 0, i64 %3097
  store i32 %3095, i32* %3103, align 4
  br label %3104

; <label>:3104                                    ; preds = %3072
  %3105 = load i32* %c, align 4
  %3106 = add nsw i32 %3105, 1
  store i32 %3106, i32* %c, align 4
  br label %3069

; <label>:3107                                    ; preds = %3069
  br label %3108

; <label>:3108                                    ; preds = %3107
  %3109 = load i32* %col, align 4
  %3110 = add nsw i32 %3109, 1
  store i32 %3110, i32* %col, align 4
  br label %3062

; <label>:3111                                    ; preds = %3062
  br label %3112

; <label>:3112                                    ; preds = %3111, %3051
  store i32 0, i32* %col, align 4
  br label %3113

; <label>:3113                                    ; preds = %3259, %3112
  %3114 = load i32* %col, align 4
  %3115 = load i16* @width, align 2
  %3116 = zext i16 %3115 to i32
  %3117 = and i32 %3116, -4
  %3118 = icmp slt i32 %3114, %3117
  br i1 %3118, label %3119, label %3262

; <label>:3119                                    ; preds = %3113
  store i32 30, i32* %j, align 4
  store i32 30, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %3120

; <label>:3120                                    ; preds = %3151, %3119
  %3121 = load i32* %c, align 4
  %3122 = icmp slt i32 %3121, 3
  br i1 %3122, label %3123, label %3154

; <label>:3123                                    ; preds = %3120
  %3124 = load i32* %c, align 4
  %3125 = sext i32 %3124 to i64
  %3126 = load i32* %col, align 4
  %3127 = sext i32 %3126 to i64
  %3128 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %3129 = load [3 x i32]** %3128, align 8
  %3130 = getelementptr inbounds [3 x i32]* %3129, i64 %3127
  %3131 = getelementptr inbounds [3 x i32]* %3130, i32 0, i64 %3125
  %3132 = load i32* %3131, align 4
  %3133 = load i32* %i, align 4
  %3134 = add nsw i32 %3133, %3132
  store i32 %3134, i32* %i, align 4
  %3135 = load i32* %c, align 4
  %3136 = sext i32 %3135 to i64
  %3137 = load i32* %row, align 4
  %3138 = load i16* @width, align 2
  %3139 = zext i16 %3138 to i32
  %3140 = mul nsw i32 %3137, %3139
  %3141 = load i32* %col, align 4
  %3142 = add nsw i32 %3140, %3141
  %3143 = sext i32 %3142 to i64
  %3144 = load [4 x i16]** @image, align 8
  %3145 = getelementptr inbounds [4 x i16]* %3144, i64 %3143
  %3146 = getelementptr inbounds [4 x i16]* %3145, i32 0, i64 %3136
  %3147 = load i16* %3146, align 2
  %3148 = sext i16 %3147 to i32
  %3149 = load i32* %j, align 4
  %3150 = add nsw i32 %3149, %3148
  store i32 %3150, i32* %j, align 4
  br label %3151

; <label>:3151                                    ; preds = %3123
  %3152 = load i32* %c, align 4
  %3153 = add nsw i32 %3152, 1
  store i32 %3153, i32* %c, align 4
  br label %3120

; <label>:3154                                    ; preds = %3120
  %3155 = load i32* %j, align 4
  %3156 = shl i32 %3155, 16
  %3157 = load i32* %i, align 4
  %3158 = sdiv i32 %3156, %3157
  store i32 %3158, i32* %j, align 4
  store i32 0, i32* %c, align 4
  store i32 0, i32* %sum, align 4
  br label %3159

; <label>:3159                                    ; preds = %3206, %3154
  %3160 = load i32* %c, align 4
  %3161 = icmp slt i32 %3160, 3
  br i1 %3161, label %3162, label %3209

; <label>:3162                                    ; preds = %3159
  %3163 = load i32* %c, align 4
  %3164 = add nsw i32 %3163, 3
  %3165 = sext i32 %3164 to i64
  %3166 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %3165
  %3167 = load i16** %3166, align 8
  %3168 = load i32* %c, align 4
  %3169 = sext i32 %3168 to i64
  %3170 = load i32* %col, align 4
  %3171 = sext i32 %3170 to i64
  %3172 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 2
  %3173 = load [3 x i32]** %3172, align 8
  %3174 = getelementptr inbounds [3 x i32]* %3173, i64 %3171
  %3175 = getelementptr inbounds [3 x i32]* %3174, i32 0, i64 %3169
  %3176 = load i32* %3175, align 4
  %3177 = load i32* %j, align 4
  %3178 = mul nsw i32 %3176, %3177
  %3179 = add nsw i32 %3178, 32768
  %3180 = ashr i32 %3179, 16
  %3181 = load i32* %c, align 4
  %3182 = sext i32 %3181 to i64
  %3183 = load i32* %row, align 4
  %3184 = load i16* @width, align 2
  %3185 = zext i16 %3184 to i32
  %3186 = mul nsw i32 %3183, %3185
  %3187 = load i32* %col, align 4
  %3188 = add nsw i32 %3186, %3187
  %3189 = sext i32 %3188 to i64
  %3190 = load [4 x i16]** @image, align 8
  %3191 = getelementptr inbounds [4 x i16]* %3190, i64 %3189
  %3192 = getelementptr inbounds [4 x i16]* %3191, i32 0, i64 %3182
  %3193 = load i16* %3192, align 2
  %3194 = sext i16 %3193 to i32
  %3195 = sub nsw i32 %3180, %3194
  %3196 = call i32 @foveon_apply_curve(i16* %3167, i32 %3195)
  %3197 = load i32* %c, align 4
  %3198 = sext i32 %3197 to i64
  %3199 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %3198
  store i32 %3196, i32* %3199, align 4
  %3200 = load i32* %c, align 4
  %3201 = sext i32 %3200 to i64
  %3202 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %3201
  %3203 = load i32* %3202, align 4
  %3204 = load i32* %sum, align 4
  %3205 = add nsw i32 %3204, %3203
  store i32 %3205, i32* %sum, align 4
  br label %3206

; <label>:3206                                    ; preds = %3162
  %3207 = load i32* %c, align 4
  %3208 = add nsw i32 %3207, 1
  store i32 %3208, i32* %c, align 4
  br label %3159

; <label>:3209                                    ; preds = %3159
  %3210 = load i32* %sum, align 4
  %3211 = ashr i32 %3210, 3
  store i32 %3211, i32* %sum, align 4
  store i32 0, i32* %c, align 4
  br label %3212

; <label>:3212                                    ; preds = %3255, %3209
  %3213 = load i32* %c, align 4
  %3214 = icmp slt i32 %3213, 3
  br i1 %3214, label %3215, label %3258

; <label>:3215                                    ; preds = %3212
  %3216 = load i32* %c, align 4
  %3217 = sext i32 %3216 to i64
  %3218 = load i32* %row, align 4
  %3219 = load i16* @width, align 2
  %3220 = zext i16 %3219 to i32
  %3221 = mul nsw i32 %3218, %3220
  %3222 = load i32* %col, align 4
  %3223 = add nsw i32 %3221, %3222
  %3224 = sext i32 %3223 to i64
  %3225 = load [4 x i16]** @image, align 8
  %3226 = getelementptr inbounds [4 x i16]* %3225, i64 %3224
  %3227 = getelementptr inbounds [4 x i16]* %3226, i32 0, i64 %3217
  %3228 = load i16* %3227, align 2
  %3229 = sext i16 %3228 to i32
  %3230 = load i32* %c, align 4
  %3231 = sext i32 %3230 to i64
  %3232 = getelementptr inbounds [3 x i32]* %ipix, i32 0, i64 %3231
  %3233 = load i32* %3232, align 4
  %3234 = add nsw i32 %3229, %3233
  %3235 = load i32* %sum, align 4
  %3236 = sub nsw i32 %3234, %3235
  store i32 %3236, i32* %i, align 4
  %3237 = load i32* %i, align 4
  %3238 = icmp slt i32 %3237, 0
  br i1 %3238, label %3239, label %3240

; <label>:3239                                    ; preds = %3215
  store i32 0, i32* %i, align 4
  br label %3240

; <label>:3240                                    ; preds = %3239, %3215
  %3241 = load i32* %i, align 4
  %3242 = trunc i32 %3241 to i16
  %3243 = load i32* %c, align 4
  %3244 = sext i32 %3243 to i64
  %3245 = load i32* %row, align 4
  %3246 = load i16* @width, align 2
  %3247 = zext i16 %3246 to i32
  %3248 = mul nsw i32 %3245, %3247
  %3249 = load i32* %col, align 4
  %3250 = add nsw i32 %3248, %3249
  %3251 = sext i32 %3250 to i64
  %3252 = load [4 x i16]** @image, align 8
  %3253 = getelementptr inbounds [4 x i16]* %3252, i64 %3251
  %3254 = getelementptr inbounds [4 x i16]* %3253, i32 0, i64 %3244
  store i16 %3242, i16* %3254, align 2
  br label %3255

; <label>:3255                                    ; preds = %3240
  %3256 = load i32* %c, align 4
  %3257 = add nsw i32 %3256, 1
  store i32 %3257, i32* %c, align 4
  br label %3212

; <label>:3258                                    ; preds = %3212
  br label %3259

; <label>:3259                                    ; preds = %3258
  %3260 = load i32* %col, align 4
  %3261 = add nsw i32 %3260, 1
  store i32 %3261, i32* %col, align 4
  br label %3113

; <label>:3262                                    ; preds = %3113
  br label %3263

; <label>:3263                                    ; preds = %3262
  %3264 = load i32* %row, align 4
  %3265 = add nsw i32 %3264, 1
  store i32 %3265, i32* %row, align 4
  br label %2929

; <label>:3266                                    ; preds = %2929
  %3267 = load [3 x i16]** %shrink, align 8
  %3268 = bitcast [3 x i16]* %3267 to i8*
  call void @free(i8* %3268) #4
  %3269 = getelementptr inbounds [7 x [3 x i32]*]* %smrow, i32 0, i64 6
  %3270 = load [3 x i32]** %3269, align 8
  %3271 = bitcast [3 x i32]* %3270 to i8*
  call void @free(i8* %3271) #4
  store i32 0, i32* %i, align 4
  br label %3272

; <label>:3272                                    ; preds = %3281, %3266
  %3273 = load i32* %i, align 4
  %3274 = icmp slt i32 %3273, 8
  br i1 %3274, label %3275, label %3284

; <label>:3275                                    ; preds = %3272
  %3276 = load i32* %i, align 4
  %3277 = sext i32 %3276 to i64
  %3278 = getelementptr inbounds [8 x i16*]* %curve, i32 0, i64 %3277
  %3279 = load i16** %3278, align 8
  %3280 = bitcast i16* %3279 to i8*
  call void @free(i8* %3280) #4
  br label %3281

; <label>:3281                                    ; preds = %3275
  %3282 = load i32* %i, align 4
  %3283 = add nsw i32 %3282, 1
  store i32 %3283, i32* %i, align 4
  br label %3272

; <label>:3284                                    ; preds = %3272
  %3285 = getelementptr inbounds [4 x i32]* %keep, i32 0, i64 1
  %3286 = load i32* %3285, align 4
  %3287 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 1
  %3288 = load i32* %3287, align 4
  %3289 = sub nsw i32 %3288, %3286
  store i32 %3289, i32* %3287, align 4
  %3290 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 3
  %3291 = load i32* %3290, align 4
  %3292 = sub nsw i32 %3291, 2
  store i32 %3292, i32* %3290, align 4
  %3293 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 2
  %3294 = load i32* %3293, align 4
  %3295 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 0
  %3296 = load i32* %3295, align 4
  %3297 = sub nsw i32 %3294, %3296
  store i32 %3297, i32* %i, align 4
  store i32 0, i32* %row, align 4
  br label %3298

; <label>:3298                                    ; preds = %3331, %3284
  %3299 = load i32* %row, align 4
  %3300 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 3
  %3301 = load i32* %3300, align 4
  %3302 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 1
  %3303 = load i32* %3302, align 4
  %3304 = sub nsw i32 %3301, %3303
  %3305 = icmp slt i32 %3299, %3304
  br i1 %3305, label %3306, label %3334

; <label>:3306                                    ; preds = %3298
  %3307 = load i32* %row, align 4
  %3308 = load i32* %i, align 4
  %3309 = mul nsw i32 %3307, %3308
  %3310 = sext i32 %3309 to i64
  %3311 = load [4 x i16]** @image, align 8
  %3312 = getelementptr inbounds [4 x i16]* %3311, i64 %3310
  %3313 = bitcast [4 x i16]* %3312 to i8*
  %3314 = load i32* %row, align 4
  %3315 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 1
  %3316 = load i32* %3315, align 4
  %3317 = add nsw i32 %3314, %3316
  %3318 = load i16* @width, align 2
  %3319 = zext i16 %3318 to i32
  %3320 = mul nsw i32 %3317, %3319
  %3321 = getelementptr inbounds [4 x i32]* %active, i32 0, i64 0
  %3322 = load i32* %3321, align 4
  %3323 = add nsw i32 %3320, %3322
  %3324 = sext i32 %3323 to i64
  %3325 = load [4 x i16]** @image, align 8
  %3326 = getelementptr inbounds [4 x i16]* %3325, i64 %3324
  %3327 = bitcast [4 x i16]* %3326 to i8*
  %3328 = load i32* %i, align 4
  %3329 = sext i32 %3328 to i64
  %3330 = mul i64 %3329, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3313, i8* %3327, i64 %3330, i32 2, i1 false)
  br label %3331

; <label>:3331                                    ; preds = %3306
  %3332 = load i32* %row, align 4
  %3333 = add nsw i32 %3332, 1
  store i32 %3333, i32* %row, align 4
  br label %3298

; <label>:3334                                    ; preds = %3298
  %3335 = load i32* %i, align 4
  %3336 = trunc i32 %3335 to i16
  store i16 %3336, i16* @width, align 2
  %3337 = load i32* %row, align 4
  %3338 = trunc i32 %3337 to i16
  store i16 %3338, i16* @height, align 2
  br label %3339

; <label>:3339                                    ; preds = %3334, %606, %156
  ret void
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind
declare double @exp(double) #3

; Function Attrs: nounwind readnone
declare double @floor(double) #5

; Function Attrs: nounwind uwtable
define void @bad_pixels(i8* %fname) #0 {
  %1 = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %cp = alloca i8*, align 8
  %line = alloca [128 x i8], align 16
  %len = alloca i32, align 4
  %time = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %rad = alloca i32, align 4
  %tot = alloca i32, align 4
  %n = alloca i32, align 4
  %fixed = alloca i32, align 4
  store i8* %fname, i8** %1, align 8
  store %struct._IO_FILE* null, %struct._IO_FILE** %fp, align 8
  store i32 0, i32* %fixed, align 4
  %2 = load i32* @filters, align 4
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %261

; <label>:5                                       ; preds = %0
  %6 = load i8** %1, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %5
  %9 = load i8** %1, align 8
  %10 = call %struct._IO_FILE* @fopen(i8* %9, i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0))
  store %struct._IO_FILE* %10, %struct._IO_FILE** %fp, align 8
  br label %79

; <label>:11                                      ; preds = %5
  store i32 32, i32* %len, align 4
  br label %12

; <label>:12                                      ; preds = %34, %11
  %13 = load i32* %len, align 4
  %14 = sext i32 %13 to i64
  %15 = call noalias i8* @malloc(i64 %14) #4
  store i8* %15, i8** %1, align 8
  %16 = load i8** %1, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %19, label %18

; <label>:18                                      ; preds = %12
  br label %261

; <label>:19                                      ; preds = %12
  %20 = load i8** %1, align 8
  %21 = load i32* %len, align 4
  %22 = sub nsw i32 %21, 16
  %23 = sext i32 %22 to i64
  %24 = call i8* @getcwd(i8* %20, i64 %23) #4
  %25 = icmp ne i8* %24, null
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %19
  br label %37

; <label>:27                                      ; preds = %19
  %28 = load i8** %1, align 8
  call void @free(i8* %28) #4
  %29 = call i32* @__errno_location() #9
  %30 = load i32* %29, align 4
  %31 = icmp ne i32 %30, 34
  br i1 %31, label %32, label %33

; <label>:32                                      ; preds = %27
  br label %261

; <label>:33                                      ; preds = %27
  br label %34

; <label>:34                                      ; preds = %33
  %35 = load i32* %len, align 4
  %36 = mul nsw i32 %35, 2
  store i32 %36, i32* %len, align 4
  br label %12

; <label>:37                                      ; preds = %26
  %38 = load i8** %1, align 8
  %39 = load i8** %1, align 8
  %40 = call i64 @strlen(i8* %39) #10
  %41 = getelementptr inbounds i8* %38, i64 %40
  store i8* %41, i8** %cp, align 8
  %42 = load i8** %cp, align 8
  %43 = getelementptr inbounds i8* %42, i64 -1
  %44 = load i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp eq i32 %45, 47
  br i1 %46, label %47, label %50

; <label>:47                                      ; preds = %37
  %48 = load i8** %cp, align 8
  %49 = getelementptr inbounds i8* %48, i32 -1
  store i8* %49, i8** %cp, align 8
  br label %50

; <label>:50                                      ; preds = %47, %37
  br label %51

; <label>:51                                      ; preds = %76, %50
  %52 = load i8** %1, align 8
  %53 = load i8* %52, align 1
  %54 = sext i8 %53 to i32
  %55 = icmp eq i32 %54, 47
  br i1 %55, label %56, label %77

; <label>:56                                      ; preds = %51
  %57 = load i8** %cp, align 8
  %58 = call i8* @strcpy(i8* %57, i8* getelementptr inbounds ([12 x i8]* @.str60, i32 0, i32 0)) #4
  %59 = load i8** %1, align 8
  %60 = call %struct._IO_FILE* @fopen(i8* %59, i8* getelementptr inbounds ([2 x i8]* @.str59, i32 0, i32 0))
  store %struct._IO_FILE* %60, %struct._IO_FILE** %fp, align 8
  %61 = icmp ne %struct._IO_FILE* %60, null
  br i1 %61, label %62, label %63

; <label>:62                                      ; preds = %56
  br label %77

; <label>:63                                      ; preds = %56
  %64 = load i8** %cp, align 8
  %65 = load i8** %1, align 8
  %66 = icmp eq i8* %64, %65
  br i1 %66, label %67, label %68

; <label>:67                                      ; preds = %63
  br label %77

; <label>:68                                      ; preds = %63
  br label %69

; <label>:69                                      ; preds = %75, %68
  %70 = load i8** %cp, align 8
  %71 = getelementptr inbounds i8* %70, i32 -1
  store i8* %71, i8** %cp, align 8
  %72 = load i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp ne i32 %73, 47
  br i1 %74, label %75, label %76

; <label>:75                                      ; preds = %69
  br label %69

; <label>:76                                      ; preds = %69
  br label %51

; <label>:77                                      ; preds = %67, %62, %51
  %78 = load i8** %1, align 8
  call void @free(i8* %78) #4
  br label %79

; <label>:79                                      ; preds = %77, %8
  %80 = load %struct._IO_FILE** %fp, align 8
  %81 = icmp ne %struct._IO_FILE* %80, null
  br i1 %81, label %83, label %82

; <label>:82                                      ; preds = %79
  br label %261

; <label>:83                                      ; preds = %79
  br label %84

; <label>:84                                      ; preds = %251, %117, %111, %100, %83
  %85 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %86 = load %struct._IO_FILE** %fp, align 8
  %87 = call i8* @fgets(i8* %85, i32 128, %struct._IO_FILE* %86)
  %88 = icmp ne i8* %87, null
  br i1 %88, label %89, label %252

; <label>:89                                      ; preds = %84
  %90 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %91 = call i8* @strchr(i8* %90, i32 35) #10
  store i8* %91, i8** %cp, align 8
  %92 = load i8** %cp, align 8
  %93 = icmp ne i8* %92, null
  br i1 %93, label %94, label %96

; <label>:94                                      ; preds = %89
  %95 = load i8** %cp, align 8
  store i8 0, i8* %95, align 1
  br label %96

; <label>:96                                      ; preds = %94, %89
  %97 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %98 = call i32 (i8*, i8*, ...)* @sscanf(i8* %97, i8* getelementptr inbounds ([9 x i8]* @.str61, i32 0, i32 0), i32* %col, i32* %row, i32* %time) #4
  %99 = icmp ne i32 %98, 3
  br i1 %99, label %100, label %101

; <label>:100                                     ; preds = %96
  br label %84

; <label>:101                                     ; preds = %96
  %102 = load i32* %col, align 4
  %103 = load i16* @width, align 2
  %104 = zext i16 %103 to i32
  %105 = icmp uge i32 %102, %104
  br i1 %105, label %111, label %106

; <label>:106                                     ; preds = %101
  %107 = load i32* %row, align 4
  %108 = load i16* @height, align 2
  %109 = zext i16 %108 to i32
  %110 = icmp uge i32 %107, %109
  br i1 %110, label %111, label %112

; <label>:111                                     ; preds = %106, %101
  br label %84

; <label>:112                                     ; preds = %106
  %113 = load i32* %time, align 4
  %114 = sext i32 %113 to i64
  %115 = load i64* @timestamp, align 8
  %116 = icmp sgt i64 %114, %115
  br i1 %116, label %117, label %118

; <label>:117                                     ; preds = %112
  br label %84

; <label>:118                                     ; preds = %112
  store i32 0, i32* %n, align 4
  store i32 0, i32* %tot, align 4
  store i32 1, i32* %rad, align 4
  br label %119

; <label>:119                                     ; preds = %209, %118
  %120 = load i32* %rad, align 4
  %121 = icmp slt i32 %120, 3
  br i1 %121, label %122, label %125

; <label>:122                                     ; preds = %119
  %123 = load i32* %n, align 4
  %124 = icmp eq i32 %123, 0
  br label %125

; <label>:125                                     ; preds = %122, %119
  %126 = phi i1 [ false, %119 ], [ %124, %122 ]
  br i1 %126, label %127, label %212

; <label>:127                                     ; preds = %125
  %128 = load i32* %row, align 4
  %129 = load i32* %rad, align 4
  %130 = sub nsw i32 %128, %129
  store i32 %130, i32* %r, align 4
  br label %131

; <label>:131                                     ; preds = %205, %127
  %132 = load i32* %r, align 4
  %133 = load i32* %row, align 4
  %134 = load i32* %rad, align 4
  %135 = add nsw i32 %133, %134
  %136 = icmp sle i32 %132, %135
  br i1 %136, label %137, label %208

; <label>:137                                     ; preds = %131
  %138 = load i32* %col, align 4
  %139 = load i32* %rad, align 4
  %140 = sub nsw i32 %138, %139
  store i32 %140, i32* %c, align 4
  br label %141

; <label>:141                                     ; preds = %201, %137
  %142 = load i32* %c, align 4
  %143 = load i32* %col, align 4
  %144 = load i32* %rad, align 4
  %145 = add nsw i32 %143, %144
  %146 = icmp sle i32 %142, %145
  br i1 %146, label %147, label %204

; <label>:147                                     ; preds = %141
  %148 = load i32* %r, align 4
  %149 = load i16* @height, align 2
  %150 = zext i16 %149 to i32
  %151 = icmp ult i32 %148, %150
  br i1 %151, label %152, label %200

; <label>:152                                     ; preds = %147
  %153 = load i32* %c, align 4
  %154 = load i16* @width, align 2
  %155 = zext i16 %154 to i32
  %156 = icmp ult i32 %153, %155
  br i1 %156, label %157, label %200

; <label>:157                                     ; preds = %152
  %158 = load i32* %r, align 4
  %159 = load i32* %row, align 4
  %160 = icmp ne i32 %158, %159
  br i1 %160, label %165, label %161

; <label>:161                                     ; preds = %157
  %162 = load i32* %c, align 4
  %163 = load i32* %col, align 4
  %164 = icmp ne i32 %162, %163
  br i1 %164, label %165, label %200

; <label>:165                                     ; preds = %161, %157
  %166 = load i32* %r, align 4
  %167 = load i32* %c, align 4
  %168 = call i32 @fc(i32 %166, i32 %167)
  %169 = load i32* %row, align 4
  %170 = load i32* %col, align 4
  %171 = call i32 @fc(i32 %169, i32 %170)
  %172 = icmp eq i32 %168, %171
  br i1 %172, label %173, label %200

; <label>:173                                     ; preds = %165
  %174 = load i32* %r, align 4
  %175 = load i32* %c, align 4
  %176 = call i32 @fc(i32 %174, i32 %175)
  %177 = sext i32 %176 to i64
  %178 = load i32* %r, align 4
  %179 = load i16* @shrink, align 2
  %180 = zext i16 %179 to i32
  %181 = ashr i32 %178, %180
  %182 = load i16* @iwidth, align 2
  %183 = zext i16 %182 to i32
  %184 = mul nsw i32 %181, %183
  %185 = load i32* %c, align 4
  %186 = load i16* @shrink, align 2
  %187 = zext i16 %186 to i32
  %188 = ashr i32 %185, %187
  %189 = add nsw i32 %184, %188
  %190 = sext i32 %189 to i64
  %191 = load [4 x i16]** @image, align 8
  %192 = getelementptr inbounds [4 x i16]* %191, i64 %190
  %193 = getelementptr inbounds [4 x i16]* %192, i32 0, i64 %177
  %194 = load i16* %193, align 2
  %195 = zext i16 %194 to i32
  %196 = load i32* %tot, align 4
  %197 = add nsw i32 %196, %195
  store i32 %197, i32* %tot, align 4
  %198 = load i32* %n, align 4
  %199 = add nsw i32 %198, 1
  store i32 %199, i32* %n, align 4
  br label %200

; <label>:200                                     ; preds = %173, %165, %161, %152, %147
  br label %201

; <label>:201                                     ; preds = %200
  %202 = load i32* %c, align 4
  %203 = add nsw i32 %202, 1
  store i32 %203, i32* %c, align 4
  br label %141

; <label>:204                                     ; preds = %141
  br label %205

; <label>:205                                     ; preds = %204
  %206 = load i32* %r, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %r, align 4
  br label %131

; <label>:208                                     ; preds = %131
  br label %209

; <label>:209                                     ; preds = %208
  %210 = load i32* %rad, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %rad, align 4
  br label %119

; <label>:212                                     ; preds = %125
  %213 = load i32* %tot, align 4
  %214 = load i32* %n, align 4
  %215 = sdiv i32 %213, %214
  %216 = trunc i32 %215 to i16
  %217 = load i32* %row, align 4
  %218 = load i32* %col, align 4
  %219 = call i32 @fc(i32 %217, i32 %218)
  %220 = sext i32 %219 to i64
  %221 = load i32* %row, align 4
  %222 = load i16* @shrink, align 2
  %223 = zext i16 %222 to i32
  %224 = ashr i32 %221, %223
  %225 = load i16* @iwidth, align 2
  %226 = zext i16 %225 to i32
  %227 = mul nsw i32 %224, %226
  %228 = load i32* %col, align 4
  %229 = load i16* @shrink, align 2
  %230 = zext i16 %229 to i32
  %231 = ashr i32 %228, %230
  %232 = add nsw i32 %227, %231
  %233 = sext i32 %232 to i64
  %234 = load [4 x i16]** @image, align 8
  %235 = getelementptr inbounds [4 x i16]* %234, i64 %233
  %236 = getelementptr inbounds [4 x i16]* %235, i32 0, i64 %220
  store i16 %216, i16* %236, align 2
  %237 = load i32* @verbose, align 4
  %238 = icmp ne i32 %237, 0
  br i1 %238, label %239, label %251

; <label>:239                                     ; preds = %212
  %240 = load i32* %fixed, align 4
  %241 = add nsw i32 %240, 1
  store i32 %241, i32* %fixed, align 4
  %242 = icmp ne i32 %240, 0
  br i1 %242, label %246, label %243

; <label>:243                                     ; preds = %239
  %244 = load %struct._IO_FILE** @stderr, align 8
  %245 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %244, i8* getelementptr inbounds ([22 x i8]* @.str62, i32 0, i32 0))
  br label %246

; <label>:246                                     ; preds = %243, %239
  %247 = load %struct._IO_FILE** @stderr, align 8
  %248 = load i32* %col, align 4
  %249 = load i32* %row, align 4
  %250 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %247, i8* getelementptr inbounds ([7 x i8]* @.str63, i32 0, i32 0), i32 %248, i32 %249)
  br label %251

; <label>:251                                     ; preds = %246, %212
  br label %84

; <label>:252                                     ; preds = %84
  %253 = load i32* %fixed, align 4
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %255, label %258

; <label>:255                                     ; preds = %252
  %256 = load %struct._IO_FILE** @stderr, align 8
  %257 = call i32 @fputc(i32 10, %struct._IO_FILE* %256)
  br label %258

; <label>:258                                     ; preds = %255, %252
  %259 = load %struct._IO_FILE** %fp, align 8
  %260 = call i32 @fclose(%struct._IO_FILE* %259)
  br label %261

; <label>:261                                     ; preds = %258, %82, %32, %18, %4
  ret void
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @getcwd(i8*, i64) #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #5

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #6

declare i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #6

declare i32 @fclose(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @subtract(i8* %fname) #0 {
  %1 = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %dim = alloca [3 x i32], align 4
  %comment = alloca i32, align 4
  %number = alloca i32, align 4
  %error = alloca i32, align 4
  %nd = alloca i32, align 4
  %c = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %pixel = alloca i16*, align 8
  store i8* %fname, i8** %1, align 8
  %2 = bitcast [3 x i32]* %dim to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 12, i32 4, i1 false)
  store i32 0, i32* %comment, align 4
  store i32 0, i32* %number, align 4
  store i32 0, i32* %error, align 4
  store i32 0, i32* %nd, align 4
  %3 = load i8** %1, align 8
  %4 = call %struct._IO_FILE* @fopen(i8* %3, i8* getelementptr inbounds ([3 x i8]* @.str64, i32 0, i32 0))
  store %struct._IO_FILE* %4, %struct._IO_FILE** %fp, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %0
  %7 = load i8** %1, align 8
  call void @perror(i8* %7)
  br label %272

; <label>:8                                       ; preds = %0
  %9 = load %struct._IO_FILE** %fp, align 8
  %10 = call i32 @getc_unlocked(%struct._IO_FILE* %9)
  %11 = icmp ne i32 %10, 80
  br i1 %11, label %16, label %12

; <label>:12                                      ; preds = %8
  %13 = load %struct._IO_FILE** %fp, align 8
  %14 = call i32 @getc_unlocked(%struct._IO_FILE* %13)
  %15 = icmp ne i32 %14, 53
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %12, %8
  store i32 1, i32* %error, align 4
  br label %17

; <label>:17                                      ; preds = %16, %12
  br label %18

; <label>:18                                      ; preds = %94, %41, %17
  %19 = load i32* %error, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %28, label %21

; <label>:21                                      ; preds = %18
  %22 = load i32* %nd, align 4
  %23 = icmp slt i32 %22, 3
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %21
  %25 = load %struct._IO_FILE** %fp, align 8
  %26 = call i32 @getc_unlocked(%struct._IO_FILE* %25)
  store i32 %26, i32* %c, align 4
  %27 = icmp ne i32 %26, -1
  br label %28

; <label>:28                                      ; preds = %24, %21, %18
  %29 = phi i1 [ false, %21 ], [ false, %18 ], [ %27, %24 ]
  br i1 %29, label %30, label %95

; <label>:30                                      ; preds = %28
  %31 = load i32* %c, align 4
  %32 = icmp eq i32 %31, 35
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %30
  store i32 1, i32* %comment, align 4
  br label %34

; <label>:34                                      ; preds = %33, %30
  %35 = load i32* %c, align 4
  %36 = icmp eq i32 %35, 10
  br i1 %36, label %37, label %38

; <label>:37                                      ; preds = %34
  store i32 0, i32* %comment, align 4
  br label %38

; <label>:38                                      ; preds = %37, %34
  %39 = load i32* %comment, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %42

; <label>:41                                      ; preds = %38
  br label %18

; <label>:42                                      ; preds = %38
  %43 = load i32* %c, align 4
  %44 = sext i32 %43 to i64
  %45 = call i16** @__ctype_b_loc() #9
  %46 = load i16** %45, align 8
  %47 = getelementptr inbounds i16* %46, i64 %44
  %48 = load i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = and i32 %49, 2048
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %53

; <label>:52                                      ; preds = %42
  store i32 1, i32* %number, align 4
  br label %53

; <label>:53                                      ; preds = %52, %42
  %54 = load i32* %number, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %94

; <label>:56                                      ; preds = %53
  %57 = load i32* %c, align 4
  %58 = sext i32 %57 to i64
  %59 = call i16** @__ctype_b_loc() #9
  %60 = load i16** %59, align 8
  %61 = getelementptr inbounds i16* %60, i64 %58
  %62 = load i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = and i32 %63, 2048
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %78

; <label>:66                                      ; preds = %56
  %67 = load i32* %nd, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 %68
  %70 = load i32* %69, align 4
  %71 = mul nsw i32 %70, 10
  %72 = load i32* %c, align 4
  %73 = add nsw i32 %71, %72
  %74 = sub nsw i32 %73, 48
  %75 = load i32* %nd, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 %76
  store i32 %74, i32* %77, align 4
  br label %93

; <label>:78                                      ; preds = %56
  %79 = load i32* %c, align 4
  %80 = sext i32 %79 to i64
  %81 = call i16** @__ctype_b_loc() #9
  %82 = load i16** %81, align 8
  %83 = getelementptr inbounds i16* %82, i64 %80
  %84 = load i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = and i32 %85, 8192
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %91

; <label>:88                                      ; preds = %78
  store i32 0, i32* %number, align 4
  %89 = load i32* %nd, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %nd, align 4
  br label %92

; <label>:91                                      ; preds = %78
  store i32 1, i32* %error, align 4
  br label %92

; <label>:92                                      ; preds = %91, %88
  br label %93

; <label>:93                                      ; preds = %92, %66
  br label %94

; <label>:94                                      ; preds = %93, %53
  br label %18

; <label>:95                                      ; preds = %28
  %96 = load i32* %error, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %101, label %98

; <label>:98                                      ; preds = %95
  %99 = load i32* %nd, align 4
  %100 = icmp slt i32 %99, 3
  br i1 %100, label %101, label %107

; <label>:101                                     ; preds = %98, %95
  %102 = load %struct._IO_FILE** @stderr, align 8
  %103 = load i8** %1, align 8
  %104 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([29 x i8]* @.str65, i32 0, i32 0), i8* %103)
  %105 = load %struct._IO_FILE** %fp, align 8
  %106 = call i32 @fclose(%struct._IO_FILE* %105)
  br label %272

; <label>:107                                     ; preds = %98
  %108 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 0
  %109 = load i32* %108, align 4
  %110 = load i16* @width, align 2
  %111 = zext i16 %110 to i32
  %112 = icmp ne i32 %109, %111
  br i1 %112, label %123, label %113

; <label>:113                                     ; preds = %107
  %114 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 1
  %115 = load i32* %114, align 4
  %116 = load i16* @height, align 2
  %117 = zext i16 %116 to i32
  %118 = icmp ne i32 %115, %117
  br i1 %118, label %123, label %119

; <label>:119                                     ; preds = %113
  %120 = getelementptr inbounds [3 x i32]* %dim, i32 0, i64 2
  %121 = load i32* %120, align 4
  %122 = icmp ne i32 %121, 65535
  br i1 %122, label %123, label %129

; <label>:123                                     ; preds = %119, %113, %107
  %124 = load %struct._IO_FILE** @stderr, align 8
  %125 = load i8** %1, align 8
  %126 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([30 x i8]* @.str66, i32 0, i32 0), i8* %125)
  %127 = load %struct._IO_FILE** %fp, align 8
  %128 = call i32 @fclose(%struct._IO_FILE* %127)
  br label %272

; <label>:129                                     ; preds = %119
  br label %130

; <label>:130                                     ; preds = %129
  %131 = load i16* @width, align 2
  %132 = zext i16 %131 to i64
  %133 = call noalias i8* @calloc(i64 %132, i64 2) #4
  %134 = bitcast i8* %133 to i16*
  store i16* %134, i16** %pixel, align 8
  %135 = load i16** %pixel, align 8
  %136 = bitcast i16* %135 to i8*
  call void @merror(i8* %136, i8* getelementptr inbounds ([11 x i8]* @.str67, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %137

; <label>:137                                     ; preds = %266, %130
  %138 = load i32* %row, align 4
  %139 = load i16* @height, align 2
  %140 = zext i16 %139 to i32
  %141 = icmp slt i32 %138, %140
  br i1 %141, label %142, label %269

; <label>:142                                     ; preds = %137
  %143 = load i16** %pixel, align 8
  %144 = bitcast i16* %143 to i8*
  %145 = load i16* @width, align 2
  %146 = zext i16 %145 to i64
  %147 = load %struct._IO_FILE** %fp, align 8
  %148 = call i64 @fread(i8* %144, i64 2, i64 %146, %struct._IO_FILE* %147)
  store i32 0, i32* %col, align 4
  br label %149

; <label>:149                                     ; preds = %262, %142
  %150 = load i32* %col, align 4
  %151 = load i16* @width, align 2
  %152 = zext i16 %151 to i32
  %153 = icmp slt i32 %150, %152
  br i1 %153, label %154, label %265

; <label>:154                                     ; preds = %149
  %155 = load i32* @filters, align 4
  %156 = load i32* %row, align 4
  %157 = shl i32 %156, 1
  %158 = and i32 %157, 14
  %159 = load i32* %col, align 4
  %160 = and i32 %159, 1
  %161 = add nsw i32 %158, %160
  %162 = shl i32 %161, 1
  %163 = lshr i32 %155, %162
  %164 = and i32 %163, 3
  %165 = zext i32 %164 to i64
  %166 = load i32* %row, align 4
  %167 = load i16* @shrink, align 2
  %168 = zext i16 %167 to i32
  %169 = ashr i32 %166, %168
  %170 = load i16* @iwidth, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nsw i32 %169, %171
  %173 = load i32* %col, align 4
  %174 = load i16* @shrink, align 2
  %175 = zext i16 %174 to i32
  %176 = ashr i32 %173, %175
  %177 = add nsw i32 %172, %176
  %178 = sext i32 %177 to i64
  %179 = load [4 x i16]** @image, align 8
  %180 = getelementptr inbounds [4 x i16]* %179, i64 %178
  %181 = getelementptr inbounds [4 x i16]* %180, i32 0, i64 %165
  %182 = load i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = load i32* %col, align 4
  %185 = sext i32 %184 to i64
  %186 = load i16** %pixel, align 8
  %187 = getelementptr inbounds i16* %186, i64 %185
  %188 = load i16* %187, align 2
  %189 = call zeroext i16 @ntohs(i16 zeroext %188) #9
  %190 = zext i16 %189 to i32
  %191 = sub nsw i32 %183, %190
  %192 = icmp sgt i32 %191, 0
  br i1 %192, label %193, label %231

; <label>:193                                     ; preds = %154
  %194 = load i32* @filters, align 4
  %195 = load i32* %row, align 4
  %196 = shl i32 %195, 1
  %197 = and i32 %196, 14
  %198 = load i32* %col, align 4
  %199 = and i32 %198, 1
  %200 = add nsw i32 %197, %199
  %201 = shl i32 %200, 1
  %202 = lshr i32 %194, %201
  %203 = and i32 %202, 3
  %204 = zext i32 %203 to i64
  %205 = load i32* %row, align 4
  %206 = load i16* @shrink, align 2
  %207 = zext i16 %206 to i32
  %208 = ashr i32 %205, %207
  %209 = load i16* @iwidth, align 2
  %210 = zext i16 %209 to i32
  %211 = mul nsw i32 %208, %210
  %212 = load i32* %col, align 4
  %213 = load i16* @shrink, align 2
  %214 = zext i16 %213 to i32
  %215 = ashr i32 %212, %214
  %216 = add nsw i32 %211, %215
  %217 = sext i32 %216 to i64
  %218 = load [4 x i16]** @image, align 8
  %219 = getelementptr inbounds [4 x i16]* %218, i64 %217
  %220 = getelementptr inbounds [4 x i16]* %219, i32 0, i64 %204
  %221 = load i16* %220, align 2
  %222 = zext i16 %221 to i32
  %223 = load i32* %col, align 4
  %224 = sext i32 %223 to i64
  %225 = load i16** %pixel, align 8
  %226 = getelementptr inbounds i16* %225, i64 %224
  %227 = load i16* %226, align 2
  %228 = call zeroext i16 @ntohs(i16 zeroext %227) #9
  %229 = zext i16 %228 to i32
  %230 = sub nsw i32 %222, %229
  br label %232

; <label>:231                                     ; preds = %154
  br label %232

; <label>:232                                     ; preds = %231, %193
  %233 = phi i32 [ %230, %193 ], [ 0, %231 ]
  %234 = trunc i32 %233 to i16
  %235 = load i32* @filters, align 4
  %236 = load i32* %row, align 4
  %237 = shl i32 %236, 1
  %238 = and i32 %237, 14
  %239 = load i32* %col, align 4
  %240 = and i32 %239, 1
  %241 = add nsw i32 %238, %240
  %242 = shl i32 %241, 1
  %243 = lshr i32 %235, %242
  %244 = and i32 %243, 3
  %245 = zext i32 %244 to i64
  %246 = load i32* %row, align 4
  %247 = load i16* @shrink, align 2
  %248 = zext i16 %247 to i32
  %249 = ashr i32 %246, %248
  %250 = load i16* @iwidth, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nsw i32 %249, %251
  %253 = load i32* %col, align 4
  %254 = load i16* @shrink, align 2
  %255 = zext i16 %254 to i32
  %256 = ashr i32 %253, %255
  %257 = add nsw i32 %252, %256
  %258 = sext i32 %257 to i64
  %259 = load [4 x i16]** @image, align 8
  %260 = getelementptr inbounds [4 x i16]* %259, i64 %258
  %261 = getelementptr inbounds [4 x i16]* %260, i32 0, i64 %245
  store i16 %234, i16* %261, align 2
  br label %262

; <label>:262                                     ; preds = %232
  %263 = load i32* %col, align 4
  %264 = add nsw i32 %263, 1
  store i32 %264, i32* %col, align 4
  br label %149

; <label>:265                                     ; preds = %149
  br label %266

; <label>:266                                     ; preds = %265
  %267 = load i32* %row, align 4
  %268 = add nsw i32 %267, 1
  store i32 %268, i32* %row, align 4
  br label %137

; <label>:269                                     ; preds = %137
  %270 = load i16** %pixel, align 8
  %271 = bitcast i16* %270 to i8*
  call void @free(i8* %271) #4
  store i32 0, i32* @black, align 4
  br label %272

; <label>:272                                     ; preds = %269, %123, %101, %6
  ret void
}

declare void @perror(i8*) #1

; Function Attrs: nounwind uwtable
define void @pseudoinverse([3 x double]* %in, [3 x double]* %out, i32 %size) #0 {
  %1 = alloca [3 x double]*, align 8
  %2 = alloca [3 x double]*, align 8
  %3 = alloca i32, align 4
  %work = alloca [3 x [6 x double]], align 16
  %num = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store [3 x double]* %in, [3 x double]** %1, align 8
  store [3 x double]* %out, [3 x double]** %2, align 8
  store i32 %size, i32* %3, align 4
  store i32 0, i32* %i, align 4
  br label %4

; <label>:4                                       ; preds = %70, %0
  %5 = load i32* %i, align 4
  %6 = icmp slt i32 %5, 3
  br i1 %6, label %7, label %73

; <label>:7                                       ; preds = %4
  store i32 0, i32* %j, align 4
  br label %8

; <label>:8                                       ; preds = %24, %7
  %9 = load i32* %j, align 4
  %10 = icmp slt i32 %9, 6
  br i1 %10, label %11, label %27

; <label>:11                                      ; preds = %8
  %12 = load i32* %j, align 4
  %13 = load i32* %i, align 4
  %14 = add nsw i32 %13, 3
  %15 = icmp eq i32 %12, %14
  %16 = zext i1 %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = load i32* %j, align 4
  %19 = sext i32 %18 to i64
  %20 = load i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %21
  %23 = getelementptr inbounds [6 x double]* %22, i32 0, i64 %19
  store double %17, double* %23, align 8
  br label %24

; <label>:24                                      ; preds = %11
  %25 = load i32* %j, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %j, align 4
  br label %8

; <label>:27                                      ; preds = %8
  store i32 0, i32* %j, align 4
  br label %28

; <label>:28                                      ; preds = %66, %27
  %29 = load i32* %j, align 4
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %69

; <label>:31                                      ; preds = %28
  store i32 0, i32* %k, align 4
  br label %32

; <label>:32                                      ; preds = %62, %31
  %33 = load i32* %k, align 4
  %34 = load i32* %3, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %65

; <label>:36                                      ; preds = %32
  %37 = load i32* %i, align 4
  %38 = sext i32 %37 to i64
  %39 = load i32* %k, align 4
  %40 = sext i32 %39 to i64
  %41 = load [3 x double]** %1, align 8
  %42 = getelementptr inbounds [3 x double]* %41, i64 %40
  %43 = getelementptr inbounds [3 x double]* %42, i32 0, i64 %38
  %44 = load double* %43, align 8
  %45 = load i32* %j, align 4
  %46 = sext i32 %45 to i64
  %47 = load i32* %k, align 4
  %48 = sext i32 %47 to i64
  %49 = load [3 x double]** %1, align 8
  %50 = getelementptr inbounds [3 x double]* %49, i64 %48
  %51 = getelementptr inbounds [3 x double]* %50, i32 0, i64 %46
  %52 = load double* %51, align 8
  %53 = fmul double %44, %52
  %54 = load i32* %j, align 4
  %55 = sext i32 %54 to i64
  %56 = load i32* %i, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %57
  %59 = getelementptr inbounds [6 x double]* %58, i32 0, i64 %55
  %60 = load double* %59, align 8
  %61 = fadd double %60, %53
  store double %61, double* %59, align 8
  br label %62

; <label>:62                                      ; preds = %36
  %63 = load i32* %k, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %k, align 4
  br label %32

; <label>:65                                      ; preds = %32
  br label %66

; <label>:66                                      ; preds = %65
  %67 = load i32* %j, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %j, align 4
  br label %28

; <label>:69                                      ; preds = %28
  br label %70

; <label>:70                                      ; preds = %69
  %71 = load i32* %i, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %i, align 4
  br label %4

; <label>:73                                      ; preds = %4
  store i32 0, i32* %i, align 4
  br label %74

; <label>:74                                      ; preds = %147, %73
  %75 = load i32* %i, align 4
  %76 = icmp slt i32 %75, 3
  br i1 %76, label %77, label %150

; <label>:77                                      ; preds = %74
  %78 = load i32* %i, align 4
  %79 = sext i32 %78 to i64
  %80 = load i32* %i, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %81
  %83 = getelementptr inbounds [6 x double]* %82, i32 0, i64 %79
  %84 = load double* %83, align 8
  store double %84, double* %num, align 8
  store i32 0, i32* %j, align 4
  br label %85

; <label>:85                                      ; preds = %98, %77
  %86 = load i32* %j, align 4
  %87 = icmp slt i32 %86, 6
  br i1 %87, label %88, label %101

; <label>:88                                      ; preds = %85
  %89 = load double* %num, align 8
  %90 = load i32* %j, align 4
  %91 = sext i32 %90 to i64
  %92 = load i32* %i, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %93
  %95 = getelementptr inbounds [6 x double]* %94, i32 0, i64 %91
  %96 = load double* %95, align 8
  %97 = fdiv double %96, %89
  store double %97, double* %95, align 8
  br label %98

; <label>:98                                      ; preds = %88
  %99 = load i32* %j, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %j, align 4
  br label %85

; <label>:101                                     ; preds = %85
  store i32 0, i32* %k, align 4
  br label %102

; <label>:102                                     ; preds = %143, %101
  %103 = load i32* %k, align 4
  %104 = icmp slt i32 %103, 3
  br i1 %104, label %105, label %146

; <label>:105                                     ; preds = %102
  %106 = load i32* %k, align 4
  %107 = load i32* %i, align 4
  %108 = icmp eq i32 %106, %107
  br i1 %108, label %109, label %110

; <label>:109                                     ; preds = %105
  br label %143

; <label>:110                                     ; preds = %105
  %111 = load i32* %i, align 4
  %112 = sext i32 %111 to i64
  %113 = load i32* %k, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %114
  %116 = getelementptr inbounds [6 x double]* %115, i32 0, i64 %112
  %117 = load double* %116, align 8
  store double %117, double* %num, align 8
  store i32 0, i32* %j, align 4
  br label %118

; <label>:118                                     ; preds = %139, %110
  %119 = load i32* %j, align 4
  %120 = icmp slt i32 %119, 6
  br i1 %120, label %121, label %142

; <label>:121                                     ; preds = %118
  %122 = load i32* %j, align 4
  %123 = sext i32 %122 to i64
  %124 = load i32* %i, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %125
  %127 = getelementptr inbounds [6 x double]* %126, i32 0, i64 %123
  %128 = load double* %127, align 8
  %129 = load double* %num, align 8
  %130 = fmul double %128, %129
  %131 = load i32* %j, align 4
  %132 = sext i32 %131 to i64
  %133 = load i32* %k, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %134
  %136 = getelementptr inbounds [6 x double]* %135, i32 0, i64 %132
  %137 = load double* %136, align 8
  %138 = fsub double %137, %130
  store double %138, double* %136, align 8
  br label %139

; <label>:139                                     ; preds = %121
  %140 = load i32* %j, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %j, align 4
  br label %118

; <label>:142                                     ; preds = %118
  br label %143

; <label>:143                                     ; preds = %142, %109
  %144 = load i32* %k, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %k, align 4
  br label %102

; <label>:146                                     ; preds = %102
  br label %147

; <label>:147                                     ; preds = %146
  %148 = load i32* %i, align 4
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* %i, align 4
  br label %74

; <label>:150                                     ; preds = %74
  store i32 0, i32* %i, align 4
  br label %151

; <label>:151                                     ; preds = %205, %150
  %152 = load i32* %i, align 4
  %153 = load i32* %3, align 4
  %154 = icmp slt i32 %152, %153
  br i1 %154, label %155, label %208

; <label>:155                                     ; preds = %151
  store i32 0, i32* %j, align 4
  br label %156

; <label>:156                                     ; preds = %201, %155
  %157 = load i32* %j, align 4
  %158 = icmp slt i32 %157, 3
  br i1 %158, label %159, label %204

; <label>:159                                     ; preds = %156
  store i32 0, i32* %k, align 4
  %160 = load i32* %j, align 4
  %161 = sext i32 %160 to i64
  %162 = load i32* %i, align 4
  %163 = sext i32 %162 to i64
  %164 = load [3 x double]** %2, align 8
  %165 = getelementptr inbounds [3 x double]* %164, i64 %163
  %166 = getelementptr inbounds [3 x double]* %165, i32 0, i64 %161
  store double 0.000000e+00, double* %166, align 8
  br label %167

; <label>:167                                     ; preds = %197, %159
  %168 = load i32* %k, align 4
  %169 = icmp slt i32 %168, 3
  br i1 %169, label %170, label %200

; <label>:170                                     ; preds = %167
  %171 = load i32* %k, align 4
  %172 = add nsw i32 %171, 3
  %173 = sext i32 %172 to i64
  %174 = load i32* %j, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [3 x [6 x double]]* %work, i32 0, i64 %175
  %177 = getelementptr inbounds [6 x double]* %176, i32 0, i64 %173
  %178 = load double* %177, align 8
  %179 = load i32* %k, align 4
  %180 = sext i32 %179 to i64
  %181 = load i32* %i, align 4
  %182 = sext i32 %181 to i64
  %183 = load [3 x double]** %1, align 8
  %184 = getelementptr inbounds [3 x double]* %183, i64 %182
  %185 = getelementptr inbounds [3 x double]* %184, i32 0, i64 %180
  %186 = load double* %185, align 8
  %187 = fmul double %178, %186
  %188 = load i32* %j, align 4
  %189 = sext i32 %188 to i64
  %190 = load i32* %i, align 4
  %191 = sext i32 %190 to i64
  %192 = load [3 x double]** %2, align 8
  %193 = getelementptr inbounds [3 x double]* %192, i64 %191
  %194 = getelementptr inbounds [3 x double]* %193, i32 0, i64 %189
  %195 = load double* %194, align 8
  %196 = fadd double %195, %187
  store double %196, double* %194, align 8
  br label %197

; <label>:197                                     ; preds = %170
  %198 = load i32* %k, align 4
  %199 = add nsw i32 %198, 1
  store i32 %199, i32* %k, align 4
  br label %167

; <label>:200                                     ; preds = %167
  br label %201

; <label>:201                                     ; preds = %200
  %202 = load i32* %j, align 4
  %203 = add nsw i32 %202, 1
  store i32 %203, i32* %j, align 4
  br label %156

; <label>:204                                     ; preds = %156
  br label %205

; <label>:205                                     ; preds = %204
  %206 = load i32* %i, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %i, align 4
  br label %151

; <label>:208                                     ; preds = %151
  ret void
}

; Function Attrs: nounwind uwtable
define void @cam_xyz_coeff([3 x double]* %cam_xyz) #0 {
  %1 = alloca [3 x double]*, align 8
  %cam_rgb = alloca [4 x [3 x double]], align 16
  %inverse = alloca [4 x [3 x double]], align 16
  %num = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store [3 x double]* %cam_xyz, [3 x double]** %1, align 8
  store i32 0, i32* %i, align 4
  br label %2

; <label>:2                                       ; preds = %53, %0
  %3 = load i32* %i, align 4
  %4 = load i32* @colors, align 4
  %5 = icmp slt i32 %3, %4
  br i1 %5, label %6, label %56

; <label>:6                                       ; preds = %2
  store i32 0, i32* %j, align 4
  br label %7

; <label>:7                                       ; preds = %49, %6
  %8 = load i32* %j, align 4
  %9 = icmp slt i32 %8, 3
  br i1 %9, label %10, label %52

; <label>:10                                      ; preds = %7
  store i32 0, i32* %k, align 4
  %11 = load i32* %j, align 4
  %12 = sext i32 %11 to i64
  %13 = load i32* %i, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %14
  %16 = getelementptr inbounds [3 x double]* %15, i32 0, i64 %12
  store double 0.000000e+00, double* %16, align 8
  br label %17

; <label>:17                                      ; preds = %45, %10
  %18 = load i32* %k, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %48

; <label>:20                                      ; preds = %17
  %21 = load i32* %k, align 4
  %22 = sext i32 %21 to i64
  %23 = load i32* %i, align 4
  %24 = sext i32 %23 to i64
  %25 = load [3 x double]** %1, align 8
  %26 = getelementptr inbounds [3 x double]* %25, i64 %24
  %27 = getelementptr inbounds [3 x double]* %26, i32 0, i64 %22
  %28 = load double* %27, align 8
  %29 = load i32* %j, align 4
  %30 = sext i32 %29 to i64
  %31 = load i32* %k, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [3 x [3 x double]]* @xyz_rgb, i32 0, i64 %32
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 %30
  %35 = load double* %34, align 8
  %36 = fmul double %28, %35
  %37 = load i32* %j, align 4
  %38 = sext i32 %37 to i64
  %39 = load i32* %i, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %40
  %42 = getelementptr inbounds [3 x double]* %41, i32 0, i64 %38
  %43 = load double* %42, align 8
  %44 = fadd double %43, %36
  store double %44, double* %42, align 8
  br label %45

; <label>:45                                      ; preds = %20
  %46 = load i32* %k, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %k, align 4
  br label %17

; <label>:48                                      ; preds = %17
  br label %49

; <label>:49                                      ; preds = %48
  %50 = load i32* %j, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %j, align 4
  br label %7

; <label>:52                                      ; preds = %7
  br label %53

; <label>:53                                      ; preds = %52
  %54 = load i32* %i, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %i, align 4
  br label %2

; <label>:56                                      ; preds = %2
  store i32 0, i32* %i, align 4
  br label %57

; <label>:57                                      ; preds = %102, %56
  %58 = load i32* %i, align 4
  %59 = load i32* @colors, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %105

; <label>:61                                      ; preds = %57
  store i32 0, i32* %j, align 4
  store double 0.000000e+00, double* %num, align 8
  br label %62

; <label>:62                                      ; preds = %75, %61
  %63 = load i32* %j, align 4
  %64 = icmp slt i32 %63, 3
  br i1 %64, label %65, label %78

; <label>:65                                      ; preds = %62
  %66 = load i32* %j, align 4
  %67 = sext i32 %66 to i64
  %68 = load i32* %i, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %69
  %71 = getelementptr inbounds [3 x double]* %70, i32 0, i64 %67
  %72 = load double* %71, align 8
  %73 = load double* %num, align 8
  %74 = fadd double %73, %72
  store double %74, double* %num, align 8
  br label %75

; <label>:75                                      ; preds = %65
  %76 = load i32* %j, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %j, align 4
  br label %62

; <label>:78                                      ; preds = %62
  store i32 0, i32* %j, align 4
  br label %79

; <label>:79                                      ; preds = %92, %78
  %80 = load i32* %j, align 4
  %81 = icmp slt i32 %80, 3
  br i1 %81, label %82, label %95

; <label>:82                                      ; preds = %79
  %83 = load double* %num, align 8
  %84 = load i32* %j, align 4
  %85 = sext i32 %84 to i64
  %86 = load i32* %i, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i64 %87
  %89 = getelementptr inbounds [3 x double]* %88, i32 0, i64 %85
  %90 = load double* %89, align 8
  %91 = fdiv double %90, %83
  store double %91, double* %89, align 8
  br label %92

; <label>:92                                      ; preds = %82
  %93 = load i32* %j, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %j, align 4
  br label %79

; <label>:95                                      ; preds = %79
  %96 = load double* %num, align 8
  %97 = fdiv double 1.000000e+00, %96
  %98 = fptrunc double %97 to float
  %99 = load i32* %i, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %100
  store float %98, float* %101, align 4
  br label %102

; <label>:102                                     ; preds = %95
  %103 = load i32* %i, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %i, align 4
  br label %57

; <label>:105                                     ; preds = %57
  %106 = getelementptr inbounds [4 x [3 x double]]* %cam_rgb, i32 0, i32 0
  %107 = getelementptr inbounds [4 x [3 x double]]* %inverse, i32 0, i32 0
  %108 = load i32* @colors, align 4
  call void @pseudoinverse([3 x double]* %106, [3 x double]* %107, i32 %108)
  store i32 0, i32* %i, align 4
  store i32 0, i32* @raw_color, align 4
  br label %109

; <label>:109                                     ; preds = %136, %105
  %110 = load i32* %i, align 4
  %111 = icmp slt i32 %110, 3
  br i1 %111, label %112, label %139

; <label>:112                                     ; preds = %109
  store i32 0, i32* %j, align 4
  br label %113

; <label>:113                                     ; preds = %132, %112
  %114 = load i32* %j, align 4
  %115 = load i32* @colors, align 4
  %116 = icmp slt i32 %114, %115
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %113
  %118 = load i32* %i, align 4
  %119 = sext i32 %118 to i64
  %120 = load i32* %j, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [4 x [3 x double]]* %inverse, i32 0, i64 %121
  %123 = getelementptr inbounds [3 x double]* %122, i32 0, i64 %119
  %124 = load double* %123, align 8
  %125 = fptrunc double %124 to float
  %126 = load i32* %j, align 4
  %127 = sext i32 %126 to i64
  %128 = load i32* %i, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %129
  %131 = getelementptr inbounds [4 x float]* %130, i32 0, i64 %127
  store float %125, float* %131, align 4
  br label %132

; <label>:132                                     ; preds = %117
  %133 = load i32* %j, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %j, align 4
  br label %113

; <label>:135                                     ; preds = %113
  br label %136

; <label>:136                                     ; preds = %135
  %137 = load i32* %i, align 4
  %138 = add nsw i32 %137, 1
  store i32 %138, i32* %i, align 4
  br label %109

; <label>:139                                     ; preds = %109
  ret void
}

; Function Attrs: nounwind uwtable
define void @hat_transform(float* %temp, float* %base, i32 %st, i32 %size, i32 %sc) #0 {
  %1 = alloca float*, align 8
  %2 = alloca float*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %i = alloca i32, align 4
  store float* %temp, float** %1, align 8
  store float* %base, float** %2, align 8
  store i32 %st, i32* %3, align 4
  store i32 %size, i32* %4, align 4
  store i32 %sc, i32* %5, align 4
  store i32 0, i32* %i, align 4
  br label %6

; <label>:6                                       ; preds = %43, %0
  %7 = load i32* %i, align 4
  %8 = load i32* %5, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %46

; <label>:10                                      ; preds = %6
  %11 = load i32* %3, align 4
  %12 = load i32* %i, align 4
  %13 = mul nsw i32 %11, %12
  %14 = sext i32 %13 to i64
  %15 = load float** %2, align 8
  %16 = getelementptr inbounds float* %15, i64 %14
  %17 = load float* %16, align 4
  %18 = fmul float 2.000000e+00, %17
  %19 = load i32* %3, align 4
  %20 = load i32* %5, align 4
  %21 = load i32* %i, align 4
  %22 = sub nsw i32 %20, %21
  %23 = mul nsw i32 %19, %22
  %24 = sext i32 %23 to i64
  %25 = load float** %2, align 8
  %26 = getelementptr inbounds float* %25, i64 %24
  %27 = load float* %26, align 4
  %28 = fadd float %18, %27
  %29 = load i32* %3, align 4
  %30 = load i32* %i, align 4
  %31 = load i32* %5, align 4
  %32 = add nsw i32 %30, %31
  %33 = mul nsw i32 %29, %32
  %34 = sext i32 %33 to i64
  %35 = load float** %2, align 8
  %36 = getelementptr inbounds float* %35, i64 %34
  %37 = load float* %36, align 4
  %38 = fadd float %28, %37
  %39 = load i32* %i, align 4
  %40 = sext i32 %39 to i64
  %41 = load float** %1, align 8
  %42 = getelementptr inbounds float* %41, i64 %40
  store float %38, float* %42, align 4
  br label %43

; <label>:43                                      ; preds = %10
  %44 = load i32* %i, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %i, align 4
  br label %6

; <label>:46                                      ; preds = %6
  br label %47

; <label>:47                                      ; preds = %86, %46
  %48 = load i32* %i, align 4
  %49 = load i32* %5, align 4
  %50 = add nsw i32 %48, %49
  %51 = load i32* %4, align 4
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %89

; <label>:53                                      ; preds = %47
  %54 = load i32* %3, align 4
  %55 = load i32* %i, align 4
  %56 = mul nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = load float** %2, align 8
  %59 = getelementptr inbounds float* %58, i64 %57
  %60 = load float* %59, align 4
  %61 = fmul float 2.000000e+00, %60
  %62 = load i32* %3, align 4
  %63 = load i32* %i, align 4
  %64 = load i32* %5, align 4
  %65 = sub nsw i32 %63, %64
  %66 = mul nsw i32 %62, %65
  %67 = sext i32 %66 to i64
  %68 = load float** %2, align 8
  %69 = getelementptr inbounds float* %68, i64 %67
  %70 = load float* %69, align 4
  %71 = fadd float %61, %70
  %72 = load i32* %3, align 4
  %73 = load i32* %i, align 4
  %74 = load i32* %5, align 4
  %75 = add nsw i32 %73, %74
  %76 = mul nsw i32 %72, %75
  %77 = sext i32 %76 to i64
  %78 = load float** %2, align 8
  %79 = getelementptr inbounds float* %78, i64 %77
  %80 = load float* %79, align 4
  %81 = fadd float %71, %80
  %82 = load i32* %i, align 4
  %83 = sext i32 %82 to i64
  %84 = load float** %1, align 8
  %85 = getelementptr inbounds float* %84, i64 %83
  store float %81, float* %85, align 4
  br label %86

; <label>:86                                      ; preds = %53
  %87 = load i32* %i, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %i, align 4
  br label %47

; <label>:89                                      ; preds = %47
  br label %90

; <label>:90                                      ; preds = %131, %89
  %91 = load i32* %i, align 4
  %92 = load i32* %4, align 4
  %93 = icmp slt i32 %91, %92
  br i1 %93, label %94, label %134

; <label>:94                                      ; preds = %90
  %95 = load i32* %3, align 4
  %96 = load i32* %i, align 4
  %97 = mul nsw i32 %95, %96
  %98 = sext i32 %97 to i64
  %99 = load float** %2, align 8
  %100 = getelementptr inbounds float* %99, i64 %98
  %101 = load float* %100, align 4
  %102 = fmul float 2.000000e+00, %101
  %103 = load i32* %3, align 4
  %104 = load i32* %i, align 4
  %105 = load i32* %5, align 4
  %106 = sub nsw i32 %104, %105
  %107 = mul nsw i32 %103, %106
  %108 = sext i32 %107 to i64
  %109 = load float** %2, align 8
  %110 = getelementptr inbounds float* %109, i64 %108
  %111 = load float* %110, align 4
  %112 = fadd float %102, %111
  %113 = load i32* %3, align 4
  %114 = load i32* %4, align 4
  %115 = mul nsw i32 2, %114
  %116 = sub nsw i32 %115, 2
  %117 = load i32* %i, align 4
  %118 = load i32* %5, align 4
  %119 = add nsw i32 %117, %118
  %120 = sub nsw i32 %116, %119
  %121 = mul nsw i32 %113, %120
  %122 = sext i32 %121 to i64
  %123 = load float** %2, align 8
  %124 = getelementptr inbounds float* %123, i64 %122
  %125 = load float* %124, align 4
  %126 = fadd float %112, %125
  %127 = load i32* %i, align 4
  %128 = sext i32 %127 to i64
  %129 = load float** %1, align 8
  %130 = getelementptr inbounds float* %129, i64 %128
  store float %126, float* %130, align 4
  br label %131

; <label>:131                                     ; preds = %94
  %132 = load i32* %i, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %i, align 4
  br label %90

; <label>:134                                     ; preds = %90
  ret void
}

; Function Attrs: nounwind uwtable
define void @wavelet_denoise() #0 {
  %fimg = alloca float*, align 8
  %temp = alloca float*, align 8
  %thold = alloca float, align 4
  %mul = alloca [2 x float], align 4
  %avg = alloca float, align 4
  %diff = alloca float, align 4
  %scale = alloca i32, align 4
  %size = alloca i32, align 4
  %lev = alloca i32, align 4
  %hpass = alloca i32, align 4
  %lpass = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %nc = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %wlast = alloca i32, align 4
  %window = alloca [4 x i16*], align 16
  store float* null, float** %fimg, align 8
  store i32 1, i32* %scale, align 4
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8]* @.str68, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %12, %6
  %8 = load i32* @maximum, align 4
  %9 = load i32* %scale, align 4
  %10 = shl i32 %8, %9
  %11 = icmp ult i32 %10, 65536
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %7
  %13 = load i32* %scale, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %scale, align 4
  br label %7

; <label>:15                                      ; preds = %7
  %16 = load i32* %scale, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %scale, align 4
  %18 = load i32* @maximum, align 4
  %19 = shl i32 %18, %17
  store i32 %19, i32* @maximum, align 4
  %20 = load i32* %scale, align 4
  %21 = load i32* @black, align 4
  %22 = shl i32 %21, %20
  store i32 %22, i32* @black, align 4
  %23 = load i16* @iheight, align 2
  %24 = zext i16 %23 to i32
  %25 = load i16* @iwidth, align 2
  %26 = zext i16 %25 to i32
  %27 = mul nsw i32 %24, %26
  store i32 %27, i32* %size, align 4
  %28 = icmp slt i32 %27, 357892096
  br i1 %28, label %29, label %42

; <label>:29                                      ; preds = %15
  %30 = load i32* %size, align 4
  %31 = mul nsw i32 %30, 3
  %32 = load i16* @iheight, align 2
  %33 = zext i16 %32 to i32
  %34 = add nsw i32 %31, %33
  %35 = load i16* @iwidth, align 2
  %36 = zext i16 %35 to i32
  %37 = add nsw i32 %34, %36
  %38 = sext i32 %37 to i64
  %39 = mul i64 %38, 4
  %40 = call noalias i8* @malloc(i64 %39) #4
  %41 = bitcast i8* %40 to float*
  store float* %41, float** %fimg, align 8
  br label %42

; <label>:42                                      ; preds = %29, %15
  %43 = load float** %fimg, align 8
  %44 = bitcast float* %43 to i8*
  call void @merror(i8* %44, i8* getelementptr inbounds ([18 x i8]* @.str69, i32 0, i32 0))
  %45 = load float** %fimg, align 8
  %46 = load i32* %size, align 4
  %47 = mul nsw i32 %46, 3
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float* %45, i64 %48
  store float* %49, float** %temp, align 8
  %50 = load i32* @colors, align 4
  store i32 %50, i32* %nc, align 4
  %51 = icmp eq i32 %50, 3
  br i1 %51, label %52, label %58

; <label>:52                                      ; preds = %42
  %53 = load i32* @filters, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %58

; <label>:55                                      ; preds = %52
  %56 = load i32* %nc, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %nc, align 4
  br label %58

; <label>:58                                      ; preds = %55, %52, %42
  store i32 0, i32* %c, align 4
  br label %59

; <label>:59                                      ; preds = %453, %58
  %60 = load i32* %c, align 4
  %61 = load i32* %nc, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %456

; <label>:63                                      ; preds = %59
  store i32 0, i32* %i, align 4
  br label %64

; <label>:64                                      ; preds = %88, %63
  %65 = load i32* %i, align 4
  %66 = load i32* %size, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %91

; <label>:68                                      ; preds = %64
  %69 = load i32* %c, align 4
  %70 = sext i32 %69 to i64
  %71 = load i32* %i, align 4
  %72 = sext i32 %71 to i64
  %73 = load [4 x i16]** @image, align 8
  %74 = getelementptr inbounds [4 x i16]* %73, i64 %72
  %75 = getelementptr inbounds [4 x i16]* %74, i32 0, i64 %70
  %76 = load i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = load i32* %scale, align 4
  %79 = shl i32 %77, %78
  %80 = sitofp i32 %79 to double
  %81 = call double @sqrt(double %80) #4
  %82 = fmul double 2.560000e+02, %81
  %83 = fptrunc double %82 to float
  %84 = load i32* %i, align 4
  %85 = sext i32 %84 to i64
  %86 = load float** %fimg, align 8
  %87 = getelementptr inbounds float* %86, i64 %85
  store float %83, float* %87, align 4
  br label %88

; <label>:88                                      ; preds = %68
  %89 = load i32* %i, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %i, align 4
  br label %64

; <label>:91                                      ; preds = %64
  store i32 0, i32* %lev, align 4
  store i32 0, i32* %hpass, align 4
  br label %92

; <label>:92                                      ; preds = %305, %91
  %93 = load i32* %lev, align 4
  %94 = icmp slt i32 %93, 5
  br i1 %94, label %95, label %308

; <label>:95                                      ; preds = %92
  %96 = load i32* %size, align 4
  %97 = load i32* %lev, align 4
  %98 = and i32 %97, 1
  %99 = add nsw i32 %98, 1
  %100 = mul nsw i32 %96, %99
  store i32 %100, i32* %lpass, align 4
  store i32 0, i32* %row, align 4
  br label %101

; <label>:101                                     ; preds = %151, %95
  %102 = load i32* %row, align 4
  %103 = load i16* @iheight, align 2
  %104 = zext i16 %103 to i32
  %105 = icmp slt i32 %102, %104
  br i1 %105, label %106, label %154

; <label>:106                                     ; preds = %101
  %107 = load float** %temp, align 8
  %108 = load float** %fimg, align 8
  %109 = load i32* %hpass, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float* %108, i64 %110
  %112 = load i32* %row, align 4
  %113 = load i16* @iwidth, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nsw i32 %112, %114
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float* %111, i64 %116
  %118 = load i16* @iwidth, align 2
  %119 = zext i16 %118 to i32
  %120 = load i32* %lev, align 4
  %121 = shl i32 1, %120
  call void @hat_transform(float* %107, float* %117, i32 1, i32 %119, i32 %121)
  store i32 0, i32* %col, align 4
  br label %122

; <label>:122                                     ; preds = %147, %106
  %123 = load i32* %col, align 4
  %124 = load i16* @iwidth, align 2
  %125 = zext i16 %124 to i32
  %126 = icmp slt i32 %123, %125
  br i1 %126, label %127, label %150

; <label>:127                                     ; preds = %122
  %128 = load i32* %col, align 4
  %129 = sext i32 %128 to i64
  %130 = load float** %temp, align 8
  %131 = getelementptr inbounds float* %130, i64 %129
  %132 = load float* %131, align 4
  %133 = fpext float %132 to double
  %134 = fmul double %133, 2.500000e-01
  %135 = fptrunc double %134 to float
  %136 = load i32* %lpass, align 4
  %137 = load i32* %row, align 4
  %138 = load i16* @iwidth, align 2
  %139 = zext i16 %138 to i32
  %140 = mul nsw i32 %137, %139
  %141 = add nsw i32 %136, %140
  %142 = load i32* %col, align 4
  %143 = add nsw i32 %141, %142
  %144 = sext i32 %143 to i64
  %145 = load float** %fimg, align 8
  %146 = getelementptr inbounds float* %145, i64 %144
  store float %135, float* %146, align 4
  br label %147

; <label>:147                                     ; preds = %127
  %148 = load i32* %col, align 4
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* %col, align 4
  br label %122

; <label>:150                                     ; preds = %122
  br label %151

; <label>:151                                     ; preds = %150
  %152 = load i32* %row, align 4
  %153 = add nsw i32 %152, 1
  store i32 %153, i32* %row, align 4
  br label %101

; <label>:154                                     ; preds = %101
  store i32 0, i32* %col, align 4
  br label %155

; <label>:155                                     ; preds = %204, %154
  %156 = load i32* %col, align 4
  %157 = load i16* @iwidth, align 2
  %158 = zext i16 %157 to i32
  %159 = icmp slt i32 %156, %158
  br i1 %159, label %160, label %207

; <label>:160                                     ; preds = %155
  %161 = load float** %temp, align 8
  %162 = load float** %fimg, align 8
  %163 = load i32* %lpass, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds float* %162, i64 %164
  %166 = load i32* %col, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds float* %165, i64 %167
  %169 = load i16* @iwidth, align 2
  %170 = zext i16 %169 to i32
  %171 = load i16* @iheight, align 2
  %172 = zext i16 %171 to i32
  %173 = load i32* %lev, align 4
  %174 = shl i32 1, %173
  call void @hat_transform(float* %161, float* %168, i32 %170, i32 %172, i32 %174)
  store i32 0, i32* %row, align 4
  br label %175

; <label>:175                                     ; preds = %200, %160
  %176 = load i32* %row, align 4
  %177 = load i16* @iheight, align 2
  %178 = zext i16 %177 to i32
  %179 = icmp slt i32 %176, %178
  br i1 %179, label %180, label %203

; <label>:180                                     ; preds = %175
  %181 = load i32* %row, align 4
  %182 = sext i32 %181 to i64
  %183 = load float** %temp, align 8
  %184 = getelementptr inbounds float* %183, i64 %182
  %185 = load float* %184, align 4
  %186 = fpext float %185 to double
  %187 = fmul double %186, 2.500000e-01
  %188 = fptrunc double %187 to float
  %189 = load i32* %lpass, align 4
  %190 = load i32* %row, align 4
  %191 = load i16* @iwidth, align 2
  %192 = zext i16 %191 to i32
  %193 = mul nsw i32 %190, %192
  %194 = add nsw i32 %189, %193
  %195 = load i32* %col, align 4
  %196 = add nsw i32 %194, %195
  %197 = sext i32 %196 to i64
  %198 = load float** %fimg, align 8
  %199 = getelementptr inbounds float* %198, i64 %197
  store float %188, float* %199, align 4
  br label %200

; <label>:200                                     ; preds = %180
  %201 = load i32* %row, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %row, align 4
  br label %175

; <label>:203                                     ; preds = %175
  br label %204

; <label>:204                                     ; preds = %203
  %205 = load i32* %col, align 4
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %col, align 4
  br label %155

; <label>:207                                     ; preds = %155
  %208 = load float* @threshold, align 4
  %209 = load i32* %lev, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [8 x float]* @wavelet_denoise.noise, i32 0, i64 %210
  %212 = load float* %211, align 4
  %213 = fmul float %208, %212
  store float %213, float* %thold, align 4
  store i32 0, i32* %i, align 4
  br label %214

; <label>:214                                     ; preds = %300, %207
  %215 = load i32* %i, align 4
  %216 = load i32* %size, align 4
  %217 = icmp slt i32 %215, %216
  br i1 %217, label %218, label %303

; <label>:218                                     ; preds = %214
  %219 = load i32* %lpass, align 4
  %220 = load i32* %i, align 4
  %221 = add nsw i32 %219, %220
  %222 = sext i32 %221 to i64
  %223 = load float** %fimg, align 8
  %224 = getelementptr inbounds float* %223, i64 %222
  %225 = load float* %224, align 4
  %226 = load i32* %hpass, align 4
  %227 = load i32* %i, align 4
  %228 = add nsw i32 %226, %227
  %229 = sext i32 %228 to i64
  %230 = load float** %fimg, align 8
  %231 = getelementptr inbounds float* %230, i64 %229
  %232 = load float* %231, align 4
  %233 = fsub float %232, %225
  store float %233, float* %231, align 4
  %234 = load i32* %hpass, align 4
  %235 = load i32* %i, align 4
  %236 = add nsw i32 %234, %235
  %237 = sext i32 %236 to i64
  %238 = load float** %fimg, align 8
  %239 = getelementptr inbounds float* %238, i64 %237
  %240 = load float* %239, align 4
  %241 = load float* %thold, align 4
  %242 = fsub float -0.000000e+00, %241
  %243 = fcmp olt float %240, %242
  br i1 %243, label %244, label %254

; <label>:244                                     ; preds = %218
  %245 = load float* %thold, align 4
  %246 = load i32* %hpass, align 4
  %247 = load i32* %i, align 4
  %248 = add nsw i32 %246, %247
  %249 = sext i32 %248 to i64
  %250 = load float** %fimg, align 8
  %251 = getelementptr inbounds float* %250, i64 %249
  %252 = load float* %251, align 4
  %253 = fadd float %252, %245
  store float %253, float* %251, align 4
  br label %282

; <label>:254                                     ; preds = %218
  %255 = load i32* %hpass, align 4
  %256 = load i32* %i, align 4
  %257 = add nsw i32 %255, %256
  %258 = sext i32 %257 to i64
  %259 = load float** %fimg, align 8
  %260 = getelementptr inbounds float* %259, i64 %258
  %261 = load float* %260, align 4
  %262 = load float* %thold, align 4
  %263 = fcmp ogt float %261, %262
  br i1 %263, label %264, label %274

; <label>:264                                     ; preds = %254
  %265 = load float* %thold, align 4
  %266 = load i32* %hpass, align 4
  %267 = load i32* %i, align 4
  %268 = add nsw i32 %266, %267
  %269 = sext i32 %268 to i64
  %270 = load float** %fimg, align 8
  %271 = getelementptr inbounds float* %270, i64 %269
  %272 = load float* %271, align 4
  %273 = fsub float %272, %265
  store float %273, float* %271, align 4
  br label %281

; <label>:274                                     ; preds = %254
  %275 = load i32* %hpass, align 4
  %276 = load i32* %i, align 4
  %277 = add nsw i32 %275, %276
  %278 = sext i32 %277 to i64
  %279 = load float** %fimg, align 8
  %280 = getelementptr inbounds float* %279, i64 %278
  store float 0.000000e+00, float* %280, align 4
  br label %281

; <label>:281                                     ; preds = %274, %264
  br label %282

; <label>:282                                     ; preds = %281, %244
  %283 = load i32* %hpass, align 4
  %284 = icmp ne i32 %283, 0
  br i1 %284, label %285, label %299

; <label>:285                                     ; preds = %282
  %286 = load i32* %hpass, align 4
  %287 = load i32* %i, align 4
  %288 = add nsw i32 %286, %287
  %289 = sext i32 %288 to i64
  %290 = load float** %fimg, align 8
  %291 = getelementptr inbounds float* %290, i64 %289
  %292 = load float* %291, align 4
  %293 = load i32* %i, align 4
  %294 = sext i32 %293 to i64
  %295 = load float** %fimg, align 8
  %296 = getelementptr inbounds float* %295, i64 %294
  %297 = load float* %296, align 4
  %298 = fadd float %297, %292
  store float %298, float* %296, align 4
  br label %299

; <label>:299                                     ; preds = %285, %282
  br label %300

; <label>:300                                     ; preds = %299
  %301 = load i32* %i, align 4
  %302 = add nsw i32 %301, 1
  store i32 %302, i32* %i, align 4
  br label %214

; <label>:303                                     ; preds = %214
  %304 = load i32* %lpass, align 4
  store i32 %304, i32* %hpass, align 4
  br label %305

; <label>:305                                     ; preds = %303
  %306 = load i32* %lev, align 4
  %307 = add nsw i32 %306, 1
  store i32 %307, i32* %lev, align 4
  br label %92

; <label>:308                                     ; preds = %92
  store i32 0, i32* %i, align 4
  br label %309

; <label>:309                                     ; preds = %449, %308
  %310 = load i32* %i, align 4
  %311 = load i32* %size, align 4
  %312 = icmp slt i32 %310, %311
  br i1 %312, label %313, label %452

; <label>:313                                     ; preds = %309
  %314 = load i32* %i, align 4
  %315 = sext i32 %314 to i64
  %316 = load float** %fimg, align 8
  %317 = getelementptr inbounds float* %316, i64 %315
  %318 = load float* %317, align 4
  %319 = load i32* %lpass, align 4
  %320 = load i32* %i, align 4
  %321 = add nsw i32 %319, %320
  %322 = sext i32 %321 to i64
  %323 = load float** %fimg, align 8
  %324 = getelementptr inbounds float* %323, i64 %322
  %325 = load float* %324, align 4
  %326 = fadd float %318, %325
  %327 = load i32* %i, align 4
  %328 = sext i32 %327 to i64
  %329 = load float** %fimg, align 8
  %330 = getelementptr inbounds float* %329, i64 %328
  %331 = load float* %330, align 4
  %332 = load i32* %lpass, align 4
  %333 = load i32* %i, align 4
  %334 = add nsw i32 %332, %333
  %335 = sext i32 %334 to i64
  %336 = load float** %fimg, align 8
  %337 = getelementptr inbounds float* %336, i64 %335
  %338 = load float* %337, align 4
  %339 = fadd float %331, %338
  %340 = fmul float %326, %339
  %341 = fdiv float %340, 6.553600e+04
  %342 = fcmp olt float %341, 6.553500e+04
  br i1 %342, label %343, label %372

; <label>:343                                     ; preds = %313
  %344 = load i32* %i, align 4
  %345 = sext i32 %344 to i64
  %346 = load float** %fimg, align 8
  %347 = getelementptr inbounds float* %346, i64 %345
  %348 = load float* %347, align 4
  %349 = load i32* %lpass, align 4
  %350 = load i32* %i, align 4
  %351 = add nsw i32 %349, %350
  %352 = sext i32 %351 to i64
  %353 = load float** %fimg, align 8
  %354 = getelementptr inbounds float* %353, i64 %352
  %355 = load float* %354, align 4
  %356 = fadd float %348, %355
  %357 = load i32* %i, align 4
  %358 = sext i32 %357 to i64
  %359 = load float** %fimg, align 8
  %360 = getelementptr inbounds float* %359, i64 %358
  %361 = load float* %360, align 4
  %362 = load i32* %lpass, align 4
  %363 = load i32* %i, align 4
  %364 = add nsw i32 %362, %363
  %365 = sext i32 %364 to i64
  %366 = load float** %fimg, align 8
  %367 = getelementptr inbounds float* %366, i64 %365
  %368 = load float* %367, align 4
  %369 = fadd float %361, %368
  %370 = fmul float %356, %369
  %371 = fdiv float %370, 6.553600e+04
  br label %373

; <label>:372                                     ; preds = %313
  br label %373

; <label>:373                                     ; preds = %372, %343
  %374 = phi float [ %371, %343 ], [ 6.553500e+04, %372 ]
  %375 = fcmp ogt float 0.000000e+00, %374
  br i1 %375, label %376, label %377

; <label>:376                                     ; preds = %373
  br label %439

; <label>:377                                     ; preds = %373
  %378 = load i32* %i, align 4
  %379 = sext i32 %378 to i64
  %380 = load float** %fimg, align 8
  %381 = getelementptr inbounds float* %380, i64 %379
  %382 = load float* %381, align 4
  %383 = load i32* %lpass, align 4
  %384 = load i32* %i, align 4
  %385 = add nsw i32 %383, %384
  %386 = sext i32 %385 to i64
  %387 = load float** %fimg, align 8
  %388 = getelementptr inbounds float* %387, i64 %386
  %389 = load float* %388, align 4
  %390 = fadd float %382, %389
  %391 = load i32* %i, align 4
  %392 = sext i32 %391 to i64
  %393 = load float** %fimg, align 8
  %394 = getelementptr inbounds float* %393, i64 %392
  %395 = load float* %394, align 4
  %396 = load i32* %lpass, align 4
  %397 = load i32* %i, align 4
  %398 = add nsw i32 %396, %397
  %399 = sext i32 %398 to i64
  %400 = load float** %fimg, align 8
  %401 = getelementptr inbounds float* %400, i64 %399
  %402 = load float* %401, align 4
  %403 = fadd float %395, %402
  %404 = fmul float %390, %403
  %405 = fdiv float %404, 6.553600e+04
  %406 = fcmp olt float %405, 6.553500e+04
  br i1 %406, label %407, label %436

; <label>:407                                     ; preds = %377
  %408 = load i32* %i, align 4
  %409 = sext i32 %408 to i64
  %410 = load float** %fimg, align 8
  %411 = getelementptr inbounds float* %410, i64 %409
  %412 = load float* %411, align 4
  %413 = load i32* %lpass, align 4
  %414 = load i32* %i, align 4
  %415 = add nsw i32 %413, %414
  %416 = sext i32 %415 to i64
  %417 = load float** %fimg, align 8
  %418 = getelementptr inbounds float* %417, i64 %416
  %419 = load float* %418, align 4
  %420 = fadd float %412, %419
  %421 = load i32* %i, align 4
  %422 = sext i32 %421 to i64
  %423 = load float** %fimg, align 8
  %424 = getelementptr inbounds float* %423, i64 %422
  %425 = load float* %424, align 4
  %426 = load i32* %lpass, align 4
  %427 = load i32* %i, align 4
  %428 = add nsw i32 %426, %427
  %429 = sext i32 %428 to i64
  %430 = load float** %fimg, align 8
  %431 = getelementptr inbounds float* %430, i64 %429
  %432 = load float* %431, align 4
  %433 = fadd float %425, %432
  %434 = fmul float %420, %433
  %435 = fdiv float %434, 6.553600e+04
  br label %437

; <label>:436                                     ; preds = %377
  br label %437

; <label>:437                                     ; preds = %436, %407
  %438 = phi float [ %435, %407 ], [ 6.553500e+04, %436 ]
  br label %439

; <label>:439                                     ; preds = %437, %376
  %440 = phi float [ 0.000000e+00, %376 ], [ %438, %437 ]
  %441 = fptoui float %440 to i16
  %442 = load i32* %c, align 4
  %443 = sext i32 %442 to i64
  %444 = load i32* %i, align 4
  %445 = sext i32 %444 to i64
  %446 = load [4 x i16]** @image, align 8
  %447 = getelementptr inbounds [4 x i16]* %446, i64 %445
  %448 = getelementptr inbounds [4 x i16]* %447, i32 0, i64 %443
  store i16 %441, i16* %448, align 2
  br label %449

; <label>:449                                     ; preds = %439
  %450 = load i32* %i, align 4
  %451 = add nsw i32 %450, 1
  store i32 %451, i32* %i, align 4
  br label %309

; <label>:452                                     ; preds = %309
  br label %453

; <label>:453                                     ; preds = %452
  %454 = load i32* %c, align 4
  %455 = add nsw i32 %454, 1
  store i32 %455, i32* %c, align 4
  br label %59

; <label>:456                                     ; preds = %59
  %457 = load i32* @filters, align 4
  %458 = icmp ne i32 %457, 0
  br i1 %458, label %459, label %839

; <label>:459                                     ; preds = %456
  %460 = load i32* @colors, align 4
  %461 = icmp eq i32 %460, 3
  br i1 %461, label %462, label %839

; <label>:462                                     ; preds = %459
  store i32 0, i32* %row, align 4
  br label %463

; <label>:463                                     ; preds = %500, %462
  %464 = load i32* %row, align 4
  %465 = icmp slt i32 %464, 2
  br i1 %465, label %466, label %503

; <label>:466                                     ; preds = %463
  %467 = load i32* @filters, align 4
  %468 = load i32* %row, align 4
  %469 = add nsw i32 %468, 1
  %470 = shl i32 %469, 1
  %471 = and i32 %470, 14
  %472 = add nsw i32 %471, 0
  %473 = shl i32 %472, 1
  %474 = lshr i32 %467, %473
  %475 = and i32 %474, 3
  %476 = or i32 %475, 1
  %477 = zext i32 %476 to i64
  %478 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %477
  %479 = load float* %478, align 4
  %480 = fpext float %479 to double
  %481 = fmul double 1.250000e-01, %480
  %482 = load i32* @filters, align 4
  %483 = load i32* %row, align 4
  %484 = shl i32 %483, 1
  %485 = and i32 %484, 14
  %486 = add nsw i32 %485, 0
  %487 = shl i32 %486, 1
  %488 = lshr i32 %482, %487
  %489 = and i32 %488, 3
  %490 = or i32 %489, 1
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %491
  %493 = load float* %492, align 4
  %494 = fpext float %493 to double
  %495 = fdiv double %481, %494
  %496 = fptrunc double %495 to float
  %497 = load i32* %row, align 4
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds [2 x float]* %mul, i32 0, i64 %498
  store float %496, float* %499, align 4
  br label %500

; <label>:500                                     ; preds = %466
  %501 = load i32* %row, align 4
  %502 = add nsw i32 %501, 1
  store i32 %502, i32* %row, align 4
  br label %463

; <label>:503                                     ; preds = %463
  store i32 0, i32* %i, align 4
  br label %504

; <label>:504                                     ; preds = %519, %503
  %505 = load i32* %i, align 4
  %506 = icmp slt i32 %505, 4
  br i1 %506, label %507, label %522

; <label>:507                                     ; preds = %504
  %508 = load float** %fimg, align 8
  %509 = bitcast float* %508 to i16*
  %510 = load i16* @width, align 2
  %511 = zext i16 %510 to i32
  %512 = load i32* %i, align 4
  %513 = mul nsw i32 %511, %512
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16* %509, i64 %514
  %516 = load i32* %i, align 4
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 %517
  store i16* %515, i16** %518, align 8
  br label %519

; <label>:519                                     ; preds = %507
  %520 = load i32* %i, align 4
  %521 = add nsw i32 %520, 1
  store i32 %521, i32* %i, align 4
  br label %504

; <label>:522                                     ; preds = %504
  store i32 -1, i32* %wlast, align 4
  store i32 1, i32* %row, align 4
  br label %523

; <label>:523                                     ; preds = %835, %522
  %524 = load i32* %row, align 4
  %525 = load i16* @height, align 2
  %526 = zext i16 %525 to i32
  %527 = sub nsw i32 %526, 1
  %528 = icmp slt i32 %524, %527
  br i1 %528, label %529, label %838

; <label>:529                                     ; preds = %523
  br label %530

; <label>:530                                     ; preds = %606, %529
  %531 = load i32* %wlast, align 4
  %532 = load i32* %row, align 4
  %533 = add nsw i32 %532, 1
  %534 = icmp slt i32 %531, %533
  br i1 %534, label %535, label %607

; <label>:535                                     ; preds = %530
  %536 = load i32* %wlast, align 4
  %537 = add nsw i32 %536, 1
  store i32 %537, i32* %wlast, align 4
  store i32 0, i32* %i, align 4
  br label %538

; <label>:538                                     ; preds = %551, %535
  %539 = load i32* %i, align 4
  %540 = icmp slt i32 %539, 4
  br i1 %540, label %541, label %554

; <label>:541                                     ; preds = %538
  %542 = load i32* %i, align 4
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 %543
  %545 = load i16** %544, align 8
  %546 = load i32* %i, align 4
  %547 = add nsw i32 %546, 3
  %548 = and i32 %547, 3
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 %549
  store i16* %545, i16** %550, align 8
  br label %551

; <label>:551                                     ; preds = %541
  %552 = load i32* %i, align 4
  %553 = add nsw i32 %552, 1
  store i32 %553, i32* %i, align 4
  br label %538

; <label>:554                                     ; preds = %538
  %555 = load i32* @filters, align 4
  %556 = load i32* %wlast, align 4
  %557 = shl i32 %556, 1
  %558 = and i32 %557, 14
  %559 = add nsw i32 %558, 1
  %560 = shl i32 %559, 1
  %561 = lshr i32 %555, %560
  %562 = and i32 %561, 3
  %563 = and i32 %562, 1
  store i32 %563, i32* %col, align 4
  br label %564

; <label>:564                                     ; preds = %603, %554
  %565 = load i32* %col, align 4
  %566 = load i16* @width, align 2
  %567 = zext i16 %566 to i32
  %568 = icmp slt i32 %565, %567
  br i1 %568, label %569, label %606

; <label>:569                                     ; preds = %564
  %570 = load i32* @filters, align 4
  %571 = load i32* %wlast, align 4
  %572 = shl i32 %571, 1
  %573 = and i32 %572, 14
  %574 = load i32* %col, align 4
  %575 = and i32 %574, 1
  %576 = add nsw i32 %573, %575
  %577 = shl i32 %576, 1
  %578 = lshr i32 %570, %577
  %579 = and i32 %578, 3
  %580 = zext i32 %579 to i64
  %581 = load i32* %wlast, align 4
  %582 = load i16* @shrink, align 2
  %583 = zext i16 %582 to i32
  %584 = ashr i32 %581, %583
  %585 = load i16* @iwidth, align 2
  %586 = zext i16 %585 to i32
  %587 = mul nsw i32 %584, %586
  %588 = load i32* %col, align 4
  %589 = load i16* @shrink, align 2
  %590 = zext i16 %589 to i32
  %591 = ashr i32 %588, %590
  %592 = add nsw i32 %587, %591
  %593 = sext i32 %592 to i64
  %594 = load [4 x i16]** @image, align 8
  %595 = getelementptr inbounds [4 x i16]* %594, i64 %593
  %596 = getelementptr inbounds [4 x i16]* %595, i32 0, i64 %580
  %597 = load i16* %596, align 2
  %598 = load i32* %col, align 4
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 2
  %601 = load i16** %600, align 8
  %602 = getelementptr inbounds i16* %601, i64 %599
  store i16 %597, i16* %602, align 2
  br label %603

; <label>:603                                     ; preds = %569
  %604 = load i32* %col, align 4
  %605 = add nsw i32 %604, 2
  store i32 %605, i32* %col, align 4
  br label %564

; <label>:606                                     ; preds = %564
  br label %530

; <label>:607                                     ; preds = %530
  %608 = load float* @threshold, align 4
  %609 = fdiv float %608, 5.120000e+02
  store float %609, float* %thold, align 4
  %610 = load i32* @filters, align 4
  %611 = load i32* %row, align 4
  %612 = shl i32 %611, 1
  %613 = and i32 %612, 14
  %614 = add nsw i32 %613, 0
  %615 = shl i32 %614, 1
  %616 = lshr i32 %610, %615
  %617 = and i32 %616, 3
  %618 = and i32 %617, 1
  %619 = add i32 %618, 1
  store i32 %619, i32* %col, align 4
  br label %620

; <label>:620                                     ; preds = %831, %607
  %621 = load i32* %col, align 4
  %622 = load i16* @width, align 2
  %623 = zext i16 %622 to i32
  %624 = sub nsw i32 %623, 1
  %625 = icmp slt i32 %621, %624
  br i1 %625, label %626, label %834

; <label>:626                                     ; preds = %620
  %627 = load i32* %col, align 4
  %628 = sub nsw i32 %627, 1
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 0
  %631 = load i16** %630, align 8
  %632 = getelementptr inbounds i16* %631, i64 %629
  %633 = load i16* %632, align 2
  %634 = zext i16 %633 to i32
  %635 = load i32* %col, align 4
  %636 = add nsw i32 %635, 1
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 0
  %639 = load i16** %638, align 8
  %640 = getelementptr inbounds i16* %639, i64 %637
  %641 = load i16* %640, align 2
  %642 = zext i16 %641 to i32
  %643 = add nsw i32 %634, %642
  %644 = load i32* %col, align 4
  %645 = sub nsw i32 %644, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 2
  %648 = load i16** %647, align 8
  %649 = getelementptr inbounds i16* %648, i64 %646
  %650 = load i16* %649, align 2
  %651 = zext i16 %650 to i32
  %652 = add nsw i32 %643, %651
  %653 = load i32* %col, align 4
  %654 = add nsw i32 %653, 1
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 2
  %657 = load i16** %656, align 8
  %658 = getelementptr inbounds i16* %657, i64 %655
  %659 = load i16* %658, align 2
  %660 = zext i16 %659 to i32
  %661 = add nsw i32 %652, %660
  %662 = load i32* @black, align 4
  %663 = mul i32 %662, 4
  %664 = sub i32 %661, %663
  %665 = uitofp i32 %664 to float
  %666 = load i32* %row, align 4
  %667 = and i32 %666, 1
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds [2 x float]* %mul, i32 0, i64 %668
  %670 = load float* %669, align 4
  %671 = fmul float %665, %670
  %672 = fpext float %671 to double
  %673 = load i32* %col, align 4
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds [4 x i16*]* %window, i32 0, i64 1
  %676 = load i16** %675, align 8
  %677 = getelementptr inbounds i16* %676, i64 %674
  %678 = load i16* %677, align 2
  %679 = zext i16 %678 to i32
  %680 = load i32* @black, align 4
  %681 = sub i32 %679, %680
  %682 = uitofp i32 %681 to double
  %683 = fmul double %682, 5.000000e-01
  %684 = fadd double %672, %683
  %685 = load i32* @black, align 4
  %686 = uitofp i32 %685 to double
  %687 = fadd double %684, %686
  %688 = fptrunc double %687 to float
  store float %688, float* %avg, align 4
  %689 = load float* %avg, align 4
  %690 = fcmp olt float %689, 0.000000e+00
  br i1 %690, label %691, label %692

; <label>:691                                     ; preds = %626
  br label %696

; <label>:692                                     ; preds = %626
  %693 = load float* %avg, align 4
  %694 = fpext float %693 to double
  %695 = call double @sqrt(double %694) #4
  br label %696

; <label>:696                                     ; preds = %692, %691
  %697 = phi double [ 0.000000e+00, %691 ], [ %695, %692 ]
  %698 = fptrunc double %697 to float
  store float %698, float* %avg, align 4
  %699 = load i32* @filters, align 4
  %700 = load i32* %row, align 4
  %701 = shl i32 %700, 1
  %702 = and i32 %701, 14
  %703 = load i32* %col, align 4
  %704 = and i32 %703, 1
  %705 = add nsw i32 %702, %704
  %706 = shl i32 %705, 1
  %707 = lshr i32 %699, %706
  %708 = and i32 %707, 3
  %709 = zext i32 %708 to i64
  %710 = load i32* %row, align 4
  %711 = load i16* @shrink, align 2
  %712 = zext i16 %711 to i32
  %713 = ashr i32 %710, %712
  %714 = load i16* @iwidth, align 2
  %715 = zext i16 %714 to i32
  %716 = mul nsw i32 %713, %715
  %717 = load i32* %col, align 4
  %718 = load i16* @shrink, align 2
  %719 = zext i16 %718 to i32
  %720 = ashr i32 %717, %719
  %721 = add nsw i32 %716, %720
  %722 = sext i32 %721 to i64
  %723 = load [4 x i16]** @image, align 8
  %724 = getelementptr inbounds [4 x i16]* %723, i64 %722
  %725 = getelementptr inbounds [4 x i16]* %724, i32 0, i64 %709
  %726 = load i16* %725, align 2
  %727 = uitofp i16 %726 to double
  %728 = call double @sqrt(double %727) #4
  %729 = load float* %avg, align 4
  %730 = fpext float %729 to double
  %731 = fsub double %728, %730
  %732 = fptrunc double %731 to float
  store float %732, float* %diff, align 4
  %733 = load float* %diff, align 4
  %734 = load float* %thold, align 4
  %735 = fsub float -0.000000e+00, %734
  %736 = fcmp olt float %733, %735
  br i1 %736, label %737, label %741

; <label>:737                                     ; preds = %696
  %738 = load float* %thold, align 4
  %739 = load float* %diff, align 4
  %740 = fadd float %739, %738
  store float %740, float* %diff, align 4
  br label %751

; <label>:741                                     ; preds = %696
  %742 = load float* %diff, align 4
  %743 = load float* %thold, align 4
  %744 = fcmp ogt float %742, %743
  br i1 %744, label %745, label %749

; <label>:745                                     ; preds = %741
  %746 = load float* %thold, align 4
  %747 = load float* %diff, align 4
  %748 = fsub float %747, %746
  store float %748, float* %diff, align 4
  br label %750

; <label>:749                                     ; preds = %741
  store float 0.000000e+00, float* %diff, align 4
  br label %750

; <label>:750                                     ; preds = %749, %745
  br label %751

; <label>:751                                     ; preds = %750, %737
  %752 = load float* %avg, align 4
  %753 = load float* %diff, align 4
  %754 = fadd float %752, %753
  %755 = load float* %avg, align 4
  %756 = load float* %diff, align 4
  %757 = fadd float %755, %756
  %758 = fmul float %754, %757
  %759 = fpext float %758 to double
  %760 = fadd double %759, 5.000000e-01
  %761 = fcmp olt double %760, 6.553500e+04
  br i1 %761, label %762, label %772

; <label>:762                                     ; preds = %751
  %763 = load float* %avg, align 4
  %764 = load float* %diff, align 4
  %765 = fadd float %763, %764
  %766 = load float* %avg, align 4
  %767 = load float* %diff, align 4
  %768 = fadd float %766, %767
  %769 = fmul float %765, %768
  %770 = fpext float %769 to double
  %771 = fadd double %770, 5.000000e-01
  br label %773

; <label>:772                                     ; preds = %751
  br label %773

; <label>:773                                     ; preds = %772, %762
  %774 = phi double [ %771, %762 ], [ 6.553500e+04, %772 ]
  %775 = fcmp ogt double 0.000000e+00, %774
  br i1 %775, label %776, label %777

; <label>:776                                     ; preds = %773
  br label %801

; <label>:777                                     ; preds = %773
  %778 = load float* %avg, align 4
  %779 = load float* %diff, align 4
  %780 = fadd float %778, %779
  %781 = load float* %avg, align 4
  %782 = load float* %diff, align 4
  %783 = fadd float %781, %782
  %784 = fmul float %780, %783
  %785 = fpext float %784 to double
  %786 = fadd double %785, 5.000000e-01
  %787 = fcmp olt double %786, 6.553500e+04
  br i1 %787, label %788, label %798

; <label>:788                                     ; preds = %777
  %789 = load float* %avg, align 4
  %790 = load float* %diff, align 4
  %791 = fadd float %789, %790
  %792 = load float* %avg, align 4
  %793 = load float* %diff, align 4
  %794 = fadd float %792, %793
  %795 = fmul float %791, %794
  %796 = fpext float %795 to double
  %797 = fadd double %796, 5.000000e-01
  br label %799

; <label>:798                                     ; preds = %777
  br label %799

; <label>:799                                     ; preds = %798, %788
  %800 = phi double [ %797, %788 ], [ 6.553500e+04, %798 ]
  br label %801

; <label>:801                                     ; preds = %799, %776
  %802 = phi double [ 0.000000e+00, %776 ], [ %800, %799 ]
  %803 = fptoui double %802 to i16
  %804 = load i32* @filters, align 4
  %805 = load i32* %row, align 4
  %806 = shl i32 %805, 1
  %807 = and i32 %806, 14
  %808 = load i32* %col, align 4
  %809 = and i32 %808, 1
  %810 = add nsw i32 %807, %809
  %811 = shl i32 %810, 1
  %812 = lshr i32 %804, %811
  %813 = and i32 %812, 3
  %814 = zext i32 %813 to i64
  %815 = load i32* %row, align 4
  %816 = load i16* @shrink, align 2
  %817 = zext i16 %816 to i32
  %818 = ashr i32 %815, %817
  %819 = load i16* @iwidth, align 2
  %820 = zext i16 %819 to i32
  %821 = mul nsw i32 %818, %820
  %822 = load i32* %col, align 4
  %823 = load i16* @shrink, align 2
  %824 = zext i16 %823 to i32
  %825 = ashr i32 %822, %824
  %826 = add nsw i32 %821, %825
  %827 = sext i32 %826 to i64
  %828 = load [4 x i16]** @image, align 8
  %829 = getelementptr inbounds [4 x i16]* %828, i64 %827
  %830 = getelementptr inbounds [4 x i16]* %829, i32 0, i64 %814
  store i16 %803, i16* %830, align 2
  br label %831

; <label>:831                                     ; preds = %801
  %832 = load i32* %col, align 4
  %833 = add nsw i32 %832, 2
  store i32 %833, i32* %col, align 4
  br label %620

; <label>:834                                     ; preds = %620
  br label %835

; <label>:835                                     ; preds = %834
  %836 = load i32* %row, align 4
  %837 = add nsw i32 %836, 1
  store i32 %837, i32* %row, align 4
  br label %523

; <label>:838                                     ; preds = %523
  br label %839

; <label>:839                                     ; preds = %838, %459, %456
  %840 = load float** %fimg, align 8
  %841 = bitcast float* %840 to i8*
  call void @free(i8* %841) #4
  ret void
}

; Function Attrs: nounwind
declare double @sqrt(double) #3

; Function Attrs: nounwind uwtable
define void @scale_colors() #0 {
  %bottom = alloca i32, align 4
  %right = alloca i32, align 4
  %size = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %ur = alloca i32, align 4
  %uc = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %c = alloca i32, align 4
  %sum = alloca [8 x i32], align 16
  %val = alloca i32, align 4
  %dark = alloca i32, align 4
  %sat = alloca i32, align 4
  %dsum = alloca [8 x double], align 16
  %dmin = alloca double, align 8
  %dmax = alloca double, align 8
  %scale_mul = alloca [4 x float], align 16
  %fr = alloca float, align 4
  %fc = alloca float, align 4
  %img = alloca i16*, align 8
  %pix = alloca i16*, align 8
  store i16* null, i16** %img, align 8
  %1 = load float* getelementptr inbounds ([4 x float]* @user_mul, i32 0, i64 0), align 4
  %2 = fcmp une float %1, 0.000000e+00
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([4 x float]* @pre_mul to i8*), i8* bitcast ([4 x float]* @user_mul to i8*), i64 16, i32 16, i1 false)
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = load i32* @use_auto_wb, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %13, label %7

; <label>:7                                       ; preds = %4
  %8 = load i32* @use_camera_wb, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %242

; <label>:10                                      ; preds = %7
  %11 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %12 = fcmp oeq float %11, -1.000000e+00
  br i1 %12, label %13, label %242

; <label>:13                                      ; preds = %10, %4
  %14 = bitcast [8 x double]* %dsum to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 64, i32 16, i1 false)
  %15 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 1), align 4
  %16 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 3), align 4
  %17 = add i32 %15, %16
  %18 = load i16* @height, align 2
  %19 = zext i16 %18 to i32
  %20 = icmp ult i32 %17, %19
  br i1 %20, label %21, label %25

; <label>:21                                      ; preds = %13
  %22 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 1), align 4
  %23 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 3), align 4
  %24 = add i32 %22, %23
  br label %28

; <label>:25                                      ; preds = %13
  %26 = load i16* @height, align 2
  %27 = zext i16 %26 to i32
  br label %28

; <label>:28                                      ; preds = %25, %21
  %29 = phi i32 [ %24, %21 ], [ %27, %25 ]
  store i32 %29, i32* %bottom, align 4
  %30 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 0), align 4
  %31 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 2), align 4
  %32 = add i32 %30, %31
  %33 = load i16* @width, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp ult i32 %32, %34
  br i1 %35, label %36, label %40

; <label>:36                                      ; preds = %28
  %37 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 0), align 4
  %38 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 2), align 4
  %39 = add i32 %37, %38
  br label %43

; <label>:40                                      ; preds = %28
  %41 = load i16* @width, align 2
  %42 = zext i16 %41 to i32
  br label %43

; <label>:43                                      ; preds = %40, %36
  %44 = phi i32 [ %39, %36 ], [ %42, %40 ]
  store i32 %44, i32* %right, align 4
  %45 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 1), align 4
  store i32 %45, i32* %row, align 4
  br label %46

; <label>:46                                      ; preds = %209, %43
  %47 = load i32* %row, align 4
  %48 = load i32* %bottom, align 4
  %49 = icmp ult i32 %47, %48
  br i1 %49, label %50, label %212

; <label>:50                                      ; preds = %46
  %51 = load i32* getelementptr inbounds ([4 x i32]* @greybox, i32 0, i64 0), align 4
  store i32 %51, i32* %col, align 4
  br label %52

; <label>:52                                      ; preds = %205, %50
  %53 = load i32* %col, align 4
  %54 = load i32* %right, align 4
  %55 = icmp ult i32 %53, %54
  br i1 %55, label %56, label %208

; <label>:56                                      ; preds = %52
  %57 = bitcast [8 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %57, i8 0, i64 32, i32 16, i1 false)
  %58 = load i32* %row, align 4
  store i32 %58, i32* %y, align 4
  br label %59

; <label>:59                                      ; preds = %182, %56
  %60 = load i32* %y, align 4
  %61 = load i32* %row, align 4
  %62 = add i32 %61, 8
  %63 = icmp ult i32 %60, %62
  br i1 %63, label %64, label %68

; <label>:64                                      ; preds = %59
  %65 = load i32* %y, align 4
  %66 = load i32* %bottom, align 4
  %67 = icmp ult i32 %65, %66
  br label %68

; <label>:68                                      ; preds = %64, %59
  %69 = phi i1 [ false, %59 ], [ %67, %64 ]
  br i1 %69, label %70, label %185

; <label>:70                                      ; preds = %68
  %71 = load i32* %col, align 4
  store i32 %71, i32* %x, align 4
  br label %72

; <label>:72                                      ; preds = %178, %70
  %73 = load i32* %x, align 4
  %74 = load i32* %col, align 4
  %75 = add i32 %74, 8
  %76 = icmp ult i32 %73, %75
  br i1 %76, label %77, label %81

; <label>:77                                      ; preds = %72
  %78 = load i32* %x, align 4
  %79 = load i32* %right, align 4
  %80 = icmp ult i32 %78, %79
  br label %81

; <label>:81                                      ; preds = %77, %72
  %82 = phi i1 [ false, %72 ], [ %80, %77 ]
  br i1 %82, label %83, label %181

; <label>:83                                      ; preds = %81
  store i32 0, i32* %c, align 4
  br label %84

; <label>:84                                      ; preds = %174, %83
  %85 = load i32* %c, align 4
  %86 = icmp ult i32 %85, 4
  br i1 %86, label %87, label %177

; <label>:87                                      ; preds = %84
  %88 = load i32* @filters, align 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %130

; <label>:90                                      ; preds = %87
  %91 = load i32* @filters, align 4
  %92 = load i32* %y, align 4
  %93 = shl i32 %92, 1
  %94 = and i32 %93, 14
  %95 = load i32* %x, align 4
  %96 = and i32 %95, 1
  %97 = add i32 %94, %96
  %98 = shl i32 %97, 1
  %99 = lshr i32 %91, %98
  %100 = and i32 %99, 3
  store i32 %100, i32* %c, align 4
  %101 = load i32* @filters, align 4
  %102 = load i32* %y, align 4
  %103 = shl i32 %102, 1
  %104 = and i32 %103, 14
  %105 = load i32* %x, align 4
  %106 = and i32 %105, 1
  %107 = add i32 %104, %106
  %108 = shl i32 %107, 1
  %109 = lshr i32 %101, %108
  %110 = and i32 %109, 3
  %111 = zext i32 %110 to i64
  %112 = load i32* %y, align 4
  %113 = load i16* @shrink, align 2
  %114 = zext i16 %113 to i32
  %115 = lshr i32 %112, %114
  %116 = load i16* @iwidth, align 2
  %117 = zext i16 %116 to i32
  %118 = mul i32 %115, %117
  %119 = load i32* %x, align 4
  %120 = load i16* @shrink, align 2
  %121 = zext i16 %120 to i32
  %122 = lshr i32 %119, %121
  %123 = add i32 %118, %122
  %124 = zext i32 %123 to i64
  %125 = load [4 x i16]** @image, align 8
  %126 = getelementptr inbounds [4 x i16]* %125, i64 %124
  %127 = getelementptr inbounds [4 x i16]* %126, i32 0, i64 %111
  %128 = load i16* %127, align 2
  %129 = zext i16 %128 to i32
  store i32 %129, i32* %val, align 4
  br label %145

; <label>:130                                     ; preds = %87
  %131 = load i32* %c, align 4
  %132 = zext i32 %131 to i64
  %133 = load i32* %y, align 4
  %134 = load i16* @width, align 2
  %135 = zext i16 %134 to i32
  %136 = mul i32 %133, %135
  %137 = load i32* %x, align 4
  %138 = add i32 %136, %137
  %139 = zext i32 %138 to i64
  %140 = load [4 x i16]** @image, align 8
  %141 = getelementptr inbounds [4 x i16]* %140, i64 %139
  %142 = getelementptr inbounds [4 x i16]* %141, i32 0, i64 %132
  %143 = load i16* %142, align 2
  %144 = zext i16 %143 to i32
  store i32 %144, i32* %val, align 4
  br label %145

; <label>:145                                     ; preds = %130, %90
  %146 = load i32* %val, align 4
  %147 = load i32* @maximum, align 4
  %148 = sub i32 %147, 25
  %149 = icmp ugt i32 %146, %148
  br i1 %149, label %150, label %151

; <label>:150                                     ; preds = %145
  br label %204

; <label>:151                                     ; preds = %145
  %152 = load i32* @black, align 4
  %153 = load i32* %val, align 4
  %154 = sub i32 %153, %152
  store i32 %154, i32* %val, align 4
  %155 = icmp slt i32 %154, 0
  br i1 %155, label %156, label %157

; <label>:156                                     ; preds = %151
  store i32 0, i32* %val, align 4
  br label %157

; <label>:157                                     ; preds = %156, %151
  %158 = load i32* %val, align 4
  %159 = load i32* %c, align 4
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %160
  %162 = load i32* %161, align 4
  %163 = add i32 %162, %158
  store i32 %163, i32* %161, align 4
  %164 = load i32* %c, align 4
  %165 = add i32 %164, 4
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %166
  %168 = load i32* %167, align 4
  %169 = add i32 %168, 1
  store i32 %169, i32* %167, align 4
  %170 = load i32* @filters, align 4
  %171 = icmp ne i32 %170, 0
  br i1 %171, label %172, label %173

; <label>:172                                     ; preds = %157
  br label %177

; <label>:173                                     ; preds = %157
  br label %174

; <label>:174                                     ; preds = %173
  %175 = load i32* %c, align 4
  %176 = add i32 %175, 1
  store i32 %176, i32* %c, align 4
  br label %84

; <label>:177                                     ; preds = %172, %84
  br label %178

; <label>:178                                     ; preds = %177
  %179 = load i32* %x, align 4
  %180 = add i32 %179, 1
  store i32 %180, i32* %x, align 4
  br label %72

; <label>:181                                     ; preds = %81
  br label %182

; <label>:182                                     ; preds = %181
  %183 = load i32* %y, align 4
  %184 = add i32 %183, 1
  store i32 %184, i32* %y, align 4
  br label %59

; <label>:185                                     ; preds = %68
  store i32 0, i32* %c, align 4
  br label %186

; <label>:186                                     ; preds = %200, %185
  %187 = load i32* %c, align 4
  %188 = icmp ult i32 %187, 8
  br i1 %188, label %189, label %203

; <label>:189                                     ; preds = %186
  %190 = load i32* %c, align 4
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %191
  %193 = load i32* %192, align 4
  %194 = uitofp i32 %193 to double
  %195 = load i32* %c, align 4
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %196
  %198 = load double* %197, align 8
  %199 = fadd double %198, %194
  store double %199, double* %197, align 8
  br label %200

; <label>:200                                     ; preds = %189
  %201 = load i32* %c, align 4
  %202 = add i32 %201, 1
  store i32 %202, i32* %c, align 4
  br label %186

; <label>:203                                     ; preds = %186
  br label %204

; <label>:204                                     ; preds = %203, %150
  br label %205

; <label>:205                                     ; preds = %204
  %206 = load i32* %col, align 4
  %207 = add i32 %206, 8
  store i32 %207, i32* %col, align 4
  br label %52

; <label>:208                                     ; preds = %52
  br label %209

; <label>:209                                     ; preds = %208
  %210 = load i32* %row, align 4
  %211 = add i32 %210, 8
  store i32 %211, i32* %row, align 4
  br label %46

; <label>:212                                     ; preds = %46
  store i32 0, i32* %c, align 4
  br label %213

; <label>:213                                     ; preds = %238, %212
  %214 = load i32* %c, align 4
  %215 = icmp ult i32 %214, 4
  br i1 %215, label %216, label %241

; <label>:216                                     ; preds = %213
  %217 = load i32* %c, align 4
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %218
  %220 = load double* %219, align 8
  %221 = fcmp une double %220, 0.000000e+00
  br i1 %221, label %222, label %237

; <label>:222                                     ; preds = %216
  %223 = load i32* %c, align 4
  %224 = add i32 %223, 4
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %225
  %227 = load double* %226, align 8
  %228 = load i32* %c, align 4
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds [8 x double]* %dsum, i32 0, i64 %229
  %231 = load double* %230, align 8
  %232 = fdiv double %227, %231
  %233 = fptrunc double %232 to float
  %234 = load i32* %c, align 4
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %235
  store float %233, float* %236, align 4
  br label %237

; <label>:237                                     ; preds = %222, %216
  br label %238

; <label>:238                                     ; preds = %237
  %239 = load i32* %c, align 4
  %240 = add i32 %239, 1
  store i32 %240, i32* %c, align 4
  br label %213

; <label>:241                                     ; preds = %213
  br label %242

; <label>:242                                     ; preds = %241, %10, %7
  %243 = load i32* @use_camera_wb, align 4
  %244 = icmp ne i32 %243, 0
  br i1 %244, label %245, label %353

; <label>:245                                     ; preds = %242
  %246 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %247 = fcmp une float %246, -1.000000e+00
  br i1 %247, label %248, label %353

; <label>:248                                     ; preds = %245
  %249 = bitcast [8 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %249, i8 0, i64 32, i32 16, i1 false)
  store i32 0, i32* %row, align 4
  br label %250

; <label>:250                                     ; preds = %297, %248
  %251 = load i32* %row, align 4
  %252 = icmp ult i32 %251, 8
  br i1 %252, label %253, label %300

; <label>:253                                     ; preds = %250
  store i32 0, i32* %col, align 4
  br label %254

; <label>:254                                     ; preds = %293, %253
  %255 = load i32* %col, align 4
  %256 = icmp ult i32 %255, 8
  br i1 %256, label %257, label %296

; <label>:257                                     ; preds = %254
  %258 = load i32* @filters, align 4
  %259 = load i32* %row, align 4
  %260 = shl i32 %259, 1
  %261 = and i32 %260, 14
  %262 = load i32* %col, align 4
  %263 = and i32 %262, 1
  %264 = add i32 %261, %263
  %265 = shl i32 %264, 1
  %266 = lshr i32 %258, %265
  %267 = and i32 %266, 3
  store i32 %267, i32* %c, align 4
  %268 = load i32* %col, align 4
  %269 = zext i32 %268 to i64
  %270 = load i32* %row, align 4
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds [8 x [8 x i16]]* @white, i32 0, i64 %271
  %273 = getelementptr inbounds [8 x i16]* %272, i32 0, i64 %269
  %274 = load i16* %273, align 2
  %275 = zext i16 %274 to i32
  %276 = load i32* @black, align 4
  %277 = sub i32 %275, %276
  store i32 %277, i32* %val, align 4
  %278 = icmp sgt i32 %277, 0
  br i1 %278, label %279, label %286

; <label>:279                                     ; preds = %257
  %280 = load i32* %val, align 4
  %281 = load i32* %c, align 4
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %282
  %284 = load i32* %283, align 4
  %285 = add i32 %284, %280
  store i32 %285, i32* %283, align 4
  br label %286

; <label>:286                                     ; preds = %279, %257
  %287 = load i32* %c, align 4
  %288 = add i32 %287, 4
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %289
  %291 = load i32* %290, align 4
  %292 = add i32 %291, 1
  store i32 %292, i32* %290, align 4
  br label %293

; <label>:293                                     ; preds = %286
  %294 = load i32* %col, align 4
  %295 = add i32 %294, 1
  store i32 %295, i32* %col, align 4
  br label %254

; <label>:296                                     ; preds = %254
  br label %297

; <label>:297                                     ; preds = %296
  %298 = load i32* %row, align 4
  %299 = add i32 %298, 1
  store i32 %299, i32* %row, align 4
  br label %250

; <label>:300                                     ; preds = %250
  %301 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 0
  %302 = load i32* %301, align 4
  %303 = icmp ne i32 %302, 0
  br i1 %303, label %304, label %340

; <label>:304                                     ; preds = %300
  %305 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 1
  %306 = load i32* %305, align 4
  %307 = icmp ne i32 %306, 0
  br i1 %307, label %308, label %340

; <label>:308                                     ; preds = %304
  %309 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 2
  %310 = load i32* %309, align 4
  %311 = icmp ne i32 %310, 0
  br i1 %311, label %312, label %340

; <label>:312                                     ; preds = %308
  %313 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 3
  %314 = load i32* %313, align 4
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %340

; <label>:316                                     ; preds = %312
  store i32 0, i32* %c, align 4
  br label %317

; <label>:317                                     ; preds = %336, %316
  %318 = load i32* %c, align 4
  %319 = icmp ult i32 %318, 4
  br i1 %319, label %320, label %339

; <label>:320                                     ; preds = %317
  %321 = load i32* %c, align 4
  %322 = add i32 %321, 4
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %323
  %325 = load i32* %324, align 4
  %326 = uitofp i32 %325 to float
  %327 = load i32* %c, align 4
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %328
  %330 = load i32* %329, align 4
  %331 = uitofp i32 %330 to float
  %332 = fdiv float %326, %331
  %333 = load i32* %c, align 4
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %334
  store float %332, float* %335, align 4
  br label %336

; <label>:336                                     ; preds = %320
  %337 = load i32* %c, align 4
  %338 = add i32 %337, 1
  store i32 %338, i32* %c, align 4
  br label %317

; <label>:339                                     ; preds = %317
  br label %352

; <label>:340                                     ; preds = %312, %308, %304, %300
  %341 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %342 = fcmp une float %341, 0.000000e+00
  br i1 %342, label %343, label %347

; <label>:343                                     ; preds = %340
  %344 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %345 = fcmp une float %344, 0.000000e+00
  br i1 %345, label %346, label %347

; <label>:346                                     ; preds = %343
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([4 x float]* @pre_mul to i8*), i8* bitcast ([4 x float]* @cam_mul to i8*), i64 16, i32 16, i1 false)
  br label %351

; <label>:347                                     ; preds = %343, %340
  %348 = load %struct._IO_FILE** @stderr, align 8
  %349 = load i8** @ifname, align 8
  %350 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %348, i8* getelementptr inbounds ([38 x i8]* @.str70, i32 0, i32 0), i8* %349)
  br label %351

; <label>:351                                     ; preds = %347, %346
  br label %352

; <label>:352                                     ; preds = %351, %339
  br label %353

; <label>:353                                     ; preds = %352, %245, %242
  %354 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  %355 = fcmp oeq float %354, 0.000000e+00
  br i1 %355, label %356, label %364

; <label>:356                                     ; preds = %353
  %357 = load i32* @colors, align 4
  %358 = icmp slt i32 %357, 4
  br i1 %358, label %359, label %361

; <label>:359                                     ; preds = %356
  %360 = load float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  br label %362

; <label>:361                                     ; preds = %356
  br label %362

; <label>:362                                     ; preds = %361, %359
  %363 = phi float [ %360, %359 ], [ 1.000000e+00, %361 ]
  store float %363, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  br label %364

; <label>:364                                     ; preds = %362, %353
  %365 = load i32* @black, align 4
  store i32 %365, i32* %dark, align 4
  %366 = load i32* @maximum, align 4
  store i32 %366, i32* %sat, align 4
  %367 = load float* @threshold, align 4
  %368 = fcmp une float %367, 0.000000e+00
  br i1 %368, label %369, label %370

; <label>:369                                     ; preds = %364
  call void @wavelet_denoise()
  br label %370

; <label>:370                                     ; preds = %369, %364
  %371 = load i32* @black, align 4
  %372 = load i32* @maximum, align 4
  %373 = sub i32 %372, %371
  store i32 %373, i32* @maximum, align 4
  store double 0x7FEFFFFFFFFFFFFF, double* %dmin, align 8
  store i32 0, i32* %c, align 4
  store double 0.000000e+00, double* %dmax, align 8
  br label %374

; <label>:374                                     ; preds = %406, %370
  %375 = load i32* %c, align 4
  %376 = icmp ult i32 %375, 4
  br i1 %376, label %377, label %409

; <label>:377                                     ; preds = %374
  %378 = load double* %dmin, align 8
  %379 = load i32* %c, align 4
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %380
  %382 = load float* %381, align 4
  %383 = fpext float %382 to double
  %384 = fcmp ogt double %378, %383
  br i1 %384, label %385, label %391

; <label>:385                                     ; preds = %377
  %386 = load i32* %c, align 4
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %387
  %389 = load float* %388, align 4
  %390 = fpext float %389 to double
  store double %390, double* %dmin, align 8
  br label %391

; <label>:391                                     ; preds = %385, %377
  %392 = load double* %dmax, align 8
  %393 = load i32* %c, align 4
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %394
  %396 = load float* %395, align 4
  %397 = fpext float %396 to double
  %398 = fcmp olt double %392, %397
  br i1 %398, label %399, label %405

; <label>:399                                     ; preds = %391
  %400 = load i32* %c, align 4
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %401
  %403 = load float* %402, align 4
  %404 = fpext float %403 to double
  store double %404, double* %dmax, align 8
  br label %405

; <label>:405                                     ; preds = %399, %391
  br label %406

; <label>:406                                     ; preds = %405
  %407 = load i32* %c, align 4
  %408 = add i32 %407, 1
  store i32 %408, i32* %c, align 4
  br label %374

; <label>:409                                     ; preds = %374
  %410 = load i32* @highlight, align 4
  %411 = icmp ne i32 %410, 0
  br i1 %411, label %414, label %412

; <label>:412                                     ; preds = %409
  %413 = load double* %dmin, align 8
  store double %413, double* %dmax, align 8
  br label %414

; <label>:414                                     ; preds = %412, %409
  store i32 0, i32* %c, align 4
  br label %415

; <label>:415                                     ; preds = %436, %414
  %416 = load i32* %c, align 4
  %417 = icmp ult i32 %416, 4
  br i1 %417, label %418, label %439

; <label>:418                                     ; preds = %415
  %419 = load double* %dmax, align 8
  %420 = load i32* %c, align 4
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %421
  %423 = load float* %422, align 4
  %424 = fpext float %423 to double
  %425 = fdiv double %424, %419
  %426 = fptrunc double %425 to float
  store float %426, float* %422, align 4
  %427 = fpext float %426 to double
  %428 = fmul double %427, 6.553500e+04
  %429 = load i32* @maximum, align 4
  %430 = uitofp i32 %429 to double
  %431 = fdiv double %428, %430
  %432 = fptrunc double %431 to float
  %433 = load i32* %c, align 4
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [4 x float]* %scale_mul, i32 0, i64 %434
  store float %432, float* %435, align 4
  br label %436

; <label>:436                                     ; preds = %418
  %437 = load i32* %c, align 4
  %438 = add i32 %437, 1
  store i32 %438, i32* %c, align 4
  br label %415

; <label>:439                                     ; preds = %415
  %440 = load i32* @verbose, align 4
  %441 = icmp ne i32 %440, 0
  br i1 %441, label %442, label %464

; <label>:442                                     ; preds = %439
  %443 = load %struct._IO_FILE** @stderr, align 8
  %444 = load i32* %dark, align 4
  %445 = load i32* %sat, align 4
  %446 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %443, i8* getelementptr inbounds ([57 x i8]* @.str71, i32 0, i32 0), i32 %444, i32 %445)
  store i32 0, i32* %c, align 4
  br label %447

; <label>:447                                     ; preds = %458, %442
  %448 = load i32* %c, align 4
  %449 = icmp ult i32 %448, 4
  br i1 %449, label %450, label %461

; <label>:450                                     ; preds = %447
  %451 = load %struct._IO_FILE** @stderr, align 8
  %452 = load i32* %c, align 4
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %453
  %455 = load float* %454, align 4
  %456 = fpext float %455 to double
  %457 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %451, i8* getelementptr inbounds ([4 x i8]* @.str72, i32 0, i32 0), double %456)
  br label %458

; <label>:458                                     ; preds = %450
  %459 = load i32* %c, align 4
  %460 = add i32 %459, 1
  store i32 %460, i32* %c, align 4
  br label %447

; <label>:461                                     ; preds = %447
  %462 = load %struct._IO_FILE** @stderr, align 8
  %463 = call i32 @fputc(i32 10, %struct._IO_FILE* %462)
  br label %464

; <label>:464                                     ; preds = %461, %439
  %465 = load i16* @iheight, align 2
  %466 = zext i16 %465 to i32
  %467 = load i16* @iwidth, align 2
  %468 = zext i16 %467 to i32
  %469 = mul nsw i32 %466, %468
  store i32 %469, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %470

; <label>:470                                     ; preds = %524, %464
  %471 = load i32* %i, align 4
  %472 = load i32* %size, align 4
  %473 = mul i32 %472, 4
  %474 = icmp ult i32 %471, %473
  br i1 %474, label %475, label %527

; <label>:475                                     ; preds = %470
  %476 = load i32* %i, align 4
  %477 = zext i32 %476 to i64
  %478 = load [4 x i16]** @image, align 8
  %479 = getelementptr inbounds [4 x i16]* %478, i64 0
  %480 = getelementptr inbounds [4 x i16]* %479, i32 0, i64 %477
  %481 = load i16* %480, align 2
  %482 = zext i16 %481 to i32
  store i32 %482, i32* %val, align 4
  %483 = load i32* %val, align 4
  %484 = icmp ne i32 %483, 0
  br i1 %484, label %486, label %485

; <label>:485                                     ; preds = %475
  br label %524

; <label>:486                                     ; preds = %475
  %487 = load i32* @black, align 4
  %488 = load i32* %val, align 4
  %489 = sub i32 %488, %487
  store i32 %489, i32* %val, align 4
  %490 = load i32* %i, align 4
  %491 = and i32 %490, 3
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds [4 x float]* %scale_mul, i32 0, i64 %492
  %494 = load float* %493, align 4
  %495 = load i32* %val, align 4
  %496 = sitofp i32 %495 to float
  %497 = fmul float %496, %494
  %498 = fptosi float %497 to i32
  store i32 %498, i32* %val, align 4
  %499 = load i32* %val, align 4
  %500 = icmp slt i32 %499, 65535
  br i1 %500, label %501, label %503

; <label>:501                                     ; preds = %486
  %502 = load i32* %val, align 4
  br label %504

; <label>:503                                     ; preds = %486
  br label %504

; <label>:504                                     ; preds = %503, %501
  %505 = phi i32 [ %502, %501 ], [ 65535, %503 ]
  %506 = icmp sgt i32 0, %505
  br i1 %506, label %507, label %508

; <label>:507                                     ; preds = %504
  br label %516

; <label>:508                                     ; preds = %504
  %509 = load i32* %val, align 4
  %510 = icmp slt i32 %509, 65535
  br i1 %510, label %511, label %513

; <label>:511                                     ; preds = %508
  %512 = load i32* %val, align 4
  br label %514

; <label>:513                                     ; preds = %508
  br label %514

; <label>:514                                     ; preds = %513, %511
  %515 = phi i32 [ %512, %511 ], [ 65535, %513 ]
  br label %516

; <label>:516                                     ; preds = %514, %507
  %517 = phi i32 [ 0, %507 ], [ %515, %514 ]
  %518 = trunc i32 %517 to i16
  %519 = load i32* %i, align 4
  %520 = zext i32 %519 to i64
  %521 = load [4 x i16]** @image, align 8
  %522 = getelementptr inbounds [4 x i16]* %521, i64 0
  %523 = getelementptr inbounds [4 x i16]* %522, i32 0, i64 %520
  store i16 %518, i16* %523, align 2
  br label %524

; <label>:524                                     ; preds = %516, %485
  %525 = load i32* %i, align 4
  %526 = add i32 %525, 1
  store i32 %526, i32* %i, align 4
  br label %470

; <label>:527                                     ; preds = %470
  %528 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 0), align 8
  %529 = fcmp une double %528, 1.000000e+00
  br i1 %529, label %533, label %530

; <label>:530                                     ; preds = %527
  %531 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 2), align 8
  %532 = fcmp une double %531, 1.000000e+00
  br i1 %532, label %533, label %735

; <label>:533                                     ; preds = %530, %527
  %534 = load i32* @colors, align 4
  %535 = icmp eq i32 %534, 3
  br i1 %535, label %536, label %735

; <label>:536                                     ; preds = %533
  %537 = load i32* @verbose, align 4
  %538 = icmp ne i32 %537, 0
  br i1 %538, label %539, label %542

; <label>:539                                     ; preds = %536
  %540 = load %struct._IO_FILE** @stderr, align 8
  %541 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %540, i8* getelementptr inbounds ([36 x i8]* @.str73, i32 0, i32 0))
  br label %542

; <label>:542                                     ; preds = %539, %536
  store i32 0, i32* %c, align 4
  br label %543

; <label>:543                                     ; preds = %731, %542
  %544 = load i32* %c, align 4
  %545 = icmp ult i32 %544, 4
  br i1 %545, label %546, label %734

; <label>:546                                     ; preds = %543
  %547 = load i32* %c, align 4
  %548 = zext i32 %547 to i64
  %549 = getelementptr inbounds [4 x double]* @aber, i32 0, i64 %548
  %550 = load double* %549, align 8
  %551 = fcmp oeq double %550, 1.000000e+00
  br i1 %551, label %552, label %553

; <label>:552                                     ; preds = %546
  br label %731

; <label>:553                                     ; preds = %546
  %554 = load i32* %size, align 4
  %555 = zext i32 %554 to i64
  %556 = mul i64 %555, 2
  %557 = call noalias i8* @malloc(i64 %556) #4
  %558 = bitcast i8* %557 to i16*
  store i16* %558, i16** %img, align 8
  %559 = load i16** %img, align 8
  %560 = bitcast i16* %559 to i8*
  call void @merror(i8* %560, i8* getelementptr inbounds ([15 x i8]* @.str74, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %561

; <label>:561                                     ; preds = %578, %553
  %562 = load i32* %i, align 4
  %563 = load i32* %size, align 4
  %564 = icmp ult i32 %562, %563
  br i1 %564, label %565, label %581

; <label>:565                                     ; preds = %561
  %566 = load i32* %c, align 4
  %567 = zext i32 %566 to i64
  %568 = load i32* %i, align 4
  %569 = zext i32 %568 to i64
  %570 = load [4 x i16]** @image, align 8
  %571 = getelementptr inbounds [4 x i16]* %570, i64 %569
  %572 = getelementptr inbounds [4 x i16]* %571, i32 0, i64 %567
  %573 = load i16* %572, align 2
  %574 = load i32* %i, align 4
  %575 = zext i32 %574 to i64
  %576 = load i16** %img, align 8
  %577 = getelementptr inbounds i16* %576, i64 %575
  store i16 %573, i16* %577, align 2
  br label %578

; <label>:578                                     ; preds = %565
  %579 = load i32* %i, align 4
  %580 = add i32 %579, 1
  store i32 %580, i32* %i, align 4
  br label %561

; <label>:581                                     ; preds = %561
  store i32 0, i32* %row, align 4
  br label %582

; <label>:582                                     ; preds = %725, %581
  %583 = load i32* %row, align 4
  %584 = load i16* @iheight, align 2
  %585 = zext i16 %584 to i32
  %586 = icmp ult i32 %583, %585
  br i1 %586, label %587, label %728

; <label>:587                                     ; preds = %582
  %588 = load i32* %row, align 4
  %589 = uitofp i32 %588 to double
  %590 = load i16* @iheight, align 2
  %591 = zext i16 %590 to i32
  %592 = sitofp i32 %591 to double
  %593 = fmul double %592, 5.000000e-01
  %594 = fsub double %589, %593
  %595 = load i32* %c, align 4
  %596 = zext i32 %595 to i64
  %597 = getelementptr inbounds [4 x double]* @aber, i32 0, i64 %596
  %598 = load double* %597, align 8
  %599 = fmul double %594, %598
  %600 = load i16* @iheight, align 2
  %601 = zext i16 %600 to i32
  %602 = sitofp i32 %601 to double
  %603 = fmul double %602, 5.000000e-01
  %604 = fadd double %599, %603
  %605 = fptrunc double %604 to float
  store float %605, float* %fr, align 4
  %606 = fptoui float %605 to i32
  store i32 %606, i32* %ur, align 4
  %607 = load i32* %ur, align 4
  %608 = load i16* @iheight, align 2
  %609 = zext i16 %608 to i32
  %610 = sub nsw i32 %609, 2
  %611 = icmp ugt i32 %607, %610
  br i1 %611, label %612, label %613

; <label>:612                                     ; preds = %587
  br label %725

; <label>:613                                     ; preds = %587
  %614 = load i32* %ur, align 4
  %615 = uitofp i32 %614 to float
  %616 = load float* %fr, align 4
  %617 = fsub float %616, %615
  store float %617, float* %fr, align 4
  store i32 0, i32* %col, align 4
  br label %618

; <label>:618                                     ; preds = %721, %613
  %619 = load i32* %col, align 4
  %620 = load i16* @iwidth, align 2
  %621 = zext i16 %620 to i32
  %622 = icmp ult i32 %619, %621
  br i1 %622, label %623, label %724

; <label>:623                                     ; preds = %618
  %624 = load i32* %col, align 4
  %625 = uitofp i32 %624 to double
  %626 = load i16* @iwidth, align 2
  %627 = zext i16 %626 to i32
  %628 = sitofp i32 %627 to double
  %629 = fmul double %628, 5.000000e-01
  %630 = fsub double %625, %629
  %631 = load i32* %c, align 4
  %632 = zext i32 %631 to i64
  %633 = getelementptr inbounds [4 x double]* @aber, i32 0, i64 %632
  %634 = load double* %633, align 8
  %635 = fmul double %630, %634
  %636 = load i16* @iwidth, align 2
  %637 = zext i16 %636 to i32
  %638 = sitofp i32 %637 to double
  %639 = fmul double %638, 5.000000e-01
  %640 = fadd double %635, %639
  %641 = fptrunc double %640 to float
  store float %641, float* %fc, align 4
  %642 = fptoui float %641 to i32
  store i32 %642, i32* %uc, align 4
  %643 = load i32* %uc, align 4
  %644 = load i16* @iwidth, align 2
  %645 = zext i16 %644 to i32
  %646 = sub nsw i32 %645, 2
  %647 = icmp ugt i32 %643, %646
  br i1 %647, label %648, label %649

; <label>:648                                     ; preds = %623
  br label %721

; <label>:649                                     ; preds = %623
  %650 = load i32* %uc, align 4
  %651 = uitofp i32 %650 to float
  %652 = load float* %fc, align 4
  %653 = fsub float %652, %651
  store float %653, float* %fc, align 4
  %654 = load i16** %img, align 8
  %655 = load i32* %ur, align 4
  %656 = load i16* @iwidth, align 2
  %657 = zext i16 %656 to i32
  %658 = mul i32 %655, %657
  %659 = zext i32 %658 to i64
  %660 = getelementptr inbounds i16* %654, i64 %659
  %661 = load i32* %uc, align 4
  %662 = zext i32 %661 to i64
  %663 = getelementptr inbounds i16* %660, i64 %662
  store i16* %663, i16** %pix, align 8
  %664 = load i16** %pix, align 8
  %665 = getelementptr inbounds i16* %664, i64 0
  %666 = load i16* %665, align 2
  %667 = zext i16 %666 to i32
  %668 = sitofp i32 %667 to float
  %669 = load float* %fc, align 4
  %670 = fsub float 1.000000e+00, %669
  %671 = fmul float %668, %670
  %672 = load i16** %pix, align 8
  %673 = getelementptr inbounds i16* %672, i64 1
  %674 = load i16* %673, align 2
  %675 = zext i16 %674 to i32
  %676 = sitofp i32 %675 to float
  %677 = load float* %fc, align 4
  %678 = fmul float %676, %677
  %679 = fadd float %671, %678
  %680 = load float* %fr, align 4
  %681 = fsub float 1.000000e+00, %680
  %682 = fmul float %679, %681
  %683 = load i16* @iwidth, align 2
  %684 = zext i16 %683 to i64
  %685 = load i16** %pix, align 8
  %686 = getelementptr inbounds i16* %685, i64 %684
  %687 = load i16* %686, align 2
  %688 = zext i16 %687 to i32
  %689 = sitofp i32 %688 to float
  %690 = load float* %fc, align 4
  %691 = fsub float 1.000000e+00, %690
  %692 = fmul float %689, %691
  %693 = load i16* @iwidth, align 2
  %694 = zext i16 %693 to i32
  %695 = add nsw i32 %694, 1
  %696 = sext i32 %695 to i64
  %697 = load i16** %pix, align 8
  %698 = getelementptr inbounds i16* %697, i64 %696
  %699 = load i16* %698, align 2
  %700 = zext i16 %699 to i32
  %701 = sitofp i32 %700 to float
  %702 = load float* %fc, align 4
  %703 = fmul float %701, %702
  %704 = fadd float %692, %703
  %705 = load float* %fr, align 4
  %706 = fmul float %704, %705
  %707 = fadd float %682, %706
  %708 = fptoui float %707 to i16
  %709 = load i32* %c, align 4
  %710 = zext i32 %709 to i64
  %711 = load i32* %row, align 4
  %712 = load i16* @iwidth, align 2
  %713 = zext i16 %712 to i32
  %714 = mul i32 %711, %713
  %715 = load i32* %col, align 4
  %716 = add i32 %714, %715
  %717 = zext i32 %716 to i64
  %718 = load [4 x i16]** @image, align 8
  %719 = getelementptr inbounds [4 x i16]* %718, i64 %717
  %720 = getelementptr inbounds [4 x i16]* %719, i32 0, i64 %710
  store i16 %708, i16* %720, align 2
  br label %721

; <label>:721                                     ; preds = %649, %648
  %722 = load i32* %col, align 4
  %723 = add i32 %722, 1
  store i32 %723, i32* %col, align 4
  br label %618

; <label>:724                                     ; preds = %618
  br label %725

; <label>:725                                     ; preds = %724, %612
  %726 = load i32* %row, align 4
  %727 = add i32 %726, 1
  store i32 %727, i32* %row, align 4
  br label %582

; <label>:728                                     ; preds = %582
  %729 = load i16** %img, align 8
  %730 = bitcast i16* %729 to i8*
  call void @free(i8* %730) #4
  br label %731

; <label>:731                                     ; preds = %728, %552
  %732 = load i32* %c, align 4
  %733 = add i32 %732, 2
  store i32 %733, i32* %c, align 4
  br label %543

; <label>:734                                     ; preds = %543
  br label %735

; <label>:735                                     ; preds = %734, %533, %530
  ret void
}

; Function Attrs: nounwind uwtable
define void @pre_interpolate() #0 {
  %img = alloca [4 x i16]*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %c = alloca i32, align 4
  %1 = load i16* @shrink, align 2
  %2 = icmp ne i16 %1, 0
  br i1 %2, label %3, label %74

; <label>:3                                       ; preds = %0
  %4 = load i32* @half_size, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %3
  %7 = load i16* @iheight, align 2
  store i16 %7, i16* @height, align 2
  %8 = load i16* @iwidth, align 2
  store i16 %8, i16* @width, align 2
  br label %73

; <label>:9                                       ; preds = %3
  %10 = load i16* @height, align 2
  %11 = zext i16 %10 to i32
  %12 = load i16* @width, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nsw i32 %11, %13
  %15 = sext i32 %14 to i64
  %16 = call noalias i8* @calloc(i64 %15, i64 8) #4
  %17 = bitcast i8* %16 to [4 x i16]*
  store [4 x i16]* %17, [4 x i16]** %img, align 8
  %18 = load [4 x i16]** %img, align 8
  %19 = bitcast [4 x i16]* %18 to i8*
  call void @merror(i8* %19, i8* getelementptr inbounds ([18 x i8]* @.str75, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %20

; <label>:20                                      ; preds = %66, %9
  %21 = load i32* %row, align 4
  %22 = load i16* @height, align 2
  %23 = zext i16 %22 to i32
  %24 = icmp slt i32 %21, %23
  br i1 %24, label %25, label %69

; <label>:25                                      ; preds = %20
  store i32 0, i32* %col, align 4
  br label %26

; <label>:26                                      ; preds = %62, %25
  %27 = load i32* %col, align 4
  %28 = load i16* @width, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %31, label %65

; <label>:31                                      ; preds = %26
  %32 = load i32* %row, align 4
  %33 = load i32* %col, align 4
  %34 = call i32 @fc(i32 %32, i32 %33)
  store i32 %34, i32* %c, align 4
  %35 = load i32* %c, align 4
  %36 = sext i32 %35 to i64
  %37 = load i32* %row, align 4
  %38 = ashr i32 %37, 1
  %39 = load i16* @iwidth, align 2
  %40 = zext i16 %39 to i32
  %41 = mul nsw i32 %38, %40
  %42 = load i32* %col, align 4
  %43 = ashr i32 %42, 1
  %44 = add nsw i32 %41, %43
  %45 = sext i32 %44 to i64
  %46 = load [4 x i16]** @image, align 8
  %47 = getelementptr inbounds [4 x i16]* %46, i64 %45
  %48 = getelementptr inbounds [4 x i16]* %47, i32 0, i64 %36
  %49 = load i16* %48, align 2
  %50 = load i32* %c, align 4
  %51 = sext i32 %50 to i64
  %52 = load i32* %row, align 4
  %53 = load i16* @width, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nsw i32 %52, %54
  %56 = load i32* %col, align 4
  %57 = add nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  %59 = load [4 x i16]** %img, align 8
  %60 = getelementptr inbounds [4 x i16]* %59, i64 %58
  %61 = getelementptr inbounds [4 x i16]* %60, i32 0, i64 %51
  store i16 %49, i16* %61, align 2
  br label %62

; <label>:62                                      ; preds = %31
  %63 = load i32* %col, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %col, align 4
  br label %26

; <label>:65                                      ; preds = %26
  br label %66

; <label>:66                                      ; preds = %65
  %67 = load i32* %row, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %row, align 4
  br label %20

; <label>:69                                      ; preds = %20
  %70 = load [4 x i16]** @image, align 8
  %71 = bitcast [4 x i16]* %70 to i8*
  call void @free(i8* %71) #4
  %72 = load [4 x i16]** %img, align 8
  store [4 x i16]* %72, [4 x i16]** @image, align 8
  store i16 0, i16* @shrink, align 2
  br label %73

; <label>:73                                      ; preds = %69, %6
  br label %74

; <label>:74                                      ; preds = %73, %0
  %75 = load i32* @filters, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %148

; <label>:77                                      ; preds = %74
  %78 = load i32* @colors, align 4
  %79 = icmp eq i32 %78, 3
  br i1 %79, label %80, label %148

; <label>:80                                      ; preds = %77
  %81 = load i32* @four_color_rgb, align 4
  store i32 %81, i32* @mix_green, align 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %86

; <label>:83                                      ; preds = %80
  %84 = load i32* @colors, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* @colors, align 4
  br label %147

; <label>:86                                      ; preds = %80
  %87 = load i32* @filters, align 4
  %88 = lshr i32 %87, 4
  %89 = and i32 %88, 3
  %90 = lshr i32 %89, 1
  store i32 %90, i32* %row, align 4
  br label %91

; <label>:91                                      ; preds = %137, %86
  %92 = load i32* %row, align 4
  %93 = load i16* @height, align 2
  %94 = zext i16 %93 to i32
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %140

; <label>:96                                      ; preds = %91
  %97 = load i32* @filters, align 4
  %98 = load i32* %row, align 4
  %99 = shl i32 %98, 1
  %100 = and i32 %99, 14
  %101 = add nsw i32 %100, 1
  %102 = shl i32 %101, 1
  %103 = lshr i32 %97, %102
  %104 = and i32 %103, 3
  %105 = and i32 %104, 1
  store i32 %105, i32* %col, align 4
  br label %106

; <label>:106                                     ; preds = %133, %96
  %107 = load i32* %col, align 4
  %108 = load i16* @width, align 2
  %109 = zext i16 %108 to i32
  %110 = icmp slt i32 %107, %109
  br i1 %110, label %111, label %136

; <label>:111                                     ; preds = %106
  %112 = load i32* %row, align 4
  %113 = load i16* @width, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nsw i32 %112, %114
  %116 = load i32* %col, align 4
  %117 = add nsw i32 %115, %116
  %118 = sext i32 %117 to i64
  %119 = load [4 x i16]** @image, align 8
  %120 = getelementptr inbounds [4 x i16]* %119, i64 %118
  %121 = getelementptr inbounds [4 x i16]* %120, i32 0, i64 3
  %122 = load i16* %121, align 2
  %123 = load i32* %row, align 4
  %124 = load i16* @width, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nsw i32 %123, %125
  %127 = load i32* %col, align 4
  %128 = add nsw i32 %126, %127
  %129 = sext i32 %128 to i64
  %130 = load [4 x i16]** @image, align 8
  %131 = getelementptr inbounds [4 x i16]* %130, i64 %129
  %132 = getelementptr inbounds [4 x i16]* %131, i32 0, i64 1
  store i16 %122, i16* %132, align 2
  br label %133

; <label>:133                                     ; preds = %111
  %134 = load i32* %col, align 4
  %135 = add nsw i32 %134, 2
  store i32 %135, i32* %col, align 4
  br label %106

; <label>:136                                     ; preds = %106
  br label %137

; <label>:137                                     ; preds = %136
  %138 = load i32* %row, align 4
  %139 = add nsw i32 %138, 2
  store i32 %139, i32* %row, align 4
  br label %91

; <label>:140                                     ; preds = %91
  %141 = load i32* @filters, align 4
  %142 = and i32 %141, 1431655765
  %143 = shl i32 %142, 1
  %144 = xor i32 %143, -1
  %145 = load i32* @filters, align 4
  %146 = and i32 %145, %144
  store i32 %146, i32* @filters, align 4
  br label %147

; <label>:147                                     ; preds = %140, %83
  br label %148

; <label>:148                                     ; preds = %147, %77, %74
  %149 = load i32* @half_size, align 4
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %151, label %152

; <label>:151                                     ; preds = %148
  store i32 0, i32* @filters, align 4
  br label %152

; <label>:152                                     ; preds = %151, %148
  ret void
}

; Function Attrs: nounwind uwtable
define void @border_interpolate(i32 %border) #0 {
  %1 = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  %f = alloca i32, align 4
  %c = alloca i32, align 4
  %sum = alloca [8 x i32], align 16
  store i32 %border, i32* %1, align 4
  store i32 0, i32* %row, align 4
  br label %2

; <label>:2                                       ; preds = %149, %0
  %3 = load i32* %row, align 4
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %152

; <label>:7                                       ; preds = %2
  store i32 0, i32* %col, align 4
  br label %8

; <label>:8                                       ; preds = %145, %7
  %9 = load i32* %col, align 4
  %10 = load i16* @width, align 2
  %11 = zext i16 %10 to i32
  %12 = icmp ult i32 %9, %11
  br i1 %12, label %13, label %148

; <label>:13                                      ; preds = %8
  %14 = load i32* %col, align 4
  %15 = load i32* %1, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %33

; <label>:17                                      ; preds = %13
  %18 = load i32* %row, align 4
  %19 = load i32* %1, align 4
  %20 = icmp uge i32 %18, %19
  br i1 %20, label %21, label %33

; <label>:21                                      ; preds = %17
  %22 = load i32* %row, align 4
  %23 = load i16* @height, align 2
  %24 = zext i16 %23 to i32
  %25 = load i32* %1, align 4
  %26 = sub nsw i32 %24, %25
  %27 = icmp ult i32 %22, %26
  br i1 %27, label %28, label %33

; <label>:28                                      ; preds = %21
  %29 = load i16* @width, align 2
  %30 = zext i16 %29 to i32
  %31 = load i32* %1, align 4
  %32 = sub nsw i32 %30, %31
  store i32 %32, i32* %col, align 4
  br label %33

; <label>:33                                      ; preds = %28, %21, %17, %13
  %34 = bitcast [8 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 32, i32 16, i1 false)
  %35 = load i32* %row, align 4
  %36 = sub i32 %35, 1
  store i32 %36, i32* %y, align 4
  br label %37

; <label>:37                                      ; preds = %94, %33
  %38 = load i32* %y, align 4
  %39 = load i32* %row, align 4
  %40 = add i32 %39, 2
  %41 = icmp ne i32 %38, %40
  br i1 %41, label %42, label %97

; <label>:42                                      ; preds = %37
  %43 = load i32* %col, align 4
  %44 = sub i32 %43, 1
  store i32 %44, i32* %x, align 4
  br label %45

; <label>:45                                      ; preds = %90, %42
  %46 = load i32* %x, align 4
  %47 = load i32* %col, align 4
  %48 = add i32 %47, 2
  %49 = icmp ne i32 %46, %48
  br i1 %49, label %50, label %93

; <label>:50                                      ; preds = %45
  %51 = load i32* %y, align 4
  %52 = load i16* @height, align 2
  %53 = zext i16 %52 to i32
  %54 = icmp ult i32 %51, %53
  br i1 %54, label %55, label %89

; <label>:55                                      ; preds = %50
  %56 = load i32* %x, align 4
  %57 = load i16* @width, align 2
  %58 = zext i16 %57 to i32
  %59 = icmp ult i32 %56, %58
  br i1 %59, label %60, label %89

; <label>:60                                      ; preds = %55
  %61 = load i32* %y, align 4
  %62 = load i32* %x, align 4
  %63 = call i32 @fc(i32 %61, i32 %62)
  store i32 %63, i32* %f, align 4
  %64 = load i32* %f, align 4
  %65 = zext i32 %64 to i64
  %66 = load i32* %y, align 4
  %67 = load i16* @width, align 2
  %68 = zext i16 %67 to i32
  %69 = mul i32 %66, %68
  %70 = load i32* %x, align 4
  %71 = add i32 %69, %70
  %72 = zext i32 %71 to i64
  %73 = load [4 x i16]** @image, align 8
  %74 = getelementptr inbounds [4 x i16]* %73, i64 %72
  %75 = getelementptr inbounds [4 x i16]* %74, i32 0, i64 %65
  %76 = load i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = load i32* %f, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %79
  %81 = load i32* %80, align 4
  %82 = add i32 %81, %77
  store i32 %82, i32* %80, align 4
  %83 = load i32* %f, align 4
  %84 = add i32 %83, 4
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %85
  %87 = load i32* %86, align 4
  %88 = add i32 %87, 1
  store i32 %88, i32* %86, align 4
  br label %89

; <label>:89                                      ; preds = %60, %55, %50
  br label %90

; <label>:90                                      ; preds = %89
  %91 = load i32* %x, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %x, align 4
  br label %45

; <label>:93                                      ; preds = %45
  br label %94

; <label>:94                                      ; preds = %93
  %95 = load i32* %y, align 4
  %96 = add i32 %95, 1
  store i32 %96, i32* %y, align 4
  br label %37

; <label>:97                                      ; preds = %37
  %98 = load i32* %row, align 4
  %99 = load i32* %col, align 4
  %100 = call i32 @fc(i32 %98, i32 %99)
  store i32 %100, i32* %f, align 4
  store i32 0, i32* %c, align 4
  br label %101

; <label>:101                                     ; preds = %141, %97
  %102 = load i32* %c, align 4
  %103 = load i32* @colors, align 4
  %104 = icmp ult i32 %102, %103
  br i1 %104, label %105, label %144

; <label>:105                                     ; preds = %101
  %106 = load i32* %c, align 4
  %107 = load i32* %f, align 4
  %108 = icmp ne i32 %106, %107
  br i1 %108, label %109, label %140

; <label>:109                                     ; preds = %105
  %110 = load i32* %c, align 4
  %111 = add i32 %110, 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %112
  %114 = load i32* %113, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %140

; <label>:116                                     ; preds = %109
  %117 = load i32* %c, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %118
  %120 = load i32* %119, align 4
  %121 = load i32* %c, align 4
  %122 = add i32 %121, 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [8 x i32]* %sum, i32 0, i64 %123
  %125 = load i32* %124, align 4
  %126 = udiv i32 %120, %125
  %127 = trunc i32 %126 to i16
  %128 = load i32* %c, align 4
  %129 = zext i32 %128 to i64
  %130 = load i32* %row, align 4
  %131 = load i16* @width, align 2
  %132 = zext i16 %131 to i32
  %133 = mul i32 %130, %132
  %134 = load i32* %col, align 4
  %135 = add i32 %133, %134
  %136 = zext i32 %135 to i64
  %137 = load [4 x i16]** @image, align 8
  %138 = getelementptr inbounds [4 x i16]* %137, i64 %136
  %139 = getelementptr inbounds [4 x i16]* %138, i32 0, i64 %129
  store i16 %127, i16* %139, align 2
  br label %140

; <label>:140                                     ; preds = %116, %109, %105
  br label %141

; <label>:141                                     ; preds = %140
  %142 = load i32* %c, align 4
  %143 = add i32 %142, 1
  store i32 %143, i32* %c, align 4
  br label %101

; <label>:144                                     ; preds = %101
  br label %145

; <label>:145                                     ; preds = %144
  %146 = load i32* %col, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %col, align 4
  br label %8

; <label>:148                                     ; preds = %8
  br label %149

; <label>:149                                     ; preds = %148
  %150 = load i32* %row, align 4
  %151 = add i32 %150, 1
  store i32 %151, i32* %row, align 4
  br label %2

; <label>:152                                     ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define void @lin_interpolate() #0 {
  %code = alloca [16 x [16 x [32 x i32]]], align 16
  %ip = alloca i32*, align 8
  %sum = alloca [4 x i32], align 16
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %shift = alloca i32, align 4
  %color = alloca i32, align 4
  %pix = alloca i16*, align 8
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([27 x i8]* @.str76, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  call void @border_interpolate(i32 1)
  store i32 0, i32* %row, align 4
  br label %7

; <label>:7                                       ; preds = %111, %6
  %8 = load i32* %row, align 4
  %9 = icmp slt i32 %8, 16
  br i1 %9, label %10, label %114

; <label>:10                                      ; preds = %7
  store i32 0, i32* %col, align 4
  br label %11

; <label>:11                                      ; preds = %107, %10
  %12 = load i32* %col, align 4
  %13 = icmp slt i32 %12, 16
  br i1 %13, label %14, label %110

; <label>:14                                      ; preds = %11
  %15 = load i32* %col, align 4
  %16 = sext i32 %15 to i64
  %17 = load i32* %row, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [16 x [16 x [32 x i32]]]* %code, i32 0, i64 %18
  %20 = getelementptr inbounds [16 x [32 x i32]]* %19, i32 0, i64 %16
  %21 = getelementptr inbounds [32 x i32]* %20, i32 0, i32 0
  store i32* %21, i32** %ip, align 8
  %22 = bitcast [4 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i32 16, i1 false)
  store i32 -1, i32* %y, align 4
  br label %23

; <label>:23                                      ; preds = %77, %14
  %24 = load i32* %y, align 4
  %25 = icmp sle i32 %24, 1
  br i1 %25, label %26, label %80

; <label>:26                                      ; preds = %23
  store i32 -1, i32* %x, align 4
  br label %27

; <label>:27                                      ; preds = %73, %26
  %28 = load i32* %x, align 4
  %29 = icmp sle i32 %28, 1
  br i1 %29, label %30, label %76

; <label>:30                                      ; preds = %27
  %31 = load i32* %y, align 4
  %32 = icmp eq i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = load i32* %x, align 4
  %35 = icmp eq i32 %34, 0
  %36 = zext i1 %35 to i32
  %37 = add nsw i32 %33, %36
  store i32 %37, i32* %shift, align 4
  %38 = load i32* %shift, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %30
  br label %73

; <label>:41                                      ; preds = %30
  %42 = load i32* %row, align 4
  %43 = load i32* %y, align 4
  %44 = add nsw i32 %42, %43
  %45 = load i32* %col, align 4
  %46 = load i32* %x, align 4
  %47 = add nsw i32 %45, %46
  %48 = call i32 @fc(i32 %44, i32 %47)
  store i32 %48, i32* %color, align 4
  %49 = load i16* @width, align 2
  %50 = zext i16 %49 to i32
  %51 = load i32* %y, align 4
  %52 = mul nsw i32 %50, %51
  %53 = load i32* %x, align 4
  %54 = add nsw i32 %52, %53
  %55 = mul nsw i32 %54, 4
  %56 = load i32* %color, align 4
  %57 = add nsw i32 %55, %56
  %58 = load i32** %ip, align 8
  %59 = getelementptr inbounds i32* %58, i32 1
  store i32* %59, i32** %ip, align 8
  store i32 %57, i32* %58, align 4
  %60 = load i32* %shift, align 4
  %61 = load i32** %ip, align 8
  %62 = getelementptr inbounds i32* %61, i32 1
  store i32* %62, i32** %ip, align 8
  store i32 %60, i32* %61, align 4
  %63 = load i32* %color, align 4
  %64 = load i32** %ip, align 8
  %65 = getelementptr inbounds i32* %64, i32 1
  store i32* %65, i32** %ip, align 8
  store i32 %63, i32* %64, align 4
  %66 = load i32* %shift, align 4
  %67 = shl i32 1, %66
  %68 = load i32* %color, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %69
  %71 = load i32* %70, align 4
  %72 = add nsw i32 %71, %67
  store i32 %72, i32* %70, align 4
  br label %73

; <label>:73                                      ; preds = %41, %40
  %74 = load i32* %x, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %x, align 4
  br label %27

; <label>:76                                      ; preds = %27
  br label %77

; <label>:77                                      ; preds = %76
  %78 = load i32* %y, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %y, align 4
  br label %23

; <label>:80                                      ; preds = %23
  store i32 0, i32* %c, align 4
  br label %81

; <label>:81                                      ; preds = %103, %80
  %82 = load i32* %c, align 4
  %83 = load i32* @colors, align 4
  %84 = icmp slt i32 %82, %83
  br i1 %84, label %85, label %106

; <label>:85                                      ; preds = %81
  %86 = load i32* %c, align 4
  %87 = load i32* %row, align 4
  %88 = load i32* %col, align 4
  %89 = call i32 @fc(i32 %87, i32 %88)
  %90 = icmp ne i32 %86, %89
  br i1 %90, label %91, label %102

; <label>:91                                      ; preds = %85
  %92 = load i32* %c, align 4
  %93 = load i32** %ip, align 8
  %94 = getelementptr inbounds i32* %93, i32 1
  store i32* %94, i32** %ip, align 8
  store i32 %92, i32* %93, align 4
  %95 = load i32* %c, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %96
  %98 = load i32* %97, align 4
  %99 = sdiv i32 256, %98
  %100 = load i32** %ip, align 8
  %101 = getelementptr inbounds i32* %100, i32 1
  store i32* %101, i32** %ip, align 8
  store i32 %99, i32* %100, align 4
  br label %102

; <label>:102                                     ; preds = %91, %85
  br label %103

; <label>:103                                     ; preds = %102
  %104 = load i32* %c, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %c, align 4
  br label %81

; <label>:106                                     ; preds = %81
  br label %107

; <label>:107                                     ; preds = %106
  %108 = load i32* %col, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %col, align 4
  br label %11

; <label>:110                                     ; preds = %11
  br label %111

; <label>:111                                     ; preds = %110
  %112 = load i32* %row, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %row, align 4
  br label %7

; <label>:114                                     ; preds = %7
  store i32 1, i32* %row, align 4
  br label %115

; <label>:115                                     ; preds = %209, %114
  %116 = load i32* %row, align 4
  %117 = load i16* @height, align 2
  %118 = zext i16 %117 to i32
  %119 = sub nsw i32 %118, 1
  %120 = icmp slt i32 %116, %119
  br i1 %120, label %121, label %212

; <label>:121                                     ; preds = %115
  store i32 1, i32* %col, align 4
  br label %122

; <label>:122                                     ; preds = %205, %121
  %123 = load i32* %col, align 4
  %124 = load i16* @width, align 2
  %125 = zext i16 %124 to i32
  %126 = sub nsw i32 %125, 1
  %127 = icmp slt i32 %123, %126
  br i1 %127, label %128, label %208

; <label>:128                                     ; preds = %122
  %129 = load i32* %row, align 4
  %130 = load i16* @width, align 2
  %131 = zext i16 %130 to i32
  %132 = mul nsw i32 %129, %131
  %133 = load i32* %col, align 4
  %134 = add nsw i32 %132, %133
  %135 = sext i32 %134 to i64
  %136 = load [4 x i16]** @image, align 8
  %137 = getelementptr inbounds [4 x i16]* %136, i64 %135
  %138 = getelementptr inbounds [4 x i16]* %137, i32 0, i32 0
  store i16* %138, i16** %pix, align 8
  %139 = load i32* %col, align 4
  %140 = and i32 %139, 15
  %141 = sext i32 %140 to i64
  %142 = load i32* %row, align 4
  %143 = and i32 %142, 15
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [16 x [16 x [32 x i32]]]* %code, i32 0, i64 %144
  %146 = getelementptr inbounds [16 x [32 x i32]]* %145, i32 0, i64 %141
  %147 = getelementptr inbounds [32 x i32]* %146, i32 0, i32 0
  store i32* %147, i32** %ip, align 8
  %148 = bitcast [4 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %148, i8 0, i64 16, i32 16, i1 false)
  store i32 8, i32* %i, align 4
  br label %149

; <label>:149                                     ; preds = %173, %128
  %150 = load i32* %i, align 4
  %151 = add nsw i32 %150, -1
  store i32 %151, i32* %i, align 4
  %152 = icmp ne i32 %150, 0
  br i1 %152, label %153, label %176

; <label>:153                                     ; preds = %149
  %154 = load i32** %ip, align 8
  %155 = getelementptr inbounds i32* %154, i64 0
  %156 = load i32* %155, align 4
  %157 = sext i32 %156 to i64
  %158 = load i16** %pix, align 8
  %159 = getelementptr inbounds i16* %158, i64 %157
  %160 = load i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = load i32** %ip, align 8
  %163 = getelementptr inbounds i32* %162, i64 1
  %164 = load i32* %163, align 4
  %165 = shl i32 %161, %164
  %166 = load i32** %ip, align 8
  %167 = getelementptr inbounds i32* %166, i64 2
  %168 = load i32* %167, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %169
  %171 = load i32* %170, align 4
  %172 = add nsw i32 %171, %165
  store i32 %172, i32* %170, align 4
  br label %173

; <label>:173                                     ; preds = %153
  %174 = load i32** %ip, align 8
  %175 = getelementptr inbounds i32* %174, i64 3
  store i32* %175, i32** %ip, align 8
  br label %149

; <label>:176                                     ; preds = %149
  %177 = load i32* @colors, align 4
  store i32 %177, i32* %i, align 4
  br label %178

; <label>:178                                     ; preds = %201, %176
  %179 = load i32* %i, align 4
  %180 = add nsw i32 %179, -1
  store i32 %180, i32* %i, align 4
  %181 = icmp ne i32 %180, 0
  br i1 %181, label %182, label %204

; <label>:182                                     ; preds = %178
  %183 = load i32** %ip, align 8
  %184 = getelementptr inbounds i32* %183, i64 0
  %185 = load i32* %184, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %186
  %188 = load i32* %187, align 4
  %189 = load i32** %ip, align 8
  %190 = getelementptr inbounds i32* %189, i64 1
  %191 = load i32* %190, align 4
  %192 = mul nsw i32 %188, %191
  %193 = ashr i32 %192, 8
  %194 = trunc i32 %193 to i16
  %195 = load i32** %ip, align 8
  %196 = getelementptr inbounds i32* %195, i64 0
  %197 = load i32* %196, align 4
  %198 = sext i32 %197 to i64
  %199 = load i16** %pix, align 8
  %200 = getelementptr inbounds i16* %199, i64 %198
  store i16 %194, i16* %200, align 2
  br label %201

; <label>:201                                     ; preds = %182
  %202 = load i32** %ip, align 8
  %203 = getelementptr inbounds i32* %202, i64 2
  store i32* %203, i32** %ip, align 8
  br label %178

; <label>:204                                     ; preds = %178
  br label %205

; <label>:205                                     ; preds = %204
  %206 = load i32* %col, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %col, align 4
  br label %122

; <label>:208                                     ; preds = %122
  br label %209

; <label>:209                                     ; preds = %208
  %210 = load i32* %row, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %row, align 4
  br label %115

; <label>:212                                     ; preds = %115
  ret void
}

; Function Attrs: nounwind uwtable
define void @vng_interpolate() #0 {
  %brow = alloca [5 x [4 x i16]*], align 16
  %pix = alloca i16*, align 8
  %prow = alloca i32, align 4
  %pcol = alloca i32, align 4
  %ip = alloca i32*, align 8
  %code = alloca [16 x [16 x i32*]], align 16
  %gval = alloca [8 x i32], align 16
  %gmin = alloca i32, align 4
  %gmax = alloca i32, align 4
  %sum = alloca [4 x i32], align 16
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %x1 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %y2 = alloca i32, align 4
  %t = alloca i32, align 4
  %weight = alloca i32, align 4
  %grads = alloca i32, align 4
  %color = alloca i32, align 4
  %diag = alloca i32, align 4
  %g = alloca i32, align 4
  %diff = alloca i32, align 4
  %thold = alloca i32, align 4
  %num = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 7, i32* %prow, align 4
  store i32 1, i32* %pcol, align 4
  call void @lin_interpolate()
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8]* @.str77, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = load i32* @filters, align 4
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  store i32 15, i32* %pcol, align 4
  store i32 15, i32* %prow, align 4
  br label %10

; <label>:10                                      ; preds = %9, %6
  %11 = load i32* %prow, align 4
  %12 = add nsw i32 %11, 1
  %13 = load i32* %pcol, align 4
  %14 = add nsw i32 %13, 1
  %15 = mul nsw i32 %12, %14
  %16 = sext i32 %15 to i64
  %17 = call noalias i8* @calloc(i64 %16, i64 1280) #4
  %18 = bitcast i8* %17 to i32*
  store i32* %18, i32** %ip, align 8
  %19 = load i32** %ip, align 8
  %20 = bitcast i32* %19 to i8*
  call void @merror(i8* %20, i8* getelementptr inbounds ([18 x i8]* @.str78, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %21

; <label>:21                                      ; preds = %235, %10
  %22 = load i32* %row, align 4
  %23 = load i32* %prow, align 4
  %24 = icmp sle i32 %22, %23
  br i1 %24, label %25, label %238

; <label>:25                                      ; preds = %21
  store i32 0, i32* %col, align 4
  br label %26

; <label>:26                                      ; preds = %231, %25
  %27 = load i32* %col, align 4
  %28 = load i32* %pcol, align 4
  %29 = icmp sle i32 %27, %28
  br i1 %29, label %30, label %234

; <label>:30                                      ; preds = %26
  %31 = load i32** %ip, align 8
  %32 = load i32* %col, align 4
  %33 = sext i32 %32 to i64
  %34 = load i32* %row, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [16 x [16 x i32*]]* %code, i32 0, i64 %35
  %37 = getelementptr inbounds [16 x i32*]* %36, i32 0, i64 %33
  store i32* %31, i32** %37, align 8
  store i8* getelementptr inbounds ([384 x i8]* @vng_interpolate.terms, i32 0, i32 0), i8** @vng_interpolate.cp, align 8
  store i32 0, i32* %t, align 4
  br label %38

; <label>:38                                      ; preds = %160, %30
  %39 = load i32* %t, align 4
  %40 = icmp slt i32 %39, 64
  br i1 %40, label %41, label %163

; <label>:41                                      ; preds = %38
  %42 = load i8** @vng_interpolate.cp, align 8
  %43 = getelementptr inbounds i8* %42, i32 1
  store i8* %43, i8** @vng_interpolate.cp, align 8
  %44 = load i8* %42, align 1
  %45 = sext i8 %44 to i32
  store i32 %45, i32* %y1, align 4
  %46 = load i8** @vng_interpolate.cp, align 8
  %47 = getelementptr inbounds i8* %46, i32 1
  store i8* %47, i8** @vng_interpolate.cp, align 8
  %48 = load i8* %46, align 1
  %49 = sext i8 %48 to i32
  store i32 %49, i32* %x1, align 4
  %50 = load i8** @vng_interpolate.cp, align 8
  %51 = getelementptr inbounds i8* %50, i32 1
  store i8* %51, i8** @vng_interpolate.cp, align 8
  %52 = load i8* %50, align 1
  %53 = sext i8 %52 to i32
  store i32 %53, i32* %y2, align 4
  %54 = load i8** @vng_interpolate.cp, align 8
  %55 = getelementptr inbounds i8* %54, i32 1
  store i8* %55, i8** @vng_interpolate.cp, align 8
  %56 = load i8* %54, align 1
  %57 = sext i8 %56 to i32
  store i32 %57, i32* %x2, align 4
  %58 = load i8** @vng_interpolate.cp, align 8
  %59 = getelementptr inbounds i8* %58, i32 1
  store i8* %59, i8** @vng_interpolate.cp, align 8
  %60 = load i8* %58, align 1
  %61 = sext i8 %60 to i32
  store i32 %61, i32* %weight, align 4
  %62 = load i8** @vng_interpolate.cp, align 8
  %63 = getelementptr inbounds i8* %62, i32 1
  store i8* %63, i8** @vng_interpolate.cp, align 8
  %64 = load i8* %62, align 1
  %65 = sext i8 %64 to i32
  store i32 %65, i32* %grads, align 4
  %66 = load i32* %row, align 4
  %67 = load i32* %y1, align 4
  %68 = add nsw i32 %66, %67
  %69 = load i32* %col, align 4
  %70 = load i32* %x1, align 4
  %71 = add nsw i32 %69, %70
  %72 = call i32 @fc(i32 %68, i32 %71)
  store i32 %72, i32* %color, align 4
  %73 = load i32* %row, align 4
  %74 = load i32* %y2, align 4
  %75 = add nsw i32 %73, %74
  %76 = load i32* %col, align 4
  %77 = load i32* %x2, align 4
  %78 = add nsw i32 %76, %77
  %79 = call i32 @fc(i32 %75, i32 %78)
  %80 = load i32* %color, align 4
  %81 = icmp ne i32 %79, %80
  br i1 %81, label %82, label %83

; <label>:82                                      ; preds = %41
  br label %160

; <label>:83                                      ; preds = %41
  %84 = load i32* %row, align 4
  %85 = load i32* %col, align 4
  %86 = add nsw i32 %85, 1
  %87 = call i32 @fc(i32 %84, i32 %86)
  %88 = load i32* %color, align 4
  %89 = icmp eq i32 %87, %88
  br i1 %89, label %90, label %97

; <label>:90                                      ; preds = %83
  %91 = load i32* %row, align 4
  %92 = add nsw i32 %91, 1
  %93 = load i32* %col, align 4
  %94 = call i32 @fc(i32 %92, i32 %93)
  %95 = load i32* %color, align 4
  %96 = icmp eq i32 %94, %95
  br label %97

; <label>:97                                      ; preds = %90, %83
  %98 = phi i1 [ false, %83 ], [ %96, %90 ]
  %99 = select i1 %98, i32 2, i32 1
  store i32 %99, i32* %diag, align 4
  %100 = load i32* %y1, align 4
  %101 = load i32* %y2, align 4
  %102 = sub nsw i32 %100, %101
  %103 = call i32 @abs(i32 %102) #9
  %104 = load i32* %diag, align 4
  %105 = icmp eq i32 %103, %104
  br i1 %105, label %106, label %114

; <label>:106                                     ; preds = %97
  %107 = load i32* %x1, align 4
  %108 = load i32* %x2, align 4
  %109 = sub nsw i32 %107, %108
  %110 = call i32 @abs(i32 %109) #9
  %111 = load i32* %diag, align 4
  %112 = icmp eq i32 %110, %111
  br i1 %112, label %113, label %114

; <label>:113                                     ; preds = %106
  br label %160

; <label>:114                                     ; preds = %106, %97
  %115 = load i32* %y1, align 4
  %116 = load i16* @width, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nsw i32 %115, %117
  %119 = load i32* %x1, align 4
  %120 = add nsw i32 %118, %119
  %121 = mul nsw i32 %120, 4
  %122 = load i32* %color, align 4
  %123 = add nsw i32 %121, %122
  %124 = load i32** %ip, align 8
  %125 = getelementptr inbounds i32* %124, i32 1
  store i32* %125, i32** %ip, align 8
  store i32 %123, i32* %124, align 4
  %126 = load i32* %y2, align 4
  %127 = load i16* @width, align 2
  %128 = zext i16 %127 to i32
  %129 = mul nsw i32 %126, %128
  %130 = load i32* %x2, align 4
  %131 = add nsw i32 %129, %130
  %132 = mul nsw i32 %131, 4
  %133 = load i32* %color, align 4
  %134 = add nsw i32 %132, %133
  %135 = load i32** %ip, align 8
  %136 = getelementptr inbounds i32* %135, i32 1
  store i32* %136, i32** %ip, align 8
  store i32 %134, i32* %135, align 4
  %137 = load i32* %weight, align 4
  %138 = load i32** %ip, align 8
  %139 = getelementptr inbounds i32* %138, i32 1
  store i32* %139, i32** %ip, align 8
  store i32 %137, i32* %138, align 4
  store i32 0, i32* %g, align 4
  br label %140

; <label>:140                                     ; preds = %154, %114
  %141 = load i32* %g, align 4
  %142 = icmp slt i32 %141, 8
  br i1 %142, label %143, label %157

; <label>:143                                     ; preds = %140
  %144 = load i32* %grads, align 4
  %145 = load i32* %g, align 4
  %146 = shl i32 1, %145
  %147 = and i32 %144, %146
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %153

; <label>:149                                     ; preds = %143
  %150 = load i32* %g, align 4
  %151 = load i32** %ip, align 8
  %152 = getelementptr inbounds i32* %151, i32 1
  store i32* %152, i32** %ip, align 8
  store i32 %150, i32* %151, align 4
  br label %153

; <label>:153                                     ; preds = %149, %143
  br label %154

; <label>:154                                     ; preds = %153
  %155 = load i32* %g, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %g, align 4
  br label %140

; <label>:157                                     ; preds = %140
  %158 = load i32** %ip, align 8
  %159 = getelementptr inbounds i32* %158, i32 1
  store i32* %159, i32** %ip, align 8
  store i32 -1, i32* %158, align 4
  br label %160

; <label>:160                                     ; preds = %157, %113, %82
  %161 = load i32* %t, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %t, align 4
  br label %38

; <label>:163                                     ; preds = %38
  %164 = load i32** %ip, align 8
  %165 = getelementptr inbounds i32* %164, i32 1
  store i32* %165, i32** %ip, align 8
  store i32 2147483647, i32* %164, align 4
  store i8* getelementptr inbounds ([16 x i8]* @vng_interpolate.chood, i32 0, i32 0), i8** @vng_interpolate.cp, align 8
  store i32 0, i32* %g, align 4
  br label %166

; <label>:166                                     ; preds = %227, %163
  %167 = load i32* %g, align 4
  %168 = icmp slt i32 %167, 8
  br i1 %168, label %169, label %230

; <label>:169                                     ; preds = %166
  %170 = load i8** @vng_interpolate.cp, align 8
  %171 = getelementptr inbounds i8* %170, i32 1
  store i8* %171, i8** @vng_interpolate.cp, align 8
  %172 = load i8* %170, align 1
  %173 = sext i8 %172 to i32
  store i32 %173, i32* %y, align 4
  %174 = load i8** @vng_interpolate.cp, align 8
  %175 = getelementptr inbounds i8* %174, i32 1
  store i8* %175, i8** @vng_interpolate.cp, align 8
  %176 = load i8* %174, align 1
  %177 = sext i8 %176 to i32
  store i32 %177, i32* %x, align 4
  %178 = load i32* %y, align 4
  %179 = load i16* @width, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nsw i32 %178, %180
  %182 = load i32* %x, align 4
  %183 = add nsw i32 %181, %182
  %184 = mul nsw i32 %183, 4
  %185 = load i32** %ip, align 8
  %186 = getelementptr inbounds i32* %185, i32 1
  store i32* %186, i32** %ip, align 8
  store i32 %184, i32* %185, align 4
  %187 = load i32* %row, align 4
  %188 = load i32* %col, align 4
  %189 = call i32 @fc(i32 %187, i32 %188)
  store i32 %189, i32* %color, align 4
  %190 = load i32* %row, align 4
  %191 = load i32* %y, align 4
  %192 = add nsw i32 %190, %191
  %193 = load i32* %col, align 4
  %194 = load i32* %x, align 4
  %195 = add nsw i32 %193, %194
  %196 = call i32 @fc(i32 %192, i32 %195)
  %197 = load i32* %color, align 4
  %198 = icmp ne i32 %196, %197
  br i1 %198, label %199, label %223

; <label>:199                                     ; preds = %169
  %200 = load i32* %row, align 4
  %201 = load i32* %y, align 4
  %202 = mul nsw i32 %201, 2
  %203 = add nsw i32 %200, %202
  %204 = load i32* %col, align 4
  %205 = load i32* %x, align 4
  %206 = mul nsw i32 %205, 2
  %207 = add nsw i32 %204, %206
  %208 = call i32 @fc(i32 %203, i32 %207)
  %209 = load i32* %color, align 4
  %210 = icmp eq i32 %208, %209
  br i1 %210, label %211, label %223

; <label>:211                                     ; preds = %199
  %212 = load i32* %y, align 4
  %213 = load i16* @width, align 2
  %214 = zext i16 %213 to i32
  %215 = mul nsw i32 %212, %214
  %216 = load i32* %x, align 4
  %217 = add nsw i32 %215, %216
  %218 = mul nsw i32 %217, 8
  %219 = load i32* %color, align 4
  %220 = add nsw i32 %218, %219
  %221 = load i32** %ip, align 8
  %222 = getelementptr inbounds i32* %221, i32 1
  store i32* %222, i32** %ip, align 8
  store i32 %220, i32* %221, align 4
  br label %226

; <label>:223                                     ; preds = %199, %169
  %224 = load i32** %ip, align 8
  %225 = getelementptr inbounds i32* %224, i32 1
  store i32* %225, i32** %ip, align 8
  store i32 0, i32* %224, align 4
  br label %226

; <label>:226                                     ; preds = %223, %211
  br label %227

; <label>:227                                     ; preds = %226
  %228 = load i32* %g, align 4
  %229 = add nsw i32 %228, 1
  store i32 %229, i32* %g, align 4
  br label %166

; <label>:230                                     ; preds = %166
  br label %231

; <label>:231                                     ; preds = %230
  %232 = load i32* %col, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %col, align 4
  br label %26

; <label>:234                                     ; preds = %26
  br label %235

; <label>:235                                     ; preds = %234
  %236 = load i32* %row, align 4
  %237 = add nsw i32 %236, 1
  store i32 %237, i32* %row, align 4
  br label %21

; <label>:238                                     ; preds = %21
  %239 = load i16* @width, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nsw i32 %240, 3
  %242 = sext i32 %241 to i64
  %243 = call noalias i8* @calloc(i64 %242, i64 8) #4
  %244 = bitcast i8* %243 to [4 x i16]*
  %245 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  store [4 x i16]* %244, [4 x i16]** %245, align 8
  %246 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  %247 = load [4 x i16]** %246, align 8
  %248 = bitcast [4 x i16]* %247 to i8*
  call void @merror(i8* %248, i8* getelementptr inbounds ([18 x i8]* @.str78, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %249

; <label>:249                                     ; preds = %264, %238
  %250 = load i32* %row, align 4
  %251 = icmp slt i32 %250, 3
  br i1 %251, label %252, label %267

; <label>:252                                     ; preds = %249
  %253 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  %254 = load [4 x i16]** %253, align 8
  %255 = load i32* %row, align 4
  %256 = load i16* @width, align 2
  %257 = zext i16 %256 to i32
  %258 = mul nsw i32 %255, %257
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [4 x i16]* %254, i64 %259
  %261 = load i32* %row, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 %262
  store [4 x i16]* %260, [4 x i16]** %263, align 8
  br label %264

; <label>:264                                     ; preds = %252
  %265 = load i32* %row, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %row, align 4
  br label %249

; <label>:267                                     ; preds = %249
  store i32 2, i32* %row, align 4
  br label %268

; <label>:268                                     ; preds = %636, %267
  %269 = load i32* %row, align 4
  %270 = load i16* @height, align 2
  %271 = zext i16 %270 to i32
  %272 = sub nsw i32 %271, 2
  %273 = icmp slt i32 %269, %272
  br i1 %273, label %274, label %639

; <label>:274                                     ; preds = %268
  store i32 2, i32* %col, align 4
  br label %275

; <label>:275                                     ; preds = %592, %274
  %276 = load i32* %col, align 4
  %277 = load i16* @width, align 2
  %278 = zext i16 %277 to i32
  %279 = sub nsw i32 %278, 2
  %280 = icmp slt i32 %276, %279
  br i1 %280, label %281, label %595

; <label>:281                                     ; preds = %275
  %282 = load i32* %row, align 4
  %283 = load i16* @width, align 2
  %284 = zext i16 %283 to i32
  %285 = mul nsw i32 %282, %284
  %286 = load i32* %col, align 4
  %287 = add nsw i32 %285, %286
  %288 = sext i32 %287 to i64
  %289 = load [4 x i16]** @image, align 8
  %290 = getelementptr inbounds [4 x i16]* %289, i64 %288
  %291 = getelementptr inbounds [4 x i16]* %290, i32 0, i32 0
  store i16* %291, i16** %pix, align 8
  %292 = load i32* %col, align 4
  %293 = load i32* %pcol, align 4
  %294 = and i32 %292, %293
  %295 = sext i32 %294 to i64
  %296 = load i32* %row, align 4
  %297 = load i32* %prow, align 4
  %298 = and i32 %296, %297
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [16 x [16 x i32*]]* %code, i32 0, i64 %299
  %301 = getelementptr inbounds [16 x i32*]* %300, i32 0, i64 %295
  %302 = load i32** %301, align 8
  store i32* %302, i32** %ip, align 8
  %303 = bitcast [8 x i32]* %gval to i8*
  call void @llvm.memset.p0i8.i64(i8* %303, i8 0, i64 32, i32 16, i1 false)
  br label %304

; <label>:304                                     ; preds = %397, %377, %281
  %305 = load i32** %ip, align 8
  %306 = getelementptr inbounds i32* %305, i64 0
  %307 = load i32* %306, align 4
  store i32 %307, i32* %g, align 4
  %308 = icmp ne i32 %307, 2147483647
  br i1 %308, label %309, label %398

; <label>:309                                     ; preds = %304
  %310 = load i32* %g, align 4
  %311 = sext i32 %310 to i64
  %312 = load i16** %pix, align 8
  %313 = getelementptr inbounds i16* %312, i64 %311
  %314 = load i16* %313, align 2
  %315 = zext i16 %314 to i32
  %316 = load i32** %ip, align 8
  %317 = getelementptr inbounds i32* %316, i64 1
  %318 = load i32* %317, align 4
  %319 = sext i32 %318 to i64
  %320 = load i16** %pix, align 8
  %321 = getelementptr inbounds i16* %320, i64 %319
  %322 = load i16* %321, align 2
  %323 = zext i16 %322 to i32
  %324 = sub nsw i32 %315, %323
  %325 = load i32* %g, align 4
  %326 = sext i32 %325 to i64
  %327 = load i16** %pix, align 8
  %328 = getelementptr inbounds i16* %327, i64 %326
  %329 = load i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = load i32** %ip, align 8
  %332 = getelementptr inbounds i32* %331, i64 1
  %333 = load i32* %332, align 4
  %334 = sext i32 %333 to i64
  %335 = load i16** %pix, align 8
  %336 = getelementptr inbounds i16* %335, i64 %334
  %337 = load i16* %336, align 2
  %338 = zext i16 %337 to i32
  %339 = sub nsw i32 %330, %338
  %340 = ashr i32 %339, 31
  %341 = xor i32 %324, %340
  %342 = load i32* %g, align 4
  %343 = sext i32 %342 to i64
  %344 = load i16** %pix, align 8
  %345 = getelementptr inbounds i16* %344, i64 %343
  %346 = load i16* %345, align 2
  %347 = zext i16 %346 to i32
  %348 = load i32** %ip, align 8
  %349 = getelementptr inbounds i32* %348, i64 1
  %350 = load i32* %349, align 4
  %351 = sext i32 %350 to i64
  %352 = load i16** %pix, align 8
  %353 = getelementptr inbounds i16* %352, i64 %351
  %354 = load i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = sub nsw i32 %347, %355
  %357 = ashr i32 %356, 31
  %358 = sub nsw i32 %341, %357
  %359 = load i32** %ip, align 8
  %360 = getelementptr inbounds i32* %359, i64 2
  %361 = load i32* %360, align 4
  %362 = shl i32 %358, %361
  store i32 %362, i32* %diff, align 4
  %363 = load i32* %diff, align 4
  %364 = load i32** %ip, align 8
  %365 = getelementptr inbounds i32* %364, i64 3
  %366 = load i32* %365, align 4
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %367
  %369 = load i32* %368, align 4
  %370 = add nsw i32 %369, %363
  store i32 %370, i32* %368, align 4
  %371 = load i32** %ip, align 8
  %372 = getelementptr inbounds i32* %371, i64 5
  store i32* %372, i32** %ip, align 8
  %373 = load i32** %ip, align 8
  %374 = getelementptr inbounds i32* %373, i64 -1
  %375 = load i32* %374, align 4
  store i32 %375, i32* %g, align 4
  %376 = icmp eq i32 %375, -1
  br i1 %376, label %377, label %378

; <label>:377                                     ; preds = %309
  br label %304

; <label>:378                                     ; preds = %309
  %379 = load i32* %diff, align 4
  %380 = load i32* %g, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %381
  %383 = load i32* %382, align 4
  %384 = add nsw i32 %383, %379
  store i32 %384, i32* %382, align 4
  br label %385

; <label>:385                                     ; preds = %390, %378
  %386 = load i32** %ip, align 8
  %387 = getelementptr inbounds i32* %386, i32 1
  store i32* %387, i32** %ip, align 8
  %388 = load i32* %386, align 4
  store i32 %388, i32* %g, align 4
  %389 = icmp ne i32 %388, -1
  br i1 %389, label %390, label %397

; <label>:390                                     ; preds = %385
  %391 = load i32* %diff, align 4
  %392 = load i32* %g, align 4
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %393
  %395 = load i32* %394, align 4
  %396 = add nsw i32 %395, %391
  store i32 %396, i32* %394, align 4
  br label %385

; <label>:397                                     ; preds = %385
  br label %304

; <label>:398                                     ; preds = %304
  %399 = load i32** %ip, align 8
  %400 = getelementptr inbounds i32* %399, i32 1
  store i32* %400, i32** %ip, align 8
  %401 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 0
  %402 = load i32* %401, align 4
  store i32 %402, i32* %gmax, align 4
  store i32 %402, i32* %gmin, align 4
  store i32 1, i32* %g, align 4
  br label %403

; <label>:403                                     ; preds = %431, %398
  %404 = load i32* %g, align 4
  %405 = icmp slt i32 %404, 8
  br i1 %405, label %406, label %434

; <label>:406                                     ; preds = %403
  %407 = load i32* %gmin, align 4
  %408 = load i32* %g, align 4
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %409
  %411 = load i32* %410, align 4
  %412 = icmp sgt i32 %407, %411
  br i1 %412, label %413, label %418

; <label>:413                                     ; preds = %406
  %414 = load i32* %g, align 4
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %415
  %417 = load i32* %416, align 4
  store i32 %417, i32* %gmin, align 4
  br label %418

; <label>:418                                     ; preds = %413, %406
  %419 = load i32* %gmax, align 4
  %420 = load i32* %g, align 4
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %421
  %423 = load i32* %422, align 4
  %424 = icmp slt i32 %419, %423
  br i1 %424, label %425, label %430

; <label>:425                                     ; preds = %418
  %426 = load i32* %g, align 4
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %427
  %429 = load i32* %428, align 4
  store i32 %429, i32* %gmax, align 4
  br label %430

; <label>:430                                     ; preds = %425, %418
  br label %431

; <label>:431                                     ; preds = %430
  %432 = load i32* %g, align 4
  %433 = add nsw i32 %432, 1
  store i32 %433, i32* %g, align 4
  br label %403

; <label>:434                                     ; preds = %403
  %435 = load i32* %gmax, align 4
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %446

; <label>:437                                     ; preds = %434
  %438 = load i32* %col, align 4
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 2
  %441 = load [4 x i16]** %440, align 8
  %442 = getelementptr inbounds [4 x i16]* %441, i64 %439
  %443 = bitcast [4 x i16]* %442 to i8*
  %444 = load i16** %pix, align 8
  %445 = bitcast i16* %444 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %443, i8* %445, i64 8, i32 2, i1 false)
  br label %592

; <label>:446                                     ; preds = %434
  %447 = load i32* %gmin, align 4
  %448 = load i32* %gmax, align 4
  %449 = ashr i32 %448, 1
  %450 = add nsw i32 %447, %449
  store i32 %450, i32* %thold, align 4
  %451 = bitcast [4 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %451, i8 0, i64 16, i32 16, i1 false)
  %452 = load i32* %row, align 4
  %453 = load i32* %col, align 4
  %454 = call i32 @fc(i32 %452, i32 %453)
  store i32 %454, i32* %color, align 4
  store i32 0, i32* %g, align 4
  store i32 0, i32* %num, align 4
  br label %455

; <label>:455                                     ; preds = %525, %446
  %456 = load i32* %g, align 4
  %457 = icmp slt i32 %456, 8
  br i1 %457, label %458, label %530

; <label>:458                                     ; preds = %455
  %459 = load i32* %g, align 4
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds [8 x i32]* %gval, i32 0, i64 %460
  %462 = load i32* %461, align 4
  %463 = load i32* %thold, align 4
  %464 = icmp sle i32 %462, %463
  br i1 %464, label %465, label %524

; <label>:465                                     ; preds = %458
  store i32 0, i32* %c, align 4
  br label %466

; <label>:466                                     ; preds = %518, %465
  %467 = load i32* %c, align 4
  %468 = load i32* @colors, align 4
  %469 = icmp slt i32 %467, %468
  br i1 %469, label %470, label %521

; <label>:470                                     ; preds = %466
  %471 = load i32* %c, align 4
  %472 = load i32* %color, align 4
  %473 = icmp eq i32 %471, %472
  br i1 %473, label %474, label %501

; <label>:474                                     ; preds = %470
  %475 = load i32** %ip, align 8
  %476 = getelementptr inbounds i32* %475, i64 1
  %477 = load i32* %476, align 4
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %501

; <label>:479                                     ; preds = %474
  %480 = load i32* %c, align 4
  %481 = sext i32 %480 to i64
  %482 = load i16** %pix, align 8
  %483 = getelementptr inbounds i16* %482, i64 %481
  %484 = load i16* %483, align 2
  %485 = zext i16 %484 to i32
  %486 = load i32** %ip, align 8
  %487 = getelementptr inbounds i32* %486, i64 1
  %488 = load i32* %487, align 4
  %489 = sext i32 %488 to i64
  %490 = load i16** %pix, align 8
  %491 = getelementptr inbounds i16* %490, i64 %489
  %492 = load i16* %491, align 2
  %493 = zext i16 %492 to i32
  %494 = add nsw i32 %485, %493
  %495 = ashr i32 %494, 1
  %496 = load i32* %c, align 4
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %497
  %499 = load i32* %498, align 4
  %500 = add nsw i32 %499, %495
  store i32 %500, i32* %498, align 4
  br label %517

; <label>:501                                     ; preds = %474, %470
  %502 = load i32** %ip, align 8
  %503 = getelementptr inbounds i32* %502, i64 0
  %504 = load i32* %503, align 4
  %505 = load i32* %c, align 4
  %506 = add nsw i32 %504, %505
  %507 = sext i32 %506 to i64
  %508 = load i16** %pix, align 8
  %509 = getelementptr inbounds i16* %508, i64 %507
  %510 = load i16* %509, align 2
  %511 = zext i16 %510 to i32
  %512 = load i32* %c, align 4
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %513
  %515 = load i32* %514, align 4
  %516 = add nsw i32 %515, %511
  store i32 %516, i32* %514, align 4
  br label %517

; <label>:517                                     ; preds = %501, %479
  br label %518

; <label>:518                                     ; preds = %517
  %519 = load i32* %c, align 4
  %520 = add nsw i32 %519, 1
  store i32 %520, i32* %c, align 4
  br label %466

; <label>:521                                     ; preds = %466
  %522 = load i32* %num, align 4
  %523 = add nsw i32 %522, 1
  store i32 %523, i32* %num, align 4
  br label %524

; <label>:524                                     ; preds = %521, %458
  br label %525

; <label>:525                                     ; preds = %524
  %526 = load i32* %g, align 4
  %527 = add nsw i32 %526, 1
  store i32 %527, i32* %g, align 4
  %528 = load i32** %ip, align 8
  %529 = getelementptr inbounds i32* %528, i64 2
  store i32* %529, i32** %ip, align 8
  br label %455

; <label>:530                                     ; preds = %455
  store i32 0, i32* %c, align 4
  br label %531

; <label>:531                                     ; preds = %588, %530
  %532 = load i32* %c, align 4
  %533 = load i32* @colors, align 4
  %534 = icmp slt i32 %532, %533
  br i1 %534, label %535, label %591

; <label>:535                                     ; preds = %531
  %536 = load i32* %color, align 4
  %537 = sext i32 %536 to i64
  %538 = load i16** %pix, align 8
  %539 = getelementptr inbounds i16* %538, i64 %537
  %540 = load i16* %539, align 2
  %541 = zext i16 %540 to i32
  store i32 %541, i32* %t, align 4
  %542 = load i32* %c, align 4
  %543 = load i32* %color, align 4
  %544 = icmp ne i32 %542, %543
  br i1 %544, label %545, label %559

; <label>:545                                     ; preds = %535
  %546 = load i32* %c, align 4
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %547
  %549 = load i32* %548, align 4
  %550 = load i32* %color, align 4
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds [4 x i32]* %sum, i32 0, i64 %551
  %553 = load i32* %552, align 4
  %554 = sub nsw i32 %549, %553
  %555 = load i32* %num, align 4
  %556 = sdiv i32 %554, %555
  %557 = load i32* %t, align 4
  %558 = add nsw i32 %557, %556
  store i32 %558, i32* %t, align 4
  br label %559

; <label>:559                                     ; preds = %545, %535
  %560 = load i32* %t, align 4
  %561 = icmp slt i32 %560, 65535
  br i1 %561, label %562, label %564

; <label>:562                                     ; preds = %559
  %563 = load i32* %t, align 4
  br label %565

; <label>:564                                     ; preds = %559
  br label %565

; <label>:565                                     ; preds = %564, %562
  %566 = phi i32 [ %563, %562 ], [ 65535, %564 ]
  %567 = icmp sgt i32 0, %566
  br i1 %567, label %568, label %569

; <label>:568                                     ; preds = %565
  br label %577

; <label>:569                                     ; preds = %565
  %570 = load i32* %t, align 4
  %571 = icmp slt i32 %570, 65535
  br i1 %571, label %572, label %574

; <label>:572                                     ; preds = %569
  %573 = load i32* %t, align 4
  br label %575

; <label>:574                                     ; preds = %569
  br label %575

; <label>:575                                     ; preds = %574, %572
  %576 = phi i32 [ %573, %572 ], [ 65535, %574 ]
  br label %577

; <label>:577                                     ; preds = %575, %568
  %578 = phi i32 [ 0, %568 ], [ %576, %575 ]
  %579 = trunc i32 %578 to i16
  %580 = load i32* %c, align 4
  %581 = sext i32 %580 to i64
  %582 = load i32* %col, align 4
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 2
  %585 = load [4 x i16]** %584, align 8
  %586 = getelementptr inbounds [4 x i16]* %585, i64 %583
  %587 = getelementptr inbounds [4 x i16]* %586, i32 0, i64 %581
  store i16 %579, i16* %587, align 2
  br label %588

; <label>:588                                     ; preds = %577
  %589 = load i32* %c, align 4
  %590 = add nsw i32 %589, 1
  store i32 %590, i32* %c, align 4
  br label %531

; <label>:591                                     ; preds = %531
  br label %592

; <label>:592                                     ; preds = %591, %437
  %593 = load i32* %col, align 4
  %594 = add nsw i32 %593, 1
  store i32 %594, i32* %col, align 4
  br label %275

; <label>:595                                     ; preds = %275
  %596 = load i32* %row, align 4
  %597 = icmp sgt i32 %596, 3
  br i1 %597, label %598, label %618

; <label>:598                                     ; preds = %595
  %599 = load i32* %row, align 4
  %600 = sub nsw i32 %599, 2
  %601 = load i16* @width, align 2
  %602 = zext i16 %601 to i32
  %603 = mul nsw i32 %600, %602
  %604 = add nsw i32 %603, 2
  %605 = sext i32 %604 to i64
  %606 = load [4 x i16]** @image, align 8
  %607 = getelementptr inbounds [4 x i16]* %606, i64 %605
  %608 = bitcast [4 x i16]* %607 to i8*
  %609 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 0
  %610 = load [4 x i16]** %609, align 8
  %611 = getelementptr inbounds [4 x i16]* %610, i64 2
  %612 = bitcast [4 x i16]* %611 to i8*
  %613 = load i16* @width, align 2
  %614 = zext i16 %613 to i32
  %615 = sub nsw i32 %614, 4
  %616 = sext i32 %615 to i64
  %617 = mul i64 %616, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %608, i8* %612, i64 %617, i32 2, i1 false)
  br label %618

; <label>:618                                     ; preds = %598, %595
  store i32 0, i32* %g, align 4
  br label %619

; <label>:619                                     ; preds = %632, %618
  %620 = load i32* %g, align 4
  %621 = icmp slt i32 %620, 4
  br i1 %621, label %622, label %635

; <label>:622                                     ; preds = %619
  %623 = load i32* %g, align 4
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 %624
  %626 = load [4 x i16]** %625, align 8
  %627 = load i32* %g, align 4
  %628 = sub nsw i32 %627, 1
  %629 = and i32 %628, 3
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 %630
  store [4 x i16]* %626, [4 x i16]** %631, align 8
  br label %632

; <label>:632                                     ; preds = %622
  %633 = load i32* %g, align 4
  %634 = add nsw i32 %633, 1
  store i32 %634, i32* %g, align 4
  br label %619

; <label>:635                                     ; preds = %619
  br label %636

; <label>:636                                     ; preds = %635
  %637 = load i32* %row, align 4
  %638 = add nsw i32 %637, 1
  store i32 %638, i32* %row, align 4
  br label %268

; <label>:639                                     ; preds = %268
  %640 = load i32* %row, align 4
  %641 = sub nsw i32 %640, 2
  %642 = load i16* @width, align 2
  %643 = zext i16 %642 to i32
  %644 = mul nsw i32 %641, %643
  %645 = add nsw i32 %644, 2
  %646 = sext i32 %645 to i64
  %647 = load [4 x i16]** @image, align 8
  %648 = getelementptr inbounds [4 x i16]* %647, i64 %646
  %649 = bitcast [4 x i16]* %648 to i8*
  %650 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 0
  %651 = load [4 x i16]** %650, align 8
  %652 = getelementptr inbounds [4 x i16]* %651, i64 2
  %653 = bitcast [4 x i16]* %652 to i8*
  %654 = load i16* @width, align 2
  %655 = zext i16 %654 to i32
  %656 = sub nsw i32 %655, 4
  %657 = sext i32 %656 to i64
  %658 = mul i64 %657, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %649, i8* %653, i64 %658, i32 2, i1 false)
  %659 = load i32* %row, align 4
  %660 = sub nsw i32 %659, 1
  %661 = load i16* @width, align 2
  %662 = zext i16 %661 to i32
  %663 = mul nsw i32 %660, %662
  %664 = add nsw i32 %663, 2
  %665 = sext i32 %664 to i64
  %666 = load [4 x i16]** @image, align 8
  %667 = getelementptr inbounds [4 x i16]* %666, i64 %665
  %668 = bitcast [4 x i16]* %667 to i8*
  %669 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 1
  %670 = load [4 x i16]** %669, align 8
  %671 = getelementptr inbounds [4 x i16]* %670, i64 2
  %672 = bitcast [4 x i16]* %671 to i8*
  %673 = load i16* @width, align 2
  %674 = zext i16 %673 to i32
  %675 = sub nsw i32 %674, 4
  %676 = sext i32 %675 to i64
  %677 = mul i64 %676, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %668, i8* %672, i64 %677, i32 2, i1 false)
  %678 = getelementptr inbounds [5 x [4 x i16]*]* %brow, i32 0, i64 4
  %679 = load [4 x i16]** %678, align 8
  %680 = bitcast [4 x i16]* %679 to i8*
  call void @free(i8* %680) #4
  %681 = getelementptr inbounds [16 x [16 x i32*]]* %code, i32 0, i64 0
  %682 = getelementptr inbounds [16 x i32*]* %681, i32 0, i64 0
  %683 = load i32** %682, align 8
  %684 = bitcast i32* %683 to i8*
  call void @free(i8* %684) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @ppg_interpolate() #0 {
  %dir = alloca [5 x i32], align 16
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %diff = alloca [2 x i32], align 4
  %guess = alloca [2 x i32], align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %i = alloca i32, align 4
  %pix = alloca [4 x i16]*, align 8
  %1 = getelementptr inbounds [5 x i32]* %dir, i64 0, i64 0
  store i32 1, i32* %1
  %2 = getelementptr inbounds i32* %1, i64 1
  %3 = load i16* @width, align 2
  %4 = zext i16 %3 to i32
  store i32 %4, i32* %2
  %5 = getelementptr inbounds i32* %2, i64 1
  store i32 -1, i32* %5
  %6 = getelementptr inbounds i32* %5, i64 1
  %7 = load i16* @width, align 2
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 0, %8
  store i32 %9, i32* %6
  %10 = getelementptr inbounds i32* %6, i64 1
  store i32 1, i32* %10
  call void @border_interpolate(i32 3)
  %11 = load i32* @verbose, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %0
  %14 = load %struct._IO_FILE** @stderr, align 8
  %15 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([22 x i8]* @.str79, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %13, %0
  store i32 3, i32* %row, align 4
  br label %17

; <label>:17                                      ; preds = %603, %16
  %18 = load i32* %row, align 4
  %19 = load i16* @height, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, 3
  %22 = icmp slt i32 %18, %21
  br i1 %22, label %23, label %606

; <label>:23                                      ; preds = %17
  %24 = load i32* @filters, align 4
  %25 = load i32* %row, align 4
  %26 = shl i32 %25, 1
  %27 = and i32 %26, 14
  %28 = add nsw i32 %27, 1
  %29 = shl i32 %28, 1
  %30 = lshr i32 %24, %29
  %31 = and i32 %30, 3
  %32 = and i32 %31, 1
  %33 = add i32 3, %32
  store i32 %33, i32* %col, align 4
  %34 = load i32* @filters, align 4
  %35 = load i32* %row, align 4
  %36 = shl i32 %35, 1
  %37 = and i32 %36, 14
  %38 = load i32* %col, align 4
  %39 = and i32 %38, 1
  %40 = add nsw i32 %37, %39
  %41 = shl i32 %40, 1
  %42 = lshr i32 %34, %41
  %43 = and i32 %42, 3
  store i32 %43, i32* %c, align 4
  br label %44

; <label>:44                                      ; preds = %599, %23
  %45 = load i32* %col, align 4
  %46 = load i16* @width, align 2
  %47 = zext i16 %46 to i32
  %48 = sub nsw i32 %47, 3
  %49 = icmp slt i32 %45, %48
  br i1 %49, label %50, label %602

; <label>:50                                      ; preds = %44
  %51 = load [4 x i16]** @image, align 8
  %52 = load i32* %row, align 4
  %53 = load i16* @width, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nsw i32 %52, %54
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [4 x i16]* %51, i64 %56
  %58 = load i32* %col, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [4 x i16]* %57, i64 %59
  store [4 x i16]* %60, [4 x i16]** %pix, align 8
  store i32 0, i32* %i, align 4
  br label %61

; <label>:61                                      ; preds = %402, %50
  %62 = load i32* %i, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %63
  %65 = load i32* %64, align 4
  store i32 %65, i32* %d, align 4
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %405

; <label>:67                                      ; preds = %61
  %68 = load i32* %d, align 4
  %69 = sub nsw i32 0, %68
  %70 = sext i32 %69 to i64
  %71 = load [4 x i16]** %pix, align 8
  %72 = getelementptr inbounds [4 x i16]* %71, i64 %70
  %73 = getelementptr inbounds [4 x i16]* %72, i32 0, i64 1
  %74 = load i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = load i32* %c, align 4
  %77 = sext i32 %76 to i64
  %78 = load [4 x i16]** %pix, align 8
  %79 = getelementptr inbounds [4 x i16]* %78, i64 0
  %80 = getelementptr inbounds [4 x i16]* %79, i32 0, i64 %77
  %81 = load i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nsw i32 %75, %82
  %84 = load i32* %d, align 4
  %85 = sext i32 %84 to i64
  %86 = load [4 x i16]** %pix, align 8
  %87 = getelementptr inbounds [4 x i16]* %86, i64 %85
  %88 = getelementptr inbounds [4 x i16]* %87, i32 0, i64 1
  %89 = load i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = add nsw i32 %83, %90
  %92 = mul nsw i32 %91, 2
  %93 = load i32* %c, align 4
  %94 = sext i32 %93 to i64
  %95 = load i32* %d, align 4
  %96 = mul nsw i32 -2, %95
  %97 = sext i32 %96 to i64
  %98 = load [4 x i16]** %pix, align 8
  %99 = getelementptr inbounds [4 x i16]* %98, i64 %97
  %100 = getelementptr inbounds [4 x i16]* %99, i32 0, i64 %94
  %101 = load i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = sub nsw i32 %92, %102
  %104 = load i32* %c, align 4
  %105 = sext i32 %104 to i64
  %106 = load i32* %d, align 4
  %107 = mul nsw i32 2, %106
  %108 = sext i32 %107 to i64
  %109 = load [4 x i16]** %pix, align 8
  %110 = getelementptr inbounds [4 x i16]* %109, i64 %108
  %111 = getelementptr inbounds [4 x i16]* %110, i32 0, i64 %105
  %112 = load i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = sub nsw i32 %103, %113
  %115 = load i32* %i, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %116
  store i32 %114, i32* %117, align 4
  %118 = load i32* %c, align 4
  %119 = sext i32 %118 to i64
  %120 = load i32* %d, align 4
  %121 = mul nsw i32 -2, %120
  %122 = sext i32 %121 to i64
  %123 = load [4 x i16]** %pix, align 8
  %124 = getelementptr inbounds [4 x i16]* %123, i64 %122
  %125 = getelementptr inbounds [4 x i16]* %124, i32 0, i64 %119
  %126 = load i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = load i32* %c, align 4
  %129 = sext i32 %128 to i64
  %130 = load [4 x i16]** %pix, align 8
  %131 = getelementptr inbounds [4 x i16]* %130, i64 0
  %132 = getelementptr inbounds [4 x i16]* %131, i32 0, i64 %129
  %133 = load i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = sub nsw i32 %127, %134
  %136 = load i32* %c, align 4
  %137 = sext i32 %136 to i64
  %138 = load i32* %d, align 4
  %139 = mul nsw i32 -2, %138
  %140 = sext i32 %139 to i64
  %141 = load [4 x i16]** %pix, align 8
  %142 = getelementptr inbounds [4 x i16]* %141, i64 %140
  %143 = getelementptr inbounds [4 x i16]* %142, i32 0, i64 %137
  %144 = load i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = load i32* %c, align 4
  %147 = sext i32 %146 to i64
  %148 = load [4 x i16]** %pix, align 8
  %149 = getelementptr inbounds [4 x i16]* %148, i64 0
  %150 = getelementptr inbounds [4 x i16]* %149, i32 0, i64 %147
  %151 = load i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = sub nsw i32 %145, %152
  %154 = ashr i32 %153, 31
  %155 = xor i32 %135, %154
  %156 = load i32* %c, align 4
  %157 = sext i32 %156 to i64
  %158 = load i32* %d, align 4
  %159 = mul nsw i32 -2, %158
  %160 = sext i32 %159 to i64
  %161 = load [4 x i16]** %pix, align 8
  %162 = getelementptr inbounds [4 x i16]* %161, i64 %160
  %163 = getelementptr inbounds [4 x i16]* %162, i32 0, i64 %157
  %164 = load i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = load i32* %c, align 4
  %167 = sext i32 %166 to i64
  %168 = load [4 x i16]** %pix, align 8
  %169 = getelementptr inbounds [4 x i16]* %168, i64 0
  %170 = getelementptr inbounds [4 x i16]* %169, i32 0, i64 %167
  %171 = load i16* %170, align 2
  %172 = zext i16 %171 to i32
  %173 = sub nsw i32 %165, %172
  %174 = ashr i32 %173, 31
  %175 = sub nsw i32 %155, %174
  %176 = load i32* %c, align 4
  %177 = sext i32 %176 to i64
  %178 = load i32* %d, align 4
  %179 = mul nsw i32 2, %178
  %180 = sext i32 %179 to i64
  %181 = load [4 x i16]** %pix, align 8
  %182 = getelementptr inbounds [4 x i16]* %181, i64 %180
  %183 = getelementptr inbounds [4 x i16]* %182, i32 0, i64 %177
  %184 = load i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = load i32* %c, align 4
  %187 = sext i32 %186 to i64
  %188 = load [4 x i16]** %pix, align 8
  %189 = getelementptr inbounds [4 x i16]* %188, i64 0
  %190 = getelementptr inbounds [4 x i16]* %189, i32 0, i64 %187
  %191 = load i16* %190, align 2
  %192 = zext i16 %191 to i32
  %193 = sub nsw i32 %185, %192
  %194 = load i32* %c, align 4
  %195 = sext i32 %194 to i64
  %196 = load i32* %d, align 4
  %197 = mul nsw i32 2, %196
  %198 = sext i32 %197 to i64
  %199 = load [4 x i16]** %pix, align 8
  %200 = getelementptr inbounds [4 x i16]* %199, i64 %198
  %201 = getelementptr inbounds [4 x i16]* %200, i32 0, i64 %195
  %202 = load i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = load i32* %c, align 4
  %205 = sext i32 %204 to i64
  %206 = load [4 x i16]** %pix, align 8
  %207 = getelementptr inbounds [4 x i16]* %206, i64 0
  %208 = getelementptr inbounds [4 x i16]* %207, i32 0, i64 %205
  %209 = load i16* %208, align 2
  %210 = zext i16 %209 to i32
  %211 = sub nsw i32 %203, %210
  %212 = ashr i32 %211, 31
  %213 = xor i32 %193, %212
  %214 = load i32* %c, align 4
  %215 = sext i32 %214 to i64
  %216 = load i32* %d, align 4
  %217 = mul nsw i32 2, %216
  %218 = sext i32 %217 to i64
  %219 = load [4 x i16]** %pix, align 8
  %220 = getelementptr inbounds [4 x i16]* %219, i64 %218
  %221 = getelementptr inbounds [4 x i16]* %220, i32 0, i64 %215
  %222 = load i16* %221, align 2
  %223 = zext i16 %222 to i32
  %224 = load i32* %c, align 4
  %225 = sext i32 %224 to i64
  %226 = load [4 x i16]** %pix, align 8
  %227 = getelementptr inbounds [4 x i16]* %226, i64 0
  %228 = getelementptr inbounds [4 x i16]* %227, i32 0, i64 %225
  %229 = load i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = sub nsw i32 %223, %230
  %232 = ashr i32 %231, 31
  %233 = sub nsw i32 %213, %232
  %234 = add nsw i32 %175, %233
  %235 = load i32* %d, align 4
  %236 = sub nsw i32 0, %235
  %237 = sext i32 %236 to i64
  %238 = load [4 x i16]** %pix, align 8
  %239 = getelementptr inbounds [4 x i16]* %238, i64 %237
  %240 = getelementptr inbounds [4 x i16]* %239, i32 0, i64 1
  %241 = load i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = load i32* %d, align 4
  %244 = sext i32 %243 to i64
  %245 = load [4 x i16]** %pix, align 8
  %246 = getelementptr inbounds [4 x i16]* %245, i64 %244
  %247 = getelementptr inbounds [4 x i16]* %246, i32 0, i64 1
  %248 = load i16* %247, align 2
  %249 = zext i16 %248 to i32
  %250 = sub nsw i32 %242, %249
  %251 = load i32* %d, align 4
  %252 = sub nsw i32 0, %251
  %253 = sext i32 %252 to i64
  %254 = load [4 x i16]** %pix, align 8
  %255 = getelementptr inbounds [4 x i16]* %254, i64 %253
  %256 = getelementptr inbounds [4 x i16]* %255, i32 0, i64 1
  %257 = load i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = load i32* %d, align 4
  %260 = sext i32 %259 to i64
  %261 = load [4 x i16]** %pix, align 8
  %262 = getelementptr inbounds [4 x i16]* %261, i64 %260
  %263 = getelementptr inbounds [4 x i16]* %262, i32 0, i64 1
  %264 = load i16* %263, align 2
  %265 = zext i16 %264 to i32
  %266 = sub nsw i32 %258, %265
  %267 = ashr i32 %266, 31
  %268 = xor i32 %250, %267
  %269 = load i32* %d, align 4
  %270 = sub nsw i32 0, %269
  %271 = sext i32 %270 to i64
  %272 = load [4 x i16]** %pix, align 8
  %273 = getelementptr inbounds [4 x i16]* %272, i64 %271
  %274 = getelementptr inbounds [4 x i16]* %273, i32 0, i64 1
  %275 = load i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = load i32* %d, align 4
  %278 = sext i32 %277 to i64
  %279 = load [4 x i16]** %pix, align 8
  %280 = getelementptr inbounds [4 x i16]* %279, i64 %278
  %281 = getelementptr inbounds [4 x i16]* %280, i32 0, i64 1
  %282 = load i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = sub nsw i32 %276, %283
  %285 = ashr i32 %284, 31
  %286 = sub nsw i32 %268, %285
  %287 = add nsw i32 %234, %286
  %288 = mul nsw i32 %287, 3
  %289 = load i32* %d, align 4
  %290 = mul nsw i32 3, %289
  %291 = sext i32 %290 to i64
  %292 = load [4 x i16]** %pix, align 8
  %293 = getelementptr inbounds [4 x i16]* %292, i64 %291
  %294 = getelementptr inbounds [4 x i16]* %293, i32 0, i64 1
  %295 = load i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = load i32* %d, align 4
  %298 = sext i32 %297 to i64
  %299 = load [4 x i16]** %pix, align 8
  %300 = getelementptr inbounds [4 x i16]* %299, i64 %298
  %301 = getelementptr inbounds [4 x i16]* %300, i32 0, i64 1
  %302 = load i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = sub nsw i32 %296, %303
  %305 = load i32* %d, align 4
  %306 = mul nsw i32 3, %305
  %307 = sext i32 %306 to i64
  %308 = load [4 x i16]** %pix, align 8
  %309 = getelementptr inbounds [4 x i16]* %308, i64 %307
  %310 = getelementptr inbounds [4 x i16]* %309, i32 0, i64 1
  %311 = load i16* %310, align 2
  %312 = zext i16 %311 to i32
  %313 = load i32* %d, align 4
  %314 = sext i32 %313 to i64
  %315 = load [4 x i16]** %pix, align 8
  %316 = getelementptr inbounds [4 x i16]* %315, i64 %314
  %317 = getelementptr inbounds [4 x i16]* %316, i32 0, i64 1
  %318 = load i16* %317, align 2
  %319 = zext i16 %318 to i32
  %320 = sub nsw i32 %312, %319
  %321 = ashr i32 %320, 31
  %322 = xor i32 %304, %321
  %323 = load i32* %d, align 4
  %324 = mul nsw i32 3, %323
  %325 = sext i32 %324 to i64
  %326 = load [4 x i16]** %pix, align 8
  %327 = getelementptr inbounds [4 x i16]* %326, i64 %325
  %328 = getelementptr inbounds [4 x i16]* %327, i32 0, i64 1
  %329 = load i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = load i32* %d, align 4
  %332 = sext i32 %331 to i64
  %333 = load [4 x i16]** %pix, align 8
  %334 = getelementptr inbounds [4 x i16]* %333, i64 %332
  %335 = getelementptr inbounds [4 x i16]* %334, i32 0, i64 1
  %336 = load i16* %335, align 2
  %337 = zext i16 %336 to i32
  %338 = sub nsw i32 %330, %337
  %339 = ashr i32 %338, 31
  %340 = sub nsw i32 %322, %339
  %341 = load i32* %d, align 4
  %342 = mul nsw i32 -3, %341
  %343 = sext i32 %342 to i64
  %344 = load [4 x i16]** %pix, align 8
  %345 = getelementptr inbounds [4 x i16]* %344, i64 %343
  %346 = getelementptr inbounds [4 x i16]* %345, i32 0, i64 1
  %347 = load i16* %346, align 2
  %348 = zext i16 %347 to i32
  %349 = load i32* %d, align 4
  %350 = sub nsw i32 0, %349
  %351 = sext i32 %350 to i64
  %352 = load [4 x i16]** %pix, align 8
  %353 = getelementptr inbounds [4 x i16]* %352, i64 %351
  %354 = getelementptr inbounds [4 x i16]* %353, i32 0, i64 1
  %355 = load i16* %354, align 2
  %356 = zext i16 %355 to i32
  %357 = sub nsw i32 %348, %356
  %358 = load i32* %d, align 4
  %359 = mul nsw i32 -3, %358
  %360 = sext i32 %359 to i64
  %361 = load [4 x i16]** %pix, align 8
  %362 = getelementptr inbounds [4 x i16]* %361, i64 %360
  %363 = getelementptr inbounds [4 x i16]* %362, i32 0, i64 1
  %364 = load i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = load i32* %d, align 4
  %367 = sub nsw i32 0, %366
  %368 = sext i32 %367 to i64
  %369 = load [4 x i16]** %pix, align 8
  %370 = getelementptr inbounds [4 x i16]* %369, i64 %368
  %371 = getelementptr inbounds [4 x i16]* %370, i32 0, i64 1
  %372 = load i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = sub nsw i32 %365, %373
  %375 = ashr i32 %374, 31
  %376 = xor i32 %357, %375
  %377 = load i32* %d, align 4
  %378 = mul nsw i32 -3, %377
  %379 = sext i32 %378 to i64
  %380 = load [4 x i16]** %pix, align 8
  %381 = getelementptr inbounds [4 x i16]* %380, i64 %379
  %382 = getelementptr inbounds [4 x i16]* %381, i32 0, i64 1
  %383 = load i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = load i32* %d, align 4
  %386 = sub nsw i32 0, %385
  %387 = sext i32 %386 to i64
  %388 = load [4 x i16]** %pix, align 8
  %389 = getelementptr inbounds [4 x i16]* %388, i64 %387
  %390 = getelementptr inbounds [4 x i16]* %389, i32 0, i64 1
  %391 = load i16* %390, align 2
  %392 = zext i16 %391 to i32
  %393 = sub nsw i32 %384, %392
  %394 = ashr i32 %393, 31
  %395 = sub nsw i32 %376, %394
  %396 = add nsw i32 %340, %395
  %397 = mul nsw i32 %396, 2
  %398 = add nsw i32 %288, %397
  %399 = load i32* %i, align 4
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 %400
  store i32 %398, i32* %401, align 4
  br label %402

; <label>:402                                     ; preds = %67
  %403 = load i32* %i, align 4
  %404 = add nsw i32 %403, 1
  store i32 %404, i32* %i, align 4
  br label %61

; <label>:405                                     ; preds = %61
  %406 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %407 = load i32* %406, align 4
  %408 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %409 = load i32* %408, align 4
  %410 = icmp sgt i32 %407, %409
  %411 = zext i1 %410 to i32
  store i32 %411, i32* %i, align 4
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %412
  %414 = load i32* %413, align 4
  store i32 %414, i32* %d, align 4
  %415 = load i32* %d, align 4
  %416 = sext i32 %415 to i64
  %417 = load [4 x i16]** %pix, align 8
  %418 = getelementptr inbounds [4 x i16]* %417, i64 %416
  %419 = getelementptr inbounds [4 x i16]* %418, i32 0, i64 1
  %420 = load i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = load i32* %d, align 4
  %423 = sub nsw i32 0, %422
  %424 = sext i32 %423 to i64
  %425 = load [4 x i16]** %pix, align 8
  %426 = getelementptr inbounds [4 x i16]* %425, i64 %424
  %427 = getelementptr inbounds [4 x i16]* %426, i32 0, i64 1
  %428 = load i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = icmp slt i32 %421, %429
  br i1 %430, label %431, label %513

; <label>:431                                     ; preds = %405
  %432 = load i32* %d, align 4
  %433 = sext i32 %432 to i64
  %434 = load [4 x i16]** %pix, align 8
  %435 = getelementptr inbounds [4 x i16]* %434, i64 %433
  %436 = getelementptr inbounds [4 x i16]* %435, i32 0, i64 1
  %437 = load i16* %436, align 2
  %438 = zext i16 %437 to i32
  %439 = load i32* %i, align 4
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %440
  %442 = load i32* %441, align 4
  %443 = ashr i32 %442, 2
  %444 = load i32* %d, align 4
  %445 = sub nsw i32 0, %444
  %446 = sext i32 %445 to i64
  %447 = load [4 x i16]** %pix, align 8
  %448 = getelementptr inbounds [4 x i16]* %447, i64 %446
  %449 = getelementptr inbounds [4 x i16]* %448, i32 0, i64 1
  %450 = load i16* %449, align 2
  %451 = zext i16 %450 to i32
  %452 = icmp slt i32 %443, %451
  br i1 %452, label %453, label %459

; <label>:453                                     ; preds = %431
  %454 = load i32* %i, align 4
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %455
  %457 = load i32* %456, align 4
  %458 = ashr i32 %457, 2
  br label %468

; <label>:459                                     ; preds = %431
  %460 = load i32* %d, align 4
  %461 = sub nsw i32 0, %460
  %462 = sext i32 %461 to i64
  %463 = load [4 x i16]** %pix, align 8
  %464 = getelementptr inbounds [4 x i16]* %463, i64 %462
  %465 = getelementptr inbounds [4 x i16]* %464, i32 0, i64 1
  %466 = load i16* %465, align 2
  %467 = zext i16 %466 to i32
  br label %468

; <label>:468                                     ; preds = %459, %453
  %469 = phi i32 [ %458, %453 ], [ %467, %459 ]
  %470 = icmp sgt i32 %438, %469
  br i1 %470, label %471, label %479

; <label>:471                                     ; preds = %468
  %472 = load i32* %d, align 4
  %473 = sext i32 %472 to i64
  %474 = load [4 x i16]** %pix, align 8
  %475 = getelementptr inbounds [4 x i16]* %474, i64 %473
  %476 = getelementptr inbounds [4 x i16]* %475, i32 0, i64 1
  %477 = load i16* %476, align 2
  %478 = zext i16 %477 to i32
  br label %511

; <label>:479                                     ; preds = %468
  %480 = load i32* %i, align 4
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %481
  %483 = load i32* %482, align 4
  %484 = ashr i32 %483, 2
  %485 = load i32* %d, align 4
  %486 = sub nsw i32 0, %485
  %487 = sext i32 %486 to i64
  %488 = load [4 x i16]** %pix, align 8
  %489 = getelementptr inbounds [4 x i16]* %488, i64 %487
  %490 = getelementptr inbounds [4 x i16]* %489, i32 0, i64 1
  %491 = load i16* %490, align 2
  %492 = zext i16 %491 to i32
  %493 = icmp slt i32 %484, %492
  br i1 %493, label %494, label %500

; <label>:494                                     ; preds = %479
  %495 = load i32* %i, align 4
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %496
  %498 = load i32* %497, align 4
  %499 = ashr i32 %498, 2
  br label %509

; <label>:500                                     ; preds = %479
  %501 = load i32* %d, align 4
  %502 = sub nsw i32 0, %501
  %503 = sext i32 %502 to i64
  %504 = load [4 x i16]** %pix, align 8
  %505 = getelementptr inbounds [4 x i16]* %504, i64 %503
  %506 = getelementptr inbounds [4 x i16]* %505, i32 0, i64 1
  %507 = load i16* %506, align 2
  %508 = zext i16 %507 to i32
  br label %509

; <label>:509                                     ; preds = %500, %494
  %510 = phi i32 [ %499, %494 ], [ %508, %500 ]
  br label %511

; <label>:511                                     ; preds = %509, %471
  %512 = phi i32 [ %478, %471 ], [ %510, %509 ]
  br label %593

; <label>:513                                     ; preds = %405
  %514 = load i32* %d, align 4
  %515 = sub nsw i32 0, %514
  %516 = sext i32 %515 to i64
  %517 = load [4 x i16]** %pix, align 8
  %518 = getelementptr inbounds [4 x i16]* %517, i64 %516
  %519 = getelementptr inbounds [4 x i16]* %518, i32 0, i64 1
  %520 = load i16* %519, align 2
  %521 = zext i16 %520 to i32
  %522 = load i32* %i, align 4
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %523
  %525 = load i32* %524, align 4
  %526 = ashr i32 %525, 2
  %527 = load i32* %d, align 4
  %528 = sext i32 %527 to i64
  %529 = load [4 x i16]** %pix, align 8
  %530 = getelementptr inbounds [4 x i16]* %529, i64 %528
  %531 = getelementptr inbounds [4 x i16]* %530, i32 0, i64 1
  %532 = load i16* %531, align 2
  %533 = zext i16 %532 to i32
  %534 = icmp slt i32 %526, %533
  br i1 %534, label %535, label %541

; <label>:535                                     ; preds = %513
  %536 = load i32* %i, align 4
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %537
  %539 = load i32* %538, align 4
  %540 = ashr i32 %539, 2
  br label %549

; <label>:541                                     ; preds = %513
  %542 = load i32* %d, align 4
  %543 = sext i32 %542 to i64
  %544 = load [4 x i16]** %pix, align 8
  %545 = getelementptr inbounds [4 x i16]* %544, i64 %543
  %546 = getelementptr inbounds [4 x i16]* %545, i32 0, i64 1
  %547 = load i16* %546, align 2
  %548 = zext i16 %547 to i32
  br label %549

; <label>:549                                     ; preds = %541, %535
  %550 = phi i32 [ %540, %535 ], [ %548, %541 ]
  %551 = icmp sgt i32 %521, %550
  br i1 %551, label %552, label %561

; <label>:552                                     ; preds = %549
  %553 = load i32* %d, align 4
  %554 = sub nsw i32 0, %553
  %555 = sext i32 %554 to i64
  %556 = load [4 x i16]** %pix, align 8
  %557 = getelementptr inbounds [4 x i16]* %556, i64 %555
  %558 = getelementptr inbounds [4 x i16]* %557, i32 0, i64 1
  %559 = load i16* %558, align 2
  %560 = zext i16 %559 to i32
  br label %591

; <label>:561                                     ; preds = %549
  %562 = load i32* %i, align 4
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %563
  %565 = load i32* %564, align 4
  %566 = ashr i32 %565, 2
  %567 = load i32* %d, align 4
  %568 = sext i32 %567 to i64
  %569 = load [4 x i16]** %pix, align 8
  %570 = getelementptr inbounds [4 x i16]* %569, i64 %568
  %571 = getelementptr inbounds [4 x i16]* %570, i32 0, i64 1
  %572 = load i16* %571, align 2
  %573 = zext i16 %572 to i32
  %574 = icmp slt i32 %566, %573
  br i1 %574, label %575, label %581

; <label>:575                                     ; preds = %561
  %576 = load i32* %i, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %577
  %579 = load i32* %578, align 4
  %580 = ashr i32 %579, 2
  br label %589

; <label>:581                                     ; preds = %561
  %582 = load i32* %d, align 4
  %583 = sext i32 %582 to i64
  %584 = load [4 x i16]** %pix, align 8
  %585 = getelementptr inbounds [4 x i16]* %584, i64 %583
  %586 = getelementptr inbounds [4 x i16]* %585, i32 0, i64 1
  %587 = load i16* %586, align 2
  %588 = zext i16 %587 to i32
  br label %589

; <label>:589                                     ; preds = %581, %575
  %590 = phi i32 [ %580, %575 ], [ %588, %581 ]
  br label %591

; <label>:591                                     ; preds = %589, %552
  %592 = phi i32 [ %560, %552 ], [ %590, %589 ]
  br label %593

; <label>:593                                     ; preds = %591, %511
  %594 = phi i32 [ %512, %511 ], [ %592, %591 ]
  %595 = trunc i32 %594 to i16
  %596 = load [4 x i16]** %pix, align 8
  %597 = getelementptr inbounds [4 x i16]* %596, i64 0
  %598 = getelementptr inbounds [4 x i16]* %597, i32 0, i64 1
  store i16 %595, i16* %598, align 2
  br label %599

; <label>:599                                     ; preds = %593
  %600 = load i32* %col, align 4
  %601 = add nsw i32 %600, 2
  store i32 %601, i32* %col, align 4
  br label %44

; <label>:602                                     ; preds = %44
  br label %603

; <label>:603                                     ; preds = %602
  %604 = load i32* %row, align 4
  %605 = add nsw i32 %604, 1
  store i32 %605, i32* %row, align 4
  br label %17

; <label>:606                                     ; preds = %17
  store i32 1, i32* %row, align 4
  br label %607

; <label>:607                                     ; preds = %870, %606
  %608 = load i32* %row, align 4
  %609 = load i16* @height, align 2
  %610 = zext i16 %609 to i32
  %611 = sub nsw i32 %610, 1
  %612 = icmp slt i32 %608, %611
  br i1 %612, label %613, label %873

; <label>:613                                     ; preds = %607
  %614 = load i32* @filters, align 4
  %615 = load i32* %row, align 4
  %616 = shl i32 %615, 1
  %617 = and i32 %616, 14
  %618 = add nsw i32 %617, 0
  %619 = shl i32 %618, 1
  %620 = lshr i32 %614, %619
  %621 = and i32 %620, 3
  %622 = and i32 %621, 1
  %623 = add i32 1, %622
  store i32 %623, i32* %col, align 4
  %624 = load i32* @filters, align 4
  %625 = load i32* %row, align 4
  %626 = shl i32 %625, 1
  %627 = and i32 %626, 14
  %628 = load i32* %col, align 4
  %629 = add nsw i32 %628, 1
  %630 = and i32 %629, 1
  %631 = add nsw i32 %627, %630
  %632 = shl i32 %631, 1
  %633 = lshr i32 %624, %632
  %634 = and i32 %633, 3
  store i32 %634, i32* %c, align 4
  br label %635

; <label>:635                                     ; preds = %866, %613
  %636 = load i32* %col, align 4
  %637 = load i16* @width, align 2
  %638 = zext i16 %637 to i32
  %639 = sub nsw i32 %638, 1
  %640 = icmp slt i32 %636, %639
  br i1 %640, label %641, label %869

; <label>:641                                     ; preds = %635
  %642 = load [4 x i16]** @image, align 8
  %643 = load i32* %row, align 4
  %644 = load i16* @width, align 2
  %645 = zext i16 %644 to i32
  %646 = mul nsw i32 %643, %645
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds [4 x i16]* %642, i64 %647
  %649 = load i32* %col, align 4
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds [4 x i16]* %648, i64 %650
  store [4 x i16]* %651, [4 x i16]** %pix, align 8
  store i32 0, i32* %i, align 4
  br label %652

; <label>:652                                     ; preds = %860, %641
  %653 = load i32* %i, align 4
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %654
  %656 = load i32* %655, align 4
  store i32 %656, i32* %d, align 4
  %657 = icmp sgt i32 %656, 0
  br i1 %657, label %658, label %865

; <label>:658                                     ; preds = %652
  %659 = load i32* %c, align 4
  %660 = sext i32 %659 to i64
  %661 = load i32* %d, align 4
  %662 = sub nsw i32 0, %661
  %663 = sext i32 %662 to i64
  %664 = load [4 x i16]** %pix, align 8
  %665 = getelementptr inbounds [4 x i16]* %664, i64 %663
  %666 = getelementptr inbounds [4 x i16]* %665, i32 0, i64 %660
  %667 = load i16* %666, align 2
  %668 = zext i16 %667 to i32
  %669 = load i32* %c, align 4
  %670 = sext i32 %669 to i64
  %671 = load i32* %d, align 4
  %672 = sext i32 %671 to i64
  %673 = load [4 x i16]** %pix, align 8
  %674 = getelementptr inbounds [4 x i16]* %673, i64 %672
  %675 = getelementptr inbounds [4 x i16]* %674, i32 0, i64 %670
  %676 = load i16* %675, align 2
  %677 = zext i16 %676 to i32
  %678 = add nsw i32 %668, %677
  %679 = load [4 x i16]** %pix, align 8
  %680 = getelementptr inbounds [4 x i16]* %679, i64 0
  %681 = getelementptr inbounds [4 x i16]* %680, i32 0, i64 1
  %682 = load i16* %681, align 2
  %683 = zext i16 %682 to i32
  %684 = mul nsw i32 2, %683
  %685 = add nsw i32 %678, %684
  %686 = load i32* %d, align 4
  %687 = sub nsw i32 0, %686
  %688 = sext i32 %687 to i64
  %689 = load [4 x i16]** %pix, align 8
  %690 = getelementptr inbounds [4 x i16]* %689, i64 %688
  %691 = getelementptr inbounds [4 x i16]* %690, i32 0, i64 1
  %692 = load i16* %691, align 2
  %693 = zext i16 %692 to i32
  %694 = sub nsw i32 %685, %693
  %695 = load i32* %d, align 4
  %696 = sext i32 %695 to i64
  %697 = load [4 x i16]** %pix, align 8
  %698 = getelementptr inbounds [4 x i16]* %697, i64 %696
  %699 = getelementptr inbounds [4 x i16]* %698, i32 0, i64 1
  %700 = load i16* %699, align 2
  %701 = zext i16 %700 to i32
  %702 = sub nsw i32 %694, %701
  %703 = ashr i32 %702, 1
  %704 = icmp slt i32 %703, 65535
  br i1 %704, label %705, label %751

; <label>:705                                     ; preds = %658
  %706 = load i32* %c, align 4
  %707 = sext i32 %706 to i64
  %708 = load i32* %d, align 4
  %709 = sub nsw i32 0, %708
  %710 = sext i32 %709 to i64
  %711 = load [4 x i16]** %pix, align 8
  %712 = getelementptr inbounds [4 x i16]* %711, i64 %710
  %713 = getelementptr inbounds [4 x i16]* %712, i32 0, i64 %707
  %714 = load i16* %713, align 2
  %715 = zext i16 %714 to i32
  %716 = load i32* %c, align 4
  %717 = sext i32 %716 to i64
  %718 = load i32* %d, align 4
  %719 = sext i32 %718 to i64
  %720 = load [4 x i16]** %pix, align 8
  %721 = getelementptr inbounds [4 x i16]* %720, i64 %719
  %722 = getelementptr inbounds [4 x i16]* %721, i32 0, i64 %717
  %723 = load i16* %722, align 2
  %724 = zext i16 %723 to i32
  %725 = add nsw i32 %715, %724
  %726 = load [4 x i16]** %pix, align 8
  %727 = getelementptr inbounds [4 x i16]* %726, i64 0
  %728 = getelementptr inbounds [4 x i16]* %727, i32 0, i64 1
  %729 = load i16* %728, align 2
  %730 = zext i16 %729 to i32
  %731 = mul nsw i32 2, %730
  %732 = add nsw i32 %725, %731
  %733 = load i32* %d, align 4
  %734 = sub nsw i32 0, %733
  %735 = sext i32 %734 to i64
  %736 = load [4 x i16]** %pix, align 8
  %737 = getelementptr inbounds [4 x i16]* %736, i64 %735
  %738 = getelementptr inbounds [4 x i16]* %737, i32 0, i64 1
  %739 = load i16* %738, align 2
  %740 = zext i16 %739 to i32
  %741 = sub nsw i32 %732, %740
  %742 = load i32* %d, align 4
  %743 = sext i32 %742 to i64
  %744 = load [4 x i16]** %pix, align 8
  %745 = getelementptr inbounds [4 x i16]* %744, i64 %743
  %746 = getelementptr inbounds [4 x i16]* %745, i32 0, i64 1
  %747 = load i16* %746, align 2
  %748 = zext i16 %747 to i32
  %749 = sub nsw i32 %741, %748
  %750 = ashr i32 %749, 1
  br label %752

; <label>:751                                     ; preds = %658
  br label %752

; <label>:752                                     ; preds = %751, %705
  %753 = phi i32 [ %750, %705 ], [ 65535, %751 ]
  %754 = icmp sgt i32 0, %753
  br i1 %754, label %755, label %756

; <label>:755                                     ; preds = %752
  br label %852

; <label>:756                                     ; preds = %752
  %757 = load i32* %c, align 4
  %758 = sext i32 %757 to i64
  %759 = load i32* %d, align 4
  %760 = sub nsw i32 0, %759
  %761 = sext i32 %760 to i64
  %762 = load [4 x i16]** %pix, align 8
  %763 = getelementptr inbounds [4 x i16]* %762, i64 %761
  %764 = getelementptr inbounds [4 x i16]* %763, i32 0, i64 %758
  %765 = load i16* %764, align 2
  %766 = zext i16 %765 to i32
  %767 = load i32* %c, align 4
  %768 = sext i32 %767 to i64
  %769 = load i32* %d, align 4
  %770 = sext i32 %769 to i64
  %771 = load [4 x i16]** %pix, align 8
  %772 = getelementptr inbounds [4 x i16]* %771, i64 %770
  %773 = getelementptr inbounds [4 x i16]* %772, i32 0, i64 %768
  %774 = load i16* %773, align 2
  %775 = zext i16 %774 to i32
  %776 = add nsw i32 %766, %775
  %777 = load [4 x i16]** %pix, align 8
  %778 = getelementptr inbounds [4 x i16]* %777, i64 0
  %779 = getelementptr inbounds [4 x i16]* %778, i32 0, i64 1
  %780 = load i16* %779, align 2
  %781 = zext i16 %780 to i32
  %782 = mul nsw i32 2, %781
  %783 = add nsw i32 %776, %782
  %784 = load i32* %d, align 4
  %785 = sub nsw i32 0, %784
  %786 = sext i32 %785 to i64
  %787 = load [4 x i16]** %pix, align 8
  %788 = getelementptr inbounds [4 x i16]* %787, i64 %786
  %789 = getelementptr inbounds [4 x i16]* %788, i32 0, i64 1
  %790 = load i16* %789, align 2
  %791 = zext i16 %790 to i32
  %792 = sub nsw i32 %783, %791
  %793 = load i32* %d, align 4
  %794 = sext i32 %793 to i64
  %795 = load [4 x i16]** %pix, align 8
  %796 = getelementptr inbounds [4 x i16]* %795, i64 %794
  %797 = getelementptr inbounds [4 x i16]* %796, i32 0, i64 1
  %798 = load i16* %797, align 2
  %799 = zext i16 %798 to i32
  %800 = sub nsw i32 %792, %799
  %801 = ashr i32 %800, 1
  %802 = icmp slt i32 %801, 65535
  br i1 %802, label %803, label %849

; <label>:803                                     ; preds = %756
  %804 = load i32* %c, align 4
  %805 = sext i32 %804 to i64
  %806 = load i32* %d, align 4
  %807 = sub nsw i32 0, %806
  %808 = sext i32 %807 to i64
  %809 = load [4 x i16]** %pix, align 8
  %810 = getelementptr inbounds [4 x i16]* %809, i64 %808
  %811 = getelementptr inbounds [4 x i16]* %810, i32 0, i64 %805
  %812 = load i16* %811, align 2
  %813 = zext i16 %812 to i32
  %814 = load i32* %c, align 4
  %815 = sext i32 %814 to i64
  %816 = load i32* %d, align 4
  %817 = sext i32 %816 to i64
  %818 = load [4 x i16]** %pix, align 8
  %819 = getelementptr inbounds [4 x i16]* %818, i64 %817
  %820 = getelementptr inbounds [4 x i16]* %819, i32 0, i64 %815
  %821 = load i16* %820, align 2
  %822 = zext i16 %821 to i32
  %823 = add nsw i32 %813, %822
  %824 = load [4 x i16]** %pix, align 8
  %825 = getelementptr inbounds [4 x i16]* %824, i64 0
  %826 = getelementptr inbounds [4 x i16]* %825, i32 0, i64 1
  %827 = load i16* %826, align 2
  %828 = zext i16 %827 to i32
  %829 = mul nsw i32 2, %828
  %830 = add nsw i32 %823, %829
  %831 = load i32* %d, align 4
  %832 = sub nsw i32 0, %831
  %833 = sext i32 %832 to i64
  %834 = load [4 x i16]** %pix, align 8
  %835 = getelementptr inbounds [4 x i16]* %834, i64 %833
  %836 = getelementptr inbounds [4 x i16]* %835, i32 0, i64 1
  %837 = load i16* %836, align 2
  %838 = zext i16 %837 to i32
  %839 = sub nsw i32 %830, %838
  %840 = load i32* %d, align 4
  %841 = sext i32 %840 to i64
  %842 = load [4 x i16]** %pix, align 8
  %843 = getelementptr inbounds [4 x i16]* %842, i64 %841
  %844 = getelementptr inbounds [4 x i16]* %843, i32 0, i64 1
  %845 = load i16* %844, align 2
  %846 = zext i16 %845 to i32
  %847 = sub nsw i32 %839, %846
  %848 = ashr i32 %847, 1
  br label %850

; <label>:849                                     ; preds = %756
  br label %850

; <label>:850                                     ; preds = %849, %803
  %851 = phi i32 [ %848, %803 ], [ 65535, %849 ]
  br label %852

; <label>:852                                     ; preds = %850, %755
  %853 = phi i32 [ 0, %755 ], [ %851, %850 ]
  %854 = trunc i32 %853 to i16
  %855 = load i32* %c, align 4
  %856 = sext i32 %855 to i64
  %857 = load [4 x i16]** %pix, align 8
  %858 = getelementptr inbounds [4 x i16]* %857, i64 0
  %859 = getelementptr inbounds [4 x i16]* %858, i32 0, i64 %856
  store i16 %854, i16* %859, align 2
  br label %860

; <label>:860                                     ; preds = %852
  %861 = load i32* %c, align 4
  %862 = sub nsw i32 2, %861
  store i32 %862, i32* %c, align 4
  %863 = load i32* %i, align 4
  %864 = add nsw i32 %863, 1
  store i32 %864, i32* %i, align 4
  br label %652

; <label>:865                                     ; preds = %652
  br label %866

; <label>:866                                     ; preds = %865
  %867 = load i32* %col, align 4
  %868 = add nsw i32 %867, 2
  store i32 %868, i32* %col, align 4
  br label %635

; <label>:869                                     ; preds = %635
  br label %870

; <label>:870                                     ; preds = %869
  %871 = load i32* %row, align 4
  %872 = add nsw i32 %871, 1
  store i32 %872, i32* %row, align 4
  br label %607

; <label>:873                                     ; preds = %607
  store i32 1, i32* %row, align 4
  br label %874

; <label>:874                                     ; preds = %1259, %873
  %875 = load i32* %row, align 4
  %876 = load i16* @height, align 2
  %877 = zext i16 %876 to i32
  %878 = sub nsw i32 %877, 1
  %879 = icmp slt i32 %875, %878
  br i1 %879, label %880, label %1262

; <label>:880                                     ; preds = %874
  %881 = load i32* @filters, align 4
  %882 = load i32* %row, align 4
  %883 = shl i32 %882, 1
  %884 = and i32 %883, 14
  %885 = add nsw i32 %884, 1
  %886 = shl i32 %885, 1
  %887 = lshr i32 %881, %886
  %888 = and i32 %887, 3
  %889 = and i32 %888, 1
  %890 = add i32 1, %889
  store i32 %890, i32* %col, align 4
  %891 = load i32* @filters, align 4
  %892 = load i32* %row, align 4
  %893 = shl i32 %892, 1
  %894 = and i32 %893, 14
  %895 = load i32* %col, align 4
  %896 = and i32 %895, 1
  %897 = add nsw i32 %894, %896
  %898 = shl i32 %897, 1
  %899 = lshr i32 %891, %898
  %900 = and i32 %899, 3
  %901 = sub i32 2, %900
  store i32 %901, i32* %c, align 4
  br label %902

; <label>:902                                     ; preds = %1255, %880
  %903 = load i32* %col, align 4
  %904 = load i16* @width, align 2
  %905 = zext i16 %904 to i32
  %906 = sub nsw i32 %905, 1
  %907 = icmp slt i32 %903, %906
  br i1 %907, label %908, label %1258

; <label>:908                                     ; preds = %902
  %909 = load [4 x i16]** @image, align 8
  %910 = load i32* %row, align 4
  %911 = load i16* @width, align 2
  %912 = zext i16 %911 to i32
  %913 = mul nsw i32 %910, %912
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds [4 x i16]* %909, i64 %914
  %916 = load i32* %col, align 4
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds [4 x i16]* %915, i64 %917
  store [4 x i16]* %918, [4 x i16]** %pix, align 8
  store i32 0, i32* %i, align 4
  br label %919

; <label>:919                                     ; preds = %1137, %908
  %920 = load i32* %i, align 4
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %921
  %923 = load i32* %922, align 4
  %924 = load i32* %i, align 4
  %925 = add nsw i32 %924, 1
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds [5 x i32]* %dir, i32 0, i64 %926
  %928 = load i32* %927, align 4
  %929 = add nsw i32 %923, %928
  store i32 %929, i32* %d, align 4
  %930 = icmp sgt i32 %929, 0
  br i1 %930, label %931, label %1140

; <label>:931                                     ; preds = %919
  %932 = load i32* %c, align 4
  %933 = sext i32 %932 to i64
  %934 = load i32* %d, align 4
  %935 = sub nsw i32 0, %934
  %936 = sext i32 %935 to i64
  %937 = load [4 x i16]** %pix, align 8
  %938 = getelementptr inbounds [4 x i16]* %937, i64 %936
  %939 = getelementptr inbounds [4 x i16]* %938, i32 0, i64 %933
  %940 = load i16* %939, align 2
  %941 = zext i16 %940 to i32
  %942 = load i32* %c, align 4
  %943 = sext i32 %942 to i64
  %944 = load i32* %d, align 4
  %945 = sext i32 %944 to i64
  %946 = load [4 x i16]** %pix, align 8
  %947 = getelementptr inbounds [4 x i16]* %946, i64 %945
  %948 = getelementptr inbounds [4 x i16]* %947, i32 0, i64 %943
  %949 = load i16* %948, align 2
  %950 = zext i16 %949 to i32
  %951 = sub nsw i32 %941, %950
  %952 = load i32* %c, align 4
  %953 = sext i32 %952 to i64
  %954 = load i32* %d, align 4
  %955 = sub nsw i32 0, %954
  %956 = sext i32 %955 to i64
  %957 = load [4 x i16]** %pix, align 8
  %958 = getelementptr inbounds [4 x i16]* %957, i64 %956
  %959 = getelementptr inbounds [4 x i16]* %958, i32 0, i64 %953
  %960 = load i16* %959, align 2
  %961 = zext i16 %960 to i32
  %962 = load i32* %c, align 4
  %963 = sext i32 %962 to i64
  %964 = load i32* %d, align 4
  %965 = sext i32 %964 to i64
  %966 = load [4 x i16]** %pix, align 8
  %967 = getelementptr inbounds [4 x i16]* %966, i64 %965
  %968 = getelementptr inbounds [4 x i16]* %967, i32 0, i64 %963
  %969 = load i16* %968, align 2
  %970 = zext i16 %969 to i32
  %971 = sub nsw i32 %961, %970
  %972 = ashr i32 %971, 31
  %973 = xor i32 %951, %972
  %974 = load i32* %c, align 4
  %975 = sext i32 %974 to i64
  %976 = load i32* %d, align 4
  %977 = sub nsw i32 0, %976
  %978 = sext i32 %977 to i64
  %979 = load [4 x i16]** %pix, align 8
  %980 = getelementptr inbounds [4 x i16]* %979, i64 %978
  %981 = getelementptr inbounds [4 x i16]* %980, i32 0, i64 %975
  %982 = load i16* %981, align 2
  %983 = zext i16 %982 to i32
  %984 = load i32* %c, align 4
  %985 = sext i32 %984 to i64
  %986 = load i32* %d, align 4
  %987 = sext i32 %986 to i64
  %988 = load [4 x i16]** %pix, align 8
  %989 = getelementptr inbounds [4 x i16]* %988, i64 %987
  %990 = getelementptr inbounds [4 x i16]* %989, i32 0, i64 %985
  %991 = load i16* %990, align 2
  %992 = zext i16 %991 to i32
  %993 = sub nsw i32 %983, %992
  %994 = ashr i32 %993, 31
  %995 = sub nsw i32 %973, %994
  %996 = load i32* %d, align 4
  %997 = sub nsw i32 0, %996
  %998 = sext i32 %997 to i64
  %999 = load [4 x i16]** %pix, align 8
  %1000 = getelementptr inbounds [4 x i16]* %999, i64 %998
  %1001 = getelementptr inbounds [4 x i16]* %1000, i32 0, i64 1
  %1002 = load i16* %1001, align 2
  %1003 = zext i16 %1002 to i32
  %1004 = load [4 x i16]** %pix, align 8
  %1005 = getelementptr inbounds [4 x i16]* %1004, i64 0
  %1006 = getelementptr inbounds [4 x i16]* %1005, i32 0, i64 1
  %1007 = load i16* %1006, align 2
  %1008 = zext i16 %1007 to i32
  %1009 = sub nsw i32 %1003, %1008
  %1010 = load i32* %d, align 4
  %1011 = sub nsw i32 0, %1010
  %1012 = sext i32 %1011 to i64
  %1013 = load [4 x i16]** %pix, align 8
  %1014 = getelementptr inbounds [4 x i16]* %1013, i64 %1012
  %1015 = getelementptr inbounds [4 x i16]* %1014, i32 0, i64 1
  %1016 = load i16* %1015, align 2
  %1017 = zext i16 %1016 to i32
  %1018 = load [4 x i16]** %pix, align 8
  %1019 = getelementptr inbounds [4 x i16]* %1018, i64 0
  %1020 = getelementptr inbounds [4 x i16]* %1019, i32 0, i64 1
  %1021 = load i16* %1020, align 2
  %1022 = zext i16 %1021 to i32
  %1023 = sub nsw i32 %1017, %1022
  %1024 = ashr i32 %1023, 31
  %1025 = xor i32 %1009, %1024
  %1026 = load i32* %d, align 4
  %1027 = sub nsw i32 0, %1026
  %1028 = sext i32 %1027 to i64
  %1029 = load [4 x i16]** %pix, align 8
  %1030 = getelementptr inbounds [4 x i16]* %1029, i64 %1028
  %1031 = getelementptr inbounds [4 x i16]* %1030, i32 0, i64 1
  %1032 = load i16* %1031, align 2
  %1033 = zext i16 %1032 to i32
  %1034 = load [4 x i16]** %pix, align 8
  %1035 = getelementptr inbounds [4 x i16]* %1034, i64 0
  %1036 = getelementptr inbounds [4 x i16]* %1035, i32 0, i64 1
  %1037 = load i16* %1036, align 2
  %1038 = zext i16 %1037 to i32
  %1039 = sub nsw i32 %1033, %1038
  %1040 = ashr i32 %1039, 31
  %1041 = sub nsw i32 %1025, %1040
  %1042 = add nsw i32 %995, %1041
  %1043 = load i32* %d, align 4
  %1044 = sext i32 %1043 to i64
  %1045 = load [4 x i16]** %pix, align 8
  %1046 = getelementptr inbounds [4 x i16]* %1045, i64 %1044
  %1047 = getelementptr inbounds [4 x i16]* %1046, i32 0, i64 1
  %1048 = load i16* %1047, align 2
  %1049 = zext i16 %1048 to i32
  %1050 = load [4 x i16]** %pix, align 8
  %1051 = getelementptr inbounds [4 x i16]* %1050, i64 0
  %1052 = getelementptr inbounds [4 x i16]* %1051, i32 0, i64 1
  %1053 = load i16* %1052, align 2
  %1054 = zext i16 %1053 to i32
  %1055 = sub nsw i32 %1049, %1054
  %1056 = load i32* %d, align 4
  %1057 = sext i32 %1056 to i64
  %1058 = load [4 x i16]** %pix, align 8
  %1059 = getelementptr inbounds [4 x i16]* %1058, i64 %1057
  %1060 = getelementptr inbounds [4 x i16]* %1059, i32 0, i64 1
  %1061 = load i16* %1060, align 2
  %1062 = zext i16 %1061 to i32
  %1063 = load [4 x i16]** %pix, align 8
  %1064 = getelementptr inbounds [4 x i16]* %1063, i64 0
  %1065 = getelementptr inbounds [4 x i16]* %1064, i32 0, i64 1
  %1066 = load i16* %1065, align 2
  %1067 = zext i16 %1066 to i32
  %1068 = sub nsw i32 %1062, %1067
  %1069 = ashr i32 %1068, 31
  %1070 = xor i32 %1055, %1069
  %1071 = load i32* %d, align 4
  %1072 = sext i32 %1071 to i64
  %1073 = load [4 x i16]** %pix, align 8
  %1074 = getelementptr inbounds [4 x i16]* %1073, i64 %1072
  %1075 = getelementptr inbounds [4 x i16]* %1074, i32 0, i64 1
  %1076 = load i16* %1075, align 2
  %1077 = zext i16 %1076 to i32
  %1078 = load [4 x i16]** %pix, align 8
  %1079 = getelementptr inbounds [4 x i16]* %1078, i64 0
  %1080 = getelementptr inbounds [4 x i16]* %1079, i32 0, i64 1
  %1081 = load i16* %1080, align 2
  %1082 = zext i16 %1081 to i32
  %1083 = sub nsw i32 %1077, %1082
  %1084 = ashr i32 %1083, 31
  %1085 = sub nsw i32 %1070, %1084
  %1086 = add nsw i32 %1042, %1085
  %1087 = load i32* %i, align 4
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 %1088
  store i32 %1086, i32* %1089, align 4
  %1090 = load i32* %c, align 4
  %1091 = sext i32 %1090 to i64
  %1092 = load i32* %d, align 4
  %1093 = sub nsw i32 0, %1092
  %1094 = sext i32 %1093 to i64
  %1095 = load [4 x i16]** %pix, align 8
  %1096 = getelementptr inbounds [4 x i16]* %1095, i64 %1094
  %1097 = getelementptr inbounds [4 x i16]* %1096, i32 0, i64 %1091
  %1098 = load i16* %1097, align 2
  %1099 = zext i16 %1098 to i32
  %1100 = load i32* %c, align 4
  %1101 = sext i32 %1100 to i64
  %1102 = load i32* %d, align 4
  %1103 = sext i32 %1102 to i64
  %1104 = load [4 x i16]** %pix, align 8
  %1105 = getelementptr inbounds [4 x i16]* %1104, i64 %1103
  %1106 = getelementptr inbounds [4 x i16]* %1105, i32 0, i64 %1101
  %1107 = load i16* %1106, align 2
  %1108 = zext i16 %1107 to i32
  %1109 = add nsw i32 %1099, %1108
  %1110 = load [4 x i16]** %pix, align 8
  %1111 = getelementptr inbounds [4 x i16]* %1110, i64 0
  %1112 = getelementptr inbounds [4 x i16]* %1111, i32 0, i64 1
  %1113 = load i16* %1112, align 2
  %1114 = zext i16 %1113 to i32
  %1115 = mul nsw i32 2, %1114
  %1116 = add nsw i32 %1109, %1115
  %1117 = load i32* %d, align 4
  %1118 = sub nsw i32 0, %1117
  %1119 = sext i32 %1118 to i64
  %1120 = load [4 x i16]** %pix, align 8
  %1121 = getelementptr inbounds [4 x i16]* %1120, i64 %1119
  %1122 = getelementptr inbounds [4 x i16]* %1121, i32 0, i64 1
  %1123 = load i16* %1122, align 2
  %1124 = zext i16 %1123 to i32
  %1125 = sub nsw i32 %1116, %1124
  %1126 = load i32* %d, align 4
  %1127 = sext i32 %1126 to i64
  %1128 = load [4 x i16]** %pix, align 8
  %1129 = getelementptr inbounds [4 x i16]* %1128, i64 %1127
  %1130 = getelementptr inbounds [4 x i16]* %1129, i32 0, i64 1
  %1131 = load i16* %1130, align 2
  %1132 = zext i16 %1131 to i32
  %1133 = sub nsw i32 %1125, %1132
  %1134 = load i32* %i, align 4
  %1135 = sext i32 %1134 to i64
  %1136 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %1135
  store i32 %1133, i32* %1136, align 4
  br label %1137

; <label>:1137                                    ; preds = %931
  %1138 = load i32* %i, align 4
  %1139 = add nsw i32 %1138, 1
  store i32 %1139, i32* %i, align 4
  br label %919

; <label>:1140                                    ; preds = %919
  %1141 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %1142 = load i32* %1141, align 4
  %1143 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %1144 = load i32* %1143, align 4
  %1145 = icmp ne i32 %1142, %1144
  br i1 %1145, label %1146, label %1208

; <label>:1146                                    ; preds = %1140
  %1147 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %1148 = load i32* %1147, align 4
  %1149 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %1150 = load i32* %1149, align 4
  %1151 = icmp sgt i32 %1148, %1150
  %1152 = zext i1 %1151 to i32
  %1153 = sext i32 %1152 to i64
  %1154 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %1153
  %1155 = load i32* %1154, align 4
  %1156 = ashr i32 %1155, 1
  %1157 = icmp slt i32 %1156, 65535
  br i1 %1157, label %1158, label %1169

; <label>:1158                                    ; preds = %1146
  %1159 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %1160 = load i32* %1159, align 4
  %1161 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %1162 = load i32* %1161, align 4
  %1163 = icmp sgt i32 %1160, %1162
  %1164 = zext i1 %1163 to i32
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %1165
  %1167 = load i32* %1166, align 4
  %1168 = ashr i32 %1167, 1
  br label %1170

; <label>:1169                                    ; preds = %1146
  br label %1170

; <label>:1170                                    ; preds = %1169, %1158
  %1171 = phi i32 [ %1168, %1158 ], [ 65535, %1169 ]
  %1172 = icmp sgt i32 0, %1171
  br i1 %1172, label %1173, label %1174

; <label>:1173                                    ; preds = %1170
  br label %1200

; <label>:1174                                    ; preds = %1170
  %1175 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %1176 = load i32* %1175, align 4
  %1177 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %1178 = load i32* %1177, align 4
  %1179 = icmp sgt i32 %1176, %1178
  %1180 = zext i1 %1179 to i32
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %1181
  %1183 = load i32* %1182, align 4
  %1184 = ashr i32 %1183, 1
  %1185 = icmp slt i32 %1184, 65535
  br i1 %1185, label %1186, label %1197

; <label>:1186                                    ; preds = %1174
  %1187 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 0
  %1188 = load i32* %1187, align 4
  %1189 = getelementptr inbounds [2 x i32]* %diff, i32 0, i64 1
  %1190 = load i32* %1189, align 4
  %1191 = icmp sgt i32 %1188, %1190
  %1192 = zext i1 %1191 to i32
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 %1193
  %1195 = load i32* %1194, align 4
  %1196 = ashr i32 %1195, 1
  br label %1198

; <label>:1197                                    ; preds = %1174
  br label %1198

; <label>:1198                                    ; preds = %1197, %1186
  %1199 = phi i32 [ %1196, %1186 ], [ 65535, %1197 ]
  br label %1200

; <label>:1200                                    ; preds = %1198, %1173
  %1201 = phi i32 [ 0, %1173 ], [ %1199, %1198 ]
  %1202 = trunc i32 %1201 to i16
  %1203 = load i32* %c, align 4
  %1204 = sext i32 %1203 to i64
  %1205 = load [4 x i16]** %pix, align 8
  %1206 = getelementptr inbounds [4 x i16]* %1205, i64 0
  %1207 = getelementptr inbounds [4 x i16]* %1206, i32 0, i64 %1204
  store i16 %1202, i16* %1207, align 2
  br label %1254

; <label>:1208                                    ; preds = %1140
  %1209 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %1210 = load i32* %1209, align 4
  %1211 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %1212 = load i32* %1211, align 4
  %1213 = add nsw i32 %1210, %1212
  %1214 = ashr i32 %1213, 2
  %1215 = icmp slt i32 %1214, 65535
  br i1 %1215, label %1216, label %1223

; <label>:1216                                    ; preds = %1208
  %1217 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %1218 = load i32* %1217, align 4
  %1219 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %1220 = load i32* %1219, align 4
  %1221 = add nsw i32 %1218, %1220
  %1222 = ashr i32 %1221, 2
  br label %1224

; <label>:1223                                    ; preds = %1208
  br label %1224

; <label>:1224                                    ; preds = %1223, %1216
  %1225 = phi i32 [ %1222, %1216 ], [ 65535, %1223 ]
  %1226 = icmp sgt i32 0, %1225
  br i1 %1226, label %1227, label %1228

; <label>:1227                                    ; preds = %1224
  br label %1246

; <label>:1228                                    ; preds = %1224
  %1229 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %1230 = load i32* %1229, align 4
  %1231 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %1232 = load i32* %1231, align 4
  %1233 = add nsw i32 %1230, %1232
  %1234 = ashr i32 %1233, 2
  %1235 = icmp slt i32 %1234, 65535
  br i1 %1235, label %1236, label %1243

; <label>:1236                                    ; preds = %1228
  %1237 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 0
  %1238 = load i32* %1237, align 4
  %1239 = getelementptr inbounds [2 x i32]* %guess, i32 0, i64 1
  %1240 = load i32* %1239, align 4
  %1241 = add nsw i32 %1238, %1240
  %1242 = ashr i32 %1241, 2
  br label %1244

; <label>:1243                                    ; preds = %1228
  br label %1244

; <label>:1244                                    ; preds = %1243, %1236
  %1245 = phi i32 [ %1242, %1236 ], [ 65535, %1243 ]
  br label %1246

; <label>:1246                                    ; preds = %1244, %1227
  %1247 = phi i32 [ 0, %1227 ], [ %1245, %1244 ]
  %1248 = trunc i32 %1247 to i16
  %1249 = load i32* %c, align 4
  %1250 = sext i32 %1249 to i64
  %1251 = load [4 x i16]** %pix, align 8
  %1252 = getelementptr inbounds [4 x i16]* %1251, i64 0
  %1253 = getelementptr inbounds [4 x i16]* %1252, i32 0, i64 %1250
  store i16 %1248, i16* %1253, align 2
  br label %1254

; <label>:1254                                    ; preds = %1246, %1200
  br label %1255

; <label>:1255                                    ; preds = %1254
  %1256 = load i32* %col, align 4
  %1257 = add nsw i32 %1256, 2
  store i32 %1257, i32* %col, align 4
  br label %902

; <label>:1258                                    ; preds = %902
  br label %1259

; <label>:1259                                    ; preds = %1258
  %1260 = load i32* %row, align 4
  %1261 = add nsw i32 %1260, 1
  store i32 %1261, i32* %row, align 4
  br label %874

; <label>:1262                                    ; preds = %874
  ret void
}

; Function Attrs: nounwind uwtable
define void @ahd_interpolate() #0 {
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %top = alloca i32, align 4
  %left = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %tr = alloca i32, align 4
  %tc = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %val = alloca i32, align 4
  %hm = alloca [2 x i32], align 4
  %pix = alloca [4 x i16]*, align 8
  %rix = alloca [3 x i16]*, align 8
  %ldiff = alloca [2 x [4 x i32]], align 16
  %abdiff = alloca [2 x [4 x i32]], align 16
  %leps = alloca i32, align 4
  %abeps = alloca i32, align 4
  %r = alloca float, align 4
  %cbrt = alloca [65536 x float], align 16
  %xyz = alloca [3 x float], align 4
  %xyz_cam = alloca [3 x [4 x float]], align 16
  %rgb = alloca [256 x [256 x [3 x i16]]]*, align 8
  %lab = alloca [256 x [256 x [3 x i16]]]*, align 8
  %lix = alloca [3 x i16]*, align 8
  %homo = alloca [256 x [256 x i8]]*, align 8
  %buffer = alloca i8*, align 8
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8]* @.str80, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  store i32 0, i32* %i, align 4
  br label %7

; <label>:7                                       ; preds = %33, %6
  %8 = load i32* %i, align 4
  %9 = icmp slt i32 %8, 65536
  br i1 %9, label %10, label %36

; <label>:10                                      ; preds = %7
  %11 = load i32* %i, align 4
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 6.553500e+04
  %14 = fptrunc double %13 to float
  store float %14, float* %r, align 4
  %15 = load float* %r, align 4
  %16 = fpext float %15 to double
  %17 = fcmp ogt double %16, 8.856000e-03
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %10
  %19 = load float* %r, align 4
  %20 = fpext float %19 to double
  %21 = call double @pow(double %20, double 0x3FD5555555555555) #4
  br label %27

; <label>:22                                      ; preds = %10
  %23 = load float* %r, align 4
  %24 = fpext float %23 to double
  %25 = fmul double 7.787000e+00, %24
  %26 = fadd double %25, 0x3FC1A7B9611A7B96
  br label %27

; <label>:27                                      ; preds = %22, %18
  %28 = phi double [ %21, %18 ], [ %26, %22 ]
  %29 = fptrunc double %28 to float
  %30 = load i32* %i, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %31
  store float %29, float* %32, align 4
  br label %33

; <label>:33                                      ; preds = %27
  %34 = load i32* %i, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %i, align 4
  br label %7

; <label>:36                                      ; preds = %7
  store i32 0, i32* %i, align 4
  br label %37

; <label>:37                                      ; preds = %96, %36
  %38 = load i32* %i, align 4
  %39 = icmp slt i32 %38, 3
  br i1 %39, label %40, label %99

; <label>:40                                      ; preds = %37
  store i32 0, i32* %j, align 4
  br label %41

; <label>:41                                      ; preds = %92, %40
  %42 = load i32* %j, align 4
  %43 = load i32* @colors, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %95

; <label>:45                                      ; preds = %41
  store i32 0, i32* %k, align 4
  %46 = load i32* %j, align 4
  %47 = sext i32 %46 to i64
  %48 = load i32* %i, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 %49
  %51 = getelementptr inbounds [4 x float]* %50, i32 0, i64 %47
  store float 0.000000e+00, float* %51, align 4
  br label %52

; <label>:52                                      ; preds = %88, %45
  %53 = load i32* %k, align 4
  %54 = icmp slt i32 %53, 3
  br i1 %54, label %55, label %91

; <label>:55                                      ; preds = %52
  %56 = load i32* %k, align 4
  %57 = sext i32 %56 to i64
  %58 = load i32* %i, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [3 x [3 x double]]* @xyz_rgb, i32 0, i64 %59
  %61 = getelementptr inbounds [3 x double]* %60, i32 0, i64 %57
  %62 = load double* %61, align 8
  %63 = load i32* %j, align 4
  %64 = sext i32 %63 to i64
  %65 = load i32* %k, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %66
  %68 = getelementptr inbounds [4 x float]* %67, i32 0, i64 %64
  %69 = load float* %68, align 4
  %70 = fpext float %69 to double
  %71 = fmul double %62, %70
  %72 = load i32* %i, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [3 x float]* @d65_white, i32 0, i64 %73
  %75 = load float* %74, align 4
  %76 = fpext float %75 to double
  %77 = fdiv double %71, %76
  %78 = load i32* %j, align 4
  %79 = sext i32 %78 to i64
  %80 = load i32* %i, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 %81
  %83 = getelementptr inbounds [4 x float]* %82, i32 0, i64 %79
  %84 = load float* %83, align 4
  %85 = fpext float %84 to double
  %86 = fadd double %85, %77
  %87 = fptrunc double %86 to float
  store float %87, float* %83, align 4
  br label %88

; <label>:88                                      ; preds = %55
  %89 = load i32* %k, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %k, align 4
  br label %52

; <label>:91                                      ; preds = %52
  br label %92

; <label>:92                                      ; preds = %91
  %93 = load i32* %j, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %j, align 4
  br label %41

; <label>:95                                      ; preds = %41
  br label %96

; <label>:96                                      ; preds = %95
  %97 = load i32* %i, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %i, align 4
  br label %37

; <label>:99                                      ; preds = %37
  call void @border_interpolate(i32 5)
  %100 = call noalias i8* @malloc(i64 1703936) #4
  store i8* %100, i8** %buffer, align 8
  %101 = load i8** %buffer, align 8
  call void @merror(i8* %101, i8* getelementptr inbounds ([18 x i8]* @.str81, i32 0, i32 0))
  %102 = load i8** %buffer, align 8
  %103 = bitcast i8* %102 to [256 x [256 x [3 x i16]]]*
  store [256 x [256 x [3 x i16]]]* %103, [256 x [256 x [3 x i16]]]** %rgb, align 8
  %104 = load i8** %buffer, align 8
  %105 = getelementptr inbounds i8* %104, i64 786432
  %106 = bitcast i8* %105 to [256 x [256 x [3 x i16]]]*
  store [256 x [256 x [3 x i16]]]* %106, [256 x [256 x [3 x i16]]]** %lab, align 8
  %107 = load i8** %buffer, align 8
  %108 = getelementptr inbounds i8* %107, i64 1572864
  %109 = bitcast i8* %108 to [256 x [256 x i8]]*
  store [256 x [256 x i8]]* %109, [256 x [256 x i8]]** %homo, align 8
  store i32 2, i32* %top, align 4
  br label %110

; <label>:110                                     ; preds = %1708, %99
  %111 = load i32* %top, align 4
  %112 = load i16* @height, align 2
  %113 = zext i16 %112 to i32
  %114 = sub nsw i32 %113, 5
  %115 = icmp slt i32 %111, %114
  br i1 %115, label %116, label %1711

; <label>:116                                     ; preds = %110
  store i32 2, i32* %left, align 4
  br label %117

; <label>:117                                     ; preds = %1704, %116
  %118 = load i32* %left, align 4
  %119 = load i16* @width, align 2
  %120 = zext i16 %119 to i32
  %121 = sub nsw i32 %120, 5
  %122 = icmp slt i32 %118, %121
  br i1 %122, label %123, label %1707

; <label>:123                                     ; preds = %117
  %124 = load i32* %top, align 4
  store i32 %124, i32* %row, align 4
  br label %125

; <label>:125                                     ; preds = %574, %123
  %126 = load i32* %row, align 4
  %127 = load i32* %top, align 4
  %128 = add nsw i32 %127, 256
  %129 = icmp slt i32 %126, %128
  br i1 %129, label %130, label %136

; <label>:130                                     ; preds = %125
  %131 = load i32* %row, align 4
  %132 = load i16* @height, align 2
  %133 = zext i16 %132 to i32
  %134 = sub nsw i32 %133, 2
  %135 = icmp slt i32 %131, %134
  br label %136

; <label>:136                                     ; preds = %130, %125
  %137 = phi i1 [ false, %125 ], [ %135, %130 ]
  br i1 %137, label %138, label %577

; <label>:138                                     ; preds = %136
  %139 = load i32* %left, align 4
  %140 = load i32* @filters, align 4
  %141 = load i32* %row, align 4
  %142 = shl i32 %141, 1
  %143 = and i32 %142, 14
  %144 = load i32* %left, align 4
  %145 = and i32 %144, 1
  %146 = add nsw i32 %143, %145
  %147 = shl i32 %146, 1
  %148 = lshr i32 %140, %147
  %149 = and i32 %148, 3
  %150 = and i32 %149, 1
  %151 = add i32 %139, %150
  store i32 %151, i32* %col, align 4
  %152 = load i32* @filters, align 4
  %153 = load i32* %row, align 4
  %154 = shl i32 %153, 1
  %155 = and i32 %154, 14
  %156 = load i32* %col, align 4
  %157 = and i32 %156, 1
  %158 = add nsw i32 %155, %157
  %159 = shl i32 %158, 1
  %160 = lshr i32 %152, %159
  %161 = and i32 %160, 3
  store i32 %161, i32* %c, align 4
  br label %162

; <label>:162                                     ; preds = %570, %138
  %163 = load i32* %col, align 4
  %164 = load i32* %left, align 4
  %165 = add nsw i32 %164, 256
  %166 = icmp slt i32 %163, %165
  br i1 %166, label %167, label %173

; <label>:167                                     ; preds = %162
  %168 = load i32* %col, align 4
  %169 = load i16* @width, align 2
  %170 = zext i16 %169 to i32
  %171 = sub nsw i32 %170, 2
  %172 = icmp slt i32 %168, %171
  br label %173

; <label>:173                                     ; preds = %167, %162
  %174 = phi i1 [ false, %162 ], [ %172, %167 ]
  br i1 %174, label %175, label %573

; <label>:175                                     ; preds = %173
  %176 = load [4 x i16]** @image, align 8
  %177 = load i32* %row, align 4
  %178 = load i16* @width, align 2
  %179 = zext i16 %178 to i32
  %180 = mul nsw i32 %177, %179
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [4 x i16]* %176, i64 %181
  %183 = load i32* %col, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [4 x i16]* %182, i64 %184
  store [4 x i16]* %185, [4 x i16]** %pix, align 8
  %186 = load [4 x i16]** %pix, align 8
  %187 = getelementptr inbounds [4 x i16]* %186, i64 -1
  %188 = getelementptr inbounds [4 x i16]* %187, i32 0, i64 1
  %189 = load i16* %188, align 2
  %190 = zext i16 %189 to i32
  %191 = load i32* %c, align 4
  %192 = sext i32 %191 to i64
  %193 = load [4 x i16]** %pix, align 8
  %194 = getelementptr inbounds [4 x i16]* %193, i64 0
  %195 = getelementptr inbounds [4 x i16]* %194, i32 0, i64 %192
  %196 = load i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = add nsw i32 %190, %197
  %199 = load [4 x i16]** %pix, align 8
  %200 = getelementptr inbounds [4 x i16]* %199, i64 1
  %201 = getelementptr inbounds [4 x i16]* %200, i32 0, i64 1
  %202 = load i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = add nsw i32 %198, %203
  %205 = mul nsw i32 %204, 2
  %206 = load i32* %c, align 4
  %207 = sext i32 %206 to i64
  %208 = load [4 x i16]** %pix, align 8
  %209 = getelementptr inbounds [4 x i16]* %208, i64 -2
  %210 = getelementptr inbounds [4 x i16]* %209, i32 0, i64 %207
  %211 = load i16* %210, align 2
  %212 = zext i16 %211 to i32
  %213 = sub nsw i32 %205, %212
  %214 = load i32* %c, align 4
  %215 = sext i32 %214 to i64
  %216 = load [4 x i16]** %pix, align 8
  %217 = getelementptr inbounds [4 x i16]* %216, i64 2
  %218 = getelementptr inbounds [4 x i16]* %217, i32 0, i64 %215
  %219 = load i16* %218, align 2
  %220 = zext i16 %219 to i32
  %221 = sub nsw i32 %213, %220
  %222 = ashr i32 %221, 2
  store i32 %222, i32* %val, align 4
  %223 = load [4 x i16]** %pix, align 8
  %224 = getelementptr inbounds [4 x i16]* %223, i64 -1
  %225 = getelementptr inbounds [4 x i16]* %224, i32 0, i64 1
  %226 = load i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = load [4 x i16]** %pix, align 8
  %229 = getelementptr inbounds [4 x i16]* %228, i64 1
  %230 = getelementptr inbounds [4 x i16]* %229, i32 0, i64 1
  %231 = load i16* %230, align 2
  %232 = zext i16 %231 to i32
  %233 = icmp slt i32 %227, %232
  br i1 %233, label %234, label %284

; <label>:234                                     ; preds = %175
  %235 = load [4 x i16]** %pix, align 8
  %236 = getelementptr inbounds [4 x i16]* %235, i64 -1
  %237 = getelementptr inbounds [4 x i16]* %236, i32 0, i64 1
  %238 = load i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = load i32* %val, align 4
  %241 = load [4 x i16]** %pix, align 8
  %242 = getelementptr inbounds [4 x i16]* %241, i64 1
  %243 = getelementptr inbounds [4 x i16]* %242, i32 0, i64 1
  %244 = load i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = icmp slt i32 %240, %245
  br i1 %246, label %247, label %249

; <label>:247                                     ; preds = %234
  %248 = load i32* %val, align 4
  br label %255

; <label>:249                                     ; preds = %234
  %250 = load [4 x i16]** %pix, align 8
  %251 = getelementptr inbounds [4 x i16]* %250, i64 1
  %252 = getelementptr inbounds [4 x i16]* %251, i32 0, i64 1
  %253 = load i16* %252, align 2
  %254 = zext i16 %253 to i32
  br label %255

; <label>:255                                     ; preds = %249, %247
  %256 = phi i32 [ %248, %247 ], [ %254, %249 ]
  %257 = icmp sgt i32 %239, %256
  br i1 %257, label %258, label %264

; <label>:258                                     ; preds = %255
  %259 = load [4 x i16]** %pix, align 8
  %260 = getelementptr inbounds [4 x i16]* %259, i64 -1
  %261 = getelementptr inbounds [4 x i16]* %260, i32 0, i64 1
  %262 = load i16* %261, align 2
  %263 = zext i16 %262 to i32
  br label %282

; <label>:264                                     ; preds = %255
  %265 = load i32* %val, align 4
  %266 = load [4 x i16]** %pix, align 8
  %267 = getelementptr inbounds [4 x i16]* %266, i64 1
  %268 = getelementptr inbounds [4 x i16]* %267, i32 0, i64 1
  %269 = load i16* %268, align 2
  %270 = zext i16 %269 to i32
  %271 = icmp slt i32 %265, %270
  br i1 %271, label %272, label %274

; <label>:272                                     ; preds = %264
  %273 = load i32* %val, align 4
  br label %280

; <label>:274                                     ; preds = %264
  %275 = load [4 x i16]** %pix, align 8
  %276 = getelementptr inbounds [4 x i16]* %275, i64 1
  %277 = getelementptr inbounds [4 x i16]* %276, i32 0, i64 1
  %278 = load i16* %277, align 2
  %279 = zext i16 %278 to i32
  br label %280

; <label>:280                                     ; preds = %274, %272
  %281 = phi i32 [ %273, %272 ], [ %279, %274 ]
  br label %282

; <label>:282                                     ; preds = %280, %258
  %283 = phi i32 [ %263, %258 ], [ %281, %280 ]
  br label %334

; <label>:284                                     ; preds = %175
  %285 = load [4 x i16]** %pix, align 8
  %286 = getelementptr inbounds [4 x i16]* %285, i64 1
  %287 = getelementptr inbounds [4 x i16]* %286, i32 0, i64 1
  %288 = load i16* %287, align 2
  %289 = zext i16 %288 to i32
  %290 = load i32* %val, align 4
  %291 = load [4 x i16]** %pix, align 8
  %292 = getelementptr inbounds [4 x i16]* %291, i64 -1
  %293 = getelementptr inbounds [4 x i16]* %292, i32 0, i64 1
  %294 = load i16* %293, align 2
  %295 = zext i16 %294 to i32
  %296 = icmp slt i32 %290, %295
  br i1 %296, label %297, label %299

; <label>:297                                     ; preds = %284
  %298 = load i32* %val, align 4
  br label %305

; <label>:299                                     ; preds = %284
  %300 = load [4 x i16]** %pix, align 8
  %301 = getelementptr inbounds [4 x i16]* %300, i64 -1
  %302 = getelementptr inbounds [4 x i16]* %301, i32 0, i64 1
  %303 = load i16* %302, align 2
  %304 = zext i16 %303 to i32
  br label %305

; <label>:305                                     ; preds = %299, %297
  %306 = phi i32 [ %298, %297 ], [ %304, %299 ]
  %307 = icmp sgt i32 %289, %306
  br i1 %307, label %308, label %314

; <label>:308                                     ; preds = %305
  %309 = load [4 x i16]** %pix, align 8
  %310 = getelementptr inbounds [4 x i16]* %309, i64 1
  %311 = getelementptr inbounds [4 x i16]* %310, i32 0, i64 1
  %312 = load i16* %311, align 2
  %313 = zext i16 %312 to i32
  br label %332

; <label>:314                                     ; preds = %305
  %315 = load i32* %val, align 4
  %316 = load [4 x i16]** %pix, align 8
  %317 = getelementptr inbounds [4 x i16]* %316, i64 -1
  %318 = getelementptr inbounds [4 x i16]* %317, i32 0, i64 1
  %319 = load i16* %318, align 2
  %320 = zext i16 %319 to i32
  %321 = icmp slt i32 %315, %320
  br i1 %321, label %322, label %324

; <label>:322                                     ; preds = %314
  %323 = load i32* %val, align 4
  br label %330

; <label>:324                                     ; preds = %314
  %325 = load [4 x i16]** %pix, align 8
  %326 = getelementptr inbounds [4 x i16]* %325, i64 -1
  %327 = getelementptr inbounds [4 x i16]* %326, i32 0, i64 1
  %328 = load i16* %327, align 2
  %329 = zext i16 %328 to i32
  br label %330

; <label>:330                                     ; preds = %324, %322
  %331 = phi i32 [ %323, %322 ], [ %329, %324 ]
  br label %332

; <label>:332                                     ; preds = %330, %308
  %333 = phi i32 [ %313, %308 ], [ %331, %330 ]
  br label %334

; <label>:334                                     ; preds = %332, %282
  %335 = phi i32 [ %283, %282 ], [ %333, %332 ]
  %336 = trunc i32 %335 to i16
  %337 = load i32* %col, align 4
  %338 = load i32* %left, align 4
  %339 = sub nsw i32 %337, %338
  %340 = sext i32 %339 to i64
  %341 = load i32* %row, align 4
  %342 = load i32* %top, align 4
  %343 = sub nsw i32 %341, %342
  %344 = sext i32 %343 to i64
  %345 = load [256 x [256 x [3 x i16]]]** %rgb, align 8
  %346 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %345, i64 0
  %347 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %346, i32 0, i64 %344
  %348 = getelementptr inbounds [256 x [3 x i16]]* %347, i32 0, i64 %340
  %349 = getelementptr inbounds [3 x i16]* %348, i32 0, i64 1
  store i16 %336, i16* %349, align 2
  %350 = load i16* @width, align 2
  %351 = zext i16 %350 to i32
  %352 = sub nsw i32 0, %351
  %353 = sext i32 %352 to i64
  %354 = load [4 x i16]** %pix, align 8
  %355 = getelementptr inbounds [4 x i16]* %354, i64 %353
  %356 = getelementptr inbounds [4 x i16]* %355, i32 0, i64 1
  %357 = load i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = load i32* %c, align 4
  %360 = sext i32 %359 to i64
  %361 = load [4 x i16]** %pix, align 8
  %362 = getelementptr inbounds [4 x i16]* %361, i64 0
  %363 = getelementptr inbounds [4 x i16]* %362, i32 0, i64 %360
  %364 = load i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nsw i32 %358, %365
  %367 = load i16* @width, align 2
  %368 = zext i16 %367 to i64
  %369 = load [4 x i16]** %pix, align 8
  %370 = getelementptr inbounds [4 x i16]* %369, i64 %368
  %371 = getelementptr inbounds [4 x i16]* %370, i32 0, i64 1
  %372 = load i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nsw i32 %366, %373
  %375 = mul nsw i32 %374, 2
  %376 = load i32* %c, align 4
  %377 = sext i32 %376 to i64
  %378 = load i16* @width, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nsw i32 -2, %379
  %381 = sext i32 %380 to i64
  %382 = load [4 x i16]** %pix, align 8
  %383 = getelementptr inbounds [4 x i16]* %382, i64 %381
  %384 = getelementptr inbounds [4 x i16]* %383, i32 0, i64 %377
  %385 = load i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = sub nsw i32 %375, %386
  %388 = load i32* %c, align 4
  %389 = sext i32 %388 to i64
  %390 = load i16* @width, align 2
  %391 = zext i16 %390 to i32
  %392 = mul nsw i32 2, %391
  %393 = sext i32 %392 to i64
  %394 = load [4 x i16]** %pix, align 8
  %395 = getelementptr inbounds [4 x i16]* %394, i64 %393
  %396 = getelementptr inbounds [4 x i16]* %395, i32 0, i64 %389
  %397 = load i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = sub nsw i32 %387, %398
  %400 = ashr i32 %399, 2
  store i32 %400, i32* %val, align 4
  %401 = load i16* @width, align 2
  %402 = zext i16 %401 to i32
  %403 = sub nsw i32 0, %402
  %404 = sext i32 %403 to i64
  %405 = load [4 x i16]** %pix, align 8
  %406 = getelementptr inbounds [4 x i16]* %405, i64 %404
  %407 = getelementptr inbounds [4 x i16]* %406, i32 0, i64 1
  %408 = load i16* %407, align 2
  %409 = zext i16 %408 to i32
  %410 = load i16* @width, align 2
  %411 = zext i16 %410 to i64
  %412 = load [4 x i16]** %pix, align 8
  %413 = getelementptr inbounds [4 x i16]* %412, i64 %411
  %414 = getelementptr inbounds [4 x i16]* %413, i32 0, i64 1
  %415 = load i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = icmp slt i32 %409, %416
  br i1 %417, label %418, label %484

; <label>:418                                     ; preds = %334
  %419 = load i16* @width, align 2
  %420 = zext i16 %419 to i32
  %421 = sub nsw i32 0, %420
  %422 = sext i32 %421 to i64
  %423 = load [4 x i16]** %pix, align 8
  %424 = getelementptr inbounds [4 x i16]* %423, i64 %422
  %425 = getelementptr inbounds [4 x i16]* %424, i32 0, i64 1
  %426 = load i16* %425, align 2
  %427 = zext i16 %426 to i32
  %428 = load i32* %val, align 4
  %429 = load i16* @width, align 2
  %430 = zext i16 %429 to i64
  %431 = load [4 x i16]** %pix, align 8
  %432 = getelementptr inbounds [4 x i16]* %431, i64 %430
  %433 = getelementptr inbounds [4 x i16]* %432, i32 0, i64 1
  %434 = load i16* %433, align 2
  %435 = zext i16 %434 to i32
  %436 = icmp slt i32 %428, %435
  br i1 %436, label %437, label %439

; <label>:437                                     ; preds = %418
  %438 = load i32* %val, align 4
  br label %447

; <label>:439                                     ; preds = %418
  %440 = load i16* @width, align 2
  %441 = zext i16 %440 to i64
  %442 = load [4 x i16]** %pix, align 8
  %443 = getelementptr inbounds [4 x i16]* %442, i64 %441
  %444 = getelementptr inbounds [4 x i16]* %443, i32 0, i64 1
  %445 = load i16* %444, align 2
  %446 = zext i16 %445 to i32
  br label %447

; <label>:447                                     ; preds = %439, %437
  %448 = phi i32 [ %438, %437 ], [ %446, %439 ]
  %449 = icmp sgt i32 %427, %448
  br i1 %449, label %450, label %460

; <label>:450                                     ; preds = %447
  %451 = load i16* @width, align 2
  %452 = zext i16 %451 to i32
  %453 = sub nsw i32 0, %452
  %454 = sext i32 %453 to i64
  %455 = load [4 x i16]** %pix, align 8
  %456 = getelementptr inbounds [4 x i16]* %455, i64 %454
  %457 = getelementptr inbounds [4 x i16]* %456, i32 0, i64 1
  %458 = load i16* %457, align 2
  %459 = zext i16 %458 to i32
  br label %482

; <label>:460                                     ; preds = %447
  %461 = load i32* %val, align 4
  %462 = load i16* @width, align 2
  %463 = zext i16 %462 to i64
  %464 = load [4 x i16]** %pix, align 8
  %465 = getelementptr inbounds [4 x i16]* %464, i64 %463
  %466 = getelementptr inbounds [4 x i16]* %465, i32 0, i64 1
  %467 = load i16* %466, align 2
  %468 = zext i16 %467 to i32
  %469 = icmp slt i32 %461, %468
  br i1 %469, label %470, label %472

; <label>:470                                     ; preds = %460
  %471 = load i32* %val, align 4
  br label %480

; <label>:472                                     ; preds = %460
  %473 = load i16* @width, align 2
  %474 = zext i16 %473 to i64
  %475 = load [4 x i16]** %pix, align 8
  %476 = getelementptr inbounds [4 x i16]* %475, i64 %474
  %477 = getelementptr inbounds [4 x i16]* %476, i32 0, i64 1
  %478 = load i16* %477, align 2
  %479 = zext i16 %478 to i32
  br label %480

; <label>:480                                     ; preds = %472, %470
  %481 = phi i32 [ %471, %470 ], [ %479, %472 ]
  br label %482

; <label>:482                                     ; preds = %480, %450
  %483 = phi i32 [ %459, %450 ], [ %481, %480 ]
  br label %554

; <label>:484                                     ; preds = %334
  %485 = load i16* @width, align 2
  %486 = zext i16 %485 to i64
  %487 = load [4 x i16]** %pix, align 8
  %488 = getelementptr inbounds [4 x i16]* %487, i64 %486
  %489 = getelementptr inbounds [4 x i16]* %488, i32 0, i64 1
  %490 = load i16* %489, align 2
  %491 = zext i16 %490 to i32
  %492 = load i32* %val, align 4
  %493 = load i16* @width, align 2
  %494 = zext i16 %493 to i32
  %495 = sub nsw i32 0, %494
  %496 = sext i32 %495 to i64
  %497 = load [4 x i16]** %pix, align 8
  %498 = getelementptr inbounds [4 x i16]* %497, i64 %496
  %499 = getelementptr inbounds [4 x i16]* %498, i32 0, i64 1
  %500 = load i16* %499, align 2
  %501 = zext i16 %500 to i32
  %502 = icmp slt i32 %492, %501
  br i1 %502, label %503, label %505

; <label>:503                                     ; preds = %484
  %504 = load i32* %val, align 4
  br label %515

; <label>:505                                     ; preds = %484
  %506 = load i16* @width, align 2
  %507 = zext i16 %506 to i32
  %508 = sub nsw i32 0, %507
  %509 = sext i32 %508 to i64
  %510 = load [4 x i16]** %pix, align 8
  %511 = getelementptr inbounds [4 x i16]* %510, i64 %509
  %512 = getelementptr inbounds [4 x i16]* %511, i32 0, i64 1
  %513 = load i16* %512, align 2
  %514 = zext i16 %513 to i32
  br label %515

; <label>:515                                     ; preds = %505, %503
  %516 = phi i32 [ %504, %503 ], [ %514, %505 ]
  %517 = icmp sgt i32 %491, %516
  br i1 %517, label %518, label %526

; <label>:518                                     ; preds = %515
  %519 = load i16* @width, align 2
  %520 = zext i16 %519 to i64
  %521 = load [4 x i16]** %pix, align 8
  %522 = getelementptr inbounds [4 x i16]* %521, i64 %520
  %523 = getelementptr inbounds [4 x i16]* %522, i32 0, i64 1
  %524 = load i16* %523, align 2
  %525 = zext i16 %524 to i32
  br label %552

; <label>:526                                     ; preds = %515
  %527 = load i32* %val, align 4
  %528 = load i16* @width, align 2
  %529 = zext i16 %528 to i32
  %530 = sub nsw i32 0, %529
  %531 = sext i32 %530 to i64
  %532 = load [4 x i16]** %pix, align 8
  %533 = getelementptr inbounds [4 x i16]* %532, i64 %531
  %534 = getelementptr inbounds [4 x i16]* %533, i32 0, i64 1
  %535 = load i16* %534, align 2
  %536 = zext i16 %535 to i32
  %537 = icmp slt i32 %527, %536
  br i1 %537, label %538, label %540

; <label>:538                                     ; preds = %526
  %539 = load i32* %val, align 4
  br label %550

; <label>:540                                     ; preds = %526
  %541 = load i16* @width, align 2
  %542 = zext i16 %541 to i32
  %543 = sub nsw i32 0, %542
  %544 = sext i32 %543 to i64
  %545 = load [4 x i16]** %pix, align 8
  %546 = getelementptr inbounds [4 x i16]* %545, i64 %544
  %547 = getelementptr inbounds [4 x i16]* %546, i32 0, i64 1
  %548 = load i16* %547, align 2
  %549 = zext i16 %548 to i32
  br label %550

; <label>:550                                     ; preds = %540, %538
  %551 = phi i32 [ %539, %538 ], [ %549, %540 ]
  br label %552

; <label>:552                                     ; preds = %550, %518
  %553 = phi i32 [ %525, %518 ], [ %551, %550 ]
  br label %554

; <label>:554                                     ; preds = %552, %482
  %555 = phi i32 [ %483, %482 ], [ %553, %552 ]
  %556 = trunc i32 %555 to i16
  %557 = load i32* %col, align 4
  %558 = load i32* %left, align 4
  %559 = sub nsw i32 %557, %558
  %560 = sext i32 %559 to i64
  %561 = load i32* %row, align 4
  %562 = load i32* %top, align 4
  %563 = sub nsw i32 %561, %562
  %564 = sext i32 %563 to i64
  %565 = load [256 x [256 x [3 x i16]]]** %rgb, align 8
  %566 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %565, i64 1
  %567 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %566, i32 0, i64 %564
  %568 = getelementptr inbounds [256 x [3 x i16]]* %567, i32 0, i64 %560
  %569 = getelementptr inbounds [3 x i16]* %568, i32 0, i64 1
  store i16 %556, i16* %569, align 2
  br label %570

; <label>:570                                     ; preds = %554
  %571 = load i32* %col, align 4
  %572 = add nsw i32 %571, 2
  store i32 %572, i32* %col, align 4
  br label %162

; <label>:573                                     ; preds = %173
  br label %574

; <label>:574                                     ; preds = %573
  %575 = load i32* %row, align 4
  %576 = add nsw i32 %575, 1
  store i32 %576, i32* %row, align 4
  br label %125

; <label>:577                                     ; preds = %136
  store i32 0, i32* %d, align 4
  br label %578

; <label>:578                                     ; preds = %1102, %577
  %579 = load i32* %d, align 4
  %580 = icmp slt i32 %579, 2
  br i1 %580, label %581, label %1105

; <label>:581                                     ; preds = %578
  %582 = load i32* %top, align 4
  %583 = add nsw i32 %582, 1
  store i32 %583, i32* %row, align 4
  br label %584

; <label>:584                                     ; preds = %1098, %581
  %585 = load i32* %row, align 4
  %586 = load i32* %top, align 4
  %587 = add nsw i32 %586, 256
  %588 = sub nsw i32 %587, 1
  %589 = icmp slt i32 %585, %588
  br i1 %589, label %590, label %596

; <label>:590                                     ; preds = %584
  %591 = load i32* %row, align 4
  %592 = load i16* @height, align 2
  %593 = zext i16 %592 to i32
  %594 = sub nsw i32 %593, 3
  %595 = icmp slt i32 %591, %594
  br label %596

; <label>:596                                     ; preds = %590, %584
  %597 = phi i1 [ false, %584 ], [ %595, %590 ]
  br i1 %597, label %598, label %1101

; <label>:598                                     ; preds = %596
  %599 = load i32* %left, align 4
  %600 = add nsw i32 %599, 1
  store i32 %600, i32* %col, align 4
  br label %601

; <label>:601                                     ; preds = %1094, %598
  %602 = load i32* %col, align 4
  %603 = load i32* %left, align 4
  %604 = add nsw i32 %603, 256
  %605 = sub nsw i32 %604, 1
  %606 = icmp slt i32 %602, %605
  br i1 %606, label %607, label %613

; <label>:607                                     ; preds = %601
  %608 = load i32* %col, align 4
  %609 = load i16* @width, align 2
  %610 = zext i16 %609 to i32
  %611 = sub nsw i32 %610, 3
  %612 = icmp slt i32 %608, %611
  br label %613

; <label>:613                                     ; preds = %607, %601
  %614 = phi i1 [ false, %601 ], [ %612, %607 ]
  br i1 %614, label %615, label %1097

; <label>:615                                     ; preds = %613
  %616 = load [4 x i16]** @image, align 8
  %617 = load i32* %row, align 4
  %618 = load i16* @width, align 2
  %619 = zext i16 %618 to i32
  %620 = mul nsw i32 %617, %619
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds [4 x i16]* %616, i64 %621
  %623 = load i32* %col, align 4
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds [4 x i16]* %622, i64 %624
  store [4 x i16]* %625, [4 x i16]** %pix, align 8
  %626 = load i32* %col, align 4
  %627 = load i32* %left, align 4
  %628 = sub nsw i32 %626, %627
  %629 = sext i32 %628 to i64
  %630 = load i32* %row, align 4
  %631 = load i32* %top, align 4
  %632 = sub nsw i32 %630, %631
  %633 = sext i32 %632 to i64
  %634 = load i32* %d, align 4
  %635 = sext i32 %634 to i64
  %636 = load [256 x [256 x [3 x i16]]]** %rgb, align 8
  %637 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %636, i64 %635
  %638 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %637, i32 0, i64 %633
  %639 = getelementptr inbounds [256 x [3 x i16]]* %638, i32 0, i64 %629
  store [3 x i16]* %639, [3 x i16]** %rix, align 8
  %640 = load i32* %col, align 4
  %641 = load i32* %left, align 4
  %642 = sub nsw i32 %640, %641
  %643 = sext i32 %642 to i64
  %644 = load i32* %row, align 4
  %645 = load i32* %top, align 4
  %646 = sub nsw i32 %644, %645
  %647 = sext i32 %646 to i64
  %648 = load i32* %d, align 4
  %649 = sext i32 %648 to i64
  %650 = load [256 x [256 x [3 x i16]]]** %lab, align 8
  %651 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %650, i64 %649
  %652 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %651, i32 0, i64 %647
  %653 = getelementptr inbounds [256 x [3 x i16]]* %652, i32 0, i64 %643
  store [3 x i16]* %653, [3 x i16]** %lix, align 8
  %654 = load i32* @filters, align 4
  %655 = load i32* %row, align 4
  %656 = shl i32 %655, 1
  %657 = and i32 %656, 14
  %658 = load i32* %col, align 4
  %659 = and i32 %658, 1
  %660 = add nsw i32 %657, %659
  %661 = shl i32 %660, 1
  %662 = lshr i32 %654, %661
  %663 = and i32 %662, 3
  %664 = sub i32 2, %663
  store i32 %664, i32* %c, align 4
  %665 = icmp eq i32 %664, 1
  br i1 %665, label %666, label %780

; <label>:666                                     ; preds = %615
  %667 = load i32* @filters, align 4
  %668 = load i32* %row, align 4
  %669 = add nsw i32 %668, 1
  %670 = shl i32 %669, 1
  %671 = and i32 %670, 14
  %672 = load i32* %col, align 4
  %673 = and i32 %672, 1
  %674 = add nsw i32 %671, %673
  %675 = shl i32 %674, 1
  %676 = lshr i32 %667, %675
  %677 = and i32 %676, 3
  store i32 %677, i32* %c, align 4
  %678 = load [4 x i16]** %pix, align 8
  %679 = getelementptr inbounds [4 x i16]* %678, i64 0
  %680 = getelementptr inbounds [4 x i16]* %679, i32 0, i64 1
  %681 = load i16* %680, align 2
  %682 = zext i16 %681 to i32
  %683 = load i32* %c, align 4
  %684 = sub nsw i32 2, %683
  %685 = sext i32 %684 to i64
  %686 = load [4 x i16]** %pix, align 8
  %687 = getelementptr inbounds [4 x i16]* %686, i64 -1
  %688 = getelementptr inbounds [4 x i16]* %687, i32 0, i64 %685
  %689 = load i16* %688, align 2
  %690 = zext i16 %689 to i32
  %691 = load i32* %c, align 4
  %692 = sub nsw i32 2, %691
  %693 = sext i32 %692 to i64
  %694 = load [4 x i16]** %pix, align 8
  %695 = getelementptr inbounds [4 x i16]* %694, i64 1
  %696 = getelementptr inbounds [4 x i16]* %695, i32 0, i64 %693
  %697 = load i16* %696, align 2
  %698 = zext i16 %697 to i32
  %699 = add nsw i32 %690, %698
  %700 = load [3 x i16]** %rix, align 8
  %701 = getelementptr inbounds [3 x i16]* %700, i64 -1
  %702 = getelementptr inbounds [3 x i16]* %701, i32 0, i64 1
  %703 = load i16* %702, align 2
  %704 = zext i16 %703 to i32
  %705 = sub nsw i32 %699, %704
  %706 = load [3 x i16]** %rix, align 8
  %707 = getelementptr inbounds [3 x i16]* %706, i64 1
  %708 = getelementptr inbounds [3 x i16]* %707, i32 0, i64 1
  %709 = load i16* %708, align 2
  %710 = zext i16 %709 to i32
  %711 = sub nsw i32 %705, %710
  %712 = ashr i32 %711, 1
  %713 = add nsw i32 %682, %712
  store i32 %713, i32* %val, align 4
  %714 = load i32* %val, align 4
  %715 = icmp slt i32 %714, 65535
  br i1 %715, label %716, label %718

; <label>:716                                     ; preds = %666
  %717 = load i32* %val, align 4
  br label %719

; <label>:718                                     ; preds = %666
  br label %719

; <label>:719                                     ; preds = %718, %716
  %720 = phi i32 [ %717, %716 ], [ 65535, %718 ]
  %721 = icmp sgt i32 0, %720
  br i1 %721, label %722, label %723

; <label>:722                                     ; preds = %719
  br label %731

; <label>:723                                     ; preds = %719
  %724 = load i32* %val, align 4
  %725 = icmp slt i32 %724, 65535
  br i1 %725, label %726, label %728

; <label>:726                                     ; preds = %723
  %727 = load i32* %val, align 4
  br label %729

; <label>:728                                     ; preds = %723
  br label %729

; <label>:729                                     ; preds = %728, %726
  %730 = phi i32 [ %727, %726 ], [ 65535, %728 ]
  br label %731

; <label>:731                                     ; preds = %729, %722
  %732 = phi i32 [ 0, %722 ], [ %730, %729 ]
  %733 = trunc i32 %732 to i16
  %734 = load i32* %c, align 4
  %735 = sub nsw i32 2, %734
  %736 = sext i32 %735 to i64
  %737 = load [3 x i16]** %rix, align 8
  %738 = getelementptr inbounds [3 x i16]* %737, i64 0
  %739 = getelementptr inbounds [3 x i16]* %738, i32 0, i64 %736
  store i16 %733, i16* %739, align 2
  %740 = load [4 x i16]** %pix, align 8
  %741 = getelementptr inbounds [4 x i16]* %740, i64 0
  %742 = getelementptr inbounds [4 x i16]* %741, i32 0, i64 1
  %743 = load i16* %742, align 2
  %744 = zext i16 %743 to i32
  %745 = load i32* %c, align 4
  %746 = sext i32 %745 to i64
  %747 = load i16* @width, align 2
  %748 = zext i16 %747 to i32
  %749 = sub nsw i32 0, %748
  %750 = sext i32 %749 to i64
  %751 = load [4 x i16]** %pix, align 8
  %752 = getelementptr inbounds [4 x i16]* %751, i64 %750
  %753 = getelementptr inbounds [4 x i16]* %752, i32 0, i64 %746
  %754 = load i16* %753, align 2
  %755 = zext i16 %754 to i32
  %756 = load i32* %c, align 4
  %757 = sext i32 %756 to i64
  %758 = load i16* @width, align 2
  %759 = zext i16 %758 to i64
  %760 = load [4 x i16]** %pix, align 8
  %761 = getelementptr inbounds [4 x i16]* %760, i64 %759
  %762 = getelementptr inbounds [4 x i16]* %761, i32 0, i64 %757
  %763 = load i16* %762, align 2
  %764 = zext i16 %763 to i32
  %765 = add nsw i32 %755, %764
  %766 = load [3 x i16]** %rix, align 8
  %767 = getelementptr inbounds [3 x i16]* %766, i64 -256
  %768 = getelementptr inbounds [3 x i16]* %767, i32 0, i64 1
  %769 = load i16* %768, align 2
  %770 = zext i16 %769 to i32
  %771 = sub nsw i32 %765, %770
  %772 = load [3 x i16]** %rix, align 8
  %773 = getelementptr inbounds [3 x i16]* %772, i64 256
  %774 = getelementptr inbounds [3 x i16]* %773, i32 0, i64 1
  %775 = load i16* %774, align 2
  %776 = zext i16 %775 to i32
  %777 = sub nsw i32 %771, %776
  %778 = ashr i32 %777, 1
  %779 = add nsw i32 %744, %778
  store i32 %779, i32* %val, align 4
  br label %862

; <label>:780                                     ; preds = %615
  %781 = load [3 x i16]** %rix, align 8
  %782 = getelementptr inbounds [3 x i16]* %781, i64 0
  %783 = getelementptr inbounds [3 x i16]* %782, i32 0, i64 1
  %784 = load i16* %783, align 2
  %785 = zext i16 %784 to i32
  %786 = load i32* %c, align 4
  %787 = sext i32 %786 to i64
  %788 = load i16* @width, align 2
  %789 = zext i16 %788 to i32
  %790 = sub nsw i32 0, %789
  %791 = sub nsw i32 %790, 1
  %792 = sext i32 %791 to i64
  %793 = load [4 x i16]** %pix, align 8
  %794 = getelementptr inbounds [4 x i16]* %793, i64 %792
  %795 = getelementptr inbounds [4 x i16]* %794, i32 0, i64 %787
  %796 = load i16* %795, align 2
  %797 = zext i16 %796 to i32
  %798 = load i32* %c, align 4
  %799 = sext i32 %798 to i64
  %800 = load i16* @width, align 2
  %801 = zext i16 %800 to i32
  %802 = sub nsw i32 0, %801
  %803 = add nsw i32 %802, 1
  %804 = sext i32 %803 to i64
  %805 = load [4 x i16]** %pix, align 8
  %806 = getelementptr inbounds [4 x i16]* %805, i64 %804
  %807 = getelementptr inbounds [4 x i16]* %806, i32 0, i64 %799
  %808 = load i16* %807, align 2
  %809 = zext i16 %808 to i32
  %810 = add nsw i32 %797, %809
  %811 = load i32* %c, align 4
  %812 = sext i32 %811 to i64
  %813 = load i16* @width, align 2
  %814 = zext i16 %813 to i32
  %815 = sub nsw i32 %814, 1
  %816 = sext i32 %815 to i64
  %817 = load [4 x i16]** %pix, align 8
  %818 = getelementptr inbounds [4 x i16]* %817, i64 %816
  %819 = getelementptr inbounds [4 x i16]* %818, i32 0, i64 %812
  %820 = load i16* %819, align 2
  %821 = zext i16 %820 to i32
  %822 = add nsw i32 %810, %821
  %823 = load i32* %c, align 4
  %824 = sext i32 %823 to i64
  %825 = load i16* @width, align 2
  %826 = zext i16 %825 to i32
  %827 = add nsw i32 %826, 1
  %828 = sext i32 %827 to i64
  %829 = load [4 x i16]** %pix, align 8
  %830 = getelementptr inbounds [4 x i16]* %829, i64 %828
  %831 = getelementptr inbounds [4 x i16]* %830, i32 0, i64 %824
  %832 = load i16* %831, align 2
  %833 = zext i16 %832 to i32
  %834 = add nsw i32 %822, %833
  %835 = load [3 x i16]** %rix, align 8
  %836 = getelementptr inbounds [3 x i16]* %835, i64 -257
  %837 = getelementptr inbounds [3 x i16]* %836, i32 0, i64 1
  %838 = load i16* %837, align 2
  %839 = zext i16 %838 to i32
  %840 = sub nsw i32 %834, %839
  %841 = load [3 x i16]** %rix, align 8
  %842 = getelementptr inbounds [3 x i16]* %841, i64 -255
  %843 = getelementptr inbounds [3 x i16]* %842, i32 0, i64 1
  %844 = load i16* %843, align 2
  %845 = zext i16 %844 to i32
  %846 = sub nsw i32 %840, %845
  %847 = load [3 x i16]** %rix, align 8
  %848 = getelementptr inbounds [3 x i16]* %847, i64 255
  %849 = getelementptr inbounds [3 x i16]* %848, i32 0, i64 1
  %850 = load i16* %849, align 2
  %851 = zext i16 %850 to i32
  %852 = sub nsw i32 %846, %851
  %853 = load [3 x i16]** %rix, align 8
  %854 = getelementptr inbounds [3 x i16]* %853, i64 257
  %855 = getelementptr inbounds [3 x i16]* %854, i32 0, i64 1
  %856 = load i16* %855, align 2
  %857 = zext i16 %856 to i32
  %858 = sub nsw i32 %852, %857
  %859 = add nsw i32 %858, 1
  %860 = ashr i32 %859, 2
  %861 = add nsw i32 %785, %860
  store i32 %861, i32* %val, align 4
  br label %862

; <label>:862                                     ; preds = %780, %731
  %863 = load i32* %val, align 4
  %864 = icmp slt i32 %863, 65535
  br i1 %864, label %865, label %867

; <label>:865                                     ; preds = %862
  %866 = load i32* %val, align 4
  br label %868

; <label>:867                                     ; preds = %862
  br label %868

; <label>:868                                     ; preds = %867, %865
  %869 = phi i32 [ %866, %865 ], [ 65535, %867 ]
  %870 = icmp sgt i32 0, %869
  br i1 %870, label %871, label %872

; <label>:871                                     ; preds = %868
  br label %880

; <label>:872                                     ; preds = %868
  %873 = load i32* %val, align 4
  %874 = icmp slt i32 %873, 65535
  br i1 %874, label %875, label %877

; <label>:875                                     ; preds = %872
  %876 = load i32* %val, align 4
  br label %878

; <label>:877                                     ; preds = %872
  br label %878

; <label>:878                                     ; preds = %877, %875
  %879 = phi i32 [ %876, %875 ], [ 65535, %877 ]
  br label %880

; <label>:880                                     ; preds = %878, %871
  %881 = phi i32 [ 0, %871 ], [ %879, %878 ]
  %882 = trunc i32 %881 to i16
  %883 = load i32* %c, align 4
  %884 = sext i32 %883 to i64
  %885 = load [3 x i16]** %rix, align 8
  %886 = getelementptr inbounds [3 x i16]* %885, i64 0
  %887 = getelementptr inbounds [3 x i16]* %886, i32 0, i64 %884
  store i16 %882, i16* %887, align 2
  %888 = load i32* @filters, align 4
  %889 = load i32* %row, align 4
  %890 = shl i32 %889, 1
  %891 = and i32 %890, 14
  %892 = load i32* %col, align 4
  %893 = and i32 %892, 1
  %894 = add nsw i32 %891, %893
  %895 = shl i32 %894, 1
  %896 = lshr i32 %888, %895
  %897 = and i32 %896, 3
  store i32 %897, i32* %c, align 4
  %898 = load i32* %c, align 4
  %899 = sext i32 %898 to i64
  %900 = load [4 x i16]** %pix, align 8
  %901 = getelementptr inbounds [4 x i16]* %900, i64 0
  %902 = getelementptr inbounds [4 x i16]* %901, i32 0, i64 %899
  %903 = load i16* %902, align 2
  %904 = load i32* %c, align 4
  %905 = sext i32 %904 to i64
  %906 = load [3 x i16]** %rix, align 8
  %907 = getelementptr inbounds [3 x i16]* %906, i64 0
  %908 = getelementptr inbounds [3 x i16]* %907, i32 0, i64 %905
  store i16 %903, i16* %908, align 2
  %909 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  store float 5.000000e-01, float* %909, align 4
  %910 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  store float 5.000000e-01, float* %910, align 4
  %911 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  store float 5.000000e-01, float* %911, align 4
  store i32 0, i32* %c, align 4
  br label %912

; <label>:912                                     ; preds = %968, %880
  %913 = load i32* %c, align 4
  %914 = load i32* @colors, align 4
  %915 = icmp slt i32 %913, %914
  br i1 %915, label %916, label %971

; <label>:916                                     ; preds = %912
  %917 = load i32* %c, align 4
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 0
  %920 = getelementptr inbounds [4 x float]* %919, i32 0, i64 %918
  %921 = load float* %920, align 4
  %922 = load i32* %c, align 4
  %923 = sext i32 %922 to i64
  %924 = load [3 x i16]** %rix, align 8
  %925 = getelementptr inbounds [3 x i16]* %924, i64 0
  %926 = getelementptr inbounds [3 x i16]* %925, i32 0, i64 %923
  %927 = load i16* %926, align 2
  %928 = zext i16 %927 to i32
  %929 = sitofp i32 %928 to float
  %930 = fmul float %921, %929
  %931 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %932 = load float* %931, align 4
  %933 = fadd float %932, %930
  store float %933, float* %931, align 4
  %934 = load i32* %c, align 4
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 1
  %937 = getelementptr inbounds [4 x float]* %936, i32 0, i64 %935
  %938 = load float* %937, align 4
  %939 = load i32* %c, align 4
  %940 = sext i32 %939 to i64
  %941 = load [3 x i16]** %rix, align 8
  %942 = getelementptr inbounds [3 x i16]* %941, i64 0
  %943 = getelementptr inbounds [3 x i16]* %942, i32 0, i64 %940
  %944 = load i16* %943, align 2
  %945 = zext i16 %944 to i32
  %946 = sitofp i32 %945 to float
  %947 = fmul float %938, %946
  %948 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %949 = load float* %948, align 4
  %950 = fadd float %949, %947
  store float %950, float* %948, align 4
  %951 = load i32* %c, align 4
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds [3 x [4 x float]]* %xyz_cam, i32 0, i64 2
  %954 = getelementptr inbounds [4 x float]* %953, i32 0, i64 %952
  %955 = load float* %954, align 4
  %956 = load i32* %c, align 4
  %957 = sext i32 %956 to i64
  %958 = load [3 x i16]** %rix, align 8
  %959 = getelementptr inbounds [3 x i16]* %958, i64 0
  %960 = getelementptr inbounds [3 x i16]* %959, i32 0, i64 %957
  %961 = load i16* %960, align 2
  %962 = zext i16 %961 to i32
  %963 = sitofp i32 %962 to float
  %964 = fmul float %955, %963
  %965 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %966 = load float* %965, align 4
  %967 = fadd float %966, %964
  store float %967, float* %965, align 4
  br label %968

; <label>:968                                     ; preds = %916
  %969 = load i32* %c, align 4
  %970 = add nsw i32 %969, 1
  store i32 %970, i32* %c, align 4
  br label %912

; <label>:971                                     ; preds = %912
  %972 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %973 = load float* %972, align 4
  %974 = fptosi float %973 to i32
  %975 = icmp slt i32 %974, 65535
  br i1 %975, label %976, label %980

; <label>:976                                     ; preds = %971
  %977 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %978 = load float* %977, align 4
  %979 = fptosi float %978 to i32
  br label %981

; <label>:980                                     ; preds = %971
  br label %981

; <label>:981                                     ; preds = %980, %976
  %982 = phi i32 [ %979, %976 ], [ 65535, %980 ]
  %983 = icmp sgt i32 0, %982
  br i1 %983, label %984, label %985

; <label>:984                                     ; preds = %981
  br label %997

; <label>:985                                     ; preds = %981
  %986 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %987 = load float* %986, align 4
  %988 = fptosi float %987 to i32
  %989 = icmp slt i32 %988, 65535
  br i1 %989, label %990, label %994

; <label>:990                                     ; preds = %985
  %991 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %992 = load float* %991, align 4
  %993 = fptosi float %992 to i32
  br label %995

; <label>:994                                     ; preds = %985
  br label %995

; <label>:995                                     ; preds = %994, %990
  %996 = phi i32 [ %993, %990 ], [ 65535, %994 ]
  br label %997

; <label>:997                                     ; preds = %995, %984
  %998 = phi i32 [ 0, %984 ], [ %996, %995 ]
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %999
  %1001 = load float* %1000, align 4
  %1002 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  store float %1001, float* %1002, align 4
  %1003 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1004 = load float* %1003, align 4
  %1005 = fptosi float %1004 to i32
  %1006 = icmp slt i32 %1005, 65535
  br i1 %1006, label %1007, label %1011

; <label>:1007                                    ; preds = %997
  %1008 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1009 = load float* %1008, align 4
  %1010 = fptosi float %1009 to i32
  br label %1012

; <label>:1011                                    ; preds = %997
  br label %1012

; <label>:1012                                    ; preds = %1011, %1007
  %1013 = phi i32 [ %1010, %1007 ], [ 65535, %1011 ]
  %1014 = icmp sgt i32 0, %1013
  br i1 %1014, label %1015, label %1016

; <label>:1015                                    ; preds = %1012
  br label %1028

; <label>:1016                                    ; preds = %1012
  %1017 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1018 = load float* %1017, align 4
  %1019 = fptosi float %1018 to i32
  %1020 = icmp slt i32 %1019, 65535
  br i1 %1020, label %1021, label %1025

; <label>:1021                                    ; preds = %1016
  %1022 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1023 = load float* %1022, align 4
  %1024 = fptosi float %1023 to i32
  br label %1026

; <label>:1025                                    ; preds = %1016
  br label %1026

; <label>:1026                                    ; preds = %1025, %1021
  %1027 = phi i32 [ %1024, %1021 ], [ 65535, %1025 ]
  br label %1028

; <label>:1028                                    ; preds = %1026, %1015
  %1029 = phi i32 [ 0, %1015 ], [ %1027, %1026 ]
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %1030
  %1032 = load float* %1031, align 4
  %1033 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  store float %1032, float* %1033, align 4
  %1034 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %1035 = load float* %1034, align 4
  %1036 = fptosi float %1035 to i32
  %1037 = icmp slt i32 %1036, 65535
  br i1 %1037, label %1038, label %1042

; <label>:1038                                    ; preds = %1028
  %1039 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %1040 = load float* %1039, align 4
  %1041 = fptosi float %1040 to i32
  br label %1043

; <label>:1042                                    ; preds = %1028
  br label %1043

; <label>:1043                                    ; preds = %1042, %1038
  %1044 = phi i32 [ %1041, %1038 ], [ 65535, %1042 ]
  %1045 = icmp sgt i32 0, %1044
  br i1 %1045, label %1046, label %1047

; <label>:1046                                    ; preds = %1043
  br label %1059

; <label>:1047                                    ; preds = %1043
  %1048 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %1049 = load float* %1048, align 4
  %1050 = fptosi float %1049 to i32
  %1051 = icmp slt i32 %1050, 65535
  br i1 %1051, label %1052, label %1056

; <label>:1052                                    ; preds = %1047
  %1053 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %1054 = load float* %1053, align 4
  %1055 = fptosi float %1054 to i32
  br label %1057

; <label>:1056                                    ; preds = %1047
  br label %1057

; <label>:1057                                    ; preds = %1056, %1052
  %1058 = phi i32 [ %1055, %1052 ], [ 65535, %1056 ]
  br label %1059

; <label>:1059                                    ; preds = %1057, %1046
  %1060 = phi i32 [ 0, %1046 ], [ %1058, %1057 ]
  %1061 = sext i32 %1060 to i64
  %1062 = getelementptr inbounds [65536 x float]* %cbrt, i32 0, i64 %1061
  %1063 = load float* %1062, align 4
  %1064 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  store float %1063, float* %1064, align 4
  %1065 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1066 = load float* %1065, align 4
  %1067 = fmul float 1.160000e+02, %1066
  %1068 = fsub float %1067, 1.600000e+01
  %1069 = fmul float 6.400000e+01, %1068
  %1070 = fptosi float %1069 to i16
  %1071 = load [3 x i16]** %lix, align 8
  %1072 = getelementptr inbounds [3 x i16]* %1071, i64 0
  %1073 = getelementptr inbounds [3 x i16]* %1072, i32 0, i64 0
  store i16 %1070, i16* %1073, align 2
  %1074 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 0
  %1075 = load float* %1074, align 4
  %1076 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1077 = load float* %1076, align 4
  %1078 = fsub float %1075, %1077
  %1079 = fmul float 3.200000e+04, %1078
  %1080 = fptosi float %1079 to i16
  %1081 = load [3 x i16]** %lix, align 8
  %1082 = getelementptr inbounds [3 x i16]* %1081, i64 0
  %1083 = getelementptr inbounds [3 x i16]* %1082, i32 0, i64 1
  store i16 %1080, i16* %1083, align 2
  %1084 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 1
  %1085 = load float* %1084, align 4
  %1086 = getelementptr inbounds [3 x float]* %xyz, i32 0, i64 2
  %1087 = load float* %1086, align 4
  %1088 = fsub float %1085, %1087
  %1089 = fmul float 1.280000e+04, %1088
  %1090 = fptosi float %1089 to i16
  %1091 = load [3 x i16]** %lix, align 8
  %1092 = getelementptr inbounds [3 x i16]* %1091, i64 0
  %1093 = getelementptr inbounds [3 x i16]* %1092, i32 0, i64 2
  store i16 %1090, i16* %1093, align 2
  br label %1094

; <label>:1094                                    ; preds = %1059
  %1095 = load i32* %col, align 4
  %1096 = add nsw i32 %1095, 1
  store i32 %1096, i32* %col, align 4
  br label %601

; <label>:1097                                    ; preds = %613
  br label %1098

; <label>:1098                                    ; preds = %1097
  %1099 = load i32* %row, align 4
  %1100 = add nsw i32 %1099, 1
  store i32 %1100, i32* %row, align 4
  br label %584

; <label>:1101                                    ; preds = %596
  br label %1102

; <label>:1102                                    ; preds = %1101
  %1103 = load i32* %d, align 4
  %1104 = add nsw i32 %1103, 1
  store i32 %1104, i32* %d, align 4
  br label %578

; <label>:1105                                    ; preds = %578
  %1106 = load [256 x [256 x i8]]** %homo, align 8
  %1107 = bitcast [256 x [256 x i8]]* %1106 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1107, i8 0, i64 131072, i32 1, i1 false)
  %1108 = load i32* %top, align 4
  %1109 = add nsw i32 %1108, 2
  store i32 %1109, i32* %row, align 4
  br label %1110

; <label>:1110                                    ; preds = %1504, %1105
  %1111 = load i32* %row, align 4
  %1112 = load i32* %top, align 4
  %1113 = add nsw i32 %1112, 256
  %1114 = sub nsw i32 %1113, 2
  %1115 = icmp slt i32 %1111, %1114
  br i1 %1115, label %1116, label %1122

; <label>:1116                                    ; preds = %1110
  %1117 = load i32* %row, align 4
  %1118 = load i16* @height, align 2
  %1119 = zext i16 %1118 to i32
  %1120 = sub nsw i32 %1119, 4
  %1121 = icmp slt i32 %1117, %1120
  br label %1122

; <label>:1122                                    ; preds = %1116, %1110
  %1123 = phi i1 [ false, %1110 ], [ %1121, %1116 ]
  br i1 %1123, label %1124, label %1507

; <label>:1124                                    ; preds = %1122
  %1125 = load i32* %row, align 4
  %1126 = load i32* %top, align 4
  %1127 = sub nsw i32 %1125, %1126
  store i32 %1127, i32* %tr, align 4
  %1128 = load i32* %left, align 4
  %1129 = add nsw i32 %1128, 2
  store i32 %1129, i32* %col, align 4
  br label %1130

; <label>:1130                                    ; preds = %1500, %1124
  %1131 = load i32* %col, align 4
  %1132 = load i32* %left, align 4
  %1133 = add nsw i32 %1132, 256
  %1134 = sub nsw i32 %1133, 2
  %1135 = icmp slt i32 %1131, %1134
  br i1 %1135, label %1136, label %1142

; <label>:1136                                    ; preds = %1130
  %1137 = load i32* %col, align 4
  %1138 = load i16* @width, align 2
  %1139 = zext i16 %1138 to i32
  %1140 = sub nsw i32 %1139, 4
  %1141 = icmp slt i32 %1137, %1140
  br label %1142

; <label>:1142                                    ; preds = %1136, %1130
  %1143 = phi i1 [ false, %1130 ], [ %1141, %1136 ]
  br i1 %1143, label %1144, label %1503

; <label>:1144                                    ; preds = %1142
  %1145 = load i32* %col, align 4
  %1146 = load i32* %left, align 4
  %1147 = sub nsw i32 %1145, %1146
  store i32 %1147, i32* %tc, align 4
  store i32 0, i32* %d, align 4
  br label %1148

; <label>:1148                                    ; preds = %1301, %1144
  %1149 = load i32* %d, align 4
  %1150 = icmp slt i32 %1149, 2
  br i1 %1150, label %1151, label %1304

; <label>:1151                                    ; preds = %1148
  %1152 = load i32* %tc, align 4
  %1153 = sext i32 %1152 to i64
  %1154 = load i32* %tr, align 4
  %1155 = sext i32 %1154 to i64
  %1156 = load i32* %d, align 4
  %1157 = sext i32 %1156 to i64
  %1158 = load [256 x [256 x [3 x i16]]]** %lab, align 8
  %1159 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1158, i64 %1157
  %1160 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1159, i32 0, i64 %1155
  %1161 = getelementptr inbounds [256 x [3 x i16]]* %1160, i32 0, i64 %1153
  store [3 x i16]* %1161, [3 x i16]** %lix, align 8
  store i32 0, i32* %i, align 4
  br label %1162

; <label>:1162                                    ; preds = %1297, %1151
  %1163 = load i32* %i, align 4
  %1164 = icmp slt i32 %1163, 4
  br i1 %1164, label %1165, label %1300

; <label>:1165                                    ; preds = %1162
  %1166 = load [3 x i16]** %lix, align 8
  %1167 = getelementptr inbounds [3 x i16]* %1166, i64 0
  %1168 = getelementptr inbounds [3 x i16]* %1167, i32 0, i64 0
  %1169 = load i16* %1168, align 2
  %1170 = sext i16 %1169 to i32
  %1171 = load i32* %i, align 4
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1172
  %1174 = load i32* %1173, align 4
  %1175 = sext i32 %1174 to i64
  %1176 = load [3 x i16]** %lix, align 8
  %1177 = getelementptr inbounds [3 x i16]* %1176, i64 %1175
  %1178 = getelementptr inbounds [3 x i16]* %1177, i32 0, i64 0
  %1179 = load i16* %1178, align 2
  %1180 = sext i16 %1179 to i32
  %1181 = sub nsw i32 %1170, %1180
  %1182 = load [3 x i16]** %lix, align 8
  %1183 = getelementptr inbounds [3 x i16]* %1182, i64 0
  %1184 = getelementptr inbounds [3 x i16]* %1183, i32 0, i64 0
  %1185 = load i16* %1184, align 2
  %1186 = sext i16 %1185 to i32
  %1187 = load i32* %i, align 4
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1188
  %1190 = load i32* %1189, align 4
  %1191 = sext i32 %1190 to i64
  %1192 = load [3 x i16]** %lix, align 8
  %1193 = getelementptr inbounds [3 x i16]* %1192, i64 %1191
  %1194 = getelementptr inbounds [3 x i16]* %1193, i32 0, i64 0
  %1195 = load i16* %1194, align 2
  %1196 = sext i16 %1195 to i32
  %1197 = sub nsw i32 %1186, %1196
  %1198 = ashr i32 %1197, 31
  %1199 = xor i32 %1181, %1198
  %1200 = load [3 x i16]** %lix, align 8
  %1201 = getelementptr inbounds [3 x i16]* %1200, i64 0
  %1202 = getelementptr inbounds [3 x i16]* %1201, i32 0, i64 0
  %1203 = load i16* %1202, align 2
  %1204 = sext i16 %1203 to i32
  %1205 = load i32* %i, align 4
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1206
  %1208 = load i32* %1207, align 4
  %1209 = sext i32 %1208 to i64
  %1210 = load [3 x i16]** %lix, align 8
  %1211 = getelementptr inbounds [3 x i16]* %1210, i64 %1209
  %1212 = getelementptr inbounds [3 x i16]* %1211, i32 0, i64 0
  %1213 = load i16* %1212, align 2
  %1214 = sext i16 %1213 to i32
  %1215 = sub nsw i32 %1204, %1214
  %1216 = ashr i32 %1215, 31
  %1217 = sub nsw i32 %1199, %1216
  %1218 = load i32* %i, align 4
  %1219 = sext i32 %1218 to i64
  %1220 = load i32* %d, align 4
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 %1221
  %1223 = getelementptr inbounds [4 x i32]* %1222, i32 0, i64 %1219
  store i32 %1217, i32* %1223, align 4
  %1224 = load [3 x i16]** %lix, align 8
  %1225 = getelementptr inbounds [3 x i16]* %1224, i64 0
  %1226 = getelementptr inbounds [3 x i16]* %1225, i32 0, i64 1
  %1227 = load i16* %1226, align 2
  %1228 = sext i16 %1227 to i32
  %1229 = load i32* %i, align 4
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1230
  %1232 = load i32* %1231, align 4
  %1233 = sext i32 %1232 to i64
  %1234 = load [3 x i16]** %lix, align 8
  %1235 = getelementptr inbounds [3 x i16]* %1234, i64 %1233
  %1236 = getelementptr inbounds [3 x i16]* %1235, i32 0, i64 1
  %1237 = load i16* %1236, align 2
  %1238 = sext i16 %1237 to i32
  %1239 = sub nsw i32 %1228, %1238
  %1240 = load [3 x i16]** %lix, align 8
  %1241 = getelementptr inbounds [3 x i16]* %1240, i64 0
  %1242 = getelementptr inbounds [3 x i16]* %1241, i32 0, i64 1
  %1243 = load i16* %1242, align 2
  %1244 = sext i16 %1243 to i32
  %1245 = load i32* %i, align 4
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1246
  %1248 = load i32* %1247, align 4
  %1249 = sext i32 %1248 to i64
  %1250 = load [3 x i16]** %lix, align 8
  %1251 = getelementptr inbounds [3 x i16]* %1250, i64 %1249
  %1252 = getelementptr inbounds [3 x i16]* %1251, i32 0, i64 1
  %1253 = load i16* %1252, align 2
  %1254 = sext i16 %1253 to i32
  %1255 = sub nsw i32 %1244, %1254
  %1256 = mul nsw i32 %1239, %1255
  %1257 = load [3 x i16]** %lix, align 8
  %1258 = getelementptr inbounds [3 x i16]* %1257, i64 0
  %1259 = getelementptr inbounds [3 x i16]* %1258, i32 0, i64 2
  %1260 = load i16* %1259, align 2
  %1261 = sext i16 %1260 to i32
  %1262 = load i32* %i, align 4
  %1263 = sext i32 %1262 to i64
  %1264 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1263
  %1265 = load i32* %1264, align 4
  %1266 = sext i32 %1265 to i64
  %1267 = load [3 x i16]** %lix, align 8
  %1268 = getelementptr inbounds [3 x i16]* %1267, i64 %1266
  %1269 = getelementptr inbounds [3 x i16]* %1268, i32 0, i64 2
  %1270 = load i16* %1269, align 2
  %1271 = sext i16 %1270 to i32
  %1272 = sub nsw i32 %1261, %1271
  %1273 = load [3 x i16]** %lix, align 8
  %1274 = getelementptr inbounds [3 x i16]* %1273, i64 0
  %1275 = getelementptr inbounds [3 x i16]* %1274, i32 0, i64 2
  %1276 = load i16* %1275, align 2
  %1277 = sext i16 %1276 to i32
  %1278 = load i32* %i, align 4
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds [4 x i32]* @ahd_interpolate.dir, i32 0, i64 %1279
  %1281 = load i32* %1280, align 4
  %1282 = sext i32 %1281 to i64
  %1283 = load [3 x i16]** %lix, align 8
  %1284 = getelementptr inbounds [3 x i16]* %1283, i64 %1282
  %1285 = getelementptr inbounds [3 x i16]* %1284, i32 0, i64 2
  %1286 = load i16* %1285, align 2
  %1287 = sext i16 %1286 to i32
  %1288 = sub nsw i32 %1277, %1287
  %1289 = mul nsw i32 %1272, %1288
  %1290 = add nsw i32 %1256, %1289
  %1291 = load i32* %i, align 4
  %1292 = sext i32 %1291 to i64
  %1293 = load i32* %d, align 4
  %1294 = sext i32 %1293 to i64
  %1295 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 %1294
  %1296 = getelementptr inbounds [4 x i32]* %1295, i32 0, i64 %1292
  store i32 %1290, i32* %1296, align 4
  br label %1297

; <label>:1297                                    ; preds = %1165
  %1298 = load i32* %i, align 4
  %1299 = add nsw i32 %1298, 1
  store i32 %1299, i32* %i, align 4
  br label %1162

; <label>:1300                                    ; preds = %1162
  br label %1301

; <label>:1301                                    ; preds = %1300
  %1302 = load i32* %d, align 4
  %1303 = add nsw i32 %1302, 1
  store i32 %1303, i32* %d, align 4
  br label %1148

; <label>:1304                                    ; preds = %1148
  %1305 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1306 = getelementptr inbounds [4 x i32]* %1305, i32 0, i64 0
  %1307 = load i32* %1306, align 4
  %1308 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1309 = getelementptr inbounds [4 x i32]* %1308, i32 0, i64 1
  %1310 = load i32* %1309, align 4
  %1311 = icmp ugt i32 %1307, %1310
  br i1 %1311, label %1312, label %1316

; <label>:1312                                    ; preds = %1304
  %1313 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1314 = getelementptr inbounds [4 x i32]* %1313, i32 0, i64 0
  %1315 = load i32* %1314, align 4
  br label %1320

; <label>:1316                                    ; preds = %1304
  %1317 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1318 = getelementptr inbounds [4 x i32]* %1317, i32 0, i64 1
  %1319 = load i32* %1318, align 4
  br label %1320

; <label>:1320                                    ; preds = %1316, %1312
  %1321 = phi i32 [ %1315, %1312 ], [ %1319, %1316 ]
  %1322 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1323 = getelementptr inbounds [4 x i32]* %1322, i32 0, i64 2
  %1324 = load i32* %1323, align 4
  %1325 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1326 = getelementptr inbounds [4 x i32]* %1325, i32 0, i64 3
  %1327 = load i32* %1326, align 4
  %1328 = icmp ugt i32 %1324, %1327
  br i1 %1328, label %1329, label %1333

; <label>:1329                                    ; preds = %1320
  %1330 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1331 = getelementptr inbounds [4 x i32]* %1330, i32 0, i64 2
  %1332 = load i32* %1331, align 4
  br label %1337

; <label>:1333                                    ; preds = %1320
  %1334 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1335 = getelementptr inbounds [4 x i32]* %1334, i32 0, i64 3
  %1336 = load i32* %1335, align 4
  br label %1337

; <label>:1337                                    ; preds = %1333, %1329
  %1338 = phi i32 [ %1332, %1329 ], [ %1336, %1333 ]
  %1339 = icmp ult i32 %1321, %1338
  br i1 %1339, label %1340, label %1358

; <label>:1340                                    ; preds = %1337
  %1341 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1342 = getelementptr inbounds [4 x i32]* %1341, i32 0, i64 0
  %1343 = load i32* %1342, align 4
  %1344 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1345 = getelementptr inbounds [4 x i32]* %1344, i32 0, i64 1
  %1346 = load i32* %1345, align 4
  %1347 = icmp ugt i32 %1343, %1346
  br i1 %1347, label %1348, label %1352

; <label>:1348                                    ; preds = %1340
  %1349 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1350 = getelementptr inbounds [4 x i32]* %1349, i32 0, i64 0
  %1351 = load i32* %1350, align 4
  br label %1356

; <label>:1352                                    ; preds = %1340
  %1353 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 0
  %1354 = getelementptr inbounds [4 x i32]* %1353, i32 0, i64 1
  %1355 = load i32* %1354, align 4
  br label %1356

; <label>:1356                                    ; preds = %1352, %1348
  %1357 = phi i32 [ %1351, %1348 ], [ %1355, %1352 ]
  br label %1376

; <label>:1358                                    ; preds = %1337
  %1359 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1360 = getelementptr inbounds [4 x i32]* %1359, i32 0, i64 2
  %1361 = load i32* %1360, align 4
  %1362 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1363 = getelementptr inbounds [4 x i32]* %1362, i32 0, i64 3
  %1364 = load i32* %1363, align 4
  %1365 = icmp ugt i32 %1361, %1364
  br i1 %1365, label %1366, label %1370

; <label>:1366                                    ; preds = %1358
  %1367 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1368 = getelementptr inbounds [4 x i32]* %1367, i32 0, i64 2
  %1369 = load i32* %1368, align 4
  br label %1374

; <label>:1370                                    ; preds = %1358
  %1371 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 1
  %1372 = getelementptr inbounds [4 x i32]* %1371, i32 0, i64 3
  %1373 = load i32* %1372, align 4
  br label %1374

; <label>:1374                                    ; preds = %1370, %1366
  %1375 = phi i32 [ %1369, %1366 ], [ %1373, %1370 ]
  br label %1376

; <label>:1376                                    ; preds = %1374, %1356
  %1377 = phi i32 [ %1357, %1356 ], [ %1375, %1374 ]
  store i32 %1377, i32* %leps, align 4
  %1378 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1379 = getelementptr inbounds [4 x i32]* %1378, i32 0, i64 0
  %1380 = load i32* %1379, align 4
  %1381 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1382 = getelementptr inbounds [4 x i32]* %1381, i32 0, i64 1
  %1383 = load i32* %1382, align 4
  %1384 = icmp ugt i32 %1380, %1383
  br i1 %1384, label %1385, label %1389

; <label>:1385                                    ; preds = %1376
  %1386 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1387 = getelementptr inbounds [4 x i32]* %1386, i32 0, i64 0
  %1388 = load i32* %1387, align 4
  br label %1393

; <label>:1389                                    ; preds = %1376
  %1390 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1391 = getelementptr inbounds [4 x i32]* %1390, i32 0, i64 1
  %1392 = load i32* %1391, align 4
  br label %1393

; <label>:1393                                    ; preds = %1389, %1385
  %1394 = phi i32 [ %1388, %1385 ], [ %1392, %1389 ]
  %1395 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1396 = getelementptr inbounds [4 x i32]* %1395, i32 0, i64 2
  %1397 = load i32* %1396, align 4
  %1398 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1399 = getelementptr inbounds [4 x i32]* %1398, i32 0, i64 3
  %1400 = load i32* %1399, align 4
  %1401 = icmp ugt i32 %1397, %1400
  br i1 %1401, label %1402, label %1406

; <label>:1402                                    ; preds = %1393
  %1403 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1404 = getelementptr inbounds [4 x i32]* %1403, i32 0, i64 2
  %1405 = load i32* %1404, align 4
  br label %1410

; <label>:1406                                    ; preds = %1393
  %1407 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1408 = getelementptr inbounds [4 x i32]* %1407, i32 0, i64 3
  %1409 = load i32* %1408, align 4
  br label %1410

; <label>:1410                                    ; preds = %1406, %1402
  %1411 = phi i32 [ %1405, %1402 ], [ %1409, %1406 ]
  %1412 = icmp ult i32 %1394, %1411
  br i1 %1412, label %1413, label %1431

; <label>:1413                                    ; preds = %1410
  %1414 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1415 = getelementptr inbounds [4 x i32]* %1414, i32 0, i64 0
  %1416 = load i32* %1415, align 4
  %1417 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1418 = getelementptr inbounds [4 x i32]* %1417, i32 0, i64 1
  %1419 = load i32* %1418, align 4
  %1420 = icmp ugt i32 %1416, %1419
  br i1 %1420, label %1421, label %1425

; <label>:1421                                    ; preds = %1413
  %1422 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1423 = getelementptr inbounds [4 x i32]* %1422, i32 0, i64 0
  %1424 = load i32* %1423, align 4
  br label %1429

; <label>:1425                                    ; preds = %1413
  %1426 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 0
  %1427 = getelementptr inbounds [4 x i32]* %1426, i32 0, i64 1
  %1428 = load i32* %1427, align 4
  br label %1429

; <label>:1429                                    ; preds = %1425, %1421
  %1430 = phi i32 [ %1424, %1421 ], [ %1428, %1425 ]
  br label %1449

; <label>:1431                                    ; preds = %1410
  %1432 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1433 = getelementptr inbounds [4 x i32]* %1432, i32 0, i64 2
  %1434 = load i32* %1433, align 4
  %1435 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1436 = getelementptr inbounds [4 x i32]* %1435, i32 0, i64 3
  %1437 = load i32* %1436, align 4
  %1438 = icmp ugt i32 %1434, %1437
  br i1 %1438, label %1439, label %1443

; <label>:1439                                    ; preds = %1431
  %1440 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1441 = getelementptr inbounds [4 x i32]* %1440, i32 0, i64 2
  %1442 = load i32* %1441, align 4
  br label %1447

; <label>:1443                                    ; preds = %1431
  %1444 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 1
  %1445 = getelementptr inbounds [4 x i32]* %1444, i32 0, i64 3
  %1446 = load i32* %1445, align 4
  br label %1447

; <label>:1447                                    ; preds = %1443, %1439
  %1448 = phi i32 [ %1442, %1439 ], [ %1446, %1443 ]
  br label %1449

; <label>:1449                                    ; preds = %1447, %1429
  %1450 = phi i32 [ %1430, %1429 ], [ %1448, %1447 ]
  store i32 %1450, i32* %abeps, align 4
  store i32 0, i32* %d, align 4
  br label %1451

; <label>:1451                                    ; preds = %1496, %1449
  %1452 = load i32* %d, align 4
  %1453 = icmp slt i32 %1452, 2
  br i1 %1453, label %1454, label %1499

; <label>:1454                                    ; preds = %1451
  store i32 0, i32* %i, align 4
  br label %1455

; <label>:1455                                    ; preds = %1492, %1454
  %1456 = load i32* %i, align 4
  %1457 = icmp slt i32 %1456, 4
  br i1 %1457, label %1458, label %1495

; <label>:1458                                    ; preds = %1455
  %1459 = load i32* %i, align 4
  %1460 = sext i32 %1459 to i64
  %1461 = load i32* %d, align 4
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds [2 x [4 x i32]]* %ldiff, i32 0, i64 %1462
  %1464 = getelementptr inbounds [4 x i32]* %1463, i32 0, i64 %1460
  %1465 = load i32* %1464, align 4
  %1466 = load i32* %leps, align 4
  %1467 = icmp ule i32 %1465, %1466
  br i1 %1467, label %1468, label %1491

; <label>:1468                                    ; preds = %1458
  %1469 = load i32* %i, align 4
  %1470 = sext i32 %1469 to i64
  %1471 = load i32* %d, align 4
  %1472 = sext i32 %1471 to i64
  %1473 = getelementptr inbounds [2 x [4 x i32]]* %abdiff, i32 0, i64 %1472
  %1474 = getelementptr inbounds [4 x i32]* %1473, i32 0, i64 %1470
  %1475 = load i32* %1474, align 4
  %1476 = load i32* %abeps, align 4
  %1477 = icmp ule i32 %1475, %1476
  br i1 %1477, label %1478, label %1491

; <label>:1478                                    ; preds = %1468
  %1479 = load i32* %tc, align 4
  %1480 = sext i32 %1479 to i64
  %1481 = load i32* %tr, align 4
  %1482 = sext i32 %1481 to i64
  %1483 = load i32* %d, align 4
  %1484 = sext i32 %1483 to i64
  %1485 = load [256 x [256 x i8]]** %homo, align 8
  %1486 = getelementptr inbounds [256 x [256 x i8]]* %1485, i64 %1484
  %1487 = getelementptr inbounds [256 x [256 x i8]]* %1486, i32 0, i64 %1482
  %1488 = getelementptr inbounds [256 x i8]* %1487, i32 0, i64 %1480
  %1489 = load i8* %1488, align 1
  %1490 = add i8 %1489, 1
  store i8 %1490, i8* %1488, align 1
  br label %1491

; <label>:1491                                    ; preds = %1478, %1468, %1458
  br label %1492

; <label>:1492                                    ; preds = %1491
  %1493 = load i32* %i, align 4
  %1494 = add nsw i32 %1493, 1
  store i32 %1494, i32* %i, align 4
  br label %1455

; <label>:1495                                    ; preds = %1455
  br label %1496

; <label>:1496                                    ; preds = %1495
  %1497 = load i32* %d, align 4
  %1498 = add nsw i32 %1497, 1
  store i32 %1498, i32* %d, align 4
  br label %1451

; <label>:1499                                    ; preds = %1451
  br label %1500

; <label>:1500                                    ; preds = %1499
  %1501 = load i32* %col, align 4
  %1502 = add nsw i32 %1501, 1
  store i32 %1502, i32* %col, align 4
  br label %1130

; <label>:1503                                    ; preds = %1142
  br label %1504

; <label>:1504                                    ; preds = %1503
  %1505 = load i32* %row, align 4
  %1506 = add nsw i32 %1505, 1
  store i32 %1506, i32* %row, align 4
  br label %1110

; <label>:1507                                    ; preds = %1122
  %1508 = load i32* %top, align 4
  %1509 = add nsw i32 %1508, 3
  store i32 %1509, i32* %row, align 4
  br label %1510

; <label>:1510                                    ; preds = %1700, %1507
  %1511 = load i32* %row, align 4
  %1512 = load i32* %top, align 4
  %1513 = add nsw i32 %1512, 256
  %1514 = sub nsw i32 %1513, 3
  %1515 = icmp slt i32 %1511, %1514
  br i1 %1515, label %1516, label %1522

; <label>:1516                                    ; preds = %1510
  %1517 = load i32* %row, align 4
  %1518 = load i16* @height, align 2
  %1519 = zext i16 %1518 to i32
  %1520 = sub nsw i32 %1519, 5
  %1521 = icmp slt i32 %1517, %1520
  br label %1522

; <label>:1522                                    ; preds = %1516, %1510
  %1523 = phi i1 [ false, %1510 ], [ %1521, %1516 ]
  br i1 %1523, label %1524, label %1703

; <label>:1524                                    ; preds = %1522
  %1525 = load i32* %row, align 4
  %1526 = load i32* %top, align 4
  %1527 = sub nsw i32 %1525, %1526
  store i32 %1527, i32* %tr, align 4
  %1528 = load i32* %left, align 4
  %1529 = add nsw i32 %1528, 3
  store i32 %1529, i32* %col, align 4
  br label %1530

; <label>:1530                                    ; preds = %1696, %1524
  %1531 = load i32* %col, align 4
  %1532 = load i32* %left, align 4
  %1533 = add nsw i32 %1532, 256
  %1534 = sub nsw i32 %1533, 3
  %1535 = icmp slt i32 %1531, %1534
  br i1 %1535, label %1536, label %1542

; <label>:1536                                    ; preds = %1530
  %1537 = load i32* %col, align 4
  %1538 = load i16* @width, align 2
  %1539 = zext i16 %1538 to i32
  %1540 = sub nsw i32 %1539, 5
  %1541 = icmp slt i32 %1537, %1540
  br label %1542

; <label>:1542                                    ; preds = %1536, %1530
  %1543 = phi i1 [ false, %1530 ], [ %1541, %1536 ]
  br i1 %1543, label %1544, label %1699

; <label>:1544                                    ; preds = %1542
  %1545 = load i32* %col, align 4
  %1546 = load i32* %left, align 4
  %1547 = sub nsw i32 %1545, %1546
  store i32 %1547, i32* %tc, align 4
  store i32 0, i32* %d, align 4
  br label %1548

; <label>:1548                                    ; preds = %1596, %1544
  %1549 = load i32* %d, align 4
  %1550 = icmp slt i32 %1549, 2
  br i1 %1550, label %1551, label %1599

; <label>:1551                                    ; preds = %1548
  %1552 = load i32* %d, align 4
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 %1553
  store i32 0, i32* %1554, align 4
  %1555 = load i32* %tr, align 4
  %1556 = sub nsw i32 %1555, 1
  store i32 %1556, i32* %i, align 4
  br label %1557

; <label>:1557                                    ; preds = %1592, %1551
  %1558 = load i32* %i, align 4
  %1559 = load i32* %tr, align 4
  %1560 = add nsw i32 %1559, 1
  %1561 = icmp sle i32 %1558, %1560
  br i1 %1561, label %1562, label %1595

; <label>:1562                                    ; preds = %1557
  %1563 = load i32* %tc, align 4
  %1564 = sub nsw i32 %1563, 1
  store i32 %1564, i32* %j, align 4
  br label %1565

; <label>:1565                                    ; preds = %1588, %1562
  %1566 = load i32* %j, align 4
  %1567 = load i32* %tc, align 4
  %1568 = add nsw i32 %1567, 1
  %1569 = icmp sle i32 %1566, %1568
  br i1 %1569, label %1570, label %1591

; <label>:1570                                    ; preds = %1565
  %1571 = load i32* %j, align 4
  %1572 = sext i32 %1571 to i64
  %1573 = load i32* %i, align 4
  %1574 = sext i32 %1573 to i64
  %1575 = load i32* %d, align 4
  %1576 = sext i32 %1575 to i64
  %1577 = load [256 x [256 x i8]]** %homo, align 8
  %1578 = getelementptr inbounds [256 x [256 x i8]]* %1577, i64 %1576
  %1579 = getelementptr inbounds [256 x [256 x i8]]* %1578, i32 0, i64 %1574
  %1580 = getelementptr inbounds [256 x i8]* %1579, i32 0, i64 %1572
  %1581 = load i8* %1580, align 1
  %1582 = sext i8 %1581 to i32
  %1583 = load i32* %d, align 4
  %1584 = sext i32 %1583 to i64
  %1585 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 %1584
  %1586 = load i32* %1585, align 4
  %1587 = add nsw i32 %1586, %1582
  store i32 %1587, i32* %1585, align 4
  br label %1588

; <label>:1588                                    ; preds = %1570
  %1589 = load i32* %j, align 4
  %1590 = add nsw i32 %1589, 1
  store i32 %1590, i32* %j, align 4
  br label %1565

; <label>:1591                                    ; preds = %1565
  br label %1592

; <label>:1592                                    ; preds = %1591
  %1593 = load i32* %i, align 4
  %1594 = add nsw i32 %1593, 1
  store i32 %1594, i32* %i, align 4
  br label %1557

; <label>:1595                                    ; preds = %1557
  br label %1596

; <label>:1596                                    ; preds = %1595
  %1597 = load i32* %d, align 4
  %1598 = add nsw i32 %1597, 1
  store i32 %1598, i32* %d, align 4
  br label %1548

; <label>:1599                                    ; preds = %1548
  %1600 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 0
  %1601 = load i32* %1600, align 4
  %1602 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 1
  %1603 = load i32* %1602, align 4
  %1604 = icmp ne i32 %1601, %1603
  br i1 %1604, label %1605, label %1645

; <label>:1605                                    ; preds = %1599
  store i32 0, i32* %c, align 4
  br label %1606

; <label>:1606                                    ; preds = %1641, %1605
  %1607 = load i32* %c, align 4
  %1608 = icmp slt i32 %1607, 3
  br i1 %1608, label %1609, label %1644

; <label>:1609                                    ; preds = %1606
  %1610 = load i32* %c, align 4
  %1611 = sext i32 %1610 to i64
  %1612 = load i32* %tc, align 4
  %1613 = sext i32 %1612 to i64
  %1614 = load i32* %tr, align 4
  %1615 = sext i32 %1614 to i64
  %1616 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 1
  %1617 = load i32* %1616, align 4
  %1618 = getelementptr inbounds [2 x i32]* %hm, i32 0, i64 0
  %1619 = load i32* %1618, align 4
  %1620 = icmp sgt i32 %1617, %1619
  %1621 = zext i1 %1620 to i32
  %1622 = sext i32 %1621 to i64
  %1623 = load [256 x [256 x [3 x i16]]]** %rgb, align 8
  %1624 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1623, i64 %1622
  %1625 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1624, i32 0, i64 %1615
  %1626 = getelementptr inbounds [256 x [3 x i16]]* %1625, i32 0, i64 %1613
  %1627 = getelementptr inbounds [3 x i16]* %1626, i32 0, i64 %1611
  %1628 = load i16* %1627, align 2
  %1629 = load i32* %c, align 4
  %1630 = sext i32 %1629 to i64
  %1631 = load i32* %row, align 4
  %1632 = load i16* @width, align 2
  %1633 = zext i16 %1632 to i32
  %1634 = mul nsw i32 %1631, %1633
  %1635 = load i32* %col, align 4
  %1636 = add nsw i32 %1634, %1635
  %1637 = sext i32 %1636 to i64
  %1638 = load [4 x i16]** @image, align 8
  %1639 = getelementptr inbounds [4 x i16]* %1638, i64 %1637
  %1640 = getelementptr inbounds [4 x i16]* %1639, i32 0, i64 %1630
  store i16 %1628, i16* %1640, align 2
  br label %1641

; <label>:1641                                    ; preds = %1609
  %1642 = load i32* %c, align 4
  %1643 = add nsw i32 %1642, 1
  store i32 %1643, i32* %c, align 4
  br label %1606

; <label>:1644                                    ; preds = %1606
  br label %1695

; <label>:1645                                    ; preds = %1599
  store i32 0, i32* %c, align 4
  br label %1646

; <label>:1646                                    ; preds = %1691, %1645
  %1647 = load i32* %c, align 4
  %1648 = icmp slt i32 %1647, 3
  br i1 %1648, label %1649, label %1694

; <label>:1649                                    ; preds = %1646
  %1650 = load i32* %c, align 4
  %1651 = sext i32 %1650 to i64
  %1652 = load i32* %tc, align 4
  %1653 = sext i32 %1652 to i64
  %1654 = load i32* %tr, align 4
  %1655 = sext i32 %1654 to i64
  %1656 = load [256 x [256 x [3 x i16]]]** %rgb, align 8
  %1657 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1656, i64 0
  %1658 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1657, i32 0, i64 %1655
  %1659 = getelementptr inbounds [256 x [3 x i16]]* %1658, i32 0, i64 %1653
  %1660 = getelementptr inbounds [3 x i16]* %1659, i32 0, i64 %1651
  %1661 = load i16* %1660, align 2
  %1662 = zext i16 %1661 to i32
  %1663 = load i32* %c, align 4
  %1664 = sext i32 %1663 to i64
  %1665 = load i32* %tc, align 4
  %1666 = sext i32 %1665 to i64
  %1667 = load i32* %tr, align 4
  %1668 = sext i32 %1667 to i64
  %1669 = load [256 x [256 x [3 x i16]]]** %rgb, align 8
  %1670 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1669, i64 1
  %1671 = getelementptr inbounds [256 x [256 x [3 x i16]]]* %1670, i32 0, i64 %1668
  %1672 = getelementptr inbounds [256 x [3 x i16]]* %1671, i32 0, i64 %1666
  %1673 = getelementptr inbounds [3 x i16]* %1672, i32 0, i64 %1664
  %1674 = load i16* %1673, align 2
  %1675 = zext i16 %1674 to i32
  %1676 = add nsw i32 %1662, %1675
  %1677 = ashr i32 %1676, 1
  %1678 = trunc i32 %1677 to i16
  %1679 = load i32* %c, align 4
  %1680 = sext i32 %1679 to i64
  %1681 = load i32* %row, align 4
  %1682 = load i16* @width, align 2
  %1683 = zext i16 %1682 to i32
  %1684 = mul nsw i32 %1681, %1683
  %1685 = load i32* %col, align 4
  %1686 = add nsw i32 %1684, %1685
  %1687 = sext i32 %1686 to i64
  %1688 = load [4 x i16]** @image, align 8
  %1689 = getelementptr inbounds [4 x i16]* %1688, i64 %1687
  %1690 = getelementptr inbounds [4 x i16]* %1689, i32 0, i64 %1680
  store i16 %1678, i16* %1690, align 2
  br label %1691

; <label>:1691                                    ; preds = %1649
  %1692 = load i32* %c, align 4
  %1693 = add nsw i32 %1692, 1
  store i32 %1693, i32* %c, align 4
  br label %1646

; <label>:1694                                    ; preds = %1646
  br label %1695

; <label>:1695                                    ; preds = %1694, %1644
  br label %1696

; <label>:1696                                    ; preds = %1695
  %1697 = load i32* %col, align 4
  %1698 = add nsw i32 %1697, 1
  store i32 %1698, i32* %col, align 4
  br label %1530

; <label>:1699                                    ; preds = %1542
  br label %1700

; <label>:1700                                    ; preds = %1699
  %1701 = load i32* %row, align 4
  %1702 = add nsw i32 %1701, 1
  store i32 %1702, i32* %row, align 4
  br label %1510

; <label>:1703                                    ; preds = %1522
  br label %1704

; <label>:1704                                    ; preds = %1703
  %1705 = load i32* %left, align 4
  %1706 = add nsw i32 %1705, 250
  store i32 %1706, i32* %left, align 4
  br label %117

; <label>:1707                                    ; preds = %117
  br label %1708

; <label>:1708                                    ; preds = %1707
  %1709 = load i32* %top, align 4
  %1710 = add nsw i32 %1709, 250
  store i32 %1710, i32* %top, align 4
  br label %110

; <label>:1711                                    ; preds = %110
  %1712 = load i8** %buffer, align 8
  call void @free(i8* %1712) #4
  ret void
}

; Function Attrs: nounwind
declare double @pow(double, double) #3

; Function Attrs: nounwind uwtable
define void @median_filter() #0 {
  %pix = alloca [4 x i16]*, align 8
  %pass = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %med = alloca [9 x i32], align 16
  store i32 1, i32* %pass, align 4
  br label %1

; <label>:1                                       ; preds = %248, %0
  %2 = load i32* %pass, align 4
  %3 = load i32* @med_passes, align 4
  %4 = icmp sle i32 %2, %3
  br i1 %4, label %5, label %251

; <label>:5                                       ; preds = %1
  %6 = load i32* @verbose, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %5
  %9 = load %struct._IO_FILE** @stderr, align 8
  %10 = load i32* %pass, align 4
  %11 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([26 x i8]* @.str82, i32 0, i32 0), i32 %10)
  br label %12

; <label>:12                                      ; preds = %8, %5
  store i32 0, i32* %c, align 4
  br label %13

; <label>:13                                      ; preds = %244, %12
  %14 = load i32* %c, align 4
  %15 = icmp slt i32 %14, 3
  br i1 %15, label %16, label %247

; <label>:16                                      ; preds = %13
  %17 = load [4 x i16]** @image, align 8
  store [4 x i16]* %17, [4 x i16]** %pix, align 8
  br label %18

; <label>:18                                      ; preds = %39, %16
  %19 = load [4 x i16]** %pix, align 8
  %20 = load [4 x i16]** @image, align 8
  %21 = load i16* @width, align 2
  %22 = zext i16 %21 to i32
  %23 = load i16* @height, align 2
  %24 = zext i16 %23 to i32
  %25 = mul nsw i32 %22, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [4 x i16]* %20, i64 %26
  %28 = icmp ult [4 x i16]* %19, %27
  br i1 %28, label %29, label %42

; <label>:29                                      ; preds = %18
  %30 = load i32* %c, align 4
  %31 = sext i32 %30 to i64
  %32 = load [4 x i16]** %pix, align 8
  %33 = getelementptr inbounds [4 x i16]* %32, i64 0
  %34 = getelementptr inbounds [4 x i16]* %33, i32 0, i64 %31
  %35 = load i16* %34, align 2
  %36 = load [4 x i16]** %pix, align 8
  %37 = getelementptr inbounds [4 x i16]* %36, i64 0
  %38 = getelementptr inbounds [4 x i16]* %37, i32 0, i64 3
  store i16 %35, i16* %38, align 2
  br label %39

; <label>:39                                      ; preds = %29
  %40 = load [4 x i16]** %pix, align 8
  %41 = getelementptr inbounds [4 x i16]* %40, i32 1
  store [4 x i16]* %41, [4 x i16]** %pix, align 8
  br label %18

; <label>:42                                      ; preds = %18
  %43 = load [4 x i16]** @image, align 8
  %44 = load i16* @width, align 2
  %45 = zext i16 %44 to i32
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [4 x i16]* %43, i64 %46
  store [4 x i16]* %47, [4 x i16]** %pix, align 8
  br label %48

; <label>:48                                      ; preds = %240, %42
  %49 = load [4 x i16]** %pix, align 8
  %50 = load [4 x i16]** @image, align 8
  %51 = load i16* @width, align 2
  %52 = zext i16 %51 to i32
  %53 = load i16* @height, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %54, 1
  %56 = mul nsw i32 %52, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [4 x i16]* %50, i64 %57
  %59 = icmp ult [4 x i16]* %49, %58
  br i1 %59, label %60, label %243

; <label>:60                                      ; preds = %48
  %61 = load [4 x i16]** %pix, align 8
  %62 = load [4 x i16]** @image, align 8
  %63 = ptrtoint [4 x i16]* %61 to i64
  %64 = ptrtoint [4 x i16]* %62 to i64
  %65 = sub i64 %63, %64
  %66 = sdiv exact i64 %65, 8
  %67 = add nsw i64 %66, 1
  %68 = load i16* @width, align 2
  %69 = zext i16 %68 to i64
  %70 = srem i64 %67, %69
  %71 = icmp slt i64 %70, 2
  br i1 %71, label %72, label %73

; <label>:72                                      ; preds = %60
  br label %240

; <label>:73                                      ; preds = %60
  store i32 0, i32* %k, align 4
  %74 = load i16* @width, align 2
  %75 = zext i16 %74 to i32
  %76 = sub nsw i32 0, %75
  store i32 %76, i32* %i, align 4
  br label %77

; <label>:77                                      ; preds = %114, %73
  %78 = load i32* %i, align 4
  %79 = load i16* @width, align 2
  %80 = zext i16 %79 to i32
  %81 = icmp sle i32 %78, %80
  br i1 %81, label %82, label %119

; <label>:82                                      ; preds = %77
  %83 = load i32* %i, align 4
  %84 = sub nsw i32 %83, 1
  store i32 %84, i32* %j, align 4
  br label %85

; <label>:85                                      ; preds = %110, %82
  %86 = load i32* %j, align 4
  %87 = load i32* %i, align 4
  %88 = add nsw i32 %87, 1
  %89 = icmp sle i32 %86, %88
  br i1 %89, label %90, label %113

; <label>:90                                      ; preds = %85
  %91 = load i32* %j, align 4
  %92 = sext i32 %91 to i64
  %93 = load [4 x i16]** %pix, align 8
  %94 = getelementptr inbounds [4 x i16]* %93, i64 %92
  %95 = getelementptr inbounds [4 x i16]* %94, i32 0, i64 3
  %96 = load i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = load i32* %j, align 4
  %99 = sext i32 %98 to i64
  %100 = load [4 x i16]** %pix, align 8
  %101 = getelementptr inbounds [4 x i16]* %100, i64 %99
  %102 = getelementptr inbounds [4 x i16]* %101, i32 0, i64 1
  %103 = load i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = sub nsw i32 %97, %104
  %106 = load i32* %k, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %k, align 4
  %108 = sext i32 %106 to i64
  %109 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %108
  store i32 %105, i32* %109, align 4
  br label %110

; <label>:110                                     ; preds = %90
  %111 = load i32* %j, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %j, align 4
  br label %85

; <label>:113                                     ; preds = %85
  br label %114

; <label>:114                                     ; preds = %113
  %115 = load i16* @width, align 2
  %116 = zext i16 %115 to i32
  %117 = load i32* %i, align 4
  %118 = add nsw i32 %117, %116
  store i32 %118, i32* %i, align 4
  br label %77

; <label>:119                                     ; preds = %77
  store i32 0, i32* %i, align 4
  br label %120

; <label>:120                                     ; preds = %183, %119
  %121 = load i32* %i, align 4
  %122 = sext i32 %121 to i64
  %123 = icmp ult i64 %122, 38
  br i1 %123, label %124, label %186

; <label>:124                                     ; preds = %120
  %125 = load i32* %i, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %126
  %128 = load i8* %127, align 1
  %129 = zext i8 %128 to i64
  %130 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %129
  %131 = load i32* %130, align 4
  %132 = load i32* %i, align 4
  %133 = add nsw i32 %132, 1
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %134
  %136 = load i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %137
  %139 = load i32* %138, align 4
  %140 = icmp sgt i32 %131, %139
  br i1 %140, label %141, label %182

; <label>:141                                     ; preds = %124
  %142 = load i32* %i, align 4
  %143 = add nsw i32 %142, 1
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %144
  %146 = load i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %147
  %149 = load i32* %148, align 4
  %150 = load i32* %i, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %151
  %153 = load i8* %152, align 1
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %154
  %156 = load i32* %155, align 4
  %157 = xor i32 %156, %149
  store i32 %157, i32* %155, align 4
  %158 = load i32* %i, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %159
  %161 = load i8* %160, align 1
  %162 = zext i8 %161 to i64
  %163 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %162
  %164 = load i32* %163, align 4
  %165 = load i32* %i, align 4
  %166 = add nsw i32 %165, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %167
  %169 = load i8* %168, align 1
  %170 = zext i8 %169 to i64
  %171 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %170
  %172 = load i32* %171, align 4
  %173 = xor i32 %172, %164
  store i32 %173, i32* %171, align 4
  %174 = load i32* %i, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [38 x i8]* @median_filter.opt, i32 0, i64 %175
  %177 = load i8* %176, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 %178
  %180 = load i32* %179, align 4
  %181 = xor i32 %180, %173
  store i32 %181, i32* %179, align 4
  br label %182

; <label>:182                                     ; preds = %141, %124
  br label %183

; <label>:183                                     ; preds = %182
  %184 = load i32* %i, align 4
  %185 = add nsw i32 %184, 2
  store i32 %185, i32* %i, align 4
  br label %120

; <label>:186                                     ; preds = %120
  %187 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %188 = load i32* %187, align 4
  %189 = load [4 x i16]** %pix, align 8
  %190 = getelementptr inbounds [4 x i16]* %189, i64 0
  %191 = getelementptr inbounds [4 x i16]* %190, i32 0, i64 1
  %192 = load i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = add nsw i32 %188, %193
  %195 = icmp slt i32 %194, 65535
  br i1 %195, label %196, label %205

; <label>:196                                     ; preds = %186
  %197 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %198 = load i32* %197, align 4
  %199 = load [4 x i16]** %pix, align 8
  %200 = getelementptr inbounds [4 x i16]* %199, i64 0
  %201 = getelementptr inbounds [4 x i16]* %200, i32 0, i64 1
  %202 = load i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = add nsw i32 %198, %203
  br label %206

; <label>:205                                     ; preds = %186
  br label %206

; <label>:206                                     ; preds = %205, %196
  %207 = phi i32 [ %204, %196 ], [ 65535, %205 ]
  %208 = icmp sgt i32 0, %207
  br i1 %208, label %209, label %210

; <label>:209                                     ; preds = %206
  br label %232

; <label>:210                                     ; preds = %206
  %211 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %212 = load i32* %211, align 4
  %213 = load [4 x i16]** %pix, align 8
  %214 = getelementptr inbounds [4 x i16]* %213, i64 0
  %215 = getelementptr inbounds [4 x i16]* %214, i32 0, i64 1
  %216 = load i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = add nsw i32 %212, %217
  %219 = icmp slt i32 %218, 65535
  br i1 %219, label %220, label %229

; <label>:220                                     ; preds = %210
  %221 = getelementptr inbounds [9 x i32]* %med, i32 0, i64 4
  %222 = load i32* %221, align 4
  %223 = load [4 x i16]** %pix, align 8
  %224 = getelementptr inbounds [4 x i16]* %223, i64 0
  %225 = getelementptr inbounds [4 x i16]* %224, i32 0, i64 1
  %226 = load i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = add nsw i32 %222, %227
  br label %230

; <label>:229                                     ; preds = %210
  br label %230

; <label>:230                                     ; preds = %229, %220
  %231 = phi i32 [ %228, %220 ], [ 65535, %229 ]
  br label %232

; <label>:232                                     ; preds = %230, %209
  %233 = phi i32 [ 0, %209 ], [ %231, %230 ]
  %234 = trunc i32 %233 to i16
  %235 = load i32* %c, align 4
  %236 = sext i32 %235 to i64
  %237 = load [4 x i16]** %pix, align 8
  %238 = getelementptr inbounds [4 x i16]* %237, i64 0
  %239 = getelementptr inbounds [4 x i16]* %238, i32 0, i64 %236
  store i16 %234, i16* %239, align 2
  br label %240

; <label>:240                                     ; preds = %232, %72
  %241 = load [4 x i16]** %pix, align 8
  %242 = getelementptr inbounds [4 x i16]* %241, i32 1
  store [4 x i16]* %242, [4 x i16]** %pix, align 8
  br label %48

; <label>:243                                     ; preds = %48
  br label %244

; <label>:244                                     ; preds = %243
  %245 = load i32* %c, align 4
  %246 = add nsw i32 %245, 2
  store i32 %246, i32* %c, align 4
  br label %13

; <label>:247                                     ; preds = %13
  br label %248

; <label>:248                                     ; preds = %247
  %249 = load i32* %pass, align 4
  %250 = add nsw i32 %249, 1
  store i32 %250, i32* %pass, align 4
  br label %1

; <label>:251                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @blend_highlights() #0 {
  %clip = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %cam = alloca [2 x [4 x float]], align 16
  %lab = alloca [2 x [4 x float]], align 16
  %sum = alloca [2 x float], align 4
  %chratio = alloca float, align 4
  store i32 2147483647, i32* %clip, align 4
  %1 = load i32* @colors, align 4
  %2 = sub nsw i32 %1, 3
  %3 = icmp ugt i32 %2, 1
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  br label %323

; <label>:5                                       ; preds = %0
  %6 = load i32* @verbose, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %5
  %9 = load %struct._IO_FILE** @stderr, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([24 x i8]* @.str83, i32 0, i32 0))
  br label %11

; <label>:11                                      ; preds = %8, %5
  store i32 0, i32* %c, align 4
  br label %12

; <label>:12                                      ; preds = %28, %11
  %13 = load i32* %c, align 4
  %14 = load i32* @colors, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %31

; <label>:16                                      ; preds = %12
  %17 = load i32* %clip, align 4
  %18 = load i32* %c, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %19
  %21 = load float* %20, align 4
  %22 = fmul float 6.553500e+04, %21
  %23 = fptosi float %22 to i32
  store i32 %23, i32* %i, align 4
  %24 = icmp sgt i32 %17, %23
  br i1 %24, label %25, label %27

; <label>:25                                      ; preds = %16
  %26 = load i32* %i, align 4
  store i32 %26, i32* %clip, align 4
  br label %27

; <label>:27                                      ; preds = %25, %16
  br label %28

; <label>:28                                      ; preds = %27
  %29 = load i32* %c, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %c, align 4
  br label %12

; <label>:31                                      ; preds = %12
  store i32 0, i32* %row, align 4
  br label %32

; <label>:32                                      ; preds = %320, %31
  %33 = load i32* %row, align 4
  %34 = load i16* @height, align 2
  %35 = zext i16 %34 to i32
  %36 = icmp slt i32 %33, %35
  br i1 %36, label %37, label %323

; <label>:37                                      ; preds = %32
  store i32 0, i32* %col, align 4
  br label %38

; <label>:38                                      ; preds = %316, %37
  %39 = load i32* %col, align 4
  %40 = load i16* @width, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %319

; <label>:43                                      ; preds = %38
  store i32 0, i32* %c, align 4
  br label %44

; <label>:44                                      ; preds = %67, %43
  %45 = load i32* %c, align 4
  %46 = load i32* @colors, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %70

; <label>:48                                      ; preds = %44
  %49 = load i32* %c, align 4
  %50 = sext i32 %49 to i64
  %51 = load i32* %row, align 4
  %52 = load i16* @width, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nsw i32 %51, %53
  %55 = load i32* %col, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = load [4 x i16]** @image, align 8
  %59 = getelementptr inbounds [4 x i16]* %58, i64 %57
  %60 = getelementptr inbounds [4 x i16]* %59, i32 0, i64 %50
  %61 = load i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = load i32* %clip, align 4
  %64 = icmp sgt i32 %62, %63
  br i1 %64, label %65, label %66

; <label>:65                                      ; preds = %48
  br label %70

; <label>:66                                      ; preds = %48
  br label %67

; <label>:67                                      ; preds = %66
  %68 = load i32* %c, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %c, align 4
  br label %44

; <label>:70                                      ; preds = %65, %44
  %71 = load i32* %c, align 4
  %72 = load i32* @colors, align 4
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %70
  br label %316

; <label>:75                                      ; preds = %70
  store i32 0, i32* %c, align 4
  br label %76

; <label>:76                                      ; preds = %122, %75
  %77 = load i32* %c, align 4
  %78 = load i32* @colors, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %125

; <label>:80                                      ; preds = %76
  %81 = load i32* %c, align 4
  %82 = sext i32 %81 to i64
  %83 = load i32* %row, align 4
  %84 = load i16* @width, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nsw i32 %83, %85
  %87 = load i32* %col, align 4
  %88 = add nsw i32 %86, %87
  %89 = sext i32 %88 to i64
  %90 = load [4 x i16]** @image, align 8
  %91 = getelementptr inbounds [4 x i16]* %90, i64 %89
  %92 = getelementptr inbounds [4 x i16]* %91, i32 0, i64 %82
  %93 = load i16* %92, align 2
  %94 = uitofp i16 %93 to float
  %95 = load i32* %c, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %98 = getelementptr inbounds [4 x float]* %97, i32 0, i64 %96
  store float %94, float* %98, align 4
  %99 = load i32* %c, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %102 = getelementptr inbounds [4 x float]* %101, i32 0, i64 %100
  %103 = load float* %102, align 4
  %104 = load i32* %clip, align 4
  %105 = sitofp i32 %104 to float
  %106 = fcmp olt float %103, %105
  br i1 %106, label %107, label %113

; <label>:107                                     ; preds = %80
  %108 = load i32* %c, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %111 = getelementptr inbounds [4 x float]* %110, i32 0, i64 %109
  %112 = load float* %111, align 4
  br label %116

; <label>:113                                     ; preds = %80
  %114 = load i32* %clip, align 4
  %115 = sitofp i32 %114 to float
  br label %116

; <label>:116                                     ; preds = %113, %107
  %117 = phi float [ %112, %107 ], [ %115, %113 ]
  %118 = load i32* %c, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 1
  %121 = getelementptr inbounds [4 x float]* %120, i32 0, i64 %119
  store float %117, float* %121, align 4
  br label %122

; <label>:122                                     ; preds = %116
  %123 = load i32* %c, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %c, align 4
  br label %76

; <label>:125                                     ; preds = %76
  store i32 0, i32* %i, align 4
  br label %126

; <label>:126                                     ; preds = %213, %125
  %127 = load i32* %i, align 4
  %128 = icmp slt i32 %127, 2
  br i1 %128, label %129, label %216

; <label>:129                                     ; preds = %126
  store i32 0, i32* %c, align 4
  br label %130

; <label>:130                                     ; preds = %177, %129
  %131 = load i32* %c, align 4
  %132 = load i32* @colors, align 4
  %133 = icmp slt i32 %131, %132
  br i1 %133, label %134, label %180

; <label>:134                                     ; preds = %130
  store i32 0, i32* %j, align 4
  %135 = load i32* %c, align 4
  %136 = sext i32 %135 to i64
  %137 = load i32* %i, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %138
  %140 = getelementptr inbounds [4 x float]* %139, i32 0, i64 %136
  store float 0.000000e+00, float* %140, align 4
  br label %141

; <label>:141                                     ; preds = %173, %134
  %142 = load i32* %j, align 4
  %143 = load i32* @colors, align 4
  %144 = icmp slt i32 %142, %143
  br i1 %144, label %145, label %176

; <label>:145                                     ; preds = %141
  %146 = load i32* %j, align 4
  %147 = sext i32 %146 to i64
  %148 = load i32* %c, align 4
  %149 = sext i32 %148 to i64
  %150 = load i32* @colors, align 4
  %151 = sub nsw i32 %150, 3
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [2 x [4 x [4 x float]]]* @blend_highlights.trans, i32 0, i64 %152
  %154 = getelementptr inbounds [4 x [4 x float]]* %153, i32 0, i64 %149
  %155 = getelementptr inbounds [4 x float]* %154, i32 0, i64 %147
  %156 = load float* %155, align 4
  %157 = load i32* %j, align 4
  %158 = sext i32 %157 to i64
  %159 = load i32* %i, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 %160
  %162 = getelementptr inbounds [4 x float]* %161, i32 0, i64 %158
  %163 = load float* %162, align 4
  %164 = fmul float %156, %163
  %165 = load i32* %c, align 4
  %166 = sext i32 %165 to i64
  %167 = load i32* %i, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %168
  %170 = getelementptr inbounds [4 x float]* %169, i32 0, i64 %166
  %171 = load float* %170, align 4
  %172 = fadd float %171, %164
  store float %172, float* %170, align 4
  br label %173

; <label>:173                                     ; preds = %145
  %174 = load i32* %j, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %j, align 4
  br label %141

; <label>:176                                     ; preds = %141
  br label %177

; <label>:177                                     ; preds = %176
  %178 = load i32* %c, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %c, align 4
  br label %130

; <label>:180                                     ; preds = %130
  %181 = load i32* %i, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 %182
  store float 0.000000e+00, float* %183, align 4
  store i32 1, i32* %c, align 4
  br label %184

; <label>:184                                     ; preds = %209, %180
  %185 = load i32* %c, align 4
  %186 = load i32* @colors, align 4
  %187 = icmp slt i32 %185, %186
  br i1 %187, label %188, label %212

; <label>:188                                     ; preds = %184
  %189 = load i32* %c, align 4
  %190 = sext i32 %189 to i64
  %191 = load i32* %i, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %192
  %194 = getelementptr inbounds [4 x float]* %193, i32 0, i64 %190
  %195 = load float* %194, align 4
  %196 = load i32* %c, align 4
  %197 = sext i32 %196 to i64
  %198 = load i32* %i, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 %199
  %201 = getelementptr inbounds [4 x float]* %200, i32 0, i64 %197
  %202 = load float* %201, align 4
  %203 = fmul float %195, %202
  %204 = load i32* %i, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 %205
  %207 = load float* %206, align 4
  %208 = fadd float %207, %203
  store float %208, float* %206, align 4
  br label %209

; <label>:209                                     ; preds = %188
  %210 = load i32* %c, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %c, align 4
  br label %184

; <label>:212                                     ; preds = %184
  br label %213

; <label>:213                                     ; preds = %212
  %214 = load i32* %i, align 4
  %215 = add nsw i32 %214, 1
  store i32 %215, i32* %i, align 4
  br label %126

; <label>:216                                     ; preds = %126
  %217 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 1
  %218 = load float* %217, align 4
  %219 = getelementptr inbounds [2 x float]* %sum, i32 0, i64 0
  %220 = load float* %219, align 4
  %221 = fdiv float %218, %220
  %222 = fpext float %221 to double
  %223 = call double @sqrt(double %222) #4
  %224 = fptrunc double %223 to float
  store float %224, float* %chratio, align 4
  store i32 1, i32* %c, align 4
  br label %225

; <label>:225                                     ; preds = %237, %216
  %226 = load i32* %c, align 4
  %227 = load i32* @colors, align 4
  %228 = icmp slt i32 %226, %227
  br i1 %228, label %229, label %240

; <label>:229                                     ; preds = %225
  %230 = load float* %chratio, align 4
  %231 = load i32* %c, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 0
  %234 = getelementptr inbounds [4 x float]* %233, i32 0, i64 %232
  %235 = load float* %234, align 4
  %236 = fmul float %235, %230
  store float %236, float* %234, align 4
  br label %237

; <label>:237                                     ; preds = %229
  %238 = load i32* %c, align 4
  %239 = add nsw i32 %238, 1
  store i32 %239, i32* %c, align 4
  br label %225

; <label>:240                                     ; preds = %225
  store i32 0, i32* %c, align 4
  br label %241

; <label>:241                                     ; preds = %282, %240
  %242 = load i32* %c, align 4
  %243 = load i32* @colors, align 4
  %244 = icmp slt i32 %242, %243
  br i1 %244, label %245, label %285

; <label>:245                                     ; preds = %241
  store i32 0, i32* %j, align 4
  %246 = load i32* %c, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %249 = getelementptr inbounds [4 x float]* %248, i32 0, i64 %247
  store float 0.000000e+00, float* %249, align 4
  br label %250

; <label>:250                                     ; preds = %278, %245
  %251 = load i32* %j, align 4
  %252 = load i32* @colors, align 4
  %253 = icmp slt i32 %251, %252
  br i1 %253, label %254, label %281

; <label>:254                                     ; preds = %250
  %255 = load i32* %j, align 4
  %256 = sext i32 %255 to i64
  %257 = load i32* %c, align 4
  %258 = sext i32 %257 to i64
  %259 = load i32* @colors, align 4
  %260 = sub nsw i32 %259, 3
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [2 x [4 x [4 x float]]]* @blend_highlights.itrans, i32 0, i64 %261
  %263 = getelementptr inbounds [4 x [4 x float]]* %262, i32 0, i64 %258
  %264 = getelementptr inbounds [4 x float]* %263, i32 0, i64 %256
  %265 = load float* %264, align 4
  %266 = load i32* %j, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [2 x [4 x float]]* %lab, i32 0, i64 0
  %269 = getelementptr inbounds [4 x float]* %268, i32 0, i64 %267
  %270 = load float* %269, align 4
  %271 = fmul float %265, %270
  %272 = load i32* %c, align 4
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %275 = getelementptr inbounds [4 x float]* %274, i32 0, i64 %273
  %276 = load float* %275, align 4
  %277 = fadd float %276, %271
  store float %277, float* %275, align 4
  br label %278

; <label>:278                                     ; preds = %254
  %279 = load i32* %j, align 4
  %280 = add nsw i32 %279, 1
  store i32 %280, i32* %j, align 4
  br label %250

; <label>:281                                     ; preds = %250
  br label %282

; <label>:282                                     ; preds = %281
  %283 = load i32* %c, align 4
  %284 = add nsw i32 %283, 1
  store i32 %284, i32* %c, align 4
  br label %241

; <label>:285                                     ; preds = %241
  store i32 0, i32* %c, align 4
  br label %286

; <label>:286                                     ; preds = %312, %285
  %287 = load i32* %c, align 4
  %288 = load i32* @colors, align 4
  %289 = icmp slt i32 %287, %288
  br i1 %289, label %290, label %315

; <label>:290                                     ; preds = %286
  %291 = load i32* %c, align 4
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds [2 x [4 x float]]* %cam, i32 0, i64 0
  %294 = getelementptr inbounds [4 x float]* %293, i32 0, i64 %292
  %295 = load float* %294, align 4
  %296 = load i32* @colors, align 4
  %297 = sitofp i32 %296 to float
  %298 = fdiv float %295, %297
  %299 = fptoui float %298 to i16
  %300 = load i32* %c, align 4
  %301 = sext i32 %300 to i64
  %302 = load i32* %row, align 4
  %303 = load i16* @width, align 2
  %304 = zext i16 %303 to i32
  %305 = mul nsw i32 %302, %304
  %306 = load i32* %col, align 4
  %307 = add nsw i32 %305, %306
  %308 = sext i32 %307 to i64
  %309 = load [4 x i16]** @image, align 8
  %310 = getelementptr inbounds [4 x i16]* %309, i64 %308
  %311 = getelementptr inbounds [4 x i16]* %310, i32 0, i64 %301
  store i16 %299, i16* %311, align 2
  br label %312

; <label>:312                                     ; preds = %290
  %313 = load i32* %c, align 4
  %314 = add nsw i32 %313, 1
  store i32 %314, i32* %c, align 4
  br label %286

; <label>:315                                     ; preds = %286
  br label %316

; <label>:316                                     ; preds = %315, %74
  %317 = load i32* %col, align 4
  %318 = add nsw i32 %317, 1
  store i32 %318, i32* %col, align 4
  br label %38

; <label>:319                                     ; preds = %38
  br label %320

; <label>:320                                     ; preds = %319
  %321 = load i32* %row, align 4
  %322 = add nsw i32 %321, 1
  store i32 %322, i32* %row, align 4
  br label %32

; <label>:323                                     ; preds = %4, %32
  ret void
}

; Function Attrs: nounwind uwtable
define void @recover_highlights() #0 {
  %map = alloca float*, align 8
  %sum = alloca float, align 4
  %wgt = alloca float, align 4
  %grow = alloca float, align 4
  %hsat = alloca [4 x i32], align 16
  %count = alloca i32, align 4
  %spread = alloca i32, align 4
  %change = alloca i32, align 4
  %val = alloca i32, align 4
  %i = alloca i32, align 4
  %high = alloca i32, align 4
  %wide = alloca i32, align 4
  %mrow = alloca i32, align 4
  %mcol = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %kc = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  %pixel = alloca i16*, align 8
  %1 = load i32* @verbose, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([26 x i8]* @.str84, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = load i32* @highlight, align 4
  %8 = sub nsw i32 4, %7
  %9 = sitofp i32 %8 to double
  %10 = call double @pow(double 2.000000e+00, double %9) #4
  %11 = fptrunc double %10 to float
  store float %11, float* %grow, align 4
  store i32 0, i32* %c, align 4
  br label %12

; <label>:12                                      ; preds = %26, %6
  %13 = load i32* %c, align 4
  %14 = load i32* @colors, align 4
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %16, label %29

; <label>:16                                      ; preds = %12
  %17 = load i32* %c, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %18
  %20 = load float* %19, align 4
  %21 = fmul float 3.200000e+04, %20
  %22 = fptosi float %21 to i32
  %23 = load i32* %c, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [4 x i32]* %hsat, i32 0, i64 %24
  store i32 %22, i32* %25, align 4
  br label %26

; <label>:26                                      ; preds = %16
  %27 = load i32* %c, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %c, align 4
  br label %12

; <label>:29                                      ; preds = %12
  store i32 0, i32* %kc, align 4
  store i32 1, i32* %c, align 4
  br label %30

; <label>:30                                      ; preds = %47, %29
  %31 = load i32* %c, align 4
  %32 = load i32* @colors, align 4
  %33 = icmp ult i32 %31, %32
  br i1 %33, label %34, label %50

; <label>:34                                      ; preds = %30
  %35 = load i32* %kc, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %36
  %38 = load float* %37, align 4
  %39 = load i32* %c, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %40
  %42 = load float* %41, align 4
  %43 = fcmp olt float %38, %42
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %34
  %45 = load i32* %c, align 4
  store i32 %45, i32* %kc, align 4
  br label %46

; <label>:46                                      ; preds = %44, %34
  br label %47

; <label>:47                                      ; preds = %46
  %48 = load i32* %c, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %c, align 4
  br label %30

; <label>:50                                      ; preds = %30
  %51 = load i16* @height, align 2
  %52 = zext i16 %51 to i32
  %53 = load i16* @shrink, align 2
  %54 = zext i16 %53 to i32
  %55 = ashr i32 4, %54
  %56 = sdiv i32 %52, %55
  store i32 %56, i32* %high, align 4
  %57 = load i16* @width, align 2
  %58 = zext i16 %57 to i32
  %59 = load i16* @shrink, align 2
  %60 = zext i16 %59 to i32
  %61 = ashr i32 4, %60
  %62 = sdiv i32 %58, %61
  store i32 %62, i32* %wide, align 4
  %63 = load i32* %high, align 4
  %64 = load i32* %wide, align 4
  %65 = mul i32 %63, %64
  %66 = zext i32 %65 to i64
  %67 = call noalias i8* @calloc(i64 %66, i64 4) #4
  %68 = bitcast i8* %67 to float*
  store float* %68, float** %map, align 8
  %69 = load float** %map, align 8
  %70 = bitcast float* %69 to i8*
  call void @merror(i8* %70, i8* getelementptr inbounds ([21 x i8]* @.str85, i32 0, i32 0))
  store i32 0, i32* %c, align 4
  br label %71

; <label>:71                                      ; preds = %531, %50
  %72 = load i32* %c, align 4
  %73 = load i32* @colors, align 4
  %74 = icmp ult i32 %72, %73
  br i1 %74, label %75, label %534

; <label>:75                                      ; preds = %71
  %76 = load i32* %c, align 4
  %77 = load i32* %kc, align 4
  %78 = icmp ne i32 %76, %77
  br i1 %78, label %79, label %530

; <label>:79                                      ; preds = %75
  %80 = load float** %map, align 8
  %81 = bitcast float* %80 to i8*
  %82 = load i32* %high, align 4
  %83 = load i32* %wide, align 4
  %84 = mul i32 %82, %83
  %85 = zext i32 %84 to i64
  %86 = mul i64 %85, 4
  call void @llvm.memset.p0i8.i64(i8* %81, i8 0, i64 %86, i32 4, i1 false)
  store i32 0, i32* %mrow, align 4
  br label %87

; <label>:87                                      ; preds = %213, %79
  %88 = load i32* %mrow, align 4
  %89 = load i32* %high, align 4
  %90 = icmp ult i32 %88, %89
  br i1 %90, label %91, label %216

; <label>:91                                      ; preds = %87
  store i32 0, i32* %mcol, align 4
  br label %92

; <label>:92                                      ; preds = %209, %91
  %93 = load i32* %mcol, align 4
  %94 = load i32* %wide, align 4
  %95 = icmp ult i32 %93, %94
  br i1 %95, label %96, label %212

; <label>:96                                      ; preds = %92
  store i32 0, i32* %count, align 4
  store float 0.000000e+00, float* %wgt, align 4
  store float 0.000000e+00, float* %sum, align 4
  %97 = load i32* %mrow, align 4
  %98 = load i16* @shrink, align 2
  %99 = zext i16 %98 to i32
  %100 = ashr i32 4, %99
  %101 = mul i32 %97, %100
  store i32 %101, i32* %row, align 4
  br label %102

; <label>:102                                     ; preds = %183, %96
  %103 = load i32* %row, align 4
  %104 = load i32* %mrow, align 4
  %105 = add i32 %104, 1
  %106 = load i16* @shrink, align 2
  %107 = zext i16 %106 to i32
  %108 = ashr i32 4, %107
  %109 = mul i32 %105, %108
  %110 = icmp ult i32 %103, %109
  br i1 %110, label %111, label %186

; <label>:111                                     ; preds = %102
  %112 = load i32* %mcol, align 4
  %113 = load i16* @shrink, align 2
  %114 = zext i16 %113 to i32
  %115 = ashr i32 4, %114
  %116 = mul i32 %112, %115
  store i32 %116, i32* %col, align 4
  br label %117

; <label>:117                                     ; preds = %179, %111
  %118 = load i32* %col, align 4
  %119 = load i32* %mcol, align 4
  %120 = add i32 %119, 1
  %121 = load i16* @shrink, align 2
  %122 = zext i16 %121 to i32
  %123 = ashr i32 4, %122
  %124 = mul i32 %120, %123
  %125 = icmp ult i32 %118, %124
  br i1 %125, label %126, label %182

; <label>:126                                     ; preds = %117
  %127 = load i32* %row, align 4
  %128 = load i16* @width, align 2
  %129 = zext i16 %128 to i32
  %130 = mul i32 %127, %129
  %131 = load i32* %col, align 4
  %132 = add i32 %130, %131
  %133 = zext i32 %132 to i64
  %134 = load [4 x i16]** @image, align 8
  %135 = getelementptr inbounds [4 x i16]* %134, i64 %133
  %136 = getelementptr inbounds [4 x i16]* %135, i32 0, i32 0
  store i16* %136, i16** %pixel, align 8
  %137 = load i32* %c, align 4
  %138 = zext i32 %137 to i64
  %139 = load i16** %pixel, align 8
  %140 = getelementptr inbounds i16* %139, i64 %138
  %141 = load i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = load i32* %c, align 4
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [4 x i32]* %hsat, i32 0, i64 %144
  %146 = load i32* %145, align 4
  %147 = sdiv i32 %142, %146
  %148 = icmp eq i32 %147, 1
  br i1 %148, label %149, label %178

; <label>:149                                     ; preds = %126
  %150 = load i32* %kc, align 4
  %151 = zext i32 %150 to i64
  %152 = load i16** %pixel, align 8
  %153 = getelementptr inbounds i16* %152, i64 %151
  %154 = load i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = icmp sgt i32 %155, 24000
  br i1 %156, label %157, label %178

; <label>:157                                     ; preds = %149
  %158 = load i32* %c, align 4
  %159 = zext i32 %158 to i64
  %160 = load i16** %pixel, align 8
  %161 = getelementptr inbounds i16* %160, i64 %159
  %162 = load i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = sitofp i32 %163 to float
  %165 = load float* %sum, align 4
  %166 = fadd float %165, %164
  store float %166, float* %sum, align 4
  %167 = load i32* %kc, align 4
  %168 = zext i32 %167 to i64
  %169 = load i16** %pixel, align 8
  %170 = getelementptr inbounds i16* %169, i64 %168
  %171 = load i16* %170, align 2
  %172 = zext i16 %171 to i32
  %173 = sitofp i32 %172 to float
  %174 = load float* %wgt, align 4
  %175 = fadd float %174, %173
  store float %175, float* %wgt, align 4
  %176 = load i32* %count, align 4
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %count, align 4
  br label %178

; <label>:178                                     ; preds = %157, %149, %126
  br label %179

; <label>:179                                     ; preds = %178
  %180 = load i32* %col, align 4
  %181 = add i32 %180, 1
  store i32 %181, i32* %col, align 4
  br label %117

; <label>:182                                     ; preds = %117
  br label %183

; <label>:183                                     ; preds = %182
  %184 = load i32* %row, align 4
  %185 = add i32 %184, 1
  store i32 %185, i32* %row, align 4
  br label %102

; <label>:186                                     ; preds = %102
  %187 = load i32* %count, align 4
  %188 = load i16* @shrink, align 2
  %189 = zext i16 %188 to i32
  %190 = ashr i32 4, %189
  %191 = load i16* @shrink, align 2
  %192 = zext i16 %191 to i32
  %193 = ashr i32 4, %192
  %194 = mul nsw i32 %190, %193
  %195 = icmp eq i32 %187, %194
  br i1 %195, label %196, label %208

; <label>:196                                     ; preds = %186
  %197 = load float* %sum, align 4
  %198 = load float* %wgt, align 4
  %199 = fdiv float %197, %198
  %200 = load i32* %mrow, align 4
  %201 = load i32* %wide, align 4
  %202 = mul i32 %200, %201
  %203 = load i32* %mcol, align 4
  %204 = add i32 %202, %203
  %205 = zext i32 %204 to i64
  %206 = load float** %map, align 8
  %207 = getelementptr inbounds float* %206, i64 %205
  store float %199, float* %207, align 4
  br label %208

; <label>:208                                     ; preds = %196, %186
  br label %209

; <label>:209                                     ; preds = %208
  %210 = load i32* %mcol, align 4
  %211 = add i32 %210, 1
  store i32 %211, i32* %mcol, align 4
  br label %92

; <label>:212                                     ; preds = %92
  br label %213

; <label>:213                                     ; preds = %212
  %214 = load i32* %mrow, align 4
  %215 = add i32 %214, 1
  store i32 %215, i32* %mrow, align 4
  br label %87

; <label>:216                                     ; preds = %87
  %217 = load float* %grow, align 4
  %218 = fdiv float 3.200000e+01, %217
  %219 = fptosi float %218 to i32
  store i32 %219, i32* %spread, align 4
  br label %220

; <label>:220                                     ; preds = %373, %216
  %221 = load i32* %spread, align 4
  %222 = add nsw i32 %221, -1
  store i32 %222, i32* %spread, align 4
  %223 = icmp ne i32 %221, 0
  br i1 %223, label %224, label %374

; <label>:224                                     ; preds = %220
  store i32 0, i32* %mrow, align 4
  br label %225

; <label>:225                                     ; preds = %337, %224
  %226 = load i32* %mrow, align 4
  %227 = load i32* %high, align 4
  %228 = icmp ult i32 %226, %227
  br i1 %228, label %229, label %340

; <label>:229                                     ; preds = %225
  store i32 0, i32* %mcol, align 4
  br label %230

; <label>:230                                     ; preds = %333, %229
  %231 = load i32* %mcol, align 4
  %232 = load i32* %wide, align 4
  %233 = icmp ult i32 %231, %232
  br i1 %233, label %234, label %336

; <label>:234                                     ; preds = %230
  %235 = load i32* %mrow, align 4
  %236 = load i32* %wide, align 4
  %237 = mul i32 %235, %236
  %238 = load i32* %mcol, align 4
  %239 = add i32 %237, %238
  %240 = zext i32 %239 to i64
  %241 = load float** %map, align 8
  %242 = getelementptr inbounds float* %241, i64 %240
  %243 = load float* %242, align 4
  %244 = fcmp une float %243, 0.000000e+00
  br i1 %244, label %245, label %246

; <label>:245                                     ; preds = %234
  br label %333

; <label>:246                                     ; preds = %234
  store i32 0, i32* %count, align 4
  store float 0.000000e+00, float* %sum, align 4
  store i32 0, i32* %d, align 4
  br label %247

; <label>:247                                     ; preds = %308, %246
  %248 = load i32* %d, align 4
  %249 = icmp ult i32 %248, 8
  br i1 %249, label %250, label %311

; <label>:250                                     ; preds = %247
  %251 = load i32* %mrow, align 4
  %252 = load i32* %d, align 4
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds [8 x [2 x i8]]* @recover_highlights.dir, i32 0, i64 %253
  %255 = getelementptr inbounds [2 x i8]* %254, i32 0, i64 0
  %256 = load i8* %255, align 1
  %257 = sext i8 %256 to i32
  %258 = add i32 %251, %257
  store i32 %258, i32* %y, align 4
  %259 = load i32* %mcol, align 4
  %260 = load i32* %d, align 4
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds [8 x [2 x i8]]* @recover_highlights.dir, i32 0, i64 %261
  %263 = getelementptr inbounds [2 x i8]* %262, i32 0, i64 1
  %264 = load i8* %263, align 1
  %265 = sext i8 %264 to i32
  %266 = add i32 %259, %265
  store i32 %266, i32* %x, align 4
  %267 = load i32* %y, align 4
  %268 = load i32* %high, align 4
  %269 = icmp ult i32 %267, %268
  br i1 %269, label %270, label %307

; <label>:270                                     ; preds = %250
  %271 = load i32* %x, align 4
  %272 = load i32* %wide, align 4
  %273 = icmp ult i32 %271, %272
  br i1 %273, label %274, label %307

; <label>:274                                     ; preds = %270
  %275 = load i32* %y, align 4
  %276 = load i32* %wide, align 4
  %277 = mul i32 %275, %276
  %278 = load i32* %x, align 4
  %279 = add i32 %277, %278
  %280 = zext i32 %279 to i64
  %281 = load float** %map, align 8
  %282 = getelementptr inbounds float* %281, i64 %280
  %283 = load float* %282, align 4
  %284 = fcmp ogt float %283, 0.000000e+00
  br i1 %284, label %285, label %307

; <label>:285                                     ; preds = %274
  %286 = load i32* %d, align 4
  %287 = and i32 %286, 1
  %288 = add i32 1, %287
  %289 = uitofp i32 %288 to float
  %290 = load i32* %y, align 4
  %291 = load i32* %wide, align 4
  %292 = mul i32 %290, %291
  %293 = load i32* %x, align 4
  %294 = add i32 %292, %293
  %295 = zext i32 %294 to i64
  %296 = load float** %map, align 8
  %297 = getelementptr inbounds float* %296, i64 %295
  %298 = load float* %297, align 4
  %299 = fmul float %289, %298
  %300 = load float* %sum, align 4
  %301 = fadd float %300, %299
  store float %301, float* %sum, align 4
  %302 = load i32* %d, align 4
  %303 = and i32 %302, 1
  %304 = add i32 1, %303
  %305 = load i32* %count, align 4
  %306 = add i32 %305, %304
  store i32 %306, i32* %count, align 4
  br label %307

; <label>:307                                     ; preds = %285, %274, %270, %250
  br label %308

; <label>:308                                     ; preds = %307
  %309 = load i32* %d, align 4
  %310 = add i32 %309, 1
  store i32 %310, i32* %d, align 4
  br label %247

; <label>:311                                     ; preds = %247
  %312 = load i32* %count, align 4
  %313 = icmp sgt i32 %312, 3
  br i1 %313, label %314, label %332

; <label>:314                                     ; preds = %311
  %315 = load float* %sum, align 4
  %316 = load float* %grow, align 4
  %317 = fadd float %315, %316
  %318 = fsub float -0.000000e+00, %317
  %319 = load i32* %count, align 4
  %320 = sitofp i32 %319 to float
  %321 = load float* %grow, align 4
  %322 = fadd float %320, %321
  %323 = fdiv float %318, %322
  %324 = load i32* %mrow, align 4
  %325 = load i32* %wide, align 4
  %326 = mul i32 %324, %325
  %327 = load i32* %mcol, align 4
  %328 = add i32 %326, %327
  %329 = zext i32 %328 to i64
  %330 = load float** %map, align 8
  %331 = getelementptr inbounds float* %330, i64 %329
  store float %323, float* %331, align 4
  br label %332

; <label>:332                                     ; preds = %314, %311
  br label %333

; <label>:333                                     ; preds = %332, %245
  %334 = load i32* %mcol, align 4
  %335 = add i32 %334, 1
  store i32 %335, i32* %mcol, align 4
  br label %230

; <label>:336                                     ; preds = %230
  br label %337

; <label>:337                                     ; preds = %336
  %338 = load i32* %mrow, align 4
  %339 = add i32 %338, 1
  store i32 %339, i32* %mrow, align 4
  br label %225

; <label>:340                                     ; preds = %225
  store i32 0, i32* %i, align 4
  store i32 0, i32* %change, align 4
  br label %341

; <label>:341                                     ; preds = %366, %340
  %342 = load i32* %i, align 4
  %343 = load i32* %high, align 4
  %344 = load i32* %wide, align 4
  %345 = mul i32 %343, %344
  %346 = icmp ult i32 %342, %345
  br i1 %346, label %347, label %369

; <label>:347                                     ; preds = %341
  %348 = load i32* %i, align 4
  %349 = sext i32 %348 to i64
  %350 = load float** %map, align 8
  %351 = getelementptr inbounds float* %350, i64 %349
  %352 = load float* %351, align 4
  %353 = fcmp olt float %352, 0.000000e+00
  br i1 %353, label %354, label %365

; <label>:354                                     ; preds = %347
  %355 = load i32* %i, align 4
  %356 = sext i32 %355 to i64
  %357 = load float** %map, align 8
  %358 = getelementptr inbounds float* %357, i64 %356
  %359 = load float* %358, align 4
  %360 = fsub float -0.000000e+00, %359
  %361 = load i32* %i, align 4
  %362 = sext i32 %361 to i64
  %363 = load float** %map, align 8
  %364 = getelementptr inbounds float* %363, i64 %362
  store float %360, float* %364, align 4
  store i32 1, i32* %change, align 4
  br label %365

; <label>:365                                     ; preds = %354, %347
  br label %366

; <label>:366                                     ; preds = %365
  %367 = load i32* %i, align 4
  %368 = add nsw i32 %367, 1
  store i32 %368, i32* %i, align 4
  br label %341

; <label>:369                                     ; preds = %341
  %370 = load i32* %change, align 4
  %371 = icmp ne i32 %370, 0
  br i1 %371, label %373, label %372

; <label>:372                                     ; preds = %369
  br label %374

; <label>:373                                     ; preds = %369
  br label %220

; <label>:374                                     ; preds = %372, %220
  store i32 0, i32* %i, align 4
  br label %375

; <label>:375                                     ; preds = %394, %374
  %376 = load i32* %i, align 4
  %377 = load i32* %high, align 4
  %378 = load i32* %wide, align 4
  %379 = mul i32 %377, %378
  %380 = icmp ult i32 %376, %379
  br i1 %380, label %381, label %397

; <label>:381                                     ; preds = %375
  %382 = load i32* %i, align 4
  %383 = sext i32 %382 to i64
  %384 = load float** %map, align 8
  %385 = getelementptr inbounds float* %384, i64 %383
  %386 = load float* %385, align 4
  %387 = fcmp oeq float %386, 0.000000e+00
  br i1 %387, label %388, label %393

; <label>:388                                     ; preds = %381
  %389 = load i32* %i, align 4
  %390 = sext i32 %389 to i64
  %391 = load float** %map, align 8
  %392 = getelementptr inbounds float* %391, i64 %390
  store float 1.000000e+00, float* %392, align 4
  br label %393

; <label>:393                                     ; preds = %388, %381
  br label %394

; <label>:394                                     ; preds = %393
  %395 = load i32* %i, align 4
  %396 = add nsw i32 %395, 1
  store i32 %396, i32* %i, align 4
  br label %375

; <label>:397                                     ; preds = %375
  store i32 0, i32* %mrow, align 4
  br label %398

; <label>:398                                     ; preds = %526, %397
  %399 = load i32* %mrow, align 4
  %400 = load i32* %high, align 4
  %401 = icmp ult i32 %399, %400
  br i1 %401, label %402, label %529

; <label>:402                                     ; preds = %398
  store i32 0, i32* %mcol, align 4
  br label %403

; <label>:403                                     ; preds = %522, %402
  %404 = load i32* %mcol, align 4
  %405 = load i32* %wide, align 4
  %406 = icmp ult i32 %404, %405
  br i1 %406, label %407, label %525

; <label>:407                                     ; preds = %403
  %408 = load i32* %mrow, align 4
  %409 = load i16* @shrink, align 2
  %410 = zext i16 %409 to i32
  %411 = ashr i32 4, %410
  %412 = mul i32 %408, %411
  store i32 %412, i32* %row, align 4
  br label %413

; <label>:413                                     ; preds = %518, %407
  %414 = load i32* %row, align 4
  %415 = load i32* %mrow, align 4
  %416 = add i32 %415, 1
  %417 = load i16* @shrink, align 2
  %418 = zext i16 %417 to i32
  %419 = ashr i32 4, %418
  %420 = mul i32 %416, %419
  %421 = icmp ult i32 %414, %420
  br i1 %421, label %422, label %521

; <label>:422                                     ; preds = %413
  %423 = load i32* %mcol, align 4
  %424 = load i16* @shrink, align 2
  %425 = zext i16 %424 to i32
  %426 = ashr i32 4, %425
  %427 = mul i32 %423, %426
  store i32 %427, i32* %col, align 4
  br label %428

; <label>:428                                     ; preds = %514, %422
  %429 = load i32* %col, align 4
  %430 = load i32* %mcol, align 4
  %431 = add i32 %430, 1
  %432 = load i16* @shrink, align 2
  %433 = zext i16 %432 to i32
  %434 = ashr i32 4, %433
  %435 = mul i32 %431, %434
  %436 = icmp ult i32 %429, %435
  br i1 %436, label %437, label %517

; <label>:437                                     ; preds = %428
  %438 = load i32* %row, align 4
  %439 = load i16* @width, align 2
  %440 = zext i16 %439 to i32
  %441 = mul i32 %438, %440
  %442 = load i32* %col, align 4
  %443 = add i32 %441, %442
  %444 = zext i32 %443 to i64
  %445 = load [4 x i16]** @image, align 8
  %446 = getelementptr inbounds [4 x i16]* %445, i64 %444
  %447 = getelementptr inbounds [4 x i16]* %446, i32 0, i32 0
  store i16* %447, i16** %pixel, align 8
  %448 = load i32* %c, align 4
  %449 = zext i32 %448 to i64
  %450 = load i16** %pixel, align 8
  %451 = getelementptr inbounds i16* %450, i64 %449
  %452 = load i16* %451, align 2
  %453 = zext i16 %452 to i32
  %454 = load i32* %c, align 4
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds [4 x i32]* %hsat, i32 0, i64 %455
  %457 = load i32* %456, align 4
  %458 = sdiv i32 %453, %457
  %459 = icmp sgt i32 %458, 1
  br i1 %459, label %460, label %513

; <label>:460                                     ; preds = %437
  %461 = load i32* %kc, align 4
  %462 = zext i32 %461 to i64
  %463 = load i16** %pixel, align 8
  %464 = getelementptr inbounds i16* %463, i64 %462
  %465 = load i16* %464, align 2
  %466 = zext i16 %465 to i32
  %467 = sitofp i32 %466 to float
  %468 = load i32* %mrow, align 4
  %469 = load i32* %wide, align 4
  %470 = mul i32 %468, %469
  %471 = load i32* %mcol, align 4
  %472 = add i32 %470, %471
  %473 = zext i32 %472 to i64
  %474 = load float** %map, align 8
  %475 = getelementptr inbounds float* %474, i64 %473
  %476 = load float* %475, align 4
  %477 = fmul float %467, %476
  %478 = fptosi float %477 to i32
  store i32 %478, i32* %val, align 4
  %479 = load i32* %c, align 4
  %480 = zext i32 %479 to i64
  %481 = load i16** %pixel, align 8
  %482 = getelementptr inbounds i16* %481, i64 %480
  %483 = load i16* %482, align 2
  %484 = zext i16 %483 to i32
  %485 = load i32* %val, align 4
  %486 = icmp slt i32 %484, %485
  br i1 %486, label %487, label %512

; <label>:487                                     ; preds = %460
  %488 = load i32* %val, align 4
  %489 = icmp slt i32 %488, 65535
  br i1 %489, label %490, label %492

; <label>:490                                     ; preds = %487
  %491 = load i32* %val, align 4
  br label %493

; <label>:492                                     ; preds = %487
  br label %493

; <label>:493                                     ; preds = %492, %490
  %494 = phi i32 [ %491, %490 ], [ 65535, %492 ]
  %495 = icmp sgt i32 0, %494
  br i1 %495, label %496, label %497

; <label>:496                                     ; preds = %493
  br label %505

; <label>:497                                     ; preds = %493
  %498 = load i32* %val, align 4
  %499 = icmp slt i32 %498, 65535
  br i1 %499, label %500, label %502

; <label>:500                                     ; preds = %497
  %501 = load i32* %val, align 4
  br label %503

; <label>:502                                     ; preds = %497
  br label %503

; <label>:503                                     ; preds = %502, %500
  %504 = phi i32 [ %501, %500 ], [ 65535, %502 ]
  br label %505

; <label>:505                                     ; preds = %503, %496
  %506 = phi i32 [ 0, %496 ], [ %504, %503 ]
  %507 = trunc i32 %506 to i16
  %508 = load i32* %c, align 4
  %509 = zext i32 %508 to i64
  %510 = load i16** %pixel, align 8
  %511 = getelementptr inbounds i16* %510, i64 %509
  store i16 %507, i16* %511, align 2
  br label %512

; <label>:512                                     ; preds = %505, %460
  br label %513

; <label>:513                                     ; preds = %512, %437
  br label %514

; <label>:514                                     ; preds = %513
  %515 = load i32* %col, align 4
  %516 = add i32 %515, 1
  store i32 %516, i32* %col, align 4
  br label %428

; <label>:517                                     ; preds = %428
  br label %518

; <label>:518                                     ; preds = %517
  %519 = load i32* %row, align 4
  %520 = add i32 %519, 1
  store i32 %520, i32* %row, align 4
  br label %413

; <label>:521                                     ; preds = %413
  br label %522

; <label>:522                                     ; preds = %521
  %523 = load i32* %mcol, align 4
  %524 = add i32 %523, 1
  store i32 %524, i32* %mcol, align 4
  br label %403

; <label>:525                                     ; preds = %403
  br label %526

; <label>:526                                     ; preds = %525
  %527 = load i32* %mrow, align 4
  %528 = add i32 %527, 1
  store i32 %528, i32* %mrow, align 4
  br label %398

; <label>:529                                     ; preds = %398
  br label %530

; <label>:530                                     ; preds = %529, %75
  br label %531

; <label>:531                                     ; preds = %530
  %532 = load i32* %c, align 4
  %533 = add i32 %532, 1
  store i32 %533, i32* %c, align 4
  br label %71

; <label>:534                                     ; preds = %71
  %535 = load float** %map, align 8
  %536 = bitcast float* %535 to i8*
  call void @free(i8* %536) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @tiff_get(i32 %base, i32* %tag, i32* %type, i32* %len, i32* %save) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  store i32 %base, i32* %1, align 4
  store i32* %tag, i32** %2, align 8
  store i32* %type, i32** %3, align 8
  store i32* %len, i32** %4, align 8
  store i32* %save, i32** %5, align 8
  %6 = call zeroext i16 @get2()
  %7 = zext i16 %6 to i32
  %8 = load i32** %2, align 8
  store i32 %7, i32* %8, align 4
  %9 = call zeroext i16 @get2()
  %10 = zext i16 %9 to i32
  %11 = load i32** %3, align 8
  store i32 %10, i32* %11, align 4
  %12 = call i32 @get4()
  %13 = load i32** %4, align 8
  store i32 %12, i32* %13, align 4
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i64 @ftell(%struct._IO_FILE* %14)
  %16 = add nsw i64 %15, 4
  %17 = trunc i64 %16 to i32
  %18 = load i32** %5, align 8
  store i32 %17, i32* %18, align 4
  %19 = load i32** %4, align 8
  %20 = load i32* %19, align 4
  %21 = load i32** %3, align 8
  %22 = load i32* %21, align 4
  %23 = icmp ult i32 %22, 14
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %0
  %25 = load i32** %3, align 8
  %26 = load i32* %25, align 4
  br label %28

; <label>:27                                      ; preds = %0
  br label %28

; <label>:28                                      ; preds = %27, %24
  %29 = phi i32 [ %26, %24 ], [ 0, %27 ]
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [15 x i8]* @.str86, i32 0, i64 %30
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = sub nsw i32 %33, 48
  %35 = mul i32 %20, %34
  %36 = icmp ugt i32 %35, 4
  br i1 %36, label %37, label %44

; <label>:37                                      ; preds = %28
  %38 = load %struct._IO_FILE** @ifp, align 8
  %39 = call i32 @get4()
  %40 = load i32* %1, align 4
  %41 = add i32 %39, %40
  %42 = zext i32 %41 to i64
  %43 = call i32 @fseek(%struct._IO_FILE* %38, i64 %42, i32 0)
  br label %44

; <label>:44                                      ; preds = %37, %28
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_thumb_note(i32 %base, i32 %toff, i32 %tlen) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  store i32 %base, i32* %1, align 4
  store i32 %toff, i32* %2, align 4
  store i32 %tlen, i32* %3, align 4
  %4 = call zeroext i16 @get2()
  %5 = zext i16 %4 to i32
  store i32 %5, i32* %entries, align 4
  br label %6

; <label>:6                                       ; preds = %26, %0
  %7 = load i32* %entries, align 4
  %8 = add i32 %7, -1
  store i32 %8, i32* %entries, align 4
  %9 = icmp ne i32 %7, 0
  br i1 %9, label %10, label %31

; <label>:10                                      ; preds = %6
  %11 = load i32* %1, align 4
  call void @tiff_get(i32 %11, i32* %tag, i32* %type, i32* %len, i32* %save)
  %12 = load i32* %tag, align 4
  %13 = load i32* %2, align 4
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %10
  %16 = call i32 @get4()
  %17 = load i32* %1, align 4
  %18 = add i32 %16, %17
  %19 = zext i32 %18 to i64
  store i64 %19, i64* @thumb_offset, align 8
  br label %20

; <label>:20                                      ; preds = %15, %10
  %21 = load i32* %tag, align 4
  %22 = load i32* %3, align 4
  %23 = icmp eq i32 %21, %22
  br i1 %23, label %24, label %26

; <label>:24                                      ; preds = %20
  %25 = call i32 @get4()
  store i32 %25, i32* @thumb_length, align 4
  br label %26

; <label>:26                                      ; preds = %24, %20
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = load i32* %save, align 4
  %29 = zext i32 %28 to i64
  %30 = call i32 @fseek(%struct._IO_FILE* %27, i64 %29, i32 0)
  br label %6

; <label>:31                                      ; preds = %6
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_makernote(i32 %base, i32 %uptag) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %offset = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %c = alloca i32, align 4
  %ver97 = alloca i32, align 4
  %serial = alloca i32, align 4
  %i = alloca i32, align 4
  %wbi = alloca i32, align 4
  %wb = alloca [4 x i32], align 16
  %buf97 = alloca [324 x i8], align 16
  %ci = alloca i8, align 1
  %cj = alloca i8, align 1
  %ck = alloca i8, align 1
  %sorder = alloca i16, align 2
  %buf = alloca [10 x i8], align 1
  store i32 %base, i32* %1, align 4
  store i32 %uptag, i32* %2, align 4
  store i32 0, i32* %offset, align 4
  store i32 0, i32* %ver97, align 4
  store i32 0, i32* %serial, align 4
  store i32 0, i32* %wbi, align 4
  %3 = bitcast [4 x i32]* %wb to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 16, i1 false)
  %4 = load i16* @order, align 2
  store i16 %4, i16* %sorder, align 2
  %5 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i64 @fread(i8* %5, i64 1, i64 10, %struct._IO_FILE* %6)
  %8 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %9 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([4 x i8]* @.str87, i32 0, i32 0), i64 3) #10
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %23

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %13 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([4 x i8]* @.str88, i32 0, i32 0), i64 3) #10
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %23

; <label>:15                                      ; preds = %11
  %16 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %17 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([5 x i8]* @.str89, i32 0, i32 0), i64 4) #10
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %15
  %20 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %21 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([5 x i8]* @.str90, i32 0, i32 0), i64 4) #10
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %24, label %23

; <label>:23                                      ; preds = %19, %15, %11, %0
  br label %1072

; <label>:24                                      ; preds = %19
  %25 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %26 = call i32 @strncmp(i8* %25, i8* getelementptr inbounds ([3 x i8]* @.str91, i32 0, i32 0), i64 2) #10
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %32

; <label>:28                                      ; preds = %24
  %29 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %30 = call i32 @strncmp(i8* %29, i8* getelementptr inbounds ([4 x i8]* @.str92, i32 0, i32 0), i64 3) #10
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %100, label %32

; <label>:32                                      ; preds = %28, %24
  store i16 19789, i16* @order, align 2
  br label %33

; <label>:33                                      ; preds = %98, %32
  %34 = load %struct._IO_FILE** @ifp, align 8
  %35 = call i64 @ftell(%struct._IO_FILE* %34)
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %i, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64* @data_offset, align 8
  %39 = icmp slt i64 %37, %38
  br i1 %39, label %40, label %43

; <label>:40                                      ; preds = %33
  %41 = load i32* %i, align 4
  %42 = icmp ult i32 %41, 16384
  br label %43

; <label>:43                                      ; preds = %40, %33
  %44 = phi i1 [ false, %33 ], [ %42, %40 ]
  br i1 %44, label %45, label %99

; <label>:45                                      ; preds = %43
  %46 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  %47 = load i32* %46, align 4
  %48 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 0
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 1
  %50 = load i32* %49, align 4
  %51 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 3
  %53 = load i32* %52, align 4
  %54 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 1
  store i32 %53, i32* %54, align 4
  %55 = call zeroext i16 @get2()
  %56 = zext i16 %55 to i32
  %57 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 3
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 1
  %59 = load i32* %58, align 4
  %60 = icmp eq i32 %59, 256
  br i1 %60, label %61, label %98

; <label>:61                                      ; preds = %45
  %62 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 3
  %63 = load i32* %62, align 4
  %64 = icmp eq i32 %63, 256
  br i1 %64, label %65, label %98

; <label>:65                                      ; preds = %61
  %66 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 0
  %67 = load i32* %66, align 4
  %68 = icmp ugt i32 %67, 256
  br i1 %68, label %69, label %98

; <label>:69                                      ; preds = %65
  %70 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 0
  %71 = load i32* %70, align 4
  %72 = icmp ult i32 %71, 640
  br i1 %72, label %73, label %98

; <label>:73                                      ; preds = %69
  %74 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  %75 = load i32* %74, align 4
  %76 = icmp ugt i32 %75, 256
  br i1 %76, label %77, label %98

; <label>:77                                      ; preds = %73
  %78 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 2
  %79 = load i32* %78, align 4
  %80 = icmp ult i32 %79, 640
  br i1 %80, label %81, label %98

; <label>:81                                      ; preds = %77
  store i32 0, i32* %c, align 4
  br label %82

; <label>:82                                      ; preds = %94, %81
  %83 = load i32* %c, align 4
  %84 = icmp ult i32 %83, 4
  br i1 %84, label %85, label %97

; <label>:85                                      ; preds = %82
  %86 = load i32* %c, align 4
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [4 x i32]* %wb, i32 0, i64 %87
  %89 = load i32* %88, align 4
  %90 = uitofp i32 %89 to float
  %91 = load i32* %c, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %92
  store float %90, float* %93, align 4
  br label %94

; <label>:94                                      ; preds = %85
  %95 = load i32* %c, align 4
  %96 = add i32 %95, 1
  store i32 %96, i32* %c, align 4
  br label %82

; <label>:97                                      ; preds = %82
  br label %98

; <label>:98                                      ; preds = %97, %77, %73, %69, %65, %61, %45
  br label %33

; <label>:99                                      ; preds = %43
  br label %1070

; <label>:100                                     ; preds = %28
  %101 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %102 = call i32 @strcmp(i8* %101, i8* getelementptr inbounds ([6 x i8]* @.str93, i32 0, i32 0)) #10
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %120, label %104

; <label>:104                                     ; preds = %100
  %105 = load %struct._IO_FILE** @ifp, align 8
  %106 = call i64 @ftell(%struct._IO_FILE* %105)
  %107 = trunc i64 %106 to i32
  store i32 %107, i32* %1, align 4
  %108 = call zeroext i16 @get2()
  store i16 %108, i16* @order, align 2
  %109 = call zeroext i16 @get2()
  %110 = zext i16 %109 to i32
  %111 = icmp ne i32 %110, 42
  br i1 %111, label %112, label %113

; <label>:112                                     ; preds = %104
  br label %1070

; <label>:113                                     ; preds = %104
  %114 = call i32 @get4()
  store i32 %114, i32* %offset, align 4
  %115 = load %struct._IO_FILE** @ifp, align 8
  %116 = load i32* %offset, align 4
  %117 = sub i32 %116, 8
  %118 = zext i32 %117 to i64
  %119 = call i32 @fseek(%struct._IO_FILE* %115, i64 %118, i32 1)
  br label %185

; <label>:120                                     ; preds = %100
  %121 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %122 = call i32 @strcmp(i8* %121, i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0)) #10
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %133, label %124

; <label>:124                                     ; preds = %120
  %125 = load %struct._IO_FILE** @ifp, align 8
  %126 = call i64 @ftell(%struct._IO_FILE* %125)
  %127 = sub nsw i64 %126, 10
  %128 = trunc i64 %127 to i32
  store i32 %128, i32* %1, align 4
  %129 = load %struct._IO_FILE** @ifp, align 8
  %130 = call i32 @fseek(%struct._IO_FILE* %129, i64 -2, i32 1)
  %131 = call zeroext i16 @get2()
  store i16 %131, i16* @order, align 2
  %132 = call zeroext i16 @get2()
  br label %184

; <label>:133                                     ; preds = %120
  %134 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([9 x i8]* @.str94, i32 0, i32 0), i64 8) #10
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %145

; <label>:137                                     ; preds = %133
  %138 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %139 = call i32 @strncmp(i8* %138, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), i64 4) #10
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %145

; <label>:141                                     ; preds = %137
  %142 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %143 = call i32 @strcmp(i8* %142, i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0)) #10
  %144 = icmp ne i32 %143, 0
  br i1 %144, label %148, label %145

; <label>:145                                     ; preds = %141, %137, %133
  store i16 18761, i16* @order, align 2
  %146 = load %struct._IO_FILE** @ifp, align 8
  %147 = call i32 @fseek(%struct._IO_FILE* %146, i64 2, i32 1)
  br label %183

; <label>:148                                     ; preds = %141
  %149 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %150 = call i32 @strcmp(i8* %149, i8* getelementptr inbounds ([6 x i8]* @.str97, i32 0, i32 0)) #10
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %164

; <label>:152                                     ; preds = %148
  %153 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %154 = call i32 @strcmp(i8* %153, i8* getelementptr inbounds ([6 x i8]* @.str98, i32 0, i32 0)) #10
  %155 = icmp ne i32 %154, 0
  br i1 %155, label %156, label %164

; <label>:156                                     ; preds = %152
  %157 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %158 = call i32 @strcmp(i8* %157, i8* getelementptr inbounds ([6 x i8]* @.str99, i32 0, i32 0)) #10
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %160, label %164

; <label>:160                                     ; preds = %156
  %161 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %162 = call i32 @strcmp(i8* %161, i8* getelementptr inbounds ([6 x i8]* @.str100, i32 0, i32 0)) #10
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %167, label %164

; <label>:164                                     ; preds = %160, %156, %152, %148
  %165 = load %struct._IO_FILE** @ifp, align 8
  %166 = call i32 @fseek(%struct._IO_FILE* %165, i64 -2, i32 1)
  br label %182

; <label>:167                                     ; preds = %160
  %168 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %169 = call i32 @strcmp(i8* %168, i8* getelementptr inbounds ([4 x i8]* @.str101, i32 0, i32 0)) #10
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %175

; <label>:171                                     ; preds = %167
  %172 = getelementptr inbounds [10 x i8]* %buf, i32 0, i32 0
  %173 = call i32 @strcmp(i8* %172, i8* getelementptr inbounds ([4 x i8]* @.str102, i32 0, i32 0)) #10
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %178, label %175

; <label>:175                                     ; preds = %171, %167
  %176 = load %struct._IO_FILE** @ifp, align 8
  %177 = call i32 @fseek(%struct._IO_FILE* %176, i64 -4, i32 1)
  br label %181

; <label>:178                                     ; preds = %171
  %179 = load %struct._IO_FILE** @ifp, align 8
  %180 = call i32 @fseek(%struct._IO_FILE* %179, i64 -10, i32 1)
  br label %181

; <label>:181                                     ; preds = %178, %175
  br label %182

; <label>:182                                     ; preds = %181, %164
  br label %183

; <label>:183                                     ; preds = %182, %145
  br label %184

; <label>:184                                     ; preds = %183, %124
  br label %185

; <label>:185                                     ; preds = %184, %113
  %186 = call zeroext i16 @get2()
  %187 = zext i16 %186 to i32
  store i32 %187, i32* %entries, align 4
  %188 = load i32* %entries, align 4
  %189 = icmp ugt i32 %188, 1000
  br i1 %189, label %190, label %191

; <label>:190                                     ; preds = %185
  br label %1072

; <label>:191                                     ; preds = %185
  br label %192

; <label>:192                                     ; preds = %1064, %191
  %193 = load i32* %entries, align 4
  %194 = add i32 %193, -1
  store i32 %194, i32* %entries, align 4
  %195 = icmp ne i32 %193, 0
  br i1 %195, label %196, label %1069

; <label>:196                                     ; preds = %192
  %197 = load i32* %1, align 4
  call void @tiff_get(i32 %197, i32* %tag, i32* %type, i32* %len, i32* %save)
  %198 = load i32* %2, align 4
  %199 = shl i32 %198, 16
  %200 = load i32* %tag, align 4
  %201 = or i32 %200, %199
  store i32 %201, i32* %tag, align 4
  %202 = load i32* %tag, align 4
  %203 = icmp eq i32 %202, 2
  br i1 %203, label %204, label %211

; <label>:204                                     ; preds = %196
  %205 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0)) #10
  %206 = icmp ne i8* %205, null
  br i1 %206, label %207, label %211

; <label>:207                                     ; preds = %204
  %208 = call zeroext i16 @get2()
  %209 = call zeroext i16 @get2()
  %210 = uitofp i16 %209 to float
  store float %210, float* @iso_speed, align 4
  br label %211

; <label>:211                                     ; preds = %207, %204, %196
  %212 = load i32* %tag, align 4
  %213 = icmp eq i32 %212, 4
  br i1 %213, label %214, label %272

; <label>:214                                     ; preds = %211
  %215 = load i32* %len, align 4
  %216 = icmp ugt i32 %215, 26
  br i1 %216, label %217, label %272

; <label>:217                                     ; preds = %214
  %218 = load i32* %len, align 4
  %219 = icmp ult i32 %218, 35
  br i1 %219, label %220, label %272

; <label>:220                                     ; preds = %217
  %221 = call i32 @get4()
  %222 = call zeroext i16 @get2()
  %223 = zext i16 %222 to i32
  store i32 %223, i32* %i, align 4
  %224 = icmp ne i32 %223, 32767
  br i1 %224, label %225, label %236

; <label>:225                                     ; preds = %220
  %226 = load float* @iso_speed, align 4
  %227 = fcmp une float %226, 0.000000e+00
  br i1 %227, label %236, label %228

; <label>:228                                     ; preds = %225
  %229 = load i32* %i, align 4
  %230 = uitofp i32 %229 to double
  %231 = fdiv double %230, 3.200000e+01
  %232 = fsub double %231, 4.000000e+00
  %233 = call double @pow(double 2.000000e+00, double %232) #4
  %234 = fmul double 5.000000e+01, %233
  %235 = fptrunc double %234 to float
  store float %235, float* @iso_speed, align 4
  br label %236

; <label>:236                                     ; preds = %228, %225, %220
  %237 = call zeroext i16 @get2()
  %238 = call zeroext i16 @get2()
  %239 = zext i16 %238 to i32
  store i32 %239, i32* %i, align 4
  %240 = icmp ne i32 %239, 32767
  br i1 %240, label %241, label %250

; <label>:241                                     ; preds = %236
  %242 = load float* @aperture, align 4
  %243 = fcmp une float %242, 0.000000e+00
  br i1 %243, label %250, label %244

; <label>:244                                     ; preds = %241
  %245 = load i32* %i, align 4
  %246 = uitofp i32 %245 to double
  %247 = fdiv double %246, 6.400000e+01
  %248 = call double @pow(double 2.000000e+00, double %247) #4
  %249 = fptrunc double %248 to float
  store float %249, float* @aperture, align 4
  br label %250

; <label>:250                                     ; preds = %244, %241, %236
  %251 = call zeroext i16 @get2()
  %252 = zext i16 %251 to i32
  store i32 %252, i32* %i, align 4
  %253 = icmp ne i32 %252, 65535
  br i1 %253, label %254, label %265

; <label>:254                                     ; preds = %250
  %255 = load float* @shutter, align 4
  %256 = fcmp une float %255, 0.000000e+00
  br i1 %256, label %265, label %257

; <label>:257                                     ; preds = %254
  %258 = load i32* %i, align 4
  %259 = trunc i32 %258 to i16
  %260 = sext i16 %259 to i32
  %261 = sitofp i32 %260 to double
  %262 = fdiv double %261, -3.200000e+01
  %263 = call double @pow(double 2.000000e+00, double %262) #4
  %264 = fptrunc double %263 to float
  store float %264, float* @shutter, align 4
  br label %265

; <label>:265                                     ; preds = %257, %254, %250
  %266 = call zeroext i16 @get2()
  %267 = call zeroext i16 @get2()
  %268 = zext i16 %267 to i32
  store i32 %268, i32* %wbi, align 4
  %269 = call zeroext i16 @get2()
  %270 = call zeroext i16 @get2()
  %271 = zext i16 %270 to i32
  store i32 %271, i32* @shot_order, align 4
  br label %272

; <label>:272                                     ; preds = %265, %217, %214, %211
  %273 = load i32* %tag, align 4
  %274 = icmp eq i32 %273, 7
  br i1 %274, label %275, label %284

; <label>:275                                     ; preds = %272
  %276 = load i32* %type, align 4
  %277 = icmp eq i32 %276, 2
  br i1 %277, label %278, label %284

; <label>:278                                     ; preds = %275
  %279 = load i32* %len, align 4
  %280 = icmp ugt i32 %279, 20
  br i1 %280, label %281, label %284

; <label>:281                                     ; preds = %278
  %282 = load %struct._IO_FILE** @ifp, align 8
  %283 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i32 64, %struct._IO_FILE* %282)
  br label %284

; <label>:284                                     ; preds = %281, %278, %275, %272
  %285 = load i32* %tag, align 4
  %286 = icmp eq i32 %285, 8
  br i1 %286, label %287, label %292

; <label>:287                                     ; preds = %284
  %288 = load i32* %type, align 4
  %289 = icmp eq i32 %288, 4
  br i1 %289, label %290, label %292

; <label>:290                                     ; preds = %287
  %291 = call i32 @get4()
  store i32 %291, i32* @shot_order, align 4
  br label %292

; <label>:292                                     ; preds = %290, %287, %284
  %293 = load i32* %tag, align 4
  %294 = icmp eq i32 %293, 9
  br i1 %294, label %295, label %301

; <label>:295                                     ; preds = %292
  %296 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0)) #10
  %297 = icmp ne i32 %296, 0
  br i1 %297, label %301, label %298

; <label>:298                                     ; preds = %295
  %299 = load %struct._IO_FILE** @ifp, align 8
  %300 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %299)
  br label %301

; <label>:301                                     ; preds = %298, %295, %292
  %302 = load i32* %tag, align 4
  %303 = icmp eq i32 %302, 12
  br i1 %303, label %304, label %314

; <label>:304                                     ; preds = %301
  %305 = load i32* %len, align 4
  %306 = icmp eq i32 %305, 4
  br i1 %306, label %307, label %314

; <label>:307                                     ; preds = %304
  %308 = load i32* %type, align 4
  %309 = call double @getreal(i32 %308)
  %310 = fptrunc double %309 to float
  store float %310, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %311 = load i32* %type, align 4
  %312 = call double @getreal(i32 %311)
  %313 = fptrunc double %312 to float
  store float %313, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %314

; <label>:314                                     ; preds = %307, %304, %301
  %315 = load i32* %tag, align 4
  %316 = icmp eq i32 %315, 16
  br i1 %316, label %317, label %322

; <label>:317                                     ; preds = %314
  %318 = load i32* %type, align 4
  %319 = icmp eq i32 %318, 4
  br i1 %319, label %320, label %322

; <label>:320                                     ; preds = %317
  %321 = call i32 @get4()
  store i32 %321, i32* @unique_id, align 4
  br label %322

; <label>:322                                     ; preds = %320, %317, %314
  %323 = load i32* %tag, align 4
  %324 = icmp eq i32 %323, 17
  br i1 %324, label %325, label %340

; <label>:325                                     ; preds = %322
  %326 = load i32* @is_raw, align 4
  %327 = icmp ne i32 %326, 0
  br i1 %327, label %328, label %340

; <label>:328                                     ; preds = %325
  %329 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0), i64 5) #10
  %330 = icmp ne i32 %329, 0
  br i1 %330, label %340, label %331

; <label>:331                                     ; preds = %328
  %332 = load %struct._IO_FILE** @ifp, align 8
  %333 = call i32 @get4()
  %334 = load i32* %1, align 4
  %335 = add i32 %333, %334
  %336 = zext i32 %335 to i64
  %337 = call i32 @fseek(%struct._IO_FILE* %332, i64 %336, i32 0)
  %338 = load i32* %1, align 4
  %339 = call i32 @parse_tiff_ifd(i32 %338)
  br label %340

; <label>:340                                     ; preds = %331, %328, %325, %322
  %341 = load i32* %tag, align 4
  %342 = icmp eq i32 %341, 20
  br i1 %342, label %343, label %352

; <label>:343                                     ; preds = %340
  %344 = load i32* %len, align 4
  %345 = icmp eq i32 %344, 2560
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = load i32* %type, align 4
  %348 = icmp eq i32 %347, 7
  br i1 %348, label %349, label %352

; <label>:349                                     ; preds = %346
  %350 = load %struct._IO_FILE** @ifp, align 8
  %351 = call i32 @fseek(%struct._IO_FILE* %350, i64 1248, i32 1)
  br label %952

; <label>:352                                     ; preds = %346, %343, %340
  %353 = load i32* %tag, align 4
  %354 = icmp eq i32 %353, 21
  br i1 %354, label %355, label %364

; <label>:355                                     ; preds = %352
  %356 = load i32* %type, align 4
  %357 = icmp eq i32 %356, 2
  br i1 %357, label %358, label %364

; <label>:358                                     ; preds = %355
  %359 = load i32* @is_raw, align 4
  %360 = icmp ne i32 %359, 0
  br i1 %360, label %361, label %364

; <label>:361                                     ; preds = %358
  %362 = load %struct._IO_FILE** @ifp, align 8
  %363 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %362)
  br label %364

; <label>:364                                     ; preds = %361, %358, %355, %352
  %365 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str105, i32 0, i32 0)) #10
  %366 = icmp ne i8* %365, null
  br i1 %366, label %367, label %376

; <label>:367                                     ; preds = %364
  %368 = load i32* %tag, align 4
  %369 = icmp eq i32 %368, 27
  br i1 %369, label %370, label %371

; <label>:370                                     ; preds = %367
  store i32 4120, i32* %tag, align 4
  br label %371

; <label>:371                                     ; preds = %370, %367
  %372 = load i32* %tag, align 4
  %373 = icmp eq i32 %372, 28
  br i1 %373, label %374, label %375

; <label>:374                                     ; preds = %371
  store i32 4119, i32* %tag, align 4
  br label %375

; <label>:375                                     ; preds = %374, %371
  br label %376

; <label>:376                                     ; preds = %375, %364
  %377 = load i32* %tag, align 4
  %378 = icmp eq i32 %377, 29
  br i1 %378, label %379, label %411

; <label>:379                                     ; preds = %376
  br label %380

; <label>:380                                     ; preds = %407, %379
  %381 = load %struct._IO_FILE** @ifp, align 8
  %382 = call i32 @getc_unlocked(%struct._IO_FILE* %381)
  store i32 %382, i32* %c, align 4
  %383 = icmp ne i32 %382, 0
  br i1 %383, label %384, label %387

; <label>:384                                     ; preds = %380
  %385 = load i32* %c, align 4
  %386 = icmp ne i32 %385, -1
  br label %387

; <label>:387                                     ; preds = %384, %380
  %388 = phi i1 [ false, %380 ], [ %386, %384 ]
  br i1 %388, label %389, label %410

; <label>:389                                     ; preds = %387
  %390 = load i32* %serial, align 4
  %391 = mul i32 %390, 10
  %392 = load i32* %c, align 4
  %393 = sext i32 %392 to i64
  %394 = call i16** @__ctype_b_loc() #9
  %395 = load i16** %394, align 8
  %396 = getelementptr inbounds i16* %395, i64 %393
  %397 = load i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = and i32 %398, 2048
  %400 = icmp ne i32 %399, 0
  br i1 %400, label %401, label %404

; <label>:401                                     ; preds = %389
  %402 = load i32* %c, align 4
  %403 = sub i32 %402, 48
  br label %407

; <label>:404                                     ; preds = %389
  %405 = load i32* %c, align 4
  %406 = urem i32 %405, 10
  br label %407

; <label>:407                                     ; preds = %404, %401
  %408 = phi i32 [ %403, %401 ], [ %406, %404 ]
  %409 = add i32 %391, %408
  store i32 %409, i32* %serial, align 4
  br label %380

; <label>:410                                     ; preds = %387
  br label %411

; <label>:411                                     ; preds = %410, %376
  %412 = load i32* %tag, align 4
  %413 = icmp eq i32 %412, 129
  br i1 %413, label %414, label %429

; <label>:414                                     ; preds = %411
  %415 = load i32* %type, align 4
  %416 = icmp eq i32 %415, 4
  br i1 %416, label %417, label %429

; <label>:417                                     ; preds = %414
  %418 = call i32 @get4()
  %419 = zext i32 %418 to i64
  store i64 %419, i64* @data_offset, align 8
  %420 = load %struct._IO_FILE** @ifp, align 8
  %421 = load i64* @data_offset, align 8
  %422 = add nsw i64 %421, 41
  %423 = call i32 @fseek(%struct._IO_FILE* %420, i64 %422, i32 0)
  %424 = call zeroext i16 @get2()
  %425 = zext i16 %424 to i32
  %426 = mul nsw i32 %425, 2
  %427 = trunc i32 %426 to i16
  store i16 %427, i16* @raw_height, align 2
  %428 = call zeroext i16 @get2()
  store i16 %428, i16* @raw_width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %429

; <label>:429                                     ; preds = %417, %414, %411
  %430 = load i32* %tag, align 4
  %431 = icmp eq i32 %430, 41
  br i1 %431, label %432, label %471

; <label>:432                                     ; preds = %429
  %433 = load i32* %type, align 4
  %434 = icmp eq i32 %433, 1
  br i1 %434, label %435, label %471

; <label>:435                                     ; preds = %432
  %436 = load i32* %wbi, align 4
  %437 = icmp ult i32 %436, 18
  br i1 %437, label %438, label %445

; <label>:438                                     ; preds = %435
  %439 = load i32* %wbi, align 4
  %440 = zext i32 %439 to i64
  %441 = getelementptr inbounds [19 x i8]* @.str106, i32 0, i64 %440
  %442 = load i8* %441, align 1
  %443 = sext i8 %442 to i32
  %444 = sub nsw i32 %443, 48
  br label %446

; <label>:445                                     ; preds = %435
  br label %446

; <label>:446                                     ; preds = %445, %438
  %447 = phi i32 [ %444, %438 ], [ 0, %445 ]
  store i32 %447, i32* %c, align 4
  %448 = load %struct._IO_FILE** @ifp, align 8
  %449 = load i32* %c, align 4
  %450 = mul i32 %449, 32
  %451 = add i32 8, %450
  %452 = zext i32 %451 to i64
  %453 = call i32 @fseek(%struct._IO_FILE* %448, i64 %452, i32 1)
  store i32 0, i32* %c, align 4
  br label %454

; <label>:454                                     ; preds = %467, %446
  %455 = load i32* %c, align 4
  %456 = icmp ult i32 %455, 4
  br i1 %456, label %457, label %470

; <label>:457                                     ; preds = %454
  %458 = call i32 @get4()
  %459 = uitofp i32 %458 to float
  %460 = load i32* %c, align 4
  %461 = load i32* %c, align 4
  %462 = lshr i32 %461, 1
  %463 = xor i32 %460, %462
  %464 = xor i32 %463, 1
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %465
  store float %459, float* %466, align 4
  br label %467

; <label>:467                                     ; preds = %457
  %468 = load i32* %c, align 4
  %469 = add i32 %468, 1
  store i32 %469, i32* %c, align 4
  br label %454

; <label>:470                                     ; preds = %454
  br label %471

; <label>:471                                     ; preds = %470, %432, %429
  %472 = load i32* %tag, align 4
  %473 = icmp eq i32 %472, 129
  br i1 %473, label %474, label %477

; <label>:474                                     ; preds = %471
  %475 = load i32* %type, align 4
  %476 = icmp eq i32 %475, 7
  br i1 %476, label %489, label %477

; <label>:477                                     ; preds = %474, %471
  %478 = load i32* %tag, align 4
  %479 = icmp eq i32 %478, 256
  br i1 %479, label %480, label %483

; <label>:480                                     ; preds = %477
  %481 = load i32* %type, align 4
  %482 = icmp eq i32 %481, 7
  br i1 %482, label %489, label %483

; <label>:483                                     ; preds = %480, %477
  %484 = load i32* %tag, align 4
  %485 = icmp eq i32 %484, 640
  br i1 %485, label %486, label %493

; <label>:486                                     ; preds = %483
  %487 = load i32* %type, align 4
  %488 = icmp eq i32 %487, 1
  br i1 %488, label %489, label %493

; <label>:489                                     ; preds = %486, %480, %474
  %490 = load %struct._IO_FILE** @ifp, align 8
  %491 = call i64 @ftell(%struct._IO_FILE* %490)
  store i64 %491, i64* @thumb_offset, align 8
  %492 = load i32* %len, align 4
  store i32 %492, i32* @thumb_length, align 4
  br label %493

; <label>:493                                     ; preds = %489, %486, %483
  %494 = load i32* %tag, align 4
  %495 = icmp eq i32 %494, 136
  br i1 %495, label %496, label %508

; <label>:496                                     ; preds = %493
  %497 = load i32* %type, align 4
  %498 = icmp eq i32 %497, 4
  br i1 %498, label %499, label %508

; <label>:499                                     ; preds = %496
  %500 = call i32 @get4()
  %501 = zext i32 %500 to i64
  store i64 %501, i64* @thumb_offset, align 8
  %502 = icmp ne i64 %501, 0
  br i1 %502, label %503, label %508

; <label>:503                                     ; preds = %499
  %504 = load i32* %1, align 4
  %505 = sext i32 %504 to i64
  %506 = load i64* @thumb_offset, align 8
  %507 = add nsw i64 %506, %505
  store i64 %507, i64* @thumb_offset, align 8
  br label %508

; <label>:508                                     ; preds = %503, %499, %496, %493
  %509 = load i32* %tag, align 4
  %510 = icmp eq i32 %509, 137
  br i1 %510, label %511, label %516

; <label>:511                                     ; preds = %508
  %512 = load i32* %type, align 4
  %513 = icmp eq i32 %512, 4
  br i1 %513, label %514, label %516

; <label>:514                                     ; preds = %511
  %515 = call i32 @get4()
  store i32 %515, i32* @thumb_length, align 4
  br label %516

; <label>:516                                     ; preds = %514, %511, %508
  %517 = load i32* %tag, align 4
  %518 = icmp eq i32 %517, 140
  br i1 %518, label %522, label %519

; <label>:519                                     ; preds = %516
  %520 = load i32* %tag, align 4
  %521 = icmp eq i32 %520, 150
  br i1 %521, label %522, label %525

; <label>:522                                     ; preds = %519, %516
  %523 = load %struct._IO_FILE** @ifp, align 8
  %524 = call i64 @ftell(%struct._IO_FILE* %523)
  store i64 %524, i64* @meta_offset, align 8
  br label %525

; <label>:525                                     ; preds = %522, %519
  %526 = load i32* %tag, align 4
  %527 = icmp eq i32 %526, 151
  br i1 %527, label %528, label %598

; <label>:528                                     ; preds = %525
  store i32 0, i32* %i, align 4
  br label %529

; <label>:529                                     ; preds = %539, %528
  %530 = load i32* %i, align 4
  %531 = icmp ult i32 %530, 4
  br i1 %531, label %532, label %542

; <label>:532                                     ; preds = %529
  %533 = load i32* %ver97, align 4
  %534 = mul i32 %533, 10
  %535 = load %struct._IO_FILE** @ifp, align 8
  %536 = call i32 @getc_unlocked(%struct._IO_FILE* %535)
  %537 = add i32 %534, %536
  %538 = sub i32 %537, 48
  store i32 %538, i32* %ver97, align 4
  br label %539

; <label>:539                                     ; preds = %532
  %540 = load i32* %i, align 4
  %541 = add i32 %540, 1
  store i32 %541, i32* %i, align 4
  br label %529

; <label>:542                                     ; preds = %529
  %543 = load i32* %ver97, align 4
  switch i32 %543, label %584 [
    i32 100, label %544
    i32 102, label %565
    i32 103, label %568
  ]

; <label>:544                                     ; preds = %542
  %545 = load %struct._IO_FILE** @ifp, align 8
  %546 = call i32 @fseek(%struct._IO_FILE* %545, i64 68, i32 1)
  store i32 0, i32* %c, align 4
  br label %547

; <label>:547                                     ; preds = %561, %544
  %548 = load i32* %c, align 4
  %549 = icmp ult i32 %548, 4
  br i1 %549, label %550, label %564

; <label>:550                                     ; preds = %547
  %551 = call zeroext i16 @get2()
  %552 = uitofp i16 %551 to float
  %553 = load i32* %c, align 4
  %554 = lshr i32 %553, 1
  %555 = load i32* %c, align 4
  %556 = and i32 %555, 1
  %557 = shl i32 %556, 1
  %558 = or i32 %554, %557
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %559
  store float %552, float* %560, align 4
  br label %561

; <label>:561                                     ; preds = %550
  %562 = load i32* %c, align 4
  %563 = add i32 %562, 1
  store i32 %563, i32* %c, align 4
  br label %547

; <label>:564                                     ; preds = %547
  br label %584

; <label>:565                                     ; preds = %542
  %566 = load %struct._IO_FILE** @ifp, align 8
  %567 = call i32 @fseek(%struct._IO_FILE* %566, i64 6, i32 1)
  br label %1029

; <label>:568                                     ; preds = %542
  %569 = load %struct._IO_FILE** @ifp, align 8
  %570 = call i32 @fseek(%struct._IO_FILE* %569, i64 16, i32 1)
  store i32 0, i32* %c, align 4
  br label %571

; <label>:571                                     ; preds = %580, %568
  %572 = load i32* %c, align 4
  %573 = icmp ult i32 %572, 4
  br i1 %573, label %574, label %583

; <label>:574                                     ; preds = %571
  %575 = call zeroext i16 @get2()
  %576 = uitofp i16 %575 to float
  %577 = load i32* %c, align 4
  %578 = zext i32 %577 to i64
  %579 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %578
  store float %576, float* %579, align 4
  br label %580

; <label>:580                                     ; preds = %574
  %581 = load i32* %c, align 4
  %582 = add i32 %581, 1
  store i32 %582, i32* %c, align 4
  br label %571

; <label>:583                                     ; preds = %571
  br label %584

; <label>:584                                     ; preds = %583, %542, %564
  %585 = load i32* %ver97, align 4
  %586 = icmp uge i32 %585, 200
  br i1 %586, label %587, label %597

; <label>:587                                     ; preds = %584
  %588 = load i32* %ver97, align 4
  %589 = icmp ne i32 %588, 205
  br i1 %589, label %590, label %593

; <label>:590                                     ; preds = %587
  %591 = load %struct._IO_FILE** @ifp, align 8
  %592 = call i32 @fseek(%struct._IO_FILE* %591, i64 280, i32 1)
  br label %593

; <label>:593                                     ; preds = %590, %587
  %594 = getelementptr inbounds [324 x i8]* %buf97, i32 0, i32 0
  %595 = load %struct._IO_FILE** @ifp, align 8
  %596 = call i64 @fread(i8* %594, i64 324, i64 1, %struct._IO_FILE* %595)
  br label %597

; <label>:597                                     ; preds = %593, %584
  br label %598

; <label>:598                                     ; preds = %597, %525
  %599 = load i32* %tag, align 4
  %600 = icmp eq i32 %599, 164
  br i1 %600, label %601, label %623

; <label>:601                                     ; preds = %598
  %602 = load i32* %type, align 4
  %603 = icmp eq i32 %602, 3
  br i1 %603, label %604, label %623

; <label>:604                                     ; preds = %601
  %605 = load %struct._IO_FILE** @ifp, align 8
  %606 = load i32* %wbi, align 4
  %607 = mul i32 %606, 48
  %608 = zext i32 %607 to i64
  %609 = call i32 @fseek(%struct._IO_FILE* %605, i64 %608, i32 1)
  store i32 0, i32* %c, align 4
  br label %610

; <label>:610                                     ; preds = %619, %604
  %611 = load i32* %c, align 4
  %612 = icmp ult i32 %611, 3
  br i1 %612, label %613, label %622

; <label>:613                                     ; preds = %610
  %614 = call zeroext i16 @get2()
  %615 = uitofp i16 %614 to float
  %616 = load i32* %c, align 4
  %617 = zext i32 %616 to i64
  %618 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %617
  store float %615, float* %618, align 4
  br label %619

; <label>:619                                     ; preds = %613
  %620 = load i32* %c, align 4
  %621 = add i32 %620, 1
  store i32 %621, i32* %c, align 4
  br label %610

; <label>:622                                     ; preds = %610
  br label %623

; <label>:623                                     ; preds = %622, %601, %598
  %624 = load i32* %tag, align 4
  %625 = icmp eq i32 %624, 167
  br i1 %625, label %626, label %714

; <label>:626                                     ; preds = %623
  %627 = load i32* %ver97, align 4
  %628 = sub i32 %627, 200
  %629 = icmp ult i32 %628, 12
  br i1 %629, label %630, label %714

; <label>:630                                     ; preds = %626
  %631 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %632 = fcmp une float %631, 0.000000e+00
  br i1 %632, label %714, label %633

; <label>:633                                     ; preds = %630
  %634 = load i32* %serial, align 4
  %635 = and i32 %634, 255
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds [256 x i8]* getelementptr inbounds ([2 x [256 x i8]]* @parse_makernote.xlat, i32 0, i64 0), i32 0, i64 %636
  %638 = load i8* %637, align 1
  store i8 %638, i8* %ci, align 1
  %639 = load %struct._IO_FILE** @ifp, align 8
  %640 = call i32 @getc_unlocked(%struct._IO_FILE* %639)
  %641 = load %struct._IO_FILE** @ifp, align 8
  %642 = call i32 @getc_unlocked(%struct._IO_FILE* %641)
  %643 = xor i32 %640, %642
  %644 = load %struct._IO_FILE** @ifp, align 8
  %645 = call i32 @getc_unlocked(%struct._IO_FILE* %644)
  %646 = xor i32 %643, %645
  %647 = load %struct._IO_FILE** @ifp, align 8
  %648 = call i32 @getc_unlocked(%struct._IO_FILE* %647)
  %649 = xor i32 %646, %648
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds [256 x i8]* getelementptr inbounds ([2 x [256 x i8]]* @parse_makernote.xlat, i32 0, i64 1), i32 0, i64 %650
  %652 = load i8* %651, align 1
  store i8 %652, i8* %cj, align 1
  store i8 96, i8* %ck, align 1
  store i32 0, i32* %i, align 4
  br label %653

; <label>:653                                     ; preds = %675, %633
  %654 = load i32* %i, align 4
  %655 = icmp ult i32 %654, 324
  br i1 %655, label %656, label %678

; <label>:656                                     ; preds = %653
  %657 = load i8* %ci, align 1
  %658 = zext i8 %657 to i32
  %659 = load i8* %ck, align 1
  %660 = add i8 %659, 1
  store i8 %660, i8* %ck, align 1
  %661 = zext i8 %659 to i32
  %662 = mul nsw i32 %658, %661
  %663 = load i8* %cj, align 1
  %664 = zext i8 %663 to i32
  %665 = add nsw i32 %664, %662
  %666 = trunc i32 %665 to i8
  store i8 %666, i8* %cj, align 1
  %667 = zext i8 %666 to i32
  %668 = load i32* %i, align 4
  %669 = zext i32 %668 to i64
  %670 = getelementptr inbounds [324 x i8]* %buf97, i32 0, i64 %669
  %671 = load i8* %670, align 1
  %672 = zext i8 %671 to i32
  %673 = xor i32 %672, %667
  %674 = trunc i32 %673 to i8
  store i8 %674, i8* %670, align 1
  br label %675

; <label>:675                                     ; preds = %656
  %676 = load i32* %i, align 4
  %677 = add i32 %676, 1
  store i32 %677, i32* %i, align 4
  br label %653

; <label>:678                                     ; preds = %653
  %679 = load i32* %ver97, align 4
  %680 = sub i32 %679, 200
  %681 = zext i32 %680 to i64
  %682 = getelementptr inbounds [13 x i8]* @.str107, i32 0, i64 %681
  %683 = load i8* %682, align 1
  %684 = sext i8 %683 to i32
  %685 = sub nsw i32 %684, 48
  store i32 %685, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %686

; <label>:686                                     ; preds = %710, %678
  %687 = load i32* %c, align 4
  %688 = icmp ult i32 %687, 4
  br i1 %688, label %689, label %713

; <label>:689                                     ; preds = %686
  %690 = getelementptr inbounds [324 x i8]* %buf97, i32 0, i32 0
  %691 = load i32* %i, align 4
  %692 = and i32 %691, -2
  %693 = zext i32 %692 to i64
  %694 = getelementptr inbounds i8* %690, i64 %693
  %695 = load i32* %c, align 4
  %696 = mul i32 %695, 2
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds i8* %694, i64 %697
  %699 = call zeroext i16 @sget2(i8* %698)
  %700 = uitofp i16 %699 to float
  %701 = load i32* %c, align 4
  %702 = load i32* %c, align 4
  %703 = lshr i32 %702, 1
  %704 = xor i32 %701, %703
  %705 = load i32* %i, align 4
  %706 = and i32 %705, 1
  %707 = xor i32 %704, %706
  %708 = zext i32 %707 to i64
  %709 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %708
  store float %700, float* %709, align 4
  br label %710

; <label>:710                                     ; preds = %689
  %711 = load i32* %c, align 4
  %712 = add i32 %711, 1
  store i32 %712, i32* %c, align 4
  br label %686

; <label>:713                                     ; preds = %686
  br label %714

; <label>:714                                     ; preds = %713, %630, %626, %623
  %715 = load i32* %tag, align 4
  %716 = icmp eq i32 %715, 512
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %714
  %718 = load i32* %len, align 4
  %719 = icmp eq i32 %718, 3
  br i1 %719, label %720, label %723

; <label>:720                                     ; preds = %717
  %721 = call i32 @get4()
  %722 = call i32 @get4()
  store i32 %722, i32* @shot_order, align 4
  br label %723

; <label>:723                                     ; preds = %720, %717, %714
  %724 = load i32* %tag, align 4
  %725 = icmp eq i32 %724, 512
  br i1 %725, label %726, label %742

; <label>:726                                     ; preds = %723
  %727 = load i32* %len, align 4
  %728 = icmp eq i32 %727, 4
  br i1 %728, label %729, label %742

; <label>:729                                     ; preds = %726
  %730 = call zeroext i16 @get2()
  %731 = zext i16 %730 to i32
  %732 = call zeroext i16 @get2()
  %733 = zext i16 %732 to i32
  %734 = add nsw i32 %731, %733
  %735 = call zeroext i16 @get2()
  %736 = zext i16 %735 to i32
  %737 = add nsw i32 %734, %736
  %738 = call zeroext i16 @get2()
  %739 = zext i16 %738 to i32
  %740 = add nsw i32 %737, %739
  %741 = sdiv i32 %740, 4
  store i32 %741, i32* @black, align 4
  br label %742

; <label>:742                                     ; preds = %729, %726, %723
  %743 = load i32* %tag, align 4
  %744 = icmp eq i32 %743, 513
  br i1 %744, label %745, label %749

; <label>:745                                     ; preds = %742
  %746 = load i32* %len, align 4
  %747 = icmp eq i32 %746, 4
  br i1 %747, label %748, label %749

; <label>:748                                     ; preds = %745
  br label %1029

; <label>:749                                     ; preds = %745, %742
  %750 = load i32* %tag, align 4
  %751 = icmp eq i32 %750, 544
  br i1 %751, label %752, label %758

; <label>:752                                     ; preds = %749
  %753 = load i32* %len, align 4
  %754 = icmp eq i32 %753, 53
  br i1 %754, label %755, label %758

; <label>:755                                     ; preds = %752
  %756 = load %struct._IO_FILE** @ifp, align 8
  %757 = call i32 @fseek(%struct._IO_FILE* %756, i64 14, i32 1)
  call void @pentax_tree()
  br label %758

; <label>:758                                     ; preds = %755, %752, %749
  %759 = load i32* %tag, align 4
  %760 = icmp eq i32 %759, 1025
  br i1 %760, label %761, label %773

; <label>:761                                     ; preds = %758
  %762 = load i32* %len, align 4
  %763 = icmp eq i32 %762, 4
  br i1 %763, label %764, label %773

; <label>:764                                     ; preds = %761
  %765 = call i32 @get4()
  %766 = call i32 @get4()
  %767 = add i32 %765, %766
  %768 = call i32 @get4()
  %769 = add i32 %767, %768
  %770 = call i32 @get4()
  %771 = add i32 %769, %770
  %772 = udiv i32 %771, 4
  store i32 %772, i32* @black, align 4
  br label %773

; <label>:773                                     ; preds = %764, %761, %758
  %774 = load i32* %tag, align 4
  %775 = icmp eq i32 %774, 3585
  br i1 %775, label %776, label %811

; <label>:776                                     ; preds = %773
  %777 = load i16* @order, align 2
  %778 = sext i16 %777 to i32
  store i32 %778, i32* %type, align 4
  store i16 18761, i16* @order, align 2
  %779 = load %struct._IO_FILE** @ifp, align 8
  %780 = call i32 @fseek(%struct._IO_FILE* %779, i64 22, i32 1)
  store i32 22, i32* %offset, align 4
  br label %781

; <label>:781                                     ; preds = %803, %776
  %782 = load i32* %offset, align 4
  %783 = add i32 %782, 22
  %784 = load i32* %len, align 4
  %785 = icmp ult i32 %783, %784
  br i1 %785, label %786, label %808

; <label>:786                                     ; preds = %781
  %787 = call i32 @get4()
  store i32 %787, i32* %tag, align 4
  %788 = load %struct._IO_FILE** @ifp, align 8
  %789 = call i32 @fseek(%struct._IO_FILE* %788, i64 14, i32 1)
  %790 = call i32 @get4()
  %791 = sub i32 %790, 4
  store i32 %791, i32* %i, align 4
  %792 = load i32* %tag, align 4
  %793 = icmp eq i32 %792, 1990472199
  br i1 %793, label %794, label %797

; <label>:794                                     ; preds = %786
  %795 = call zeroext i16 @get2()
  %796 = zext i16 %795 to i32
  store i32 %796, i32* @flip, align 4
  br label %802

; <label>:797                                     ; preds = %786
  %798 = load %struct._IO_FILE** @ifp, align 8
  %799 = load i32* %i, align 4
  %800 = zext i32 %799 to i64
  %801 = call i32 @fseek(%struct._IO_FILE* %798, i64 %800, i32 1)
  br label %802

; <label>:802                                     ; preds = %797, %794
  br label %803

; <label>:803                                     ; preds = %802
  %804 = load i32* %i, align 4
  %805 = add i32 22, %804
  %806 = load i32* %offset, align 4
  %807 = add i32 %806, %805
  store i32 %807, i32* %offset, align 4
  br label %781

; <label>:808                                     ; preds = %781
  %809 = load i32* %type, align 4
  %810 = trunc i32 %809 to i16
  store i16 %810, i16* @order, align 2
  br label %811

; <label>:811                                     ; preds = %808, %773
  %812 = load i32* %tag, align 4
  %813 = icmp eq i32 %812, 3712
  br i1 %813, label %814, label %837

; <label>:814                                     ; preds = %811
  %815 = load i32* %len, align 4
  %816 = icmp eq i32 %815, 256
  br i1 %816, label %817, label %837

; <label>:817                                     ; preds = %814
  %818 = load i32* %type, align 4
  %819 = icmp eq i32 %818, 7
  br i1 %819, label %820, label %837

; <label>:820                                     ; preds = %817
  %821 = load %struct._IO_FILE** @ifp, align 8
  %822 = call i32 @fseek(%struct._IO_FILE* %821, i64 48, i32 1)
  %823 = call zeroext i16 @get2()
  %824 = zext i16 %823 to i32
  %825 = mul nsw i32 %824, 508
  %826 = sitofp i32 %825 to double
  %827 = fmul double %826, 1.078000e+00
  %828 = fdiv double %827, 6.553600e+04
  %829 = fptrunc double %828 to float
  store float %829, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %830 = call zeroext i16 @get2()
  %831 = zext i16 %830 to i32
  %832 = mul nsw i32 %831, 382
  %833 = sitofp i32 %832 to double
  %834 = fmul double %833, 1.173000e+00
  %835 = fdiv double %834, 6.553600e+04
  %836 = fptrunc double %835 to float
  store float %836, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %837

; <label>:837                                     ; preds = %820, %817, %814, %811
  %838 = load i32* %tag, align 4
  %839 = icmp eq i32 %838, 3840
  br i1 %839, label %840, label %861

; <label>:840                                     ; preds = %837
  %841 = load i32* %type, align 4
  %842 = icmp eq i32 %841, 7
  br i1 %842, label %843, label %861

; <label>:843                                     ; preds = %840
  %844 = load i32* %len, align 4
  %845 = icmp eq i32 %844, 614
  br i1 %845, label %846, label %849

; <label>:846                                     ; preds = %843
  %847 = load %struct._IO_FILE** @ifp, align 8
  %848 = call i32 @fseek(%struct._IO_FILE* %847, i64 176, i32 1)
  br label %860

; <label>:849                                     ; preds = %843
  %850 = load i32* %len, align 4
  %851 = icmp eq i32 %850, 734
  br i1 %851, label %855, label %852

; <label>:852                                     ; preds = %849
  %853 = load i32* %len, align 4
  %854 = icmp eq i32 %853, 1502
  br i1 %854, label %855, label %858

; <label>:855                                     ; preds = %852, %849
  %856 = load %struct._IO_FILE** @ifp, align 8
  %857 = call i32 @fseek(%struct._IO_FILE* %856, i64 148, i32 1)
  br label %859

; <label>:858                                     ; preds = %852
  br label %1064

; <label>:859                                     ; preds = %855
  br label %860

; <label>:860                                     ; preds = %859, %846
  br label %952

; <label>:861                                     ; preds = %840, %837
  %862 = load i32* %tag, align 4
  %863 = icmp eq i32 %862, 4113
  br i1 %863, label %864, label %867

; <label>:864                                     ; preds = %861
  %865 = load i32* %len, align 4
  %866 = icmp eq i32 %865, 9
  br i1 %866, label %870, label %867

; <label>:867                                     ; preds = %864, %861
  %868 = load i32* %tag, align 4
  %869 = icmp eq i32 %868, 541065728
  br i1 %869, label %870, label %898

; <label>:870                                     ; preds = %867, %864
  store i32 0, i32* %i, align 4
  br label %871

; <label>:871                                     ; preds = %894, %870
  %872 = load i32* %i, align 4
  %873 = icmp ult i32 %872, 3
  br i1 %873, label %874, label %897

; <label>:874                                     ; preds = %871
  store i32 0, i32* %c, align 4
  br label %875

; <label>:875                                     ; preds = %890, %874
  %876 = load i32* %c, align 4
  %877 = icmp ult i32 %876, 3
  br i1 %877, label %878, label %893

; <label>:878                                     ; preds = %875
  %879 = call zeroext i16 @get2()
  %880 = sext i16 %879 to i32
  %881 = sitofp i32 %880 to double
  %882 = fdiv double %881, 2.560000e+02
  %883 = fptrunc double %882 to float
  %884 = load i32* %c, align 4
  %885 = zext i32 %884 to i64
  %886 = load i32* %i, align 4
  %887 = zext i32 %886 to i64
  %888 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %887
  %889 = getelementptr inbounds [4 x float]* %888, i32 0, i64 %885
  store float %883, float* %889, align 4
  br label %890

; <label>:890                                     ; preds = %878
  %891 = load i32* %c, align 4
  %892 = add i32 %891, 1
  store i32 %892, i32* %c, align 4
  br label %875

; <label>:893                                     ; preds = %875
  br label %894

; <label>:894                                     ; preds = %893
  %895 = load i32* %i, align 4
  %896 = add i32 %895, 1
  store i32 %896, i32* %i, align 4
  br label %871

; <label>:897                                     ; preds = %871
  br label %898

; <label>:898                                     ; preds = %897, %867
  %899 = load i32* %tag, align 4
  %900 = icmp eq i32 %899, 4114
  br i1 %900, label %904, label %901

; <label>:901                                     ; preds = %898
  %902 = load i32* %tag, align 4
  %903 = icmp eq i32 %902, 541066752
  br i1 %903, label %904, label %921

; <label>:904                                     ; preds = %901, %898
  %905 = load i32* %len, align 4
  %906 = icmp eq i32 %905, 4
  br i1 %906, label %907, label %921

; <label>:907                                     ; preds = %904
  store i32 0, i32* %i, align 4
  store i32 0, i32* @black, align 4
  br label %908

; <label>:908                                     ; preds = %917, %907
  %909 = load i32* %i, align 4
  %910 = icmp ult i32 %909, 4
  br i1 %910, label %911, label %920

; <label>:911                                     ; preds = %908
  %912 = call zeroext i16 @get2()
  %913 = zext i16 %912 to i32
  %914 = shl i32 %913, 2
  %915 = load i32* @black, align 4
  %916 = add i32 %915, %914
  store i32 %916, i32* @black, align 4
  br label %917

; <label>:917                                     ; preds = %911
  %918 = load i32* %i, align 4
  %919 = add i32 %918, 1
  store i32 %919, i32* %i, align 4
  br label %908

; <label>:920                                     ; preds = %908
  br label %921

; <label>:921                                     ; preds = %920, %904, %901
  %922 = load i32* %tag, align 4
  %923 = icmp eq i32 %922, 4119
  br i1 %923, label %927, label %924

; <label>:924                                     ; preds = %921
  %925 = load i32* %tag, align 4
  %926 = icmp eq i32 %925, 541065472
  br i1 %926, label %927, label %933

; <label>:927                                     ; preds = %924, %921
  %928 = call zeroext i16 @get2()
  %929 = zext i16 %928 to i32
  %930 = sitofp i32 %929 to double
  %931 = fdiv double %930, 2.560000e+02
  %932 = fptrunc double %931 to float
  store float %932, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  br label %933

; <label>:933                                     ; preds = %927, %924
  %934 = load i32* %tag, align 4
  %935 = icmp eq i32 %934, 4120
  br i1 %935, label %939, label %936

; <label>:936                                     ; preds = %933
  %937 = load i32* %tag, align 4
  %938 = icmp eq i32 %937, 541065472
  br i1 %938, label %939, label %945

; <label>:939                                     ; preds = %936, %933
  %940 = call zeroext i16 @get2()
  %941 = zext i16 %940 to i32
  %942 = sitofp i32 %941 to double
  %943 = fdiv double %942, 2.560000e+02
  %944 = fptrunc double %943 to float
  store float %944, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %945

; <label>:945                                     ; preds = %939, %936
  %946 = load i32* %tag, align 4
  %947 = icmp eq i32 %946, 8209
  br i1 %947, label %948, label %963

; <label>:948                                     ; preds = %945
  %949 = load i32* %len, align 4
  %950 = icmp eq i32 %949, 2
  br i1 %950, label %951, label %963

; <label>:951                                     ; preds = %948
  br label %952

; <label>:952                                     ; preds = %951, %860, %349
  store i16 19789, i16* @order, align 2
  %953 = call zeroext i16 @get2()
  %954 = zext i16 %953 to i32
  %955 = sitofp i32 %954 to double
  %956 = fdiv double %955, 2.560000e+02
  %957 = fptrunc double %956 to float
  store float %957, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %958 = call zeroext i16 @get2()
  %959 = zext i16 %958 to i32
  %960 = sitofp i32 %959 to double
  %961 = fdiv double %960, 2.560000e+02
  %962 = fptrunc double %961 to float
  store float %962, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %963

; <label>:963                                     ; preds = %952, %948, %945
  %964 = load i32* %tag, align 4
  %965 = or i32 %964, 112
  %966 = icmp eq i32 %965, 8304
  br i1 %966, label %967, label %977

; <label>:967                                     ; preds = %963
  %968 = load i32* %type, align 4
  %969 = icmp eq i32 %968, 4
  br i1 %969, label %970, label %977

; <label>:970                                     ; preds = %967
  %971 = load %struct._IO_FILE** @ifp, align 8
  %972 = call i32 @get4()
  %973 = load i32* %1, align 4
  %974 = add i32 %972, %973
  %975 = zext i32 %974 to i64
  %976 = call i32 @fseek(%struct._IO_FILE* %971, i64 %975, i32 0)
  br label %977

; <label>:977                                     ; preds = %970, %967, %963
  %978 = load i32* %tag, align 4
  %979 = icmp eq i32 %978, 8208
  br i1 %979, label %980, label %984

; <label>:980                                     ; preds = %977
  %981 = load i32* %type, align 4
  %982 = icmp ne i32 %981, 7
  br i1 %982, label %983, label %984

; <label>:983                                     ; preds = %980
  store void (...)* bitcast (void ()* @olympus_e410_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %984

; <label>:984                                     ; preds = %983, %980, %977
  %985 = load i32* %tag, align 4
  %986 = icmp eq i32 %985, 8224
  br i1 %986, label %987, label %989

; <label>:987                                     ; preds = %984
  %988 = load i32* %1, align 4
  call void @parse_thumb_note(i32 %988, i32 257, i32 258)
  br label %989

; <label>:989                                     ; preds = %987, %984
  %990 = load i32* %tag, align 4
  %991 = icmp eq i32 %990, 8256
  br i1 %991, label %992, label %994

; <label>:992                                     ; preds = %989
  %993 = load i32* %1, align 4
  call void @parse_makernote(i32 %993, i32 8256)
  br label %994

; <label>:994                                     ; preds = %992, %989
  %995 = load i32* %tag, align 4
  %996 = icmp eq i32 %995, 45096
  br i1 %996, label %997, label %1003

; <label>:997                                     ; preds = %994
  %998 = load %struct._IO_FILE** @ifp, align 8
  %999 = call i32 @get4()
  %1000 = zext i32 %999 to i64
  %1001 = call i32 @fseek(%struct._IO_FILE* %998, i64 %1000, i32 0)
  %1002 = load i32* %1, align 4
  call void @parse_thumb_note(i32 %1002, i32 136, i32 137)
  br label %1003

; <label>:1003                                    ; preds = %997, %994
  %1004 = load i32* %tag, align 4
  %1005 = icmp eq i32 %1004, 16385
  br i1 %1005, label %1006, label %1063

; <label>:1006                                    ; preds = %1003
  %1007 = load i32* %len, align 4
  %1008 = icmp ugt i32 %1007, 500
  br i1 %1008, label %1009, label %1063

; <label>:1009                                    ; preds = %1006
  %1010 = load i32* %len, align 4
  %1011 = icmp eq i32 %1010, 582
  br i1 %1011, label %1012, label %1013

; <label>:1012                                    ; preds = %1009
  br label %1023

; <label>:1013                                    ; preds = %1009
  %1014 = load i32* %len, align 4
  %1015 = icmp eq i32 %1014, 653
  br i1 %1015, label %1016, label %1017

; <label>:1016                                    ; preds = %1013
  br label %1021

; <label>:1017                                    ; preds = %1013
  %1018 = load i32* %len, align 4
  %1019 = icmp eq i32 %1018, 5120
  %1020 = select i1 %1019, i32 142, i32 126
  br label %1021

; <label>:1021                                    ; preds = %1017, %1016
  %1022 = phi i32 [ 68, %1016 ], [ %1020, %1017 ]
  br label %1023

; <label>:1023                                    ; preds = %1021, %1012
  %1024 = phi i32 [ 50, %1012 ], [ %1022, %1021 ]
  store i32 %1024, i32* %i, align 4
  %1025 = load %struct._IO_FILE** @ifp, align 8
  %1026 = load i32* %i, align 4
  %1027 = zext i32 %1026 to i64
  %1028 = call i32 @fseek(%struct._IO_FILE* %1025, i64 %1027, i32 1)
  br label %1029

; <label>:1029                                    ; preds = %1023, %748, %565
  store i32 0, i32* %c, align 4
  br label %1030

; <label>:1030                                    ; preds = %1042, %1029
  %1031 = load i32* %c, align 4
  %1032 = icmp ult i32 %1031, 4
  br i1 %1032, label %1033, label %1045

; <label>:1033                                    ; preds = %1030
  %1034 = call zeroext i16 @get2()
  %1035 = uitofp i16 %1034 to float
  %1036 = load i32* %c, align 4
  %1037 = load i32* %c, align 4
  %1038 = lshr i32 %1037, 1
  %1039 = xor i32 %1036, %1038
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %1040
  store float %1035, float* %1041, align 4
  br label %1042

; <label>:1042                                    ; preds = %1033
  %1043 = load i32* %c, align 4
  %1044 = add i32 %1043, 1
  store i32 %1044, i32* %c, align 4
  br label %1030

; <label>:1045                                    ; preds = %1030
  %1046 = load %struct._IO_FILE** @ifp, align 8
  %1047 = call i32 @fseek(%struct._IO_FILE* %1046, i64 22, i32 1)
  store i32 0, i32* %c, align 4
  br label %1048

; <label>:1048                                    ; preds = %1059, %1045
  %1049 = load i32* %c, align 4
  %1050 = icmp ult i32 %1049, 4
  br i1 %1050, label %1051, label %1062

; <label>:1051                                    ; preds = %1048
  %1052 = call zeroext i16 @get2()
  %1053 = load i32* %c, align 4
  %1054 = load i32* %c, align 4
  %1055 = lshr i32 %1054, 1
  %1056 = xor i32 %1053, %1055
  %1057 = zext i32 %1056 to i64
  %1058 = getelementptr inbounds [4 x i16]* @sraw_mul, i32 0, i64 %1057
  store i16 %1052, i16* %1058, align 2
  br label %1059

; <label>:1059                                    ; preds = %1051
  %1060 = load i32* %c, align 4
  %1061 = add i32 %1060, 1
  store i32 %1061, i32* %c, align 4
  br label %1048

; <label>:1062                                    ; preds = %1048
  br label %1063

; <label>:1063                                    ; preds = %1062, %1006, %1003
  br label %1064

; <label>:1064                                    ; preds = %1063, %858
  %1065 = load %struct._IO_FILE** @ifp, align 8
  %1066 = load i32* %save, align 4
  %1067 = zext i32 %1066 to i64
  %1068 = call i32 @fseek(%struct._IO_FILE* %1065, i64 %1067, i32 0)
  br label %192

; <label>:1069                                    ; preds = %192
  br label %1070

; <label>:1070                                    ; preds = %1069, %112, %99
  %1071 = load i16* %sorder, align 2
  store i16 %1071, i16* @order, align 2
  br label %1072

; <label>:1072                                    ; preds = %1070, %190, %23
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define i32 @parse_tiff_ifd(i32 %base) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %plen = alloca i32, align 4
  %save = alloca i32, align 4
  %ifd = alloca i32, align 4
  %use_cm = alloca i32, align 4
  %cfa = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  %ima_len = alloca i32, align 4
  %software = alloca [64 x i8], align 16
  %cbuf = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %cfa_pat = alloca [16 x i8], align 16
  %cfa_pc = alloca [4 x i8], align 1
  %tab = alloca [256 x i8], align 16
  %dblack = alloca double, align 8
  %cc = alloca [4 x [4 x double]], align 16
  %cm = alloca [4 x [3 x double]], align 16
  %cam_xyz = alloca [4 x [3 x double]], align 16
  %num = alloca double, align 8
  %ab = alloca [4 x double], align 16
  %asn = alloca [4 x double], align 16
  %xyz = alloca [3 x double], align 16
  %sony_curve = alloca [6 x i32], align 16
  %buf = alloca i32*, align 8
  %sony_offset = alloca i32, align 4
  %sony_length = alloca i32, align 4
  %sony_key = alloca i32, align 4
  %jh = alloca %struct.jhead, align 8
  %sfp = alloca %struct._IO_FILE*, align 8
  store i32 %base, i32* %2, align 4
  store i32 16, i32* %plen, align 4
  store i32 0, i32* %use_cm, align 4
  store i32 0, i32* %ima_len, align 4
  %3 = bitcast [4 x i8]* %cfa_pc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* getelementptr inbounds ([4 x i8]* @parse_tiff_ifd.cfa_pc, i32 0, i32 0), i64 4, i32 1, i1 false)
  %4 = bitcast [4 x double]* %ab to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast ([4 x double]* @parse_tiff_ifd.ab to i8*), i64 32, i32 16, i1 false)
  %5 = bitcast [4 x double]* %asn to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 32, i32 16, i1 false)
  %6 = bitcast [3 x double]* %xyz to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* bitcast ([3 x double]* @parse_tiff_ifd.xyz to i8*), i64 24, i32 16, i1 false)
  %7 = bitcast [6 x i32]* %sony_curve to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast ([6 x i32]* @parse_tiff_ifd.sony_curve to i8*), i64 24, i32 16, i1 false)
  store i32 0, i32* %sony_offset, align 4
  store i32 0, i32* %sony_length, align 4
  store i32 0, i32* %sony_key, align 4
  %8 = load i32* @tiff_nifds, align 4
  %9 = zext i32 %8 to i64
  %10 = icmp uge i64 %9, 10
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %0
  store i32 1, i32* %1
  br label %1349

; <label>:12                                      ; preds = %0
  %13 = load i32* @tiff_nifds, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* @tiff_nifds, align 4
  store i32 %13, i32* %ifd, align 4
  store i32 0, i32* %j, align 4
  br label %15

; <label>:15                                      ; preds = %38, %12
  %16 = load i32* %j, align 4
  %17 = icmp slt i32 %16, 4
  br i1 %17, label %18, label %41

; <label>:18                                      ; preds = %15
  store i32 0, i32* %i, align 4
  br label %19

; <label>:19                                      ; preds = %34, %18
  %20 = load i32* %i, align 4
  %21 = icmp slt i32 %20, 4
  br i1 %21, label %22, label %37

; <label>:22                                      ; preds = %19
  %23 = load i32* %i, align 4
  %24 = load i32* %j, align 4
  %25 = icmp eq i32 %23, %24
  %26 = zext i1 %25 to i32
  %27 = sitofp i32 %26 to double
  %28 = load i32* %i, align 4
  %29 = sext i32 %28 to i64
  %30 = load i32* %j, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %31
  %33 = getelementptr inbounds [4 x double]* %32, i32 0, i64 %29
  store double %27, double* %33, align 8
  br label %34

; <label>:34                                      ; preds = %22
  %35 = load i32* %i, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %i, align 4
  br label %19

; <label>:37                                      ; preds = %19
  br label %38

; <label>:38                                      ; preds = %37
  %39 = load i32* %j, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %j, align 4
  br label %15

; <label>:41                                      ; preds = %15
  %42 = call zeroext i16 @get2()
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %entries, align 4
  %44 = load i32* %entries, align 4
  %45 = icmp ugt i32 %44, 512
  br i1 %45, label %46, label %47

; <label>:46                                      ; preds = %41
  store i32 1, i32* %1
  br label %1349

; <label>:47                                      ; preds = %41
  br label %48

; <label>:48                                      ; preds = %1153, %47
  %49 = load i32* %entries, align 4
  %50 = add i32 %49, -1
  store i32 %50, i32* %entries, align 4
  %51 = icmp ne i32 %49, 0
  br i1 %51, label %52, label %1158

; <label>:52                                      ; preds = %48
  %53 = load i32* %2, align 4
  call void @tiff_get(i32 %53, i32* %tag, i32* %type, i32* %len, i32* %save)
  %54 = load i32* %tag, align 4
  switch i32 %54, label %1153 [
    i32 17, label %55
    i32 18, label %55
    i32 23, label %73
    i32 36, label %80
    i32 37, label %80
    i32 38, label %80
    i32 39, label %87
    i32 46, label %110
    i32 2, label %127
    i32 256, label %127
    i32 3, label %134
    i32 257, label %134
    i32 258, label %141
    i32 259, label %154
    i32 262, label %161
    i32 270, label %168
    i32 271, label %171
    i32 272, label %174
    i32 280, label %177
    i32 273, label %182
    i32 513, label %182
    i32 274, label %243
    i32 277, label %256
    i32 279, label %264
    i32 514, label %264
    i32 305, label %270
    i32 11, label %270
    i32 306, label %299
    i32 315, label %300
    i32 322, label %303
    i32 323, label %306
    i32 324, label %309
    i32 330, label %329
    i32 400, label %372
    i32 28688, label %374
    i32 29184, label %430
    i32 29185, label %432
    i32 29217, label %434
    i32 29264, label %436
    i32 29443, label %440
    i32 29459, label %458
    i32 33405, label %475
    i32 33422, label %478
    i32 64777, label %478
    i32 33424, label %528
    i32 33434, label %536
    i32 33437, label %540
    i32 34306, label %544
    i32 34307, label %562
    i32 34310, label %637
    i32 34303, label %641
    i32 34665, label %643
    i32 34853, label %651
    i32 34675, label %659
    i32 50831, label %659
    i32 37122, label %663
    i32 37386, label %665
    i32 37393, label %669
    i32 37400, label %672
    i32 46275, label %700
    i32 46279, label %705
    i32 50454, label %815
    i32 50455, label %815
    i32 50458, label %856
    i32 50459, label %862
    i32 50706, label %882
    i32 50710, label %901
    i32 50711, label %952
    i32 291, label %958
    i32 50712, label %958
    i32 50714, label %960
    i32 50715, label %960
    i32 50716, label %960
    i32 50717, label %983
    i32 50718, label %986
    i32 50721, label %993
    i32 50722, label %993
    i32 50723, label %1019
    i32 50724, label %1019
    i32 50727, label %1046
    i32 50728, label %1061
    i32 50729, label %1076
    i32 50740, label %1108
    i32 50752, label %1122
    i32 50829, label %1123
    i32 64772, label %1142
  ]

; <label>:55                                      ; preds = %52, %52
  %56 = load i32* %type, align 4
  %57 = icmp eq i32 %56, 3
  br i1 %57, label %58, label %72

; <label>:58                                      ; preds = %55
  %59 = load i32* %len, align 4
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %72

; <label>:61                                      ; preds = %58
  %62 = call zeroext i16 @get2()
  %63 = zext i16 %62 to i32
  %64 = sitofp i32 %63 to double
  %65 = fdiv double %64, 2.560000e+02
  %66 = fptrunc double %65 to float
  %67 = load i32* %tag, align 4
  %68 = sub i32 %67, 17
  %69 = mul i32 %68, 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %70
  store float %66, float* %71, align 4
  br label %72

; <label>:72                                      ; preds = %61, %58, %55
  br label %1153

; <label>:73                                      ; preds = %52
  %74 = load i32* %type, align 4
  %75 = icmp eq i32 %74, 3
  br i1 %75, label %76, label %79

; <label>:76                                      ; preds = %73
  %77 = call zeroext i16 @get2()
  %78 = uitofp i16 %77 to float
  store float %78, float* @iso_speed, align 4
  br label %79

; <label>:79                                      ; preds = %76, %73
  br label %1153

; <label>:80                                      ; preds = %52, %52, %52
  %81 = call zeroext i16 @get2()
  %82 = uitofp i16 %81 to float
  %83 = load i32* %tag, align 4
  %84 = sub i32 %83, 36
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %85
  store float %82, float* %86, align 4
  br label %1153

; <label>:87                                      ; preds = %52
  %88 = load i32* %len, align 4
  %89 = icmp ult i32 %88, 50
  br i1 %89, label %93, label %90

; <label>:90                                      ; preds = %87
  %91 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %92 = fcmp une float %91, 0.000000e+00
  br i1 %92, label %93, label %94

; <label>:93                                      ; preds = %90, %87
  br label %1153

; <label>:94                                      ; preds = %90
  %95 = load %struct._IO_FILE** @ifp, align 8
  %96 = call i32 @fseek(%struct._IO_FILE* %95, i64 12, i32 1)
  store i32 0, i32* %c, align 4
  br label %97

; <label>:97                                      ; preds = %106, %94
  %98 = load i32* %c, align 4
  %99 = icmp slt i32 %98, 3
  br i1 %99, label %100, label %109

; <label>:100                                     ; preds = %97
  %101 = call zeroext i16 @get2()
  %102 = uitofp i16 %101 to float
  %103 = load i32* %c, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %104
  store float %102, float* %105, align 4
  br label %106

; <label>:106                                     ; preds = %100
  %107 = load i32* %c, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %c, align 4
  br label %97

; <label>:109                                     ; preds = %97
  br label %1153

; <label>:110                                     ; preds = %52
  %111 = load i32* %type, align 4
  %112 = icmp ne i32 %111, 7
  br i1 %112, label %121, label %113

; <label>:113                                     ; preds = %110
  %114 = load %struct._IO_FILE** @ifp, align 8
  %115 = call i32 @getc_unlocked(%struct._IO_FILE* %114)
  %116 = icmp ne i32 %115, 255
  br i1 %116, label %121, label %117

; <label>:117                                     ; preds = %113
  %118 = load %struct._IO_FILE** @ifp, align 8
  %119 = call i32 @getc_unlocked(%struct._IO_FILE* %118)
  %120 = icmp ne i32 %119, 216
  br i1 %120, label %121, label %122

; <label>:121                                     ; preds = %117, %113, %110
  br label %1153

; <label>:122                                     ; preds = %117
  %123 = load %struct._IO_FILE** @ifp, align 8
  %124 = call i64 @ftell(%struct._IO_FILE* %123)
  %125 = sub nsw i64 %124, 2
  store i64 %125, i64* @thumb_offset, align 8
  %126 = load i32* %len, align 4
  store i32 %126, i32* @thumb_length, align 4
  br label %1153

; <label>:127                                     ; preds = %52, %52
  %128 = load i32* %type, align 4
  %129 = call i32 @getint(i32 %128)
  %130 = load i32* %ifd, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %131
  %133 = getelementptr inbounds %struct.anon.2* %132, i32 0, i32 0
  store i32 %129, i32* %133, align 4
  br label %1153

; <label>:134                                     ; preds = %52, %52
  %135 = load i32* %type, align 4
  %136 = call i32 @getint(i32 %135)
  %137 = load i32* %ifd, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %138
  %140 = getelementptr inbounds %struct.anon.2* %139, i32 0, i32 1
  store i32 %136, i32* %140, align 4
  br label %1153

; <label>:141                                     ; preds = %52
  %142 = load i32* %len, align 4
  %143 = and i32 %142, 7
  %144 = load i32* %ifd, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %145
  %147 = getelementptr inbounds %struct.anon.2* %146, i32 0, i32 7
  store i32 %143, i32* %147, align 4
  %148 = call zeroext i16 @get2()
  %149 = zext i16 %148 to i32
  %150 = load i32* %ifd, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %151
  %153 = getelementptr inbounds %struct.anon.2* %152, i32 0, i32 2
  store i32 %149, i32* %153, align 4
  br label %1153

; <label>:154                                     ; preds = %52
  %155 = call zeroext i16 @get2()
  %156 = zext i16 %155 to i32
  %157 = load i32* %ifd, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %158
  %160 = getelementptr inbounds %struct.anon.2* %159, i32 0, i32 3
  store i32 %156, i32* %160, align 4
  br label %1153

; <label>:161                                     ; preds = %52
  %162 = call zeroext i16 @get2()
  %163 = zext i16 %162 to i32
  %164 = load i32* %ifd, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %165
  %167 = getelementptr inbounds %struct.anon.2* %166, i32 0, i32 4
  store i32 %163, i32* %167, align 4
  br label %1153

; <label>:168                                     ; preds = %52
  %169 = load %struct._IO_FILE** @ifp, align 8
  %170 = call i64 @fread(i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i32 0), i64 512, i64 1, %struct._IO_FILE* %169)
  br label %1153

; <label>:171                                     ; preds = %52
  %172 = load %struct._IO_FILE** @ifp, align 8
  %173 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i32 64, %struct._IO_FILE* %172)
  br label %1153

; <label>:174                                     ; preds = %52
  %175 = load %struct._IO_FILE** @ifp, align 8
  %176 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i32 64, %struct._IO_FILE* %175)
  br label %1153

; <label>:177                                     ; preds = %52
  %178 = load i32* %type, align 4
  %179 = icmp ne i32 %178, 4
  br i1 %179, label %180, label %181

; <label>:180                                     ; preds = %177
  br label %1153

; <label>:181                                     ; preds = %177
  store void (...)* bitcast (void ()* @panasonic_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 8200, i32* @load_flags, align 4
  br label %182

; <label>:182                                     ; preds = %52, %52, %181
  %183 = call i32 @get4()
  %184 = load i32* %2, align 4
  %185 = add i32 %183, %184
  %186 = load i32* %ifd, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %187
  %189 = getelementptr inbounds %struct.anon.2* %188, i32 0, i32 5
  store i32 %185, i32* %189, align 4
  %190 = load i32* %ifd, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %191
  %193 = getelementptr inbounds %struct.anon.2* %192, i32 0, i32 2
  %194 = load i32* %193, align 4
  %195 = icmp ne i32 %194, 0
  br i1 %195, label %242, label %196

; <label>:196                                     ; preds = %182
  %197 = load %struct._IO_FILE** @ifp, align 8
  %198 = load i32* %ifd, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %199
  %201 = getelementptr inbounds %struct.anon.2* %200, i32 0, i32 5
  %202 = load i32* %201, align 4
  %203 = sext i32 %202 to i64
  %204 = call i32 @fseek(%struct._IO_FILE* %197, i64 %203, i32 0)
  %205 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %206 = icmp ne i32 %205, 0
  br i1 %206, label %207, label %241

; <label>:207                                     ; preds = %196
  %208 = load i32* %ifd, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %209
  %211 = getelementptr inbounds %struct.anon.2* %210, i32 0, i32 3
  store i32 6, i32* %211, align 4
  %212 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %213 = load i32* %212, align 4
  %214 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %215 = load i32* %214, align 4
  %216 = icmp eq i32 %215, 2
  %217 = zext i1 %216 to i32
  %218 = shl i32 %213, %217
  %219 = load i32* %ifd, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %220
  %222 = getelementptr inbounds %struct.anon.2* %221, i32 0, i32 0
  store i32 %218, i32* %222, align 4
  %223 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %224 = load i32* %223, align 4
  %225 = load i32* %ifd, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %226
  %228 = getelementptr inbounds %struct.anon.2* %227, i32 0, i32 1
  store i32 %224, i32* %228, align 4
  %229 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %230 = load i32* %229, align 4
  %231 = load i32* %ifd, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %232
  %234 = getelementptr inbounds %struct.anon.2* %233, i32 0, i32 2
  store i32 %230, i32* %234, align 4
  %235 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 3
  %236 = load i32* %235, align 4
  %237 = load i32* %ifd, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %238
  %240 = getelementptr inbounds %struct.anon.2* %239, i32 0, i32 7
  store i32 %236, i32* %240, align 4
  br label %241

; <label>:241                                     ; preds = %207, %196
  br label %242

; <label>:242                                     ; preds = %241, %182
  br label %1153

; <label>:243                                     ; preds = %52
  %244 = call zeroext i16 @get2()
  %245 = zext i16 %244 to i32
  %246 = and i32 %245, 7
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [9 x i8]* @.str143, i32 0, i64 %247
  %249 = load i8* %248, align 1
  %250 = sext i8 %249 to i32
  %251 = sub nsw i32 %250, 48
  %252 = load i32* %ifd, align 4
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %253
  %255 = getelementptr inbounds %struct.anon.2* %254, i32 0, i32 6
  store i32 %251, i32* %255, align 4
  br label %1153

; <label>:256                                     ; preds = %52
  %257 = load i32* %type, align 4
  %258 = call i32 @getint(i32 %257)
  %259 = and i32 %258, 7
  %260 = load i32* %ifd, align 4
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %261
  %263 = getelementptr inbounds %struct.anon.2* %262, i32 0, i32 7
  store i32 %259, i32* %263, align 4
  br label %1153

; <label>:264                                     ; preds = %52, %52
  %265 = call i32 @get4()
  %266 = load i32* %ifd, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %267
  %269 = getelementptr inbounds %struct.anon.2* %268, i32 0, i32 8
  store i32 %265, i32* %269, align 4
  br label %1153

; <label>:270                                     ; preds = %52, %52
  %271 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %272 = load %struct._IO_FILE** @ifp, align 8
  %273 = call i8* @fgets(i8* %271, i32 64, %struct._IO_FILE* %272)
  %274 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %275 = call i32 @strncmp(i8* %274, i8* getelementptr inbounds ([6 x i8]* @.str144, i32 0, i32 0), i64 5) #10
  %276 = icmp ne i32 %275, 0
  br i1 %276, label %277, label %297

; <label>:277                                     ; preds = %270
  %278 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %279 = call i32 @strncmp(i8* %278, i8* getelementptr inbounds ([6 x i8]* @.str145, i32 0, i32 0), i64 5) #10
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %297

; <label>:281                                     ; preds = %277
  %282 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %283 = call i32 @strncmp(i8* %282, i8* getelementptr inbounds ([6 x i8]* @.str146, i32 0, i32 0), i64 5) #10
  %284 = icmp ne i32 %283, 0
  br i1 %284, label %285, label %297

; <label>:285                                     ; preds = %281
  %286 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %287 = call i32 @strncmp(i8* %286, i8* getelementptr inbounds ([7 x i8]* @.str147, i32 0, i32 0), i64 6) #10
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %289, label %297

; <label>:289                                     ; preds = %285
  %290 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %291 = call i32 @strncmp(i8* %290, i8* getelementptr inbounds ([11 x i8]* @.str148, i32 0, i32 0), i64 10) #10
  %292 = icmp ne i32 %291, 0
  br i1 %292, label %293, label %297

; <label>:293                                     ; preds = %289
  %294 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %295 = call i32 @strcmp(i8* %294, i8* getelementptr inbounds ([27 x i8]* @.str149, i32 0, i32 0)) #10
  %296 = icmp ne i32 %295, 0
  br i1 %296, label %298, label %297

; <label>:297                                     ; preds = %293, %289, %285, %281, %277, %270
  store i32 0, i32* @is_raw, align 4
  br label %298

; <label>:298                                     ; preds = %297, %293
  br label %1153

; <label>:299                                     ; preds = %52
  call void @get_timestamp(i32 0)
  br label %1153

; <label>:300                                     ; preds = %52
  %301 = load %struct._IO_FILE** @ifp, align 8
  %302 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %301)
  br label %1153

; <label>:303                                     ; preds = %52
  %304 = load i32* %type, align 4
  %305 = call i32 @getint(i32 %304)
  store i32 %305, i32* @tile_width, align 4
  br label %1153

; <label>:306                                     ; preds = %52
  %307 = load i32* %type, align 4
  %308 = call i32 @getint(i32 %307)
  store i32 %308, i32* @tile_length, align 4
  br label %1153

; <label>:309                                     ; preds = %52
  %310 = load i32* %len, align 4
  %311 = icmp ugt i32 %310, 1
  br i1 %311, label %312, label %315

; <label>:312                                     ; preds = %309
  %313 = load %struct._IO_FILE** @ifp, align 8
  %314 = call i64 @ftell(%struct._IO_FILE* %313)
  br label %318

; <label>:315                                     ; preds = %309
  %316 = call i32 @get4()
  %317 = zext i32 %316 to i64
  br label %318

; <label>:318                                     ; preds = %315, %312
  %319 = phi i64 [ %314, %312 ], [ %317, %315 ]
  %320 = trunc i64 %319 to i32
  %321 = load i32* %ifd, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %322
  %324 = getelementptr inbounds %struct.anon.2* %323, i32 0, i32 5
  store i32 %320, i32* %324, align 4
  %325 = load i32* %len, align 4
  %326 = icmp eq i32 %325, 4
  br i1 %326, label %327, label %328

; <label>:327                                     ; preds = %318
  store void (...)* bitcast (void ()* @sinar_4shot_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 5, i32* @is_raw, align 4
  br label %328

; <label>:328                                     ; preds = %327, %318
  br label %1153

; <label>:329                                     ; preds = %52
  %330 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str150, i32 0, i32 0)) #10
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %346, label %332

; <label>:332                                     ; preds = %329
  %333 = load i32* %ifd, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %334
  %336 = getelementptr inbounds %struct.anon.2* %335, i32 0, i32 0
  %337 = load i32* %336, align 4
  %338 = icmp eq i32 %337, 3872
  br i1 %338, label %339, label %346

; <label>:339                                     ; preds = %332
  store void (...)* bitcast (void ()* @sony_arw_load_raw to void (...)*), void (...)** @load_raw, align 8
  %340 = call i32 @get4()
  %341 = load i32* %2, align 4
  %342 = add i32 %340, %341
  %343 = zext i32 %342 to i64
  store i64 %343, i64* @data_offset, align 8
  %344 = load i32* %ifd, align 4
  %345 = add nsw i32 %344, 1
  store i32 %345, i32* %ifd, align 4
  br label %1153

; <label>:346                                     ; preds = %332, %329
  br label %347

; <label>:347                                     ; preds = %365, %346
  %348 = load i32* %len, align 4
  %349 = add i32 %348, -1
  store i32 %349, i32* %len, align 4
  %350 = icmp ne i32 %348, 0
  br i1 %350, label %351, label %371

; <label>:351                                     ; preds = %347
  %352 = load %struct._IO_FILE** @ifp, align 8
  %353 = call i64 @ftell(%struct._IO_FILE* %352)
  %354 = trunc i64 %353 to i32
  store i32 %354, i32* %i, align 4
  %355 = load %struct._IO_FILE** @ifp, align 8
  %356 = call i32 @get4()
  %357 = load i32* %2, align 4
  %358 = add i32 %356, %357
  %359 = zext i32 %358 to i64
  %360 = call i32 @fseek(%struct._IO_FILE* %355, i64 %359, i32 0)
  %361 = load i32* %2, align 4
  %362 = call i32 @parse_tiff_ifd(i32 %361)
  %363 = icmp ne i32 %362, 0
  br i1 %363, label %364, label %365

; <label>:364                                     ; preds = %351
  br label %371

; <label>:365                                     ; preds = %351
  %366 = load %struct._IO_FILE** @ifp, align 8
  %367 = load i32* %i, align 4
  %368 = add nsw i32 %367, 4
  %369 = sext i32 %368 to i64
  %370 = call i32 @fseek(%struct._IO_FILE* %366, i64 %369, i32 0)
  br label %347

; <label>:371                                     ; preds = %364, %347
  br label %1153

; <label>:372                                     ; preds = %52
  %373 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str151, i32 0, i32 0)) #4
  store i32 4095, i32* @maximum, align 4
  br label %1153

; <label>:374                                     ; preds = %52
  store i32 0, i32* %c, align 4
  br label %375

; <label>:375                                     ; preds = %387, %374
  %376 = load i32* %c, align 4
  %377 = icmp slt i32 %376, 4
  br i1 %377, label %378, label %390

; <label>:378                                     ; preds = %375
  %379 = call zeroext i16 @get2()
  %380 = zext i16 %379 to i32
  %381 = ashr i32 %380, 2
  %382 = and i32 %381, 4095
  %383 = load i32* %c, align 4
  %384 = add nsw i32 %383, 1
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds [6 x i32]* %sony_curve, i32 0, i64 %385
  store i32 %382, i32* %386, align 4
  br label %387

; <label>:387                                     ; preds = %378
  %388 = load i32* %c, align 4
  %389 = add nsw i32 %388, 1
  store i32 %389, i32* %c, align 4
  br label %375

; <label>:390                                     ; preds = %375
  store i32 0, i32* %i, align 4
  br label %391

; <label>:391                                     ; preds = %426, %390
  %392 = load i32* %i, align 4
  %393 = icmp slt i32 %392, 5
  br i1 %393, label %394, label %429

; <label>:394                                     ; preds = %391
  %395 = load i32* %i, align 4
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds [6 x i32]* %sony_curve, i32 0, i64 %396
  %398 = load i32* %397, align 4
  %399 = add i32 %398, 1
  store i32 %399, i32* %j, align 4
  br label %400

; <label>:400                                     ; preds = %422, %394
  %401 = load i32* %j, align 4
  %402 = load i32* %i, align 4
  %403 = add nsw i32 %402, 1
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds [6 x i32]* %sony_curve, i32 0, i64 %404
  %406 = load i32* %405, align 4
  %407 = icmp ule i32 %401, %406
  br i1 %407, label %408, label %425

; <label>:408                                     ; preds = %400
  %409 = load i32* %j, align 4
  %410 = sub nsw i32 %409, 1
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %411
  %413 = load i16* %412, align 2
  %414 = zext i16 %413 to i32
  %415 = load i32* %i, align 4
  %416 = shl i32 1, %415
  %417 = add nsw i32 %414, %416
  %418 = trunc i32 %417 to i16
  %419 = load i32* %j, align 4
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %420
  store i16 %418, i16* %421, align 2
  br label %422

; <label>:422                                     ; preds = %408
  %423 = load i32* %j, align 4
  %424 = add nsw i32 %423, 1
  store i32 %424, i32* %j, align 4
  br label %400

; <label>:425                                     ; preds = %400
  br label %426

; <label>:426                                     ; preds = %425
  %427 = load i32* %i, align 4
  %428 = add nsw i32 %427, 1
  store i32 %428, i32* %i, align 4
  br label %391

; <label>:429                                     ; preds = %391
  br label %1153

; <label>:430                                     ; preds = %52
  %431 = call i32 @get4()
  store i32 %431, i32* %sony_offset, align 4
  br label %1153

; <label>:432                                     ; preds = %52
  %433 = call i32 @get4()
  store i32 %433, i32* %sony_length, align 4
  br label %1153

; <label>:434                                     ; preds = %52
  %435 = call i32 @get4()
  store i32 %435, i32* %sony_key, align 4
  br label %1153

; <label>:436                                     ; preds = %52
  %437 = load %struct._IO_FILE** @ifp, align 8
  %438 = call i64 @ftell(%struct._IO_FILE* %437)
  %439 = trunc i64 %438 to i32
  call void @parse_minolta(i32 %439)
  store i16 0, i16* @raw_width, align 2
  br label %1153

; <label>:440                                     ; preds = %52
  store i32 0, i32* %c, align 4
  br label %441

; <label>:441                                     ; preds = %454, %440
  %442 = load i32* %c, align 4
  %443 = icmp slt i32 %442, 4
  br i1 %443, label %444, label %457

; <label>:444                                     ; preds = %441
  %445 = call zeroext i16 @get2()
  %446 = uitofp i16 %445 to float
  %447 = load i32* %c, align 4
  %448 = load i32* %c, align 4
  %449 = icmp slt i32 %448, 2
  %450 = zext i1 %449 to i32
  %451 = xor i32 %447, %450
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %452
  store float %446, float* %453, align 4
  br label %454

; <label>:454                                     ; preds = %444
  %455 = load i32* %c, align 4
  %456 = add nsw i32 %455, 1
  store i32 %456, i32* %c, align 4
  br label %441

; <label>:457                                     ; preds = %441
  br label %1153

; <label>:458                                     ; preds = %52
  store i32 0, i32* %c, align 4
  br label %459

; <label>:459                                     ; preds = %471, %458
  %460 = load i32* %c, align 4
  %461 = icmp slt i32 %460, 4
  br i1 %461, label %462, label %474

; <label>:462                                     ; preds = %459
  %463 = call zeroext i16 @get2()
  %464 = uitofp i16 %463 to float
  %465 = load i32* %c, align 4
  %466 = load i32* %c, align 4
  %467 = ashr i32 %466, 1
  %468 = xor i32 %465, %467
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %469
  store float %464, float* %470, align 4
  br label %471

; <label>:471                                     ; preds = %462
  %472 = load i32* %c, align 4
  %473 = add nsw i32 %472, 1
  store i32 %473, i32* %c, align 4
  br label %459

; <label>:474                                     ; preds = %459
  br label %1153

; <label>:475                                     ; preds = %52
  %476 = load %struct._IO_FILE** @ifp, align 8
  %477 = call i8* @fgets(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i32 64, %struct._IO_FILE* %476)
  br label %1153

; <label>:478                                     ; preds = %52, %52
  %479 = load i32* %len, align 4
  store i32 %479, i32* %plen, align 4
  %480 = icmp ugt i32 %479, 16
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %478
  store i32 16, i32* %plen, align 4
  br label %482

; <label>:482                                     ; preds = %481, %478
  %483 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i32 0
  %484 = load i32* %plen, align 4
  %485 = zext i32 %484 to i64
  %486 = load %struct._IO_FILE** @ifp, align 8
  %487 = call i64 @fread(i8* %483, i64 1, i64 %485, %struct._IO_FILE* %486)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %cfa, align 4
  store i32 0, i32* @colors, align 4
  br label %488

; <label>:488                                     ; preds = %514, %482
  %489 = load i32* %i, align 4
  %490 = load i32* %plen, align 4
  %491 = icmp ult i32 %489, %490
  br i1 %491, label %492, label %517

; <label>:492                                     ; preds = %488
  %493 = load i32* %cfa, align 4
  %494 = load i32* %i, align 4
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i64 %495
  %497 = load i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = shl i32 1, %498
  %500 = and i32 %493, %499
  %501 = icmp ne i32 %500, 0
  %502 = xor i1 %501, true
  %503 = zext i1 %502 to i32
  %504 = load i32* @colors, align 4
  %505 = add nsw i32 %504, %503
  store i32 %505, i32* @colors, align 4
  %506 = load i32* %i, align 4
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i64 %507
  %509 = load i8* %508, align 1
  %510 = zext i8 %509 to i32
  %511 = shl i32 1, %510
  %512 = load i32* %cfa, align 4
  %513 = or i32 %512, %511
  store i32 %513, i32* %cfa, align 4
  br label %514

; <label>:514                                     ; preds = %492
  %515 = load i32* %i, align 4
  %516 = add nsw i32 %515, 1
  store i32 %516, i32* %i, align 4
  br label %488

; <label>:517                                     ; preds = %488
  %518 = load i32* %cfa, align 4
  %519 = icmp eq i32 %518, 56
  br i1 %519, label %520, label %522

; <label>:520                                     ; preds = %517
  %521 = bitcast [4 x i8]* %cfa_pc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %521, i8* getelementptr inbounds ([4 x i8]* @.str152, i32 0, i32 0), i64 3, i32 1, i1 false)
  br label %522

; <label>:522                                     ; preds = %520, %517
  %523 = load i32* %cfa, align 4
  %524 = icmp eq i32 %523, 58
  br i1 %524, label %525, label %527

; <label>:525                                     ; preds = %522
  %526 = bitcast [4 x i8]* %cfa_pc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %526, i8* getelementptr inbounds ([5 x i8]* @.str153, i32 0, i32 0), i64 4, i32 1, i1 false)
  br label %527

; <label>:527                                     ; preds = %525, %522
  br label %912

; <label>:528                                     ; preds = %52
  %529 = load %struct._IO_FILE** @ifp, align 8
  %530 = call i32 @get4()
  %531 = load i32* %2, align 4
  %532 = add i32 %530, %531
  %533 = zext i32 %532 to i64
  %534 = call i32 @fseek(%struct._IO_FILE* %529, i64 %533, i32 0)
  %535 = load i32* %2, align 4
  call void @parse_kodak_ifd(i32 %535)
  br label %1153

; <label>:536                                     ; preds = %52
  %537 = load i32* %type, align 4
  %538 = call double @getreal(i32 %537)
  %539 = fptrunc double %538 to float
  store float %539, float* @shutter, align 4
  br label %1153

; <label>:540                                     ; preds = %52
  %541 = load i32* %type, align 4
  %542 = call double @getreal(i32 %541)
  %543 = fptrunc double %542 to float
  store float %543, float* @aperture, align 4
  br label %1153

; <label>:544                                     ; preds = %52
  store i32 0, i32* %c, align 4
  br label %545

; <label>:545                                     ; preds = %558, %544
  %546 = load i32* %c, align 4
  %547 = icmp slt i32 %546, 4
  br i1 %547, label %548, label %561

; <label>:548                                     ; preds = %545
  %549 = call zeroext i16 @get2()
  %550 = zext i16 %549 to i32
  %551 = sitofp i32 %550 to double
  %552 = fdiv double 4.096000e+03, %551
  %553 = fptrunc double %552 to float
  %554 = load i32* %c, align 4
  %555 = xor i32 %554, 1
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %556
  store float %553, float* %557, align 4
  br label %558

; <label>:558                                     ; preds = %548
  %559 = load i32* %c, align 4
  %560 = add nsw i32 %559, 1
  store i32 %560, i32* %c, align 4
  br label %545

; <label>:561                                     ; preds = %545
  br label %1153

; <label>:562                                     ; preds = %52
  %563 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %564 = load %struct._IO_FILE** @ifp, align 8
  %565 = call i64 @fread(i8* %563, i64 1, i64 7, %struct._IO_FILE* %564)
  %566 = getelementptr inbounds [64 x i8]* %software, i32 0, i32 0
  %567 = call i32 @strncmp(i8* %566, i8* getelementptr inbounds ([7 x i8]* @.str154, i32 0, i32 0), i64 6) #10
  %568 = icmp ne i32 %567, 0
  br i1 %568, label %569, label %570

; <label>:569                                     ; preds = %562
  br label %1153

; <label>:570                                     ; preds = %562
  store i32 4, i32* @colors, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* @raw_color, align 4
  br label %571

; <label>:571                                     ; preds = %633, %570
  %572 = load i32* %i, align 4
  %573 = icmp slt i32 %572, 3
  br i1 %573, label %574, label %636

; <label>:574                                     ; preds = %571
  store i32 0, i32* %c, align 4
  br label %575

; <label>:575                                     ; preds = %588, %574
  %576 = load i32* %c, align 4
  %577 = icmp slt i32 %576, 4
  br i1 %577, label %578, label %591

; <label>:578                                     ; preds = %575
  %579 = load %struct._IO_FILE** @ifp, align 8
  %580 = load i32* %c, align 4
  %581 = xor i32 %580, 1
  %582 = sext i32 %581 to i64
  %583 = load i32* %i, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %584
  %586 = getelementptr inbounds [4 x float]* %585, i32 0, i64 %582
  %587 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %579, i8* getelementptr inbounds ([3 x i8]* @.str136, i32 0, i32 0), float* %586)
  br label %588

; <label>:588                                     ; preds = %578
  %589 = load i32* %c, align 4
  %590 = add nsw i32 %589, 1
  store i32 %590, i32* %c, align 4
  br label %575

; <label>:591                                     ; preds = %575
  %592 = load i32* @use_camera_wb, align 4
  %593 = icmp ne i32 %592, 0
  br i1 %593, label %595, label %594

; <label>:594                                     ; preds = %591
  br label %633

; <label>:595                                     ; preds = %591
  store double 0.000000e+00, double* %num, align 8
  store i32 0, i32* %c, align 4
  br label %596

; <label>:596                                     ; preds = %610, %595
  %597 = load i32* %c, align 4
  %598 = icmp slt i32 %597, 4
  br i1 %598, label %599, label %613

; <label>:599                                     ; preds = %596
  %600 = load i32* %c, align 4
  %601 = sext i32 %600 to i64
  %602 = load i32* %i, align 4
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %603
  %605 = getelementptr inbounds [4 x float]* %604, i32 0, i64 %601
  %606 = load float* %605, align 4
  %607 = fpext float %606 to double
  %608 = load double* %num, align 8
  %609 = fadd double %608, %607
  store double %609, double* %num, align 8
  br label %610

; <label>:610                                     ; preds = %599
  %611 = load i32* %c, align 4
  %612 = add nsw i32 %611, 1
  store i32 %612, i32* %c, align 4
  br label %596

; <label>:613                                     ; preds = %596
  store i32 0, i32* %c, align 4
  br label %614

; <label>:614                                     ; preds = %629, %613
  %615 = load i32* %c, align 4
  %616 = icmp slt i32 %615, 4
  br i1 %616, label %617, label %632

; <label>:617                                     ; preds = %614
  %618 = load double* %num, align 8
  %619 = load i32* %c, align 4
  %620 = sext i32 %619 to i64
  %621 = load i32* %i, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %622
  %624 = getelementptr inbounds [4 x float]* %623, i32 0, i64 %620
  %625 = load float* %624, align 4
  %626 = fpext float %625 to double
  %627 = fdiv double %626, %618
  %628 = fptrunc double %627 to float
  store float %628, float* %624, align 4
  br label %629

; <label>:629                                     ; preds = %617
  %630 = load i32* %c, align 4
  %631 = add nsw i32 %630, 1
  store i32 %631, i32* %c, align 4
  br label %614

; <label>:632                                     ; preds = %614
  br label %633

; <label>:633                                     ; preds = %632, %594
  %634 = load i32* %i, align 4
  %635 = add nsw i32 %634, 1
  store i32 %635, i32* %i, align 4
  br label %571

; <label>:636                                     ; preds = %571
  br label %1153

; <label>:637                                     ; preds = %52
  %638 = load %struct._IO_FILE** @ifp, align 8
  %639 = call i64 @ftell(%struct._IO_FILE* %638)
  %640 = trunc i64 %639 to i32
  call void @parse_mos(i32 %640)
  br label %641

; <label>:641                                     ; preds = %52, %637
  %642 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str155, i32 0, i32 0)) #4
  br label %1153

; <label>:643                                     ; preds = %52
  %644 = load %struct._IO_FILE** @ifp, align 8
  %645 = call i32 @get4()
  %646 = load i32* %2, align 4
  %647 = add i32 %645, %646
  %648 = zext i32 %647 to i64
  %649 = call i32 @fseek(%struct._IO_FILE* %644, i64 %648, i32 0)
  %650 = load i32* %2, align 4
  call void @parse_exif(i32 %650)
  br label %1153

; <label>:651                                     ; preds = %52
  %652 = load %struct._IO_FILE** @ifp, align 8
  %653 = call i32 @get4()
  %654 = load i32* %2, align 4
  %655 = add i32 %653, %654
  %656 = zext i32 %655 to i64
  %657 = call i32 @fseek(%struct._IO_FILE* %652, i64 %656, i32 0)
  %658 = load i32* %2, align 4
  call void @parse_gps(i32 %658)
  br label %1153

; <label>:659                                     ; preds = %52, %52
  %660 = load %struct._IO_FILE** @ifp, align 8
  %661 = call i64 @ftell(%struct._IO_FILE* %660)
  store i64 %661, i64* @profile_offset, align 8
  %662 = load i32* %len, align 4
  store i32 %662, i32* @profile_length, align 4
  br label %1153

; <label>:663                                     ; preds = %52
  %664 = call i32 @get4()
  store i32 %664, i32* @kodak_cbpp, align 4
  br label %1153

; <label>:665                                     ; preds = %52
  %666 = load i32* %type, align 4
  %667 = call double @getreal(i32 %666)
  %668 = fptrunc double %667 to float
  store float %668, float* @focal_len, align 4
  br label %1153

; <label>:669                                     ; preds = %52
  %670 = load i32* %type, align 4
  %671 = call i32 @getint(i32 %670)
  store i32 %671, i32* @shot_order, align 4
  br label %1153

; <label>:672                                     ; preds = %52
  store i32 0, i32* %i, align 4
  store i32 0, i32* @raw_color, align 4
  br label %673

; <label>:673                                     ; preds = %696, %672
  %674 = load i32* %i, align 4
  %675 = icmp slt i32 %674, 3
  br i1 %675, label %676, label %699

; <label>:676                                     ; preds = %673
  %677 = load i32* %type, align 4
  %678 = call double @getreal(i32 %677)
  store i32 0, i32* %c, align 4
  br label %679

; <label>:679                                     ; preds = %692, %676
  %680 = load i32* %c, align 4
  %681 = icmp slt i32 %680, 3
  br i1 %681, label %682, label %695

; <label>:682                                     ; preds = %679
  %683 = load i32* %type, align 4
  %684 = call double @getreal(i32 %683)
  %685 = fptrunc double %684 to float
  %686 = load i32* %c, align 4
  %687 = sext i32 %686 to i64
  %688 = load i32* %i, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %689
  %691 = getelementptr inbounds [4 x float]* %690, i32 0, i64 %687
  store float %685, float* %691, align 4
  br label %692

; <label>:692                                     ; preds = %682
  %693 = load i32* %c, align 4
  %694 = add nsw i32 %693, 1
  store i32 %694, i32* %c, align 4
  br label %679

; <label>:695                                     ; preds = %679
  br label %696

; <label>:696                                     ; preds = %695
  %697 = load i32* %i, align 4
  %698 = add nsw i32 %697, 1
  store i32 %698, i32* %i, align 4
  br label %673

; <label>:699                                     ; preds = %673
  br label %1153

; <label>:700                                     ; preds = %52
  %701 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str156, i32 0, i32 0)) #4
  %702 = load %struct._IO_FILE** @ifp, align 8
  %703 = call i64 @ftell(%struct._IO_FILE* %702)
  store i64 %703, i64* @data_offset, align 8
  %704 = load i32* %len, align 4
  store i32 %704, i32* %ima_len, align 4
  br label %1153

; <label>:705                                     ; preds = %52
  %706 = load i32* %ima_len, align 4
  %707 = icmp ne i32 %706, 0
  br i1 %707, label %709, label %708

; <label>:708                                     ; preds = %705
  br label %1153

; <label>:709                                     ; preds = %705
  %710 = load %struct._IO_FILE** @ifp, align 8
  %711 = call i32 @fseek(%struct._IO_FILE* %710, i64 78, i32 1)
  %712 = call i32 @get4()
  %713 = trunc i32 %712 to i16
  store i16 %713, i16* @raw_width, align 2
  %714 = call i32 @get4()
  %715 = trunc i32 %714 to i16
  store i16 %715, i16* @raw_height, align 2
  %716 = call i32 @get4()
  %717 = and i32 %716, 7
  %718 = trunc i32 %717 to i16
  store i16 %718, i16* @left_margin, align 2
  %719 = load i16* @raw_width, align 2
  %720 = zext i16 %719 to i32
  %721 = load i16* @left_margin, align 2
  %722 = zext i16 %721 to i32
  %723 = sub nsw i32 %720, %722
  %724 = call i32 @get4()
  %725 = and i32 %724, 7
  %726 = sub i32 %723, %725
  %727 = trunc i32 %726 to i16
  store i16 %727, i16* @width, align 2
  %728 = call i32 @get4()
  %729 = and i32 %728, 7
  %730 = trunc i32 %729 to i16
  store i16 %730, i16* @top_margin, align 2
  %731 = load i16* @raw_height, align 2
  %732 = zext i16 %731 to i32
  %733 = load i16* @top_margin, align 2
  %734 = zext i16 %733 to i32
  %735 = sub nsw i32 %732, %734
  %736 = call i32 @get4()
  %737 = and i32 %736, 7
  %738 = sub i32 %735, %737
  %739 = trunc i32 %738 to i16
  store i16 %739, i16* @height, align 2
  %740 = load i16* @raw_width, align 2
  %741 = zext i16 %740 to i32
  %742 = icmp eq i32 %741, 7262
  br i1 %742, label %743, label %744

; <label>:743                                     ; preds = %709
  store i16 5444, i16* @height, align 2
  store i16 7244, i16* @width, align 2
  store i16 7, i16* @left_margin, align 2
  br label %744

; <label>:744                                     ; preds = %743, %709
  %745 = load %struct._IO_FILE** @ifp, align 8
  %746 = call i32 @fseek(%struct._IO_FILE* %745, i64 52, i32 1)
  store i32 0, i32* %c, align 4
  br label %747

; <label>:747                                     ; preds = %756, %744
  %748 = load i32* %c, align 4
  %749 = icmp slt i32 %748, 3
  br i1 %749, label %750, label %759

; <label>:750                                     ; preds = %747
  %751 = call double @getreal(i32 11)
  %752 = fptrunc double %751 to float
  %753 = load i32* %c, align 4
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %754
  store float %752, float* %755, align 4
  br label %756

; <label>:756                                     ; preds = %750
  %757 = load i32* %c, align 4
  %758 = add nsw i32 %757, 1
  store i32 %758, i32* %c, align 4
  br label %747

; <label>:759                                     ; preds = %747
  %760 = load %struct._IO_FILE** @ifp, align 8
  %761 = call i32 @fseek(%struct._IO_FILE* %760, i64 114, i32 1)
  %762 = call zeroext i16 @get2()
  %763 = zext i16 %762 to i32
  %764 = ashr i32 %763, 7
  %765 = mul nsw i32 %764, 90
  store i32 %765, i32* @flip, align 4
  %766 = load i16* @width, align 2
  %767 = zext i16 %766 to i32
  %768 = load i16* @height, align 2
  %769 = zext i16 %768 to i32
  %770 = mul nsw i32 %767, %769
  %771 = mul nsw i32 %770, 6
  %772 = load i32* %ima_len, align 4
  %773 = icmp eq i32 %771, %772
  br i1 %773, label %774, label %797

; <label>:774                                     ; preds = %759
  %775 = load i32* @flip, align 4
  %776 = srem i32 %775, 180
  %777 = icmp eq i32 %776, 90
  br i1 %777, label %778, label %796

; <label>:778                                     ; preds = %774
  %779 = load i16* @height, align 2
  %780 = zext i16 %779 to i32
  %781 = load i16* @width, align 2
  %782 = zext i16 %781 to i32
  %783 = xor i32 %782, %780
  %784 = trunc i32 %783 to i16
  store i16 %784, i16* @width, align 2
  %785 = load i16* @width, align 2
  %786 = zext i16 %785 to i32
  %787 = load i16* @height, align 2
  %788 = zext i16 %787 to i32
  %789 = xor i32 %788, %786
  %790 = trunc i32 %789 to i16
  store i16 %790, i16* @height, align 2
  %791 = zext i16 %790 to i32
  %792 = load i16* @width, align 2
  %793 = zext i16 %792 to i32
  %794 = xor i32 %793, %791
  %795 = trunc i32 %794 to i16
  store i16 %795, i16* @width, align 2
  br label %796

; <label>:796                                     ; preds = %778, %774
  store i32 0, i32* @flip, align 4
  store i32 0, i32* @filters, align 4
  br label %797

; <label>:797                                     ; preds = %796, %759
  %798 = load i16* @height, align 2
  %799 = zext i16 %798 to i32
  %800 = load i16* @width, align 2
  %801 = zext i16 %800 to i32
  %802 = mul nsw i32 %799, %801
  %803 = sdiv i32 %802, 1000000
  %804 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str157, i32 0, i32 0), i32 %803) #4
  store void (...)* bitcast (void ()* @imacon_full_load_raw to void (...)*), void (...)** @load_raw, align 8
  %805 = load i32* @filters, align 4
  %806 = icmp ne i32 %805, 0
  br i1 %806, label %807, label %814

; <label>:807                                     ; preds = %797
  %808 = load i16* @left_margin, align 2
  %809 = zext i16 %808 to i32
  %810 = and i32 %809, 1
  %811 = icmp ne i32 %810, 0
  br i1 %811, label %812, label %813

; <label>:812                                     ; preds = %807
  store i32 1633771873, i32* @filters, align 4
  br label %813

; <label>:813                                     ; preds = %812, %807
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %814

; <label>:814                                     ; preds = %813, %797
  store i32 65535, i32* @maximum, align 4
  br label %1153

; <label>:815                                     ; preds = %52, %52
  %816 = load i32* %len, align 4
  %817 = zext i32 %816 to i64
  %818 = call noalias i8* @malloc(i64 %817) #4
  store i8* %818, i8** %cbuf, align 8
  %819 = icmp ne i8* %818, null
  br i1 %819, label %821, label %820

; <label>:820                                     ; preds = %815
  br label %1153

; <label>:821                                     ; preds = %815
  %822 = load i8** %cbuf, align 8
  %823 = load i32* %len, align 4
  %824 = zext i32 %823 to i64
  %825 = load %struct._IO_FILE** @ifp, align 8
  %826 = call i64 @fread(i8* %822, i64 1, i64 %824, %struct._IO_FILE* %825)
  %827 = load i8** %cbuf, align 8
  %828 = getelementptr inbounds i8* %827, i64 -1
  store i8* %828, i8** %cp, align 8
  br label %829

; <label>:829                                     ; preds = %851, %821
  %830 = load i8** %cp, align 8
  %831 = icmp ne i8* %830, null
  br i1 %831, label %832, label %839

; <label>:832                                     ; preds = %829
  %833 = load i8** %cp, align 8
  %834 = load i8** %cbuf, align 8
  %835 = load i32* %len, align 4
  %836 = zext i32 %835 to i64
  %837 = getelementptr inbounds i8* %834, i64 %836
  %838 = icmp ult i8* %833, %837
  br label %839

; <label>:839                                     ; preds = %832, %829
  %840 = phi i1 [ false, %829 ], [ %838, %832 ]
  br i1 %840, label %841, label %854

; <label>:841                                     ; preds = %839
  %842 = load i8** %cp, align 8
  %843 = getelementptr inbounds i8* %842, i32 1
  store i8* %843, i8** %cp, align 8
  %844 = call i32 @strncmp(i8* %843, i8* getelementptr inbounds ([9 x i8]* @.str158, i32 0, i32 0), i64 8) #10
  %845 = icmp ne i32 %844, 0
  br i1 %845, label %850, label %846

; <label>:846                                     ; preds = %841
  %847 = load i8** %cp, align 8
  %848 = getelementptr inbounds i8* %847, i64 8
  %849 = call i32 (i8*, i8*, ...)* @sscanf(i8* %848, i8* getelementptr inbounds ([9 x i8]* @.str159, i32 0, i32 0), float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i32 0), float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 1), float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2)) #4
  br label %850

; <label>:850                                     ; preds = %846, %841
  br label %851

; <label>:851                                     ; preds = %850
  %852 = load i8** %cp, align 8
  %853 = call i8* @strchr(i8* %852, i32 10) #10
  store i8* %853, i8** %cp, align 8
  br label %829

; <label>:854                                     ; preds = %839
  %855 = load i8** %cbuf, align 8
  call void @free(i8* %855) #4
  br label %1153

; <label>:856                                     ; preds = %52
  %857 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %858 = icmp ne i8 %857, 0
  br i1 %858, label %861, label %859

; <label>:859                                     ; preds = %856
  %860 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str160, i32 0, i32 0)) #4
  br label %861

; <label>:861                                     ; preds = %859, %856
  br label %1153

; <label>:862                                     ; preds = %52
  %863 = load i16* @order, align 2
  %864 = sext i16 %863 to i32
  store i32 %864, i32* %i, align 4
  %865 = load %struct._IO_FILE** @ifp, align 8
  %866 = call i64 @ftell(%struct._IO_FILE* %865)
  %867 = trunc i64 %866 to i32
  store i32 %867, i32* %j, align 4
  %868 = load i32* @tiff_nifds, align 4
  store i32 %868, i32* %c, align 4
  %869 = call zeroext i16 @get2()
  store i16 %869, i16* @order, align 2
  %870 = load %struct._IO_FILE** @ifp, align 8
  %871 = load i32* %j, align 4
  %872 = call zeroext i16 @get2()
  %873 = call i32 @get4()
  %874 = add i32 %871, %873
  %875 = zext i32 %874 to i64
  %876 = call i32 @fseek(%struct._IO_FILE* %870, i64 %875, i32 0)
  %877 = load i32* %j, align 4
  %878 = call i32 @parse_tiff_ifd(i32 %877)
  store i32 65535, i32* @maximum, align 4
  %879 = load i32* %c, align 4
  store i32 %879, i32* @tiff_nifds, align 4
  %880 = load i32* %i, align 4
  %881 = trunc i32 %880 to i16
  store i16 %881, i16* @order, align 2
  br label %1153

; <label>:882                                     ; preds = %52
  store i32 0, i32* %c, align 4
  br label %883

; <label>:883                                     ; preds = %892, %882
  %884 = load i32* %c, align 4
  %885 = icmp slt i32 %884, 4
  br i1 %885, label %886, label %895

; <label>:886                                     ; preds = %883
  %887 = load i32* @dng_version, align 4
  %888 = shl i32 %887, 8
  %889 = load %struct._IO_FILE** @ifp, align 8
  %890 = call i32 @getc_unlocked(%struct._IO_FILE* %889)
  %891 = add i32 %888, %890
  store i32 %891, i32* @dng_version, align 4
  br label %892

; <label>:892                                     ; preds = %886
  %893 = load i32* %c, align 4
  %894 = add nsw i32 %893, 1
  store i32 %894, i32* %c, align 4
  br label %883

; <label>:895                                     ; preds = %883
  %896 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %897 = icmp ne i8 %896, 0
  br i1 %897, label %900, label %898

; <label>:898                                     ; preds = %895
  %899 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str161, i32 0, i32 0)) #4
  br label %900

; <label>:900                                     ; preds = %898, %895
  store i32 1, i32* @is_raw, align 4
  br label %1153

; <label>:901                                     ; preds = %52
  %902 = load i32* %len, align 4
  %903 = icmp ugt i32 %902, 4
  br i1 %903, label %904, label %905

; <label>:904                                     ; preds = %901
  store i32 4, i32* %len, align 4
  br label %905

; <label>:905                                     ; preds = %904, %901
  %906 = load i32* %len, align 4
  store i32 %906, i32* @colors, align 4
  %907 = getelementptr inbounds [4 x i8]* %cfa_pc, i32 0, i32 0
  %908 = load i32* @colors, align 4
  %909 = sext i32 %908 to i64
  %910 = load %struct._IO_FILE** @ifp, align 8
  %911 = call i64 @fread(i8* %907, i64 1, i64 %909, %struct._IO_FILE* %910)
  br label %912

; <label>:912                                     ; preds = %905, %527
  store i32 0, i32* %c, align 4
  br label %913

; <label>:913                                     ; preds = %926, %912
  %914 = load i32* %c, align 4
  %915 = load i32* @colors, align 4
  %916 = icmp slt i32 %914, %915
  br i1 %916, label %917, label %929

; <label>:917                                     ; preds = %913
  %918 = load i32* %c, align 4
  %919 = trunc i32 %918 to i8
  %920 = load i32* %c, align 4
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds [4 x i8]* %cfa_pc, i32 0, i64 %921
  %923 = load i8* %922, align 1
  %924 = zext i8 %923 to i64
  %925 = getelementptr inbounds [256 x i8]* %tab, i32 0, i64 %924
  store i8 %919, i8* %925, align 1
  br label %926

; <label>:926                                     ; preds = %917
  %927 = load i32* %c, align 4
  %928 = add nsw i32 %927, 1
  store i32 %928, i32* %c, align 4
  br label %913

; <label>:929                                     ; preds = %913
  %930 = load i32* %c, align 4
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds [5 x i8]* @cdesc, i32 0, i64 %931
  store i8 0, i8* %932, align 1
  store i32 16, i32* %i, align 4
  br label %933

; <label>:933                                     ; preds = %937, %929
  %934 = load i32* %i, align 4
  %935 = add nsw i32 %934, -1
  store i32 %935, i32* %i, align 4
  %936 = icmp ne i32 %934, 0
  br i1 %936, label %937, label %951

; <label>:937                                     ; preds = %933
  %938 = load i32* @filters, align 4
  %939 = shl i32 %938, 2
  %940 = load i32* %i, align 4
  %941 = load i32* %plen, align 4
  %942 = urem i32 %940, %941
  %943 = zext i32 %942 to i64
  %944 = getelementptr inbounds [16 x i8]* %cfa_pat, i32 0, i64 %943
  %945 = load i8* %944, align 1
  %946 = zext i8 %945 to i64
  %947 = getelementptr inbounds [256 x i8]* %tab, i32 0, i64 %946
  %948 = load i8* %947, align 1
  %949 = zext i8 %948 to i32
  %950 = or i32 %939, %949
  store i32 %950, i32* @filters, align 4
  br label %933

; <label>:951                                     ; preds = %933
  br label %1153

; <label>:952                                     ; preds = %52
  %953 = call zeroext i16 @get2()
  %954 = zext i16 %953 to i32
  %955 = icmp eq i32 %954, 2
  br i1 %955, label %956, label %957

; <label>:956                                     ; preds = %952
  store i16 1, i16* @fuji_width, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %957

; <label>:957                                     ; preds = %956, %952
  br label %1153

; <label>:958                                     ; preds = %52, %52
  %959 = load i32* %len, align 4
  call void @linear_table(i32 %959)
  br label %1153

; <label>:960                                     ; preds = %52, %52, %52
  store i32 0, i32* %i, align 4
  store double 0.000000e+00, double* %dblack, align 8
  br label %961

; <label>:961                                     ; preds = %970, %960
  %962 = load i32* %i, align 4
  %963 = load i32* %len, align 4
  %964 = icmp ult i32 %962, %963
  br i1 %964, label %965, label %973

; <label>:965                                     ; preds = %961
  %966 = load i32* %type, align 4
  %967 = call double @getreal(i32 %966)
  %968 = load double* %dblack, align 8
  %969 = fadd double %968, %967
  store double %969, double* %dblack, align 8
  br label %970

; <label>:970                                     ; preds = %965
  %971 = load i32* %i, align 4
  %972 = add nsw i32 %971, 1
  store i32 %972, i32* %i, align 4
  br label %961

; <label>:973                                     ; preds = %961
  %974 = load double* %dblack, align 8
  %975 = load i32* %len, align 4
  %976 = uitofp i32 %975 to double
  %977 = fdiv double %974, %976
  %978 = fadd double %977, 5.000000e-01
  %979 = load i32* @black, align 4
  %980 = uitofp i32 %979 to double
  %981 = fadd double %980, %978
  %982 = fptoui double %981 to i32
  store i32 %982, i32* @black, align 4
  br label %1153

; <label>:983                                     ; preds = %52
  %984 = load i32* %type, align 4
  %985 = call i32 @getint(i32 %984)
  store i32 %985, i32* @maximum, align 4
  br label %1153

; <label>:986                                     ; preds = %52
  %987 = load i32* %type, align 4
  %988 = call double @getreal(i32 %987)
  store double %988, double* @pixel_aspect, align 8
  %989 = load i32* %type, align 4
  %990 = call double @getreal(i32 %989)
  %991 = load double* @pixel_aspect, align 8
  %992 = fdiv double %991, %990
  store double %992, double* @pixel_aspect, align 8
  br label %1153

; <label>:993                                     ; preds = %52, %52
  store i32 0, i32* %c, align 4
  br label %994

; <label>:994                                     ; preds = %1015, %993
  %995 = load i32* %c, align 4
  %996 = load i32* @colors, align 4
  %997 = icmp slt i32 %995, %996
  br i1 %997, label %998, label %1018

; <label>:998                                     ; preds = %994
  store i32 0, i32* %j, align 4
  br label %999

; <label>:999                                     ; preds = %1011, %998
  %1000 = load i32* %j, align 4
  %1001 = icmp slt i32 %1000, 3
  br i1 %1001, label %1002, label %1014

; <label>:1002                                    ; preds = %999
  %1003 = load i32* %type, align 4
  %1004 = call double @getreal(i32 %1003)
  %1005 = load i32* %j, align 4
  %1006 = sext i32 %1005 to i64
  %1007 = load i32* %c, align 4
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds [4 x [3 x double]]* %cm, i32 0, i64 %1008
  %1010 = getelementptr inbounds [3 x double]* %1009, i32 0, i64 %1006
  store double %1004, double* %1010, align 8
  br label %1011

; <label>:1011                                    ; preds = %1002
  %1012 = load i32* %j, align 4
  %1013 = add nsw i32 %1012, 1
  store i32 %1013, i32* %j, align 4
  br label %999

; <label>:1014                                    ; preds = %999
  br label %1015

; <label>:1015                                    ; preds = %1014
  %1016 = load i32* %c, align 4
  %1017 = add nsw i32 %1016, 1
  store i32 %1017, i32* %c, align 4
  br label %994

; <label>:1018                                    ; preds = %994
  store i32 1, i32* %use_cm, align 4
  br label %1153

; <label>:1019                                    ; preds = %52, %52
  store i32 0, i32* %i, align 4
  br label %1020

; <label>:1020                                    ; preds = %1042, %1019
  %1021 = load i32* %i, align 4
  %1022 = load i32* @colors, align 4
  %1023 = icmp slt i32 %1021, %1022
  br i1 %1023, label %1024, label %1045

; <label>:1024                                    ; preds = %1020
  store i32 0, i32* %c, align 4
  br label %1025

; <label>:1025                                    ; preds = %1038, %1024
  %1026 = load i32* %c, align 4
  %1027 = load i32* @colors, align 4
  %1028 = icmp slt i32 %1026, %1027
  br i1 %1028, label %1029, label %1041

; <label>:1029                                    ; preds = %1025
  %1030 = load i32* %type, align 4
  %1031 = call double @getreal(i32 %1030)
  %1032 = load i32* %c, align 4
  %1033 = sext i32 %1032 to i64
  %1034 = load i32* %i, align 4
  %1035 = sext i32 %1034 to i64
  %1036 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1035
  %1037 = getelementptr inbounds [4 x double]* %1036, i32 0, i64 %1033
  store double %1031, double* %1037, align 8
  br label %1038

; <label>:1038                                    ; preds = %1029
  %1039 = load i32* %c, align 4
  %1040 = add nsw i32 %1039, 1
  store i32 %1040, i32* %c, align 4
  br label %1025

; <label>:1041                                    ; preds = %1025
  br label %1042

; <label>:1042                                    ; preds = %1041
  %1043 = load i32* %i, align 4
  %1044 = add nsw i32 %1043, 1
  store i32 %1044, i32* %i, align 4
  br label %1020

; <label>:1045                                    ; preds = %1020
  br label %1046

; <label>:1046                                    ; preds = %52, %1045
  store i32 0, i32* %c, align 4
  br label %1047

; <label>:1047                                    ; preds = %1057, %1046
  %1048 = load i32* %c, align 4
  %1049 = load i32* @colors, align 4
  %1050 = icmp slt i32 %1048, %1049
  br i1 %1050, label %1051, label %1060

; <label>:1051                                    ; preds = %1047
  %1052 = load i32* %type, align 4
  %1053 = call double @getreal(i32 %1052)
  %1054 = load i32* %c, align 4
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds [4 x double]* %ab, i32 0, i64 %1055
  store double %1053, double* %1056, align 8
  br label %1057

; <label>:1057                                    ; preds = %1051
  %1058 = load i32* %c, align 4
  %1059 = add nsw i32 %1058, 1
  store i32 %1059, i32* %c, align 4
  br label %1047

; <label>:1060                                    ; preds = %1047
  br label %1153

; <label>:1061                                    ; preds = %52
  store i32 0, i32* %c, align 4
  br label %1062

; <label>:1062                                    ; preds = %1072, %1061
  %1063 = load i32* %c, align 4
  %1064 = load i32* @colors, align 4
  %1065 = icmp slt i32 %1063, %1064
  br i1 %1065, label %1066, label %1075

; <label>:1066                                    ; preds = %1062
  %1067 = load i32* %type, align 4
  %1068 = call double @getreal(i32 %1067)
  %1069 = load i32* %c, align 4
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds [4 x double]* %asn, i32 0, i64 %1070
  store double %1068, double* %1071, align 8
  br label %1072

; <label>:1072                                    ; preds = %1066
  %1073 = load i32* %c, align 4
  %1074 = add nsw i32 %1073, 1
  store i32 %1074, i32* %c, align 4
  br label %1062

; <label>:1075                                    ; preds = %1062
  br label %1153

; <label>:1076                                    ; preds = %52
  %1077 = load i32* %type, align 4
  %1078 = call double @getreal(i32 %1077)
  %1079 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 0
  store double %1078, double* %1079, align 8
  %1080 = load i32* %type, align 4
  %1081 = call double @getreal(i32 %1080)
  %1082 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 1
  store double %1081, double* %1082, align 8
  %1083 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 0
  %1084 = load double* %1083, align 8
  %1085 = fsub double 1.000000e+00, %1084
  %1086 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 1
  %1087 = load double* %1086, align 8
  %1088 = fsub double %1085, %1087
  %1089 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 2
  store double %1088, double* %1089, align 8
  store i32 0, i32* %c, align 4
  br label %1090

; <label>:1090                                    ; preds = %1104, %1076
  %1091 = load i32* %c, align 4
  %1092 = icmp slt i32 %1091, 3
  br i1 %1092, label %1093, label %1107

; <label>:1093                                    ; preds = %1090
  %1094 = load i32* %c, align 4
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds [3 x float]* @d65_white, i32 0, i64 %1095
  %1097 = load float* %1096, align 4
  %1098 = fpext float %1097 to double
  %1099 = load i32* %c, align 4
  %1100 = sext i32 %1099 to i64
  %1101 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 %1100
  %1102 = load double* %1101, align 8
  %1103 = fdiv double %1102, %1098
  store double %1103, double* %1101, align 8
  br label %1104

; <label>:1104                                    ; preds = %1093
  %1105 = load i32* %c, align 4
  %1106 = add nsw i32 %1105, 1
  store i32 %1106, i32* %c, align 4
  br label %1090

; <label>:1107                                    ; preds = %1090
  br label %1153

; <label>:1108                                    ; preds = %52
  %1109 = load i32* @dng_version, align 4
  %1110 = icmp ne i32 %1109, 0
  br i1 %1110, label %1111, label %1112

; <label>:1111                                    ; preds = %1108
  br label %1153

; <label>:1112                                    ; preds = %1108
  %1113 = call i32 @get4()
  %1114 = load i32* %2, align 4
  %1115 = add i32 %1113, %1114
  store i32 %1115, i32* %j, align 4
  call void @parse_minolta(i32 %1115)
  %1116 = load %struct._IO_FILE** @ifp, align 8
  %1117 = load i32* %j, align 4
  %1118 = sext i32 %1117 to i64
  %1119 = call i32 @fseek(%struct._IO_FILE* %1116, i64 %1118, i32 0)
  %1120 = load i32* %2, align 4
  %1121 = call i32 @parse_tiff_ifd(i32 %1120)
  br label %1153

; <label>:1122                                    ; preds = %52
  call void @read_shorts(i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i32 0), i32 3)
  br label %1153

; <label>:1123                                    ; preds = %52
  %1124 = load i32* %type, align 4
  %1125 = call i32 @getint(i32 %1124)
  %1126 = trunc i32 %1125 to i16
  store i16 %1126, i16* @top_margin, align 2
  %1127 = load i32* %type, align 4
  %1128 = call i32 @getint(i32 %1127)
  %1129 = trunc i32 %1128 to i16
  store i16 %1129, i16* @left_margin, align 2
  %1130 = load i32* %type, align 4
  %1131 = call i32 @getint(i32 %1130)
  %1132 = load i16* @top_margin, align 2
  %1133 = zext i16 %1132 to i32
  %1134 = sub i32 %1131, %1133
  %1135 = trunc i32 %1134 to i16
  store i16 %1135, i16* @height, align 2
  %1136 = load i32* %type, align 4
  %1137 = call i32 @getint(i32 %1136)
  %1138 = load i16* @left_margin, align 2
  %1139 = zext i16 %1138 to i32
  %1140 = sub i32 %1137, %1139
  %1141 = trunc i32 %1140 to i16
  store i16 %1141, i16* @width, align 2
  br label %1153

; <label>:1142                                    ; preds = %52
  %1143 = load %struct._IO_FILE** @ifp, align 8
  %1144 = call i32 @fseek(%struct._IO_FILE* %1143, i64 16, i32 1)
  %1145 = call i32 @get4()
  %1146 = zext i32 %1145 to i64
  store i64 %1146, i64* @data_offset, align 8
  %1147 = load %struct._IO_FILE** @ifp, align 8
  %1148 = call i32 @fseek(%struct._IO_FILE* %1147, i64 28, i32 1)
  %1149 = call i32 @get4()
  %1150 = zext i32 %1149 to i64
  %1151 = load i64* @data_offset, align 8
  %1152 = add nsw i64 %1151, %1150
  store i64 %1152, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1153

; <label>:1153                                    ; preds = %1142, %52, %1123, %1122, %1112, %1111, %1107, %1075, %1060, %1018, %986, %983, %973, %958, %957, %951, %900, %862, %861, %854, %820, %814, %708, %700, %699, %669, %665, %663, %659, %651, %643, %641, %636, %569, %561, %540, %536, %528, %475, %474, %457, %436, %434, %432, %430, %429, %372, %371, %339, %328, %306, %303, %300, %299, %298, %264, %256, %243, %242, %180, %174, %171, %168, %161, %154, %141, %134, %127, %122, %121, %109, %93, %80, %79, %72
  %1154 = load %struct._IO_FILE** @ifp, align 8
  %1155 = load i32* %save, align 4
  %1156 = zext i32 %1155 to i64
  %1157 = call i32 @fseek(%struct._IO_FILE* %1154, i64 %1156, i32 0)
  br label %48

; <label>:1158                                    ; preds = %48
  %1159 = load i32* %sony_length, align 4
  %1160 = icmp ne i32 %1159, 0
  br i1 %1160, label %1161, label %1203

; <label>:1161                                    ; preds = %1158
  %1162 = load i32* %sony_length, align 4
  %1163 = zext i32 %1162 to i64
  %1164 = call noalias i8* @malloc(i64 %1163) #4
  %1165 = bitcast i8* %1164 to i32*
  store i32* %1165, i32** %buf, align 8
  %1166 = icmp ne i32* %1165, null
  br i1 %1166, label %1167, label %1203

; <label>:1167                                    ; preds = %1161
  %1168 = load %struct._IO_FILE** @ifp, align 8
  %1169 = load i32* %sony_offset, align 4
  %1170 = zext i32 %1169 to i64
  %1171 = call i32 @fseek(%struct._IO_FILE* %1168, i64 %1170, i32 0)
  %1172 = load i32** %buf, align 8
  %1173 = bitcast i32* %1172 to i8*
  %1174 = load i32* %sony_length, align 4
  %1175 = zext i32 %1174 to i64
  %1176 = load %struct._IO_FILE** @ifp, align 8
  %1177 = call i64 @fread(i8* %1173, i64 %1175, i64 1, %struct._IO_FILE* %1176)
  %1178 = load i32** %buf, align 8
  %1179 = load i32* %sony_length, align 4
  %1180 = udiv i32 %1179, 4
  %1181 = load i32* %sony_key, align 4
  call void @sony_decrypt(i32* %1178, i32 %1180, i32 1, i32 %1181)
  %1182 = load %struct._IO_FILE** @ifp, align 8
  store %struct._IO_FILE* %1182, %struct._IO_FILE** %sfp, align 8
  %1183 = call %struct._IO_FILE* @tmpfile()
  store %struct._IO_FILE* %1183, %struct._IO_FILE** @ifp, align 8
  %1184 = icmp ne %struct._IO_FILE* %1183, null
  br i1 %1184, label %1185, label %1199

; <label>:1185                                    ; preds = %1167
  %1186 = load i32** %buf, align 8
  %1187 = bitcast i32* %1186 to i8*
  %1188 = load i32* %sony_length, align 4
  %1189 = zext i32 %1188 to i64
  %1190 = load %struct._IO_FILE** @ifp, align 8
  %1191 = call i64 @fwrite(i8* %1187, i64 %1189, i64 1, %struct._IO_FILE* %1190)
  %1192 = load %struct._IO_FILE** @ifp, align 8
  %1193 = call i32 @fseek(%struct._IO_FILE* %1192, i64 0, i32 0)
  %1194 = load i32* %sony_offset, align 4
  %1195 = sub i32 0, %1194
  %1196 = call i32 @parse_tiff_ifd(i32 %1195)
  %1197 = load %struct._IO_FILE** @ifp, align 8
  %1198 = call i32 @fclose(%struct._IO_FILE* %1197)
  br label %1199

; <label>:1199                                    ; preds = %1185, %1167
  %1200 = load %struct._IO_FILE** %sfp, align 8
  store %struct._IO_FILE* %1200, %struct._IO_FILE** @ifp, align 8
  %1201 = load i32** %buf, align 8
  %1202 = bitcast i32* %1201 to i8*
  call void @free(i8* %1202) #4
  br label %1203

; <label>:1203                                    ; preds = %1199, %1161, %1158
  store i32 0, i32* %i, align 4
  br label %1204

; <label>:1204                                    ; preds = %1230, %1203
  %1205 = load i32* %i, align 4
  %1206 = load i32* @colors, align 4
  %1207 = icmp slt i32 %1205, %1206
  br i1 %1207, label %1208, label %1233

; <label>:1208                                    ; preds = %1204
  store i32 0, i32* %c, align 4
  br label %1209

; <label>:1209                                    ; preds = %1226, %1208
  %1210 = load i32* %c, align 4
  %1211 = load i32* @colors, align 4
  %1212 = icmp slt i32 %1210, %1211
  br i1 %1212, label %1213, label %1229

; <label>:1213                                    ; preds = %1209
  %1214 = load i32* %i, align 4
  %1215 = sext i32 %1214 to i64
  %1216 = getelementptr inbounds [4 x double]* %ab, i32 0, i64 %1215
  %1217 = load double* %1216, align 8
  %1218 = load i32* %c, align 4
  %1219 = sext i32 %1218 to i64
  %1220 = load i32* %i, align 4
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1221
  %1223 = getelementptr inbounds [4 x double]* %1222, i32 0, i64 %1219
  %1224 = load double* %1223, align 8
  %1225 = fmul double %1224, %1217
  store double %1225, double* %1223, align 8
  br label %1226

; <label>:1226                                    ; preds = %1213
  %1227 = load i32* %c, align 4
  %1228 = add nsw i32 %1227, 1
  store i32 %1228, i32* %c, align 4
  br label %1209

; <label>:1229                                    ; preds = %1209
  br label %1230

; <label>:1230                                    ; preds = %1229
  %1231 = load i32* %i, align 4
  %1232 = add nsw i32 %1231, 1
  store i32 %1232, i32* %i, align 4
  br label %1204

; <label>:1233                                    ; preds = %1204
  %1234 = load i32* %use_cm, align 4
  %1235 = icmp ne i32 %1234, 0
  br i1 %1235, label %1236, label %1298

; <label>:1236                                    ; preds = %1233
  store i32 0, i32* %c, align 4
  br label %1237

; <label>:1237                                    ; preds = %1293, %1236
  %1238 = load i32* %c, align 4
  %1239 = load i32* @colors, align 4
  %1240 = icmp slt i32 %1238, %1239
  br i1 %1240, label %1241, label %1296

; <label>:1241                                    ; preds = %1237
  store i32 0, i32* %i, align 4
  br label %1242

; <label>:1242                                    ; preds = %1289, %1241
  %1243 = load i32* %i, align 4
  %1244 = icmp slt i32 %1243, 3
  br i1 %1244, label %1245, label %1292

; <label>:1245                                    ; preds = %1242
  store i32 0, i32* %j, align 4
  %1246 = load i32* %i, align 4
  %1247 = sext i32 %1246 to i64
  %1248 = load i32* %c, align 4
  %1249 = sext i32 %1248 to i64
  %1250 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i64 %1249
  %1251 = getelementptr inbounds [3 x double]* %1250, i32 0, i64 %1247
  store double 0.000000e+00, double* %1251, align 8
  br label %1252

; <label>:1252                                    ; preds = %1285, %1245
  %1253 = load i32* %j, align 4
  %1254 = load i32* @colors, align 4
  %1255 = icmp slt i32 %1253, %1254
  br i1 %1255, label %1256, label %1288

; <label>:1256                                    ; preds = %1252
  %1257 = load i32* %j, align 4
  %1258 = sext i32 %1257 to i64
  %1259 = load i32* %c, align 4
  %1260 = sext i32 %1259 to i64
  %1261 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1260
  %1262 = getelementptr inbounds [4 x double]* %1261, i32 0, i64 %1258
  %1263 = load double* %1262, align 8
  %1264 = load i32* %i, align 4
  %1265 = sext i32 %1264 to i64
  %1266 = load i32* %j, align 4
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds [4 x [3 x double]]* %cm, i32 0, i64 %1267
  %1269 = getelementptr inbounds [3 x double]* %1268, i32 0, i64 %1265
  %1270 = load double* %1269, align 8
  %1271 = fmul double %1263, %1270
  %1272 = load i32* %i, align 4
  %1273 = sext i32 %1272 to i64
  %1274 = getelementptr inbounds [3 x double]* %xyz, i32 0, i64 %1273
  %1275 = load double* %1274, align 8
  %1276 = fmul double %1271, %1275
  %1277 = load i32* %i, align 4
  %1278 = sext i32 %1277 to i64
  %1279 = load i32* %c, align 4
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i64 %1280
  %1282 = getelementptr inbounds [3 x double]* %1281, i32 0, i64 %1278
  %1283 = load double* %1282, align 8
  %1284 = fadd double %1283, %1276
  store double %1284, double* %1282, align 8
  br label %1285

; <label>:1285                                    ; preds = %1256
  %1286 = load i32* %j, align 4
  %1287 = add nsw i32 %1286, 1
  store i32 %1287, i32* %j, align 4
  br label %1252

; <label>:1288                                    ; preds = %1252
  br label %1289

; <label>:1289                                    ; preds = %1288
  %1290 = load i32* %i, align 4
  %1291 = add nsw i32 %1290, 1
  store i32 %1291, i32* %i, align 4
  br label %1242

; <label>:1292                                    ; preds = %1242
  br label %1293

; <label>:1293                                    ; preds = %1292
  %1294 = load i32* %c, align 4
  %1295 = add nsw i32 %1294, 1
  store i32 %1295, i32* %c, align 4
  br label %1237

; <label>:1296                                    ; preds = %1237
  %1297 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i32 0
  call void @cam_xyz_coeff([3 x double]* %1297)
  br label %1298

; <label>:1298                                    ; preds = %1296, %1233
  %1299 = getelementptr inbounds [4 x double]* %asn, i32 0, i64 0
  %1300 = load double* %1299, align 8
  %1301 = fcmp une double %1300, 0.000000e+00
  br i1 %1301, label %1302, label %1321

; <label>:1302                                    ; preds = %1298
  store float 0.000000e+00, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 3), align 4
  store i32 0, i32* %c, align 4
  br label %1303

; <label>:1303                                    ; preds = %1317, %1302
  %1304 = load i32* %c, align 4
  %1305 = load i32* @colors, align 4
  %1306 = icmp slt i32 %1304, %1305
  br i1 %1306, label %1307, label %1320

; <label>:1307                                    ; preds = %1303
  %1308 = load i32* %c, align 4
  %1309 = sext i32 %1308 to i64
  %1310 = getelementptr inbounds [4 x double]* %asn, i32 0, i64 %1309
  %1311 = load double* %1310, align 8
  %1312 = fdiv double 1.000000e+00, %1311
  %1313 = fptrunc double %1312 to float
  %1314 = load i32* %c, align 4
  %1315 = sext i32 %1314 to i64
  %1316 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %1315
  store float %1313, float* %1316, align 4
  br label %1317

; <label>:1317                                    ; preds = %1307
  %1318 = load i32* %c, align 4
  %1319 = add nsw i32 %1318, 1
  store i32 %1319, i32* %c, align 4
  br label %1303

; <label>:1320                                    ; preds = %1303
  br label %1321

; <label>:1321                                    ; preds = %1320, %1298
  %1322 = load i32* %use_cm, align 4
  %1323 = icmp ne i32 %1322, 0
  br i1 %1323, label %1348, label %1324

; <label>:1324                                    ; preds = %1321
  store i32 0, i32* %c, align 4
  br label %1325

; <label>:1325                                    ; preds = %1344, %1324
  %1326 = load i32* %c, align 4
  %1327 = load i32* @colors, align 4
  %1328 = icmp slt i32 %1326, %1327
  br i1 %1328, label %1329, label %1347

; <label>:1329                                    ; preds = %1325
  %1330 = load i32* %c, align 4
  %1331 = sext i32 %1330 to i64
  %1332 = load i32* %c, align 4
  %1333 = sext i32 %1332 to i64
  %1334 = getelementptr inbounds [4 x [4 x double]]* %cc, i32 0, i64 %1333
  %1335 = getelementptr inbounds [4 x double]* %1334, i32 0, i64 %1331
  %1336 = load double* %1335, align 8
  %1337 = load i32* %c, align 4
  %1338 = sext i32 %1337 to i64
  %1339 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %1338
  %1340 = load float* %1339, align 4
  %1341 = fpext float %1340 to double
  %1342 = fdiv double %1341, %1336
  %1343 = fptrunc double %1342 to float
  store float %1343, float* %1339, align 4
  br label %1344

; <label>:1344                                    ; preds = %1329
  %1345 = load i32* %c, align 4
  %1346 = add nsw i32 %1345, 1
  store i32 %1346, i32* %c, align 4
  br label %1325

; <label>:1347                                    ; preds = %1325
  br label %1348

; <label>:1348                                    ; preds = %1347, %1321
  store i32 0, i32* %1
  br label %1349

; <label>:1349                                    ; preds = %1348, %46, %11
  %1350 = load i32* %1
  ret i32 %1350
}

; Function Attrs: nounwind uwtable
define void @get_timestamp(i32 %reversed) #0 {
  %1 = alloca i32, align 4
  %t = alloca %struct.tm, align 8
  %str = alloca [20 x i8], align 16
  %i = alloca i32, align 4
  store i32 %reversed, i32* %1, align 4
  %2 = getelementptr inbounds [20 x i8]* %str, i32 0, i64 19
  store i8 0, i8* %2, align 1
  %3 = load i32* %1, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %18

; <label>:5                                       ; preds = %0
  store i32 19, i32* %i, align 4
  br label %6

; <label>:6                                       ; preds = %10, %5
  %7 = load i32* %i, align 4
  %8 = add nsw i32 %7, -1
  store i32 %8, i32* %i, align 4
  %9 = icmp ne i32 %7, 0
  br i1 %9, label %10, label %17

; <label>:10                                      ; preds = %6
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = call i32 @getc_unlocked(%struct._IO_FILE* %11)
  %13 = trunc i32 %12 to i8
  %14 = load i32* %i, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [20 x i8]* %str, i32 0, i64 %15
  store i8 %13, i8* %16, align 1
  br label %6

; <label>:17                                      ; preds = %6
  br label %22

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds [20 x i8]* %str, i32 0, i32 0
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i64 @fread(i8* %19, i64 19, i64 1, %struct._IO_FILE* %20)
  br label %22

; <label>:22                                      ; preds = %18, %17
  %23 = bitcast %struct.tm* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 56, i32 8, i1 false)
  %24 = getelementptr inbounds [20 x i8]* %str, i32 0, i32 0
  %25 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %26 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %27 = getelementptr inbounds %struct.tm* %t, i32 0, i32 3
  %28 = getelementptr inbounds %struct.tm* %t, i32 0, i32 2
  %29 = getelementptr inbounds %struct.tm* %t, i32 0, i32 1
  %30 = getelementptr inbounds %struct.tm* %t, i32 0, i32 0
  %31 = call i32 (i8*, i8*, ...)* @sscanf(i8* %24, i8* getelementptr inbounds ([18 x i8]* @.str108, i32 0, i32 0), i32* %25, i32* %26, i32* %27, i32* %28, i32* %29, i32* %30) #4
  %32 = icmp ne i32 %31, 6
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %22
  br label %45

; <label>:34                                      ; preds = %22
  %35 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %36 = load i32* %35, align 4
  %37 = sub nsw i32 %36, 1900
  store i32 %37, i32* %35, align 4
  %38 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %39 = load i32* %38, align 4
  %40 = sub nsw i32 %39, 1
  store i32 %40, i32* %38, align 4
  %41 = call i64 @mktime(%struct.tm* %t) #4
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %43, label %45

; <label>:43                                      ; preds = %34
  %44 = call i64 @mktime(%struct.tm* %t) #4
  store i64 %44, i64* @timestamp, align 8
  br label %45

; <label>:45                                      ; preds = %33, %43, %34
  ret void
}

; Function Attrs: nounwind
declare i64 @mktime(%struct.tm*) #3

; Function Attrs: nounwind uwtable
define void @parse_exif(i32 %base) #0 {
  %1 = alloca i32, align 4
  %kodak = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %c = alloca i32, align 4
  %expo = alloca double, align 8
  store i32 %base, i32* %1, align 4
  %2 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str109, i32 0, i32 0), i64 7) #10
  %3 = icmp ne i32 %2, 0
  %4 = xor i1 %3, true
  %5 = zext i1 %4 to i32
  store i32 %5, i32* %kodak, align 4
  %6 = call zeroext i16 @get2()
  %7 = zext i16 %6 to i32
  store i32 %7, i32* %entries, align 4
  br label %8

; <label>:8                                       ; preds = %83, %0
  %9 = load i32* %entries, align 4
  %10 = add i32 %9, -1
  store i32 %10, i32* %entries, align 4
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %88

; <label>:12                                      ; preds = %8
  %13 = load i32* %1, align 4
  call void @tiff_get(i32 %13, i32* %tag, i32* %type, i32* %len, i32* %save)
  %14 = load i32* %tag, align 4
  switch i32 %14, label %83 [
    i32 33434, label %15
    i32 33437, label %19
    i32 34855, label %23
    i32 36867, label %26
    i32 36868, label %26
    i32 37377, label %27
    i32 37378, label %37
    i32 37386, label %43
    i32 37500, label %47
    i32 40962, label %49
    i32 40963, label %56
    i32 41730, label %63
  ]

; <label>:15                                      ; preds = %12
  %16 = load i32* %type, align 4
  %17 = call double @getreal(i32 %16)
  %18 = fptrunc double %17 to float
  store float %18, float* @shutter, align 4
  br label %83

; <label>:19                                      ; preds = %12
  %20 = load i32* %type, align 4
  %21 = call double @getreal(i32 %20)
  %22 = fptrunc double %21 to float
  store float %22, float* @aperture, align 4
  br label %83

; <label>:23                                      ; preds = %12
  %24 = call zeroext i16 @get2()
  %25 = uitofp i16 %24 to float
  store float %25, float* @iso_speed, align 4
  br label %83

; <label>:26                                      ; preds = %12, %12
  call void @get_timestamp(i32 0)
  br label %83

; <label>:27                                      ; preds = %12
  %28 = load i32* %type, align 4
  %29 = call double @getreal(i32 %28)
  %30 = fsub double -0.000000e+00, %29
  store double %30, double* %expo, align 8
  %31 = fcmp olt double %30, 1.280000e+02
  br i1 %31, label %32, label %36

; <label>:32                                      ; preds = %27
  %33 = load double* %expo, align 8
  %34 = call double @pow(double 2.000000e+00, double %33) #4
  %35 = fptrunc double %34 to float
  store float %35, float* @shutter, align 4
  br label %36

; <label>:36                                      ; preds = %32, %27
  br label %83

; <label>:37                                      ; preds = %12
  %38 = load i32* %type, align 4
  %39 = call double @getreal(i32 %38)
  %40 = fdiv double %39, 2.000000e+00
  %41 = call double @pow(double 2.000000e+00, double %40) #4
  %42 = fptrunc double %41 to float
  store float %42, float* @aperture, align 4
  br label %83

; <label>:43                                      ; preds = %12
  %44 = load i32* %type, align 4
  %45 = call double @getreal(i32 %44)
  %46 = fptrunc double %45 to float
  store float %46, float* @focal_len, align 4
  br label %83

; <label>:47                                      ; preds = %12
  %48 = load i32* %1, align 4
  call void @parse_makernote(i32 %48, i32 0)
  br label %83

; <label>:49                                      ; preds = %12
  %50 = load i32* %kodak, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %55

; <label>:52                                      ; preds = %49
  %53 = call i32 @get4()
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* @raw_width, align 2
  br label %55

; <label>:55                                      ; preds = %52, %49
  br label %83

; <label>:56                                      ; preds = %12
  %57 = load i32* %kodak, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %62

; <label>:59                                      ; preds = %56
  %60 = call i32 @get4()
  %61 = trunc i32 %60 to i16
  store i16 %61, i16* @raw_height, align 2
  br label %62

; <label>:62                                      ; preds = %59, %56
  br label %83

; <label>:63                                      ; preds = %12
  %64 = call i32 @get4()
  %65 = icmp eq i32 %64, 131074
  br i1 %65, label %66, label %82

; <label>:66                                      ; preds = %63
  store i32 0, i32* %c, align 4
  store i32 0, i32* @exif_cfa, align 4
  br label %67

; <label>:67                                      ; preds = %78, %66
  %68 = load i32* %c, align 4
  %69 = icmp ult i32 %68, 8
  br i1 %69, label %70, label %81

; <label>:70                                      ; preds = %67
  %71 = load %struct._IO_FILE** @ifp, align 8
  %72 = call i32 @getc_unlocked(%struct._IO_FILE* %71)
  %73 = mul nsw i32 %72, 16843009
  %74 = load i32* %c, align 4
  %75 = shl i32 %73, %74
  %76 = load i32* @exif_cfa, align 4
  %77 = or i32 %76, %75
  store i32 %77, i32* @exif_cfa, align 4
  br label %78

; <label>:78                                      ; preds = %70
  %79 = load i32* %c, align 4
  %80 = add i32 %79, 2
  store i32 %80, i32* %c, align 4
  br label %67

; <label>:81                                      ; preds = %67
  br label %82

; <label>:82                                      ; preds = %81, %63
  br label %83

; <label>:83                                      ; preds = %82, %12, %62, %55, %47, %43, %37, %36, %26, %23, %19, %15
  %84 = load %struct._IO_FILE** @ifp, align 8
  %85 = load i32* %save, align 4
  %86 = zext i32 %85 to i64
  %87 = call i32 @fseek(%struct._IO_FILE* %84, i64 %86, i32 0)
  br label %8

; <label>:88                                      ; preds = %8
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_gps(i32 %base) #0 {
  %1 = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %base, i32* %1, align 4
  %2 = call zeroext i16 @get2()
  %3 = zext i16 %2 to i32
  store i32 %3, i32* %entries, align 4
  br label %4

; <label>:4                                       ; preds = %65, %0
  %5 = load i32* %entries, align 4
  %6 = add i32 %5, -1
  store i32 %6, i32* %entries, align 4
  %7 = icmp ne i32 %5, 0
  br i1 %7, label %8, label %70

; <label>:8                                       ; preds = %4
  %9 = load i32* %1, align 4
  call void @tiff_get(i32 %9, i32* %tag, i32* %type, i32* %len, i32* %save)
  %10 = load i32* %tag, align 4
  switch i32 %10, label %65 [
    i32 1, label %11
    i32 3, label %11
    i32 5, label %11
    i32 2, label %19
    i32 4, label %19
    i32 7, label %19
    i32 6, label %36
    i32 18, label %50
    i32 29, label %50
  ]

; <label>:11                                      ; preds = %8, %8, %8
  %12 = load %struct._IO_FILE** @ifp, align 8
  %13 = call i32 @_IO_getc(%struct._IO_FILE* %12)
  %14 = load i32* %tag, align 4
  %15 = udiv i32 %14, 2
  %16 = add i32 29, %15
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [32 x i32]* @gpsdata, i32 0, i64 %17
  store i32 %13, i32* %18, align 4
  br label %65

; <label>:19                                      ; preds = %8, %8, %8
  store i32 0, i32* %c, align 4
  br label %20

; <label>:20                                      ; preds = %32, %19
  %21 = load i32* %c, align 4
  %22 = icmp ult i32 %21, 6
  br i1 %22, label %23, label %35

; <label>:23                                      ; preds = %20
  %24 = call i32 @get4()
  %25 = load i32* %tag, align 4
  %26 = udiv i32 %25, 3
  %27 = mul i32 %26, 6
  %28 = load i32* %c, align 4
  %29 = add i32 %27, %28
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [32 x i32]* @gpsdata, i32 0, i64 %30
  store i32 %24, i32* %31, align 4
  br label %32

; <label>:32                                      ; preds = %23
  %33 = load i32* %c, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %c, align 4
  br label %20

; <label>:35                                      ; preds = %20
  br label %65

; <label>:36                                      ; preds = %8
  store i32 0, i32* %c, align 4
  br label %37

; <label>:37                                      ; preds = %46, %36
  %38 = load i32* %c, align 4
  %39 = icmp ult i32 %38, 2
  br i1 %39, label %40, label %49

; <label>:40                                      ; preds = %37
  %41 = call i32 @get4()
  %42 = load i32* %c, align 4
  %43 = add i32 18, %42
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [32 x i32]* @gpsdata, i32 0, i64 %44
  store i32 %41, i32* %45, align 4
  br label %46

; <label>:46                                      ; preds = %40
  %47 = load i32* %c, align 4
  %48 = add i32 %47, 1
  store i32 %48, i32* %c, align 4
  br label %37

; <label>:49                                      ; preds = %37
  br label %65

; <label>:50                                      ; preds = %8, %8
  %51 = load i32* %tag, align 4
  %52 = udiv i32 %51, 3
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 14), i64 %53
  %55 = bitcast i32* %54 to i8*
  %56 = load i32* %len, align 4
  %57 = icmp ult i32 %56, 12
  br i1 %57, label %58, label %60

; <label>:58                                      ; preds = %50
  %59 = load i32* %len, align 4
  br label %61

; <label>:60                                      ; preds = %50
  br label %61

; <label>:61                                      ; preds = %60, %58
  %62 = phi i32 [ %59, %58 ], [ 12, %60 ]
  %63 = load %struct._IO_FILE** @ifp, align 8
  %64 = call i8* @fgets(i8* %55, i32 %62, %struct._IO_FILE* %63)
  br label %65

; <label>:65                                      ; preds = %61, %8, %49, %35, %11
  %66 = load %struct._IO_FILE** @ifp, align 8
  %67 = load i32* %save, align 4
  %68 = zext i32 %67 to i64
  %69 = call i32 @fseek(%struct._IO_FILE* %66, i64 %68, i32 0)
  br label %4

; <label>:70                                      ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define void @romm_coeff([3 x float]* %romm_cam) #0 {
  %1 = alloca [3 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store [3 x float]* %romm_cam, [3 x float]** %1, align 8
  store i32 0, i32* %i, align 4
  br label %2

; <label>:2                                       ; preds = %52, %0
  %3 = load i32* %i, align 4
  %4 = icmp slt i32 %3, 3
  br i1 %4, label %5, label %55

; <label>:5                                       ; preds = %2
  store i32 0, i32* %j, align 4
  br label %6

; <label>:6                                       ; preds = %48, %5
  %7 = load i32* %j, align 4
  %8 = icmp slt i32 %7, 3
  br i1 %8, label %9, label %51

; <label>:9                                       ; preds = %6
  store i32 0, i32* %k, align 4
  %10 = load i32* %j, align 4
  %11 = sext i32 %10 to i64
  %12 = load i32* %i, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %13
  %15 = getelementptr inbounds [4 x float]* %14, i32 0, i64 %11
  store float 0.000000e+00, float* %15, align 4
  br label %16

; <label>:16                                      ; preds = %44, %9
  %17 = load i32* %k, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %47

; <label>:19                                      ; preds = %16
  %20 = load i32* %k, align 4
  %21 = sext i32 %20 to i64
  %22 = load i32* %i, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [3 x [3 x float]]* @romm_coeff.rgb_romm, i32 0, i64 %23
  %25 = getelementptr inbounds [3 x float]* %24, i32 0, i64 %21
  %26 = load float* %25, align 4
  %27 = load i32* %j, align 4
  %28 = sext i32 %27 to i64
  %29 = load i32* %k, align 4
  %30 = sext i32 %29 to i64
  %31 = load [3 x float]** %1, align 8
  %32 = getelementptr inbounds [3 x float]* %31, i64 %30
  %33 = getelementptr inbounds [3 x float]* %32, i32 0, i64 %28
  %34 = load float* %33, align 4
  %35 = fmul float %26, %34
  %36 = load i32* %j, align 4
  %37 = sext i32 %36 to i64
  %38 = load i32* %i, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %39
  %41 = getelementptr inbounds [4 x float]* %40, i32 0, i64 %37
  %42 = load float* %41, align 4
  %43 = fadd float %42, %35
  store float %43, float* %41, align 4
  br label %44

; <label>:44                                      ; preds = %19
  %45 = load i32* %k, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %k, align 4
  br label %16

; <label>:47                                      ; preds = %16
  br label %48

; <label>:48                                      ; preds = %47
  %49 = load i32* %j, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %j, align 4
  br label %6

; <label>:51                                      ; preds = %6
  br label %52

; <label>:52                                      ; preds = %51
  %53 = load i32* %i, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %i, align 4
  br label %2

; <label>:55                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_mos(i32 %offset) #0 {
  %1 = alloca i32, align 4
  %data = alloca [40 x i8], align 16
  %skip = alloca i32, align 4
  %from = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %neut = alloca [4 x i32], align 16
  %planes = alloca i32, align 4
  %frot = alloca i32, align 4
  %romm_cam = alloca [3 x [3 x float]], align 16
  store i32 %offset, i32* %1, align 4
  store i32 0, i32* %planes, align 4
  store i32 0, i32* %frot, align 4
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = load i32* %1, align 4
  %4 = sext i32 %3 to i64
  %5 = call i32 @fseek(%struct._IO_FILE* %2, i64 %4, i32 0)
  br label %6

; <label>:6                                       ; preds = %0, %181
  %7 = call i32 @get4()
  %8 = icmp ne i32 %7, 1347114067
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  br label %189

; <label>:10                                      ; preds = %6
  %11 = call i32 @get4()
  %12 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %13 = load %struct._IO_FILE** @ifp, align 8
  %14 = call i64 @fread(i8* %12, i64 1, i64 40, %struct._IO_FILE* %13)
  %15 = call i32 @get4()
  store i32 %15, i32* %skip, align 4
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i64 @ftell(%struct._IO_FILE* %16)
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %from, align 4
  %19 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %20 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([18 x i8]* @.str130, i32 0, i32 0)) #10
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %26, label %22

; <label>:22                                      ; preds = %10
  %23 = load i32* %from, align 4
  %24 = sext i32 %23 to i64
  store i64 %24, i64* @thumb_offset, align 8
  %25 = load i32* %skip, align 4
  store i32 %25, i32* @thumb_length, align 4
  br label %26

; <label>:26                                      ; preds = %22, %10
  %27 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([19 x i8]* @.str131, i32 0, i32 0)) #10
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %34, label %30

; <label>:30                                      ; preds = %26
  %31 = load i32* %from, align 4
  %32 = sext i32 %31 to i64
  store i64 %32, i64* @profile_offset, align 8
  %33 = load i32* %skip, align 4
  store i32 %33, i32* @profile_length, align 4
  br label %34

; <label>:34                                      ; preds = %30, %26
  %35 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %36 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([19 x i8]* @.str132, i32 0, i32 0)) #10
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %51, label %38

; <label>:38                                      ; preds = %34
  %39 = load %struct._IO_FILE** @ifp, align 8
  %40 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %i)
  %41 = load i32* %i, align 4
  %42 = zext i32 %41 to i64
  %43 = icmp ult i64 %42, 21
  br i1 %43, label %44, label %50

; <label>:44                                      ; preds = %38
  %45 = load i32* %i, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [21 x i8*]* @parse_mos.mod, i32 0, i64 %46
  %48 = load i8** %47, align 8
  %49 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %48) #4
  br label %50

; <label>:50                                      ; preds = %44, %38
  br label %51

; <label>:51                                      ; preds = %50, %34
  %52 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %53 = call i32 @strcmp(i8* %52, i8* getelementptr inbounds ([26 x i8]* @.str134, i32 0, i32 0)) #10
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %71, label %55

; <label>:55                                      ; preds = %51
  store i32 0, i32* %i, align 4
  br label %56

; <label>:56                                      ; preds = %66, %55
  %57 = load i32* %i, align 4
  %58 = icmp slt i32 %57, 9
  br i1 %58, label %59, label %69

; <label>:59                                      ; preds = %56
  %60 = call i32 @get4()
  %61 = call float @int_to_float(i32 %60)
  %62 = load i32* %i, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i64 0
  %65 = getelementptr inbounds [3 x float]* %64, i32 0, i64 %63
  store float %61, float* %65, align 4
  br label %66

; <label>:66                                      ; preds = %59
  %67 = load i32* %i, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %i, align 4
  br label %56

; <label>:69                                      ; preds = %56
  %70 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i32 0
  call void @romm_coeff([3 x float]* %70)
  br label %71

; <label>:71                                      ; preds = %69, %51
  %72 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %73 = call i32 @strcmp(i8* %72, i8* getelementptr inbounds ([22 x i8]* @.str135, i32 0, i32 0)) #10
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %91, label %75

; <label>:75                                      ; preds = %71
  store i32 0, i32* %i, align 4
  br label %76

; <label>:76                                      ; preds = %86, %75
  %77 = load i32* %i, align 4
  %78 = icmp slt i32 %77, 9
  br i1 %78, label %79, label %89

; <label>:79                                      ; preds = %76
  %80 = load %struct._IO_FILE** @ifp, align 8
  %81 = load i32* %i, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i64 0
  %84 = getelementptr inbounds [3 x float]* %83, i32 0, i64 %82
  %85 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %80, i8* getelementptr inbounds ([3 x i8]* @.str136, i32 0, i32 0), float* %84)
  br label %86

; <label>:86                                      ; preds = %79
  %87 = load i32* %i, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %i, align 4
  br label %76

; <label>:89                                      ; preds = %76
  %90 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i32 0
  call void @romm_coeff([3 x float]* %90)
  br label %91

; <label>:91                                      ; preds = %89, %71
  %92 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %93 = call i32 @strcmp(i8* %92, i8* getelementptr inbounds ([26 x i8]* @.str137, i32 0, i32 0)) #10
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %98, label %95

; <label>:95                                      ; preds = %91
  %96 = load %struct._IO_FILE** @ifp, align 8
  %97 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %planes)
  br label %98

; <label>:98                                      ; preds = %95, %91
  %99 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %100 = call i32 @strcmp(i8* %99, i8* getelementptr inbounds ([27 x i8]* @.str138, i32 0, i32 0)) #10
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %105, label %102

; <label>:102                                     ; preds = %98
  %103 = load %struct._IO_FILE** @ifp, align 8
  %104 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* @flip)
  br label %105

; <label>:105                                     ; preds = %102, %98
  %106 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %107 = call i32 @strcmp(i8* %106, i8* getelementptr inbounds ([24 x i8]* @.str139, i32 0, i32 0)) #10
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %128, label %109

; <label>:109                                     ; preds = %105
  store i32 0, i32* %c, align 4
  br label %110

; <label>:110                                     ; preds = %124, %109
  %111 = load i32* %c, align 4
  %112 = icmp slt i32 %111, 4
  br i1 %112, label %113, label %127

; <label>:113                                     ; preds = %110
  %114 = load %struct._IO_FILE** @ifp, align 8
  %115 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %114, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %i)
  %116 = load i32* %i, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %123

; <label>:118                                     ; preds = %113
  %119 = load i32* %c, align 4
  %120 = load i32* %c, align 4
  %121 = ashr i32 %120, 1
  %122 = xor i32 %119, %121
  store i32 %122, i32* %frot, align 4
  br label %123

; <label>:123                                     ; preds = %118, %113
  br label %124

; <label>:124                                     ; preds = %123
  %125 = load i32* %c, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %c, align 4
  br label %110

; <label>:127                                     ; preds = %110
  br label %128

; <label>:128                                     ; preds = %127, %105
  %129 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([23 x i8]* @.str140, i32 0, i32 0)) #10
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %138, label %132

; <label>:132                                     ; preds = %128
  %133 = load %struct._IO_FILE** @ifp, align 8
  %134 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %i)
  %135 = load i32* %i, align 4
  %136 = load i32* @flip, align 4
  %137 = sub nsw i32 %135, %136
  store i32 %137, i32* @flip, align 4
  br label %138

; <label>:138                                     ; preds = %132, %128
  %139 = getelementptr inbounds [40 x i8]* %data, i32 0, i32 0
  %140 = call i32 @strcmp(i8* %139, i8* getelementptr inbounds ([17 x i8]* @.str141, i32 0, i32 0)) #10
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %181, label %142

; <label>:142                                     ; preds = %138
  %143 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %144 = fcmp une float %143, 0.000000e+00
  br i1 %144, label %181, label %145

; <label>:145                                     ; preds = %142
  store i32 0, i32* %c, align 4
  br label %146

; <label>:146                                     ; preds = %156, %145
  %147 = load i32* %c, align 4
  %148 = icmp slt i32 %147, 4
  br i1 %148, label %149, label %159

; <label>:149                                     ; preds = %146
  %150 = load %struct._IO_FILE** @ifp, align 8
  %151 = getelementptr inbounds [4 x i32]* %neut, i32 0, i32 0
  %152 = load i32* %c, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i32* %151, i64 %153
  %155 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %150, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32* %154)
  br label %156

; <label>:156                                     ; preds = %149
  %157 = load i32* %c, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %c, align 4
  br label %146

; <label>:159                                     ; preds = %146
  store i32 0, i32* %c, align 4
  br label %160

; <label>:160                                     ; preds = %177, %159
  %161 = load i32* %c, align 4
  %162 = icmp slt i32 %161, 3
  br i1 %162, label %163, label %180

; <label>:163                                     ; preds = %160
  %164 = getelementptr inbounds [4 x i32]* %neut, i32 0, i64 0
  %165 = load i32* %164, align 4
  %166 = sitofp i32 %165 to float
  %167 = load i32* %c, align 4
  %168 = add nsw i32 %167, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [4 x i32]* %neut, i32 0, i64 %169
  %171 = load i32* %170, align 4
  %172 = sitofp i32 %171 to float
  %173 = fdiv float %166, %172
  %174 = load i32* %c, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %175
  store float %173, float* %176, align 4
  br label %177

; <label>:177                                     ; preds = %163
  %178 = load i32* %c, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %c, align 4
  br label %160

; <label>:180                                     ; preds = %160
  br label %181

; <label>:181                                     ; preds = %180, %142, %138
  %182 = load i32* %from, align 4
  call void @parse_mos(i32 %182)
  %183 = load %struct._IO_FILE** @ifp, align 8
  %184 = load i32* %skip, align 4
  %185 = load i32* %from, align 4
  %186 = add nsw i32 %184, %185
  %187 = sext i32 %186 to i64
  %188 = call i32 @fseek(%struct._IO_FILE* %183, i64 %187, i32 0)
  br label %6

; <label>:189                                     ; preds = %9
  %190 = load i32* %planes, align 4
  %191 = icmp ne i32 %190, 0
  br i1 %191, label %192, label %207

; <label>:192                                     ; preds = %189
  %193 = load i32* %planes, align 4
  %194 = icmp eq i32 %193, 1
  %195 = zext i1 %194 to i32
  %196 = mul nsw i32 %195, 16843009
  %197 = load i32* @flip, align 4
  %198 = sdiv i32 %197, 90
  %199 = load i32* %frot, align 4
  %200 = add nsw i32 %198, %199
  %201 = and i32 %200, 3
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds [5 x i8]* @.str142, i32 0, i64 %202
  %204 = load i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = mul nsw i32 %196, %205
  store i32 %206, i32* @filters, align 4
  br label %207

; <label>:207                                     ; preds = %192, %189
  ret void
}

declare i32 @fscanf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define void @linear_table(i32 %len) #0 {
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = icmp ugt i32 %2, 4096
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i32 4096, i32* %1, align 4
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = load i32* %1, align 4
  call void @read_shorts(i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i32 0), i32 %6)
  %7 = load i32* %1, align 4
  store i32 %7, i32* %i, align 4
  br label %8

; <label>:8                                       ; preds = %20, %5
  %9 = load i32* %i, align 4
  %10 = icmp slt i32 %9, 4096
  br i1 %10, label %11, label %23

; <label>:11                                      ; preds = %8
  %12 = load i32* %i, align 4
  %13 = sub nsw i32 %12, 1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %14
  %16 = load i16* %15, align 2
  %17 = load i32* %i, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %18
  store i16 %16, i16* %19, align 2
  br label %20

; <label>:20                                      ; preds = %11
  %21 = load i32* %i, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %i, align 4
  br label %8

; <label>:23                                      ; preds = %8
  %24 = load i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i64 4095), align 2
  %25 = zext i16 %24 to i32
  store i32 %25, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_kodak_ifd(i32 %base) #0 {
  %1 = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %wbi = alloca i32, align 4
  %wbtemp = alloca i32, align 4
  %mul = alloca [3 x float], align 4
  %num = alloca float, align 4
  store i32 %base, i32* %1, align 4
  store i32 -2, i32* %wbi, align 4
  store i32 6500, i32* %wbtemp, align 4
  %2 = call zeroext i16 @get2()
  %3 = zext i16 %2 to i32
  store i32 %3, i32* %entries, align 4
  %4 = load i32* %entries, align 4
  %5 = icmp ugt i32 %4, 1024
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %0
  br label %135

; <label>:7                                       ; preds = %0
  br label %8

; <label>:8                                       ; preds = %130, %7
  %9 = load i32* %entries, align 4
  %10 = add i32 %9, -1
  store i32 %10, i32* %entries, align 4
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %135

; <label>:12                                      ; preds = %8
  %13 = load i32* %1, align 4
  call void @tiff_get(i32 %13, i32* %tag, i32* %type, i32* %len, i32* %save)
  %14 = load i32* %tag, align 4
  %15 = icmp eq i32 %14, 1020
  br i1 %15, label %16, label %19

; <label>:16                                      ; preds = %12
  %17 = load i32* %type, align 4
  %18 = call i32 @getint(i32 %17)
  store i32 %18, i32* %wbi, align 4
  br label %19

; <label>:19                                      ; preds = %16, %12
  %20 = load i32* %tag, align 4
  %21 = icmp eq i32 %20, 1021
  br i1 %21, label %22, label %44

; <label>:22                                      ; preds = %19
  %23 = load i32* %len, align 4
  %24 = icmp eq i32 %23, 72
  br i1 %24, label %25, label %44

; <label>:25                                      ; preds = %22
  %26 = load %struct._IO_FILE** @ifp, align 8
  %27 = call i32 @fseek(%struct._IO_FILE* %26, i64 40, i32 1)
  store i32 0, i32* %c, align 4
  br label %28

; <label>:28                                      ; preds = %40, %25
  %29 = load i32* %c, align 4
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %43

; <label>:31                                      ; preds = %28
  %32 = call zeroext i16 @get2()
  %33 = zext i16 %32 to i32
  %34 = sitofp i32 %33 to double
  %35 = fdiv double 2.048000e+03, %34
  %36 = fptrunc double %35 to float
  %37 = load i32* %c, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %38
  store float %36, float* %39, align 4
  br label %40

; <label>:40                                      ; preds = %31
  %41 = load i32* %c, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %c, align 4
  br label %28

; <label>:43                                      ; preds = %28
  store i32 -2, i32* %wbi, align 4
  br label %44

; <label>:44                                      ; preds = %43, %22, %19
  %45 = load i32* %tag, align 4
  %46 = icmp eq i32 %45, 2118
  br i1 %46, label %47, label %50

; <label>:47                                      ; preds = %44
  %48 = load i32* %type, align 4
  %49 = call i32 @getint(i32 %48)
  store i32 %49, i32* %wbtemp, align 4
  br label %50

; <label>:50                                      ; preds = %47, %44
  %51 = load i32* %tag, align 4
  %52 = load i32* %wbi, align 4
  %53 = add nsw i32 2130, %52
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %55, label %70

; <label>:55                                      ; preds = %50
  store i32 0, i32* %c, align 4
  br label %56

; <label>:56                                      ; preds = %66, %55
  %57 = load i32* %c, align 4
  %58 = icmp slt i32 %57, 3
  br i1 %58, label %59, label %69

; <label>:59                                      ; preds = %56
  %60 = load i32* %type, align 4
  %61 = call double @getreal(i32 %60)
  %62 = fptrunc double %61 to float
  %63 = load i32* %c, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [3 x float]* %mul, i32 0, i64 %64
  store float %62, float* %65, align 4
  br label %66

; <label>:66                                      ; preds = %59
  %67 = load i32* %c, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %c, align 4
  br label %56

; <label>:69                                      ; preds = %56
  br label %70

; <label>:70                                      ; preds = %69, %50
  %71 = load i32* %tag, align 4
  %72 = load i32* %wbi, align 4
  %73 = add nsw i32 2140, %72
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %75, label %118

; <label>:75                                      ; preds = %70
  %76 = load i32* %wbi, align 4
  %77 = icmp sge i32 %76, 0
  br i1 %77, label %78, label %118

; <label>:78                                      ; preds = %75
  store i32 0, i32* %c, align 4
  br label %79

; <label>:79                                      ; preds = %114, %78
  %80 = load i32* %c, align 4
  %81 = icmp slt i32 %80, 3
  br i1 %81, label %82, label %117

; <label>:82                                      ; preds = %79
  store i32 0, i32* %i, align 4
  store float 0.000000e+00, float* %num, align 4
  br label %83

; <label>:83                                      ; preds = %100, %82
  %84 = load i32* %i, align 4
  %85 = icmp slt i32 %84, 4
  br i1 %85, label %86, label %103

; <label>:86                                      ; preds = %83
  %87 = load i32* %type, align 4
  %88 = call double @getreal(i32 %87)
  %89 = load i32* %wbtemp, align 4
  %90 = sitofp i32 %89 to double
  %91 = fdiv double %90, 1.000000e+02
  %92 = load i32* %i, align 4
  %93 = sitofp i32 %92 to double
  %94 = call double @pow(double %91, double %93) #4
  %95 = fmul double %88, %94
  %96 = load float* %num, align 4
  %97 = fpext float %96 to double
  %98 = fadd double %97, %95
  %99 = fptrunc double %98 to float
  store float %99, float* %num, align 4
  br label %100

; <label>:100                                     ; preds = %86
  %101 = load i32* %i, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %i, align 4
  br label %83

; <label>:103                                     ; preds = %83
  %104 = load float* %num, align 4
  %105 = load i32* %c, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [3 x float]* %mul, i32 0, i64 %106
  %108 = load float* %107, align 4
  %109 = fmul float %104, %108
  %110 = fdiv float 2.048000e+03, %109
  %111 = load i32* %c, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %112
  store float %110, float* %113, align 4
  br label %114

; <label>:114                                     ; preds = %103
  %115 = load i32* %c, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %c, align 4
  br label %79

; <label>:117                                     ; preds = %79
  br label %118

; <label>:118                                     ; preds = %117, %75, %70
  %119 = load i32* %tag, align 4
  %120 = icmp eq i32 %119, 2317
  br i1 %120, label %121, label %123

; <label>:121                                     ; preds = %118
  %122 = load i32* %len, align 4
  call void @linear_table(i32 %122)
  br label %123

; <label>:123                                     ; preds = %121, %118
  %124 = load i32* %tag, align 4
  %125 = icmp eq i32 %124, 6020
  br i1 %125, label %126, label %130

; <label>:126                                     ; preds = %123
  %127 = load i32* %type, align 4
  %128 = call i32 @getint(i32 %127)
  %129 = uitofp i32 %128 to float
  store float %129, float* @iso_speed, align 4
  br label %130

; <label>:130                                     ; preds = %126, %123
  %131 = load %struct._IO_FILE** @ifp, align 8
  %132 = load i32* %save, align 4
  %133 = zext i32 %132 to i64
  %134 = call i32 @fseek(%struct._IO_FILE* %131, i64 %133, i32 0)
  br label %8

; <label>:135                                     ; preds = %6, %8
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_minolta(i32 %base) #0 {
  %1 = alloca i32, align 4
  %save = alloca i32, align 4
  %tag = alloca i32, align 4
  %len = alloca i32, align 4
  %offset = alloca i32, align 4
  %high = alloca i32, align 4
  %wide = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %sorder = alloca i16, align 2
  store i32 %base, i32* %1, align 4
  store i32 0, i32* %high, align 4
  store i32 0, i32* %wide, align 4
  %2 = load i16* @order, align 2
  store i16 %2, i16* %sorder, align 2
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = load i32* %1, align 4
  %5 = sext i32 %4 to i64
  %6 = call i32 @fseek(%struct._IO_FILE* %3, i64 %5, i32 0)
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @getc_unlocked(%struct._IO_FILE* %7)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %20, label %10

; <label>:10                                      ; preds = %0
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = call i32 @getc_unlocked(%struct._IO_FILE* %11)
  %13 = sub nsw i32 %12, 77
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %20, label %15

; <label>:15                                      ; preds = %10
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i32 @getc_unlocked(%struct._IO_FILE* %16)
  %18 = sub nsw i32 %17, 82
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %15, %10, %0
  br label %102

; <label>:21                                      ; preds = %15
  %22 = load %struct._IO_FILE** @ifp, align 8
  %23 = call i32 @getc_unlocked(%struct._IO_FILE* %22)
  %24 = mul nsw i32 %23, 257
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* @order, align 2
  %26 = load i32* %1, align 4
  %27 = call i32 @get4()
  %28 = add i32 %26, %27
  %29 = add i32 %28, 8
  store i32 %29, i32* %offset, align 4
  br label %30

; <label>:30                                      ; preds = %88, %21
  %31 = load %struct._IO_FILE** @ifp, align 8
  %32 = call i64 @ftell(%struct._IO_FILE* %31)
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %save, align 4
  %34 = load i32* %offset, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %96

; <label>:36                                      ; preds = %30
  store i32 0, i32* %i, align 4
  store i32 0, i32* %tag, align 4
  br label %37

; <label>:37                                      ; preds = %46, %36
  %38 = load i32* %i, align 4
  %39 = icmp slt i32 %38, 4
  br i1 %39, label %40, label %49

; <label>:40                                      ; preds = %37
  %41 = load i32* %tag, align 4
  %42 = shl i32 %41, 8
  %43 = load %struct._IO_FILE** @ifp, align 8
  %44 = call i32 @getc_unlocked(%struct._IO_FILE* %43)
  %45 = or i32 %42, %44
  store i32 %45, i32* %tag, align 4
  br label %46

; <label>:46                                      ; preds = %40
  %47 = load i32* %i, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %i, align 4
  br label %37

; <label>:49                                      ; preds = %37
  %50 = call i32 @get4()
  store i32 %50, i32* %len, align 4
  %51 = load i32* %tag, align 4
  switch i32 %51, label %88 [
    i32 5263940, label %52
    i32 5718599, label %59
    i32 5526615, label %82
  ]

; <label>:52                                      ; preds = %49
  %53 = load %struct._IO_FILE** @ifp, align 8
  %54 = call i32 @fseek(%struct._IO_FILE* %53, i64 8, i32 1)
  %55 = call zeroext i16 @get2()
  %56 = zext i16 %55 to i32
  store i32 %56, i32* %high, align 4
  %57 = call zeroext i16 @get2()
  %58 = zext i16 %57 to i32
  store i32 %58, i32* %wide, align 4
  br label %88

; <label>:59                                      ; preds = %49
  %60 = call i32 @get4()
  %61 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str162, i32 0, i32 0)) #10
  %62 = icmp ne i32 %61, 0
  %63 = select i1 %62, i32 0, i32 3
  store i32 %63, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %64

; <label>:64                                      ; preds = %78, %59
  %65 = load i32* %c, align 4
  %66 = icmp slt i32 %65, 4
  br i1 %66, label %67, label %81

; <label>:67                                      ; preds = %64
  %68 = call zeroext i16 @get2()
  %69 = uitofp i16 %68 to float
  %70 = load i32* %c, align 4
  %71 = load i32* %c, align 4
  %72 = ashr i32 %71, 1
  %73 = xor i32 %70, %72
  %74 = load i32* %i, align 4
  %75 = xor i32 %73, %74
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %76
  store float %69, float* %77, align 4
  br label %78

; <label>:78                                      ; preds = %67
  %79 = load i32* %c, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %c, align 4
  br label %64

; <label>:81                                      ; preds = %64
  br label %88

; <label>:82                                      ; preds = %49
  %83 = load %struct._IO_FILE** @ifp, align 8
  %84 = call i64 @ftell(%struct._IO_FILE* %83)
  %85 = trunc i64 %84 to i32
  call void @parse_tiff(i32 %85)
  %86 = load i32* %offset, align 4
  %87 = sext i32 %86 to i64
  store i64 %87, i64* @data_offset, align 8
  br label %88

; <label>:88                                      ; preds = %82, %49, %81, %52
  %89 = load %struct._IO_FILE** @ifp, align 8
  %90 = load i32* %save, align 4
  %91 = load i32* %len, align 4
  %92 = add nsw i32 %90, %91
  %93 = add nsw i32 %92, 8
  %94 = sext i32 %93 to i64
  %95 = call i32 @fseek(%struct._IO_FILE* %89, i64 %94, i32 0)
  br label %30

; <label>:96                                      ; preds = %30
  %97 = load i32* %high, align 4
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* @raw_height, align 2
  %99 = load i32* %wide, align 4
  %100 = trunc i32 %99 to i16
  store i16 %100, i16* @raw_width, align 2
  %101 = load i16* %sorder, align 2
  store i16 %101, i16* @order, align 2
  br label %102

; <label>:102                                     ; preds = %96, %20
  ret void
}

declare %struct._IO_FILE* @tmpfile() #1

; Function Attrs: nounwind uwtable
define void @parse_tiff(i32 %base) #0 {
  %1 = alloca i32, align 4
  %doff = alloca i32, align 4
  %max_samp = alloca i32, align 4
  %raw = alloca i32, align 4
  %thm = alloca i32, align 4
  %i = alloca i32, align 4
  %jh = alloca %struct.jhead, align 8
  store i32 %base, i32* %1, align 4
  store i32 0, i32* %max_samp, align 4
  store i32 -1, i32* %raw, align 4
  store i32 -1, i32* %thm, align 4
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = load i32* %1, align 4
  %4 = sext i32 %3 to i64
  %5 = call i32 @fseek(%struct._IO_FILE* %2, i64 %4, i32 0)
  %6 = call zeroext i16 @get2()
  store i16 %6, i16* @order, align 2
  %7 = load i16* @order, align 2
  %8 = sext i16 %7 to i32
  %9 = icmp ne i32 %8, 18761
  br i1 %9, label %10, label %15

; <label>:10                                      ; preds = %0
  %11 = load i16* @order, align 2
  %12 = sext i16 %11 to i32
  %13 = icmp ne i32 %12, 19789
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  br label %415

; <label>:15                                      ; preds = %10, %0
  %16 = call zeroext i16 @get2()
  call void @llvm.memset.p0i8.i64(i8* bitcast ([10 x %struct.anon.2]* @tiff_ifd to i8*), i8 0, i64 360, i32 16, i1 false)
  store i32 0, i32* @tiff_nifds, align 4
  br label %17

; <label>:17                                      ; preds = %31, %15
  %18 = call i32 @get4()
  store i32 %18, i32* %doff, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %32

; <label>:20                                      ; preds = %17
  %21 = load %struct._IO_FILE** @ifp, align 8
  %22 = load i32* %doff, align 4
  %23 = load i32* %1, align 4
  %24 = add nsw i32 %22, %23
  %25 = sext i32 %24 to i64
  %26 = call i32 @fseek(%struct._IO_FILE* %21, i64 %25, i32 0)
  %27 = load i32* %1, align 4
  %28 = call i32 @parse_tiff_ifd(i32 %27)
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %20
  br label %32

; <label>:31                                      ; preds = %20
  br label %17

; <label>:32                                      ; preds = %30, %17
  store i32 16, i32* @thumb_misc, align 4
  %33 = load i64* @thumb_offset, align 8
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %35, label %51

; <label>:35                                      ; preds = %32
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = load i64* @thumb_offset, align 8
  %38 = call i32 @fseek(%struct._IO_FILE* %36, i64 %37, i32 0)
  %39 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %50

; <label>:41                                      ; preds = %35
  %42 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %43 = load i32* %42, align 4
  store i32 %43, i32* @thumb_misc, align 4
  %44 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %45 = load i32* %44, align 4
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* @thumb_width, align 2
  %47 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %48 = load i32* %47, align 4
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* @thumb_height, align 2
  br label %50

; <label>:50                                      ; preds = %41, %35
  br label %51

; <label>:51                                      ; preds = %50, %32
  store i32 0, i32* %i, align 4
  br label %52

; <label>:52                                      ; preds = %147, %51
  %53 = load i32* %i, align 4
  %54 = load i32* @tiff_nifds, align 4
  %55 = icmp ult i32 %53, %54
  br i1 %55, label %56, label %150

; <label>:56                                      ; preds = %52
  %57 = load i32* %max_samp, align 4
  %58 = load i32* %i, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %59
  %61 = getelementptr inbounds %struct.anon.2* %60, i32 0, i32 7
  %62 = load i32* %61, align 4
  %63 = icmp slt i32 %57, %62
  br i1 %63, label %64, label %70

; <label>:64                                      ; preds = %56
  %65 = load i32* %i, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %66
  %68 = getelementptr inbounds %struct.anon.2* %67, i32 0, i32 7
  %69 = load i32* %68, align 4
  store i32 %69, i32* %max_samp, align 4
  br label %70

; <label>:70                                      ; preds = %64, %56
  %71 = load i32* %max_samp, align 4
  %72 = icmp sgt i32 %71, 3
  br i1 %72, label %73, label %74

; <label>:73                                      ; preds = %70
  store i32 3, i32* %max_samp, align 4
  br label %74

; <label>:74                                      ; preds = %73, %70
  %75 = load i32* %i, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %76
  %78 = getelementptr inbounds %struct.anon.2* %77, i32 0, i32 3
  %79 = load i32* %78, align 4
  %80 = icmp ne i32 %79, 6
  br i1 %80, label %88, label %81

; <label>:81                                      ; preds = %74
  %82 = load i32* %i, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %83
  %85 = getelementptr inbounds %struct.anon.2* %84, i32 0, i32 7
  %86 = load i32* %85, align 4
  %87 = icmp ne i32 %86, 3
  br i1 %87, label %88, label %146

; <label>:88                                      ; preds = %81, %74
  %89 = load i32* %i, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %90
  %92 = getelementptr inbounds %struct.anon.2* %91, i32 0, i32 0
  %93 = load i32* %92, align 4
  %94 = load i32* %i, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %95
  %97 = getelementptr inbounds %struct.anon.2* %96, i32 0, i32 1
  %98 = load i32* %97, align 4
  %99 = mul nsw i32 %93, %98
  %100 = load i16* @raw_width, align 2
  %101 = zext i16 %100 to i32
  %102 = load i16* @raw_height, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nsw i32 %101, %103
  %105 = icmp sgt i32 %99, %104
  br i1 %105, label %106, label %146

; <label>:106                                     ; preds = %88
  %107 = load i32* %i, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %108
  %110 = getelementptr inbounds %struct.anon.2* %109, i32 0, i32 0
  %111 = load i32* %110, align 4
  %112 = trunc i32 %111 to i16
  store i16 %112, i16* @raw_width, align 2
  %113 = load i32* %i, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %114
  %116 = getelementptr inbounds %struct.anon.2* %115, i32 0, i32 1
  %117 = load i32* %116, align 4
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* @raw_height, align 2
  %119 = load i32* %i, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %120
  %122 = getelementptr inbounds %struct.anon.2* %121, i32 0, i32 2
  %123 = load i32* %122, align 4
  store i32 %123, i32* @tiff_bps, align 4
  %124 = load i32* %i, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %125
  %127 = getelementptr inbounds %struct.anon.2* %126, i32 0, i32 3
  %128 = load i32* %127, align 4
  store i32 %128, i32* @tiff_compress, align 4
  %129 = load i32* %i, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %130
  %132 = getelementptr inbounds %struct.anon.2* %131, i32 0, i32 5
  %133 = load i32* %132, align 4
  %134 = sext i32 %133 to i64
  store i64 %134, i64* @data_offset, align 8
  %135 = load i32* %i, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %136
  %138 = getelementptr inbounds %struct.anon.2* %137, i32 0, i32 6
  %139 = load i32* %138, align 4
  store i32 %139, i32* @tiff_flip, align 4
  %140 = load i32* %i, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %141
  %143 = getelementptr inbounds %struct.anon.2* %142, i32 0, i32 7
  %144 = load i32* %143, align 4
  store i32 %144, i32* @tiff_samples, align 4
  %145 = load i32* %i, align 4
  store i32 %145, i32* %raw, align 4
  br label %146

; <label>:146                                     ; preds = %106, %88, %81
  br label %147

; <label>:147                                     ; preds = %146
  %148 = load i32* %i, align 4
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* %i, align 4
  br label %52

; <label>:150                                     ; preds = %52
  %151 = load i16* @raw_width, align 2
  %152 = zext i16 %151 to i32
  %153 = add nsw i32 %152, 1
  %154 = sdiv i32 %153, 2
  %155 = load i16* @fuji_width, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nsw i32 %156, %154
  %158 = trunc i32 %157 to i16
  store i16 %158, i16* @fuji_width, align 2
  %159 = load i32* getelementptr inbounds ([10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 0, i32 6), align 4
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %161, label %163

; <label>:161                                     ; preds = %150
  %162 = load i32* getelementptr inbounds ([10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 0, i32 6), align 4
  store i32 %162, i32* @tiff_flip, align 4
  br label %163

; <label>:163                                     ; preds = %161, %150
  %164 = load i32* %raw, align 4
  %165 = icmp sge i32 %164, 0
  br i1 %165, label %166, label %244

; <label>:166                                     ; preds = %163
  %167 = load void (...)** @load_raw, align 8
  %168 = icmp ne void (...)* %167, null
  br i1 %168, label %244, label %169

; <label>:169                                     ; preds = %166
  %170 = load i32* @tiff_compress, align 4
  switch i32 %170, label %242 [
    i32 0, label %171
    i32 1, label %171
    i32 6, label %204
    i32 7, label %204
    i32 99, label %204
    i32 262, label %205
    i32 32767, label %206
    i32 32769, label %227
    i32 32773, label %228
    i32 34713, label %229
    i32 65535, label %230
    i32 65000, label %231
    i32 32867, label %241
  ]

; <label>:171                                     ; preds = %169, %169
  %172 = load i32* @tiff_bps, align 4
  switch i32 %172, label %188 [
    i32 8, label %173
    i32 12, label %174
    i32 14, label %187
    i32 16, label %187
  ]

; <label>:173                                     ; preds = %171
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %188

; <label>:174                                     ; preds = %171
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  %175 = load i32* %raw, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %176
  %178 = getelementptr inbounds %struct.anon.2* %177, i32 0, i32 4
  %179 = load i32* %178, align 4
  %180 = icmp eq i32 %179, 2
  br i1 %180, label %181, label %182

; <label>:181                                     ; preds = %174
  store i32 6, i32* @load_flags, align 4
  br label %182

; <label>:182                                     ; preds = %181, %174
  %183 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str105, i32 0, i32 0), i64 6) #10
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %186

; <label>:185                                     ; preds = %182
  br label %188

; <label>:186                                     ; preds = %182
  br label %187

; <label>:187                                     ; preds = %171, %171, %186
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %188

; <label>:188                                     ; preds = %171, %187, %185, %173
  %189 = load i32* %raw, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %190
  %192 = getelementptr inbounds %struct.anon.2* %191, i32 0, i32 8
  %193 = load i32* %192, align 4
  %194 = mul nsw i32 %193, 5
  %195 = load i16* @raw_width, align 2
  %196 = zext i16 %195 to i32
  %197 = load i16* @raw_height, align 2
  %198 = zext i16 %197 to i32
  %199 = mul nsw i32 %196, %198
  %200 = mul nsw i32 %199, 8
  %201 = icmp eq i32 %194, %200
  br i1 %201, label %202, label %203

; <label>:202                                     ; preds = %188
  store void (...)* bitcast (void ()* @olympus_e300_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %203

; <label>:203                                     ; preds = %202, %188
  br label %243

; <label>:204                                     ; preds = %169, %169, %169
  store void (...)* bitcast (void ()* @lossless_jpeg_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %243

; <label>:205                                     ; preds = %169
  store void (...)* bitcast (void ()* @kodak_262_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %243

; <label>:206                                     ; preds = %169
  store void (...)* bitcast (void ()* @sony_arw2_load_raw to void (...)*), void (...)** @load_raw, align 8
  %207 = load i32* %raw, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %208
  %210 = getelementptr inbounds %struct.anon.2* %209, i32 0, i32 8
  %211 = load i32* %210, align 4
  %212 = mul nsw i32 %211, 8
  %213 = load i16* @raw_width, align 2
  %214 = zext i16 %213 to i32
  %215 = load i16* @raw_height, align 2
  %216 = zext i16 %215 to i32
  %217 = mul nsw i32 %214, %216
  %218 = load i32* @tiff_bps, align 4
  %219 = mul i32 %217, %218
  %220 = icmp eq i32 %212, %219
  br i1 %220, label %221, label %222

; <label>:221                                     ; preds = %206
  br label %243

; <label>:222                                     ; preds = %206
  %223 = load i16* @raw_height, align 2
  %224 = zext i16 %223 to i32
  %225 = add nsw i32 %224, 8
  %226 = trunc i32 %225 to i16
  store i16 %226, i16* @raw_height, align 2
  store void (...)* bitcast (void ()* @sony_arw_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %243

; <label>:227                                     ; preds = %169
  store i32 8, i32* @load_flags, align 4
  br label %228

; <label>:228                                     ; preds = %169, %227
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %243

; <label>:229                                     ; preds = %169
  store void (...)* bitcast (void ()* @nikon_compressed_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %243

; <label>:230                                     ; preds = %169
  store void (...)* bitcast (void ()* @pentax_k10_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %243

; <label>:231                                     ; preds = %169
  %232 = load i32* %raw, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %233
  %235 = getelementptr inbounds %struct.anon.2* %234, i32 0, i32 4
  %236 = load i32* %235, align 4
  switch i32 %236, label %240 [
    i32 2, label %237
    i32 6, label %238
    i32 32803, label %239
  ]

; <label>:237                                     ; preds = %231
  store void (...)* bitcast (void ()* @kodak_rgb_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 0, i32* @filters, align 4
  br label %240

; <label>:238                                     ; preds = %231
  store void (...)* bitcast (void ()* @kodak_ycbcr_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 0, i32* @filters, align 4
  br label %240

; <label>:239                                     ; preds = %231
  store void (...)* bitcast (void ()* @kodak_65000_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %240

; <label>:240                                     ; preds = %239, %231, %238, %237
  br label %241

; <label>:241                                     ; preds = %169, %240
  br label %243

; <label>:242                                     ; preds = %169
  store i32 0, i32* @is_raw, align 4
  br label %243

; <label>:243                                     ; preds = %242, %241, %230, %229, %228, %222, %221, %205, %204, %203
  br label %244

; <label>:244                                     ; preds = %243, %166, %163
  %245 = load i32* @dng_version, align 4
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %265, label %247

; <label>:247                                     ; preds = %244
  %248 = load i32* @tiff_samples, align 4
  %249 = icmp eq i32 %248, 3
  br i1 %249, label %250, label %265

; <label>:250                                     ; preds = %247
  %251 = load i32* %raw, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %252
  %254 = getelementptr inbounds %struct.anon.2* %253, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %257, label %264

; <label>:257                                     ; preds = %250
  %258 = load i32* @tiff_bps, align 4
  %259 = icmp ne i32 %258, 14
  br i1 %259, label %260, label %264

; <label>:260                                     ; preds = %257
  %261 = load i32* @tiff_bps, align 4
  %262 = icmp ne i32 %261, 2048
  br i1 %262, label %263, label %264

; <label>:263                                     ; preds = %260
  store i32 0, i32* @is_raw, align 4
  br label %264

; <label>:264                                     ; preds = %263, %260, %257, %250
  br label %265

; <label>:265                                     ; preds = %264, %247, %244
  %266 = load i32* @dng_version, align 4
  %267 = icmp ne i32 %266, 0
  br i1 %267, label %282, label %268

; <label>:268                                     ; preds = %265
  %269 = load i32* @tiff_bps, align 4
  %270 = icmp eq i32 %269, 8
  br i1 %270, label %271, label %282

; <label>:271                                     ; preds = %268
  %272 = load i32* @tiff_compress, align 4
  %273 = icmp eq i32 %272, 1
  br i1 %273, label %274, label %282

; <label>:274                                     ; preds = %271
  %275 = load i32* %raw, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %276
  %278 = getelementptr inbounds %struct.anon.2* %277, i32 0, i32 4
  %279 = load i32* %278, align 4
  %280 = icmp eq i32 %279, 1
  br i1 %280, label %281, label %282

; <label>:281                                     ; preds = %274
  store i32 0, i32* @is_raw, align 4
  br label %282

; <label>:282                                     ; preds = %281, %274, %271, %268, %265
  %283 = load i32* @tiff_bps, align 4
  %284 = icmp eq i32 %283, 8
  br i1 %284, label %285, label %289

; <label>:285                                     ; preds = %282
  %286 = load i32* @tiff_samples, align 4
  %287 = icmp eq i32 %286, 4
  br i1 %287, label %288, label %289

; <label>:288                                     ; preds = %285
  store i32 0, i32* @is_raw, align 4
  br label %289

; <label>:289                                     ; preds = %288, %285, %282
  store i32 0, i32* %i, align 4
  br label %290

; <label>:290                                     ; preds = %375, %289
  %291 = load i32* %i, align 4
  %292 = load i32* @tiff_nifds, align 4
  %293 = icmp ult i32 %291, %292
  br i1 %293, label %294, label %378

; <label>:294                                     ; preds = %290
  %295 = load i32* %i, align 4
  %296 = load i32* %raw, align 4
  %297 = icmp ne i32 %295, %296
  br i1 %297, label %298, label %374

; <label>:298                                     ; preds = %294
  %299 = load i32* %i, align 4
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %300
  %302 = getelementptr inbounds %struct.anon.2* %301, i32 0, i32 7
  %303 = load i32* %302, align 4
  %304 = load i32* %max_samp, align 4
  %305 = icmp eq i32 %303, %304
  br i1 %305, label %306, label %374

; <label>:306                                     ; preds = %298
  %307 = load i32* %i, align 4
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %308
  %310 = getelementptr inbounds %struct.anon.2* %309, i32 0, i32 0
  %311 = load i32* %310, align 4
  %312 = load i32* %i, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %313
  %315 = getelementptr inbounds %struct.anon.2* %314, i32 0, i32 1
  %316 = load i32* %315, align 4
  %317 = mul nsw i32 %311, %316
  %318 = load i32* %i, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %319
  %321 = getelementptr inbounds %struct.anon.2* %320, i32 0, i32 2
  %322 = load i32* %321, align 4
  %323 = add nsw i32 %322, 1
  %324 = load i32* %i, align 4
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %325
  %327 = getelementptr inbounds %struct.anon.2* %326, i32 0, i32 2
  %328 = load i32* %327, align 4
  %329 = add nsw i32 %328, 1
  %330 = mul nsw i32 %323, %329
  %331 = sdiv i32 %317, %330
  %332 = load i16* @thumb_width, align 2
  %333 = zext i16 %332 to i32
  %334 = load i16* @thumb_height, align 2
  %335 = zext i16 %334 to i32
  %336 = mul nsw i32 %333, %335
  %337 = load i32* @thumb_misc, align 4
  %338 = add i32 %337, 1
  %339 = load i32* @thumb_misc, align 4
  %340 = add i32 %339, 1
  %341 = mul i32 %338, %340
  %342 = udiv i32 %336, %341
  %343 = icmp ugt i32 %331, %342
  br i1 %343, label %344, label %374

; <label>:344                                     ; preds = %306
  %345 = load i32* %i, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %346
  %348 = getelementptr inbounds %struct.anon.2* %347, i32 0, i32 0
  %349 = load i32* %348, align 4
  %350 = trunc i32 %349 to i16
  store i16 %350, i16* @thumb_width, align 2
  %351 = load i32* %i, align 4
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %352
  %354 = getelementptr inbounds %struct.anon.2* %353, i32 0, i32 1
  %355 = load i32* %354, align 4
  %356 = trunc i32 %355 to i16
  store i16 %356, i16* @thumb_height, align 2
  %357 = load i32* %i, align 4
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %358
  %360 = getelementptr inbounds %struct.anon.2* %359, i32 0, i32 5
  %361 = load i32* %360, align 4
  %362 = sext i32 %361 to i64
  store i64 %362, i64* @thumb_offset, align 8
  %363 = load i32* %i, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %364
  %366 = getelementptr inbounds %struct.anon.2* %365, i32 0, i32 8
  %367 = load i32* %366, align 4
  store i32 %367, i32* @thumb_length, align 4
  %368 = load i32* %i, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %369
  %371 = getelementptr inbounds %struct.anon.2* %370, i32 0, i32 2
  %372 = load i32* %371, align 4
  store i32 %372, i32* @thumb_misc, align 4
  %373 = load i32* %i, align 4
  store i32 %373, i32* %thm, align 4
  br label %374

; <label>:374                                     ; preds = %344, %306, %298, %294
  br label %375

; <label>:375                                     ; preds = %374
  %376 = load i32* %i, align 4
  %377 = add nsw i32 %376, 1
  store i32 %377, i32* %i, align 4
  br label %290

; <label>:378                                     ; preds = %290
  %379 = load i32* %thm, align 4
  %380 = icmp sge i32 %379, 0
  br i1 %380, label %381, label %415

; <label>:381                                     ; preds = %378
  %382 = load i32* %thm, align 4
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %383
  %385 = getelementptr inbounds %struct.anon.2* %384, i32 0, i32 7
  %386 = load i32* %385, align 4
  %387 = shl i32 %386, 5
  %388 = load i32* @thumb_misc, align 4
  %389 = or i32 %388, %387
  store i32 %389, i32* @thumb_misc, align 4
  %390 = load i32* %thm, align 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %391
  %393 = getelementptr inbounds %struct.anon.2* %392, i32 0, i32 3
  %394 = load i32* %393, align 4
  switch i32 %394, label %414 [
    i32 0, label %395
    i32 1, label %396
    i32 65000, label %406
  ]

; <label>:395                                     ; preds = %381
  store void (%struct._IO_FILE*)* @layer_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %414

; <label>:396                                     ; preds = %381
  %397 = load i32* %thm, align 4
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %398
  %400 = getelementptr inbounds %struct.anon.2* %399, i32 0, i32 2
  %401 = load i32* %400, align 4
  %402 = icmp sgt i32 %401, 8
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %396
  store void (...)* bitcast (void ()* @kodak_thumb_load_raw to void (...)*), void (...)** @thumb_load_raw, align 8
  br label %405

; <label>:404                                     ; preds = %396
  store void (%struct._IO_FILE*)* @ppm_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %405

; <label>:405                                     ; preds = %404, %403
  br label %414

; <label>:406                                     ; preds = %381
  %407 = load i32* %thm, align 4
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds [10 x %struct.anon.2]* @tiff_ifd, i32 0, i64 %408
  %410 = getelementptr inbounds %struct.anon.2* %409, i32 0, i32 4
  %411 = load i32* %410, align 4
  %412 = icmp eq i32 %411, 6
  %413 = select i1 %412, void (...)* bitcast (void ()* @kodak_ycbcr_load_raw to void (...)*), void (...)* bitcast (void ()* @kodak_rgb_load_raw to void (...)*)
  store void (...)* %413, void (...)** @thumb_load_raw, align 8
  br label %414

; <label>:414                                     ; preds = %406, %381, %405, %395
  br label %415

; <label>:415                                     ; preds = %14, %414, %378
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_external_jpeg() #0 {
  %file = alloca i8*, align 8
  %ext = alloca i8*, align 8
  %jname = alloca i8*, align 8
  %jfile = alloca i8*, align 8
  %jext = alloca i8*, align 8
  %save = alloca %struct._IO_FILE*, align 8
  %1 = load %struct._IO_FILE** @ifp, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %save, align 8
  %2 = load i8** @ifname, align 8
  %3 = call i8* @strrchr(i8* %2, i32 46) #10
  store i8* %3, i8** %ext, align 8
  %4 = load i8** @ifname, align 8
  %5 = call i8* @strrchr(i8* %4, i32 47) #10
  store i8* %5, i8** %file, align 8
  %6 = load i8** %file, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %0
  %9 = load i8** @ifname, align 8
  %10 = call i8* @strrchr(i8* %9, i32 92) #10
  store i8* %10, i8** %file, align 8
  br label %11

; <label>:11                                      ; preds = %8, %0
  %12 = load i8** %file, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %17, label %14

; <label>:14                                      ; preds = %11
  %15 = load i8** @ifname, align 8
  %16 = getelementptr inbounds i8* %15, i64 -1
  store i8* %16, i8** %file, align 8
  br label %17

; <label>:17                                      ; preds = %14, %11
  %18 = load i8** %file, align 8
  %19 = getelementptr inbounds i8* %18, i32 1
  store i8* %19, i8** %file, align 8
  %20 = load i8** %ext, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %33

; <label>:22                                      ; preds = %17
  %23 = load i8** %ext, align 8
  %24 = call i64 @strlen(i8* %23) #10
  %25 = icmp ne i64 %24, 4
  br i1 %25, label %33, label %26

; <label>:26                                      ; preds = %22
  %27 = load i8** %ext, align 8
  %28 = load i8** %file, align 8
  %29 = ptrtoint i8* %27 to i64
  %30 = ptrtoint i8* %28 to i64
  %31 = sub i64 %29, %30
  %32 = icmp ne i64 %31, 8
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %26, %22, %17
  br label %151

; <label>:34                                      ; preds = %26
  %35 = load i8** @ifname, align 8
  %36 = call i64 @strlen(i8* %35) #10
  %37 = add i64 %36, 1
  %38 = call noalias i8* @malloc(i64 %37) #4
  store i8* %38, i8** %jname, align 8
  %39 = load i8** %jname, align 8
  call void @merror(i8* %39, i8* getelementptr inbounds ([22 x i8]* @.str163, i32 0, i32 0))
  %40 = load i8** %jname, align 8
  %41 = load i8** @ifname, align 8
  %42 = call i8* @strcpy(i8* %40, i8* %41) #4
  %43 = load i8** %file, align 8
  %44 = load i8** @ifname, align 8
  %45 = ptrtoint i8* %43 to i64
  %46 = ptrtoint i8* %44 to i64
  %47 = sub i64 %45, %46
  %48 = load i8** %jname, align 8
  %49 = getelementptr inbounds i8* %48, i64 %47
  store i8* %49, i8** %jfile, align 8
  %50 = load i8** %ext, align 8
  %51 = load i8** @ifname, align 8
  %52 = ptrtoint i8* %50 to i64
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %52, %53
  %55 = load i8** %jname, align 8
  %56 = getelementptr inbounds i8* %55, i64 %54
  store i8* %56, i8** %jext, align 8
  %57 = load i8** %ext, align 8
  %58 = call i32 @strcasecmp(i8* %57, i8* getelementptr inbounds ([5 x i8]* @.str164, i32 0, i32 0)) #10
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %95

; <label>:60                                      ; preds = %34
  %61 = load i8** %jext, align 8
  %62 = load i8** %ext, align 8
  %63 = getelementptr inbounds i8* %62, i64 1
  %64 = load i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = call i16** @__ctype_b_loc() #9
  %68 = load i16** %67, align 8
  %69 = getelementptr inbounds i16* %68, i64 %66
  %70 = load i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = and i32 %71, 256
  %73 = icmp ne i32 %72, 0
  %74 = select i1 %73, i8* getelementptr inbounds ([5 x i8]* @.str165, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str164, i32 0, i32 0)
  %75 = call i8* @strcpy(i8* %61, i8* %74) #4
  %76 = load i8** %file, align 8
  %77 = load i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = sext i32 %78 to i64
  %80 = call i16** @__ctype_b_loc() #9
  %81 = load i16** %80, align 8
  %82 = getelementptr inbounds i16* %81, i64 %79
  %83 = load i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = and i32 %84, 2048
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %94

; <label>:87                                      ; preds = %60
  %88 = load i8** %jfile, align 8
  %89 = load i8** %file, align 8
  %90 = getelementptr inbounds i8* %89, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* %90, i64 4, i32 1, i1 false)
  %91 = load i8** %jfile, align 8
  %92 = getelementptr inbounds i8* %91, i64 4
  %93 = load i8** %file, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %93, i64 4, i32 1, i1 false)
  br label %94

; <label>:94                                      ; preds = %87, %60
  br label %121

; <label>:95                                      ; preds = %34
  br label %96

; <label>:96                                      ; preds = %118, %95
  %97 = load i8** %jext, align 8
  %98 = getelementptr inbounds i8* %97, i32 -1
  store i8* %98, i8** %jext, align 8
  %99 = load i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = sext i32 %100 to i64
  %102 = call i16** @__ctype_b_loc() #9
  %103 = load i16** %102, align 8
  %104 = getelementptr inbounds i16* %103, i64 %101
  %105 = load i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = and i32 %106, 2048
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %120

; <label>:109                                     ; preds = %96
  %110 = load i8** %jext, align 8
  %111 = load i8* %110, align 1
  %112 = sext i8 %111 to i32
  %113 = icmp ne i32 %112, 57
  br i1 %113, label %114, label %118

; <label>:114                                     ; preds = %109
  %115 = load i8** %jext, align 8
  %116 = load i8* %115, align 1
  %117 = add i8 %116, 1
  store i8 %117, i8* %115, align 1
  br label %120

; <label>:118                                     ; preds = %109
  %119 = load i8** %jext, align 8
  store i8 48, i8* %119, align 1
  br label %96

; <label>:120                                     ; preds = %114, %96
  br label %121

; <label>:121                                     ; preds = %120, %94
  %122 = load i8** %jname, align 8
  %123 = load i8** @ifname, align 8
  %124 = call i32 @strcmp(i8* %122, i8* %123) #10
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %126, label %141

; <label>:126                                     ; preds = %121
  %127 = load i8** %jname, align 8
  %128 = call %struct._IO_FILE* @fopen(i8* %127, i8* getelementptr inbounds ([3 x i8]* @.str64, i32 0, i32 0))
  store %struct._IO_FILE* %128, %struct._IO_FILE** @ifp, align 8
  %129 = icmp ne %struct._IO_FILE* %128, null
  br i1 %129, label %130, label %140

; <label>:130                                     ; preds = %126
  %131 = load i32* @verbose, align 4
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %137

; <label>:133                                     ; preds = %130
  %134 = load %struct._IO_FILE** @stderr, align 8
  %135 = load i8** %jname, align 8
  %136 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([30 x i8]* @.str166, i32 0, i32 0), i8* %135)
  br label %137

; <label>:137                                     ; preds = %133, %130
  call void @parse_tiff(i32 12)
  store i64 0, i64* @thumb_offset, align 8
  store i32 1, i32* @is_raw, align 4
  %138 = load %struct._IO_FILE** @ifp, align 8
  %139 = call i32 @fclose(%struct._IO_FILE* %138)
  br label %140

; <label>:140                                     ; preds = %137, %126
  br label %141

; <label>:141                                     ; preds = %140, %121
  %142 = load i64* @timestamp, align 8
  %143 = icmp ne i64 %142, 0
  br i1 %143, label %148, label %144

; <label>:144                                     ; preds = %141
  %145 = load %struct._IO_FILE** @stderr, align 8
  %146 = load i8** %jname, align 8
  %147 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([33 x i8]* @.str167, i32 0, i32 0), i8* %146)
  br label %148

; <label>:148                                     ; preds = %144, %141
  %149 = load i8** %jname, align 8
  call void @free(i8* %149) #4
  %150 = load %struct._IO_FILE** %save, align 8
  store %struct._IO_FILE* %150, %struct._IO_FILE** @ifp, align 8
  br label %151

; <label>:151                                     ; preds = %148, %33
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #6

; Function Attrs: nounwind uwtable
define void @ciff_block_1030() #0 {
  %i = alloca i32, align 4
  %bpp = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %vbits = alloca i32, align 4
  %bitbuf = alloca i64, align 8
  store i32 0, i32* %vbits, align 4
  store i64 0, i64* %bitbuf, align 8
  %1 = call zeroext i16 @get2()
  %2 = call i32 @get4()
  %3 = icmp ne i32 %2, 524296
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = call i32 @get4()
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %8, label %7

; <label>:7                                       ; preds = %4, %0
  br label %73

; <label>:8                                       ; preds = %4
  %9 = call zeroext i16 @get2()
  %10 = zext i16 %9 to i32
  store i32 %10, i32* %bpp, align 4
  %11 = load i32* %bpp, align 4
  %12 = icmp ne i32 %11, 10
  br i1 %12, label %13, label %17

; <label>:13                                      ; preds = %8
  %14 = load i32* %bpp, align 4
  %15 = icmp ne i32 %14, 12
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %13
  br label %73

; <label>:17                                      ; preds = %13, %8
  store i32 0, i32* %row, align 4
  store i32 0, i32* %i, align 4
  br label %18

; <label>:18                                      ; preds = %70, %17
  %19 = load i32* %row, align 4
  %20 = icmp slt i32 %19, 8
  br i1 %20, label %21, label %73

; <label>:21                                      ; preds = %18
  store i32 0, i32* %col, align 4
  br label %22

; <label>:22                                      ; preds = %66, %21
  %23 = load i32* %col, align 4
  %24 = icmp slt i32 %23, 8
  br i1 %24, label %25, label %69

; <label>:25                                      ; preds = %22
  %26 = load i32* %vbits, align 4
  %27 = load i32* %bpp, align 4
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %29, label %46

; <label>:29                                      ; preds = %25
  %30 = load i64* %bitbuf, align 8
  %31 = shl i64 %30, 16
  %32 = call zeroext i16 @get2()
  %33 = zext i16 %32 to i32
  %34 = load i32* %i, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %i, align 4
  %36 = and i32 %34, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [2 x i16]* @ciff_block_1030.key, i32 0, i64 %37
  %39 = load i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = xor i32 %33, %40
  %42 = sext i32 %41 to i64
  %43 = or i64 %31, %42
  store i64 %43, i64* %bitbuf, align 8
  %44 = load i32* %vbits, align 4
  %45 = add nsw i32 %44, 16
  store i32 %45, i32* %vbits, align 4
  br label %46

; <label>:46                                      ; preds = %29, %25
  %47 = load i64* %bitbuf, align 8
  %48 = load i32* %vbits, align 4
  %49 = sub nsw i32 64, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = load i32* %bpp, align 4
  %53 = sub nsw i32 64, %52
  %54 = zext i32 %53 to i64
  %55 = lshr i64 %51, %54
  %56 = trunc i64 %55 to i16
  %57 = load i32* %col, align 4
  %58 = sext i32 %57 to i64
  %59 = load i32* %row, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [8 x [8 x i16]]* @white, i32 0, i64 %60
  %62 = getelementptr inbounds [8 x i16]* %61, i32 0, i64 %58
  store i16 %56, i16* %62, align 2
  %63 = load i32* %bpp, align 4
  %64 = load i32* %vbits, align 4
  %65 = sub nsw i32 %64, %63
  store i32 %65, i32* %vbits, align 4
  br label %66

; <label>:66                                      ; preds = %46
  %67 = load i32* %col, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %col, align 4
  br label %22

; <label>:69                                      ; preds = %22
  br label %70

; <label>:70                                      ; preds = %69
  %71 = load i32* %row, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %row, align 4
  br label %18

; <label>:73                                      ; preds = %7, %16, %18
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_ciff(i32 %offset, i32 %length) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %tboff = alloca i32, align 4
  %nrecs = alloca i32, align 4
  %c = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %wbi = alloca i32, align 4
  %key = alloca [2 x i16], align 2
  store i32 %offset, i32* %1, align 4
  store i32 %length, i32* %2, align 4
  store i32 -1, i32* %wbi, align 4
  %3 = bitcast [2 x i16]* %key to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([2 x i16]* @parse_ciff.key to i8*), i64 4, i32 2, i1 false)
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = load i32* %1, align 4
  %6 = load i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = sub nsw i32 %7, 4
  %9 = sext i32 %8 to i64
  %10 = call i32 @fseek(%struct._IO_FILE* %4, i64 %9, i32 0)
  %11 = call i32 @get4()
  %12 = load i32* %1, align 4
  %13 = add i32 %11, %12
  store i32 %13, i32* %tboff, align 4
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = load i32* %tboff, align 4
  %16 = sext i32 %15 to i64
  %17 = call i32 @fseek(%struct._IO_FILE* %14, i64 %16, i32 0)
  %18 = call zeroext i16 @get2()
  %19 = zext i16 %18 to i32
  store i32 %19, i32* %nrecs, align 4
  %20 = load i32* %nrecs, align 4
  %21 = icmp sgt i32 %20, 100
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %0
  br label %402

; <label>:23                                      ; preds = %0
  br label %24

; <label>:24                                      ; preds = %397, %23
  %25 = load i32* %nrecs, align 4
  %26 = add nsw i32 %25, -1
  store i32 %26, i32* %nrecs, align 4
  %27 = icmp ne i32 %25, 0
  br i1 %27, label %28, label %402

; <label>:28                                      ; preds = %24
  %29 = call zeroext i16 @get2()
  %30 = zext i16 %29 to i32
  store i32 %30, i32* %type, align 4
  %31 = call i32 @get4()
  store i32 %31, i32* %len, align 4
  %32 = load %struct._IO_FILE** @ifp, align 8
  %33 = call i64 @ftell(%struct._IO_FILE* %32)
  %34 = add nsw i64 %33, 4
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %save, align 4
  %36 = load %struct._IO_FILE** @ifp, align 8
  %37 = load i32* %1, align 4
  %38 = call i32 @get4()
  %39 = add i32 %37, %38
  %40 = zext i32 %39 to i64
  %41 = call i32 @fseek(%struct._IO_FILE* %36, i64 %40, i32 0)
  %42 = load i32* %type, align 4
  %43 = ashr i32 %42, 8
  %44 = add nsw i32 %43, 8
  %45 = or i32 %44, 8
  %46 = icmp eq i32 %45, 56
  br i1 %46, label %47, label %52

; <label>:47                                      ; preds = %28
  %48 = load %struct._IO_FILE** @ifp, align 8
  %49 = call i64 @ftell(%struct._IO_FILE* %48)
  %50 = trunc i64 %49 to i32
  %51 = load i32* %len, align 4
  call void @parse_ciff(i32 %50, i32 %51)
  br label %52

; <label>:52                                      ; preds = %47, %28
  %53 = load i32* %type, align 4
  %54 = icmp eq i32 %53, 2064
  br i1 %54, label %55, label %58

; <label>:55                                      ; preds = %52
  %56 = load %struct._IO_FILE** @ifp, align 8
  %57 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %56)
  br label %58

; <label>:58                                      ; preds = %55, %52
  %59 = load i32* %type, align 4
  %60 = icmp eq i32 %59, 2058
  br i1 %60, label %61, label %70

; <label>:61                                      ; preds = %58
  %62 = load %struct._IO_FILE** @ifp, align 8
  %63 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %62)
  %64 = load %struct._IO_FILE** @ifp, align 8
  %65 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0)) #10
  %66 = sub i64 %65, 63
  %67 = call i32 @fseek(%struct._IO_FILE* %64, i64 %66, i32 1)
  %68 = load %struct._IO_FILE** @ifp, align 8
  %69 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %68)
  br label %70

; <label>:70                                      ; preds = %61, %58
  %71 = load i32* %type, align 4
  %72 = icmp eq i32 %71, 6160
  br i1 %72, label %73, label %77

; <label>:73                                      ; preds = %70
  %74 = load %struct._IO_FILE** @ifp, align 8
  %75 = call i32 @fseek(%struct._IO_FILE* %74, i64 12, i32 1)
  %76 = call i32 @get4()
  store i32 %76, i32* @flip, align 4
  br label %77

; <label>:77                                      ; preds = %73, %70
  %78 = load i32* %type, align 4
  %79 = icmp eq i32 %78, 6197
  br i1 %79, label %80, label %82

; <label>:80                                      ; preds = %77
  %81 = call i32 @get4()
  store i32 %81, i32* @tiff_compress, align 4
  br label %82

; <label>:82                                      ; preds = %80, %77
  %83 = load i32* %type, align 4
  %84 = icmp eq i32 %83, 8199
  br i1 %84, label %85, label %89

; <label>:85                                      ; preds = %82
  %86 = load %struct._IO_FILE** @ifp, align 8
  %87 = call i64 @ftell(%struct._IO_FILE* %86)
  store i64 %87, i64* @thumb_offset, align 8
  %88 = load i32* %len, align 4
  store i32 %88, i32* @thumb_length, align 4
  br label %89

; <label>:89                                      ; preds = %85, %82
  %90 = load i32* %type, align 4
  %91 = icmp eq i32 %90, 6168
  br i1 %91, label %92, label %106

; <label>:92                                      ; preds = %89
  %93 = call i32 @get4()
  %94 = call i32 @get4()
  %95 = call float @int_to_float(i32 %94)
  %96 = fsub float -0.000000e+00, %95
  %97 = fpext float %96 to double
  %98 = call double @pow(double 2.000000e+00, double %97) #4
  %99 = fptrunc double %98 to float
  store float %99, float* @shutter, align 4
  %100 = call i32 @get4()
  %101 = call float @int_to_float(i32 %100)
  %102 = fdiv float %101, 2.000000e+00
  %103 = fpext float %102 to double
  %104 = call double @pow(double 2.000000e+00, double %103) #4
  %105 = fptrunc double %104 to float
  store float %105, float* @aperture, align 4
  br label %106

; <label>:106                                     ; preds = %92, %89
  %107 = load i32* %type, align 4
  %108 = icmp eq i32 %107, 4138
  br i1 %108, label %109, label %152

; <label>:109                                     ; preds = %106
  %110 = call i32 @get4()
  %111 = call zeroext i16 @get2()
  %112 = zext i16 %111 to i32
  %113 = sitofp i32 %112 to double
  %114 = fdiv double %113, 3.200000e+01
  %115 = fsub double %114, 4.000000e+00
  %116 = call double @pow(double 2.000000e+00, double %115) #4
  %117 = fmul double %116, 5.000000e+01
  %118 = fptrunc double %117 to float
  store float %118, float* @iso_speed, align 4
  %119 = call zeroext i16 @get2()
  %120 = call zeroext i16 @get2()
  %121 = sext i16 %120 to i32
  %122 = sitofp i32 %121 to double
  %123 = fdiv double %122, 6.400000e+01
  %124 = call double @pow(double 2.000000e+00, double %123) #4
  %125 = fptrunc double %124 to float
  store float %125, float* @aperture, align 4
  %126 = call zeroext i16 @get2()
  %127 = sext i16 %126 to i32
  %128 = sub nsw i32 0, %127
  %129 = sitofp i32 %128 to double
  %130 = fdiv double %129, 3.200000e+01
  %131 = call double @pow(double 2.000000e+00, double %130) #4
  %132 = fptrunc double %131 to float
  store float %132, float* @shutter, align 4
  %133 = call zeroext i16 @get2()
  %134 = call zeroext i16 @get2()
  %135 = zext i16 %134 to i32
  store i32 %135, i32* %wbi, align 4
  %136 = load i32* %wbi, align 4
  %137 = icmp sgt i32 %136, 17
  br i1 %137, label %138, label %139

; <label>:138                                     ; preds = %109
  store i32 0, i32* %wbi, align 4
  br label %139

; <label>:139                                     ; preds = %138, %109
  %140 = load %struct._IO_FILE** @ifp, align 8
  %141 = call i32 @fseek(%struct._IO_FILE* %140, i64 32, i32 1)
  %142 = load float* @shutter, align 4
  %143 = fpext float %142 to double
  %144 = fcmp ogt double %143, 1.000000e+06
  br i1 %144, label %145, label %151

; <label>:145                                     ; preds = %139
  %146 = call zeroext i16 @get2()
  %147 = zext i16 %146 to i32
  %148 = sitofp i32 %147 to double
  %149 = fdiv double %148, 1.000000e+01
  %150 = fptrunc double %149 to float
  store float %150, float* @shutter, align 4
  br label %151

; <label>:151                                     ; preds = %145, %139
  br label %152

; <label>:152                                     ; preds = %151, %106
  %153 = load i32* %type, align 4
  %154 = icmp eq i32 %153, 4140
  br i1 %154, label %155, label %197

; <label>:155                                     ; preds = %152
  %156 = call zeroext i16 @get2()
  %157 = zext i16 %156 to i32
  %158 = icmp sgt i32 %157, 512
  br i1 %158, label %159, label %176

; <label>:159                                     ; preds = %155
  %160 = load %struct._IO_FILE** @ifp, align 8
  %161 = call i32 @fseek(%struct._IO_FILE* %160, i64 118, i32 1)
  store i32 0, i32* %c, align 4
  br label %162

; <label>:162                                     ; preds = %172, %159
  %163 = load i32* %c, align 4
  %164 = icmp slt i32 %163, 4
  br i1 %164, label %165, label %175

; <label>:165                                     ; preds = %162
  %166 = call zeroext i16 @get2()
  %167 = uitofp i16 %166 to float
  %168 = load i32* %c, align 4
  %169 = xor i32 %168, 2
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %170
  store float %167, float* %171, align 4
  br label %172

; <label>:172                                     ; preds = %165
  %173 = load i32* %c, align 4
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %c, align 4
  br label %162

; <label>:175                                     ; preds = %162
  br label %196

; <label>:176                                     ; preds = %155
  %177 = load %struct._IO_FILE** @ifp, align 8
  %178 = call i32 @fseek(%struct._IO_FILE* %177, i64 98, i32 1)
  store i32 0, i32* %c, align 4
  br label %179

; <label>:179                                     ; preds = %192, %176
  %180 = load i32* %c, align 4
  %181 = icmp slt i32 %180, 4
  br i1 %181, label %182, label %195

; <label>:182                                     ; preds = %179
  %183 = call zeroext i16 @get2()
  %184 = uitofp i16 %183 to float
  %185 = load i32* %c, align 4
  %186 = load i32* %c, align 4
  %187 = ashr i32 %186, 1
  %188 = xor i32 %185, %187
  %189 = xor i32 %188, 1
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %190
  store float %184, float* %191, align 4
  br label %192

; <label>:192                                     ; preds = %182
  %193 = load i32* %c, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %c, align 4
  br label %179

; <label>:195                                     ; preds = %179
  br label %196

; <label>:196                                     ; preds = %195, %175
  br label %197

; <label>:197                                     ; preds = %196, %152
  %198 = load i32* %type, align 4
  %199 = icmp eq i32 %198, 50
  br i1 %199, label %200, label %297

; <label>:200                                     ; preds = %197
  %201 = load i32* %len, align 4
  %202 = icmp eq i32 %201, 768
  br i1 %202, label %203, label %229

; <label>:203                                     ; preds = %200
  %204 = load %struct._IO_FILE** @ifp, align 8
  %205 = call i32 @fseek(%struct._IO_FILE* %204, i64 72, i32 1)
  store i32 0, i32* %c, align 4
  br label %206

; <label>:206                                     ; preds = %221, %203
  %207 = load i32* %c, align 4
  %208 = icmp slt i32 %207, 4
  br i1 %208, label %209, label %224

; <label>:209                                     ; preds = %206
  %210 = call zeroext i16 @get2()
  %211 = zext i16 %210 to i32
  %212 = sitofp i32 %211 to double
  %213 = fdiv double 1.024000e+03, %212
  %214 = fptrunc double %213 to float
  %215 = load i32* %c, align 4
  %216 = load i32* %c, align 4
  %217 = ashr i32 %216, 1
  %218 = xor i32 %215, %217
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %219
  store float %214, float* %220, align 4
  br label %221

; <label>:221                                     ; preds = %209
  %222 = load i32* %c, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %c, align 4
  br label %206

; <label>:224                                     ; preds = %206
  %225 = load i32* %wbi, align 4
  %226 = icmp ne i32 %225, 0
  br i1 %226, label %228, label %227

; <label>:227                                     ; preds = %224
  store float -1.000000e+00, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  br label %228

; <label>:228                                     ; preds = %227, %224
  br label %296

; <label>:229                                     ; preds = %200
  %230 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %231 = fcmp une float %230, 0.000000e+00
  br i1 %231, label %295, label %232

; <label>:232                                     ; preds = %229
  %233 = call zeroext i16 @get2()
  %234 = zext i16 %233 to i32
  %235 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 0
  %236 = load i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = icmp eq i32 %234, %237
  br i1 %238, label %239, label %250

; <label>:239                                     ; preds = %232
  %240 = load i32* %wbi, align 4
  %241 = sext i32 %240 to i64
  %242 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str168, i32 0, i32 0)) #10
  %243 = icmp ne i8* %242, null
  %244 = select i1 %243, i8* getelementptr inbounds ([19 x i8]* @.str169, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str170, i32 0, i32 0)
  %245 = getelementptr inbounds i8* %244, i64 %241
  %246 = load i8* %245, align 1
  %247 = sext i8 %246 to i32
  %248 = sub nsw i32 %247, 48
  %249 = add nsw i32 %248, 2
  store i32 %249, i32* %c, align 4
  br label %259

; <label>:250                                     ; preds = %232
  %251 = load i32* %wbi, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds [19 x i8]* @.str171, i32 0, i64 %252
  %254 = load i8* %253, align 1
  %255 = sext i8 %254 to i32
  %256 = sub nsw i32 %255, 48
  store i32 %256, i32* %c, align 4
  %257 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 1
  store i16 0, i16* %257, align 2
  %258 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 0
  store i16 0, i16* %258, align 2
  br label %259

; <label>:259                                     ; preds = %250, %239
  %260 = load %struct._IO_FILE** @ifp, align 8
  %261 = load i32* %c, align 4
  %262 = mul nsw i32 %261, 8
  %263 = add nsw i32 78, %262
  %264 = sext i32 %263 to i64
  %265 = call i32 @fseek(%struct._IO_FILE* %260, i64 %264, i32 1)
  store i32 0, i32* %c, align 4
  br label %266

; <label>:266                                     ; preds = %287, %259
  %267 = load i32* %c, align 4
  %268 = icmp slt i32 %267, 4
  br i1 %268, label %269, label %290

; <label>:269                                     ; preds = %266
  %270 = call zeroext i16 @get2()
  %271 = zext i16 %270 to i32
  %272 = load i32* %c, align 4
  %273 = and i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds [2 x i16]* %key, i32 0, i64 %274
  %276 = load i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = xor i32 %271, %277
  %279 = sitofp i32 %278 to float
  %280 = load i32* %c, align 4
  %281 = load i32* %c, align 4
  %282 = ashr i32 %281, 1
  %283 = xor i32 %280, %282
  %284 = xor i32 %283, 1
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %285
  store float %279, float* %286, align 4
  br label %287

; <label>:287                                     ; preds = %269
  %288 = load i32* %c, align 4
  %289 = add nsw i32 %288, 1
  store i32 %289, i32* %c, align 4
  br label %266

; <label>:290                                     ; preds = %266
  %291 = load i32* %wbi, align 4
  %292 = icmp ne i32 %291, 0
  br i1 %292, label %294, label %293

; <label>:293                                     ; preds = %290
  store float -1.000000e+00, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  br label %294

; <label>:294                                     ; preds = %293, %290
  br label %295

; <label>:295                                     ; preds = %294, %229
  br label %296

; <label>:296                                     ; preds = %295, %228
  br label %297

; <label>:297                                     ; preds = %296, %197
  %298 = load i32* %type, align 4
  %299 = icmp eq i32 %298, 4265
  br i1 %299, label %300, label %333

; <label>:300                                     ; preds = %297
  %301 = load i32* %len, align 4
  %302 = icmp sgt i32 %301, 66
  br i1 %302, label %303, label %310

; <label>:303                                     ; preds = %300
  %304 = load i32* %wbi, align 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [11 x i8]* @.str172, i32 0, i64 %305
  %307 = load i8* %306, align 1
  %308 = sext i8 %307 to i32
  %309 = sub nsw i32 %308, 48
  store i32 %309, i32* %wbi, align 4
  br label %310

; <label>:310                                     ; preds = %303, %300
  %311 = load %struct._IO_FILE** @ifp, align 8
  %312 = load i32* %wbi, align 4
  %313 = mul nsw i32 %312, 8
  %314 = add nsw i32 2, %313
  %315 = sext i32 %314 to i64
  %316 = call i32 @fseek(%struct._IO_FILE* %311, i64 %315, i32 1)
  store i32 0, i32* %c, align 4
  br label %317

; <label>:317                                     ; preds = %329, %310
  %318 = load i32* %c, align 4
  %319 = icmp slt i32 %318, 4
  br i1 %319, label %320, label %332

; <label>:320                                     ; preds = %317
  %321 = call zeroext i16 @get2()
  %322 = uitofp i16 %321 to float
  %323 = load i32* %c, align 4
  %324 = load i32* %c, align 4
  %325 = ashr i32 %324, 1
  %326 = xor i32 %323, %325
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %327
  store float %322, float* %328, align 4
  br label %329

; <label>:329                                     ; preds = %320
  %330 = load i32* %c, align 4
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %c, align 4
  br label %317

; <label>:332                                     ; preds = %317
  br label %333

; <label>:333                                     ; preds = %332, %297
  %334 = load i32* %type, align 4
  %335 = icmp eq i32 %334, 4144
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = load i32* %wbi, align 4
  %338 = ashr i32 98368, %337
  %339 = and i32 %338, 1
  %340 = icmp ne i32 %339, 0
  br i1 %340, label %341, label %342

; <label>:341                                     ; preds = %336
  call void @ciff_block_1030()
  br label %342

; <label>:342                                     ; preds = %341, %336, %333
  %343 = load i32* %type, align 4
  %344 = icmp eq i32 %343, 4145
  br i1 %344, label %345, label %349

; <label>:345                                     ; preds = %342
  %346 = call zeroext i16 @get2()
  %347 = call zeroext i16 @get2()
  store i16 %347, i16* @raw_width, align 2
  %348 = call zeroext i16 @get2()
  store i16 %348, i16* @raw_height, align 2
  br label %349

; <label>:349                                     ; preds = %345, %342
  %350 = load i32* %type, align 4
  %351 = icmp eq i32 %350, 20521
  br i1 %351, label %352, label %363

; <label>:352                                     ; preds = %349
  %353 = load i32* %len, align 4
  %354 = ashr i32 %353, 16
  %355 = sitofp i32 %354 to float
  store float %355, float* @focal_len, align 4
  %356 = load i32* %len, align 4
  %357 = and i32 %356, 65535
  %358 = icmp eq i32 %357, 2
  br i1 %358, label %359, label %362

; <label>:359                                     ; preds = %352
  %360 = load float* @focal_len, align 4
  %361 = fdiv float %360, 3.200000e+01
  store float %361, float* @focal_len, align 4
  br label %362

; <label>:362                                     ; preds = %359, %352
  br label %363

; <label>:363                                     ; preds = %362, %349
  %364 = load i32* %type, align 4
  %365 = icmp eq i32 %364, 22547
  br i1 %365, label %366, label %369

; <label>:366                                     ; preds = %363
  %367 = load i32* %len, align 4
  %368 = call float @int_to_float(i32 %367)
  store float %368, float* @flash_used, align 4
  br label %369

; <label>:369                                     ; preds = %366, %363
  %370 = load i32* %type, align 4
  %371 = icmp eq i32 %370, 22548
  br i1 %371, label %372, label %375

; <label>:372                                     ; preds = %369
  %373 = load i32* %len, align 4
  %374 = call float @int_to_float(i32 %373)
  store float %374, float* @canon_ev, align 4
  br label %375

; <label>:375                                     ; preds = %372, %369
  %376 = load i32* %type, align 4
  %377 = icmp eq i32 %376, 22551
  br i1 %377, label %378, label %380

; <label>:378                                     ; preds = %375
  %379 = load i32* %len, align 4
  store i32 %379, i32* @shot_order, align 4
  br label %380

; <label>:380                                     ; preds = %378, %375
  %381 = load i32* %type, align 4
  %382 = icmp eq i32 %381, 22580
  br i1 %382, label %383, label %385

; <label>:383                                     ; preds = %380
  %384 = load i32* %len, align 4
  store i32 %384, i32* @unique_id, align 4
  br label %385

; <label>:385                                     ; preds = %383, %380
  %386 = load i32* %type, align 4
  %387 = icmp eq i32 %386, 22542
  br i1 %387, label %388, label %391

; <label>:388                                     ; preds = %385
  %389 = load i32* %len, align 4
  %390 = sext i32 %389 to i64
  store i64 %390, i64* @timestamp, align 8
  br label %391

; <label>:391                                     ; preds = %388, %385
  %392 = load i32* %type, align 4
  %393 = icmp eq i32 %392, 6158
  br i1 %393, label %394, label %397

; <label>:394                                     ; preds = %391
  %395 = call i32 @get4()
  %396 = zext i32 %395 to i64
  store i64 %396, i64* @timestamp, align 8
  br label %397

; <label>:397                                     ; preds = %394, %391
  %398 = load %struct._IO_FILE** @ifp, align 8
  %399 = load i32* %save, align 4
  %400 = sext i32 %399 to i64
  %401 = call i32 @fseek(%struct._IO_FILE* %398, i64 %400, i32 0)
  br label %24

; <label>:402                                     ; preds = %22, %24
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_rollei() #0 {
  %line = alloca [128 x i8], align 16
  %val = alloca i8*, align 8
  %t = alloca %struct.tm, align 8
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 0, i32 0)
  %3 = bitcast %struct.tm* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 56, i32 8, i1 false)
  br label %4

; <label>:4                                       ; preds = %80, %0
  %5 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i8* @fgets(i8* %5, i32 128, %struct._IO_FILE* %6)
  %8 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %9 = call i8* @strchr(i8* %8, i32 61) #10
  store i8* %9, i8** %val, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %4
  %12 = load i8** %val, align 8
  %13 = getelementptr inbounds i8* %12, i32 1
  store i8* %13, i8** %val, align 8
  store i8 0, i8* %12, align 1
  br label %19

; <label>:14                                      ; preds = %4
  %15 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %16 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %17 = call i64 @strlen(i8* %16) #10
  %18 = getelementptr inbounds i8* %15, i64 %17
  store i8* %18, i8** %val, align 8
  br label %19

; <label>:19                                      ; preds = %14, %11
  %20 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %21 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([4 x i8]* @.str173, i32 0, i32 0)) #10
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %29, label %23

; <label>:23                                      ; preds = %19
  %24 = load i8** %val, align 8
  %25 = getelementptr inbounds %struct.tm* %t, i32 0, i32 3
  %26 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %27 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %28 = call i32 (i8*, i8*, ...)* @sscanf(i8* %24, i8* getelementptr inbounds ([9 x i8]* @.str8, i32 0, i32 0), i32* %25, i32* %26, i32* %27) #4
  br label %29

; <label>:29                                      ; preds = %23, %19
  %30 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %31 = call i32 @strcmp(i8* %30, i8* getelementptr inbounds ([4 x i8]* @.str174, i32 0, i32 0)) #10
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %39, label %33

; <label>:33                                      ; preds = %29
  %34 = load i8** %val, align 8
  %35 = getelementptr inbounds %struct.tm* %t, i32 0, i32 2
  %36 = getelementptr inbounds %struct.tm* %t, i32 0, i32 1
  %37 = getelementptr inbounds %struct.tm* %t, i32 0, i32 0
  %38 = call i32 (i8*, i8*, ...)* @sscanf(i8* %34, i8* getelementptr inbounds ([9 x i8]* @.str175, i32 0, i32 0), i32* %35, i32* %36, i32* %37) #4
  br label %39

; <label>:39                                      ; preds = %33, %29
  %40 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %41 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([4 x i8]* @.str176, i32 0, i32 0)) #10
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %47, label %43

; <label>:43                                      ; preds = %39
  %44 = load i8** %val, align 8
  %45 = call i32 @atoi(i8* %44) #10
  %46 = sext i32 %45 to i64
  store i64 %46, i64* @thumb_offset, align 8
  br label %47

; <label>:47                                      ; preds = %43, %39
  %48 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %49 = call i32 @strcmp(i8* %48, i8* getelementptr inbounds ([4 x i8]* @.str177, i32 0, i32 0)) #10
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %55, label %51

; <label>:51                                      ; preds = %47
  %52 = load i8** %val, align 8
  %53 = call i32 @atoi(i8* %52) #10
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* @raw_width, align 2
  br label %55

; <label>:55                                      ; preds = %51, %47
  %56 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %57 = call i32 @strcmp(i8* %56, i8* getelementptr inbounds ([4 x i8]* @.str178, i32 0, i32 0)) #10
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %63, label %59

; <label>:59                                      ; preds = %55
  %60 = load i8** %val, align 8
  %61 = call i32 @atoi(i8* %60) #10
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* @raw_height, align 2
  br label %63

; <label>:63                                      ; preds = %59, %55
  %64 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %65 = call i32 @strcmp(i8* %64, i8* getelementptr inbounds ([4 x i8]* @.str179, i32 0, i32 0)) #10
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %71, label %67

; <label>:67                                      ; preds = %63
  %68 = load i8** %val, align 8
  %69 = call i32 @atoi(i8* %68) #10
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* @thumb_width, align 2
  br label %71

; <label>:71                                      ; preds = %67, %63
  %72 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %73 = call i32 @strcmp(i8* %72, i8* getelementptr inbounds ([4 x i8]* @.str180, i32 0, i32 0)) #10
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %79, label %75

; <label>:75                                      ; preds = %71
  %76 = load i8** %val, align 8
  %77 = call i32 @atoi(i8* %76) #10
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* @thumb_height, align 2
  br label %79

; <label>:79                                      ; preds = %75, %71
  br label %80

; <label>:80                                      ; preds = %79
  %81 = getelementptr inbounds [128 x i8]* %line, i32 0, i32 0
  %82 = call i32 @strncmp(i8* %81, i8* getelementptr inbounds ([5 x i8]* @.str181, i32 0, i32 0), i64 4) #10
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %4, label %84

; <label>:84                                      ; preds = %80
  %85 = load i64* @thumb_offset, align 8
  %86 = load i16* @thumb_width, align 2
  %87 = zext i16 %86 to i32
  %88 = load i16* @thumb_height, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nsw i32 %87, %89
  %91 = mul nsw i32 %90, 2
  %92 = sext i32 %91 to i64
  %93 = add nsw i64 %85, %92
  store i64 %93, i64* @data_offset, align 8
  %94 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %95 = load i32* %94, align 4
  %96 = sub nsw i32 %95, 1900
  store i32 %96, i32* %94, align 4
  %97 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  %98 = load i32* %97, align 4
  %99 = sub nsw i32 %98, 1
  store i32 %99, i32* %97, align 4
  %100 = call i64 @mktime(%struct.tm* %t) #4
  %101 = icmp sgt i64 %100, 0
  br i1 %101, label %102, label %104

; <label>:102                                     ; preds = %84
  %103 = call i64 @mktime(%struct.tm* %t) #4
  store i64 %103, i64* @timestamp, align 8
  br label %104

; <label>:104                                     ; preds = %102, %84
  %105 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str182, i32 0, i32 0)) #4
  %106 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str183, i32 0, i32 0)) #4
  store void (%struct._IO_FILE*)* @rollei_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_sinar_ia() #0 {
  %entries = alloca i32, align 4
  %off = alloca i32, align 4
  %str = alloca [8 x i8], align 1
  %cp = alloca i8*, align 8
  store i16 18761, i16* @order, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 4, i32 0)
  %3 = call i32 @get4()
  store i32 %3, i32* %entries, align 4
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @get4()
  %6 = zext i32 %5 to i64
  %7 = call i32 @fseek(%struct._IO_FILE* %4, i64 %6, i32 0)
  br label %8

; <label>:8                                       ; preds = %38, %0
  %9 = load i32* %entries, align 4
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* %entries, align 4
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %39

; <label>:12                                      ; preds = %8
  %13 = call i32 @get4()
  store i32 %13, i32* %off, align 4
  %14 = call i32 @get4()
  %15 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %16 = load %struct._IO_FILE** @ifp, align 8
  %17 = call i64 @fread(i8* %15, i64 8, i64 1, %struct._IO_FILE* %16)
  %18 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %19 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([5 x i8]* @.str184, i32 0, i32 0)) #10
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %24, label %21

; <label>:21                                      ; preds = %12
  %22 = load i32* %off, align 4
  %23 = sext i32 %22 to i64
  store i64 %23, i64* @meta_offset, align 8
  br label %24

; <label>:24                                      ; preds = %21, %12
  %25 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %26 = call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([6 x i8]* @.str185, i32 0, i32 0)) #10
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %31, label %28

; <label>:28                                      ; preds = %24
  %29 = load i32* %off, align 4
  %30 = sext i32 %29 to i64
  store i64 %30, i64* @thumb_offset, align 8
  br label %31

; <label>:31                                      ; preds = %28, %24
  %32 = getelementptr inbounds [8 x i8]* %str, i32 0, i32 0
  %33 = call i32 @strcmp(i8* %32, i8* getelementptr inbounds ([5 x i8]* @.str186, i32 0, i32 0)) #10
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %38, label %35

; <label>:35                                      ; preds = %31
  %36 = load i32* %off, align 4
  %37 = sext i32 %36 to i64
  store i64 %37, i64* @data_offset, align 8
  br label %38

; <label>:38                                      ; preds = %35, %31
  br label %8

; <label>:39                                      ; preds = %8
  %40 = load %struct._IO_FILE** @ifp, align 8
  %41 = load i64* @meta_offset, align 8
  %42 = add nsw i64 %41, 20
  %43 = call i32 @fseek(%struct._IO_FILE* %40, i64 %42, i32 0)
  %44 = load %struct._IO_FILE** @ifp, align 8
  %45 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 64, i64 1, %struct._IO_FILE* %44)
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 63), align 1
  %46 = call i8* @strchr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i32 32) #10
  store i8* %46, i8** %cp, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %39
  %49 = load i8** %cp, align 8
  %50 = getelementptr inbounds i8* %49, i64 1
  %51 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %50) #4
  %52 = load i8** %cp, align 8
  store i8 0, i8* %52, align 1
  br label %53

; <label>:53                                      ; preds = %48, %39
  %54 = call zeroext i16 @get2()
  store i16 %54, i16* @raw_width, align 2
  %55 = call zeroext i16 @get2()
  store i16 %55, i16* @raw_height, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  %56 = call i32 @get4()
  %57 = call zeroext i16 @get2()
  store i16 %57, i16* @thumb_width, align 2
  %58 = call zeroext i16 @get2()
  store i16 %58, i16* @thumb_height, align 2
  store void (%struct._IO_FILE*)* @ppm_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  store i32 16383, i32* @maximum, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_phase_one(i32 %base) #0 {
  %1 = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %data = alloca i32, align 4
  %save = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %romm_cam = alloca [3 x [3 x float]], align 16
  %cp = alloca i8*, align 8
  store i32 %base, i32* %1, align 4
  call void @llvm.memset.p0i8.i64(i8* bitcast (%struct.anon.1* @ph1 to i8*), i8 0, i64 28, i32 4, i1 false)
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = load i32* %1, align 4
  %4 = sext i32 %3 to i64
  %5 = call i32 @fseek(%struct._IO_FILE* %2, i64 %4, i32 0)
  %6 = call i32 @get4()
  %7 = and i32 %6, 65535
  %8 = trunc i32 %7 to i16
  store i16 %8, i16* @order, align 2
  %9 = call i32 @get4()
  %10 = lshr i32 %9, 8
  %11 = icmp ne i32 %10, 5398903
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %0
  br label %166

; <label>:13                                      ; preds = %0
  %14 = load %struct._IO_FILE** @ifp, align 8
  %15 = call i32 @get4()
  %16 = load i32* %1, align 4
  %17 = add i32 %15, %16
  %18 = zext i32 %17 to i64
  %19 = call i32 @fseek(%struct._IO_FILE* %14, i64 %18, i32 0)
  %20 = call i32 @get4()
  store i32 %20, i32* %entries, align 4
  %21 = call i32 @get4()
  br label %22

; <label>:22                                      ; preds = %142, %13
  %23 = load i32* %entries, align 4
  %24 = add i32 %23, -1
  store i32 %24, i32* %entries, align 4
  %25 = icmp ne i32 %23, 0
  br i1 %25, label %26, label %147

; <label>:26                                      ; preds = %22
  %27 = call i32 @get4()
  store i32 %27, i32* %tag, align 4
  %28 = call i32 @get4()
  store i32 %28, i32* %type, align 4
  %29 = call i32 @get4()
  store i32 %29, i32* %len, align 4
  %30 = call i32 @get4()
  store i32 %30, i32* %data, align 4
  %31 = load %struct._IO_FILE** @ifp, align 8
  %32 = call i64 @ftell(%struct._IO_FILE* %31)
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %save, align 4
  %34 = load %struct._IO_FILE** @ifp, align 8
  %35 = load i32* %1, align 4
  %36 = load i32* %data, align 4
  %37 = add i32 %35, %36
  %38 = zext i32 %37 to i64
  %39 = call i32 @fseek(%struct._IO_FILE* %34, i64 %38, i32 0)
  %40 = load i32* %tag, align 4
  switch i32 %40, label %142 [
    i32 256, label %41
    i32 262, label %49
    i32 263, label %65
    i32 264, label %79
    i32 265, label %82
    i32 266, label %85
    i32 267, label %88
    i32 268, label %91
    i32 269, label %94
    i32 270, label %97
    i32 271, label %99
    i32 272, label %104
    i32 274, label %110
    i32 528, label %113
    i32 538, label %116
    i32 540, label %118
    i32 541, label %123
    i32 546, label %125
    i32 547, label %130
    i32 769, label %134
  ]

; <label>:41                                      ; preds = %26
  %42 = load i32* %data, align 4
  %43 = and i32 %42, 3
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [5 x i8]* @.str187, i32 0, i64 %44
  %46 = load i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = sub nsw i32 %47, 48
  store i32 %48, i32* @flip, align 4
  br label %142

; <label>:49                                      ; preds = %26
  store i32 0, i32* %i, align 4
  br label %50

; <label>:50                                      ; preds = %60, %49
  %51 = load i32* %i, align 4
  %52 = icmp ult i32 %51, 9
  br i1 %52, label %53, label %63

; <label>:53                                      ; preds = %50
  %54 = call double @getreal(i32 11)
  %55 = fptrunc double %54 to float
  %56 = load i32* %i, align 4
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i64 0
  %59 = getelementptr inbounds [3 x float]* %58, i32 0, i64 %57
  store float %55, float* %59, align 4
  br label %60

; <label>:60                                      ; preds = %53
  %61 = load i32* %i, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %i, align 4
  br label %50

; <label>:63                                      ; preds = %50
  %64 = getelementptr inbounds [3 x [3 x float]]* %romm_cam, i32 0, i32 0
  call void @romm_coeff([3 x float]* %64)
  br label %142

; <label>:65                                      ; preds = %26
  store i32 0, i32* %c, align 4
  br label %66

; <label>:66                                      ; preds = %75, %65
  %67 = load i32* %c, align 4
  %68 = icmp ult i32 %67, 3
  br i1 %68, label %69, label %78

; <label>:69                                      ; preds = %66
  %70 = call double @getreal(i32 11)
  %71 = fptrunc double %70 to float
  %72 = load i32* %c, align 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %73
  store float %71, float* %74, align 4
  br label %75

; <label>:75                                      ; preds = %69
  %76 = load i32* %c, align 4
  %77 = add i32 %76, 1
  store i32 %77, i32* %c, align 4
  br label %66

; <label>:78                                      ; preds = %66
  br label %142

; <label>:79                                      ; preds = %26
  %80 = load i32* %data, align 4
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* @raw_width, align 2
  br label %142

; <label>:82                                      ; preds = %26
  %83 = load i32* %data, align 4
  %84 = trunc i32 %83 to i16
  store i16 %84, i16* @raw_height, align 2
  br label %142

; <label>:85                                      ; preds = %26
  %86 = load i32* %data, align 4
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* @left_margin, align 2
  br label %142

; <label>:88                                      ; preds = %26
  %89 = load i32* %data, align 4
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* @top_margin, align 2
  br label %142

; <label>:91                                      ; preds = %26
  %92 = load i32* %data, align 4
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* @width, align 2
  br label %142

; <label>:94                                      ; preds = %26
  %95 = load i32* %data, align 4
  %96 = trunc i32 %95 to i16
  store i16 %96, i16* @height, align 2
  br label %142

; <label>:97                                      ; preds = %26
  %98 = load i32* %data, align 4
  store i32 %98, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  br label %142

; <label>:99                                      ; preds = %26
  %100 = load i32* %data, align 4
  %101 = load i32* %1, align 4
  %102 = add i32 %100, %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* @data_offset, align 8
  br label %142

; <label>:104                                     ; preds = %26
  %105 = load i32* %data, align 4
  %106 = load i32* %1, align 4
  %107 = add i32 %105, %106
  %108 = zext i32 %107 to i64
  store i64 %108, i64* @meta_offset, align 8
  %109 = load i32* %len, align 4
  store i32 %109, i32* @meta_length, align 4
  br label %142

; <label>:110                                     ; preds = %26
  %111 = load i32* %save, align 4
  %112 = sub i32 %111, 4
  store i32 %112, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 1), align 4
  br label %142

; <label>:113                                     ; preds = %26
  %114 = load i32* %data, align 4
  %115 = call float @int_to_float(i32 %114)
  store float %115, float* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 6), align 4
  br label %142

; <label>:116                                     ; preds = %26
  %117 = load i32* %data, align 4
  store i32 %117, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 5), align 4
  br label %142

; <label>:118                                     ; preds = %26
  %119 = load i32* %data, align 4
  %120 = load i32* %1, align 4
  %121 = add i32 %119, %120
  %122 = zext i32 %121 to i64
  store i64 %122, i64* @strip_offset, align 8
  br label %142

; <label>:123                                     ; preds = %26
  %124 = load i32* %data, align 4
  store i32 %124, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 2), align 4
  br label %142

; <label>:125                                     ; preds = %26
  %126 = load i32* %data, align 4
  %127 = load i16* @left_margin, align 2
  %128 = zext i16 %127 to i32
  %129 = sub i32 %126, %128
  store i32 %129, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 4), align 4
  br label %142

; <label>:130                                     ; preds = %26
  %131 = load i32* %data, align 4
  %132 = load i32* %1, align 4
  %133 = add i32 %131, %132
  store i32 %133, i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 3), align 4
  br label %142

; <label>:134                                     ; preds = %26
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 63), align 1
  %135 = load %struct._IO_FILE** @ifp, align 8
  %136 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 1, i64 63, %struct._IO_FILE* %135)
  %137 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str188, i32 0, i32 0)) #10
  store i8* %137, i8** %cp, align 8
  %138 = icmp ne i8* %137, null
  br i1 %138, label %139, label %141

; <label>:139                                     ; preds = %134
  %140 = load i8** %cp, align 8
  store i8 0, i8* %140, align 1
  br label %141

; <label>:141                                     ; preds = %139, %134
  br label %142

; <label>:142                                     ; preds = %141, %26, %130, %125, %123, %118, %116, %113, %110, %104, %99, %97, %94, %91, %88, %85, %82, %79, %78, %63, %41
  %143 = load %struct._IO_FILE** @ifp, align 8
  %144 = load i32* %save, align 4
  %145 = zext i32 %144 to i64
  %146 = call i32 @fseek(%struct._IO_FILE* %143, i64 %145, i32 0)
  br label %22

; <label>:147                                     ; preds = %22
  %148 = load i32* getelementptr inbounds (%struct.anon.1* @ph1, i32 0, i32 0), align 4
  %149 = icmp slt i32 %148, 3
  %150 = select i1 %149, void (...)* bitcast (void ()* @phase_one_load_raw to void (...)*), void (...)* bitcast (void ()* @phase_one_load_raw_c to void (...)*)
  store void (...)* %150, void (...)** @load_raw, align 8
  store i32 65535, i32* @maximum, align 4
  %151 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str189, i32 0, i32 0)) #4
  %152 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %153 = icmp ne i8 %152, 0
  br i1 %153, label %154, label %155

; <label>:154                                     ; preds = %147
  br label %166

; <label>:155                                     ; preds = %147
  %156 = load i16* @raw_height, align 2
  %157 = zext i16 %156 to i32
  switch i32 %157, label %166 [
    i32 2060, label %158
    i32 2682, label %160
    i32 4128, label %162
    i32 5488, label %164
  ]

; <label>:158                                     ; preds = %155
  %159 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str190, i32 0, i32 0)) #4
  br label %166

; <label>:160                                     ; preds = %155
  %161 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str191, i32 0, i32 0)) #4
  br label %166

; <label>:162                                     ; preds = %155
  %163 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str192, i32 0, i32 0)) #4
  br label %166

; <label>:164                                     ; preds = %155
  %165 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str193, i32 0, i32 0)) #4
  br label %166

; <label>:166                                     ; preds = %12, %154, %155, %164, %162, %160, %158
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_fuji(i32 %offset) #0 {
  %1 = alloca i32, align 4
  %entries = alloca i32, align 4
  %tag = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %offset, i32* %1, align 4
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = load i32* %1, align 4
  %4 = sext i32 %3 to i64
  %5 = call i32 @fseek(%struct._IO_FILE* %2, i64 %4, i32 0)
  %6 = call i32 @get4()
  store i32 %6, i32* %entries, align 4
  %7 = load i32* %entries, align 4
  %8 = icmp ugt i32 %7, 255
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %0
  br label %87

; <label>:10                                      ; preds = %0
  br label %11

; <label>:11                                      ; preds = %69, %10
  %12 = load i32* %entries, align 4
  %13 = add i32 %12, -1
  store i32 %13, i32* %entries, align 4
  %14 = icmp ne i32 %12, 0
  br i1 %14, label %15, label %76

; <label>:15                                      ; preds = %11
  %16 = call zeroext i16 @get2()
  %17 = zext i16 %16 to i32
  store i32 %17, i32* %tag, align 4
  %18 = call zeroext i16 @get2()
  %19 = zext i16 %18 to i32
  store i32 %19, i32* %len, align 4
  %20 = load %struct._IO_FILE** @ifp, align 8
  %21 = call i64 @ftell(%struct._IO_FILE* %20)
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %save, align 4
  %23 = load i32* %tag, align 4
  %24 = icmp eq i32 %23, 256
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %15
  %26 = call zeroext i16 @get2()
  store i16 %26, i16* @raw_height, align 2
  %27 = call zeroext i16 @get2()
  store i16 %27, i16* @raw_width, align 2
  br label %51

; <label>:28                                      ; preds = %15
  %29 = load i32* %tag, align 4
  %30 = icmp eq i32 %29, 289
  br i1 %30, label %31, label %42

; <label>:31                                      ; preds = %28
  %32 = call zeroext i16 @get2()
  store i16 %32, i16* @height, align 2
  %33 = call zeroext i16 @get2()
  store i16 %33, i16* @width, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp eq i32 %34, 4284
  br i1 %35, label %36, label %41

; <label>:36                                      ; preds = %31
  %37 = load i16* @width, align 2
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %38, 3
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* @width, align 2
  br label %41

; <label>:41                                      ; preds = %36, %31
  br label %50

; <label>:42                                      ; preds = %28
  %43 = load i32* %tag, align 4
  %44 = icmp eq i32 %43, 304
  br i1 %44, label %45, label %49

; <label>:45                                      ; preds = %42
  %46 = load %struct._IO_FILE** @ifp, align 8
  %47 = call i32 @getc_unlocked(%struct._IO_FILE* %46)
  %48 = ashr i32 %47, 7
  store i32 %48, i32* @fuji_layout, align 4
  br label %49

; <label>:49                                      ; preds = %45, %42
  br label %50

; <label>:50                                      ; preds = %49, %41
  br label %51

; <label>:51                                      ; preds = %50, %25
  %52 = load i32* %tag, align 4
  %53 = icmp eq i32 %52, 12272
  br i1 %53, label %54, label %69

; <label>:54                                      ; preds = %51
  store i32 0, i32* %c, align 4
  br label %55

; <label>:55                                      ; preds = %65, %54
  %56 = load i32* %c, align 4
  %57 = icmp ult i32 %56, 4
  br i1 %57, label %58, label %68

; <label>:58                                      ; preds = %55
  %59 = call zeroext i16 @get2()
  %60 = uitofp i16 %59 to float
  %61 = load i32* %c, align 4
  %62 = xor i32 %61, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %63
  store float %60, float* %64, align 4
  br label %65

; <label>:65                                      ; preds = %58
  %66 = load i32* %c, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %c, align 4
  br label %55

; <label>:68                                      ; preds = %55
  br label %69

; <label>:69                                      ; preds = %68, %51
  %70 = load %struct._IO_FILE** @ifp, align 8
  %71 = load i32* %save, align 4
  %72 = load i32* %len, align 4
  %73 = add i32 %71, %72
  %74 = zext i32 %73 to i64
  %75 = call i32 @fseek(%struct._IO_FILE* %70, i64 %74, i32 0)
  br label %11

; <label>:76                                      ; preds = %11
  %77 = load i32* @fuji_layout, align 4
  %78 = load i16* @height, align 2
  %79 = zext i16 %78 to i32
  %80 = shl i32 %79, %77
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* @height, align 2
  %82 = load i32* @fuji_layout, align 4
  %83 = load i16* @width, align 2
  %84 = zext i16 %83 to i32
  %85 = ashr i32 %84, %82
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* @width, align 2
  br label %87

; <label>:87                                      ; preds = %76, %9
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @parse_jpeg(i32 %offset) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %len = alloca i32, align 4
  %save = alloca i32, align 4
  %hlen = alloca i32, align 4
  %mark = alloca i32, align 4
  store i32 %offset, i32* %2, align 4
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = load i32* %2, align 4
  %5 = sext i32 %4 to i64
  %6 = call i32 @fseek(%struct._IO_FILE* %3, i64 %5, i32 0)
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @getc_unlocked(%struct._IO_FILE* %7)
  %9 = icmp ne i32 %8, 255
  br i1 %9, label %14, label %10

; <label>:10                                      ; preds = %0
  %11 = load %struct._IO_FILE** @ifp, align 8
  %12 = call i32 @getc_unlocked(%struct._IO_FILE* %11)
  %13 = icmp ne i32 %12, 216
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10, %0
  store i32 0, i32* %1
  br label %65

; <label>:15                                      ; preds = %10
  br label %16

; <label>:16                                      ; preds = %55, %15
  %17 = load %struct._IO_FILE** @ifp, align 8
  %18 = call i32 @getc_unlocked(%struct._IO_FILE* %17)
  %19 = icmp eq i32 %18, 255
  br i1 %19, label %20, label %24

; <label>:20                                      ; preds = %16
  %21 = load %struct._IO_FILE** @ifp, align 8
  %22 = call i32 @getc_unlocked(%struct._IO_FILE* %21)
  store i32 %22, i32* %mark, align 4
  %23 = icmp ne i32 %22, 218
  br label %24

; <label>:24                                      ; preds = %20, %16
  %25 = phi i1 [ false, %16 ], [ %23, %20 ]
  br i1 %25, label %26, label %64

; <label>:26                                      ; preds = %24
  store i16 19789, i16* @order, align 2
  %27 = call zeroext i16 @get2()
  %28 = zext i16 %27 to i32
  %29 = sub nsw i32 %28, 2
  store i32 %29, i32* %len, align 4
  %30 = load %struct._IO_FILE** @ifp, align 8
  %31 = call i64 @ftell(%struct._IO_FILE* %30)
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %save, align 4
  %33 = load i32* %mark, align 4
  %34 = icmp eq i32 %33, 192
  br i1 %34, label %38, label %35

; <label>:35                                      ; preds = %26
  %36 = load i32* %mark, align 4
  %37 = icmp eq i32 %36, 195
  br i1 %37, label %38, label %43

; <label>:38                                      ; preds = %35, %26
  %39 = load %struct._IO_FILE** @ifp, align 8
  %40 = call i32 @getc_unlocked(%struct._IO_FILE* %39)
  %41 = call zeroext i16 @get2()
  store i16 %41, i16* @raw_height, align 2
  %42 = call zeroext i16 @get2()
  store i16 %42, i16* @raw_width, align 2
  br label %43

; <label>:43                                      ; preds = %38, %35
  %44 = call zeroext i16 @get2()
  store i16 %44, i16* @order, align 2
  %45 = call i32 @get4()
  store i32 %45, i32* %hlen, align 4
  %46 = call i32 @get4()
  %47 = icmp eq i32 %46, 1212498256
  br i1 %47, label %48, label %55

; <label>:48                                      ; preds = %43
  %49 = load i32* %save, align 4
  %50 = load i32* %hlen, align 4
  %51 = add nsw i32 %49, %50
  %52 = load i32* %len, align 4
  %53 = load i32* %hlen, align 4
  %54 = sub nsw i32 %52, %53
  call void @parse_ciff(i32 %51, i32 %54)
  br label %55

; <label>:55                                      ; preds = %48, %43
  %56 = load i32* %save, align 4
  %57 = add nsw i32 %56, 6
  call void @parse_tiff(i32 %57)
  %58 = load %struct._IO_FILE** @ifp, align 8
  %59 = load i32* %save, align 4
  %60 = load i32* %len, align 4
  %61 = add nsw i32 %59, %60
  %62 = sext i32 %61 to i64
  %63 = call i32 @fseek(%struct._IO_FILE* %58, i64 %62, i32 0)
  br label %16

; <label>:64                                      ; preds = %24
  store i32 1, i32* %1
  br label %65

; <label>:65                                      ; preds = %64, %14
  %66 = load i32* %1
  ret i32 %66
}

; Function Attrs: nounwind uwtable
define void @parse_riff() #0 {
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %end = alloca i32, align 4
  %tag = alloca [4 x i8], align 1
  %date = alloca [64 x i8], align 16
  %month = alloca [64 x i8], align 16
  %t = alloca %struct.tm, align 8
  store i16 18761, i16* @order, align 2
  %1 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %2 = load %struct._IO_FILE** @ifp, align 8
  %3 = call i64 @fread(i8* %1, i64 4, i64 1, %struct._IO_FILE* %2)
  %4 = call i32 @get4()
  store i32 %4, i32* %size, align 4
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i64 @ftell(%struct._IO_FILE* %5)
  %7 = load i32* %size, align 4
  %8 = zext i32 %7 to i64
  %9 = add nsw i64 %6, %8
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %end, align 4
  %11 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %12 = call i32 @memcmp(i8* %11, i8* getelementptr inbounds ([5 x i8]* @.str194, i32 0, i32 0), i64 4) #10
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %0
  %15 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %16 = call i32 @memcmp(i8* %15, i8* getelementptr inbounds ([5 x i8]* @.str195, i32 0, i32 0), i64 4) #10
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %29, label %18

; <label>:18                                      ; preds = %14, %0
  %19 = call i32 @get4()
  br label %20

; <label>:20                                      ; preds = %27, %18
  %21 = load %struct._IO_FILE** @ifp, align 8
  %22 = call i64 @ftell(%struct._IO_FILE* %21)
  %23 = add nsw i64 %22, 7
  %24 = load i32* %end, align 4
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %27, label %28

; <label>:27                                      ; preds = %20
  call void @parse_riff()
  br label %20

; <label>:28                                      ; preds = %20
  br label %122

; <label>:29                                      ; preds = %14
  %30 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %31 = call i32 @memcmp(i8* %30, i8* getelementptr inbounds ([5 x i8]* @.str196, i32 0, i32 0), i64 4) #10
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %61, label %33

; <label>:33                                      ; preds = %29
  br label %34

; <label>:34                                      ; preds = %59, %33
  %35 = load %struct._IO_FILE** @ifp, align 8
  %36 = call i64 @ftell(%struct._IO_FILE* %35)
  %37 = add nsw i64 %36, 7
  %38 = load i32* %end, align 4
  %39 = zext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %41, label %60

; <label>:41                                      ; preds = %34
  %42 = call zeroext i16 @get2()
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %i, align 4
  %44 = call zeroext i16 @get2()
  %45 = zext i16 %44 to i32
  store i32 %45, i32* %size, align 4
  %46 = load i32* %i, align 4
  %47 = add i32 %46, 1
  %48 = lshr i32 %47, 1
  %49 = icmp eq i32 %48, 10
  br i1 %49, label %50, label %54

; <label>:50                                      ; preds = %41
  %51 = load i32* %size, align 4
  %52 = icmp eq i32 %51, 20
  br i1 %52, label %53, label %54

; <label>:53                                      ; preds = %50
  call void @get_timestamp(i32 0)
  br label %59

; <label>:54                                      ; preds = %50, %41
  %55 = load %struct._IO_FILE** @ifp, align 8
  %56 = load i32* %size, align 4
  %57 = zext i32 %56 to i64
  %58 = call i32 @fseek(%struct._IO_FILE* %55, i64 %57, i32 1)
  br label %59

; <label>:59                                      ; preds = %54, %53
  br label %34

; <label>:60                                      ; preds = %34
  br label %121

; <label>:61                                      ; preds = %29
  %62 = getelementptr inbounds [4 x i8]* %tag, i32 0, i32 0
  %63 = call i32 @memcmp(i8* %62, i8* getelementptr inbounds ([5 x i8]* @.str197, i32 0, i32 0), i64 4) #10
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %115, label %65

; <label>:65                                      ; preds = %61
  %66 = load i32* %size, align 4
  %67 = icmp ult i32 %66, 64
  br i1 %67, label %68, label %115

; <label>:68                                      ; preds = %65
  %69 = getelementptr inbounds [64 x i8]* %date, i32 0, i32 0
  %70 = load %struct._IO_FILE** @ifp, align 8
  %71 = call i64 @fread(i8* %69, i64 64, i64 1, %struct._IO_FILE* %70)
  %72 = load i32* %size, align 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [64 x i8]* %date, i32 0, i64 %73
  store i8 0, i8* %74, align 1
  %75 = bitcast %struct.tm* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %75, i8 0, i64 56, i32 8, i1 false)
  %76 = getelementptr inbounds [64 x i8]* %date, i32 0, i32 0
  %77 = getelementptr inbounds [64 x i8]* %month, i32 0, i32 0
  %78 = getelementptr inbounds %struct.tm* %t, i32 0, i32 3
  %79 = getelementptr inbounds %struct.tm* %t, i32 0, i32 2
  %80 = getelementptr inbounds %struct.tm* %t, i32 0, i32 1
  %81 = getelementptr inbounds %struct.tm* %t, i32 0, i32 0
  %82 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %83 = call i32 (i8*, i8*, ...)* @sscanf(i8* %76, i8* getelementptr inbounds ([22 x i8]* @.str198, i32 0, i32 0), i8* %77, i32* %78, i32* %79, i32* %80, i32* %81, i32* %82) #4
  %84 = icmp eq i32 %83, 6
  br i1 %84, label %85, label %114

; <label>:85                                      ; preds = %68
  store i32 0, i32* %i, align 4
  br label %86

; <label>:86                                      ; preds = %100, %85
  %87 = load i32* %i, align 4
  %88 = icmp ult i32 %87, 12
  br i1 %88, label %89, label %97

; <label>:89                                      ; preds = %86
  %90 = load i32* %i, align 4
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [12 x [4 x i8]]* @parse_riff.mon, i32 0, i64 %91
  %93 = getelementptr inbounds [4 x i8]* %92, i32 0, i32 0
  %94 = getelementptr inbounds [64 x i8]* %month, i32 0, i32 0
  %95 = call i32 @strcasecmp(i8* %93, i8* %94) #10
  %96 = icmp ne i32 %95, 0
  br label %97

; <label>:97                                      ; preds = %89, %86
  %98 = phi i1 [ false, %86 ], [ %96, %89 ]
  br i1 %98, label %99, label %103

; <label>:99                                      ; preds = %97
  br label %100

; <label>:100                                     ; preds = %99
  %101 = load i32* %i, align 4
  %102 = add i32 %101, 1
  store i32 %102, i32* %i, align 4
  br label %86

; <label>:103                                     ; preds = %97
  %104 = load i32* %i, align 4
  %105 = getelementptr inbounds %struct.tm* %t, i32 0, i32 4
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds %struct.tm* %t, i32 0, i32 5
  %107 = load i32* %106, align 4
  %108 = sub nsw i32 %107, 1900
  store i32 %108, i32* %106, align 4
  %109 = call i64 @mktime(%struct.tm* %t) #4
  %110 = icmp sgt i64 %109, 0
  br i1 %110, label %111, label %113

; <label>:111                                     ; preds = %103
  %112 = call i64 @mktime(%struct.tm* %t) #4
  store i64 %112, i64* @timestamp, align 8
  br label %113

; <label>:113                                     ; preds = %111, %103
  br label %114

; <label>:114                                     ; preds = %113, %68
  br label %120

; <label>:115                                     ; preds = %65, %61
  %116 = load %struct._IO_FILE** @ifp, align 8
  %117 = load i32* %size, align 4
  %118 = zext i32 %117 to i64
  %119 = call i32 @fseek(%struct._IO_FILE* %116, i64 %118, i32 1)
  br label %120

; <label>:120                                     ; preds = %115, %114
  br label %121

; <label>:121                                     ; preds = %120, %60
  br label %122

; <label>:122                                     ; preds = %121, %28
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define void @parse_smal(i32 %offset, i32 %fsize) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %ver = alloca i32, align 4
  store i32 %offset, i32* %1, align 4
  store i32 %fsize, i32* %2, align 4
  %3 = load %struct._IO_FILE** @ifp, align 8
  %4 = load i32* %1, align 4
  %5 = add nsw i32 %4, 2
  %6 = sext i32 %5 to i64
  %7 = call i32 @fseek(%struct._IO_FILE* %3, i64 %6, i32 0)
  store i16 18761, i16* @order, align 2
  %8 = load %struct._IO_FILE** @ifp, align 8
  %9 = call i32 @getc_unlocked(%struct._IO_FILE* %8)
  store i32 %9, i32* %ver, align 4
  %10 = load i32* %ver, align 4
  %11 = icmp eq i32 %10, 6
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %0
  %13 = load %struct._IO_FILE** @ifp, align 8
  %14 = call i32 @fseek(%struct._IO_FILE* %13, i64 5, i32 1)
  br label %15

; <label>:15                                      ; preds = %12, %0
  %16 = call i32 @get4()
  %17 = load i32* %2, align 4
  %18 = icmp ne i32 %16, %17
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %15
  br label %43

; <label>:20                                      ; preds = %15
  %21 = load i32* %ver, align 4
  %22 = icmp sgt i32 %21, 6
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %20
  %24 = call i32 @get4()
  %25 = zext i32 %24 to i64
  store i64 %25, i64* @data_offset, align 8
  br label %26

; <label>:26                                      ; preds = %23, %20
  %27 = call zeroext i16 @get2()
  store i16 %27, i16* @height, align 2
  store i16 %27, i16* @raw_height, align 2
  %28 = call zeroext i16 @get2()
  store i16 %28, i16* @width, align 2
  store i16 %28, i16* @raw_width, align 2
  %29 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str199, i32 0, i32 0)) #4
  %30 = load i32* %ver, align 4
  %31 = load i16* @width, align 2
  %32 = zext i16 %31 to i32
  %33 = load i16* @height, align 2
  %34 = zext i16 %33 to i32
  %35 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str200, i32 0, i32 0), i32 %30, i32 %32, i32 %34) #4
  %36 = load i32* %ver, align 4
  %37 = icmp eq i32 %36, 6
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %26
  store void (...)* bitcast (void ()* @smal_v6_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %39

; <label>:39                                      ; preds = %38, %26
  %40 = load i32* %ver, align 4
  %41 = icmp eq i32 %40, 9
  br i1 %41, label %42, label %43

; <label>:42                                      ; preds = %39
  store void (...)* bitcast (void ()* @smal_v9_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %43

; <label>:43                                      ; preds = %19, %42, %39
  ret void
}

; Function Attrs: nounwind uwtable
define void @parse_cine() #0 {
  %off_head = alloca i32, align 4
  %off_setup = alloca i32, align 4
  %off_image = alloca i32, align 4
  %i = alloca i32, align 4
  store i16 18761, i16* @order, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 4, i32 0)
  %3 = call zeroext i16 @get2()
  %4 = zext i16 %3 to i32
  %5 = icmp eq i32 %4, 2
  %6 = zext i1 %5 to i32
  store i32 %6, i32* @is_raw, align 4
  %7 = load %struct._IO_FILE** @ifp, align 8
  %8 = call i32 @fseek(%struct._IO_FILE* %7, i64 14, i32 1)
  %9 = call i32 @get4()
  %10 = load i32* @is_raw, align 4
  %11 = mul i32 %10, %9
  store i32 %11, i32* @is_raw, align 4
  %12 = call i32 @get4()
  store i32 %12, i32* %off_head, align 4
  %13 = call i32 @get4()
  store i32 %13, i32* %off_setup, align 4
  %14 = call i32 @get4()
  store i32 %14, i32* %off_image, align 4
  %15 = call i32 @get4()
  %16 = zext i32 %15 to i64
  store i64 %16, i64* @timestamp, align 8
  %17 = call i32 @get4()
  store i32 %17, i32* %i, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %0
  %20 = load i32* %i, align 4
  %21 = zext i32 %20 to i64
  store i64 %21, i64* @timestamp, align 8
  br label %22

; <label>:22                                      ; preds = %19, %0
  %23 = load %struct._IO_FILE** @ifp, align 8
  %24 = load i32* %off_head, align 4
  %25 = add i32 %24, 4
  %26 = zext i32 %25 to i64
  %27 = call i32 @fseek(%struct._IO_FILE* %23, i64 %26, i32 0)
  %28 = call i32 @get4()
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* @raw_width, align 2
  %30 = call i32 @get4()
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* @raw_height, align 2
  %32 = call zeroext i16 @get2()
  %33 = call zeroext i16 @get2()
  %34 = zext i16 %33 to i32
  switch i32 %34, label %37 [
    i32 8, label %35
    i32 16, label %36
  ]

; <label>:35                                      ; preds = %22
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %37

; <label>:36                                      ; preds = %22
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %37

; <label>:37                                      ; preds = %36, %22, %35
  %38 = load %struct._IO_FILE** @ifp, align 8
  %39 = load i32* %off_setup, align 4
  %40 = add i32 %39, 792
  %41 = zext i32 %40 to i64
  %42 = call i32 @fseek(%struct._IO_FILE* %38, i64 %41, i32 0)
  %43 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str201, i32 0, i32 0)) #4
  %44 = call i32 @get4()
  %45 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32 %44) #4
  %46 = load %struct._IO_FILE** @ifp, align 8
  %47 = call i32 @fseek(%struct._IO_FILE* %46, i64 12, i32 1)
  %48 = call i32 @get4()
  store i32 %48, i32* %i, align 4
  %49 = and i32 %48, 16777215
  switch i32 %49, label %52 [
    i32 3, label %50
    i32 4, label %51
  ]

; <label>:50                                      ; preds = %37
  store i32 -1802201964, i32* @filters, align 4
  br label %53

; <label>:51                                      ; preds = %37
  store i32 1229539657, i32* @filters, align 4
  br label %53

; <label>:52                                      ; preds = %37
  store i32 0, i32* @is_raw, align 4
  br label %53

; <label>:53                                      ; preds = %52, %51, %50
  %54 = load %struct._IO_FILE** @ifp, align 8
  %55 = call i32 @fseek(%struct._IO_FILE* %54, i64 72, i32 1)
  %56 = call i32 @get4()
  %57 = add i32 %56, 3600
  %58 = urem i32 %57, 360
  switch i32 %58, label %63 [
    i32 270, label %59
    i32 180, label %60
    i32 90, label %61
    i32 0, label %62
  ]

; <label>:59                                      ; preds = %53
  store i32 4, i32* @flip, align 4
  br label %63

; <label>:60                                      ; preds = %53
  store i32 1, i32* @flip, align 4
  br label %63

; <label>:61                                      ; preds = %53
  store i32 7, i32* @flip, align 4
  br label %63

; <label>:62                                      ; preds = %53
  store i32 2, i32* @flip, align 4
  br label %63

; <label>:63                                      ; preds = %62, %53, %61, %60, %59
  %64 = call double @getreal(i32 11)
  %65 = fptrunc double %64 to float
  store float %65, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %66 = call double @getreal(i32 11)
  %67 = fptrunc double %66 to float
  store float %67, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %68 = call i32 @get4()
  %69 = shl i32 -1, %68
  %70 = xor i32 %69, -1
  store i32 %70, i32* @maximum, align 4
  %71 = load %struct._IO_FILE** @ifp, align 8
  %72 = call i32 @fseek(%struct._IO_FILE* %71, i64 668, i32 1)
  %73 = call i32 @get4()
  %74 = uitofp i32 %73 to double
  %75 = fdiv double %74, 1.000000e+09
  %76 = fptrunc double %75 to float
  store float %76, float* @shutter, align 4
  %77 = load %struct._IO_FILE** @ifp, align 8
  %78 = load i32* %off_image, align 4
  %79 = zext i32 %78 to i64
  %80 = call i32 @fseek(%struct._IO_FILE* %77, i64 %79, i32 0)
  %81 = load i32* @shot_select, align 4
  %82 = load i32* @is_raw, align 4
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %90

; <label>:84                                      ; preds = %63
  %85 = load %struct._IO_FILE** @ifp, align 8
  %86 = load i32* @shot_select, align 4
  %87 = mul i32 %86, 8
  %88 = zext i32 %87 to i64
  %89 = call i32 @fseek(%struct._IO_FILE* %85, i64 %88, i32 1)
  br label %90

; <label>:90                                      ; preds = %84, %63
  %91 = call i32 @get4()
  %92 = zext i32 %91 to i64
  %93 = add nsw i64 %92, 8
  store i64 %93, i64* @data_offset, align 8
  %94 = call i32 @get4()
  %95 = zext i32 %94 to i64
  %96 = shl i64 %95, 32
  %97 = load i64* @data_offset, align 8
  %98 = add nsw i64 %97, %96
  store i64 %98, i64* @data_offset, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @foveon_gets(i32 %offset, i8* %str, i32 %len) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %offset, i32* %1, align 4
  store i8* %str, i8** %2, align 8
  store i32 %len, i32* %3, align 4
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = load i32* %1, align 4
  %6 = sext i32 %5 to i64
  %7 = call i32 @fseek(%struct._IO_FILE* %4, i64 %6, i32 0)
  store i32 0, i32* %i, align 4
  br label %8

; <label>:8                                       ; preds = %24, %0
  %9 = load i32* %i, align 4
  %10 = load i32* %3, align 4
  %11 = sub nsw i32 %10, 1
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %27

; <label>:13                                      ; preds = %8
  %14 = call zeroext i16 @get2()
  %15 = trunc i16 %14 to i8
  %16 = load i32* %i, align 4
  %17 = sext i32 %16 to i64
  %18 = load i8** %2, align 8
  %19 = getelementptr inbounds i8* %18, i64 %17
  store i8 %15, i8* %19, align 1
  %20 = sext i8 %15 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %13
  br label %27

; <label>:23                                      ; preds = %13
  br label %24

; <label>:24                                      ; preds = %23
  %25 = load i32* %i, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %i, align 4
  br label %8

; <label>:27                                      ; preds = %22, %8
  %28 = load i32* %i, align 4
  %29 = sext i32 %28 to i64
  %30 = load i8** %2, align 8
  %31 = getelementptr inbounds i8* %30, i64 %29
  store i8 0, i8* %31, align 1
  %32 = load i8** %2, align 8
  ret i8* %32
}

; Function Attrs: nounwind uwtable
define void @parse_foveon() #0 {
  %entries = alloca i32, align 4
  %img = alloca i32, align 4
  %off = alloca i32, align 4
  %len = alloca i32, align 4
  %tag = alloca i32, align 4
  %save = alloca i32, align 4
  %i = alloca i32, align 4
  %wide = alloca i32, align 4
  %high = alloca i32, align 4
  %pent = alloca i32, align 4
  %poff = alloca [256 x [2 x i32]], align 16
  %name = alloca [64 x i8], align 16
  %value = alloca [64 x i8], align 16
  store i32 0, i32* %img, align 4
  store i16 18761, i16* @order, align 2
  %1 = load %struct._IO_FILE** @ifp, align 8
  %2 = call i32 @fseek(%struct._IO_FILE* %1, i64 36, i32 0)
  %3 = call i32 @get4()
  store i32 %3, i32* @flip, align 4
  %4 = load %struct._IO_FILE** @ifp, align 8
  %5 = call i32 @fseek(%struct._IO_FILE* %4, i64 -4, i32 2)
  %6 = load %struct._IO_FILE** @ifp, align 8
  %7 = call i32 @get4()
  %8 = zext i32 %7 to i64
  %9 = call i32 @fseek(%struct._IO_FILE* %6, i64 %8, i32 0)
  %10 = call i32 @get4()
  %11 = icmp ne i32 %10, 1682130259
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %0
  br label %235

; <label>:13                                      ; preds = %0
  %14 = call i32 @get4()
  %15 = call i32 @get4()
  store i32 %15, i32* %entries, align 4
  br label %16

; <label>:16                                      ; preds = %229, %13
  %17 = load i32* %entries, align 4
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* %entries, align 4
  %19 = icmp ne i32 %17, 0
  br i1 %19, label %20, label %234

; <label>:20                                      ; preds = %16
  %21 = call i32 @get4()
  store i32 %21, i32* %off, align 4
  %22 = call i32 @get4()
  store i32 %22, i32* %len, align 4
  %23 = call i32 @get4()
  store i32 %23, i32* %tag, align 4
  %24 = load %struct._IO_FILE** @ifp, align 8
  %25 = call i64 @ftell(%struct._IO_FILE* %24)
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %save, align 4
  %27 = load %struct._IO_FILE** @ifp, align 8
  %28 = load i32* %off, align 4
  %29 = sext i32 %28 to i64
  %30 = call i32 @fseek(%struct._IO_FILE* %27, i64 %29, i32 0)
  %31 = call i32 @get4()
  %32 = load i32* %tag, align 4
  %33 = shl i32 %32, 24
  %34 = or i32 541279571, %33
  %35 = icmp ne i32 %31, %34
  br i1 %35, label %36, label %37

; <label>:36                                      ; preds = %20
  br label %235

; <label>:37                                      ; preds = %20
  %38 = load i32* %tag, align 4
  switch i32 %38, label %229 [
    i32 1195461961, label %39
    i32 843140425, label %39
    i32 1179468099, label %101
    i32 1347375696, label %111
  ]

; <label>:39                                      ; preds = %37, %37
  %40 = load %struct._IO_FILE** @ifp, align 8
  %41 = call i32 @fseek(%struct._IO_FILE* %40, i64 12, i32 1)
  %42 = call i32 @get4()
  store i32 %42, i32* %wide, align 4
  %43 = call i32 @get4()
  store i32 %43, i32* %high, align 4
  %44 = load i32* %wide, align 4
  %45 = load i16* @raw_width, align 2
  %46 = zext i16 %45 to i32
  %47 = icmp sgt i32 %44, %46
  br i1 %47, label %48, label %61

; <label>:48                                      ; preds = %39
  %49 = load i32* %high, align 4
  %50 = load i16* @raw_height, align 2
  %51 = zext i16 %50 to i32
  %52 = icmp sgt i32 %49, %51
  br i1 %52, label %53, label %61

; <label>:53                                      ; preds = %48
  %54 = load i32* %wide, align 4
  %55 = trunc i32 %54 to i16
  store i16 %55, i16* @raw_width, align 2
  %56 = load i32* %high, align 4
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* @raw_height, align 2
  %58 = load i32* %off, align 4
  %59 = add nsw i32 %58, 24
  %60 = sext i32 %59 to i64
  store i64 %60, i64* @data_offset, align 8
  br label %61

; <label>:61                                      ; preds = %53, %48, %39
  %62 = load %struct._IO_FILE** @ifp, align 8
  %63 = load i32* %off, align 4
  %64 = add nsw i32 %63, 28
  %65 = sext i32 %64 to i64
  %66 = call i32 @fseek(%struct._IO_FILE* %62, i64 %65, i32 0)
  %67 = load %struct._IO_FILE** @ifp, align 8
  %68 = call i32 @getc_unlocked(%struct._IO_FILE* %67)
  %69 = icmp eq i32 %68, 255
  br i1 %69, label %70, label %85

; <label>:70                                      ; preds = %61
  %71 = load %struct._IO_FILE** @ifp, align 8
  %72 = call i32 @getc_unlocked(%struct._IO_FILE* %71)
  %73 = icmp eq i32 %72, 216
  br i1 %73, label %74, label %85

; <label>:74                                      ; preds = %70
  %75 = load i32* @thumb_length, align 4
  %76 = load i32* %len, align 4
  %77 = sub nsw i32 %76, 28
  %78 = icmp ult i32 %75, %77
  br i1 %78, label %79, label %85

; <label>:79                                      ; preds = %74
  %80 = load i32* %off, align 4
  %81 = add nsw i32 %80, 28
  %82 = sext i32 %81 to i64
  store i64 %82, i64* @thumb_offset, align 8
  %83 = load i32* %len, align 4
  %84 = sub nsw i32 %83, 28
  store i32 %84, i32* @thumb_length, align 4
  store void (%struct._IO_FILE*)* @jpeg_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %85

; <label>:85                                      ; preds = %79, %74, %70, %61
  %86 = load i32* %img, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %img, align 4
  %88 = icmp eq i32 %87, 2
  br i1 %88, label %89, label %100

; <label>:89                                      ; preds = %85
  %90 = load i32* @thumb_length, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %100, label %92

; <label>:92                                      ; preds = %89
  %93 = load i32* %off, align 4
  %94 = add nsw i32 %93, 24
  %95 = sext i32 %94 to i64
  store i64 %95, i64* @thumb_offset, align 8
  %96 = load i32* %wide, align 4
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* @thumb_width, align 2
  %98 = load i32* %high, align 4
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* @thumb_height, align 2
  store void (%struct._IO_FILE*)* @foveon_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  br label %100

; <label>:100                                     ; preds = %92, %89, %85
  br label %229

; <label>:101                                     ; preds = %37
  %102 = load i32* %off, align 4
  %103 = add nsw i32 %102, 24
  %104 = sext i32 %103 to i64
  store i64 %104, i64* @meta_offset, align 8
  %105 = load i32* %len, align 4
  %106 = sub nsw i32 %105, 28
  store i32 %106, i32* @meta_length, align 4
  %107 = load i32* @meta_length, align 4
  %108 = icmp ugt i32 %107, 131072
  br i1 %108, label %109, label %110

; <label>:109                                     ; preds = %101
  store i32 131072, i32* @meta_length, align 4
  br label %110

; <label>:110                                     ; preds = %109, %101
  br label %229

; <label>:111                                     ; preds = %37
  %112 = call i32 @get4()
  %113 = call i32 @get4()
  store i32 %113, i32* %pent, align 4
  %114 = load %struct._IO_FILE** @ifp, align 8
  %115 = call i32 @fseek(%struct._IO_FILE* %114, i64 12, i32 1)
  %116 = load i32* %pent, align 4
  %117 = mul nsw i32 %116, 8
  %118 = add nsw i32 %117, 24
  %119 = load i32* %off, align 4
  %120 = add nsw i32 %119, %118
  store i32 %120, i32* %off, align 4
  %121 = load i32* %pent, align 4
  %122 = icmp ugt i32 %121, 256
  br i1 %122, label %123, label %124

; <label>:123                                     ; preds = %111
  store i32 256, i32* %pent, align 4
  br label %124

; <label>:124                                     ; preds = %123, %111
  store i32 0, i32* %i, align 4
  br label %125

; <label>:125                                     ; preds = %139, %124
  %126 = load i32* %i, align 4
  %127 = load i32* %pent, align 4
  %128 = mul nsw i32 %127, 2
  %129 = icmp slt i32 %126, %128
  br i1 %129, label %130, label %142

; <label>:130                                     ; preds = %125
  %131 = load i32* %off, align 4
  %132 = call i32 @get4()
  %133 = mul i32 %132, 2
  %134 = add i32 %131, %133
  %135 = load i32* %i, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [256 x [2 x i32]]* %poff, i32 0, i64 0
  %138 = getelementptr inbounds [2 x i32]* %137, i32 0, i64 %136
  store i32 %134, i32* %138, align 4
  br label %139

; <label>:139                                     ; preds = %130
  %140 = load i32* %i, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %i, align 4
  br label %125

; <label>:142                                     ; preds = %125
  store i32 0, i32* %i, align 4
  br label %143

; <label>:143                                     ; preds = %225, %142
  %144 = load i32* %i, align 4
  %145 = load i32* %pent, align 4
  %146 = icmp slt i32 %144, %145
  br i1 %146, label %147, label %228

; <label>:147                                     ; preds = %143
  %148 = load i32* %i, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [256 x [2 x i32]]* %poff, i32 0, i64 %149
  %151 = getelementptr inbounds [2 x i32]* %150, i32 0, i64 0
  %152 = load i32* %151, align 4
  %153 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %154 = call i8* @foveon_gets(i32 %152, i8* %153, i32 64)
  %155 = load i32* %i, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [256 x [2 x i32]]* %poff, i32 0, i64 %156
  %158 = getelementptr inbounds [2 x i32]* %157, i32 0, i64 1
  %159 = load i32* %158, align 4
  %160 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %161 = call i8* @foveon_gets(i32 %159, i8* %160, i32 64)
  %162 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %163 = call i32 @strcmp(i8* %162, i8* getelementptr inbounds ([4 x i8]* @.str202, i32 0, i32 0)) #10
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %169, label %165

; <label>:165                                     ; preds = %147
  %166 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %167 = call i32 @atoi(i8* %166) #10
  %168 = sitofp i32 %167 to float
  store float %168, float* @iso_speed, align 4
  br label %169

; <label>:169                                     ; preds = %165, %147
  %170 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %171 = call i32 @strcmp(i8* %170, i8* getelementptr inbounds ([9 x i8]* @.str203, i32 0, i32 0)) #10
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %176, label %173

; <label>:173                                     ; preds = %169
  %174 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %175 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %174) #4
  br label %176

; <label>:176                                     ; preds = %173, %169
  %177 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %178 = call i32 @strcmp(i8* %177, i8* getelementptr inbounds ([9 x i8]* @.str204, i32 0, i32 0)) #10
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %183, label %180

; <label>:180                                     ; preds = %176
  %181 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %182 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %181) #4
  br label %183

; <label>:183                                     ; preds = %180, %176
  %184 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %185 = call i32 @strcmp(i8* %184, i8* getelementptr inbounds ([8 x i8]* @.str205, i32 0, i32 0)) #10
  %186 = icmp ne i32 %185, 0
  br i1 %186, label %190, label %187

; <label>:187                                     ; preds = %183
  %188 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %189 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i8* %188) #4
  br label %190

; <label>:190                                     ; preds = %187, %183
  %191 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %192 = call i32 @strcmp(i8* %191, i8* getelementptr inbounds ([5 x i8]* @.str206, i32 0, i32 0)) #10
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %198, label %194

; <label>:194                                     ; preds = %190
  %195 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %196 = call i32 @atoi(i8* %195) #10
  %197 = sext i32 %196 to i64
  store i64 %197, i64* @timestamp, align 8
  br label %198

; <label>:198                                     ; preds = %194, %190
  %199 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %200 = call i32 @strcmp(i8* %199, i8* getelementptr inbounds ([8 x i8]* @.str207, i32 0, i32 0)) #10
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %208, label %202

; <label>:202                                     ; preds = %198
  %203 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %204 = call i32 @atoi(i8* %203) #10
  %205 = sitofp i32 %204 to double
  %206 = fdiv double %205, 1.000000e+06
  %207 = fptrunc double %206 to float
  store float %207, float* @shutter, align 4
  br label %208

; <label>:208                                     ; preds = %202, %198
  %209 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %210 = call i32 @strcmp(i8* %209, i8* getelementptr inbounds ([9 x i8]* @.str208, i32 0, i32 0)) #10
  %211 = icmp ne i32 %210, 0
  br i1 %211, label %216, label %212

; <label>:212                                     ; preds = %208
  %213 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %214 = call double @atof(i8* %213) #10
  %215 = fptrunc double %214 to float
  store float %215, float* @aperture, align 4
  br label %216

; <label>:216                                     ; preds = %212, %208
  %217 = getelementptr inbounds [64 x i8]* %name, i32 0, i32 0
  %218 = call i32 @strcmp(i8* %217, i8* getelementptr inbounds ([8 x i8]* @.str209, i32 0, i32 0)) #10
  %219 = icmp ne i32 %218, 0
  br i1 %219, label %224, label %220

; <label>:220                                     ; preds = %216
  %221 = getelementptr inbounds [64 x i8]* %value, i32 0, i32 0
  %222 = call double @atof(i8* %221) #10
  %223 = fptrunc double %222 to float
  store float %223, float* @focal_len, align 4
  br label %224

; <label>:224                                     ; preds = %220, %216
  br label %225

; <label>:225                                     ; preds = %224
  %226 = load i32* %i, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %i, align 4
  br label %143

; <label>:228                                     ; preds = %143
  br label %229

; <label>:229                                     ; preds = %228, %37, %110, %100
  %230 = load %struct._IO_FILE** @ifp, align 8
  %231 = load i32* %save, align 4
  %232 = sext i32 %231 to i64
  %233 = call i32 @fseek(%struct._IO_FILE* %230, i64 %232, i32 0)
  br label %16

; <label>:234                                     ; preds = %16
  store i32 1, i32* @is_foveon, align 4
  br label %235

; <label>:235                                     ; preds = %234, %36, %12
  ret void
}

; Function Attrs: nounwind uwtable
define void @jpeg_thumb(%struct._IO_FILE* %tfp) #0 {
  %1 = alloca %struct._IO_FILE*, align 8
  %thumb = alloca i8*, align 8
  %exif = alloca [5 x i16], align 2
  %th = alloca %struct.tiff_hdr, align 4
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %1, align 8
  %2 = load i32* @thumb_length, align 4
  %3 = zext i32 %2 to i64
  %4 = call noalias i8* @malloc(i64 %3) #4
  store i8* %4, i8** %thumb, align 8
  %5 = load i8** %thumb, align 8
  call void @merror(i8* %5, i8* getelementptr inbounds ([13 x i8]* @.str608, i32 0, i32 0))
  %6 = load i8** %thumb, align 8
  %7 = load i32* @thumb_length, align 4
  %8 = zext i32 %7 to i64
  %9 = load %struct._IO_FILE** @ifp, align 8
  %10 = call i64 @fread(i8* %6, i64 1, i64 %8, %struct._IO_FILE* %9)
  %11 = load %struct._IO_FILE** %1, align 8
  %12 = call i32 @fputc(i32 255, %struct._IO_FILE* %11)
  %13 = load %struct._IO_FILE** %1, align 8
  %14 = call i32 @fputc(i32 216, %struct._IO_FILE* %13)
  %15 = load i8** %thumb, align 8
  %16 = getelementptr inbounds i8* %15, i64 6
  %17 = call i32 @strcmp(i8* %16, i8* getelementptr inbounds ([5 x i8]* @.str429, i32 0, i32 0)) #10
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %30

; <label>:19                                      ; preds = %0
  %20 = bitcast [5 x i16]* %exif to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* getelementptr inbounds ([11 x i8]* @.str609, i32 0, i32 0), i64 10, i32 1, i1 false)
  %21 = call zeroext i16 @htons(i16 zeroext 1384) #9
  %22 = getelementptr inbounds [5 x i16]* %exif, i32 0, i64 1
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds [5 x i16]* %exif, i32 0, i32 0
  %24 = bitcast i16* %23 to i8*
  %25 = load %struct._IO_FILE** %1, align 8
  %26 = call i64 @fwrite(i8* %24, i64 1, i64 10, %struct._IO_FILE* %25)
  call void @tiff_head(%struct.tiff_hdr* %th, i32 0)
  %27 = bitcast %struct.tiff_hdr* %th to i8*
  %28 = load %struct._IO_FILE** %1, align 8
  %29 = call i64 @fwrite(i8* %27, i64 1, i64 1376, %struct._IO_FILE* %28)
  br label %30

; <label>:30                                      ; preds = %19, %0
  %31 = load i8** %thumb, align 8
  %32 = getelementptr inbounds i8* %31, i64 2
  %33 = load i32* @thumb_length, align 4
  %34 = sub i32 %33, 2
  %35 = zext i32 %34 to i64
  %36 = load %struct._IO_FILE** %1, align 8
  %37 = call i64 @fwrite(i8* %32, i64 1, i64 %35, %struct._IO_FILE* %36)
  %38 = load i8** %thumb, align 8
  call void @free(i8* %38) #4
  ret void
}

; Function Attrs: nounwind readonly
declare double @atof(i8*) #6

; Function Attrs: nounwind uwtable
define void @adobe_coeff(i8* %make, i8* %model) #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %cam_xyz = alloca [4 x [3 x double]], align 16
  %name = alloca [130 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %make, i8** %1, align 8
  store i8* %model, i8** %2, align 8
  %3 = getelementptr inbounds [130 x i8]* %name, i32 0, i32 0
  %4 = load i8** %1, align 8
  %5 = load i8** %2, align 8
  %6 = call i32 (i8*, i8*, ...)* @sprintf(i8* %3, i8* getelementptr inbounds ([6 x i8]* @.str419, i32 0, i32 0), i8* %4, i8* %5) #4
  store i32 0, i32* %i, align 4
  br label %7

; <label>:7                                       ; preds = %80, %0
  %8 = load i32* %i, align 4
  %9 = sext i32 %8 to i64
  %10 = icmp ult i64 %9, 211
  br i1 %10, label %11, label %83

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds [130 x i8]* %name, i32 0, i32 0
  %13 = load i32* %i, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %14
  %16 = getelementptr inbounds %struct.anon.3* %15, i32 0, i32 0
  %17 = load i8** %16, align 8
  %18 = load i32* %i, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %19
  %21 = getelementptr inbounds %struct.anon.3* %20, i32 0, i32 0
  %22 = load i8** %21, align 8
  %23 = call i64 @strlen(i8* %22) #10
  %24 = call i32 @strncmp(i8* %12, i8* %17, i64 %23) #10
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %79, label %26

; <label>:26                                      ; preds = %11
  %27 = load i32* %i, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %28
  %30 = getelementptr inbounds %struct.anon.3* %29, i32 0, i32 1
  %31 = load i16* %30, align 2
  %32 = icmp ne i16 %31, 0
  br i1 %32, label %33, label %40

; <label>:33                                      ; preds = %26
  %34 = load i32* %i, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %35
  %37 = getelementptr inbounds %struct.anon.3* %36, i32 0, i32 1
  %38 = load i16* %37, align 2
  %39 = zext i16 %38 to i32
  store i32 %39, i32* @black, align 4
  br label %40

; <label>:40                                      ; preds = %33, %26
  %41 = load i32* %i, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %42
  %44 = getelementptr inbounds %struct.anon.3* %43, i32 0, i32 2
  %45 = load i16* %44, align 2
  %46 = icmp ne i16 %45, 0
  br i1 %46, label %47, label %54

; <label>:47                                      ; preds = %40
  %48 = load i32* %i, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %49
  %51 = getelementptr inbounds %struct.anon.3* %50, i32 0, i32 2
  %52 = load i16* %51, align 2
  %53 = zext i16 %52 to i32
  store i32 %53, i32* @maximum, align 4
  br label %54

; <label>:54                                      ; preds = %47, %40
  store i32 0, i32* %j, align 4
  br label %55

; <label>:55                                      ; preds = %74, %54
  %56 = load i32* %j, align 4
  %57 = icmp slt i32 %56, 12
  br i1 %57, label %58, label %77

; <label>:58                                      ; preds = %55
  %59 = load i32* %j, align 4
  %60 = sext i32 %59 to i64
  %61 = load i32* %i, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [211 x %struct.anon.3]* @adobe_coeff.table, i32 0, i64 %62
  %64 = getelementptr inbounds %struct.anon.3* %63, i32 0, i32 3
  %65 = getelementptr inbounds [12 x i16]* %64, i32 0, i64 %60
  %66 = load i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = sitofp i32 %67 to double
  %69 = fdiv double %68, 1.000000e+04
  %70 = load i32* %j, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i64 0
  %73 = getelementptr inbounds [3 x double]* %72, i32 0, i64 %71
  store double %69, double* %73, align 8
  br label %74

; <label>:74                                      ; preds = %58
  %75 = load i32* %j, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %j, align 4
  br label %55

; <label>:77                                      ; preds = %55
  %78 = getelementptr inbounds [4 x [3 x double]]* %cam_xyz, i32 0, i32 0
  call void @cam_xyz_coeff([3 x double]* %78)
  br label %83

; <label>:79                                      ; preds = %11
  br label %80

; <label>:80                                      ; preds = %79
  %81 = load i32* %i, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %i, align 4
  br label %7

; <label>:83                                      ; preds = %77, %7
  ret void
}

; Function Attrs: nounwind uwtable
define void @simple_coeff(i32 %index) #0 {
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %index, i32* %1, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* @raw_color, align 4
  br label %2

; <label>:2                                       ; preds = %32, %0
  %3 = load i32* %i, align 4
  %4 = icmp slt i32 %3, 3
  br i1 %4, label %5, label %35

; <label>:5                                       ; preds = %2
  store i32 0, i32* %c, align 4
  br label %6

; <label>:6                                       ; preds = %28, %5
  %7 = load i32* %c, align 4
  %8 = load i32* @colors, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %31

; <label>:10                                      ; preds = %6
  %11 = load i32* %i, align 4
  %12 = load i32* @colors, align 4
  %13 = mul nsw i32 %11, %12
  %14 = load i32* %c, align 4
  %15 = add nsw i32 %13, %14
  %16 = sext i32 %15 to i64
  %17 = load i32* %1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [4 x [12 x float]]* @simple_coeff.table, i32 0, i64 %18
  %20 = getelementptr inbounds [12 x float]* %19, i32 0, i64 %16
  %21 = load float* %20, align 4
  %22 = load i32* %c, align 4
  %23 = sext i32 %22 to i64
  %24 = load i32* %i, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %25
  %27 = getelementptr inbounds [4 x float]* %26, i32 0, i64 %23
  store float %21, float* %27, align 4
  br label %28

; <label>:28                                      ; preds = %10
  %29 = load i32* %c, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %c, align 4
  br label %6

; <label>:31                                      ; preds = %6
  br label %32

; <label>:32                                      ; preds = %31
  %33 = load i32* %i, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %i, align 4
  br label %2

; <label>:35                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define signext i16 @guess_byte_order(i32 %words) #0 {
  %1 = alloca i32, align 4
  %test = alloca [4 x [2 x i8]], align 1
  %t = alloca i32, align 4
  %msb = alloca i32, align 4
  %diff = alloca double, align 8
  %sum = alloca [2 x double], align 16
  store i32 %words, i32* %1, align 4
  store i32 2, i32* %t, align 4
  %2 = bitcast [2 x double]* %sum to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 16, i32 16, i1 false)
  %3 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 0
  %4 = getelementptr inbounds [2 x i8]* %3, i32 0, i32 0
  %5 = load %struct._IO_FILE** @ifp, align 8
  %6 = call i64 @fread(i8* %4, i64 2, i64 2, %struct._IO_FILE* %5)
  %7 = load i32* %1, align 4
  %8 = sub nsw i32 %7, 2
  store i32 %8, i32* %1, align 4
  br label %9

; <label>:9                                       ; preds = %81, %0
  %10 = load i32* %1, align 4
  %11 = add nsw i32 %10, -1
  store i32 %11, i32* %1, align 4
  %12 = icmp ne i32 %10, 0
  br i1 %12, label %13, label %85

; <label>:13                                      ; preds = %9
  %14 = load i32* %t, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %15
  %17 = getelementptr inbounds [2 x i8]* %16, i32 0, i32 0
  %18 = load %struct._IO_FILE** @ifp, align 8
  %19 = call i64 @fread(i8* %17, i64 2, i64 1, %struct._IO_FILE* %18)
  store i32 0, i32* %msb, align 4
  br label %20

; <label>:20                                      ; preds = %78, %13
  %21 = load i32* %msb, align 4
  %22 = icmp slt i32 %21, 2
  br i1 %22, label %23, label %81

; <label>:23                                      ; preds = %20
  %24 = load i32* %msb, align 4
  %25 = sext i32 %24 to i64
  %26 = load i32* %t, align 4
  %27 = xor i32 %26, 2
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %28
  %30 = getelementptr inbounds [2 x i8]* %29, i32 0, i64 %25
  %31 = load i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = shl i32 %32, 8
  %34 = load i32* %msb, align 4
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = load i32* %t, align 4
  %40 = xor i32 %39, 2
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %41
  %43 = getelementptr inbounds [2 x i8]* %42, i32 0, i64 %38
  %44 = load i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %33, %45
  %47 = load i32* %msb, align 4
  %48 = sext i32 %47 to i64
  %49 = load i32* %t, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %50
  %52 = getelementptr inbounds [2 x i8]* %51, i32 0, i64 %48
  %53 = load i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl i32 %54, 8
  %56 = load i32* %msb, align 4
  %57 = icmp ne i32 %56, 0
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i32
  %60 = sext i32 %59 to i64
  %61 = load i32* %t, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [4 x [2 x i8]]* %test, i32 0, i64 %62
  %64 = getelementptr inbounds [2 x i8]* %63, i32 0, i64 %60
  %65 = load i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = or i32 %55, %66
  %68 = sub nsw i32 %46, %67
  %69 = sitofp i32 %68 to double
  store double %69, double* %diff, align 8
  %70 = load double* %diff, align 8
  %71 = load double* %diff, align 8
  %72 = fmul double %70, %71
  %73 = load i32* %msb, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [2 x double]* %sum, i32 0, i64 %74
  %76 = load double* %75, align 8
  %77 = fadd double %76, %72
  store double %77, double* %75, align 8
  br label %78

; <label>:78                                      ; preds = %23
  %79 = load i32* %msb, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %msb, align 4
  br label %20

; <label>:81                                      ; preds = %20
  %82 = load i32* %t, align 4
  %83 = add nsw i32 %82, 1
  %84 = and i32 %83, 3
  store i32 %84, i32* %t, align 4
  br label %9

; <label>:85                                      ; preds = %9
  %86 = getelementptr inbounds [2 x double]* %sum, i32 0, i64 0
  %87 = load double* %86, align 8
  %88 = getelementptr inbounds [2 x double]* %sum, i32 0, i64 1
  %89 = load double* %88, align 8
  %90 = fcmp olt double %87, %89
  %91 = select i1 %90, i32 19789, i32 18761
  %92 = trunc i32 %91 to i16
  ret i16 %92
}

; Function Attrs: nounwind uwtable
define void @identify() #0 {
  %head = alloca [32 x i8], align 16
  %cp = alloca i8*, align 8
  %hlen = alloca i32, align 4
  %fsize = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %is_canon = alloca i32, align 4
  %jh = alloca %struct.jhead, align 8
  store i32 -1, i32* @filters, align 4
  store i32 -1, i32* @flip, align 4
  store i32 -1, i32* @tiff_flip, align 4
  store i16 0, i16* getelementptr inbounds ([3 x i16]* @cr2_slice, i32 0, i64 0), align 2
  store i32 0, i32* @fuji_layout, align 4
  store i16 0, i16* @fuji_width, align 2
  store i16 0, i16* @raw_width, align 2
  store i16 0, i16* @raw_height, align 2
  store i16 0, i16* @left_margin, align 2
  store i16 0, i16* @top_margin, align 2
  store i16 0, i16* @width, align 2
  store i16 0, i16* @height, align 2
  store i32 0, i32* @maximum, align 4
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i64 0), align 1
  store i8 0, i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 0), align 1
  store i32 0, i32* @unique_id, align 4
  store float 0.000000e+00, float* @focal_len, align 4
  store float 0.000000e+00, float* @aperture, align 4
  store float 0.000000e+00, float* @shutter, align 4
  store float 0.000000e+00, float* @iso_speed, align 4
  call void @llvm.memset.p0i8.i64(i8* bitcast ([32 x i32]* @gpsdata to i8*), i8 0, i64 128, i32 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* bitcast ([8 x [8 x i16]]* @white to i8*), i8 0, i64 128, i32 16, i1 false)
  store i16 0, i16* @thumb_height, align 2
  store i16 0, i16* @thumb_width, align 2
  store i32 0, i32* @thumb_length, align 4
  store i64 0, i64* @thumb_offset, align 8
  store void (...)* null, void (...)** @thumb_load_raw, align 8
  store void (...)* null, void (...)** @load_raw, align 8
  store void (%struct._IO_FILE*)* @jpeg_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  store i32 0, i32* @tiff_compress, align 4
  store i32 0, i32* @tiff_bps, align 4
  store i32 0, i32* @meta_length, align 4
  store i64 0, i64* @data_offset, align 8
  store i32 0, i32* @load_flags, align 4
  store i32 0, i32* @dng_version, align 4
  store i32 0, i32* @zero_after_ff, align 4
  store i32 0, i32* @kodak_cbpp, align 4
  store i32 0, i32* @is_foveon, align 4
  store i32 0, i32* @black, align 4
  store i32 0, i32* @tiff_samples, align 4
  store i32 0, i32* @shot_order, align 4
  store i64 0, i64* @timestamp, align 8
  store i32 0, i32* @zero_is_bad, align 4
  store i32 0, i32* @data_error, align 4
  store i32 0, i32* @profile_length, align 4
  store i32 0, i32* @mix_green, align 4
  store i32 1, i32* @use_gamma, align 4
  store i32 1, i32* @raw_color, align 4
  store i32 1, i32* @is_raw, align 4
  store double 1.000000e+00, double* @pixel_aspect, align 8
  store i32 2147483647, i32* @tile_length, align 4
  store i32 2147483647, i32* @tile_width, align 4
  store i32 0, i32* %i, align 4
  br label %1

; <label>:1                                       ; preds = %52, %0
  %2 = load i32* %i, align 4
  %3 = icmp ult i32 %2, 4
  br i1 %3, label %4, label %55

; <label>:4                                       ; preds = %1
  %5 = load i32* %i, align 4
  %6 = icmp eq i32 %5, 1
  %7 = zext i1 %6 to i32
  %8 = sitofp i32 %7 to float
  %9 = load i32* %i, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %10
  store float %8, float* %11, align 4
  %12 = load i32* %i, align 4
  %13 = icmp ult i32 %12, 3
  %14 = zext i1 %13 to i32
  %15 = sitofp i32 %14 to float
  %16 = load i32* %i, align 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %17
  store float %15, float* %18, align 4
  store i32 0, i32* %c, align 4
  br label %19

; <label>:19                                      ; preds = %29, %4
  %20 = load i32* %c, align 4
  %21 = icmp ult i32 %20, 3
  br i1 %21, label %22, label %32

; <label>:22                                      ; preds = %19
  %23 = load i32* %i, align 4
  %24 = zext i32 %23 to i64
  %25 = load i32* %c, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [3 x [4 x float]]* @cmatrix, i32 0, i64 %26
  %28 = getelementptr inbounds [4 x float]* %27, i32 0, i64 %24
  store float 0.000000e+00, float* %28, align 4
  br label %29

; <label>:29                                      ; preds = %22
  %30 = load i32* %c, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %c, align 4
  br label %19

; <label>:32                                      ; preds = %19
  store i32 0, i32* %c, align 4
  br label %33

; <label>:33                                      ; preds = %48, %32
  %34 = load i32* %c, align 4
  %35 = icmp ult i32 %34, 3
  br i1 %35, label %36, label %51

; <label>:36                                      ; preds = %33
  %37 = load i32* %c, align 4
  %38 = load i32* %i, align 4
  %39 = icmp eq i32 %37, %38
  %40 = zext i1 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = load i32* %i, align 4
  %43 = zext i32 %42 to i64
  %44 = load i32* %c, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %45
  %47 = getelementptr inbounds [4 x float]* %46, i32 0, i64 %43
  store float %41, float* %47, align 4
  br label %48

; <label>:48                                      ; preds = %36
  %49 = load i32* %c, align 4
  %50 = add i32 %49, 1
  store i32 %50, i32* %c, align 4
  br label %33

; <label>:51                                      ; preds = %33
  br label %52

; <label>:52                                      ; preds = %51
  %53 = load i32* %i, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %i, align 4
  br label %1

; <label>:55                                      ; preds = %1
  store i32 3, i32* @colors, align 4
  store i32 12, i32* @tiff_bps, align 4
  store i32 0, i32* %i, align 4
  br label %56

; <label>:56                                      ; preds = %65, %55
  %57 = load i32* %i, align 4
  %58 = icmp ult i32 %57, 16384
  br i1 %58, label %59, label %68

; <label>:59                                      ; preds = %56
  %60 = load i32* %i, align 4
  %61 = trunc i32 %60 to i16
  %62 = load i32* %i, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [16385 x i16]* @curve, i32 0, i64 %63
  store i16 %61, i16* %64, align 2
  br label %65

; <label>:65                                      ; preds = %59
  %66 = load i32* %i, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %i, align 4
  br label %56

; <label>:68                                      ; preds = %56
  %69 = call zeroext i16 @get2()
  store i16 %69, i16* @order, align 2
  %70 = call i32 @get4()
  store i32 %70, i32* %hlen, align 4
  %71 = load %struct._IO_FILE** @ifp, align 8
  %72 = call i32 @fseek(%struct._IO_FILE* %71, i64 0, i32 0)
  %73 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %74 = load %struct._IO_FILE** @ifp, align 8
  %75 = call i64 @fread(i8* %73, i64 1, i64 32, %struct._IO_FILE* %74)
  %76 = load %struct._IO_FILE** @ifp, align 8
  %77 = call i32 @fseek(%struct._IO_FILE* %76, i64 0, i32 2)
  %78 = load %struct._IO_FILE** @ifp, align 8
  %79 = call i64 @ftell(%struct._IO_FILE* %78)
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %fsize, align 4
  %81 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %82 = call i8* @memmem(i8* %81, i64 32, i8* getelementptr inbounds ([5 x i8]* @.str90, i32 0, i32 0), i64 4) #10
  store i8* %82, i8** %cp, align 8
  %83 = icmp ne i8* %82, null
  br i1 %83, label %88, label %84

; <label>:84                                      ; preds = %68
  %85 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %86 = call i8* @memmem(i8* %85, i64 32, i8* getelementptr inbounds ([5 x i8]* @.str89, i32 0, i32 0), i64 4) #10
  store i8* %86, i8** %cp, align 8
  %87 = icmp ne i8* %86, null
  br i1 %87, label %88, label %103

; <label>:88                                      ; preds = %84, %68
  %89 = load i8** %cp, align 8
  %90 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %91 = ptrtoint i8* %89 to i64
  %92 = ptrtoint i8* %90 to i64
  %93 = sub i64 %91, %92
  %94 = trunc i64 %93 to i32
  call void @parse_phase_one(i32 %94)
  %95 = load i8** %cp, align 8
  %96 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %97 = ptrtoint i8* %95 to i64
  %98 = ptrtoint i8* %96 to i64
  %99 = sub i64 %97, %98
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %102

; <label>:101                                     ; preds = %88
  call void @parse_tiff(i32 0)
  br label %102

; <label>:102                                     ; preds = %101, %88
  br label %343

; <label>:103                                     ; preds = %84
  %104 = load i16* @order, align 2
  %105 = sext i16 %104 to i32
  %106 = icmp eq i32 %105, 18761
  br i1 %106, label %111, label %107

; <label>:107                                     ; preds = %103
  %108 = load i16* @order, align 2
  %109 = sext i16 %108 to i32
  %110 = icmp eq i32 %109, 19789
  br i1 %110, label %111, label %125

; <label>:111                                     ; preds = %107, %103
  %112 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %113 = getelementptr inbounds i8* %112, i64 6
  %114 = call i32 @memcmp(i8* %113, i8* getelementptr inbounds ([9 x i8]* @.str427, i32 0, i32 0), i64 8) #10
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %123, label %116

; <label>:116                                     ; preds = %111
  %117 = load i32* %hlen, align 4
  %118 = zext i32 %117 to i64
  store i64 %118, i64* @data_offset, align 8
  %119 = load i32* %hlen, align 4
  %120 = load i32* %fsize, align 4
  %121 = load i32* %hlen, align 4
  %122 = sub i32 %120, %121
  call void @parse_ciff(i32 %119, i32 %122)
  br label %124

; <label>:123                                     ; preds = %111
  call void @parse_tiff(i32 0)
  br label %124

; <label>:124                                     ; preds = %123, %116
  br label %342

; <label>:125                                     ; preds = %107
  %126 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %127 = call i32 @memcmp(i8* %126, i8* getelementptr inbounds ([5 x i8]* @.str428, i32 0, i32 0), i64 4) #10
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %149, label %129

; <label>:129                                     ; preds = %125
  %130 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %131 = getelementptr inbounds i8* %130, i64 6
  %132 = call i32 @memcmp(i8* %131, i8* getelementptr inbounds ([5 x i8]* @.str429, i32 0, i32 0), i64 4) #10
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %149, label %134

; <label>:134                                     ; preds = %129
  %135 = load %struct._IO_FILE** @ifp, align 8
  %136 = call i32 @fseek(%struct._IO_FILE* %135, i64 4, i32 0)
  %137 = call zeroext i16 @get2()
  %138 = zext i16 %137 to i32
  %139 = add nsw i32 4, %138
  %140 = sext i32 %139 to i64
  store i64 %140, i64* @data_offset, align 8
  %141 = load %struct._IO_FILE** @ifp, align 8
  %142 = load i64* @data_offset, align 8
  %143 = call i32 @fseek(%struct._IO_FILE* %141, i64 %142, i32 0)
  %144 = load %struct._IO_FILE** @ifp, align 8
  %145 = call i32 @getc_unlocked(%struct._IO_FILE* %144)
  %146 = icmp ne i32 %145, 255
  br i1 %146, label %147, label %148

; <label>:147                                     ; preds = %134
  call void @parse_tiff(i32 12)
  br label %148

; <label>:148                                     ; preds = %147, %134
  store i64 0, i64* @thumb_offset, align 8
  br label %341

; <label>:149                                     ; preds = %129, %125
  %150 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %151 = getelementptr inbounds i8* %150, i64 25
  %152 = call i32 @memcmp(i8* %151, i8* getelementptr inbounds ([8 x i8]* @.str430, i32 0, i32 0), i64 7) #10
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %177, label %154

; <label>:154                                     ; preds = %149
  %155 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str431, i32 0, i32 0)) #4
  %156 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str432, i32 0, i32 0)) #4
  %157 = load %struct._IO_FILE** @ifp, align 8
  %158 = call i32 @fseek(%struct._IO_FILE* %157, i64 33, i32 0)
  call void @get_timestamp(i32 1)
  %159 = load %struct._IO_FILE** @ifp, align 8
  %160 = call i32 @fseek(%struct._IO_FILE* %159, i64 60, i32 0)
  store i32 0, i32* %c, align 4
  br label %161

; <label>:161                                     ; preds = %173, %154
  %162 = load i32* %c, align 4
  %163 = icmp ult i32 %162, 4
  br i1 %163, label %164, label %176

; <label>:164                                     ; preds = %161
  %165 = call i32 @get4()
  %166 = uitofp i32 %165 to float
  %167 = load i32* %c, align 4
  %168 = load i32* %c, align 4
  %169 = lshr i32 %168, 1
  %170 = xor i32 %167, %169
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %171
  store float %166, float* %172, align 4
  br label %173

; <label>:173                                     ; preds = %164
  %174 = load i32* %c, align 4
  %175 = add i32 %174, 1
  store i32 %175, i32* %c, align 4
  br label %161

; <label>:176                                     ; preds = %161
  br label %340

; <label>:177                                     ; preds = %149
  %178 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %179 = call i32 @strcmp(i8* %178, i8* getelementptr inbounds ([4 x i8]* @.str433, i32 0, i32 0)) #10
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %184, label %181

; <label>:181                                     ; preds = %177
  %182 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str434, i32 0, i32 0)) #4
  %183 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str435, i32 0, i32 0)) #4
  br label %339

; <label>:184                                     ; preds = %177
  %185 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %186 = call i32 @strcmp(i8* %185, i8* getelementptr inbounds ([5 x i8]* @.str436, i32 0, i32 0)) #10
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %191, label %188

; <label>:188                                     ; preds = %184
  %189 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str437, i32 0, i32 0)) #4
  %190 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str438, i32 0, i32 0)) #4
  br label %338

; <label>:191                                     ; preds = %184
  %192 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %193 = call i32 @strcmp(i8* %192, i8* getelementptr inbounds ([5 x i8]* @.str439, i32 0, i32 0)) #10
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %198, label %195

; <label>:195                                     ; preds = %191
  %196 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str437, i32 0, i32 0)) #4
  %197 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str440, i32 0, i32 0)) #4
  br label %337

; <label>:198                                     ; preds = %191
  %199 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %200 = call i32 @memcmp(i8* %199, i8* getelementptr inbounds ([9 x i8]* @.str94, i32 0, i32 0), i64 8) #10
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %240, label %202

; <label>:202                                     ; preds = %198
  %203 = load %struct._IO_FILE** @ifp, align 8
  %204 = call i32 @fseek(%struct._IO_FILE* %203, i64 84, i32 0)
  %205 = call i32 @get4()
  %206 = zext i32 %205 to i64
  store i64 %206, i64* @thumb_offset, align 8
  %207 = call i32 @get4()
  store i32 %207, i32* @thumb_length, align 4
  %208 = load %struct._IO_FILE** @ifp, align 8
  %209 = call i32 @fseek(%struct._IO_FILE* %208, i64 92, i32 0)
  %210 = call i32 @get4()
  call void @parse_fuji(i32 %210)
  %211 = load i64* @thumb_offset, align 8
  %212 = icmp sgt i64 %211, 120
  br i1 %212, label %213, label %232

; <label>:213                                     ; preds = %202
  %214 = load %struct._IO_FILE** @ifp, align 8
  %215 = call i32 @fseek(%struct._IO_FILE* %214, i64 120, i32 0)
  %216 = call i32 @get4()
  store i32 %216, i32* %i, align 4
  %217 = icmp ne i32 %216, 0
  br i1 %217, label %218, label %219

; <label>:218                                     ; preds = %213
  br label %219

; <label>:219                                     ; preds = %218, %213
  %220 = phi i1 [ false, %213 ], [ true, %218 ]
  %221 = zext i1 %220 to i32
  %222 = load i32* @is_raw, align 4
  %223 = add i32 %222, %221
  store i32 %223, i32* @is_raw, align 4
  %224 = load i32* @is_raw, align 4
  %225 = icmp eq i32 %224, 2
  br i1 %225, label %226, label %231

; <label>:226                                     ; preds = %219
  %227 = load i32* @shot_select, align 4
  %228 = icmp ne i32 %227, 0
  br i1 %228, label %229, label %231

; <label>:229                                     ; preds = %226
  %230 = load i32* %i, align 4
  call void @parse_fuji(i32 %230)
  br label %231

; <label>:231                                     ; preds = %229, %226, %219
  br label %232

; <label>:232                                     ; preds = %231, %202
  %233 = load %struct._IO_FILE** @ifp, align 8
  %234 = call i32 @fseek(%struct._IO_FILE* %233, i64 100, i32 0)
  %235 = call i32 @get4()
  %236 = zext i32 %235 to i64
  store i64 %236, i64* @data_offset, align 8
  %237 = load i64* @thumb_offset, align 8
  %238 = add nsw i64 %237, 12
  %239 = trunc i64 %238 to i32
  call void @parse_tiff(i32 %239)
  br label %336

; <label>:240                                     ; preds = %198
  %241 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %242 = call i32 @memcmp(i8* %241, i8* getelementptr inbounds ([5 x i8]* @.str194, i32 0, i32 0), i64 4) #10
  %243 = icmp ne i32 %242, 0
  br i1 %243, label %247, label %244

; <label>:244                                     ; preds = %240
  %245 = load %struct._IO_FILE** @ifp, align 8
  %246 = call i32 @fseek(%struct._IO_FILE* %245, i64 0, i32 0)
  call void @parse_riff()
  br label %335

; <label>:247                                     ; preds = %240
  %248 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %249 = call i32 @memcmp(i8* %248, i8* getelementptr inbounds ([7 x i8]* @.str441, i32 0, i32 0), i64 6) #10
  %250 = icmp ne i32 %249, 0
  br i1 %250, label %265, label %251

; <label>:251                                     ; preds = %247
  %252 = load %struct._IO_FILE** @ifp, align 8
  %253 = call i32 @fseek(%struct._IO_FILE* %252, i64 6, i32 0)
  %254 = load %struct._IO_FILE** @ifp, align 8
  %255 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 1, i64 8, %struct._IO_FILE* %254)
  %256 = load %struct._IO_FILE** @ifp, align 8
  %257 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 1, i64 8, %struct._IO_FILE* %256)
  %258 = load %struct._IO_FILE** @ifp, align 8
  %259 = call i64 @fread(i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i32 0), i64 1, i64 16, %struct._IO_FILE* %258)
  %260 = call zeroext i16 @get2()
  %261 = zext i16 %260 to i64
  store i64 %261, i64* @data_offset, align 8
  %262 = call zeroext i16 @get2()
  %263 = call zeroext i16 @get2()
  store i16 %263, i16* @raw_width, align 2
  %264 = call zeroext i16 @get2()
  store i16 %264, i16* @raw_height, align 2
  store void (...)* bitcast (void ()* @nokia_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1633771873, i32* @filters, align 4
  br label %334

; <label>:265                                     ; preds = %247
  %266 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %267 = call i32 @memcmp(i8* %266, i8* getelementptr inbounds ([10 x i8]* @.str442, i32 0, i32 0), i64 9) #10
  %268 = icmp ne i32 %267, 0
  br i1 %268, label %270, label %269

; <label>:269                                     ; preds = %265
  call void @parse_rollei()
  br label %333

; <label>:270                                     ; preds = %265
  %271 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %272 = call i32 @memcmp(i8* %271, i8* getelementptr inbounds ([5 x i8]* @.str443, i32 0, i32 0), i64 4) #10
  %273 = icmp ne i32 %272, 0
  br i1 %273, label %275, label %274

; <label>:274                                     ; preds = %270
  call void @parse_sinar_ia()
  br label %332

; <label>:275                                     ; preds = %270
  %276 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %277 = call i32 @memcmp(i8* %276, i8* getelementptr inbounds ([5 x i8]* @.str444, i32 0, i32 0), i64 4) #10
  %278 = icmp ne i32 %277, 0
  br i1 %278, label %280, label %279

; <label>:279                                     ; preds = %275
  call void @parse_minolta(i32 0)
  br label %331

; <label>:280                                     ; preds = %275
  %281 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %282 = call i32 @memcmp(i8* %281, i8* getelementptr inbounds ([5 x i8]* @.str445, i32 0, i32 0), i64 4) #10
  %283 = icmp ne i32 %282, 0
  br i1 %283, label %285, label %284

; <label>:284                                     ; preds = %280
  call void @parse_foveon()
  br label %330

; <label>:285                                     ; preds = %280
  %286 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %287 = call i32 @memcmp(i8* %286, i8* getelementptr inbounds ([3 x i8]* @.str446, i32 0, i32 0), i64 2) #10
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %290, label %289

; <label>:289                                     ; preds = %285
  call void @parse_cine()
  br label %329

; <label>:290                                     ; preds = %285
  store i32 0, i32* %i, align 4
  br label %291

; <label>:291                                     ; preds = %325, %290
  %292 = load i32* %i, align 4
  %293 = zext i32 %292 to i64
  %294 = icmp ult i64 %293, 68
  br i1 %294, label %295, label %328

; <label>:295                                     ; preds = %291
  %296 = load i32* %fsize, align 4
  %297 = load i32* %i, align 4
  %298 = zext i32 %297 to i64
  %299 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %298
  %300 = getelementptr inbounds %struct.anon.4* %299, i32 0, i32 0
  %301 = load i32* %300, align 4
  %302 = icmp eq i32 %296, %301
  br i1 %302, label %303, label %324

; <label>:303                                     ; preds = %295
  %304 = load i32* %i, align 4
  %305 = zext i32 %304 to i64
  %306 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %305
  %307 = getelementptr inbounds %struct.anon.4* %306, i32 0, i32 1
  %308 = getelementptr inbounds [12 x i8]* %307, i32 0, i32 0
  %309 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %308) #4
  %310 = load i32* %i, align 4
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %311
  %313 = getelementptr inbounds %struct.anon.4* %312, i32 0, i32 2
  %314 = getelementptr inbounds [19 x i8]* %313, i32 0, i32 0
  %315 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %314) #4
  %316 = load i32* %i, align 4
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds [68 x %struct.anon.4]* @identify.table, i32 0, i64 %317
  %319 = getelementptr inbounds %struct.anon.4* %318, i32 0, i32 3
  %320 = load i8* %319, align 1
  %321 = icmp ne i8 %320, 0
  br i1 %321, label %322, label %323

; <label>:322                                     ; preds = %303
  call void @parse_external_jpeg()
  br label %323

; <label>:323                                     ; preds = %322, %303
  br label %324

; <label>:324                                     ; preds = %323, %295
  br label %325

; <label>:325                                     ; preds = %324
  %326 = load i32* %i, align 4
  %327 = add i32 %326, 1
  store i32 %327, i32* %i, align 4
  br label %291

; <label>:328                                     ; preds = %291
  br label %329

; <label>:329                                     ; preds = %328, %289
  br label %330

; <label>:330                                     ; preds = %329, %284
  br label %331

; <label>:331                                     ; preds = %330, %279
  br label %332

; <label>:332                                     ; preds = %331, %274
  br label %333

; <label>:333                                     ; preds = %332, %269
  br label %334

; <label>:334                                     ; preds = %333, %251
  br label %335

; <label>:335                                     ; preds = %334, %244
  br label %336

; <label>:336                                     ; preds = %335, %232
  br label %337

; <label>:337                                     ; preds = %336, %195
  br label %338

; <label>:338                                     ; preds = %337, %188
  br label %339

; <label>:339                                     ; preds = %338, %181
  br label %340

; <label>:340                                     ; preds = %339, %176
  br label %341

; <label>:341                                     ; preds = %340, %148
  br label %342

; <label>:342                                     ; preds = %341, %124
  br label %343

; <label>:343                                     ; preds = %342, %102
  %344 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %345 = sext i8 %344 to i32
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %347, label %349

; <label>:347                                     ; preds = %343
  %348 = load i32* %fsize, align 4
  call void @parse_smal(i32 0, i32 %348)
  br label %349

; <label>:349                                     ; preds = %347, %343
  %350 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %351 = sext i8 %350 to i32
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %355

; <label>:353                                     ; preds = %349
  store i32 0, i32* @is_raw, align 4
  %354 = call i32 @parse_jpeg(i32 0)
  br label %355

; <label>:355                                     ; preds = %353, %349
  store i32 0, i32* %i, align 4
  br label %356

; <label>:356                                     ; preds = %374, %355
  %357 = load i32* %i, align 4
  %358 = zext i32 %357 to i64
  %359 = icmp ult i64 %358, 15
  br i1 %359, label %360, label %377

; <label>:360                                     ; preds = %356
  %361 = load i32* %i, align 4
  %362 = zext i32 %361 to i64
  %363 = getelementptr inbounds [15 x i8*]* @identify.corp, i32 0, i64 %362
  %364 = load i8** %363, align 8
  %365 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %364) #10
  %366 = icmp ne i8* %365, null
  br i1 %366, label %367, label %373

; <label>:367                                     ; preds = %360
  %368 = load i32* %i, align 4
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds [15 x i8*]* @identify.corp, i32 0, i64 %369
  %371 = load i8** %370, align 8
  %372 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* %371) #4
  br label %373

; <label>:373                                     ; preds = %367, %360
  br label %374

; <label>:374                                     ; preds = %373
  %375 = load i32* %i, align 4
  %376 = add i32 %375, 1
  store i32 %376, i32* %i, align 4
  br label %356

; <label>:377                                     ; preds = %356
  %378 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0), i64 5) #10
  %379 = icmp ne i32 %378, 0
  br i1 %379, label %381, label %380

; <label>:380                                     ; preds = %377
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 16), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 16), align 1
  br label %381

; <label>:381                                     ; preds = %380, %377
  %382 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0)) #10
  %383 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 %382
  store i8* %383, i8** %cp, align 8
  br label %384

; <label>:384                                     ; preds = %390, %381
  %385 = load i8** %cp, align 8
  %386 = getelementptr inbounds i8* %385, i32 -1
  store i8* %386, i8** %cp, align 8
  %387 = load i8* %386, align 1
  %388 = sext i8 %387 to i32
  %389 = icmp eq i32 %388, 32
  br i1 %389, label %390, label %392

; <label>:390                                     ; preds = %384
  %391 = load i8** %cp, align 8
  store i8 0, i8* %391, align 1
  br label %384

; <label>:392                                     ; preds = %384
  %393 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0)) #10
  %394 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 %393
  store i8* %394, i8** %cp, align 8
  br label %395

; <label>:395                                     ; preds = %401, %392
  %396 = load i8** %cp, align 8
  %397 = getelementptr inbounds i8* %396, i32 -1
  store i8* %397, i8** %cp, align 8
  %398 = load i8* %397, align 1
  %399 = sext i8 %398 to i32
  %400 = icmp eq i32 %399, 32
  br i1 %400, label %401, label %403

; <label>:401                                     ; preds = %395
  %402 = load i8** %cp, align 8
  store i8 0, i8* %402, align 1
  br label %395

; <label>:403                                     ; preds = %395
  %404 = call i64 @strlen(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0)) #10
  %405 = trunc i64 %404 to i32
  store i32 %405, i32* %i, align 4
  %406 = load i32* %i, align 4
  %407 = zext i32 %406 to i64
  %408 = call i32 @strncasecmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 %407) #10
  %409 = icmp ne i32 %408, 0
  br i1 %409, label %425, label %410

; <label>:410                                     ; preds = %403
  %411 = load i32* %i, align 4
  %412 = add i32 %411, 1
  store i32 %412, i32* %i, align 4
  %413 = zext i32 %411 to i64
  %414 = getelementptr inbounds [64 x i8]* @model, i32 0, i64 %413
  %415 = load i8* %414, align 1
  %416 = sext i8 %415 to i32
  %417 = icmp eq i32 %416, 32
  br i1 %417, label %418, label %425

; <label>:418                                     ; preds = %410
  %419 = load i32* %i, align 4
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 %420
  %422 = load i32* %i, align 4
  %423 = sub i32 64, %422
  %424 = zext i32 %423 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %421, i64 %424, i32 1, i1 false)
  br label %425

; <label>:425                                     ; preds = %418, %410, %403
  %426 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str447, i32 0, i32 0), i64 15) #10
  %427 = icmp ne i32 %426, 0
  br i1 %427, label %430, label %428

; <label>:428                                     ; preds = %425
  %429 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 15)) #4
  br label %430

; <label>:430                                     ; preds = %428, %425
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model2, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i64 63), align 1
  store i8 0, i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i64 511), align 1
  %431 = load i32* @is_raw, align 4
  %432 = icmp ne i32 %431, 0
  br i1 %432, label %434, label %433

; <label>:433                                     ; preds = %430
  br label %2336

; <label>:434                                     ; preds = %430
  %435 = load i32* @maximum, align 4
  %436 = icmp ne i32 %435, 0
  br i1 %436, label %441, label %437

; <label>:437                                     ; preds = %434
  %438 = load i32* @tiff_bps, align 4
  %439 = shl i32 1, %438
  %440 = sub nsw i32 %439, 1
  store i32 %440, i32* @maximum, align 4
  br label %441

; <label>:441                                     ; preds = %437, %434
  %442 = load i16* @height, align 2
  %443 = icmp ne i16 %442, 0
  br i1 %443, label %446, label %444

; <label>:444                                     ; preds = %441
  %445 = load i16* @raw_height, align 2
  store i16 %445, i16* @height, align 2
  br label %446

; <label>:446                                     ; preds = %444, %441
  %447 = load i16* @width, align 2
  %448 = icmp ne i16 %447, 0
  br i1 %448, label %451, label %449

; <label>:449                                     ; preds = %446
  %450 = load i16* @raw_width, align 2
  store i16 %450, i16* @width, align 2
  br label %451

; <label>:451                                     ; preds = %449, %446
  %452 = load i16* @fuji_width, align 2
  %453 = icmp ne i16 %452, 0
  br i1 %453, label %454, label %465

; <label>:454                                     ; preds = %451
  %455 = load i16* @height, align 2
  %456 = zext i16 %455 to i32
  %457 = load i16* @fuji_width, align 2
  %458 = zext i16 %457 to i32
  %459 = add nsw i32 %456, %458
  %460 = trunc i32 %459 to i16
  store i16 %460, i16* @width, align 2
  %461 = load i16* @width, align 2
  %462 = zext i16 %461 to i32
  %463 = sub nsw i32 %462, 1
  %464 = trunc i32 %463 to i16
  store i16 %464, i16* @height, align 2
  store double 1.000000e+00, double* @pixel_aspect, align 8
  br label %465

; <label>:465                                     ; preds = %454, %451
  %466 = load i16* @height, align 2
  %467 = zext i16 %466 to i32
  %468 = icmp eq i32 %467, 2624
  br i1 %468, label %469, label %474

; <label>:469                                     ; preds = %465
  %470 = load i16* @width, align 2
  %471 = zext i16 %470 to i32
  %472 = icmp eq i32 %471, 3936
  br i1 %472, label %473, label %474

; <label>:473                                     ; preds = %469
  store i16 2616, i16* @height, align 2
  store i16 3896, i16* @width, align 2
  br label %474

; <label>:474                                     ; preds = %473, %469, %465
  %475 = load i16* @height, align 2
  %476 = zext i16 %475 to i32
  %477 = icmp eq i32 %476, 3136
  br i1 %477, label %478, label %483

; <label>:478                                     ; preds = %474
  %479 = load i16* @width, align 2
  %480 = zext i16 %479 to i32
  %481 = icmp eq i32 %480, 4864
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %478
  store i16 3124, i16* @height, align 2
  store i16 4688, i16* @width, align 2
  br label %483

; <label>:483                                     ; preds = %482, %478, %474
  %484 = load i16* @height, align 2
  %485 = zext i16 %484 to i32
  %486 = icmp eq i32 %485, 3014
  br i1 %486, label %487, label %492

; <label>:487                                     ; preds = %483
  %488 = load i16* @width, align 2
  %489 = zext i16 %488 to i32
  %490 = icmp eq i32 %489, 4096
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %487
  store i16 4014, i16* @width, align 2
  br label %492

; <label>:492                                     ; preds = %491, %487, %483
  %493 = load i32* @dng_version, align 4
  %494 = icmp ne i32 %493, 0
  br i1 %494, label %495, label %515

; <label>:495                                     ; preds = %492
  %496 = load i32* @filters, align 4
  %497 = icmp eq i32 %496, -1
  br i1 %497, label %498, label %499

; <label>:498                                     ; preds = %495
  store i32 0, i32* @filters, align 4
  br label %499

; <label>:499                                     ; preds = %498, %495
  %500 = load i32* @filters, align 4
  %501 = icmp ne i32 %500, 0
  br i1 %501, label %502, label %504

; <label>:502                                     ; preds = %499
  %503 = load i32* @tiff_samples, align 4
  store i32 %503, i32* @is_raw, align 4
  br label %506

; <label>:504                                     ; preds = %499
  %505 = load i32* @tiff_samples, align 4
  store i32 %505, i32* @colors, align 4
  br label %506

; <label>:506                                     ; preds = %504, %502
  %507 = load i32* @tiff_compress, align 4
  %508 = icmp eq i32 %507, 1
  br i1 %508, label %509, label %510

; <label>:509                                     ; preds = %506
  store void (...)* bitcast (void ()* @adobe_dng_load_raw_nc to void (...)*), void (...)** @load_raw, align 8
  br label %510

; <label>:510                                     ; preds = %509, %506
  %511 = load i32* @tiff_compress, align 4
  %512 = icmp eq i32 %511, 7
  br i1 %512, label %513, label %514

; <label>:513                                     ; preds = %510
  store void (...)* bitcast (void ()* @adobe_dng_load_raw_lj to void (...)*), void (...)** @load_raw, align 8
  br label %514

; <label>:514                                     ; preds = %513, %510
  br label %2265

; <label>:515                                     ; preds = %492
  %516 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0)) #10
  %517 = icmp ne i32 %516, 0
  %518 = xor i1 %517, true
  %519 = zext i1 %518 to i32
  store i32 %519, i32* %is_canon, align 4
  br i1 %518, label %520, label %526

; <label>:520                                     ; preds = %515
  %521 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %522 = getelementptr inbounds i8* %521, i64 6
  %523 = call i32 @memcmp(i8* %522, i8* getelementptr inbounds ([9 x i8]* @.str427, i32 0, i32 0), i64 8) #10
  %524 = icmp ne i32 %523, 0
  %525 = select i1 %524, void (...)* bitcast (void ()* @lossless_jpeg_load_raw to void (...)*), void (...)* bitcast (void ()* @canon_compressed_load_raw to void (...)*)
  store void (...)* %525, void (...)** @load_raw, align 8
  br label %526

; <label>:526                                     ; preds = %520, %515
  %527 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0)) #10
  %528 = icmp ne i32 %527, 0
  br i1 %528, label %547, label %529

; <label>:529                                     ; preds = %526
  %530 = load void (...)** @load_raw, align 8
  %531 = icmp ne void (...)* %530, null
  br i1 %531, label %533, label %532

; <label>:532                                     ; preds = %529
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %533

; <label>:533                                     ; preds = %532, %529
  %534 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %535 = sext i8 %534 to i32
  %536 = icmp eq i32 %535, 69
  br i1 %536, label %537, label %546

; <label>:537                                     ; preds = %533
  %538 = load i64* @data_offset, align 8
  %539 = icmp ne i64 %538, 0
  %540 = xor i1 %539, true
  %541 = zext i1 %540 to i32
  %542 = shl i32 %541, 2
  %543 = or i32 %542, 2
  %544 = load i32* @load_flags, align 4
  %545 = or i32 %544, %543
  store i32 %545, i32* @load_flags, align 4
  br label %546

; <label>:546                                     ; preds = %537, %533
  br label %547

; <label>:547                                     ; preds = %546, %526
  %548 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str424, i32 0, i32 0)) #10
  %549 = icmp ne i32 %548, 0
  br i1 %549, label %551, label %550

; <label>:550                                     ; preds = %547
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 3967, i32* @maximum, align 4
  br label %551

; <label>:551                                     ; preds = %550, %547
  %552 = load i32* @is_foveon, align 4
  %553 = icmp ne i32 %552, 0
  br i1 %553, label %554, label %570

; <label>:554                                     ; preds = %551
  %555 = load i16* @height, align 2
  %556 = zext i16 %555 to i32
  %557 = mul nsw i32 %556, 2
  %558 = load i16* @width, align 2
  %559 = zext i16 %558 to i32
  %560 = icmp slt i32 %557, %559
  br i1 %560, label %561, label %562

; <label>:561                                     ; preds = %554
  store double 5.000000e-01, double* @pixel_aspect, align 8
  br label %562

; <label>:562                                     ; preds = %561, %554
  %563 = load i16* @height, align 2
  %564 = zext i16 %563 to i32
  %565 = load i16* @width, align 2
  %566 = zext i16 %565 to i32
  %567 = icmp sgt i32 %564, %566
  br i1 %567, label %568, label %569

; <label>:568                                     ; preds = %562
  store double 2.000000e+00, double* @pixel_aspect, align 8
  br label %569

; <label>:569                                     ; preds = %568, %562
  store i32 0, i32* @filters, align 4
  store void (...)* bitcast (void ()* @foveon_load_raw to void (...)*), void (...)** @load_raw, align 8
  call void @simple_coeff(i32 0)
  br label %2227

; <label>:570                                     ; preds = %551
  %571 = load i32* %is_canon, align 4
  %572 = icmp ne i32 %571, 0
  br i1 %572, label %573, label %590

; <label>:573                                     ; preds = %570
  %574 = load i32* @tiff_bps, align 4
  %575 = icmp eq i32 %574, 15
  br i1 %575, label %576, label %590

; <label>:576                                     ; preds = %573
  %577 = load i16* @width, align 2
  %578 = zext i16 %577 to i32
  switch i32 %578, label %589 [
    i32 3344, label %579
    i32 3872, label %584
  ]

; <label>:579                                     ; preds = %576
  %580 = load i16* @width, align 2
  %581 = zext i16 %580 to i32
  %582 = sub nsw i32 %581, 66
  %583 = trunc i32 %582 to i16
  store i16 %583, i16* @width, align 2
  br label %584

; <label>:584                                     ; preds = %576, %579
  %585 = load i16* @width, align 2
  %586 = zext i16 %585 to i32
  %587 = sub nsw i32 %586, 6
  %588 = trunc i32 %587 to i16
  store i16 %588, i16* @width, align 2
  br label %589

; <label>:589                                     ; preds = %584, %576
  store i32 0, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_sraw_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2226

; <label>:590                                     ; preds = %573, %570
  %591 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str448, i32 0, i32 0)) #10
  %592 = icmp ne i32 %591, 0
  br i1 %592, label %594, label %593

; <label>:593                                     ; preds = %590
  store i16 613, i16* @height, align 2
  store i16 854, i16* @width, align 2
  store i16 896, i16* @raw_width, align 2
  store double 0x3FEEEE104E447BEC, double* @pixel_aspect, align 8
  store i32 4, i32* @colors, align 4
  store i32 -505093660, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_600_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2225

; <label>:594                                     ; preds = %590
  %595 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str449, i32 0, i32 0)) #10
  %596 = icmp ne i32 %595, 0
  br i1 %596, label %597, label %600

; <label>:597                                     ; preds = %594
  %598 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str450, i32 0, i32 0)) #10
  %599 = icmp ne i32 %598, 0
  br i1 %599, label %601, label %600

; <label>:600                                     ; preds = %597, %594
  store i16 773, i16* @height, align 2
  store i16 960, i16* @width, align 2
  store i16 992, i16* @raw_width, align 2
  store double 0x3FF16E0689427379, double* @pixel_aspect, align 8
  store i32 4, i32* @colors, align 4
  store i32 508436046, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2224

; <label>:601                                     ; preds = %597
  %602 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str451, i32 0, i32 0)) #10
  %603 = icmp ne i32 %602, 0
  br i1 %603, label %605, label %604

; <label>:604                                     ; preds = %601
  store i16 968, i16* @height, align 2
  store i16 1290, i16* @width, align 2
  store i16 1320, i16* @raw_width, align 2
  store i32 4, i32* @colors, align 4
  store i32 458115870, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2223

; <label>:605                                     ; preds = %601
  %606 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str452, i32 0, i32 0)) #10
  %607 = icmp ne i32 %606, 0
  br i1 %607, label %609, label %608

; <label>:608                                     ; preds = %605
  store i16 1024, i16* @height, align 2
  store i16 1552, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 508251675, i32* @filters, align 4
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2222

; <label>:609                                     ; preds = %605
  %610 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str453, i32 0, i32 0)) #10
  %611 = icmp ne i32 %610, 0
  br i1 %611, label %613, label %612

; <label>:612                                     ; preds = %609
  store i16 1752, i16* @height, align 2
  store i16 2344, i16* @width, align 2
  store i16 1766, i16* @raw_height, align 2
  store i16 2400, i16* @raw_width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2221

; <label>:613                                     ; preds = %609
  %614 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str454, i32 0, i32 0)) #10
  %615 = icmp ne i32 %614, 0
  br i1 %615, label %617, label %616

; <label>:616                                     ; preds = %613
  store i16 1960, i16* @height, align 2
  store i16 2616, i16* @width, align 2
  store i16 1968, i16* @raw_height, align 2
  store i16 2664, i16* @raw_width, align 2
  store i16 4, i16* @top_margin, align 2
  store i16 4, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2220

; <label>:617                                     ; preds = %613
  %618 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str455, i32 0, i32 0)) #10
  %619 = icmp ne i32 %618, 0
  br i1 %619, label %621, label %620

; <label>:620                                     ; preds = %617
  store i16 1984, i16* @height, align 2
  store i16 2620, i16* @width, align 2
  store i16 1992, i16* @raw_height, align 2
  store i16 2672, i16* @raw_width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 10, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 0, i32* @raw_color, align 4
  br label %2219

; <label>:621                                     ; preds = %617
  %622 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str456, i32 0, i32 0)) #10
  %623 = icmp ne i32 %622, 0
  br i1 %623, label %630, label %624

; <label>:624                                     ; preds = %621
  %625 = call i32 @canon_s2is()
  %626 = icmp ne i32 %625, 0
  br i1 %626, label %627, label %629

; <label>:627                                     ; preds = %624
  %628 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 10), i8* getelementptr inbounds ([6 x i8]* @.str457, i32 0, i32 0)) #4
  br label %629

; <label>:629                                     ; preds = %627, %624
  store i16 1960, i16* @height, align 2
  store i16 2616, i16* @width, align 2
  store i16 1968, i16* @raw_height, align 2
  store i16 2672, i16* @raw_width, align 2
  store i16 8, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2218

; <label>:630                                     ; preds = %621
  %631 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str458, i32 0, i32 0)) #10
  %632 = icmp ne i32 %631, 0
  br i1 %632, label %634, label %633

; <label>:633                                     ; preds = %630
  store i16 2328, i16* @height, align 2
  store i16 3112, i16* @width, align 2
  store i16 2340, i16* @raw_height, align 2
  store i16 3152, i16* @raw_width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 36, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2217

; <label>:634                                     ; preds = %630
  %635 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str459, i32 0, i32 0)) #10
  %636 = icmp ne i32 %635, 0
  br i1 %636, label %638, label %637

; <label>:637                                     ; preds = %634
  store i16 2472, i16* @height, align 2
  store i16 3298, i16* @width, align 2
  store i16 2480, i16* @raw_height, align 2
  store i16 3336, i16* @raw_width, align 2
  store i16 5, i16* @top_margin, align 2
  store i16 6, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2216

; <label>:638                                     ; preds = %634
  %639 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str460, i32 0, i32 0)) #10
  %640 = icmp ne i32 %639, 0
  br i1 %640, label %642, label %641

; <label>:641                                     ; preds = %638
  store i16 2472, i16* @height, align 2
  store i16 3288, i16* @width, align 2
  store i16 2484, i16* @raw_height, align 2
  store i16 3344, i16* @raw_width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2215

; <label>:642                                     ; preds = %638
  %643 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str461, i32 0, i32 0)) #10
  %644 = icmp ne i32 %643, 0
  br i1 %644, label %646, label %645

; <label>:645                                     ; preds = %642
  store i16 2760, i16* @height, align 2
  store i16 3672, i16* @width, align 2
  store i16 2772, i16* @raw_height, align 2
  store i16 3736, i16* @raw_width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2214

; <label>:646                                     ; preds = %642
  %647 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str462, i32 0, i32 0)) #10
  %648 = icmp ne i32 %647, 0
  br i1 %648, label %650, label %649

; <label>:649                                     ; preds = %646
  store i16 3024, i16* @height, align 2
  store i16 4032, i16* @width, align 2
  store i16 3048, i16* @raw_height, align 2
  store i16 4104, i16* @raw_width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 48, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2213

; <label>:650                                     ; preds = %646
  %651 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str463, i32 0, i32 0)) #10
  %652 = icmp ne i32 %651, 0
  br i1 %652, label %654, label %653

; <label>:653                                     ; preds = %650
  store i16 2128, i16* @height, align 2
  store i16 2840, i16* @width, align 2
  store i16 2136, i16* @raw_height, align 2
  store i16 2888, i16* @raw_width, align 2
  store i16 8, i16* @top_margin, align 2
  store i16 44, i16* @left_margin, align 2
  store void (...)* bitcast (void ()* @canon_a5_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2212

; <label>:654                                     ; preds = %650
  %655 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str464, i32 0, i32 0)) #10
  %656 = icmp ne i32 %655, 0
  br i1 %656, label %658, label %657

; <label>:657                                     ; preds = %654
  store i16 1896, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %2211

; <label>:658                                     ; preds = %654
  %659 = load i32* %is_canon, align 4
  %660 = icmp ne i32 %659, 0
  br i1 %660, label %661, label %670

; <label>:661                                     ; preds = %658
  %662 = load i16* @raw_width, align 2
  %663 = zext i16 %662 to i32
  %664 = icmp eq i32 %663, 2144
  br i1 %664, label %665, label %670

; <label>:665                                     ; preds = %661
  store i16 1550, i16* @height, align 2
  store i16 2088, i16* @width, align 2
  store i16 8, i16* @top_margin, align 2
  store i16 4, i16* @left_margin, align 2
  %666 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str465, i32 0, i32 0)) #10
  %667 = icmp ne i32 %666, 0
  br i1 %667, label %669, label %668

; <label>:668                                     ; preds = %665
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %669

; <label>:669                                     ; preds = %668, %665
  br label %2210

; <label>:670                                     ; preds = %661, %658
  %671 = load i32* %is_canon, align 4
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %673, label %678

; <label>:673                                     ; preds = %670
  %674 = load i16* @raw_width, align 2
  %675 = zext i16 %674 to i32
  %676 = icmp eq i32 %675, 2224
  br i1 %676, label %677, label %678

; <label>:677                                     ; preds = %673
  store i16 1448, i16* @height, align 2
  store i16 2176, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 48, i16* @left_margin, align 2
  br label %2209

; <label>:678                                     ; preds = %673, %670
  %679 = load i32* %is_canon, align 4
  %680 = icmp ne i32 %679, 0
  br i1 %680, label %681, label %686

; <label>:681                                     ; preds = %678
  %682 = load i16* @raw_width, align 2
  %683 = zext i16 %682 to i32
  %684 = icmp eq i32 %683, 2376
  br i1 %684, label %685, label %686

; <label>:685                                     ; preds = %681
  store i16 1720, i16* @height, align 2
  store i16 2312, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  br label %2208

; <label>:686                                     ; preds = %681, %678
  %687 = load i32* %is_canon, align 4
  %688 = icmp ne i32 %687, 0
  br i1 %688, label %689, label %694

; <label>:689                                     ; preds = %686
  %690 = load i16* @raw_width, align 2
  %691 = zext i16 %690 to i32
  %692 = icmp eq i32 %691, 2672
  br i1 %692, label %693, label %694

; <label>:693                                     ; preds = %689
  store i16 1960, i16* @height, align 2
  store i16 2616, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  br label %2207

; <label>:694                                     ; preds = %689, %686
  %695 = load i32* %is_canon, align 4
  %696 = icmp ne i32 %695, 0
  br i1 %696, label %697, label %706

; <label>:697                                     ; preds = %694
  %698 = load i16* @raw_width, align 2
  %699 = zext i16 %698 to i32
  %700 = icmp eq i32 %699, 3152
  br i1 %700, label %701, label %706

; <label>:701                                     ; preds = %697
  store i16 2056, i16* @height, align 2
  store i16 3088, i16* @width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 64, i16* @left_margin, align 2
  %702 = load i32* @unique_id, align 4
  %703 = icmp eq i32 %702, -2147483280
  br i1 %703, label %704, label %705

; <label>:704                                     ; preds = %701
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str466, i32 0, i32 0))
  br label %705

; <label>:705                                     ; preds = %704, %701
  br label %2206

; <label>:706                                     ; preds = %697, %694
  %707 = load i32* %is_canon, align 4
  %708 = icmp ne i32 %707, 0
  br i1 %708, label %709, label %714

; <label>:709                                     ; preds = %706
  %710 = load i16* @raw_width, align 2
  %711 = zext i16 %710 to i32
  %712 = icmp eq i32 %711, 3160
  br i1 %712, label %713, label %714

; <label>:713                                     ; preds = %709
  store i16 2328, i16* @height, align 2
  store i16 3112, i16* @width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 44, i16* @left_margin, align 2
  br label %2205

; <label>:714                                     ; preds = %709, %706
  %715 = load i32* %is_canon, align 4
  %716 = icmp ne i32 %715, 0
  br i1 %716, label %717, label %722

; <label>:717                                     ; preds = %714
  %718 = load i16* @raw_width, align 2
  %719 = zext i16 %718 to i32
  %720 = icmp eq i32 %719, 3344
  br i1 %720, label %721, label %722

; <label>:721                                     ; preds = %717
  store i16 2472, i16* @height, align 2
  store i16 3288, i16* @width, align 2
  store i16 6, i16* @top_margin, align 2
  store i16 4, i16* @left_margin, align 2
  br label %2204

; <label>:722                                     ; preds = %717, %714
  %723 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str467, i32 0, i32 0)) #10
  %724 = icmp ne i32 %723, 0
  br i1 %724, label %728, label %725

; <label>:725                                     ; preds = %722
  store i32 1633771873, i32* @filters, align 4
  %726 = load i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i64 200), align 2
  %727 = zext i16 %726 to i32
  store i32 %727, i32* @black, align 4
  br label %2203

; <label>:728                                     ; preds = %722
  %729 = load i32* %is_canon, align 4
  %730 = icmp ne i32 %729, 0
  br i1 %730, label %731, label %740

; <label>:731                                     ; preds = %728
  %732 = load i16* @raw_width, align 2
  %733 = zext i16 %732 to i32
  %734 = icmp eq i32 %733, 3516
  br i1 %734, label %735, label %740

; <label>:735                                     ; preds = %731
  store i16 14, i16* @top_margin, align 2
  store i16 42, i16* @left_margin, align 2
  %736 = load i32* @unique_id, align 4
  %737 = icmp eq i32 %736, -2147483255
  br i1 %737, label %738, label %739

; <label>:738                                     ; preds = %735
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str468, i32 0, i32 0))
  br label %739

; <label>:739                                     ; preds = %738, %735
  br label %860

; <label>:740                                     ; preds = %731, %728
  %741 = load i32* %is_canon, align 4
  %742 = icmp ne i32 %741, 0
  br i1 %742, label %743, label %748

; <label>:743                                     ; preds = %740
  %744 = load i16* @raw_width, align 2
  %745 = zext i16 %744 to i32
  %746 = icmp eq i32 %745, 3596
  br i1 %746, label %747, label %748

; <label>:747                                     ; preds = %743
  store i16 12, i16* @top_margin, align 2
  store i16 74, i16* @left_margin, align 2
  br label %860

; <label>:748                                     ; preds = %743, %740
  %749 = load i32* %is_canon, align 4
  %750 = icmp ne i32 %749, 0
  br i1 %750, label %751, label %756

; <label>:751                                     ; preds = %748
  %752 = load i16* @raw_width, align 2
  %753 = zext i16 %752 to i32
  %754 = icmp eq i32 %753, 3944
  br i1 %754, label %755, label %756

; <label>:755                                     ; preds = %751
  store i16 2602, i16* @height, align 2
  store i16 3908, i16* @width, align 2
  store i16 18, i16* @top_margin, align 2
  store i16 30, i16* @left_margin, align 2
  br label %2200

; <label>:756                                     ; preds = %751, %748
  %757 = load i32* %is_canon, align 4
  %758 = icmp ne i32 %757, 0
  br i1 %758, label %759, label %776

; <label>:759                                     ; preds = %756
  %760 = load i16* @raw_width, align 2
  %761 = zext i16 %760 to i32
  %762 = icmp eq i32 %761, 3948
  br i1 %762, label %763, label %776

; <label>:763                                     ; preds = %759
  store i16 18, i16* @top_margin, align 2
  store i16 42, i16* @left_margin, align 2
  %764 = load i16* @height, align 2
  %765 = zext i16 %764 to i32
  %766 = sub nsw i32 %765, 2
  %767 = trunc i32 %766 to i16
  store i16 %767, i16* @height, align 2
  %768 = load i32* @unique_id, align 4
  %769 = icmp eq i32 %768, -2147483082
  br i1 %769, label %770, label %771

; <label>:770                                     ; preds = %763
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str469, i32 0, i32 0))
  br label %771

; <label>:771                                     ; preds = %770, %763
  %772 = load i32* @unique_id, align 4
  %773 = icmp eq i32 %772, -2147483052
  br i1 %773, label %774, label %775

; <label>:774                                     ; preds = %771
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str470, i32 0, i32 0))
  br label %775

; <label>:775                                     ; preds = %774, %771
  br label %860

; <label>:776                                     ; preds = %759, %756
  %777 = load i32* %is_canon, align 4
  %778 = icmp ne i32 %777, 0
  br i1 %778, label %779, label %788

; <label>:779                                     ; preds = %776
  %780 = load i16* @raw_width, align 2
  %781 = zext i16 %780 to i32
  %782 = icmp eq i32 %781, 3984
  br i1 %782, label %783, label %788

; <label>:783                                     ; preds = %779
  store i16 20, i16* @top_margin, align 2
  store i16 76, i16* @left_margin, align 2
  %784 = load i16* @height, align 2
  %785 = zext i16 %784 to i32
  %786 = sub nsw i32 %785, 2
  %787 = trunc i32 %786 to i16
  store i16 %787, i16* @height, align 2
  br label %860

; <label>:788                                     ; preds = %779, %776
  %789 = load i32* %is_canon, align 4
  %790 = icmp ne i32 %789, 0
  br i1 %790, label %791, label %796

; <label>:791                                     ; preds = %788
  %792 = load i16* @raw_width, align 2
  %793 = zext i16 %792 to i32
  %794 = icmp eq i32 %793, 4104
  br i1 %794, label %795, label %796

; <label>:795                                     ; preds = %791
  store i16 3024, i16* @height, align 2
  store i16 4032, i16* @width, align 2
  store i16 12, i16* @top_margin, align 2
  store i16 48, i16* @left_margin, align 2
  br label %2197

; <label>:796                                     ; preds = %791, %788
  %797 = load i32* %is_canon, align 4
  %798 = icmp ne i32 %797, 0
  br i1 %798, label %799, label %812

; <label>:799                                     ; preds = %796
  %800 = load i16* @raw_width, align 2
  %801 = zext i16 %800 to i32
  %802 = icmp eq i32 %801, 4312
  br i1 %802, label %803, label %812

; <label>:803                                     ; preds = %799
  store i16 18, i16* @top_margin, align 2
  store i16 22, i16* @left_margin, align 2
  %804 = load i16* @height, align 2
  %805 = zext i16 %804 to i32
  %806 = sub nsw i32 %805, 2
  %807 = trunc i32 %806 to i16
  store i16 %807, i16* @height, align 2
  %808 = load i32* @unique_id, align 4
  %809 = icmp eq i32 %808, -2147483274
  br i1 %809, label %810, label %811

; <label>:810                                     ; preds = %803
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str471, i32 0, i32 0))
  br label %811

; <label>:811                                     ; preds = %810, %803
  br label %860

; <label>:812                                     ; preds = %799, %796
  %813 = load i32* %is_canon, align 4
  %814 = icmp ne i32 %813, 0
  br i1 %814, label %815, label %820

; <label>:815                                     ; preds = %812
  %816 = load i16* @raw_width, align 2
  %817 = zext i16 %816 to i32
  %818 = icmp eq i32 %817, 4476
  br i1 %818, label %819, label %820

; <label>:819                                     ; preds = %815
  store i16 34, i16* @top_margin, align 2
  store i16 90, i16* @left_margin, align 2
  br label %860

; <label>:820                                     ; preds = %815, %812
  %821 = load i32* %is_canon, align 4
  %822 = icmp ne i32 %821, 0
  br i1 %822, label %823, label %828

; <label>:823                                     ; preds = %820
  %824 = load i16* @raw_width, align 2
  %825 = zext i16 %824 to i32
  %826 = icmp eq i32 %825, 4480
  br i1 %826, label %827, label %828

; <label>:827                                     ; preds = %823
  store i16 3326, i16* @height, align 2
  store i16 4432, i16* @width, align 2
  store i16 10, i16* @top_margin, align 2
  store i16 12, i16* @left_margin, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %2194

; <label>:828                                     ; preds = %823, %820
  %829 = load i32* %is_canon, align 4
  %830 = icmp ne i32 %829, 0
  br i1 %830, label %831, label %840

; <label>:831                                     ; preds = %828
  %832 = load i16* @raw_width, align 2
  %833 = zext i16 %832 to i32
  %834 = icmp eq i32 %833, 1208
  br i1 %834, label %835, label %840

; <label>:835                                     ; preds = %831
  store i16 51, i16* @top_margin, align 2
  store i16 62, i16* @left_margin, align 2
  %836 = load i16* @width, align 2
  %837 = zext i16 %836 to i32
  %838 = mul nsw i32 %837, 4
  %839 = trunc i32 %838 to i16
  store i16 %839, i16* @width, align 2
  store i16 %839, i16* @raw_width, align 2
  br label %860

; <label>:840                                     ; preds = %831, %828
  %841 = load i32* %is_canon, align 4
  %842 = icmp ne i32 %841, 0
  br i1 %842, label %843, label %852

; <label>:843                                     ; preds = %840
  %844 = load i16* @raw_width, align 2
  %845 = zext i16 %844 to i32
  %846 = icmp eq i32 %845, 1448
  br i1 %846, label %847, label %852

; <label>:847                                     ; preds = %843
  store i16 51, i16* @top_margin, align 2
  store i16 158, i16* @left_margin, align 2
  %848 = load i16* @width, align 2
  %849 = zext i16 %848 to i32
  %850 = mul nsw i32 %849, 4
  %851 = trunc i32 %850 to i16
  store i16 %851, i16* @width, align 2
  store i16 %851, i16* @raw_width, align 2
  br label %860

; <label>:852                                     ; preds = %843, %840
  %853 = load i32* %is_canon, align 4
  %854 = icmp ne i32 %853, 0
  br i1 %854, label %855, label %873

; <label>:855                                     ; preds = %852
  %856 = load i16* @raw_width, align 2
  %857 = zext i16 %856 to i32
  %858 = icmp eq i32 %857, 5108
  br i1 %858, label %859, label %873

; <label>:859                                     ; preds = %855
  store i16 13, i16* @top_margin, align 2
  store i16 98, i16* @left_margin, align 2
  br label %860

; <label>:860                                     ; preds = %859, %847, %835, %819, %811, %783, %775, %747, %739
  %861 = load i16* @top_margin, align 2
  %862 = zext i16 %861 to i32
  %863 = load i16* @height, align 2
  %864 = zext i16 %863 to i32
  %865 = sub nsw i32 %864, %862
  %866 = trunc i32 %865 to i16
  store i16 %866, i16* @height, align 2
  %867 = load i16* @left_margin, align 2
  %868 = zext i16 %867 to i32
  %869 = load i16* @width, align 2
  %870 = zext i16 %869 to i32
  %871 = sub nsw i32 %870, %868
  %872 = trunc i32 %871 to i16
  store i16 %872, i16* @width, align 2
  br label %2191

; <label>:873                                     ; preds = %855, %852
  %874 = load i32* %is_canon, align 4
  %875 = icmp ne i32 %874, 0
  br i1 %875, label %876, label %881

; <label>:876                                     ; preds = %873
  %877 = load i16* @raw_width, align 2
  %878 = zext i16 %877 to i32
  %879 = icmp eq i32 %878, 5712
  br i1 %879, label %880, label %881

; <label>:880                                     ; preds = %876
  store i16 3752, i16* @height, align 2
  store i16 5640, i16* @width, align 2
  store i16 20, i16* @top_margin, align 2
  store i16 62, i16* @left_margin, align 2
  br label %2190

; <label>:881                                     ; preds = %876, %873
  %882 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str472, i32 0, i32 0)) #10
  %883 = icmp ne i32 %882, 0
  br i1 %883, label %893, label %884

; <label>:884                                     ; preds = %881
  %885 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %886 = fpext float %885 to double
  %887 = fmul double %886, 0x3FDF16D4C4401F17
  %888 = fptrunc double %887 to float
  store float %888, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %889 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %890 = fpext float %889 to double
  %891 = fmul double %890, 0x3FE9D79F176B682D
  %892 = fptrunc double %891 to float
  store float %892, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  br label %2189

; <label>:893                                     ; preds = %881
  %894 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str473, i32 0, i32 0)) #10
  %895 = icmp ne i32 %894, 0
  br i1 %895, label %901, label %896

; <label>:896                                     ; preds = %893
  %897 = load i16* @width, align 2
  %898 = zext i16 %897 to i32
  %899 = sub nsw i32 %898, 4
  %900 = trunc i32 %899 to i16
  store i16 %900, i16* @width, align 2
  store double 5.000000e-01, double* @pixel_aspect, align 8
  br label %2188

; <label>:901                                     ; preds = %893
  %902 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str474, i32 0, i32 0)) #10
  %903 = icmp ne i32 %902, 0
  br i1 %903, label %904, label %910

; <label>:904                                     ; preds = %901
  %905 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str475, i32 0, i32 0)) #10
  %906 = icmp ne i32 %905, 0
  br i1 %906, label %907, label %910

; <label>:907                                     ; preds = %904
  %908 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str476, i32 0, i32 0)) #10
  %909 = icmp ne i32 %908, 0
  br i1 %909, label %919, label %910

; <label>:910                                     ; preds = %907, %904, %901
  %911 = load i16* @height, align 2
  %912 = zext i16 %911 to i32
  %913 = sub nsw i32 %912, 3
  %914 = trunc i32 %913 to i16
  store i16 %914, i16* @height, align 2
  %915 = load i16* @width, align 2
  %916 = zext i16 %915 to i32
  %917 = sub nsw i32 %916, 4
  %918 = trunc i32 %917 to i16
  store i16 %918, i16* @width, align 2
  br label %2187

; <label>:919                                     ; preds = %907
  %920 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str477, i32 0, i32 0)) #10
  %921 = icmp ne i32 %920, 0
  br i1 %921, label %922, label %925

; <label>:922                                     ; preds = %919
  %923 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str478, i32 0, i32 0)) #10
  %924 = icmp ne i32 %923, 0
  br i1 %924, label %930, label %925

; <label>:925                                     ; preds = %922, %919
  %926 = load i16* @width, align 2
  %927 = zext i16 %926 to i32
  %928 = sub nsw i32 %927, 4
  %929 = trunc i32 %928 to i16
  store i16 %929, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %2186

; <label>:930                                     ; preds = %922
  %931 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str479, i32 0, i32 0), i64 3) #10
  %932 = icmp ne i32 %931, 0
  br i1 %932, label %933, label %939

; <label>:933                                     ; preds = %930
  %934 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str480, i32 0, i32 0), i64 3) #10
  %935 = icmp ne i32 %934, 0
  br i1 %935, label %936, label %939

; <label>:936                                     ; preds = %933
  %937 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str481, i32 0, i32 0), i64 3) #10
  %938 = icmp ne i32 %937, 0
  br i1 %938, label %942, label %939

; <label>:939                                     ; preds = %936, %933, %930
  %940 = load i16* @width, align 2
  %941 = add i16 %940, -1
  store i16 %941, i16* @width, align 2
  br label %2185

; <label>:942                                     ; preds = %936
  %943 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str482, i32 0, i32 0)) #10
  %944 = icmp ne i32 %943, 0
  br i1 %944, label %950, label %945

; <label>:945                                     ; preds = %942
  %946 = load i16* @width, align 2
  %947 = zext i16 %946 to i32
  %948 = sub nsw i32 %947, 42
  %949 = trunc i32 %948 to i16
  store i16 %949, i16* @width, align 2
  br label %2184

; <label>:950                                     ; preds = %942
  %951 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str483, i32 0, i32 0)) #10
  %952 = icmp ne i32 %951, 0
  br i1 %952, label %970, label %953

; <label>:953                                     ; preds = %950
  %954 = load i32* @tiff_compress, align 4
  %955 = icmp eq i32 %954, 34713
  br i1 %955, label %956, label %969

; <label>:956                                     ; preds = %953
  %957 = call i32 @nikon_is_compressed()
  %958 = icmp ne i32 %957, 0
  br i1 %958, label %969, label %959

; <label>:959                                     ; preds = %956
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  %960 = load i32* @load_flags, align 4
  %961 = or i32 %960, 8
  store i32 %961, i32* @load_flags, align 4
  %962 = load i16* @width, align 2
  %963 = zext i16 %962 to i32
  %964 = add nsw i32 %963, 3
  %965 = trunc i32 %964 to i16
  store i16 %965, i16* @width, align 2
  %966 = zext i16 %965 to i32
  %967 = add nsw i32 %966, 3
  %968 = trunc i32 %967 to i16
  store i16 %968, i16* @raw_width, align 2
  br label %969

; <label>:969                                     ; preds = %959, %956, %953
  br label %2183

; <label>:970                                     ; preds = %950
  %971 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str484, i32 0, i32 0)) #10
  %972 = icmp ne i32 %971, 0
  br i1 %972, label %978, label %973

; <label>:973                                     ; preds = %970
  store i16 1, i16* @left_margin, align 2
  %974 = load i16* @width, align 2
  %975 = zext i16 %974 to i32
  %976 = sub nsw i32 %975, 4
  %977 = trunc i32 %976 to i16
  store i16 %977, i16* @width, align 2
  store i32 -1802201964, i32* @filters, align 4
  br label %2182

; <label>:978                                     ; preds = %970
  %979 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str485, i32 0, i32 0), i64 3) #10
  %980 = icmp ne i32 %979, 0
  br i1 %980, label %986, label %981

; <label>:981                                     ; preds = %978
  store i16 6, i16* @left_margin, align 2
  %982 = load i16* @width, align 2
  %983 = zext i16 %982 to i32
  %984 = sub nsw i32 %983, 14
  %985 = trunc i32 %984 to i16
  store i16 %985, i16* @width, align 2
  br label %2181

; <label>:986                                     ; preds = %978
  %987 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str486, i32 0, i32 0), i64 3) #10
  %988 = icmp ne i32 %987, 0
  br i1 %988, label %1004, label %989

; <label>:989                                     ; preds = %986
  %990 = load i16* @width, align 2
  %991 = zext i16 %990 to i32
  %992 = icmp eq i32 %991, 3264
  br i1 %992, label %993, label %998

; <label>:993                                     ; preds = %989
  %994 = load i16* @width, align 2
  %995 = zext i16 %994 to i32
  %996 = sub nsw i32 %995, 32
  %997 = trunc i32 %996 to i16
  store i16 %997, i16* @width, align 2
  br label %1003

; <label>:998                                     ; preds = %989
  %999 = load i16* @width, align 2
  %1000 = zext i16 %999 to i32
  %1001 = sub nsw i32 %1000, 8
  %1002 = trunc i32 %1001 to i16
  store i16 %1002, i16* @width, align 2
  br label %1003

; <label>:1003                                    ; preds = %998, %993
  br label %2180

; <label>:1004                                    ; preds = %986
  %1005 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str487, i32 0, i32 0)) #10
  %1006 = icmp ne i32 %1005, 0
  br i1 %1006, label %1012, label %1007

; <label>:1007                                    ; preds = %1004
  %1008 = load i16* @width, align 2
  %1009 = zext i16 %1008 to i32
  %1010 = sub nsw i32 %1009, 32
  %1011 = trunc i32 %1010 to i16
  store i16 %1011, i16* @width, align 2
  br label %2179

; <label>:1012                                    ; preds = %1004
  %1013 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str488, i32 0, i32 0)) #10
  %1014 = icmp ne i32 %1013, 0
  br i1 %1014, label %1016, label %1015

; <label>:1015                                    ; preds = %1012
  store i32 1, i32* @load_flags, align 4
  store i32 -1802201964, i32* @filters, align 4
  br label %2178

; <label>:1016                                    ; preds = %1012
  %1017 = load i32* %fsize, align 4
  %1018 = icmp eq i32 %1017, 1581060
  br i1 %1018, label %1019, label %1020

; <label>:1019                                    ; preds = %1016
  store i16 963, i16* @height, align 2
  store i16 1287, i16* @width, align 2
  store i16 1632, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @nikon_e900_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1012, i32* @maximum, align 4
  store i32 4, i32* @colors, align 4
  store i32 505290270, i32* @filters, align 4
  call void @simple_coeff(i32 3)
  store float 0x3FF3560420000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF18240C0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  store float 0x3FF1C3C9E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  br label %2177

; <label>:1020                                    ; preds = %1016
  %1021 = load i32* %fsize, align 4
  %1022 = icmp eq i32 %1021, 2465792
  br i1 %1022, label %1023, label %1024

; <label>:1023                                    ; preds = %1020
  store i16 1203, i16* @height, align 2
  store i16 1616, i16* @width, align 2
  store i16 2048, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @nikon_e900_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 4, i32* @colors, align 4
  store i32 1263225675, i32* @filters, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([6 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str489, i32 0, i32 0))
  br label %2176

; <label>:1024                                    ; preds = %1020
  %1025 = load i32* %fsize, align 4
  %1026 = icmp eq i32 %1025, 4771840
  br i1 %1026, label %1027, label %1040

; <label>:1027                                    ; preds = %1024
  store i16 1540, i16* @height, align 2
  store i16 2064, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -505290271, i32* @filters, align 4
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 6, i32* @load_flags, align 4
  %1028 = load i64* @timestamp, align 8
  %1029 = icmp ne i64 %1028, 0
  br i1 %1029, label %1035, label %1030

; <label>:1030                                    ; preds = %1027
  %1031 = call i32 @nikon_e995()
  %1032 = icmp ne i32 %1031, 0
  br i1 %1032, label %1033, label %1035

; <label>:1033                                    ; preds = %1030
  %1034 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str490, i32 0, i32 0)) #4
  br label %1035

; <label>:1035                                    ; preds = %1033, %1030, %1027
  %1036 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str490, i32 0, i32 0)) #10
  %1037 = icmp ne i32 %1036, 0
  br i1 %1037, label %1038, label %1039

; <label>:1038                                    ; preds = %1035
  store i32 -1263225676, i32* @filters, align 4
  call void @simple_coeff(i32 3)
  store float 0x3FF322D0E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF3EF9DC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  store float 0x3FF049BA60000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1039

; <label>:1039                                    ; preds = %1038, %1035
  br label %2175

; <label>:1040                                    ; preds = %1024
  %1041 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str491, i32 0, i32 0)) #10
  %1042 = icmp ne i32 %1041, 0
  br i1 %1042, label %1051, label %1043

; <label>:1043                                    ; preds = %1040
  %1044 = load i64* @timestamp, align 8
  %1045 = icmp ne i64 %1044, 0
  br i1 %1045, label %1050, label %1046

; <label>:1046                                    ; preds = %1043
  %1047 = call i32 @nikon_e2100()
  %1048 = icmp ne i32 %1047, 0
  br i1 %1048, label %1050, label %1049

; <label>:1049                                    ; preds = %1046
  br label %1055

; <label>:1050                                    ; preds = %1046, %1043
  store i16 1206, i16* @height, align 2
  store i16 1616, i16* @width, align 2
  store i32 7, i32* @load_flags, align 4
  br label %2174

; <label>:1051                                    ; preds = %1040
  %1052 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str492, i32 0, i32 0)) #10
  %1053 = icmp ne i32 %1052, 0
  br i1 %1053, label %1057, label %1054

; <label>:1054                                    ; preds = %1051
  br label %1055

; <label>:1055                                    ; preds = %1054, %1049
  %1056 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str492, i32 0, i32 0)) #4
  store i16 1204, i16* @height, align 2
  store i16 1616, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 1263225675, i32* @filters, align 4
  br label %2173

; <label>:1057                                    ; preds = %1051
  %1058 = load i32* %fsize, align 4
  %1059 = icmp eq i32 %1058, 4775936
  br i1 %1059, label %1060, label %1077

; <label>:1060                                    ; preds = %1057
  store i16 1542, i16* @height, align 2
  store i16 2064, i16* @width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  store float 0x3FFD168720000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF9E35400000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %1061 = load i64* @timestamp, align 8
  %1062 = icmp ne i64 %1061, 0
  br i1 %1062, label %1064, label %1063

; <label>:1063                                    ; preds = %1060
  call void @nikon_3700()
  br label %1064

; <label>:1064                                    ; preds = %1063, %1060
  %1065 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1066 = sext i8 %1065 to i32
  %1067 = icmp eq i32 %1066, 69
  br i1 %1067, label %1068, label %1072

; <label>:1068                                    ; preds = %1064
  %1069 = call i32 @atoi(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 1)) #10
  %1070 = icmp slt i32 %1069, 3700
  br i1 %1070, label %1071, label %1072

; <label>:1071                                    ; preds = %1068
  store i32 1229539657, i32* @filters, align 4
  br label %1072

; <label>:1072                                    ; preds = %1071, %1068, %1064
  %1073 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str493, i32 0, i32 0)) #10
  %1074 = icmp ne i32 %1073, 0
  br i1 %1074, label %1076, label %1075

; <label>:1075                                    ; preds = %1072
  store i32 1, i32* @flip, align 4
  store i32 370546198, i32* @filters, align 4
  store float 0x3FF54BC6A0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FFD1EB860000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1076

; <label>:1076                                    ; preds = %1075, %1072
  br label %2172

; <label>:1077                                    ; preds = %1057
  %1078 = load i32* %fsize, align 4
  %1079 = icmp eq i32 %1078, 5869568
  br i1 %1079, label %1080, label %1095

; <label>:1080                                    ; preds = %1077
  store i16 1710, i16* @height, align 2
  store i16 2288, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  %1081 = load i64* @timestamp, align 8
  %1082 = icmp ne i64 %1081, 0
  br i1 %1082, label %1089, label %1083

; <label>:1083                                    ; preds = %1080
  %1084 = call i32 @minolta_z2()
  %1085 = icmp ne i32 %1084, 0
  br i1 %1085, label %1086, label %1089

; <label>:1086                                    ; preds = %1083
  %1087 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str422, i32 0, i32 0)) #4
  %1088 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str494, i32 0, i32 0)) #4
  br label %1089

; <label>:1089                                    ; preds = %1086, %1083, %1080
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  %1090 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %1091 = sext i8 %1090 to i32
  %1092 = icmp eq i32 %1091, 77
  %1093 = zext i1 %1092 to i32
  %1094 = add nsw i32 6, %1093
  store i32 %1094, i32* @load_flags, align 4
  br label %2171

; <label>:1095                                    ; preds = %1077
  %1096 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str495, i32 0, i32 0)) #10
  %1097 = icmp ne i32 %1096, 0
  br i1 %1097, label %1099, label %1098

; <label>:1098                                    ; preds = %1095
  store i16 1708, i16* @height, align 2
  store i16 2288, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %2170

; <label>:1099                                    ; preds = %1095
  %1100 = load i32* %fsize, align 4
  %1101 = icmp eq i32 %1100, 7438336
  br i1 %1101, label %1102, label %1103

; <label>:1102                                    ; preds = %1099
  store i16 1924, i16* @height, align 2
  store i16 2576, i16* @width, align 2
  store i32 4, i32* @colors, align 4
  store i32 -1263225676, i32* @filters, align 4
  br label %2169

; <label>:1103                                    ; preds = %1099
  %1104 = load i32* %fsize, align 4
  %1105 = icmp eq i32 %1104, 8998912
  br i1 %1105, label %1106, label %1107

; <label>:1106                                    ; preds = %1103
  store i16 2118, i16* @height, align 2
  store i16 2832, i16* @width, align 2
  store i32 3971, i32* @maximum, align 4
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  br label %2168

; <label>:1107                                    ; preds = %1103
  %1108 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str496, i32 0, i32 0)) #10
  %1109 = icmp ne i32 %1108, 0
  br i1 %1109, label %1110, label %1113

; <label>:1110                                    ; preds = %1107
  %1111 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str497, i32 0, i32 0)) #10
  %1112 = icmp ne i32 %1111, 0
  br i1 %1112, label %1114, label %1113

; <label>:1113                                    ; preds = %1110, %1107
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2167

; <label>:1114                                    ; preds = %1110
  %1115 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str94, i32 0, i32 0)) #10
  %1116 = icmp ne i32 %1115, 0
  br i1 %1116, label %1200, label %1117

; <label>:1117                                    ; preds = %1114
  %1118 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 7), i8* getelementptr inbounds ([6 x i8]* @.str498, i32 0, i32 0)) #10
  %1119 = icmp ne i32 %1118, 0
  br i1 %1119, label %1122, label %1120

; <label>:1120                                    ; preds = %1117
  %1121 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 7), i8* getelementptr inbounds ([7 x i8]* @.str499, i32 0, i32 0)) #4
  store i16 2144, i16* @height, align 2
  store i16 2880, i16* @width, align 2
  store i32 6, i32* @flip, align 4
  br label %1123

; <label>:1122                                    ; preds = %1117
  store i32 15872, i32* @maximum, align 4
  br label %1123

; <label>:1123                                    ; preds = %1122, %1120
  %1124 = load i32* @is_raw, align 4
  %1125 = icmp eq i32 %1124, 2
  br i1 %1125, label %1126, label %1130

; <label>:1126                                    ; preds = %1123
  %1127 = load i32* @shot_select, align 4
  %1128 = icmp ne i32 %1127, 0
  br i1 %1128, label %1129, label %1130

; <label>:1129                                    ; preds = %1126
  store i32 12032, i32* @maximum, align 4
  br label %1130

; <label>:1130                                    ; preds = %1129, %1126, %1123
  %1131 = load i16* @raw_height, align 2
  %1132 = zext i16 %1131 to i32
  %1133 = load i16* @height, align 2
  %1134 = zext i16 %1133 to i32
  %1135 = sub nsw i32 %1132, %1134
  %1136 = sdiv i32 %1135, 2
  %1137 = trunc i32 %1136 to i16
  store i16 %1137, i16* @top_margin, align 2
  %1138 = load i16* @raw_width, align 2
  %1139 = zext i16 %1138 to i32
  %1140 = load i16* @width, align 2
  %1141 = zext i16 %1140 to i32
  %1142 = sub nsw i32 %1139, %1141
  %1143 = sdiv i32 %1142, 2
  %1144 = trunc i32 %1143 to i16
  store i16 %1144, i16* @left_margin, align 2
  %1145 = load i32* @is_raw, align 4
  %1146 = icmp eq i32 %1145, 2
  br i1 %1146, label %1147, label %1172

; <label>:1147                                    ; preds = %1130
  %1148 = load i32* @shot_select, align 4
  %1149 = icmp ugt i32 %1148, 0
  %1150 = zext i1 %1149 to i32
  %1151 = load i32* @fuji_layout, align 4
  %1152 = icmp ne i32 %1151, 0
  br i1 %1152, label %1153, label %1159

; <label>:1153                                    ; preds = %1147
  %1154 = load i16* @raw_width, align 2
  %1155 = zext i16 %1154 to i32
  %1156 = mul nsw i32 %1155, 2
  %1157 = trunc i32 %1156 to i16
  store i16 %1157, i16* @raw_width, align 2
  %1158 = zext i16 %1157 to i32
  br label %1166

; <label>:1159                                    ; preds = %1147
  %1160 = load i16* @raw_height, align 2
  %1161 = zext i16 %1160 to i32
  %1162 = load i16* @raw_width, align 2
  %1163 = zext i16 %1162 to i32
  %1164 = mul nsw i32 %1161, %1163
  %1165 = mul nsw i32 %1164, 2
  br label %1166

; <label>:1166                                    ; preds = %1159, %1153
  %1167 = phi i32 [ %1158, %1153 ], [ %1165, %1159 ]
  %1168 = mul nsw i32 %1150, %1167
  %1169 = sext i32 %1168 to i64
  %1170 = load i64* @data_offset, align 8
  %1171 = add nsw i64 %1170, %1169
  store i64 %1171, i64* @data_offset, align 8
  br label %1172

; <label>:1172                                    ; preds = %1166, %1130
  %1173 = load i16* @width, align 2
  %1174 = zext i16 %1173 to i32
  %1175 = load i32* @fuji_layout, align 4
  %1176 = icmp ne i32 %1175, 0
  %1177 = xor i1 %1176, true
  %1178 = zext i1 %1177 to i32
  %1179 = ashr i32 %1174, %1178
  %1180 = trunc i32 %1179 to i16
  store i16 %1180, i16* @fuji_width, align 2
  %1181 = load i16* @height, align 2
  %1182 = zext i16 %1181 to i32
  %1183 = load i32* @fuji_layout, align 4
  %1184 = ashr i32 %1182, %1183
  %1185 = load i16* @fuji_width, align 2
  %1186 = zext i16 %1185 to i32
  %1187 = add nsw i32 %1184, %1186
  %1188 = trunc i32 %1187 to i16
  store i16 %1188, i16* @width, align 2
  %1189 = load i16* @height, align 2
  store i16 %1189, i16* @raw_height, align 2
  %1190 = load i16* @width, align 2
  %1191 = zext i16 %1190 to i32
  %1192 = sub nsw i32 %1191, 1
  %1193 = trunc i32 %1192 to i16
  store i16 %1193, i16* @height, align 2
  store void (...)* bitcast (void ()* @fuji_load_raw to void (...)*), void (...)** @load_raw, align 8
  %1194 = load i16* @fuji_width, align 2
  %1195 = zext i16 %1194 to i32
  %1196 = and i32 %1195, 1
  %1197 = icmp ne i32 %1196, 0
  br i1 %1197, label %1199, label %1198

; <label>:1198                                    ; preds = %1172
  store i32 1229539657, i32* @filters, align 4
  br label %1199

; <label>:1199                                    ; preds = %1198, %1172
  br label %2166

; <label>:1200                                    ; preds = %1114
  %1201 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str500, i32 0, i32 0)) #10
  %1202 = icmp ne i32 %1201, 0
  br i1 %1202, label %1204, label %1203

; <label>:1203                                    ; preds = %1200
  store i16 986, i16* @height, align 2
  store i16 1534, i16* @width, align 2
  store i64 513, i64* @data_offset, align 8
  store i32 1633771873, i32* @filters, align 4
  store void (...)* bitcast (void ()* @minolta_rd175_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2165

; <label>:1204                                    ; preds = %1200
  %1205 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str501, i32 0, i32 0)) #10
  %1206 = icmp ne i32 %1205, 0
  br i1 %1206, label %1208, label %1207

; <label>:1207                                    ; preds = %1204
  store i16 1712, i16* @height, align 2
  store i16 2312, i16* @width, align 2
  store i16 2336, i16* @raw_width, align 2
  br label %1264

; <label>:1208                                    ; preds = %1204
  %1209 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str502, i32 0, i32 0)) #10
  %1210 = icmp ne i32 %1209, 0
  br i1 %1210, label %1212, label %1211

; <label>:1211                                    ; preds = %1208
  br label %1253

; <label>:1212                                    ; preds = %1208
  %1213 = call i32 @strcasecmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str421, i32 0, i32 0)) #10
  %1214 = icmp ne i32 %1213, 0
  br i1 %1214, label %1268, label %1215

; <label>:1215                                    ; preds = %1212
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 4095, i32* @maximum, align 4
  %1216 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str503, i32 0, i32 0), i64 8) #10
  %1217 = icmp ne i32 %1216, 0
  br i1 %1217, label %1223, label %1218

; <label>:1218                                    ; preds = %1215
  %1219 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str162, i32 0, i32 0)) #10
  %1220 = icmp ne i32 %1219, 0
  br i1 %1220, label %1222, label %1221

; <label>:1221                                    ; preds = %1218
  store i32 1229539657, i32* @filters, align 4
  br label %1222

; <label>:1222                                    ; preds = %1221, %1218
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1267

; <label>:1223                                    ; preds = %1215
  %1224 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str504, i32 0, i32 0), i64 5) #10
  %1225 = icmp ne i32 %1224, 0
  br i1 %1225, label %1226, label %1232

; <label>:1226                                    ; preds = %1223
  %1227 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str505, i32 0, i32 0), i64 5) #10
  %1228 = icmp ne i32 %1227, 0
  br i1 %1228, label %1229, label %1232

; <label>:1229                                    ; preds = %1226
  %1230 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str506, i32 0, i32 0), i64 6) #10
  %1231 = icmp ne i32 %1230, 0
  br i1 %1231, label %1240, label %1232

; <label>:1232                                    ; preds = %1229, %1226, %1223
  %1233 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1234 = sext i8 %1233 to i32
  %1235 = icmp eq i32 %1234, 77
  %1236 = zext i1 %1235 to i32
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 6), i64 %1237
  %1239 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 20), i8* getelementptr inbounds ([12 x i8]* @.str507, i32 0, i32 0), i8* %1238) #4
  call void @adobe_coeff(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 20))
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1266

; <label>:1240                                    ; preds = %1229
  %1241 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str508, i32 0, i32 0), i64 8) #10
  %1242 = icmp ne i32 %1241, 0
  br i1 %1242, label %1265, label %1243

; <label>:1243                                    ; preds = %1240
  %1244 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 8), align 1
  %1245 = sext i8 %1244 to i32
  %1246 = icmp eq i32 %1245, 52
  br i1 %1246, label %1247, label %1248

; <label>:1247                                    ; preds = %1243
  store i16 1716, i16* @height, align 2
  store i16 2304, i16* @width, align 2
  br label %1261

; <label>:1248                                    ; preds = %1243
  %1249 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 8), align 1
  %1250 = sext i8 %1249 to i32
  %1251 = icmp eq i32 %1250, 53
  br i1 %1251, label %1252, label %1254

; <label>:1252                                    ; preds = %1248
  br label %1253

; <label>:1253                                    ; preds = %1252, %1211
  store i16 1956, i16* @height, align 2
  store i16 2607, i16* @width, align 2
  store i16 2624, i16* @raw_width, align 2
  br label %1260

; <label>:1254                                    ; preds = %1248
  %1255 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 8), align 1
  %1256 = sext i8 %1255 to i32
  %1257 = icmp eq i32 %1256, 54
  br i1 %1257, label %1258, label %1259

; <label>:1258                                    ; preds = %1254
  store i16 2136, i16* @height, align 2
  store i16 2848, i16* @width, align 2
  br label %1259

; <label>:1259                                    ; preds = %1258, %1254
  br label %1260

; <label>:1260                                    ; preds = %1259, %1253
  br label %1261

; <label>:1261                                    ; preds = %1260, %1247
  %1262 = load i64* @data_offset, align 8
  %1263 = add nsw i64 %1262, 14
  store i64 %1263, i64* @data_offset, align 8
  store i32 1633771873, i32* @filters, align 4
  br label %1264

; <label>:1264                                    ; preds = %1261, %1207
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 991, i32* @maximum, align 4
  store i16 19789, i16* @order, align 2
  br label %1265

; <label>:1265                                    ; preds = %1264, %1240
  br label %1266

; <label>:1266                                    ; preds = %1265, %1232
  br label %1267

; <label>:1267                                    ; preds = %1266, %1222
  br label %2162

; <label>:1268                                    ; preds = %1212
  %1269 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str509, i32 0, i32 0)) #10
  %1270 = icmp ne i32 %1269, 0
  br i1 %1270, label %1276, label %1271

; <label>:1271                                    ; preds = %1268
  %1272 = load i16* @height, align 2
  %1273 = zext i16 %1272 to i32
  %1274 = sub nsw i32 %1273, 2
  %1275 = trunc i32 %1274 to i16
  store i16 %1275, i16* @height, align 2
  br label %2161

; <label>:1276                                    ; preds = %1268
  %1277 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str510, i32 0, i32 0)) #10
  %1278 = icmp ne i32 %1277, 0
  br i1 %1278, label %1280, label %1279

; <label>:1279                                    ; preds = %1276
  store i32 370546198, i32* @filters, align 4
  br label %2160

; <label>:1280                                    ; preds = %1276
  %1281 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str511, i32 0, i32 0)) #10
  %1282 = icmp ne i32 %1281, 0
  br i1 %1282, label %1293, label %1283

; <label>:1283                                    ; preds = %1280
  %1284 = load i32* %fsize, align 4
  %1285 = icmp eq i32 %1284, 3178560
  br i1 %1285, label %1286, label %1291

; <label>:1286                                    ; preds = %1283
  store i16 1540, i16* @height, align 2
  store i16 2064, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  %1287 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %1288 = fmul float %1287, 4.000000e+00
  store float %1288, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %1289 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  %1290 = fmul float %1289, 4.000000e+00
  store float %1290, float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 2), align 4
  store float 0x3FF6418940000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF3020C40000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1292

; <label>:1291                                    ; preds = %1283
  store i16 1544, i16* @height, align 2
  store i16 2068, i16* @width, align 2
  store i16 3136, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 3964, i32* @maximum, align 4
  store float 0x3FF23126E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF73F7CE0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %1292

; <label>:1292                                    ; preds = %1291, %1286
  br label %2159

; <label>:1293                                    ; preds = %1280
  %1294 = load i32* %fsize, align 4
  %1295 = icmp eq i32 %1294, 6114240
  br i1 %1295, label %1296, label %1297

; <label>:1296                                    ; preds = %1293
  store i16 1737, i16* @height, align 2
  store i16 2324, i16* @width, align 2
  store i16 3520, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 3962, i32* @maximum, align 4
  store float 0x3FFFAE1480000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF91EB860000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2158

; <label>:1297                                    ; preds = %1293
  %1298 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str512, i32 0, i32 0)) #10
  %1299 = icmp ne i32 %1298, 0
  br i1 %1299, label %1301, label %1300

; <label>:1300                                    ; preds = %1297
  store i16 2302, i16* @height, align 2
  store i16 3072, i16* @width, align 2
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  br label %2157

; <label>:1301                                    ; preds = %1297
  %1302 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str513, i32 0, i32 0)) #10
  %1303 = icmp ne i32 %1302, 0
  br i1 %1303, label %1311, label %1304

; <label>:1304                                    ; preds = %1301
  store i16 2448, i16* @height, align 2
  store i16 3264, i16* @width, align 2
  %1305 = load i32* %fsize, align 4
  %1306 = load i16* @height, align 2
  %1307 = zext i16 %1306 to i32
  %1308 = udiv i32 %1305, %1307
  %1309 = udiv i32 %1308, 2
  %1310 = trunc i32 %1309 to i16
  store i16 %1310, i16* @raw_width, align 2
  store i16 19789, i16* @order, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 65535, i32* @maximum, align 4
  br label %2156

; <label>:1311                                    ; preds = %1301
  %1312 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str514, i32 0, i32 0)) #10
  %1313 = icmp ne i32 %1312, 0
  br i1 %1313, label %1315, label %1314

; <label>:1314                                    ; preds = %1311
  store i16 484, i16* @height, align 2
  store i16 644, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 2, i32* @flip, align 4
  store i32 370546198, i32* @filters, align 4
  store i32 16, i32* @black, align 4
  store float 0x3FF18D4FE0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF20C49C0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2155

; <label>:1315                                    ; preds = %1311
  %1316 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str515, i32 0, i32 0)) #10
  %1317 = icmp ne i32 %1316, 0
  br i1 %1317, label %1319, label %1318

; <label>:1318                                    ; preds = %1315
  store i16 477, i16* @height, align 2
  store i16 640, i16* @width, align 2
  store i16 18761, i16* @order, align 2
  store i64 3840, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store float 0x3FF8F9DB20000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x4003A1CAC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2154

; <label>:1319                                    ; preds = %1315
  %1320 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str516, i32 0, i32 0)) #10
  %1321 = icmp ne i32 %1320, 0
  br i1 %1321, label %1327, label %1322

; <label>:1322                                    ; preds = %1319
  %1323 = load i16* @raw_height, align 2
  %1324 = zext i16 %1323 to i32
  store i16 2, i16* @top_margin, align 2
  %1325 = sub nsw i32 %1324, 2
  %1326 = trunc i32 %1325 to i16
  store i16 %1326, i16* @height, align 2
  br label %2153

; <label>:1327                                    ; preds = %1319
  %1328 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str517, i32 0, i32 0)) #10
  %1329 = icmp ne i32 %1328, 0
  br i1 %1329, label %1331, label %1330

; <label>:1330                                    ; preds = %1327
  store i16 1200, i16* @height, align 2
  store i16 1600, i16* @width, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1229539657, i32* @filters, align 4
  store float 0x3FF37CEDA0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  br label %2152

; <label>:1331                                    ; preds = %1327
  %1332 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str518, i32 0, i32 0)) #10
  %1333 = icmp ne i32 %1332, 0
  br i1 %1333, label %1335, label %1334

; <label>:1334                                    ; preds = %1331
  store i16 768, i16* @height, align 2
  store i16 1024, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2151

; <label>:1335                                    ; preds = %1331
  %1336 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str519, i32 0, i32 0)) #10
  %1337 = icmp ne i32 %1336, 0
  br i1 %1337, label %1339, label %1338

; <label>:1338                                    ; preds = %1335
  store i16 1040, i16* @height, align 2
  store i16 1392, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2150

; <label>:1339                                    ; preds = %1335
  %1340 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str520, i32 0, i32 0)) #10
  %1341 = icmp ne i32 %1340, 0
  br i1 %1341, label %1343, label %1342

; <label>:1342                                    ; preds = %1339
  store i16 1200, i16* @height, align 2
  store i16 1600, i16* @width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2149

; <label>:1343                                    ; preds = %1339
  %1344 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str521, i32 0, i32 0)) #10
  %1345 = icmp ne i32 %1344, 0
  br i1 %1345, label %1350, label %1346

; <label>:1346                                    ; preds = %1343
  store i16 1958, i16* @height, align 2
  store i16 2588, i16* @width, align 2
  %1347 = load i32* %fsize, align 4
  %1348 = icmp ult i32 %1347, 7500000
  %1349 = select i1 %1348, void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*)
  store void (...)* %1349, void (...)** @load_raw, align 8
  store i32 65520, i32* @maximum, align 4
  br label %2148

; <label>:1350                                    ; preds = %1343
  %1351 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str522, i32 0, i32 0)) #10
  %1352 = icmp ne i32 %1351, 0
  br i1 %1352, label %1354, label %1353

; <label>:1353                                    ; preds = %1350
  store i16 2469, i16* @height, align 2
  store i16 3272, i16* @width, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 65520, i32* @maximum, align 4
  br label %2147

; <label>:1354                                    ; preds = %1350
  %1355 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str523, i32 0, i32 0)) #10
  %1356 = icmp ne i32 %1355, 0
  br i1 %1356, label %1361, label %1357

; <label>:1357                                    ; preds = %1354
  store i16 1024, i16* @height, align 2
  store i16 1375, i16* @width, align 2
  store i16 1376, i16* @raw_width, align 2
  store i32 1229539657, i32* @filters, align 4
  store i32 1023, i32* @maximum, align 4
  %1358 = load i32* %fsize, align 4
  %1359 = icmp ult i32 %1358, 2000000
  %1360 = select i1 %1359, void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*)
  store void (...)* %1360, void (...)** @load_raw, align 8
  br label %2146

; <label>:1361                                    ; preds = %1354
  %1362 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str524, i32 0, i32 0)) #10
  %1363 = icmp ne i32 %1362, 0
  br i1 %1363, label %1365, label %1364

; <label>:1364                                    ; preds = %1361
  store i16 1207, i16* @height, align 2
  store i16 1608, i16* @width, align 2
  store i16 18761, i16* @order, align 2
  store i32 370546198, i32* @filters, align 4
  store i64 3212, i64* @data_offset, align 8
  store i32 1023, i32* @maximum, align 4
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2145

; <label>:1365                                    ; preds = %1361
  %1366 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str525, i32 0, i32 0)) #10
  %1367 = icmp ne i32 %1366, 0
  br i1 %1367, label %1372, label %1368

; <label>:1368                                    ; preds = %1365
  store i16 3000, i16* @height, align 2
  store i16 2208, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  %1369 = load i32* %fsize, align 4
  %1370 = icmp ult i32 %1369, 10000000
  %1371 = select i1 %1370, void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*)
  store void (...)* %1371, void (...)** @load_raw, align 8
  store i32 65472, i32* @maximum, align 4
  br label %2144

; <label>:1372                                    ; preds = %1365
  %1373 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str526, i32 0, i32 0)) #10
  %1374 = icmp ne i32 %1373, 0
  br i1 %1374, label %1392, label %1375

; <label>:1375                                    ; preds = %1372
  store i16 1536, i16* @height, align 2
  store i16 2048, i16* @width, align 2
  store i16 2048, i16* @raw_width, align 2
  store i32 1633771873, i32* @filters, align 4
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1023, i32* @maximum, align 4
  store float 0x3FFB78D500000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF2353F80000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  %1376 = load %struct._IO_FILE** @ifp, align 8
  %1377 = call i32 @fseek(%struct._IO_FILE* %1376, i64 3145728, i32 0)
  %1378 = call signext i16 @guess_byte_order(i32 65536)
  store i16 %1378, i16* @order, align 2
  %1379 = sext i16 %1378 to i32
  %1380 = icmp eq i32 %1379, 19789
  br i1 %1380, label %1381, label %1391

; <label>:1381                                    ; preds = %1375
  store i16 16, i16* @top_margin, align 2
  %1382 = load i16* @height, align 2
  %1383 = zext i16 %1382 to i32
  %1384 = sub nsw i32 %1383, 16
  %1385 = trunc i32 %1384 to i16
  store i16 %1385, i16* @height, align 2
  store i16 28, i16* @left_margin, align 2
  %1386 = load i16* @width, align 2
  %1387 = zext i16 %1386 to i32
  %1388 = sub nsw i32 %1387, 28
  %1389 = trunc i32 %1388 to i16
  store i16 %1389, i16* @width, align 2
  store i32 62912, i32* @maximum, align 4
  %1390 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str527, i32 0, i32 0)) #4
  store i8 0, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  br label %1391

; <label>:1391                                    ; preds = %1381, %1375
  br label %2143

; <label>:1392                                    ; preds = %1372
  %1393 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str160, i32 0, i32 0)) #10
  %1394 = icmp ne i32 %1393, 0
  br i1 %1394, label %1420, label %1395

; <label>:1395                                    ; preds = %1392
  %1396 = load void (...)** @load_raw, align 8
  %1397 = icmp eq void (...)* %1396, bitcast (void ()* @lossless_jpeg_load_raw to void (...)*)
  br i1 %1397, label %1398, label %1399

; <label>:1398                                    ; preds = %1395
  store void (...)* bitcast (void ()* @hasselblad_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1399

; <label>:1399                                    ; preds = %1398, %1395
  %1400 = load i16* @raw_width, align 2
  %1401 = zext i16 %1400 to i32
  %1402 = icmp eq i32 %1401, 7262
  br i1 %1402, label %1403, label %1404

; <label>:1403                                    ; preds = %1399
  store i16 5444, i16* @height, align 2
  store i16 7248, i16* @width, align 2
  store i16 4, i16* @top_margin, align 2
  store i16 7, i16* @left_margin, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %1419

; <label>:1404                                    ; preds = %1399
  %1405 = load i16* @raw_width, align 2
  %1406 = zext i16 %1405 to i32
  %1407 = icmp eq i32 %1406, 4090
  br i1 %1407, label %1408, label %1418

; <label>:1408                                    ; preds = %1404
  %1409 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str528, i32 0, i32 0)) #4
  store i16 6, i16* @top_margin, align 2
  %1410 = load i16* @height, align 2
  %1411 = zext i16 %1410 to i32
  %1412 = sub nsw i32 %1411, 6
  %1413 = trunc i32 %1412 to i16
  store i16 %1413, i16* @height, align 2
  store i16 3, i16* @left_margin, align 2
  %1414 = load i16* @width, align 2
  %1415 = zext i16 %1414 to i32
  %1416 = sub nsw i32 %1415, 10
  %1417 = trunc i32 %1416 to i16
  store i16 %1417, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %1418

; <label>:1418                                    ; preds = %1408, %1404
  br label %1419

; <label>:1419                                    ; preds = %1418, %1403
  br label %2142

; <label>:1420                                    ; preds = %1392
  %1421 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str409, i32 0, i32 0)) #10
  %1422 = icmp ne i32 %1421, 0
  br i1 %1422, label %1439, label %1423

; <label>:1423                                    ; preds = %1420
  %1424 = getelementptr inbounds [32 x i8]* %head, i32 0, i32 0
  %1425 = call i32 @memcmp(i8* %1424, i8* getelementptr inbounds ([5 x i8]* @.str529, i32 0, i32 0), i64 4) #10
  %1426 = icmp ne i32 %1425, 0
  br i1 %1426, label %1434, label %1427

; <label>:1427                                    ; preds = %1423
  %1428 = load %struct._IO_FILE** @ifp, align 8
  %1429 = call i32 @fseek(%struct._IO_FILE* %1428, i64 14, i32 0)
  %1430 = call i32 @get4()
  %1431 = trunc i32 %1430 to i16
  store i16 %1431, i16* @height, align 2
  %1432 = call i32 @get4()
  %1433 = trunc i32 %1432 to i16
  store i16 %1433, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  store i64 68, i64* @data_offset, align 8
  br label %1434

; <label>:1434                                    ; preds = %1427, %1423
  %1435 = load void (...)** @load_raw, align 8
  %1436 = icmp ne void (...)* %1435, null
  br i1 %1436, label %1438, label %1437

; <label>:1437                                    ; preds = %1434
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1438

; <label>:1438                                    ; preds = %1437, %1434
  store i32 16383, i32* @maximum, align 4
  br label %2141

; <label>:1439                                    ; preds = %1420
  %1440 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str155, i32 0, i32 0)) #10
  %1441 = icmp ne i32 %1440, 0
  br i1 %1441, label %1545, label %1442

; <label>:1442                                    ; preds = %1439
  store i32 16383, i32* @maximum, align 4
  %1443 = load %struct._IO_FILE** @ifp, align 8
  %1444 = load i64* @data_offset, align 8
  %1445 = call i32 @fseek(%struct._IO_FILE* %1443, i64 %1444, i32 0)
  %1446 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %1447 = icmp ne i32 %1446, 0
  br i1 %1447, label %1448, label %1453

; <label>:1448                                    ; preds = %1442
  %1449 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 0
  %1450 = load i32* %1449, align 4
  %1451 = icmp eq i32 %1450, 15
  br i1 %1451, label %1452, label %1453

; <label>:1452                                    ; preds = %1448
  store i32 8191, i32* @maximum, align 4
  br label %1453

; <label>:1453                                    ; preds = %1452, %1448, %1442
  %1454 = load i32* @tiff_samples, align 4
  %1455 = icmp ugt i32 %1454, 1
  br i1 %1455, label %1456, label %1457

; <label>:1456                                    ; preds = %1453
  store i32 0, i32* @filters, align 4
  br label %1457

; <label>:1457                                    ; preds = %1456, %1453
  %1458 = load i32* @tiff_samples, align 4
  %1459 = icmp ugt i32 %1458, 1
  br i1 %1459, label %1465, label %1460

; <label>:1460                                    ; preds = %1457
  %1461 = load i32* @tile_length, align 4
  %1462 = load i16* @raw_height, align 2
  %1463 = zext i16 %1462 to i32
  %1464 = icmp ult i32 %1461, %1463
  br i1 %1464, label %1465, label %1466

; <label>:1465                                    ; preds = %1460, %1457
  store void (...)* bitcast (void ()* @leaf_hdr_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1466

; <label>:1466                                    ; preds = %1465, %1460
  %1467 = load i16* @width, align 2
  %1468 = zext i16 %1467 to i32
  %1469 = load i16* @height, align 2
  %1470 = zext i16 %1469 to i32
  %1471 = or i32 %1468, %1470
  %1472 = icmp eq i32 %1471, 2048
  br i1 %1472, label %1473, label %1482

; <label>:1473                                    ; preds = %1466
  %1474 = load i32* @tiff_samples, align 4
  %1475 = icmp eq i32 %1474, 1
  br i1 %1475, label %1476, label %1479

; <label>:1476                                    ; preds = %1473
  store i32 1, i32* @filters, align 4
  %1477 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str530, i32 0, i32 0)) #4
  %1478 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str531, i32 0, i32 0)) #4
  store i16 8, i16* @top_margin, align 2
  store i16 18, i16* @left_margin, align 2
  store i16 2032, i16* @height, align 2
  store i16 2016, i16* @width, align 2
  br label %1481

; <label>:1479                                    ; preds = %1473
  %1480 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str111, i32 0, i32 0)) #4
  store i16 10, i16* @top_margin, align 2
  store i16 16, i16* @left_margin, align 2
  store i16 2028, i16* @height, align 2
  store i16 2022, i16* @width, align 2
  br label %1481

; <label>:1481                                    ; preds = %1479, %1476
  br label %1544

; <label>:1482                                    ; preds = %1466
  %1483 = load i16* @width, align 2
  %1484 = zext i16 %1483 to i32
  %1485 = load i16* @height, align 2
  %1486 = zext i16 %1485 to i32
  %1487 = add nsw i32 %1484, %1486
  %1488 = icmp eq i32 %1487, 5204
  br i1 %1488, label %1489, label %1513

; <label>:1489                                    ; preds = %1482
  %1490 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1491 = icmp ne i8 %1490, 0
  br i1 %1491, label %1494, label %1492

; <label>:1492                                    ; preds = %1489
  %1493 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str113, i32 0, i32 0)) #4
  br label %1494

; <label>:1494                                    ; preds = %1492, %1489
  %1495 = load i16* @width, align 2
  %1496 = zext i16 %1495 to i32
  %1497 = load i16* @height, align 2
  %1498 = zext i16 %1497 to i32
  %1499 = icmp sgt i32 %1496, %1498
  br i1 %1499, label %1500, label %1501

; <label>:1500                                    ; preds = %1494
  store i16 6, i16* @top_margin, align 2
  store i16 32, i16* @left_margin, align 2
  store i16 2048, i16* @height, align 2
  store i16 3072, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %1502

; <label>:1501                                    ; preds = %1494
  store i16 6, i16* @left_margin, align 2
  store i16 32, i16* @top_margin, align 2
  store i16 2048, i16* @width, align 2
  store i16 3072, i16* @height, align 2
  store i32 370546198, i32* @filters, align 4
  br label %1502

; <label>:1502                                    ; preds = %1501, %1500
  %1503 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %1504 = fcmp une float %1503, 0.000000e+00
  br i1 %1504, label %1505, label %1509

; <label>:1505                                    ; preds = %1502
  %1506 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %1507 = sext i8 %1506 to i32
  %1508 = icmp eq i32 %1507, 86
  br i1 %1508, label %1509, label %1510

; <label>:1509                                    ; preds = %1505, %1502
  store i32 0, i32* @filters, align 4
  br label %1512

; <label>:1510                                    ; preds = %1505
  %1511 = load i32* @tiff_samples, align 4
  store i32 %1511, i32* @is_raw, align 4
  br label %1512

; <label>:1512                                    ; preds = %1510, %1509
  br label %1543

; <label>:1513                                    ; preds = %1482
  %1514 = load i16* @width, align 2
  %1515 = zext i16 %1514 to i32
  %1516 = icmp eq i32 %1515, 2116
  br i1 %1516, label %1517, label %1527

; <label>:1517                                    ; preds = %1513
  %1518 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0)) #4
  store i16 30, i16* @top_margin, align 2
  %1519 = load i16* @height, align 2
  %1520 = zext i16 %1519 to i32
  %1521 = sub nsw i32 %1520, 60
  %1522 = trunc i32 %1521 to i16
  store i16 %1522, i16* @height, align 2
  store i16 55, i16* @left_margin, align 2
  %1523 = load i16* @width, align 2
  %1524 = zext i16 %1523 to i32
  %1525 = sub nsw i32 %1524, 110
  %1526 = trunc i32 %1525 to i16
  store i16 %1526, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %1542

; <label>:1527                                    ; preds = %1513
  %1528 = load i16* @width, align 2
  %1529 = zext i16 %1528 to i32
  %1530 = icmp eq i32 %1529, 3171
  br i1 %1530, label %1531, label %1541

; <label>:1531                                    ; preds = %1527
  %1532 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str115, i32 0, i32 0)) #4
  store i16 24, i16* @top_margin, align 2
  %1533 = load i16* @height, align 2
  %1534 = zext i16 %1533 to i32
  %1535 = sub nsw i32 %1534, 48
  %1536 = trunc i32 %1535 to i16
  store i16 %1536, i16* @height, align 2
  store i16 24, i16* @left_margin, align 2
  %1537 = load i16* @width, align 2
  %1538 = zext i16 %1537 to i32
  %1539 = sub nsw i32 %1538, 48
  %1540 = trunc i32 %1539 to i16
  store i16 %1540, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  br label %1541

; <label>:1541                                    ; preds = %1531, %1527
  br label %1542

; <label>:1542                                    ; preds = %1541, %1517
  br label %1543

; <label>:1543                                    ; preds = %1542, %1512
  br label %1544

; <label>:1544                                    ; preds = %1543, %1481
  br label %2140

; <label>:1545                                    ; preds = %1439
  %1546 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str98, i32 0, i32 0)) #10
  %1547 = icmp ne i32 %1546, 0
  br i1 %1547, label %1548, label %1551

; <label>:1548                                    ; preds = %1545
  %1549 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0)) #10
  %1550 = icmp ne i32 %1549, 0
  br i1 %1550, label %1689, label %1551

; <label>:1551                                    ; preds = %1548, %1545
  store i32 65520, i32* @maximum, align 4
  %1552 = load i32* %fsize, align 4
  %1553 = zext i32 %1552 to i64
  %1554 = load i64* @data_offset, align 8
  %1555 = sub nsw i64 %1553, %1554
  %1556 = load i16* @width, align 2
  %1557 = zext i16 %1556 to i32
  %1558 = mul nsw i32 %1557, 8
  %1559 = sdiv i32 %1558, 7
  %1560 = sext i32 %1559 to i64
  %1561 = sdiv i64 %1555, %1560
  %1562 = load i16* @height, align 2
  %1563 = zext i16 %1562 to i64
  %1564 = icmp eq i64 %1561, %1563
  br i1 %1564, label %1565, label %1566

; <label>:1565                                    ; preds = %1551
  store void (...)* bitcast (void ()* @panasonic_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1566

; <label>:1566                                    ; preds = %1565, %1551
  %1567 = load void (...)** @load_raw, align 8
  %1568 = icmp ne void (...)* %1567, null
  br i1 %1568, label %1570, label %1569

; <label>:1569                                    ; preds = %1566
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1570

; <label>:1570                                    ; preds = %1569, %1566
  %1571 = load i16* @width, align 2
  %1572 = zext i16 %1571 to i32
  switch i32 %1572, label %1688 [
    i32 2568, label %1573
    i32 3130, label %1574
    i32 3170, label %1575
    i32 3213, label %1585
    i32 3177, label %1590
    i32 3304, label %1595
    i32 3330, label %1600
    i32 3370, label %1605
    i32 3690, label %1619
    i32 3770, label %1624
    i32 3710, label %1637
    i32 3724, label %1638
    i32 3836, label %1643
    i32 3880, label %1654
    i32 4060, label %1659
    i32 4290, label %1665
    i32 4330, label %1670
    i32 4508, label %1683
  ]

; <label>:1573                                    ; preds = %1570
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str532, i32 0, i32 0))
  br label %1688

; <label>:1574                                    ; preds = %1570
  store i16 -14, i16* @left_margin, align 2
  br label %1575

; <label>:1575                                    ; preds = %1570, %1574
  %1576 = load i16* @left_margin, align 2
  %1577 = zext i16 %1576 to i32
  %1578 = add nsw i32 %1577, 18
  %1579 = trunc i32 %1578 to i16
  store i16 %1579, i16* @left_margin, align 2
  store i16 3096, i16* @width, align 2
  %1580 = load i16* @height, align 2
  %1581 = zext i16 %1580 to i32
  %1582 = icmp sgt i32 %1581, 2326
  br i1 %1582, label %1583, label %1584

; <label>:1583                                    ; preds = %1575
  store i16 2326, i16* @height, align 2
  store i16 13, i16* @top_margin, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %1584

; <label>:1584                                    ; preds = %1583, %1575
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str533, i32 0, i32 0))
  br label %1688

; <label>:1585                                    ; preds = %1570
  %1586 = load i16* @width, align 2
  %1587 = zext i16 %1586 to i32
  %1588 = sub nsw i32 %1587, 27
  %1589 = trunc i32 %1588 to i16
  store i16 %1589, i16* @width, align 2
  br label %1590

; <label>:1590                                    ; preds = %1570, %1585
  %1591 = load i16* @width, align 2
  %1592 = zext i16 %1591 to i32
  %1593 = sub nsw i32 %1592, 10
  %1594 = trunc i32 %1593 to i16
  store i16 %1594, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str534, i32 0, i32 0))
  br label %1688

; <label>:1595                                    ; preds = %1570
  %1596 = load i16* @width, align 2
  %1597 = zext i16 %1596 to i32
  %1598 = sub nsw i32 %1597, 17
  %1599 = trunc i32 %1598 to i16
  store i16 %1599, i16* @width, align 2
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str535, i32 0, i32 0))
  br label %1688

; <label>:1600                                    ; preds = %1570
  %1601 = load i16* @width, align 2
  %1602 = zext i16 %1601 to i32
  %1603 = add nsw i32 %1602, 43
  %1604 = trunc i32 %1603 to i16
  store i16 %1604, i16* @width, align 2
  store i16 -6, i16* @left_margin, align 2
  store i32 63472, i32* @maximum, align 4
  br label %1605

; <label>:1605                                    ; preds = %1570, %1600
  %1606 = load i16* @width, align 2
  %1607 = zext i16 %1606 to i32
  %1608 = sub nsw i32 %1607, 82
  %1609 = trunc i32 %1608 to i16
  store i16 %1609, i16* @width, align 2
  %1610 = load i16* @left_margin, align 2
  %1611 = zext i16 %1610 to i32
  %1612 = add nsw i32 %1611, 15
  %1613 = trunc i32 %1612 to i16
  store i16 %1613, i16* @left_margin, align 2
  %1614 = load i16* @height, align 2
  %1615 = zext i16 %1614 to i32
  %1616 = icmp sgt i32 %1615, 2480
  br i1 %1616, label %1617, label %1618

; <label>:1617                                    ; preds = %1605
  store i16 10, i16* @top_margin, align 2
  store i16 2470, i16* @height, align 2
  br label %1618

; <label>:1618                                    ; preds = %1617, %1605
  store i32 1229539657, i32* @filters, align 4
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str536, i32 0, i32 0))
  br label %1688

; <label>:1619                                    ; preds = %1570
  %1620 = load i16* @height, align 2
  %1621 = zext i16 %1620 to i32
  %1622 = sub nsw i32 %1621, 2
  %1623 = trunc i32 %1622 to i16
  store i16 %1623, i16* @height, align 2
  store i16 -14, i16* @left_margin, align 2
  store i32 63472, i32* @maximum, align 4
  br label %1624

; <label>:1624                                    ; preds = %1570, %1619
  store i16 3672, i16* @width, align 2
  %1625 = load i16* @height, align 2
  %1626 = add i16 %1625, -1
  store i16 %1626, i16* @height, align 2
  %1627 = zext i16 %1626 to i32
  %1628 = icmp eq i32 %1627, 2798
  br i1 %1628, label %1629, label %1631

; <label>:1629                                    ; preds = %1624
  store i16 2760, i16* @height, align 2
  br i1 true, label %1630, label %1631

; <label>:1630                                    ; preds = %1629
  store i16 15, i16* @top_margin, align 2
  br label %1632

; <label>:1631                                    ; preds = %1629, %1624
  store i32 1229539657, i32* @filters, align 4
  br label %1632

; <label>:1632                                    ; preds = %1631, %1630
  %1633 = load i16* @left_margin, align 2
  %1634 = zext i16 %1633 to i32
  %1635 = add nsw i32 %1634, 17
  %1636 = trunc i32 %1635 to i16
  store i16 %1636, i16* @left_margin, align 2
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str537, i32 0, i32 0))
  br label %1688

; <label>:1637                                    ; preds = %1570
  store i16 3682, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str538, i32 0, i32 0))
  br label %1688

; <label>:1638                                    ; preds = %1570
  %1639 = load i16* @width, align 2
  %1640 = zext i16 %1639 to i32
  %1641 = sub nsw i32 %1640, 14
  %1642 = trunc i32 %1641 to i16
  store i16 %1642, i16* @width, align 2
  br label %1643

; <label>:1643                                    ; preds = %1570, %1638
  %1644 = load i16* @width, align 2
  %1645 = zext i16 %1644 to i32
  %1646 = sub nsw i32 %1645, 42
  %1647 = trunc i32 %1646 to i16
  store i16 %1647, i16* @width, align 2
  br label %1648

; <label>:1648                                    ; preds = %1663, %1643
  store i32 370546198, i32* @filters, align 4
  %1649 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %1650 = sext i8 %1649 to i32
  %1651 = icmp ne i32 %1650, 80
  br i1 %1651, label %1652, label %1653

; <label>:1652                                    ; preds = %1648
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str539, i32 0, i32 0))
  br label %1653

; <label>:1653                                    ; preds = %1652, %1648
  br label %1688

; <label>:1654                                    ; preds = %1570
  %1655 = load i16* @width, align 2
  %1656 = zext i16 %1655 to i32
  %1657 = sub nsw i32 %1656, 22
  %1658 = trunc i32 %1657 to i16
  store i16 %1658, i16* @width, align 2
  store i16 6, i16* @left_margin, align 2
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str540, i32 0, i32 0))
  br label %1688

; <label>:1659                                    ; preds = %1570
  store i16 3982, i16* @width, align 2
  %1660 = load i16* @height, align 2
  %1661 = zext i16 %1660 to i32
  %1662 = icmp eq i32 %1661, 2250
  br i1 %1662, label %1663, label %1664

; <label>:1663                                    ; preds = %1659
  br label %1648

; <label>:1664                                    ; preds = %1659
  store i16 4018, i16* @width, align 2
  store i32 1229539657, i32* @filters, align 4
  store i32 1, i32* @zero_is_bad, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str541, i32 0, i32 0))
  br label %1688

; <label>:1665                                    ; preds = %1570
  %1666 = load i16* @height, align 2
  %1667 = zext i16 %1666 to i32
  %1668 = add nsw i32 %1667, 38
  %1669 = trunc i32 %1668 to i16
  store i16 %1669, i16* @height, align 2
  store i16 -14, i16* @left_margin, align 2
  store i32 1229539657, i32* @filters, align 4
  br label %1670

; <label>:1670                                    ; preds = %1570, %1665
  store i16 4248, i16* @width, align 2
  %1671 = load i16* @height, align 2
  %1672 = zext i16 %1671 to i32
  %1673 = sub nsw i32 %1672, 39
  %1674 = trunc i32 %1673 to i16
  store i16 %1674, i16* @height, align 2
  %1675 = zext i16 %1674 to i32
  %1676 = icmp eq i32 %1675, 2400
  br i1 %1676, label %1677, label %1678

; <label>:1677                                    ; preds = %1670
  store i16 15, i16* @top_margin, align 2
  br label %1678

; <label>:1678                                    ; preds = %1677, %1670
  %1679 = load i16* @left_margin, align 2
  %1680 = zext i16 %1679 to i32
  %1681 = add nsw i32 %1680, 17
  %1682 = trunc i32 %1681 to i16
  store i16 %1682, i16* @left_margin, align 2
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str542, i32 0, i32 0))
  br label %1688

; <label>:1683                                    ; preds = %1570
  %1684 = load i16* @height, align 2
  %1685 = zext i16 %1684 to i32
  %1686 = sub nsw i32 %1685, 6
  %1687 = trunc i32 %1686 to i16
  store i16 %1687, i16* @height, align 2
  store i16 4429, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  call void @adobe_coeff(i8* getelementptr inbounds ([10 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str543, i32 0, i32 0))
  br label %1688

; <label>:1688                                    ; preds = %1570, %1683, %1678, %1664, %1654, %1653, %1637, %1632, %1618, %1595, %1590, %1584, %1573
  br label %2139

; <label>:1689                                    ; preds = %1548
  %1690 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str544, i32 0, i32 0)) #10
  %1691 = icmp ne i32 %1690, 0
  br i1 %1691, label %1693, label %1692

; <label>:1692                                    ; preds = %1689
  store i16 1718, i16* @height, align 2
  store i16 2304, i16* @width, align 2
  store i32 370546198, i32* @filters, align 4
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 7, i32* @load_flags, align 4
  br label %2138

; <label>:1693                                    ; preds = %1689
  %1694 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str23, i32 0, i32 0)) #10
  %1695 = icmp ne i32 %1694, 0
  br i1 %1695, label %1759, label %1696

; <label>:1696                                    ; preds = %1693
  %1697 = load i16* @height, align 2
  %1698 = zext i16 %1697 to i32
  %1699 = and i32 %1698, 1
  %1700 = load i16* @height, align 2
  %1701 = zext i16 %1700 to i32
  %1702 = add nsw i32 %1701, %1699
  %1703 = trunc i32 %1702 to i16
  store i16 %1703, i16* @height, align 2
  %1704 = load i32* @exif_cfa, align 4
  store i32 %1704, i32* @filters, align 4
  %1705 = load void (...)** @load_raw, align 8
  %1706 = icmp eq void (...)* %1705, bitcast (void ()* @olympus_e410_load_raw to void (...)*)
  br i1 %1706, label %1707, label %1710

; <label>:1707                                    ; preds = %1696
  %1708 = load i32* @black, align 4
  %1709 = lshr i32 %1708, 4
  store i32 %1709, i32* @black, align 4
  br label %1758

; <label>:1710                                    ; preds = %1696
  %1711 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str545, i32 0, i32 0)) #10
  %1712 = icmp ne i32 %1711, 0
  br i1 %1712, label %1713, label %1716

; <label>:1713                                    ; preds = %1710
  %1714 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str546, i32 0, i32 0), i64 4) #10
  %1715 = icmp ne i32 %1714, 0
  br i1 %1715, label %1719, label %1716

; <label>:1716                                    ; preds = %1713, %1710
  %1717 = load i32* @black, align 4
  %1718 = shl i32 %1717, 2
  store i32 %1718, i32* @black, align 4
  br label %1757

; <label>:1719                                    ; preds = %1713
  %1720 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str547, i32 0, i32 0)) #10
  %1721 = icmp ne i32 %1720, 0
  br i1 %1721, label %1722, label %1725

; <label>:1722                                    ; preds = %1719
  %1723 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str548, i32 0, i32 0)) #10
  %1724 = icmp ne i32 %1723, 0
  br i1 %1724, label %1734, label %1725

; <label>:1725                                    ; preds = %1722, %1719
  %1726 = load i16* @width, align 2
  %1727 = zext i16 %1726 to i32
  %1728 = sub nsw i32 %1727, 20
  %1729 = trunc i32 %1728 to i16
  store i16 %1729, i16* @width, align 2
  %1730 = load void (...)** @load_raw, align 8
  %1731 = icmp eq void (...)* %1730, bitcast (void ()* @unpacked_load_raw to void (...)*)
  br i1 %1731, label %1732, label %1733

; <label>:1732                                    ; preds = %1725
  store i32 64560, i32* @maximum, align 4
  store i32 0, i32* @black, align 4
  br label %1733

; <label>:1733                                    ; preds = %1732, %1725
  br label %1756

; <label>:1734                                    ; preds = %1722
  %1735 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str549, i32 0, i32 0)) #10
  %1736 = icmp ne i32 %1735, 0
  br i1 %1736, label %1746, label %1737

; <label>:1737                                    ; preds = %1734
  %1738 = load i16* @width, align 2
  %1739 = zext i16 %1738 to i32
  %1740 = sub nsw i32 %1739, 30
  %1741 = trunc i32 %1740 to i16
  store i16 %1741, i16* @width, align 2
  %1742 = load void (...)** @load_raw, align 8
  %1743 = icmp eq void (...)* %1742, bitcast (void ()* @unpacked_load_raw to void (...)*)
  br i1 %1743, label %1744, label %1745

; <label>:1744                                    ; preds = %1737
  store i32 63376, i32* @maximum, align 4
  br label %1745

; <label>:1745                                    ; preds = %1744, %1737
  br label %1755

; <label>:1746                                    ; preds = %1734
  %1747 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str550, i32 0, i32 0)) #10
  %1748 = icmp ne i32 %1747, 0
  br i1 %1748, label %1754, label %1749

; <label>:1749                                    ; preds = %1746
  %1750 = load i32* %fsize, align 4
  %1751 = zext i32 %1750 to i64
  store i64 10721280, i64* @thumb_offset, align 8
  %1752 = sub nsw i64 %1751, 10721280
  %1753 = trunc i64 %1752 to i32
  store i32 %1753, i32* @thumb_length, align 4
  store i16 480, i16* @thumb_height, align 2
  store i16 640, i16* @thumb_width, align 2
  br label %1754

; <label>:1754                                    ; preds = %1749, %1746
  br label %1755

; <label>:1755                                    ; preds = %1754, %1745
  br label %1756

; <label>:1756                                    ; preds = %1755, %1733
  br label %1757

; <label>:1757                                    ; preds = %1756, %1716
  br label %1758

; <label>:1758                                    ; preds = %1757, %1707
  br label %2137

; <label>:1759                                    ; preds = %1693
  %1760 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str432, i32 0, i32 0)) #10
  %1761 = icmp ne i32 %1760, 0
  br i1 %1761, label %1763, label %1762

; <label>:1762                                    ; preds = %1759
  store i16 2047, i16* @height, align 2
  store i16 3072, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  store i64 6656, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @packed_12_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2136

; <label>:1763                                    ; preds = %1759
  %1764 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str551, i32 0, i32 0)) #10
  %1765 = icmp ne i32 %1764, 0
  br i1 %1765, label %1768, label %1766

; <label>:1766                                    ; preds = %1763
  store i16 3288, i16* @width, align 2
  store i16 5, i16* @left_margin, align 2
  store i64 862144, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @sony_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 -1667457892, i32* @filters, align 4
  store i32 4, i32* @colors, align 4
  %1767 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str552, i32 0, i32 0)) #4
  br label %2135

; <label>:1768                                    ; preds = %1763
  %1769 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str553, i32 0, i32 0)) #10
  %1770 = icmp ne i32 %1769, 0
  br i1 %1770, label %1772, label %1771

; <label>:1771                                    ; preds = %1768
  store i16 3109, i16* @width, align 2
  store i16 59, i16* @left_margin, align 2
  store i64 787392, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @sony_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2134

; <label>:1772                                    ; preds = %1768
  %1773 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0)) #10
  %1774 = icmp ne i32 %1773, 0
  br i1 %1774, label %1780, label %1775

; <label>:1775                                    ; preds = %1772
  %1776 = load i16* @raw_width, align 2
  %1777 = zext i16 %1776 to i32
  %1778 = icmp eq i32 %1777, 3984
  br i1 %1778, label %1779, label %1780

; <label>:1779                                    ; preds = %1775
  call void @adobe_coeff(i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str554, i32 0, i32 0))
  store i16 3925, i16* @width, align 2
  store i16 19789, i16* @order, align 2
  br label %2133

; <label>:1780                                    ; preds = %1775, %1772
  %1781 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str150, i32 0, i32 0)) #10
  %1782 = icmp ne i32 %1781, 0
  br i1 %1782, label %1786, label %1783

; <label>:1783                                    ; preds = %1780
  %1784 = load i16* @height, align 2
  %1785 = add i16 %1784, -1
  store i16 %1785, i16* @height, align 2
  br label %2132

; <label>:1786                                    ; preds = %1780
  %1787 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str555, i32 0, i32 0)) #10
  %1788 = icmp ne i32 %1787, 0
  br i1 %1788, label %1794, label %1789

; <label>:1789                                    ; preds = %1786
  %1790 = load i16* @height, align 2
  %1791 = zext i16 %1790 to i32
  %1792 = sub nsw i32 %1791, 4
  %1793 = trunc i32 %1792 to i16
  store i16 %1793, i16* @height, align 2
  br label %2131

; <label>:1794                                    ; preds = %1786
  %1795 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str556, i32 0, i32 0)) #10
  %1796 = icmp ne i32 %1795, 0
  br i1 %1796, label %1798, label %1797

; <label>:1797                                    ; preds = %1794
  store i16 480, i16* @height, align 2
  store i16 640, i16* @width, align 2
  br label %1802

; <label>:1798                                    ; preds = %1794
  %1799 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str557, i32 0, i32 0)) #10
  %1800 = icmp ne i32 %1799, 0
  br i1 %1800, label %1803, label %1801

; <label>:1801                                    ; preds = %1798
  store i16 2134, i16* @height, align 2
  store i16 2848, i16* @width, align 2
  br label %1802

; <label>:1802                                    ; preds = %1801, %1797
  store i32 0, i32* @filters, align 4
  store void (...)* bitcast (void ()* @kodak_yrgb_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2129

; <label>:1803                                    ; preds = %1798
  %1804 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str558, i32 0, i32 0)) #10
  %1805 = icmp ne i32 %1804, 0
  br i1 %1805, label %1807, label %1806

; <label>:1806                                    ; preds = %1803
  store i16 2152, i16* @height, align 2
  store i16 2152, i16* @raw_height, align 2
  store i16 2864, i16* @width, align 2
  store i16 2864, i16* @raw_width, align 2
  br label %1811

; <label>:1807                                    ; preds = %1803
  %1808 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str559, i32 0, i32 0)) #10
  %1809 = icmp ne i32 %1808, 0
  br i1 %1809, label %1826, label %1810

; <label>:1810                                    ; preds = %1807
  store i16 1744, i16* @height, align 2
  store i16 2336, i16* @width, align 2
  store i16 1779, i16* @raw_height, align 2
  store i16 2338, i16* @raw_width, align 2
  store i16 33, i16* @top_margin, align 2
  store i16 1, i16* @left_margin, align 2
  br label %1811

; <label>:1811                                    ; preds = %1810, %1806
  store i16 18761, i16* @order, align 2
  %1812 = load i32* %fsize, align 4
  %1813 = load i16* @raw_height, align 2
  %1814 = zext i16 %1813 to i32
  %1815 = load i16* @raw_width, align 2
  %1816 = zext i16 %1815 to i32
  %1817 = mul nsw i32 %1814, %1816
  %1818 = sub i32 %1812, %1817
  %1819 = zext i32 %1818 to i64
  store i64 %1819, i64* @data_offset, align 8
  %1820 = icmp ne i64 %1819, 0
  br i1 %1820, label %1821, label %1824

; <label>:1821                                    ; preds = %1811
  %1822 = load %struct._IO_FILE** @ifp, align 8
  %1823 = call i32 @fseek(%struct._IO_FILE* %1822, i64 168, i32 0)
  call void @read_shorts(i16* getelementptr inbounds ([16385 x i16]* @curve, i32 0, i32 0), i32 256)
  br label %1825

; <label>:1824                                    ; preds = %1811
  store i32 0, i32* @use_gamma, align 4
  br label %1825

; <label>:1825                                    ; preds = %1824, %1821
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2127

; <label>:1826                                    ; preds = %1807
  %1827 = call i32 @strcasecmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0)) #10
  %1828 = icmp ne i32 %1827, 0
  br i1 %1828, label %1974, label %1829

; <label>:1829                                    ; preds = %1826
  %1830 = load i32* @filters, align 4
  %1831 = icmp eq i32 %1830, -1
  br i1 %1831, label %1832, label %1833

; <label>:1832                                    ; preds = %1829
  store i32 1633771873, i32* @filters, align 4
  br label %1833

; <label>:1833                                    ; preds = %1832, %1829
  %1834 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str560, i32 0, i32 0), i64 6) #10
  %1835 = icmp ne i32 %1834, 0
  br i1 %1835, label %1841, label %1836

; <label>:1836                                    ; preds = %1833
  %1837 = load i16* @width, align 2
  %1838 = zext i16 %1837 to i32
  %1839 = sub nsw i32 %1838, 4
  %1840 = trunc i32 %1839 to i16
  store i16 %1840, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1896

; <label>:1841                                    ; preds = %1833
  %1842 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str561, i32 0, i32 0)) #10
  %1843 = icmp ne i32 %1842, 0
  br i1 %1843, label %1849, label %1844

; <label>:1844                                    ; preds = %1841
  %1845 = load i16* @width, align 2
  %1846 = zext i16 %1845 to i32
  %1847 = sub nsw i32 %1846, 4
  %1848 = trunc i32 %1847 to i16
  store i16 %1848, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1895

; <label>:1849                                    ; preds = %1841
  %1850 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str562, i32 0, i32 0)) #10
  %1851 = icmp ne i32 %1850, 0
  br i1 %1851, label %1857, label %1852

; <label>:1852                                    ; preds = %1849
  %1853 = load i16* @width, align 2
  %1854 = zext i16 %1853 to i32
  %1855 = sub nsw i32 %1854, 4
  %1856 = trunc i32 %1855 to i16
  store i16 %1856, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1894

; <label>:1857                                    ; preds = %1849
  %1858 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str563, i32 0, i32 0)) #10
  %1859 = icmp ne i32 %1858, 0
  br i1 %1859, label %1865, label %1860

; <label>:1860                                    ; preds = %1857
  %1861 = load i16* @width, align 2
  %1862 = zext i16 %1861 to i32
  %1863 = sub nsw i32 %1862, 4
  %1864 = trunc i32 %1863 to i16
  store i16 %1864, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1893

; <label>:1865                                    ; preds = %1857
  %1866 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str564, i32 0, i32 0)) #10
  %1867 = icmp ne i32 %1866, 0
  br i1 %1867, label %1873, label %1868

; <label>:1868                                    ; preds = %1865
  %1869 = load i16* @width, align 2
  %1870 = zext i16 %1869 to i32
  %1871 = sub nsw i32 %1870, 4
  %1872 = trunc i32 %1871 to i16
  store i16 %1872, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %1892

; <label>:1873                                    ; preds = %1865
  %1874 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str565, i32 0, i32 0)) #10
  %1875 = icmp ne i32 %1874, 0
  br i1 %1875, label %1881, label %1876

; <label>:1876                                    ; preds = %1873
  %1877 = load i16* @width, align 2
  %1878 = zext i16 %1877 to i32
  %1879 = sub nsw i32 %1878, 4
  %1880 = trunc i32 %1879 to i16
  store i16 %1880, i16* @width, align 2
  store i16 2, i16* @left_margin, align 2
  store i32 1, i32* @colors, align 4
  store i32 0, i32* @filters, align 4
  br label %1891

; <label>:1881                                    ; preds = %1873
  %1882 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str566, i32 0, i32 0)) #10
  %1883 = icmp ne i32 %1882, 0
  br i1 %1883, label %1885, label %1884

; <label>:1884                                    ; preds = %1881
  store i32 214, i32* @black, align 4
  store i32 1, i32* @colors, align 4
  store i32 0, i32* @filters, align 4
  br label %1890

; <label>:1885                                    ; preds = %1881
  %1886 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str567, i32 0, i32 0)) #10
  %1887 = icmp ne i32 %1886, 0
  br i1 %1887, label %1889, label %1888

; <label>:1888                                    ; preds = %1885
  store i32 1, i32* @colors, align 4
  store i32 0, i32* @filters, align 4
  br label %1889

; <label>:1889                                    ; preds = %1888, %1885
  br label %1890

; <label>:1890                                    ; preds = %1889, %1884
  br label %1891

; <label>:1891                                    ; preds = %1890, %1876
  br label %1892

; <label>:1892                                    ; preds = %1891, %1868
  br label %1893

; <label>:1893                                    ; preds = %1892, %1860
  br label %1894

; <label>:1894                                    ; preds = %1893, %1852
  br label %1895

; <label>:1895                                    ; preds = %1894, %1844
  br label %1896

; <label>:1896                                    ; preds = %1895, %1836
  %1897 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 4), i8* getelementptr inbounds ([4 x i8]* @.str568, i32 0, i32 0)) #10
  %1898 = icmp ne i32 %1897, 0
  br i1 %1898, label %1901, label %1899

; <label>:1899                                    ; preds = %1896
  %1900 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str569, i32 0, i32 0)) #4
  br label %1901

; <label>:1901                                    ; preds = %1899, %1896
  %1902 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str570, i32 0, i32 0)) #10
  %1903 = icmp ne i8* %1902, null
  br i1 %1903, label %1904, label %1906

; <label>:1904                                    ; preds = %1901
  %1905 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str570, i32 0, i32 0)) #4
  store i64 15424, i64* @data_offset, align 8
  br label %1906

; <label>:1906                                    ; preds = %1904, %1901
  %1907 = call i32 @strncmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str28, i32 0, i32 0), i64 3) #10
  %1908 = icmp ne i32 %1907, 0
  br i1 %1908, label %1939, label %1909

; <label>:1909                                    ; preds = %1906
  store i16 242, i16* @height, align 2
  %1910 = load i32* %fsize, align 4
  %1911 = icmp ult i32 %1910, 100000
  br i1 %1911, label %1912, label %1922

; <label>:1912                                    ; preds = %1909
  store i16 256, i16* @raw_width, align 2
  store i16 249, i16* @width, align 2
  %1913 = load i16* @height, align 2
  %1914 = zext i16 %1913 to i32
  %1915 = sitofp i32 %1914 to double
  %1916 = fmul double 4.000000e+00, %1915
  %1917 = load i16* @width, align 2
  %1918 = zext i16 %1917 to i32
  %1919 = sitofp i32 %1918 to double
  %1920 = fmul double 3.000000e+00, %1919
  %1921 = fdiv double %1916, %1920
  store double %1921, double* @pixel_aspect, align 8
  br label %1932

; <label>:1922                                    ; preds = %1909
  store i16 512, i16* @raw_width, align 2
  store i16 501, i16* @width, align 2
  %1923 = load i16* @height, align 2
  %1924 = zext i16 %1923 to i32
  %1925 = sitofp i32 %1924 to double
  %1926 = fmul double 4.930000e+02, %1925
  %1927 = load i16* @width, align 2
  %1928 = zext i16 %1927 to i32
  %1929 = sitofp i32 %1928 to double
  %1930 = fmul double 3.730000e+02, %1929
  %1931 = fdiv double %1926, %1930
  store double %1931, double* @pixel_aspect, align 8
  br label %1932

; <label>:1932                                    ; preds = %1922, %1912
  %1933 = load i16* @raw_width, align 2
  %1934 = zext i16 %1933 to i32
  %1935 = add nsw i32 %1934, 1
  %1936 = sext i32 %1935 to i64
  %1937 = load i64* @data_offset, align 8
  %1938 = add nsw i64 %1937, %1936
  store i64 %1938, i64* @data_offset, align 8
  store i32 4, i32* @colors, align 4
  store i32 -1920103027, i32* @filters, align 4
  call void @simple_coeff(i32 1)
  store float 0x3FF2DD2F20000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 1), align 4
  store float 0x3FF3581060000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  store float 0x3FF09374C0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 3), align 4
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1973

; <label>:1939                                    ; preds = %1906
  %1940 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str571, i32 0, i32 0)) #10
  %1941 = icmp ne i32 %1940, 0
  br i1 %1941, label %1944, label %1942

; <label>:1942                                    ; preds = %1939
  %1943 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str572, i32 0, i32 0)) #4
  store i16 512, i16* @height, align 2
  store i16 768, i16* @width, align 2
  store i64 1152, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1972

; <label>:1944                                    ; preds = %1939
  %1945 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str573, i32 0, i32 0)) #10
  %1946 = icmp ne i8* %1945, null
  br i1 %1946, label %1947, label %1949

; <label>:1947                                    ; preds = %1944
  %1948 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str573, i32 0, i32 0)) #4
  store i16 512, i16* @height, align 2
  store i16 768, i16* @width, align 2
  store i64 19712, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %1971

; <label>:1949                                    ; preds = %1944
  %1950 = call i8* @strstr(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str574, i32 0, i32 0)) #10
  %1951 = icmp ne i8* %1950, null
  br i1 %1951, label %1952, label %1965

; <label>:1952                                    ; preds = %1949
  %1953 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str574, i32 0, i32 0)) #4
  store i16 976, i16* @height, align 2
  store i16 848, i16* @width, align 2
  %1954 = load i16* @height, align 2
  %1955 = zext i16 %1954 to i32
  %1956 = sitofp i32 %1955 to double
  %1957 = fdiv double %1956, 7.500000e-01
  %1958 = load i16* @width, align 2
  %1959 = zext i16 %1958 to i32
  %1960 = sitofp i32 %1959 to double
  %1961 = fdiv double %1957, %1960
  store double %1961, double* @pixel_aspect, align 8
  %1962 = load i32* @tiff_compress, align 4
  %1963 = icmp eq i32 %1962, 7
  %1964 = select i1 %1963, void (...)* bitcast (void ()* @kodak_jpeg_load_raw to void (...)*), void (...)* bitcast (void ()* @kodak_dc120_load_raw to void (...)*)
  store void (...)* %1964, void (...)** @load_raw, align 8
  br label %1970

; <label>:1965                                    ; preds = %1949
  %1966 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str575, i32 0, i32 0)) #10
  %1967 = icmp ne i32 %1966, 0
  br i1 %1967, label %1969, label %1968

; <label>:1968                                    ; preds = %1965
  store i16 128, i16* @thumb_height, align 2
  store i16 192, i16* @thumb_width, align 2
  store i64 6144, i64* @thumb_offset, align 8
  store i32 360, i32* @thumb_misc, align 4
  store void (%struct._IO_FILE*)* @layer_thumb, void (%struct._IO_FILE*)** @write_thumb, align 8
  store i16 1024, i16* @height, align 2
  store i16 1536, i16* @width, align 2
  store i64 79872, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 17, i32* @black, align 4
  br label %1969

; <label>:1969                                    ; preds = %1968, %1965
  br label %1970

; <label>:1970                                    ; preds = %1969, %1952
  br label %1971

; <label>:1971                                    ; preds = %1970, %1947
  br label %1972

; <label>:1972                                    ; preds = %1971, %1942
  br label %1973

; <label>:1973                                    ; preds = %1972, %1932
  br label %2126

; <label>:1974                                    ; preds = %1826
  %1975 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str435, i32 0, i32 0)) #10
  %1976 = icmp ne i32 %1975, 0
  br i1 %1976, label %1978, label %1977

; <label>:1977                                    ; preds = %1974
  store i16 512, i16* @height, align 2
  store i16 768, i16* @width, align 2
  store i64 3632, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1633771873, i32* @filters, align 4
  call void @simple_coeff(i32 2)
  br label %2125

; <label>:1978                                    ; preds = %1974
  %1979 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str438, i32 0, i32 0)) #10
  %1980 = icmp ne i32 %1979, 0
  br i1 %1980, label %2026, label %1981

; <label>:1981                                    ; preds = %1978
  %1982 = load %struct._IO_FILE** @ifp, align 8
  %1983 = call i32 @fseek(%struct._IO_FILE* %1982, i64 544, i32 0)
  %1984 = call zeroext i16 @get2()
  store i16 %1984, i16* @height, align 2
  %1985 = call zeroext i16 @get2()
  store i16 %1985, i16* @width, align 2
  %1986 = call i32 @get4()
  %1987 = call zeroext i16 @get2()
  %1988 = zext i16 %1987 to i32
  %1989 = icmp eq i32 %1988, 30
  %1990 = select i1 %1989, i32 738, i32 736
  %1991 = sext i32 %1990 to i64
  store i64 %1991, i64* @data_offset, align 8
  %1992 = load i16* @height, align 2
  %1993 = zext i16 %1992 to i32
  %1994 = load i16* @width, align 2
  %1995 = zext i16 %1994 to i32
  %1996 = icmp sgt i32 %1993, %1995
  br i1 %1996, label %1997, label %2025

; <label>:1997                                    ; preds = %1981
  %1998 = load i16* @width, align 2
  %1999 = zext i16 %1998 to i32
  %2000 = load i16* @height, align 2
  %2001 = zext i16 %2000 to i32
  %2002 = xor i32 %2001, %1999
  %2003 = trunc i32 %2002 to i16
  store i16 %2003, i16* @height, align 2
  %2004 = load i16* @height, align 2
  %2005 = zext i16 %2004 to i32
  %2006 = load i16* @width, align 2
  %2007 = zext i16 %2006 to i32
  %2008 = xor i32 %2007, %2005
  %2009 = trunc i32 %2008 to i16
  store i16 %2009, i16* @width, align 2
  %2010 = zext i16 %2009 to i32
  %2011 = load i16* @height, align 2
  %2012 = zext i16 %2011 to i32
  %2013 = xor i32 %2012, %2010
  %2014 = trunc i32 %2013 to i16
  store i16 %2014, i16* @height, align 2
  %2015 = load %struct._IO_FILE** @ifp, align 8
  %2016 = load i64* @data_offset, align 8
  %2017 = sub nsw i64 %2016, 6
  %2018 = call i32 @fseek(%struct._IO_FILE* %2015, i64 %2017, i32 0)
  %2019 = call zeroext i16 @get2()
  %2020 = zext i16 %2019 to i32
  %2021 = xor i32 %2020, -1
  %2022 = and i32 %2021, 3
  %2023 = icmp ne i32 %2022, 0
  %2024 = select i1 %2023, i32 5, i32 6
  store i32 %2024, i32* @flip, align 4
  br label %2025

; <label>:2025                                    ; preds = %1997, %1981
  store void (...)* bitcast (void ()* @quicktake_100_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 1633771873, i32* @filters, align 4
  br label %2124

; <label>:2026                                    ; preds = %1978
  %2027 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str440, i32 0, i32 0)) #10
  %2028 = icmp ne i32 %2027, 0
  br i1 %2028, label %2041, label %2029

; <label>:2029                                    ; preds = %2026
  %2030 = getelementptr inbounds [32 x i8]* %head, i32 0, i64 5
  %2031 = load i8* %2030, align 1
  %2032 = sext i8 %2031 to i32
  %2033 = sub nsw i32 738, %2032
  %2034 = sext i32 %2033 to i64
  store i64 %2034, i64* @data_offset, align 8
  %2035 = getelementptr inbounds [32 x i8]* %head, i32 0, i64 5
  %2036 = load i8* %2035, align 1
  %2037 = icmp ne i8 %2036, 0
  br i1 %2037, label %2038, label %2040

; <label>:2038                                    ; preds = %2029
  %2039 = call i8* @strcpy(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 10), i8* getelementptr inbounds ([4 x i8]* @.str576, i32 0, i32 0)) #4
  br label %2040

; <label>:2040                                    ; preds = %2038, %2029
  store void (...)* bitcast (void ()* @kodak_radc_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i16 480, i16* @height, align 2
  store i16 640, i16* @width, align 2
  store i32 1633771873, i32* @filters, align 4
  br label %2123

; <label>:2041                                    ; preds = %2026
  %2042 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str182, i32 0, i32 0)) #10
  %2043 = icmp ne i32 %2042, 0
  br i1 %2043, label %2053, label %2044

; <label>:2044                                    ; preds = %2041
  %2045 = load void (...)** @load_raw, align 8
  %2046 = icmp ne void (...)* %2045, null
  br i1 %2046, label %2053, label %2047

; <label>:2047                                    ; preds = %2044
  %2048 = load i16* @raw_width, align 2
  %2049 = zext i16 %2048 to i32
  switch i32 %2049, label %2052 [
    i32 1316, label %2050
    i32 2568, label %2051
  ]

; <label>:2050                                    ; preds = %2047
  store i16 1030, i16* @height, align 2
  store i16 1300, i16* @width, align 2
  store i16 1, i16* @top_margin, align 2
  store i16 6, i16* @left_margin, align 2
  br label %2052

; <label>:2051                                    ; preds = %2047
  store i16 1960, i16* @height, align 2
  store i16 2560, i16* @width, align 2
  store i16 2, i16* @top_margin, align 2
  store i16 8, i16* @left_margin, align 2
  br label %2052

; <label>:2052                                    ; preds = %2051, %2047, %2050
  store i32 370546198, i32* @filters, align 4
  store void (...)* bitcast (void ()* @rollei_load_raw to void (...)*), void (...)** @load_raw, align 8
  store float 0x3FFCCCCCC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF4CCCCC0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2122

; <label>:2053                                    ; preds = %2044, %2041
  %2054 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str577, i32 0, i32 0)) #10
  %2055 = icmp ne i32 %2054, 0
  br i1 %2055, label %2057, label %2056

; <label>:2056                                    ; preds = %2053
  store i16 768, i16* @height, align 2
  store i16 1024, i16* @width, align 2
  store i64 1024, i64* @data_offset, align 8
  store i32 1229539657, i32* @filters, align 4
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  store float 0x3FF23D70A0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x4005D70A40000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2121

; <label>:2057                                    ; preds = %2053
  %2058 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str578, i32 0, i32 0)) #10
  %2059 = icmp ne i32 %2058, 0
  br i1 %2059, label %2065, label %2060

; <label>:2060                                    ; preds = %2057
  store i16 1208, i16* @height, align 2
  store i16 1632, i16* @width, align 2
  %2061 = load i16* @width, align 2
  %2062 = zext i16 %2061 to i32
  %2063 = mul nsw i32 %2062, 2
  %2064 = sext i32 %2063 to i64
  store i64 %2064, i64* @data_offset, align 8
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2120

; <label>:2065                                    ; preds = %2057
  %2066 = load i32* %fsize, align 4
  %2067 = icmp eq i32 %2066, 3217760
  br i1 %2067, label %2068, label %2069

; <label>:2068                                    ; preds = %2065
  store i16 1546, i16* @height, align 2
  store i16 2070, i16* @width, align 2
  store i16 2080, i16* @raw_width, align 2
  store void (...)* bitcast (void ()* @eight_bit_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2119

; <label>:2069                                    ; preds = %2065
  %2070 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str579, i32 0, i32 0)) #10
  %2071 = icmp ne i32 %2070, 0
  br i1 %2071, label %2073, label %2072

; <label>:2072                                    ; preds = %2069
  store i16 1700, i16* @height, align 2
  store i16 2260, i16* @width, align 2
  store void (...)* bitcast (void ()* @unpacked_load_raw to void (...)*), void (...)** @load_raw, align 8
  store i32 65535, i32* @maximum, align 4
  br label %2118

; <label>:2073                                    ; preds = %2069
  %2074 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str580, i32 0, i32 0)) #10
  %2075 = icmp ne i32 %2074, 0
  br i1 %2075, label %2077, label %2076

; <label>:2076                                    ; preds = %2073
  store i16 1924, i16* @height, align 2
  store i16 2576, i16* @width, align 2
  store void (...)* bitcast (void ()* @casio_qv5700_load_raw to void (...)*), void (...)** @load_raw, align 8
  br label %2117

; <label>:2077                                    ; preds = %2073
  %2078 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str581, i32 0, i32 0)) #10
  %2079 = icmp ne i32 %2078, 0
  br i1 %2079, label %2081, label %2080

; <label>:2080                                    ; preds = %2077
  store i16 1720, i16* @height, align 2
  store i16 2312, i16* @width, align 2
  store i16 3520, i16* @raw_width, align 2
  store i16 2, i16* @left_margin, align 2
  br label %2116

; <label>:2081                                    ; preds = %2077
  %2082 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str582, i32 0, i32 0)) #10
  %2083 = icmp ne i32 %2082, 0
  br i1 %2083, label %2085, label %2084

; <label>:2084                                    ; preds = %2081
  store i16 1926, i16* @height, align 2
  store i16 2580, i16* @width, align 2
  store i16 3904, i16* @raw_width, align 2
  store float 0x3FF570A3E0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FFAC08320000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2115

; <label>:2085                                    ; preds = %2081
  %2086 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str583, i32 0, i32 0)) #10
  %2087 = icmp ne i32 %2086, 0
  br i1 %2087, label %2089, label %2088

; <label>:2088                                    ; preds = %2085
  store i16 1544, i16* @height, align 2
  store i16 2058, i16* @width, align 2
  store i16 3136, i16* @raw_width, align 2
  store float 0x3FFA189380000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF1B22D00000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2114

; <label>:2089                                    ; preds = %2085
  %2090 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str584, i32 0, i32 0)) #10
  %2091 = icmp ne i32 %2090, 0
  br i1 %2091, label %2093, label %2092

; <label>:2092                                    ; preds = %2089
  store i16 1931, i16* @height, align 2
  store i16 2570, i16* @width, align 2
  store i16 3904, i16* @raw_width, align 2
  store float 0x40043B6460000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF2F5C280000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2113

; <label>:2093                                    ; preds = %2089
  %2094 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str585, i32 0, i32 0)) #10
  %2095 = icmp ne i32 %2094, 0
  br i1 %2095, label %2097, label %2096

; <label>:2096                                    ; preds = %2093
  store i16 1960, i16* @height, align 2
  store i16 2570, i16* @width, align 2
  store i16 3904, i16* @raw_width, align 2
  store float 0x3FF851EB80000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF50E5600000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2112

; <label>:2097                                    ; preds = %2093
  %2098 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str586, i32 0, i32 0)) #10
  %2099 = icmp ne i32 %2098, 0
  br i1 %2099, label %2101, label %2100

; <label>:2100                                    ; preds = %2097
  store i16 1928, i16* @height, align 2
  store i16 2568, i16* @width, align 2
  store i16 3852, i16* @raw_width, align 2
  store i32 4095, i32* @maximum, align 4
  store float 0x40008F5C20000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FFE147AE0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2111

; <label>:2101                                    ; preds = %2097
  %2102 = load i32* %fsize, align 4
  %2103 = icmp eq i32 %2102, 9313536
  br i1 %2103, label %2104, label %2105

; <label>:2104                                    ; preds = %2101
  store i16 2142, i16* @height, align 2
  store i16 2844, i16* @width, align 2
  store i16 4288, i16* @raw_width, align 2
  store float 0x3FFCC08320000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF3810620000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2110

; <label>:2105                                    ; preds = %2101
  %2106 = call i32 @strcmp(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str587, i32 0, i32 0)) #10
  %2107 = icmp ne i32 %2106, 0
  br i1 %2107, label %2109, label %2108

; <label>:2108                                    ; preds = %2105
  store i16 2318, i16* @height, align 2
  store i16 3082, i16* @width, align 2
  store i16 4672, i16* @raw_width, align 2
  store float 0x3FFC20C4A0000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 0), align 4
  store float 0x3FF8106240000000, float* getelementptr inbounds ([4 x float]* @pre_mul, i32 0, i64 2), align 4
  br label %2109

; <label>:2109                                    ; preds = %2108, %2105
  br label %2110

; <label>:2110                                    ; preds = %2109, %2104
  br label %2111

; <label>:2111                                    ; preds = %2110, %2100
  br label %2112

; <label>:2112                                    ; preds = %2111, %2096
  br label %2113

; <label>:2113                                    ; preds = %2112, %2092
  br label %2114

; <label>:2114                                    ; preds = %2113, %2088
  br label %2115

; <label>:2115                                    ; preds = %2114, %2084
  br label %2116

; <label>:2116                                    ; preds = %2115, %2080
  br label %2117

; <label>:2117                                    ; preds = %2116, %2076
  br label %2118

; <label>:2118                                    ; preds = %2117, %2072
  br label %2119

; <label>:2119                                    ; preds = %2118, %2068
  br label %2120

; <label>:2120                                    ; preds = %2119, %2060
  br label %2121

; <label>:2121                                    ; preds = %2120, %2056
  br label %2122

; <label>:2122                                    ; preds = %2121, %2052
  br label %2123

; <label>:2123                                    ; preds = %2122, %2040
  br label %2124

; <label>:2124                                    ; preds = %2123, %2025
  br label %2125

; <label>:2125                                    ; preds = %2124, %1977
  br label %2126

; <label>:2126                                    ; preds = %2125, %1973
  br label %2127

; <label>:2127                                    ; preds = %2126, %1825
  br label %2128

; <label>:2128                                    ; preds = %2127
  br label %2129

; <label>:2129                                    ; preds = %2128, %1802
  br label %2130

; <label>:2130                                    ; preds = %2129
  br label %2131

; <label>:2131                                    ; preds = %2130, %1789
  br label %2132

; <label>:2132                                    ; preds = %2131, %1783
  br label %2133

; <label>:2133                                    ; preds = %2132, %1779
  br label %2134

; <label>:2134                                    ; preds = %2133, %1771
  br label %2135

; <label>:2135                                    ; preds = %2134, %1766
  br label %2136

; <label>:2136                                    ; preds = %2135, %1762
  br label %2137

; <label>:2137                                    ; preds = %2136, %1758
  br label %2138

; <label>:2138                                    ; preds = %2137, %1692
  br label %2139

; <label>:2139                                    ; preds = %2138, %1688
  br label %2140

; <label>:2140                                    ; preds = %2139, %1544
  br label %2141

; <label>:2141                                    ; preds = %2140, %1438
  br label %2142

; <label>:2142                                    ; preds = %2141, %1419
  br label %2143

; <label>:2143                                    ; preds = %2142, %1391
  br label %2144

; <label>:2144                                    ; preds = %2143, %1368
  br label %2145

; <label>:2145                                    ; preds = %2144, %1364
  br label %2146

; <label>:2146                                    ; preds = %2145, %1357
  br label %2147

; <label>:2147                                    ; preds = %2146, %1353
  br label %2148

; <label>:2148                                    ; preds = %2147, %1346
  br label %2149

; <label>:2149                                    ; preds = %2148, %1342
  br label %2150

; <label>:2150                                    ; preds = %2149, %1338
  br label %2151

; <label>:2151                                    ; preds = %2150, %1334
  br label %2152

; <label>:2152                                    ; preds = %2151, %1330
  br label %2153

; <label>:2153                                    ; preds = %2152, %1322
  br label %2154

; <label>:2154                                    ; preds = %2153, %1318
  br label %2155

; <label>:2155                                    ; preds = %2154, %1314
  br label %2156

; <label>:2156                                    ; preds = %2155, %1304
  br label %2157

; <label>:2157                                    ; preds = %2156, %1300
  br label %2158

; <label>:2158                                    ; preds = %2157, %1296
  br label %2159

; <label>:2159                                    ; preds = %2158, %1292
  br label %2160

; <label>:2160                                    ; preds = %2159, %1279
  br label %2161

; <label>:2161                                    ; preds = %2160, %1271
  br label %2162

; <label>:2162                                    ; preds = %2161, %1267
  br label %2163

; <label>:2163                                    ; preds = %2162
  br label %2164

; <label>:2164                                    ; preds = %2163
  br label %2165

; <label>:2165                                    ; preds = %2164, %1203
  br label %2166

; <label>:2166                                    ; preds = %2165, %1199
  br label %2167

; <label>:2167                                    ; preds = %2166, %1113
  br label %2168

; <label>:2168                                    ; preds = %2167, %1106
  br label %2169

; <label>:2169                                    ; preds = %2168, %1102
  br label %2170

; <label>:2170                                    ; preds = %2169, %1098
  br label %2171

; <label>:2171                                    ; preds = %2170, %1089
  br label %2172

; <label>:2172                                    ; preds = %2171, %1076
  br label %2173

; <label>:2173                                    ; preds = %2172, %1055
  br label %2174

; <label>:2174                                    ; preds = %2173, %1050
  br label %2175

; <label>:2175                                    ; preds = %2174, %1039
  br label %2176

; <label>:2176                                    ; preds = %2175, %1023
  br label %2177

; <label>:2177                                    ; preds = %2176, %1019
  br label %2178

; <label>:2178                                    ; preds = %2177, %1015
  br label %2179

; <label>:2179                                    ; preds = %2178, %1007
  br label %2180

; <label>:2180                                    ; preds = %2179, %1003
  br label %2181

; <label>:2181                                    ; preds = %2180, %981
  br label %2182

; <label>:2182                                    ; preds = %2181, %973
  br label %2183

; <label>:2183                                    ; preds = %2182, %969
  br label %2184

; <label>:2184                                    ; preds = %2183, %945
  br label %2185

; <label>:2185                                    ; preds = %2184, %939
  br label %2186

; <label>:2186                                    ; preds = %2185, %925
  br label %2187

; <label>:2187                                    ; preds = %2186, %910
  br label %2188

; <label>:2188                                    ; preds = %2187, %896
  br label %2189

; <label>:2189                                    ; preds = %2188, %884
  br label %2190

; <label>:2190                                    ; preds = %2189, %880
  br label %2191

; <label>:2191                                    ; preds = %2190, %860
  br label %2192

; <label>:2192                                    ; preds = %2191
  br label %2193

; <label>:2193                                    ; preds = %2192
  br label %2194

; <label>:2194                                    ; preds = %2193, %827
  br label %2195

; <label>:2195                                    ; preds = %2194
  br label %2196

; <label>:2196                                    ; preds = %2195
  br label %2197

; <label>:2197                                    ; preds = %2196, %795
  br label %2198

; <label>:2198                                    ; preds = %2197
  br label %2199

; <label>:2199                                    ; preds = %2198
  br label %2200

; <label>:2200                                    ; preds = %2199, %755
  br label %2201

; <label>:2201                                    ; preds = %2200
  br label %2202

; <label>:2202                                    ; preds = %2201
  br label %2203

; <label>:2203                                    ; preds = %2202, %725
  br label %2204

; <label>:2204                                    ; preds = %2203, %721
  br label %2205

; <label>:2205                                    ; preds = %2204, %713
  br label %2206

; <label>:2206                                    ; preds = %2205, %705
  br label %2207

; <label>:2207                                    ; preds = %2206, %693
  br label %2208

; <label>:2208                                    ; preds = %2207, %685
  br label %2209

; <label>:2209                                    ; preds = %2208, %677
  br label %2210

; <label>:2210                                    ; preds = %2209, %669
  br label %2211

; <label>:2211                                    ; preds = %2210, %657
  br label %2212

; <label>:2212                                    ; preds = %2211, %653
  br label %2213

; <label>:2213                                    ; preds = %2212, %649
  br label %2214

; <label>:2214                                    ; preds = %2213, %645
  br label %2215

; <label>:2215                                    ; preds = %2214, %641
  br label %2216

; <label>:2216                                    ; preds = %2215, %637
  br label %2217

; <label>:2217                                    ; preds = %2216, %633
  br label %2218

; <label>:2218                                    ; preds = %2217, %629
  br label %2219

; <label>:2219                                    ; preds = %2218, %620
  br label %2220

; <label>:2220                                    ; preds = %2219, %616
  br label %2221

; <label>:2221                                    ; preds = %2220, %612
  br label %2222

; <label>:2222                                    ; preds = %2221, %608
  br label %2223

; <label>:2223                                    ; preds = %2222, %604
  br label %2224

; <label>:2224                                    ; preds = %2223, %600
  br label %2225

; <label>:2225                                    ; preds = %2224, %593
  br label %2226

; <label>:2226                                    ; preds = %2225, %589
  br label %2227

; <label>:2227                                    ; preds = %2226, %569
  %2228 = load i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i64 0), align 1
  %2229 = icmp ne i8 %2228, 0
  br i1 %2229, label %2236, label %2230

; <label>:2230                                    ; preds = %2227
  %2231 = load i16* @width, align 2
  %2232 = zext i16 %2231 to i32
  %2233 = load i16* @height, align 2
  %2234 = zext i16 %2233 to i32
  %2235 = call i32 (i8*, i8*, ...)* @sprintf(i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str588, i32 0, i32 0), i32 %2232, i32 %2234) #4
  br label %2236

; <label>:2236                                    ; preds = %2230, %2227
  %2237 = load i32* @filters, align 4
  %2238 = icmp eq i32 %2237, -1
  br i1 %2238, label %2239, label %2240

; <label>:2239                                    ; preds = %2236
  store i32 -1802201964, i32* @filters, align 4
  br label %2240

; <label>:2240                                    ; preds = %2239, %2236
  %2241 = load i32* @raw_color, align 4
  %2242 = icmp ne i32 %2241, 0
  br i1 %2242, label %2243, label %2244

; <label>:2243                                    ; preds = %2240
  call void @adobe_coeff(i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0))
  br label %2244

; <label>:2244                                    ; preds = %2243, %2240
  %2245 = load i64* @thumb_offset, align 8
  %2246 = icmp ne i64 %2245, 0
  br i1 %2246, label %2247, label %2264

; <label>:2247                                    ; preds = %2244
  %2248 = load i16* @thumb_height, align 2
  %2249 = icmp ne i16 %2248, 0
  br i1 %2249, label %2264, label %2250

; <label>:2250                                    ; preds = %2247
  %2251 = load %struct._IO_FILE** @ifp, align 8
  %2252 = load i64* @thumb_offset, align 8
  %2253 = call i32 @fseek(%struct._IO_FILE* %2251, i64 %2252, i32 0)
  %2254 = call i32 @ljpeg_start(%struct.jhead* %jh, i32 1)
  %2255 = icmp ne i32 %2254, 0
  br i1 %2255, label %2256, label %2263

; <label>:2256                                    ; preds = %2250
  %2257 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 2
  %2258 = load i32* %2257, align 4
  %2259 = trunc i32 %2258 to i16
  store i16 %2259, i16* @thumb_width, align 2
  %2260 = getelementptr inbounds %struct.jhead* %jh, i32 0, i32 1
  %2261 = load i32* %2260, align 4
  %2262 = trunc i32 %2261 to i16
  store i16 %2262, i16* @thumb_height, align 2
  br label %2263

; <label>:2263                                    ; preds = %2256, %2250
  br label %2264

; <label>:2264                                    ; preds = %2263, %2247, %2244
  br label %2265

; <label>:2265                                    ; preds = %2264, %514
  %2266 = load void (...)** @load_raw, align 8
  %2267 = icmp ne void (...)* %2266, null
  br i1 %2267, label %2268, label %2272

; <label>:2268                                    ; preds = %2265
  %2269 = load i16* @height, align 2
  %2270 = zext i16 %2269 to i32
  %2271 = icmp slt i32 %2270, 22
  br i1 %2271, label %2272, label %2273

; <label>:2272                                    ; preds = %2268, %2265
  store i32 0, i32* @is_raw, align 4
  br label %2273

; <label>:2273                                    ; preds = %2272, %2268
  %2274 = load void (...)** @load_raw, align 8
  %2275 = icmp eq void (...)* %2274, bitcast (void ()* @kodak_jpeg_load_raw to void (...)*)
  br i1 %2275, label %2276, label %2280

; <label>:2276                                    ; preds = %2273
  %2277 = load %struct._IO_FILE** @stderr, align 8
  %2278 = load i8** @ifname, align 8
  %2279 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2277, i8* getelementptr inbounds ([40 x i8]* @.str589, i32 0, i32 0), i8* %2278)
  store i32 0, i32* @is_raw, align 4
  br label %2280

; <label>:2280                                    ; preds = %2276, %2273
  %2281 = load i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 0), align 1
  %2282 = icmp ne i8 %2281, 0
  br i1 %2282, label %2288, label %2283

; <label>:2283                                    ; preds = %2280
  %2284 = load i32* @colors, align 4
  %2285 = icmp eq i32 %2284, 3
  %2286 = select i1 %2285, i8* getelementptr inbounds ([4 x i8]* @.str590, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str591, i32 0, i32 0)
  %2287 = call i8* @strcpy(i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0), i8* %2286) #4
  br label %2288

; <label>:2288                                    ; preds = %2283, %2280
  %2289 = load i16* @raw_height, align 2
  %2290 = icmp ne i16 %2289, 0
  br i1 %2290, label %2293, label %2291

; <label>:2291                                    ; preds = %2288
  %2292 = load i16* @height, align 2
  store i16 %2292, i16* @raw_height, align 2
  br label %2293

; <label>:2293                                    ; preds = %2291, %2288
  %2294 = load i16* @raw_width, align 2
  %2295 = icmp ne i16 %2294, 0
  br i1 %2295, label %2298, label %2296

; <label>:2296                                    ; preds = %2293
  %2297 = load i16* @width, align 2
  store i16 %2297, i16* @raw_width, align 2
  br label %2298

; <label>:2298                                    ; preds = %2296, %2293
  %2299 = load i32* @filters, align 4
  %2300 = icmp ne i32 %2299, 0
  br i1 %2300, label %2301, label %2335

; <label>:2301                                    ; preds = %2298
  %2302 = load i32* @colors, align 4
  %2303 = icmp eq i32 %2302, 3
  br i1 %2303, label %2304, label %2335

; <label>:2304                                    ; preds = %2301
  store i32 0, i32* %i, align 4
  br label %2305

; <label>:2305                                    ; preds = %2331, %2304
  %2306 = load i32* %i, align 4
  %2307 = icmp ult i32 %2306, 32
  br i1 %2307, label %2308, label %2334

; <label>:2308                                    ; preds = %2305
  %2309 = load i32* @filters, align 4
  %2310 = load i32* %i, align 4
  %2311 = lshr i32 %2309, %2310
  %2312 = and i32 %2311, 15
  %2313 = icmp eq i32 %2312, 9
  br i1 %2313, label %2314, label %2319

; <label>:2314                                    ; preds = %2308
  %2315 = load i32* %i, align 4
  %2316 = shl i32 2, %2315
  %2317 = load i32* @filters, align 4
  %2318 = or i32 %2317, %2316
  store i32 %2318, i32* @filters, align 4
  br label %2319

; <label>:2319                                    ; preds = %2314, %2308
  %2320 = load i32* @filters, align 4
  %2321 = load i32* %i, align 4
  %2322 = lshr i32 %2320, %2321
  %2323 = and i32 %2322, 15
  %2324 = icmp eq i32 %2323, 6
  br i1 %2324, label %2325, label %2330

; <label>:2325                                    ; preds = %2319
  %2326 = load i32* %i, align 4
  %2327 = shl i32 8, %2326
  %2328 = load i32* @filters, align 4
  %2329 = or i32 %2328, %2327
  store i32 %2329, i32* @filters, align 4
  br label %2330

; <label>:2330                                    ; preds = %2325, %2319
  br label %2331

; <label>:2331                                    ; preds = %2330
  %2332 = load i32* %i, align 4
  %2333 = add i32 %2332, 4
  store i32 %2333, i32* %i, align 4
  br label %2305

; <label>:2334                                    ; preds = %2305
  br label %2335

; <label>:2335                                    ; preds = %2334, %2301, %2298
  br label %2336

; <label>:2336                                    ; preds = %2335, %433
  %2337 = load i32* @flip, align 4
  %2338 = icmp eq i32 %2337, -1
  br i1 %2338, label %2339, label %2341

; <label>:2339                                    ; preds = %2336
  %2340 = load i32* @tiff_flip, align 4
  store i32 %2340, i32* @flip, align 4
  br label %2341

; <label>:2341                                    ; preds = %2339, %2336
  %2342 = load i32* @flip, align 4
  %2343 = icmp eq i32 %2342, -1
  br i1 %2343, label %2344, label %2345

; <label>:2344                                    ; preds = %2341
  store i32 0, i32* @flip, align 4
  br label %2345

; <label>:2345                                    ; preds = %2344, %2341
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @memmem(i8*, i64, i8*, i64) #6

; Function Attrs: nounwind readonly
declare i32 @strncasecmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define void @convert_to_rgb() #0 {
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %img = alloca i16*, align 8
  %out = alloca [3 x float], align 4
  %out_cam = alloca [3 x [4 x float]], align 16
  %num = alloca double, align 8
  %inverse = alloca [3 x [3 x double]], align 16
  %bnd = alloca [2 x double], align 16
  %pbody = alloca [31 x i32], align 16
  %pcurve = alloca [4 x i32], align 16
  %1 = bitcast [2 x double]* %bnd to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = bitcast [31 x i32]* %pbody to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([31 x i32]* @convert_to_rgb.pbody to i8*), i64 124, i32 16, i1 false)
  %3 = bitcast [4 x i32]* %pcurve to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([4 x i32]* @convert_to_rgb.pcurve to i8*), i64 16, i32 16, i1 false)
  %4 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %5 = fcmp oge double %4, 1.000000e+00
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 %7
  store double 1.000000e+00, double* %8, align 8
  %9 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %10 = fcmp une double %9, 0.000000e+00
  br i1 %10, label %11, label %58

; <label>:11                                      ; preds = %0
  %12 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %13 = fsub double %12, 1.000000e+00
  %14 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %15 = fsub double %14, 1.000000e+00
  %16 = fmul double %13, %15
  %17 = fcmp ole double %16, 0.000000e+00
  br i1 %17, label %18, label %58

; <label>:18                                      ; preds = %11
  store i32 0, i32* %i, align 4
  br label %19

; <label>:19                                      ; preds = %46, %18
  %20 = load i32* %i, align 4
  %21 = icmp slt i32 %20, 36
  br i1 %21, label %22, label %49

; <label>:22                                      ; preds = %19
  %23 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 0
  %24 = load double* %23, align 8
  %25 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 1
  %26 = load double* %25, align 8
  %27 = fadd double %24, %26
  %28 = fdiv double %27, 2.000000e+00
  store double %28, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %29 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %30 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %31 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %32 = fdiv double %30, %31
  %33 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %34 = fsub double -0.000000e+00, %33
  %35 = call double @pow(double %32, double %34) #4
  %36 = fsub double %35, 1.000000e+00
  %37 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %38 = fdiv double %36, %37
  %39 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %40 = fdiv double 1.000000e+00, %39
  %41 = fsub double %38, %40
  %42 = fcmp ogt double %41, -1.000000e+00
  %43 = zext i1 %42 to i32
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [2 x double]* %bnd, i32 0, i64 %44
  store double %29, double* %45, align 8
  br label %46

; <label>:46                                      ; preds = %22
  %47 = load i32* %i, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %i, align 4
  br label %19

; <label>:49                                      ; preds = %19
  %50 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %51 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %52 = fdiv double 1.000000e+00, %51
  %53 = fsub double %52, 1.000000e+00
  %54 = fmul double %50, %53
  store double %54, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %55 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %56 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %57 = fdiv double %56, %55
  store double %57, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  br label %58

; <label>:58                                      ; preds = %49, %11, %0
  %59 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %60 = fdiv double %59, 2.000000e+00
  %61 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %62 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %63 = fmul double %61, %62
  %64 = fmul double %60, %63
  %65 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %66 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %67 = fsub double 1.000000e+00, %66
  %68 = fmul double %65, %67
  %69 = fsub double %64, %68
  %70 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %71 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %72 = fadd double 1.000000e+00, %71
  %73 = call double @pow(double %70, double %72) #4
  %74 = fsub double 1.000000e+00, %73
  %75 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %76 = fadd double 1.000000e+00, %75
  %77 = fmul double %74, %76
  %78 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %79 = fadd double 1.000000e+00, %78
  %80 = fdiv double %77, %79
  %81 = fadd double %69, %80
  %82 = fdiv double 1.000000e+00, %81
  %83 = fsub double %82, 1.000000e+00
  store double %83, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 4), align 8
  %84 = bitcast [3 x [4 x float]]* %out_cam to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* bitcast ([3 x [4 x float]]* @rgb_cam to i8*), i64 48, i32 16, i1 false)
  %85 = load i32* @colors, align 4
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %96, label %87

; <label>:87                                      ; preds = %58
  %88 = load i32* @document_mode, align 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %96, label %90

; <label>:90                                      ; preds = %87
  %91 = load i32* @output_color, align 4
  %92 = icmp slt i32 %91, 1
  br i1 %92, label %96, label %93

; <label>:93                                      ; preds = %90
  %94 = load i32* @output_color, align 4
  %95 = icmp sgt i32 %94, 5
  br label %96

; <label>:96                                      ; preds = %93, %90, %87, %58
  %97 = phi i1 [ true, %90 ], [ true, %87 ], [ true, %58 ], [ %95, %93 ]
  %98 = zext i1 %97 to i32
  %99 = load i32* @raw_color, align 4
  %100 = or i32 %99, %98
  store i32 %100, i32* @raw_color, align 4
  %101 = load i32* @raw_color, align 4
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %396, label %103

; <label>:103                                     ; preds = %96
  %104 = load i32* getelementptr inbounds ([20 x i32]* @convert_to_rgb.phead, i32 0, i64 0), align 4
  %105 = zext i32 %104 to i64
  %106 = call noalias i8* @calloc(i64 %105, i64 1) #4
  %107 = bitcast i8* %106 to i32*
  store i32* %107, i32** @oprof, align 8
  %108 = load i32** @oprof, align 8
  %109 = bitcast i32* %108 to i8*
  call void @merror(i8* %109, i8* getelementptr inbounds ([17 x i8]* @.str597, i32 0, i32 0))
  %110 = load i32** @oprof, align 8
  %111 = bitcast i32* %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* bitcast ([20 x i32]* @convert_to_rgb.phead to i8*), i64 80, i32 4, i1 false)
  %112 = load i32* @output_color, align 4
  %113 = icmp eq i32 %112, 5
  br i1 %113, label %114, label %120

; <label>:114                                     ; preds = %103
  %115 = load i32** @oprof, align 8
  %116 = getelementptr inbounds i32* %115, i64 5
  %117 = load i32* %116, align 4
  %118 = load i32** @oprof, align 8
  %119 = getelementptr inbounds i32* %118, i64 4
  store i32 %117, i32* %119, align 4
  br label %120

; <label>:120                                     ; preds = %114, %103
  %121 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 0
  %122 = load i32* %121, align 4
  %123 = mul i32 12, %122
  %124 = add i32 132, %123
  %125 = load i32** @oprof, align 8
  %126 = getelementptr inbounds i32* %125, i64 0
  store i32 %124, i32* %126, align 4
  store i32 0, i32* %i, align 4
  br label %127

; <label>:127                                     ; preds = %169, %120
  %128 = load i32* %i, align 4
  %129 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 0
  %130 = load i32* %129, align 4
  %131 = icmp ult i32 %128, %130
  br i1 %131, label %132, label %172

; <label>:132                                     ; preds = %127
  %133 = load i32* %i, align 4
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %139

; <label>:135                                     ; preds = %132
  %136 = load i32* %i, align 4
  %137 = icmp sgt i32 %136, 1
  %138 = select i1 %137, i32 1482250784, i32 1684370275
  br label %140

; <label>:139                                     ; preds = %132
  br label %140

; <label>:140                                     ; preds = %139, %135
  %141 = phi i32 [ %138, %135 ], [ 1952807028, %139 ]
  %142 = load i32** @oprof, align 8
  %143 = getelementptr inbounds i32* %142, i64 0
  %144 = load i32* %143, align 4
  %145 = udiv i32 %144, 4
  %146 = zext i32 %145 to i64
  %147 = load i32** @oprof, align 8
  %148 = getelementptr inbounds i32* %147, i64 %146
  store i32 %141, i32* %148, align 4
  %149 = load i32** @oprof, align 8
  %150 = getelementptr inbounds i32* %149, i64 0
  %151 = load i32* %150, align 4
  %152 = load i32* %i, align 4
  %153 = mul nsw i32 %152, 3
  %154 = add nsw i32 %153, 2
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %155
  store i32 %151, i32* %156, align 4
  %157 = load i32* %i, align 4
  %158 = mul nsw i32 %157, 3
  %159 = add nsw i32 %158, 3
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %160
  %162 = load i32* %161, align 4
  %163 = add i32 %162, 3
  %164 = and i32 %163, -4
  %165 = load i32** @oprof, align 8
  %166 = getelementptr inbounds i32* %165, i64 0
  %167 = load i32* %166, align 4
  %168 = add i32 %167, %164
  store i32 %168, i32* %166, align 4
  br label %169

; <label>:169                                     ; preds = %140
  %170 = load i32* %i, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %i, align 4
  br label %127

; <label>:172                                     ; preds = %127
  %173 = load i32** @oprof, align 8
  %174 = getelementptr inbounds i32* %173, i64 32
  %175 = bitcast i32* %174 to i8*
  %176 = bitcast [31 x i32]* %pbody to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %175, i8* %176, i64 124, i32 4, i1 false)
  %177 = load i32* @output_color, align 4
  %178 = sub nsw i32 %177, 1
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [5 x i8*]* @convert_to_rgb.name, i32 0, i64 %179
  %181 = load i8** %180, align 8
  %182 = call i64 @strlen(i8* %181) #10
  %183 = add i64 %182, 1
  %184 = trunc i64 %183 to i32
  %185 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 5
  %186 = load i32* %185, align 4
  %187 = udiv i32 %186, 4
  %188 = add i32 %187, 2
  %189 = zext i32 %188 to i64
  %190 = load i32** @oprof, align 8
  %191 = getelementptr inbounds i32* %190, i64 %189
  store i32 %184, i32* %191, align 4
  %192 = load i32** @oprof, align 8
  %193 = bitcast i32* %192 to i8*
  %194 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 8
  %195 = load i32* %194, align 4
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i8* %193, i64 %196
  %198 = getelementptr inbounds i8* %197, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %198, i8* bitcast ([3 x i32]* @convert_to_rgb.pwhite to i8*), i64 12, i32 1, i1 false)
  %199 = load i32* @output_bps, align 4
  %200 = icmp eq i32 %199, 8
  br i1 %200, label %201, label %209

; <label>:201                                     ; preds = %172
  %202 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 4), align 8
  %203 = fdiv double 2.560000e+02, %202
  %204 = fadd double %203, 5.000000e-01
  %205 = fptosi double %204 to i16
  %206 = sext i16 %205 to i32
  %207 = shl i32 %206, 16
  %208 = getelementptr inbounds [4 x i32]* %pcurve, i32 0, i64 3
  store i32 %207, i32* %208, align 4
  br label %209

; <label>:209                                     ; preds = %201, %172
  store i32 4, i32* %i, align 4
  br label %210

; <label>:210                                     ; preds = %225, %209
  %211 = load i32* %i, align 4
  %212 = icmp slt i32 %211, 7
  br i1 %212, label %213, label %228

; <label>:213                                     ; preds = %210
  %214 = load i32** @oprof, align 8
  %215 = bitcast i32* %214 to i8*
  %216 = load i32* %i, align 4
  %217 = mul nsw i32 %216, 3
  %218 = add nsw i32 %217, 2
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %219
  %221 = load i32* %220, align 4
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds i8* %215, i64 %222
  %224 = bitcast [4 x i32]* %pcurve to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %223, i8* %224, i64 16, i32 1, i1 false)
  br label %225

; <label>:225                                     ; preds = %213
  %226 = load i32* %i, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %i, align 4
  br label %210

; <label>:228                                     ; preds = %210
  %229 = load i32* @output_color, align 4
  %230 = sub nsw i32 %229, 1
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [5 x [3 x double]*]* @convert_to_rgb.out_rgb, i32 0, i64 %231
  %233 = load [3 x double]** %232, align 8
  %234 = getelementptr inbounds [3 x [3 x double]]* %inverse, i32 0, i32 0
  call void @pseudoinverse([3 x double]* %233, [3 x double]* %234, i32 3)
  store i32 0, i32* %i, align 4
  br label %235

; <label>:235                                     ; preds = %289, %228
  %236 = load i32* %i, align 4
  %237 = icmp slt i32 %236, 3
  br i1 %237, label %238, label %292

; <label>:238                                     ; preds = %235
  store i32 0, i32* %j, align 4
  br label %239

; <label>:239                                     ; preds = %285, %238
  %240 = load i32* %j, align 4
  %241 = icmp slt i32 %240, 3
  br i1 %241, label %242, label %288

; <label>:242                                     ; preds = %239
  store i32 0, i32* %k, align 4
  store double 0.000000e+00, double* %num, align 8
  br label %243

; <label>:243                                     ; preds = %264, %242
  %244 = load i32* %k, align 4
  %245 = icmp slt i32 %244, 3
  br i1 %245, label %246, label %267

; <label>:246                                     ; preds = %243
  %247 = load i32* %k, align 4
  %248 = sext i32 %247 to i64
  %249 = load i32* %i, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [3 x [3 x double]]* @convert_to_rgb.xyzd50_srgb, i32 0, i64 %250
  %252 = getelementptr inbounds [3 x double]* %251, i32 0, i64 %248
  %253 = load double* %252, align 8
  %254 = load i32* %k, align 4
  %255 = sext i32 %254 to i64
  %256 = load i32* %j, align 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds [3 x [3 x double]]* %inverse, i32 0, i64 %257
  %259 = getelementptr inbounds [3 x double]* %258, i32 0, i64 %255
  %260 = load double* %259, align 8
  %261 = fmul double %253, %260
  %262 = load double* %num, align 8
  %263 = fadd double %262, %261
  store double %263, double* %num, align 8
  br label %264

; <label>:264                                     ; preds = %246
  %265 = load i32* %k, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %k, align 4
  br label %243

; <label>:267                                     ; preds = %243
  %268 = load double* %num, align 8
  %269 = fmul double %268, 6.553600e+04
  %270 = fadd double %269, 5.000000e-01
  %271 = fptoui double %270 to i32
  %272 = load i32* %j, align 4
  %273 = mul nsw i32 %272, 3
  %274 = add nsw i32 %273, 23
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 %275
  %277 = load i32* %276, align 4
  %278 = udiv i32 %277, 4
  %279 = load i32* %i, align 4
  %280 = add i32 %278, %279
  %281 = add i32 %280, 2
  %282 = zext i32 %281 to i64
  %283 = load i32** @oprof, align 8
  %284 = getelementptr inbounds i32* %283, i64 %282
  store i32 %271, i32* %284, align 4
  br label %285

; <label>:285                                     ; preds = %267
  %286 = load i32* %j, align 4
  %287 = add nsw i32 %286, 1
  store i32 %287, i32* %j, align 4
  br label %239

; <label>:288                                     ; preds = %239
  br label %289

; <label>:289                                     ; preds = %288
  %290 = load i32* %i, align 4
  %291 = add nsw i32 %290, 1
  store i32 %291, i32* %i, align 4
  br label %235

; <label>:292                                     ; preds = %235
  store i32 0, i32* %i, align 4
  br label %293

; <label>:293                                     ; preds = %309, %292
  %294 = load i32* %i, align 4
  %295 = load i32* getelementptr inbounds ([20 x i32]* @convert_to_rgb.phead, i32 0, i64 0), align 4
  %296 = udiv i32 %295, 4
  %297 = icmp ult i32 %294, %296
  br i1 %297, label %298, label %312

; <label>:298                                     ; preds = %293
  %299 = load i32* %i, align 4
  %300 = sext i32 %299 to i64
  %301 = load i32** @oprof, align 8
  %302 = getelementptr inbounds i32* %301, i64 %300
  %303 = load i32* %302, align 4
  %304 = call i32 @htonl(i32 %303) #9
  %305 = load i32* %i, align 4
  %306 = sext i32 %305 to i64
  %307 = load i32** @oprof, align 8
  %308 = getelementptr inbounds i32* %307, i64 %306
  store i32 %304, i32* %308, align 4
  br label %309

; <label>:309                                     ; preds = %298
  %310 = load i32* %i, align 4
  %311 = add nsw i32 %310, 1
  store i32 %311, i32* %i, align 4
  br label %293

; <label>:312                                     ; preds = %293
  %313 = load i32** @oprof, align 8
  %314 = bitcast i32* %313 to i8*
  %315 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 2
  %316 = load i32* %315, align 4
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds i8* %314, i64 %317
  %319 = getelementptr inbounds i8* %318, i64 8
  %320 = call i8* @strcpy(i8* %319, i8* getelementptr inbounds ([24 x i8]* @.str598, i32 0, i32 0)) #4
  %321 = load i32** @oprof, align 8
  %322 = bitcast i32* %321 to i8*
  %323 = getelementptr inbounds [31 x i32]* %pbody, i32 0, i64 5
  %324 = load i32* %323, align 4
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds i8* %322, i64 %325
  %327 = getelementptr inbounds i8* %326, i64 12
  %328 = load i32* @output_color, align 4
  %329 = sub nsw i32 %328, 1
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds [5 x i8*]* @convert_to_rgb.name, i32 0, i64 %330
  %332 = load i8** %331, align 8
  %333 = call i8* @strcpy(i8* %327, i8* %332) #4
  store i32 0, i32* %i, align 4
  br label %334

; <label>:334                                     ; preds = %392, %312
  %335 = load i32* %i, align 4
  %336 = icmp slt i32 %335, 3
  br i1 %336, label %337, label %395

; <label>:337                                     ; preds = %334
  store i32 0, i32* %j, align 4
  br label %338

; <label>:338                                     ; preds = %388, %337
  %339 = load i32* %j, align 4
  %340 = load i32* @colors, align 4
  %341 = icmp slt i32 %339, %340
  br i1 %341, label %342, label %391

; <label>:342                                     ; preds = %338
  store i32 0, i32* %k, align 4
  %343 = load i32* %j, align 4
  %344 = sext i32 %343 to i64
  %345 = load i32* %i, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 %346
  %348 = getelementptr inbounds [4 x float]* %347, i32 0, i64 %344
  store float 0.000000e+00, float* %348, align 4
  br label %349

; <label>:349                                     ; preds = %384, %342
  %350 = load i32* %k, align 4
  %351 = icmp slt i32 %350, 3
  br i1 %351, label %352, label %387

; <label>:352                                     ; preds = %349
  %353 = load i32* %k, align 4
  %354 = sext i32 %353 to i64
  %355 = load i32* %i, align 4
  %356 = sext i32 %355 to i64
  %357 = load i32* @output_color, align 4
  %358 = sub nsw i32 %357, 1
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [5 x [3 x double]*]* @convert_to_rgb.out_rgb, i32 0, i64 %359
  %361 = load [3 x double]** %360, align 8
  %362 = getelementptr inbounds [3 x double]* %361, i64 %356
  %363 = getelementptr inbounds [3 x double]* %362, i32 0, i64 %354
  %364 = load double* %363, align 8
  %365 = load i32* %j, align 4
  %366 = sext i32 %365 to i64
  %367 = load i32* %k, align 4
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds [3 x [4 x float]]* @rgb_cam, i32 0, i64 %368
  %370 = getelementptr inbounds [4 x float]* %369, i32 0, i64 %366
  %371 = load float* %370, align 4
  %372 = fpext float %371 to double
  %373 = fmul double %364, %372
  %374 = load i32* %j, align 4
  %375 = sext i32 %374 to i64
  %376 = load i32* %i, align 4
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 %377
  %379 = getelementptr inbounds [4 x float]* %378, i32 0, i64 %375
  %380 = load float* %379, align 4
  %381 = fpext float %380 to double
  %382 = fadd double %381, %373
  %383 = fptrunc double %382 to float
  store float %383, float* %379, align 4
  br label %384

; <label>:384                                     ; preds = %352
  %385 = load i32* %k, align 4
  %386 = add nsw i32 %385, 1
  store i32 %386, i32* %k, align 4
  br label %349

; <label>:387                                     ; preds = %349
  br label %388

; <label>:388                                     ; preds = %387
  %389 = load i32* %j, align 4
  %390 = add nsw i32 %389, 1
  store i32 %390, i32* %j, align 4
  br label %338

; <label>:391                                     ; preds = %338
  br label %392

; <label>:392                                     ; preds = %391
  %393 = load i32* %i, align 4
  %394 = add nsw i32 %393, 1
  store i32 %394, i32* %i, align 4
  br label %334

; <label>:395                                     ; preds = %334
  br label %396

; <label>:396                                     ; preds = %395, %96
  %397 = load i32* @verbose, align 4
  %398 = icmp ne i32 %397, 0
  br i1 %398, label %399, label %410

; <label>:399                                     ; preds = %396
  %400 = load %struct._IO_FILE** @stderr, align 8
  %401 = load i32* @raw_color, align 4
  %402 = icmp ne i32 %401, 0
  %403 = select i1 %402, i8* getelementptr inbounds ([24 x i8]* @.str599, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8]* @.str600, i32 0, i32 0)
  %404 = load i32* @output_color, align 4
  %405 = sub nsw i32 %404, 1
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [5 x i8*]* @convert_to_rgb.name, i32 0, i64 %406
  %408 = load i8** %407, align 8
  %409 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %400, i8* %403, i8* %408)
  br label %410

; <label>:410                                     ; preds = %399, %396
  call void @llvm.memset.p0i8.i64(i8* bitcast ([4 x [8192 x i32]]* @histogram to i8*), i8 0, i64 131072, i32 16, i1 false)
  %411 = load [4 x i16]** @image, align 8
  %412 = getelementptr inbounds [4 x i16]* %411, i64 0
  %413 = getelementptr inbounds [4 x i16]* %412, i32 0, i32 0
  store i16* %413, i16** %img, align 8
  store i32 0, i32* %row, align 4
  br label %414

; <label>:414                                     ; preds = %588, %410
  %415 = load i32* %row, align 4
  %416 = load i16* @height, align 2
  %417 = zext i16 %416 to i32
  %418 = icmp slt i32 %415, %417
  br i1 %418, label %419, label %591

; <label>:419                                     ; preds = %414
  store i32 0, i32* %col, align 4
  br label %420

; <label>:420                                     ; preds = %582, %419
  %421 = load i32* %col, align 4
  %422 = load i16* @width, align 2
  %423 = zext i16 %422 to i32
  %424 = icmp slt i32 %421, %423
  br i1 %424, label %425, label %587

; <label>:425                                     ; preds = %420
  %426 = load i32* @raw_color, align 4
  %427 = icmp ne i32 %426, 0
  br i1 %427, label %537, label %428

; <label>:428                                     ; preds = %425
  %429 = getelementptr inbounds [3 x float]* %out, i32 0, i64 2
  store float 0.000000e+00, float* %429, align 4
  %430 = getelementptr inbounds [3 x float]* %out, i32 0, i64 1
  store float 0.000000e+00, float* %430, align 4
  %431 = getelementptr inbounds [3 x float]* %out, i32 0, i64 0
  store float 0.000000e+00, float* %431, align 4
  store i32 0, i32* %c, align 4
  br label %432

; <label>:432                                     ; preds = %485, %428
  %433 = load i32* %c, align 4
  %434 = load i32* @colors, align 4
  %435 = icmp slt i32 %433, %434
  br i1 %435, label %436, label %488

; <label>:436                                     ; preds = %432
  %437 = load i32* %c, align 4
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 0
  %440 = getelementptr inbounds [4 x float]* %439, i32 0, i64 %438
  %441 = load float* %440, align 4
  %442 = load i32* %c, align 4
  %443 = sext i32 %442 to i64
  %444 = load i16** %img, align 8
  %445 = getelementptr inbounds i16* %444, i64 %443
  %446 = load i16* %445, align 2
  %447 = zext i16 %446 to i32
  %448 = sitofp i32 %447 to float
  %449 = fmul float %441, %448
  %450 = getelementptr inbounds [3 x float]* %out, i32 0, i64 0
  %451 = load float* %450, align 4
  %452 = fadd float %451, %449
  store float %452, float* %450, align 4
  %453 = load i32* %c, align 4
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 1
  %456 = getelementptr inbounds [4 x float]* %455, i32 0, i64 %454
  %457 = load float* %456, align 4
  %458 = load i32* %c, align 4
  %459 = sext i32 %458 to i64
  %460 = load i16** %img, align 8
  %461 = getelementptr inbounds i16* %460, i64 %459
  %462 = load i16* %461, align 2
  %463 = zext i16 %462 to i32
  %464 = sitofp i32 %463 to float
  %465 = fmul float %457, %464
  %466 = getelementptr inbounds [3 x float]* %out, i32 0, i64 1
  %467 = load float* %466, align 4
  %468 = fadd float %467, %465
  store float %468, float* %466, align 4
  %469 = load i32* %c, align 4
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds [3 x [4 x float]]* %out_cam, i32 0, i64 2
  %472 = getelementptr inbounds [4 x float]* %471, i32 0, i64 %470
  %473 = load float* %472, align 4
  %474 = load i32* %c, align 4
  %475 = sext i32 %474 to i64
  %476 = load i16** %img, align 8
  %477 = getelementptr inbounds i16* %476, i64 %475
  %478 = load i16* %477, align 2
  %479 = zext i16 %478 to i32
  %480 = sitofp i32 %479 to float
  %481 = fmul float %473, %480
  %482 = getelementptr inbounds [3 x float]* %out, i32 0, i64 2
  %483 = load float* %482, align 4
  %484 = fadd float %483, %481
  store float %484, float* %482, align 4
  br label %485

; <label>:485                                     ; preds = %436
  %486 = load i32* %c, align 4
  %487 = add nsw i32 %486, 1
  store i32 %487, i32* %c, align 4
  br label %432

; <label>:488                                     ; preds = %432
  store i32 0, i32* %c, align 4
  br label %489

; <label>:489                                     ; preds = %533, %488
  %490 = load i32* %c, align 4
  %491 = icmp slt i32 %490, 3
  br i1 %491, label %492, label %536

; <label>:492                                     ; preds = %489
  %493 = load i32* %c, align 4
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %494
  %496 = load float* %495, align 4
  %497 = fptosi float %496 to i32
  %498 = icmp slt i32 %497, 65535
  br i1 %498, label %499, label %505

; <label>:499                                     ; preds = %492
  %500 = load i32* %c, align 4
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %501
  %503 = load float* %502, align 4
  %504 = fptosi float %503 to i32
  br label %506

; <label>:505                                     ; preds = %492
  br label %506

; <label>:506                                     ; preds = %505, %499
  %507 = phi i32 [ %504, %499 ], [ 65535, %505 ]
  %508 = icmp sgt i32 0, %507
  br i1 %508, label %509, label %510

; <label>:509                                     ; preds = %506
  br label %526

; <label>:510                                     ; preds = %506
  %511 = load i32* %c, align 4
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %512
  %514 = load float* %513, align 4
  %515 = fptosi float %514 to i32
  %516 = icmp slt i32 %515, 65535
  br i1 %516, label %517, label %523

; <label>:517                                     ; preds = %510
  %518 = load i32* %c, align 4
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds [3 x float]* %out, i32 0, i64 %519
  %521 = load float* %520, align 4
  %522 = fptosi float %521 to i32
  br label %524

; <label>:523                                     ; preds = %510
  br label %524

; <label>:524                                     ; preds = %523, %517
  %525 = phi i32 [ %522, %517 ], [ 65535, %523 ]
  br label %526

; <label>:526                                     ; preds = %524, %509
  %527 = phi i32 [ 0, %509 ], [ %525, %524 ]
  %528 = trunc i32 %527 to i16
  %529 = load i32* %c, align 4
  %530 = sext i32 %529 to i64
  %531 = load i16** %img, align 8
  %532 = getelementptr inbounds i16* %531, i64 %530
  store i16 %528, i16* %532, align 2
  br label %533

; <label>:533                                     ; preds = %526
  %534 = load i32* %c, align 4
  %535 = add nsw i32 %534, 1
  store i32 %535, i32* %c, align 4
  br label %489

; <label>:536                                     ; preds = %489
  br label %558

; <label>:537                                     ; preds = %425
  %538 = load i32* @document_mode, align 4
  %539 = icmp ne i32 %538, 0
  br i1 %539, label %540, label %557

; <label>:540                                     ; preds = %537
  %541 = load i32* @filters, align 4
  %542 = load i32* %row, align 4
  %543 = shl i32 %542, 1
  %544 = and i32 %543, 14
  %545 = load i32* %col, align 4
  %546 = and i32 %545, 1
  %547 = add nsw i32 %544, %546
  %548 = shl i32 %547, 1
  %549 = lshr i32 %541, %548
  %550 = and i32 %549, 3
  %551 = zext i32 %550 to i64
  %552 = load i16** %img, align 8
  %553 = getelementptr inbounds i16* %552, i64 %551
  %554 = load i16* %553, align 2
  %555 = load i16** %img, align 8
  %556 = getelementptr inbounds i16* %555, i64 0
  store i16 %554, i16* %556, align 2
  br label %557

; <label>:557                                     ; preds = %540, %537
  br label %558

; <label>:558                                     ; preds = %557, %536
  store i32 0, i32* %c, align 4
  br label %559

; <label>:559                                     ; preds = %578, %558
  %560 = load i32* %c, align 4
  %561 = load i32* @colors, align 4
  %562 = icmp slt i32 %560, %561
  br i1 %562, label %563, label %581

; <label>:563                                     ; preds = %559
  %564 = load i32* %c, align 4
  %565 = sext i32 %564 to i64
  %566 = load i16** %img, align 8
  %567 = getelementptr inbounds i16* %566, i64 %565
  %568 = load i16* %567, align 2
  %569 = zext i16 %568 to i32
  %570 = ashr i32 %569, 3
  %571 = sext i32 %570 to i64
  %572 = load i32* %c, align 4
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds [4 x [8192 x i32]]* @histogram, i32 0, i64 %573
  %575 = getelementptr inbounds [8192 x i32]* %574, i32 0, i64 %571
  %576 = load i32* %575, align 4
  %577 = add nsw i32 %576, 1
  store i32 %577, i32* %575, align 4
  br label %578

; <label>:578                                     ; preds = %563
  %579 = load i32* %c, align 4
  %580 = add nsw i32 %579, 1
  store i32 %580, i32* %c, align 4
  br label %559

; <label>:581                                     ; preds = %559
  br label %582

; <label>:582                                     ; preds = %581
  %583 = load i32* %col, align 4
  %584 = add nsw i32 %583, 1
  store i32 %584, i32* %col, align 4
  %585 = load i16** %img, align 8
  %586 = getelementptr inbounds i16* %585, i64 4
  store i16* %586, i16** %img, align 8
  br label %420

; <label>:587                                     ; preds = %420
  br label %588

; <label>:588                                     ; preds = %587
  %589 = load i32* %row, align 4
  %590 = add nsw i32 %589, 1
  store i32 %590, i32* %row, align 4
  br label %414

; <label>:591                                     ; preds = %414
  %592 = load i32* @colors, align 4
  %593 = icmp eq i32 %592, 4
  br i1 %593, label %594, label %598

; <label>:594                                     ; preds = %591
  %595 = load i32* @output_color, align 4
  %596 = icmp ne i32 %595, 0
  br i1 %596, label %597, label %598

; <label>:597                                     ; preds = %594
  store i32 3, i32* @colors, align 4
  br label %598

; <label>:598                                     ; preds = %597, %594, %591
  %599 = load i32* @document_mode, align 4
  %600 = icmp ne i32 %599, 0
  br i1 %600, label %601, label %605

; <label>:601                                     ; preds = %598
  %602 = load i32* @filters, align 4
  %603 = icmp ne i32 %602, 0
  br i1 %603, label %604, label %605

; <label>:604                                     ; preds = %601
  store i32 1, i32* @colors, align 4
  br label %605

; <label>:605                                     ; preds = %604, %601, %598
  ret void
}

; Function Attrs: nounwind uwtable
define void @fuji_rotate() #0 {
  %i = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %step = alloca double, align 8
  %r = alloca float, align 4
  %c = alloca float, align 4
  %fr = alloca float, align 4
  %fc = alloca float, align 4
  %ur = alloca i32, align 4
  %uc = alloca i32, align 4
  %wide = alloca i16, align 2
  %high = alloca i16, align 2
  %img = alloca [4 x i16]*, align 8
  %pix = alloca [4 x i16]*, align 8
  %1 = load i16* @fuji_width, align 2
  %2 = icmp ne i16 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  br label %201

; <label>:4                                       ; preds = %0
  %5 = load i32* @verbose, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %4
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([30 x i8]* @.str601, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %7, %4
  %11 = load i16* @fuji_width, align 2
  %12 = zext i16 %11 to i32
  %13 = sub nsw i32 %12, 1
  %14 = load i16* @shrink, align 2
  %15 = zext i16 %14 to i32
  %16 = add nsw i32 %13, %15
  %17 = load i16* @shrink, align 2
  %18 = zext i16 %17 to i32
  %19 = ashr i32 %16, %18
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* @fuji_width, align 2
  %21 = call double @sqrt(double 5.000000e-01) #4
  store double %21, double* %step, align 8
  %22 = load i16* @fuji_width, align 2
  %23 = zext i16 %22 to i32
  %24 = sitofp i32 %23 to double
  %25 = load double* %step, align 8
  %26 = fdiv double %24, %25
  %27 = fptoui double %26 to i16
  store i16 %27, i16* %wide, align 2
  %28 = load i16* @height, align 2
  %29 = zext i16 %28 to i32
  %30 = load i16* @fuji_width, align 2
  %31 = zext i16 %30 to i32
  %32 = sub nsw i32 %29, %31
  %33 = sitofp i32 %32 to double
  %34 = load double* %step, align 8
  %35 = fdiv double %33, %34
  %36 = fptoui double %35 to i16
  store i16 %36, i16* %high, align 2
  %37 = load i16* %wide, align 2
  %38 = zext i16 %37 to i32
  %39 = load i16* %high, align 2
  %40 = zext i16 %39 to i32
  %41 = mul nsw i32 %38, %40
  %42 = sext i32 %41 to i64
  %43 = call noalias i8* @calloc(i64 %42, i64 8) #4
  %44 = bitcast i8* %43 to [4 x i16]*
  store [4 x i16]* %44, [4 x i16]** %img, align 8
  %45 = load [4 x i16]** %img, align 8
  %46 = bitcast [4 x i16]* %45 to i8*
  call void @merror(i8* %46, i8* getelementptr inbounds ([14 x i8]* @.str602, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  br label %47

; <label>:47                                      ; preds = %192, %10
  %48 = load i32* %row, align 4
  %49 = load i16* %high, align 2
  %50 = zext i16 %49 to i32
  %51 = icmp slt i32 %48, %50
  br i1 %51, label %52, label %195

; <label>:52                                      ; preds = %47
  store i32 0, i32* %col, align 4
  br label %53

; <label>:53                                      ; preds = %188, %52
  %54 = load i32* %col, align 4
  %55 = load i16* %wide, align 2
  %56 = zext i16 %55 to i32
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %58, label %191

; <label>:58                                      ; preds = %53
  %59 = load i16* @fuji_width, align 2
  %60 = zext i16 %59 to i32
  %61 = sitofp i32 %60 to double
  %62 = load i32* %row, align 4
  %63 = load i32* %col, align 4
  %64 = sub nsw i32 %62, %63
  %65 = sitofp i32 %64 to double
  %66 = load double* %step, align 8
  %67 = fmul double %65, %66
  %68 = fadd double %61, %67
  %69 = fptrunc double %68 to float
  store float %69, float* %r, align 4
  %70 = fptoui float %69 to i32
  store i32 %70, i32* %ur, align 4
  %71 = load i32* %row, align 4
  %72 = load i32* %col, align 4
  %73 = add nsw i32 %71, %72
  %74 = sitofp i32 %73 to double
  %75 = load double* %step, align 8
  %76 = fmul double %74, %75
  %77 = fptrunc double %76 to float
  store float %77, float* %c, align 4
  %78 = fptoui float %77 to i32
  store i32 %78, i32* %uc, align 4
  %79 = load i32* %ur, align 4
  %80 = load i16* @height, align 2
  %81 = zext i16 %80 to i32
  %82 = sub nsw i32 %81, 2
  %83 = icmp ugt i32 %79, %82
  br i1 %83, label %90, label %84

; <label>:84                                      ; preds = %58
  %85 = load i32* %uc, align 4
  %86 = load i16* @width, align 2
  %87 = zext i16 %86 to i32
  %88 = sub nsw i32 %87, 2
  %89 = icmp ugt i32 %85, %88
  br i1 %89, label %90, label %91

; <label>:90                                      ; preds = %84, %58
  br label %188

; <label>:91                                      ; preds = %84
  %92 = load float* %r, align 4
  %93 = load i32* %ur, align 4
  %94 = uitofp i32 %93 to float
  %95 = fsub float %92, %94
  store float %95, float* %fr, align 4
  %96 = load float* %c, align 4
  %97 = load i32* %uc, align 4
  %98 = uitofp i32 %97 to float
  %99 = fsub float %96, %98
  store float %99, float* %fc, align 4
  %100 = load [4 x i16]** @image, align 8
  %101 = load i32* %ur, align 4
  %102 = load i16* @width, align 2
  %103 = zext i16 %102 to i32
  %104 = mul i32 %101, %103
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds [4 x i16]* %100, i64 %105
  %107 = load i32* %uc, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [4 x i16]* %106, i64 %108
  store [4 x i16]* %109, [4 x i16]** %pix, align 8
  store i32 0, i32* %i, align 4
  br label %110

; <label>:110                                     ; preds = %184, %91
  %111 = load i32* %i, align 4
  %112 = load i32* @colors, align 4
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %114, label %187

; <label>:114                                     ; preds = %110
  %115 = load i32* %i, align 4
  %116 = sext i32 %115 to i64
  %117 = load [4 x i16]** %pix, align 8
  %118 = getelementptr inbounds [4 x i16]* %117, i64 0
  %119 = getelementptr inbounds [4 x i16]* %118, i32 0, i64 %116
  %120 = load i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = sitofp i32 %121 to float
  %123 = load float* %fc, align 4
  %124 = fsub float 1.000000e+00, %123
  %125 = fmul float %122, %124
  %126 = load i32* %i, align 4
  %127 = sext i32 %126 to i64
  %128 = load [4 x i16]** %pix, align 8
  %129 = getelementptr inbounds [4 x i16]* %128, i64 1
  %130 = getelementptr inbounds [4 x i16]* %129, i32 0, i64 %127
  %131 = load i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = sitofp i32 %132 to float
  %134 = load float* %fc, align 4
  %135 = fmul float %133, %134
  %136 = fadd float %125, %135
  %137 = load float* %fr, align 4
  %138 = fsub float 1.000000e+00, %137
  %139 = fmul float %136, %138
  %140 = load i32* %i, align 4
  %141 = sext i32 %140 to i64
  %142 = load i16* @width, align 2
  %143 = zext i16 %142 to i64
  %144 = load [4 x i16]** %pix, align 8
  %145 = getelementptr inbounds [4 x i16]* %144, i64 %143
  %146 = getelementptr inbounds [4 x i16]* %145, i32 0, i64 %141
  %147 = load i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = sitofp i32 %148 to float
  %150 = load float* %fc, align 4
  %151 = fsub float 1.000000e+00, %150
  %152 = fmul float %149, %151
  %153 = load i32* %i, align 4
  %154 = sext i32 %153 to i64
  %155 = load i16* @width, align 2
  %156 = zext i16 %155 to i32
  %157 = add nsw i32 %156, 1
  %158 = sext i32 %157 to i64
  %159 = load [4 x i16]** %pix, align 8
  %160 = getelementptr inbounds [4 x i16]* %159, i64 %158
  %161 = getelementptr inbounds [4 x i16]* %160, i32 0, i64 %154
  %162 = load i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = sitofp i32 %163 to float
  %165 = load float* %fc, align 4
  %166 = fmul float %164, %165
  %167 = fadd float %152, %166
  %168 = load float* %fr, align 4
  %169 = fmul float %167, %168
  %170 = fadd float %139, %169
  %171 = fptoui float %170 to i16
  %172 = load i32* %i, align 4
  %173 = sext i32 %172 to i64
  %174 = load i32* %row, align 4
  %175 = load i16* %wide, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nsw i32 %174, %176
  %178 = load i32* %col, align 4
  %179 = add nsw i32 %177, %178
  %180 = sext i32 %179 to i64
  %181 = load [4 x i16]** %img, align 8
  %182 = getelementptr inbounds [4 x i16]* %181, i64 %180
  %183 = getelementptr inbounds [4 x i16]* %182, i32 0, i64 %173
  store i16 %171, i16* %183, align 2
  br label %184

; <label>:184                                     ; preds = %114
  %185 = load i32* %i, align 4
  %186 = add nsw i32 %185, 1
  store i32 %186, i32* %i, align 4
  br label %110

; <label>:187                                     ; preds = %110
  br label %188

; <label>:188                                     ; preds = %187, %90
  %189 = load i32* %col, align 4
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %col, align 4
  br label %53

; <label>:191                                     ; preds = %53
  br label %192

; <label>:192                                     ; preds = %191
  %193 = load i32* %row, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %row, align 4
  br label %47

; <label>:195                                     ; preds = %47
  %196 = load [4 x i16]** @image, align 8
  %197 = bitcast [4 x i16]* %196 to i8*
  call void @free(i8* %197) #4
  %198 = load i16* %wide, align 2
  store i16 %198, i16* @width, align 2
  %199 = load i16* %high, align 2
  store i16 %199, i16* @height, align 2
  %200 = load [4 x i16]** %img, align 8
  store [4 x i16]* %200, [4 x i16]** @image, align 8
  store i16 0, i16* @fuji_width, align 2
  br label %201

; <label>:201                                     ; preds = %195, %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @stretch() #0 {
  %newdim = alloca i16, align 2
  %img = alloca [4 x i16]*, align 8
  %pix0 = alloca i16*, align 8
  %pix1 = alloca i16*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %c = alloca i32, align 4
  %rc = alloca double, align 8
  %frac = alloca double, align 8
  %1 = load double* @pixel_aspect, align 8
  %2 = fcmp oeq double %1, 1.000000e+00
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %249

; <label>:4                                       ; preds = %0
  %5 = load i32* @verbose, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %4
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([25 x i8]* @.str603, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %7, %4
  %11 = load double* @pixel_aspect, align 8
  %12 = fcmp olt double %11, 1.000000e+00
  br i1 %12, label %13, label %128

; <label>:13                                      ; preds = %10
  %14 = load i16* @height, align 2
  %15 = zext i16 %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = load double* @pixel_aspect, align 8
  %18 = fdiv double %16, %17
  %19 = fadd double %18, 5.000000e-01
  %20 = fptoui double %19 to i16
  store i16 %20, i16* %newdim, align 2
  %21 = load i16* @width, align 2
  %22 = zext i16 %21 to i32
  %23 = load i16* %newdim, align 2
  %24 = zext i16 %23 to i32
  %25 = mul nsw i32 %22, %24
  %26 = sext i32 %25 to i64
  %27 = call noalias i8* @calloc(i64 %26, i64 8) #4
  %28 = bitcast i8* %27 to [4 x i16]*
  store [4 x i16]* %28, [4 x i16]** %img, align 8
  %29 = load [4 x i16]** %img, align 8
  %30 = bitcast [4 x i16]* %29 to i8*
  call void @merror(i8* %30, i8* getelementptr inbounds ([10 x i8]* @.str604, i32 0, i32 0))
  store i32 0, i32* %row, align 4
  store double 0.000000e+00, double* %rc, align 8
  br label %31

; <label>:31                                      ; preds = %120, %13
  %32 = load i32* %row, align 4
  %33 = load i16* %newdim, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %126

; <label>:36                                      ; preds = %31
  %37 = load double* %rc, align 8
  %38 = load double* %rc, align 8
  %39 = fptosi double %38 to i32
  store i32 %39, i32* %c, align 4
  %40 = sitofp i32 %39 to double
  %41 = fsub double %37, %40
  store double %41, double* %frac, align 8
  %42 = load i32* %c, align 4
  %43 = load i16* @width, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nsw i32 %42, %44
  %46 = sext i32 %45 to i64
  %47 = load [4 x i16]** @image, align 8
  %48 = getelementptr inbounds [4 x i16]* %47, i64 %46
  %49 = getelementptr inbounds [4 x i16]* %48, i32 0, i32 0
  store i16* %49, i16** %pix1, align 8
  store i16* %49, i16** %pix0, align 8
  %50 = load i32* %c, align 4
  %51 = add nsw i32 %50, 1
  %52 = load i16* @height, align 2
  %53 = zext i16 %52 to i32
  %54 = icmp slt i32 %51, %53
  br i1 %54, label %55, label %62

; <label>:55                                      ; preds = %36
  %56 = load i16* @width, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nsw i32 %57, 4
  %59 = load i16** %pix1, align 8
  %60 = sext i32 %58 to i64
  %61 = getelementptr inbounds i16* %59, i64 %60
  store i16* %61, i16** %pix1, align 8
  br label %62

; <label>:62                                      ; preds = %55, %36
  store i32 0, i32* %col, align 4
  br label %63

; <label>:63                                      ; preds = %112, %62
  %64 = load i32* %col, align 4
  %65 = load i16* @width, align 2
  %66 = zext i16 %65 to i32
  %67 = icmp slt i32 %64, %66
  br i1 %67, label %68, label %119

; <label>:68                                      ; preds = %63
  store i32 0, i32* %c, align 4
  br label %69

; <label>:69                                      ; preds = %108, %68
  %70 = load i32* %c, align 4
  %71 = load i32* @colors, align 4
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %73, label %111

; <label>:73                                      ; preds = %69
  %74 = load i32* %c, align 4
  %75 = sext i32 %74 to i64
  %76 = load i16** %pix0, align 8
  %77 = getelementptr inbounds i16* %76, i64 %75
  %78 = load i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = sitofp i32 %79 to double
  %81 = load double* %frac, align 8
  %82 = fsub double 1.000000e+00, %81
  %83 = fmul double %80, %82
  %84 = load i32* %c, align 4
  %85 = sext i32 %84 to i64
  %86 = load i16** %pix1, align 8
  %87 = getelementptr inbounds i16* %86, i64 %85
  %88 = load i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = sitofp i32 %89 to double
  %91 = load double* %frac, align 8
  %92 = fmul double %90, %91
  %93 = fadd double %83, %92
  %94 = fadd double %93, 5.000000e-01
  %95 = fptoui double %94 to i16
  %96 = load i32* %c, align 4
  %97 = sext i32 %96 to i64
  %98 = load i32* %row, align 4
  %99 = load i16* @width, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nsw i32 %98, %100
  %102 = load i32* %col, align 4
  %103 = add nsw i32 %101, %102
  %104 = sext i32 %103 to i64
  %105 = load [4 x i16]** %img, align 8
  %106 = getelementptr inbounds [4 x i16]* %105, i64 %104
  %107 = getelementptr inbounds [4 x i16]* %106, i32 0, i64 %97
  store i16 %95, i16* %107, align 2
  br label %108

; <label>:108                                     ; preds = %73
  %109 = load i32* %c, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %c, align 4
  br label %69

; <label>:111                                     ; preds = %69
  br label %112

; <label>:112                                     ; preds = %111
  %113 = load i32* %col, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %col, align 4
  %115 = load i16** %pix0, align 8
  %116 = getelementptr inbounds i16* %115, i64 4
  store i16* %116, i16** %pix0, align 8
  %117 = load i16** %pix1, align 8
  %118 = getelementptr inbounds i16* %117, i64 4
  store i16* %118, i16** %pix1, align 8
  br label %63

; <label>:119                                     ; preds = %63
  br label %120

; <label>:120                                     ; preds = %119
  %121 = load i32* %row, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %row, align 4
  %123 = load double* @pixel_aspect, align 8
  %124 = load double* %rc, align 8
  %125 = fadd double %124, %123
  store double %125, double* %rc, align 8
  br label %31

; <label>:126                                     ; preds = %31
  %127 = load i16* %newdim, align 2
  store i16 %127, i16* @height, align 2
  br label %245

; <label>:128                                     ; preds = %10
  %129 = load i16* @width, align 2
  %130 = zext i16 %129 to i32
  %131 = sitofp i32 %130 to double
  %132 = load double* @pixel_aspect, align 8
  %133 = fmul double %131, %132
  %134 = fadd double %133, 5.000000e-01
  %135 = fptoui double %134 to i16
  store i16 %135, i16* %newdim, align 2
  %136 = load i16* @height, align 2
  %137 = zext i16 %136 to i32
  %138 = load i16* %newdim, align 2
  %139 = zext i16 %138 to i32
  %140 = mul nsw i32 %137, %139
  %141 = sext i32 %140 to i64
  %142 = call noalias i8* @calloc(i64 %141, i64 8) #4
  %143 = bitcast i8* %142 to [4 x i16]*
  store [4 x i16]* %143, [4 x i16]** %img, align 8
  %144 = load [4 x i16]** %img, align 8
  %145 = bitcast [4 x i16]* %144 to i8*
  call void @merror(i8* %145, i8* getelementptr inbounds ([10 x i8]* @.str604, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  store double 0.000000e+00, double* %rc, align 8
  br label %146

; <label>:146                                     ; preds = %236, %128
  %147 = load i32* %col, align 4
  %148 = load i16* %newdim, align 2
  %149 = zext i16 %148 to i32
  %150 = icmp slt i32 %147, %149
  br i1 %150, label %151, label %243

; <label>:151                                     ; preds = %146
  %152 = load double* %rc, align 8
  %153 = load double* %rc, align 8
  %154 = fptosi double %153 to i32
  store i32 %154, i32* %c, align 4
  %155 = sitofp i32 %154 to double
  %156 = fsub double %152, %155
  store double %156, double* %frac, align 8
  %157 = load i32* %c, align 4
  %158 = sext i32 %157 to i64
  %159 = load [4 x i16]** @image, align 8
  %160 = getelementptr inbounds [4 x i16]* %159, i64 %158
  %161 = getelementptr inbounds [4 x i16]* %160, i32 0, i32 0
  store i16* %161, i16** %pix1, align 8
  store i16* %161, i16** %pix0, align 8
  %162 = load i32* %c, align 4
  %163 = add nsw i32 %162, 1
  %164 = load i16* @width, align 2
  %165 = zext i16 %164 to i32
  %166 = icmp slt i32 %163, %165
  br i1 %166, label %167, label %170

; <label>:167                                     ; preds = %151
  %168 = load i16** %pix1, align 8
  %169 = getelementptr inbounds i16* %168, i64 4
  store i16* %169, i16** %pix1, align 8
  br label %170

; <label>:170                                     ; preds = %167, %151
  store i32 0, i32* %row, align 4
  br label %171

; <label>:171                                     ; preds = %220, %170
  %172 = load i32* %row, align 4
  %173 = load i16* @height, align 2
  %174 = zext i16 %173 to i32
  %175 = icmp slt i32 %172, %174
  br i1 %175, label %176, label %235

; <label>:176                                     ; preds = %171
  store i32 0, i32* %c, align 4
  br label %177

; <label>:177                                     ; preds = %216, %176
  %178 = load i32* %c, align 4
  %179 = load i32* @colors, align 4
  %180 = icmp slt i32 %178, %179
  br i1 %180, label %181, label %219

; <label>:181                                     ; preds = %177
  %182 = load i32* %c, align 4
  %183 = sext i32 %182 to i64
  %184 = load i16** %pix0, align 8
  %185 = getelementptr inbounds i16* %184, i64 %183
  %186 = load i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = sitofp i32 %187 to double
  %189 = load double* %frac, align 8
  %190 = fsub double 1.000000e+00, %189
  %191 = fmul double %188, %190
  %192 = load i32* %c, align 4
  %193 = sext i32 %192 to i64
  %194 = load i16** %pix1, align 8
  %195 = getelementptr inbounds i16* %194, i64 %193
  %196 = load i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = sitofp i32 %197 to double
  %199 = load double* %frac, align 8
  %200 = fmul double %198, %199
  %201 = fadd double %191, %200
  %202 = fadd double %201, 5.000000e-01
  %203 = fptoui double %202 to i16
  %204 = load i32* %c, align 4
  %205 = sext i32 %204 to i64
  %206 = load i32* %row, align 4
  %207 = load i16* %newdim, align 2
  %208 = zext i16 %207 to i32
  %209 = mul nsw i32 %206, %208
  %210 = load i32* %col, align 4
  %211 = add nsw i32 %209, %210
  %212 = sext i32 %211 to i64
  %213 = load [4 x i16]** %img, align 8
  %214 = getelementptr inbounds [4 x i16]* %213, i64 %212
  %215 = getelementptr inbounds [4 x i16]* %214, i32 0, i64 %205
  store i16 %203, i16* %215, align 2
  br label %216

; <label>:216                                     ; preds = %181
  %217 = load i32* %c, align 4
  %218 = add nsw i32 %217, 1
  store i32 %218, i32* %c, align 4
  br label %177

; <label>:219                                     ; preds = %177
  br label %220

; <label>:220                                     ; preds = %219
  %221 = load i32* %row, align 4
  %222 = add nsw i32 %221, 1
  store i32 %222, i32* %row, align 4
  %223 = load i16* @width, align 2
  %224 = zext i16 %223 to i32
  %225 = mul nsw i32 %224, 4
  %226 = load i16** %pix0, align 8
  %227 = sext i32 %225 to i64
  %228 = getelementptr inbounds i16* %226, i64 %227
  store i16* %228, i16** %pix0, align 8
  %229 = load i16* @width, align 2
  %230 = zext i16 %229 to i32
  %231 = mul nsw i32 %230, 4
  %232 = load i16** %pix1, align 8
  %233 = sext i32 %231 to i64
  %234 = getelementptr inbounds i16* %232, i64 %233
  store i16* %234, i16** %pix1, align 8
  br label %171

; <label>:235                                     ; preds = %171
  br label %236

; <label>:236                                     ; preds = %235
  %237 = load i32* %col, align 4
  %238 = add nsw i32 %237, 1
  store i32 %238, i32* %col, align 4
  %239 = load double* @pixel_aspect, align 8
  %240 = fdiv double 1.000000e+00, %239
  %241 = load double* %rc, align 8
  %242 = fadd double %241, %240
  store double %242, double* %rc, align 8
  br label %146

; <label>:243                                     ; preds = %146
  %244 = load i16* %newdim, align 2
  store i16 %244, i16* @width, align 2
  br label %245

; <label>:245                                     ; preds = %243, %126
  %246 = load [4 x i16]** @image, align 8
  %247 = bitcast [4 x i16]* %246 to i8*
  call void @free(i8* %247) #4
  %248 = load [4 x i16]** %img, align 8
  store [4 x i16]* %248, [4 x i16]** @image, align 8
  br label %249

; <label>:249                                     ; preds = %245, %3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @flip_index(i32 %row, i32 %col) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %row, i32* %1, align 4
  store i32 %col, i32* %2, align 4
  %3 = load i32* @flip, align 4
  %4 = and i32 %3, 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %0
  %7 = load i32* %2, align 4
  %8 = load i32* %1, align 4
  %9 = xor i32 %8, %7
  store i32 %9, i32* %1, align 4
  %10 = load i32* %1, align 4
  %11 = load i32* %2, align 4
  %12 = xor i32 %11, %10
  store i32 %12, i32* %2, align 4
  %13 = load i32* %1, align 4
  %14 = xor i32 %13, %12
  store i32 %14, i32* %1, align 4
  br label %15

; <label>:15                                      ; preds = %6, %0
  %16 = load i32* @flip, align 4
  %17 = and i32 %16, 2
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %25

; <label>:19                                      ; preds = %15
  %20 = load i16* @iheight, align 2
  %21 = zext i16 %20 to i32
  %22 = sub nsw i32 %21, 1
  %23 = load i32* %1, align 4
  %24 = sub nsw i32 %22, %23
  store i32 %24, i32* %1, align 4
  br label %25

; <label>:25                                      ; preds = %19, %15
  %26 = load i32* @flip, align 4
  %27 = and i32 %26, 1
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %35

; <label>:29                                      ; preds = %25
  %30 = load i16* @iwidth, align 2
  %31 = zext i16 %30 to i32
  %32 = sub nsw i32 %31, 1
  %33 = load i32* %2, align 4
  %34 = sub nsw i32 %32, %33
  store i32 %34, i32* %2, align 4
  br label %35

; <label>:35                                      ; preds = %29, %25
  %36 = load i32* %1, align 4
  %37 = load i16* @iwidth, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nsw i32 %36, %38
  %40 = load i32* %2, align 4
  %41 = add nsw i32 %39, %40
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define void @gamma_lut(i8* %lut) #0 {
  %1 = alloca i8*, align 8
  %perc = alloca i32, align 4
  %c = alloca i32, align 4
  %val = alloca i32, align 4
  %total = alloca i32, align 4
  %i = alloca i32, align 4
  %white = alloca float, align 4
  %r = alloca float, align 4
  store i8* %lut, i8** %1, align 8
  store float 0.000000e+00, float* %white, align 4
  %2 = load i16* @width, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @height, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nsw i32 %3, %5
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 1.000000e-02
  %9 = fptosi double %8 to i32
  store i32 %9, i32* %perc, align 4
  %10 = load i16* @fuji_width, align 2
  %11 = icmp ne i16 %10, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %0
  %13 = load i32* %perc, align 4
  %14 = sdiv i32 %13, 2
  store i32 %14, i32* %perc, align 4
  br label %15

; <label>:15                                      ; preds = %12, %0
  %16 = load i32* @highlight, align 4
  %17 = and i32 %16, -3
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %22, label %19

; <label>:19                                      ; preds = %15
  %20 = load i32* @no_auto_bright, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %19, %15
  store i32 -1, i32* %perc, align 4
  br label %23

; <label>:23                                      ; preds = %22, %19
  store i32 0, i32* %c, align 4
  br label %24

; <label>:24                                      ; preds = %56, %23
  %25 = load i32* %c, align 4
  %26 = load i32* @colors, align 4
  %27 = icmp slt i32 %25, %26
  br i1 %27, label %28, label %59

; <label>:28                                      ; preds = %24
  store i32 8192, i32* %val, align 4
  store i32 0, i32* %total, align 4
  br label %29

; <label>:29                                      ; preds = %46, %28
  %30 = load i32* %val, align 4
  %31 = add nsw i32 %30, -1
  store i32 %31, i32* %val, align 4
  %32 = icmp sgt i32 %31, 32
  br i1 %32, label %33, label %47

; <label>:33                                      ; preds = %29
  %34 = load i32* %val, align 4
  %35 = sext i32 %34 to i64
  %36 = load i32* %c, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [4 x [8192 x i32]]* @histogram, i32 0, i64 %37
  %39 = getelementptr inbounds [8192 x i32]* %38, i32 0, i64 %35
  %40 = load i32* %39, align 4
  %41 = load i32* %total, align 4
  %42 = add nsw i32 %41, %40
  store i32 %42, i32* %total, align 4
  %43 = load i32* %perc, align 4
  %44 = icmp sgt i32 %42, %43
  br i1 %44, label %45, label %46

; <label>:45                                      ; preds = %33
  br label %47

; <label>:46                                      ; preds = %33
  br label %29

; <label>:47                                      ; preds = %45, %29
  %48 = load float* %white, align 4
  %49 = load i32* %val, align 4
  %50 = sitofp i32 %49 to float
  %51 = fcmp olt float %48, %50
  br i1 %51, label %52, label %55

; <label>:52                                      ; preds = %47
  %53 = load i32* %val, align 4
  %54 = sitofp i32 %53 to float
  store float %54, float* %white, align 4
  br label %55

; <label>:55                                      ; preds = %52, %47
  br label %56

; <label>:56                                      ; preds = %55
  %57 = load i32* %c, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %c, align 4
  br label %24

; <label>:59                                      ; preds = %24
  %60 = load float* @bright, align 4
  %61 = fdiv float 8.000000e+00, %60
  %62 = load float* %white, align 4
  %63 = fmul float %62, %61
  store float %63, float* %white, align 4
  store i32 0, i32* %i, align 4
  br label %64

; <label>:64                                      ; preds = %113, %59
  %65 = load i32* %i, align 4
  %66 = icmp slt i32 %65, 65536
  br i1 %66, label %67, label %116

; <label>:67                                      ; preds = %64
  %68 = load i32* %i, align 4
  %69 = sitofp i32 %68 to float
  %70 = load float* %white, align 4
  %71 = fdiv float %69, %70
  store float %71, float* %r, align 4
  %72 = load i32* @use_gamma, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %77, label %74

; <label>:74                                      ; preds = %67
  %75 = load float* %r, align 4
  %76 = fpext float %75 to double
  br label %99

; <label>:77                                      ; preds = %67
  %78 = load float* %r, align 4
  %79 = fpext float %78 to double
  %80 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 2), align 8
  %81 = fcmp ole double %79, %80
  br i1 %81, label %82, label %87

; <label>:82                                      ; preds = %77
  %83 = load float* %r, align 4
  %84 = fpext float %83 to double
  %85 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  %86 = fmul double %84, %85
  br label %97

; <label>:87                                      ; preds = %77
  %88 = load float* %r, align 4
  %89 = fpext float %88 to double
  %90 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %91 = call double @pow(double %89, double %90) #4
  %92 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %93 = fadd double 1.000000e+00, %92
  %94 = fmul double %91, %93
  %95 = load double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 3), align 8
  %96 = fsub double %94, %95
  br label %97

; <label>:97                                      ; preds = %87, %82
  %98 = phi double [ %86, %82 ], [ %96, %87 ]
  br label %99

; <label>:99                                      ; preds = %97, %74
  %100 = phi double [ %76, %74 ], [ %98, %97 ]
  %101 = fmul double 2.560000e+02, %100
  %102 = fptosi double %101 to i32
  store i32 %102, i32* %val, align 4
  %103 = load i32* %val, align 4
  %104 = icmp sgt i32 %103, 255
  br i1 %104, label %105, label %106

; <label>:105                                     ; preds = %99
  store i32 255, i32* %val, align 4
  br label %106

; <label>:106                                     ; preds = %105, %99
  %107 = load i32* %val, align 4
  %108 = trunc i32 %107 to i8
  %109 = load i32* %i, align 4
  %110 = sext i32 %109 to i64
  %111 = load i8** %1, align 8
  %112 = getelementptr inbounds i8* %111, i64 %110
  store i8 %108, i8* %112, align 1
  br label %113

; <label>:113                                     ; preds = %106
  %114 = load i32* %i, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %i, align 4
  br label %64

; <label>:116                                     ; preds = %64
  ret void
}

; Function Attrs: nounwind uwtable
define void @tiff_set(i16* %ntag, i16 zeroext %tag, i16 zeroext %type, i32 %count, i32 %val) #0 {
  %1 = alloca i16*, align 8
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %tt = alloca %struct.tiff_tag*, align 8
  %c = alloca i32, align 4
  store i16* %ntag, i16** %1, align 8
  store i16 %tag, i16* %2, align 2
  store i16 %type, i16* %3, align 2
  store i32 %count, i32* %4, align 4
  store i32 %val, i32* %5, align 4
  %6 = load i16** %1, align 8
  %7 = getelementptr inbounds i16* %6, i64 1
  %8 = bitcast i16* %7 to %struct.tiff_tag*
  %9 = load i16** %1, align 8
  %10 = load i16* %9, align 2
  %11 = add i16 %10, 1
  store i16 %11, i16* %9, align 2
  %12 = zext i16 %10 to i32
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.tiff_tag* %8, i64 %13
  store %struct.tiff_tag* %14, %struct.tiff_tag** %tt, align 8
  %15 = load i16* %2, align 2
  %16 = load %struct.tiff_tag** %tt, align 8
  %17 = getelementptr inbounds %struct.tiff_tag* %16, i32 0, i32 0
  store i16 %15, i16* %17, align 2
  %18 = load i16* %3, align 2
  %19 = load %struct.tiff_tag** %tt, align 8
  %20 = getelementptr inbounds %struct.tiff_tag* %19, i32 0, i32 1
  store i16 %18, i16* %20, align 2
  %21 = load i32* %4, align 4
  %22 = load %struct.tiff_tag** %tt, align 8
  %23 = getelementptr inbounds %struct.tiff_tag* %22, i32 0, i32 2
  store i32 %21, i32* %23, align 4
  %24 = load i16* %3, align 2
  %25 = zext i16 %24 to i32
  %26 = icmp slt i32 %25, 3
  br i1 %26, label %27, label %50

; <label>:27                                      ; preds = %0
  %28 = load i32* %4, align 4
  %29 = icmp sle i32 %28, 4
  br i1 %29, label %30, label %50

; <label>:30                                      ; preds = %27
  store i32 0, i32* %c, align 4
  br label %31

; <label>:31                                      ; preds = %46, %30
  %32 = load i32* %c, align 4
  %33 = icmp slt i32 %32, 4
  br i1 %33, label %34, label %49

; <label>:34                                      ; preds = %31
  %35 = load i32* %5, align 4
  %36 = load i32* %c, align 4
  %37 = shl i32 %36, 3
  %38 = ashr i32 %35, %37
  %39 = trunc i32 %38 to i8
  %40 = load i32* %c, align 4
  %41 = sext i32 %40 to i64
  %42 = load %struct.tiff_tag** %tt, align 8
  %43 = getelementptr inbounds %struct.tiff_tag* %42, i32 0, i32 3
  %44 = bitcast %union.anon.5* %43 to [4 x i8]*
  %45 = getelementptr inbounds [4 x i8]* %44, i32 0, i64 %41
  store i8 %39, i8* %45, align 1
  br label %46

; <label>:46                                      ; preds = %34
  %47 = load i32* %c, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %c, align 4
  br label %31

; <label>:49                                      ; preds = %31
  br label %83

; <label>:50                                      ; preds = %27, %0
  %51 = load i16* %3, align 2
  %52 = zext i16 %51 to i32
  %53 = icmp eq i32 %52, 3
  br i1 %53, label %54, label %77

; <label>:54                                      ; preds = %50
  %55 = load i32* %4, align 4
  %56 = icmp sle i32 %55, 2
  br i1 %56, label %57, label %77

; <label>:57                                      ; preds = %54
  store i32 0, i32* %c, align 4
  br label %58

; <label>:58                                      ; preds = %73, %57
  %59 = load i32* %c, align 4
  %60 = icmp slt i32 %59, 2
  br i1 %60, label %61, label %76

; <label>:61                                      ; preds = %58
  %62 = load i32* %5, align 4
  %63 = load i32* %c, align 4
  %64 = shl i32 %63, 4
  %65 = ashr i32 %62, %64
  %66 = trunc i32 %65 to i16
  %67 = load i32* %c, align 4
  %68 = sext i32 %67 to i64
  %69 = load %struct.tiff_tag** %tt, align 8
  %70 = getelementptr inbounds %struct.tiff_tag* %69, i32 0, i32 3
  %71 = bitcast %union.anon.5* %70 to [2 x i16]*
  %72 = getelementptr inbounds [2 x i16]* %71, i32 0, i64 %68
  store i16 %66, i16* %72, align 2
  br label %73

; <label>:73                                      ; preds = %61
  %74 = load i32* %c, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %c, align 4
  br label %58

; <label>:76                                      ; preds = %58
  br label %82

; <label>:77                                      ; preds = %54, %50
  %78 = load i32* %5, align 4
  %79 = load %struct.tiff_tag** %tt, align 8
  %80 = getelementptr inbounds %struct.tiff_tag* %79, i32 0, i32 3
  %81 = bitcast %union.anon.5* %80 to i32*
  store i32 %78, i32* %81, align 4
  br label %82

; <label>:82                                      ; preds = %77, %76
  br label %83

; <label>:83                                      ; preds = %82, %49
  ret void
}

; Function Attrs: nounwind uwtable
define void @tiff_head(%struct.tiff_hdr* %th, i32 %full) #0 {
  %1 = alloca %struct.tiff_hdr*, align 8
  %2 = alloca i32, align 4
  %c = alloca i32, align 4
  %psize = alloca i32, align 4
  %t = alloca %struct.tm*, align 8
  store %struct.tiff_hdr* %th, %struct.tiff_hdr** %1, align 8
  store i32 %full, i32* %2, align 4
  store i32 0, i32* %psize, align 4
  %3 = load %struct.tiff_hdr** %1, align 8
  %4 = bitcast %struct.tiff_hdr* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 1376, i32 4, i1 false)
  %5 = call i32 @htonl(i32 1296910665) #9
  %6 = lshr i32 %5, 16
  %7 = trunc i32 %6 to i16
  %8 = load %struct.tiff_hdr** %1, align 8
  %9 = getelementptr inbounds %struct.tiff_hdr* %8, i32 0, i32 0
  store i16 %7, i16* %9, align 2
  %10 = load %struct.tiff_hdr** %1, align 8
  %11 = getelementptr inbounds %struct.tiff_hdr* %10, i32 0, i32 1
  store i16 42, i16* %11, align 2
  %12 = load %struct.tiff_hdr** %1, align 8
  %13 = getelementptr inbounds %struct.tiff_hdr* %12, i32 0, i32 2
  store i32 10, i32* %13, align 4
  %14 = load i32* %2, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %78

; <label>:16                                      ; preds = %0
  %17 = load %struct.tiff_hdr** %1, align 8
  %18 = getelementptr inbounds %struct.tiff_hdr* %17, i32 0, i32 4
  call void @tiff_set(i16* %18, i16 zeroext 254, i16 zeroext 4, i32 1, i32 0)
  %19 = load %struct.tiff_hdr** %1, align 8
  %20 = getelementptr inbounds %struct.tiff_hdr* %19, i32 0, i32 4
  %21 = load i16* @width, align 2
  %22 = zext i16 %21 to i32
  call void @tiff_set(i16* %20, i16 zeroext 256, i16 zeroext 4, i32 1, i32 %22)
  %23 = load %struct.tiff_hdr** %1, align 8
  %24 = getelementptr inbounds %struct.tiff_hdr* %23, i32 0, i32 4
  %25 = load i16* @height, align 2
  %26 = zext i16 %25 to i32
  call void @tiff_set(i16* %24, i16 zeroext 257, i16 zeroext 4, i32 1, i32 %26)
  %27 = load %struct.tiff_hdr** %1, align 8
  %28 = getelementptr inbounds %struct.tiff_hdr* %27, i32 0, i32 4
  %29 = load i32* @colors, align 4
  %30 = load i32* @output_bps, align 4
  call void @tiff_set(i16* %28, i16 zeroext 258, i16 zeroext 3, i32 %29, i32 %30)
  %31 = load i32* @colors, align 4
  %32 = icmp sgt i32 %31, 2
  br i1 %32, label %33, label %54

; <label>:33                                      ; preds = %16
  %34 = load %struct.tiff_hdr** %1, align 8
  %35 = getelementptr inbounds %struct.tiff_hdr* %34, i32 0, i32 13
  %36 = bitcast [4 x i16]* %35 to i8*
  %37 = load %struct.tiff_hdr** %1, align 8
  %38 = bitcast %struct.tiff_hdr* %37 to i8*
  %39 = ptrtoint i8* %36 to i64
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %39, %40
  %42 = trunc i64 %41 to i32
  %43 = load %struct.tiff_hdr** %1, align 8
  %44 = getelementptr inbounds %struct.tiff_hdr* %43, i32 0, i32 4
  %45 = load i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = sub nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = load %struct.tiff_hdr** %1, align 8
  %50 = getelementptr inbounds %struct.tiff_hdr* %49, i32 0, i32 5
  %51 = getelementptr inbounds [23 x %struct.tiff_tag]* %50, i32 0, i64 %48
  %52 = getelementptr inbounds %struct.tiff_tag* %51, i32 0, i32 3
  %53 = bitcast %union.anon.5* %52 to i32*
  store i32 %42, i32* %53, align 4
  br label %54

; <label>:54                                      ; preds = %33, %16
  store i32 0, i32* %c, align 4
  br label %55

; <label>:55                                      ; preds = %66, %54
  %56 = load i32* %c, align 4
  %57 = icmp slt i32 %56, 4
  br i1 %57, label %58, label %69

; <label>:58                                      ; preds = %55
  %59 = load i32* @output_bps, align 4
  %60 = trunc i32 %59 to i16
  %61 = load i32* %c, align 4
  %62 = sext i32 %61 to i64
  %63 = load %struct.tiff_hdr** %1, align 8
  %64 = getelementptr inbounds %struct.tiff_hdr* %63, i32 0, i32 13
  %65 = getelementptr inbounds [4 x i16]* %64, i32 0, i64 %62
  store i16 %60, i16* %65, align 2
  br label %66

; <label>:66                                      ; preds = %58
  %67 = load i32* %c, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %c, align 4
  br label %55

; <label>:69                                      ; preds = %55
  %70 = load %struct.tiff_hdr** %1, align 8
  %71 = getelementptr inbounds %struct.tiff_hdr* %70, i32 0, i32 4
  call void @tiff_set(i16* %71, i16 zeroext 259, i16 zeroext 3, i32 1, i32 1)
  %72 = load %struct.tiff_hdr** %1, align 8
  %73 = getelementptr inbounds %struct.tiff_hdr* %72, i32 0, i32 4
  %74 = load i32* @colors, align 4
  %75 = icmp sgt i32 %74, 1
  %76 = zext i1 %75 to i32
  %77 = add nsw i32 1, %76
  call void @tiff_set(i16* %73, i16 zeroext 262, i16 zeroext 3, i32 1, i32 %77)
  br label %78

; <label>:78                                      ; preds = %69, %0
  %79 = load %struct.tiff_hdr** %1, align 8
  %80 = getelementptr inbounds %struct.tiff_hdr* %79, i32 0, i32 4
  %81 = load %struct.tiff_hdr** %1, align 8
  %82 = getelementptr inbounds %struct.tiff_hdr* %81, i32 0, i32 16
  %83 = bitcast [512 x i8]* %82 to i8*
  %84 = load %struct.tiff_hdr** %1, align 8
  %85 = bitcast %struct.tiff_hdr* %84 to i8*
  %86 = ptrtoint i8* %83 to i64
  %87 = ptrtoint i8* %85 to i64
  %88 = sub i64 %86, %87
  %89 = trunc i64 %88 to i32
  call void @tiff_set(i16* %80, i16 zeroext 270, i16 zeroext 2, i32 512, i32 %89)
  %90 = load %struct.tiff_hdr** %1, align 8
  %91 = getelementptr inbounds %struct.tiff_hdr* %90, i32 0, i32 4
  %92 = load %struct.tiff_hdr** %1, align 8
  %93 = getelementptr inbounds %struct.tiff_hdr* %92, i32 0, i32 17
  %94 = bitcast [64 x i8]* %93 to i8*
  %95 = load %struct.tiff_hdr** %1, align 8
  %96 = bitcast %struct.tiff_hdr* %95 to i8*
  %97 = ptrtoint i8* %94 to i64
  %98 = ptrtoint i8* %96 to i64
  %99 = sub i64 %97, %98
  %100 = trunc i64 %99 to i32
  call void @tiff_set(i16* %91, i16 zeroext 271, i16 zeroext 2, i32 64, i32 %100)
  %101 = load %struct.tiff_hdr** %1, align 8
  %102 = getelementptr inbounds %struct.tiff_hdr* %101, i32 0, i32 4
  %103 = load %struct.tiff_hdr** %1, align 8
  %104 = getelementptr inbounds %struct.tiff_hdr* %103, i32 0, i32 18
  %105 = bitcast [64 x i8]* %104 to i8*
  %106 = load %struct.tiff_hdr** %1, align 8
  %107 = bitcast %struct.tiff_hdr* %106 to i8*
  %108 = ptrtoint i8* %105 to i64
  %109 = ptrtoint i8* %107 to i64
  %110 = sub i64 %108, %109
  %111 = trunc i64 %110 to i32
  call void @tiff_set(i16* %102, i16 zeroext 272, i16 zeroext 2, i32 64, i32 %111)
  %112 = load i32* %2, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %148

; <label>:114                                     ; preds = %78
  %115 = load i32** @oprof, align 8
  %116 = icmp ne i32* %115, null
  br i1 %116, label %117, label %122

; <label>:117                                     ; preds = %114
  %118 = load i32** @oprof, align 8
  %119 = getelementptr inbounds i32* %118, i64 0
  %120 = load i32* %119, align 4
  %121 = call i32 @ntohl(i32 %120) #9
  store i32 %121, i32* %psize, align 4
  br label %122

; <label>:122                                     ; preds = %117, %114
  %123 = load %struct.tiff_hdr** %1, align 8
  %124 = getelementptr inbounds %struct.tiff_hdr* %123, i32 0, i32 4
  %125 = load i32* %psize, align 4
  %126 = sext i32 %125 to i64
  %127 = add i64 1376, %126
  %128 = trunc i64 %127 to i32
  call void @tiff_set(i16* %124, i16 zeroext 273, i16 zeroext 4, i32 1, i32 %128)
  %129 = load %struct.tiff_hdr** %1, align 8
  %130 = getelementptr inbounds %struct.tiff_hdr* %129, i32 0, i32 4
  %131 = load i32* @colors, align 4
  call void @tiff_set(i16* %130, i16 zeroext 277, i16 zeroext 3, i32 1, i32 %131)
  %132 = load %struct.tiff_hdr** %1, align 8
  %133 = getelementptr inbounds %struct.tiff_hdr* %132, i32 0, i32 4
  %134 = load i16* @height, align 2
  %135 = zext i16 %134 to i32
  call void @tiff_set(i16* %133, i16 zeroext 278, i16 zeroext 4, i32 1, i32 %135)
  %136 = load %struct.tiff_hdr** %1, align 8
  %137 = getelementptr inbounds %struct.tiff_hdr* %136, i32 0, i32 4
  %138 = load i16* @height, align 2
  %139 = zext i16 %138 to i32
  %140 = load i16* @width, align 2
  %141 = zext i16 %140 to i32
  %142 = mul nsw i32 %139, %141
  %143 = load i32* @colors, align 4
  %144 = mul nsw i32 %142, %143
  %145 = load i32* @output_bps, align 4
  %146 = mul nsw i32 %144, %145
  %147 = sdiv i32 %146, 8
  call void @tiff_set(i16* %137, i16 zeroext 279, i16 zeroext 4, i32 1, i32 %147)
  br label %157

; <label>:148                                     ; preds = %78
  %149 = load %struct.tiff_hdr** %1, align 8
  %150 = getelementptr inbounds %struct.tiff_hdr* %149, i32 0, i32 4
  %151 = load i32* @flip, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [9 x i8]* @.str605, i32 0, i64 %152
  %154 = load i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = sub nsw i32 %155, 48
  call void @tiff_set(i16* %150, i16 zeroext 274, i16 zeroext 3, i32 1, i32 %156)
  br label %157

; <label>:157                                     ; preds = %148, %122
  %158 = load %struct.tiff_hdr** %1, align 8
  %159 = getelementptr inbounds %struct.tiff_hdr* %158, i32 0, i32 4
  %160 = load %struct.tiff_hdr** %1, align 8
  %161 = getelementptr inbounds %struct.tiff_hdr* %160, i32 0, i32 14
  %162 = getelementptr inbounds [10 x i32]* %161, i32 0, i64 0
  %163 = bitcast i32* %162 to i8*
  %164 = load %struct.tiff_hdr** %1, align 8
  %165 = bitcast %struct.tiff_hdr* %164 to i8*
  %166 = ptrtoint i8* %163 to i64
  %167 = ptrtoint i8* %165 to i64
  %168 = sub i64 %166, %167
  %169 = trunc i64 %168 to i32
  call void @tiff_set(i16* %159, i16 zeroext 282, i16 zeroext 5, i32 1, i32 %169)
  %170 = load %struct.tiff_hdr** %1, align 8
  %171 = getelementptr inbounds %struct.tiff_hdr* %170, i32 0, i32 4
  %172 = load %struct.tiff_hdr** %1, align 8
  %173 = getelementptr inbounds %struct.tiff_hdr* %172, i32 0, i32 14
  %174 = getelementptr inbounds [10 x i32]* %173, i32 0, i64 2
  %175 = bitcast i32* %174 to i8*
  %176 = load %struct.tiff_hdr** %1, align 8
  %177 = bitcast %struct.tiff_hdr* %176 to i8*
  %178 = ptrtoint i8* %175 to i64
  %179 = ptrtoint i8* %177 to i64
  %180 = sub i64 %178, %179
  %181 = trunc i64 %180 to i32
  call void @tiff_set(i16* %171, i16 zeroext 283, i16 zeroext 5, i32 1, i32 %181)
  %182 = load %struct.tiff_hdr** %1, align 8
  %183 = getelementptr inbounds %struct.tiff_hdr* %182, i32 0, i32 4
  call void @tiff_set(i16* %183, i16 zeroext 284, i16 zeroext 3, i32 1, i32 1)
  %184 = load %struct.tiff_hdr** %1, align 8
  %185 = getelementptr inbounds %struct.tiff_hdr* %184, i32 0, i32 4
  call void @tiff_set(i16* %185, i16 zeroext 296, i16 zeroext 3, i32 1, i32 2)
  %186 = load %struct.tiff_hdr** %1, align 8
  %187 = getelementptr inbounds %struct.tiff_hdr* %186, i32 0, i32 4
  %188 = load %struct.tiff_hdr** %1, align 8
  %189 = getelementptr inbounds %struct.tiff_hdr* %188, i32 0, i32 19
  %190 = bitcast [32 x i8]* %189 to i8*
  %191 = load %struct.tiff_hdr** %1, align 8
  %192 = bitcast %struct.tiff_hdr* %191 to i8*
  %193 = ptrtoint i8* %190 to i64
  %194 = ptrtoint i8* %192 to i64
  %195 = sub i64 %193, %194
  %196 = trunc i64 %195 to i32
  call void @tiff_set(i16* %187, i16 zeroext 305, i16 zeroext 2, i32 32, i32 %196)
  %197 = load %struct.tiff_hdr** %1, align 8
  %198 = getelementptr inbounds %struct.tiff_hdr* %197, i32 0, i32 4
  %199 = load %struct.tiff_hdr** %1, align 8
  %200 = getelementptr inbounds %struct.tiff_hdr* %199, i32 0, i32 20
  %201 = bitcast [20 x i8]* %200 to i8*
  %202 = load %struct.tiff_hdr** %1, align 8
  %203 = bitcast %struct.tiff_hdr* %202 to i8*
  %204 = ptrtoint i8* %201 to i64
  %205 = ptrtoint i8* %203 to i64
  %206 = sub i64 %204, %205
  %207 = trunc i64 %206 to i32
  call void @tiff_set(i16* %198, i16 zeroext 306, i16 zeroext 2, i32 20, i32 %207)
  %208 = load %struct.tiff_hdr** %1, align 8
  %209 = getelementptr inbounds %struct.tiff_hdr* %208, i32 0, i32 4
  %210 = load %struct.tiff_hdr** %1, align 8
  %211 = getelementptr inbounds %struct.tiff_hdr* %210, i32 0, i32 21
  %212 = bitcast [64 x i8]* %211 to i8*
  %213 = load %struct.tiff_hdr** %1, align 8
  %214 = bitcast %struct.tiff_hdr* %213 to i8*
  %215 = ptrtoint i8* %212 to i64
  %216 = ptrtoint i8* %214 to i64
  %217 = sub i64 %215, %216
  %218 = trunc i64 %217 to i32
  call void @tiff_set(i16* %209, i16 zeroext 315, i16 zeroext 2, i32 64, i32 %218)
  %219 = load %struct.tiff_hdr** %1, align 8
  %220 = getelementptr inbounds %struct.tiff_hdr* %219, i32 0, i32 4
  %221 = load %struct.tiff_hdr** %1, align 8
  %222 = getelementptr inbounds %struct.tiff_hdr* %221, i32 0, i32 8
  %223 = bitcast i16* %222 to i8*
  %224 = load %struct.tiff_hdr** %1, align 8
  %225 = bitcast %struct.tiff_hdr* %224 to i8*
  %226 = ptrtoint i8* %223 to i64
  %227 = ptrtoint i8* %225 to i64
  %228 = sub i64 %226, %227
  %229 = trunc i64 %228 to i32
  call void @tiff_set(i16* %220, i16 zeroext -30871, i16 zeroext 4, i32 1, i32 %229)
  %230 = load i32* %psize, align 4
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %232, label %236

; <label>:232                                     ; preds = %157
  %233 = load %struct.tiff_hdr** %1, align 8
  %234 = getelementptr inbounds %struct.tiff_hdr* %233, i32 0, i32 4
  %235 = load i32* %psize, align 4
  call void @tiff_set(i16* %234, i16 zeroext -30861, i16 zeroext 7, i32 %235, i32 1376)
  br label %236

; <label>:236                                     ; preds = %232, %157
  %237 = load %struct.tiff_hdr** %1, align 8
  %238 = getelementptr inbounds %struct.tiff_hdr* %237, i32 0, i32 8
  %239 = load %struct.tiff_hdr** %1, align 8
  %240 = getelementptr inbounds %struct.tiff_hdr* %239, i32 0, i32 14
  %241 = getelementptr inbounds [10 x i32]* %240, i32 0, i64 4
  %242 = bitcast i32* %241 to i8*
  %243 = load %struct.tiff_hdr** %1, align 8
  %244 = bitcast %struct.tiff_hdr* %243 to i8*
  %245 = ptrtoint i8* %242 to i64
  %246 = ptrtoint i8* %244 to i64
  %247 = sub i64 %245, %246
  %248 = trunc i64 %247 to i32
  call void @tiff_set(i16* %238, i16 zeroext -32102, i16 zeroext 5, i32 1, i32 %248)
  %249 = load %struct.tiff_hdr** %1, align 8
  %250 = getelementptr inbounds %struct.tiff_hdr* %249, i32 0, i32 8
  %251 = load %struct.tiff_hdr** %1, align 8
  %252 = getelementptr inbounds %struct.tiff_hdr* %251, i32 0, i32 14
  %253 = getelementptr inbounds [10 x i32]* %252, i32 0, i64 6
  %254 = bitcast i32* %253 to i8*
  %255 = load %struct.tiff_hdr** %1, align 8
  %256 = bitcast %struct.tiff_hdr* %255 to i8*
  %257 = ptrtoint i8* %254 to i64
  %258 = ptrtoint i8* %256 to i64
  %259 = sub i64 %257, %258
  %260 = trunc i64 %259 to i32
  call void @tiff_set(i16* %250, i16 zeroext -32099, i16 zeroext 5, i32 1, i32 %260)
  %261 = load %struct.tiff_hdr** %1, align 8
  %262 = getelementptr inbounds %struct.tiff_hdr* %261, i32 0, i32 8
  %263 = load float* @iso_speed, align 4
  %264 = fptosi float %263 to i32
  call void @tiff_set(i16* %262, i16 zeroext -30681, i16 zeroext 3, i32 1, i32 %264)
  %265 = load %struct.tiff_hdr** %1, align 8
  %266 = getelementptr inbounds %struct.tiff_hdr* %265, i32 0, i32 8
  %267 = load %struct.tiff_hdr** %1, align 8
  %268 = getelementptr inbounds %struct.tiff_hdr* %267, i32 0, i32 14
  %269 = getelementptr inbounds [10 x i32]* %268, i32 0, i64 8
  %270 = bitcast i32* %269 to i8*
  %271 = load %struct.tiff_hdr** %1, align 8
  %272 = bitcast %struct.tiff_hdr* %271 to i8*
  %273 = ptrtoint i8* %270 to i64
  %274 = ptrtoint i8* %272 to i64
  %275 = sub i64 %273, %274
  %276 = trunc i64 %275 to i32
  call void @tiff_set(i16* %266, i16 zeroext -28150, i16 zeroext 5, i32 1, i32 %276)
  %277 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 1), align 4
  %278 = icmp ne i32 %277, 0
  br i1 %278, label %279, label %377

; <label>:279                                     ; preds = %236
  %280 = load %struct.tiff_hdr** %1, align 8
  %281 = getelementptr inbounds %struct.tiff_hdr* %280, i32 0, i32 4
  %282 = load %struct.tiff_hdr** %1, align 8
  %283 = getelementptr inbounds %struct.tiff_hdr* %282, i32 0, i32 11
  %284 = bitcast i16* %283 to i8*
  %285 = load %struct.tiff_hdr** %1, align 8
  %286 = bitcast %struct.tiff_hdr* %285 to i8*
  %287 = ptrtoint i8* %284 to i64
  %288 = ptrtoint i8* %286 to i64
  %289 = sub i64 %287, %288
  %290 = trunc i64 %289 to i32
  call void @tiff_set(i16* %281, i16 zeroext -30683, i16 zeroext 4, i32 1, i32 %290)
  %291 = load %struct.tiff_hdr** %1, align 8
  %292 = getelementptr inbounds %struct.tiff_hdr* %291, i32 0, i32 11
  call void @tiff_set(i16* %292, i16 zeroext 0, i16 zeroext 1, i32 4, i32 514)
  %293 = load %struct.tiff_hdr** %1, align 8
  %294 = getelementptr inbounds %struct.tiff_hdr* %293, i32 0, i32 11
  %295 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 29), align 4
  call void @tiff_set(i16* %294, i16 zeroext 1, i16 zeroext 2, i32 2, i32 %295)
  %296 = load %struct.tiff_hdr** %1, align 8
  %297 = getelementptr inbounds %struct.tiff_hdr* %296, i32 0, i32 11
  %298 = load %struct.tiff_hdr** %1, align 8
  %299 = getelementptr inbounds %struct.tiff_hdr* %298, i32 0, i32 15
  %300 = getelementptr inbounds [26 x i32]* %299, i32 0, i64 0
  %301 = bitcast i32* %300 to i8*
  %302 = load %struct.tiff_hdr** %1, align 8
  %303 = bitcast %struct.tiff_hdr* %302 to i8*
  %304 = ptrtoint i8* %301 to i64
  %305 = ptrtoint i8* %303 to i64
  %306 = sub i64 %304, %305
  %307 = trunc i64 %306 to i32
  call void @tiff_set(i16* %297, i16 zeroext 2, i16 zeroext 5, i32 3, i32 %307)
  %308 = load %struct.tiff_hdr** %1, align 8
  %309 = getelementptr inbounds %struct.tiff_hdr* %308, i32 0, i32 11
  %310 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 30), align 4
  call void @tiff_set(i16* %309, i16 zeroext 3, i16 zeroext 2, i32 2, i32 %310)
  %311 = load %struct.tiff_hdr** %1, align 8
  %312 = getelementptr inbounds %struct.tiff_hdr* %311, i32 0, i32 11
  %313 = load %struct.tiff_hdr** %1, align 8
  %314 = getelementptr inbounds %struct.tiff_hdr* %313, i32 0, i32 15
  %315 = getelementptr inbounds [26 x i32]* %314, i32 0, i64 6
  %316 = bitcast i32* %315 to i8*
  %317 = load %struct.tiff_hdr** %1, align 8
  %318 = bitcast %struct.tiff_hdr* %317 to i8*
  %319 = ptrtoint i8* %316 to i64
  %320 = ptrtoint i8* %318 to i64
  %321 = sub i64 %319, %320
  %322 = trunc i64 %321 to i32
  call void @tiff_set(i16* %312, i16 zeroext 4, i16 zeroext 5, i32 3, i32 %322)
  %323 = load %struct.tiff_hdr** %1, align 8
  %324 = getelementptr inbounds %struct.tiff_hdr* %323, i32 0, i32 11
  %325 = load i32* getelementptr inbounds ([32 x i32]* @gpsdata, i32 0, i64 31), align 4
  call void @tiff_set(i16* %324, i16 zeroext 5, i16 zeroext 1, i32 1, i32 %325)
  %326 = load %struct.tiff_hdr** %1, align 8
  %327 = getelementptr inbounds %struct.tiff_hdr* %326, i32 0, i32 11
  %328 = load %struct.tiff_hdr** %1, align 8
  %329 = getelementptr inbounds %struct.tiff_hdr* %328, i32 0, i32 15
  %330 = getelementptr inbounds [26 x i32]* %329, i32 0, i64 18
  %331 = bitcast i32* %330 to i8*
  %332 = load %struct.tiff_hdr** %1, align 8
  %333 = bitcast %struct.tiff_hdr* %332 to i8*
  %334 = ptrtoint i8* %331 to i64
  %335 = ptrtoint i8* %333 to i64
  %336 = sub i64 %334, %335
  %337 = trunc i64 %336 to i32
  call void @tiff_set(i16* %327, i16 zeroext 6, i16 zeroext 5, i32 1, i32 %337)
  %338 = load %struct.tiff_hdr** %1, align 8
  %339 = getelementptr inbounds %struct.tiff_hdr* %338, i32 0, i32 11
  %340 = load %struct.tiff_hdr** %1, align 8
  %341 = getelementptr inbounds %struct.tiff_hdr* %340, i32 0, i32 15
  %342 = getelementptr inbounds [26 x i32]* %341, i32 0, i64 12
  %343 = bitcast i32* %342 to i8*
  %344 = load %struct.tiff_hdr** %1, align 8
  %345 = bitcast %struct.tiff_hdr* %344 to i8*
  %346 = ptrtoint i8* %343 to i64
  %347 = ptrtoint i8* %345 to i64
  %348 = sub i64 %346, %347
  %349 = trunc i64 %348 to i32
  call void @tiff_set(i16* %339, i16 zeroext 7, i16 zeroext 5, i32 3, i32 %349)
  %350 = load %struct.tiff_hdr** %1, align 8
  %351 = getelementptr inbounds %struct.tiff_hdr* %350, i32 0, i32 11
  %352 = load %struct.tiff_hdr** %1, align 8
  %353 = getelementptr inbounds %struct.tiff_hdr* %352, i32 0, i32 15
  %354 = getelementptr inbounds [26 x i32]* %353, i32 0, i64 20
  %355 = bitcast i32* %354 to i8*
  %356 = load %struct.tiff_hdr** %1, align 8
  %357 = bitcast %struct.tiff_hdr* %356 to i8*
  %358 = ptrtoint i8* %355 to i64
  %359 = ptrtoint i8* %357 to i64
  %360 = sub i64 %358, %359
  %361 = trunc i64 %360 to i32
  call void @tiff_set(i16* %351, i16 zeroext 18, i16 zeroext 2, i32 12, i32 %361)
  %362 = load %struct.tiff_hdr** %1, align 8
  %363 = getelementptr inbounds %struct.tiff_hdr* %362, i32 0, i32 11
  %364 = load %struct.tiff_hdr** %1, align 8
  %365 = getelementptr inbounds %struct.tiff_hdr* %364, i32 0, i32 15
  %366 = getelementptr inbounds [26 x i32]* %365, i32 0, i64 23
  %367 = bitcast i32* %366 to i8*
  %368 = load %struct.tiff_hdr** %1, align 8
  %369 = bitcast %struct.tiff_hdr* %368 to i8*
  %370 = ptrtoint i8* %367 to i64
  %371 = ptrtoint i8* %369 to i64
  %372 = sub i64 %370, %371
  %373 = trunc i64 %372 to i32
  call void @tiff_set(i16* %363, i16 zeroext 29, i16 zeroext 2, i32 12, i32 %373)
  %374 = load %struct.tiff_hdr** %1, align 8
  %375 = getelementptr inbounds %struct.tiff_hdr* %374, i32 0, i32 15
  %376 = bitcast [26 x i32]* %375 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %376, i8* bitcast ([32 x i32]* @gpsdata to i8*), i64 104, i32 4, i1 false)
  br label %377

; <label>:377                                     ; preds = %279, %236
  %378 = load %struct.tiff_hdr** %1, align 8
  %379 = getelementptr inbounds %struct.tiff_hdr* %378, i32 0, i32 14
  %380 = getelementptr inbounds [10 x i32]* %379, i32 0, i64 2
  store i32 300, i32* %380, align 4
  %381 = load %struct.tiff_hdr** %1, align 8
  %382 = getelementptr inbounds %struct.tiff_hdr* %381, i32 0, i32 14
  %383 = getelementptr inbounds [10 x i32]* %382, i32 0, i64 0
  store i32 300, i32* %383, align 4
  %384 = load %struct.tiff_hdr** %1, align 8
  %385 = getelementptr inbounds %struct.tiff_hdr* %384, i32 0, i32 14
  %386 = getelementptr inbounds [10 x i32]* %385, i32 0, i64 3
  store i32 1, i32* %386, align 4
  %387 = load %struct.tiff_hdr** %1, align 8
  %388 = getelementptr inbounds %struct.tiff_hdr* %387, i32 0, i32 14
  %389 = getelementptr inbounds [10 x i32]* %388, i32 0, i64 1
  store i32 1, i32* %389, align 4
  store i32 0, i32* %c, align 4
  br label %390

; <label>:390                                     ; preds = %400, %377
  %391 = load i32* %c, align 4
  %392 = icmp slt i32 %391, 6
  br i1 %392, label %393, label %403

; <label>:393                                     ; preds = %390
  %394 = load i32* %c, align 4
  %395 = add nsw i32 4, %394
  %396 = sext i32 %395 to i64
  %397 = load %struct.tiff_hdr** %1, align 8
  %398 = getelementptr inbounds %struct.tiff_hdr* %397, i32 0, i32 14
  %399 = getelementptr inbounds [10 x i32]* %398, i32 0, i64 %396
  store i32 1000000, i32* %399, align 4
  br label %400

; <label>:400                                     ; preds = %393
  %401 = load i32* %c, align 4
  %402 = add nsw i32 %401, 1
  store i32 %402, i32* %c, align 4
  br label %390

; <label>:403                                     ; preds = %390
  %404 = load float* @shutter, align 4
  %405 = load %struct.tiff_hdr** %1, align 8
  %406 = getelementptr inbounds %struct.tiff_hdr* %405, i32 0, i32 14
  %407 = getelementptr inbounds [10 x i32]* %406, i32 0, i64 4
  %408 = load i32* %407, align 4
  %409 = sitofp i32 %408 to float
  %410 = fmul float %409, %404
  %411 = fptosi float %410 to i32
  store i32 %411, i32* %407, align 4
  %412 = load float* @aperture, align 4
  %413 = load %struct.tiff_hdr** %1, align 8
  %414 = getelementptr inbounds %struct.tiff_hdr* %413, i32 0, i32 14
  %415 = getelementptr inbounds [10 x i32]* %414, i32 0, i64 6
  %416 = load i32* %415, align 4
  %417 = sitofp i32 %416 to float
  %418 = fmul float %417, %412
  %419 = fptosi float %418 to i32
  store i32 %419, i32* %415, align 4
  %420 = load float* @focal_len, align 4
  %421 = load %struct.tiff_hdr** %1, align 8
  %422 = getelementptr inbounds %struct.tiff_hdr* %421, i32 0, i32 14
  %423 = getelementptr inbounds [10 x i32]* %422, i32 0, i64 8
  %424 = load i32* %423, align 4
  %425 = sitofp i32 %424 to float
  %426 = fmul float %425, %420
  %427 = fptosi float %426 to i32
  store i32 %427, i32* %423, align 4
  %428 = load %struct.tiff_hdr** %1, align 8
  %429 = getelementptr inbounds %struct.tiff_hdr* %428, i32 0, i32 16
  %430 = getelementptr inbounds [512 x i8]* %429, i32 0, i32 0
  %431 = call i8* @strncpy(i8* %430, i8* getelementptr inbounds ([512 x i8]* @desc, i32 0, i32 0), i64 512) #4
  %432 = load %struct.tiff_hdr** %1, align 8
  %433 = getelementptr inbounds %struct.tiff_hdr* %432, i32 0, i32 17
  %434 = getelementptr inbounds [64 x i8]* %433, i32 0, i32 0
  %435 = call i8* @strncpy(i8* %434, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i64 64) #4
  %436 = load %struct.tiff_hdr** %1, align 8
  %437 = getelementptr inbounds %struct.tiff_hdr* %436, i32 0, i32 18
  %438 = getelementptr inbounds [64 x i8]* %437, i32 0, i32 0
  %439 = call i8* @strncpy(i8* %438, i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i64 64) #4
  %440 = load %struct.tiff_hdr** %1, align 8
  %441 = getelementptr inbounds %struct.tiff_hdr* %440, i32 0, i32 19
  %442 = getelementptr inbounds [32 x i8]* %441, i32 0, i32 0
  %443 = call i8* @strcpy(i8* %442, i8* getelementptr inbounds ([12 x i8]* @.str606, i32 0, i32 0)) #4
  %444 = call %struct.tm* @gmtime(i64* @timestamp) #4
  store %struct.tm* %444, %struct.tm** %t, align 8
  %445 = load %struct.tiff_hdr** %1, align 8
  %446 = getelementptr inbounds %struct.tiff_hdr* %445, i32 0, i32 20
  %447 = getelementptr inbounds [20 x i8]* %446, i32 0, i32 0
  %448 = load %struct.tm** %t, align 8
  %449 = getelementptr inbounds %struct.tm* %448, i32 0, i32 5
  %450 = load i32* %449, align 4
  %451 = add nsw i32 %450, 1900
  %452 = load %struct.tm** %t, align 8
  %453 = getelementptr inbounds %struct.tm* %452, i32 0, i32 4
  %454 = load i32* %453, align 4
  %455 = add nsw i32 %454, 1
  %456 = load %struct.tm** %t, align 8
  %457 = getelementptr inbounds %struct.tm* %456, i32 0, i32 3
  %458 = load i32* %457, align 4
  %459 = load %struct.tm** %t, align 8
  %460 = getelementptr inbounds %struct.tm* %459, i32 0, i32 2
  %461 = load i32* %460, align 4
  %462 = load %struct.tm** %t, align 8
  %463 = getelementptr inbounds %struct.tm* %462, i32 0, i32 1
  %464 = load i32* %463, align 4
  %465 = load %struct.tm** %t, align 8
  %466 = getelementptr inbounds %struct.tm* %465, i32 0, i32 0
  %467 = load i32* %466, align 4
  %468 = call i32 (i8*, i8*, ...)* @sprintf(i8* %447, i8* getelementptr inbounds ([30 x i8]* @.str607, i32 0, i32 0), i32 %451, i32 %455, i32 %458, i32 %461, i32 %464, i32 %467) #4
  %469 = load %struct.tiff_hdr** %1, align 8
  %470 = getelementptr inbounds %struct.tiff_hdr* %469, i32 0, i32 21
  %471 = getelementptr inbounds [64 x i8]* %470, i32 0, i32 0
  %472 = call i8* @strncpy(i8* %471, i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0), i64 64) #4
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @ntohl(i32) #5

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #3

; Function Attrs: nounwind
declare %struct.tm* @gmtime(i64*) #3

; Function Attrs: nounwind readnone
declare zeroext i16 @htons(i16 zeroext) #5

; Function Attrs: nounwind uwtable
define void @write_ppm_tiff(%struct._IO_FILE* %ofp) #0 {
  %1 = alloca %struct._IO_FILE*, align 8
  %th = alloca %struct.tiff_hdr, align 4
  %ppm = alloca i8*, align 8
  %lut = alloca [65536 x i8], align 16
  %ppm2 = alloca i16*, align 8
  %c = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %soff = alloca i32, align 4
  %rstep = alloca i32, align 4
  %cstep = alloca i32, align 4
  store %struct._IO_FILE* %ofp, %struct._IO_FILE** %1, align 8
  %2 = load i16* @height, align 2
  store i16 %2, i16* @iheight, align 2
  %3 = load i16* @width, align 2
  store i16 %3, i16* @iwidth, align 2
  %4 = load i32* @flip, align 4
  %5 = and i32 %4, 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %25

; <label>:7                                       ; preds = %0
  %8 = load i16* @width, align 2
  %9 = zext i16 %8 to i32
  %10 = load i16* @height, align 2
  %11 = zext i16 %10 to i32
  %12 = xor i32 %11, %9
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* @height, align 2
  %14 = load i16* @height, align 2
  %15 = zext i16 %14 to i32
  %16 = load i16* @width, align 2
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, %15
  %19 = trunc i32 %18 to i16
  store i16 %19, i16* @width, align 2
  %20 = zext i16 %19 to i32
  %21 = load i16* @height, align 2
  %22 = zext i16 %21 to i32
  %23 = xor i32 %22, %20
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* @height, align 2
  br label %25

; <label>:25                                      ; preds = %7, %0
  %26 = load i16* @width, align 2
  %27 = zext i16 %26 to i64
  %28 = load i32* @colors, align 4
  %29 = load i32* @output_bps, align 4
  %30 = mul nsw i32 %28, %29
  %31 = sdiv i32 %30, 8
  %32 = sext i32 %31 to i64
  %33 = call noalias i8* @calloc(i64 %27, i64 %32) #4
  store i8* %33, i8** %ppm, align 8
  %34 = load i8** %ppm, align 8
  %35 = bitcast i8* %34 to i16*
  store i16* %35, i16** %ppm2, align 8
  %36 = load i8** %ppm, align 8
  call void @merror(i8* %36, i8* getelementptr inbounds ([17 x i8]* @.str610, i32 0, i32 0))
  %37 = load i32* @output_tiff, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %56

; <label>:39                                      ; preds = %25
  call void @tiff_head(%struct.tiff_hdr* %th, i32 1)
  %40 = bitcast %struct.tiff_hdr* %th to i8*
  %41 = load %struct._IO_FILE** %1, align 8
  %42 = call i64 @fwrite(i8* %40, i64 1376, i64 1, %struct._IO_FILE* %41)
  %43 = load i32** @oprof, align 8
  %44 = icmp ne i32* %43, null
  br i1 %44, label %45, label %55

; <label>:45                                      ; preds = %39
  %46 = load i32** @oprof, align 8
  %47 = bitcast i32* %46 to i8*
  %48 = load i32** @oprof, align 8
  %49 = getelementptr inbounds i32* %48, i64 0
  %50 = load i32* %49, align 4
  %51 = call i32 @ntohl(i32 %50) #9
  %52 = zext i32 %51 to i64
  %53 = load %struct._IO_FILE** %1, align 8
  %54 = call i64 @fwrite(i8* %47, i64 %52, i64 1, %struct._IO_FILE* %53)
  br label %55

; <label>:55                                      ; preds = %45, %39
  br label %84

; <label>:56                                      ; preds = %25
  %57 = load i32* @colors, align 4
  %58 = icmp sgt i32 %57, 3
  br i1 %58, label %59, label %70

; <label>:59                                      ; preds = %56
  %60 = load %struct._IO_FILE** %1, align 8
  %61 = load i16* @width, align 2
  %62 = zext i16 %61 to i32
  %63 = load i16* @height, align 2
  %64 = zext i16 %63 to i32
  %65 = load i32* @colors, align 4
  %66 = load i32* @output_bps, align 4
  %67 = shl i32 1, %66
  %68 = sub nsw i32 %67, 1
  %69 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([61 x i8]* @.str611, i32 0, i32 0), i32 %62, i32 %64, i32 %65, i32 %68, i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i32 0))
  br label %83

; <label>:70                                      ; preds = %56
  %71 = load %struct._IO_FILE** %1, align 8
  %72 = load i32* @colors, align 4
  %73 = sdiv i32 %72, 2
  %74 = add nsw i32 %73, 5
  %75 = load i16* @width, align 2
  %76 = zext i16 %75 to i32
  %77 = load i16* @height, align 2
  %78 = zext i16 %77 to i32
  %79 = load i32* @output_bps, align 4
  %80 = shl i32 1, %79
  %81 = sub nsw i32 %80, 1
  %82 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([14 x i8]* @.str612, i32 0, i32 0), i32 %74, i32 %76, i32 %78, i32 %81)
  br label %83

; <label>:83                                      ; preds = %70, %59
  br label %84

; <label>:84                                      ; preds = %83, %55
  %85 = load i32* @output_bps, align 4
  %86 = icmp eq i32 %85, 8
  br i1 %86, label %87, label %89

; <label>:87                                      ; preds = %84
  %88 = getelementptr inbounds [65536 x i8]* %lut, i32 0, i32 0
  call void @gamma_lut(i8* %88)
  br label %89

; <label>:89                                      ; preds = %87, %84
  %90 = call i32 @flip_index(i32 0, i32 0)
  store i32 %90, i32* %soff, align 4
  %91 = call i32 @flip_index(i32 0, i32 1)
  %92 = load i32* %soff, align 4
  %93 = sub nsw i32 %91, %92
  store i32 %93, i32* %cstep, align 4
  %94 = call i32 @flip_index(i32 1, i32 0)
  %95 = load i16* @width, align 2
  %96 = zext i16 %95 to i32
  %97 = call i32 @flip_index(i32 0, i32 %96)
  %98 = sub nsw i32 %94, %97
  store i32 %98, i32* %rstep, align 4
  store i32 0, i32* %row, align 4
  br label %99

; <label>:99                                      ; preds = %207, %89
  %100 = load i32* %row, align 4
  %101 = load i16* @height, align 2
  %102 = zext i16 %101 to i32
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %213

; <label>:104                                     ; preds = %99
  store i32 0, i32* %col, align 4
  br label %105

; <label>:105                                     ; preds = %169, %104
  %106 = load i32* %col, align 4
  %107 = load i16* @width, align 2
  %108 = zext i16 %107 to i32
  %109 = icmp slt i32 %106, %108
  br i1 %109, label %110, label %175

; <label>:110                                     ; preds = %105
  %111 = load i32* @output_bps, align 4
  %112 = icmp eq i32 %111, 8
  br i1 %112, label %113, label %142

; <label>:113                                     ; preds = %110
  store i32 0, i32* %c, align 4
  br label %114

; <label>:114                                     ; preds = %138, %113
  %115 = load i32* %c, align 4
  %116 = load i32* @colors, align 4
  %117 = icmp slt i32 %115, %116
  br i1 %117, label %118, label %141

; <label>:118                                     ; preds = %114
  %119 = load i32* %c, align 4
  %120 = sext i32 %119 to i64
  %121 = load i32* %soff, align 4
  %122 = sext i32 %121 to i64
  %123 = load [4 x i16]** @image, align 8
  %124 = getelementptr inbounds [4 x i16]* %123, i64 %122
  %125 = getelementptr inbounds [4 x i16]* %124, i32 0, i64 %120
  %126 = load i16* %125, align 2
  %127 = zext i16 %126 to i64
  %128 = getelementptr inbounds [65536 x i8]* %lut, i32 0, i64 %127
  %129 = load i8* %128, align 1
  %130 = load i32* %col, align 4
  %131 = load i32* @colors, align 4
  %132 = mul nsw i32 %130, %131
  %133 = load i32* %c, align 4
  %134 = add nsw i32 %132, %133
  %135 = sext i32 %134 to i64
  %136 = load i8** %ppm, align 8
  %137 = getelementptr inbounds i8* %136, i64 %135
  store i8 %129, i8* %137, align 1
  br label %138

; <label>:138                                     ; preds = %118
  %139 = load i32* %c, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %c, align 4
  br label %114

; <label>:141                                     ; preds = %114
  br label %168

; <label>:142                                     ; preds = %110
  store i32 0, i32* %c, align 4
  br label %143

; <label>:143                                     ; preds = %164, %142
  %144 = load i32* %c, align 4
  %145 = load i32* @colors, align 4
  %146 = icmp slt i32 %144, %145
  br i1 %146, label %147, label %167

; <label>:147                                     ; preds = %143
  %148 = load i32* %c, align 4
  %149 = sext i32 %148 to i64
  %150 = load i32* %soff, align 4
  %151 = sext i32 %150 to i64
  %152 = load [4 x i16]** @image, align 8
  %153 = getelementptr inbounds [4 x i16]* %152, i64 %151
  %154 = getelementptr inbounds [4 x i16]* %153, i32 0, i64 %149
  %155 = load i16* %154, align 2
  %156 = load i32* %col, align 4
  %157 = load i32* @colors, align 4
  %158 = mul nsw i32 %156, %157
  %159 = load i32* %c, align 4
  %160 = add nsw i32 %158, %159
  %161 = sext i32 %160 to i64
  %162 = load i16** %ppm2, align 8
  %163 = getelementptr inbounds i16* %162, i64 %161
  store i16 %155, i16* %163, align 2
  br label %164

; <label>:164                                     ; preds = %147
  %165 = load i32* %c, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %c, align 4
  br label %143

; <label>:167                                     ; preds = %143
  br label %168

; <label>:168                                     ; preds = %167, %141
  br label %169

; <label>:169                                     ; preds = %168
  %170 = load i32* %col, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %col, align 4
  %172 = load i32* %cstep, align 4
  %173 = load i32* %soff, align 4
  %174 = add nsw i32 %173, %172
  store i32 %174, i32* %soff, align 4
  br label %105

; <label>:175                                     ; preds = %105
  %176 = load i32* @output_bps, align 4
  %177 = icmp eq i32 %176, 16
  br i1 %177, label %178, label %196

; <label>:178                                     ; preds = %175
  %179 = load i32* @output_tiff, align 4
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %196, label %181

; <label>:181                                     ; preds = %178
  %182 = call zeroext i16 @htons(i16 zeroext 21930) #9
  %183 = zext i16 %182 to i32
  %184 = icmp ne i32 %183, 21930
  br i1 %184, label %185, label %196

; <label>:185                                     ; preds = %181
  %186 = load i16** %ppm2, align 8
  %187 = bitcast i16* %186 to i8*
  %188 = load i16** %ppm2, align 8
  %189 = bitcast i16* %188 to i8*
  %190 = load i16* @width, align 2
  %191 = zext i16 %190 to i32
  %192 = load i32* @colors, align 4
  %193 = mul nsw i32 %191, %192
  %194 = mul nsw i32 %193, 2
  %195 = sext i32 %194 to i64
  call void @swab(i8* %187, i8* %189, i64 %195) #4
  br label %196

; <label>:196                                     ; preds = %185, %181, %178, %175
  %197 = load i8** %ppm, align 8
  %198 = load i32* @colors, align 4
  %199 = load i32* @output_bps, align 4
  %200 = mul nsw i32 %198, %199
  %201 = sdiv i32 %200, 8
  %202 = sext i32 %201 to i64
  %203 = load i16* @width, align 2
  %204 = zext i16 %203 to i64
  %205 = load %struct._IO_FILE** %1, align 8
  %206 = call i64 @fwrite(i8* %197, i64 %202, i64 %204, %struct._IO_FILE* %205)
  br label %207

; <label>:207                                     ; preds = %196
  %208 = load i32* %row, align 4
  %209 = add nsw i32 %208, 1
  store i32 %209, i32* %row, align 4
  %210 = load i32* %rstep, align 4
  %211 = load i32* %soff, align 4
  %212 = add nsw i32 %211, %210
  store i32 %212, i32* %soff, align 4
  br label %99

; <label>:213                                     ; preds = %99
  %214 = load i8** %ppm, align 8
  call void @free(i8* %214) #4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8**, align 8
  %arg = alloca i32, align 4
  %status = alloca i32, align 4
  %timestamp_only = alloca i32, align 4
  %thumbnail_only = alloca i32, align 4
  %identify_only = alloca i32, align 4
  %user_qual = alloca i32, align 4
  %user_black = alloca i32, align 4
  %user_sat = alloca i32, align 4
  %user_flip = alloca i32, align 4
  %use_fuji_rotate = alloca i32, align 4
  %write_to_stdout = alloca i32, align 4
  %quality = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %opm = alloca i8, align 1
  %opt = alloca i8, align 1
  %ofname = alloca i8*, align 8
  %sp = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %bpfile = alloca i8*, align 8
  %dark_frame = alloca i8*, align 8
  %write_ext = alloca i8*, align 8
  %ut = alloca %struct.utimbuf, align 8
  %ofp = alloca %struct._IO_FILE*, align 8
  store i32 0, i32* %1
  store i32 %argc, i32* %2, align 4
  store i8** %argv, i8*** %3, align 8
  store i32 0, i32* %status, align 4
  store i32 0, i32* %timestamp_only, align 4
  store i32 0, i32* %thumbnail_only, align 4
  store i32 0, i32* %identify_only, align 4
  store i32 -1, i32* %user_qual, align 4
  store i32 -1, i32* %user_black, align 4
  store i32 -1, i32* %user_sat, align 4
  store i32 -1, i32* %user_flip, align 4
  store i32 1, i32* %use_fuji_rotate, align 4
  store i32 0, i32* %write_to_stdout, align 4
  store i8* null, i8** %bpfile, align 8
  store i8* null, i8** %dark_frame, align 8
  %4 = call i32 @putenv(i8* getelementptr inbounds ([7 x i8]* @.str613, i32 0, i32 0)) #4
  %5 = load i32* %2, align 4
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %48

; <label>:7                                       ; preds = %0
  %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str614, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str615, i32 0, i32 0))
  %9 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([43 x i8]* @.str616, i32 0, i32 0))
  %10 = load i8*** %3, align 8
  %11 = getelementptr inbounds i8** %10, i64 0
  %12 = load i8** %11, align 8
  %13 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str617, i32 0, i32 0), i8* %12)
  %14 = call i32 @puts(i8* getelementptr inbounds ([33 x i8]* @.str618, i32 0, i32 0))
  %15 = call i32 @puts(i8* getelementptr inbounds ([46 x i8]* @.str619, i32 0, i32 0))
  %16 = call i32 @puts(i8* getelementptr inbounds ([43 x i8]* @.str620, i32 0, i32 0))
  %17 = call i32 @puts(i8* getelementptr inbounds ([47 x i8]* @.str621, i32 0, i32 0))
  %18 = call i32 @puts(i8* getelementptr inbounds ([43 x i8]* @.str622, i32 0, i32 0))
  %19 = call i32 @puts(i8* getelementptr inbounds ([48 x i8]* @.str623, i32 0, i32 0))
  %20 = call i32 @puts(i8* getelementptr inbounds ([48 x i8]* @.str624, i32 0, i32 0))
  %21 = call i32 @puts(i8* getelementptr inbounds ([52 x i8]* @.str625, i32 0, i32 0))
  %22 = call i32 @puts(i8* getelementptr inbounds ([50 x i8]* @.str626, i32 0, i32 0))
  %23 = call i32 @puts(i8* getelementptr inbounds ([38 x i8]* @.str627, i32 0, i32 0))
  %24 = call i32 @puts(i8* getelementptr inbounds ([49 x i8]* @.str628, i32 0, i32 0))
  %25 = call i32 @puts(i8* getelementptr inbounds ([39 x i8]* @.str629, i32 0, i32 0))
  %26 = call i32 @puts(i8* getelementptr inbounds ([50 x i8]* @.str630, i32 0, i32 0))
  %27 = call i32 @puts(i8* getelementptr inbounds ([47 x i8]* @.str631, i32 0, i32 0))
  %28 = call i32 @puts(i8* getelementptr inbounds ([33 x i8]* @.str632, i32 0, i32 0))
  %29 = call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @.str633, i32 0, i32 0))
  %30 = call i32 @puts(i8* getelementptr inbounds ([46 x i8]* @.str634, i32 0, i32 0))
  %31 = call i32 @puts(i8* getelementptr inbounds ([65 x i8]* @.str635, i32 0, i32 0))
  %32 = call i32 @puts(i8* getelementptr inbounds ([54 x i8]* @.str636, i32 0, i32 0))
  %33 = call i32 @puts(i8* getelementptr inbounds ([63 x i8]* @.str637, i32 0, i32 0))
  %34 = call i32 @puts(i8* getelementptr inbounds ([53 x i8]* @.str638, i32 0, i32 0))
  %35 = call i32 @puts(i8* getelementptr inbounds ([54 x i8]* @.str639, i32 0, i32 0))
  %36 = call i32 @puts(i8* getelementptr inbounds ([45 x i8]* @.str640, i32 0, i32 0))
  %37 = call i32 @puts(i8* getelementptr inbounds ([49 x i8]* @.str641, i32 0, i32 0))
  %38 = call i32 @puts(i8* getelementptr inbounds ([44 x i8]* @.str642, i32 0, i32 0))
  %39 = call i32 @puts(i8* getelementptr inbounds ([55 x i8]* @.str643, i32 0, i32 0))
  %40 = call i32 @puts(i8* getelementptr inbounds ([40 x i8]* @.str644, i32 0, i32 0))
  %41 = call i32 @puts(i8* getelementptr inbounds ([58 x i8]* @.str645, i32 0, i32 0))
  %42 = call i32 @puts(i8* getelementptr inbounds ([42 x i8]* @.str646, i32 0, i32 0))
  %43 = call i32 @puts(i8* getelementptr inbounds ([51 x i8]* @.str647, i32 0, i32 0))
  %44 = call i32 @puts(i8* getelementptr inbounds ([57 x i8]* @.str648, i32 0, i32 0))
  %45 = call i32 @puts(i8* getelementptr inbounds ([58 x i8]* @.str649, i32 0, i32 0))
  %46 = call i32 @puts(i8* getelementptr inbounds ([36 x i8]* @.str650, i32 0, i32 0))
  %47 = call i32 @puts(i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0))
  store i32 1, i32* %1
  br label %1133

; <label>:48                                      ; preds = %0
  %49 = load i32* %2, align 4
  %50 = sext i32 %49 to i64
  %51 = load i8*** %3, align 8
  %52 = getelementptr inbounds i8** %51, i64 %50
  store i8* getelementptr inbounds ([1 x i8]* @.str110, i32 0, i32 0), i8** %52, align 8
  store i32 1, i32* %arg, align 4
  br label %53

; <label>:53                                      ; preds = %357, %48
  %54 = load i32* %arg, align 4
  %55 = sext i32 %54 to i64
  %56 = load i8*** %3, align 8
  %57 = getelementptr inbounds i8** %56, i64 %55
  %58 = load i8** %57, align 8
  %59 = getelementptr inbounds i8* %58, i64 0
  %60 = load i8* %59, align 1
  store i8 %60, i8* %opm, align 1
  %61 = sext i8 %60 to i32
  %62 = sub nsw i32 %61, 2
  %63 = or i32 %62, 2
  %64 = icmp eq i32 %63, 43
  br i1 %64, label %65, label %358

; <label>:65                                      ; preds = %53
  %66 = load i32* %arg, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %arg, align 4
  %68 = sext i32 %66 to i64
  %69 = load i8*** %3, align 8
  %70 = getelementptr inbounds i8** %69, i64 %68
  %71 = load i8** %70, align 8
  %72 = getelementptr inbounds i8* %71, i64 1
  %73 = load i8* %72, align 1
  store i8 %73, i8* %opt, align 1
  store i8* getelementptr inbounds ([13 x i8]* @.str651, i32 0, i32 0), i8** %sp, align 8
  %74 = load i8* %opt, align 1
  %75 = sext i8 %74 to i32
  %76 = call i8* @strchr(i8* getelementptr inbounds ([13 x i8]* @.str651, i32 0, i32 0), i32 %75) #10
  store i8* %76, i8** %cp, align 8
  %77 = icmp ne i8* %76, null
  br i1 %77, label %78, label %120

; <label>:78                                      ; preds = %65
  store i32 0, i32* %i, align 4
  br label %79

; <label>:79                                      ; preds = %116, %78
  %80 = load i32* %i, align 4
  %81 = load i8** %cp, align 8
  %82 = load i8** %sp, align 8
  %83 = ptrtoint i8* %81 to i64
  %84 = ptrtoint i8* %82 to i64
  %85 = sub i64 %83, %84
  %86 = getelementptr inbounds [13 x i8]* @.str652, i32 0, i64 %85
  %87 = load i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = sub nsw i32 %88, 48
  %90 = icmp slt i32 %80, %89
  br i1 %90, label %91, label %119

; <label>:91                                      ; preds = %79
  %92 = load i32* %arg, align 4
  %93 = load i32* %i, align 4
  %94 = add nsw i32 %92, %93
  %95 = sext i32 %94 to i64
  %96 = load i8*** %3, align 8
  %97 = getelementptr inbounds i8** %96, i64 %95
  %98 = load i8** %97, align 8
  %99 = getelementptr inbounds i8* %98, i64 0
  %100 = load i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i16** @__ctype_b_loc() #9
  %104 = load i16** %103, align 8
  %105 = getelementptr inbounds i16* %104, i64 %102
  %106 = load i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = and i32 %107, 2048
  %109 = icmp ne i32 %108, 0
  br i1 %109, label %115, label %110

; <label>:110                                     ; preds = %91
  %111 = load %struct._IO_FILE** @stderr, align 8
  %112 = load i8* %opt, align 1
  %113 = sext i8 %112 to i32
  %114 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %111, i8* getelementptr inbounds ([31 x i8]* @.str653, i32 0, i32 0), i32 %113)
  store i32 1, i32* %1
  br label %1133

; <label>:115                                     ; preds = %91
  br label %116

; <label>:116                                     ; preds = %115
  %117 = load i32* %i, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %i, align 4
  br label %79

; <label>:119                                     ; preds = %79
  br label %120

; <label>:120                                     ; preds = %119, %65
  %121 = load i8* %opt, align 1
  %122 = sext i8 %121 to i32
  switch i32 %122, label %352 [
    i32 110, label %123
    i32 98, label %132
    i32 114, label %141
    i32 67, label %161
    i32 103, label %178
    i32 107, label %194
    i32 83, label %202
    i32 116, label %210
    i32 113, label %218
    i32 109, label %226
    i32 72, label %234
    i32 115, label %242
    i32 111, label %260
    i32 80, label %295
    i32 75, label %302
    i32 122, label %309
    i32 101, label %310
    i32 105, label %311
    i32 99, label %312
    i32 118, label %313
    i32 104, label %314
    i32 102, label %315
    i32 65, label %316
    i32 97, label %335
    i32 119, label %336
    i32 77, label %337
    i32 68, label %342
    i32 100, label %342
    i32 106, label %348
    i32 87, label %349
    i32 84, label %350
    i32 52, label %351
  ]

; <label>:123                                     ; preds = %120
  %124 = load i32* %arg, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %arg, align 4
  %126 = sext i32 %124 to i64
  %127 = load i8*** %3, align 8
  %128 = getelementptr inbounds i8** %127, i64 %126
  %129 = load i8** %128, align 8
  %130 = call double @atof(i8* %129) #10
  %131 = fptrunc double %130 to float
  store float %131, float* @threshold, align 4
  br label %357

; <label>:132                                     ; preds = %120
  %133 = load i32* %arg, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %arg, align 4
  %135 = sext i32 %133 to i64
  %136 = load i8*** %3, align 8
  %137 = getelementptr inbounds i8** %136, i64 %135
  %138 = load i8** %137, align 8
  %139 = call double @atof(i8* %138) #10
  %140 = fptrunc double %139 to float
  store float %140, float* @bright, align 4
  br label %357

; <label>:141                                     ; preds = %120
  store i32 0, i32* %c, align 4
  br label %142

; <label>:142                                     ; preds = %157, %141
  %143 = load i32* %c, align 4
  %144 = icmp slt i32 %143, 4
  br i1 %144, label %145, label %160

; <label>:145                                     ; preds = %142
  %146 = load i32* %arg, align 4
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %arg, align 4
  %148 = sext i32 %146 to i64
  %149 = load i8*** %3, align 8
  %150 = getelementptr inbounds i8** %149, i64 %148
  %151 = load i8** %150, align 8
  %152 = call double @atof(i8* %151) #10
  %153 = fptrunc double %152 to float
  %154 = load i32* %c, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [4 x float]* @user_mul, i32 0, i64 %155
  store float %153, float* %156, align 4
  br label %157

; <label>:157                                     ; preds = %145
  %158 = load i32* %c, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %c, align 4
  br label %142

; <label>:160                                     ; preds = %142
  br label %357

; <label>:161                                     ; preds = %120
  %162 = load i32* %arg, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %arg, align 4
  %164 = sext i32 %162 to i64
  %165 = load i8*** %3, align 8
  %166 = getelementptr inbounds i8** %165, i64 %164
  %167 = load i8** %166, align 8
  %168 = call double @atof(i8* %167) #10
  %169 = fdiv double 1.000000e+00, %168
  store double %169, double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 0), align 8
  %170 = load i32* %arg, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %arg, align 4
  %172 = sext i32 %170 to i64
  %173 = load i8*** %3, align 8
  %174 = getelementptr inbounds i8** %173, i64 %172
  %175 = load i8** %174, align 8
  %176 = call double @atof(i8* %175) #10
  %177 = fdiv double 1.000000e+00, %176
  store double %177, double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 2), align 8
  br label %357

; <label>:178                                     ; preds = %120
  %179 = load i32* %arg, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %arg, align 4
  %181 = sext i32 %179 to i64
  %182 = load i8*** %3, align 8
  %183 = getelementptr inbounds i8** %182, i64 %181
  %184 = load i8** %183, align 8
  %185 = call double @atof(i8* %184) #10
  %186 = fdiv double 1.000000e+00, %185
  store double %186, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 0), align 8
  %187 = load i32* %arg, align 4
  %188 = add nsw i32 %187, 1
  store i32 %188, i32* %arg, align 4
  %189 = sext i32 %187 to i64
  %190 = load i8*** %3, align 8
  %191 = getelementptr inbounds i8** %190, i64 %189
  %192 = load i8** %191, align 8
  %193 = call double @atof(i8* %192) #10
  store double %193, double* getelementptr inbounds ([5 x double]* @gamm, i32 0, i64 1), align 8
  br label %357

; <label>:194                                     ; preds = %120
  %195 = load i32* %arg, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %arg, align 4
  %197 = sext i32 %195 to i64
  %198 = load i8*** %3, align 8
  %199 = getelementptr inbounds i8** %198, i64 %197
  %200 = load i8** %199, align 8
  %201 = call i32 @atoi(i8* %200) #10
  store i32 %201, i32* %user_black, align 4
  br label %357

; <label>:202                                     ; preds = %120
  %203 = load i32* %arg, align 4
  %204 = add nsw i32 %203, 1
  store i32 %204, i32* %arg, align 4
  %205 = sext i32 %203 to i64
  %206 = load i8*** %3, align 8
  %207 = getelementptr inbounds i8** %206, i64 %205
  %208 = load i8** %207, align 8
  %209 = call i32 @atoi(i8* %208) #10
  store i32 %209, i32* %user_sat, align 4
  br label %357

; <label>:210                                     ; preds = %120
  %211 = load i32* %arg, align 4
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %arg, align 4
  %213 = sext i32 %211 to i64
  %214 = load i8*** %3, align 8
  %215 = getelementptr inbounds i8** %214, i64 %213
  %216 = load i8** %215, align 8
  %217 = call i32 @atoi(i8* %216) #10
  store i32 %217, i32* %user_flip, align 4
  br label %357

; <label>:218                                     ; preds = %120
  %219 = load i32* %arg, align 4
  %220 = add nsw i32 %219, 1
  store i32 %220, i32* %arg, align 4
  %221 = sext i32 %219 to i64
  %222 = load i8*** %3, align 8
  %223 = getelementptr inbounds i8** %222, i64 %221
  %224 = load i8** %223, align 8
  %225 = call i32 @atoi(i8* %224) #10
  store i32 %225, i32* %user_qual, align 4
  br label %357

; <label>:226                                     ; preds = %120
  %227 = load i32* %arg, align 4
  %228 = add nsw i32 %227, 1
  store i32 %228, i32* %arg, align 4
  %229 = sext i32 %227 to i64
  %230 = load i8*** %3, align 8
  %231 = getelementptr inbounds i8** %230, i64 %229
  %232 = load i8** %231, align 8
  %233 = call i32 @atoi(i8* %232) #10
  store i32 %233, i32* @med_passes, align 4
  br label %357

; <label>:234                                     ; preds = %120
  %235 = load i32* %arg, align 4
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %arg, align 4
  %237 = sext i32 %235 to i64
  %238 = load i8*** %3, align 8
  %239 = getelementptr inbounds i8** %238, i64 %237
  %240 = load i8** %239, align 8
  %241 = call i32 @atoi(i8* %240) #10
  store i32 %241, i32* @highlight, align 4
  br label %357

; <label>:242                                     ; preds = %120
  %243 = load i32* %arg, align 4
  %244 = sext i32 %243 to i64
  %245 = load i8*** %3, align 8
  %246 = getelementptr inbounds i8** %245, i64 %244
  %247 = load i8** %246, align 8
  %248 = call i32 @atoi(i8* %247) #10
  %249 = call i32 @abs(i32 %248) #9
  store i32 %249, i32* @shot_select, align 4
  %250 = load i32* %arg, align 4
  %251 = add nsw i32 %250, 1
  store i32 %251, i32* %arg, align 4
  %252 = sext i32 %250 to i64
  %253 = load i8*** %3, align 8
  %254 = getelementptr inbounds i8** %253, i64 %252
  %255 = load i8** %254, align 8
  %256 = call i32 @strcmp(i8* %255, i8* getelementptr inbounds ([4 x i8]* @.str654, i32 0, i32 0)) #10
  %257 = icmp ne i32 %256, 0
  %258 = xor i1 %257, true
  %259 = zext i1 %258 to i32
  store i32 %259, i32* @multi_out, align 4
  br label %357

; <label>:260                                     ; preds = %120
  %261 = load i32* %arg, align 4
  %262 = sext i32 %261 to i64
  %263 = load i8*** %3, align 8
  %264 = getelementptr inbounds i8** %263, i64 %262
  %265 = load i8** %264, align 8
  %266 = getelementptr inbounds i8* %265, i64 0
  %267 = load i8* %266, align 1
  %268 = sext i8 %267 to i32
  %269 = sext i32 %268 to i64
  %270 = call i16** @__ctype_b_loc() #9
  %271 = load i16** %270, align 8
  %272 = getelementptr inbounds i16* %271, i64 %269
  %273 = load i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = and i32 %274, 2048
  %276 = icmp ne i32 %275, 0
  br i1 %276, label %277, label %294

; <label>:277                                     ; preds = %260
  %278 = load i32* %arg, align 4
  %279 = sext i32 %278 to i64
  %280 = load i8*** %3, align 8
  %281 = getelementptr inbounds i8** %280, i64 %279
  %282 = load i8** %281, align 8
  %283 = getelementptr inbounds i8* %282, i64 1
  %284 = load i8* %283, align 1
  %285 = icmp ne i8 %284, 0
  br i1 %285, label %294, label %286

; <label>:286                                     ; preds = %277
  %287 = load i32* %arg, align 4
  %288 = add nsw i32 %287, 1
  store i32 %288, i32* %arg, align 4
  %289 = sext i32 %287 to i64
  %290 = load i8*** %3, align 8
  %291 = getelementptr inbounds i8** %290, i64 %289
  %292 = load i8** %291, align 8
  %293 = call i32 @atoi(i8* %292) #10
  store i32 %293, i32* @output_color, align 4
  br label %294

; <label>:294                                     ; preds = %286, %277, %260
  br label %357

; <label>:295                                     ; preds = %120
  %296 = load i32* %arg, align 4
  %297 = add nsw i32 %296, 1
  store i32 %297, i32* %arg, align 4
  %298 = sext i32 %296 to i64
  %299 = load i8*** %3, align 8
  %300 = getelementptr inbounds i8** %299, i64 %298
  %301 = load i8** %300, align 8
  store i8* %301, i8** %bpfile, align 8
  br label %357

; <label>:302                                     ; preds = %120
  %303 = load i32* %arg, align 4
  %304 = add nsw i32 %303, 1
  store i32 %304, i32* %arg, align 4
  %305 = sext i32 %303 to i64
  %306 = load i8*** %3, align 8
  %307 = getelementptr inbounds i8** %306, i64 %305
  %308 = load i8** %307, align 8
  store i8* %308, i8** %dark_frame, align 8
  br label %357

; <label>:309                                     ; preds = %120
  store i32 1, i32* %timestamp_only, align 4
  br label %357

; <label>:310                                     ; preds = %120
  store i32 1, i32* %thumbnail_only, align 4
  br label %357

; <label>:311                                     ; preds = %120
  store i32 1, i32* %identify_only, align 4
  br label %357

; <label>:312                                     ; preds = %120
  store i32 1, i32* %write_to_stdout, align 4
  br label %357

; <label>:313                                     ; preds = %120
  store i32 1, i32* @verbose, align 4
  br label %357

; <label>:314                                     ; preds = %120
  store i32 1, i32* @half_size, align 4
  br label %315

; <label>:315                                     ; preds = %120, %314
  store i32 1, i32* @four_color_rgb, align 4
  br label %357

; <label>:316                                     ; preds = %120
  store i32 0, i32* %c, align 4
  br label %317

; <label>:317                                     ; preds = %331, %316
  %318 = load i32* %c, align 4
  %319 = icmp slt i32 %318, 4
  br i1 %319, label %320, label %334

; <label>:320                                     ; preds = %317
  %321 = load i32* %arg, align 4
  %322 = add nsw i32 %321, 1
  store i32 %322, i32* %arg, align 4
  %323 = sext i32 %321 to i64
  %324 = load i8*** %3, align 8
  %325 = getelementptr inbounds i8** %324, i64 %323
  %326 = load i8** %325, align 8
  %327 = call i32 @atoi(i8* %326) #10
  %328 = load i32* %c, align 4
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds [4 x i32]* @greybox, i32 0, i64 %329
  store i32 %327, i32* %330, align 4
  br label %331

; <label>:331                                     ; preds = %320
  %332 = load i32* %c, align 4
  %333 = add nsw i32 %332, 1
  store i32 %333, i32* %c, align 4
  br label %317

; <label>:334                                     ; preds = %317
  br label %335

; <label>:335                                     ; preds = %120, %334
  store i32 1, i32* @use_auto_wb, align 4
  br label %357

; <label>:336                                     ; preds = %120
  store i32 1, i32* @use_camera_wb, align 4
  br label %357

; <label>:337                                     ; preds = %120
  %338 = load i8* %opm, align 1
  %339 = sext i8 %338 to i32
  %340 = icmp eq i32 %339, 43
  %341 = zext i1 %340 to i32
  store i32 %341, i32* @use_camera_matrix, align 4
  br label %357

; <label>:342                                     ; preds = %120, %120
  %343 = load i8* %opt, align 1
  %344 = sext i8 %343 to i32
  %345 = icmp eq i32 %344, 68
  %346 = zext i1 %345 to i32
  %347 = add nsw i32 1, %346
  store i32 %347, i32* @document_mode, align 4
  br label %348

; <label>:348                                     ; preds = %120, %342
  store i32 0, i32* %use_fuji_rotate, align 4
  br label %357

; <label>:349                                     ; preds = %120
  store i32 1, i32* @no_auto_bright, align 4
  br label %357

; <label>:350                                     ; preds = %120
  store i32 1, i32* @output_tiff, align 4
  br label %357

; <label>:351                                     ; preds = %120
  store i32 16, i32* @output_bps, align 4
  br label %357

; <label>:352                                     ; preds = %120
  %353 = load %struct._IO_FILE** @stderr, align 8
  %354 = load i8* %opt, align 1
  %355 = sext i8 %354 to i32
  %356 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %353, i8* getelementptr inbounds ([23 x i8]* @.str655, i32 0, i32 0), i32 %355)
  store i32 1, i32* %1
  br label %1133

; <label>:357                                     ; preds = %351, %350, %349, %348, %337, %336, %335, %315, %313, %312, %311, %310, %309, %302, %295, %294, %242, %234, %226, %218, %210, %202, %194, %178, %161, %160, %132, %123
  br label %53

; <label>:358                                     ; preds = %53
  %359 = load i32* @use_camera_matrix, align 4
  %360 = icmp slt i32 %359, 0
  br i1 %360, label %361, label %363

; <label>:361                                     ; preds = %358
  %362 = load i32* @use_camera_wb, align 4
  store i32 %362, i32* @use_camera_matrix, align 4
  br label %363

; <label>:363                                     ; preds = %361, %358
  %364 = load i32* %arg, align 4
  %365 = load i32* %2, align 4
  %366 = icmp eq i32 %364, %365
  br i1 %366, label %367, label %370

; <label>:367                                     ; preds = %363
  %368 = load %struct._IO_FILE** @stderr, align 8
  %369 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %368, i8* getelementptr inbounds ([22 x i8]* @.str656, i32 0, i32 0))
  store i32 1, i32* %1
  br label %1133

; <label>:370                                     ; preds = %363
  %371 = load i32* %write_to_stdout, align 4
  %372 = icmp ne i32 %371, 0
  br i1 %372, label %373, label %380

; <label>:373                                     ; preds = %370
  %374 = call i32 @isatty(i32 1) #4
  %375 = icmp ne i32 %374, 0
  br i1 %375, label %376, label %379

; <label>:376                                     ; preds = %373
  %377 = load %struct._IO_FILE** @stderr, align 8
  %378 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %377, i8* getelementptr inbounds ([42 x i8]* @.str657, i32 0, i32 0))
  store i32 1, i32* %1
  br label %1133

; <label>:379                                     ; preds = %373
  br label %380

; <label>:380                                     ; preds = %379, %370
  br label %381

; <label>:381                                     ; preds = %1128, %380
  %382 = load i32* %arg, align 4
  %383 = load i32* %2, align 4
  %384 = icmp slt i32 %382, %383
  br i1 %384, label %385, label %1131

; <label>:385                                     ; preds = %381
  store i32 1, i32* %status, align 4
  store [4 x i16]* null, [4 x i16]** @image, align 8
  store i32* null, i32** @oprof, align 8
  store i8* null, i8** %ofname, align 8
  store i8* null, i8** @meta_data, align 8
  %386 = load %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %386, %struct._IO_FILE** %ofp, align 8
  %387 = call i32 @_setjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @failure, i32 0, i32 0)) #11
  %388 = icmp ne i32 %387, 0
  br i1 %388, label %389, label %404

; <label>:389                                     ; preds = %385
  %390 = load %struct._IO_FILE** @ifp, align 8
  %391 = call i32 @fileno(%struct._IO_FILE* %390) #4
  %392 = icmp sgt i32 %391, 2
  br i1 %392, label %393, label %396

; <label>:393                                     ; preds = %389
  %394 = load %struct._IO_FILE** @ifp, align 8
  %395 = call i32 @fclose(%struct._IO_FILE* %394)
  br label %396

; <label>:396                                     ; preds = %393, %389
  %397 = load %struct._IO_FILE** %ofp, align 8
  %398 = call i32 @fileno(%struct._IO_FILE* %397) #4
  %399 = icmp sgt i32 %398, 2
  br i1 %399, label %400, label %403

; <label>:400                                     ; preds = %396
  %401 = load %struct._IO_FILE** %ofp, align 8
  %402 = call i32 @fclose(%struct._IO_FILE* %401)
  br label %403

; <label>:403                                     ; preds = %400, %396
  store i32 1, i32* %status, align 4
  br label %1092

; <label>:404                                     ; preds = %385
  %405 = load i32* %arg, align 4
  %406 = sext i32 %405 to i64
  %407 = load i8*** %3, align 8
  %408 = getelementptr inbounds i8** %407, i64 %406
  %409 = load i8** %408, align 8
  store i8* %409, i8** @ifname, align 8
  %410 = load i8** @ifname, align 8
  %411 = call %struct._IO_FILE* @fopen(i8* %410, i8* getelementptr inbounds ([3 x i8]* @.str64, i32 0, i32 0))
  store %struct._IO_FILE* %411, %struct._IO_FILE** @ifp, align 8
  %412 = icmp ne %struct._IO_FILE* %411, null
  br i1 %412, label %415, label %413

; <label>:413                                     ; preds = %404
  %414 = load i8** @ifname, align 8
  call void @perror(i8* %414)
  br label %1128

; <label>:415                                     ; preds = %404
  call void @identify()
  %416 = load i32* @is_raw, align 4
  %417 = icmp ne i32 %416, 0
  %418 = xor i1 %417, true
  %419 = zext i1 %418 to i32
  store i32 %419, i32* %status, align 4
  %420 = load i32* %user_flip, align 4
  %421 = icmp sge i32 %420, 0
  br i1 %421, label %422, label %424

; <label>:422                                     ; preds = %415
  %423 = load i32* %user_flip, align 4
  store i32 %423, i32* @flip, align 4
  br label %424

; <label>:424                                     ; preds = %422, %415
  %425 = load i32* @flip, align 4
  %426 = add nsw i32 %425, 3600
  %427 = srem i32 %426, 360
  switch i32 %427, label %431 [
    i32 270, label %428
    i32 180, label %429
    i32 90, label %430
  ]

; <label>:428                                     ; preds = %424
  store i32 5, i32* @flip, align 4
  br label %431

; <label>:429                                     ; preds = %424
  store i32 3, i32* @flip, align 4
  br label %431

; <label>:430                                     ; preds = %424
  store i32 6, i32* @flip, align 4
  br label %431

; <label>:431                                     ; preds = %430, %424, %429, %428
  %432 = load i32* %timestamp_only, align 4
  %433 = icmp ne i32 %432, 0
  br i1 %433, label %434, label %468

; <label>:434                                     ; preds = %431
  %435 = load i64* @timestamp, align 8
  %436 = icmp ne i64 %435, 0
  %437 = xor i1 %436, true
  %438 = zext i1 %437 to i32
  store i32 %438, i32* %status, align 4
  br i1 %437, label %439, label %443

; <label>:439                                     ; preds = %434
  %440 = load %struct._IO_FILE** @stderr, align 8
  %441 = load i8** @ifname, align 8
  %442 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %440, i8* getelementptr inbounds ([22 x i8]* @.str658, i32 0, i32 0), i8* %441)
  br label %467

; <label>:443                                     ; preds = %434
  %444 = load i32* %identify_only, align 4
  %445 = icmp ne i32 %444, 0
  br i1 %445, label %446, label %451

; <label>:446                                     ; preds = %443
  %447 = load i64* @timestamp, align 8
  %448 = load i32* @shot_order, align 4
  %449 = load i8** @ifname, align 8
  %450 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str659, i32 0, i32 0), i64 %447, i32 %448, i8* %449)
  br label %466

; <label>:451                                     ; preds = %443
  %452 = load i32* @verbose, align 4
  %453 = icmp ne i32 %452, 0
  br i1 %453, label %454, label %460

; <label>:454                                     ; preds = %451
  %455 = load %struct._IO_FILE** @stderr, align 8
  %456 = load i8** @ifname, align 8
  %457 = load i64* @timestamp, align 8
  %458 = trunc i64 %457 to i32
  %459 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %455, i8* getelementptr inbounds ([20 x i8]* @.str660, i32 0, i32 0), i8* %456, i32 %458)
  br label %460

; <label>:460                                     ; preds = %454, %451
  %461 = load i64* @timestamp, align 8
  %462 = getelementptr inbounds %struct.utimbuf* %ut, i32 0, i32 1
  store i64 %461, i64* %462, align 8
  %463 = getelementptr inbounds %struct.utimbuf* %ut, i32 0, i32 0
  store i64 %461, i64* %463, align 8
  %464 = load i8** @ifname, align 8
  %465 = call i32 @utime(i8* %464, %struct.utimbuf* %ut) #4
  br label %466

; <label>:466                                     ; preds = %460, %446
  br label %467

; <label>:467                                     ; preds = %466, %439
  br label %818

; <label>:468                                     ; preds = %431
  store void (%struct._IO_FILE*)* @write_ppm_tiff, void (%struct._IO_FILE*)** @write_fun, align 8
  %469 = load i32* %thumbnail_only, align 4
  %470 = icmp ne i32 %469, 0
  br i1 %470, label %471, label %495

; <label>:471                                     ; preds = %468
  %472 = load i64* @thumb_offset, align 8
  %473 = icmp ne i64 %472, 0
  %474 = xor i1 %473, true
  %475 = zext i1 %474 to i32
  store i32 %475, i32* %status, align 4
  br i1 %474, label %476, label %480

; <label>:476                                     ; preds = %471
  %477 = load %struct._IO_FILE** @stderr, align 8
  %478 = load i8** @ifname, align 8
  %479 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %477, i8* getelementptr inbounds ([22 x i8]* @.str661, i32 0, i32 0), i8* %478)
  br label %818

; <label>:480                                     ; preds = %471
  %481 = load void (...)** @thumb_load_raw, align 8
  %482 = icmp ne void (...)* %481, null
  br i1 %482, label %483, label %488

; <label>:483                                     ; preds = %480
  %484 = load void (...)** @thumb_load_raw, align 8
  store void (...)* %484, void (...)** @load_raw, align 8
  %485 = load i64* @thumb_offset, align 8
  store i64 %485, i64* @data_offset, align 8
  %486 = load i16* @thumb_height, align 2
  store i16 %486, i16* @height, align 2
  %487 = load i16* @thumb_width, align 2
  store i16 %487, i16* @width, align 2
  store i32 0, i32* @filters, align 4
  br label %493

; <label>:488                                     ; preds = %480
  %489 = load %struct._IO_FILE** @ifp, align 8
  %490 = load i64* @thumb_offset, align 8
  %491 = call i32 @fseek(%struct._IO_FILE* %489, i64 %490, i32 0)
  %492 = load void (%struct._IO_FILE*)** @write_thumb, align 8
  store void (%struct._IO_FILE*)* %492, void (%struct._IO_FILE*)** @write_fun, align 8
  br label %1005

; <label>:493                                     ; preds = %483
  br label %494

; <label>:494                                     ; preds = %493
  br label %495

; <label>:495                                     ; preds = %494, %468
  %496 = load void (...)** @load_raw, align 8
  %497 = icmp eq void (...)* %496, bitcast (void ()* @kodak_ycbcr_load_raw to void (...)*)
  br i1 %497, label %498, label %513

; <label>:498                                     ; preds = %495
  %499 = load i16* @height, align 2
  %500 = zext i16 %499 to i32
  %501 = and i32 %500, 1
  %502 = load i16* @height, align 2
  %503 = zext i16 %502 to i32
  %504 = add nsw i32 %503, %501
  %505 = trunc i32 %504 to i16
  store i16 %505, i16* @height, align 2
  %506 = load i16* @width, align 2
  %507 = zext i16 %506 to i32
  %508 = and i32 %507, 1
  %509 = load i16* @width, align 2
  %510 = zext i16 %509 to i32
  %511 = add nsw i32 %510, %508
  %512 = trunc i32 %511 to i16
  store i16 %512, i16* @width, align 2
  br label %513

; <label>:513                                     ; preds = %498, %495
  %514 = load i32* %identify_only, align 4
  %515 = icmp ne i32 %514, 0
  br i1 %515, label %516, label %604

; <label>:516                                     ; preds = %513
  %517 = load i32* @verbose, align 4
  %518 = icmp ne i32 %517, 0
  br i1 %518, label %519, label %604

; <label>:519                                     ; preds = %516
  %520 = load i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i64 0), align 1
  %521 = sext i8 %520 to i32
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %604

; <label>:523                                     ; preds = %519
  %524 = load i8** @ifname, align 8
  %525 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str662, i32 0, i32 0), i8* %524)
  %526 = call i8* @ctime(i64* @timestamp) #4
  %527 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str663, i32 0, i32 0), i8* %526)
  %528 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str664, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0))
  %529 = load i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i64 0), align 1
  %530 = icmp ne i8 %529, 0
  br i1 %530, label %531, label %533

; <label>:531                                     ; preds = %523
  %532 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str665, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @artist, i32 0, i32 0))
  br label %533

; <label>:533                                     ; preds = %531, %523
  %534 = load i32* @dng_version, align 4
  %535 = icmp ne i32 %534, 0
  br i1 %535, label %536, label %554

; <label>:536                                     ; preds = %533
  %537 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str666, i32 0, i32 0))
  store i32 24, i32* %i, align 4
  br label %538

; <label>:538                                     ; preds = %550, %536
  %539 = load i32* %i, align 4
  %540 = icmp sge i32 %539, 0
  br i1 %540, label %541, label %553

; <label>:541                                     ; preds = %538
  %542 = load i32* @dng_version, align 4
  %543 = load i32* %i, align 4
  %544 = lshr i32 %542, %543
  %545 = and i32 %544, 255
  %546 = load i32* %i, align 4
  %547 = icmp ne i32 %546, 0
  %548 = select i1 %547, i32 46, i32 10
  %549 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str667, i32 0, i32 0), i32 %545, i32 %548)
  br label %550

; <label>:550                                     ; preds = %541
  %551 = load i32* %i, align 4
  %552 = sub nsw i32 %551, 8
  store i32 %552, i32* %i, align 4
  br label %538

; <label>:553                                     ; preds = %538
  br label %554

; <label>:554                                     ; preds = %553, %533
  %555 = load float* @iso_speed, align 4
  %556 = fptosi float %555 to i32
  %557 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str668, i32 0, i32 0), i32 %556)
  %558 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str669, i32 0, i32 0))
  %559 = load float* @shutter, align 4
  %560 = fcmp ogt float %559, 0.000000e+00
  br i1 %560, label %561, label %568

; <label>:561                                     ; preds = %554
  %562 = load float* @shutter, align 4
  %563 = fcmp olt float %562, 1.000000e+00
  br i1 %563, label %564, label %568

; <label>:564                                     ; preds = %561
  %565 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str670, i32 0, i32 0))
  %566 = load float* @shutter, align 4
  %567 = fdiv float 1.000000e+00, %566
  store float %567, float* @shutter, align 4
  br label %568

; <label>:568                                     ; preds = %564, %561, %554
  %569 = load float* @shutter, align 4
  %570 = fpext float %569 to double
  %571 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str671, i32 0, i32 0), double %570)
  %572 = load float* @aperture, align 4
  %573 = fpext float %572 to double
  %574 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str672, i32 0, i32 0), double %573)
  %575 = load float* @focal_len, align 4
  %576 = fpext float %575 to double
  %577 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([24 x i8]* @.str673, i32 0, i32 0), double %576)
  %578 = load i32* @profile_length, align 4
  %579 = icmp ne i32 %578, 0
  %580 = select i1 %579, i8* getelementptr inbounds ([4 x i8]* @.str675, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str676, i32 0, i32 0)
  %581 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str674, i32 0, i32 0), i8* %580)
  %582 = load i32* @is_raw, align 4
  %583 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str677, i32 0, i32 0), i32 %582)
  %584 = load double* @pixel_aspect, align 8
  %585 = fcmp une double %584, 1.000000e+00
  br i1 %585, label %586, label %589

; <label>:586                                     ; preds = %568
  %587 = load double* @pixel_aspect, align 8
  %588 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str678, i32 0, i32 0), double %587)
  br label %589

; <label>:589                                     ; preds = %586, %568
  %590 = load i64* @thumb_offset, align 8
  %591 = icmp ne i64 %590, 0
  br i1 %591, label %592, label %598

; <label>:592                                     ; preds = %589
  %593 = load i16* @thumb_width, align 2
  %594 = zext i16 %593 to i32
  %595 = load i16* @thumb_height, align 2
  %596 = zext i16 %595 to i32
  %597 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str679, i32 0, i32 0), i32 %594, i32 %596)
  br label %598

; <label>:598                                     ; preds = %592, %589
  %599 = load i16* @raw_width, align 2
  %600 = zext i16 %599 to i32
  %601 = load i16* @raw_height, align 2
  %602 = zext i16 %601 to i32
  %603 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str680, i32 0, i32 0), i32 %600, i32 %602)
  br label %612

; <label>:604                                     ; preds = %519, %516, %513
  %605 = load i32* @is_raw, align 4
  %606 = icmp ne i32 %605, 0
  br i1 %606, label %611, label %607

; <label>:607                                     ; preds = %604
  %608 = load %struct._IO_FILE** @stderr, align 8
  %609 = load i8** @ifname, align 8
  %610 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %608, i8* getelementptr inbounds ([23 x i8]* @.str681, i32 0, i32 0), i8* %609)
  br label %611

; <label>:611                                     ; preds = %607, %604
  br label %612

; <label>:612                                     ; preds = %611, %598
  %613 = load i32* @is_raw, align 4
  %614 = icmp ne i32 %613, 0
  br i1 %614, label %616, label %615

; <label>:615                                     ; preds = %612
  br label %818

; <label>:616                                     ; preds = %612
  %617 = load i32* @filters, align 4
  %618 = icmp ne i32 %617, 0
  br i1 %618, label %619, label %633

; <label>:619                                     ; preds = %616
  %620 = load i32* @half_size, align 4
  %621 = icmp ne i32 %620, 0
  br i1 %621, label %631, label %622

; <label>:622                                     ; preds = %619
  %623 = load float* @threshold, align 4
  %624 = fcmp une float %623, 0.000000e+00
  br i1 %624, label %631, label %625

; <label>:625                                     ; preds = %622
  %626 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 0), align 8
  %627 = fcmp une double %626, 1.000000e+00
  br i1 %627, label %631, label %628

; <label>:628                                     ; preds = %625
  %629 = load double* getelementptr inbounds ([4 x double]* @aber, i32 0, i64 2), align 8
  %630 = fcmp une double %629, 1.000000e+00
  br label %631

; <label>:631                                     ; preds = %628, %625, %622, %619
  %632 = phi i1 [ true, %625 ], [ true, %622 ], [ true, %619 ], [ %630, %628 ]
  br label %633

; <label>:633                                     ; preds = %631, %616
  %634 = phi i1 [ false, %616 ], [ %632, %631 ]
  %635 = zext i1 %634 to i32
  %636 = trunc i32 %635 to i16
  store i16 %636, i16* @shrink, align 2
  %637 = load i16* @height, align 2
  %638 = zext i16 %637 to i32
  %639 = load i16* @shrink, align 2
  %640 = zext i16 %639 to i32
  %641 = add nsw i32 %638, %640
  %642 = load i16* @shrink, align 2
  %643 = zext i16 %642 to i32
  %644 = ashr i32 %641, %643
  %645 = trunc i32 %644 to i16
  store i16 %645, i16* @iheight, align 2
  %646 = load i16* @width, align 2
  %647 = zext i16 %646 to i32
  %648 = load i16* @shrink, align 2
  %649 = zext i16 %648 to i32
  %650 = add nsw i32 %647, %649
  %651 = load i16* @shrink, align 2
  %652 = zext i16 %651 to i32
  %653 = ashr i32 %650, %652
  %654 = trunc i32 %653 to i16
  store i16 %654, i16* @iwidth, align 2
  %655 = load i32* %identify_only, align 4
  %656 = icmp ne i32 %655, 0
  br i1 %656, label %657, label %821

; <label>:657                                     ; preds = %633
  %658 = load i32* @verbose, align 4
  %659 = icmp ne i32 %658, 0
  br i1 %659, label %660, label %814

; <label>:660                                     ; preds = %657
  %661 = load i32* %use_fuji_rotate, align 4
  %662 = icmp ne i32 %661, 0
  br i1 %662, label %663, label %716

; <label>:663                                     ; preds = %660
  %664 = load i16* @fuji_width, align 2
  %665 = icmp ne i16 %664, 0
  br i1 %665, label %666, label %692

; <label>:666                                     ; preds = %663
  %667 = load i16* @fuji_width, align 2
  %668 = zext i16 %667 to i32
  %669 = sub nsw i32 %668, 1
  %670 = load i16* @shrink, align 2
  %671 = zext i16 %670 to i32
  %672 = add nsw i32 %669, %671
  %673 = load i16* @shrink, align 2
  %674 = zext i16 %673 to i32
  %675 = ashr i32 %672, %674
  %676 = trunc i32 %675 to i16
  store i16 %676, i16* @fuji_width, align 2
  %677 = load i16* @fuji_width, align 2
  %678 = zext i16 %677 to i32
  %679 = sitofp i32 %678 to double
  %680 = call double @sqrt(double 5.000000e-01) #4
  %681 = fdiv double %679, %680
  %682 = fptoui double %681 to i16
  store i16 %682, i16* @iwidth, align 2
  %683 = load i16* @iheight, align 2
  %684 = zext i16 %683 to i32
  %685 = load i16* @fuji_width, align 2
  %686 = zext i16 %685 to i32
  %687 = sub nsw i32 %684, %686
  %688 = sitofp i32 %687 to double
  %689 = call double @sqrt(double 5.000000e-01) #4
  %690 = fdiv double %688, %689
  %691 = fptoui double %690 to i16
  store i16 %691, i16* @iheight, align 2
  br label %715

; <label>:692                                     ; preds = %663
  %693 = load double* @pixel_aspect, align 8
  %694 = fcmp olt double %693, 1.000000e+00
  br i1 %694, label %695, label %703

; <label>:695                                     ; preds = %692
  %696 = load i16* @iheight, align 2
  %697 = zext i16 %696 to i32
  %698 = sitofp i32 %697 to double
  %699 = load double* @pixel_aspect, align 8
  %700 = fdiv double %698, %699
  %701 = fadd double %700, 5.000000e-01
  %702 = fptoui double %701 to i16
  store i16 %702, i16* @iheight, align 2
  br label %703

; <label>:703                                     ; preds = %695, %692
  %704 = load double* @pixel_aspect, align 8
  %705 = fcmp ogt double %704, 1.000000e+00
  br i1 %705, label %706, label %714

; <label>:706                                     ; preds = %703
  %707 = load i16* @iwidth, align 2
  %708 = zext i16 %707 to i32
  %709 = sitofp i32 %708 to double
  %710 = load double* @pixel_aspect, align 8
  %711 = fmul double %709, %710
  %712 = fadd double %711, 5.000000e-01
  %713 = fptoui double %712 to i16
  store i16 %713, i16* @iwidth, align 2
  br label %714

; <label>:714                                     ; preds = %706, %703
  br label %715

; <label>:715                                     ; preds = %714, %666
  br label %716

; <label>:716                                     ; preds = %715, %660
  %717 = load i32* @flip, align 4
  %718 = and i32 %717, 4
  %719 = icmp ne i32 %718, 0
  br i1 %719, label %720, label %738

; <label>:720                                     ; preds = %716
  %721 = load i16* @iwidth, align 2
  %722 = zext i16 %721 to i32
  %723 = load i16* @iheight, align 2
  %724 = zext i16 %723 to i32
  %725 = xor i32 %724, %722
  %726 = trunc i32 %725 to i16
  store i16 %726, i16* @iheight, align 2
  %727 = load i16* @iheight, align 2
  %728 = zext i16 %727 to i32
  %729 = load i16* @iwidth, align 2
  %730 = zext i16 %729 to i32
  %731 = xor i32 %730, %728
  %732 = trunc i32 %731 to i16
  store i16 %732, i16* @iwidth, align 2
  %733 = zext i16 %732 to i32
  %734 = load i16* @iheight, align 2
  %735 = zext i16 %734 to i32
  %736 = xor i32 %735, %733
  %737 = trunc i32 %736 to i16
  store i16 %737, i16* @iheight, align 2
  br label %738

; <label>:738                                     ; preds = %720, %716
  %739 = load i16* @width, align 2
  %740 = zext i16 %739 to i32
  %741 = load i16* @height, align 2
  %742 = zext i16 %741 to i32
  %743 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str682, i32 0, i32 0), i32 %740, i32 %742)
  %744 = load i16* @iwidth, align 2
  %745 = zext i16 %744 to i32
  %746 = load i16* @iheight, align 2
  %747 = zext i16 %746 to i32
  %748 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str683, i32 0, i32 0), i32 %745, i32 %747)
  %749 = load i32* @colors, align 4
  %750 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str684, i32 0, i32 0), i32 %749)
  %751 = load i32* @filters, align 4
  %752 = icmp ne i32 %751, 0
  br i1 %752, label %753, label %777

; <label>:753                                     ; preds = %738
  %754 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str685, i32 0, i32 0))
  %755 = load i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 3), align 1
  %756 = icmp ne i8 %755, 0
  br i1 %756, label %758, label %757

; <label>:757                                     ; preds = %753
  store i8 71, i8* getelementptr inbounds ([5 x i8]* @cdesc, i32 0, i64 3), align 1
  br label %758

; <label>:758                                     ; preds = %757, %753
  store i32 0, i32* %i, align 4
  br label %759

; <label>:759                                     ; preds = %773, %758
  %760 = load i32* %i, align 4
  %761 = icmp slt i32 %760, 16
  br i1 %761, label %762, label %776

; <label>:762                                     ; preds = %759
  %763 = load i32* %i, align 4
  %764 = ashr i32 %763, 1
  %765 = load i32* %i, align 4
  %766 = and i32 %765, 1
  %767 = call i32 @fc(i32 %764, i32 %766)
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds [5 x i8]* @cdesc, i32 0, i64 %768
  %770 = load i8* %769, align 1
  %771 = sext i8 %770 to i32
  %772 = call i32 @putchar(i32 %771)
  br label %773

; <label>:773                                     ; preds = %762
  %774 = load i32* %i, align 4
  %775 = add nsw i32 %774, 1
  store i32 %775, i32* %i, align 4
  br label %759

; <label>:776                                     ; preds = %759
  br label %777

; <label>:777                                     ; preds = %776, %738
  %778 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str686, i32 0, i32 0))
  store i32 0, i32* %c, align 4
  br label %779

; <label>:779                                     ; preds = %790, %777
  %780 = load i32* %c, align 4
  %781 = load i32* @colors, align 4
  %782 = icmp slt i32 %780, %781
  br i1 %782, label %783, label %793

; <label>:783                                     ; preds = %779
  %784 = load i32* %c, align 4
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds [4 x float]* @pre_mul, i32 0, i64 %785
  %787 = load float* %786, align 4
  %788 = fpext float %787 to double
  %789 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str72, i32 0, i32 0), double %788)
  br label %790

; <label>:790                                     ; preds = %783
  %791 = load i32* %c, align 4
  %792 = add nsw i32 %791, 1
  store i32 %792, i32* %c, align 4
  br label %779

; <label>:793                                     ; preds = %779
  %794 = load float* getelementptr inbounds ([4 x float]* @cam_mul, i32 0, i64 0), align 4
  %795 = fcmp ogt float %794, 0.000000e+00
  br i1 %795, label %796, label %812

; <label>:796                                     ; preds = %793
  %797 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str687, i32 0, i32 0))
  store i32 0, i32* %c, align 4
  br label %798

; <label>:798                                     ; preds = %808, %796
  %799 = load i32* %c, align 4
  %800 = icmp slt i32 %799, 4
  br i1 %800, label %801, label %811

; <label>:801                                     ; preds = %798
  %802 = load i32* %c, align 4
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds [4 x float]* @cam_mul, i32 0, i64 %803
  %805 = load float* %804, align 4
  %806 = fpext float %805 to double
  %807 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str72, i32 0, i32 0), double %806)
  br label %808

; <label>:808                                     ; preds = %801
  %809 = load i32* %c, align 4
  %810 = add nsw i32 %809, 1
  store i32 %810, i32* %c, align 4
  br label %798

; <label>:811                                     ; preds = %798
  br label %812

; <label>:812                                     ; preds = %811, %793
  %813 = call i32 @putchar(i32 10)
  br label %817

; <label>:814                                     ; preds = %657
  %815 = load i8** @ifname, align 8
  %816 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str688, i32 0, i32 0), i8* %815, i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0))
  br label %817

; <label>:817                                     ; preds = %814, %812
  br label %818

; <label>:818                                     ; preds = %817, %615, %476, %467
  %819 = load %struct._IO_FILE** @ifp, align 8
  %820 = call i32 @fclose(%struct._IO_FILE* %819)
  br label %1128

; <label>:821                                     ; preds = %633
  %822 = load i32* @use_camera_matrix, align 4
  %823 = icmp ne i32 %822, 0
  br i1 %823, label %824, label %829

; <label>:824                                     ; preds = %821
  %825 = load float* getelementptr inbounds ([3 x [4 x float]]* @cmatrix, i32 0, i64 0, i64 0), align 4
  %826 = fpext float %825 to double
  %827 = fcmp ogt double %826, 2.500000e-01
  br i1 %827, label %828, label %829

; <label>:828                                     ; preds = %824
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([3 x [4 x float]]* @rgb_cam to i8*), i8* bitcast ([3 x [4 x float]]* @cmatrix to i8*), i64 48, i32 16, i1 false)
  store i32 0, i32* @raw_color, align 4
  br label %829

; <label>:829                                     ; preds = %828, %824, %821
  %830 = load i16* @iheight, align 2
  %831 = zext i16 %830 to i32
  %832 = load i16* @iwidth, align 2
  %833 = zext i16 %832 to i32
  %834 = mul nsw i32 %831, %833
  %835 = sext i32 %834 to i64
  %836 = call noalias i8* @calloc(i64 %835, i64 8) #4
  %837 = bitcast i8* %836 to [4 x i16]*
  store [4 x i16]* %837, [4 x i16]** @image, align 8
  %838 = load [4 x i16]** @image, align 8
  %839 = bitcast [4 x i16]* %838 to i8*
  call void @merror(i8* %839, i8* getelementptr inbounds ([7 x i8]* @.str689, i32 0, i32 0))
  %840 = load i32* @meta_length, align 4
  %841 = icmp ne i32 %840, 0
  br i1 %841, label %842, label %847

; <label>:842                                     ; preds = %829
  %843 = load i32* @meta_length, align 4
  %844 = zext i32 %843 to i64
  %845 = call noalias i8* @malloc(i64 %844) #4
  store i8* %845, i8** @meta_data, align 8
  %846 = load i8** @meta_data, align 8
  call void @merror(i8* %846, i8* getelementptr inbounds ([7 x i8]* @.str689, i32 0, i32 0))
  br label %847

; <label>:847                                     ; preds = %842, %829
  %848 = load i32* @verbose, align 4
  %849 = icmp ne i32 %848, 0
  br i1 %849, label %850, label %854

; <label>:850                                     ; preds = %847
  %851 = load %struct._IO_FILE** @stderr, align 8
  %852 = load i8** @ifname, align 8
  %853 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %851, i8* getelementptr inbounds ([33 x i8]* @.str690, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @make, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8]* @model, i32 0, i32 0), i8* %852)
  br label %854

; <label>:854                                     ; preds = %850, %847
  %855 = load i32* @shot_select, align 4
  %856 = load i32* @is_raw, align 4
  %857 = icmp uge i32 %855, %856
  br i1 %857, label %858, label %863

; <label>:858                                     ; preds = %854
  %859 = load %struct._IO_FILE** @stderr, align 8
  %860 = load i8** @ifname, align 8
  %861 = load i32* @shot_select, align 4
  %862 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %859, i8* getelementptr inbounds ([43 x i8]* @.str691, i32 0, i32 0), i8* %860, i32 %861)
  br label %863

; <label>:863                                     ; preds = %858, %854
  %864 = load %struct._IO_FILE** @ifp, align 8
  %865 = load i64* @data_offset, align 8
  %866 = call i32 @fseeko(%struct._IO_FILE* %864, i64 %865, i32 0)
  %867 = load void (...)** @load_raw, align 8
  call void (...)* %867()
  %868 = load i32* @zero_is_bad, align 4
  %869 = icmp ne i32 %868, 0
  br i1 %869, label %870, label %871

; <label>:870                                     ; preds = %863
  call void @remove_zeroes()
  br label %871

; <label>:871                                     ; preds = %870, %863
  %872 = load i8** %bpfile, align 8
  call void @bad_pixels(i8* %872)
  %873 = load i8** %dark_frame, align 8
  %874 = icmp ne i8* %873, null
  br i1 %874, label %875, label %877

; <label>:875                                     ; preds = %871
  %876 = load i8** %dark_frame, align 8
  call void @subtract(i8* %876)
  br label %877

; <label>:877                                     ; preds = %875, %871
  %878 = load i16* @fuji_width, align 2
  %879 = icmp ne i16 %878, 0
  %880 = xor i1 %879, true
  %881 = zext i1 %880 to i32
  %882 = add nsw i32 2, %881
  store i32 %882, i32* %quality, align 4
  %883 = load i32* %user_qual, align 4
  %884 = icmp sge i32 %883, 0
  br i1 %884, label %885, label %887

; <label>:885                                     ; preds = %877
  %886 = load i32* %user_qual, align 4
  store i32 %886, i32* %quality, align 4
  br label %887

; <label>:887                                     ; preds = %885, %877
  %888 = load i32* %user_black, align 4
  %889 = icmp sge i32 %888, 0
  br i1 %889, label %890, label %892

; <label>:890                                     ; preds = %887
  %891 = load i32* %user_black, align 4
  store i32 %891, i32* @black, align 4
  br label %892

; <label>:892                                     ; preds = %890, %887
  %893 = load i32* %user_sat, align 4
  %894 = icmp sgt i32 %893, 0
  br i1 %894, label %895, label %897

; <label>:895                                     ; preds = %892
  %896 = load i32* %user_sat, align 4
  store i32 %896, i32* @maximum, align 4
  br label %897

; <label>:897                                     ; preds = %895, %892
  %898 = load i32* @is_foveon, align 4
  %899 = icmp ne i32 %898, 0
  br i1 %899, label %900, label %904

; <label>:900                                     ; preds = %897
  %901 = load i32* @document_mode, align 4
  %902 = icmp ne i32 %901, 0
  br i1 %902, label %904, label %903

; <label>:903                                     ; preds = %900
  call void @foveon_interpolate()
  br label %904

; <label>:904                                     ; preds = %903, %900, %897
  %905 = load i32* @is_foveon, align 4
  %906 = icmp ne i32 %905, 0
  br i1 %906, label %911, label %907

; <label>:907                                     ; preds = %904
  %908 = load i32* @document_mode, align 4
  %909 = icmp slt i32 %908, 2
  br i1 %909, label %910, label %911

; <label>:910                                     ; preds = %907
  call void @scale_colors()
  br label %911

; <label>:911                                     ; preds = %910, %907, %904
  call void @pre_interpolate()
  %912 = load i32* @filters, align 4
  %913 = icmp ne i32 %912, 0
  br i1 %913, label %914, label %936

; <label>:914                                     ; preds = %911
  %915 = load i32* @document_mode, align 4
  %916 = icmp ne i32 %915, 0
  br i1 %916, label %936, label %917

; <label>:917                                     ; preds = %914
  %918 = load i32* %quality, align 4
  %919 = icmp eq i32 %918, 0
  br i1 %919, label %920, label %921

; <label>:920                                     ; preds = %917
  call void @lin_interpolate()
  br label %935

; <label>:921                                     ; preds = %917
  %922 = load i32* %quality, align 4
  %923 = icmp eq i32 %922, 1
  br i1 %923, label %927, label %924

; <label>:924                                     ; preds = %921
  %925 = load i32* @colors, align 4
  %926 = icmp sgt i32 %925, 3
  br i1 %926, label %927, label %928

; <label>:927                                     ; preds = %924, %921
  call void @vng_interpolate()
  br label %934

; <label>:928                                     ; preds = %924
  %929 = load i32* %quality, align 4
  %930 = icmp eq i32 %929, 2
  br i1 %930, label %931, label %932

; <label>:931                                     ; preds = %928
  call void @ppg_interpolate()
  br label %933

; <label>:932                                     ; preds = %928
  call void @ahd_interpolate()
  br label %933

; <label>:933                                     ; preds = %932, %931
  br label %934

; <label>:934                                     ; preds = %933, %927
  br label %935

; <label>:935                                     ; preds = %934, %920
  br label %936

; <label>:936                                     ; preds = %935, %914, %911
  %937 = load i32* @mix_green, align 4
  %938 = icmp ne i32 %937, 0
  br i1 %938, label %939, label %975

; <label>:939                                     ; preds = %936
  store i32 3, i32* @colors, align 4
  store i32 0, i32* %i, align 4
  br label %940

; <label>:940                                     ; preds = %971, %939
  %941 = load i32* %i, align 4
  %942 = load i16* @height, align 2
  %943 = zext i16 %942 to i32
  %944 = load i16* @width, align 2
  %945 = zext i16 %944 to i32
  %946 = mul nsw i32 %943, %945
  %947 = icmp slt i32 %941, %946
  br i1 %947, label %948, label %974

; <label>:948                                     ; preds = %940
  %949 = load i32* %i, align 4
  %950 = sext i32 %949 to i64
  %951 = load [4 x i16]** @image, align 8
  %952 = getelementptr inbounds [4 x i16]* %951, i64 %950
  %953 = getelementptr inbounds [4 x i16]* %952, i32 0, i64 1
  %954 = load i16* %953, align 2
  %955 = zext i16 %954 to i32
  %956 = load i32* %i, align 4
  %957 = sext i32 %956 to i64
  %958 = load [4 x i16]** @image, align 8
  %959 = getelementptr inbounds [4 x i16]* %958, i64 %957
  %960 = getelementptr inbounds [4 x i16]* %959, i32 0, i64 3
  %961 = load i16* %960, align 2
  %962 = zext i16 %961 to i32
  %963 = add nsw i32 %955, %962
  %964 = ashr i32 %963, 1
  %965 = trunc i32 %964 to i16
  %966 = load i32* %i, align 4
  %967 = sext i32 %966 to i64
  %968 = load [4 x i16]** @image, align 8
  %969 = getelementptr inbounds [4 x i16]* %968, i64 %967
  %970 = getelementptr inbounds [4 x i16]* %969, i32 0, i64 1
  store i16 %965, i16* %970, align 2
  br label %971

; <label>:971                                     ; preds = %948
  %972 = load i32* %i, align 4
  %973 = add nsw i32 %972, 1
  store i32 %973, i32* %i, align 4
  br label %940

; <label>:974                                     ; preds = %940
  br label %975

; <label>:975                                     ; preds = %974, %936
  %976 = load i32* @is_foveon, align 4
  %977 = icmp ne i32 %976, 0
  br i1 %977, label %982, label %978

; <label>:978                                     ; preds = %975
  %979 = load i32* @colors, align 4
  %980 = icmp eq i32 %979, 3
  br i1 %980, label %981, label %982

; <label>:981                                     ; preds = %978
  call void @median_filter()
  br label %982

; <label>:982                                     ; preds = %981, %978, %975
  %983 = load i32* @is_foveon, align 4
  %984 = icmp ne i32 %983, 0
  br i1 %984, label %989, label %985

; <label>:985                                     ; preds = %982
  %986 = load i32* @highlight, align 4
  %987 = icmp eq i32 %986, 2
  br i1 %987, label %988, label %989

; <label>:988                                     ; preds = %985
  call void @blend_highlights()
  br label %989

; <label>:989                                     ; preds = %988, %985, %982
  %990 = load i32* @is_foveon, align 4
  %991 = icmp ne i32 %990, 0
  br i1 %991, label %996, label %992

; <label>:992                                     ; preds = %989
  %993 = load i32* @highlight, align 4
  %994 = icmp sgt i32 %993, 2
  br i1 %994, label %995, label %996

; <label>:995                                     ; preds = %992
  call void @recover_highlights()
  br label %996

; <label>:996                                     ; preds = %995, %992, %989
  %997 = load i32* %use_fuji_rotate, align 4
  %998 = icmp ne i32 %997, 0
  br i1 %998, label %999, label %1000

; <label>:999                                     ; preds = %996
  call void @fuji_rotate()
  br label %1000

; <label>:1000                                    ; preds = %999, %996
  call void @convert_to_rgb()
  %1001 = load i32* %use_fuji_rotate, align 4
  %1002 = icmp ne i32 %1001, 0
  br i1 %1002, label %1003, label %1004

; <label>:1003                                    ; preds = %1000
  call void @stretch()
  br label %1004

; <label>:1004                                    ; preds = %1003, %1000
  br label %1005

; <label>:1005                                    ; preds = %1004, %488
  %1006 = load void (%struct._IO_FILE*)** @write_fun, align 8
  %1007 = icmp eq void (%struct._IO_FILE*)* %1006, @jpeg_thumb
  br i1 %1007, label %1008, label %1009

; <label>:1008                                    ; preds = %1005
  store i8* getelementptr inbounds ([5 x i8]* @.str164, i32 0, i32 0), i8** %write_ext, align 8
  br label %1023

; <label>:1009                                    ; preds = %1005
  %1010 = load i32* @output_tiff, align 4
  %1011 = icmp ne i32 %1010, 0
  br i1 %1011, label %1012, label %1016

; <label>:1012                                    ; preds = %1009
  %1013 = load void (%struct._IO_FILE*)** @write_fun, align 8
  %1014 = icmp eq void (%struct._IO_FILE*)* %1013, @write_ppm_tiff
  br i1 %1014, label %1015, label %1016

; <label>:1015                                    ; preds = %1012
  store i8* getelementptr inbounds ([6 x i8]* @.str692, i32 0, i32 0), i8** %write_ext, align 8
  br label %1022

; <label>:1016                                    ; preds = %1012, %1009
  %1017 = load i32* @colors, align 4
  %1018 = mul nsw i32 %1017, 5
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds i8* getelementptr inbounds ([20 x i8]* @.str693, i32 0, i32 0), i64 %1019
  %1021 = getelementptr inbounds i8* %1020, i64 -5
  store i8* %1021, i8** %write_ext, align 8
  br label %1022

; <label>:1022                                    ; preds = %1016, %1015
  br label %1023

; <label>:1023                                    ; preds = %1022, %1008
  %1024 = load i8** @ifname, align 8
  %1025 = call i64 @strlen(i8* %1024) #10
  %1026 = add i64 %1025, 64
  %1027 = call noalias i8* @malloc(i64 %1026) #4
  store i8* %1027, i8** %ofname, align 8
  %1028 = load i8** %ofname, align 8
  call void @merror(i8* %1028, i8* getelementptr inbounds ([7 x i8]* @.str689, i32 0, i32 0))
  %1029 = load i32* %write_to_stdout, align 4
  %1030 = icmp ne i32 %1029, 0
  br i1 %1030, label %1031, label %1034

; <label>:1031                                    ; preds = %1023
  %1032 = load i8** %ofname, align 8
  %1033 = call i8* @strcpy(i8* %1032, i8* getelementptr inbounds ([16 x i8]* @.str694, i32 0, i32 0)) #4
  br label %1073

; <label>:1034                                    ; preds = %1023
  %1035 = load i8** %ofname, align 8
  %1036 = load i8** @ifname, align 8
  %1037 = call i8* @strcpy(i8* %1035, i8* %1036) #4
  %1038 = load i8** %ofname, align 8
  %1039 = call i8* @strrchr(i8* %1038, i32 46) #10
  store i8* %1039, i8** %cp, align 8
  %1040 = icmp ne i8* %1039, null
  br i1 %1040, label %1041, label %1043

; <label>:1041                                    ; preds = %1034
  %1042 = load i8** %cp, align 8
  store i8 0, i8* %1042, align 1
  br label %1043

; <label>:1043                                    ; preds = %1041, %1034
  %1044 = load i32* @multi_out, align 4
  %1045 = icmp ne i32 %1044, 0
  br i1 %1045, label %1046, label %1056

; <label>:1046                                    ; preds = %1043
  %1047 = load i8** %ofname, align 8
  %1048 = load i8** %ofname, align 8
  %1049 = call i64 @strlen(i8* %1048) #10
  %1050 = getelementptr inbounds i8* %1047, i64 %1049
  %1051 = load i32* @is_raw, align 4
  %1052 = sub i32 %1051, 1
  %1053 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32 %1052) #4
  %1054 = load i32* @shot_select, align 4
  %1055 = call i32 (i8*, i8*, ...)* @sprintf(i8* %1050, i8* getelementptr inbounds ([6 x i8]* @.str695, i32 0, i32 0), i32 %1053, i32 %1054) #4
  br label %1056

; <label>:1056                                    ; preds = %1046, %1043
  %1057 = load i32* %thumbnail_only, align 4
  %1058 = icmp ne i32 %1057, 0
  br i1 %1058, label %1059, label %1062

; <label>:1059                                    ; preds = %1056
  %1060 = load i8** %ofname, align 8
  %1061 = call i8* @strcat(i8* %1060, i8* getelementptr inbounds ([7 x i8]* @.str696, i32 0, i32 0)) #4
  br label %1062

; <label>:1062                                    ; preds = %1059, %1056
  %1063 = load i8** %ofname, align 8
  %1064 = load i8** %write_ext, align 8
  %1065 = call i8* @strcat(i8* %1063, i8* %1064) #4
  %1066 = load i8** %ofname, align 8
  %1067 = call %struct._IO_FILE* @fopen(i8* %1066, i8* getelementptr inbounds ([3 x i8]* @.str697, i32 0, i32 0))
  store %struct._IO_FILE* %1067, %struct._IO_FILE** %ofp, align 8
  %1068 = load %struct._IO_FILE** %ofp, align 8
  %1069 = icmp ne %struct._IO_FILE* %1068, null
  br i1 %1069, label %1072, label %1070

; <label>:1070                                    ; preds = %1062
  store i32 1, i32* %status, align 4
  %1071 = load i8** %ofname, align 8
  call void @perror(i8* %1071)
  br label %1092

; <label>:1072                                    ; preds = %1062
  br label %1073

; <label>:1073                                    ; preds = %1072, %1031
  %1074 = load i32* @verbose, align 4
  %1075 = icmp ne i32 %1074, 0
  br i1 %1075, label %1076, label %1080

; <label>:1076                                    ; preds = %1073
  %1077 = load %struct._IO_FILE** @stderr, align 8
  %1078 = load i8** %ofname, align 8
  %1079 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1077, i8* getelementptr inbounds ([24 x i8]* @.str698, i32 0, i32 0), i8* %1078)
  br label %1080

; <label>:1080                                    ; preds = %1076, %1073
  %1081 = load void (%struct._IO_FILE*)** @write_fun, align 8
  %1082 = load %struct._IO_FILE** %ofp, align 8
  call void %1081(%struct._IO_FILE* %1082)
  %1083 = load %struct._IO_FILE** @ifp, align 8
  %1084 = call i32 @fclose(%struct._IO_FILE* %1083)
  %1085 = load %struct._IO_FILE** %ofp, align 8
  %1086 = load %struct._IO_FILE** @stdout, align 8
  %1087 = icmp ne %struct._IO_FILE* %1085, %1086
  br i1 %1087, label %1088, label %1091

; <label>:1088                                    ; preds = %1080
  %1089 = load %struct._IO_FILE** %ofp, align 8
  %1090 = call i32 @fclose(%struct._IO_FILE* %1089)
  br label %1091

; <label>:1091                                    ; preds = %1088, %1080
  br label %1092

; <label>:1092                                    ; preds = %1091, %1070, %403
  %1093 = load i8** @meta_data, align 8
  %1094 = icmp ne i8* %1093, null
  br i1 %1094, label %1095, label %1097

; <label>:1095                                    ; preds = %1092
  %1096 = load i8** @meta_data, align 8
  call void @free(i8* %1096) #4
  br label %1097

; <label>:1097                                    ; preds = %1095, %1092
  %1098 = load i8** %ofname, align 8
  %1099 = icmp ne i8* %1098, null
  br i1 %1099, label %1100, label %1102

; <label>:1100                                    ; preds = %1097
  %1101 = load i8** %ofname, align 8
  call void @free(i8* %1101) #4
  br label %1102

; <label>:1102                                    ; preds = %1100, %1097
  %1103 = load i32** @oprof, align 8
  %1104 = icmp ne i32* %1103, null
  br i1 %1104, label %1105, label %1108

; <label>:1105                                    ; preds = %1102
  %1106 = load i32** @oprof, align 8
  %1107 = bitcast i32* %1106 to i8*
  call void @free(i8* %1107) #4
  br label %1108

; <label>:1108                                    ; preds = %1105, %1102
  %1109 = load [4 x i16]** @image, align 8
  %1110 = icmp ne [4 x i16]* %1109, null
  br i1 %1110, label %1111, label %1114

; <label>:1111                                    ; preds = %1108
  %1112 = load [4 x i16]** @image, align 8
  %1113 = bitcast [4 x i16]* %1112 to i8*
  call void @free(i8* %1113) #4
  br label %1114

; <label>:1114                                    ; preds = %1111, %1108
  %1115 = load i32* @multi_out, align 4
  %1116 = icmp ne i32 %1115, 0
  br i1 %1116, label %1117, label %1127

; <label>:1117                                    ; preds = %1114
  %1118 = load i32* @shot_select, align 4
  %1119 = add i32 %1118, 1
  store i32 %1119, i32* @shot_select, align 4
  %1120 = load i32* @is_raw, align 4
  %1121 = icmp ult i32 %1119, %1120
  br i1 %1121, label %1122, label %1125

; <label>:1122                                    ; preds = %1117
  %1123 = load i32* %arg, align 4
  %1124 = add nsw i32 %1123, -1
  store i32 %1124, i32* %arg, align 4
  br label %1126

; <label>:1125                                    ; preds = %1117
  store i32 0, i32* @shot_select, align 4
  br label %1126

; <label>:1126                                    ; preds = %1125, %1122
  br label %1127

; <label>:1127                                    ; preds = %1126, %1114
  br label %1128

; <label>:1128                                    ; preds = %1127, %818, %413
  %1129 = load i32* %arg, align 4
  %1130 = add nsw i32 %1129, 1
  store i32 %1130, i32* %arg, align 4
  br label %381

; <label>:1131                                    ; preds = %381
  %1132 = load i32* %status, align 4
  store i32 %1132, i32* %1
  br label %1133

; <label>:1133                                    ; preds = %1131, %376, %367, %352, %110, %7
  %1134 = load i32* %1
  ret i32 %1134
}

; Function Attrs: nounwind
declare i32 @putenv(i8*) #3

declare i32 @printf(i8*, ...) #1

declare i32 @puts(i8*) #1

; Function Attrs: nounwind
declare i32 @isatty(i32) #3

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) #7

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare i32 @utime(i8*, %struct.utimbuf*) #3

; Function Attrs: nounwind
declare i8* @ctime(i64*) #3

declare i32 @putchar(i32) #1

declare i32 @fseeko(%struct._IO_FILE*, i64, i32) #1

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #3

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #3

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind returns_twice "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind returns_twice }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.6.2 (tags/RELEASE_362/final)"}
