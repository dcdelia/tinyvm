; ModuleID = 'ComputeNonbondedUtil.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.LJTable = type <{ i8*, %"struct.LJTable::TableEntry"*, i32, [4 x i8] }>
%"struct.LJTable::TableEntry" = type { double, double }
%class.Molecule = type { %class.ObjectArena*, %class.ExclusionCheck*, i32, i32, i32* }
%class.ObjectArena = type opaque
%class.ExclusionCheck = type { i32, i32, i8* }
%struct.nonbonded = type { [2 x %struct.CompAtom*], [2 x %class.Vector*], [2 x %class.Vector*], [2 x i32], double*, double*, %class.Vector, i32, i32, i32, i32 }
%struct.CompAtom = type { %class.Vector, float, i32 }
%class.Vector = type { double, double, double }
%class.SimParameters = type { %class.Vector, %class.Vector, %class.Vector, %class.Vector, i32, i32, double, i32, double, double, double, i32, double, double, i32, double, double, i32, i32, i32, i32, i32, i32, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32, double, i32, i32, %class.Lattice }
%class.Lattice = type <{ %class.Vector, %class.Vector, %class.Vector, %class.Vector, %class.Vector, %class.Vector, %class.Vector, i32, i32, i32, [4 x i8] }>
%union.anon.43 = type { float }
%union.anon.44 = type { float }
%union.anon.54 = type { float }
%union.anon.55 = type { float }
%union.anon.45 = type { float }
%union.anon.46 = type { float }
%union.anon.47 = type { float }
%union.anon.56 = type { float }
%union.anon.57 = type { float }
%union.anon.58 = type { float }
%union.anon.48 = type { float }
%union.anon.49 = type { float }
%union.anon.50 = type { float }
%union.anon.59 = type { float }
%union.anon.60 = type { float }
%union.anon.61 = type { float }
%union.anon.51 = type { float }
%union.anon.52 = type { float }
%union.anon.53 = type { float }
%union.anon.62 = type { float }
%union.anon.63 = type { float }
%union.anon.64 = type { float }
%union.anon.65 = type { float }
%union.anon.66 = type { float }
%union.anon.67 = type { float }
%union.anon.68 = type { float }
%union.anon.87 = type { float }
%union.anon.88 = type { float }
%union.anon.89 = type { float }
%union.anon.90 = type { float }
%union.anon.69 = type { float }
%union.anon.70 = type { float }
%union.anon.71 = type { float }
%union.anon.72 = type { float }
%union.anon.73 = type { float }
%union.anon.74 = type { float }
%union.anon.91 = type { float }
%union.anon.92 = type { float }
%union.anon.93 = type { float }
%union.anon.94 = type { float }
%union.anon.95 = type { float }
%union.anon.96 = type { float }
%union.anon.75 = type { float }
%union.anon.76 = type { float }
%union.anon.77 = type { float }
%union.anon.78 = type { float }
%union.anon.79 = type { float }
%union.anon.80 = type { float }
%union.anon.97 = type { float }
%union.anon.98 = type { float }
%union.anon.99 = type { float }
%union.anon.100 = type { float }
%union.anon.101 = type { float }
%union.anon.102 = type { float }
%union.anon.81 = type { float }
%union.anon.82 = type { float }
%union.anon.83 = type { float }
%union.anon.84 = type { float }
%union.anon.85 = type { float }
%union.anon.86 = type { float }
%union.anon.103 = type { float }
%union.anon.104 = type { float }
%union.anon.105 = type { float }
%union.anon.106 = type { float }
%union.anon.107 = type { float }
%union.anon.108 = type { float }
%union.anon = type { float }
%union.anon.0 = type { float }
%union.anon.1 = type { float }
%union.anon.2 = type { float }
%union.anon.21 = type { float }
%union.anon.22 = type { float }
%union.anon.23 = type { float }
%union.anon.24 = type { float }
%union.anon.3 = type { float }
%union.anon.4 = type { float }
%union.anon.5 = type { float }
%union.anon.6 = type { float }
%union.anon.7 = type { float }
%union.anon.8 = type { float }
%union.anon.25 = type { float }
%union.anon.26 = type { float }
%union.anon.27 = type { float }
%union.anon.28 = type { float }
%union.anon.29 = type { float }
%union.anon.30 = type { float }
%union.anon.9 = type { float }
%union.anon.10 = type { float }
%union.anon.11 = type { float }
%union.anon.12 = type { float }
%union.anon.13 = type { float }
%union.anon.14 = type { float }
%union.anon.31 = type { float }
%union.anon.32 = type { float }
%union.anon.33 = type { float }
%union.anon.34 = type { float }
%union.anon.35 = type { float }
%union.anon.36 = type { float }
%union.anon.15 = type { float }
%union.anon.16 = type { float }
%union.anon.17 = type { float }
%union.anon.18 = type { float }
%union.anon.19 = type { float }
%union.anon.20 = type { float }
%union.anon.37 = type { float }
%union.anon.38 = type { float }
%union.anon.39 = type { float }
%union.anon.40 = type { float }
%union.anon.41 = type { float }
%union.anon.42 = type { float }

@_ZN20ComputeNonbondedUtil8commOnlyE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil12fixedAtomsOnE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil6cutoffE = global float 0.000000e+00, align 4
@_ZN20ComputeNonbondedUtil7cutoff2E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil12groupcutoff2E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil12dielectric_1E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil7ljTableE = global %class.LJTable* null, align 8
@_ZN20ComputeNonbondedUtil3molE = global %class.Molecule* null, align 8
@_ZN20ComputeNonbondedUtil8r2_deltaE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil10r2_delta_1E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil12r2_delta_expE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil11table_allocE = global double* null, align 8
@_ZN20ComputeNonbondedUtil11table_shortE = global double* null, align 8
@_ZN20ComputeNonbondedUtil13table_noshortE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10fast_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10scor_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10slow_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10corr_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10full_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10vdwa_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil10vdwb_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil7scalingE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil7scale14E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil8switchOnE = global float 0.000000e+00, align 4
@_ZN20ComputeNonbondedUtil10switchOn_1E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil9switchOn2E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c0E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c1E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c3E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c5E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c6E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c7E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil2c8E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil5fepOnE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil6lambdaE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil7lambda2E = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil5lesOnE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil9lesFactorE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil10lesScalingE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil12lambda_tableE = global double* null, align 8
@_ZN20ComputeNonbondedUtil17pairInteractionOnE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil19pairInteractionSelfE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil24pressureProfileNonbondedE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil20pressureProfileSlabsE = global i32 0, align 4
@_ZN20ComputeNonbondedUtil24pressureProfileThicknessE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil18pressureProfileMinE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil8ewaldcofE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil11pi_ewaldcofE = global double 0.000000e+00, align 8
@_ZN20ComputeNonbondedUtil8calcPairE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil14calcPairEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil8calcSelfE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil14calcSelfEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil12calcFullPairE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil18calcFullPairEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil12calcFullSelfE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil18calcFullSelfEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil13calcMergePairE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil19calcMergePairEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil13calcMergeSelfE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil19calcMergeSelfEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil12calcSlowPairE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil18calcSlowPairEnergyE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil12calcSlowSelfE = global void (%struct.nonbonded*)* null, align 8
@_ZN20ComputeNonbondedUtil18calcSlowSelfEnergyE = global void (%struct.nonbonded*)* null, align 8
@.str = private unnamed_addr constant [38 x i8] c"Sorry, XPLOR splitting not supported.\00", align 1
@.str1 = private unnamed_addr constant [38 x i8] c"Sorry, SHARP splitting not supported.\00", align 1
@.str2 = private unnamed_addr constant [30 x i8] c"Unknown splitting type found!\00", align 1

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil6selectEP13SimParametersP8MoleculeP7LJTable(%class.SimParameters* %simParams, %class.Molecule* %molecule, %class.LJTable* %ljTable_in) #0 align 2 {
  store %class.LJTable* %ljTable_in, %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %1 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 41
  %2 = load i32* %1, align 4
  store i32 %2, i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %3 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 31
  %4 = load i32* %3, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 32
  %8 = load i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  %10 = xor i1 %9, true
  br label %11

; <label>:11                                      ; preds = %6, %0
  %12 = phi i1 [ false, %0 ], [ %10, %6 ]
  %13 = zext i1 %12 to i32
  store i32 %13, i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %14 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 10
  %15 = load double* %14, align 8
  %16 = fptrunc double %15 to float
  store float %16, float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %17 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %18 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %19 = fmul float %17, %18
  %20 = fpext float %19 to double
  store double %20, double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %21 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 14
  %22 = load i32* %21, align 4
  store i32 %22, i32* @_ZN20ComputeNonbondedUtil5fepOnE, align 4
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil7lambda2E, align 8
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil6lambdaE, align 8
  %23 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 25
  %24 = load i32* %23, align 4
  store i32 %24, i32* @_ZN20ComputeNonbondedUtil5lesOnE, align 4
  store i32 0, i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil10lesScalingE, align 8
  %25 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %26 = icmp eq double* %25, null
  br i1 %26, label %29, label %27

; <label>:27                                      ; preds = %11
  %28 = bitcast double* %25 to i8*
  call void @_ZdaPv(i8* %28) #8
  br label %29

; <label>:29                                      ; preds = %27, %11
  store double* null, double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %30 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 27
  %31 = load i32* %30, align 4
  store i32 %31, i32* @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4
  %32 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 30
  %33 = load i32* %32, align 4
  store i32 %33, i32* @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %34 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 20
  %35 = load i32* %34, align 4
  store i32 %35, i32* @_ZN20ComputeNonbondedUtil24pressureProfileNonbondedE, align 4
  %36 = load i32* @_ZN20ComputeNonbondedUtil24pressureProfileNonbondedE, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %45

; <label>:38                                      ; preds = %29
  %39 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 21
  %40 = load i32* %39, align 4
  store i32 %40, i32* @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4
  %41 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 24
  %42 = load double* %41, align 8
  store double %42, double* @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8
  %43 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 23
  %44 = load double* %43, align 8
  store double %44, double* @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8
  br label %45

; <label>:45                                      ; preds = %38, %29
  %46 = load i32* @_ZN20ComputeNonbondedUtil5fepOnE, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %110

; <label>:48                                      ; preds = %45
  %49 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 15
  %50 = load double* %49, align 8
  store double %50, double* @_ZN20ComputeNonbondedUtil6lambdaE, align 8
  %51 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 16
  %52 = load double* %51, align 8
  store double %52, double* @_ZN20ComputeNonbondedUtil7lambda2E, align 8
  %53 = call noalias i8* @_Znam(i64 144) #9
  %54 = bitcast i8* %53 to double*
  store double* %54, double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  br label %55

; <label>:55                                      ; preds = %107, %48
  %ip.0 = phi i32 [ 0, %48 ], [ %108, %107 ]
  %56 = icmp slt i32 %ip.0, 3
  br i1 %56, label %57, label %109

; <label>:57                                      ; preds = %55
  br label %58

; <label>:58                                      ; preds = %104, %57
  %jp.0 = phi i32 [ 0, %57 ], [ %105, %104 ]
  %59 = icmp slt i32 %jp.0, 3
  br i1 %59, label %60, label %106

; <label>:60                                      ; preds = %58
  %61 = icmp ne i32 %ip.0, 0
  br i1 %61, label %64, label %62

; <label>:62                                      ; preds = %60
  %63 = icmp ne i32 %jp.0, 0
  br i1 %63, label %64, label %90

; <label>:64                                      ; preds = %62, %60
  %65 = icmp ne i32 %ip.0, 0
  br i1 %65, label %66, label %71

; <label>:66                                      ; preds = %64
  %67 = icmp ne i32 %jp.0, 0
  br i1 %67, label %68, label %71

; <label>:68                                      ; preds = %66
  %69 = icmp ne i32 %ip.0, %jp.0
  br i1 %69, label %70, label %71

; <label>:70                                      ; preds = %68
  br label %89

; <label>:71                                      ; preds = %68, %66, %64
  %72 = icmp eq i32 %ip.0, 1
  br i1 %72, label %75, label %73

; <label>:73                                      ; preds = %71
  %74 = icmp eq i32 %jp.0, 1
  br i1 %74, label %75, label %78

; <label>:75                                      ; preds = %73, %71
  %76 = load double* @_ZN20ComputeNonbondedUtil6lambdaE, align 8
  %77 = load double* @_ZN20ComputeNonbondedUtil7lambda2E, align 8
  br label %88

; <label>:78                                      ; preds = %73
  %79 = icmp eq i32 %ip.0, 2
  br i1 %79, label %82, label %80

; <label>:80                                      ; preds = %78
  %81 = icmp eq i32 %jp.0, 2
  br i1 %81, label %82, label %87

; <label>:82                                      ; preds = %80, %78
  %83 = load double* @_ZN20ComputeNonbondedUtil6lambdaE, align 8
  %84 = fsub double 1.000000e+00, %83
  %85 = load double* @_ZN20ComputeNonbondedUtil7lambda2E, align 8
  %86 = fsub double 1.000000e+00, %85
  br label %87

; <label>:87                                      ; preds = %82, %80
  %d_lambda_pair.0 = phi double [ %86, %82 ], [ 1.000000e+00, %80 ]
  %lambda_pair.0 = phi double [ %84, %82 ], [ 1.000000e+00, %80 ]
  br label %88

; <label>:88                                      ; preds = %87, %75
  %d_lambda_pair.1 = phi double [ %77, %75 ], [ %d_lambda_pair.0, %87 ]
  %lambda_pair.1 = phi double [ %76, %75 ], [ %lambda_pair.0, %87 ]
  br label %89

; <label>:89                                      ; preds = %88, %70
  %d_lambda_pair.2 = phi double [ 0.000000e+00, %70 ], [ %d_lambda_pair.1, %88 ]
  %lambda_pair.2 = phi double [ 0.000000e+00, %70 ], [ %lambda_pair.1, %88 ]
  br label %90

; <label>:90                                      ; preds = %89, %62
  %d_lambda_pair.3 = phi double [ %d_lambda_pair.2, %89 ], [ 1.000000e+00, %62 ]
  %lambda_pair.3 = phi double [ %lambda_pair.2, %89 ], [ 1.000000e+00, %62 ]
  %91 = mul nsw i32 3, %ip.0
  %92 = add nsw i32 %91, %jp.0
  %93 = mul nsw i32 2, %92
  %94 = sext i32 %93 to i64
  %95 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %96 = getelementptr inbounds double* %95, i64 %94
  store double %lambda_pair.3, double* %96, align 8
  %97 = mul nsw i32 3, %ip.0
  %98 = add nsw i32 %97, %jp.0
  %99 = mul nsw i32 2, %98
  %100 = add nsw i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %103 = getelementptr inbounds double* %102, i64 %101
  store double %d_lambda_pair.3, double* %103, align 8
  br label %104

; <label>:104                                     ; preds = %90
  %105 = add nsw i32 %jp.0, 1
  br label %58

; <label>:106                                     ; preds = %58
  br label %107

; <label>:107                                     ; preds = %106
  %108 = add nsw i32 %ip.0, 1
  br label %55

; <label>:109                                     ; preds = %55
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil20calc_pair_energy_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil20calc_self_energy_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil30calc_pair_energy_fullelect_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcFullPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil30calc_self_energy_fullelect_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcFullSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil36calc_pair_energy_merge_fullelect_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil19calcMergePairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil36calc_self_energy_merge_fullelect_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil19calcMergeSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil35calc_pair_energy_slow_fullelect_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcSlowPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil35calc_self_energy_slow_fullelect_fepEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcSlowSelfEnergyE, align 8
  br label %176

; <label>:110                                     ; preds = %45
  %111 = load i32* @_ZN20ComputeNonbondedUtil5lesOnE, align 4
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %166

; <label>:113                                     ; preds = %110
  %114 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 26
  %115 = load i32* %114, align 4
  store i32 %115, i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %116 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %117 = sitofp i32 %116 to double
  %118 = fdiv double 1.000000e+00, %117
  store double %118, double* @_ZN20ComputeNonbondedUtil10lesScalingE, align 8
  %119 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %120 = add nsw i32 %119, 1
  %121 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %122 = add nsw i32 %121, 1
  %123 = mul nsw i32 %120, %122
  %124 = sext i32 %123 to i64
  %125 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %124, i64 8)
  %126 = extractvalue { i64, i1 } %125, 1
  %127 = extractvalue { i64, i1 } %125, 0
  %128 = select i1 %126, i64 -1, i64 %127
  %129 = call noalias i8* @_Znam(i64 %128) #9
  %130 = bitcast i8* %129 to double*
  store double* %130, double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  br label %131

; <label>:131                                     ; preds = %163, %113
  %ip1.0 = phi i32 [ 0, %113 ], [ %164, %163 ]
  %132 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %133 = icmp sle i32 %ip1.0, %132
  br i1 %133, label %134, label %165

; <label>:134                                     ; preds = %131
  br label %135

; <label>:135                                     ; preds = %160, %134
  %jp2.0 = phi i32 [ 0, %134 ], [ %161, %160 ]
  %136 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %137 = icmp sle i32 %jp2.0, %136
  br i1 %137, label %138, label %162

; <label>:138                                     ; preds = %135
  %139 = icmp ne i32 %ip1.0, 0
  br i1 %139, label %142, label %140

; <label>:140                                     ; preds = %138
  %141 = icmp ne i32 %jp2.0, 0
  br i1 %141, label %142, label %152

; <label>:142                                     ; preds = %140, %138
  %143 = icmp ne i32 %ip1.0, 0
  br i1 %143, label %144, label %149

; <label>:144                                     ; preds = %142
  %145 = icmp ne i32 %jp2.0, 0
  br i1 %145, label %146, label %149

; <label>:146                                     ; preds = %144
  %147 = icmp ne i32 %ip1.0, %jp2.0
  br i1 %147, label %148, label %149

; <label>:148                                     ; preds = %146
  br label %151

; <label>:149                                     ; preds = %146, %144, %142
  %150 = load double* @_ZN20ComputeNonbondedUtil10lesScalingE, align 8
  br label %151

; <label>:151                                     ; preds = %149, %148
  %lambda_pair3.0 = phi double [ 0.000000e+00, %148 ], [ %150, %149 ]
  br label %152

; <label>:152                                     ; preds = %151, %140
  %lambda_pair3.1 = phi double [ %lambda_pair3.0, %151 ], [ 1.000000e+00, %140 ]
  %153 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %154 = add nsw i32 %153, 1
  %155 = mul nsw i32 %154, %ip1.0
  %156 = add nsw i32 %155, %jp2.0
  %157 = sext i32 %156 to i64
  %158 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %159 = getelementptr inbounds double* %158, i64 %157
  store double %lambda_pair3.1, double* %159, align 8
  br label %160

; <label>:160                                     ; preds = %152
  %161 = add nsw i32 %jp2.0, 1
  br label %135

; <label>:162                                     ; preds = %135
  br label %163

; <label>:163                                     ; preds = %162
  %164 = add nsw i32 %ip1.0, 1
  br label %131

; <label>:165                                     ; preds = %131
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil13calc_pair_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil8calcPairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil20calc_pair_energy_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil13calc_self_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil8calcSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil20calc_self_energy_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil23calc_pair_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcFullPairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil30calc_pair_energy_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcFullPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil23calc_self_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcFullSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil30calc_self_energy_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcFullSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil29calc_pair_merge_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil13calcMergePairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil36calc_pair_energy_merge_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil19calcMergePairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil29calc_self_merge_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil13calcMergeSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil36calc_self_energy_merge_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil19calcMergeSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil28calc_pair_slow_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcSlowPairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil35calc_pair_energy_slow_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcSlowPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil28calc_self_slow_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcSlowSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil35calc_self_energy_slow_fullelect_lesEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcSlowSelfEnergyE, align 8
  br label %175

; <label>:166                                     ; preds = %110
  %167 = load i32* @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %172, label %169

; <label>:169                                     ; preds = %166
  %170 = load i32* @_ZN20ComputeNonbondedUtil24pressureProfileNonbondedE, align 4
  %171 = icmp ne i32 %170, 0
  br i1 %171, label %172, label %173

; <label>:172                                     ; preds = %169, %166
  store void (%struct.nonbonded*)* null, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcPairEnergyE, align 8
  store void (%struct.nonbonded*)* null, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcSelfEnergyE, align 8
  br label %174

; <label>:173                                     ; preds = %169
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil9calc_pairEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil8calcPairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil16calc_pair_energyEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil8calcSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil16calc_self_energyEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil14calcSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil19calc_pair_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcFullPairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil26calc_pair_energy_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcFullPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil19calc_self_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcFullSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil26calc_self_energy_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcFullSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil25calc_pair_merge_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil13calcMergePairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil32calc_pair_energy_merge_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil19calcMergePairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil25calc_self_merge_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil13calcMergeSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil32calc_self_energy_merge_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil19calcMergeSelfEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil24calc_pair_slow_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcSlowPairE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil31calc_pair_energy_slow_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcSlowPairEnergyE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil24calc_self_slow_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil12calcSlowSelfE, align 8
  store void (%struct.nonbonded*)* @_ZN20ComputeNonbondedUtil31calc_self_energy_slow_fullelectEP9nonbonded, void (%struct.nonbonded*)** @_ZN20ComputeNonbondedUtil18calcSlowSelfEnergyE, align 8
  br label %174

; <label>:174                                     ; preds = %173, %172
  br label %175

; <label>:175                                     ; preds = %174, %165
  br label %176

; <label>:176                                     ; preds = %175, %109
  %177 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 39
  %178 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %179 = fpext float %178 to double
  %180 = load double* %177, align 8
  %181 = fadd double %179, %180
  %182 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %183 = fpext float %182 to double
  %184 = load double* %177, align 8
  %185 = fadd double %183, %184
  %186 = fmul double %181, %185
  store double %186, double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %187 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 6
  %188 = load double* %187, align 8
  %189 = fdiv double 1.000000e+00, %188
  store double %189, double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  store %class.Molecule* %molecule, %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %190 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 9
  %191 = load double* %190, align 8
  store double %191, double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %192 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 7
  %193 = load i32* %192, align 4
  %194 = icmp eq i32 %193, 4
  br i1 %194, label %195, label %198

; <label>:195                                     ; preds = %176
  %196 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 8
  %197 = load double* %196, align 8
  store double %197, double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  br label %199

; <label>:198                                     ; preds = %176
  store double 1.000000e+00, double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  br label %199

; <label>:199                                     ; preds = %198, %195
  %200 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 11
  %201 = load i32* %200, align 4
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %218

; <label>:203                                     ; preds = %199
  %204 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 12
  %205 = load double* %204, align 8
  %206 = fptrunc double %205 to float
  store float %206, float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %207 = load float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %208 = fpext float %207 to double
  %209 = fdiv double 1.000000e+00, %208
  store double %209, double* @_ZN20ComputeNonbondedUtil10switchOn_1E, align 8
  %210 = load float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %211 = load float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %212 = fmul float %210, %211
  %213 = fpext float %212 to double
  store double %213, double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %214 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %215 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %216 = fsub double %214, %215
  %217 = fdiv double 1.000000e+00, %216
  store double %217, double* @_ZN20ComputeNonbondedUtil2c0E, align 8
  br label %227

; <label>:218                                     ; preds = %199
  %219 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  store float %219, float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %220 = load float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %221 = fpext float %220 to double
  %222 = fdiv double 1.000000e+00, %221
  store double %222, double* @_ZN20ComputeNonbondedUtil10switchOn_1E, align 8
  %223 = load float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %224 = load float* @_ZN20ComputeNonbondedUtil8switchOnE, align 4
  %225 = fmul float %223, %224
  %226 = fpext float %225 to double
  store double %226, double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil2c0E, align 8
  br label %227

; <label>:227                                     ; preds = %218, %203
  %228 = load double* @_ZN20ComputeNonbondedUtil2c0E, align 8
  %229 = load double* @_ZN20ComputeNonbondedUtil2c0E, align 8
  %230 = fmul double %228, %229
  %231 = load double* @_ZN20ComputeNonbondedUtil2c0E, align 8
  %232 = fmul double %230, %231
  store double %232, double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %233 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %234 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %235 = fsub double %233, %234
  %236 = fmul double 3.000000e+00, %235
  store double %236, double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil2c5E, align 8
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil2c6E, align 8
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil2c7E, align 8
  store double 0.000000e+00, double* @_ZN20ComputeNonbondedUtil2c8E, align 8
  %237 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 35
  %238 = load i32* %237, align 4
  %239 = icmp ne i32 %238, 0
  br i1 %239, label %240, label %245

; <label>:240                                     ; preds = %227
  %241 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 37
  %242 = load double* %241, align 8
  store double %242, double* @_ZN20ComputeNonbondedUtil8ewaldcofE, align 8
  %243 = load double* @_ZN20ComputeNonbondedUtil8ewaldcofE, align 8
  %244 = fmul double 0x3FF20DD750429B61, %243
  store double %244, double* @_ZN20ComputeNonbondedUtil11pi_ewaldcofE, align 8
  br label %245

; <label>:245                                     ; preds = %240, %227
  %246 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 11
  %247 = load i32* %246, align 4
  %248 = icmp ne i32 %247, 0
  br i1 %248, label %249, label %250

; <label>:249                                     ; preds = %245
  br label %250

; <label>:250                                     ; preds = %249, %245
  %splitType.0 = phi i32 [ 2, %249 ], [ 1, %245 ]
  %251 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 34
  %252 = load i32* %251, align 4
  %253 = icmp ne i32 %252, 0
  br i1 %253, label %260, label %254

; <label>:254                                     ; preds = %250
  %255 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 33
  %256 = load i32* %255, align 4
  %257 = icmp ne i32 %256, 0
  br i1 %257, label %260, label %258

; <label>:258                                     ; preds = %254
  %259 = icmp ne i32 %238, 0
  br i1 %259, label %260, label %268

; <label>:260                                     ; preds = %258, %254, %250
  %261 = getelementptr inbounds %class.SimParameters* %simParams, i32 0, i32 38
  %262 = load i32* %261, align 4
  switch i32 %262, label %266 [
    i32 2, label %263
    i32 1, label %264
    i32 0, label %265
  ]

; <label>:263                                     ; preds = %260
  br label %267

; <label>:264                                     ; preds = %260
  call void @_Z8NAMD_diePKc(i8* getelementptr inbounds ([38 x i8]* @.str, i32 0, i32 0))
  br label %267

; <label>:265                                     ; preds = %260
  call void @_Z8NAMD_diePKc(i8* getelementptr inbounds ([38 x i8]* @.str1, i32 0, i32 0))
  br label %267

; <label>:266                                     ; preds = %260
  call void @_Z8NAMD_diePKc(i8* getelementptr inbounds ([30 x i8]* @.str2, i32 0, i32 0))
  br label %267

; <label>:267                                     ; preds = %266, %265, %264, %263
  %splitType.1 = phi i32 [ %splitType.0, %266 ], [ %splitType.0, %265 ], [ %splitType.0, %264 ], [ 3, %263 ]
  br label %268

; <label>:268                                     ; preds = %267, %258
  %splitType.2 = phi i32 [ %splitType.1, %267 ], [ %splitType.0, %258 ]
  store double 1.000000e+00, double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  store i32 0, i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  br label %269

; <label>:269                                     ; preds = %272, %268
  %270 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %271 = fcmp ogt double %270, 1.000000e-01
  br i1 %271, label %272, label %277

; <label>:272                                     ; preds = %269
  %273 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %274 = fdiv double %273, 2.000000e+00
  store double %274, double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %275 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %276 = add nsw i32 %275, 1
  store i32 %276, i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  br label %269

; <label>:277                                     ; preds = %269
  %278 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %279 = fdiv double 1.000000e+00, %278
  store double %279, double* @_ZN20ComputeNonbondedUtil10r2_delta_1E, align 8
  br label %280

; <label>:280                                     ; preds = %283, %277
  %cutoff2_exp.0 = phi i32 [ 0, %277 ], [ %285, %283 ]
  %r2_tmp.0 = phi double [ 1.000000e+00, %277 ], [ %284, %283 ]
  %281 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %282 = fcmp ogt double %281, %r2_tmp.0
  br i1 %282, label %283, label %286

; <label>:283                                     ; preds = %280
  %284 = fmul double %r2_tmp.0, 2.000000e+00
  %285 = add nsw i32 %cutoff2_exp.0, 1
  br label %280

; <label>:286                                     ; preds = %280
  %287 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %288 = add nsw i32 %287, %cutoff2_exp.0
  %289 = mul nsw i32 %288, 64
  %290 = add nsw i32 %289, 1
  %291 = load double** @_ZN20ComputeNonbondedUtil11table_allocE, align 8
  %292 = icmp ne double* %291, null
  br i1 %292, label %293, label %299

; <label>:293                                     ; preds = %286
  %294 = load double** @_ZN20ComputeNonbondedUtil11table_allocE, align 8
  %295 = icmp eq double* %294, null
  br i1 %295, label %298, label %296

; <label>:296                                     ; preds = %293
  %297 = bitcast double* %294 to i8*
  call void @_ZdaPv(i8* %297) #8
  br label %298

; <label>:298                                     ; preds = %296, %293
  br label %299

; <label>:299                                     ; preds = %298, %286
  %300 = mul nsw i32 60, %290
  %301 = add nsw i32 %300, 16
  %302 = sext i32 %301 to i64
  %303 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %302, i64 8)
  %304 = extractvalue { i64, i1 } %303, 1
  %305 = extractvalue { i64, i1 } %303, 0
  %306 = select i1 %304, i64 -1, i64 %305
  %307 = call noalias i8* @_Znam(i64 %306) #9
  %308 = bitcast i8* %307 to double*
  store double* %308, double** @_ZN20ComputeNonbondedUtil11table_allocE, align 8
  %309 = load double** @_ZN20ComputeNonbondedUtil11table_allocE, align 8
  br label %310

; <label>:310                                     ; preds = %314, %299
  %table_align.0 = phi double* [ %309, %299 ], [ %315, %314 ]
  %311 = ptrtoint double* %table_align.0 to i64
  %312 = srem i64 %311, 128
  %313 = icmp ne i64 %312, 0
  br i1 %313, label %314, label %316

; <label>:314                                     ; preds = %310
  %315 = getelementptr inbounds double* %table_align.0, i32 1
  br label %310

; <label>:316                                     ; preds = %310
  store double* %table_align.0, double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %317 = mul nsw i32 16, %290
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds double* %table_align.0, i64 %318
  store double* %319, double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %320 = mul nsw i32 32, %290
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds double* %table_align.0, i64 %321
  store double* %322, double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %323 = mul nsw i32 36, %290
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds double* %table_align.0, i64 %324
  store double* %325, double** @_ZN20ComputeNonbondedUtil10fast_tableE, align 8
  %326 = mul nsw i32 40, %290
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds double* %table_align.0, i64 %327
  store double* %328, double** @_ZN20ComputeNonbondedUtil10scor_tableE, align 8
  %329 = mul nsw i32 44, %290
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds double* %table_align.0, i64 %330
  store double* %331, double** @_ZN20ComputeNonbondedUtil10corr_tableE, align 8
  %332 = mul nsw i32 48, %290
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds double* %table_align.0, i64 %333
  store double* %334, double** @_ZN20ComputeNonbondedUtil10full_tableE, align 8
  %335 = mul nsw i32 52, %290
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds double* %table_align.0, i64 %336
  store double* %337, double** @_ZN20ComputeNonbondedUtil10vdwa_tableE, align 8
  %338 = mul nsw i32 56, %290
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds double* %table_align.0, i64 %339
  store double* %340, double** @_ZN20ComputeNonbondedUtil10vdwb_tableE, align 8
  %341 = load double** @_ZN20ComputeNonbondedUtil10fast_tableE, align 8
  %342 = load double** @_ZN20ComputeNonbondedUtil10scor_tableE, align 8
  %343 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %344 = load double** @_ZN20ComputeNonbondedUtil10vdwa_tableE, align 8
  %345 = load double** @_ZN20ComputeNonbondedUtil10vdwb_tableE, align 8
  br label %346

; <label>:346                                     ; preds = %488, %316
  %slow_energy.0 = phi double [ undef, %316 ], [ %slow_energy.1, %488 ]
  %scor_gradient.0 = phi double [ undef, %316 ], [ %424, %488 ]
  %scor_energy.0 = phi double [ undef, %316 ], [ %scor_energy.1, %488 ]
  %fast_gradient.0 = phi double [ undef, %316 ], [ %422, %488 ]
  %fast_energy.0 = phi double [ undef, %316 ], [ %fast_energy.1, %488 ]
  %slow_gradient.0 = phi double [ undef, %316 ], [ %426, %488 ]
  %vdwb_i.0 = phi double* [ %345, %316 ], [ %487, %488 ]
  %vdwa_i.0 = phi double* [ %344, %316 ], [ %483, %488 ]
  %slow_i.0 = phi double* [ %343, %316 ], [ %479, %488 ]
  %scor_i.0 = phi double* [ %342, %316 ], [ %475, %488 ]
  %fast_i.0 = phi double* [ %341, %316 ], [ %471, %488 ]
  %i.0 = phi i32 [ 0, %316 ], [ %489, %488 ]
  %347 = icmp slt i32 %i.0, %290
  br i1 %347, label %348, label %490

; <label>:348                                     ; preds = %346
  %349 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %350 = sdiv i32 %i.0, 64
  %351 = shl i32 1, %350
  %352 = sitofp i32 %351 to double
  %353 = fmul double %349, %352
  %354 = fdiv double %353, 6.400000e+01
  %355 = srem i32 %i.0, 64
  %356 = sitofp i32 %355 to double
  %357 = fmul double %354, %356
  %358 = fadd double %353, %357
  %359 = call double @sqrt(double %358) #10
  %360 = fdiv double 1.000000e+00, %359
  %361 = fdiv double 1.000000e+00, %358
  %362 = icmp ne i32 %238, 0
  br i1 %362, label %363, label %374

; <label>:363                                     ; preds = %348
  %364 = load double* @_ZN20ComputeNonbondedUtil8ewaldcofE, align 8
  %365 = fmul double %359, %364
  %366 = call double @erfc(double %365) #10
  %367 = load double* @_ZN20ComputeNonbondedUtil11pi_ewaldcofE, align 8
  %368 = fmul double %365, %365
  %369 = fsub double -0.000000e+00, %368
  %370 = call double @exp(double %369) #10
  %371 = fmul double %367, %370
  %372 = fmul double %371, %359
  %373 = fadd double %372, %366
  br label %375

; <label>:374                                     ; preds = %348
  br label %375

; <label>:375                                     ; preds = %374, %363
  %corr_energy.0 = phi double [ %366, %363 ], [ 0.000000e+00, %374 ]
  %corr_gradient.0 = phi double [ %373, %363 ], [ 0.000000e+00, %374 ]
  switch i32 %splitType.2, label %420 [
    i32 1, label %376
    i32 2, label %379
    i32 3, label %396
  ]

; <label>:376                                     ; preds = %375
  %377 = fdiv double 1.000000e+00, %359
  %378 = fdiv double -1.000000e+00, %358
  br label %420

; <label>:379                                     ; preds = %375
  %380 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %381 = fdiv double %358, %380
  %382 = fsub double %381, 1.000000e+00
  %383 = fmul double %382, %382
  %384 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %385 = fdiv double %358, %384
  %386 = fsub double %385, 1.000000e+00
  %387 = fmul double 2.000000e+00, %386
  %388 = fmul double %387, 2.000000e+00
  %389 = fmul double %388, %359
  %390 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %391 = fdiv double %389, %390
  %392 = fdiv double %383, %359
  %393 = fdiv double %391, %359
  %394 = fdiv double %383, %358
  %395 = fsub double %393, %394
  br label %420

; <label>:396                                     ; preds = %375
  %397 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %398 = fpext float %397 to double
  %399 = fdiv double 5.000000e-01, %398
  %400 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %401 = fdiv double %358, %400
  %402 = fsub double 3.000000e+00, %401
  %403 = fmul double %399, %402
  %404 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %405 = fdiv double -1.000000e+00, %404
  %406 = load float* @_ZN20ComputeNonbondedUtil6cutoffE, align 4
  %407 = fpext float %406 to double
  %408 = fdiv double %359, %407
  %409 = fmul double %405, %408
  %410 = fsub double %corr_energy.0, 1.000000e+00
  %411 = fdiv double %410, %359
  %412 = fadd double %403, %411
  %413 = fsub double %corr_gradient.0, 1.000000e+00
  %414 = fdiv double %413, %358
  %415 = fsub double %409, %414
  %416 = fdiv double 1.000000e+00, %359
  %417 = fsub double %416, %403
  %418 = fdiv double -1.000000e+00, %358
  %419 = fsub double %418, %409
  br label %420

; <label>:420                                     ; preds = %396, %379, %376, %375
  %slow_energy.1 = phi double [ %slow_energy.0, %375 ], [ %403, %396 ], [ 0.000000e+00, %379 ], [ 0.000000e+00, %376 ]
  %scor_gradient.1 = phi double [ %scor_gradient.0, %375 ], [ %415, %396 ], [ 0.000000e+00, %379 ], [ 0.000000e+00, %376 ]
  %scor_energy.1 = phi double [ %scor_energy.0, %375 ], [ %412, %396 ], [ 0.000000e+00, %379 ], [ 0.000000e+00, %376 ]
  %fast_gradient.1 = phi double [ %fast_gradient.0, %375 ], [ %419, %396 ], [ %395, %379 ], [ %378, %376 ]
  %fast_energy.1 = phi double [ %fast_energy.0, %375 ], [ %417, %396 ], [ %392, %379 ], [ %377, %376 ]
  %slow_gradient.1 = phi double [ %slow_gradient.0, %375 ], [ %409, %396 ], [ 0.000000e+00, %379 ], [ 0.000000e+00, %376 ]
  %421 = fmul double 5.000000e-01, %360
  %422 = fmul double %fast_gradient.1, %421
  %423 = fmul double 5.000000e-01, %360
  %424 = fmul double %scor_gradient.1, %423
  %425 = fmul double 5.000000e-01, %360
  %426 = fmul double %slow_gradient.1, %425
  %427 = fmul double %361, %361
  %428 = fmul double %427, %361
  %429 = fmul double %428, %428
  %430 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %431 = fsub double %430, %358
  %432 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %433 = fmul double 2.000000e+00, %431
  %434 = fsub double %432, %433
  %435 = fmul double %431, %434
  %436 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %437 = fcmp ogt double %358, %436
  br i1 %437, label %438, label %442

; <label>:438                                     ; preds = %420
  %439 = fmul double %431, %435
  %440 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %441 = fmul double %439, %440
  br label %443

; <label>:442                                     ; preds = %420
  br label %443

; <label>:443                                     ; preds = %442, %438
  %444 = phi double [ %441, %438 ], [ 1.000000e+00, %442 ]
  %445 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %446 = fcmp ogt double %358, %445
  br i1 %446, label %447, label %453

; <label>:447                                     ; preds = %443
  %448 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %449 = fmul double 2.000000e+00, %448
  %450 = fmul double %431, %431
  %451 = fsub double %450, %435
  %452 = fmul double %449, %451
  br label %454

; <label>:453                                     ; preds = %443
  br label %454

; <label>:454                                     ; preds = %453, %447
  %455 = phi double [ %452, %447 ], [ 0.000000e+00, %453 ]
  %456 = fmul double %444, %429
  %457 = fmul double %444, %428
  %458 = fmul double 6.000000e+00, %444
  %459 = fmul double %458, %361
  %460 = fsub double %455, %459
  %461 = fmul double %444, %460
  %462 = fmul double %461, %429
  %463 = fmul double 3.000000e+00, %444
  %464 = fmul double %463, %361
  %465 = fsub double %455, %464
  %466 = fmul double %444, %465
  %467 = fmul double %466, %428
  %468 = getelementptr inbounds double* %fast_i.0, i32 1
  store double %fast_energy.1, double* %fast_i.0, align 8
  %469 = getelementptr inbounds double* %468, i32 1
  store double %422, double* %468, align 8
  %470 = getelementptr inbounds double* %469, i32 1
  store double 0.000000e+00, double* %469, align 8
  %471 = getelementptr inbounds double* %470, i32 1
  store double 0.000000e+00, double* %470, align 8
  %472 = getelementptr inbounds double* %scor_i.0, i32 1
  store double %scor_energy.1, double* %scor_i.0, align 8
  %473 = getelementptr inbounds double* %472, i32 1
  store double %424, double* %472, align 8
  %474 = getelementptr inbounds double* %473, i32 1
  store double 0.000000e+00, double* %473, align 8
  %475 = getelementptr inbounds double* %474, i32 1
  store double 0.000000e+00, double* %474, align 8
  %476 = getelementptr inbounds double* %slow_i.0, i32 1
  store double %slow_energy.1, double* %slow_i.0, align 8
  %477 = getelementptr inbounds double* %476, i32 1
  store double %426, double* %476, align 8
  %478 = getelementptr inbounds double* %477, i32 1
  store double 0.000000e+00, double* %477, align 8
  %479 = getelementptr inbounds double* %478, i32 1
  store double 0.000000e+00, double* %478, align 8
  %480 = getelementptr inbounds double* %vdwa_i.0, i32 1
  store double %456, double* %vdwa_i.0, align 8
  %481 = getelementptr inbounds double* %480, i32 1
  store double %462, double* %480, align 8
  %482 = getelementptr inbounds double* %481, i32 1
  store double 0.000000e+00, double* %481, align 8
  %483 = getelementptr inbounds double* %482, i32 1
  store double 0.000000e+00, double* %482, align 8
  %484 = getelementptr inbounds double* %vdwb_i.0, i32 1
  store double %457, double* %vdwb_i.0, align 8
  %485 = getelementptr inbounds double* %484, i32 1
  store double %467, double* %484, align 8
  %486 = getelementptr inbounds double* %485, i32 1
  store double 0.000000e+00, double* %485, align 8
  %487 = getelementptr inbounds double* %486, i32 1
  store double 0.000000e+00, double* %486, align 8
  br label %488

; <label>:488                                     ; preds = %454
  %489 = add nsw i32 %i.0, 1
  br label %346

; <label>:490                                     ; preds = %346
  br label %491

; <label>:491                                     ; preds = %636, %490
  %j.0 = phi i32 [ 0, %490 ], [ %637, %636 ]
  %492 = icmp slt i32 %j.0, 5
  br i1 %492, label %493, label %638

; <label>:493                                     ; preds = %491
  switch i32 %j.0, label %504 [
    i32 0, label %494
    i32 1, label %496
    i32 2, label %498
    i32 3, label %500
    i32 4, label %502
  ]

; <label>:494                                     ; preds = %493
  %495 = load double** @_ZN20ComputeNonbondedUtil10fast_tableE, align 8
  br label %504

; <label>:496                                     ; preds = %493
  %497 = load double** @_ZN20ComputeNonbondedUtil10scor_tableE, align 8
  br label %504

; <label>:498                                     ; preds = %493
  %499 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  br label %504

; <label>:500                                     ; preds = %493
  %501 = load double** @_ZN20ComputeNonbondedUtil10vdwa_tableE, align 8
  br label %504

; <label>:502                                     ; preds = %493
  %503 = load double** @_ZN20ComputeNonbondedUtil10vdwb_tableE, align 8
  br label %504

; <label>:504                                     ; preds = %502, %500, %498, %496, %494, %493
  %t0.0 = phi double* [ null, %493 ], [ %503, %502 ], [ %501, %500 ], [ %499, %498 ], [ %497, %496 ], [ %495, %494 ]
  br label %505

; <label>:505                                     ; preds = %574, %504
  %t.0 = phi double* [ %t0.0, %504 ], [ %576, %574 ]
  %i.1 = phi i32 [ 0, %504 ], [ %575, %574 ]
  %506 = sub nsw i32 %290, 1
  %507 = icmp slt i32 %i.1, %506
  br i1 %507, label %508, label %577

; <label>:508                                     ; preds = %505
  %509 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %510 = sdiv i32 %i.1, 64
  %511 = shl i32 1, %510
  %512 = sitofp i32 %511 to double
  %513 = fmul double %509, %512
  %514 = fdiv double %513, 6.400000e+01
  %515 = getelementptr inbounds double* %t.0, i64 0
  %516 = load double* %515, align 8
  %517 = getelementptr inbounds double* %t.0, i64 1
  %518 = load double* %517, align 8
  %519 = getelementptr inbounds double* %t.0, i64 4
  %520 = load double* %519, align 8
  %521 = getelementptr inbounds double* %t.0, i64 5
  %522 = load double* %521, align 8
  %523 = fsub double %520, %516
  %524 = fmul double 3.000000e+00, %523
  %525 = fmul double 2.000000e+00, %518
  %526 = fadd double %525, %522
  %527 = fmul double %514, %526
  %528 = fsub double %524, %527
  %529 = fmul double %514, %514
  %530 = fdiv double %528, %529
  %531 = fsub double %520, %516
  %532 = fmul double -2.000000e+00, %531
  %533 = fadd double %518, %522
  %534 = fmul double %514, %533
  %535 = fadd double %532, %534
  %536 = fmul double %514, %514
  %537 = fmul double %536, %514
  %538 = fdiv double %535, %537
  br label %539

; <label>:539                                     ; preds = %569, %508
  %c.0 = phi double [ %530, %508 ], [ %561, %569 ]
  %d.0 = phi double [ %538, %508 ], [ %568, %569 ]
  %k.0 = phi i32 [ 0, %508 ], [ %570, %569 ]
  %540 = icmp slt i32 %k.0, 2
  br i1 %540, label %541, label %571

; <label>:541                                     ; preds = %539
  %542 = fsub double %516, %520
  %543 = fmul double %d.0, %514
  %544 = fadd double %543, %c.0
  %545 = fmul double %544, %514
  %546 = fadd double %545, %518
  %547 = fmul double %546, %514
  %548 = fadd double %542, %547
  %549 = fsub double %518, %522
  %550 = fmul double 3.000000e+00, %d.0
  %551 = fmul double %550, %514
  %552 = fmul double 2.000000e+00, %c.0
  %553 = fadd double %551, %552
  %554 = fmul double %553, %514
  %555 = fadd double %549, %554
  %556 = fmul double 3.000000e+00, %548
  %557 = fmul double %514, %555
  %558 = fsub double %556, %557
  %559 = fmul double %514, %514
  %560 = fdiv double %558, %559
  %561 = fsub double %c.0, %560
  %562 = fmul double -2.000000e+00, %548
  %563 = fmul double %514, %555
  %564 = fadd double %562, %563
  %565 = fmul double %514, %514
  %566 = fmul double %565, %514
  %567 = fdiv double %564, %566
  %568 = fsub double %d.0, %567
  br label %569

; <label>:569                                     ; preds = %541
  %570 = add nsw i32 %k.0, 1
  br label %539

; <label>:571                                     ; preds = %539
  %572 = getelementptr inbounds double* %t.0, i64 2
  store double %c.0, double* %572, align 8
  %573 = getelementptr inbounds double* %t.0, i64 3
  store double %d.0, double* %573, align 8
  br label %574

; <label>:574                                     ; preds = %571
  %575 = add nsw i32 %i.1, 1
  %576 = getelementptr inbounds double* %t.0, i64 4
  br label %505

; <label>:577                                     ; preds = %505
  br label %578

; <label>:578                                     ; preds = %632, %577
  %t.1 = phi double* [ %t0.0, %577 ], [ %634, %632 ]
  %i.2 = phi i32 [ 0, %577 ], [ %633, %632 ]
  %dvmax.0 = phi double [ 0.000000e+00, %577 ], [ %dvmax.1, %632 ]
  %dgmax.0 = phi double [ 0.000000e+00, %577 ], [ %dgmax.1, %632 ]
  %579 = sub nsw i32 %290, 1
  %580 = icmp slt i32 %i.2, %579
  br i1 %580, label %581, label %635

; <label>:581                                     ; preds = %578
  %582 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %583 = sdiv i32 %i.2, 64
  %584 = shl i32 1, %583
  %585 = sitofp i32 %584 to double
  %586 = fmul double %582, %585
  %587 = fdiv double %586, 6.400000e+01
  %588 = getelementptr inbounds double* %t.1, i64 3
  %589 = load double* %588, align 8
  %590 = fmul double %589, %587
  %591 = getelementptr inbounds double* %t.1, i64 2
  %592 = load double* %591, align 8
  %593 = fadd double %590, %592
  %594 = fmul double %593, %587
  %595 = getelementptr inbounds double* %t.1, i64 1
  %596 = load double* %595, align 8
  %597 = fadd double %594, %596
  %598 = fmul double %597, %587
  %599 = getelementptr inbounds double* %t.1, i64 0
  %600 = load double* %599, align 8
  %601 = fadd double %598, %600
  %602 = getelementptr inbounds double* %t.1, i64 4
  %603 = load double* %602, align 8
  %604 = fsub double %601, %603
  %605 = getelementptr inbounds double* %t.1, i64 3
  %606 = load double* %605, align 8
  %607 = fmul double 3.000000e+00, %606
  %608 = fmul double %607, %587
  %609 = getelementptr inbounds double* %t.1, i64 2
  %610 = load double* %609, align 8
  %611 = fmul double 2.000000e+00, %610
  %612 = fadd double %608, %611
  %613 = fmul double %612, %587
  %614 = getelementptr inbounds double* %t.1, i64 1
  %615 = load double* %614, align 8
  %616 = fadd double %613, %615
  %617 = getelementptr inbounds double* %t.1, i64 5
  %618 = load double* %617, align 8
  %619 = fsub double %616, %618
  %620 = call double @fabs(double %604) #3
  %621 = fcmp ogt double %620, %dvmax.0
  br i1 %621, label %622, label %625

; <label>:622                                     ; preds = %581
  %623 = call double @fabs(double %604) #3
  %624 = sitofp i32 %i.2 to double
  br label %625

; <label>:625                                     ; preds = %622, %581
  %dvmax.1 = phi double [ %623, %622 ], [ %dvmax.0, %581 ]
  %626 = call double @fabs(double %619) #3
  %627 = fcmp ogt double %626, %dgmax.0
  br i1 %627, label %628, label %631

; <label>:628                                     ; preds = %625
  %629 = call double @fabs(double %619) #3
  %630 = sitofp i32 %i.2 to double
  br label %631

; <label>:631                                     ; preds = %628, %625
  %dgmax.1 = phi double [ %629, %628 ], [ %dgmax.0, %625 ]
  br label %632

; <label>:632                                     ; preds = %631
  %633 = add nsw i32 %i.2, 1
  %634 = getelementptr inbounds double* %t.1, i64 4
  br label %578

; <label>:635                                     ; preds = %578
  br label %636

; <label>:636                                     ; preds = %635
  %637 = add nsw i32 %j.0, 1
  br label %491

; <label>:638                                     ; preds = %491
  br label %639

; <label>:639                                     ; preds = %667, %638
  %i.3 = phi i32 [ 0, %638 ], [ %668, %667 ]
  %640 = mul nsw i32 4, %290
  %641 = icmp slt i32 %i.3, %640
  br i1 %641, label %642, label %669

; <label>:642                                     ; preds = %639
  %643 = sext i32 %i.3 to i64
  %644 = load double** @_ZN20ComputeNonbondedUtil10fast_tableE, align 8
  %645 = getelementptr inbounds double* %644, i64 %643
  %646 = load double* %645, align 8
  %647 = sext i32 %i.3 to i64
  %648 = load double** @_ZN20ComputeNonbondedUtil10scor_tableE, align 8
  %649 = getelementptr inbounds double* %648, i64 %647
  %650 = load double* %649, align 8
  %651 = fadd double %646, %650
  %652 = sext i32 %i.3 to i64
  %653 = load double** @_ZN20ComputeNonbondedUtil10corr_tableE, align 8
  %654 = getelementptr inbounds double* %653, i64 %652
  store double %651, double* %654, align 8
  %655 = sext i32 %i.3 to i64
  %656 = load double** @_ZN20ComputeNonbondedUtil10fast_tableE, align 8
  %657 = getelementptr inbounds double* %656, i64 %655
  %658 = load double* %657, align 8
  %659 = sext i32 %i.3 to i64
  %660 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %661 = getelementptr inbounds double* %660, i64 %659
  %662 = load double* %661, align 8
  %663 = fadd double %658, %662
  %664 = sext i32 %i.3 to i64
  %665 = load double** @_ZN20ComputeNonbondedUtil10full_tableE, align 8
  %666 = getelementptr inbounds double* %665, i64 %664
  store double %663, double* %666, align 8
  br label %667

; <label>:667                                     ; preds = %642
  %668 = add nsw i32 %i.3, 1
  br label %639

; <label>:669                                     ; preds = %639
  br label %670

; <label>:670                                     ; preds = %761, %669
  %i.4 = phi i32 [ 0, %669 ], [ %762, %761 ]
  %671 = icmp slt i32 %i.4, %290
  br i1 %671, label %672, label %763

; <label>:672                                     ; preds = %670
  br label %673

; <label>:673                                     ; preds = %758, %672
  %j7.0 = phi i32 [ 0, %672 ], [ %759, %758 ]
  %674 = icmp slt i32 %j7.0, 4
  br i1 %674, label %675, label %760

; <label>:675                                     ; preds = %673
  %676 = mul nsw i32 4, %i.4
  %677 = add nsw i32 %676, %j7.0
  %678 = sext i32 %677 to i64
  %679 = load double** @_ZN20ComputeNonbondedUtil10vdwa_tableE, align 8
  %680 = getelementptr inbounds double* %679, i64 %678
  %681 = load double* %680, align 8
  %682 = mul nsw i32 16, %i.4
  %683 = add nsw i32 %682, %j7.0
  %684 = sext i32 %683 to i64
  %685 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %686 = getelementptr inbounds double* %685, i64 %684
  store double %681, double* %686, align 8
  %687 = mul nsw i32 16, %i.4
  %688 = add nsw i32 %687, %j7.0
  %689 = sext i32 %688 to i64
  %690 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %691 = getelementptr inbounds double* %690, i64 %689
  store double %681, double* %691, align 8
  %692 = mul nsw i32 4, %i.4
  %693 = add nsw i32 %692, %j7.0
  %694 = sext i32 %693 to i64
  %695 = load double** @_ZN20ComputeNonbondedUtil10vdwb_tableE, align 8
  %696 = getelementptr inbounds double* %695, i64 %694
  %697 = load double* %696, align 8
  %698 = mul nsw i32 16, %i.4
  %699 = add nsw i32 %698, 4
  %700 = add nsw i32 %699, %j7.0
  %701 = sext i32 %700 to i64
  %702 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %703 = getelementptr inbounds double* %702, i64 %701
  store double %697, double* %703, align 8
  %704 = mul nsw i32 16, %i.4
  %705 = add nsw i32 %704, 4
  %706 = add nsw i32 %705, %j7.0
  %707 = sext i32 %706 to i64
  %708 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %709 = getelementptr inbounds double* %708, i64 %707
  store double %697, double* %709, align 8
  %710 = mul nsw i32 4, %i.4
  %711 = add nsw i32 %710, %j7.0
  %712 = sext i32 %711 to i64
  %713 = load double** @_ZN20ComputeNonbondedUtil10fast_tableE, align 8
  %714 = getelementptr inbounds double* %713, i64 %712
  %715 = load double* %714, align 8
  %716 = mul nsw i32 16, %i.4
  %717 = add nsw i32 %716, 8
  %718 = add nsw i32 %717, %j7.0
  %719 = sext i32 %718 to i64
  %720 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %721 = getelementptr inbounds double* %720, i64 %719
  store double %715, double* %721, align 8
  %722 = mul nsw i32 4, %i.4
  %723 = add nsw i32 %722, %j7.0
  %724 = sext i32 %723 to i64
  %725 = load double** @_ZN20ComputeNonbondedUtil10scor_tableE, align 8
  %726 = getelementptr inbounds double* %725, i64 %724
  %727 = load double* %726, align 8
  %728 = mul nsw i32 16, %i.4
  %729 = add nsw i32 %728, 12
  %730 = add nsw i32 %729, %j7.0
  %731 = sext i32 %730 to i64
  %732 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %733 = getelementptr inbounds double* %732, i64 %731
  store double %727, double* %733, align 8
  %734 = mul nsw i32 4, %i.4
  %735 = add nsw i32 %734, %j7.0
  %736 = sext i32 %735 to i64
  %737 = load double** @_ZN20ComputeNonbondedUtil10corr_tableE, align 8
  %738 = getelementptr inbounds double* %737, i64 %736
  %739 = load double* %738, align 8
  %740 = mul nsw i32 16, %i.4
  %741 = add nsw i32 %740, 8
  %742 = add nsw i32 %741, %j7.0
  %743 = sext i32 %742 to i64
  %744 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %745 = getelementptr inbounds double* %744, i64 %743
  store double %739, double* %745, align 8
  %746 = mul nsw i32 4, %i.4
  %747 = add nsw i32 %746, %j7.0
  %748 = sext i32 %747 to i64
  %749 = load double** @_ZN20ComputeNonbondedUtil10full_tableE, align 8
  %750 = getelementptr inbounds double* %749, i64 %748
  %751 = load double* %750, align 8
  %752 = mul nsw i32 16, %i.4
  %753 = add nsw i32 %752, 12
  %754 = add nsw i32 %753, %j7.0
  %755 = sext i32 %754 to i64
  %756 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %757 = getelementptr inbounds double* %756, i64 %755
  store double %751, double* %757, align 8
  br label %758

; <label>:758                                     ; preds = %675
  %759 = add nsw i32 %j7.0, 1
  br label %673

; <label>:760                                     ; preds = %673
  br label %761

; <label>:761                                     ; preds = %760
  %762 = add nsw i32 %i.4, 1
  br label %670

; <label>:763                                     ; preds = %670
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znam(i64) #2

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil20calc_pair_energy_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.43, align 4
  %r2f29 = alloca %union.anon.44, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1221

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1221

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1111, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1111 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1111 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1111 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1112, %1111 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_zz.3, %1111 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yz.3, %1111 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yy.3, %1111 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xz.3, %1111 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xy.3, %1111 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xx.3, %1111 ]
  %electEnergy_s.0 = phi double [ 0.000000e+00, %262 ], [ %electEnergy_s.3, %1111 ]
  %vdwEnergy_s.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy_s.3, %1111 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %electEnergy.3, %1111 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy.3, %1111 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1111 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1113

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1111

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1111

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %506 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 28
  %509 = mul nsw i32 6, %508
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds double* %505, i64 %510
  %512 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %513 = load float* %512, align 4
  %514 = fpext float %513 to double
  %515 = fmul double 3.320636e+02, %514
  %516 = fmul double %515, %15
  %517 = fmul double %516, %9
  %518 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %519 = load i32* %518, align 4
  %520 = and i32 %519, 4194303
  %521 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %520)
  %522 = zext i16 %521 to i32
  %523 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %522)
  %524 = icmp ne i32 %504, 0
  br i1 %524, label %525, label %587

; <label>:525                                     ; preds = %502
  br label %526

; <label>:526                                     ; preds = %584, %525
  %pli4.0 = phi i32* [ %221, %525 ], [ %pli4.2, %584 ]
  %plin.0 = phi i32* [ %235, %525 ], [ %plin.2, %584 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %525 ], [ %585, %584 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %525 ], [ %exclChecksum.3, %584 ]
  %527 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %527, label %528, label %586

; <label>:528                                     ; preds = %526
  %529 = sext i32 %k.0 to i64
  %530 = getelementptr inbounds i32* %207, i64 %529
  %531 = load i32* %530, align 4
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %36, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 0
  %536 = load double* %535, align 8
  %537 = fsub double %303, %536
  %538 = fmul double %537, %537
  %539 = sext i32 %531 to i64
  %540 = getelementptr inbounds %struct.CompAtom* %36, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %540, i32 0, i32 0
  %542 = getelementptr inbounds %class.Vector* %541, i32 0, i32 1
  %543 = load double* %542, align 8
  %544 = fsub double %306, %543
  %545 = fmul double %544, %544
  %546 = fadd double %538, %545
  %547 = sext i32 %531 to i64
  %548 = getelementptr inbounds %struct.CompAtom* %36, i64 %547
  %549 = getelementptr inbounds %struct.CompAtom* %548, i32 0, i32 0
  %550 = getelementptr inbounds %class.Vector* %549, i32 0, i32 2
  %551 = load double* %550, align 8
  %552 = fsub double %309, %551
  %553 = fmul double %552, %552
  %554 = fadd double %546, %553
  %555 = sext i32 %531 to i64
  %556 = getelementptr inbounds %struct.CompAtom* %36, i64 %555
  %557 = getelementptr inbounds %struct.CompAtom* %556, i32 0, i32 2
  %558 = load i32* %557, align 4
  %559 = lshr i32 %558, 26
  %560 = and i32 %559, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %583, label %562

; <label>:562                                     ; preds = %528
  %563 = fcmp ole double %554, %7
  br i1 %563, label %564, label %583

; <label>:564                                     ; preds = %562
  %565 = fcmp ole double %554, %21
  br i1 %565, label %566, label %569

; <label>:566                                     ; preds = %564
  %567 = add nsw i32 %exclChecksum.1, 1
  %568 = icmp ne i32 %567, 0
  br i1 %568, label %583, label %569

; <label>:569                                     ; preds = %566, %564
  %exclChecksum.2 = phi i32 [ %567, %566 ], [ %exclChecksum.1, %564 ]
  %570 = sext i32 %531 to i64
  %571 = getelementptr inbounds %struct.CompAtom* %36, i64 %570
  %572 = getelementptr inbounds %struct.CompAtom* %571, i32 0, i32 2
  %573 = load i32* %572, align 4
  %574 = and i32 %573, 4194303
  %575 = icmp sge i32 %574, %293
  br i1 %575, label %576, label %580

; <label>:576                                     ; preds = %569
  %577 = icmp sle i32 %574, %295
  br i1 %577, label %578, label %580

; <label>:578                                     ; preds = %576
  %579 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %531, i32* %pli4.0, align 4
  br label %582

; <label>:580                                     ; preds = %576, %569
  %581 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %531, i32* %plin.0, align 4
  br label %582

; <label>:582                                     ; preds = %580, %578
  %pli4.1 = phi i32* [ %579, %578 ], [ %pli4.0, %580 ]
  %plin.1 = phi i32* [ %plin.0, %578 ], [ %581, %580 ]
  br label %583

; <label>:583                                     ; preds = %582, %566, %562, %528
  %pli4.2 = phi i32* [ %pli4.0, %528 ], [ %pli4.0, %566 ], [ %pli4.1, %582 ], [ %pli4.0, %562 ]
  %plin.2 = phi i32* [ %plin.0, %528 ], [ %plin.0, %566 ], [ %plin.1, %582 ], [ %plin.0, %562 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %528 ], [ %567, %566 ], [ %exclChecksum.2, %582 ], [ %exclChecksum.1, %562 ]
  br label %584

; <label>:584                                     ; preds = %583
  %585 = add nsw i32 %k.0, 1
  br label %526

; <label>:586                                     ; preds = %526
  br label %666

; <label>:587                                     ; preds = %502
  %588 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %588, label %589, label %665

; <label>:589                                     ; preds = %587
  %590 = sext i32 %pairlistoffset.1 to i64
  %591 = getelementptr inbounds i32* %207, i64 %590
  %592 = load i32* %591, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds %struct.CompAtom* %36, i64 %593
  %595 = getelementptr inbounds %struct.CompAtom* %594, i32 0, i32 0
  %596 = getelementptr inbounds %class.Vector* %595, i32 0, i32 0
  %597 = load double* %596, align 8
  %598 = sext i32 %592 to i64
  %599 = getelementptr inbounds %struct.CompAtom* %36, i64 %598
  %600 = getelementptr inbounds %struct.CompAtom* %599, i32 0, i32 0
  %601 = getelementptr inbounds %class.Vector* %600, i32 0, i32 1
  %602 = load double* %601, align 8
  %603 = sext i32 %592 to i64
  %604 = getelementptr inbounds %struct.CompAtom* %36, i64 %603
  %605 = getelementptr inbounds %struct.CompAtom* %604, i32 0, i32 0
  %606 = getelementptr inbounds %class.Vector* %605, i32 0, i32 2
  %607 = load double* %606, align 8
  %608 = sext i32 %592 to i64
  %609 = getelementptr inbounds %struct.CompAtom* %36, i64 %608
  %610 = getelementptr inbounds %struct.CompAtom* %609, i32 0, i32 2
  %611 = load i32* %610, align 4
  %612 = and i32 %611, 4194303
  br label %613

; <label>:613                                     ; preds = %658, %589
  %pli4.3 = phi i32* [ %221, %589 ], [ %pli4.5, %658 ]
  %plin.3 = phi i32* [ %235, %589 ], [ %plin.5, %658 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %589 ], [ %616, %658 ]
  %j211.0 = phi i32 [ %592, %589 ], [ %619, %658 ]
  %p_j_x12.0 = phi double [ %597, %589 ], [ %626, %658 ]
  %p_j_y13.0 = phi double [ %602, %589 ], [ %634, %658 ]
  %p_j_z14.0 = phi double [ %607, %589 ], [ %642, %658 ]
  %atom215.0 = phi i32 [ %612, %589 ], [ %663, %658 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %589 ], [ %exclChecksum.6, %658 ]
  %614 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %614, label %615, label %664

; <label>:615                                     ; preds = %613
  %616 = add nsw i32 %k10.0, 1
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i32* %207, i64 %617
  %619 = load i32* %618, align 4
  %620 = fsub double %303, %p_j_x12.0
  %621 = fmul double %620, %620
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %36, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = fsub double %306, %p_j_y13.0
  %628 = fmul double %627, %627
  %629 = fadd double %621, %628
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %36, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 1
  %634 = load double* %633, align 8
  %635 = fsub double %309, %p_j_z14.0
  %636 = fmul double %635, %635
  %637 = fadd double %629, %636
  %638 = sext i32 %619 to i64
  %639 = getelementptr inbounds %struct.CompAtom* %36, i64 %638
  %640 = getelementptr inbounds %struct.CompAtom* %639, i32 0, i32 0
  %641 = getelementptr inbounds %class.Vector* %640, i32 0, i32 2
  %642 = load double* %641, align 8
  %643 = fcmp ole double %637, %7
  br i1 %643, label %644, label %658

; <label>:644                                     ; preds = %615
  %645 = fcmp ole double %637, %21
  br i1 %645, label %646, label %649

; <label>:646                                     ; preds = %644
  %647 = add nsw i32 %exclChecksum.4, 1
  %648 = icmp ne i32 %647, 0
  br i1 %648, label %658, label %649

; <label>:649                                     ; preds = %646, %644
  %exclChecksum.5 = phi i32 [ %647, %646 ], [ %exclChecksum.4, %644 ]
  %650 = icmp sge i32 %atom215.0, %293
  br i1 %650, label %651, label %655

; <label>:651                                     ; preds = %649
  %652 = icmp sle i32 %atom215.0, %295
  br i1 %652, label %653, label %655

; <label>:653                                     ; preds = %651
  %654 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %657

; <label>:655                                     ; preds = %651, %649
  %656 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %657

; <label>:657                                     ; preds = %655, %653
  %pli4.4 = phi i32* [ %654, %653 ], [ %pli4.3, %655 ]
  %plin.4 = phi i32* [ %plin.3, %653 ], [ %656, %655 ]
  br label %658

; <label>:658                                     ; preds = %657, %646, %615
  %pli4.5 = phi i32* [ %pli4.3, %646 ], [ %pli4.4, %657 ], [ %pli4.3, %615 ]
  %plin.5 = phi i32* [ %plin.3, %646 ], [ %plin.4, %657 ], [ %plin.3, %615 ]
  %exclChecksum.6 = phi i32 [ %647, %646 ], [ %exclChecksum.5, %657 ], [ %exclChecksum.4, %615 ]
  %659 = sext i32 %619 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %36, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 2
  %662 = load i32* %661, align 4
  %663 = and i32 %662, 4194303
  br label %613

; <label>:664                                     ; preds = %613
  br label %665

; <label>:665                                     ; preds = %664, %587
  %pli4.6 = phi i32* [ %pli4.3, %664 ], [ %221, %587 ]
  %plin.6 = phi i32* [ %plin.3, %664 ], [ %235, %587 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %664 ], [ %exclChecksum.0, %587 ]
  br label %666

; <label>:666                                     ; preds = %665, %586
  %pli4.7 = phi i32* [ %pli4.0, %586 ], [ %pli4.6, %665 ]
  %plin.7 = phi i32* [ %plin.0, %586 ], [ %plin.6, %665 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %586 ], [ %exclChecksum.7, %665 ]
  %667 = ptrtoint i32* %pli4.7 to i64
  %668 = ptrtoint i32* %221 to i64
  %669 = sub i64 %667, %668
  %670 = sdiv exact i64 %669, 4
  %671 = trunc i64 %670 to i32
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %673, label %680

; <label>:673                                     ; preds = %666
  %674 = sub nsw i32 %671, 1
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i32* %221, i64 %675
  %677 = load i32* %676, align 4
  %678 = sext i32 %671 to i64
  %679 = getelementptr inbounds i32* %221, i64 %678
  store i32 %677, i32* %679, align 4
  br label %680

; <label>:680                                     ; preds = %673, %666
  br label %681

; <label>:681                                     ; preds = %703, %680
  %plin.8 = phi i32* [ %plin.7, %680 ], [ %plin.9, %703 ]
  %plix.0 = phi i32* [ %249, %680 ], [ %plix.1, %703 ]
  %plim.0 = phi i32* [ %263, %680 ], [ %plim.1, %703 ]
  %k18.0 = phi i32 [ 0, %680 ], [ %704, %703 ]
  %682 = icmp slt i32 %k18.0, %671
  br i1 %682, label %683, label %705

; <label>:683                                     ; preds = %681
  %684 = sext i32 %k18.0 to i64
  %685 = getelementptr inbounds i32* %221, i64 %684
  %686 = load i32* %685, align 4
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds %struct.CompAtom* %36, i64 %687
  %689 = getelementptr inbounds %struct.CompAtom* %688, i32 0, i32 2
  %690 = load i32* %689, align 4
  %691 = and i32 %690, 4194303
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8* %300, i64 %692
  %694 = load i8* %693, align 1
  %695 = sext i8 %694 to i32
  switch i32 %695, label %702 [
    i32 0, label %696
    i32 1, label %698
    i32 2, label %700
  ]

; <label>:696                                     ; preds = %683
  %697 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %686, i32* %plin.8, align 4
  br label %702

; <label>:698                                     ; preds = %683
  %699 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %686, i32* %plix.0, align 4
  br label %702

; <label>:700                                     ; preds = %683
  %701 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %686, i32* %plim.0, align 4
  br label %702

; <label>:702                                     ; preds = %700, %698, %696, %683
  %plin.9 = phi i32* [ %plin.8, %683 ], [ %plin.8, %700 ], [ %plin.8, %698 ], [ %697, %696 ]
  %plix.1 = phi i32* [ %plix.0, %683 ], [ %plix.0, %700 ], [ %699, %698 ], [ %plix.0, %696 ]
  %plim.1 = phi i32* [ %plim.0, %683 ], [ %701, %700 ], [ %plim.0, %698 ], [ %plim.0, %696 ]
  br label %703

; <label>:703                                     ; preds = %702
  %704 = add nsw i32 %k18.0, 1
  br label %681

; <label>:705                                     ; preds = %681
  %706 = ptrtoint i32* %plix.0 to i64
  %707 = ptrtoint i32* %249 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %exclChecksum.8 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plim.0 to i64
  %714 = ptrtoint i32* %263 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = sext i32 %712 to i64
  %718 = add nsw i64 %717, %716
  %719 = trunc i64 %718 to i32
  %720 = ptrtoint i32* %plin.8 to i64
  %721 = ptrtoint i32* %235 to i64
  %722 = sub i64 %720, %721
  %723 = sdiv exact i64 %722, 4
  %724 = trunc i64 %723 to i32
  br label %725

; <label>:725                                     ; preds = %911, %705
  %k18.1 = phi i32 [ 0, %705 ], [ %912, %911 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %705 ], [ %904, %911 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %705 ], [ %895, %911 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %705 ], [ %893, %911 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %705 ], [ %884, %911 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %705 ], [ %882, %911 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %705 ], [ %880, %911 ]
  %electEnergy_s.1 = phi double [ %electEnergy_s.0, %705 ], [ %863, %911 ]
  %vdwEnergy_s.1 = phi double [ %vdwEnergy_s.0, %705 ], [ %843, %911 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %705 ], [ %861, %911 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %705 ], [ %841, %911 ]
  %726 = icmp slt i32 %k18.1, %724
  br i1 %726, label %727, label %913

; <label>:727                                     ; preds = %725
  %728 = sext i32 %k18.1 to i64
  %729 = getelementptr inbounds i32* %235, i64 %728
  %730 = load i32* %729, align 4
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds %struct.CompAtom* %36, i64 %731
  %733 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %734 = getelementptr inbounds %class.Vector* %733, i32 0, i32 0
  %735 = load double* %734, align 8
  %736 = fsub double %303, %735
  %737 = fmul double %736, %736
  %738 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %739 = getelementptr inbounds %class.Vector* %738, i32 0, i32 1
  %740 = load double* %739, align 8
  %741 = fsub double %306, %740
  %742 = fmul double %741, %741
  %743 = fadd double %737, %742
  %744 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %745 = getelementptr inbounds %class.Vector* %744, i32 0, i32 2
  %746 = load double* %745, align 8
  %747 = fsub double %309, %746
  %748 = fmul double %747, %747
  %749 = fadd double %743, %748
  %750 = fptrunc double %749 to float
  %751 = bitcast %union.anon.43* %r2f to float*
  store float %750, float* %751, align 4
  %752 = bitcast %union.anon.43* %r2f to i32*
  %753 = load i32* %752, align 4
  %754 = ashr i32 %753, 17
  %755 = add nsw i32 %754, %24
  %756 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 2
  %757 = load i32* %756, align 4
  %758 = and i32 %757, 4194303
  %759 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %758)
  %760 = zext i16 %759 to i32
  %761 = mul nsw i32 2, %760
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds %"struct.LJTable::TableEntry"* %523, i64 %762
  %764 = mul nsw i32 16, %755
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds double* %14, i64 %765
  %767 = getelementptr inbounds double* %766, i64 0
  %768 = load double* %767, align 8
  %769 = mul nsw i32 16, %755
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds double* %14, i64 %770
  %772 = getelementptr inbounds double* %771, i64 4
  %773 = getelementptr inbounds double* %772, i64 0
  %774 = load double* %773, align 8
  %775 = mul nsw i32 16, %755
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds double* %14, i64 %776
  %778 = getelementptr inbounds double* %777, i64 8
  %779 = getelementptr inbounds double* %778, i64 0
  %780 = load double* %779, align 8
  %781 = bitcast %union.anon.43* %r2f to i32*
  %782 = load i32* %781, align 4
  %783 = and i32 %782, -131072
  store i32 %783, i32* %781, align 4
  %784 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 1
  %785 = load float* %784, align 4
  %786 = fpext float %785 to double
  %787 = fmul double %517, %786
  %788 = bitcast %union.anon.43* %r2f to float*
  %789 = load float* %788, align 4
  %790 = fpext float %789 to double
  %791 = fsub double %749, %790
  %792 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 2
  %793 = load i32* %792, align 4
  %794 = lshr i32 %793, 28
  %795 = mul nsw i32 2, %794
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds double* %511, i64 %796
  %798 = load double* %797, align 8
  %799 = mul nsw i32 2, %794
  %800 = add nsw i32 %799, 1
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds double* %511, i64 %801
  %803 = load double* %802, align 8
  %804 = getelementptr inbounds %"struct.LJTable::TableEntry"* %763, i32 0, i32 0
  %805 = load double* %804, align 8
  %806 = fmul double %15, %805
  %807 = getelementptr inbounds %"struct.LJTable::TableEntry"* %763, i32 0, i32 1
  %808 = load double* %807, align 8
  %809 = fmul double %15, %808
  %810 = fmul double %806, %768
  %811 = fmul double %809, %774
  %812 = fsub double %810, %811
  %813 = getelementptr inbounds double* %766, i64 3
  %814 = load double* %813, align 8
  %815 = fmul double %806, %814
  %816 = getelementptr inbounds double* %772, i64 3
  %817 = load double* %816, align 8
  %818 = fmul double %809, %817
  %819 = fsub double %815, %818
  %820 = getelementptr inbounds double* %766, i64 2
  %821 = load double* %820, align 8
  %822 = fmul double %806, %821
  %823 = getelementptr inbounds double* %772, i64 2
  %824 = load double* %823, align 8
  %825 = fmul double %809, %824
  %826 = fsub double %822, %825
  %827 = getelementptr inbounds double* %766, i64 1
  %828 = load double* %827, align 8
  %829 = fmul double %806, %828
  %830 = getelementptr inbounds double* %772, i64 1
  %831 = load double* %830, align 8
  %832 = fmul double %809, %831
  %833 = fsub double %829, %832
  %834 = fmul double %791, %819
  %835 = fadd double %834, %826
  %836 = fmul double %835, %791
  %837 = fadd double %836, %833
  %838 = fmul double %837, %791
  %839 = fadd double %838, %812
  %840 = fmul double %798, %839
  %841 = fadd double %vdwEnergy.1, %840
  %842 = fmul double %803, %839
  %843 = fadd double %vdwEnergy_s.1, %842
  %844 = fmul double %780, %787
  %845 = getelementptr inbounds double* %778, i64 3
  %846 = load double* %845, align 8
  %847 = fmul double %787, %846
  %848 = getelementptr inbounds double* %778, i64 2
  %849 = load double* %848, align 8
  %850 = fmul double %787, %849
  %851 = getelementptr inbounds double* %778, i64 1
  %852 = load double* %851, align 8
  %853 = fmul double %787, %852
  %854 = fmul double %791, %847
  %855 = fadd double %854, %850
  %856 = fmul double %855, %791
  %857 = fadd double %856, %853
  %858 = fmul double %857, %791
  %859 = fadd double %858, %844
  %860 = fmul double %798, %859
  %861 = fadd double %electEnergy.1, %860
  %862 = fmul double %803, %859
  %863 = fadd double %electEnergy_s.1, %862
  %864 = fadd double %847, %819
  %865 = fadd double %850, %826
  %866 = fadd double %853, %833
  %867 = fadd double %844, %812
  %868 = fmul double 3.000000e+00, %791
  %869 = fmul double %868, %864
  %870 = fmul double 2.000000e+00, %865
  %871 = fadd double %869, %870
  %872 = fmul double %871, %791
  %873 = fadd double %872, %866
  %874 = fmul double -2.000000e+00, %798
  %875 = fmul double %874, %873
  %876 = sext i32 %730 to i64
  %877 = getelementptr inbounds %class.Vector* %269, i64 %876
  %878 = fmul double %875, %736
  %879 = fmul double %878, %736
  %880 = fadd double %virial_xx.1, %879
  %881 = fmul double %878, %741
  %882 = fadd double %virial_xy.1, %881
  %883 = fmul double %878, %747
  %884 = fadd double %virial_xz.1, %883
  %885 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %886 = load double* %885, align 8
  %887 = fadd double %886, %878
  store double %887, double* %885, align 8
  %888 = getelementptr inbounds %class.Vector* %877, i32 0, i32 0
  %889 = load double* %888, align 8
  %890 = fsub double %889, %878
  store double %890, double* %888, align 8
  %891 = fmul double %875, %741
  %892 = fmul double %891, %741
  %893 = fadd double %virial_yy.1, %892
  %894 = fmul double %891, %747
  %895 = fadd double %virial_yz.1, %894
  %896 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %897 = load double* %896, align 8
  %898 = fadd double %897, %891
  store double %898, double* %896, align 8
  %899 = getelementptr inbounds %class.Vector* %877, i32 0, i32 1
  %900 = load double* %899, align 8
  %901 = fsub double %900, %891
  store double %901, double* %899, align 8
  %902 = fmul double %875, %747
  %903 = fmul double %902, %747
  %904 = fadd double %virial_zz.1, %903
  %905 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %906 = load double* %905, align 8
  %907 = fadd double %906, %902
  store double %907, double* %905, align 8
  %908 = getelementptr inbounds %class.Vector* %877, i32 0, i32 2
  %909 = load double* %908, align 8
  %910 = fsub double %909, %902
  store double %910, double* %908, align 8
  br label %911

; <label>:911                                     ; preds = %727
  %912 = add nsw i32 %k18.1, 1
  br label %725

; <label>:913                                     ; preds = %725
  %914 = ptrtoint i32* %plim.0 to i64
  %915 = ptrtoint i32* %263 to i64
  %916 = sub i64 %914, %915
  %917 = sdiv exact i64 %916, 4
  %918 = trunc i64 %917 to i32
  br label %919

; <label>:919                                     ; preds = %1108, %913
  %k18.2 = phi i32 [ 0, %913 ], [ %1109, %1108 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %913 ], [ %1101, %1108 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %913 ], [ %1092, %1108 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %913 ], [ %1090, %1108 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %913 ], [ %1081, %1108 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %913 ], [ %1079, %1108 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %913 ], [ %1077, %1108 ]
  %electEnergy_s.2 = phi double [ %electEnergy_s.1, %913 ], [ %1060, %1108 ]
  %vdwEnergy_s.2 = phi double [ %vdwEnergy_s.1, %913 ], [ %1038, %1108 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %913 ], [ %1058, %1108 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %913 ], [ %1036, %1108 ]
  %920 = icmp slt i32 %k18.2, %918
  br i1 %920, label %921, label %1110

; <label>:921                                     ; preds = %919
  %922 = sext i32 %k18.2 to i64
  %923 = getelementptr inbounds i32* %263, i64 %922
  %924 = load i32* %923, align 4
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds %struct.CompAtom* %36, i64 %925
  %927 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 0
  %928 = getelementptr inbounds %class.Vector* %927, i32 0, i32 0
  %929 = load double* %928, align 8
  %930 = fsub double %303, %929
  %931 = fmul double %930, %930
  %932 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 0
  %933 = getelementptr inbounds %class.Vector* %932, i32 0, i32 1
  %934 = load double* %933, align 8
  %935 = fsub double %306, %934
  %936 = fmul double %935, %935
  %937 = fadd double %931, %936
  %938 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 0
  %939 = getelementptr inbounds %class.Vector* %938, i32 0, i32 2
  %940 = load double* %939, align 8
  %941 = fsub double %309, %940
  %942 = fmul double %941, %941
  %943 = fadd double %937, %942
  %944 = fptrunc double %943 to float
  %945 = bitcast %union.anon.44* %r2f29 to float*
  store float %944, float* %945, align 4
  %946 = bitcast %union.anon.44* %r2f29 to i32*
  %947 = load i32* %946, align 4
  %948 = ashr i32 %947, 17
  %949 = add nsw i32 %948, %24
  %950 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 2
  %951 = load i32* %950, align 4
  %952 = and i32 %951, 4194303
  %953 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %952)
  %954 = zext i16 %953 to i32
  %955 = mul nsw i32 2, %954
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds %"struct.LJTable::TableEntry"* %523, i64 %956
  %958 = getelementptr inbounds %"struct.LJTable::TableEntry"* %957, i64 1
  %959 = mul nsw i32 16, %949
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds double* %14, i64 %960
  %962 = getelementptr inbounds double* %961, i64 0
  %963 = load double* %962, align 8
  %964 = mul nsw i32 16, %949
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds double* %14, i64 %965
  %967 = getelementptr inbounds double* %966, i64 4
  %968 = getelementptr inbounds double* %967, i64 0
  %969 = load double* %968, align 8
  %970 = mul nsw i32 16, %949
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds double* %14, i64 %971
  %973 = getelementptr inbounds double* %972, i64 8
  %974 = getelementptr inbounds double* %973, i64 0
  %975 = load double* %974, align 8
  %976 = bitcast %union.anon.44* %r2f29 to i32*
  %977 = load i32* %976, align 4
  %978 = and i32 %977, -131072
  store i32 %978, i32* %976, align 4
  %979 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 1
  %980 = load float* %979, align 4
  %981 = fpext float %980 to double
  %982 = fmul double %517, %981
  %983 = bitcast %union.anon.44* %r2f29 to float*
  %984 = load float* %983, align 4
  %985 = fpext float %984 to double
  %986 = fsub double %943, %985
  %987 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 2
  %988 = load i32* %987, align 4
  %989 = lshr i32 %988, 28
  %990 = mul nsw i32 2, %989
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds double* %511, i64 %991
  %993 = load double* %992, align 8
  %994 = mul nsw i32 2, %989
  %995 = add nsw i32 %994, 1
  %996 = sext i32 %995 to i64
  %997 = getelementptr inbounds double* %511, i64 %996
  %998 = load double* %997, align 8
  %999 = getelementptr inbounds %"struct.LJTable::TableEntry"* %958, i32 0, i32 0
  %1000 = load double* %999, align 8
  %1001 = fmul double %15, %1000
  %1002 = getelementptr inbounds %"struct.LJTable::TableEntry"* %958, i32 0, i32 1
  %1003 = load double* %1002, align 8
  %1004 = fmul double %15, %1003
  %1005 = fmul double %1001, %963
  %1006 = fmul double %1004, %969
  %1007 = fsub double %1005, %1006
  %1008 = getelementptr inbounds double* %961, i64 3
  %1009 = load double* %1008, align 8
  %1010 = fmul double %1001, %1009
  %1011 = getelementptr inbounds double* %967, i64 3
  %1012 = load double* %1011, align 8
  %1013 = fmul double %1004, %1012
  %1014 = fsub double %1010, %1013
  %1015 = getelementptr inbounds double* %961, i64 2
  %1016 = load double* %1015, align 8
  %1017 = fmul double %1001, %1016
  %1018 = getelementptr inbounds double* %967, i64 2
  %1019 = load double* %1018, align 8
  %1020 = fmul double %1004, %1019
  %1021 = fsub double %1017, %1020
  %1022 = getelementptr inbounds double* %961, i64 1
  %1023 = load double* %1022, align 8
  %1024 = fmul double %1001, %1023
  %1025 = getelementptr inbounds double* %967, i64 1
  %1026 = load double* %1025, align 8
  %1027 = fmul double %1004, %1026
  %1028 = fsub double %1024, %1027
  %1029 = fmul double %986, %1014
  %1030 = fadd double %1029, %1021
  %1031 = fmul double %1030, %986
  %1032 = fadd double %1031, %1028
  %1033 = fmul double %1032, %986
  %1034 = fadd double %1033, %1007
  %1035 = fmul double %993, %1034
  %1036 = fadd double %vdwEnergy.2, %1035
  %1037 = fmul double %998, %1034
  %1038 = fadd double %vdwEnergy_s.2, %1037
  %1039 = fsub double 1.000000e+00, %17
  %1040 = fmul double %1039, %982
  %1041 = fmul double %975, %1040
  %1042 = getelementptr inbounds double* %973, i64 3
  %1043 = load double* %1042, align 8
  %1044 = fmul double %1040, %1043
  %1045 = getelementptr inbounds double* %973, i64 2
  %1046 = load double* %1045, align 8
  %1047 = fmul double %1040, %1046
  %1048 = getelementptr inbounds double* %973, i64 1
  %1049 = load double* %1048, align 8
  %1050 = fmul double %1040, %1049
  %1051 = fmul double %986, %1044
  %1052 = fadd double %1051, %1047
  %1053 = fmul double %1052, %986
  %1054 = fadd double %1053, %1050
  %1055 = fmul double %1054, %986
  %1056 = fadd double %1055, %1041
  %1057 = fmul double %993, %1056
  %1058 = fadd double %electEnergy.2, %1057
  %1059 = fmul double %998, %1056
  %1060 = fadd double %electEnergy_s.2, %1059
  %1061 = fadd double %1044, %1014
  %1062 = fadd double %1047, %1021
  %1063 = fadd double %1050, %1028
  %1064 = fadd double %1041, %1007
  %1065 = fmul double 3.000000e+00, %986
  %1066 = fmul double %1065, %1061
  %1067 = fmul double 2.000000e+00, %1062
  %1068 = fadd double %1066, %1067
  %1069 = fmul double %1068, %986
  %1070 = fadd double %1069, %1063
  %1071 = fmul double -2.000000e+00, %993
  %1072 = fmul double %1071, %1070
  %1073 = sext i32 %924 to i64
  %1074 = getelementptr inbounds %class.Vector* %269, i64 %1073
  %1075 = fmul double %1072, %930
  %1076 = fmul double %1075, %930
  %1077 = fadd double %virial_xx.2, %1076
  %1078 = fmul double %1075, %935
  %1079 = fadd double %virial_xy.2, %1078
  %1080 = fmul double %1075, %941
  %1081 = fadd double %virial_xz.2, %1080
  %1082 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1083 = load double* %1082, align 8
  %1084 = fadd double %1083, %1075
  store double %1084, double* %1082, align 8
  %1085 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 0
  %1086 = load double* %1085, align 8
  %1087 = fsub double %1086, %1075
  store double %1087, double* %1085, align 8
  %1088 = fmul double %1072, %935
  %1089 = fmul double %1088, %935
  %1090 = fadd double %virial_yy.2, %1089
  %1091 = fmul double %1088, %941
  %1092 = fadd double %virial_yz.2, %1091
  %1093 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1094 = load double* %1093, align 8
  %1095 = fadd double %1094, %1088
  store double %1095, double* %1093, align 8
  %1096 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 1
  %1097 = load double* %1096, align 8
  %1098 = fsub double %1097, %1088
  store double %1098, double* %1096, align 8
  %1099 = fmul double %1072, %941
  %1100 = fmul double %1099, %941
  %1101 = fadd double %virial_zz.2, %1100
  %1102 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1103 = load double* %1102, align 8
  %1104 = fadd double %1103, %1099
  store double %1104, double* %1102, align 8
  %1105 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 2
  %1106 = load double* %1105, align 8
  %1107 = fsub double %1106, %1099
  store double %1107, double* %1105, align 8
  br label %1108

; <label>:1108                                    ; preds = %921
  %1109 = add nsw i32 %k18.2, 1
  br label %919

; <label>:1110                                    ; preds = %919
  br label %1111

; <label>:1111                                    ; preds = %1110, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1110 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1110 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1110 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1110 ], [ %491, %488 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %339 ], [ %virial_zz.2, %1110 ], [ %virial_zz.0, %488 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %339 ], [ %virial_yz.2, %1110 ], [ %virial_yz.0, %488 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %339 ], [ %virial_yy.2, %1110 ], [ %virial_yy.0, %488 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %339 ], [ %virial_xz.2, %1110 ], [ %virial_xz.0, %488 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %339 ], [ %virial_xy.2, %1110 ], [ %virial_xy.0, %488 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %339 ], [ %virial_xx.2, %1110 ], [ %virial_xx.0, %488 ]
  %electEnergy_s.3 = phi double [ %electEnergy_s.0, %339 ], [ %electEnergy_s.2, %1110 ], [ %electEnergy_s.0, %488 ]
  %vdwEnergy_s.3 = phi double [ %vdwEnergy_s.0, %339 ], [ %vdwEnergy_s.2, %1110 ], [ %vdwEnergy_s.0, %488 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %339 ], [ %electEnergy.2, %1110 ], [ %electEnergy.0, %488 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %339 ], [ %vdwEnergy.2, %1110 ], [ %vdwEnergy.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %719, %1110 ], [ %exclChecksum.0, %488 ]
  %1112 = add nsw i32 %i.2, 1
  br label %283

; <label>:1113                                    ; preds = %283
  %1114 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1115 = icmp ne i32* %50, %1114
  br i1 %1115, label %1116, label %1121

; <label>:1116                                    ; preds = %1113
  %1117 = icmp eq i32* %50, null
  br i1 %1117, label %1120, label %1118

; <label>:1118                                    ; preds = %1116
  %1119 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1119) #8
  br label %1120

; <label>:1120                                    ; preds = %1118, %1116
  br label %1121

; <label>:1121                                    ; preds = %1120, %1113
  %1122 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1123 = icmp ne i32* %64, %1122
  br i1 %1123, label %1124, label %1129

; <label>:1124                                    ; preds = %1121
  %1125 = icmp eq i32* %64, null
  br i1 %1125, label %1128, label %1126

; <label>:1126                                    ; preds = %1124
  %1127 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1127) #8
  br label %1128

; <label>:1128                                    ; preds = %1126, %1124
  br label %1129

; <label>:1129                                    ; preds = %1128, %1121
  %1130 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1131 = icmp ne i32* %78, %1130
  br i1 %1131, label %1132, label %1137

; <label>:1132                                    ; preds = %1129
  %1133 = icmp eq i32* %78, null
  br i1 %1133, label %1136, label %1134

; <label>:1134                                    ; preds = %1132
  %1135 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1135) #8
  br label %1136

; <label>:1136                                    ; preds = %1134, %1132
  br label %1137

; <label>:1137                                    ; preds = %1136, %1129
  %1138 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1139 = icmp ne i32* %207, %1138
  br i1 %1139, label %1140, label %1145

; <label>:1140                                    ; preds = %1137
  %1141 = icmp eq i32* %207, null
  br i1 %1141, label %1144, label %1142

; <label>:1142                                    ; preds = %1140
  %1143 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1143) #8
  br label %1144

; <label>:1144                                    ; preds = %1142, %1140
  br label %1145

; <label>:1145                                    ; preds = %1144, %1137
  %1146 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1147 = icmp ne i32* %221, %1146
  br i1 %1147, label %1148, label %1153

; <label>:1148                                    ; preds = %1145
  %1149 = icmp eq i32* %221, null
  br i1 %1149, label %1152, label %1150

; <label>:1150                                    ; preds = %1148
  %1151 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1151) #8
  br label %1152

; <label>:1152                                    ; preds = %1150, %1148
  br label %1153

; <label>:1153                                    ; preds = %1152, %1145
  %1154 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1155 = icmp ne i32* %235, %1154
  br i1 %1155, label %1156, label %1161

; <label>:1156                                    ; preds = %1153
  %1157 = icmp eq i32* %235, null
  br i1 %1157, label %1160, label %1158

; <label>:1158                                    ; preds = %1156
  %1159 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1159) #8
  br label %1160

; <label>:1160                                    ; preds = %1158, %1156
  br label %1161

; <label>:1161                                    ; preds = %1160, %1153
  %1162 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1163 = icmp ne i32* %249, %1162
  br i1 %1163, label %1164, label %1169

; <label>:1164                                    ; preds = %1161
  %1165 = icmp eq i32* %249, null
  br i1 %1165, label %1168, label %1166

; <label>:1166                                    ; preds = %1164
  %1167 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1167) #8
  br label %1168

; <label>:1168                                    ; preds = %1166, %1164
  br label %1169

; <label>:1169                                    ; preds = %1168, %1161
  %1170 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1171 = icmp ne i32* %263, %1170
  br i1 %1171, label %1172, label %1177

; <label>:1172                                    ; preds = %1169
  %1173 = icmp eq i32* %263, null
  br i1 %1173, label %1176, label %1174

; <label>:1174                                    ; preds = %1172
  %1175 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1175) #8
  br label %1176

; <label>:1176                                    ; preds = %1174, %1172
  br label %1177

; <label>:1177                                    ; preds = %1176, %1169
  %1178 = sitofp i32 %exclChecksum.0 to double
  %1179 = getelementptr inbounds double* %6, i64 22
  %1180 = load double* %1179, align 8
  %1181 = fadd double %1180, %1178
  store double %1181, double* %1179, align 8
  %1182 = getelementptr inbounds double* %6, i64 2
  %1183 = load double* %1182, align 8
  %1184 = fadd double %1183, %vdwEnergy.0
  store double %1184, double* %1182, align 8
  %1185 = getelementptr inbounds double* %6, i64 0
  %1186 = load double* %1185, align 8
  %1187 = fadd double %1186, %electEnergy.0
  store double %1187, double* %1185, align 8
  %1188 = getelementptr inbounds double* %6, i64 25
  %1189 = load double* %1188, align 8
  %1190 = fadd double %1189, %vdwEnergy_s.0
  store double %1190, double* %1188, align 8
  %1191 = getelementptr inbounds double* %6, i64 23
  %1192 = load double* %1191, align 8
  %1193 = fadd double %1192, %electEnergy_s.0
  store double %1193, double* %1191, align 8
  %1194 = getelementptr inbounds double* %6, i64 3
  %1195 = load double* %1194, align 8
  %1196 = fadd double %1195, %virial_xx.0
  store double %1196, double* %1194, align 8
  %1197 = getelementptr inbounds double* %6, i64 4
  %1198 = load double* %1197, align 8
  %1199 = fadd double %1198, %virial_xy.0
  store double %1199, double* %1197, align 8
  %1200 = getelementptr inbounds double* %6, i64 5
  %1201 = load double* %1200, align 8
  %1202 = fadd double %1201, %virial_xz.0
  store double %1202, double* %1200, align 8
  %1203 = getelementptr inbounds double* %6, i64 6
  %1204 = load double* %1203, align 8
  %1205 = fadd double %1204, %virial_xy.0
  store double %1205, double* %1203, align 8
  %1206 = getelementptr inbounds double* %6, i64 7
  %1207 = load double* %1206, align 8
  %1208 = fadd double %1207, %virial_yy.0
  store double %1208, double* %1206, align 8
  %1209 = getelementptr inbounds double* %6, i64 8
  %1210 = load double* %1209, align 8
  %1211 = fadd double %1210, %virial_yz.0
  store double %1211, double* %1209, align 8
  %1212 = getelementptr inbounds double* %6, i64 9
  %1213 = load double* %1212, align 8
  %1214 = fadd double %1213, %virial_xz.0
  store double %1214, double* %1212, align 8
  %1215 = getelementptr inbounds double* %6, i64 10
  %1216 = load double* %1215, align 8
  %1217 = fadd double %1216, %virial_yz.0
  store double %1217, double* %1215, align 8
  %1218 = getelementptr inbounds double* %6, i64 11
  %1219 = load double* %1218, align 8
  %1220 = fadd double %1219, %virial_zz.0
  store double %1220, double* %1218, align 8
  br label %1221

; <label>:1221                                    ; preds = %1177, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil20calc_self_energy_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.54, align 4
  %r2f28 = alloca %union.anon.55, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1280

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1280

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1170, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1170 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1170 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1170 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1170 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1170 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1170 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1171, %1170 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_zz.3, %1170 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yz.3, %1170 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yy.3, %1170 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xz.3, %1170 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xy.3, %1170 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xx.3, %1170 ]
  %electEnergy_s.0 = phi double [ 0.000000e+00, %243 ], [ %electEnergy_s.3, %1170 ]
  %vdwEnergy_s.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy_s.3, %1170 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %electEnergy.3, %1170 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy.3, %1170 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1170 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1172

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1170

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %533 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 28
  %536 = mul nsw i32 6, %535
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds double* %532, i64 %537
  %539 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %540 = load float* %539, align 4
  %541 = fpext float %540 to double
  %542 = fmul double 3.320636e+02, %541
  %543 = fmul double %542, %15
  %544 = fmul double %543, %9
  %545 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %546 = load i32* %545, align 4
  %547 = and i32 %546, 4194303
  %548 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %547)
  %549 = zext i16 %548 to i32
  %550 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %549)
  %551 = icmp ne i32 %531, 0
  br i1 %551, label %552, label %614

; <label>:552                                     ; preds = %529
  br label %553

; <label>:553                                     ; preds = %611, %552
  %pli3.0 = phi i32* [ %202, %552 ], [ %pli3.2, %611 ]
  %plin.0 = phi i32* [ %216, %552 ], [ %plin.2, %611 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %552 ], [ %612, %611 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %552 ], [ %exclChecksum.3, %611 ]
  %554 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %554, label %555, label %613

; <label>:555                                     ; preds = %553
  %556 = sext i32 %k.0 to i64
  %557 = getelementptr inbounds i32* %188, i64 %556
  %558 = load i32* %557, align 4
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %36, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 0
  %563 = load double* %562, align 8
  %564 = fsub double %287, %563
  %565 = fmul double %564, %564
  %566 = sext i32 %558 to i64
  %567 = getelementptr inbounds %struct.CompAtom* %36, i64 %566
  %568 = getelementptr inbounds %struct.CompAtom* %567, i32 0, i32 0
  %569 = getelementptr inbounds %class.Vector* %568, i32 0, i32 1
  %570 = load double* %569, align 8
  %571 = fsub double %290, %570
  %572 = fmul double %571, %571
  %573 = fadd double %565, %572
  %574 = sext i32 %558 to i64
  %575 = getelementptr inbounds %struct.CompAtom* %36, i64 %574
  %576 = getelementptr inbounds %struct.CompAtom* %575, i32 0, i32 0
  %577 = getelementptr inbounds %class.Vector* %576, i32 0, i32 2
  %578 = load double* %577, align 8
  %579 = fsub double %293, %578
  %580 = fmul double %579, %579
  %581 = fadd double %573, %580
  %582 = sext i32 %558 to i64
  %583 = getelementptr inbounds %struct.CompAtom* %36, i64 %582
  %584 = getelementptr inbounds %struct.CompAtom* %583, i32 0, i32 2
  %585 = load i32* %584, align 4
  %586 = lshr i32 %585, 26
  %587 = and i32 %586, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %610, label %589

; <label>:589                                     ; preds = %555
  %590 = fcmp ole double %581, %7
  br i1 %590, label %591, label %610

; <label>:591                                     ; preds = %589
  %592 = fcmp ole double %581, %21
  br i1 %592, label %593, label %596

; <label>:593                                     ; preds = %591
  %594 = add nsw i32 %exclChecksum.1, 1
  %595 = icmp ne i32 %594, 0
  br i1 %595, label %610, label %596

; <label>:596                                     ; preds = %593, %591
  %exclChecksum.2 = phi i32 [ %594, %593 ], [ %exclChecksum.1, %591 ]
  %597 = sext i32 %558 to i64
  %598 = getelementptr inbounds %struct.CompAtom* %36, i64 %597
  %599 = getelementptr inbounds %struct.CompAtom* %598, i32 0, i32 2
  %600 = load i32* %599, align 4
  %601 = and i32 %600, 4194303
  %602 = icmp sge i32 %601, %277
  br i1 %602, label %603, label %607

; <label>:603                                     ; preds = %596
  %604 = icmp sle i32 %601, %279
  br i1 %604, label %605, label %607

; <label>:605                                     ; preds = %603
  %606 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %558, i32* %pli3.0, align 4
  br label %609

; <label>:607                                     ; preds = %603, %596
  %608 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %558, i32* %plin.0, align 4
  br label %609

; <label>:609                                     ; preds = %607, %605
  %pli3.1 = phi i32* [ %606, %605 ], [ %pli3.0, %607 ]
  %plin.1 = phi i32* [ %plin.0, %605 ], [ %608, %607 ]
  br label %610

; <label>:610                                     ; preds = %609, %593, %589, %555
  %pli3.2 = phi i32* [ %pli3.0, %555 ], [ %pli3.0, %593 ], [ %pli3.1, %609 ], [ %pli3.0, %589 ]
  %plin.2 = phi i32* [ %plin.0, %555 ], [ %plin.0, %593 ], [ %plin.1, %609 ], [ %plin.0, %589 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %555 ], [ %594, %593 ], [ %exclChecksum.2, %609 ], [ %exclChecksum.1, %589 ]
  br label %611

; <label>:611                                     ; preds = %610
  %612 = add nsw i32 %k.0, 1
  br label %553

; <label>:613                                     ; preds = %553
  br label %693

; <label>:614                                     ; preds = %529
  %615 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %615, label %616, label %692

; <label>:616                                     ; preds = %614
  %617 = sext i32 %pairlistoffset.1 to i64
  %618 = getelementptr inbounds i32* %188, i64 %617
  %619 = load i32* %618, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds %struct.CompAtom* %36, i64 %620
  %622 = getelementptr inbounds %struct.CompAtom* %621, i32 0, i32 0
  %623 = getelementptr inbounds %class.Vector* %622, i32 0, i32 0
  %624 = load double* %623, align 8
  %625 = sext i32 %619 to i64
  %626 = getelementptr inbounds %struct.CompAtom* %36, i64 %625
  %627 = getelementptr inbounds %struct.CompAtom* %626, i32 0, i32 0
  %628 = getelementptr inbounds %class.Vector* %627, i32 0, i32 1
  %629 = load double* %628, align 8
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %36, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 2
  %634 = load double* %633, align 8
  %635 = sext i32 %619 to i64
  %636 = getelementptr inbounds %struct.CompAtom* %36, i64 %635
  %637 = getelementptr inbounds %struct.CompAtom* %636, i32 0, i32 2
  %638 = load i32* %637, align 4
  %639 = and i32 %638, 4194303
  br label %640

; <label>:640                                     ; preds = %685, %616
  %pli3.3 = phi i32* [ %202, %616 ], [ %pli3.5, %685 ]
  %plin.3 = phi i32* [ %216, %616 ], [ %plin.5, %685 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %616 ], [ %643, %685 ]
  %j210.0 = phi i32 [ %619, %616 ], [ %646, %685 ]
  %p_j_x11.0 = phi double [ %624, %616 ], [ %653, %685 ]
  %p_j_y12.0 = phi double [ %629, %616 ], [ %661, %685 ]
  %p_j_z13.0 = phi double [ %634, %616 ], [ %669, %685 ]
  %atom214.0 = phi i32 [ %639, %616 ], [ %690, %685 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %616 ], [ %exclChecksum.6, %685 ]
  %641 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %641, label %642, label %691

; <label>:642                                     ; preds = %640
  %643 = add nsw i32 %k9.0, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds i32* %188, i64 %644
  %646 = load i32* %645, align 4
  %647 = fsub double %287, %p_j_x11.0
  %648 = fmul double %647, %647
  %649 = sext i32 %646 to i64
  %650 = getelementptr inbounds %struct.CompAtom* %36, i64 %649
  %651 = getelementptr inbounds %struct.CompAtom* %650, i32 0, i32 0
  %652 = getelementptr inbounds %class.Vector* %651, i32 0, i32 0
  %653 = load double* %652, align 8
  %654 = fsub double %290, %p_j_y12.0
  %655 = fmul double %654, %654
  %656 = fadd double %648, %655
  %657 = sext i32 %646 to i64
  %658 = getelementptr inbounds %struct.CompAtom* %36, i64 %657
  %659 = getelementptr inbounds %struct.CompAtom* %658, i32 0, i32 0
  %660 = getelementptr inbounds %class.Vector* %659, i32 0, i32 1
  %661 = load double* %660, align 8
  %662 = fsub double %293, %p_j_z13.0
  %663 = fmul double %662, %662
  %664 = fadd double %656, %663
  %665 = sext i32 %646 to i64
  %666 = getelementptr inbounds %struct.CompAtom* %36, i64 %665
  %667 = getelementptr inbounds %struct.CompAtom* %666, i32 0, i32 0
  %668 = getelementptr inbounds %class.Vector* %667, i32 0, i32 2
  %669 = load double* %668, align 8
  %670 = fcmp ole double %664, %7
  br i1 %670, label %671, label %685

; <label>:671                                     ; preds = %642
  %672 = fcmp ole double %664, %21
  br i1 %672, label %673, label %676

; <label>:673                                     ; preds = %671
  %674 = add nsw i32 %exclChecksum.4, 1
  %675 = icmp ne i32 %674, 0
  br i1 %675, label %685, label %676

; <label>:676                                     ; preds = %673, %671
  %exclChecksum.5 = phi i32 [ %674, %673 ], [ %exclChecksum.4, %671 ]
  %677 = icmp sge i32 %atom214.0, %277
  br i1 %677, label %678, label %682

; <label>:678                                     ; preds = %676
  %679 = icmp sle i32 %atom214.0, %279
  br i1 %679, label %680, label %682

; <label>:680                                     ; preds = %678
  %681 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %684

; <label>:682                                     ; preds = %678, %676
  %683 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %684

; <label>:684                                     ; preds = %682, %680
  %pli3.4 = phi i32* [ %681, %680 ], [ %pli3.3, %682 ]
  %plin.4 = phi i32* [ %plin.3, %680 ], [ %683, %682 ]
  br label %685

; <label>:685                                     ; preds = %684, %673, %642
  %pli3.5 = phi i32* [ %pli3.3, %673 ], [ %pli3.4, %684 ], [ %pli3.3, %642 ]
  %plin.5 = phi i32* [ %plin.3, %673 ], [ %plin.4, %684 ], [ %plin.3, %642 ]
  %exclChecksum.6 = phi i32 [ %674, %673 ], [ %exclChecksum.5, %684 ], [ %exclChecksum.4, %642 ]
  %686 = sext i32 %646 to i64
  %687 = getelementptr inbounds %struct.CompAtom* %36, i64 %686
  %688 = getelementptr inbounds %struct.CompAtom* %687, i32 0, i32 2
  %689 = load i32* %688, align 4
  %690 = and i32 %689, 4194303
  br label %640

; <label>:691                                     ; preds = %640
  br label %692

; <label>:692                                     ; preds = %691, %614
  %pli3.6 = phi i32* [ %pli3.3, %691 ], [ %202, %614 ]
  %plin.6 = phi i32* [ %plin.3, %691 ], [ %216, %614 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %691 ], [ %exclChecksum.0, %614 ]
  br label %693

; <label>:693                                     ; preds = %692, %613
  %pli3.7 = phi i32* [ %pli3.0, %613 ], [ %pli3.6, %692 ]
  %plin.7 = phi i32* [ %plin.0, %613 ], [ %plin.6, %692 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %613 ], [ %exclChecksum.7, %692 ]
  %694 = ptrtoint i32* %pli3.7 to i64
  %695 = ptrtoint i32* %202 to i64
  %696 = sub i64 %694, %695
  %697 = sdiv exact i64 %696, 4
  %698 = trunc i64 %697 to i32
  %699 = icmp ne i32 %698, 0
  br i1 %699, label %700, label %707

; <label>:700                                     ; preds = %693
  %701 = sub nsw i32 %698, 1
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i32* %202, i64 %702
  %704 = load i32* %703, align 4
  %705 = sext i32 %698 to i64
  %706 = getelementptr inbounds i32* %202, i64 %705
  store i32 %704, i32* %706, align 4
  br label %707

; <label>:707                                     ; preds = %700, %693
  br label %708

; <label>:708                                     ; preds = %719, %707
  %plix.0 = phi i32* [ %230, %707 ], [ %717, %719 ]
  %pln.0 = phi i32* [ %216, %707 ], [ %720, %719 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %707 ], [ %718, %719 ]
  %709 = icmp ult i32* %pln.0, %plin.7
  br i1 %709, label %710, label %713

; <label>:710                                     ; preds = %708
  %711 = load i32* %pln.0, align 4
  %712 = icmp slt i32 %711, %j_hgroup.2
  br label %713

; <label>:713                                     ; preds = %710, %708
  %714 = phi i1 [ false, %708 ], [ %712, %710 ]
  br i1 %714, label %715, label %721

; <label>:715                                     ; preds = %713
  %716 = load i32* %pln.0, align 4
  %717 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %716, i32* %plix.0, align 4
  %718 = add nsw i32 %exclChecksum.9, -1
  br label %719

; <label>:719                                     ; preds = %715
  %720 = getelementptr inbounds i32* %pln.0, i32 1
  br label %708

; <label>:721                                     ; preds = %713
  br label %722

; <label>:722                                     ; preds = %737, %721
  %plix.1 = phi i32* [ %plix.0, %721 ], [ %735, %737 ]
  %k17.0 = phi i32 [ 0, %721 ], [ %738, %737 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %721 ], [ %736, %737 ]
  %723 = icmp slt i32 %k17.0, %698
  br i1 %723, label %724, label %729

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %202, i64 %725
  %727 = load i32* %726, align 4
  %728 = icmp slt i32 %727, %j_hgroup.2
  br label %729

; <label>:729                                     ; preds = %724, %722
  %730 = phi i1 [ false, %722 ], [ %728, %724 ]
  br i1 %730, label %731, label %739

; <label>:731                                     ; preds = %729
  %732 = sext i32 %k17.0 to i64
  %733 = getelementptr inbounds i32* %202, i64 %732
  %734 = load i32* %733, align 4
  %735 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %734, i32* %plix.1, align 4
  %736 = add nsw i32 %exclChecksum.10, -1
  br label %737

; <label>:737                                     ; preds = %731
  %738 = add nsw i32 %k17.0, 1
  br label %722

; <label>:739                                     ; preds = %729
  br label %740

; <label>:740                                     ; preds = %762, %739
  %plin.8 = phi i32* [ %plin.7, %739 ], [ %plin.9, %762 ]
  %plix.2 = phi i32* [ %plix.1, %739 ], [ %plix.3, %762 ]
  %plim.0 = phi i32* [ %244, %739 ], [ %plim.1, %762 ]
  %k17.1 = phi i32 [ %k17.0, %739 ], [ %763, %762 ]
  %741 = icmp slt i32 %k17.1, %698
  br i1 %741, label %742, label %764

; <label>:742                                     ; preds = %740
  %743 = sext i32 %k17.1 to i64
  %744 = getelementptr inbounds i32* %202, i64 %743
  %745 = load i32* %744, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds %struct.CompAtom* %36, i64 %746
  %748 = getelementptr inbounds %struct.CompAtom* %747, i32 0, i32 2
  %749 = load i32* %748, align 4
  %750 = and i32 %749, 4194303
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8* %284, i64 %751
  %753 = load i8* %752, align 1
  %754 = sext i8 %753 to i32
  switch i32 %754, label %761 [
    i32 0, label %755
    i32 1, label %757
    i32 2, label %759
  ]

; <label>:755                                     ; preds = %742
  %756 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %745, i32* %plin.8, align 4
  br label %761

; <label>:757                                     ; preds = %742
  %758 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %745, i32* %plix.2, align 4
  br label %761

; <label>:759                                     ; preds = %742
  %760 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %745, i32* %plim.0, align 4
  br label %761

; <label>:761                                     ; preds = %759, %757, %755, %742
  %plin.9 = phi i32* [ %plin.8, %742 ], [ %plin.8, %759 ], [ %plin.8, %757 ], [ %756, %755 ]
  %plix.3 = phi i32* [ %plix.2, %742 ], [ %plix.2, %759 ], [ %758, %757 ], [ %plix.2, %755 ]
  %plim.1 = phi i32* [ %plim.0, %742 ], [ %760, %759 ], [ %plim.0, %757 ], [ %plim.0, %755 ]
  br label %762

; <label>:762                                     ; preds = %761
  %763 = add nsw i32 %k17.1, 1
  br label %740

; <label>:764                                     ; preds = %740
  %765 = ptrtoint i32* %plix.2 to i64
  %766 = ptrtoint i32* %230 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %exclChecksum.10 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plim.0 to i64
  %773 = ptrtoint i32* %244 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = sext i32 %771 to i64
  %777 = add nsw i64 %776, %775
  %778 = trunc i64 %777 to i32
  %779 = ptrtoint i32* %plin.8 to i64
  %780 = ptrtoint i32* %pln.0 to i64
  %781 = sub i64 %779, %780
  %782 = sdiv exact i64 %781, 4
  %783 = trunc i64 %782 to i32
  br label %784

; <label>:784                                     ; preds = %970, %764
  %k17.2 = phi i32 [ 0, %764 ], [ %971, %970 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %764 ], [ %963, %970 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %764 ], [ %954, %970 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %764 ], [ %952, %970 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %764 ], [ %943, %970 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %764 ], [ %941, %970 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %764 ], [ %939, %970 ]
  %electEnergy_s.1 = phi double [ %electEnergy_s.0, %764 ], [ %922, %970 ]
  %vdwEnergy_s.1 = phi double [ %vdwEnergy_s.0, %764 ], [ %902, %970 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %764 ], [ %920, %970 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %764 ], [ %900, %970 ]
  %785 = icmp slt i32 %k17.2, %783
  br i1 %785, label %786, label %972

; <label>:786                                     ; preds = %784
  %787 = sext i32 %k17.2 to i64
  %788 = getelementptr inbounds i32* %pln.0, i64 %787
  %789 = load i32* %788, align 4
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds %struct.CompAtom* %36, i64 %790
  %792 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %793 = getelementptr inbounds %class.Vector* %792, i32 0, i32 0
  %794 = load double* %793, align 8
  %795 = fsub double %287, %794
  %796 = fmul double %795, %795
  %797 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %798 = getelementptr inbounds %class.Vector* %797, i32 0, i32 1
  %799 = load double* %798, align 8
  %800 = fsub double %290, %799
  %801 = fmul double %800, %800
  %802 = fadd double %796, %801
  %803 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %804 = getelementptr inbounds %class.Vector* %803, i32 0, i32 2
  %805 = load double* %804, align 8
  %806 = fsub double %293, %805
  %807 = fmul double %806, %806
  %808 = fadd double %802, %807
  %809 = fptrunc double %808 to float
  %810 = bitcast %union.anon.54* %r2f to float*
  store float %809, float* %810, align 4
  %811 = bitcast %union.anon.54* %r2f to i32*
  %812 = load i32* %811, align 4
  %813 = ashr i32 %812, 17
  %814 = add nsw i32 %813, %24
  %815 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 2
  %816 = load i32* %815, align 4
  %817 = and i32 %816, 4194303
  %818 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %817)
  %819 = zext i16 %818 to i32
  %820 = mul nsw i32 2, %819
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds %"struct.LJTable::TableEntry"* %550, i64 %821
  %823 = mul nsw i32 16, %814
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds double* %14, i64 %824
  %826 = getelementptr inbounds double* %825, i64 0
  %827 = load double* %826, align 8
  %828 = mul nsw i32 16, %814
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds double* %14, i64 %829
  %831 = getelementptr inbounds double* %830, i64 4
  %832 = getelementptr inbounds double* %831, i64 0
  %833 = load double* %832, align 8
  %834 = mul nsw i32 16, %814
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds double* %14, i64 %835
  %837 = getelementptr inbounds double* %836, i64 8
  %838 = getelementptr inbounds double* %837, i64 0
  %839 = load double* %838, align 8
  %840 = bitcast %union.anon.54* %r2f to i32*
  %841 = load i32* %840, align 4
  %842 = and i32 %841, -131072
  store i32 %842, i32* %840, align 4
  %843 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 1
  %844 = load float* %843, align 4
  %845 = fpext float %844 to double
  %846 = fmul double %544, %845
  %847 = bitcast %union.anon.54* %r2f to float*
  %848 = load float* %847, align 4
  %849 = fpext float %848 to double
  %850 = fsub double %808, %849
  %851 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 2
  %852 = load i32* %851, align 4
  %853 = lshr i32 %852, 28
  %854 = mul nsw i32 2, %853
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds double* %538, i64 %855
  %857 = load double* %856, align 8
  %858 = mul nsw i32 2, %853
  %859 = add nsw i32 %858, 1
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds double* %538, i64 %860
  %862 = load double* %861, align 8
  %863 = getelementptr inbounds %"struct.LJTable::TableEntry"* %822, i32 0, i32 0
  %864 = load double* %863, align 8
  %865 = fmul double %15, %864
  %866 = getelementptr inbounds %"struct.LJTable::TableEntry"* %822, i32 0, i32 1
  %867 = load double* %866, align 8
  %868 = fmul double %15, %867
  %869 = fmul double %865, %827
  %870 = fmul double %868, %833
  %871 = fsub double %869, %870
  %872 = getelementptr inbounds double* %825, i64 3
  %873 = load double* %872, align 8
  %874 = fmul double %865, %873
  %875 = getelementptr inbounds double* %831, i64 3
  %876 = load double* %875, align 8
  %877 = fmul double %868, %876
  %878 = fsub double %874, %877
  %879 = getelementptr inbounds double* %825, i64 2
  %880 = load double* %879, align 8
  %881 = fmul double %865, %880
  %882 = getelementptr inbounds double* %831, i64 2
  %883 = load double* %882, align 8
  %884 = fmul double %868, %883
  %885 = fsub double %881, %884
  %886 = getelementptr inbounds double* %825, i64 1
  %887 = load double* %886, align 8
  %888 = fmul double %865, %887
  %889 = getelementptr inbounds double* %831, i64 1
  %890 = load double* %889, align 8
  %891 = fmul double %868, %890
  %892 = fsub double %888, %891
  %893 = fmul double %850, %878
  %894 = fadd double %893, %885
  %895 = fmul double %894, %850
  %896 = fadd double %895, %892
  %897 = fmul double %896, %850
  %898 = fadd double %897, %871
  %899 = fmul double %857, %898
  %900 = fadd double %vdwEnergy.1, %899
  %901 = fmul double %862, %898
  %902 = fadd double %vdwEnergy_s.1, %901
  %903 = fmul double %839, %846
  %904 = getelementptr inbounds double* %837, i64 3
  %905 = load double* %904, align 8
  %906 = fmul double %846, %905
  %907 = getelementptr inbounds double* %837, i64 2
  %908 = load double* %907, align 8
  %909 = fmul double %846, %908
  %910 = getelementptr inbounds double* %837, i64 1
  %911 = load double* %910, align 8
  %912 = fmul double %846, %911
  %913 = fmul double %850, %906
  %914 = fadd double %913, %909
  %915 = fmul double %914, %850
  %916 = fadd double %915, %912
  %917 = fmul double %916, %850
  %918 = fadd double %917, %903
  %919 = fmul double %857, %918
  %920 = fadd double %electEnergy.1, %919
  %921 = fmul double %862, %918
  %922 = fadd double %electEnergy_s.1, %921
  %923 = fadd double %906, %878
  %924 = fadd double %909, %885
  %925 = fadd double %912, %892
  %926 = fadd double %903, %871
  %927 = fmul double 3.000000e+00, %850
  %928 = fmul double %927, %923
  %929 = fmul double 2.000000e+00, %924
  %930 = fadd double %928, %929
  %931 = fmul double %930, %850
  %932 = fadd double %931, %925
  %933 = fmul double -2.000000e+00, %857
  %934 = fmul double %933, %932
  %935 = sext i32 %789 to i64
  %936 = getelementptr inbounds %class.Vector* %250, i64 %935
  %937 = fmul double %934, %795
  %938 = fmul double %937, %795
  %939 = fadd double %virial_xx.1, %938
  %940 = fmul double %937, %800
  %941 = fadd double %virial_xy.1, %940
  %942 = fmul double %937, %806
  %943 = fadd double %virial_xz.1, %942
  %944 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %945 = load double* %944, align 8
  %946 = fadd double %945, %937
  store double %946, double* %944, align 8
  %947 = getelementptr inbounds %class.Vector* %936, i32 0, i32 0
  %948 = load double* %947, align 8
  %949 = fsub double %948, %937
  store double %949, double* %947, align 8
  %950 = fmul double %934, %800
  %951 = fmul double %950, %800
  %952 = fadd double %virial_yy.1, %951
  %953 = fmul double %950, %806
  %954 = fadd double %virial_yz.1, %953
  %955 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %956 = load double* %955, align 8
  %957 = fadd double %956, %950
  store double %957, double* %955, align 8
  %958 = getelementptr inbounds %class.Vector* %936, i32 0, i32 1
  %959 = load double* %958, align 8
  %960 = fsub double %959, %950
  store double %960, double* %958, align 8
  %961 = fmul double %934, %806
  %962 = fmul double %961, %806
  %963 = fadd double %virial_zz.1, %962
  %964 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %965 = load double* %964, align 8
  %966 = fadd double %965, %961
  store double %966, double* %964, align 8
  %967 = getelementptr inbounds %class.Vector* %936, i32 0, i32 2
  %968 = load double* %967, align 8
  %969 = fsub double %968, %961
  store double %969, double* %967, align 8
  br label %970

; <label>:970                                     ; preds = %786
  %971 = add nsw i32 %k17.2, 1
  br label %784

; <label>:972                                     ; preds = %784
  %973 = ptrtoint i32* %plim.0 to i64
  %974 = ptrtoint i32* %244 to i64
  %975 = sub i64 %973, %974
  %976 = sdiv exact i64 %975, 4
  %977 = trunc i64 %976 to i32
  br label %978

; <label>:978                                     ; preds = %1167, %972
  %k17.3 = phi i32 [ 0, %972 ], [ %1168, %1167 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %972 ], [ %1160, %1167 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %972 ], [ %1151, %1167 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %972 ], [ %1149, %1167 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %972 ], [ %1140, %1167 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %972 ], [ %1138, %1167 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %972 ], [ %1136, %1167 ]
  %electEnergy_s.2 = phi double [ %electEnergy_s.1, %972 ], [ %1119, %1167 ]
  %vdwEnergy_s.2 = phi double [ %vdwEnergy_s.1, %972 ], [ %1097, %1167 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %972 ], [ %1117, %1167 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %972 ], [ %1095, %1167 ]
  %979 = icmp slt i32 %k17.3, %977
  br i1 %979, label %980, label %1169

; <label>:980                                     ; preds = %978
  %981 = sext i32 %k17.3 to i64
  %982 = getelementptr inbounds i32* %244, i64 %981
  %983 = load i32* %982, align 4
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds %struct.CompAtom* %36, i64 %984
  %986 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 0
  %987 = getelementptr inbounds %class.Vector* %986, i32 0, i32 0
  %988 = load double* %987, align 8
  %989 = fsub double %287, %988
  %990 = fmul double %989, %989
  %991 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 0
  %992 = getelementptr inbounds %class.Vector* %991, i32 0, i32 1
  %993 = load double* %992, align 8
  %994 = fsub double %290, %993
  %995 = fmul double %994, %994
  %996 = fadd double %990, %995
  %997 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 0
  %998 = getelementptr inbounds %class.Vector* %997, i32 0, i32 2
  %999 = load double* %998, align 8
  %1000 = fsub double %293, %999
  %1001 = fmul double %1000, %1000
  %1002 = fadd double %996, %1001
  %1003 = fptrunc double %1002 to float
  %1004 = bitcast %union.anon.55* %r2f28 to float*
  store float %1003, float* %1004, align 4
  %1005 = bitcast %union.anon.55* %r2f28 to i32*
  %1006 = load i32* %1005, align 4
  %1007 = ashr i32 %1006, 17
  %1008 = add nsw i32 %1007, %24
  %1009 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 2
  %1010 = load i32* %1009, align 4
  %1011 = and i32 %1010, 4194303
  %1012 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1011)
  %1013 = zext i16 %1012 to i32
  %1014 = mul nsw i32 2, %1013
  %1015 = sext i32 %1014 to i64
  %1016 = getelementptr inbounds %"struct.LJTable::TableEntry"* %550, i64 %1015
  %1017 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1016, i64 1
  %1018 = mul nsw i32 16, %1008
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds double* %14, i64 %1019
  %1021 = getelementptr inbounds double* %1020, i64 0
  %1022 = load double* %1021, align 8
  %1023 = mul nsw i32 16, %1008
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds double* %14, i64 %1024
  %1026 = getelementptr inbounds double* %1025, i64 4
  %1027 = getelementptr inbounds double* %1026, i64 0
  %1028 = load double* %1027, align 8
  %1029 = mul nsw i32 16, %1008
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds double* %14, i64 %1030
  %1032 = getelementptr inbounds double* %1031, i64 8
  %1033 = getelementptr inbounds double* %1032, i64 0
  %1034 = load double* %1033, align 8
  %1035 = bitcast %union.anon.55* %r2f28 to i32*
  %1036 = load i32* %1035, align 4
  %1037 = and i32 %1036, -131072
  store i32 %1037, i32* %1035, align 4
  %1038 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 1
  %1039 = load float* %1038, align 4
  %1040 = fpext float %1039 to double
  %1041 = fmul double %544, %1040
  %1042 = bitcast %union.anon.55* %r2f28 to float*
  %1043 = load float* %1042, align 4
  %1044 = fpext float %1043 to double
  %1045 = fsub double %1002, %1044
  %1046 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 2
  %1047 = load i32* %1046, align 4
  %1048 = lshr i32 %1047, 28
  %1049 = mul nsw i32 2, %1048
  %1050 = sext i32 %1049 to i64
  %1051 = getelementptr inbounds double* %538, i64 %1050
  %1052 = load double* %1051, align 8
  %1053 = mul nsw i32 2, %1048
  %1054 = add nsw i32 %1053, 1
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds double* %538, i64 %1055
  %1057 = load double* %1056, align 8
  %1058 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1017, i32 0, i32 0
  %1059 = load double* %1058, align 8
  %1060 = fmul double %15, %1059
  %1061 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1017, i32 0, i32 1
  %1062 = load double* %1061, align 8
  %1063 = fmul double %15, %1062
  %1064 = fmul double %1060, %1022
  %1065 = fmul double %1063, %1028
  %1066 = fsub double %1064, %1065
  %1067 = getelementptr inbounds double* %1020, i64 3
  %1068 = load double* %1067, align 8
  %1069 = fmul double %1060, %1068
  %1070 = getelementptr inbounds double* %1026, i64 3
  %1071 = load double* %1070, align 8
  %1072 = fmul double %1063, %1071
  %1073 = fsub double %1069, %1072
  %1074 = getelementptr inbounds double* %1020, i64 2
  %1075 = load double* %1074, align 8
  %1076 = fmul double %1060, %1075
  %1077 = getelementptr inbounds double* %1026, i64 2
  %1078 = load double* %1077, align 8
  %1079 = fmul double %1063, %1078
  %1080 = fsub double %1076, %1079
  %1081 = getelementptr inbounds double* %1020, i64 1
  %1082 = load double* %1081, align 8
  %1083 = fmul double %1060, %1082
  %1084 = getelementptr inbounds double* %1026, i64 1
  %1085 = load double* %1084, align 8
  %1086 = fmul double %1063, %1085
  %1087 = fsub double %1083, %1086
  %1088 = fmul double %1045, %1073
  %1089 = fadd double %1088, %1080
  %1090 = fmul double %1089, %1045
  %1091 = fadd double %1090, %1087
  %1092 = fmul double %1091, %1045
  %1093 = fadd double %1092, %1066
  %1094 = fmul double %1052, %1093
  %1095 = fadd double %vdwEnergy.2, %1094
  %1096 = fmul double %1057, %1093
  %1097 = fadd double %vdwEnergy_s.2, %1096
  %1098 = fsub double 1.000000e+00, %17
  %1099 = fmul double %1098, %1041
  %1100 = fmul double %1034, %1099
  %1101 = getelementptr inbounds double* %1032, i64 3
  %1102 = load double* %1101, align 8
  %1103 = fmul double %1099, %1102
  %1104 = getelementptr inbounds double* %1032, i64 2
  %1105 = load double* %1104, align 8
  %1106 = fmul double %1099, %1105
  %1107 = getelementptr inbounds double* %1032, i64 1
  %1108 = load double* %1107, align 8
  %1109 = fmul double %1099, %1108
  %1110 = fmul double %1045, %1103
  %1111 = fadd double %1110, %1106
  %1112 = fmul double %1111, %1045
  %1113 = fadd double %1112, %1109
  %1114 = fmul double %1113, %1045
  %1115 = fadd double %1114, %1100
  %1116 = fmul double %1052, %1115
  %1117 = fadd double %electEnergy.2, %1116
  %1118 = fmul double %1057, %1115
  %1119 = fadd double %electEnergy_s.2, %1118
  %1120 = fadd double %1103, %1073
  %1121 = fadd double %1106, %1080
  %1122 = fadd double %1109, %1087
  %1123 = fadd double %1100, %1066
  %1124 = fmul double 3.000000e+00, %1045
  %1125 = fmul double %1124, %1120
  %1126 = fmul double 2.000000e+00, %1121
  %1127 = fadd double %1125, %1126
  %1128 = fmul double %1127, %1045
  %1129 = fadd double %1128, %1122
  %1130 = fmul double -2.000000e+00, %1052
  %1131 = fmul double %1130, %1129
  %1132 = sext i32 %983 to i64
  %1133 = getelementptr inbounds %class.Vector* %250, i64 %1132
  %1134 = fmul double %1131, %989
  %1135 = fmul double %1134, %989
  %1136 = fadd double %virial_xx.2, %1135
  %1137 = fmul double %1134, %994
  %1138 = fadd double %virial_xy.2, %1137
  %1139 = fmul double %1134, %1000
  %1140 = fadd double %virial_xz.2, %1139
  %1141 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1142 = load double* %1141, align 8
  %1143 = fadd double %1142, %1134
  store double %1143, double* %1141, align 8
  %1144 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 0
  %1145 = load double* %1144, align 8
  %1146 = fsub double %1145, %1134
  store double %1146, double* %1144, align 8
  %1147 = fmul double %1131, %994
  %1148 = fmul double %1147, %994
  %1149 = fadd double %virial_yy.2, %1148
  %1150 = fmul double %1147, %1000
  %1151 = fadd double %virial_yz.2, %1150
  %1152 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1153 = load double* %1152, align 8
  %1154 = fadd double %1153, %1147
  store double %1154, double* %1152, align 8
  %1155 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 1
  %1156 = load double* %1155, align 8
  %1157 = fsub double %1156, %1147
  store double %1157, double* %1155, align 8
  %1158 = fmul double %1131, %1000
  %1159 = fmul double %1158, %1000
  %1160 = fadd double %virial_zz.2, %1159
  %1161 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1162 = load double* %1161, align 8
  %1163 = fadd double %1162, %1158
  store double %1163, double* %1161, align 8
  %1164 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 2
  %1165 = load double* %1164, align 8
  %1166 = fsub double %1165, %1158
  store double %1166, double* %1164, align 8
  br label %1167

; <label>:1167                                    ; preds = %980
  %1168 = add nsw i32 %k17.3, 1
  br label %978

; <label>:1169                                    ; preds = %978
  br label %1170

; <label>:1170                                    ; preds = %1169, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1169 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1169 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1169 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1169 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1169 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1169 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1169 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %329 ], [ %virial_zz.2, %1169 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %329 ], [ %virial_yz.2, %1169 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %329 ], [ %virial_yy.2, %1169 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %329 ], [ %virial_xz.2, %1169 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %329 ], [ %virial_xy.2, %1169 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %329 ], [ %virial_xx.2, %1169 ]
  %electEnergy_s.3 = phi double [ %electEnergy_s.0, %329 ], [ %electEnergy_s.2, %1169 ]
  %vdwEnergy_s.3 = phi double [ %vdwEnergy_s.0, %329 ], [ %vdwEnergy_s.2, %1169 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %329 ], [ %electEnergy.2, %1169 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %329 ], [ %vdwEnergy.2, %1169 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %778, %1169 ]
  %1171 = add nsw i32 %i.1, 1
  br label %266

; <label>:1172                                    ; preds = %266
  %1173 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1174 = icmp ne i32* %50, %1173
  br i1 %1174, label %1175, label %1180

; <label>:1175                                    ; preds = %1172
  %1176 = icmp eq i32* %50, null
  br i1 %1176, label %1179, label %1177

; <label>:1177                                    ; preds = %1175
  %1178 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1178) #8
  br label %1179

; <label>:1179                                    ; preds = %1177, %1175
  br label %1180

; <label>:1180                                    ; preds = %1179, %1172
  %1181 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1182 = icmp ne i32* %64, %1181
  br i1 %1182, label %1183, label %1188

; <label>:1183                                    ; preds = %1180
  %1184 = icmp eq i32* %64, null
  br i1 %1184, label %1187, label %1185

; <label>:1185                                    ; preds = %1183
  %1186 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1186) #8
  br label %1187

; <label>:1187                                    ; preds = %1185, %1183
  br label %1188

; <label>:1188                                    ; preds = %1187, %1180
  %1189 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1190 = icmp ne i32* %78, %1189
  br i1 %1190, label %1191, label %1196

; <label>:1191                                    ; preds = %1188
  %1192 = icmp eq i32* %78, null
  br i1 %1192, label %1195, label %1193

; <label>:1193                                    ; preds = %1191
  %1194 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1194) #8
  br label %1195

; <label>:1195                                    ; preds = %1193, %1191
  br label %1196

; <label>:1196                                    ; preds = %1195, %1188
  %1197 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1198 = icmp ne i32* %188, %1197
  br i1 %1198, label %1199, label %1204

; <label>:1199                                    ; preds = %1196
  %1200 = icmp eq i32* %188, null
  br i1 %1200, label %1203, label %1201

; <label>:1201                                    ; preds = %1199
  %1202 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1202) #8
  br label %1203

; <label>:1203                                    ; preds = %1201, %1199
  br label %1204

; <label>:1204                                    ; preds = %1203, %1196
  %1205 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1206 = icmp ne i32* %202, %1205
  br i1 %1206, label %1207, label %1212

; <label>:1207                                    ; preds = %1204
  %1208 = icmp eq i32* %202, null
  br i1 %1208, label %1211, label %1209

; <label>:1209                                    ; preds = %1207
  %1210 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1210) #8
  br label %1211

; <label>:1211                                    ; preds = %1209, %1207
  br label %1212

; <label>:1212                                    ; preds = %1211, %1204
  %1213 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1214 = icmp ne i32* %216, %1213
  br i1 %1214, label %1215, label %1220

; <label>:1215                                    ; preds = %1212
  %1216 = icmp eq i32* %216, null
  br i1 %1216, label %1219, label %1217

; <label>:1217                                    ; preds = %1215
  %1218 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1218) #8
  br label %1219

; <label>:1219                                    ; preds = %1217, %1215
  br label %1220

; <label>:1220                                    ; preds = %1219, %1212
  %1221 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1222 = icmp ne i32* %230, %1221
  br i1 %1222, label %1223, label %1228

; <label>:1223                                    ; preds = %1220
  %1224 = icmp eq i32* %230, null
  br i1 %1224, label %1227, label %1225

; <label>:1225                                    ; preds = %1223
  %1226 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1226) #8
  br label %1227

; <label>:1227                                    ; preds = %1225, %1223
  br label %1228

; <label>:1228                                    ; preds = %1227, %1220
  %1229 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1230 = icmp ne i32* %244, %1229
  br i1 %1230, label %1231, label %1236

; <label>:1231                                    ; preds = %1228
  %1232 = icmp eq i32* %244, null
  br i1 %1232, label %1235, label %1233

; <label>:1233                                    ; preds = %1231
  %1234 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1234) #8
  br label %1235

; <label>:1235                                    ; preds = %1233, %1231
  br label %1236

; <label>:1236                                    ; preds = %1235, %1228
  %1237 = sitofp i32 %exclChecksum.0 to double
  %1238 = getelementptr inbounds double* %6, i64 22
  %1239 = load double* %1238, align 8
  %1240 = fadd double %1239, %1237
  store double %1240, double* %1238, align 8
  %1241 = getelementptr inbounds double* %6, i64 2
  %1242 = load double* %1241, align 8
  %1243 = fadd double %1242, %vdwEnergy.0
  store double %1243, double* %1241, align 8
  %1244 = getelementptr inbounds double* %6, i64 0
  %1245 = load double* %1244, align 8
  %1246 = fadd double %1245, %electEnergy.0
  store double %1246, double* %1244, align 8
  %1247 = getelementptr inbounds double* %6, i64 25
  %1248 = load double* %1247, align 8
  %1249 = fadd double %1248, %vdwEnergy_s.0
  store double %1249, double* %1247, align 8
  %1250 = getelementptr inbounds double* %6, i64 23
  %1251 = load double* %1250, align 8
  %1252 = fadd double %1251, %electEnergy_s.0
  store double %1252, double* %1250, align 8
  %1253 = getelementptr inbounds double* %6, i64 3
  %1254 = load double* %1253, align 8
  %1255 = fadd double %1254, %virial_xx.0
  store double %1255, double* %1253, align 8
  %1256 = getelementptr inbounds double* %6, i64 4
  %1257 = load double* %1256, align 8
  %1258 = fadd double %1257, %virial_xy.0
  store double %1258, double* %1256, align 8
  %1259 = getelementptr inbounds double* %6, i64 5
  %1260 = load double* %1259, align 8
  %1261 = fadd double %1260, %virial_xz.0
  store double %1261, double* %1259, align 8
  %1262 = getelementptr inbounds double* %6, i64 6
  %1263 = load double* %1262, align 8
  %1264 = fadd double %1263, %virial_xy.0
  store double %1264, double* %1262, align 8
  %1265 = getelementptr inbounds double* %6, i64 7
  %1266 = load double* %1265, align 8
  %1267 = fadd double %1266, %virial_yy.0
  store double %1267, double* %1265, align 8
  %1268 = getelementptr inbounds double* %6, i64 8
  %1269 = load double* %1268, align 8
  %1270 = fadd double %1269, %virial_yz.0
  store double %1270, double* %1268, align 8
  %1271 = getelementptr inbounds double* %6, i64 9
  %1272 = load double* %1271, align 8
  %1273 = fadd double %1272, %virial_xz.0
  store double %1273, double* %1271, align 8
  %1274 = getelementptr inbounds double* %6, i64 10
  %1275 = load double* %1274, align 8
  %1276 = fadd double %1275, %virial_yz.0
  store double %1276, double* %1274, align 8
  %1277 = getelementptr inbounds double* %6, i64 11
  %1278 = load double* %1277, align 8
  %1279 = fadd double %1278, %virial_zz.0
  store double %1279, double* %1277, align 8
  br label %1280

; <label>:1280                                    ; preds = %1236, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil30calc_pair_energy_fullelect_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.45, align 4
  %r2f32 = alloca %union.anon.46, align 4
  %r2f81 = alloca %union.anon.47, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1569

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %185

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  br label %139

; <label>:139                                     ; preds = %155, %138
  %all_fixed.2 = phi i32 [ %all_fixed.0, %138 ], [ %all_fixed.3, %155 ]
  %i.0 = phi i32 [ 0, %138 ], [ %156, %155 ]
  %140 = icmp ne i32 %all_fixed.2, 0
  br i1 %140, label %141, label %143

; <label>:141                                     ; preds = %139
  %142 = icmp slt i32 %i.0, %28
  br label %143

; <label>:143                                     ; preds = %141, %139
  %144 = phi i1 [ false, %139 ], [ %142, %141 ]
  br i1 %144, label %145, label %157

; <label>:145                                     ; preds = %143
  %146 = sext i32 %i.0 to i64
  %147 = getelementptr inbounds %struct.CompAtom* %34, i64 %146
  %148 = getelementptr inbounds %struct.CompAtom* %147, i32 0, i32 2
  %149 = load i32* %148, align 4
  %150 = lshr i32 %149, 26
  %151 = and i32 %150, 1
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

; <label>:153                                     ; preds = %145
  br label %154

; <label>:154                                     ; preds = %153, %145
  %all_fixed.3 = phi i32 [ %all_fixed.2, %145 ], [ 0, %153 ]
  br label %155

; <label>:155                                     ; preds = %154
  %156 = add nsw i32 %i.0, 1
  br label %139

; <label>:157                                     ; preds = %143
  %158 = icmp ne i32 %all_fixed.2, 0
  br i1 %158, label %159, label %184

; <label>:159                                     ; preds = %157
  %160 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %161 = icmp ne i32* %51, %160
  br i1 %161, label %162, label %167

; <label>:162                                     ; preds = %159
  %163 = icmp eq i32* %51, null
  br i1 %163, label %166, label %164

; <label>:164                                     ; preds = %162
  %165 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %165) #8
  br label %166

; <label>:166                                     ; preds = %164, %162
  br label %167

; <label>:167                                     ; preds = %166, %159
  %168 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %169 = icmp ne i32* %65, %168
  br i1 %169, label %170, label %175

; <label>:170                                     ; preds = %167
  %171 = icmp eq i32* %65, null
  br i1 %171, label %174, label %172

; <label>:172                                     ; preds = %170
  %173 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %173) #8
  br label %174

; <label>:174                                     ; preds = %172, %170
  br label %175

; <label>:175                                     ; preds = %174, %167
  %176 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %177 = icmp ne i32* %79, %176
  br i1 %177, label %178, label %183

; <label>:178                                     ; preds = %175
  %179 = icmp eq i32* %79, null
  br i1 %179, label %182, label %180

; <label>:180                                     ; preds = %178
  %181 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %181) #8
  br label %182

; <label>:182                                     ; preds = %180, %178
  br label %183

; <label>:183                                     ; preds = %182, %175
  br label %1569

; <label>:184                                     ; preds = %157
  br label %185

; <label>:185                                     ; preds = %184, %114
  %fixg.2 = phi i32 [ %fixg.0, %184 ], [ 0, %114 ]
  %186 = icmp ne i32 %fixg.2, 0
  br i1 %186, label %187, label %194

; <label>:187                                     ; preds = %185
  %188 = sub nsw i32 %fixg.2, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32* %65, i64 %189
  %191 = load i32* %190, align 4
  %192 = sext i32 %fixg.2 to i64
  %193 = getelementptr inbounds i32* %65, i64 %192
  store i32 %191, i32* %193, align 4
  br label %194

; <label>:194                                     ; preds = %187, %185
  %195 = icmp slt i32 %31, 1000
  br i1 %195, label %196, label %198

; <label>:196                                     ; preds = %194
  %197 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %207

; <label>:198                                     ; preds = %194
  %199 = add nsw i32 %31, 5
  %200 = sext i32 %199 to i64
  %201 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %200, i64 4)
  %202 = extractvalue { i64, i1 } %201, 1
  %203 = extractvalue { i64, i1 } %201, 0
  %204 = select i1 %202, i64 -1, i64 %203
  %205 = call noalias i8* @_Znam(i64 %204) #9
  %206 = bitcast i8* %205 to i32*
  br label %207

; <label>:207                                     ; preds = %198, %196
  %208 = phi i32* [ %197, %196 ], [ %206, %198 ]
  %209 = icmp slt i32 %31, 1000
  br i1 %209, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %221

; <label>:212                                     ; preds = %207
  %213 = add nsw i32 %31, 5
  %214 = sext i32 %213 to i64
  %215 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %214, i64 4)
  %216 = extractvalue { i64, i1 } %215, 1
  %217 = extractvalue { i64, i1 } %215, 0
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = call noalias i8* @_Znam(i64 %218) #9
  %220 = bitcast i8* %219 to i32*
  br label %221

; <label>:221                                     ; preds = %212, %210
  %222 = phi i32* [ %211, %210 ], [ %220, %212 ]
  %223 = icmp slt i32 %31, 1000
  br i1 %223, label %224, label %226

; <label>:224                                     ; preds = %221
  %225 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %235

; <label>:226                                     ; preds = %221
  %227 = add nsw i32 %31, 5
  %228 = sext i32 %227 to i64
  %229 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %228, i64 4)
  %230 = extractvalue { i64, i1 } %229, 1
  %231 = extractvalue { i64, i1 } %229, 0
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = call noalias i8* @_Znam(i64 %232) #9
  %234 = bitcast i8* %233 to i32*
  br label %235

; <label>:235                                     ; preds = %226, %224
  %236 = phi i32* [ %225, %224 ], [ %234, %226 ]
  %237 = icmp slt i32 %31, 1000
  br i1 %237, label %238, label %240

; <label>:238                                     ; preds = %235
  %239 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %249

; <label>:240                                     ; preds = %235
  %241 = add nsw i32 %31, 5
  %242 = sext i32 %241 to i64
  %243 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 4)
  %244 = extractvalue { i64, i1 } %243, 1
  %245 = extractvalue { i64, i1 } %243, 0
  %246 = select i1 %244, i64 -1, i64 %245
  %247 = call noalias i8* @_Znam(i64 %246) #9
  %248 = bitcast i8* %247 to i32*
  br label %249

; <label>:249                                     ; preds = %240, %238
  %250 = phi i32* [ %239, %238 ], [ %248, %240 ]
  %251 = icmp slt i32 %31, 1000
  br i1 %251, label %252, label %254

; <label>:252                                     ; preds = %249
  %253 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %263

; <label>:254                                     ; preds = %249
  %255 = add nsw i32 %31, 5
  %256 = sext i32 %255 to i64
  %257 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %256, i64 4)
  %258 = extractvalue { i64, i1 } %257, 1
  %259 = extractvalue { i64, i1 } %257, 0
  %260 = select i1 %258, i64 -1, i64 %259
  %261 = call noalias i8* @_Znam(i64 %260) #9
  %262 = bitcast i8* %261 to i32*
  br label %263

; <label>:263                                     ; preds = %254, %252
  %264 = phi i32* [ %253, %252 ], [ %262, %254 ]
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 0
  %267 = load %class.Vector** %266, align 8
  %268 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %269 = getelementptr inbounds [2 x %class.Vector*]* %268, i32 0, i64 1
  %270 = load %class.Vector** %269, align 8
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %272 = getelementptr inbounds [2 x %class.Vector*]* %271, i32 0, i64 0
  %273 = load %class.Vector** %272, align 8
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %275 = getelementptr inbounds [2 x %class.Vector*]* %274, i32 0, i64 1
  %276 = load %class.Vector** %275, align 8
  %277 = mul nsw i32 %28, %31
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %279 = load i32* %278, align 4
  %280 = mul nsw i32 %277, %279
  %281 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %282 = load i32* %281, align 4
  %283 = sdiv i32 %280, %282
  %284 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %285 = load i32* %284, align 4
  %286 = mul nsw i32 %277, %285
  %287 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %288 = load i32* %287, align 4
  %289 = sdiv i32 %286, %288
  br label %290

; <label>:290                                     ; preds = %1426, %263
  %pairlistindex.0 = phi i32 [ 0, %263 ], [ %pairlistindex.2, %1426 ]
  %pairlistoffset.0 = phi i32 [ 0, %263 ], [ %pairlistoffset.2, %1426 ]
  %pairCount.0 = phi i32 [ 0, %263 ], [ %pairCount.3, %1426 ]
  %i.1 = phi i32 [ 0, %263 ], [ %1427, %1426 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_zz.4, %1426 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yz.4, %1426 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yy.4, %1426 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xz.4, %1426 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xy.4, %1426 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xx.4, %1426 ]
  %fullElectEnergy_s.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectEnergy_s.4, %1426 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectEnergy.4, %1426 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_zz.3, %1426 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yz.3, %1426 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yy.3, %1426 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xz.3, %1426 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xy.3, %1426 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xx.3, %1426 ]
  %electEnergy_s.0 = phi double [ 0.000000e+00, %263 ], [ %electEnergy_s.3, %1426 ]
  %vdwEnergy_s.0 = phi double [ 0.000000e+00, %263 ], [ %vdwEnergy_s.3, %1426 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %electEnergy.3, %1426 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %vdwEnergy.3, %1426 ]
  %exclChecksum.0 = phi i32 [ 0, %263 ], [ %exclChecksum.9, %1426 ]
  %291 = icmp slt i32 %i.1, %28
  br i1 %291, label %292, label %1428

; <label>:292                                     ; preds = %290
  %293 = sext i32 %i.1 to i64
  %294 = getelementptr inbounds %struct.CompAtom* %34, i64 %293
  %295 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %296 = load i32* %295, align 4
  %297 = and i32 %296, 4194303
  %298 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %297)
  %299 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 0
  %300 = load i32* %299, align 4
  %301 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 1
  %302 = load i32* %301, align 4
  %303 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 2
  %304 = load i8** %303, align 8
  %305 = sext i32 %300 to i64
  %306 = sub i64 0, %305
  %307 = getelementptr inbounds i8* %304, i64 %306
  %308 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %309 = getelementptr inbounds %class.Vector* %308, i32 0, i32 0
  %310 = load double* %309, align 8
  %311 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %312 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %313 = load double* %312, align 8
  %314 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %315 = getelementptr inbounds %class.Vector* %314, i32 0, i32 2
  %316 = load double* %315, align 8
  %317 = sext i32 %i.1 to i64
  %318 = getelementptr inbounds %class.Vector* %267, i64 %317
  %319 = sext i32 %i.1 to i64
  %320 = getelementptr inbounds %class.Vector* %273, i64 %319
  %321 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %322 = load i32* %321, align 4
  %323 = lshr i32 %322, 22
  %324 = and i32 %323, 7
  %325 = icmp ne i32 %324, 0
  br i1 %325, label %332, label %326

; <label>:326                                     ; preds = %292
  %327 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %328 = load i32* %327, align 4
  %329 = lshr i32 %328, 25
  %330 = and i32 %329, 1
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %332, label %502

; <label>:332                                     ; preds = %326, %292
  %333 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %334 = load i32* %333, align 4
  %335 = lshr i32 %334, 22
  %336 = and i32 %335, 7
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %352

; <label>:338                                     ; preds = %332
  %339 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %340 = load i32* %339, align 4
  %341 = lshr i32 %340, 22
  %342 = and i32 %341, 7
  %343 = mul nsw i32 %342, %31
  %344 = add nsw i32 %pairCount.0, %343
  %345 = icmp slt i32 %pairCount.0, %283
  br i1 %345, label %348, label %346

; <label>:346                                     ; preds = %338
  %347 = icmp sge i32 %pairCount.0, %289
  br i1 %347, label %348, label %351

; <label>:348                                     ; preds = %346, %338
  %349 = sub nsw i32 %342, 1
  %350 = add nsw i32 %i.1, %349
  br label %1426

; <label>:351                                     ; preds = %346
  br label %352

; <label>:352                                     ; preds = %351, %332
  %pairCount.1 = phi i32 [ %344, %351 ], [ %pairCount.0, %332 ]
  %353 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %354 = icmp ne i32 %353, 0
  br i1 %354, label %355, label %361

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %357 = load i32* %356, align 4
  %358 = lshr i32 %357, 27
  %359 = and i32 %358, 1
  %360 = icmp ne i32 %359, 0
  br label %361

; <label>:361                                     ; preds = %355, %352
  %362 = phi i1 [ false, %352 ], [ %360, %355 ]
  %363 = zext i1 %362 to i32
  %364 = sext i32 0 to i64
  %365 = getelementptr inbounds i32* %208, i64 %364
  %366 = icmp ne i32 %363, 0
  br i1 %366, label %367, label %368

; <label>:367                                     ; preds = %361
  br label %369

; <label>:368                                     ; preds = %361
  br label %369

; <label>:369                                     ; preds = %368, %367
  %370 = phi i32* [ %65, %367 ], [ %51, %368 ]
  %371 = icmp ne i32 %363, 0
  br i1 %371, label %372, label %373

; <label>:372                                     ; preds = %369
  br label %374

; <label>:373                                     ; preds = %369
  br label %374

; <label>:374                                     ; preds = %373, %372
  %375 = phi i32 [ %fixg.2, %372 ], [ %g.0, %373 ]
  %376 = icmp slt i32 0, %375
  br i1 %376, label %377, label %471

; <label>:377                                     ; preds = %374
  %378 = sext i32 0 to i64
  %379 = getelementptr inbounds i32* %370, i64 %378
  %380 = load i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.CompAtom* %37, i64 %381
  %383 = getelementptr inbounds %struct.CompAtom* %382, i32 0, i32 0
  %384 = getelementptr inbounds %class.Vector* %383, i32 0, i32 0
  %385 = load double* %384, align 8
  %386 = sext i32 %380 to i64
  %387 = getelementptr inbounds %struct.CompAtom* %37, i64 %386
  %388 = getelementptr inbounds %struct.CompAtom* %387, i32 0, i32 0
  %389 = getelementptr inbounds %class.Vector* %388, i32 0, i32 1
  %390 = load double* %389, align 8
  %391 = sext i32 %380 to i64
  %392 = getelementptr inbounds %struct.CompAtom* %37, i64 %391
  %393 = getelementptr inbounds %struct.CompAtom* %392, i32 0, i32 0
  %394 = getelementptr inbounds %class.Vector* %393, i32 0, i32 2
  %395 = load double* %394, align 8
  br label %396

; <label>:396                                     ; preds = %429, %377
  %g.3 = phi i32 [ 0, %377 ], [ %399, %429 ]
  %gli.0 = phi i32* [ %79, %377 ], [ %gli.1, %429 ]
  %j2.0 = phi i32 [ %380, %377 ], [ %402, %429 ]
  %p_j_x.0 = phi double [ %385, %377 ], [ %409, %429 ]
  %p_j_y.0 = phi double [ %390, %377 ], [ %417, %429 ]
  %p_j_z.0 = phi double [ %395, %377 ], [ %425, %429 ]
  %397 = icmp slt i32 %g.3, %375
  br i1 %397, label %398, label %430

; <label>:398                                     ; preds = %396
  %399 = add nsw i32 %g.3, 1
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32* %370, i64 %400
  %402 = load i32* %401, align 4
  %403 = fsub double %310, %p_j_x.0
  %404 = fmul double %403, %403
  %405 = sext i32 %402 to i64
  %406 = getelementptr inbounds %struct.CompAtom* %37, i64 %405
  %407 = getelementptr inbounds %struct.CompAtom* %406, i32 0, i32 0
  %408 = getelementptr inbounds %class.Vector* %407, i32 0, i32 0
  %409 = load double* %408, align 8
  %410 = fsub double %313, %p_j_y.0
  %411 = fmul double %410, %410
  %412 = fadd double %404, %411
  %413 = sext i32 %402 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %37, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 1
  %417 = load double* %416, align 8
  %418 = fsub double %316, %p_j_z.0
  %419 = fmul double %418, %418
  %420 = fadd double %412, %419
  %421 = sext i32 %402 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %37, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  %426 = fcmp ole double %420, %8
  br i1 %426, label %427, label %429

; <label>:427                                     ; preds = %398
  store i32 %j2.0, i32* %gli.0, align 4
  %428 = getelementptr inbounds i32* %gli.0, i32 1
  br label %429

; <label>:429                                     ; preds = %427, %398
  %gli.1 = phi i32* [ %428, %427 ], [ %gli.0, %398 ]
  br label %396

; <label>:430                                     ; preds = %396
  %431 = ptrtoint i32* %gli.0 to i64
  %432 = ptrtoint i32* %79 to i64
  %433 = sub i64 %431, %432
  %434 = sdiv exact i64 %433, 4
  %435 = trunc i64 %434 to i32
  br label %436

; <label>:436                                     ; preds = %468, %430
  %pli.0 = phi i32* [ %365, %430 ], [ %467, %468 ]
  %h.0 = phi i32 [ 0, %430 ], [ %469, %468 ]
  %437 = icmp slt i32 %h.0, %435
  br i1 %437, label %438, label %470

; <label>:438                                     ; preds = %436
  %439 = sext i32 %h.0 to i64
  %440 = getelementptr inbounds i32* %79, i64 %439
  %441 = load i32* %440, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %37, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 25
  %447 = and i32 %446, 1
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %450

; <label>:449                                     ; preds = %438
  br label %457

; <label>:450                                     ; preds = %438
  %451 = sext i32 %441 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %37, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 2
  %454 = load i32* %453, align 4
  %455 = lshr i32 %454, 22
  %456 = and i32 %455, 7
  br label %457

; <label>:457                                     ; preds = %450, %449
  %458 = phi i32 [ 1, %449 ], [ %456, %450 ]
  %459 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %441, i32* %459, align 4
  %460 = add nsw i32 %441, 1
  %461 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %460, i32* %461, align 4
  %462 = add nsw i32 %441, 2
  %463 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %462, i32* %463, align 4
  %464 = add nsw i32 %441, 3
  %465 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %464, i32* %465, align 4
  %466 = sext i32 %458 to i64
  %467 = getelementptr inbounds i32* %pli.0, i64 %466
  br label %468

; <label>:468                                     ; preds = %457
  %469 = add nsw i32 %h.0, 1
  br label %436

; <label>:470                                     ; preds = %436
  br label %471

; <label>:471                                     ; preds = %470, %374
  %pli.1 = phi i32* [ %pli.0, %470 ], [ %365, %374 ]
  %472 = ptrtoint i32* %pli.1 to i64
  %473 = ptrtoint i32* %208 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %478, label %485

; <label>:478                                     ; preds = %471
  %479 = sub nsw i32 %476, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i32* %208, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %476 to i64
  %484 = getelementptr inbounds i32* %208, i64 %483
  store i32 %482, i32* %484, align 4
  br label %501

; <label>:485                                     ; preds = %471
  %486 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %487 = load i32* %486, align 4
  %488 = lshr i32 %487, 25
  %489 = and i32 %488, 1
  %490 = icmp ne i32 %489, 0
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %485
  br label %497

; <label>:492                                     ; preds = %485
  %493 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %494 = load i32* %493, align 4
  %495 = lshr i32 %494, 22
  %496 = and i32 %495, 7
  br label %497

; <label>:497                                     ; preds = %492, %491
  %498 = phi i32 [ 1, %491 ], [ %496, %492 ]
  %499 = sub nsw i32 %498, 1
  %500 = add nsw i32 %i.1, %499
  br label %1426

; <label>:501                                     ; preds = %478
  br label %502

; <label>:502                                     ; preds = %501, %326
  %pairlistindex.1 = phi i32 [ %476, %501 ], [ %pairlistindex.0, %326 ]
  %pairlistoffset.1 = phi i32 [ 0, %501 ], [ %pairlistoffset.0, %326 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %501 ], [ %pairCount.0, %326 ]
  %503 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %504 = icmp ne i32 %503, 0
  br i1 %504, label %505, label %511

; <label>:505                                     ; preds = %502
  %506 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 26
  %509 = and i32 %508, 1
  %510 = icmp ne i32 %509, 0
  br label %511

; <label>:511                                     ; preds = %505, %502
  %512 = phi i1 [ false, %502 ], [ %510, %505 ]
  %513 = zext i1 %512 to i32
  %514 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %515 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %516 = load i32* %515, align 4
  %517 = lshr i32 %516, 28
  %518 = mul nsw i32 6, %517
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds double* %514, i64 %519
  %521 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 1
  %522 = load float* %521, align 4
  %523 = fpext float %522 to double
  %524 = fmul double 3.320636e+02, %523
  %525 = fmul double %524, %16
  %526 = fmul double %525, %9
  %527 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %528 = load i32* %527, align 4
  %529 = and i32 %528, 4194303
  %530 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %529)
  %531 = zext i16 %530 to i32
  %532 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %531)
  %533 = icmp ne i32 %513, 0
  br i1 %533, label %534, label %596

; <label>:534                                     ; preds = %511
  br label %535

; <label>:535                                     ; preds = %593, %534
  %pli4.0 = phi i32* [ %222, %534 ], [ %pli4.2, %593 ]
  %plin.0 = phi i32* [ %236, %534 ], [ %plin.2, %593 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %534 ], [ %594, %593 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %534 ], [ %exclChecksum.3, %593 ]
  %536 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %536, label %537, label %595

; <label>:537                                     ; preds = %535
  %538 = sext i32 %k.0 to i64
  %539 = getelementptr inbounds i32* %208, i64 %538
  %540 = load i32* %539, align 4
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %37, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 0
  %545 = load double* %544, align 8
  %546 = fsub double %310, %545
  %547 = fmul double %546, %546
  %548 = sext i32 %540 to i64
  %549 = getelementptr inbounds %struct.CompAtom* %37, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %549, i32 0, i32 0
  %551 = getelementptr inbounds %class.Vector* %550, i32 0, i32 1
  %552 = load double* %551, align 8
  %553 = fsub double %313, %552
  %554 = fmul double %553, %553
  %555 = fadd double %547, %554
  %556 = sext i32 %540 to i64
  %557 = getelementptr inbounds %struct.CompAtom* %37, i64 %556
  %558 = getelementptr inbounds %struct.CompAtom* %557, i32 0, i32 0
  %559 = getelementptr inbounds %class.Vector* %558, i32 0, i32 2
  %560 = load double* %559, align 8
  %561 = fsub double %316, %560
  %562 = fmul double %561, %561
  %563 = fadd double %555, %562
  %564 = sext i32 %540 to i64
  %565 = getelementptr inbounds %struct.CompAtom* %37, i64 %564
  %566 = getelementptr inbounds %struct.CompAtom* %565, i32 0, i32 2
  %567 = load i32* %566, align 4
  %568 = lshr i32 %567, 26
  %569 = and i32 %568, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %592, label %571

; <label>:571                                     ; preds = %537
  %572 = fcmp ole double %563, %7
  br i1 %572, label %573, label %592

; <label>:573                                     ; preds = %571
  %574 = fcmp ole double %563, %22
  br i1 %574, label %575, label %578

; <label>:575                                     ; preds = %573
  %576 = add nsw i32 %exclChecksum.1, 1
  %577 = icmp ne i32 %576, 0
  br i1 %577, label %592, label %578

; <label>:578                                     ; preds = %575, %573
  %exclChecksum.2 = phi i32 [ %576, %575 ], [ %exclChecksum.1, %573 ]
  %579 = sext i32 %540 to i64
  %580 = getelementptr inbounds %struct.CompAtom* %37, i64 %579
  %581 = getelementptr inbounds %struct.CompAtom* %580, i32 0, i32 2
  %582 = load i32* %581, align 4
  %583 = and i32 %582, 4194303
  %584 = icmp sge i32 %583, %300
  br i1 %584, label %585, label %589

; <label>:585                                     ; preds = %578
  %586 = icmp sle i32 %583, %302
  br i1 %586, label %587, label %589

; <label>:587                                     ; preds = %585
  %588 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %540, i32* %pli4.0, align 4
  br label %591

; <label>:589                                     ; preds = %585, %578
  %590 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %540, i32* %plin.0, align 4
  br label %591

; <label>:591                                     ; preds = %589, %587
  %pli4.1 = phi i32* [ %588, %587 ], [ %pli4.0, %589 ]
  %plin.1 = phi i32* [ %plin.0, %587 ], [ %590, %589 ]
  br label %592

; <label>:592                                     ; preds = %591, %575, %571, %537
  %pli4.2 = phi i32* [ %pli4.0, %537 ], [ %pli4.0, %575 ], [ %pli4.1, %591 ], [ %pli4.0, %571 ]
  %plin.2 = phi i32* [ %plin.0, %537 ], [ %plin.0, %575 ], [ %plin.1, %591 ], [ %plin.0, %571 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %537 ], [ %576, %575 ], [ %exclChecksum.2, %591 ], [ %exclChecksum.1, %571 ]
  br label %593

; <label>:593                                     ; preds = %592
  %594 = add nsw i32 %k.0, 1
  br label %535

; <label>:595                                     ; preds = %535
  br label %675

; <label>:596                                     ; preds = %511
  %597 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %597, label %598, label %674

; <label>:598                                     ; preds = %596
  %599 = sext i32 %pairlistoffset.1 to i64
  %600 = getelementptr inbounds i32* %208, i64 %599
  %601 = load i32* %600, align 4
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds %struct.CompAtom* %37, i64 %602
  %604 = getelementptr inbounds %struct.CompAtom* %603, i32 0, i32 0
  %605 = getelementptr inbounds %class.Vector* %604, i32 0, i32 0
  %606 = load double* %605, align 8
  %607 = sext i32 %601 to i64
  %608 = getelementptr inbounds %struct.CompAtom* %37, i64 %607
  %609 = getelementptr inbounds %struct.CompAtom* %608, i32 0, i32 0
  %610 = getelementptr inbounds %class.Vector* %609, i32 0, i32 1
  %611 = load double* %610, align 8
  %612 = sext i32 %601 to i64
  %613 = getelementptr inbounds %struct.CompAtom* %37, i64 %612
  %614 = getelementptr inbounds %struct.CompAtom* %613, i32 0, i32 0
  %615 = getelementptr inbounds %class.Vector* %614, i32 0, i32 2
  %616 = load double* %615, align 8
  %617 = sext i32 %601 to i64
  %618 = getelementptr inbounds %struct.CompAtom* %37, i64 %617
  %619 = getelementptr inbounds %struct.CompAtom* %618, i32 0, i32 2
  %620 = load i32* %619, align 4
  %621 = and i32 %620, 4194303
  br label %622

; <label>:622                                     ; preds = %667, %598
  %pli4.3 = phi i32* [ %222, %598 ], [ %pli4.5, %667 ]
  %plin.3 = phi i32* [ %236, %598 ], [ %plin.5, %667 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %598 ], [ %625, %667 ]
  %j211.0 = phi i32 [ %601, %598 ], [ %628, %667 ]
  %p_j_x12.0 = phi double [ %606, %598 ], [ %635, %667 ]
  %p_j_y13.0 = phi double [ %611, %598 ], [ %643, %667 ]
  %p_j_z14.0 = phi double [ %616, %598 ], [ %651, %667 ]
  %atom215.0 = phi i32 [ %621, %598 ], [ %672, %667 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %598 ], [ %exclChecksum.6, %667 ]
  %623 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %623, label %624, label %673

; <label>:624                                     ; preds = %622
  %625 = add nsw i32 %k10.0, 1
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i32* %208, i64 %626
  %628 = load i32* %627, align 4
  %629 = fsub double %310, %p_j_x12.0
  %630 = fmul double %629, %629
  %631 = sext i32 %628 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %37, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 0
  %635 = load double* %634, align 8
  %636 = fsub double %313, %p_j_y13.0
  %637 = fmul double %636, %636
  %638 = fadd double %630, %637
  %639 = sext i32 %628 to i64
  %640 = getelementptr inbounds %struct.CompAtom* %37, i64 %639
  %641 = getelementptr inbounds %struct.CompAtom* %640, i32 0, i32 0
  %642 = getelementptr inbounds %class.Vector* %641, i32 0, i32 1
  %643 = load double* %642, align 8
  %644 = fsub double %316, %p_j_z14.0
  %645 = fmul double %644, %644
  %646 = fadd double %638, %645
  %647 = sext i32 %628 to i64
  %648 = getelementptr inbounds %struct.CompAtom* %37, i64 %647
  %649 = getelementptr inbounds %struct.CompAtom* %648, i32 0, i32 0
  %650 = getelementptr inbounds %class.Vector* %649, i32 0, i32 2
  %651 = load double* %650, align 8
  %652 = fcmp ole double %646, %7
  br i1 %652, label %653, label %667

; <label>:653                                     ; preds = %624
  %654 = fcmp ole double %646, %22
  br i1 %654, label %655, label %658

; <label>:655                                     ; preds = %653
  %656 = add nsw i32 %exclChecksum.4, 1
  %657 = icmp ne i32 %656, 0
  br i1 %657, label %667, label %658

; <label>:658                                     ; preds = %655, %653
  %exclChecksum.5 = phi i32 [ %656, %655 ], [ %exclChecksum.4, %653 ]
  %659 = icmp sge i32 %atom215.0, %300
  br i1 %659, label %660, label %664

; <label>:660                                     ; preds = %658
  %661 = icmp sle i32 %atom215.0, %302
  br i1 %661, label %662, label %664

; <label>:662                                     ; preds = %660
  %663 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %666

; <label>:664                                     ; preds = %660, %658
  %665 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %666

; <label>:666                                     ; preds = %664, %662
  %pli4.4 = phi i32* [ %663, %662 ], [ %pli4.3, %664 ]
  %plin.4 = phi i32* [ %plin.3, %662 ], [ %665, %664 ]
  br label %667

; <label>:667                                     ; preds = %666, %655, %624
  %pli4.5 = phi i32* [ %pli4.3, %655 ], [ %pli4.4, %666 ], [ %pli4.3, %624 ]
  %plin.5 = phi i32* [ %plin.3, %655 ], [ %plin.4, %666 ], [ %plin.3, %624 ]
  %exclChecksum.6 = phi i32 [ %656, %655 ], [ %exclChecksum.5, %666 ], [ %exclChecksum.4, %624 ]
  %668 = sext i32 %628 to i64
  %669 = getelementptr inbounds %struct.CompAtom* %37, i64 %668
  %670 = getelementptr inbounds %struct.CompAtom* %669, i32 0, i32 2
  %671 = load i32* %670, align 4
  %672 = and i32 %671, 4194303
  br label %622

; <label>:673                                     ; preds = %622
  br label %674

; <label>:674                                     ; preds = %673, %596
  %pli4.6 = phi i32* [ %pli4.3, %673 ], [ %222, %596 ]
  %plin.6 = phi i32* [ %plin.3, %673 ], [ %236, %596 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %673 ], [ %exclChecksum.0, %596 ]
  br label %675

; <label>:675                                     ; preds = %674, %595
  %pli4.7 = phi i32* [ %pli4.0, %595 ], [ %pli4.6, %674 ]
  %plin.7 = phi i32* [ %plin.0, %595 ], [ %plin.6, %674 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %595 ], [ %exclChecksum.7, %674 ]
  %676 = ptrtoint i32* %pli4.7 to i64
  %677 = ptrtoint i32* %222 to i64
  %678 = sub i64 %676, %677
  %679 = sdiv exact i64 %678, 4
  %680 = trunc i64 %679 to i32
  %681 = icmp ne i32 %680, 0
  br i1 %681, label %682, label %689

; <label>:682                                     ; preds = %675
  %683 = sub nsw i32 %680, 1
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds i32* %222, i64 %684
  %686 = load i32* %685, align 4
  %687 = sext i32 %680 to i64
  %688 = getelementptr inbounds i32* %222, i64 %687
  store i32 %686, i32* %688, align 4
  br label %689

; <label>:689                                     ; preds = %682, %675
  br label %690

; <label>:690                                     ; preds = %712, %689
  %plin.8 = phi i32* [ %plin.7, %689 ], [ %plin.9, %712 ]
  %plix.0 = phi i32* [ %250, %689 ], [ %plix.1, %712 ]
  %plim.0 = phi i32* [ %264, %689 ], [ %plim.1, %712 ]
  %k18.0 = phi i32 [ 0, %689 ], [ %713, %712 ]
  %691 = icmp slt i32 %k18.0, %680
  br i1 %691, label %692, label %714

; <label>:692                                     ; preds = %690
  %693 = sext i32 %k18.0 to i64
  %694 = getelementptr inbounds i32* %222, i64 %693
  %695 = load i32* %694, align 4
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds %struct.CompAtom* %37, i64 %696
  %698 = getelementptr inbounds %struct.CompAtom* %697, i32 0, i32 2
  %699 = load i32* %698, align 4
  %700 = and i32 %699, 4194303
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds i8* %307, i64 %701
  %703 = load i8* %702, align 1
  %704 = sext i8 %703 to i32
  switch i32 %704, label %711 [
    i32 0, label %705
    i32 1, label %707
    i32 2, label %709
  ]

; <label>:705                                     ; preds = %692
  %706 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %695, i32* %plin.8, align 4
  br label %711

; <label>:707                                     ; preds = %692
  %708 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %695, i32* %plix.0, align 4
  br label %711

; <label>:709                                     ; preds = %692
  %710 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %695, i32* %plim.0, align 4
  br label %711

; <label>:711                                     ; preds = %709, %707, %705, %692
  %plin.9 = phi i32* [ %plin.8, %692 ], [ %plin.8, %709 ], [ %plin.8, %707 ], [ %706, %705 ]
  %plix.1 = phi i32* [ %plix.0, %692 ], [ %plix.0, %709 ], [ %708, %707 ], [ %plix.0, %705 ]
  %plim.1 = phi i32* [ %plim.0, %692 ], [ %710, %709 ], [ %plim.0, %707 ], [ %plim.0, %705 ]
  br label %712

; <label>:712                                     ; preds = %711
  %713 = add nsw i32 %k18.0, 1
  br label %690

; <label>:714                                     ; preds = %690
  %715 = ptrtoint i32* %plix.0 to i64
  %716 = ptrtoint i32* %250 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %exclChecksum.8 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plim.0 to i64
  %723 = ptrtoint i32* %264 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = sext i32 %721 to i64
  %727 = add nsw i64 %726, %725
  %728 = trunc i64 %727 to i32
  %729 = ptrtoint i32* %plin.8 to i64
  %730 = ptrtoint i32* %236 to i64
  %731 = sub i64 %729, %730
  %732 = sdiv exact i64 %731, 4
  %733 = trunc i64 %732 to i32
  br label %734

; <label>:734                                     ; preds = %990, %714
  %k18.1 = phi i32 [ 0, %714 ], [ %991, %990 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %714 ], [ %983, %990 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %714 ], [ %974, %990 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %714 ], [ %972, %990 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %714 ], [ %963, %990 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %714 ], [ %961, %990 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %714 ], [ %959, %990 ]
  %fullElectEnergy_s.1 = phi double [ %fullElectEnergy_s.0, %714 ], [ %946, %990 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %714 ], [ %944, %990 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %714 ], [ %920, %990 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %714 ], [ %911, %990 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %714 ], [ %909, %990 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %714 ], [ %900, %990 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %714 ], [ %898, %990 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %714 ], [ %896, %990 ]
  %electEnergy_s.1 = phi double [ %electEnergy_s.0, %714 ], [ %879, %990 ]
  %vdwEnergy_s.1 = phi double [ %vdwEnergy_s.0, %714 ], [ %859, %990 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %714 ], [ %877, %990 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %714 ], [ %857, %990 ]
  %735 = icmp slt i32 %k18.1, %733
  br i1 %735, label %736, label %992

; <label>:736                                     ; preds = %734
  %737 = sext i32 %k18.1 to i64
  %738 = getelementptr inbounds i32* %236, i64 %737
  %739 = load i32* %738, align 4
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds %struct.CompAtom* %37, i64 %740
  %742 = getelementptr inbounds %struct.CompAtom* %741, i32 0, i32 0
  %743 = getelementptr inbounds %class.Vector* %742, i32 0, i32 0
  %744 = load double* %743, align 8
  %745 = fsub double %310, %744
  %746 = fmul double %745, %745
  %747 = getelementptr inbounds %struct.CompAtom* %741, i32 0, i32 0
  %748 = getelementptr inbounds %class.Vector* %747, i32 0, i32 1
  %749 = load double* %748, align 8
  %750 = fsub double %313, %749
  %751 = fmul double %750, %750
  %752 = fadd double %746, %751
  %753 = getelementptr inbounds %struct.CompAtom* %741, i32 0, i32 0
  %754 = getelementptr inbounds %class.Vector* %753, i32 0, i32 2
  %755 = load double* %754, align 8
  %756 = fsub double %316, %755
  %757 = fmul double %756, %756
  %758 = fadd double %752, %757
  %759 = fptrunc double %758 to float
  %760 = bitcast %union.anon.45* %r2f to float*
  store float %759, float* %760, align 4
  %761 = bitcast %union.anon.45* %r2f to i32*
  %762 = load i32* %761, align 4
  %763 = ashr i32 %762, 17
  %764 = add nsw i32 %763, %25
  %765 = getelementptr inbounds %struct.CompAtom* %741, i32 0, i32 2
  %766 = load i32* %765, align 4
  %767 = and i32 %766, 4194303
  %768 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %767)
  %769 = zext i16 %768 to i32
  %770 = mul nsw i32 2, %769
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds %"struct.LJTable::TableEntry"* %532, i64 %771
  %773 = mul nsw i32 16, %764
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds double* %14, i64 %774
  %776 = getelementptr inbounds double* %775, i64 0
  %777 = load double* %776, align 8
  %778 = mul nsw i32 16, %764
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds double* %14, i64 %779
  %781 = getelementptr inbounds double* %780, i64 4
  %782 = getelementptr inbounds double* %781, i64 0
  %783 = load double* %782, align 8
  %784 = mul nsw i32 16, %764
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds double* %14, i64 %785
  %787 = getelementptr inbounds double* %786, i64 8
  %788 = getelementptr inbounds double* %787, i64 0
  %789 = load double* %788, align 8
  %790 = mul nsw i32 16, %764
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds double* %14, i64 %791
  %793 = getelementptr inbounds double* %792, i64 8
  %794 = getelementptr inbounds double* %793, i64 4
  %795 = getelementptr inbounds double* %794, i64 0
  %796 = load double* %795, align 8
  %797 = bitcast %union.anon.45* %r2f to i32*
  %798 = load i32* %797, align 4
  %799 = and i32 %798, -131072
  store i32 %799, i32* %797, align 4
  %800 = getelementptr inbounds %struct.CompAtom* %741, i32 0, i32 1
  %801 = load float* %800, align 4
  %802 = fpext float %801 to double
  %803 = fmul double %526, %802
  %804 = bitcast %union.anon.45* %r2f to float*
  %805 = load float* %804, align 4
  %806 = fpext float %805 to double
  %807 = fsub double %758, %806
  %808 = getelementptr inbounds %struct.CompAtom* %741, i32 0, i32 2
  %809 = load i32* %808, align 4
  %810 = lshr i32 %809, 28
  %811 = mul nsw i32 2, %810
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds double* %520, i64 %812
  %814 = load double* %813, align 8
  %815 = mul nsw i32 2, %810
  %816 = add nsw i32 %815, 1
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds double* %520, i64 %817
  %819 = load double* %818, align 8
  %820 = getelementptr inbounds %"struct.LJTable::TableEntry"* %772, i32 0, i32 0
  %821 = load double* %820, align 8
  %822 = fmul double %16, %821
  %823 = getelementptr inbounds %"struct.LJTable::TableEntry"* %772, i32 0, i32 1
  %824 = load double* %823, align 8
  %825 = fmul double %16, %824
  %826 = fmul double %822, %777
  %827 = fmul double %825, %783
  %828 = fsub double %826, %827
  %829 = getelementptr inbounds double* %775, i64 3
  %830 = load double* %829, align 8
  %831 = fmul double %822, %830
  %832 = getelementptr inbounds double* %781, i64 3
  %833 = load double* %832, align 8
  %834 = fmul double %825, %833
  %835 = fsub double %831, %834
  %836 = getelementptr inbounds double* %775, i64 2
  %837 = load double* %836, align 8
  %838 = fmul double %822, %837
  %839 = getelementptr inbounds double* %781, i64 2
  %840 = load double* %839, align 8
  %841 = fmul double %825, %840
  %842 = fsub double %838, %841
  %843 = getelementptr inbounds double* %775, i64 1
  %844 = load double* %843, align 8
  %845 = fmul double %822, %844
  %846 = getelementptr inbounds double* %781, i64 1
  %847 = load double* %846, align 8
  %848 = fmul double %825, %847
  %849 = fsub double %845, %848
  %850 = fmul double %807, %835
  %851 = fadd double %850, %842
  %852 = fmul double %851, %807
  %853 = fadd double %852, %849
  %854 = fmul double %853, %807
  %855 = fadd double %854, %828
  %856 = fmul double %814, %855
  %857 = fadd double %vdwEnergy.1, %856
  %858 = fmul double %819, %855
  %859 = fadd double %vdwEnergy_s.1, %858
  %860 = fmul double %789, %803
  %861 = getelementptr inbounds double* %787, i64 3
  %862 = load double* %861, align 8
  %863 = fmul double %803, %862
  %864 = getelementptr inbounds double* %787, i64 2
  %865 = load double* %864, align 8
  %866 = fmul double %803, %865
  %867 = getelementptr inbounds double* %787, i64 1
  %868 = load double* %867, align 8
  %869 = fmul double %803, %868
  %870 = fmul double %807, %863
  %871 = fadd double %870, %866
  %872 = fmul double %871, %807
  %873 = fadd double %872, %869
  %874 = fmul double %873, %807
  %875 = fadd double %874, %860
  %876 = fmul double %814, %875
  %877 = fadd double %electEnergy.1, %876
  %878 = fmul double %819, %875
  %879 = fadd double %electEnergy_s.1, %878
  %880 = fadd double %863, %835
  %881 = fadd double %866, %842
  %882 = fadd double %869, %849
  %883 = fadd double %860, %828
  %884 = fmul double 3.000000e+00, %807
  %885 = fmul double %884, %880
  %886 = fmul double 2.000000e+00, %881
  %887 = fadd double %885, %886
  %888 = fmul double %887, %807
  %889 = fadd double %888, %882
  %890 = fmul double -2.000000e+00, %814
  %891 = fmul double %890, %889
  %892 = sext i32 %739 to i64
  %893 = getelementptr inbounds %class.Vector* %270, i64 %892
  %894 = fmul double %891, %745
  %895 = fmul double %894, %745
  %896 = fadd double %virial_xx.1, %895
  %897 = fmul double %894, %750
  %898 = fadd double %virial_xy.1, %897
  %899 = fmul double %894, %756
  %900 = fadd double %virial_xz.1, %899
  %901 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %902 = load double* %901, align 8
  %903 = fadd double %902, %894
  store double %903, double* %901, align 8
  %904 = getelementptr inbounds %class.Vector* %893, i32 0, i32 0
  %905 = load double* %904, align 8
  %906 = fsub double %905, %894
  store double %906, double* %904, align 8
  %907 = fmul double %891, %750
  %908 = fmul double %907, %750
  %909 = fadd double %virial_yy.1, %908
  %910 = fmul double %907, %756
  %911 = fadd double %virial_yz.1, %910
  %912 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %913 = load double* %912, align 8
  %914 = fadd double %913, %907
  store double %914, double* %912, align 8
  %915 = getelementptr inbounds %class.Vector* %893, i32 0, i32 1
  %916 = load double* %915, align 8
  %917 = fsub double %916, %907
  store double %917, double* %915, align 8
  %918 = fmul double %891, %756
  %919 = fmul double %918, %756
  %920 = fadd double %virial_zz.1, %919
  %921 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %922 = load double* %921, align 8
  %923 = fadd double %922, %918
  store double %923, double* %921, align 8
  %924 = getelementptr inbounds %class.Vector* %893, i32 0, i32 2
  %925 = load double* %924, align 8
  %926 = fsub double %925, %918
  store double %926, double* %924, align 8
  %927 = getelementptr inbounds double* %794, i64 1
  %928 = load double* %927, align 8
  %929 = getelementptr inbounds double* %794, i64 2
  %930 = load double* %929, align 8
  %931 = getelementptr inbounds double* %794, i64 3
  %932 = load double* %931, align 8
  %933 = fmul double %932, %803
  %934 = fmul double %930, %803
  %935 = fmul double %928, %803
  %936 = fmul double %796, %803
  %937 = fmul double %807, %933
  %938 = fadd double %937, %934
  %939 = fmul double %938, %807
  %940 = fadd double %939, %935
  %941 = fmul double %940, %807
  %942 = fadd double %941, %936
  %943 = fmul double %814, %942
  %944 = fadd double %fullElectEnergy.1, %943
  %945 = fmul double %819, %942
  %946 = fadd double %fullElectEnergy_s.1, %945
  %947 = fmul double 3.000000e+00, %807
  %948 = fmul double %947, %933
  %949 = fmul double 2.000000e+00, %934
  %950 = fadd double %948, %949
  %951 = fmul double %950, %807
  %952 = fadd double %951, %935
  %953 = fmul double -2.000000e+00, %952
  %954 = fmul double %953, %814
  %955 = sext i32 %739 to i64
  %956 = getelementptr inbounds %class.Vector* %276, i64 %955
  %957 = fmul double %954, %745
  %958 = fmul double %957, %745
  %959 = fadd double %fullElectVirial_xx.1, %958
  %960 = fmul double %957, %750
  %961 = fadd double %fullElectVirial_xy.1, %960
  %962 = fmul double %957, %756
  %963 = fadd double %fullElectVirial_xz.1, %962
  %964 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %965 = load double* %964, align 8
  %966 = fadd double %965, %957
  store double %966, double* %964, align 8
  %967 = getelementptr inbounds %class.Vector* %956, i32 0, i32 0
  %968 = load double* %967, align 8
  %969 = fsub double %968, %957
  store double %969, double* %967, align 8
  %970 = fmul double %954, %750
  %971 = fmul double %970, %750
  %972 = fadd double %fullElectVirial_yy.1, %971
  %973 = fmul double %970, %756
  %974 = fadd double %fullElectVirial_yz.1, %973
  %975 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %976 = load double* %975, align 8
  %977 = fadd double %976, %970
  store double %977, double* %975, align 8
  %978 = getelementptr inbounds %class.Vector* %956, i32 0, i32 1
  %979 = load double* %978, align 8
  %980 = fsub double %979, %970
  store double %980, double* %978, align 8
  %981 = fmul double %954, %756
  %982 = fmul double %981, %756
  %983 = fadd double %fullElectVirial_zz.1, %982
  %984 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %985 = load double* %984, align 8
  %986 = fadd double %985, %981
  store double %986, double* %984, align 8
  %987 = getelementptr inbounds %class.Vector* %956, i32 0, i32 2
  %988 = load double* %987, align 8
  %989 = fsub double %988, %981
  store double %989, double* %987, align 8
  br label %990

; <label>:990                                     ; preds = %736
  %991 = add nsw i32 %k18.1, 1
  br label %734

; <label>:992                                     ; preds = %734
  %993 = ptrtoint i32* %plim.0 to i64
  %994 = ptrtoint i32* %264 to i64
  %995 = sub i64 %993, %994
  %996 = sdiv exact i64 %995, 4
  %997 = trunc i64 %996 to i32
  br label %998

; <label>:998                                     ; preds = %1276, %992
  %k18.2 = phi i32 [ 0, %992 ], [ %1277, %1276 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %992 ], [ %1269, %1276 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %992 ], [ %1260, %1276 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %992 ], [ %1258, %1276 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %992 ], [ %1249, %1276 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %992 ], [ %1247, %1276 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %992 ], [ %1245, %1276 ]
  %fullElectEnergy_s.2 = phi double [ %fullElectEnergy_s.1, %992 ], [ %1232, %1276 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %992 ], [ %1230, %1276 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %992 ], [ %1187, %1276 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %992 ], [ %1178, %1276 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %992 ], [ %1176, %1276 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %992 ], [ %1167, %1276 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %992 ], [ %1165, %1276 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %992 ], [ %1163, %1276 ]
  %electEnergy_s.2 = phi double [ %electEnergy_s.1, %992 ], [ %1146, %1276 ]
  %vdwEnergy_s.2 = phi double [ %vdwEnergy_s.1, %992 ], [ %1124, %1276 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %992 ], [ %1144, %1276 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %992 ], [ %1122, %1276 ]
  %999 = icmp slt i32 %k18.2, %997
  br i1 %999, label %1000, label %1278

; <label>:1000                                    ; preds = %998
  %1001 = sext i32 %k18.2 to i64
  %1002 = getelementptr inbounds i32* %264, i64 %1001
  %1003 = load i32* %1002, align 4
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds %struct.CompAtom* %37, i64 %1004
  %1006 = getelementptr inbounds %struct.CompAtom* %1005, i32 0, i32 0
  %1007 = getelementptr inbounds %class.Vector* %1006, i32 0, i32 0
  %1008 = load double* %1007, align 8
  %1009 = fsub double %310, %1008
  %1010 = fmul double %1009, %1009
  %1011 = getelementptr inbounds %struct.CompAtom* %1005, i32 0, i32 0
  %1012 = getelementptr inbounds %class.Vector* %1011, i32 0, i32 1
  %1013 = load double* %1012, align 8
  %1014 = fsub double %313, %1013
  %1015 = fmul double %1014, %1014
  %1016 = fadd double %1010, %1015
  %1017 = getelementptr inbounds %struct.CompAtom* %1005, i32 0, i32 0
  %1018 = getelementptr inbounds %class.Vector* %1017, i32 0, i32 2
  %1019 = load double* %1018, align 8
  %1020 = fsub double %316, %1019
  %1021 = fmul double %1020, %1020
  %1022 = fadd double %1016, %1021
  %1023 = fptrunc double %1022 to float
  %1024 = bitcast %union.anon.46* %r2f32 to float*
  store float %1023, float* %1024, align 4
  %1025 = bitcast %union.anon.46* %r2f32 to i32*
  %1026 = load i32* %1025, align 4
  %1027 = ashr i32 %1026, 17
  %1028 = add nsw i32 %1027, %25
  %1029 = getelementptr inbounds %struct.CompAtom* %1005, i32 0, i32 2
  %1030 = load i32* %1029, align 4
  %1031 = and i32 %1030, 4194303
  %1032 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1031)
  %1033 = zext i16 %1032 to i32
  %1034 = mul nsw i32 2, %1033
  %1035 = sext i32 %1034 to i64
  %1036 = getelementptr inbounds %"struct.LJTable::TableEntry"* %532, i64 %1035
  %1037 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1036, i64 1
  %1038 = mul nsw i32 16, %1028
  %1039 = sext i32 %1038 to i64
  %1040 = getelementptr inbounds double* %14, i64 %1039
  %1041 = getelementptr inbounds double* %1040, i64 0
  %1042 = load double* %1041, align 8
  %1043 = mul nsw i32 16, %1028
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds double* %14, i64 %1044
  %1046 = getelementptr inbounds double* %1045, i64 4
  %1047 = getelementptr inbounds double* %1046, i64 0
  %1048 = load double* %1047, align 8
  %1049 = mul nsw i32 16, %1028
  %1050 = sext i32 %1049 to i64
  %1051 = getelementptr inbounds double* %14, i64 %1050
  %1052 = getelementptr inbounds double* %1051, i64 8
  %1053 = getelementptr inbounds double* %1052, i64 0
  %1054 = load double* %1053, align 8
  %1055 = mul nsw i32 16, %1028
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds double* %14, i64 %1056
  %1058 = getelementptr inbounds double* %1057, i64 8
  %1059 = getelementptr inbounds double* %1058, i64 4
  %1060 = getelementptr inbounds double* %1059, i64 0
  %1061 = load double* %1060, align 8
  %1062 = bitcast %union.anon.46* %r2f32 to i32*
  %1063 = load i32* %1062, align 4
  %1064 = and i32 %1063, -131072
  store i32 %1064, i32* %1062, align 4
  %1065 = getelementptr inbounds %struct.CompAtom* %1005, i32 0, i32 1
  %1066 = load float* %1065, align 4
  %1067 = fpext float %1066 to double
  %1068 = fmul double %526, %1067
  %1069 = bitcast %union.anon.46* %r2f32 to float*
  %1070 = load float* %1069, align 4
  %1071 = fpext float %1070 to double
  %1072 = fsub double %1022, %1071
  %1073 = getelementptr inbounds %struct.CompAtom* %1005, i32 0, i32 2
  %1074 = load i32* %1073, align 4
  %1075 = lshr i32 %1074, 28
  %1076 = mul nsw i32 2, %1075
  %1077 = sext i32 %1076 to i64
  %1078 = getelementptr inbounds double* %520, i64 %1077
  %1079 = load double* %1078, align 8
  %1080 = mul nsw i32 2, %1075
  %1081 = add nsw i32 %1080, 1
  %1082 = sext i32 %1081 to i64
  %1083 = getelementptr inbounds double* %520, i64 %1082
  %1084 = load double* %1083, align 8
  %1085 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1037, i32 0, i32 0
  %1086 = load double* %1085, align 8
  %1087 = fmul double %16, %1086
  %1088 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1037, i32 0, i32 1
  %1089 = load double* %1088, align 8
  %1090 = fmul double %16, %1089
  %1091 = fmul double %1087, %1042
  %1092 = fmul double %1090, %1048
  %1093 = fsub double %1091, %1092
  %1094 = getelementptr inbounds double* %1040, i64 3
  %1095 = load double* %1094, align 8
  %1096 = fmul double %1087, %1095
  %1097 = getelementptr inbounds double* %1046, i64 3
  %1098 = load double* %1097, align 8
  %1099 = fmul double %1090, %1098
  %1100 = fsub double %1096, %1099
  %1101 = getelementptr inbounds double* %1040, i64 2
  %1102 = load double* %1101, align 8
  %1103 = fmul double %1087, %1102
  %1104 = getelementptr inbounds double* %1046, i64 2
  %1105 = load double* %1104, align 8
  %1106 = fmul double %1090, %1105
  %1107 = fsub double %1103, %1106
  %1108 = getelementptr inbounds double* %1040, i64 1
  %1109 = load double* %1108, align 8
  %1110 = fmul double %1087, %1109
  %1111 = getelementptr inbounds double* %1046, i64 1
  %1112 = load double* %1111, align 8
  %1113 = fmul double %1090, %1112
  %1114 = fsub double %1110, %1113
  %1115 = fmul double %1072, %1100
  %1116 = fadd double %1115, %1107
  %1117 = fmul double %1116, %1072
  %1118 = fadd double %1117, %1114
  %1119 = fmul double %1118, %1072
  %1120 = fadd double %1119, %1093
  %1121 = fmul double %1079, %1120
  %1122 = fadd double %vdwEnergy.2, %1121
  %1123 = fmul double %1084, %1120
  %1124 = fadd double %vdwEnergy_s.2, %1123
  %1125 = fsub double 1.000000e+00, %18
  %1126 = fmul double %1125, %1068
  %1127 = fmul double %1054, %1126
  %1128 = getelementptr inbounds double* %1052, i64 3
  %1129 = load double* %1128, align 8
  %1130 = fmul double %1126, %1129
  %1131 = getelementptr inbounds double* %1052, i64 2
  %1132 = load double* %1131, align 8
  %1133 = fmul double %1126, %1132
  %1134 = getelementptr inbounds double* %1052, i64 1
  %1135 = load double* %1134, align 8
  %1136 = fmul double %1126, %1135
  %1137 = fmul double %1072, %1130
  %1138 = fadd double %1137, %1133
  %1139 = fmul double %1138, %1072
  %1140 = fadd double %1139, %1136
  %1141 = fmul double %1140, %1072
  %1142 = fadd double %1141, %1127
  %1143 = fmul double %1079, %1142
  %1144 = fadd double %electEnergy.2, %1143
  %1145 = fmul double %1084, %1142
  %1146 = fadd double %electEnergy_s.2, %1145
  %1147 = fadd double %1130, %1100
  %1148 = fadd double %1133, %1107
  %1149 = fadd double %1136, %1114
  %1150 = fadd double %1127, %1093
  %1151 = fmul double 3.000000e+00, %1072
  %1152 = fmul double %1151, %1147
  %1153 = fmul double 2.000000e+00, %1148
  %1154 = fadd double %1152, %1153
  %1155 = fmul double %1154, %1072
  %1156 = fadd double %1155, %1149
  %1157 = fmul double -2.000000e+00, %1079
  %1158 = fmul double %1157, %1156
  %1159 = sext i32 %1003 to i64
  %1160 = getelementptr inbounds %class.Vector* %270, i64 %1159
  %1161 = fmul double %1158, %1009
  %1162 = fmul double %1161, %1009
  %1163 = fadd double %virial_xx.2, %1162
  %1164 = fmul double %1161, %1014
  %1165 = fadd double %virial_xy.2, %1164
  %1166 = fmul double %1161, %1020
  %1167 = fadd double %virial_xz.2, %1166
  %1168 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %1169 = load double* %1168, align 8
  %1170 = fadd double %1169, %1161
  store double %1170, double* %1168, align 8
  %1171 = getelementptr inbounds %class.Vector* %1160, i32 0, i32 0
  %1172 = load double* %1171, align 8
  %1173 = fsub double %1172, %1161
  store double %1173, double* %1171, align 8
  %1174 = fmul double %1158, %1014
  %1175 = fmul double %1174, %1014
  %1176 = fadd double %virial_yy.2, %1175
  %1177 = fmul double %1174, %1020
  %1178 = fadd double %virial_yz.2, %1177
  %1179 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %1180 = load double* %1179, align 8
  %1181 = fadd double %1180, %1174
  store double %1181, double* %1179, align 8
  %1182 = getelementptr inbounds %class.Vector* %1160, i32 0, i32 1
  %1183 = load double* %1182, align 8
  %1184 = fsub double %1183, %1174
  store double %1184, double* %1182, align 8
  %1185 = fmul double %1158, %1020
  %1186 = fmul double %1185, %1020
  %1187 = fadd double %virial_zz.2, %1186
  %1188 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %1189 = load double* %1188, align 8
  %1190 = fadd double %1189, %1185
  store double %1190, double* %1188, align 8
  %1191 = getelementptr inbounds %class.Vector* %1160, i32 0, i32 2
  %1192 = load double* %1191, align 8
  %1193 = fsub double %1192, %1185
  store double %1193, double* %1191, align 8
  %1194 = getelementptr inbounds double* %1059, i64 1
  %1195 = load double* %1194, align 8
  %1196 = getelementptr inbounds double* %1059, i64 2
  %1197 = load double* %1196, align 8
  %1198 = getelementptr inbounds double* %1059, i64 3
  %1199 = load double* %1198, align 8
  %1200 = mul nsw i32 4, %1028
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds double* %15, i64 %1201
  %1203 = getelementptr inbounds double* %1202, i64 0
  %1204 = load double* %1203, align 8
  %1205 = fmul double %18, %1204
  %1206 = fsub double %1061, %1205
  %1207 = getelementptr inbounds double* %1202, i64 1
  %1208 = load double* %1207, align 8
  %1209 = fmul double %18, %1208
  %1210 = fsub double %1195, %1209
  %1211 = getelementptr inbounds double* %1202, i64 2
  %1212 = load double* %1211, align 8
  %1213 = fmul double %18, %1212
  %1214 = fsub double %1197, %1213
  %1215 = getelementptr inbounds double* %1202, i64 3
  %1216 = load double* %1215, align 8
  %1217 = fmul double %18, %1216
  %1218 = fsub double %1199, %1217
  %1219 = fmul double %1218, %1068
  %1220 = fmul double %1214, %1068
  %1221 = fmul double %1210, %1068
  %1222 = fmul double %1206, %1068
  %1223 = fmul double %1072, %1219
  %1224 = fadd double %1223, %1220
  %1225 = fmul double %1224, %1072
  %1226 = fadd double %1225, %1221
  %1227 = fmul double %1226, %1072
  %1228 = fadd double %1227, %1222
  %1229 = fmul double %1079, %1228
  %1230 = fadd double %fullElectEnergy.2, %1229
  %1231 = fmul double %1084, %1228
  %1232 = fadd double %fullElectEnergy_s.2, %1231
  %1233 = fmul double 3.000000e+00, %1072
  %1234 = fmul double %1233, %1219
  %1235 = fmul double 2.000000e+00, %1220
  %1236 = fadd double %1234, %1235
  %1237 = fmul double %1236, %1072
  %1238 = fadd double %1237, %1221
  %1239 = fmul double -2.000000e+00, %1238
  %1240 = fmul double %1239, %1079
  %1241 = sext i32 %1003 to i64
  %1242 = getelementptr inbounds %class.Vector* %276, i64 %1241
  %1243 = fmul double %1240, %1009
  %1244 = fmul double %1243, %1009
  %1245 = fadd double %fullElectVirial_xx.2, %1244
  %1246 = fmul double %1243, %1014
  %1247 = fadd double %fullElectVirial_xy.2, %1246
  %1248 = fmul double %1243, %1020
  %1249 = fadd double %fullElectVirial_xz.2, %1248
  %1250 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1251 = load double* %1250, align 8
  %1252 = fadd double %1251, %1243
  store double %1252, double* %1250, align 8
  %1253 = getelementptr inbounds %class.Vector* %1242, i32 0, i32 0
  %1254 = load double* %1253, align 8
  %1255 = fsub double %1254, %1243
  store double %1255, double* %1253, align 8
  %1256 = fmul double %1240, %1014
  %1257 = fmul double %1256, %1014
  %1258 = fadd double %fullElectVirial_yy.2, %1257
  %1259 = fmul double %1256, %1020
  %1260 = fadd double %fullElectVirial_yz.2, %1259
  %1261 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1262 = load double* %1261, align 8
  %1263 = fadd double %1262, %1256
  store double %1263, double* %1261, align 8
  %1264 = getelementptr inbounds %class.Vector* %1242, i32 0, i32 1
  %1265 = load double* %1264, align 8
  %1266 = fsub double %1265, %1256
  store double %1266, double* %1264, align 8
  %1267 = fmul double %1240, %1020
  %1268 = fmul double %1267, %1020
  %1269 = fadd double %fullElectVirial_zz.2, %1268
  %1270 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1271 = load double* %1270, align 8
  %1272 = fadd double %1271, %1267
  store double %1272, double* %1270, align 8
  %1273 = getelementptr inbounds %class.Vector* %1242, i32 0, i32 2
  %1274 = load double* %1273, align 8
  %1275 = fsub double %1274, %1267
  store double %1275, double* %1273, align 8
  br label %1276

; <label>:1276                                    ; preds = %1000
  %1277 = add nsw i32 %k18.2, 1
  br label %998

; <label>:1278                                    ; preds = %998
  %1279 = ptrtoint i32* %plix.0 to i64
  %1280 = ptrtoint i32* %250 to i64
  %1281 = sub i64 %1279, %1280
  %1282 = sdiv exact i64 %1281, 4
  %1283 = trunc i64 %1282 to i32
  br label %1284

; <label>:1284                                    ; preds = %1423, %1278
  %k18.3 = phi i32 [ 0, %1278 ], [ %1424, %1423 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1278 ], [ %1416, %1423 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1278 ], [ %1407, %1423 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1278 ], [ %1405, %1423 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1278 ], [ %1396, %1423 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1278 ], [ %1394, %1423 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1278 ], [ %1392, %1423 ]
  %fullElectEnergy_s.3 = phi double [ %fullElectEnergy_s.2, %1278 ], [ %1379, %1423 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1278 ], [ %1377, %1423 ]
  %1285 = icmp slt i32 %k18.3, %1283
  br i1 %1285, label %1286, label %1425

; <label>:1286                                    ; preds = %1284
  %1287 = sext i32 %k18.3 to i64
  %1288 = getelementptr inbounds i32* %250, i64 %1287
  %1289 = load i32* %1288, align 4
  %1290 = sext i32 %1289 to i64
  %1291 = getelementptr inbounds %struct.CompAtom* %37, i64 %1290
  %1292 = getelementptr inbounds %struct.CompAtom* %1291, i32 0, i32 0
  %1293 = getelementptr inbounds %class.Vector* %1292, i32 0, i32 0
  %1294 = load double* %1293, align 8
  %1295 = fsub double %310, %1294
  %1296 = fmul double %1295, %1295
  %1297 = getelementptr inbounds %struct.CompAtom* %1291, i32 0, i32 0
  %1298 = getelementptr inbounds %class.Vector* %1297, i32 0, i32 1
  %1299 = load double* %1298, align 8
  %1300 = fsub double %313, %1299
  %1301 = fmul double %1300, %1300
  %1302 = fadd double %1296, %1301
  %1303 = getelementptr inbounds %struct.CompAtom* %1291, i32 0, i32 0
  %1304 = getelementptr inbounds %class.Vector* %1303, i32 0, i32 2
  %1305 = load double* %1304, align 8
  %1306 = fsub double %316, %1305
  %1307 = fmul double %1306, %1306
  %1308 = fadd double %1302, %1307
  %1309 = fptrunc double %1308 to float
  %1310 = bitcast %union.anon.47* %r2f81 to float*
  store float %1309, float* %1310, align 4
  %1311 = bitcast %union.anon.47* %r2f81 to i32*
  %1312 = load i32* %1311, align 4
  %1313 = ashr i32 %1312, 17
  %1314 = add nsw i32 %1313, %25
  %1315 = mul nsw i32 16, %1314
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds double* %14, i64 %1316
  %1318 = getelementptr inbounds double* %1317, i64 8
  %1319 = getelementptr inbounds double* %1318, i64 4
  %1320 = getelementptr inbounds double* %1319, i64 0
  %1321 = load double* %1320, align 8
  %1322 = bitcast %union.anon.47* %r2f81 to i32*
  %1323 = load i32* %1322, align 4
  %1324 = and i32 %1323, -131072
  store i32 %1324, i32* %1322, align 4
  %1325 = getelementptr inbounds %struct.CompAtom* %1291, i32 0, i32 1
  %1326 = load float* %1325, align 4
  %1327 = fpext float %1326 to double
  %1328 = fmul double %526, %1327
  %1329 = bitcast %union.anon.47* %r2f81 to float*
  %1330 = load float* %1329, align 4
  %1331 = fpext float %1330 to double
  %1332 = fsub double %1308, %1331
  %1333 = getelementptr inbounds %struct.CompAtom* %1291, i32 0, i32 2
  %1334 = load i32* %1333, align 4
  %1335 = lshr i32 %1334, 28
  %1336 = mul nsw i32 2, %1335
  %1337 = sext i32 %1336 to i64
  %1338 = getelementptr inbounds double* %520, i64 %1337
  %1339 = load double* %1338, align 8
  %1340 = mul nsw i32 2, %1335
  %1341 = add nsw i32 %1340, 1
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds double* %520, i64 %1342
  %1344 = load double* %1343, align 8
  %1345 = getelementptr inbounds double* %1319, i64 1
  %1346 = load double* %1345, align 8
  %1347 = getelementptr inbounds double* %1319, i64 2
  %1348 = load double* %1347, align 8
  %1349 = getelementptr inbounds double* %1319, i64 3
  %1350 = load double* %1349, align 8
  %1351 = mul nsw i32 4, %1314
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds double* %15, i64 %1352
  %1354 = getelementptr inbounds double* %1353, i64 0
  %1355 = load double* %1354, align 8
  %1356 = fsub double %1321, %1355
  %1357 = getelementptr inbounds double* %1353, i64 1
  %1358 = load double* %1357, align 8
  %1359 = fsub double %1346, %1358
  %1360 = getelementptr inbounds double* %1353, i64 2
  %1361 = load double* %1360, align 8
  %1362 = fsub double %1348, %1361
  %1363 = getelementptr inbounds double* %1353, i64 3
  %1364 = load double* %1363, align 8
  %1365 = fsub double %1350, %1364
  %1366 = fmul double %1365, %1328
  %1367 = fmul double %1362, %1328
  %1368 = fmul double %1359, %1328
  %1369 = fmul double %1356, %1328
  %1370 = fmul double %1332, %1366
  %1371 = fadd double %1370, %1367
  %1372 = fmul double %1371, %1332
  %1373 = fadd double %1372, %1368
  %1374 = fmul double %1373, %1332
  %1375 = fadd double %1374, %1369
  %1376 = fmul double %1339, %1375
  %1377 = fadd double %fullElectEnergy.3, %1376
  %1378 = fmul double %1344, %1375
  %1379 = fadd double %fullElectEnergy_s.3, %1378
  %1380 = fmul double 3.000000e+00, %1332
  %1381 = fmul double %1380, %1366
  %1382 = fmul double 2.000000e+00, %1367
  %1383 = fadd double %1381, %1382
  %1384 = fmul double %1383, %1332
  %1385 = fadd double %1384, %1368
  %1386 = fmul double -2.000000e+00, %1385
  %1387 = fmul double %1386, %1339
  %1388 = sext i32 %1289 to i64
  %1389 = getelementptr inbounds %class.Vector* %276, i64 %1388
  %1390 = fmul double %1387, %1295
  %1391 = fmul double %1390, %1295
  %1392 = fadd double %fullElectVirial_xx.3, %1391
  %1393 = fmul double %1390, %1300
  %1394 = fadd double %fullElectVirial_xy.3, %1393
  %1395 = fmul double %1390, %1306
  %1396 = fadd double %fullElectVirial_xz.3, %1395
  %1397 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1398 = load double* %1397, align 8
  %1399 = fadd double %1398, %1390
  store double %1399, double* %1397, align 8
  %1400 = getelementptr inbounds %class.Vector* %1389, i32 0, i32 0
  %1401 = load double* %1400, align 8
  %1402 = fsub double %1401, %1390
  store double %1402, double* %1400, align 8
  %1403 = fmul double %1387, %1300
  %1404 = fmul double %1403, %1300
  %1405 = fadd double %fullElectVirial_yy.3, %1404
  %1406 = fmul double %1403, %1306
  %1407 = fadd double %fullElectVirial_yz.3, %1406
  %1408 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1409 = load double* %1408, align 8
  %1410 = fadd double %1409, %1403
  store double %1410, double* %1408, align 8
  %1411 = getelementptr inbounds %class.Vector* %1389, i32 0, i32 1
  %1412 = load double* %1411, align 8
  %1413 = fsub double %1412, %1403
  store double %1413, double* %1411, align 8
  %1414 = fmul double %1387, %1306
  %1415 = fmul double %1414, %1306
  %1416 = fadd double %fullElectVirial_zz.3, %1415
  %1417 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1418 = load double* %1417, align 8
  %1419 = fadd double %1418, %1414
  store double %1419, double* %1417, align 8
  %1420 = getelementptr inbounds %class.Vector* %1389, i32 0, i32 2
  %1421 = load double* %1420, align 8
  %1422 = fsub double %1421, %1414
  store double %1422, double* %1420, align 8
  br label %1423

; <label>:1423                                    ; preds = %1286
  %1424 = add nsw i32 %k18.3, 1
  br label %1284

; <label>:1425                                    ; preds = %1284
  br label %1426

; <label>:1426                                    ; preds = %1425, %497, %348
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %348 ], [ %pairlistindex.1, %1425 ], [ %476, %497 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %348 ], [ %pairlistoffset.1, %1425 ], [ 0, %497 ]
  %pairCount.3 = phi i32 [ %344, %348 ], [ %pairCount.2, %1425 ], [ %pairCount.1, %497 ]
  %i.2 = phi i32 [ %350, %348 ], [ %i.1, %1425 ], [ %500, %497 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %348 ], [ %fullElectVirial_zz.3, %1425 ], [ %fullElectVirial_zz.0, %497 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %348 ], [ %fullElectVirial_yz.3, %1425 ], [ %fullElectVirial_yz.0, %497 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %348 ], [ %fullElectVirial_yy.3, %1425 ], [ %fullElectVirial_yy.0, %497 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %348 ], [ %fullElectVirial_xz.3, %1425 ], [ %fullElectVirial_xz.0, %497 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %348 ], [ %fullElectVirial_xy.3, %1425 ], [ %fullElectVirial_xy.0, %497 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %348 ], [ %fullElectVirial_xx.3, %1425 ], [ %fullElectVirial_xx.0, %497 ]
  %fullElectEnergy_s.4 = phi double [ %fullElectEnergy_s.0, %348 ], [ %fullElectEnergy_s.3, %1425 ], [ %fullElectEnergy_s.0, %497 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %348 ], [ %fullElectEnergy.3, %1425 ], [ %fullElectEnergy.0, %497 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %348 ], [ %virial_zz.2, %1425 ], [ %virial_zz.0, %497 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %348 ], [ %virial_yz.2, %1425 ], [ %virial_yz.0, %497 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %348 ], [ %virial_yy.2, %1425 ], [ %virial_yy.0, %497 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %348 ], [ %virial_xz.2, %1425 ], [ %virial_xz.0, %497 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %348 ], [ %virial_xy.2, %1425 ], [ %virial_xy.0, %497 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %348 ], [ %virial_xx.2, %1425 ], [ %virial_xx.0, %497 ]
  %electEnergy_s.3 = phi double [ %electEnergy_s.0, %348 ], [ %electEnergy_s.2, %1425 ], [ %electEnergy_s.0, %497 ]
  %vdwEnergy_s.3 = phi double [ %vdwEnergy_s.0, %348 ], [ %vdwEnergy_s.2, %1425 ], [ %vdwEnergy_s.0, %497 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %348 ], [ %electEnergy.2, %1425 ], [ %electEnergy.0, %497 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %348 ], [ %vdwEnergy.2, %1425 ], [ %vdwEnergy.0, %497 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %348 ], [ %728, %1425 ], [ %exclChecksum.0, %497 ]
  %1427 = add nsw i32 %i.2, 1
  br label %290

; <label>:1428                                    ; preds = %290
  %1429 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1430 = icmp ne i32* %51, %1429
  br i1 %1430, label %1431, label %1436

; <label>:1431                                    ; preds = %1428
  %1432 = icmp eq i32* %51, null
  br i1 %1432, label %1435, label %1433

; <label>:1433                                    ; preds = %1431
  %1434 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1434) #8
  br label %1435

; <label>:1435                                    ; preds = %1433, %1431
  br label %1436

; <label>:1436                                    ; preds = %1435, %1428
  %1437 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1438 = icmp ne i32* %65, %1437
  br i1 %1438, label %1439, label %1444

; <label>:1439                                    ; preds = %1436
  %1440 = icmp eq i32* %65, null
  br i1 %1440, label %1443, label %1441

; <label>:1441                                    ; preds = %1439
  %1442 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1442) #8
  br label %1443

; <label>:1443                                    ; preds = %1441, %1439
  br label %1444

; <label>:1444                                    ; preds = %1443, %1436
  %1445 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1446 = icmp ne i32* %79, %1445
  br i1 %1446, label %1447, label %1452

; <label>:1447                                    ; preds = %1444
  %1448 = icmp eq i32* %79, null
  br i1 %1448, label %1451, label %1449

; <label>:1449                                    ; preds = %1447
  %1450 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1450) #8
  br label %1451

; <label>:1451                                    ; preds = %1449, %1447
  br label %1452

; <label>:1452                                    ; preds = %1451, %1444
  %1453 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1454 = icmp ne i32* %208, %1453
  br i1 %1454, label %1455, label %1460

; <label>:1455                                    ; preds = %1452
  %1456 = icmp eq i32* %208, null
  br i1 %1456, label %1459, label %1457

; <label>:1457                                    ; preds = %1455
  %1458 = bitcast i32* %208 to i8*
  call void @_ZdaPv(i8* %1458) #8
  br label %1459

; <label>:1459                                    ; preds = %1457, %1455
  br label %1460

; <label>:1460                                    ; preds = %1459, %1452
  %1461 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1462 = icmp ne i32* %222, %1461
  br i1 %1462, label %1463, label %1468

; <label>:1463                                    ; preds = %1460
  %1464 = icmp eq i32* %222, null
  br i1 %1464, label %1467, label %1465

; <label>:1465                                    ; preds = %1463
  %1466 = bitcast i32* %222 to i8*
  call void @_ZdaPv(i8* %1466) #8
  br label %1467

; <label>:1467                                    ; preds = %1465, %1463
  br label %1468

; <label>:1468                                    ; preds = %1467, %1460
  %1469 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1470 = icmp ne i32* %236, %1469
  br i1 %1470, label %1471, label %1476

; <label>:1471                                    ; preds = %1468
  %1472 = icmp eq i32* %236, null
  br i1 %1472, label %1475, label %1473

; <label>:1473                                    ; preds = %1471
  %1474 = bitcast i32* %236 to i8*
  call void @_ZdaPv(i8* %1474) #8
  br label %1475

; <label>:1475                                    ; preds = %1473, %1471
  br label %1476

; <label>:1476                                    ; preds = %1475, %1468
  %1477 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1478 = icmp ne i32* %250, %1477
  br i1 %1478, label %1479, label %1484

; <label>:1479                                    ; preds = %1476
  %1480 = icmp eq i32* %250, null
  br i1 %1480, label %1483, label %1481

; <label>:1481                                    ; preds = %1479
  %1482 = bitcast i32* %250 to i8*
  call void @_ZdaPv(i8* %1482) #8
  br label %1483

; <label>:1483                                    ; preds = %1481, %1479
  br label %1484

; <label>:1484                                    ; preds = %1483, %1476
  %1485 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1486 = icmp ne i32* %264, %1485
  br i1 %1486, label %1487, label %1492

; <label>:1487                                    ; preds = %1484
  %1488 = icmp eq i32* %264, null
  br i1 %1488, label %1491, label %1489

; <label>:1489                                    ; preds = %1487
  %1490 = bitcast i32* %264 to i8*
  call void @_ZdaPv(i8* %1490) #8
  br label %1491

; <label>:1491                                    ; preds = %1489, %1487
  br label %1492

; <label>:1492                                    ; preds = %1491, %1484
  %1493 = sitofp i32 %exclChecksum.0 to double
  %1494 = getelementptr inbounds double* %6, i64 22
  %1495 = load double* %1494, align 8
  %1496 = fadd double %1495, %1493
  store double %1496, double* %1494, align 8
  %1497 = getelementptr inbounds double* %6, i64 2
  %1498 = load double* %1497, align 8
  %1499 = fadd double %1498, %vdwEnergy.0
  store double %1499, double* %1497, align 8
  %1500 = getelementptr inbounds double* %6, i64 0
  %1501 = load double* %1500, align 8
  %1502 = fadd double %1501, %electEnergy.0
  store double %1502, double* %1500, align 8
  %1503 = getelementptr inbounds double* %6, i64 25
  %1504 = load double* %1503, align 8
  %1505 = fadd double %1504, %vdwEnergy_s.0
  store double %1505, double* %1503, align 8
  %1506 = getelementptr inbounds double* %6, i64 23
  %1507 = load double* %1506, align 8
  %1508 = fadd double %1507, %electEnergy_s.0
  store double %1508, double* %1506, align 8
  %1509 = getelementptr inbounds double* %6, i64 3
  %1510 = load double* %1509, align 8
  %1511 = fadd double %1510, %virial_xx.0
  store double %1511, double* %1509, align 8
  %1512 = getelementptr inbounds double* %6, i64 4
  %1513 = load double* %1512, align 8
  %1514 = fadd double %1513, %virial_xy.0
  store double %1514, double* %1512, align 8
  %1515 = getelementptr inbounds double* %6, i64 5
  %1516 = load double* %1515, align 8
  %1517 = fadd double %1516, %virial_xz.0
  store double %1517, double* %1515, align 8
  %1518 = getelementptr inbounds double* %6, i64 6
  %1519 = load double* %1518, align 8
  %1520 = fadd double %1519, %virial_xy.0
  store double %1520, double* %1518, align 8
  %1521 = getelementptr inbounds double* %6, i64 7
  %1522 = load double* %1521, align 8
  %1523 = fadd double %1522, %virial_yy.0
  store double %1523, double* %1521, align 8
  %1524 = getelementptr inbounds double* %6, i64 8
  %1525 = load double* %1524, align 8
  %1526 = fadd double %1525, %virial_yz.0
  store double %1526, double* %1524, align 8
  %1527 = getelementptr inbounds double* %6, i64 9
  %1528 = load double* %1527, align 8
  %1529 = fadd double %1528, %virial_xz.0
  store double %1529, double* %1527, align 8
  %1530 = getelementptr inbounds double* %6, i64 10
  %1531 = load double* %1530, align 8
  %1532 = fadd double %1531, %virial_yz.0
  store double %1532, double* %1530, align 8
  %1533 = getelementptr inbounds double* %6, i64 11
  %1534 = load double* %1533, align 8
  %1535 = fadd double %1534, %virial_zz.0
  store double %1535, double* %1533, align 8
  %1536 = getelementptr inbounds double* %6, i64 1
  %1537 = load double* %1536, align 8
  %1538 = fadd double %1537, %fullElectEnergy.0
  store double %1538, double* %1536, align 8
  %1539 = getelementptr inbounds double* %6, i64 24
  %1540 = load double* %1539, align 8
  %1541 = fadd double %1540, %fullElectEnergy_s.0
  store double %1541, double* %1539, align 8
  %1542 = getelementptr inbounds double* %6, i64 12
  %1543 = load double* %1542, align 8
  %1544 = fadd double %1543, %fullElectVirial_xx.0
  store double %1544, double* %1542, align 8
  %1545 = getelementptr inbounds double* %6, i64 13
  %1546 = load double* %1545, align 8
  %1547 = fadd double %1546, %fullElectVirial_xy.0
  store double %1547, double* %1545, align 8
  %1548 = getelementptr inbounds double* %6, i64 14
  %1549 = load double* %1548, align 8
  %1550 = fadd double %1549, %fullElectVirial_xz.0
  store double %1550, double* %1548, align 8
  %1551 = getelementptr inbounds double* %6, i64 15
  %1552 = load double* %1551, align 8
  %1553 = fadd double %1552, %fullElectVirial_xy.0
  store double %1553, double* %1551, align 8
  %1554 = getelementptr inbounds double* %6, i64 16
  %1555 = load double* %1554, align 8
  %1556 = fadd double %1555, %fullElectVirial_yy.0
  store double %1556, double* %1554, align 8
  %1557 = getelementptr inbounds double* %6, i64 17
  %1558 = load double* %1557, align 8
  %1559 = fadd double %1558, %fullElectVirial_yz.0
  store double %1559, double* %1557, align 8
  %1560 = getelementptr inbounds double* %6, i64 18
  %1561 = load double* %1560, align 8
  %1562 = fadd double %1561, %fullElectVirial_xz.0
  store double %1562, double* %1560, align 8
  %1563 = getelementptr inbounds double* %6, i64 19
  %1564 = load double* %1563, align 8
  %1565 = fadd double %1564, %fullElectVirial_yz.0
  store double %1565, double* %1563, align 8
  %1566 = getelementptr inbounds double* %6, i64 20
  %1567 = load double* %1566, align 8
  %1568 = fadd double %1567, %fullElectVirial_zz.0
  store double %1568, double* %1566, align 8
  br label %1569

; <label>:1569                                    ; preds = %1492, %183, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil30calc_self_energy_fullelect_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.56, align 4
  %r2f31 = alloca %union.anon.57, align 4
  %r2f80 = alloca %union.anon.58, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1628

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %166

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  %139 = icmp ne i32 %all_fixed.0, 0
  br i1 %139, label %140, label %165

; <label>:140                                     ; preds = %138
  %141 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %142 = icmp ne i32* %51, %141
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %140
  %144 = icmp eq i32* %51, null
  br i1 %144, label %147, label %145

; <label>:145                                     ; preds = %143
  %146 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %146) #8
  br label %147

; <label>:147                                     ; preds = %145, %143
  br label %148

; <label>:148                                     ; preds = %147, %140
  %149 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %150 = icmp ne i32* %65, %149
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %148
  %152 = icmp eq i32* %65, null
  br i1 %152, label %155, label %153

; <label>:153                                     ; preds = %151
  %154 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %154) #8
  br label %155

; <label>:155                                     ; preds = %153, %151
  br label %156

; <label>:156                                     ; preds = %155, %148
  %157 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %158 = icmp ne i32* %79, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %79, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  br label %1628

; <label>:165                                     ; preds = %138
  br label %166

; <label>:166                                     ; preds = %165, %114
  %fixg.2 = phi i32 [ %fixg.0, %165 ], [ 0, %114 ]
  %167 = icmp ne i32 %fixg.2, 0
  br i1 %167, label %168, label %175

; <label>:168                                     ; preds = %166
  %169 = sub nsw i32 %fixg.2, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32* %65, i64 %170
  %172 = load i32* %171, align 4
  %173 = sext i32 %fixg.2 to i64
  %174 = getelementptr inbounds i32* %65, i64 %173
  store i32 %172, i32* %174, align 4
  br label %175

; <label>:175                                     ; preds = %168, %166
  %176 = icmp slt i32 %31, 1000
  br i1 %176, label %177, label %179

; <label>:177                                     ; preds = %175
  %178 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %188

; <label>:179                                     ; preds = %175
  %180 = add nsw i32 %31, 5
  %181 = sext i32 %180 to i64
  %182 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %181, i64 4)
  %183 = extractvalue { i64, i1 } %182, 1
  %184 = extractvalue { i64, i1 } %182, 0
  %185 = select i1 %183, i64 -1, i64 %184
  %186 = call noalias i8* @_Znam(i64 %185) #9
  %187 = bitcast i8* %186 to i32*
  br label %188

; <label>:188                                     ; preds = %179, %177
  %189 = phi i32* [ %178, %177 ], [ %187, %179 ]
  %190 = icmp slt i32 %31, 1000
  br i1 %190, label %191, label %193

; <label>:191                                     ; preds = %188
  %192 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %202

; <label>:193                                     ; preds = %188
  %194 = add nsw i32 %31, 5
  %195 = sext i32 %194 to i64
  %196 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %195, i64 4)
  %197 = extractvalue { i64, i1 } %196, 1
  %198 = extractvalue { i64, i1 } %196, 0
  %199 = select i1 %197, i64 -1, i64 %198
  %200 = call noalias i8* @_Znam(i64 %199) #9
  %201 = bitcast i8* %200 to i32*
  br label %202

; <label>:202                                     ; preds = %193, %191
  %203 = phi i32* [ %192, %191 ], [ %201, %193 ]
  %204 = icmp slt i32 %31, 1000
  br i1 %204, label %205, label %207

; <label>:205                                     ; preds = %202
  %206 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %216

; <label>:207                                     ; preds = %202
  %208 = add nsw i32 %31, 5
  %209 = sext i32 %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %209, i64 4)
  %211 = extractvalue { i64, i1 } %210, 1
  %212 = extractvalue { i64, i1 } %210, 0
  %213 = select i1 %211, i64 -1, i64 %212
  %214 = call noalias i8* @_Znam(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  br label %216

; <label>:216                                     ; preds = %207, %205
  %217 = phi i32* [ %206, %205 ], [ %215, %207 ]
  %218 = icmp slt i32 %31, 1000
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %216
  %220 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %230

; <label>:221                                     ; preds = %216
  %222 = add nsw i32 %31, 5
  %223 = sext i32 %222 to i64
  %224 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %223, i64 4)
  %225 = extractvalue { i64, i1 } %224, 1
  %226 = extractvalue { i64, i1 } %224, 0
  %227 = select i1 %225, i64 -1, i64 %226
  %228 = call noalias i8* @_Znam(i64 %227) #9
  %229 = bitcast i8* %228 to i32*
  br label %230

; <label>:230                                     ; preds = %221, %219
  %231 = phi i32* [ %220, %219 ], [ %229, %221 ]
  %232 = icmp slt i32 %31, 1000
  br i1 %232, label %233, label %235

; <label>:233                                     ; preds = %230
  %234 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %244

; <label>:235                                     ; preds = %230
  %236 = add nsw i32 %31, 5
  %237 = sext i32 %236 to i64
  %238 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %237, i64 4)
  %239 = extractvalue { i64, i1 } %238, 1
  %240 = extractvalue { i64, i1 } %238, 0
  %241 = select i1 %239, i64 -1, i64 %240
  %242 = call noalias i8* @_Znam(i64 %241) #9
  %243 = bitcast i8* %242 to i32*
  br label %244

; <label>:244                                     ; preds = %235, %233
  %245 = phi i32* [ %234, %233 ], [ %243, %235 ]
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 0
  %248 = load %class.Vector** %247, align 8
  %249 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %250 = getelementptr inbounds [2 x %class.Vector*]* %249, i32 0, i64 1
  %251 = load %class.Vector** %250, align 8
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %253 = getelementptr inbounds [2 x %class.Vector*]* %252, i32 0, i64 0
  %254 = load %class.Vector** %253, align 8
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %256 = getelementptr inbounds [2 x %class.Vector*]* %255, i32 0, i64 1
  %257 = load %class.Vector** %256, align 8
  %258 = sub nsw i32 %28, 1
  %259 = mul nsw i32 %258, %31
  %260 = sdiv i32 %259, 2
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %262 = load i32* %261, align 4
  %263 = mul nsw i32 %260, %262
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %265 = load i32* %264, align 4
  %266 = sdiv i32 %263, %265
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %268 = load i32* %267, align 4
  %269 = mul nsw i32 %260, %268
  %270 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %271 = load i32* %270, align 4
  %272 = sdiv i32 %269, %271
  br label %273

; <label>:273                                     ; preds = %1485, %244
  %g_lower.0 = phi i32 [ 0, %244 ], [ %g_lower.4, %1485 ]
  %j_hgroup.0 = phi i32 [ 0, %244 ], [ %j_hgroup.3, %1485 ]
  %fixg_lower.0 = phi i32 [ 0, %244 ], [ %fixg_lower.4, %1485 ]
  %pairlistindex.0 = phi i32 [ 0, %244 ], [ %pairlistindex.3, %1485 ]
  %pairlistoffset.0 = phi i32 [ 0, %244 ], [ %pairlistoffset.2, %1485 ]
  %pairCount.0 = phi i32 [ 0, %244 ], [ %pairCount.3, %1485 ]
  %i.0 = phi i32 [ 0, %244 ], [ %1486, %1485 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_zz.4, %1485 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yz.4, %1485 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yy.4, %1485 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xz.4, %1485 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xy.4, %1485 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xx.4, %1485 ]
  %fullElectEnergy_s.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectEnergy_s.4, %1485 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectEnergy.4, %1485 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_zz.3, %1485 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yz.3, %1485 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yy.3, %1485 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xz.3, %1485 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xy.3, %1485 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xx.3, %1485 ]
  %electEnergy_s.0 = phi double [ 0.000000e+00, %244 ], [ %electEnergy_s.3, %1485 ]
  %vdwEnergy_s.0 = phi double [ 0.000000e+00, %244 ], [ %vdwEnergy_s.3, %1485 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %electEnergy.3, %1485 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %vdwEnergy.3, %1485 ]
  %exclChecksum.0 = phi i32 [ 0, %244 ], [ %exclChecksum.11, %1485 ]
  %274 = sub nsw i32 %28, 1
  %275 = icmp slt i32 %i.0, %274
  br i1 %275, label %276, label %1487

; <label>:276                                     ; preds = %273
  %277 = sext i32 %i.0 to i64
  %278 = getelementptr inbounds %struct.CompAtom* %34, i64 %277
  %279 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %280 = load i32* %279, align 4
  %281 = and i32 %280, 4194303
  %282 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %281)
  %283 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 0
  %284 = load i32* %283, align 4
  %285 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 1
  %286 = load i32* %285, align 4
  %287 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 2
  %288 = load i8** %287, align 8
  %289 = sext i32 %284 to i64
  %290 = sub i64 0, %289
  %291 = getelementptr inbounds i8* %288, i64 %290
  %292 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %293 = getelementptr inbounds %class.Vector* %292, i32 0, i32 0
  %294 = load double* %293, align 8
  %295 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %296 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %297 = load double* %296, align 8
  %298 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %299 = getelementptr inbounds %class.Vector* %298, i32 0, i32 2
  %300 = load double* %299, align 8
  %301 = sext i32 %i.0 to i64
  %302 = getelementptr inbounds %class.Vector* %248, i64 %301
  %303 = sext i32 %i.0 to i64
  %304 = getelementptr inbounds %class.Vector* %254, i64 %303
  %305 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %306 = load i32* %305, align 4
  %307 = lshr i32 %306, 22
  %308 = and i32 %307, 7
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %316, label %310

; <label>:310                                     ; preds = %276
  %311 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %312 = load i32* %311, align 4
  %313 = lshr i32 %312, 25
  %314 = and i32 %313, 1
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %527

; <label>:316                                     ; preds = %310, %276
  %317 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %318 = load i32* %317, align 4
  %319 = lshr i32 %318, 22
  %320 = and i32 %319, 7
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %342

; <label>:322                                     ; preds = %316
  %323 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %324 = load i32* %323, align 4
  %325 = lshr i32 %324, 22
  %326 = and i32 %325, 7
  %327 = sub nsw i32 %28, 1
  %328 = sub nsw i32 %327, %i.0
  %329 = mul nsw i32 %326, %328
  %330 = add nsw i32 %pairCount.0, %329
  %331 = sub nsw i32 %326, 1
  %332 = mul nsw i32 %326, %331
  %333 = sdiv i32 %332, 2
  %334 = sub nsw i32 %330, %333
  %335 = icmp slt i32 %pairCount.0, %266
  br i1 %335, label %338, label %336

; <label>:336                                     ; preds = %322
  %337 = icmp sge i32 %pairCount.0, %272
  br i1 %337, label %338, label %341

; <label>:338                                     ; preds = %336, %322
  %339 = sub nsw i32 %326, 1
  %340 = add nsw i32 %i.0, %339
  br label %1485

; <label>:341                                     ; preds = %336
  br label %342

; <label>:342                                     ; preds = %341, %316
  %pairCount.1 = phi i32 [ %334, %341 ], [ %pairCount.0, %316 ]
  %343 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %351

; <label>:345                                     ; preds = %342
  %346 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %347 = load i32* %346, align 4
  %348 = lshr i32 %347, 27
  %349 = and i32 %348, 1
  %350 = icmp ne i32 %349, 0
  br label %351

; <label>:351                                     ; preds = %345, %342
  %352 = phi i1 [ false, %342 ], [ %350, %345 ]
  %353 = zext i1 %352 to i32
  %354 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %355 = load i32* %354, align 4
  %356 = lshr i32 %355, 22
  %357 = and i32 %356, 7
  %358 = icmp ne i32 %357, 0
  br i1 %358, label %359, label %389

; <label>:359                                     ; preds = %351
  %360 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %361 = load i32* %360, align 4
  %362 = lshr i32 %361, 22
  %363 = and i32 %362, 7
  %364 = add nsw i32 %i.0, %363
  br label %365

; <label>:365                                     ; preds = %374, %359
  %g_lower.1 = phi i32 [ %g_lower.0, %359 ], [ %375, %374 ]
  %366 = icmp slt i32 %g_lower.1, %g.0
  br i1 %366, label %367, label %372

; <label>:367                                     ; preds = %365
  %368 = sext i32 %g_lower.1 to i64
  %369 = getelementptr inbounds i32* %51, i64 %368
  %370 = load i32* %369, align 4
  %371 = icmp slt i32 %370, %364
  br label %372

; <label>:372                                     ; preds = %367, %365
  %373 = phi i1 [ false, %365 ], [ %371, %367 ]
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %372
  %375 = add nsw i32 %g_lower.1, 1
  br label %365

; <label>:376                                     ; preds = %372
  br label %377

; <label>:377                                     ; preds = %386, %376
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %376 ], [ %387, %386 ]
  %378 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %378, label %379, label %384

; <label>:379                                     ; preds = %377
  %380 = sext i32 %fixg_lower.1 to i64
  %381 = getelementptr inbounds i32* %65, i64 %380
  %382 = load i32* %381, align 4
  %383 = icmp slt i32 %382, %364
  br label %384

; <label>:384                                     ; preds = %379, %377
  %385 = phi i1 [ false, %377 ], [ %383, %379 ]
  br i1 %385, label %386, label %388

; <label>:386                                     ; preds = %384
  %387 = add nsw i32 %fixg_lower.1, 1
  br label %377

; <label>:388                                     ; preds = %384
  br label %389

; <label>:389                                     ; preds = %388, %351
  %g_lower.2 = phi i32 [ %g_lower.1, %388 ], [ %g_lower.0, %351 ]
  %j_hgroup.1 = phi i32 [ %364, %388 ], [ %j_hgroup.0, %351 ]
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %388 ], [ %fixg_lower.0, %351 ]
  %390 = add nsw i32 %i.0, 1
  br label %391

; <label>:391                                     ; preds = %397, %389
  %pairlistindex.1 = phi i32 [ 0, %389 ], [ %394, %397 ]
  %j.1 = phi i32 [ %390, %389 ], [ %398, %397 ]
  %392 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %392, label %393, label %399

; <label>:393                                     ; preds = %391
  %394 = add nsw i32 %pairlistindex.1, 1
  %395 = sext i32 %pairlistindex.1 to i64
  %396 = getelementptr inbounds i32* %189, i64 %395
  store i32 %j.1, i32* %396, align 4
  br label %397

; <label>:397                                     ; preds = %393
  %398 = add nsw i32 %j.1, 1
  br label %391

; <label>:399                                     ; preds = %391
  %400 = sext i32 %pairlistindex.1 to i64
  %401 = getelementptr inbounds i32* %189, i64 %400
  %402 = icmp ne i32 %353, 0
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %399
  br label %405

; <label>:404                                     ; preds = %399
  br label %405

; <label>:405                                     ; preds = %404, %403
  %406 = phi i32* [ %65, %403 ], [ %51, %404 ]
  %407 = icmp ne i32 %353, 0
  br i1 %407, label %408, label %409

; <label>:408                                     ; preds = %405
  br label %410

; <label>:409                                     ; preds = %405
  br label %410

; <label>:410                                     ; preds = %409, %408
  %411 = phi i32 [ %fixg_lower.2, %408 ], [ %g_lower.2, %409 ]
  %412 = icmp ne i32 %353, 0
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %410
  br label %415

; <label>:414                                     ; preds = %410
  br label %415

; <label>:415                                     ; preds = %414, %413
  %416 = phi i32 [ %fixg.2, %413 ], [ %g.0, %414 ]
  %417 = icmp slt i32 %411, %416
  br i1 %417, label %418, label %512

; <label>:418                                     ; preds = %415
  %419 = sext i32 %411 to i64
  %420 = getelementptr inbounds i32* %406, i64 %419
  %421 = load i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds %struct.CompAtom* %37, i64 %422
  %424 = getelementptr inbounds %struct.CompAtom* %423, i32 0, i32 0
  %425 = getelementptr inbounds %class.Vector* %424, i32 0, i32 0
  %426 = load double* %425, align 8
  %427 = sext i32 %421 to i64
  %428 = getelementptr inbounds %struct.CompAtom* %37, i64 %427
  %429 = getelementptr inbounds %struct.CompAtom* %428, i32 0, i32 0
  %430 = getelementptr inbounds %class.Vector* %429, i32 0, i32 1
  %431 = load double* %430, align 8
  %432 = sext i32 %421 to i64
  %433 = getelementptr inbounds %struct.CompAtom* %37, i64 %432
  %434 = getelementptr inbounds %struct.CompAtom* %433, i32 0, i32 0
  %435 = getelementptr inbounds %class.Vector* %434, i32 0, i32 2
  %436 = load double* %435, align 8
  br label %437

; <label>:437                                     ; preds = %470, %418
  %g.3 = phi i32 [ %411, %418 ], [ %440, %470 ]
  %gli.0 = phi i32* [ %79, %418 ], [ %gli.1, %470 ]
  %j2.0 = phi i32 [ %421, %418 ], [ %443, %470 ]
  %p_j_x.0 = phi double [ %426, %418 ], [ %450, %470 ]
  %p_j_y.0 = phi double [ %431, %418 ], [ %458, %470 ]
  %p_j_z.0 = phi double [ %436, %418 ], [ %466, %470 ]
  %438 = icmp slt i32 %g.3, %416
  br i1 %438, label %439, label %471

; <label>:439                                     ; preds = %437
  %440 = add nsw i32 %g.3, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i32* %406, i64 %441
  %443 = load i32* %442, align 4
  %444 = fsub double %294, %p_j_x.0
  %445 = fmul double %444, %444
  %446 = sext i32 %443 to i64
  %447 = getelementptr inbounds %struct.CompAtom* %37, i64 %446
  %448 = getelementptr inbounds %struct.CompAtom* %447, i32 0, i32 0
  %449 = getelementptr inbounds %class.Vector* %448, i32 0, i32 0
  %450 = load double* %449, align 8
  %451 = fsub double %297, %p_j_y.0
  %452 = fmul double %451, %451
  %453 = fadd double %445, %452
  %454 = sext i32 %443 to i64
  %455 = getelementptr inbounds %struct.CompAtom* %37, i64 %454
  %456 = getelementptr inbounds %struct.CompAtom* %455, i32 0, i32 0
  %457 = getelementptr inbounds %class.Vector* %456, i32 0, i32 1
  %458 = load double* %457, align 8
  %459 = fsub double %300, %p_j_z.0
  %460 = fmul double %459, %459
  %461 = fadd double %453, %460
  %462 = sext i32 %443 to i64
  %463 = getelementptr inbounds %struct.CompAtom* %37, i64 %462
  %464 = getelementptr inbounds %struct.CompAtom* %463, i32 0, i32 0
  %465 = getelementptr inbounds %class.Vector* %464, i32 0, i32 2
  %466 = load double* %465, align 8
  %467 = fcmp ole double %461, %8
  br i1 %467, label %468, label %470

; <label>:468                                     ; preds = %439
  store i32 %j2.0, i32* %gli.0, align 4
  %469 = getelementptr inbounds i32* %gli.0, i32 1
  br label %470

; <label>:470                                     ; preds = %468, %439
  %gli.1 = phi i32* [ %469, %468 ], [ %gli.0, %439 ]
  br label %437

; <label>:471                                     ; preds = %437
  %472 = ptrtoint i32* %gli.0 to i64
  %473 = ptrtoint i32* %79 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  br label %477

; <label>:477                                     ; preds = %509, %471
  %pli.0 = phi i32* [ %401, %471 ], [ %508, %509 ]
  %h.0 = phi i32 [ 0, %471 ], [ %510, %509 ]
  %478 = icmp slt i32 %h.0, %476
  br i1 %478, label %479, label %511

; <label>:479                                     ; preds = %477
  %480 = sext i32 %h.0 to i64
  %481 = getelementptr inbounds i32* %79, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %37, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 25
  %488 = and i32 %487, 1
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %491

; <label>:490                                     ; preds = %479
  br label %498

; <label>:491                                     ; preds = %479
  %492 = sext i32 %482 to i64
  %493 = getelementptr inbounds %struct.CompAtom* %37, i64 %492
  %494 = getelementptr inbounds %struct.CompAtom* %493, i32 0, i32 2
  %495 = load i32* %494, align 4
  %496 = lshr i32 %495, 22
  %497 = and i32 %496, 7
  br label %498

; <label>:498                                     ; preds = %491, %490
  %499 = phi i32 [ 1, %490 ], [ %497, %491 ]
  %500 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %482, i32* %500, align 4
  %501 = add nsw i32 %482, 1
  %502 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %501, i32* %502, align 4
  %503 = add nsw i32 %482, 2
  %504 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %503, i32* %504, align 4
  %505 = add nsw i32 %482, 3
  %506 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %505, i32* %506, align 4
  %507 = sext i32 %499 to i64
  %508 = getelementptr inbounds i32* %pli.0, i64 %507
  br label %509

; <label>:509                                     ; preds = %498
  %510 = add nsw i32 %h.0, 1
  br label %477

; <label>:511                                     ; preds = %477
  br label %512

; <label>:512                                     ; preds = %511, %415
  %pli.1 = phi i32* [ %pli.0, %511 ], [ %401, %415 ]
  %513 = ptrtoint i32* %pli.1 to i64
  %514 = ptrtoint i32* %189 to i64
  %515 = sub i64 %513, %514
  %516 = sdiv exact i64 %515, 4
  %517 = trunc i64 %516 to i32
  %518 = icmp ne i32 %517, 0
  br i1 %518, label %519, label %526

; <label>:519                                     ; preds = %512
  %520 = sub nsw i32 %517, 1
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i32* %189, i64 %521
  %523 = load i32* %522, align 4
  %524 = sext i32 %517 to i64
  %525 = getelementptr inbounds i32* %189, i64 %524
  store i32 %523, i32* %525, align 4
  br label %526

; <label>:526                                     ; preds = %519, %512
  br label %529

; <label>:527                                     ; preds = %310
  %528 = add nsw i32 %pairlistoffset.0, 1
  br label %529

; <label>:529                                     ; preds = %527, %526
  %g_lower.3 = phi i32 [ %g_lower.2, %526 ], [ %g_lower.0, %527 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %526 ], [ %j_hgroup.0, %527 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %526 ], [ %fixg_lower.0, %527 ]
  %pairlistindex.2 = phi i32 [ %517, %526 ], [ %pairlistindex.0, %527 ]
  %pairlistoffset.1 = phi i32 [ 0, %526 ], [ %528, %527 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %526 ], [ %pairCount.0, %527 ]
  %530 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %538

; <label>:532                                     ; preds = %529
  %533 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 26
  %536 = and i32 %535, 1
  %537 = icmp ne i32 %536, 0
  br label %538

; <label>:538                                     ; preds = %532, %529
  %539 = phi i1 [ false, %529 ], [ %537, %532 ]
  %540 = zext i1 %539 to i32
  %541 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %542 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %543 = load i32* %542, align 4
  %544 = lshr i32 %543, 28
  %545 = mul nsw i32 6, %544
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds double* %541, i64 %546
  %548 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 1
  %549 = load float* %548, align 4
  %550 = fpext float %549 to double
  %551 = fmul double 3.320636e+02, %550
  %552 = fmul double %551, %16
  %553 = fmul double %552, %9
  %554 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %555 = load i32* %554, align 4
  %556 = and i32 %555, 4194303
  %557 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %556)
  %558 = zext i16 %557 to i32
  %559 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %558)
  %560 = icmp ne i32 %540, 0
  br i1 %560, label %561, label %623

; <label>:561                                     ; preds = %538
  br label %562

; <label>:562                                     ; preds = %620, %561
  %pli3.0 = phi i32* [ %203, %561 ], [ %pli3.2, %620 ]
  %plin.0 = phi i32* [ %217, %561 ], [ %plin.2, %620 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %561 ], [ %621, %620 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %561 ], [ %exclChecksum.3, %620 ]
  %563 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %563, label %564, label %622

; <label>:564                                     ; preds = %562
  %565 = sext i32 %k.0 to i64
  %566 = getelementptr inbounds i32* %189, i64 %565
  %567 = load i32* %566, align 4
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %37, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 0
  %572 = load double* %571, align 8
  %573 = fsub double %294, %572
  %574 = fmul double %573, %573
  %575 = sext i32 %567 to i64
  %576 = getelementptr inbounds %struct.CompAtom* %37, i64 %575
  %577 = getelementptr inbounds %struct.CompAtom* %576, i32 0, i32 0
  %578 = getelementptr inbounds %class.Vector* %577, i32 0, i32 1
  %579 = load double* %578, align 8
  %580 = fsub double %297, %579
  %581 = fmul double %580, %580
  %582 = fadd double %574, %581
  %583 = sext i32 %567 to i64
  %584 = getelementptr inbounds %struct.CompAtom* %37, i64 %583
  %585 = getelementptr inbounds %struct.CompAtom* %584, i32 0, i32 0
  %586 = getelementptr inbounds %class.Vector* %585, i32 0, i32 2
  %587 = load double* %586, align 8
  %588 = fsub double %300, %587
  %589 = fmul double %588, %588
  %590 = fadd double %582, %589
  %591 = sext i32 %567 to i64
  %592 = getelementptr inbounds %struct.CompAtom* %37, i64 %591
  %593 = getelementptr inbounds %struct.CompAtom* %592, i32 0, i32 2
  %594 = load i32* %593, align 4
  %595 = lshr i32 %594, 26
  %596 = and i32 %595, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %619, label %598

; <label>:598                                     ; preds = %564
  %599 = fcmp ole double %590, %7
  br i1 %599, label %600, label %619

; <label>:600                                     ; preds = %598
  %601 = fcmp ole double %590, %22
  br i1 %601, label %602, label %605

; <label>:602                                     ; preds = %600
  %603 = add nsw i32 %exclChecksum.1, 1
  %604 = icmp ne i32 %603, 0
  br i1 %604, label %619, label %605

; <label>:605                                     ; preds = %602, %600
  %exclChecksum.2 = phi i32 [ %603, %602 ], [ %exclChecksum.1, %600 ]
  %606 = sext i32 %567 to i64
  %607 = getelementptr inbounds %struct.CompAtom* %37, i64 %606
  %608 = getelementptr inbounds %struct.CompAtom* %607, i32 0, i32 2
  %609 = load i32* %608, align 4
  %610 = and i32 %609, 4194303
  %611 = icmp sge i32 %610, %284
  br i1 %611, label %612, label %616

; <label>:612                                     ; preds = %605
  %613 = icmp sle i32 %610, %286
  br i1 %613, label %614, label %616

; <label>:614                                     ; preds = %612
  %615 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %567, i32* %pli3.0, align 4
  br label %618

; <label>:616                                     ; preds = %612, %605
  %617 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %567, i32* %plin.0, align 4
  br label %618

; <label>:618                                     ; preds = %616, %614
  %pli3.1 = phi i32* [ %615, %614 ], [ %pli3.0, %616 ]
  %plin.1 = phi i32* [ %plin.0, %614 ], [ %617, %616 ]
  br label %619

; <label>:619                                     ; preds = %618, %602, %598, %564
  %pli3.2 = phi i32* [ %pli3.0, %564 ], [ %pli3.0, %602 ], [ %pli3.1, %618 ], [ %pli3.0, %598 ]
  %plin.2 = phi i32* [ %plin.0, %564 ], [ %plin.0, %602 ], [ %plin.1, %618 ], [ %plin.0, %598 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %564 ], [ %603, %602 ], [ %exclChecksum.2, %618 ], [ %exclChecksum.1, %598 ]
  br label %620

; <label>:620                                     ; preds = %619
  %621 = add nsw i32 %k.0, 1
  br label %562

; <label>:622                                     ; preds = %562
  br label %702

; <label>:623                                     ; preds = %538
  %624 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %624, label %625, label %701

; <label>:625                                     ; preds = %623
  %626 = sext i32 %pairlistoffset.1 to i64
  %627 = getelementptr inbounds i32* %189, i64 %626
  %628 = load i32* %627, align 4
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds %struct.CompAtom* %37, i64 %629
  %631 = getelementptr inbounds %struct.CompAtom* %630, i32 0, i32 0
  %632 = getelementptr inbounds %class.Vector* %631, i32 0, i32 0
  %633 = load double* %632, align 8
  %634 = sext i32 %628 to i64
  %635 = getelementptr inbounds %struct.CompAtom* %37, i64 %634
  %636 = getelementptr inbounds %struct.CompAtom* %635, i32 0, i32 0
  %637 = getelementptr inbounds %class.Vector* %636, i32 0, i32 1
  %638 = load double* %637, align 8
  %639 = sext i32 %628 to i64
  %640 = getelementptr inbounds %struct.CompAtom* %37, i64 %639
  %641 = getelementptr inbounds %struct.CompAtom* %640, i32 0, i32 0
  %642 = getelementptr inbounds %class.Vector* %641, i32 0, i32 2
  %643 = load double* %642, align 8
  %644 = sext i32 %628 to i64
  %645 = getelementptr inbounds %struct.CompAtom* %37, i64 %644
  %646 = getelementptr inbounds %struct.CompAtom* %645, i32 0, i32 2
  %647 = load i32* %646, align 4
  %648 = and i32 %647, 4194303
  br label %649

; <label>:649                                     ; preds = %694, %625
  %pli3.3 = phi i32* [ %203, %625 ], [ %pli3.5, %694 ]
  %plin.3 = phi i32* [ %217, %625 ], [ %plin.5, %694 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %625 ], [ %652, %694 ]
  %j210.0 = phi i32 [ %628, %625 ], [ %655, %694 ]
  %p_j_x11.0 = phi double [ %633, %625 ], [ %662, %694 ]
  %p_j_y12.0 = phi double [ %638, %625 ], [ %670, %694 ]
  %p_j_z13.0 = phi double [ %643, %625 ], [ %678, %694 ]
  %atom214.0 = phi i32 [ %648, %625 ], [ %699, %694 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %625 ], [ %exclChecksum.6, %694 ]
  %650 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %650, label %651, label %700

; <label>:651                                     ; preds = %649
  %652 = add nsw i32 %k9.0, 1
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i32* %189, i64 %653
  %655 = load i32* %654, align 4
  %656 = fsub double %294, %p_j_x11.0
  %657 = fmul double %656, %656
  %658 = sext i32 %655 to i64
  %659 = getelementptr inbounds %struct.CompAtom* %37, i64 %658
  %660 = getelementptr inbounds %struct.CompAtom* %659, i32 0, i32 0
  %661 = getelementptr inbounds %class.Vector* %660, i32 0, i32 0
  %662 = load double* %661, align 8
  %663 = fsub double %297, %p_j_y12.0
  %664 = fmul double %663, %663
  %665 = fadd double %657, %664
  %666 = sext i32 %655 to i64
  %667 = getelementptr inbounds %struct.CompAtom* %37, i64 %666
  %668 = getelementptr inbounds %struct.CompAtom* %667, i32 0, i32 0
  %669 = getelementptr inbounds %class.Vector* %668, i32 0, i32 1
  %670 = load double* %669, align 8
  %671 = fsub double %300, %p_j_z13.0
  %672 = fmul double %671, %671
  %673 = fadd double %665, %672
  %674 = sext i32 %655 to i64
  %675 = getelementptr inbounds %struct.CompAtom* %37, i64 %674
  %676 = getelementptr inbounds %struct.CompAtom* %675, i32 0, i32 0
  %677 = getelementptr inbounds %class.Vector* %676, i32 0, i32 2
  %678 = load double* %677, align 8
  %679 = fcmp ole double %673, %7
  br i1 %679, label %680, label %694

; <label>:680                                     ; preds = %651
  %681 = fcmp ole double %673, %22
  br i1 %681, label %682, label %685

; <label>:682                                     ; preds = %680
  %683 = add nsw i32 %exclChecksum.4, 1
  %684 = icmp ne i32 %683, 0
  br i1 %684, label %694, label %685

; <label>:685                                     ; preds = %682, %680
  %exclChecksum.5 = phi i32 [ %683, %682 ], [ %exclChecksum.4, %680 ]
  %686 = icmp sge i32 %atom214.0, %284
  br i1 %686, label %687, label %691

; <label>:687                                     ; preds = %685
  %688 = icmp sle i32 %atom214.0, %286
  br i1 %688, label %689, label %691

; <label>:689                                     ; preds = %687
  %690 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %693

; <label>:691                                     ; preds = %687, %685
  %692 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %693

; <label>:693                                     ; preds = %691, %689
  %pli3.4 = phi i32* [ %690, %689 ], [ %pli3.3, %691 ]
  %plin.4 = phi i32* [ %plin.3, %689 ], [ %692, %691 ]
  br label %694

; <label>:694                                     ; preds = %693, %682, %651
  %pli3.5 = phi i32* [ %pli3.3, %682 ], [ %pli3.4, %693 ], [ %pli3.3, %651 ]
  %plin.5 = phi i32* [ %plin.3, %682 ], [ %plin.4, %693 ], [ %plin.3, %651 ]
  %exclChecksum.6 = phi i32 [ %683, %682 ], [ %exclChecksum.5, %693 ], [ %exclChecksum.4, %651 ]
  %695 = sext i32 %655 to i64
  %696 = getelementptr inbounds %struct.CompAtom* %37, i64 %695
  %697 = getelementptr inbounds %struct.CompAtom* %696, i32 0, i32 2
  %698 = load i32* %697, align 4
  %699 = and i32 %698, 4194303
  br label %649

; <label>:700                                     ; preds = %649
  br label %701

; <label>:701                                     ; preds = %700, %623
  %pli3.6 = phi i32* [ %pli3.3, %700 ], [ %203, %623 ]
  %plin.6 = phi i32* [ %plin.3, %700 ], [ %217, %623 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %700 ], [ %exclChecksum.0, %623 ]
  br label %702

; <label>:702                                     ; preds = %701, %622
  %pli3.7 = phi i32* [ %pli3.0, %622 ], [ %pli3.6, %701 ]
  %plin.7 = phi i32* [ %plin.0, %622 ], [ %plin.6, %701 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %622 ], [ %exclChecksum.7, %701 ]
  %703 = ptrtoint i32* %pli3.7 to i64
  %704 = ptrtoint i32* %203 to i64
  %705 = sub i64 %703, %704
  %706 = sdiv exact i64 %705, 4
  %707 = trunc i64 %706 to i32
  %708 = icmp ne i32 %707, 0
  br i1 %708, label %709, label %716

; <label>:709                                     ; preds = %702
  %710 = sub nsw i32 %707, 1
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds i32* %203, i64 %711
  %713 = load i32* %712, align 4
  %714 = sext i32 %707 to i64
  %715 = getelementptr inbounds i32* %203, i64 %714
  store i32 %713, i32* %715, align 4
  br label %716

; <label>:716                                     ; preds = %709, %702
  br label %717

; <label>:717                                     ; preds = %728, %716
  %plix.0 = phi i32* [ %231, %716 ], [ %726, %728 ]
  %pln.0 = phi i32* [ %217, %716 ], [ %729, %728 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %716 ], [ %727, %728 ]
  %718 = icmp ult i32* %pln.0, %plin.7
  br i1 %718, label %719, label %722

; <label>:719                                     ; preds = %717
  %720 = load i32* %pln.0, align 4
  %721 = icmp slt i32 %720, %j_hgroup.2
  br label %722

; <label>:722                                     ; preds = %719, %717
  %723 = phi i1 [ false, %717 ], [ %721, %719 ]
  br i1 %723, label %724, label %730

; <label>:724                                     ; preds = %722
  %725 = load i32* %pln.0, align 4
  %726 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %725, i32* %plix.0, align 4
  %727 = add nsw i32 %exclChecksum.9, -1
  br label %728

; <label>:728                                     ; preds = %724
  %729 = getelementptr inbounds i32* %pln.0, i32 1
  br label %717

; <label>:730                                     ; preds = %722
  br label %731

; <label>:731                                     ; preds = %746, %730
  %plix.1 = phi i32* [ %plix.0, %730 ], [ %744, %746 ]
  %k17.0 = phi i32 [ 0, %730 ], [ %747, %746 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %730 ], [ %745, %746 ]
  %732 = icmp slt i32 %k17.0, %707
  br i1 %732, label %733, label %738

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %203, i64 %734
  %736 = load i32* %735, align 4
  %737 = icmp slt i32 %736, %j_hgroup.2
  br label %738

; <label>:738                                     ; preds = %733, %731
  %739 = phi i1 [ false, %731 ], [ %737, %733 ]
  br i1 %739, label %740, label %748

; <label>:740                                     ; preds = %738
  %741 = sext i32 %k17.0 to i64
  %742 = getelementptr inbounds i32* %203, i64 %741
  %743 = load i32* %742, align 4
  %744 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %743, i32* %plix.1, align 4
  %745 = add nsw i32 %exclChecksum.10, -1
  br label %746

; <label>:746                                     ; preds = %740
  %747 = add nsw i32 %k17.0, 1
  br label %731

; <label>:748                                     ; preds = %738
  br label %749

; <label>:749                                     ; preds = %771, %748
  %plin.8 = phi i32* [ %plin.7, %748 ], [ %plin.9, %771 ]
  %plix.2 = phi i32* [ %plix.1, %748 ], [ %plix.3, %771 ]
  %plim.0 = phi i32* [ %245, %748 ], [ %plim.1, %771 ]
  %k17.1 = phi i32 [ %k17.0, %748 ], [ %772, %771 ]
  %750 = icmp slt i32 %k17.1, %707
  br i1 %750, label %751, label %773

; <label>:751                                     ; preds = %749
  %752 = sext i32 %k17.1 to i64
  %753 = getelementptr inbounds i32* %203, i64 %752
  %754 = load i32* %753, align 4
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds %struct.CompAtom* %37, i64 %755
  %757 = getelementptr inbounds %struct.CompAtom* %756, i32 0, i32 2
  %758 = load i32* %757, align 4
  %759 = and i32 %758, 4194303
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds i8* %291, i64 %760
  %762 = load i8* %761, align 1
  %763 = sext i8 %762 to i32
  switch i32 %763, label %770 [
    i32 0, label %764
    i32 1, label %766
    i32 2, label %768
  ]

; <label>:764                                     ; preds = %751
  %765 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %754, i32* %plin.8, align 4
  br label %770

; <label>:766                                     ; preds = %751
  %767 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %754, i32* %plix.2, align 4
  br label %770

; <label>:768                                     ; preds = %751
  %769 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %754, i32* %plim.0, align 4
  br label %770

; <label>:770                                     ; preds = %768, %766, %764, %751
  %plin.9 = phi i32* [ %plin.8, %751 ], [ %plin.8, %768 ], [ %plin.8, %766 ], [ %765, %764 ]
  %plix.3 = phi i32* [ %plix.2, %751 ], [ %plix.2, %768 ], [ %767, %766 ], [ %plix.2, %764 ]
  %plim.1 = phi i32* [ %plim.0, %751 ], [ %769, %768 ], [ %plim.0, %766 ], [ %plim.0, %764 ]
  br label %771

; <label>:771                                     ; preds = %770
  %772 = add nsw i32 %k17.1, 1
  br label %749

; <label>:773                                     ; preds = %749
  %774 = ptrtoint i32* %plix.2 to i64
  %775 = ptrtoint i32* %231 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %exclChecksum.10 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plim.0 to i64
  %782 = ptrtoint i32* %245 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = sext i32 %780 to i64
  %786 = add nsw i64 %785, %784
  %787 = trunc i64 %786 to i32
  %788 = ptrtoint i32* %plin.8 to i64
  %789 = ptrtoint i32* %pln.0 to i64
  %790 = sub i64 %788, %789
  %791 = sdiv exact i64 %790, 4
  %792 = trunc i64 %791 to i32
  br label %793

; <label>:793                                     ; preds = %1049, %773
  %k17.2 = phi i32 [ 0, %773 ], [ %1050, %1049 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %773 ], [ %1042, %1049 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %773 ], [ %1033, %1049 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %773 ], [ %1031, %1049 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %773 ], [ %1022, %1049 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %773 ], [ %1020, %1049 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %773 ], [ %1018, %1049 ]
  %fullElectEnergy_s.1 = phi double [ %fullElectEnergy_s.0, %773 ], [ %1005, %1049 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %773 ], [ %1003, %1049 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %773 ], [ %979, %1049 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %773 ], [ %970, %1049 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %773 ], [ %968, %1049 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %773 ], [ %959, %1049 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %773 ], [ %957, %1049 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %773 ], [ %955, %1049 ]
  %electEnergy_s.1 = phi double [ %electEnergy_s.0, %773 ], [ %938, %1049 ]
  %vdwEnergy_s.1 = phi double [ %vdwEnergy_s.0, %773 ], [ %918, %1049 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %773 ], [ %936, %1049 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %773 ], [ %916, %1049 ]
  %794 = icmp slt i32 %k17.2, %792
  br i1 %794, label %795, label %1051

; <label>:795                                     ; preds = %793
  %796 = sext i32 %k17.2 to i64
  %797 = getelementptr inbounds i32* %pln.0, i64 %796
  %798 = load i32* %797, align 4
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds %struct.CompAtom* %37, i64 %799
  %801 = getelementptr inbounds %struct.CompAtom* %800, i32 0, i32 0
  %802 = getelementptr inbounds %class.Vector* %801, i32 0, i32 0
  %803 = load double* %802, align 8
  %804 = fsub double %294, %803
  %805 = fmul double %804, %804
  %806 = getelementptr inbounds %struct.CompAtom* %800, i32 0, i32 0
  %807 = getelementptr inbounds %class.Vector* %806, i32 0, i32 1
  %808 = load double* %807, align 8
  %809 = fsub double %297, %808
  %810 = fmul double %809, %809
  %811 = fadd double %805, %810
  %812 = getelementptr inbounds %struct.CompAtom* %800, i32 0, i32 0
  %813 = getelementptr inbounds %class.Vector* %812, i32 0, i32 2
  %814 = load double* %813, align 8
  %815 = fsub double %300, %814
  %816 = fmul double %815, %815
  %817 = fadd double %811, %816
  %818 = fptrunc double %817 to float
  %819 = bitcast %union.anon.56* %r2f to float*
  store float %818, float* %819, align 4
  %820 = bitcast %union.anon.56* %r2f to i32*
  %821 = load i32* %820, align 4
  %822 = ashr i32 %821, 17
  %823 = add nsw i32 %822, %25
  %824 = getelementptr inbounds %struct.CompAtom* %800, i32 0, i32 2
  %825 = load i32* %824, align 4
  %826 = and i32 %825, 4194303
  %827 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %826)
  %828 = zext i16 %827 to i32
  %829 = mul nsw i32 2, %828
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds %"struct.LJTable::TableEntry"* %559, i64 %830
  %832 = mul nsw i32 16, %823
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds double* %14, i64 %833
  %835 = getelementptr inbounds double* %834, i64 0
  %836 = load double* %835, align 8
  %837 = mul nsw i32 16, %823
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds double* %14, i64 %838
  %840 = getelementptr inbounds double* %839, i64 4
  %841 = getelementptr inbounds double* %840, i64 0
  %842 = load double* %841, align 8
  %843 = mul nsw i32 16, %823
  %844 = sext i32 %843 to i64
  %845 = getelementptr inbounds double* %14, i64 %844
  %846 = getelementptr inbounds double* %845, i64 8
  %847 = getelementptr inbounds double* %846, i64 0
  %848 = load double* %847, align 8
  %849 = mul nsw i32 16, %823
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds double* %14, i64 %850
  %852 = getelementptr inbounds double* %851, i64 8
  %853 = getelementptr inbounds double* %852, i64 4
  %854 = getelementptr inbounds double* %853, i64 0
  %855 = load double* %854, align 8
  %856 = bitcast %union.anon.56* %r2f to i32*
  %857 = load i32* %856, align 4
  %858 = and i32 %857, -131072
  store i32 %858, i32* %856, align 4
  %859 = getelementptr inbounds %struct.CompAtom* %800, i32 0, i32 1
  %860 = load float* %859, align 4
  %861 = fpext float %860 to double
  %862 = fmul double %553, %861
  %863 = bitcast %union.anon.56* %r2f to float*
  %864 = load float* %863, align 4
  %865 = fpext float %864 to double
  %866 = fsub double %817, %865
  %867 = getelementptr inbounds %struct.CompAtom* %800, i32 0, i32 2
  %868 = load i32* %867, align 4
  %869 = lshr i32 %868, 28
  %870 = mul nsw i32 2, %869
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds double* %547, i64 %871
  %873 = load double* %872, align 8
  %874 = mul nsw i32 2, %869
  %875 = add nsw i32 %874, 1
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds double* %547, i64 %876
  %878 = load double* %877, align 8
  %879 = getelementptr inbounds %"struct.LJTable::TableEntry"* %831, i32 0, i32 0
  %880 = load double* %879, align 8
  %881 = fmul double %16, %880
  %882 = getelementptr inbounds %"struct.LJTable::TableEntry"* %831, i32 0, i32 1
  %883 = load double* %882, align 8
  %884 = fmul double %16, %883
  %885 = fmul double %881, %836
  %886 = fmul double %884, %842
  %887 = fsub double %885, %886
  %888 = getelementptr inbounds double* %834, i64 3
  %889 = load double* %888, align 8
  %890 = fmul double %881, %889
  %891 = getelementptr inbounds double* %840, i64 3
  %892 = load double* %891, align 8
  %893 = fmul double %884, %892
  %894 = fsub double %890, %893
  %895 = getelementptr inbounds double* %834, i64 2
  %896 = load double* %895, align 8
  %897 = fmul double %881, %896
  %898 = getelementptr inbounds double* %840, i64 2
  %899 = load double* %898, align 8
  %900 = fmul double %884, %899
  %901 = fsub double %897, %900
  %902 = getelementptr inbounds double* %834, i64 1
  %903 = load double* %902, align 8
  %904 = fmul double %881, %903
  %905 = getelementptr inbounds double* %840, i64 1
  %906 = load double* %905, align 8
  %907 = fmul double %884, %906
  %908 = fsub double %904, %907
  %909 = fmul double %866, %894
  %910 = fadd double %909, %901
  %911 = fmul double %910, %866
  %912 = fadd double %911, %908
  %913 = fmul double %912, %866
  %914 = fadd double %913, %887
  %915 = fmul double %873, %914
  %916 = fadd double %vdwEnergy.1, %915
  %917 = fmul double %878, %914
  %918 = fadd double %vdwEnergy_s.1, %917
  %919 = fmul double %848, %862
  %920 = getelementptr inbounds double* %846, i64 3
  %921 = load double* %920, align 8
  %922 = fmul double %862, %921
  %923 = getelementptr inbounds double* %846, i64 2
  %924 = load double* %923, align 8
  %925 = fmul double %862, %924
  %926 = getelementptr inbounds double* %846, i64 1
  %927 = load double* %926, align 8
  %928 = fmul double %862, %927
  %929 = fmul double %866, %922
  %930 = fadd double %929, %925
  %931 = fmul double %930, %866
  %932 = fadd double %931, %928
  %933 = fmul double %932, %866
  %934 = fadd double %933, %919
  %935 = fmul double %873, %934
  %936 = fadd double %electEnergy.1, %935
  %937 = fmul double %878, %934
  %938 = fadd double %electEnergy_s.1, %937
  %939 = fadd double %922, %894
  %940 = fadd double %925, %901
  %941 = fadd double %928, %908
  %942 = fadd double %919, %887
  %943 = fmul double 3.000000e+00, %866
  %944 = fmul double %943, %939
  %945 = fmul double 2.000000e+00, %940
  %946 = fadd double %944, %945
  %947 = fmul double %946, %866
  %948 = fadd double %947, %941
  %949 = fmul double -2.000000e+00, %873
  %950 = fmul double %949, %948
  %951 = sext i32 %798 to i64
  %952 = getelementptr inbounds %class.Vector* %251, i64 %951
  %953 = fmul double %950, %804
  %954 = fmul double %953, %804
  %955 = fadd double %virial_xx.1, %954
  %956 = fmul double %953, %809
  %957 = fadd double %virial_xy.1, %956
  %958 = fmul double %953, %815
  %959 = fadd double %virial_xz.1, %958
  %960 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %961 = load double* %960, align 8
  %962 = fadd double %961, %953
  store double %962, double* %960, align 8
  %963 = getelementptr inbounds %class.Vector* %952, i32 0, i32 0
  %964 = load double* %963, align 8
  %965 = fsub double %964, %953
  store double %965, double* %963, align 8
  %966 = fmul double %950, %809
  %967 = fmul double %966, %809
  %968 = fadd double %virial_yy.1, %967
  %969 = fmul double %966, %815
  %970 = fadd double %virial_yz.1, %969
  %971 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %972 = load double* %971, align 8
  %973 = fadd double %972, %966
  store double %973, double* %971, align 8
  %974 = getelementptr inbounds %class.Vector* %952, i32 0, i32 1
  %975 = load double* %974, align 8
  %976 = fsub double %975, %966
  store double %976, double* %974, align 8
  %977 = fmul double %950, %815
  %978 = fmul double %977, %815
  %979 = fadd double %virial_zz.1, %978
  %980 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %981 = load double* %980, align 8
  %982 = fadd double %981, %977
  store double %982, double* %980, align 8
  %983 = getelementptr inbounds %class.Vector* %952, i32 0, i32 2
  %984 = load double* %983, align 8
  %985 = fsub double %984, %977
  store double %985, double* %983, align 8
  %986 = getelementptr inbounds double* %853, i64 1
  %987 = load double* %986, align 8
  %988 = getelementptr inbounds double* %853, i64 2
  %989 = load double* %988, align 8
  %990 = getelementptr inbounds double* %853, i64 3
  %991 = load double* %990, align 8
  %992 = fmul double %991, %862
  %993 = fmul double %989, %862
  %994 = fmul double %987, %862
  %995 = fmul double %855, %862
  %996 = fmul double %866, %992
  %997 = fadd double %996, %993
  %998 = fmul double %997, %866
  %999 = fadd double %998, %994
  %1000 = fmul double %999, %866
  %1001 = fadd double %1000, %995
  %1002 = fmul double %873, %1001
  %1003 = fadd double %fullElectEnergy.1, %1002
  %1004 = fmul double %878, %1001
  %1005 = fadd double %fullElectEnergy_s.1, %1004
  %1006 = fmul double 3.000000e+00, %866
  %1007 = fmul double %1006, %992
  %1008 = fmul double 2.000000e+00, %993
  %1009 = fadd double %1007, %1008
  %1010 = fmul double %1009, %866
  %1011 = fadd double %1010, %994
  %1012 = fmul double -2.000000e+00, %1011
  %1013 = fmul double %1012, %873
  %1014 = sext i32 %798 to i64
  %1015 = getelementptr inbounds %class.Vector* %257, i64 %1014
  %1016 = fmul double %1013, %804
  %1017 = fmul double %1016, %804
  %1018 = fadd double %fullElectVirial_xx.1, %1017
  %1019 = fmul double %1016, %809
  %1020 = fadd double %fullElectVirial_xy.1, %1019
  %1021 = fmul double %1016, %815
  %1022 = fadd double %fullElectVirial_xz.1, %1021
  %1023 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1024 = load double* %1023, align 8
  %1025 = fadd double %1024, %1016
  store double %1025, double* %1023, align 8
  %1026 = getelementptr inbounds %class.Vector* %1015, i32 0, i32 0
  %1027 = load double* %1026, align 8
  %1028 = fsub double %1027, %1016
  store double %1028, double* %1026, align 8
  %1029 = fmul double %1013, %809
  %1030 = fmul double %1029, %809
  %1031 = fadd double %fullElectVirial_yy.1, %1030
  %1032 = fmul double %1029, %815
  %1033 = fadd double %fullElectVirial_yz.1, %1032
  %1034 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1035 = load double* %1034, align 8
  %1036 = fadd double %1035, %1029
  store double %1036, double* %1034, align 8
  %1037 = getelementptr inbounds %class.Vector* %1015, i32 0, i32 1
  %1038 = load double* %1037, align 8
  %1039 = fsub double %1038, %1029
  store double %1039, double* %1037, align 8
  %1040 = fmul double %1013, %815
  %1041 = fmul double %1040, %815
  %1042 = fadd double %fullElectVirial_zz.1, %1041
  %1043 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1044 = load double* %1043, align 8
  %1045 = fadd double %1044, %1040
  store double %1045, double* %1043, align 8
  %1046 = getelementptr inbounds %class.Vector* %1015, i32 0, i32 2
  %1047 = load double* %1046, align 8
  %1048 = fsub double %1047, %1040
  store double %1048, double* %1046, align 8
  br label %1049

; <label>:1049                                    ; preds = %795
  %1050 = add nsw i32 %k17.2, 1
  br label %793

; <label>:1051                                    ; preds = %793
  %1052 = ptrtoint i32* %plim.0 to i64
  %1053 = ptrtoint i32* %245 to i64
  %1054 = sub i64 %1052, %1053
  %1055 = sdiv exact i64 %1054, 4
  %1056 = trunc i64 %1055 to i32
  br label %1057

; <label>:1057                                    ; preds = %1335, %1051
  %k17.3 = phi i32 [ 0, %1051 ], [ %1336, %1335 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %1051 ], [ %1328, %1335 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %1051 ], [ %1319, %1335 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %1051 ], [ %1317, %1335 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %1051 ], [ %1308, %1335 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %1051 ], [ %1306, %1335 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %1051 ], [ %1304, %1335 ]
  %fullElectEnergy_s.2 = phi double [ %fullElectEnergy_s.1, %1051 ], [ %1291, %1335 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %1051 ], [ %1289, %1335 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %1051 ], [ %1246, %1335 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %1051 ], [ %1237, %1335 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %1051 ], [ %1235, %1335 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %1051 ], [ %1226, %1335 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %1051 ], [ %1224, %1335 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %1051 ], [ %1222, %1335 ]
  %electEnergy_s.2 = phi double [ %electEnergy_s.1, %1051 ], [ %1205, %1335 ]
  %vdwEnergy_s.2 = phi double [ %vdwEnergy_s.1, %1051 ], [ %1183, %1335 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %1051 ], [ %1203, %1335 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %1051 ], [ %1181, %1335 ]
  %1058 = icmp slt i32 %k17.3, %1056
  br i1 %1058, label %1059, label %1337

; <label>:1059                                    ; preds = %1057
  %1060 = sext i32 %k17.3 to i64
  %1061 = getelementptr inbounds i32* %245, i64 %1060
  %1062 = load i32* %1061, align 4
  %1063 = sext i32 %1062 to i64
  %1064 = getelementptr inbounds %struct.CompAtom* %37, i64 %1063
  %1065 = getelementptr inbounds %struct.CompAtom* %1064, i32 0, i32 0
  %1066 = getelementptr inbounds %class.Vector* %1065, i32 0, i32 0
  %1067 = load double* %1066, align 8
  %1068 = fsub double %294, %1067
  %1069 = fmul double %1068, %1068
  %1070 = getelementptr inbounds %struct.CompAtom* %1064, i32 0, i32 0
  %1071 = getelementptr inbounds %class.Vector* %1070, i32 0, i32 1
  %1072 = load double* %1071, align 8
  %1073 = fsub double %297, %1072
  %1074 = fmul double %1073, %1073
  %1075 = fadd double %1069, %1074
  %1076 = getelementptr inbounds %struct.CompAtom* %1064, i32 0, i32 0
  %1077 = getelementptr inbounds %class.Vector* %1076, i32 0, i32 2
  %1078 = load double* %1077, align 8
  %1079 = fsub double %300, %1078
  %1080 = fmul double %1079, %1079
  %1081 = fadd double %1075, %1080
  %1082 = fptrunc double %1081 to float
  %1083 = bitcast %union.anon.57* %r2f31 to float*
  store float %1082, float* %1083, align 4
  %1084 = bitcast %union.anon.57* %r2f31 to i32*
  %1085 = load i32* %1084, align 4
  %1086 = ashr i32 %1085, 17
  %1087 = add nsw i32 %1086, %25
  %1088 = getelementptr inbounds %struct.CompAtom* %1064, i32 0, i32 2
  %1089 = load i32* %1088, align 4
  %1090 = and i32 %1089, 4194303
  %1091 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1090)
  %1092 = zext i16 %1091 to i32
  %1093 = mul nsw i32 2, %1092
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds %"struct.LJTable::TableEntry"* %559, i64 %1094
  %1096 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1095, i64 1
  %1097 = mul nsw i32 16, %1087
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds double* %14, i64 %1098
  %1100 = getelementptr inbounds double* %1099, i64 0
  %1101 = load double* %1100, align 8
  %1102 = mul nsw i32 16, %1087
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds double* %14, i64 %1103
  %1105 = getelementptr inbounds double* %1104, i64 4
  %1106 = getelementptr inbounds double* %1105, i64 0
  %1107 = load double* %1106, align 8
  %1108 = mul nsw i32 16, %1087
  %1109 = sext i32 %1108 to i64
  %1110 = getelementptr inbounds double* %14, i64 %1109
  %1111 = getelementptr inbounds double* %1110, i64 8
  %1112 = getelementptr inbounds double* %1111, i64 0
  %1113 = load double* %1112, align 8
  %1114 = mul nsw i32 16, %1087
  %1115 = sext i32 %1114 to i64
  %1116 = getelementptr inbounds double* %14, i64 %1115
  %1117 = getelementptr inbounds double* %1116, i64 8
  %1118 = getelementptr inbounds double* %1117, i64 4
  %1119 = getelementptr inbounds double* %1118, i64 0
  %1120 = load double* %1119, align 8
  %1121 = bitcast %union.anon.57* %r2f31 to i32*
  %1122 = load i32* %1121, align 4
  %1123 = and i32 %1122, -131072
  store i32 %1123, i32* %1121, align 4
  %1124 = getelementptr inbounds %struct.CompAtom* %1064, i32 0, i32 1
  %1125 = load float* %1124, align 4
  %1126 = fpext float %1125 to double
  %1127 = fmul double %553, %1126
  %1128 = bitcast %union.anon.57* %r2f31 to float*
  %1129 = load float* %1128, align 4
  %1130 = fpext float %1129 to double
  %1131 = fsub double %1081, %1130
  %1132 = getelementptr inbounds %struct.CompAtom* %1064, i32 0, i32 2
  %1133 = load i32* %1132, align 4
  %1134 = lshr i32 %1133, 28
  %1135 = mul nsw i32 2, %1134
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds double* %547, i64 %1136
  %1138 = load double* %1137, align 8
  %1139 = mul nsw i32 2, %1134
  %1140 = add nsw i32 %1139, 1
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds double* %547, i64 %1141
  %1143 = load double* %1142, align 8
  %1144 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1096, i32 0, i32 0
  %1145 = load double* %1144, align 8
  %1146 = fmul double %16, %1145
  %1147 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1096, i32 0, i32 1
  %1148 = load double* %1147, align 8
  %1149 = fmul double %16, %1148
  %1150 = fmul double %1146, %1101
  %1151 = fmul double %1149, %1107
  %1152 = fsub double %1150, %1151
  %1153 = getelementptr inbounds double* %1099, i64 3
  %1154 = load double* %1153, align 8
  %1155 = fmul double %1146, %1154
  %1156 = getelementptr inbounds double* %1105, i64 3
  %1157 = load double* %1156, align 8
  %1158 = fmul double %1149, %1157
  %1159 = fsub double %1155, %1158
  %1160 = getelementptr inbounds double* %1099, i64 2
  %1161 = load double* %1160, align 8
  %1162 = fmul double %1146, %1161
  %1163 = getelementptr inbounds double* %1105, i64 2
  %1164 = load double* %1163, align 8
  %1165 = fmul double %1149, %1164
  %1166 = fsub double %1162, %1165
  %1167 = getelementptr inbounds double* %1099, i64 1
  %1168 = load double* %1167, align 8
  %1169 = fmul double %1146, %1168
  %1170 = getelementptr inbounds double* %1105, i64 1
  %1171 = load double* %1170, align 8
  %1172 = fmul double %1149, %1171
  %1173 = fsub double %1169, %1172
  %1174 = fmul double %1131, %1159
  %1175 = fadd double %1174, %1166
  %1176 = fmul double %1175, %1131
  %1177 = fadd double %1176, %1173
  %1178 = fmul double %1177, %1131
  %1179 = fadd double %1178, %1152
  %1180 = fmul double %1138, %1179
  %1181 = fadd double %vdwEnergy.2, %1180
  %1182 = fmul double %1143, %1179
  %1183 = fadd double %vdwEnergy_s.2, %1182
  %1184 = fsub double 1.000000e+00, %18
  %1185 = fmul double %1184, %1127
  %1186 = fmul double %1113, %1185
  %1187 = getelementptr inbounds double* %1111, i64 3
  %1188 = load double* %1187, align 8
  %1189 = fmul double %1185, %1188
  %1190 = getelementptr inbounds double* %1111, i64 2
  %1191 = load double* %1190, align 8
  %1192 = fmul double %1185, %1191
  %1193 = getelementptr inbounds double* %1111, i64 1
  %1194 = load double* %1193, align 8
  %1195 = fmul double %1185, %1194
  %1196 = fmul double %1131, %1189
  %1197 = fadd double %1196, %1192
  %1198 = fmul double %1197, %1131
  %1199 = fadd double %1198, %1195
  %1200 = fmul double %1199, %1131
  %1201 = fadd double %1200, %1186
  %1202 = fmul double %1138, %1201
  %1203 = fadd double %electEnergy.2, %1202
  %1204 = fmul double %1143, %1201
  %1205 = fadd double %electEnergy_s.2, %1204
  %1206 = fadd double %1189, %1159
  %1207 = fadd double %1192, %1166
  %1208 = fadd double %1195, %1173
  %1209 = fadd double %1186, %1152
  %1210 = fmul double 3.000000e+00, %1131
  %1211 = fmul double %1210, %1206
  %1212 = fmul double 2.000000e+00, %1207
  %1213 = fadd double %1211, %1212
  %1214 = fmul double %1213, %1131
  %1215 = fadd double %1214, %1208
  %1216 = fmul double -2.000000e+00, %1138
  %1217 = fmul double %1216, %1215
  %1218 = sext i32 %1062 to i64
  %1219 = getelementptr inbounds %class.Vector* %251, i64 %1218
  %1220 = fmul double %1217, %1068
  %1221 = fmul double %1220, %1068
  %1222 = fadd double %virial_xx.2, %1221
  %1223 = fmul double %1220, %1073
  %1224 = fadd double %virial_xy.2, %1223
  %1225 = fmul double %1220, %1079
  %1226 = fadd double %virial_xz.2, %1225
  %1227 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %1228 = load double* %1227, align 8
  %1229 = fadd double %1228, %1220
  store double %1229, double* %1227, align 8
  %1230 = getelementptr inbounds %class.Vector* %1219, i32 0, i32 0
  %1231 = load double* %1230, align 8
  %1232 = fsub double %1231, %1220
  store double %1232, double* %1230, align 8
  %1233 = fmul double %1217, %1073
  %1234 = fmul double %1233, %1073
  %1235 = fadd double %virial_yy.2, %1234
  %1236 = fmul double %1233, %1079
  %1237 = fadd double %virial_yz.2, %1236
  %1238 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %1239 = load double* %1238, align 8
  %1240 = fadd double %1239, %1233
  store double %1240, double* %1238, align 8
  %1241 = getelementptr inbounds %class.Vector* %1219, i32 0, i32 1
  %1242 = load double* %1241, align 8
  %1243 = fsub double %1242, %1233
  store double %1243, double* %1241, align 8
  %1244 = fmul double %1217, %1079
  %1245 = fmul double %1244, %1079
  %1246 = fadd double %virial_zz.2, %1245
  %1247 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %1248 = load double* %1247, align 8
  %1249 = fadd double %1248, %1244
  store double %1249, double* %1247, align 8
  %1250 = getelementptr inbounds %class.Vector* %1219, i32 0, i32 2
  %1251 = load double* %1250, align 8
  %1252 = fsub double %1251, %1244
  store double %1252, double* %1250, align 8
  %1253 = getelementptr inbounds double* %1118, i64 1
  %1254 = load double* %1253, align 8
  %1255 = getelementptr inbounds double* %1118, i64 2
  %1256 = load double* %1255, align 8
  %1257 = getelementptr inbounds double* %1118, i64 3
  %1258 = load double* %1257, align 8
  %1259 = mul nsw i32 4, %1087
  %1260 = sext i32 %1259 to i64
  %1261 = getelementptr inbounds double* %15, i64 %1260
  %1262 = getelementptr inbounds double* %1261, i64 0
  %1263 = load double* %1262, align 8
  %1264 = fmul double %18, %1263
  %1265 = fsub double %1120, %1264
  %1266 = getelementptr inbounds double* %1261, i64 1
  %1267 = load double* %1266, align 8
  %1268 = fmul double %18, %1267
  %1269 = fsub double %1254, %1268
  %1270 = getelementptr inbounds double* %1261, i64 2
  %1271 = load double* %1270, align 8
  %1272 = fmul double %18, %1271
  %1273 = fsub double %1256, %1272
  %1274 = getelementptr inbounds double* %1261, i64 3
  %1275 = load double* %1274, align 8
  %1276 = fmul double %18, %1275
  %1277 = fsub double %1258, %1276
  %1278 = fmul double %1277, %1127
  %1279 = fmul double %1273, %1127
  %1280 = fmul double %1269, %1127
  %1281 = fmul double %1265, %1127
  %1282 = fmul double %1131, %1278
  %1283 = fadd double %1282, %1279
  %1284 = fmul double %1283, %1131
  %1285 = fadd double %1284, %1280
  %1286 = fmul double %1285, %1131
  %1287 = fadd double %1286, %1281
  %1288 = fmul double %1138, %1287
  %1289 = fadd double %fullElectEnergy.2, %1288
  %1290 = fmul double %1143, %1287
  %1291 = fadd double %fullElectEnergy_s.2, %1290
  %1292 = fmul double 3.000000e+00, %1131
  %1293 = fmul double %1292, %1278
  %1294 = fmul double 2.000000e+00, %1279
  %1295 = fadd double %1293, %1294
  %1296 = fmul double %1295, %1131
  %1297 = fadd double %1296, %1280
  %1298 = fmul double -2.000000e+00, %1297
  %1299 = fmul double %1298, %1138
  %1300 = sext i32 %1062 to i64
  %1301 = getelementptr inbounds %class.Vector* %257, i64 %1300
  %1302 = fmul double %1299, %1068
  %1303 = fmul double %1302, %1068
  %1304 = fadd double %fullElectVirial_xx.2, %1303
  %1305 = fmul double %1302, %1073
  %1306 = fadd double %fullElectVirial_xy.2, %1305
  %1307 = fmul double %1302, %1079
  %1308 = fadd double %fullElectVirial_xz.2, %1307
  %1309 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1310 = load double* %1309, align 8
  %1311 = fadd double %1310, %1302
  store double %1311, double* %1309, align 8
  %1312 = getelementptr inbounds %class.Vector* %1301, i32 0, i32 0
  %1313 = load double* %1312, align 8
  %1314 = fsub double %1313, %1302
  store double %1314, double* %1312, align 8
  %1315 = fmul double %1299, %1073
  %1316 = fmul double %1315, %1073
  %1317 = fadd double %fullElectVirial_yy.2, %1316
  %1318 = fmul double %1315, %1079
  %1319 = fadd double %fullElectVirial_yz.2, %1318
  %1320 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1321 = load double* %1320, align 8
  %1322 = fadd double %1321, %1315
  store double %1322, double* %1320, align 8
  %1323 = getelementptr inbounds %class.Vector* %1301, i32 0, i32 1
  %1324 = load double* %1323, align 8
  %1325 = fsub double %1324, %1315
  store double %1325, double* %1323, align 8
  %1326 = fmul double %1299, %1079
  %1327 = fmul double %1326, %1079
  %1328 = fadd double %fullElectVirial_zz.2, %1327
  %1329 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1330 = load double* %1329, align 8
  %1331 = fadd double %1330, %1326
  store double %1331, double* %1329, align 8
  %1332 = getelementptr inbounds %class.Vector* %1301, i32 0, i32 2
  %1333 = load double* %1332, align 8
  %1334 = fsub double %1333, %1326
  store double %1334, double* %1332, align 8
  br label %1335

; <label>:1335                                    ; preds = %1059
  %1336 = add nsw i32 %k17.3, 1
  br label %1057

; <label>:1337                                    ; preds = %1057
  %1338 = ptrtoint i32* %plix.2 to i64
  %1339 = ptrtoint i32* %231 to i64
  %1340 = sub i64 %1338, %1339
  %1341 = sdiv exact i64 %1340, 4
  %1342 = trunc i64 %1341 to i32
  br label %1343

; <label>:1343                                    ; preds = %1482, %1337
  %k17.4 = phi i32 [ 0, %1337 ], [ %1483, %1482 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1337 ], [ %1475, %1482 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1337 ], [ %1466, %1482 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1337 ], [ %1464, %1482 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1337 ], [ %1455, %1482 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1337 ], [ %1453, %1482 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1337 ], [ %1451, %1482 ]
  %fullElectEnergy_s.3 = phi double [ %fullElectEnergy_s.2, %1337 ], [ %1438, %1482 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1337 ], [ %1436, %1482 ]
  %1344 = icmp slt i32 %k17.4, %1342
  br i1 %1344, label %1345, label %1484

; <label>:1345                                    ; preds = %1343
  %1346 = sext i32 %k17.4 to i64
  %1347 = getelementptr inbounds i32* %231, i64 %1346
  %1348 = load i32* %1347, align 4
  %1349 = sext i32 %1348 to i64
  %1350 = getelementptr inbounds %struct.CompAtom* %37, i64 %1349
  %1351 = getelementptr inbounds %struct.CompAtom* %1350, i32 0, i32 0
  %1352 = getelementptr inbounds %class.Vector* %1351, i32 0, i32 0
  %1353 = load double* %1352, align 8
  %1354 = fsub double %294, %1353
  %1355 = fmul double %1354, %1354
  %1356 = getelementptr inbounds %struct.CompAtom* %1350, i32 0, i32 0
  %1357 = getelementptr inbounds %class.Vector* %1356, i32 0, i32 1
  %1358 = load double* %1357, align 8
  %1359 = fsub double %297, %1358
  %1360 = fmul double %1359, %1359
  %1361 = fadd double %1355, %1360
  %1362 = getelementptr inbounds %struct.CompAtom* %1350, i32 0, i32 0
  %1363 = getelementptr inbounds %class.Vector* %1362, i32 0, i32 2
  %1364 = load double* %1363, align 8
  %1365 = fsub double %300, %1364
  %1366 = fmul double %1365, %1365
  %1367 = fadd double %1361, %1366
  %1368 = fptrunc double %1367 to float
  %1369 = bitcast %union.anon.58* %r2f80 to float*
  store float %1368, float* %1369, align 4
  %1370 = bitcast %union.anon.58* %r2f80 to i32*
  %1371 = load i32* %1370, align 4
  %1372 = ashr i32 %1371, 17
  %1373 = add nsw i32 %1372, %25
  %1374 = mul nsw i32 16, %1373
  %1375 = sext i32 %1374 to i64
  %1376 = getelementptr inbounds double* %14, i64 %1375
  %1377 = getelementptr inbounds double* %1376, i64 8
  %1378 = getelementptr inbounds double* %1377, i64 4
  %1379 = getelementptr inbounds double* %1378, i64 0
  %1380 = load double* %1379, align 8
  %1381 = bitcast %union.anon.58* %r2f80 to i32*
  %1382 = load i32* %1381, align 4
  %1383 = and i32 %1382, -131072
  store i32 %1383, i32* %1381, align 4
  %1384 = getelementptr inbounds %struct.CompAtom* %1350, i32 0, i32 1
  %1385 = load float* %1384, align 4
  %1386 = fpext float %1385 to double
  %1387 = fmul double %553, %1386
  %1388 = bitcast %union.anon.58* %r2f80 to float*
  %1389 = load float* %1388, align 4
  %1390 = fpext float %1389 to double
  %1391 = fsub double %1367, %1390
  %1392 = getelementptr inbounds %struct.CompAtom* %1350, i32 0, i32 2
  %1393 = load i32* %1392, align 4
  %1394 = lshr i32 %1393, 28
  %1395 = mul nsw i32 2, %1394
  %1396 = sext i32 %1395 to i64
  %1397 = getelementptr inbounds double* %547, i64 %1396
  %1398 = load double* %1397, align 8
  %1399 = mul nsw i32 2, %1394
  %1400 = add nsw i32 %1399, 1
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds double* %547, i64 %1401
  %1403 = load double* %1402, align 8
  %1404 = getelementptr inbounds double* %1378, i64 1
  %1405 = load double* %1404, align 8
  %1406 = getelementptr inbounds double* %1378, i64 2
  %1407 = load double* %1406, align 8
  %1408 = getelementptr inbounds double* %1378, i64 3
  %1409 = load double* %1408, align 8
  %1410 = mul nsw i32 4, %1373
  %1411 = sext i32 %1410 to i64
  %1412 = getelementptr inbounds double* %15, i64 %1411
  %1413 = getelementptr inbounds double* %1412, i64 0
  %1414 = load double* %1413, align 8
  %1415 = fsub double %1380, %1414
  %1416 = getelementptr inbounds double* %1412, i64 1
  %1417 = load double* %1416, align 8
  %1418 = fsub double %1405, %1417
  %1419 = getelementptr inbounds double* %1412, i64 2
  %1420 = load double* %1419, align 8
  %1421 = fsub double %1407, %1420
  %1422 = getelementptr inbounds double* %1412, i64 3
  %1423 = load double* %1422, align 8
  %1424 = fsub double %1409, %1423
  %1425 = fmul double %1424, %1387
  %1426 = fmul double %1421, %1387
  %1427 = fmul double %1418, %1387
  %1428 = fmul double %1415, %1387
  %1429 = fmul double %1391, %1425
  %1430 = fadd double %1429, %1426
  %1431 = fmul double %1430, %1391
  %1432 = fadd double %1431, %1427
  %1433 = fmul double %1432, %1391
  %1434 = fadd double %1433, %1428
  %1435 = fmul double %1398, %1434
  %1436 = fadd double %fullElectEnergy.3, %1435
  %1437 = fmul double %1403, %1434
  %1438 = fadd double %fullElectEnergy_s.3, %1437
  %1439 = fmul double 3.000000e+00, %1391
  %1440 = fmul double %1439, %1425
  %1441 = fmul double 2.000000e+00, %1426
  %1442 = fadd double %1440, %1441
  %1443 = fmul double %1442, %1391
  %1444 = fadd double %1443, %1427
  %1445 = fmul double -2.000000e+00, %1444
  %1446 = fmul double %1445, %1398
  %1447 = sext i32 %1348 to i64
  %1448 = getelementptr inbounds %class.Vector* %257, i64 %1447
  %1449 = fmul double %1446, %1354
  %1450 = fmul double %1449, %1354
  %1451 = fadd double %fullElectVirial_xx.3, %1450
  %1452 = fmul double %1449, %1359
  %1453 = fadd double %fullElectVirial_xy.3, %1452
  %1454 = fmul double %1449, %1365
  %1455 = fadd double %fullElectVirial_xz.3, %1454
  %1456 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1457 = load double* %1456, align 8
  %1458 = fadd double %1457, %1449
  store double %1458, double* %1456, align 8
  %1459 = getelementptr inbounds %class.Vector* %1448, i32 0, i32 0
  %1460 = load double* %1459, align 8
  %1461 = fsub double %1460, %1449
  store double %1461, double* %1459, align 8
  %1462 = fmul double %1446, %1359
  %1463 = fmul double %1462, %1359
  %1464 = fadd double %fullElectVirial_yy.3, %1463
  %1465 = fmul double %1462, %1365
  %1466 = fadd double %fullElectVirial_yz.3, %1465
  %1467 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1468 = load double* %1467, align 8
  %1469 = fadd double %1468, %1462
  store double %1469, double* %1467, align 8
  %1470 = getelementptr inbounds %class.Vector* %1448, i32 0, i32 1
  %1471 = load double* %1470, align 8
  %1472 = fsub double %1471, %1462
  store double %1472, double* %1470, align 8
  %1473 = fmul double %1446, %1365
  %1474 = fmul double %1473, %1365
  %1475 = fadd double %fullElectVirial_zz.3, %1474
  %1476 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1477 = load double* %1476, align 8
  %1478 = fadd double %1477, %1473
  store double %1478, double* %1476, align 8
  %1479 = getelementptr inbounds %class.Vector* %1448, i32 0, i32 2
  %1480 = load double* %1479, align 8
  %1481 = fsub double %1480, %1473
  store double %1481, double* %1479, align 8
  br label %1482

; <label>:1482                                    ; preds = %1345
  %1483 = add nsw i32 %k17.4, 1
  br label %1343

; <label>:1484                                    ; preds = %1343
  br label %1485

; <label>:1485                                    ; preds = %1484, %338
  %g_lower.4 = phi i32 [ %g_lower.0, %338 ], [ %g_lower.3, %1484 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %338 ], [ %j_hgroup.2, %1484 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %338 ], [ %fixg_lower.3, %1484 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %338 ], [ %pairlistindex.2, %1484 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %338 ], [ %pairlistoffset.1, %1484 ]
  %pairCount.3 = phi i32 [ %334, %338 ], [ %pairCount.2, %1484 ]
  %i.1 = phi i32 [ %340, %338 ], [ %i.0, %1484 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %338 ], [ %fullElectVirial_zz.3, %1484 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %338 ], [ %fullElectVirial_yz.3, %1484 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %338 ], [ %fullElectVirial_yy.3, %1484 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %338 ], [ %fullElectVirial_xz.3, %1484 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %338 ], [ %fullElectVirial_xy.3, %1484 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %338 ], [ %fullElectVirial_xx.3, %1484 ]
  %fullElectEnergy_s.4 = phi double [ %fullElectEnergy_s.0, %338 ], [ %fullElectEnergy_s.3, %1484 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %338 ], [ %fullElectEnergy.3, %1484 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %338 ], [ %virial_zz.2, %1484 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %338 ], [ %virial_yz.2, %1484 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %338 ], [ %virial_yy.2, %1484 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %338 ], [ %virial_xz.2, %1484 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %338 ], [ %virial_xy.2, %1484 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %338 ], [ %virial_xx.2, %1484 ]
  %electEnergy_s.3 = phi double [ %electEnergy_s.0, %338 ], [ %electEnergy_s.2, %1484 ]
  %vdwEnergy_s.3 = phi double [ %vdwEnergy_s.0, %338 ], [ %vdwEnergy_s.2, %1484 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %338 ], [ %electEnergy.2, %1484 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %338 ], [ %vdwEnergy.2, %1484 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %338 ], [ %787, %1484 ]
  %1486 = add nsw i32 %i.1, 1
  br label %273

; <label>:1487                                    ; preds = %273
  %1488 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1489 = icmp ne i32* %51, %1488
  br i1 %1489, label %1490, label %1495

; <label>:1490                                    ; preds = %1487
  %1491 = icmp eq i32* %51, null
  br i1 %1491, label %1494, label %1492

; <label>:1492                                    ; preds = %1490
  %1493 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1493) #8
  br label %1494

; <label>:1494                                    ; preds = %1492, %1490
  br label %1495

; <label>:1495                                    ; preds = %1494, %1487
  %1496 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1497 = icmp ne i32* %65, %1496
  br i1 %1497, label %1498, label %1503

; <label>:1498                                    ; preds = %1495
  %1499 = icmp eq i32* %65, null
  br i1 %1499, label %1502, label %1500

; <label>:1500                                    ; preds = %1498
  %1501 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1501) #8
  br label %1502

; <label>:1502                                    ; preds = %1500, %1498
  br label %1503

; <label>:1503                                    ; preds = %1502, %1495
  %1504 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1505 = icmp ne i32* %79, %1504
  br i1 %1505, label %1506, label %1511

; <label>:1506                                    ; preds = %1503
  %1507 = icmp eq i32* %79, null
  br i1 %1507, label %1510, label %1508

; <label>:1508                                    ; preds = %1506
  %1509 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1509) #8
  br label %1510

; <label>:1510                                    ; preds = %1508, %1506
  br label %1511

; <label>:1511                                    ; preds = %1510, %1503
  %1512 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1513 = icmp ne i32* %189, %1512
  br i1 %1513, label %1514, label %1519

; <label>:1514                                    ; preds = %1511
  %1515 = icmp eq i32* %189, null
  br i1 %1515, label %1518, label %1516

; <label>:1516                                    ; preds = %1514
  %1517 = bitcast i32* %189 to i8*
  call void @_ZdaPv(i8* %1517) #8
  br label %1518

; <label>:1518                                    ; preds = %1516, %1514
  br label %1519

; <label>:1519                                    ; preds = %1518, %1511
  %1520 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1521 = icmp ne i32* %203, %1520
  br i1 %1521, label %1522, label %1527

; <label>:1522                                    ; preds = %1519
  %1523 = icmp eq i32* %203, null
  br i1 %1523, label %1526, label %1524

; <label>:1524                                    ; preds = %1522
  %1525 = bitcast i32* %203 to i8*
  call void @_ZdaPv(i8* %1525) #8
  br label %1526

; <label>:1526                                    ; preds = %1524, %1522
  br label %1527

; <label>:1527                                    ; preds = %1526, %1519
  %1528 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1529 = icmp ne i32* %217, %1528
  br i1 %1529, label %1530, label %1535

; <label>:1530                                    ; preds = %1527
  %1531 = icmp eq i32* %217, null
  br i1 %1531, label %1534, label %1532

; <label>:1532                                    ; preds = %1530
  %1533 = bitcast i32* %217 to i8*
  call void @_ZdaPv(i8* %1533) #8
  br label %1534

; <label>:1534                                    ; preds = %1532, %1530
  br label %1535

; <label>:1535                                    ; preds = %1534, %1527
  %1536 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1537 = icmp ne i32* %231, %1536
  br i1 %1537, label %1538, label %1543

; <label>:1538                                    ; preds = %1535
  %1539 = icmp eq i32* %231, null
  br i1 %1539, label %1542, label %1540

; <label>:1540                                    ; preds = %1538
  %1541 = bitcast i32* %231 to i8*
  call void @_ZdaPv(i8* %1541) #8
  br label %1542

; <label>:1542                                    ; preds = %1540, %1538
  br label %1543

; <label>:1543                                    ; preds = %1542, %1535
  %1544 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1545 = icmp ne i32* %245, %1544
  br i1 %1545, label %1546, label %1551

; <label>:1546                                    ; preds = %1543
  %1547 = icmp eq i32* %245, null
  br i1 %1547, label %1550, label %1548

; <label>:1548                                    ; preds = %1546
  %1549 = bitcast i32* %245 to i8*
  call void @_ZdaPv(i8* %1549) #8
  br label %1550

; <label>:1550                                    ; preds = %1548, %1546
  br label %1551

; <label>:1551                                    ; preds = %1550, %1543
  %1552 = sitofp i32 %exclChecksum.0 to double
  %1553 = getelementptr inbounds double* %6, i64 22
  %1554 = load double* %1553, align 8
  %1555 = fadd double %1554, %1552
  store double %1555, double* %1553, align 8
  %1556 = getelementptr inbounds double* %6, i64 2
  %1557 = load double* %1556, align 8
  %1558 = fadd double %1557, %vdwEnergy.0
  store double %1558, double* %1556, align 8
  %1559 = getelementptr inbounds double* %6, i64 0
  %1560 = load double* %1559, align 8
  %1561 = fadd double %1560, %electEnergy.0
  store double %1561, double* %1559, align 8
  %1562 = getelementptr inbounds double* %6, i64 25
  %1563 = load double* %1562, align 8
  %1564 = fadd double %1563, %vdwEnergy_s.0
  store double %1564, double* %1562, align 8
  %1565 = getelementptr inbounds double* %6, i64 23
  %1566 = load double* %1565, align 8
  %1567 = fadd double %1566, %electEnergy_s.0
  store double %1567, double* %1565, align 8
  %1568 = getelementptr inbounds double* %6, i64 3
  %1569 = load double* %1568, align 8
  %1570 = fadd double %1569, %virial_xx.0
  store double %1570, double* %1568, align 8
  %1571 = getelementptr inbounds double* %6, i64 4
  %1572 = load double* %1571, align 8
  %1573 = fadd double %1572, %virial_xy.0
  store double %1573, double* %1571, align 8
  %1574 = getelementptr inbounds double* %6, i64 5
  %1575 = load double* %1574, align 8
  %1576 = fadd double %1575, %virial_xz.0
  store double %1576, double* %1574, align 8
  %1577 = getelementptr inbounds double* %6, i64 6
  %1578 = load double* %1577, align 8
  %1579 = fadd double %1578, %virial_xy.0
  store double %1579, double* %1577, align 8
  %1580 = getelementptr inbounds double* %6, i64 7
  %1581 = load double* %1580, align 8
  %1582 = fadd double %1581, %virial_yy.0
  store double %1582, double* %1580, align 8
  %1583 = getelementptr inbounds double* %6, i64 8
  %1584 = load double* %1583, align 8
  %1585 = fadd double %1584, %virial_yz.0
  store double %1585, double* %1583, align 8
  %1586 = getelementptr inbounds double* %6, i64 9
  %1587 = load double* %1586, align 8
  %1588 = fadd double %1587, %virial_xz.0
  store double %1588, double* %1586, align 8
  %1589 = getelementptr inbounds double* %6, i64 10
  %1590 = load double* %1589, align 8
  %1591 = fadd double %1590, %virial_yz.0
  store double %1591, double* %1589, align 8
  %1592 = getelementptr inbounds double* %6, i64 11
  %1593 = load double* %1592, align 8
  %1594 = fadd double %1593, %virial_zz.0
  store double %1594, double* %1592, align 8
  %1595 = getelementptr inbounds double* %6, i64 1
  %1596 = load double* %1595, align 8
  %1597 = fadd double %1596, %fullElectEnergy.0
  store double %1597, double* %1595, align 8
  %1598 = getelementptr inbounds double* %6, i64 24
  %1599 = load double* %1598, align 8
  %1600 = fadd double %1599, %fullElectEnergy_s.0
  store double %1600, double* %1598, align 8
  %1601 = getelementptr inbounds double* %6, i64 12
  %1602 = load double* %1601, align 8
  %1603 = fadd double %1602, %fullElectVirial_xx.0
  store double %1603, double* %1601, align 8
  %1604 = getelementptr inbounds double* %6, i64 13
  %1605 = load double* %1604, align 8
  %1606 = fadd double %1605, %fullElectVirial_xy.0
  store double %1606, double* %1604, align 8
  %1607 = getelementptr inbounds double* %6, i64 14
  %1608 = load double* %1607, align 8
  %1609 = fadd double %1608, %fullElectVirial_xz.0
  store double %1609, double* %1607, align 8
  %1610 = getelementptr inbounds double* %6, i64 15
  %1611 = load double* %1610, align 8
  %1612 = fadd double %1611, %fullElectVirial_xy.0
  store double %1612, double* %1610, align 8
  %1613 = getelementptr inbounds double* %6, i64 16
  %1614 = load double* %1613, align 8
  %1615 = fadd double %1614, %fullElectVirial_yy.0
  store double %1615, double* %1613, align 8
  %1616 = getelementptr inbounds double* %6, i64 17
  %1617 = load double* %1616, align 8
  %1618 = fadd double %1617, %fullElectVirial_yz.0
  store double %1618, double* %1616, align 8
  %1619 = getelementptr inbounds double* %6, i64 18
  %1620 = load double* %1619, align 8
  %1621 = fadd double %1620, %fullElectVirial_xz.0
  store double %1621, double* %1619, align 8
  %1622 = getelementptr inbounds double* %6, i64 19
  %1623 = load double* %1622, align 8
  %1624 = fadd double %1623, %fullElectVirial_yz.0
  store double %1624, double* %1622, align 8
  %1625 = getelementptr inbounds double* %6, i64 20
  %1626 = load double* %1625, align 8
  %1627 = fadd double %1626, %fullElectVirial_zz.0
  store double %1627, double* %1625, align 8
  br label %1628

; <label>:1628                                    ; preds = %1551, %164, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil36calc_pair_energy_merge_fullelect_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.48, align 4
  %r2f29 = alloca %union.anon.49, align 4
  %r2f66 = alloca %union.anon.50, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1386

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1386

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1276, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1276 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1276 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1276 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1277, %1276 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_zz.4, %1276 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yz.4, %1276 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yy.4, %1276 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xz.4, %1276 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xy.4, %1276 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xx.4, %1276 ]
  %fullElectEnergy_s.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectEnergy_s.4, %1276 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectEnergy.4, %1276 ]
  %vdwEnergy_s.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy_s.3, %1276 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy.3, %1276 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1276 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1278

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1276

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1276

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %506 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 28
  %509 = mul nsw i32 6, %508
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds double* %505, i64 %510
  %512 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %513 = load float* %512, align 4
  %514 = fpext float %513 to double
  %515 = fmul double 3.320636e+02, %514
  %516 = fmul double %515, %15
  %517 = fmul double %516, %9
  %518 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %519 = load i32* %518, align 4
  %520 = and i32 %519, 4194303
  %521 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %520)
  %522 = zext i16 %521 to i32
  %523 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %522)
  %524 = icmp ne i32 %504, 0
  br i1 %524, label %525, label %587

; <label>:525                                     ; preds = %502
  br label %526

; <label>:526                                     ; preds = %584, %525
  %pli4.0 = phi i32* [ %221, %525 ], [ %pli4.2, %584 ]
  %plin.0 = phi i32* [ %235, %525 ], [ %plin.2, %584 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %525 ], [ %585, %584 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %525 ], [ %exclChecksum.3, %584 ]
  %527 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %527, label %528, label %586

; <label>:528                                     ; preds = %526
  %529 = sext i32 %k.0 to i64
  %530 = getelementptr inbounds i32* %207, i64 %529
  %531 = load i32* %530, align 4
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %36, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 0
  %536 = load double* %535, align 8
  %537 = fsub double %303, %536
  %538 = fmul double %537, %537
  %539 = sext i32 %531 to i64
  %540 = getelementptr inbounds %struct.CompAtom* %36, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %540, i32 0, i32 0
  %542 = getelementptr inbounds %class.Vector* %541, i32 0, i32 1
  %543 = load double* %542, align 8
  %544 = fsub double %306, %543
  %545 = fmul double %544, %544
  %546 = fadd double %538, %545
  %547 = sext i32 %531 to i64
  %548 = getelementptr inbounds %struct.CompAtom* %36, i64 %547
  %549 = getelementptr inbounds %struct.CompAtom* %548, i32 0, i32 0
  %550 = getelementptr inbounds %class.Vector* %549, i32 0, i32 2
  %551 = load double* %550, align 8
  %552 = fsub double %309, %551
  %553 = fmul double %552, %552
  %554 = fadd double %546, %553
  %555 = sext i32 %531 to i64
  %556 = getelementptr inbounds %struct.CompAtom* %36, i64 %555
  %557 = getelementptr inbounds %struct.CompAtom* %556, i32 0, i32 2
  %558 = load i32* %557, align 4
  %559 = lshr i32 %558, 26
  %560 = and i32 %559, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %583, label %562

; <label>:562                                     ; preds = %528
  %563 = fcmp ole double %554, %7
  br i1 %563, label %564, label %583

; <label>:564                                     ; preds = %562
  %565 = fcmp ole double %554, %21
  br i1 %565, label %566, label %569

; <label>:566                                     ; preds = %564
  %567 = add nsw i32 %exclChecksum.1, 1
  %568 = icmp ne i32 %567, 0
  br i1 %568, label %583, label %569

; <label>:569                                     ; preds = %566, %564
  %exclChecksum.2 = phi i32 [ %567, %566 ], [ %exclChecksum.1, %564 ]
  %570 = sext i32 %531 to i64
  %571 = getelementptr inbounds %struct.CompAtom* %36, i64 %570
  %572 = getelementptr inbounds %struct.CompAtom* %571, i32 0, i32 2
  %573 = load i32* %572, align 4
  %574 = and i32 %573, 4194303
  %575 = icmp sge i32 %574, %293
  br i1 %575, label %576, label %580

; <label>:576                                     ; preds = %569
  %577 = icmp sle i32 %574, %295
  br i1 %577, label %578, label %580

; <label>:578                                     ; preds = %576
  %579 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %531, i32* %pli4.0, align 4
  br label %582

; <label>:580                                     ; preds = %576, %569
  %581 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %531, i32* %plin.0, align 4
  br label %582

; <label>:582                                     ; preds = %580, %578
  %pli4.1 = phi i32* [ %579, %578 ], [ %pli4.0, %580 ]
  %plin.1 = phi i32* [ %plin.0, %578 ], [ %581, %580 ]
  br label %583

; <label>:583                                     ; preds = %582, %566, %562, %528
  %pli4.2 = phi i32* [ %pli4.0, %528 ], [ %pli4.0, %566 ], [ %pli4.1, %582 ], [ %pli4.0, %562 ]
  %plin.2 = phi i32* [ %plin.0, %528 ], [ %plin.0, %566 ], [ %plin.1, %582 ], [ %plin.0, %562 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %528 ], [ %567, %566 ], [ %exclChecksum.2, %582 ], [ %exclChecksum.1, %562 ]
  br label %584

; <label>:584                                     ; preds = %583
  %585 = add nsw i32 %k.0, 1
  br label %526

; <label>:586                                     ; preds = %526
  br label %666

; <label>:587                                     ; preds = %502
  %588 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %588, label %589, label %665

; <label>:589                                     ; preds = %587
  %590 = sext i32 %pairlistoffset.1 to i64
  %591 = getelementptr inbounds i32* %207, i64 %590
  %592 = load i32* %591, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds %struct.CompAtom* %36, i64 %593
  %595 = getelementptr inbounds %struct.CompAtom* %594, i32 0, i32 0
  %596 = getelementptr inbounds %class.Vector* %595, i32 0, i32 0
  %597 = load double* %596, align 8
  %598 = sext i32 %592 to i64
  %599 = getelementptr inbounds %struct.CompAtom* %36, i64 %598
  %600 = getelementptr inbounds %struct.CompAtom* %599, i32 0, i32 0
  %601 = getelementptr inbounds %class.Vector* %600, i32 0, i32 1
  %602 = load double* %601, align 8
  %603 = sext i32 %592 to i64
  %604 = getelementptr inbounds %struct.CompAtom* %36, i64 %603
  %605 = getelementptr inbounds %struct.CompAtom* %604, i32 0, i32 0
  %606 = getelementptr inbounds %class.Vector* %605, i32 0, i32 2
  %607 = load double* %606, align 8
  %608 = sext i32 %592 to i64
  %609 = getelementptr inbounds %struct.CompAtom* %36, i64 %608
  %610 = getelementptr inbounds %struct.CompAtom* %609, i32 0, i32 2
  %611 = load i32* %610, align 4
  %612 = and i32 %611, 4194303
  br label %613

; <label>:613                                     ; preds = %658, %589
  %pli4.3 = phi i32* [ %221, %589 ], [ %pli4.5, %658 ]
  %plin.3 = phi i32* [ %235, %589 ], [ %plin.5, %658 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %589 ], [ %616, %658 ]
  %j211.0 = phi i32 [ %592, %589 ], [ %619, %658 ]
  %p_j_x12.0 = phi double [ %597, %589 ], [ %626, %658 ]
  %p_j_y13.0 = phi double [ %602, %589 ], [ %634, %658 ]
  %p_j_z14.0 = phi double [ %607, %589 ], [ %642, %658 ]
  %atom215.0 = phi i32 [ %612, %589 ], [ %663, %658 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %589 ], [ %exclChecksum.6, %658 ]
  %614 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %614, label %615, label %664

; <label>:615                                     ; preds = %613
  %616 = add nsw i32 %k10.0, 1
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i32* %207, i64 %617
  %619 = load i32* %618, align 4
  %620 = fsub double %303, %p_j_x12.0
  %621 = fmul double %620, %620
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %36, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = fsub double %306, %p_j_y13.0
  %628 = fmul double %627, %627
  %629 = fadd double %621, %628
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %36, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 1
  %634 = load double* %633, align 8
  %635 = fsub double %309, %p_j_z14.0
  %636 = fmul double %635, %635
  %637 = fadd double %629, %636
  %638 = sext i32 %619 to i64
  %639 = getelementptr inbounds %struct.CompAtom* %36, i64 %638
  %640 = getelementptr inbounds %struct.CompAtom* %639, i32 0, i32 0
  %641 = getelementptr inbounds %class.Vector* %640, i32 0, i32 2
  %642 = load double* %641, align 8
  %643 = fcmp ole double %637, %7
  br i1 %643, label %644, label %658

; <label>:644                                     ; preds = %615
  %645 = fcmp ole double %637, %21
  br i1 %645, label %646, label %649

; <label>:646                                     ; preds = %644
  %647 = add nsw i32 %exclChecksum.4, 1
  %648 = icmp ne i32 %647, 0
  br i1 %648, label %658, label %649

; <label>:649                                     ; preds = %646, %644
  %exclChecksum.5 = phi i32 [ %647, %646 ], [ %exclChecksum.4, %644 ]
  %650 = icmp sge i32 %atom215.0, %293
  br i1 %650, label %651, label %655

; <label>:651                                     ; preds = %649
  %652 = icmp sle i32 %atom215.0, %295
  br i1 %652, label %653, label %655

; <label>:653                                     ; preds = %651
  %654 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %657

; <label>:655                                     ; preds = %651, %649
  %656 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %657

; <label>:657                                     ; preds = %655, %653
  %pli4.4 = phi i32* [ %654, %653 ], [ %pli4.3, %655 ]
  %plin.4 = phi i32* [ %plin.3, %653 ], [ %656, %655 ]
  br label %658

; <label>:658                                     ; preds = %657, %646, %615
  %pli4.5 = phi i32* [ %pli4.3, %646 ], [ %pli4.4, %657 ], [ %pli4.3, %615 ]
  %plin.5 = phi i32* [ %plin.3, %646 ], [ %plin.4, %657 ], [ %plin.3, %615 ]
  %exclChecksum.6 = phi i32 [ %647, %646 ], [ %exclChecksum.5, %657 ], [ %exclChecksum.4, %615 ]
  %659 = sext i32 %619 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %36, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 2
  %662 = load i32* %661, align 4
  %663 = and i32 %662, 4194303
  br label %613

; <label>:664                                     ; preds = %613
  br label %665

; <label>:665                                     ; preds = %664, %587
  %pli4.6 = phi i32* [ %pli4.3, %664 ], [ %221, %587 ]
  %plin.6 = phi i32* [ %plin.3, %664 ], [ %235, %587 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %664 ], [ %exclChecksum.0, %587 ]
  br label %666

; <label>:666                                     ; preds = %665, %586
  %pli4.7 = phi i32* [ %pli4.0, %586 ], [ %pli4.6, %665 ]
  %plin.7 = phi i32* [ %plin.0, %586 ], [ %plin.6, %665 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %586 ], [ %exclChecksum.7, %665 ]
  %667 = ptrtoint i32* %pli4.7 to i64
  %668 = ptrtoint i32* %221 to i64
  %669 = sub i64 %667, %668
  %670 = sdiv exact i64 %669, 4
  %671 = trunc i64 %670 to i32
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %673, label %680

; <label>:673                                     ; preds = %666
  %674 = sub nsw i32 %671, 1
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i32* %221, i64 %675
  %677 = load i32* %676, align 4
  %678 = sext i32 %671 to i64
  %679 = getelementptr inbounds i32* %221, i64 %678
  store i32 %677, i32* %679, align 4
  br label %680

; <label>:680                                     ; preds = %673, %666
  br label %681

; <label>:681                                     ; preds = %703, %680
  %plin.8 = phi i32* [ %plin.7, %680 ], [ %plin.9, %703 ]
  %plix.0 = phi i32* [ %249, %680 ], [ %plix.1, %703 ]
  %plim.0 = phi i32* [ %263, %680 ], [ %plim.1, %703 ]
  %k18.0 = phi i32 [ 0, %680 ], [ %704, %703 ]
  %682 = icmp slt i32 %k18.0, %671
  br i1 %682, label %683, label %705

; <label>:683                                     ; preds = %681
  %684 = sext i32 %k18.0 to i64
  %685 = getelementptr inbounds i32* %221, i64 %684
  %686 = load i32* %685, align 4
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds %struct.CompAtom* %36, i64 %687
  %689 = getelementptr inbounds %struct.CompAtom* %688, i32 0, i32 2
  %690 = load i32* %689, align 4
  %691 = and i32 %690, 4194303
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8* %300, i64 %692
  %694 = load i8* %693, align 1
  %695 = sext i8 %694 to i32
  switch i32 %695, label %702 [
    i32 0, label %696
    i32 1, label %698
    i32 2, label %700
  ]

; <label>:696                                     ; preds = %683
  %697 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %686, i32* %plin.8, align 4
  br label %702

; <label>:698                                     ; preds = %683
  %699 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %686, i32* %plix.0, align 4
  br label %702

; <label>:700                                     ; preds = %683
  %701 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %686, i32* %plim.0, align 4
  br label %702

; <label>:702                                     ; preds = %700, %698, %696, %683
  %plin.9 = phi i32* [ %plin.8, %683 ], [ %plin.8, %700 ], [ %plin.8, %698 ], [ %697, %696 ]
  %plix.1 = phi i32* [ %plix.0, %683 ], [ %plix.0, %700 ], [ %699, %698 ], [ %plix.0, %696 ]
  %plim.1 = phi i32* [ %plim.0, %683 ], [ %701, %700 ], [ %plim.0, %698 ], [ %plim.0, %696 ]
  br label %703

; <label>:703                                     ; preds = %702
  %704 = add nsw i32 %k18.0, 1
  br label %681

; <label>:705                                     ; preds = %681
  %706 = ptrtoint i32* %plix.0 to i64
  %707 = ptrtoint i32* %249 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %exclChecksum.8 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plim.0 to i64
  %714 = ptrtoint i32* %263 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = sext i32 %712 to i64
  %718 = add nsw i64 %717, %716
  %719 = trunc i64 %718 to i32
  %720 = ptrtoint i32* %plin.8 to i64
  %721 = ptrtoint i32* %235 to i64
  %722 = sub i64 %720, %721
  %723 = sdiv exact i64 %722, 4
  %724 = trunc i64 %723 to i32
  br label %725

; <label>:725                                     ; preds = %911, %705
  %k18.1 = phi i32 [ 0, %705 ], [ %912, %911 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %705 ], [ %904, %911 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %705 ], [ %895, %911 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %705 ], [ %893, %911 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %705 ], [ %884, %911 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %705 ], [ %882, %911 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %705 ], [ %880, %911 ]
  %fullElectEnergy_s.1 = phi double [ %fullElectEnergy_s.0, %705 ], [ %863, %911 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %705 ], [ %861, %911 ]
  %vdwEnergy_s.1 = phi double [ %vdwEnergy_s.0, %705 ], [ %843, %911 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %705 ], [ %841, %911 ]
  %726 = icmp slt i32 %k18.1, %724
  br i1 %726, label %727, label %913

; <label>:727                                     ; preds = %725
  %728 = sext i32 %k18.1 to i64
  %729 = getelementptr inbounds i32* %235, i64 %728
  %730 = load i32* %729, align 4
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds %struct.CompAtom* %36, i64 %731
  %733 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %734 = getelementptr inbounds %class.Vector* %733, i32 0, i32 0
  %735 = load double* %734, align 8
  %736 = fsub double %303, %735
  %737 = fmul double %736, %736
  %738 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %739 = getelementptr inbounds %class.Vector* %738, i32 0, i32 1
  %740 = load double* %739, align 8
  %741 = fsub double %306, %740
  %742 = fmul double %741, %741
  %743 = fadd double %737, %742
  %744 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %745 = getelementptr inbounds %class.Vector* %744, i32 0, i32 2
  %746 = load double* %745, align 8
  %747 = fsub double %309, %746
  %748 = fmul double %747, %747
  %749 = fadd double %743, %748
  %750 = fptrunc double %749 to float
  %751 = bitcast %union.anon.48* %r2f to float*
  store float %750, float* %751, align 4
  %752 = bitcast %union.anon.48* %r2f to i32*
  %753 = load i32* %752, align 4
  %754 = ashr i32 %753, 17
  %755 = add nsw i32 %754, %24
  %756 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 2
  %757 = load i32* %756, align 4
  %758 = and i32 %757, 4194303
  %759 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %758)
  %760 = zext i16 %759 to i32
  %761 = mul nsw i32 2, %760
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds %"struct.LJTable::TableEntry"* %523, i64 %762
  %764 = mul nsw i32 16, %755
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds double* %14, i64 %765
  %767 = getelementptr inbounds double* %766, i64 0
  %768 = load double* %767, align 8
  %769 = mul nsw i32 16, %755
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds double* %14, i64 %770
  %772 = getelementptr inbounds double* %771, i64 4
  %773 = getelementptr inbounds double* %772, i64 0
  %774 = load double* %773, align 8
  %775 = mul nsw i32 16, %755
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds double* %14, i64 %776
  %778 = getelementptr inbounds double* %777, i64 8
  %779 = getelementptr inbounds double* %778, i64 0
  %780 = load double* %779, align 8
  %781 = bitcast %union.anon.48* %r2f to i32*
  %782 = load i32* %781, align 4
  %783 = and i32 %782, -131072
  store i32 %783, i32* %781, align 4
  %784 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 1
  %785 = load float* %784, align 4
  %786 = fpext float %785 to double
  %787 = fmul double %517, %786
  %788 = bitcast %union.anon.48* %r2f to float*
  %789 = load float* %788, align 4
  %790 = fpext float %789 to double
  %791 = fsub double %749, %790
  %792 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 2
  %793 = load i32* %792, align 4
  %794 = lshr i32 %793, 28
  %795 = mul nsw i32 2, %794
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds double* %511, i64 %796
  %798 = load double* %797, align 8
  %799 = mul nsw i32 2, %794
  %800 = add nsw i32 %799, 1
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds double* %511, i64 %801
  %803 = load double* %802, align 8
  %804 = getelementptr inbounds %"struct.LJTable::TableEntry"* %763, i32 0, i32 0
  %805 = load double* %804, align 8
  %806 = fmul double %15, %805
  %807 = getelementptr inbounds %"struct.LJTable::TableEntry"* %763, i32 0, i32 1
  %808 = load double* %807, align 8
  %809 = fmul double %15, %808
  %810 = fmul double %806, %768
  %811 = fmul double %809, %774
  %812 = fsub double %810, %811
  %813 = getelementptr inbounds double* %766, i64 3
  %814 = load double* %813, align 8
  %815 = fmul double %806, %814
  %816 = getelementptr inbounds double* %772, i64 3
  %817 = load double* %816, align 8
  %818 = fmul double %809, %817
  %819 = fsub double %815, %818
  %820 = getelementptr inbounds double* %766, i64 2
  %821 = load double* %820, align 8
  %822 = fmul double %806, %821
  %823 = getelementptr inbounds double* %772, i64 2
  %824 = load double* %823, align 8
  %825 = fmul double %809, %824
  %826 = fsub double %822, %825
  %827 = getelementptr inbounds double* %766, i64 1
  %828 = load double* %827, align 8
  %829 = fmul double %806, %828
  %830 = getelementptr inbounds double* %772, i64 1
  %831 = load double* %830, align 8
  %832 = fmul double %809, %831
  %833 = fsub double %829, %832
  %834 = fmul double %791, %819
  %835 = fadd double %834, %826
  %836 = fmul double %835, %791
  %837 = fadd double %836, %833
  %838 = fmul double %837, %791
  %839 = fadd double %838, %812
  %840 = fmul double %798, %839
  %841 = fadd double %vdwEnergy.1, %840
  %842 = fmul double %803, %839
  %843 = fadd double %vdwEnergy_s.1, %842
  %844 = getelementptr inbounds double* %778, i64 1
  %845 = load double* %844, align 8
  %846 = getelementptr inbounds double* %778, i64 2
  %847 = load double* %846, align 8
  %848 = getelementptr inbounds double* %778, i64 3
  %849 = load double* %848, align 8
  %850 = fmul double %849, %787
  %851 = fmul double %847, %787
  %852 = fmul double %845, %787
  %853 = fmul double %780, %787
  %854 = fmul double %791, %850
  %855 = fadd double %854, %851
  %856 = fmul double %855, %791
  %857 = fadd double %856, %852
  %858 = fmul double %857, %791
  %859 = fadd double %858, %853
  %860 = fmul double %798, %859
  %861 = fadd double %fullElectEnergy.1, %860
  %862 = fmul double %803, %859
  %863 = fadd double %fullElectEnergy_s.1, %862
  %864 = fadd double %850, %819
  %865 = fadd double %851, %826
  %866 = fadd double %852, %833
  %867 = fadd double %853, %812
  %868 = fmul double 3.000000e+00, %791
  %869 = fmul double %868, %864
  %870 = fmul double 2.000000e+00, %865
  %871 = fadd double %869, %870
  %872 = fmul double %871, %791
  %873 = fadd double %872, %866
  %874 = fmul double -2.000000e+00, %873
  %875 = fmul double %874, %798
  %876 = sext i32 %730 to i64
  %877 = getelementptr inbounds %class.Vector* %269, i64 %876
  %878 = fmul double %875, %736
  %879 = fmul double %878, %736
  %880 = fadd double %fullElectVirial_xx.1, %879
  %881 = fmul double %878, %741
  %882 = fadd double %fullElectVirial_xy.1, %881
  %883 = fmul double %878, %747
  %884 = fadd double %fullElectVirial_xz.1, %883
  %885 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %886 = load double* %885, align 8
  %887 = fadd double %886, %878
  store double %887, double* %885, align 8
  %888 = getelementptr inbounds %class.Vector* %877, i32 0, i32 0
  %889 = load double* %888, align 8
  %890 = fsub double %889, %878
  store double %890, double* %888, align 8
  %891 = fmul double %875, %741
  %892 = fmul double %891, %741
  %893 = fadd double %fullElectVirial_yy.1, %892
  %894 = fmul double %891, %747
  %895 = fadd double %fullElectVirial_yz.1, %894
  %896 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %897 = load double* %896, align 8
  %898 = fadd double %897, %891
  store double %898, double* %896, align 8
  %899 = getelementptr inbounds %class.Vector* %877, i32 0, i32 1
  %900 = load double* %899, align 8
  %901 = fsub double %900, %891
  store double %901, double* %899, align 8
  %902 = fmul double %875, %747
  %903 = fmul double %902, %747
  %904 = fadd double %fullElectVirial_zz.1, %903
  %905 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %906 = load double* %905, align 8
  %907 = fadd double %906, %902
  store double %907, double* %905, align 8
  %908 = getelementptr inbounds %class.Vector* %877, i32 0, i32 2
  %909 = load double* %908, align 8
  %910 = fsub double %909, %902
  store double %910, double* %908, align 8
  br label %911

; <label>:911                                     ; preds = %727
  %912 = add nsw i32 %k18.1, 1
  br label %725

; <label>:913                                     ; preds = %725
  %914 = ptrtoint i32* %plim.0 to i64
  %915 = ptrtoint i32* %263 to i64
  %916 = sub i64 %914, %915
  %917 = sdiv exact i64 %916, 4
  %918 = trunc i64 %917 to i32
  br label %919

; <label>:919                                     ; preds = %1126, %913
  %k18.2 = phi i32 [ 0, %913 ], [ %1127, %1126 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %913 ], [ %1119, %1126 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %913 ], [ %1110, %1126 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %913 ], [ %1108, %1126 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %913 ], [ %1099, %1126 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %913 ], [ %1097, %1126 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %913 ], [ %1095, %1126 ]
  %fullElectEnergy_s.2 = phi double [ %fullElectEnergy_s.1, %913 ], [ %1078, %1126 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %913 ], [ %1076, %1126 ]
  %vdwEnergy_s.2 = phi double [ %vdwEnergy_s.1, %913 ], [ %1038, %1126 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %913 ], [ %1036, %1126 ]
  %920 = icmp slt i32 %k18.2, %918
  br i1 %920, label %921, label %1128

; <label>:921                                     ; preds = %919
  %922 = sext i32 %k18.2 to i64
  %923 = getelementptr inbounds i32* %263, i64 %922
  %924 = load i32* %923, align 4
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds %struct.CompAtom* %36, i64 %925
  %927 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 0
  %928 = getelementptr inbounds %class.Vector* %927, i32 0, i32 0
  %929 = load double* %928, align 8
  %930 = fsub double %303, %929
  %931 = fmul double %930, %930
  %932 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 0
  %933 = getelementptr inbounds %class.Vector* %932, i32 0, i32 1
  %934 = load double* %933, align 8
  %935 = fsub double %306, %934
  %936 = fmul double %935, %935
  %937 = fadd double %931, %936
  %938 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 0
  %939 = getelementptr inbounds %class.Vector* %938, i32 0, i32 2
  %940 = load double* %939, align 8
  %941 = fsub double %309, %940
  %942 = fmul double %941, %941
  %943 = fadd double %937, %942
  %944 = fptrunc double %943 to float
  %945 = bitcast %union.anon.49* %r2f29 to float*
  store float %944, float* %945, align 4
  %946 = bitcast %union.anon.49* %r2f29 to i32*
  %947 = load i32* %946, align 4
  %948 = ashr i32 %947, 17
  %949 = add nsw i32 %948, %24
  %950 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 2
  %951 = load i32* %950, align 4
  %952 = and i32 %951, 4194303
  %953 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %952)
  %954 = zext i16 %953 to i32
  %955 = mul nsw i32 2, %954
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds %"struct.LJTable::TableEntry"* %523, i64 %956
  %958 = getelementptr inbounds %"struct.LJTable::TableEntry"* %957, i64 1
  %959 = mul nsw i32 16, %949
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds double* %14, i64 %960
  %962 = getelementptr inbounds double* %961, i64 0
  %963 = load double* %962, align 8
  %964 = mul nsw i32 16, %949
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds double* %14, i64 %965
  %967 = getelementptr inbounds double* %966, i64 4
  %968 = getelementptr inbounds double* %967, i64 0
  %969 = load double* %968, align 8
  %970 = mul nsw i32 16, %949
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds double* %14, i64 %971
  %973 = getelementptr inbounds double* %972, i64 8
  %974 = getelementptr inbounds double* %973, i64 0
  %975 = load double* %974, align 8
  %976 = bitcast %union.anon.49* %r2f29 to i32*
  %977 = load i32* %976, align 4
  %978 = and i32 %977, -131072
  store i32 %978, i32* %976, align 4
  %979 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 1
  %980 = load float* %979, align 4
  %981 = fpext float %980 to double
  %982 = fmul double %517, %981
  %983 = bitcast %union.anon.49* %r2f29 to float*
  %984 = load float* %983, align 4
  %985 = fpext float %984 to double
  %986 = fsub double %943, %985
  %987 = getelementptr inbounds %struct.CompAtom* %926, i32 0, i32 2
  %988 = load i32* %987, align 4
  %989 = lshr i32 %988, 28
  %990 = mul nsw i32 2, %989
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds double* %511, i64 %991
  %993 = load double* %992, align 8
  %994 = mul nsw i32 2, %989
  %995 = add nsw i32 %994, 1
  %996 = sext i32 %995 to i64
  %997 = getelementptr inbounds double* %511, i64 %996
  %998 = load double* %997, align 8
  %999 = getelementptr inbounds %"struct.LJTable::TableEntry"* %958, i32 0, i32 0
  %1000 = load double* %999, align 8
  %1001 = fmul double %15, %1000
  %1002 = getelementptr inbounds %"struct.LJTable::TableEntry"* %958, i32 0, i32 1
  %1003 = load double* %1002, align 8
  %1004 = fmul double %15, %1003
  %1005 = fmul double %1001, %963
  %1006 = fmul double %1004, %969
  %1007 = fsub double %1005, %1006
  %1008 = getelementptr inbounds double* %961, i64 3
  %1009 = load double* %1008, align 8
  %1010 = fmul double %1001, %1009
  %1011 = getelementptr inbounds double* %967, i64 3
  %1012 = load double* %1011, align 8
  %1013 = fmul double %1004, %1012
  %1014 = fsub double %1010, %1013
  %1015 = getelementptr inbounds double* %961, i64 2
  %1016 = load double* %1015, align 8
  %1017 = fmul double %1001, %1016
  %1018 = getelementptr inbounds double* %967, i64 2
  %1019 = load double* %1018, align 8
  %1020 = fmul double %1004, %1019
  %1021 = fsub double %1017, %1020
  %1022 = getelementptr inbounds double* %961, i64 1
  %1023 = load double* %1022, align 8
  %1024 = fmul double %1001, %1023
  %1025 = getelementptr inbounds double* %967, i64 1
  %1026 = load double* %1025, align 8
  %1027 = fmul double %1004, %1026
  %1028 = fsub double %1024, %1027
  %1029 = fmul double %986, %1014
  %1030 = fadd double %1029, %1021
  %1031 = fmul double %1030, %986
  %1032 = fadd double %1031, %1028
  %1033 = fmul double %1032, %986
  %1034 = fadd double %1033, %1007
  %1035 = fmul double %993, %1034
  %1036 = fadd double %vdwEnergy.2, %1035
  %1037 = fmul double %998, %1034
  %1038 = fadd double %vdwEnergy_s.2, %1037
  %1039 = getelementptr inbounds double* %973, i64 1
  %1040 = load double* %1039, align 8
  %1041 = getelementptr inbounds double* %973, i64 2
  %1042 = load double* %1041, align 8
  %1043 = getelementptr inbounds double* %973, i64 3
  %1044 = load double* %1043, align 8
  %1045 = getelementptr inbounds double* %14, i64 12
  %1046 = mul nsw i32 16, %949
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds double* %1045, i64 %1047
  %1049 = getelementptr inbounds double* %1048, i64 0
  %1050 = load double* %1049, align 8
  %1051 = fmul double %17, %1050
  %1052 = fsub double %975, %1051
  %1053 = getelementptr inbounds double* %1048, i64 1
  %1054 = load double* %1053, align 8
  %1055 = fmul double %17, %1054
  %1056 = fsub double %1040, %1055
  %1057 = getelementptr inbounds double* %1048, i64 2
  %1058 = load double* %1057, align 8
  %1059 = fmul double %17, %1058
  %1060 = fsub double %1042, %1059
  %1061 = getelementptr inbounds double* %1048, i64 3
  %1062 = load double* %1061, align 8
  %1063 = fmul double %17, %1062
  %1064 = fsub double %1044, %1063
  %1065 = fmul double %1064, %982
  %1066 = fmul double %1060, %982
  %1067 = fmul double %1056, %982
  %1068 = fmul double %1052, %982
  %1069 = fmul double %986, %1065
  %1070 = fadd double %1069, %1066
  %1071 = fmul double %1070, %986
  %1072 = fadd double %1071, %1067
  %1073 = fmul double %1072, %986
  %1074 = fadd double %1073, %1068
  %1075 = fmul double %993, %1074
  %1076 = fadd double %fullElectEnergy.2, %1075
  %1077 = fmul double %998, %1074
  %1078 = fadd double %fullElectEnergy_s.2, %1077
  %1079 = fadd double %1065, %1014
  %1080 = fadd double %1066, %1021
  %1081 = fadd double %1067, %1028
  %1082 = fadd double %1068, %1007
  %1083 = fmul double 3.000000e+00, %986
  %1084 = fmul double %1083, %1079
  %1085 = fmul double 2.000000e+00, %1080
  %1086 = fadd double %1084, %1085
  %1087 = fmul double %1086, %986
  %1088 = fadd double %1087, %1081
  %1089 = fmul double -2.000000e+00, %1088
  %1090 = fmul double %1089, %993
  %1091 = sext i32 %924 to i64
  %1092 = getelementptr inbounds %class.Vector* %269, i64 %1091
  %1093 = fmul double %1090, %930
  %1094 = fmul double %1093, %930
  %1095 = fadd double %fullElectVirial_xx.2, %1094
  %1096 = fmul double %1093, %935
  %1097 = fadd double %fullElectVirial_xy.2, %1096
  %1098 = fmul double %1093, %941
  %1099 = fadd double %fullElectVirial_xz.2, %1098
  %1100 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1101 = load double* %1100, align 8
  %1102 = fadd double %1101, %1093
  store double %1102, double* %1100, align 8
  %1103 = getelementptr inbounds %class.Vector* %1092, i32 0, i32 0
  %1104 = load double* %1103, align 8
  %1105 = fsub double %1104, %1093
  store double %1105, double* %1103, align 8
  %1106 = fmul double %1090, %935
  %1107 = fmul double %1106, %935
  %1108 = fadd double %fullElectVirial_yy.2, %1107
  %1109 = fmul double %1106, %941
  %1110 = fadd double %fullElectVirial_yz.2, %1109
  %1111 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1112 = load double* %1111, align 8
  %1113 = fadd double %1112, %1106
  store double %1113, double* %1111, align 8
  %1114 = getelementptr inbounds %class.Vector* %1092, i32 0, i32 1
  %1115 = load double* %1114, align 8
  %1116 = fsub double %1115, %1106
  store double %1116, double* %1114, align 8
  %1117 = fmul double %1090, %941
  %1118 = fmul double %1117, %941
  %1119 = fadd double %fullElectVirial_zz.2, %1118
  %1120 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1121 = load double* %1120, align 8
  %1122 = fadd double %1121, %1117
  store double %1122, double* %1120, align 8
  %1123 = getelementptr inbounds %class.Vector* %1092, i32 0, i32 2
  %1124 = load double* %1123, align 8
  %1125 = fsub double %1124, %1117
  store double %1125, double* %1123, align 8
  br label %1126

; <label>:1126                                    ; preds = %921
  %1127 = add nsw i32 %k18.2, 1
  br label %919

; <label>:1128                                    ; preds = %919
  %1129 = ptrtoint i32* %plix.0 to i64
  %1130 = ptrtoint i32* %249 to i64
  %1131 = sub i64 %1129, %1130
  %1132 = sdiv exact i64 %1131, 4
  %1133 = trunc i64 %1132 to i32
  br label %1134

; <label>:1134                                    ; preds = %1273, %1128
  %k18.3 = phi i32 [ 0, %1128 ], [ %1274, %1273 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1128 ], [ %1266, %1273 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1128 ], [ %1257, %1273 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1128 ], [ %1255, %1273 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1128 ], [ %1246, %1273 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1128 ], [ %1244, %1273 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1128 ], [ %1242, %1273 ]
  %fullElectEnergy_s.3 = phi double [ %fullElectEnergy_s.2, %1128 ], [ %1229, %1273 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1128 ], [ %1227, %1273 ]
  %1135 = icmp slt i32 %k18.3, %1133
  br i1 %1135, label %1136, label %1275

; <label>:1136                                    ; preds = %1134
  %1137 = sext i32 %k18.3 to i64
  %1138 = getelementptr inbounds i32* %249, i64 %1137
  %1139 = load i32* %1138, align 4
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds %struct.CompAtom* %36, i64 %1140
  %1142 = getelementptr inbounds %struct.CompAtom* %1141, i32 0, i32 0
  %1143 = getelementptr inbounds %class.Vector* %1142, i32 0, i32 0
  %1144 = load double* %1143, align 8
  %1145 = fsub double %303, %1144
  %1146 = fmul double %1145, %1145
  %1147 = getelementptr inbounds %struct.CompAtom* %1141, i32 0, i32 0
  %1148 = getelementptr inbounds %class.Vector* %1147, i32 0, i32 1
  %1149 = load double* %1148, align 8
  %1150 = fsub double %306, %1149
  %1151 = fmul double %1150, %1150
  %1152 = fadd double %1146, %1151
  %1153 = getelementptr inbounds %struct.CompAtom* %1141, i32 0, i32 0
  %1154 = getelementptr inbounds %class.Vector* %1153, i32 0, i32 2
  %1155 = load double* %1154, align 8
  %1156 = fsub double %309, %1155
  %1157 = fmul double %1156, %1156
  %1158 = fadd double %1152, %1157
  %1159 = fptrunc double %1158 to float
  %1160 = bitcast %union.anon.50* %r2f66 to float*
  store float %1159, float* %1160, align 4
  %1161 = bitcast %union.anon.50* %r2f66 to i32*
  %1162 = load i32* %1161, align 4
  %1163 = ashr i32 %1162, 17
  %1164 = add nsw i32 %1163, %24
  %1165 = mul nsw i32 16, %1164
  %1166 = sext i32 %1165 to i64
  %1167 = getelementptr inbounds double* %14, i64 %1166
  %1168 = getelementptr inbounds double* %1167, i64 8
  %1169 = getelementptr inbounds double* %1168, i64 0
  %1170 = load double* %1169, align 8
  %1171 = bitcast %union.anon.50* %r2f66 to i32*
  %1172 = load i32* %1171, align 4
  %1173 = and i32 %1172, -131072
  store i32 %1173, i32* %1171, align 4
  %1174 = getelementptr inbounds %struct.CompAtom* %1141, i32 0, i32 1
  %1175 = load float* %1174, align 4
  %1176 = fpext float %1175 to double
  %1177 = fmul double %517, %1176
  %1178 = bitcast %union.anon.50* %r2f66 to float*
  %1179 = load float* %1178, align 4
  %1180 = fpext float %1179 to double
  %1181 = fsub double %1158, %1180
  %1182 = getelementptr inbounds %struct.CompAtom* %1141, i32 0, i32 2
  %1183 = load i32* %1182, align 4
  %1184 = lshr i32 %1183, 28
  %1185 = mul nsw i32 2, %1184
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds double* %511, i64 %1186
  %1188 = load double* %1187, align 8
  %1189 = mul nsw i32 2, %1184
  %1190 = add nsw i32 %1189, 1
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds double* %511, i64 %1191
  %1193 = load double* %1192, align 8
  %1194 = getelementptr inbounds double* %1168, i64 1
  %1195 = load double* %1194, align 8
  %1196 = getelementptr inbounds double* %1168, i64 2
  %1197 = load double* %1196, align 8
  %1198 = getelementptr inbounds double* %1168, i64 3
  %1199 = load double* %1198, align 8
  %1200 = getelementptr inbounds double* %14, i64 12
  %1201 = mul nsw i32 16, %1164
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds double* %1200, i64 %1202
  %1204 = getelementptr inbounds double* %1203, i64 0
  %1205 = load double* %1204, align 8
  %1206 = fsub double %1170, %1205
  %1207 = getelementptr inbounds double* %1203, i64 1
  %1208 = load double* %1207, align 8
  %1209 = fsub double %1195, %1208
  %1210 = getelementptr inbounds double* %1203, i64 2
  %1211 = load double* %1210, align 8
  %1212 = fsub double %1197, %1211
  %1213 = getelementptr inbounds double* %1203, i64 3
  %1214 = load double* %1213, align 8
  %1215 = fsub double %1199, %1214
  %1216 = fmul double %1215, %1177
  %1217 = fmul double %1212, %1177
  %1218 = fmul double %1209, %1177
  %1219 = fmul double %1206, %1177
  %1220 = fmul double %1181, %1216
  %1221 = fadd double %1220, %1217
  %1222 = fmul double %1221, %1181
  %1223 = fadd double %1222, %1218
  %1224 = fmul double %1223, %1181
  %1225 = fadd double %1224, %1219
  %1226 = fmul double %1188, %1225
  %1227 = fadd double %fullElectEnergy.3, %1226
  %1228 = fmul double %1193, %1225
  %1229 = fadd double %fullElectEnergy_s.3, %1228
  %1230 = fmul double 3.000000e+00, %1181
  %1231 = fmul double %1230, %1216
  %1232 = fmul double 2.000000e+00, %1217
  %1233 = fadd double %1231, %1232
  %1234 = fmul double %1233, %1181
  %1235 = fadd double %1234, %1218
  %1236 = fmul double -2.000000e+00, %1235
  %1237 = fmul double %1236, %1188
  %1238 = sext i32 %1139 to i64
  %1239 = getelementptr inbounds %class.Vector* %269, i64 %1238
  %1240 = fmul double %1237, %1145
  %1241 = fmul double %1240, %1145
  %1242 = fadd double %fullElectVirial_xx.3, %1241
  %1243 = fmul double %1240, %1150
  %1244 = fadd double %fullElectVirial_xy.3, %1243
  %1245 = fmul double %1240, %1156
  %1246 = fadd double %fullElectVirial_xz.3, %1245
  %1247 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1248 = load double* %1247, align 8
  %1249 = fadd double %1248, %1240
  store double %1249, double* %1247, align 8
  %1250 = getelementptr inbounds %class.Vector* %1239, i32 0, i32 0
  %1251 = load double* %1250, align 8
  %1252 = fsub double %1251, %1240
  store double %1252, double* %1250, align 8
  %1253 = fmul double %1237, %1150
  %1254 = fmul double %1253, %1150
  %1255 = fadd double %fullElectVirial_yy.3, %1254
  %1256 = fmul double %1253, %1156
  %1257 = fadd double %fullElectVirial_yz.3, %1256
  %1258 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1259 = load double* %1258, align 8
  %1260 = fadd double %1259, %1253
  store double %1260, double* %1258, align 8
  %1261 = getelementptr inbounds %class.Vector* %1239, i32 0, i32 1
  %1262 = load double* %1261, align 8
  %1263 = fsub double %1262, %1253
  store double %1263, double* %1261, align 8
  %1264 = fmul double %1237, %1156
  %1265 = fmul double %1264, %1156
  %1266 = fadd double %fullElectVirial_zz.3, %1265
  %1267 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1268 = load double* %1267, align 8
  %1269 = fadd double %1268, %1264
  store double %1269, double* %1267, align 8
  %1270 = getelementptr inbounds %class.Vector* %1239, i32 0, i32 2
  %1271 = load double* %1270, align 8
  %1272 = fsub double %1271, %1264
  store double %1272, double* %1270, align 8
  br label %1273

; <label>:1273                                    ; preds = %1136
  %1274 = add nsw i32 %k18.3, 1
  br label %1134

; <label>:1275                                    ; preds = %1134
  br label %1276

; <label>:1276                                    ; preds = %1275, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1275 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1275 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1275 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1275 ], [ %491, %488 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %339 ], [ %fullElectVirial_zz.3, %1275 ], [ %fullElectVirial_zz.0, %488 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %339 ], [ %fullElectVirial_yz.3, %1275 ], [ %fullElectVirial_yz.0, %488 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %339 ], [ %fullElectVirial_yy.3, %1275 ], [ %fullElectVirial_yy.0, %488 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %339 ], [ %fullElectVirial_xz.3, %1275 ], [ %fullElectVirial_xz.0, %488 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %339 ], [ %fullElectVirial_xy.3, %1275 ], [ %fullElectVirial_xy.0, %488 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %339 ], [ %fullElectVirial_xx.3, %1275 ], [ %fullElectVirial_xx.0, %488 ]
  %fullElectEnergy_s.4 = phi double [ %fullElectEnergy_s.0, %339 ], [ %fullElectEnergy_s.3, %1275 ], [ %fullElectEnergy_s.0, %488 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %339 ], [ %fullElectEnergy.3, %1275 ], [ %fullElectEnergy.0, %488 ]
  %vdwEnergy_s.3 = phi double [ %vdwEnergy_s.0, %339 ], [ %vdwEnergy_s.2, %1275 ], [ %vdwEnergy_s.0, %488 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %339 ], [ %vdwEnergy.2, %1275 ], [ %vdwEnergy.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %719, %1275 ], [ %exclChecksum.0, %488 ]
  %1277 = add nsw i32 %i.2, 1
  br label %283

; <label>:1278                                    ; preds = %283
  %1279 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1280 = icmp ne i32* %50, %1279
  br i1 %1280, label %1281, label %1286

; <label>:1281                                    ; preds = %1278
  %1282 = icmp eq i32* %50, null
  br i1 %1282, label %1285, label %1283

; <label>:1283                                    ; preds = %1281
  %1284 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1284) #8
  br label %1285

; <label>:1285                                    ; preds = %1283, %1281
  br label %1286

; <label>:1286                                    ; preds = %1285, %1278
  %1287 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1288 = icmp ne i32* %64, %1287
  br i1 %1288, label %1289, label %1294

; <label>:1289                                    ; preds = %1286
  %1290 = icmp eq i32* %64, null
  br i1 %1290, label %1293, label %1291

; <label>:1291                                    ; preds = %1289
  %1292 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1292) #8
  br label %1293

; <label>:1293                                    ; preds = %1291, %1289
  br label %1294

; <label>:1294                                    ; preds = %1293, %1286
  %1295 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1296 = icmp ne i32* %78, %1295
  br i1 %1296, label %1297, label %1302

; <label>:1297                                    ; preds = %1294
  %1298 = icmp eq i32* %78, null
  br i1 %1298, label %1301, label %1299

; <label>:1299                                    ; preds = %1297
  %1300 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1300) #8
  br label %1301

; <label>:1301                                    ; preds = %1299, %1297
  br label %1302

; <label>:1302                                    ; preds = %1301, %1294
  %1303 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1304 = icmp ne i32* %207, %1303
  br i1 %1304, label %1305, label %1310

; <label>:1305                                    ; preds = %1302
  %1306 = icmp eq i32* %207, null
  br i1 %1306, label %1309, label %1307

; <label>:1307                                    ; preds = %1305
  %1308 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1308) #8
  br label %1309

; <label>:1309                                    ; preds = %1307, %1305
  br label %1310

; <label>:1310                                    ; preds = %1309, %1302
  %1311 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1312 = icmp ne i32* %221, %1311
  br i1 %1312, label %1313, label %1318

; <label>:1313                                    ; preds = %1310
  %1314 = icmp eq i32* %221, null
  br i1 %1314, label %1317, label %1315

; <label>:1315                                    ; preds = %1313
  %1316 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1316) #8
  br label %1317

; <label>:1317                                    ; preds = %1315, %1313
  br label %1318

; <label>:1318                                    ; preds = %1317, %1310
  %1319 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1320 = icmp ne i32* %235, %1319
  br i1 %1320, label %1321, label %1326

; <label>:1321                                    ; preds = %1318
  %1322 = icmp eq i32* %235, null
  br i1 %1322, label %1325, label %1323

; <label>:1323                                    ; preds = %1321
  %1324 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1324) #8
  br label %1325

; <label>:1325                                    ; preds = %1323, %1321
  br label %1326

; <label>:1326                                    ; preds = %1325, %1318
  %1327 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1328 = icmp ne i32* %249, %1327
  br i1 %1328, label %1329, label %1334

; <label>:1329                                    ; preds = %1326
  %1330 = icmp eq i32* %249, null
  br i1 %1330, label %1333, label %1331

; <label>:1331                                    ; preds = %1329
  %1332 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1332) #8
  br label %1333

; <label>:1333                                    ; preds = %1331, %1329
  br label %1334

; <label>:1334                                    ; preds = %1333, %1326
  %1335 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1336 = icmp ne i32* %263, %1335
  br i1 %1336, label %1337, label %1342

; <label>:1337                                    ; preds = %1334
  %1338 = icmp eq i32* %263, null
  br i1 %1338, label %1341, label %1339

; <label>:1339                                    ; preds = %1337
  %1340 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1340) #8
  br label %1341

; <label>:1341                                    ; preds = %1339, %1337
  br label %1342

; <label>:1342                                    ; preds = %1341, %1334
  %1343 = sitofp i32 %exclChecksum.0 to double
  %1344 = getelementptr inbounds double* %6, i64 22
  %1345 = load double* %1344, align 8
  %1346 = fadd double %1345, %1343
  store double %1346, double* %1344, align 8
  %1347 = getelementptr inbounds double* %6, i64 2
  %1348 = load double* %1347, align 8
  %1349 = fadd double %1348, %vdwEnergy.0
  store double %1349, double* %1347, align 8
  %1350 = getelementptr inbounds double* %6, i64 25
  %1351 = load double* %1350, align 8
  %1352 = fadd double %1351, %vdwEnergy_s.0
  store double %1352, double* %1350, align 8
  %1353 = getelementptr inbounds double* %6, i64 1
  %1354 = load double* %1353, align 8
  %1355 = fadd double %1354, %fullElectEnergy.0
  store double %1355, double* %1353, align 8
  %1356 = getelementptr inbounds double* %6, i64 24
  %1357 = load double* %1356, align 8
  %1358 = fadd double %1357, %fullElectEnergy_s.0
  store double %1358, double* %1356, align 8
  %1359 = getelementptr inbounds double* %6, i64 12
  %1360 = load double* %1359, align 8
  %1361 = fadd double %1360, %fullElectVirial_xx.0
  store double %1361, double* %1359, align 8
  %1362 = getelementptr inbounds double* %6, i64 13
  %1363 = load double* %1362, align 8
  %1364 = fadd double %1363, %fullElectVirial_xy.0
  store double %1364, double* %1362, align 8
  %1365 = getelementptr inbounds double* %6, i64 14
  %1366 = load double* %1365, align 8
  %1367 = fadd double %1366, %fullElectVirial_xz.0
  store double %1367, double* %1365, align 8
  %1368 = getelementptr inbounds double* %6, i64 15
  %1369 = load double* %1368, align 8
  %1370 = fadd double %1369, %fullElectVirial_xy.0
  store double %1370, double* %1368, align 8
  %1371 = getelementptr inbounds double* %6, i64 16
  %1372 = load double* %1371, align 8
  %1373 = fadd double %1372, %fullElectVirial_yy.0
  store double %1373, double* %1371, align 8
  %1374 = getelementptr inbounds double* %6, i64 17
  %1375 = load double* %1374, align 8
  %1376 = fadd double %1375, %fullElectVirial_yz.0
  store double %1376, double* %1374, align 8
  %1377 = getelementptr inbounds double* %6, i64 18
  %1378 = load double* %1377, align 8
  %1379 = fadd double %1378, %fullElectVirial_xz.0
  store double %1379, double* %1377, align 8
  %1380 = getelementptr inbounds double* %6, i64 19
  %1381 = load double* %1380, align 8
  %1382 = fadd double %1381, %fullElectVirial_yz.0
  store double %1382, double* %1380, align 8
  %1383 = getelementptr inbounds double* %6, i64 20
  %1384 = load double* %1383, align 8
  %1385 = fadd double %1384, %fullElectVirial_zz.0
  store double %1385, double* %1383, align 8
  br label %1386

; <label>:1386                                    ; preds = %1342, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil36calc_self_energy_merge_fullelect_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.59, align 4
  %r2f28 = alloca %union.anon.60, align 4
  %r2f65 = alloca %union.anon.61, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1445

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1445

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1335, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1335 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1335 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1335 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1335 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1335 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1335 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1336, %1335 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_zz.4, %1335 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yz.4, %1335 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yy.4, %1335 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xz.4, %1335 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xy.4, %1335 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xx.4, %1335 ]
  %fullElectEnergy_s.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectEnergy_s.4, %1335 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectEnergy.4, %1335 ]
  %vdwEnergy_s.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy_s.3, %1335 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy.3, %1335 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1335 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1337

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1335

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %533 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 28
  %536 = mul nsw i32 6, %535
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds double* %532, i64 %537
  %539 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %540 = load float* %539, align 4
  %541 = fpext float %540 to double
  %542 = fmul double 3.320636e+02, %541
  %543 = fmul double %542, %15
  %544 = fmul double %543, %9
  %545 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %546 = load i32* %545, align 4
  %547 = and i32 %546, 4194303
  %548 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %547)
  %549 = zext i16 %548 to i32
  %550 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %549)
  %551 = icmp ne i32 %531, 0
  br i1 %551, label %552, label %614

; <label>:552                                     ; preds = %529
  br label %553

; <label>:553                                     ; preds = %611, %552
  %pli3.0 = phi i32* [ %202, %552 ], [ %pli3.2, %611 ]
  %plin.0 = phi i32* [ %216, %552 ], [ %plin.2, %611 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %552 ], [ %612, %611 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %552 ], [ %exclChecksum.3, %611 ]
  %554 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %554, label %555, label %613

; <label>:555                                     ; preds = %553
  %556 = sext i32 %k.0 to i64
  %557 = getelementptr inbounds i32* %188, i64 %556
  %558 = load i32* %557, align 4
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %36, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 0
  %563 = load double* %562, align 8
  %564 = fsub double %287, %563
  %565 = fmul double %564, %564
  %566 = sext i32 %558 to i64
  %567 = getelementptr inbounds %struct.CompAtom* %36, i64 %566
  %568 = getelementptr inbounds %struct.CompAtom* %567, i32 0, i32 0
  %569 = getelementptr inbounds %class.Vector* %568, i32 0, i32 1
  %570 = load double* %569, align 8
  %571 = fsub double %290, %570
  %572 = fmul double %571, %571
  %573 = fadd double %565, %572
  %574 = sext i32 %558 to i64
  %575 = getelementptr inbounds %struct.CompAtom* %36, i64 %574
  %576 = getelementptr inbounds %struct.CompAtom* %575, i32 0, i32 0
  %577 = getelementptr inbounds %class.Vector* %576, i32 0, i32 2
  %578 = load double* %577, align 8
  %579 = fsub double %293, %578
  %580 = fmul double %579, %579
  %581 = fadd double %573, %580
  %582 = sext i32 %558 to i64
  %583 = getelementptr inbounds %struct.CompAtom* %36, i64 %582
  %584 = getelementptr inbounds %struct.CompAtom* %583, i32 0, i32 2
  %585 = load i32* %584, align 4
  %586 = lshr i32 %585, 26
  %587 = and i32 %586, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %610, label %589

; <label>:589                                     ; preds = %555
  %590 = fcmp ole double %581, %7
  br i1 %590, label %591, label %610

; <label>:591                                     ; preds = %589
  %592 = fcmp ole double %581, %21
  br i1 %592, label %593, label %596

; <label>:593                                     ; preds = %591
  %594 = add nsw i32 %exclChecksum.1, 1
  %595 = icmp ne i32 %594, 0
  br i1 %595, label %610, label %596

; <label>:596                                     ; preds = %593, %591
  %exclChecksum.2 = phi i32 [ %594, %593 ], [ %exclChecksum.1, %591 ]
  %597 = sext i32 %558 to i64
  %598 = getelementptr inbounds %struct.CompAtom* %36, i64 %597
  %599 = getelementptr inbounds %struct.CompAtom* %598, i32 0, i32 2
  %600 = load i32* %599, align 4
  %601 = and i32 %600, 4194303
  %602 = icmp sge i32 %601, %277
  br i1 %602, label %603, label %607

; <label>:603                                     ; preds = %596
  %604 = icmp sle i32 %601, %279
  br i1 %604, label %605, label %607

; <label>:605                                     ; preds = %603
  %606 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %558, i32* %pli3.0, align 4
  br label %609

; <label>:607                                     ; preds = %603, %596
  %608 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %558, i32* %plin.0, align 4
  br label %609

; <label>:609                                     ; preds = %607, %605
  %pli3.1 = phi i32* [ %606, %605 ], [ %pli3.0, %607 ]
  %plin.1 = phi i32* [ %plin.0, %605 ], [ %608, %607 ]
  br label %610

; <label>:610                                     ; preds = %609, %593, %589, %555
  %pli3.2 = phi i32* [ %pli3.0, %555 ], [ %pli3.0, %593 ], [ %pli3.1, %609 ], [ %pli3.0, %589 ]
  %plin.2 = phi i32* [ %plin.0, %555 ], [ %plin.0, %593 ], [ %plin.1, %609 ], [ %plin.0, %589 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %555 ], [ %594, %593 ], [ %exclChecksum.2, %609 ], [ %exclChecksum.1, %589 ]
  br label %611

; <label>:611                                     ; preds = %610
  %612 = add nsw i32 %k.0, 1
  br label %553

; <label>:613                                     ; preds = %553
  br label %693

; <label>:614                                     ; preds = %529
  %615 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %615, label %616, label %692

; <label>:616                                     ; preds = %614
  %617 = sext i32 %pairlistoffset.1 to i64
  %618 = getelementptr inbounds i32* %188, i64 %617
  %619 = load i32* %618, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds %struct.CompAtom* %36, i64 %620
  %622 = getelementptr inbounds %struct.CompAtom* %621, i32 0, i32 0
  %623 = getelementptr inbounds %class.Vector* %622, i32 0, i32 0
  %624 = load double* %623, align 8
  %625 = sext i32 %619 to i64
  %626 = getelementptr inbounds %struct.CompAtom* %36, i64 %625
  %627 = getelementptr inbounds %struct.CompAtom* %626, i32 0, i32 0
  %628 = getelementptr inbounds %class.Vector* %627, i32 0, i32 1
  %629 = load double* %628, align 8
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %36, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 2
  %634 = load double* %633, align 8
  %635 = sext i32 %619 to i64
  %636 = getelementptr inbounds %struct.CompAtom* %36, i64 %635
  %637 = getelementptr inbounds %struct.CompAtom* %636, i32 0, i32 2
  %638 = load i32* %637, align 4
  %639 = and i32 %638, 4194303
  br label %640

; <label>:640                                     ; preds = %685, %616
  %pli3.3 = phi i32* [ %202, %616 ], [ %pli3.5, %685 ]
  %plin.3 = phi i32* [ %216, %616 ], [ %plin.5, %685 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %616 ], [ %643, %685 ]
  %j210.0 = phi i32 [ %619, %616 ], [ %646, %685 ]
  %p_j_x11.0 = phi double [ %624, %616 ], [ %653, %685 ]
  %p_j_y12.0 = phi double [ %629, %616 ], [ %661, %685 ]
  %p_j_z13.0 = phi double [ %634, %616 ], [ %669, %685 ]
  %atom214.0 = phi i32 [ %639, %616 ], [ %690, %685 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %616 ], [ %exclChecksum.6, %685 ]
  %641 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %641, label %642, label %691

; <label>:642                                     ; preds = %640
  %643 = add nsw i32 %k9.0, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds i32* %188, i64 %644
  %646 = load i32* %645, align 4
  %647 = fsub double %287, %p_j_x11.0
  %648 = fmul double %647, %647
  %649 = sext i32 %646 to i64
  %650 = getelementptr inbounds %struct.CompAtom* %36, i64 %649
  %651 = getelementptr inbounds %struct.CompAtom* %650, i32 0, i32 0
  %652 = getelementptr inbounds %class.Vector* %651, i32 0, i32 0
  %653 = load double* %652, align 8
  %654 = fsub double %290, %p_j_y12.0
  %655 = fmul double %654, %654
  %656 = fadd double %648, %655
  %657 = sext i32 %646 to i64
  %658 = getelementptr inbounds %struct.CompAtom* %36, i64 %657
  %659 = getelementptr inbounds %struct.CompAtom* %658, i32 0, i32 0
  %660 = getelementptr inbounds %class.Vector* %659, i32 0, i32 1
  %661 = load double* %660, align 8
  %662 = fsub double %293, %p_j_z13.0
  %663 = fmul double %662, %662
  %664 = fadd double %656, %663
  %665 = sext i32 %646 to i64
  %666 = getelementptr inbounds %struct.CompAtom* %36, i64 %665
  %667 = getelementptr inbounds %struct.CompAtom* %666, i32 0, i32 0
  %668 = getelementptr inbounds %class.Vector* %667, i32 0, i32 2
  %669 = load double* %668, align 8
  %670 = fcmp ole double %664, %7
  br i1 %670, label %671, label %685

; <label>:671                                     ; preds = %642
  %672 = fcmp ole double %664, %21
  br i1 %672, label %673, label %676

; <label>:673                                     ; preds = %671
  %674 = add nsw i32 %exclChecksum.4, 1
  %675 = icmp ne i32 %674, 0
  br i1 %675, label %685, label %676

; <label>:676                                     ; preds = %673, %671
  %exclChecksum.5 = phi i32 [ %674, %673 ], [ %exclChecksum.4, %671 ]
  %677 = icmp sge i32 %atom214.0, %277
  br i1 %677, label %678, label %682

; <label>:678                                     ; preds = %676
  %679 = icmp sle i32 %atom214.0, %279
  br i1 %679, label %680, label %682

; <label>:680                                     ; preds = %678
  %681 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %684

; <label>:682                                     ; preds = %678, %676
  %683 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %684

; <label>:684                                     ; preds = %682, %680
  %pli3.4 = phi i32* [ %681, %680 ], [ %pli3.3, %682 ]
  %plin.4 = phi i32* [ %plin.3, %680 ], [ %683, %682 ]
  br label %685

; <label>:685                                     ; preds = %684, %673, %642
  %pli3.5 = phi i32* [ %pli3.3, %673 ], [ %pli3.4, %684 ], [ %pli3.3, %642 ]
  %plin.5 = phi i32* [ %plin.3, %673 ], [ %plin.4, %684 ], [ %plin.3, %642 ]
  %exclChecksum.6 = phi i32 [ %674, %673 ], [ %exclChecksum.5, %684 ], [ %exclChecksum.4, %642 ]
  %686 = sext i32 %646 to i64
  %687 = getelementptr inbounds %struct.CompAtom* %36, i64 %686
  %688 = getelementptr inbounds %struct.CompAtom* %687, i32 0, i32 2
  %689 = load i32* %688, align 4
  %690 = and i32 %689, 4194303
  br label %640

; <label>:691                                     ; preds = %640
  br label %692

; <label>:692                                     ; preds = %691, %614
  %pli3.6 = phi i32* [ %pli3.3, %691 ], [ %202, %614 ]
  %plin.6 = phi i32* [ %plin.3, %691 ], [ %216, %614 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %691 ], [ %exclChecksum.0, %614 ]
  br label %693

; <label>:693                                     ; preds = %692, %613
  %pli3.7 = phi i32* [ %pli3.0, %613 ], [ %pli3.6, %692 ]
  %plin.7 = phi i32* [ %plin.0, %613 ], [ %plin.6, %692 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %613 ], [ %exclChecksum.7, %692 ]
  %694 = ptrtoint i32* %pli3.7 to i64
  %695 = ptrtoint i32* %202 to i64
  %696 = sub i64 %694, %695
  %697 = sdiv exact i64 %696, 4
  %698 = trunc i64 %697 to i32
  %699 = icmp ne i32 %698, 0
  br i1 %699, label %700, label %707

; <label>:700                                     ; preds = %693
  %701 = sub nsw i32 %698, 1
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i32* %202, i64 %702
  %704 = load i32* %703, align 4
  %705 = sext i32 %698 to i64
  %706 = getelementptr inbounds i32* %202, i64 %705
  store i32 %704, i32* %706, align 4
  br label %707

; <label>:707                                     ; preds = %700, %693
  br label %708

; <label>:708                                     ; preds = %719, %707
  %plix.0 = phi i32* [ %230, %707 ], [ %717, %719 ]
  %pln.0 = phi i32* [ %216, %707 ], [ %720, %719 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %707 ], [ %718, %719 ]
  %709 = icmp ult i32* %pln.0, %plin.7
  br i1 %709, label %710, label %713

; <label>:710                                     ; preds = %708
  %711 = load i32* %pln.0, align 4
  %712 = icmp slt i32 %711, %j_hgroup.2
  br label %713

; <label>:713                                     ; preds = %710, %708
  %714 = phi i1 [ false, %708 ], [ %712, %710 ]
  br i1 %714, label %715, label %721

; <label>:715                                     ; preds = %713
  %716 = load i32* %pln.0, align 4
  %717 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %716, i32* %plix.0, align 4
  %718 = add nsw i32 %exclChecksum.9, -1
  br label %719

; <label>:719                                     ; preds = %715
  %720 = getelementptr inbounds i32* %pln.0, i32 1
  br label %708

; <label>:721                                     ; preds = %713
  br label %722

; <label>:722                                     ; preds = %737, %721
  %plix.1 = phi i32* [ %plix.0, %721 ], [ %735, %737 ]
  %k17.0 = phi i32 [ 0, %721 ], [ %738, %737 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %721 ], [ %736, %737 ]
  %723 = icmp slt i32 %k17.0, %698
  br i1 %723, label %724, label %729

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %202, i64 %725
  %727 = load i32* %726, align 4
  %728 = icmp slt i32 %727, %j_hgroup.2
  br label %729

; <label>:729                                     ; preds = %724, %722
  %730 = phi i1 [ false, %722 ], [ %728, %724 ]
  br i1 %730, label %731, label %739

; <label>:731                                     ; preds = %729
  %732 = sext i32 %k17.0 to i64
  %733 = getelementptr inbounds i32* %202, i64 %732
  %734 = load i32* %733, align 4
  %735 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %734, i32* %plix.1, align 4
  %736 = add nsw i32 %exclChecksum.10, -1
  br label %737

; <label>:737                                     ; preds = %731
  %738 = add nsw i32 %k17.0, 1
  br label %722

; <label>:739                                     ; preds = %729
  br label %740

; <label>:740                                     ; preds = %762, %739
  %plin.8 = phi i32* [ %plin.7, %739 ], [ %plin.9, %762 ]
  %plix.2 = phi i32* [ %plix.1, %739 ], [ %plix.3, %762 ]
  %plim.0 = phi i32* [ %244, %739 ], [ %plim.1, %762 ]
  %k17.1 = phi i32 [ %k17.0, %739 ], [ %763, %762 ]
  %741 = icmp slt i32 %k17.1, %698
  br i1 %741, label %742, label %764

; <label>:742                                     ; preds = %740
  %743 = sext i32 %k17.1 to i64
  %744 = getelementptr inbounds i32* %202, i64 %743
  %745 = load i32* %744, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds %struct.CompAtom* %36, i64 %746
  %748 = getelementptr inbounds %struct.CompAtom* %747, i32 0, i32 2
  %749 = load i32* %748, align 4
  %750 = and i32 %749, 4194303
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8* %284, i64 %751
  %753 = load i8* %752, align 1
  %754 = sext i8 %753 to i32
  switch i32 %754, label %761 [
    i32 0, label %755
    i32 1, label %757
    i32 2, label %759
  ]

; <label>:755                                     ; preds = %742
  %756 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %745, i32* %plin.8, align 4
  br label %761

; <label>:757                                     ; preds = %742
  %758 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %745, i32* %plix.2, align 4
  br label %761

; <label>:759                                     ; preds = %742
  %760 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %745, i32* %plim.0, align 4
  br label %761

; <label>:761                                     ; preds = %759, %757, %755, %742
  %plin.9 = phi i32* [ %plin.8, %742 ], [ %plin.8, %759 ], [ %plin.8, %757 ], [ %756, %755 ]
  %plix.3 = phi i32* [ %plix.2, %742 ], [ %plix.2, %759 ], [ %758, %757 ], [ %plix.2, %755 ]
  %plim.1 = phi i32* [ %plim.0, %742 ], [ %760, %759 ], [ %plim.0, %757 ], [ %plim.0, %755 ]
  br label %762

; <label>:762                                     ; preds = %761
  %763 = add nsw i32 %k17.1, 1
  br label %740

; <label>:764                                     ; preds = %740
  %765 = ptrtoint i32* %plix.2 to i64
  %766 = ptrtoint i32* %230 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %exclChecksum.10 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plim.0 to i64
  %773 = ptrtoint i32* %244 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = sext i32 %771 to i64
  %777 = add nsw i64 %776, %775
  %778 = trunc i64 %777 to i32
  %779 = ptrtoint i32* %plin.8 to i64
  %780 = ptrtoint i32* %pln.0 to i64
  %781 = sub i64 %779, %780
  %782 = sdiv exact i64 %781, 4
  %783 = trunc i64 %782 to i32
  br label %784

; <label>:784                                     ; preds = %970, %764
  %k17.2 = phi i32 [ 0, %764 ], [ %971, %970 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %764 ], [ %963, %970 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %764 ], [ %954, %970 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %764 ], [ %952, %970 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %764 ], [ %943, %970 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %764 ], [ %941, %970 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %764 ], [ %939, %970 ]
  %fullElectEnergy_s.1 = phi double [ %fullElectEnergy_s.0, %764 ], [ %922, %970 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %764 ], [ %920, %970 ]
  %vdwEnergy_s.1 = phi double [ %vdwEnergy_s.0, %764 ], [ %902, %970 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %764 ], [ %900, %970 ]
  %785 = icmp slt i32 %k17.2, %783
  br i1 %785, label %786, label %972

; <label>:786                                     ; preds = %784
  %787 = sext i32 %k17.2 to i64
  %788 = getelementptr inbounds i32* %pln.0, i64 %787
  %789 = load i32* %788, align 4
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds %struct.CompAtom* %36, i64 %790
  %792 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %793 = getelementptr inbounds %class.Vector* %792, i32 0, i32 0
  %794 = load double* %793, align 8
  %795 = fsub double %287, %794
  %796 = fmul double %795, %795
  %797 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %798 = getelementptr inbounds %class.Vector* %797, i32 0, i32 1
  %799 = load double* %798, align 8
  %800 = fsub double %290, %799
  %801 = fmul double %800, %800
  %802 = fadd double %796, %801
  %803 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %804 = getelementptr inbounds %class.Vector* %803, i32 0, i32 2
  %805 = load double* %804, align 8
  %806 = fsub double %293, %805
  %807 = fmul double %806, %806
  %808 = fadd double %802, %807
  %809 = fptrunc double %808 to float
  %810 = bitcast %union.anon.59* %r2f to float*
  store float %809, float* %810, align 4
  %811 = bitcast %union.anon.59* %r2f to i32*
  %812 = load i32* %811, align 4
  %813 = ashr i32 %812, 17
  %814 = add nsw i32 %813, %24
  %815 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 2
  %816 = load i32* %815, align 4
  %817 = and i32 %816, 4194303
  %818 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %817)
  %819 = zext i16 %818 to i32
  %820 = mul nsw i32 2, %819
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds %"struct.LJTable::TableEntry"* %550, i64 %821
  %823 = mul nsw i32 16, %814
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds double* %14, i64 %824
  %826 = getelementptr inbounds double* %825, i64 0
  %827 = load double* %826, align 8
  %828 = mul nsw i32 16, %814
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds double* %14, i64 %829
  %831 = getelementptr inbounds double* %830, i64 4
  %832 = getelementptr inbounds double* %831, i64 0
  %833 = load double* %832, align 8
  %834 = mul nsw i32 16, %814
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds double* %14, i64 %835
  %837 = getelementptr inbounds double* %836, i64 8
  %838 = getelementptr inbounds double* %837, i64 0
  %839 = load double* %838, align 8
  %840 = bitcast %union.anon.59* %r2f to i32*
  %841 = load i32* %840, align 4
  %842 = and i32 %841, -131072
  store i32 %842, i32* %840, align 4
  %843 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 1
  %844 = load float* %843, align 4
  %845 = fpext float %844 to double
  %846 = fmul double %544, %845
  %847 = bitcast %union.anon.59* %r2f to float*
  %848 = load float* %847, align 4
  %849 = fpext float %848 to double
  %850 = fsub double %808, %849
  %851 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 2
  %852 = load i32* %851, align 4
  %853 = lshr i32 %852, 28
  %854 = mul nsw i32 2, %853
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds double* %538, i64 %855
  %857 = load double* %856, align 8
  %858 = mul nsw i32 2, %853
  %859 = add nsw i32 %858, 1
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds double* %538, i64 %860
  %862 = load double* %861, align 8
  %863 = getelementptr inbounds %"struct.LJTable::TableEntry"* %822, i32 0, i32 0
  %864 = load double* %863, align 8
  %865 = fmul double %15, %864
  %866 = getelementptr inbounds %"struct.LJTable::TableEntry"* %822, i32 0, i32 1
  %867 = load double* %866, align 8
  %868 = fmul double %15, %867
  %869 = fmul double %865, %827
  %870 = fmul double %868, %833
  %871 = fsub double %869, %870
  %872 = getelementptr inbounds double* %825, i64 3
  %873 = load double* %872, align 8
  %874 = fmul double %865, %873
  %875 = getelementptr inbounds double* %831, i64 3
  %876 = load double* %875, align 8
  %877 = fmul double %868, %876
  %878 = fsub double %874, %877
  %879 = getelementptr inbounds double* %825, i64 2
  %880 = load double* %879, align 8
  %881 = fmul double %865, %880
  %882 = getelementptr inbounds double* %831, i64 2
  %883 = load double* %882, align 8
  %884 = fmul double %868, %883
  %885 = fsub double %881, %884
  %886 = getelementptr inbounds double* %825, i64 1
  %887 = load double* %886, align 8
  %888 = fmul double %865, %887
  %889 = getelementptr inbounds double* %831, i64 1
  %890 = load double* %889, align 8
  %891 = fmul double %868, %890
  %892 = fsub double %888, %891
  %893 = fmul double %850, %878
  %894 = fadd double %893, %885
  %895 = fmul double %894, %850
  %896 = fadd double %895, %892
  %897 = fmul double %896, %850
  %898 = fadd double %897, %871
  %899 = fmul double %857, %898
  %900 = fadd double %vdwEnergy.1, %899
  %901 = fmul double %862, %898
  %902 = fadd double %vdwEnergy_s.1, %901
  %903 = getelementptr inbounds double* %837, i64 1
  %904 = load double* %903, align 8
  %905 = getelementptr inbounds double* %837, i64 2
  %906 = load double* %905, align 8
  %907 = getelementptr inbounds double* %837, i64 3
  %908 = load double* %907, align 8
  %909 = fmul double %908, %846
  %910 = fmul double %906, %846
  %911 = fmul double %904, %846
  %912 = fmul double %839, %846
  %913 = fmul double %850, %909
  %914 = fadd double %913, %910
  %915 = fmul double %914, %850
  %916 = fadd double %915, %911
  %917 = fmul double %916, %850
  %918 = fadd double %917, %912
  %919 = fmul double %857, %918
  %920 = fadd double %fullElectEnergy.1, %919
  %921 = fmul double %862, %918
  %922 = fadd double %fullElectEnergy_s.1, %921
  %923 = fadd double %909, %878
  %924 = fadd double %910, %885
  %925 = fadd double %911, %892
  %926 = fadd double %912, %871
  %927 = fmul double 3.000000e+00, %850
  %928 = fmul double %927, %923
  %929 = fmul double 2.000000e+00, %924
  %930 = fadd double %928, %929
  %931 = fmul double %930, %850
  %932 = fadd double %931, %925
  %933 = fmul double -2.000000e+00, %932
  %934 = fmul double %933, %857
  %935 = sext i32 %789 to i64
  %936 = getelementptr inbounds %class.Vector* %250, i64 %935
  %937 = fmul double %934, %795
  %938 = fmul double %937, %795
  %939 = fadd double %fullElectVirial_xx.1, %938
  %940 = fmul double %937, %800
  %941 = fadd double %fullElectVirial_xy.1, %940
  %942 = fmul double %937, %806
  %943 = fadd double %fullElectVirial_xz.1, %942
  %944 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %945 = load double* %944, align 8
  %946 = fadd double %945, %937
  store double %946, double* %944, align 8
  %947 = getelementptr inbounds %class.Vector* %936, i32 0, i32 0
  %948 = load double* %947, align 8
  %949 = fsub double %948, %937
  store double %949, double* %947, align 8
  %950 = fmul double %934, %800
  %951 = fmul double %950, %800
  %952 = fadd double %fullElectVirial_yy.1, %951
  %953 = fmul double %950, %806
  %954 = fadd double %fullElectVirial_yz.1, %953
  %955 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %956 = load double* %955, align 8
  %957 = fadd double %956, %950
  store double %957, double* %955, align 8
  %958 = getelementptr inbounds %class.Vector* %936, i32 0, i32 1
  %959 = load double* %958, align 8
  %960 = fsub double %959, %950
  store double %960, double* %958, align 8
  %961 = fmul double %934, %806
  %962 = fmul double %961, %806
  %963 = fadd double %fullElectVirial_zz.1, %962
  %964 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %965 = load double* %964, align 8
  %966 = fadd double %965, %961
  store double %966, double* %964, align 8
  %967 = getelementptr inbounds %class.Vector* %936, i32 0, i32 2
  %968 = load double* %967, align 8
  %969 = fsub double %968, %961
  store double %969, double* %967, align 8
  br label %970

; <label>:970                                     ; preds = %786
  %971 = add nsw i32 %k17.2, 1
  br label %784

; <label>:972                                     ; preds = %784
  %973 = ptrtoint i32* %plim.0 to i64
  %974 = ptrtoint i32* %244 to i64
  %975 = sub i64 %973, %974
  %976 = sdiv exact i64 %975, 4
  %977 = trunc i64 %976 to i32
  br label %978

; <label>:978                                     ; preds = %1185, %972
  %k17.3 = phi i32 [ 0, %972 ], [ %1186, %1185 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %972 ], [ %1178, %1185 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %972 ], [ %1169, %1185 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %972 ], [ %1167, %1185 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %972 ], [ %1158, %1185 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %972 ], [ %1156, %1185 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %972 ], [ %1154, %1185 ]
  %fullElectEnergy_s.2 = phi double [ %fullElectEnergy_s.1, %972 ], [ %1137, %1185 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %972 ], [ %1135, %1185 ]
  %vdwEnergy_s.2 = phi double [ %vdwEnergy_s.1, %972 ], [ %1097, %1185 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %972 ], [ %1095, %1185 ]
  %979 = icmp slt i32 %k17.3, %977
  br i1 %979, label %980, label %1187

; <label>:980                                     ; preds = %978
  %981 = sext i32 %k17.3 to i64
  %982 = getelementptr inbounds i32* %244, i64 %981
  %983 = load i32* %982, align 4
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds %struct.CompAtom* %36, i64 %984
  %986 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 0
  %987 = getelementptr inbounds %class.Vector* %986, i32 0, i32 0
  %988 = load double* %987, align 8
  %989 = fsub double %287, %988
  %990 = fmul double %989, %989
  %991 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 0
  %992 = getelementptr inbounds %class.Vector* %991, i32 0, i32 1
  %993 = load double* %992, align 8
  %994 = fsub double %290, %993
  %995 = fmul double %994, %994
  %996 = fadd double %990, %995
  %997 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 0
  %998 = getelementptr inbounds %class.Vector* %997, i32 0, i32 2
  %999 = load double* %998, align 8
  %1000 = fsub double %293, %999
  %1001 = fmul double %1000, %1000
  %1002 = fadd double %996, %1001
  %1003 = fptrunc double %1002 to float
  %1004 = bitcast %union.anon.60* %r2f28 to float*
  store float %1003, float* %1004, align 4
  %1005 = bitcast %union.anon.60* %r2f28 to i32*
  %1006 = load i32* %1005, align 4
  %1007 = ashr i32 %1006, 17
  %1008 = add nsw i32 %1007, %24
  %1009 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 2
  %1010 = load i32* %1009, align 4
  %1011 = and i32 %1010, 4194303
  %1012 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1011)
  %1013 = zext i16 %1012 to i32
  %1014 = mul nsw i32 2, %1013
  %1015 = sext i32 %1014 to i64
  %1016 = getelementptr inbounds %"struct.LJTable::TableEntry"* %550, i64 %1015
  %1017 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1016, i64 1
  %1018 = mul nsw i32 16, %1008
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds double* %14, i64 %1019
  %1021 = getelementptr inbounds double* %1020, i64 0
  %1022 = load double* %1021, align 8
  %1023 = mul nsw i32 16, %1008
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds double* %14, i64 %1024
  %1026 = getelementptr inbounds double* %1025, i64 4
  %1027 = getelementptr inbounds double* %1026, i64 0
  %1028 = load double* %1027, align 8
  %1029 = mul nsw i32 16, %1008
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds double* %14, i64 %1030
  %1032 = getelementptr inbounds double* %1031, i64 8
  %1033 = getelementptr inbounds double* %1032, i64 0
  %1034 = load double* %1033, align 8
  %1035 = bitcast %union.anon.60* %r2f28 to i32*
  %1036 = load i32* %1035, align 4
  %1037 = and i32 %1036, -131072
  store i32 %1037, i32* %1035, align 4
  %1038 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 1
  %1039 = load float* %1038, align 4
  %1040 = fpext float %1039 to double
  %1041 = fmul double %544, %1040
  %1042 = bitcast %union.anon.60* %r2f28 to float*
  %1043 = load float* %1042, align 4
  %1044 = fpext float %1043 to double
  %1045 = fsub double %1002, %1044
  %1046 = getelementptr inbounds %struct.CompAtom* %985, i32 0, i32 2
  %1047 = load i32* %1046, align 4
  %1048 = lshr i32 %1047, 28
  %1049 = mul nsw i32 2, %1048
  %1050 = sext i32 %1049 to i64
  %1051 = getelementptr inbounds double* %538, i64 %1050
  %1052 = load double* %1051, align 8
  %1053 = mul nsw i32 2, %1048
  %1054 = add nsw i32 %1053, 1
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds double* %538, i64 %1055
  %1057 = load double* %1056, align 8
  %1058 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1017, i32 0, i32 0
  %1059 = load double* %1058, align 8
  %1060 = fmul double %15, %1059
  %1061 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1017, i32 0, i32 1
  %1062 = load double* %1061, align 8
  %1063 = fmul double %15, %1062
  %1064 = fmul double %1060, %1022
  %1065 = fmul double %1063, %1028
  %1066 = fsub double %1064, %1065
  %1067 = getelementptr inbounds double* %1020, i64 3
  %1068 = load double* %1067, align 8
  %1069 = fmul double %1060, %1068
  %1070 = getelementptr inbounds double* %1026, i64 3
  %1071 = load double* %1070, align 8
  %1072 = fmul double %1063, %1071
  %1073 = fsub double %1069, %1072
  %1074 = getelementptr inbounds double* %1020, i64 2
  %1075 = load double* %1074, align 8
  %1076 = fmul double %1060, %1075
  %1077 = getelementptr inbounds double* %1026, i64 2
  %1078 = load double* %1077, align 8
  %1079 = fmul double %1063, %1078
  %1080 = fsub double %1076, %1079
  %1081 = getelementptr inbounds double* %1020, i64 1
  %1082 = load double* %1081, align 8
  %1083 = fmul double %1060, %1082
  %1084 = getelementptr inbounds double* %1026, i64 1
  %1085 = load double* %1084, align 8
  %1086 = fmul double %1063, %1085
  %1087 = fsub double %1083, %1086
  %1088 = fmul double %1045, %1073
  %1089 = fadd double %1088, %1080
  %1090 = fmul double %1089, %1045
  %1091 = fadd double %1090, %1087
  %1092 = fmul double %1091, %1045
  %1093 = fadd double %1092, %1066
  %1094 = fmul double %1052, %1093
  %1095 = fadd double %vdwEnergy.2, %1094
  %1096 = fmul double %1057, %1093
  %1097 = fadd double %vdwEnergy_s.2, %1096
  %1098 = getelementptr inbounds double* %1032, i64 1
  %1099 = load double* %1098, align 8
  %1100 = getelementptr inbounds double* %1032, i64 2
  %1101 = load double* %1100, align 8
  %1102 = getelementptr inbounds double* %1032, i64 3
  %1103 = load double* %1102, align 8
  %1104 = getelementptr inbounds double* %14, i64 12
  %1105 = mul nsw i32 16, %1008
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds double* %1104, i64 %1106
  %1108 = getelementptr inbounds double* %1107, i64 0
  %1109 = load double* %1108, align 8
  %1110 = fmul double %17, %1109
  %1111 = fsub double %1034, %1110
  %1112 = getelementptr inbounds double* %1107, i64 1
  %1113 = load double* %1112, align 8
  %1114 = fmul double %17, %1113
  %1115 = fsub double %1099, %1114
  %1116 = getelementptr inbounds double* %1107, i64 2
  %1117 = load double* %1116, align 8
  %1118 = fmul double %17, %1117
  %1119 = fsub double %1101, %1118
  %1120 = getelementptr inbounds double* %1107, i64 3
  %1121 = load double* %1120, align 8
  %1122 = fmul double %17, %1121
  %1123 = fsub double %1103, %1122
  %1124 = fmul double %1123, %1041
  %1125 = fmul double %1119, %1041
  %1126 = fmul double %1115, %1041
  %1127 = fmul double %1111, %1041
  %1128 = fmul double %1045, %1124
  %1129 = fadd double %1128, %1125
  %1130 = fmul double %1129, %1045
  %1131 = fadd double %1130, %1126
  %1132 = fmul double %1131, %1045
  %1133 = fadd double %1132, %1127
  %1134 = fmul double %1052, %1133
  %1135 = fadd double %fullElectEnergy.2, %1134
  %1136 = fmul double %1057, %1133
  %1137 = fadd double %fullElectEnergy_s.2, %1136
  %1138 = fadd double %1124, %1073
  %1139 = fadd double %1125, %1080
  %1140 = fadd double %1126, %1087
  %1141 = fadd double %1127, %1066
  %1142 = fmul double 3.000000e+00, %1045
  %1143 = fmul double %1142, %1138
  %1144 = fmul double 2.000000e+00, %1139
  %1145 = fadd double %1143, %1144
  %1146 = fmul double %1145, %1045
  %1147 = fadd double %1146, %1140
  %1148 = fmul double -2.000000e+00, %1147
  %1149 = fmul double %1148, %1052
  %1150 = sext i32 %983 to i64
  %1151 = getelementptr inbounds %class.Vector* %250, i64 %1150
  %1152 = fmul double %1149, %989
  %1153 = fmul double %1152, %989
  %1154 = fadd double %fullElectVirial_xx.2, %1153
  %1155 = fmul double %1152, %994
  %1156 = fadd double %fullElectVirial_xy.2, %1155
  %1157 = fmul double %1152, %1000
  %1158 = fadd double %fullElectVirial_xz.2, %1157
  %1159 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1160 = load double* %1159, align 8
  %1161 = fadd double %1160, %1152
  store double %1161, double* %1159, align 8
  %1162 = getelementptr inbounds %class.Vector* %1151, i32 0, i32 0
  %1163 = load double* %1162, align 8
  %1164 = fsub double %1163, %1152
  store double %1164, double* %1162, align 8
  %1165 = fmul double %1149, %994
  %1166 = fmul double %1165, %994
  %1167 = fadd double %fullElectVirial_yy.2, %1166
  %1168 = fmul double %1165, %1000
  %1169 = fadd double %fullElectVirial_yz.2, %1168
  %1170 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1171 = load double* %1170, align 8
  %1172 = fadd double %1171, %1165
  store double %1172, double* %1170, align 8
  %1173 = getelementptr inbounds %class.Vector* %1151, i32 0, i32 1
  %1174 = load double* %1173, align 8
  %1175 = fsub double %1174, %1165
  store double %1175, double* %1173, align 8
  %1176 = fmul double %1149, %1000
  %1177 = fmul double %1176, %1000
  %1178 = fadd double %fullElectVirial_zz.2, %1177
  %1179 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1180 = load double* %1179, align 8
  %1181 = fadd double %1180, %1176
  store double %1181, double* %1179, align 8
  %1182 = getelementptr inbounds %class.Vector* %1151, i32 0, i32 2
  %1183 = load double* %1182, align 8
  %1184 = fsub double %1183, %1176
  store double %1184, double* %1182, align 8
  br label %1185

; <label>:1185                                    ; preds = %980
  %1186 = add nsw i32 %k17.3, 1
  br label %978

; <label>:1187                                    ; preds = %978
  %1188 = ptrtoint i32* %plix.2 to i64
  %1189 = ptrtoint i32* %230 to i64
  %1190 = sub i64 %1188, %1189
  %1191 = sdiv exact i64 %1190, 4
  %1192 = trunc i64 %1191 to i32
  br label %1193

; <label>:1193                                    ; preds = %1332, %1187
  %k17.4 = phi i32 [ 0, %1187 ], [ %1333, %1332 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1187 ], [ %1325, %1332 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1187 ], [ %1316, %1332 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1187 ], [ %1314, %1332 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1187 ], [ %1305, %1332 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1187 ], [ %1303, %1332 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1187 ], [ %1301, %1332 ]
  %fullElectEnergy_s.3 = phi double [ %fullElectEnergy_s.2, %1187 ], [ %1288, %1332 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1187 ], [ %1286, %1332 ]
  %1194 = icmp slt i32 %k17.4, %1192
  br i1 %1194, label %1195, label %1334

; <label>:1195                                    ; preds = %1193
  %1196 = sext i32 %k17.4 to i64
  %1197 = getelementptr inbounds i32* %230, i64 %1196
  %1198 = load i32* %1197, align 4
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds %struct.CompAtom* %36, i64 %1199
  %1201 = getelementptr inbounds %struct.CompAtom* %1200, i32 0, i32 0
  %1202 = getelementptr inbounds %class.Vector* %1201, i32 0, i32 0
  %1203 = load double* %1202, align 8
  %1204 = fsub double %287, %1203
  %1205 = fmul double %1204, %1204
  %1206 = getelementptr inbounds %struct.CompAtom* %1200, i32 0, i32 0
  %1207 = getelementptr inbounds %class.Vector* %1206, i32 0, i32 1
  %1208 = load double* %1207, align 8
  %1209 = fsub double %290, %1208
  %1210 = fmul double %1209, %1209
  %1211 = fadd double %1205, %1210
  %1212 = getelementptr inbounds %struct.CompAtom* %1200, i32 0, i32 0
  %1213 = getelementptr inbounds %class.Vector* %1212, i32 0, i32 2
  %1214 = load double* %1213, align 8
  %1215 = fsub double %293, %1214
  %1216 = fmul double %1215, %1215
  %1217 = fadd double %1211, %1216
  %1218 = fptrunc double %1217 to float
  %1219 = bitcast %union.anon.61* %r2f65 to float*
  store float %1218, float* %1219, align 4
  %1220 = bitcast %union.anon.61* %r2f65 to i32*
  %1221 = load i32* %1220, align 4
  %1222 = ashr i32 %1221, 17
  %1223 = add nsw i32 %1222, %24
  %1224 = mul nsw i32 16, %1223
  %1225 = sext i32 %1224 to i64
  %1226 = getelementptr inbounds double* %14, i64 %1225
  %1227 = getelementptr inbounds double* %1226, i64 8
  %1228 = getelementptr inbounds double* %1227, i64 0
  %1229 = load double* %1228, align 8
  %1230 = bitcast %union.anon.61* %r2f65 to i32*
  %1231 = load i32* %1230, align 4
  %1232 = and i32 %1231, -131072
  store i32 %1232, i32* %1230, align 4
  %1233 = getelementptr inbounds %struct.CompAtom* %1200, i32 0, i32 1
  %1234 = load float* %1233, align 4
  %1235 = fpext float %1234 to double
  %1236 = fmul double %544, %1235
  %1237 = bitcast %union.anon.61* %r2f65 to float*
  %1238 = load float* %1237, align 4
  %1239 = fpext float %1238 to double
  %1240 = fsub double %1217, %1239
  %1241 = getelementptr inbounds %struct.CompAtom* %1200, i32 0, i32 2
  %1242 = load i32* %1241, align 4
  %1243 = lshr i32 %1242, 28
  %1244 = mul nsw i32 2, %1243
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds double* %538, i64 %1245
  %1247 = load double* %1246, align 8
  %1248 = mul nsw i32 2, %1243
  %1249 = add nsw i32 %1248, 1
  %1250 = sext i32 %1249 to i64
  %1251 = getelementptr inbounds double* %538, i64 %1250
  %1252 = load double* %1251, align 8
  %1253 = getelementptr inbounds double* %1227, i64 1
  %1254 = load double* %1253, align 8
  %1255 = getelementptr inbounds double* %1227, i64 2
  %1256 = load double* %1255, align 8
  %1257 = getelementptr inbounds double* %1227, i64 3
  %1258 = load double* %1257, align 8
  %1259 = getelementptr inbounds double* %14, i64 12
  %1260 = mul nsw i32 16, %1223
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds double* %1259, i64 %1261
  %1263 = getelementptr inbounds double* %1262, i64 0
  %1264 = load double* %1263, align 8
  %1265 = fsub double %1229, %1264
  %1266 = getelementptr inbounds double* %1262, i64 1
  %1267 = load double* %1266, align 8
  %1268 = fsub double %1254, %1267
  %1269 = getelementptr inbounds double* %1262, i64 2
  %1270 = load double* %1269, align 8
  %1271 = fsub double %1256, %1270
  %1272 = getelementptr inbounds double* %1262, i64 3
  %1273 = load double* %1272, align 8
  %1274 = fsub double %1258, %1273
  %1275 = fmul double %1274, %1236
  %1276 = fmul double %1271, %1236
  %1277 = fmul double %1268, %1236
  %1278 = fmul double %1265, %1236
  %1279 = fmul double %1240, %1275
  %1280 = fadd double %1279, %1276
  %1281 = fmul double %1280, %1240
  %1282 = fadd double %1281, %1277
  %1283 = fmul double %1282, %1240
  %1284 = fadd double %1283, %1278
  %1285 = fmul double %1247, %1284
  %1286 = fadd double %fullElectEnergy.3, %1285
  %1287 = fmul double %1252, %1284
  %1288 = fadd double %fullElectEnergy_s.3, %1287
  %1289 = fmul double 3.000000e+00, %1240
  %1290 = fmul double %1289, %1275
  %1291 = fmul double 2.000000e+00, %1276
  %1292 = fadd double %1290, %1291
  %1293 = fmul double %1292, %1240
  %1294 = fadd double %1293, %1277
  %1295 = fmul double -2.000000e+00, %1294
  %1296 = fmul double %1295, %1247
  %1297 = sext i32 %1198 to i64
  %1298 = getelementptr inbounds %class.Vector* %250, i64 %1297
  %1299 = fmul double %1296, %1204
  %1300 = fmul double %1299, %1204
  %1301 = fadd double %fullElectVirial_xx.3, %1300
  %1302 = fmul double %1299, %1209
  %1303 = fadd double %fullElectVirial_xy.3, %1302
  %1304 = fmul double %1299, %1215
  %1305 = fadd double %fullElectVirial_xz.3, %1304
  %1306 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1307 = load double* %1306, align 8
  %1308 = fadd double %1307, %1299
  store double %1308, double* %1306, align 8
  %1309 = getelementptr inbounds %class.Vector* %1298, i32 0, i32 0
  %1310 = load double* %1309, align 8
  %1311 = fsub double %1310, %1299
  store double %1311, double* %1309, align 8
  %1312 = fmul double %1296, %1209
  %1313 = fmul double %1312, %1209
  %1314 = fadd double %fullElectVirial_yy.3, %1313
  %1315 = fmul double %1312, %1215
  %1316 = fadd double %fullElectVirial_yz.3, %1315
  %1317 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1318 = load double* %1317, align 8
  %1319 = fadd double %1318, %1312
  store double %1319, double* %1317, align 8
  %1320 = getelementptr inbounds %class.Vector* %1298, i32 0, i32 1
  %1321 = load double* %1320, align 8
  %1322 = fsub double %1321, %1312
  store double %1322, double* %1320, align 8
  %1323 = fmul double %1296, %1215
  %1324 = fmul double %1323, %1215
  %1325 = fadd double %fullElectVirial_zz.3, %1324
  %1326 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1327 = load double* %1326, align 8
  %1328 = fadd double %1327, %1323
  store double %1328, double* %1326, align 8
  %1329 = getelementptr inbounds %class.Vector* %1298, i32 0, i32 2
  %1330 = load double* %1329, align 8
  %1331 = fsub double %1330, %1323
  store double %1331, double* %1329, align 8
  br label %1332

; <label>:1332                                    ; preds = %1195
  %1333 = add nsw i32 %k17.4, 1
  br label %1193

; <label>:1334                                    ; preds = %1193
  br label %1335

; <label>:1335                                    ; preds = %1334, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1334 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1334 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1334 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1334 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1334 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1334 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1334 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %329 ], [ %fullElectVirial_zz.3, %1334 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %329 ], [ %fullElectVirial_yz.3, %1334 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %329 ], [ %fullElectVirial_yy.3, %1334 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %329 ], [ %fullElectVirial_xz.3, %1334 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %329 ], [ %fullElectVirial_xy.3, %1334 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %329 ], [ %fullElectVirial_xx.3, %1334 ]
  %fullElectEnergy_s.4 = phi double [ %fullElectEnergy_s.0, %329 ], [ %fullElectEnergy_s.3, %1334 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %329 ], [ %fullElectEnergy.3, %1334 ]
  %vdwEnergy_s.3 = phi double [ %vdwEnergy_s.0, %329 ], [ %vdwEnergy_s.2, %1334 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %329 ], [ %vdwEnergy.2, %1334 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %778, %1334 ]
  %1336 = add nsw i32 %i.1, 1
  br label %266

; <label>:1337                                    ; preds = %266
  %1338 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1339 = icmp ne i32* %50, %1338
  br i1 %1339, label %1340, label %1345

; <label>:1340                                    ; preds = %1337
  %1341 = icmp eq i32* %50, null
  br i1 %1341, label %1344, label %1342

; <label>:1342                                    ; preds = %1340
  %1343 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1343) #8
  br label %1344

; <label>:1344                                    ; preds = %1342, %1340
  br label %1345

; <label>:1345                                    ; preds = %1344, %1337
  %1346 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1347 = icmp ne i32* %64, %1346
  br i1 %1347, label %1348, label %1353

; <label>:1348                                    ; preds = %1345
  %1349 = icmp eq i32* %64, null
  br i1 %1349, label %1352, label %1350

; <label>:1350                                    ; preds = %1348
  %1351 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1351) #8
  br label %1352

; <label>:1352                                    ; preds = %1350, %1348
  br label %1353

; <label>:1353                                    ; preds = %1352, %1345
  %1354 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1355 = icmp ne i32* %78, %1354
  br i1 %1355, label %1356, label %1361

; <label>:1356                                    ; preds = %1353
  %1357 = icmp eq i32* %78, null
  br i1 %1357, label %1360, label %1358

; <label>:1358                                    ; preds = %1356
  %1359 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1359) #8
  br label %1360

; <label>:1360                                    ; preds = %1358, %1356
  br label %1361

; <label>:1361                                    ; preds = %1360, %1353
  %1362 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1363 = icmp ne i32* %188, %1362
  br i1 %1363, label %1364, label %1369

; <label>:1364                                    ; preds = %1361
  %1365 = icmp eq i32* %188, null
  br i1 %1365, label %1368, label %1366

; <label>:1366                                    ; preds = %1364
  %1367 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1367) #8
  br label %1368

; <label>:1368                                    ; preds = %1366, %1364
  br label %1369

; <label>:1369                                    ; preds = %1368, %1361
  %1370 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1371 = icmp ne i32* %202, %1370
  br i1 %1371, label %1372, label %1377

; <label>:1372                                    ; preds = %1369
  %1373 = icmp eq i32* %202, null
  br i1 %1373, label %1376, label %1374

; <label>:1374                                    ; preds = %1372
  %1375 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1375) #8
  br label %1376

; <label>:1376                                    ; preds = %1374, %1372
  br label %1377

; <label>:1377                                    ; preds = %1376, %1369
  %1378 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1379 = icmp ne i32* %216, %1378
  br i1 %1379, label %1380, label %1385

; <label>:1380                                    ; preds = %1377
  %1381 = icmp eq i32* %216, null
  br i1 %1381, label %1384, label %1382

; <label>:1382                                    ; preds = %1380
  %1383 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1383) #8
  br label %1384

; <label>:1384                                    ; preds = %1382, %1380
  br label %1385

; <label>:1385                                    ; preds = %1384, %1377
  %1386 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1387 = icmp ne i32* %230, %1386
  br i1 %1387, label %1388, label %1393

; <label>:1388                                    ; preds = %1385
  %1389 = icmp eq i32* %230, null
  br i1 %1389, label %1392, label %1390

; <label>:1390                                    ; preds = %1388
  %1391 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1391) #8
  br label %1392

; <label>:1392                                    ; preds = %1390, %1388
  br label %1393

; <label>:1393                                    ; preds = %1392, %1385
  %1394 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1395 = icmp ne i32* %244, %1394
  br i1 %1395, label %1396, label %1401

; <label>:1396                                    ; preds = %1393
  %1397 = icmp eq i32* %244, null
  br i1 %1397, label %1400, label %1398

; <label>:1398                                    ; preds = %1396
  %1399 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1399) #8
  br label %1400

; <label>:1400                                    ; preds = %1398, %1396
  br label %1401

; <label>:1401                                    ; preds = %1400, %1393
  %1402 = sitofp i32 %exclChecksum.0 to double
  %1403 = getelementptr inbounds double* %6, i64 22
  %1404 = load double* %1403, align 8
  %1405 = fadd double %1404, %1402
  store double %1405, double* %1403, align 8
  %1406 = getelementptr inbounds double* %6, i64 2
  %1407 = load double* %1406, align 8
  %1408 = fadd double %1407, %vdwEnergy.0
  store double %1408, double* %1406, align 8
  %1409 = getelementptr inbounds double* %6, i64 25
  %1410 = load double* %1409, align 8
  %1411 = fadd double %1410, %vdwEnergy_s.0
  store double %1411, double* %1409, align 8
  %1412 = getelementptr inbounds double* %6, i64 1
  %1413 = load double* %1412, align 8
  %1414 = fadd double %1413, %fullElectEnergy.0
  store double %1414, double* %1412, align 8
  %1415 = getelementptr inbounds double* %6, i64 24
  %1416 = load double* %1415, align 8
  %1417 = fadd double %1416, %fullElectEnergy_s.0
  store double %1417, double* %1415, align 8
  %1418 = getelementptr inbounds double* %6, i64 12
  %1419 = load double* %1418, align 8
  %1420 = fadd double %1419, %fullElectVirial_xx.0
  store double %1420, double* %1418, align 8
  %1421 = getelementptr inbounds double* %6, i64 13
  %1422 = load double* %1421, align 8
  %1423 = fadd double %1422, %fullElectVirial_xy.0
  store double %1423, double* %1421, align 8
  %1424 = getelementptr inbounds double* %6, i64 14
  %1425 = load double* %1424, align 8
  %1426 = fadd double %1425, %fullElectVirial_xz.0
  store double %1426, double* %1424, align 8
  %1427 = getelementptr inbounds double* %6, i64 15
  %1428 = load double* %1427, align 8
  %1429 = fadd double %1428, %fullElectVirial_xy.0
  store double %1429, double* %1427, align 8
  %1430 = getelementptr inbounds double* %6, i64 16
  %1431 = load double* %1430, align 8
  %1432 = fadd double %1431, %fullElectVirial_yy.0
  store double %1432, double* %1430, align 8
  %1433 = getelementptr inbounds double* %6, i64 17
  %1434 = load double* %1433, align 8
  %1435 = fadd double %1434, %fullElectVirial_yz.0
  store double %1435, double* %1433, align 8
  %1436 = getelementptr inbounds double* %6, i64 18
  %1437 = load double* %1436, align 8
  %1438 = fadd double %1437, %fullElectVirial_xz.0
  store double %1438, double* %1436, align 8
  %1439 = getelementptr inbounds double* %6, i64 19
  %1440 = load double* %1439, align 8
  %1441 = fadd double %1440, %fullElectVirial_yz.0
  store double %1441, double* %1439, align 8
  %1442 = getelementptr inbounds double* %6, i64 20
  %1443 = load double* %1442, align 8
  %1444 = fadd double %1443, %fullElectVirial_zz.0
  store double %1444, double* %1442, align 8
  br label %1445

; <label>:1445                                    ; preds = %1401, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil35calc_pair_energy_slow_fullelect_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.51, align 4
  %r2f29 = alloca %union.anon.52, align 4
  %r2f54 = alloca %union.anon.53, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1252

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %182

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  br label %136

; <label>:136                                     ; preds = %152, %135
  %all_fixed.2 = phi i32 [ %all_fixed.0, %135 ], [ %all_fixed.3, %152 ]
  %i.0 = phi i32 [ 0, %135 ], [ %153, %152 ]
  %137 = icmp ne i32 %all_fixed.2, 0
  br i1 %137, label %138, label %140

; <label>:138                                     ; preds = %136
  %139 = icmp slt i32 %i.0, %25
  br label %140

; <label>:140                                     ; preds = %138, %136
  %141 = phi i1 [ false, %136 ], [ %139, %138 ]
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %140
  %143 = sext i32 %i.0 to i64
  %144 = getelementptr inbounds %struct.CompAtom* %31, i64 %143
  %145 = getelementptr inbounds %struct.CompAtom* %144, i32 0, i32 2
  %146 = load i32* %145, align 4
  %147 = lshr i32 %146, 26
  %148 = and i32 %147, 1
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %151, label %150

; <label>:150                                     ; preds = %142
  br label %151

; <label>:151                                     ; preds = %150, %142
  %all_fixed.3 = phi i32 [ %all_fixed.2, %142 ], [ 0, %150 ]
  br label %152

; <label>:152                                     ; preds = %151
  %153 = add nsw i32 %i.0, 1
  br label %136

; <label>:154                                     ; preds = %140
  %155 = icmp ne i32 %all_fixed.2, 0
  br i1 %155, label %156, label %181

; <label>:156                                     ; preds = %154
  %157 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %158 = icmp ne i32* %48, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %48, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  %165 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %166 = icmp ne i32* %62, %165
  br i1 %166, label %167, label %172

; <label>:167                                     ; preds = %164
  %168 = icmp eq i32* %62, null
  br i1 %168, label %171, label %169

; <label>:169                                     ; preds = %167
  %170 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %170) #8
  br label %171

; <label>:171                                     ; preds = %169, %167
  br label %172

; <label>:172                                     ; preds = %171, %164
  %173 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %174 = icmp ne i32* %76, %173
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %172
  %176 = icmp eq i32* %76, null
  br i1 %176, label %179, label %177

; <label>:177                                     ; preds = %175
  %178 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %178) #8
  br label %179

; <label>:179                                     ; preds = %177, %175
  br label %180

; <label>:180                                     ; preds = %179, %172
  br label %1252

; <label>:181                                     ; preds = %154
  br label %182

; <label>:182                                     ; preds = %181, %111
  %fixg.2 = phi i32 [ %fixg.0, %181 ], [ 0, %111 ]
  %183 = icmp ne i32 %fixg.2, 0
  br i1 %183, label %184, label %191

; <label>:184                                     ; preds = %182
  %185 = sub nsw i32 %fixg.2, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32* %62, i64 %186
  %188 = load i32* %187, align 4
  %189 = sext i32 %fixg.2 to i64
  %190 = getelementptr inbounds i32* %62, i64 %189
  store i32 %188, i32* %190, align 4
  br label %191

; <label>:191                                     ; preds = %184, %182
  %192 = icmp slt i32 %28, 1000
  br i1 %192, label %193, label %195

; <label>:193                                     ; preds = %191
  %194 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %204

; <label>:195                                     ; preds = %191
  %196 = add nsw i32 %28, 5
  %197 = sext i32 %196 to i64
  %198 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %197, i64 4)
  %199 = extractvalue { i64, i1 } %198, 1
  %200 = extractvalue { i64, i1 } %198, 0
  %201 = select i1 %199, i64 -1, i64 %200
  %202 = call noalias i8* @_Znam(i64 %201) #9
  %203 = bitcast i8* %202 to i32*
  br label %204

; <label>:204                                     ; preds = %195, %193
  %205 = phi i32* [ %194, %193 ], [ %203, %195 ]
  %206 = icmp slt i32 %28, 1000
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %204
  %208 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %218

; <label>:209                                     ; preds = %204
  %210 = add nsw i32 %28, 5
  %211 = sext i32 %210 to i64
  %212 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %211, i64 4)
  %213 = extractvalue { i64, i1 } %212, 1
  %214 = extractvalue { i64, i1 } %212, 0
  %215 = select i1 %213, i64 -1, i64 %214
  %216 = call noalias i8* @_Znam(i64 %215) #9
  %217 = bitcast i8* %216 to i32*
  br label %218

; <label>:218                                     ; preds = %209, %207
  %219 = phi i32* [ %208, %207 ], [ %217, %209 ]
  %220 = icmp slt i32 %28, 1000
  br i1 %220, label %221, label %223

; <label>:221                                     ; preds = %218
  %222 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %232

; <label>:223                                     ; preds = %218
  %224 = add nsw i32 %28, 5
  %225 = sext i32 %224 to i64
  %226 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %225, i64 4)
  %227 = extractvalue { i64, i1 } %226, 1
  %228 = extractvalue { i64, i1 } %226, 0
  %229 = select i1 %227, i64 -1, i64 %228
  %230 = call noalias i8* @_Znam(i64 %229) #9
  %231 = bitcast i8* %230 to i32*
  br label %232

; <label>:232                                     ; preds = %223, %221
  %233 = phi i32* [ %222, %221 ], [ %231, %223 ]
  %234 = icmp slt i32 %28, 1000
  br i1 %234, label %235, label %237

; <label>:235                                     ; preds = %232
  %236 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %246

; <label>:237                                     ; preds = %232
  %238 = add nsw i32 %28, 5
  %239 = sext i32 %238 to i64
  %240 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %239, i64 4)
  %241 = extractvalue { i64, i1 } %240, 1
  %242 = extractvalue { i64, i1 } %240, 0
  %243 = select i1 %241, i64 -1, i64 %242
  %244 = call noalias i8* @_Znam(i64 %243) #9
  %245 = bitcast i8* %244 to i32*
  br label %246

; <label>:246                                     ; preds = %237, %235
  %247 = phi i32* [ %236, %235 ], [ %245, %237 ]
  %248 = icmp slt i32 %28, 1000
  br i1 %248, label %249, label %251

; <label>:249                                     ; preds = %246
  %250 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %260

; <label>:251                                     ; preds = %246
  %252 = add nsw i32 %28, 5
  %253 = sext i32 %252 to i64
  %254 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %253, i64 4)
  %255 = extractvalue { i64, i1 } %254, 1
  %256 = extractvalue { i64, i1 } %254, 0
  %257 = select i1 %255, i64 -1, i64 %256
  %258 = call noalias i8* @_Znam(i64 %257) #9
  %259 = bitcast i8* %258 to i32*
  br label %260

; <label>:260                                     ; preds = %251, %249
  %261 = phi i32* [ %250, %249 ], [ %259, %251 ]
  %262 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %263 = getelementptr inbounds [2 x %class.Vector*]* %262, i32 0, i64 0
  %264 = load %class.Vector** %263, align 8
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 1
  %267 = load %class.Vector** %266, align 8
  %268 = mul nsw i32 %25, %28
  %269 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %270 = load i32* %269, align 4
  %271 = mul nsw i32 %268, %270
  %272 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %273 = load i32* %272, align 4
  %274 = sdiv i32 %271, %273
  %275 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %276 = load i32* %275, align 4
  %277 = mul nsw i32 %268, %276
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %279 = load i32* %278, align 4
  %280 = sdiv i32 %277, %279
  br label %281

; <label>:281                                     ; preds = %1148, %260
  %pairlistindex.0 = phi i32 [ 0, %260 ], [ %pairlistindex.2, %1148 ]
  %pairlistoffset.0 = phi i32 [ 0, %260 ], [ %pairlistoffset.2, %1148 ]
  %pairCount.0 = phi i32 [ 0, %260 ], [ %pairCount.3, %1148 ]
  %i.1 = phi i32 [ 0, %260 ], [ %1149, %1148 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_zz.4, %1148 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yz.4, %1148 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yy.4, %1148 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xz.4, %1148 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xy.4, %1148 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xx.4, %1148 ]
  %fullElectEnergy_s.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectEnergy_s.4, %1148 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectEnergy.4, %1148 ]
  %exclChecksum.0 = phi i32 [ 0, %260 ], [ %exclChecksum.9, %1148 ]
  %282 = icmp slt i32 %i.1, %25
  br i1 %282, label %283, label %1150

; <label>:283                                     ; preds = %281
  %284 = sext i32 %i.1 to i64
  %285 = getelementptr inbounds %struct.CompAtom* %31, i64 %284
  %286 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %287 = load i32* %286, align 4
  %288 = and i32 %287, 4194303
  %289 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %288)
  %290 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 0
  %291 = load i32* %290, align 4
  %292 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 1
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 2
  %295 = load i8** %294, align 8
  %296 = sext i32 %291 to i64
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8* %295, i64 %297
  %299 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %300 = getelementptr inbounds %class.Vector* %299, i32 0, i32 0
  %301 = load double* %300, align 8
  %302 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %303 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %304 = load double* %303, align 8
  %305 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %306 = getelementptr inbounds %class.Vector* %305, i32 0, i32 2
  %307 = load double* %306, align 8
  %308 = sext i32 %i.1 to i64
  %309 = getelementptr inbounds %class.Vector* %264, i64 %308
  %310 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %311 = load i32* %310, align 4
  %312 = lshr i32 %311, 22
  %313 = and i32 %312, 7
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %321, label %315

; <label>:315                                     ; preds = %283
  %316 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %317 = load i32* %316, align 4
  %318 = lshr i32 %317, 25
  %319 = and i32 %318, 1
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %321, label %491

; <label>:321                                     ; preds = %315, %283
  %322 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %323 = load i32* %322, align 4
  %324 = lshr i32 %323, 22
  %325 = and i32 %324, 7
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %341

; <label>:327                                     ; preds = %321
  %328 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %329 = load i32* %328, align 4
  %330 = lshr i32 %329, 22
  %331 = and i32 %330, 7
  %332 = mul nsw i32 %331, %28
  %333 = add nsw i32 %pairCount.0, %332
  %334 = icmp slt i32 %pairCount.0, %274
  br i1 %334, label %337, label %335

; <label>:335                                     ; preds = %327
  %336 = icmp sge i32 %pairCount.0, %280
  br i1 %336, label %337, label %340

; <label>:337                                     ; preds = %335, %327
  %338 = sub nsw i32 %331, 1
  %339 = add nsw i32 %i.1, %338
  br label %1148

; <label>:340                                     ; preds = %335
  br label %341

; <label>:341                                     ; preds = %340, %321
  %pairCount.1 = phi i32 [ %333, %340 ], [ %pairCount.0, %321 ]
  %342 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %350

; <label>:344                                     ; preds = %341
  %345 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 27
  %348 = and i32 %347, 1
  %349 = icmp ne i32 %348, 0
  br label %350

; <label>:350                                     ; preds = %344, %341
  %351 = phi i1 [ false, %341 ], [ %349, %344 ]
  %352 = zext i1 %351 to i32
  %353 = sext i32 0 to i64
  %354 = getelementptr inbounds i32* %205, i64 %353
  %355 = icmp ne i32 %352, 0
  br i1 %355, label %356, label %357

; <label>:356                                     ; preds = %350
  br label %358

; <label>:357                                     ; preds = %350
  br label %358

; <label>:358                                     ; preds = %357, %356
  %359 = phi i32* [ %62, %356 ], [ %48, %357 ]
  %360 = icmp ne i32 %352, 0
  br i1 %360, label %361, label %362

; <label>:361                                     ; preds = %358
  br label %363

; <label>:362                                     ; preds = %358
  br label %363

; <label>:363                                     ; preds = %362, %361
  %364 = phi i32 [ %fixg.2, %361 ], [ %g.0, %362 ]
  %365 = icmp slt i32 0, %364
  br i1 %365, label %366, label %460

; <label>:366                                     ; preds = %363
  %367 = sext i32 0 to i64
  %368 = getelementptr inbounds i32* %359, i64 %367
  %369 = load i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds %struct.CompAtom* %34, i64 %370
  %372 = getelementptr inbounds %struct.CompAtom* %371, i32 0, i32 0
  %373 = getelementptr inbounds %class.Vector* %372, i32 0, i32 0
  %374 = load double* %373, align 8
  %375 = sext i32 %369 to i64
  %376 = getelementptr inbounds %struct.CompAtom* %34, i64 %375
  %377 = getelementptr inbounds %struct.CompAtom* %376, i32 0, i32 0
  %378 = getelementptr inbounds %class.Vector* %377, i32 0, i32 1
  %379 = load double* %378, align 8
  %380 = sext i32 %369 to i64
  %381 = getelementptr inbounds %struct.CompAtom* %34, i64 %380
  %382 = getelementptr inbounds %struct.CompAtom* %381, i32 0, i32 0
  %383 = getelementptr inbounds %class.Vector* %382, i32 0, i32 2
  %384 = load double* %383, align 8
  br label %385

; <label>:385                                     ; preds = %418, %366
  %g.3 = phi i32 [ 0, %366 ], [ %388, %418 ]
  %gli.0 = phi i32* [ %76, %366 ], [ %gli.1, %418 ]
  %j2.0 = phi i32 [ %369, %366 ], [ %391, %418 ]
  %p_j_x.0 = phi double [ %374, %366 ], [ %398, %418 ]
  %p_j_y.0 = phi double [ %379, %366 ], [ %406, %418 ]
  %p_j_z.0 = phi double [ %384, %366 ], [ %414, %418 ]
  %386 = icmp slt i32 %g.3, %364
  br i1 %386, label %387, label %419

; <label>:387                                     ; preds = %385
  %388 = add nsw i32 %g.3, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32* %359, i64 %389
  %391 = load i32* %390, align 4
  %392 = fsub double %301, %p_j_x.0
  %393 = fmul double %392, %392
  %394 = sext i32 %391 to i64
  %395 = getelementptr inbounds %struct.CompAtom* %34, i64 %394
  %396 = getelementptr inbounds %struct.CompAtom* %395, i32 0, i32 0
  %397 = getelementptr inbounds %class.Vector* %396, i32 0, i32 0
  %398 = load double* %397, align 8
  %399 = fsub double %304, %p_j_y.0
  %400 = fmul double %399, %399
  %401 = fadd double %393, %400
  %402 = sext i32 %391 to i64
  %403 = getelementptr inbounds %struct.CompAtom* %34, i64 %402
  %404 = getelementptr inbounds %struct.CompAtom* %403, i32 0, i32 0
  %405 = getelementptr inbounds %class.Vector* %404, i32 0, i32 1
  %406 = load double* %405, align 8
  %407 = fsub double %307, %p_j_z.0
  %408 = fmul double %407, %407
  %409 = fadd double %401, %408
  %410 = sext i32 %391 to i64
  %411 = getelementptr inbounds %struct.CompAtom* %34, i64 %410
  %412 = getelementptr inbounds %struct.CompAtom* %411, i32 0, i32 0
  %413 = getelementptr inbounds %class.Vector* %412, i32 0, i32 2
  %414 = load double* %413, align 8
  %415 = fcmp ole double %409, %8
  br i1 %415, label %416, label %418

; <label>:416                                     ; preds = %387
  store i32 %j2.0, i32* %gli.0, align 4
  %417 = getelementptr inbounds i32* %gli.0, i32 1
  br label %418

; <label>:418                                     ; preds = %416, %387
  %gli.1 = phi i32* [ %417, %416 ], [ %gli.0, %387 ]
  br label %385

; <label>:419                                     ; preds = %385
  %420 = ptrtoint i32* %gli.0 to i64
  %421 = ptrtoint i32* %76 to i64
  %422 = sub i64 %420, %421
  %423 = sdiv exact i64 %422, 4
  %424 = trunc i64 %423 to i32
  br label %425

; <label>:425                                     ; preds = %457, %419
  %pli.0 = phi i32* [ %354, %419 ], [ %456, %457 ]
  %h.0 = phi i32 [ 0, %419 ], [ %458, %457 ]
  %426 = icmp slt i32 %h.0, %424
  br i1 %426, label %427, label %459

; <label>:427                                     ; preds = %425
  %428 = sext i32 %h.0 to i64
  %429 = getelementptr inbounds i32* %76, i64 %428
  %430 = load i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds %struct.CompAtom* %34, i64 %431
  %433 = getelementptr inbounds %struct.CompAtom* %432, i32 0, i32 2
  %434 = load i32* %433, align 4
  %435 = lshr i32 %434, 25
  %436 = and i32 %435, 1
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %439

; <label>:438                                     ; preds = %427
  br label %446

; <label>:439                                     ; preds = %427
  %440 = sext i32 %430 to i64
  %441 = getelementptr inbounds %struct.CompAtom* %34, i64 %440
  %442 = getelementptr inbounds %struct.CompAtom* %441, i32 0, i32 2
  %443 = load i32* %442, align 4
  %444 = lshr i32 %443, 22
  %445 = and i32 %444, 7
  br label %446

; <label>:446                                     ; preds = %439, %438
  %447 = phi i32 [ 1, %438 ], [ %445, %439 ]
  %448 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %430, i32* %448, align 4
  %449 = add nsw i32 %430, 1
  %450 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %449, i32* %450, align 4
  %451 = add nsw i32 %430, 2
  %452 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %430, 3
  %454 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %453, i32* %454, align 4
  %455 = sext i32 %447 to i64
  %456 = getelementptr inbounds i32* %pli.0, i64 %455
  br label %457

; <label>:457                                     ; preds = %446
  %458 = add nsw i32 %h.0, 1
  br label %425

; <label>:459                                     ; preds = %425
  br label %460

; <label>:460                                     ; preds = %459, %363
  %pli.1 = phi i32* [ %pli.0, %459 ], [ %354, %363 ]
  %461 = ptrtoint i32* %pli.1 to i64
  %462 = ptrtoint i32* %205 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  %466 = icmp ne i32 %465, 0
  br i1 %466, label %467, label %474

; <label>:467                                     ; preds = %460
  %468 = sub nsw i32 %465, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i32* %205, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %465 to i64
  %473 = getelementptr inbounds i32* %205, i64 %472
  store i32 %471, i32* %473, align 4
  br label %490

; <label>:474                                     ; preds = %460
  %475 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %476 = load i32* %475, align 4
  %477 = lshr i32 %476, 25
  %478 = and i32 %477, 1
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %480, label %481

; <label>:480                                     ; preds = %474
  br label %486

; <label>:481                                     ; preds = %474
  %482 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %483 = load i32* %482, align 4
  %484 = lshr i32 %483, 22
  %485 = and i32 %484, 7
  br label %486

; <label>:486                                     ; preds = %481, %480
  %487 = phi i32 [ 1, %480 ], [ %485, %481 ]
  %488 = sub nsw i32 %487, 1
  %489 = add nsw i32 %i.1, %488
  br label %1148

; <label>:490                                     ; preds = %467
  br label %491

; <label>:491                                     ; preds = %490, %315
  %pairlistindex.1 = phi i32 [ %465, %490 ], [ %pairlistindex.0, %315 ]
  %pairlistoffset.1 = phi i32 [ 0, %490 ], [ %pairlistoffset.0, %315 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %490 ], [ %pairCount.0, %315 ]
  %492 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %493 = icmp ne i32 %492, 0
  br i1 %493, label %494, label %500

; <label>:494                                     ; preds = %491
  %495 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %496 = load i32* %495, align 4
  %497 = lshr i32 %496, 26
  %498 = and i32 %497, 1
  %499 = icmp ne i32 %498, 0
  br label %500

; <label>:500                                     ; preds = %494, %491
  %501 = phi i1 [ false, %491 ], [ %499, %494 ]
  %502 = zext i1 %501 to i32
  %503 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %504 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %505 = load i32* %504, align 4
  %506 = lshr i32 %505, 28
  %507 = mul nsw i32 6, %506
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds double* %503, i64 %508
  %510 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 1
  %511 = load float* %510, align 4
  %512 = fpext float %511 to double
  %513 = fmul double 3.320636e+02, %512
  %514 = fmul double %513, %16
  %515 = fmul double %514, %9
  %516 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %517 = load i32* %516, align 4
  %518 = and i32 %517, 4194303
  %519 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %518)
  %520 = zext i16 %519 to i32
  %521 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %520)
  %522 = icmp ne i32 %502, 0
  br i1 %522, label %523, label %585

; <label>:523                                     ; preds = %500
  br label %524

; <label>:524                                     ; preds = %582, %523
  %pli4.0 = phi i32* [ %219, %523 ], [ %pli4.2, %582 ]
  %plin.0 = phi i32* [ %233, %523 ], [ %plin.2, %582 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %523 ], [ %583, %582 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %523 ], [ %exclChecksum.3, %582 ]
  %525 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %525, label %526, label %584

; <label>:526                                     ; preds = %524
  %527 = sext i32 %k.0 to i64
  %528 = getelementptr inbounds i32* %205, i64 %527
  %529 = load i32* %528, align 4
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds %struct.CompAtom* %34, i64 %530
  %532 = getelementptr inbounds %struct.CompAtom* %531, i32 0, i32 0
  %533 = getelementptr inbounds %class.Vector* %532, i32 0, i32 0
  %534 = load double* %533, align 8
  %535 = fsub double %301, %534
  %536 = fmul double %535, %535
  %537 = sext i32 %529 to i64
  %538 = getelementptr inbounds %struct.CompAtom* %34, i64 %537
  %539 = getelementptr inbounds %struct.CompAtom* %538, i32 0, i32 0
  %540 = getelementptr inbounds %class.Vector* %539, i32 0, i32 1
  %541 = load double* %540, align 8
  %542 = fsub double %304, %541
  %543 = fmul double %542, %542
  %544 = fadd double %536, %543
  %545 = sext i32 %529 to i64
  %546 = getelementptr inbounds %struct.CompAtom* %34, i64 %545
  %547 = getelementptr inbounds %struct.CompAtom* %546, i32 0, i32 0
  %548 = getelementptr inbounds %class.Vector* %547, i32 0, i32 2
  %549 = load double* %548, align 8
  %550 = fsub double %307, %549
  %551 = fmul double %550, %550
  %552 = fadd double %544, %551
  %553 = sext i32 %529 to i64
  %554 = getelementptr inbounds %struct.CompAtom* %34, i64 %553
  %555 = getelementptr inbounds %struct.CompAtom* %554, i32 0, i32 2
  %556 = load i32* %555, align 4
  %557 = lshr i32 %556, 26
  %558 = and i32 %557, 1
  %559 = icmp ne i32 %558, 0
  br i1 %559, label %581, label %560

; <label>:560                                     ; preds = %526
  %561 = fcmp ole double %552, %7
  br i1 %561, label %562, label %581

; <label>:562                                     ; preds = %560
  %563 = fcmp ole double %552, %19
  br i1 %563, label %564, label %567

; <label>:564                                     ; preds = %562
  %565 = add nsw i32 %exclChecksum.1, 1
  %566 = icmp ne i32 %565, 0
  br i1 %566, label %581, label %567

; <label>:567                                     ; preds = %564, %562
  %exclChecksum.2 = phi i32 [ %565, %564 ], [ %exclChecksum.1, %562 ]
  %568 = sext i32 %529 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %34, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 2
  %571 = load i32* %570, align 4
  %572 = and i32 %571, 4194303
  %573 = icmp sge i32 %572, %291
  br i1 %573, label %574, label %578

; <label>:574                                     ; preds = %567
  %575 = icmp sle i32 %572, %293
  br i1 %575, label %576, label %578

; <label>:576                                     ; preds = %574
  %577 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %529, i32* %pli4.0, align 4
  br label %580

; <label>:578                                     ; preds = %574, %567
  %579 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %529, i32* %plin.0, align 4
  br label %580

; <label>:580                                     ; preds = %578, %576
  %pli4.1 = phi i32* [ %577, %576 ], [ %pli4.0, %578 ]
  %plin.1 = phi i32* [ %plin.0, %576 ], [ %579, %578 ]
  br label %581

; <label>:581                                     ; preds = %580, %564, %560, %526
  %pli4.2 = phi i32* [ %pli4.0, %526 ], [ %pli4.0, %564 ], [ %pli4.1, %580 ], [ %pli4.0, %560 ]
  %plin.2 = phi i32* [ %plin.0, %526 ], [ %plin.0, %564 ], [ %plin.1, %580 ], [ %plin.0, %560 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %526 ], [ %565, %564 ], [ %exclChecksum.2, %580 ], [ %exclChecksum.1, %560 ]
  br label %582

; <label>:582                                     ; preds = %581
  %583 = add nsw i32 %k.0, 1
  br label %524

; <label>:584                                     ; preds = %524
  br label %664

; <label>:585                                     ; preds = %500
  %586 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %586, label %587, label %663

; <label>:587                                     ; preds = %585
  %588 = sext i32 %pairlistoffset.1 to i64
  %589 = getelementptr inbounds i32* %205, i64 %588
  %590 = load i32* %589, align 4
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds %struct.CompAtom* %34, i64 %591
  %593 = getelementptr inbounds %struct.CompAtom* %592, i32 0, i32 0
  %594 = getelementptr inbounds %class.Vector* %593, i32 0, i32 0
  %595 = load double* %594, align 8
  %596 = sext i32 %590 to i64
  %597 = getelementptr inbounds %struct.CompAtom* %34, i64 %596
  %598 = getelementptr inbounds %struct.CompAtom* %597, i32 0, i32 0
  %599 = getelementptr inbounds %class.Vector* %598, i32 0, i32 1
  %600 = load double* %599, align 8
  %601 = sext i32 %590 to i64
  %602 = getelementptr inbounds %struct.CompAtom* %34, i64 %601
  %603 = getelementptr inbounds %struct.CompAtom* %602, i32 0, i32 0
  %604 = getelementptr inbounds %class.Vector* %603, i32 0, i32 2
  %605 = load double* %604, align 8
  %606 = sext i32 %590 to i64
  %607 = getelementptr inbounds %struct.CompAtom* %34, i64 %606
  %608 = getelementptr inbounds %struct.CompAtom* %607, i32 0, i32 2
  %609 = load i32* %608, align 4
  %610 = and i32 %609, 4194303
  br label %611

; <label>:611                                     ; preds = %656, %587
  %pli4.3 = phi i32* [ %219, %587 ], [ %pli4.5, %656 ]
  %plin.3 = phi i32* [ %233, %587 ], [ %plin.5, %656 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %587 ], [ %614, %656 ]
  %j211.0 = phi i32 [ %590, %587 ], [ %617, %656 ]
  %p_j_x12.0 = phi double [ %595, %587 ], [ %624, %656 ]
  %p_j_y13.0 = phi double [ %600, %587 ], [ %632, %656 ]
  %p_j_z14.0 = phi double [ %605, %587 ], [ %640, %656 ]
  %atom215.0 = phi i32 [ %610, %587 ], [ %661, %656 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %587 ], [ %exclChecksum.6, %656 ]
  %612 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %612, label %613, label %662

; <label>:613                                     ; preds = %611
  %614 = add nsw i32 %k10.0, 1
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds i32* %205, i64 %615
  %617 = load i32* %616, align 4
  %618 = fsub double %301, %p_j_x12.0
  %619 = fmul double %618, %618
  %620 = sext i32 %617 to i64
  %621 = getelementptr inbounds %struct.CompAtom* %34, i64 %620
  %622 = getelementptr inbounds %struct.CompAtom* %621, i32 0, i32 0
  %623 = getelementptr inbounds %class.Vector* %622, i32 0, i32 0
  %624 = load double* %623, align 8
  %625 = fsub double %304, %p_j_y13.0
  %626 = fmul double %625, %625
  %627 = fadd double %619, %626
  %628 = sext i32 %617 to i64
  %629 = getelementptr inbounds %struct.CompAtom* %34, i64 %628
  %630 = getelementptr inbounds %struct.CompAtom* %629, i32 0, i32 0
  %631 = getelementptr inbounds %class.Vector* %630, i32 0, i32 1
  %632 = load double* %631, align 8
  %633 = fsub double %307, %p_j_z14.0
  %634 = fmul double %633, %633
  %635 = fadd double %627, %634
  %636 = sext i32 %617 to i64
  %637 = getelementptr inbounds %struct.CompAtom* %34, i64 %636
  %638 = getelementptr inbounds %struct.CompAtom* %637, i32 0, i32 0
  %639 = getelementptr inbounds %class.Vector* %638, i32 0, i32 2
  %640 = load double* %639, align 8
  %641 = fcmp ole double %635, %7
  br i1 %641, label %642, label %656

; <label>:642                                     ; preds = %613
  %643 = fcmp ole double %635, %19
  br i1 %643, label %644, label %647

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %exclChecksum.4, 1
  %646 = icmp ne i32 %645, 0
  br i1 %646, label %656, label %647

; <label>:647                                     ; preds = %644, %642
  %exclChecksum.5 = phi i32 [ %645, %644 ], [ %exclChecksum.4, %642 ]
  %648 = icmp sge i32 %atom215.0, %291
  br i1 %648, label %649, label %653

; <label>:649                                     ; preds = %647
  %650 = icmp sle i32 %atom215.0, %293
  br i1 %650, label %651, label %653

; <label>:651                                     ; preds = %649
  %652 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %655

; <label>:653                                     ; preds = %649, %647
  %654 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %655

; <label>:655                                     ; preds = %653, %651
  %pli4.4 = phi i32* [ %652, %651 ], [ %pli4.3, %653 ]
  %plin.4 = phi i32* [ %plin.3, %651 ], [ %654, %653 ]
  br label %656

; <label>:656                                     ; preds = %655, %644, %613
  %pli4.5 = phi i32* [ %pli4.3, %644 ], [ %pli4.4, %655 ], [ %pli4.3, %613 ]
  %plin.5 = phi i32* [ %plin.3, %644 ], [ %plin.4, %655 ], [ %plin.3, %613 ]
  %exclChecksum.6 = phi i32 [ %645, %644 ], [ %exclChecksum.5, %655 ], [ %exclChecksum.4, %613 ]
  %657 = sext i32 %617 to i64
  %658 = getelementptr inbounds %struct.CompAtom* %34, i64 %657
  %659 = getelementptr inbounds %struct.CompAtom* %658, i32 0, i32 2
  %660 = load i32* %659, align 4
  %661 = and i32 %660, 4194303
  br label %611

; <label>:662                                     ; preds = %611
  br label %663

; <label>:663                                     ; preds = %662, %585
  %pli4.6 = phi i32* [ %pli4.3, %662 ], [ %219, %585 ]
  %plin.6 = phi i32* [ %plin.3, %662 ], [ %233, %585 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %662 ], [ %exclChecksum.0, %585 ]
  br label %664

; <label>:664                                     ; preds = %663, %584
  %pli4.7 = phi i32* [ %pli4.0, %584 ], [ %pli4.6, %663 ]
  %plin.7 = phi i32* [ %plin.0, %584 ], [ %plin.6, %663 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %584 ], [ %exclChecksum.7, %663 ]
  %665 = ptrtoint i32* %pli4.7 to i64
  %666 = ptrtoint i32* %219 to i64
  %667 = sub i64 %665, %666
  %668 = sdiv exact i64 %667, 4
  %669 = trunc i64 %668 to i32
  %670 = icmp ne i32 %669, 0
  br i1 %670, label %671, label %678

; <label>:671                                     ; preds = %664
  %672 = sub nsw i32 %669, 1
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i32* %219, i64 %673
  %675 = load i32* %674, align 4
  %676 = sext i32 %669 to i64
  %677 = getelementptr inbounds i32* %219, i64 %676
  store i32 %675, i32* %677, align 4
  br label %678

; <label>:678                                     ; preds = %671, %664
  br label %679

; <label>:679                                     ; preds = %701, %678
  %plin.8 = phi i32* [ %plin.7, %678 ], [ %plin.9, %701 ]
  %plix.0 = phi i32* [ %247, %678 ], [ %plix.1, %701 ]
  %plim.0 = phi i32* [ %261, %678 ], [ %plim.1, %701 ]
  %k18.0 = phi i32 [ 0, %678 ], [ %702, %701 ]
  %680 = icmp slt i32 %k18.0, %669
  br i1 %680, label %681, label %703

; <label>:681                                     ; preds = %679
  %682 = sext i32 %k18.0 to i64
  %683 = getelementptr inbounds i32* %219, i64 %682
  %684 = load i32* %683, align 4
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds %struct.CompAtom* %34, i64 %685
  %687 = getelementptr inbounds %struct.CompAtom* %686, i32 0, i32 2
  %688 = load i32* %687, align 4
  %689 = and i32 %688, 4194303
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i8* %298, i64 %690
  %692 = load i8* %691, align 1
  %693 = sext i8 %692 to i32
  switch i32 %693, label %700 [
    i32 0, label %694
    i32 1, label %696
    i32 2, label %698
  ]

; <label>:694                                     ; preds = %681
  %695 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %684, i32* %plin.8, align 4
  br label %700

; <label>:696                                     ; preds = %681
  %697 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %684, i32* %plix.0, align 4
  br label %700

; <label>:698                                     ; preds = %681
  %699 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %684, i32* %plim.0, align 4
  br label %700

; <label>:700                                     ; preds = %698, %696, %694, %681
  %plin.9 = phi i32* [ %plin.8, %681 ], [ %plin.8, %698 ], [ %plin.8, %696 ], [ %695, %694 ]
  %plix.1 = phi i32* [ %plix.0, %681 ], [ %plix.0, %698 ], [ %697, %696 ], [ %plix.0, %694 ]
  %plim.1 = phi i32* [ %plim.0, %681 ], [ %699, %698 ], [ %plim.0, %696 ], [ %plim.0, %694 ]
  br label %701

; <label>:701                                     ; preds = %700
  %702 = add nsw i32 %k18.0, 1
  br label %679

; <label>:703                                     ; preds = %679
  %704 = ptrtoint i32* %plix.0 to i64
  %705 = ptrtoint i32* %247 to i64
  %706 = sub i64 %704, %705
  %707 = sdiv exact i64 %706, 4
  %708 = sext i32 %exclChecksum.8 to i64
  %709 = add nsw i64 %708, %707
  %710 = trunc i64 %709 to i32
  %711 = ptrtoint i32* %plim.0 to i64
  %712 = ptrtoint i32* %261 to i64
  %713 = sub i64 %711, %712
  %714 = sdiv exact i64 %713, 4
  %715 = sext i32 %710 to i64
  %716 = add nsw i64 %715, %714
  %717 = trunc i64 %716 to i32
  %718 = ptrtoint i32* %plin.8 to i64
  %719 = ptrtoint i32* %233 to i64
  %720 = sub i64 %718, %719
  %721 = sdiv exact i64 %720, 4
  %722 = trunc i64 %721 to i32
  br label %723

; <label>:723                                     ; preds = %847, %703
  %k18.1 = phi i32 [ 0, %703 ], [ %848, %847 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %703 ], [ %840, %847 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %703 ], [ %831, %847 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %703 ], [ %829, %847 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %703 ], [ %820, %847 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %703 ], [ %818, %847 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %703 ], [ %816, %847 ]
  %fullElectEnergy_s.1 = phi double [ %fullElectEnergy_s.0, %703 ], [ %803, %847 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %703 ], [ %801, %847 ]
  %724 = icmp slt i32 %k18.1, %722
  br i1 %724, label %725, label %849

; <label>:725                                     ; preds = %723
  %726 = sext i32 %k18.1 to i64
  %727 = getelementptr inbounds i32* %233, i64 %726
  %728 = load i32* %727, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds %struct.CompAtom* %34, i64 %729
  %731 = getelementptr inbounds %struct.CompAtom* %730, i32 0, i32 0
  %732 = getelementptr inbounds %class.Vector* %731, i32 0, i32 0
  %733 = load double* %732, align 8
  %734 = fsub double %301, %733
  %735 = fmul double %734, %734
  %736 = getelementptr inbounds %struct.CompAtom* %730, i32 0, i32 0
  %737 = getelementptr inbounds %class.Vector* %736, i32 0, i32 1
  %738 = load double* %737, align 8
  %739 = fsub double %304, %738
  %740 = fmul double %739, %739
  %741 = fadd double %735, %740
  %742 = getelementptr inbounds %struct.CompAtom* %730, i32 0, i32 0
  %743 = getelementptr inbounds %class.Vector* %742, i32 0, i32 2
  %744 = load double* %743, align 8
  %745 = fsub double %307, %744
  %746 = fmul double %745, %745
  %747 = fadd double %741, %746
  %748 = fptrunc double %747 to float
  %749 = bitcast %union.anon.51* %r2f to float*
  store float %748, float* %749, align 4
  %750 = bitcast %union.anon.51* %r2f to i32*
  %751 = load i32* %750, align 4
  %752 = ashr i32 %751, 17
  %753 = add nsw i32 %752, %22
  %754 = mul nsw i32 16, %753
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds double* %14, i64 %755
  %757 = getelementptr inbounds double* %756, i64 8
  %758 = getelementptr inbounds double* %757, i64 4
  %759 = getelementptr inbounds double* %758, i64 0
  %760 = load double* %759, align 8
  %761 = bitcast %union.anon.51* %r2f to i32*
  %762 = load i32* %761, align 4
  %763 = and i32 %762, -131072
  store i32 %763, i32* %761, align 4
  %764 = getelementptr inbounds %struct.CompAtom* %730, i32 0, i32 1
  %765 = load float* %764, align 4
  %766 = fpext float %765 to double
  %767 = fmul double %515, %766
  %768 = bitcast %union.anon.51* %r2f to float*
  %769 = load float* %768, align 4
  %770 = fpext float %769 to double
  %771 = fsub double %747, %770
  %772 = getelementptr inbounds %struct.CompAtom* %730, i32 0, i32 2
  %773 = load i32* %772, align 4
  %774 = lshr i32 %773, 28
  %775 = mul nsw i32 2, %774
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds double* %509, i64 %776
  %778 = load double* %777, align 8
  %779 = mul nsw i32 2, %774
  %780 = add nsw i32 %779, 1
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds double* %509, i64 %781
  %783 = load double* %782, align 8
  %784 = getelementptr inbounds double* %758, i64 1
  %785 = load double* %784, align 8
  %786 = getelementptr inbounds double* %758, i64 2
  %787 = load double* %786, align 8
  %788 = getelementptr inbounds double* %758, i64 3
  %789 = load double* %788, align 8
  %790 = fmul double %789, %767
  %791 = fmul double %787, %767
  %792 = fmul double %785, %767
  %793 = fmul double %760, %767
  %794 = fmul double %771, %790
  %795 = fadd double %794, %791
  %796 = fmul double %795, %771
  %797 = fadd double %796, %792
  %798 = fmul double %797, %771
  %799 = fadd double %798, %793
  %800 = fmul double %778, %799
  %801 = fadd double %fullElectEnergy.1, %800
  %802 = fmul double %783, %799
  %803 = fadd double %fullElectEnergy_s.1, %802
  %804 = fmul double 3.000000e+00, %771
  %805 = fmul double %804, %790
  %806 = fmul double 2.000000e+00, %791
  %807 = fadd double %805, %806
  %808 = fmul double %807, %771
  %809 = fadd double %808, %792
  %810 = fmul double -2.000000e+00, %809
  %811 = fmul double %810, %778
  %812 = sext i32 %728 to i64
  %813 = getelementptr inbounds %class.Vector* %267, i64 %812
  %814 = fmul double %811, %734
  %815 = fmul double %814, %734
  %816 = fadd double %fullElectVirial_xx.1, %815
  %817 = fmul double %814, %739
  %818 = fadd double %fullElectVirial_xy.1, %817
  %819 = fmul double %814, %745
  %820 = fadd double %fullElectVirial_xz.1, %819
  %821 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %822 = load double* %821, align 8
  %823 = fadd double %822, %814
  store double %823, double* %821, align 8
  %824 = getelementptr inbounds %class.Vector* %813, i32 0, i32 0
  %825 = load double* %824, align 8
  %826 = fsub double %825, %814
  store double %826, double* %824, align 8
  %827 = fmul double %811, %739
  %828 = fmul double %827, %739
  %829 = fadd double %fullElectVirial_yy.1, %828
  %830 = fmul double %827, %745
  %831 = fadd double %fullElectVirial_yz.1, %830
  %832 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %833 = load double* %832, align 8
  %834 = fadd double %833, %827
  store double %834, double* %832, align 8
  %835 = getelementptr inbounds %class.Vector* %813, i32 0, i32 1
  %836 = load double* %835, align 8
  %837 = fsub double %836, %827
  store double %837, double* %835, align 8
  %838 = fmul double %811, %745
  %839 = fmul double %838, %745
  %840 = fadd double %fullElectVirial_zz.1, %839
  %841 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %842 = load double* %841, align 8
  %843 = fadd double %842, %838
  store double %843, double* %841, align 8
  %844 = getelementptr inbounds %class.Vector* %813, i32 0, i32 2
  %845 = load double* %844, align 8
  %846 = fsub double %845, %838
  store double %846, double* %844, align 8
  br label %847

; <label>:847                                     ; preds = %725
  %848 = add nsw i32 %k18.1, 1
  br label %723

; <label>:849                                     ; preds = %723
  %850 = ptrtoint i32* %plim.0 to i64
  %851 = ptrtoint i32* %261 to i64
  %852 = sub i64 %850, %851
  %853 = sdiv exact i64 %852, 4
  %854 = trunc i64 %853 to i32
  br label %855

; <label>:855                                     ; preds = %998, %849
  %k18.2 = phi i32 [ 0, %849 ], [ %999, %998 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %849 ], [ %991, %998 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %849 ], [ %982, %998 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %849 ], [ %980, %998 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %849 ], [ %971, %998 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %849 ], [ %969, %998 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %849 ], [ %967, %998 ]
  %fullElectEnergy_s.2 = phi double [ %fullElectEnergy_s.1, %849 ], [ %954, %998 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %849 ], [ %952, %998 ]
  %856 = icmp slt i32 %k18.2, %854
  br i1 %856, label %857, label %1000

; <label>:857                                     ; preds = %855
  %858 = sext i32 %k18.2 to i64
  %859 = getelementptr inbounds i32* %261, i64 %858
  %860 = load i32* %859, align 4
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds %struct.CompAtom* %34, i64 %861
  %863 = getelementptr inbounds %struct.CompAtom* %862, i32 0, i32 0
  %864 = getelementptr inbounds %class.Vector* %863, i32 0, i32 0
  %865 = load double* %864, align 8
  %866 = fsub double %301, %865
  %867 = fmul double %866, %866
  %868 = getelementptr inbounds %struct.CompAtom* %862, i32 0, i32 0
  %869 = getelementptr inbounds %class.Vector* %868, i32 0, i32 1
  %870 = load double* %869, align 8
  %871 = fsub double %304, %870
  %872 = fmul double %871, %871
  %873 = fadd double %867, %872
  %874 = getelementptr inbounds %struct.CompAtom* %862, i32 0, i32 0
  %875 = getelementptr inbounds %class.Vector* %874, i32 0, i32 2
  %876 = load double* %875, align 8
  %877 = fsub double %307, %876
  %878 = fmul double %877, %877
  %879 = fadd double %873, %878
  %880 = fptrunc double %879 to float
  %881 = bitcast %union.anon.52* %r2f29 to float*
  store float %880, float* %881, align 4
  %882 = bitcast %union.anon.52* %r2f29 to i32*
  %883 = load i32* %882, align 4
  %884 = ashr i32 %883, 17
  %885 = add nsw i32 %884, %22
  %886 = mul nsw i32 16, %885
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds double* %14, i64 %887
  %889 = getelementptr inbounds double* %888, i64 8
  %890 = getelementptr inbounds double* %889, i64 4
  %891 = getelementptr inbounds double* %890, i64 0
  %892 = load double* %891, align 8
  %893 = bitcast %union.anon.52* %r2f29 to i32*
  %894 = load i32* %893, align 4
  %895 = and i32 %894, -131072
  store i32 %895, i32* %893, align 4
  %896 = getelementptr inbounds %struct.CompAtom* %862, i32 0, i32 1
  %897 = load float* %896, align 4
  %898 = fpext float %897 to double
  %899 = fmul double %515, %898
  %900 = bitcast %union.anon.52* %r2f29 to float*
  %901 = load float* %900, align 4
  %902 = fpext float %901 to double
  %903 = fsub double %879, %902
  %904 = getelementptr inbounds %struct.CompAtom* %862, i32 0, i32 2
  %905 = load i32* %904, align 4
  %906 = lshr i32 %905, 28
  %907 = mul nsw i32 2, %906
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds double* %509, i64 %908
  %910 = load double* %909, align 8
  %911 = mul nsw i32 2, %906
  %912 = add nsw i32 %911, 1
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds double* %509, i64 %913
  %915 = load double* %914, align 8
  %916 = getelementptr inbounds double* %890, i64 1
  %917 = load double* %916, align 8
  %918 = getelementptr inbounds double* %890, i64 2
  %919 = load double* %918, align 8
  %920 = getelementptr inbounds double* %890, i64 3
  %921 = load double* %920, align 8
  %922 = mul nsw i32 4, %885
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds double* %15, i64 %923
  %925 = getelementptr inbounds double* %924, i64 0
  %926 = load double* %925, align 8
  %927 = fmul double %18, %926
  %928 = fsub double %892, %927
  %929 = getelementptr inbounds double* %924, i64 1
  %930 = load double* %929, align 8
  %931 = fmul double %18, %930
  %932 = fsub double %917, %931
  %933 = getelementptr inbounds double* %924, i64 2
  %934 = load double* %933, align 8
  %935 = fmul double %18, %934
  %936 = fsub double %919, %935
  %937 = getelementptr inbounds double* %924, i64 3
  %938 = load double* %937, align 8
  %939 = fmul double %18, %938
  %940 = fsub double %921, %939
  %941 = fmul double %940, %899
  %942 = fmul double %936, %899
  %943 = fmul double %932, %899
  %944 = fmul double %928, %899
  %945 = fmul double %903, %941
  %946 = fadd double %945, %942
  %947 = fmul double %946, %903
  %948 = fadd double %947, %943
  %949 = fmul double %948, %903
  %950 = fadd double %949, %944
  %951 = fmul double %910, %950
  %952 = fadd double %fullElectEnergy.2, %951
  %953 = fmul double %915, %950
  %954 = fadd double %fullElectEnergy_s.2, %953
  %955 = fmul double 3.000000e+00, %903
  %956 = fmul double %955, %941
  %957 = fmul double 2.000000e+00, %942
  %958 = fadd double %956, %957
  %959 = fmul double %958, %903
  %960 = fadd double %959, %943
  %961 = fmul double -2.000000e+00, %960
  %962 = fmul double %961, %910
  %963 = sext i32 %860 to i64
  %964 = getelementptr inbounds %class.Vector* %267, i64 %963
  %965 = fmul double %962, %866
  %966 = fmul double %965, %866
  %967 = fadd double %fullElectVirial_xx.2, %966
  %968 = fmul double %965, %871
  %969 = fadd double %fullElectVirial_xy.2, %968
  %970 = fmul double %965, %877
  %971 = fadd double %fullElectVirial_xz.2, %970
  %972 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %973 = load double* %972, align 8
  %974 = fadd double %973, %965
  store double %974, double* %972, align 8
  %975 = getelementptr inbounds %class.Vector* %964, i32 0, i32 0
  %976 = load double* %975, align 8
  %977 = fsub double %976, %965
  store double %977, double* %975, align 8
  %978 = fmul double %962, %871
  %979 = fmul double %978, %871
  %980 = fadd double %fullElectVirial_yy.2, %979
  %981 = fmul double %978, %877
  %982 = fadd double %fullElectVirial_yz.2, %981
  %983 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %984 = load double* %983, align 8
  %985 = fadd double %984, %978
  store double %985, double* %983, align 8
  %986 = getelementptr inbounds %class.Vector* %964, i32 0, i32 1
  %987 = load double* %986, align 8
  %988 = fsub double %987, %978
  store double %988, double* %986, align 8
  %989 = fmul double %962, %877
  %990 = fmul double %989, %877
  %991 = fadd double %fullElectVirial_zz.2, %990
  %992 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %993 = load double* %992, align 8
  %994 = fadd double %993, %989
  store double %994, double* %992, align 8
  %995 = getelementptr inbounds %class.Vector* %964, i32 0, i32 2
  %996 = load double* %995, align 8
  %997 = fsub double %996, %989
  store double %997, double* %995, align 8
  br label %998

; <label>:998                                     ; preds = %857
  %999 = add nsw i32 %k18.2, 1
  br label %855

; <label>:1000                                    ; preds = %855
  %1001 = ptrtoint i32* %plix.0 to i64
  %1002 = ptrtoint i32* %247 to i64
  %1003 = sub i64 %1001, %1002
  %1004 = sdiv exact i64 %1003, 4
  %1005 = trunc i64 %1004 to i32
  br label %1006

; <label>:1006                                    ; preds = %1145, %1000
  %k18.3 = phi i32 [ 0, %1000 ], [ %1146, %1145 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1000 ], [ %1138, %1145 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1000 ], [ %1129, %1145 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1000 ], [ %1127, %1145 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1000 ], [ %1118, %1145 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1000 ], [ %1116, %1145 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1000 ], [ %1114, %1145 ]
  %fullElectEnergy_s.3 = phi double [ %fullElectEnergy_s.2, %1000 ], [ %1101, %1145 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1000 ], [ %1099, %1145 ]
  %1007 = icmp slt i32 %k18.3, %1005
  br i1 %1007, label %1008, label %1147

; <label>:1008                                    ; preds = %1006
  %1009 = sext i32 %k18.3 to i64
  %1010 = getelementptr inbounds i32* %247, i64 %1009
  %1011 = load i32* %1010, align 4
  %1012 = sext i32 %1011 to i64
  %1013 = getelementptr inbounds %struct.CompAtom* %34, i64 %1012
  %1014 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 0
  %1015 = getelementptr inbounds %class.Vector* %1014, i32 0, i32 0
  %1016 = load double* %1015, align 8
  %1017 = fsub double %301, %1016
  %1018 = fmul double %1017, %1017
  %1019 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 0
  %1020 = getelementptr inbounds %class.Vector* %1019, i32 0, i32 1
  %1021 = load double* %1020, align 8
  %1022 = fsub double %304, %1021
  %1023 = fmul double %1022, %1022
  %1024 = fadd double %1018, %1023
  %1025 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 0
  %1026 = getelementptr inbounds %class.Vector* %1025, i32 0, i32 2
  %1027 = load double* %1026, align 8
  %1028 = fsub double %307, %1027
  %1029 = fmul double %1028, %1028
  %1030 = fadd double %1024, %1029
  %1031 = fptrunc double %1030 to float
  %1032 = bitcast %union.anon.53* %r2f54 to float*
  store float %1031, float* %1032, align 4
  %1033 = bitcast %union.anon.53* %r2f54 to i32*
  %1034 = load i32* %1033, align 4
  %1035 = ashr i32 %1034, 17
  %1036 = add nsw i32 %1035, %22
  %1037 = mul nsw i32 16, %1036
  %1038 = sext i32 %1037 to i64
  %1039 = getelementptr inbounds double* %14, i64 %1038
  %1040 = getelementptr inbounds double* %1039, i64 8
  %1041 = getelementptr inbounds double* %1040, i64 4
  %1042 = getelementptr inbounds double* %1041, i64 0
  %1043 = load double* %1042, align 8
  %1044 = bitcast %union.anon.53* %r2f54 to i32*
  %1045 = load i32* %1044, align 4
  %1046 = and i32 %1045, -131072
  store i32 %1046, i32* %1044, align 4
  %1047 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 1
  %1048 = load float* %1047, align 4
  %1049 = fpext float %1048 to double
  %1050 = fmul double %515, %1049
  %1051 = bitcast %union.anon.53* %r2f54 to float*
  %1052 = load float* %1051, align 4
  %1053 = fpext float %1052 to double
  %1054 = fsub double %1030, %1053
  %1055 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 2
  %1056 = load i32* %1055, align 4
  %1057 = lshr i32 %1056, 28
  %1058 = mul nsw i32 2, %1057
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds double* %509, i64 %1059
  %1061 = load double* %1060, align 8
  %1062 = mul nsw i32 2, %1057
  %1063 = add nsw i32 %1062, 1
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds double* %509, i64 %1064
  %1066 = load double* %1065, align 8
  %1067 = getelementptr inbounds double* %1041, i64 1
  %1068 = load double* %1067, align 8
  %1069 = getelementptr inbounds double* %1041, i64 2
  %1070 = load double* %1069, align 8
  %1071 = getelementptr inbounds double* %1041, i64 3
  %1072 = load double* %1071, align 8
  %1073 = mul nsw i32 4, %1036
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds double* %15, i64 %1074
  %1076 = getelementptr inbounds double* %1075, i64 0
  %1077 = load double* %1076, align 8
  %1078 = fsub double %1043, %1077
  %1079 = getelementptr inbounds double* %1075, i64 1
  %1080 = load double* %1079, align 8
  %1081 = fsub double %1068, %1080
  %1082 = getelementptr inbounds double* %1075, i64 2
  %1083 = load double* %1082, align 8
  %1084 = fsub double %1070, %1083
  %1085 = getelementptr inbounds double* %1075, i64 3
  %1086 = load double* %1085, align 8
  %1087 = fsub double %1072, %1086
  %1088 = fmul double %1087, %1050
  %1089 = fmul double %1084, %1050
  %1090 = fmul double %1081, %1050
  %1091 = fmul double %1078, %1050
  %1092 = fmul double %1054, %1088
  %1093 = fadd double %1092, %1089
  %1094 = fmul double %1093, %1054
  %1095 = fadd double %1094, %1090
  %1096 = fmul double %1095, %1054
  %1097 = fadd double %1096, %1091
  %1098 = fmul double %1061, %1097
  %1099 = fadd double %fullElectEnergy.3, %1098
  %1100 = fmul double %1066, %1097
  %1101 = fadd double %fullElectEnergy_s.3, %1100
  %1102 = fmul double 3.000000e+00, %1054
  %1103 = fmul double %1102, %1088
  %1104 = fmul double 2.000000e+00, %1089
  %1105 = fadd double %1103, %1104
  %1106 = fmul double %1105, %1054
  %1107 = fadd double %1106, %1090
  %1108 = fmul double -2.000000e+00, %1107
  %1109 = fmul double %1108, %1061
  %1110 = sext i32 %1011 to i64
  %1111 = getelementptr inbounds %class.Vector* %267, i64 %1110
  %1112 = fmul double %1109, %1017
  %1113 = fmul double %1112, %1017
  %1114 = fadd double %fullElectVirial_xx.3, %1113
  %1115 = fmul double %1112, %1022
  %1116 = fadd double %fullElectVirial_xy.3, %1115
  %1117 = fmul double %1112, %1028
  %1118 = fadd double %fullElectVirial_xz.3, %1117
  %1119 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %1120 = load double* %1119, align 8
  %1121 = fadd double %1120, %1112
  store double %1121, double* %1119, align 8
  %1122 = getelementptr inbounds %class.Vector* %1111, i32 0, i32 0
  %1123 = load double* %1122, align 8
  %1124 = fsub double %1123, %1112
  store double %1124, double* %1122, align 8
  %1125 = fmul double %1109, %1022
  %1126 = fmul double %1125, %1022
  %1127 = fadd double %fullElectVirial_yy.3, %1126
  %1128 = fmul double %1125, %1028
  %1129 = fadd double %fullElectVirial_yz.3, %1128
  %1130 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %1131 = load double* %1130, align 8
  %1132 = fadd double %1131, %1125
  store double %1132, double* %1130, align 8
  %1133 = getelementptr inbounds %class.Vector* %1111, i32 0, i32 1
  %1134 = load double* %1133, align 8
  %1135 = fsub double %1134, %1125
  store double %1135, double* %1133, align 8
  %1136 = fmul double %1109, %1028
  %1137 = fmul double %1136, %1028
  %1138 = fadd double %fullElectVirial_zz.3, %1137
  %1139 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %1140 = load double* %1139, align 8
  %1141 = fadd double %1140, %1136
  store double %1141, double* %1139, align 8
  %1142 = getelementptr inbounds %class.Vector* %1111, i32 0, i32 2
  %1143 = load double* %1142, align 8
  %1144 = fsub double %1143, %1136
  store double %1144, double* %1142, align 8
  br label %1145

; <label>:1145                                    ; preds = %1008
  %1146 = add nsw i32 %k18.3, 1
  br label %1006

; <label>:1147                                    ; preds = %1006
  br label %1148

; <label>:1148                                    ; preds = %1147, %486, %337
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %337 ], [ %pairlistindex.1, %1147 ], [ %465, %486 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %337 ], [ %pairlistoffset.1, %1147 ], [ 0, %486 ]
  %pairCount.3 = phi i32 [ %333, %337 ], [ %pairCount.2, %1147 ], [ %pairCount.1, %486 ]
  %i.2 = phi i32 [ %339, %337 ], [ %i.1, %1147 ], [ %489, %486 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %337 ], [ %fullElectVirial_zz.3, %1147 ], [ %fullElectVirial_zz.0, %486 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %337 ], [ %fullElectVirial_yz.3, %1147 ], [ %fullElectVirial_yz.0, %486 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %337 ], [ %fullElectVirial_yy.3, %1147 ], [ %fullElectVirial_yy.0, %486 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %337 ], [ %fullElectVirial_xz.3, %1147 ], [ %fullElectVirial_xz.0, %486 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %337 ], [ %fullElectVirial_xy.3, %1147 ], [ %fullElectVirial_xy.0, %486 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %337 ], [ %fullElectVirial_xx.3, %1147 ], [ %fullElectVirial_xx.0, %486 ]
  %fullElectEnergy_s.4 = phi double [ %fullElectEnergy_s.0, %337 ], [ %fullElectEnergy_s.3, %1147 ], [ %fullElectEnergy_s.0, %486 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %337 ], [ %fullElectEnergy.3, %1147 ], [ %fullElectEnergy.0, %486 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %337 ], [ %717, %1147 ], [ %exclChecksum.0, %486 ]
  %1149 = add nsw i32 %i.2, 1
  br label %281

; <label>:1150                                    ; preds = %281
  %1151 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1152 = icmp ne i32* %48, %1151
  br i1 %1152, label %1153, label %1158

; <label>:1153                                    ; preds = %1150
  %1154 = icmp eq i32* %48, null
  br i1 %1154, label %1157, label %1155

; <label>:1155                                    ; preds = %1153
  %1156 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1156) #8
  br label %1157

; <label>:1157                                    ; preds = %1155, %1153
  br label %1158

; <label>:1158                                    ; preds = %1157, %1150
  %1159 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1160 = icmp ne i32* %62, %1159
  br i1 %1160, label %1161, label %1166

; <label>:1161                                    ; preds = %1158
  %1162 = icmp eq i32* %62, null
  br i1 %1162, label %1165, label %1163

; <label>:1163                                    ; preds = %1161
  %1164 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1164) #8
  br label %1165

; <label>:1165                                    ; preds = %1163, %1161
  br label %1166

; <label>:1166                                    ; preds = %1165, %1158
  %1167 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1168 = icmp ne i32* %76, %1167
  br i1 %1168, label %1169, label %1174

; <label>:1169                                    ; preds = %1166
  %1170 = icmp eq i32* %76, null
  br i1 %1170, label %1173, label %1171

; <label>:1171                                    ; preds = %1169
  %1172 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1172) #8
  br label %1173

; <label>:1173                                    ; preds = %1171, %1169
  br label %1174

; <label>:1174                                    ; preds = %1173, %1166
  %1175 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1176 = icmp ne i32* %205, %1175
  br i1 %1176, label %1177, label %1182

; <label>:1177                                    ; preds = %1174
  %1178 = icmp eq i32* %205, null
  br i1 %1178, label %1181, label %1179

; <label>:1179                                    ; preds = %1177
  %1180 = bitcast i32* %205 to i8*
  call void @_ZdaPv(i8* %1180) #8
  br label %1181

; <label>:1181                                    ; preds = %1179, %1177
  br label %1182

; <label>:1182                                    ; preds = %1181, %1174
  %1183 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1184 = icmp ne i32* %219, %1183
  br i1 %1184, label %1185, label %1190

; <label>:1185                                    ; preds = %1182
  %1186 = icmp eq i32* %219, null
  br i1 %1186, label %1189, label %1187

; <label>:1187                                    ; preds = %1185
  %1188 = bitcast i32* %219 to i8*
  call void @_ZdaPv(i8* %1188) #8
  br label %1189

; <label>:1189                                    ; preds = %1187, %1185
  br label %1190

; <label>:1190                                    ; preds = %1189, %1182
  %1191 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1192 = icmp ne i32* %233, %1191
  br i1 %1192, label %1193, label %1198

; <label>:1193                                    ; preds = %1190
  %1194 = icmp eq i32* %233, null
  br i1 %1194, label %1197, label %1195

; <label>:1195                                    ; preds = %1193
  %1196 = bitcast i32* %233 to i8*
  call void @_ZdaPv(i8* %1196) #8
  br label %1197

; <label>:1197                                    ; preds = %1195, %1193
  br label %1198

; <label>:1198                                    ; preds = %1197, %1190
  %1199 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1200 = icmp ne i32* %247, %1199
  br i1 %1200, label %1201, label %1206

; <label>:1201                                    ; preds = %1198
  %1202 = icmp eq i32* %247, null
  br i1 %1202, label %1205, label %1203

; <label>:1203                                    ; preds = %1201
  %1204 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %1204) #8
  br label %1205

; <label>:1205                                    ; preds = %1203, %1201
  br label %1206

; <label>:1206                                    ; preds = %1205, %1198
  %1207 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1208 = icmp ne i32* %261, %1207
  br i1 %1208, label %1209, label %1214

; <label>:1209                                    ; preds = %1206
  %1210 = icmp eq i32* %261, null
  br i1 %1210, label %1213, label %1211

; <label>:1211                                    ; preds = %1209
  %1212 = bitcast i32* %261 to i8*
  call void @_ZdaPv(i8* %1212) #8
  br label %1213

; <label>:1213                                    ; preds = %1211, %1209
  br label %1214

; <label>:1214                                    ; preds = %1213, %1206
  %1215 = sitofp i32 %exclChecksum.0 to double
  %1216 = getelementptr inbounds double* %6, i64 22
  %1217 = load double* %1216, align 8
  %1218 = fadd double %1217, %1215
  store double %1218, double* %1216, align 8
  %1219 = getelementptr inbounds double* %6, i64 1
  %1220 = load double* %1219, align 8
  %1221 = fadd double %1220, %fullElectEnergy.0
  store double %1221, double* %1219, align 8
  %1222 = getelementptr inbounds double* %6, i64 24
  %1223 = load double* %1222, align 8
  %1224 = fadd double %1223, %fullElectEnergy_s.0
  store double %1224, double* %1222, align 8
  %1225 = getelementptr inbounds double* %6, i64 12
  %1226 = load double* %1225, align 8
  %1227 = fadd double %1226, %fullElectVirial_xx.0
  store double %1227, double* %1225, align 8
  %1228 = getelementptr inbounds double* %6, i64 13
  %1229 = load double* %1228, align 8
  %1230 = fadd double %1229, %fullElectVirial_xy.0
  store double %1230, double* %1228, align 8
  %1231 = getelementptr inbounds double* %6, i64 14
  %1232 = load double* %1231, align 8
  %1233 = fadd double %1232, %fullElectVirial_xz.0
  store double %1233, double* %1231, align 8
  %1234 = getelementptr inbounds double* %6, i64 15
  %1235 = load double* %1234, align 8
  %1236 = fadd double %1235, %fullElectVirial_xy.0
  store double %1236, double* %1234, align 8
  %1237 = getelementptr inbounds double* %6, i64 16
  %1238 = load double* %1237, align 8
  %1239 = fadd double %1238, %fullElectVirial_yy.0
  store double %1239, double* %1237, align 8
  %1240 = getelementptr inbounds double* %6, i64 17
  %1241 = load double* %1240, align 8
  %1242 = fadd double %1241, %fullElectVirial_yz.0
  store double %1242, double* %1240, align 8
  %1243 = getelementptr inbounds double* %6, i64 18
  %1244 = load double* %1243, align 8
  %1245 = fadd double %1244, %fullElectVirial_xz.0
  store double %1245, double* %1243, align 8
  %1246 = getelementptr inbounds double* %6, i64 19
  %1247 = load double* %1246, align 8
  %1248 = fadd double %1247, %fullElectVirial_yz.0
  store double %1248, double* %1246, align 8
  %1249 = getelementptr inbounds double* %6, i64 20
  %1250 = load double* %1249, align 8
  %1251 = fadd double %1250, %fullElectVirial_zz.0
  store double %1251, double* %1249, align 8
  br label %1252

; <label>:1252                                    ; preds = %1214, %180, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil35calc_self_energy_slow_fullelect_fepEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.62, align 4
  %r2f28 = alloca %union.anon.63, align 4
  %r2f53 = alloca %union.anon.64, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1311

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %163

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  %136 = icmp ne i32 %all_fixed.0, 0
  br i1 %136, label %137, label %162

; <label>:137                                     ; preds = %135
  %138 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %139 = icmp ne i32* %48, %138
  br i1 %139, label %140, label %145

; <label>:140                                     ; preds = %137
  %141 = icmp eq i32* %48, null
  br i1 %141, label %144, label %142

; <label>:142                                     ; preds = %140
  %143 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %143) #8
  br label %144

; <label>:144                                     ; preds = %142, %140
  br label %145

; <label>:145                                     ; preds = %144, %137
  %146 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %147 = icmp ne i32* %62, %146
  br i1 %147, label %148, label %153

; <label>:148                                     ; preds = %145
  %149 = icmp eq i32* %62, null
  br i1 %149, label %152, label %150

; <label>:150                                     ; preds = %148
  %151 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %151) #8
  br label %152

; <label>:152                                     ; preds = %150, %148
  br label %153

; <label>:153                                     ; preds = %152, %145
  %154 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %155 = icmp ne i32* %76, %154
  br i1 %155, label %156, label %161

; <label>:156                                     ; preds = %153
  %157 = icmp eq i32* %76, null
  br i1 %157, label %160, label %158

; <label>:158                                     ; preds = %156
  %159 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %159) #8
  br label %160

; <label>:160                                     ; preds = %158, %156
  br label %161

; <label>:161                                     ; preds = %160, %153
  br label %1311

; <label>:162                                     ; preds = %135
  br label %163

; <label>:163                                     ; preds = %162, %111
  %fixg.2 = phi i32 [ %fixg.0, %162 ], [ 0, %111 ]
  %164 = icmp ne i32 %fixg.2, 0
  br i1 %164, label %165, label %172

; <label>:165                                     ; preds = %163
  %166 = sub nsw i32 %fixg.2, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32* %62, i64 %167
  %169 = load i32* %168, align 4
  %170 = sext i32 %fixg.2 to i64
  %171 = getelementptr inbounds i32* %62, i64 %170
  store i32 %169, i32* %171, align 4
  br label %172

; <label>:172                                     ; preds = %165, %163
  %173 = icmp slt i32 %28, 1000
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %172
  %175 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %185

; <label>:176                                     ; preds = %172
  %177 = add nsw i32 %28, 5
  %178 = sext i32 %177 to i64
  %179 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %178, i64 4)
  %180 = extractvalue { i64, i1 } %179, 1
  %181 = extractvalue { i64, i1 } %179, 0
  %182 = select i1 %180, i64 -1, i64 %181
  %183 = call noalias i8* @_Znam(i64 %182) #9
  %184 = bitcast i8* %183 to i32*
  br label %185

; <label>:185                                     ; preds = %176, %174
  %186 = phi i32* [ %175, %174 ], [ %184, %176 ]
  %187 = icmp slt i32 %28, 1000
  br i1 %187, label %188, label %190

; <label>:188                                     ; preds = %185
  %189 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %199

; <label>:190                                     ; preds = %185
  %191 = add nsw i32 %28, 5
  %192 = sext i32 %191 to i64
  %193 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %192, i64 4)
  %194 = extractvalue { i64, i1 } %193, 1
  %195 = extractvalue { i64, i1 } %193, 0
  %196 = select i1 %194, i64 -1, i64 %195
  %197 = call noalias i8* @_Znam(i64 %196) #9
  %198 = bitcast i8* %197 to i32*
  br label %199

; <label>:199                                     ; preds = %190, %188
  %200 = phi i32* [ %189, %188 ], [ %198, %190 ]
  %201 = icmp slt i32 %28, 1000
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %199
  %203 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %213

; <label>:204                                     ; preds = %199
  %205 = add nsw i32 %28, 5
  %206 = sext i32 %205 to i64
  %207 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %206, i64 4)
  %208 = extractvalue { i64, i1 } %207, 1
  %209 = extractvalue { i64, i1 } %207, 0
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = call noalias i8* @_Znam(i64 %210) #9
  %212 = bitcast i8* %211 to i32*
  br label %213

; <label>:213                                     ; preds = %204, %202
  %214 = phi i32* [ %203, %202 ], [ %212, %204 ]
  %215 = icmp slt i32 %28, 1000
  br i1 %215, label %216, label %218

; <label>:216                                     ; preds = %213
  %217 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %227

; <label>:218                                     ; preds = %213
  %219 = add nsw i32 %28, 5
  %220 = sext i32 %219 to i64
  %221 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %220, i64 4)
  %222 = extractvalue { i64, i1 } %221, 1
  %223 = extractvalue { i64, i1 } %221, 0
  %224 = select i1 %222, i64 -1, i64 %223
  %225 = call noalias i8* @_Znam(i64 %224) #9
  %226 = bitcast i8* %225 to i32*
  br label %227

; <label>:227                                     ; preds = %218, %216
  %228 = phi i32* [ %217, %216 ], [ %226, %218 ]
  %229 = icmp slt i32 %28, 1000
  br i1 %229, label %230, label %232

; <label>:230                                     ; preds = %227
  %231 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %241

; <label>:232                                     ; preds = %227
  %233 = add nsw i32 %28, 5
  %234 = sext i32 %233 to i64
  %235 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %234, i64 4)
  %236 = extractvalue { i64, i1 } %235, 1
  %237 = extractvalue { i64, i1 } %235, 0
  %238 = select i1 %236, i64 -1, i64 %237
  %239 = call noalias i8* @_Znam(i64 %238) #9
  %240 = bitcast i8* %239 to i32*
  br label %241

; <label>:241                                     ; preds = %232, %230
  %242 = phi i32* [ %231, %230 ], [ %240, %232 ]
  %243 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %244 = getelementptr inbounds [2 x %class.Vector*]* %243, i32 0, i64 0
  %245 = load %class.Vector** %244, align 8
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 1
  %248 = load %class.Vector** %247, align 8
  %249 = sub nsw i32 %25, 1
  %250 = mul nsw i32 %249, %28
  %251 = sdiv i32 %250, 2
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %253 = load i32* %252, align 4
  %254 = mul nsw i32 %251, %253
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %256 = load i32* %255, align 4
  %257 = sdiv i32 %254, %256
  %258 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %259 = load i32* %258, align 4
  %260 = mul nsw i32 %251, %259
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %262 = load i32* %261, align 4
  %263 = sdiv i32 %260, %262
  br label %264

; <label>:264                                     ; preds = %1207, %241
  %pairlistoffset.0 = phi i32 [ 0, %241 ], [ %pairlistoffset.2, %1207 ]
  %pairlistindex.0 = phi i32 [ 0, %241 ], [ %pairlistindex.3, %1207 ]
  %fixg_lower.0 = phi i32 [ 0, %241 ], [ %fixg_lower.4, %1207 ]
  %g_lower.0 = phi i32 [ 0, %241 ], [ %g_lower.4, %1207 ]
  %j_hgroup.0 = phi i32 [ 0, %241 ], [ %j_hgroup.3, %1207 ]
  %pairCount.0 = phi i32 [ 0, %241 ], [ %pairCount.3, %1207 ]
  %i.0 = phi i32 [ 0, %241 ], [ %1208, %1207 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_zz.4, %1207 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yz.4, %1207 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yy.4, %1207 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xz.4, %1207 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xy.4, %1207 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xx.4, %1207 ]
  %fullElectEnergy_s.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectEnergy_s.4, %1207 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectEnergy.4, %1207 ]
  %exclChecksum.0 = phi i32 [ 0, %241 ], [ %exclChecksum.11, %1207 ]
  %265 = sub nsw i32 %25, 1
  %266 = icmp slt i32 %i.0, %265
  br i1 %266, label %267, label %1209

; <label>:267                                     ; preds = %264
  %268 = sext i32 %i.0 to i64
  %269 = getelementptr inbounds %struct.CompAtom* %31, i64 %268
  %270 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %271 = load i32* %270, align 4
  %272 = and i32 %271, 4194303
  %273 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %272)
  %274 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 0
  %275 = load i32* %274, align 4
  %276 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 1
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 2
  %279 = load i8** %278, align 8
  %280 = sext i32 %275 to i64
  %281 = sub i64 0, %280
  %282 = getelementptr inbounds i8* %279, i64 %281
  %283 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %284 = getelementptr inbounds %class.Vector* %283, i32 0, i32 0
  %285 = load double* %284, align 8
  %286 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %287 = getelementptr inbounds %class.Vector* %286, i32 0, i32 1
  %288 = load double* %287, align 8
  %289 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %290 = getelementptr inbounds %class.Vector* %289, i32 0, i32 2
  %291 = load double* %290, align 8
  %292 = sext i32 %i.0 to i64
  %293 = getelementptr inbounds %class.Vector* %245, i64 %292
  %294 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %295 = load i32* %294, align 4
  %296 = lshr i32 %295, 22
  %297 = and i32 %296, 7
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %305, label %299

; <label>:299                                     ; preds = %267
  %300 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %301 = load i32* %300, align 4
  %302 = lshr i32 %301, 25
  %303 = and i32 %302, 1
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %305, label %516

; <label>:305                                     ; preds = %299, %267
  %306 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %307 = load i32* %306, align 4
  %308 = lshr i32 %307, 22
  %309 = and i32 %308, 7
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %311, label %331

; <label>:311                                     ; preds = %305
  %312 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = sub nsw i32 %25, 1
  %317 = sub nsw i32 %316, %i.0
  %318 = mul nsw i32 %315, %317
  %319 = add nsw i32 %pairCount.0, %318
  %320 = sub nsw i32 %315, 1
  %321 = mul nsw i32 %315, %320
  %322 = sdiv i32 %321, 2
  %323 = sub nsw i32 %319, %322
  %324 = icmp slt i32 %pairCount.0, %257
  br i1 %324, label %327, label %325

; <label>:325                                     ; preds = %311
  %326 = icmp sge i32 %pairCount.0, %263
  br i1 %326, label %327, label %330

; <label>:327                                     ; preds = %325, %311
  %328 = sub nsw i32 %315, 1
  %329 = add nsw i32 %i.0, %328
  br label %1207

; <label>:330                                     ; preds = %325
  br label %331

; <label>:331                                     ; preds = %330, %305
  %pairCount.1 = phi i32 [ %323, %330 ], [ %pairCount.0, %305 ]
  %332 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %340

; <label>:334                                     ; preds = %331
  %335 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %336 = load i32* %335, align 4
  %337 = lshr i32 %336, 27
  %338 = and i32 %337, 1
  %339 = icmp ne i32 %338, 0
  br label %340

; <label>:340                                     ; preds = %334, %331
  %341 = phi i1 [ false, %331 ], [ %339, %334 ]
  %342 = zext i1 %341 to i32
  %343 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %344 = load i32* %343, align 4
  %345 = lshr i32 %344, 22
  %346 = and i32 %345, 7
  %347 = icmp ne i32 %346, 0
  br i1 %347, label %348, label %378

; <label>:348                                     ; preds = %340
  %349 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %350 = load i32* %349, align 4
  %351 = lshr i32 %350, 22
  %352 = and i32 %351, 7
  %353 = add nsw i32 %i.0, %352
  br label %354

; <label>:354                                     ; preds = %363, %348
  %g_lower.1 = phi i32 [ %g_lower.0, %348 ], [ %364, %363 ]
  %355 = icmp slt i32 %g_lower.1, %g.0
  br i1 %355, label %356, label %361

; <label>:356                                     ; preds = %354
  %357 = sext i32 %g_lower.1 to i64
  %358 = getelementptr inbounds i32* %48, i64 %357
  %359 = load i32* %358, align 4
  %360 = icmp slt i32 %359, %353
  br label %361

; <label>:361                                     ; preds = %356, %354
  %362 = phi i1 [ false, %354 ], [ %360, %356 ]
  br i1 %362, label %363, label %365

; <label>:363                                     ; preds = %361
  %364 = add nsw i32 %g_lower.1, 1
  br label %354

; <label>:365                                     ; preds = %361
  br label %366

; <label>:366                                     ; preds = %375, %365
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %365 ], [ %376, %375 ]
  %367 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %367, label %368, label %373

; <label>:368                                     ; preds = %366
  %369 = sext i32 %fixg_lower.1 to i64
  %370 = getelementptr inbounds i32* %62, i64 %369
  %371 = load i32* %370, align 4
  %372 = icmp slt i32 %371, %353
  br label %373

; <label>:373                                     ; preds = %368, %366
  %374 = phi i1 [ false, %366 ], [ %372, %368 ]
  br i1 %374, label %375, label %377

; <label>:375                                     ; preds = %373
  %376 = add nsw i32 %fixg_lower.1, 1
  br label %366

; <label>:377                                     ; preds = %373
  br label %378

; <label>:378                                     ; preds = %377, %340
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %377 ], [ %fixg_lower.0, %340 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %377 ], [ %g_lower.0, %340 ]
  %j_hgroup.1 = phi i32 [ %353, %377 ], [ %j_hgroup.0, %340 ]
  %379 = add nsw i32 %i.0, 1
  br label %380

; <label>:380                                     ; preds = %386, %378
  %pairlistindex.1 = phi i32 [ 0, %378 ], [ %383, %386 ]
  %j.1 = phi i32 [ %379, %378 ], [ %387, %386 ]
  %381 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %381, label %382, label %388

; <label>:382                                     ; preds = %380
  %383 = add nsw i32 %pairlistindex.1, 1
  %384 = sext i32 %pairlistindex.1 to i64
  %385 = getelementptr inbounds i32* %186, i64 %384
  store i32 %j.1, i32* %385, align 4
  br label %386

; <label>:386                                     ; preds = %382
  %387 = add nsw i32 %j.1, 1
  br label %380

; <label>:388                                     ; preds = %380
  %389 = sext i32 %pairlistindex.1 to i64
  %390 = getelementptr inbounds i32* %186, i64 %389
  %391 = icmp ne i32 %342, 0
  br i1 %391, label %392, label %393

; <label>:392                                     ; preds = %388
  br label %394

; <label>:393                                     ; preds = %388
  br label %394

; <label>:394                                     ; preds = %393, %392
  %395 = phi i32* [ %62, %392 ], [ %48, %393 ]
  %396 = icmp ne i32 %342, 0
  br i1 %396, label %397, label %398

; <label>:397                                     ; preds = %394
  br label %399

; <label>:398                                     ; preds = %394
  br label %399

; <label>:399                                     ; preds = %398, %397
  %400 = phi i32 [ %fixg_lower.2, %397 ], [ %g_lower.2, %398 ]
  %401 = icmp ne i32 %342, 0
  br i1 %401, label %402, label %403

; <label>:402                                     ; preds = %399
  br label %404

; <label>:403                                     ; preds = %399
  br label %404

; <label>:404                                     ; preds = %403, %402
  %405 = phi i32 [ %fixg.2, %402 ], [ %g.0, %403 ]
  %406 = icmp slt i32 %400, %405
  br i1 %406, label %407, label %501

; <label>:407                                     ; preds = %404
  %408 = sext i32 %400 to i64
  %409 = getelementptr inbounds i32* %395, i64 %408
  %410 = load i32* %409, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds %struct.CompAtom* %34, i64 %411
  %413 = getelementptr inbounds %struct.CompAtom* %412, i32 0, i32 0
  %414 = getelementptr inbounds %class.Vector* %413, i32 0, i32 0
  %415 = load double* %414, align 8
  %416 = sext i32 %410 to i64
  %417 = getelementptr inbounds %struct.CompAtom* %34, i64 %416
  %418 = getelementptr inbounds %struct.CompAtom* %417, i32 0, i32 0
  %419 = getelementptr inbounds %class.Vector* %418, i32 0, i32 1
  %420 = load double* %419, align 8
  %421 = sext i32 %410 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %34, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  br label %426

; <label>:426                                     ; preds = %459, %407
  %g.3 = phi i32 [ %400, %407 ], [ %429, %459 ]
  %gli.0 = phi i32* [ %76, %407 ], [ %gli.1, %459 ]
  %j2.0 = phi i32 [ %410, %407 ], [ %432, %459 ]
  %p_j_x.0 = phi double [ %415, %407 ], [ %439, %459 ]
  %p_j_y.0 = phi double [ %420, %407 ], [ %447, %459 ]
  %p_j_z.0 = phi double [ %425, %407 ], [ %455, %459 ]
  %427 = icmp slt i32 %g.3, %405
  br i1 %427, label %428, label %460

; <label>:428                                     ; preds = %426
  %429 = add nsw i32 %g.3, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32* %395, i64 %430
  %432 = load i32* %431, align 4
  %433 = fsub double %285, %p_j_x.0
  %434 = fmul double %433, %433
  %435 = sext i32 %432 to i64
  %436 = getelementptr inbounds %struct.CompAtom* %34, i64 %435
  %437 = getelementptr inbounds %struct.CompAtom* %436, i32 0, i32 0
  %438 = getelementptr inbounds %class.Vector* %437, i32 0, i32 0
  %439 = load double* %438, align 8
  %440 = fsub double %288, %p_j_y.0
  %441 = fmul double %440, %440
  %442 = fadd double %434, %441
  %443 = sext i32 %432 to i64
  %444 = getelementptr inbounds %struct.CompAtom* %34, i64 %443
  %445 = getelementptr inbounds %struct.CompAtom* %444, i32 0, i32 0
  %446 = getelementptr inbounds %class.Vector* %445, i32 0, i32 1
  %447 = load double* %446, align 8
  %448 = fsub double %291, %p_j_z.0
  %449 = fmul double %448, %448
  %450 = fadd double %442, %449
  %451 = sext i32 %432 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %34, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 0
  %454 = getelementptr inbounds %class.Vector* %453, i32 0, i32 2
  %455 = load double* %454, align 8
  %456 = fcmp ole double %450, %8
  br i1 %456, label %457, label %459

; <label>:457                                     ; preds = %428
  store i32 %j2.0, i32* %gli.0, align 4
  %458 = getelementptr inbounds i32* %gli.0, i32 1
  br label %459

; <label>:459                                     ; preds = %457, %428
  %gli.1 = phi i32* [ %458, %457 ], [ %gli.0, %428 ]
  br label %426

; <label>:460                                     ; preds = %426
  %461 = ptrtoint i32* %gli.0 to i64
  %462 = ptrtoint i32* %76 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  br label %466

; <label>:466                                     ; preds = %498, %460
  %pli.0 = phi i32* [ %390, %460 ], [ %497, %498 ]
  %h.0 = phi i32 [ 0, %460 ], [ %499, %498 ]
  %467 = icmp slt i32 %h.0, %465
  br i1 %467, label %468, label %500

; <label>:468                                     ; preds = %466
  %469 = sext i32 %h.0 to i64
  %470 = getelementptr inbounds i32* %76, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.CompAtom* %34, i64 %472
  %474 = getelementptr inbounds %struct.CompAtom* %473, i32 0, i32 2
  %475 = load i32* %474, align 4
  %476 = lshr i32 %475, 25
  %477 = and i32 %476, 1
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %480

; <label>:479                                     ; preds = %468
  br label %487

; <label>:480                                     ; preds = %468
  %481 = sext i32 %471 to i64
  %482 = getelementptr inbounds %struct.CompAtom* %34, i64 %481
  %483 = getelementptr inbounds %struct.CompAtom* %482, i32 0, i32 2
  %484 = load i32* %483, align 4
  %485 = lshr i32 %484, 22
  %486 = and i32 %485, 7
  br label %487

; <label>:487                                     ; preds = %480, %479
  %488 = phi i32 [ 1, %479 ], [ %486, %480 ]
  %489 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %471, i32* %489, align 4
  %490 = add nsw i32 %471, 1
  %491 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %490, i32* %491, align 4
  %492 = add nsw i32 %471, 2
  %493 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %471, 3
  %495 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %494, i32* %495, align 4
  %496 = sext i32 %488 to i64
  %497 = getelementptr inbounds i32* %pli.0, i64 %496
  br label %498

; <label>:498                                     ; preds = %487
  %499 = add nsw i32 %h.0, 1
  br label %466

; <label>:500                                     ; preds = %466
  br label %501

; <label>:501                                     ; preds = %500, %404
  %pli.1 = phi i32* [ %pli.0, %500 ], [ %390, %404 ]
  %502 = ptrtoint i32* %pli.1 to i64
  %503 = ptrtoint i32* %186 to i64
  %504 = sub i64 %502, %503
  %505 = sdiv exact i64 %504, 4
  %506 = trunc i64 %505 to i32
  %507 = icmp ne i32 %506, 0
  br i1 %507, label %508, label %515

; <label>:508                                     ; preds = %501
  %509 = sub nsw i32 %506, 1
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32* %186, i64 %510
  %512 = load i32* %511, align 4
  %513 = sext i32 %506 to i64
  %514 = getelementptr inbounds i32* %186, i64 %513
  store i32 %512, i32* %514, align 4
  br label %515

; <label>:515                                     ; preds = %508, %501
  br label %518

; <label>:516                                     ; preds = %299
  %517 = add nsw i32 %pairlistoffset.0, 1
  br label %518

; <label>:518                                     ; preds = %516, %515
  %pairlistoffset.1 = phi i32 [ 0, %515 ], [ %517, %516 ]
  %pairlistindex.2 = phi i32 [ %506, %515 ], [ %pairlistindex.0, %516 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %515 ], [ %fixg_lower.0, %516 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %515 ], [ %g_lower.0, %516 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %515 ], [ %j_hgroup.0, %516 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %515 ], [ %pairCount.0, %516 ]
  %519 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %520 = icmp ne i32 %519, 0
  br i1 %520, label %521, label %527

; <label>:521                                     ; preds = %518
  %522 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %523 = load i32* %522, align 4
  %524 = lshr i32 %523, 26
  %525 = and i32 %524, 1
  %526 = icmp ne i32 %525, 0
  br label %527

; <label>:527                                     ; preds = %521, %518
  %528 = phi i1 [ false, %518 ], [ %526, %521 ]
  %529 = zext i1 %528 to i32
  %530 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %531 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %532 = load i32* %531, align 4
  %533 = lshr i32 %532, 28
  %534 = mul nsw i32 6, %533
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds double* %530, i64 %535
  %537 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 1
  %538 = load float* %537, align 4
  %539 = fpext float %538 to double
  %540 = fmul double 3.320636e+02, %539
  %541 = fmul double %540, %16
  %542 = fmul double %541, %9
  %543 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %544 = load i32* %543, align 4
  %545 = and i32 %544, 4194303
  %546 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %545)
  %547 = zext i16 %546 to i32
  %548 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %547)
  %549 = icmp ne i32 %529, 0
  br i1 %549, label %550, label %612

; <label>:550                                     ; preds = %527
  br label %551

; <label>:551                                     ; preds = %609, %550
  %pli3.0 = phi i32* [ %200, %550 ], [ %pli3.2, %609 ]
  %plin.0 = phi i32* [ %214, %550 ], [ %plin.2, %609 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %550 ], [ %610, %609 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %550 ], [ %exclChecksum.3, %609 ]
  %552 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %552, label %553, label %611

; <label>:553                                     ; preds = %551
  %554 = sext i32 %k.0 to i64
  %555 = getelementptr inbounds i32* %186, i64 %554
  %556 = load i32* %555, align 4
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %34, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 0
  %560 = getelementptr inbounds %class.Vector* %559, i32 0, i32 0
  %561 = load double* %560, align 8
  %562 = fsub double %285, %561
  %563 = fmul double %562, %562
  %564 = sext i32 %556 to i64
  %565 = getelementptr inbounds %struct.CompAtom* %34, i64 %564
  %566 = getelementptr inbounds %struct.CompAtom* %565, i32 0, i32 0
  %567 = getelementptr inbounds %class.Vector* %566, i32 0, i32 1
  %568 = load double* %567, align 8
  %569 = fsub double %288, %568
  %570 = fmul double %569, %569
  %571 = fadd double %563, %570
  %572 = sext i32 %556 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %34, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 0
  %575 = getelementptr inbounds %class.Vector* %574, i32 0, i32 2
  %576 = load double* %575, align 8
  %577 = fsub double %291, %576
  %578 = fmul double %577, %577
  %579 = fadd double %571, %578
  %580 = sext i32 %556 to i64
  %581 = getelementptr inbounds %struct.CompAtom* %34, i64 %580
  %582 = getelementptr inbounds %struct.CompAtom* %581, i32 0, i32 2
  %583 = load i32* %582, align 4
  %584 = lshr i32 %583, 26
  %585 = and i32 %584, 1
  %586 = icmp ne i32 %585, 0
  br i1 %586, label %608, label %587

; <label>:587                                     ; preds = %553
  %588 = fcmp ole double %579, %7
  br i1 %588, label %589, label %608

; <label>:589                                     ; preds = %587
  %590 = fcmp ole double %579, %19
  br i1 %590, label %591, label %594

; <label>:591                                     ; preds = %589
  %592 = add nsw i32 %exclChecksum.1, 1
  %593 = icmp ne i32 %592, 0
  br i1 %593, label %608, label %594

; <label>:594                                     ; preds = %591, %589
  %exclChecksum.2 = phi i32 [ %592, %591 ], [ %exclChecksum.1, %589 ]
  %595 = sext i32 %556 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %34, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 2
  %598 = load i32* %597, align 4
  %599 = and i32 %598, 4194303
  %600 = icmp sge i32 %599, %275
  br i1 %600, label %601, label %605

; <label>:601                                     ; preds = %594
  %602 = icmp sle i32 %599, %277
  br i1 %602, label %603, label %605

; <label>:603                                     ; preds = %601
  %604 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %556, i32* %pli3.0, align 4
  br label %607

; <label>:605                                     ; preds = %601, %594
  %606 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %556, i32* %plin.0, align 4
  br label %607

; <label>:607                                     ; preds = %605, %603
  %pli3.1 = phi i32* [ %604, %603 ], [ %pli3.0, %605 ]
  %plin.1 = phi i32* [ %plin.0, %603 ], [ %606, %605 ]
  br label %608

; <label>:608                                     ; preds = %607, %591, %587, %553
  %pli3.2 = phi i32* [ %pli3.0, %553 ], [ %pli3.0, %591 ], [ %pli3.1, %607 ], [ %pli3.0, %587 ]
  %plin.2 = phi i32* [ %plin.0, %553 ], [ %plin.0, %591 ], [ %plin.1, %607 ], [ %plin.0, %587 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %553 ], [ %592, %591 ], [ %exclChecksum.2, %607 ], [ %exclChecksum.1, %587 ]
  br label %609

; <label>:609                                     ; preds = %608
  %610 = add nsw i32 %k.0, 1
  br label %551

; <label>:611                                     ; preds = %551
  br label %691

; <label>:612                                     ; preds = %527
  %613 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %613, label %614, label %690

; <label>:614                                     ; preds = %612
  %615 = sext i32 %pairlistoffset.1 to i64
  %616 = getelementptr inbounds i32* %186, i64 %615
  %617 = load i32* %616, align 4
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds %struct.CompAtom* %34, i64 %618
  %620 = getelementptr inbounds %struct.CompAtom* %619, i32 0, i32 0
  %621 = getelementptr inbounds %class.Vector* %620, i32 0, i32 0
  %622 = load double* %621, align 8
  %623 = sext i32 %617 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %34, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 1
  %627 = load double* %626, align 8
  %628 = sext i32 %617 to i64
  %629 = getelementptr inbounds %struct.CompAtom* %34, i64 %628
  %630 = getelementptr inbounds %struct.CompAtom* %629, i32 0, i32 0
  %631 = getelementptr inbounds %class.Vector* %630, i32 0, i32 2
  %632 = load double* %631, align 8
  %633 = sext i32 %617 to i64
  %634 = getelementptr inbounds %struct.CompAtom* %34, i64 %633
  %635 = getelementptr inbounds %struct.CompAtom* %634, i32 0, i32 2
  %636 = load i32* %635, align 4
  %637 = and i32 %636, 4194303
  br label %638

; <label>:638                                     ; preds = %683, %614
  %pli3.3 = phi i32* [ %200, %614 ], [ %pli3.5, %683 ]
  %plin.3 = phi i32* [ %214, %614 ], [ %plin.5, %683 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %614 ], [ %641, %683 ]
  %j210.0 = phi i32 [ %617, %614 ], [ %644, %683 ]
  %p_j_x11.0 = phi double [ %622, %614 ], [ %651, %683 ]
  %p_j_y12.0 = phi double [ %627, %614 ], [ %659, %683 ]
  %p_j_z13.0 = phi double [ %632, %614 ], [ %667, %683 ]
  %atom214.0 = phi i32 [ %637, %614 ], [ %688, %683 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %614 ], [ %exclChecksum.6, %683 ]
  %639 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %639, label %640, label %689

; <label>:640                                     ; preds = %638
  %641 = add nsw i32 %k9.0, 1
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds i32* %186, i64 %642
  %644 = load i32* %643, align 4
  %645 = fsub double %285, %p_j_x11.0
  %646 = fmul double %645, %645
  %647 = sext i32 %644 to i64
  %648 = getelementptr inbounds %struct.CompAtom* %34, i64 %647
  %649 = getelementptr inbounds %struct.CompAtom* %648, i32 0, i32 0
  %650 = getelementptr inbounds %class.Vector* %649, i32 0, i32 0
  %651 = load double* %650, align 8
  %652 = fsub double %288, %p_j_y12.0
  %653 = fmul double %652, %652
  %654 = fadd double %646, %653
  %655 = sext i32 %644 to i64
  %656 = getelementptr inbounds %struct.CompAtom* %34, i64 %655
  %657 = getelementptr inbounds %struct.CompAtom* %656, i32 0, i32 0
  %658 = getelementptr inbounds %class.Vector* %657, i32 0, i32 1
  %659 = load double* %658, align 8
  %660 = fsub double %291, %p_j_z13.0
  %661 = fmul double %660, %660
  %662 = fadd double %654, %661
  %663 = sext i32 %644 to i64
  %664 = getelementptr inbounds %struct.CompAtom* %34, i64 %663
  %665 = getelementptr inbounds %struct.CompAtom* %664, i32 0, i32 0
  %666 = getelementptr inbounds %class.Vector* %665, i32 0, i32 2
  %667 = load double* %666, align 8
  %668 = fcmp ole double %662, %7
  br i1 %668, label %669, label %683

; <label>:669                                     ; preds = %640
  %670 = fcmp ole double %662, %19
  br i1 %670, label %671, label %674

; <label>:671                                     ; preds = %669
  %672 = add nsw i32 %exclChecksum.4, 1
  %673 = icmp ne i32 %672, 0
  br i1 %673, label %683, label %674

; <label>:674                                     ; preds = %671, %669
  %exclChecksum.5 = phi i32 [ %672, %671 ], [ %exclChecksum.4, %669 ]
  %675 = icmp sge i32 %atom214.0, %275
  br i1 %675, label %676, label %680

; <label>:676                                     ; preds = %674
  %677 = icmp sle i32 %atom214.0, %277
  br i1 %677, label %678, label %680

; <label>:678                                     ; preds = %676
  %679 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %682

; <label>:680                                     ; preds = %676, %674
  %681 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %682

; <label>:682                                     ; preds = %680, %678
  %pli3.4 = phi i32* [ %679, %678 ], [ %pli3.3, %680 ]
  %plin.4 = phi i32* [ %plin.3, %678 ], [ %681, %680 ]
  br label %683

; <label>:683                                     ; preds = %682, %671, %640
  %pli3.5 = phi i32* [ %pli3.3, %671 ], [ %pli3.4, %682 ], [ %pli3.3, %640 ]
  %plin.5 = phi i32* [ %plin.3, %671 ], [ %plin.4, %682 ], [ %plin.3, %640 ]
  %exclChecksum.6 = phi i32 [ %672, %671 ], [ %exclChecksum.5, %682 ], [ %exclChecksum.4, %640 ]
  %684 = sext i32 %644 to i64
  %685 = getelementptr inbounds %struct.CompAtom* %34, i64 %684
  %686 = getelementptr inbounds %struct.CompAtom* %685, i32 0, i32 2
  %687 = load i32* %686, align 4
  %688 = and i32 %687, 4194303
  br label %638

; <label>:689                                     ; preds = %638
  br label %690

; <label>:690                                     ; preds = %689, %612
  %pli3.6 = phi i32* [ %pli3.3, %689 ], [ %200, %612 ]
  %plin.6 = phi i32* [ %plin.3, %689 ], [ %214, %612 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %689 ], [ %exclChecksum.0, %612 ]
  br label %691

; <label>:691                                     ; preds = %690, %611
  %pli3.7 = phi i32* [ %pli3.0, %611 ], [ %pli3.6, %690 ]
  %plin.7 = phi i32* [ %plin.0, %611 ], [ %plin.6, %690 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %611 ], [ %exclChecksum.7, %690 ]
  %692 = ptrtoint i32* %pli3.7 to i64
  %693 = ptrtoint i32* %200 to i64
  %694 = sub i64 %692, %693
  %695 = sdiv exact i64 %694, 4
  %696 = trunc i64 %695 to i32
  %697 = icmp ne i32 %696, 0
  br i1 %697, label %698, label %705

; <label>:698                                     ; preds = %691
  %699 = sub nsw i32 %696, 1
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds i32* %200, i64 %700
  %702 = load i32* %701, align 4
  %703 = sext i32 %696 to i64
  %704 = getelementptr inbounds i32* %200, i64 %703
  store i32 %702, i32* %704, align 4
  br label %705

; <label>:705                                     ; preds = %698, %691
  br label %706

; <label>:706                                     ; preds = %717, %705
  %plix.0 = phi i32* [ %228, %705 ], [ %715, %717 ]
  %pln.0 = phi i32* [ %214, %705 ], [ %718, %717 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %705 ], [ %716, %717 ]
  %707 = icmp ult i32* %pln.0, %plin.7
  br i1 %707, label %708, label %711

; <label>:708                                     ; preds = %706
  %709 = load i32* %pln.0, align 4
  %710 = icmp slt i32 %709, %j_hgroup.2
  br label %711

; <label>:711                                     ; preds = %708, %706
  %712 = phi i1 [ false, %706 ], [ %710, %708 ]
  br i1 %712, label %713, label %719

; <label>:713                                     ; preds = %711
  %714 = load i32* %pln.0, align 4
  %715 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %714, i32* %plix.0, align 4
  %716 = add nsw i32 %exclChecksum.9, -1
  br label %717

; <label>:717                                     ; preds = %713
  %718 = getelementptr inbounds i32* %pln.0, i32 1
  br label %706

; <label>:719                                     ; preds = %711
  br label %720

; <label>:720                                     ; preds = %735, %719
  %plix.1 = phi i32* [ %plix.0, %719 ], [ %733, %735 ]
  %k17.0 = phi i32 [ 0, %719 ], [ %736, %735 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %719 ], [ %734, %735 ]
  %721 = icmp slt i32 %k17.0, %696
  br i1 %721, label %722, label %727

; <label>:722                                     ; preds = %720
  %723 = sext i32 %k17.0 to i64
  %724 = getelementptr inbounds i32* %200, i64 %723
  %725 = load i32* %724, align 4
  %726 = icmp slt i32 %725, %j_hgroup.2
  br label %727

; <label>:727                                     ; preds = %722, %720
  %728 = phi i1 [ false, %720 ], [ %726, %722 ]
  br i1 %728, label %729, label %737

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k17.0 to i64
  %731 = getelementptr inbounds i32* %200, i64 %730
  %732 = load i32* %731, align 4
  %733 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %732, i32* %plix.1, align 4
  %734 = add nsw i32 %exclChecksum.10, -1
  br label %735

; <label>:735                                     ; preds = %729
  %736 = add nsw i32 %k17.0, 1
  br label %720

; <label>:737                                     ; preds = %727
  br label %738

; <label>:738                                     ; preds = %760, %737
  %plin.8 = phi i32* [ %plin.7, %737 ], [ %plin.9, %760 ]
  %plix.2 = phi i32* [ %plix.1, %737 ], [ %plix.3, %760 ]
  %plim.0 = phi i32* [ %242, %737 ], [ %plim.1, %760 ]
  %k17.1 = phi i32 [ %k17.0, %737 ], [ %761, %760 ]
  %739 = icmp slt i32 %k17.1, %696
  br i1 %739, label %740, label %762

; <label>:740                                     ; preds = %738
  %741 = sext i32 %k17.1 to i64
  %742 = getelementptr inbounds i32* %200, i64 %741
  %743 = load i32* %742, align 4
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds %struct.CompAtom* %34, i64 %744
  %746 = getelementptr inbounds %struct.CompAtom* %745, i32 0, i32 2
  %747 = load i32* %746, align 4
  %748 = and i32 %747, 4194303
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i8* %282, i64 %749
  %751 = load i8* %750, align 1
  %752 = sext i8 %751 to i32
  switch i32 %752, label %759 [
    i32 0, label %753
    i32 1, label %755
    i32 2, label %757
  ]

; <label>:753                                     ; preds = %740
  %754 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %743, i32* %plin.8, align 4
  br label %759

; <label>:755                                     ; preds = %740
  %756 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %743, i32* %plix.2, align 4
  br label %759

; <label>:757                                     ; preds = %740
  %758 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %743, i32* %plim.0, align 4
  br label %759

; <label>:759                                     ; preds = %757, %755, %753, %740
  %plin.9 = phi i32* [ %plin.8, %740 ], [ %plin.8, %757 ], [ %plin.8, %755 ], [ %754, %753 ]
  %plix.3 = phi i32* [ %plix.2, %740 ], [ %plix.2, %757 ], [ %756, %755 ], [ %plix.2, %753 ]
  %plim.1 = phi i32* [ %plim.0, %740 ], [ %758, %757 ], [ %plim.0, %755 ], [ %plim.0, %753 ]
  br label %760

; <label>:760                                     ; preds = %759
  %761 = add nsw i32 %k17.1, 1
  br label %738

; <label>:762                                     ; preds = %738
  %763 = ptrtoint i32* %plix.2 to i64
  %764 = ptrtoint i32* %228 to i64
  %765 = sub i64 %763, %764
  %766 = sdiv exact i64 %765, 4
  %767 = sext i32 %exclChecksum.10 to i64
  %768 = add nsw i64 %767, %766
  %769 = trunc i64 %768 to i32
  %770 = ptrtoint i32* %plim.0 to i64
  %771 = ptrtoint i32* %242 to i64
  %772 = sub i64 %770, %771
  %773 = sdiv exact i64 %772, 4
  %774 = sext i32 %769 to i64
  %775 = add nsw i64 %774, %773
  %776 = trunc i64 %775 to i32
  %777 = ptrtoint i32* %plin.8 to i64
  %778 = ptrtoint i32* %pln.0 to i64
  %779 = sub i64 %777, %778
  %780 = sdiv exact i64 %779, 4
  %781 = trunc i64 %780 to i32
  br label %782

; <label>:782                                     ; preds = %906, %762
  %k17.2 = phi i32 [ 0, %762 ], [ %907, %906 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %762 ], [ %899, %906 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %762 ], [ %890, %906 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %762 ], [ %888, %906 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %762 ], [ %879, %906 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %762 ], [ %877, %906 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %762 ], [ %875, %906 ]
  %fullElectEnergy_s.1 = phi double [ %fullElectEnergy_s.0, %762 ], [ %862, %906 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %762 ], [ %860, %906 ]
  %783 = icmp slt i32 %k17.2, %781
  br i1 %783, label %784, label %908

; <label>:784                                     ; preds = %782
  %785 = sext i32 %k17.2 to i64
  %786 = getelementptr inbounds i32* %pln.0, i64 %785
  %787 = load i32* %786, align 4
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds %struct.CompAtom* %34, i64 %788
  %790 = getelementptr inbounds %struct.CompAtom* %789, i32 0, i32 0
  %791 = getelementptr inbounds %class.Vector* %790, i32 0, i32 0
  %792 = load double* %791, align 8
  %793 = fsub double %285, %792
  %794 = fmul double %793, %793
  %795 = getelementptr inbounds %struct.CompAtom* %789, i32 0, i32 0
  %796 = getelementptr inbounds %class.Vector* %795, i32 0, i32 1
  %797 = load double* %796, align 8
  %798 = fsub double %288, %797
  %799 = fmul double %798, %798
  %800 = fadd double %794, %799
  %801 = getelementptr inbounds %struct.CompAtom* %789, i32 0, i32 0
  %802 = getelementptr inbounds %class.Vector* %801, i32 0, i32 2
  %803 = load double* %802, align 8
  %804 = fsub double %291, %803
  %805 = fmul double %804, %804
  %806 = fadd double %800, %805
  %807 = fptrunc double %806 to float
  %808 = bitcast %union.anon.62* %r2f to float*
  store float %807, float* %808, align 4
  %809 = bitcast %union.anon.62* %r2f to i32*
  %810 = load i32* %809, align 4
  %811 = ashr i32 %810, 17
  %812 = add nsw i32 %811, %22
  %813 = mul nsw i32 16, %812
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds double* %14, i64 %814
  %816 = getelementptr inbounds double* %815, i64 8
  %817 = getelementptr inbounds double* %816, i64 4
  %818 = getelementptr inbounds double* %817, i64 0
  %819 = load double* %818, align 8
  %820 = bitcast %union.anon.62* %r2f to i32*
  %821 = load i32* %820, align 4
  %822 = and i32 %821, -131072
  store i32 %822, i32* %820, align 4
  %823 = getelementptr inbounds %struct.CompAtom* %789, i32 0, i32 1
  %824 = load float* %823, align 4
  %825 = fpext float %824 to double
  %826 = fmul double %542, %825
  %827 = bitcast %union.anon.62* %r2f to float*
  %828 = load float* %827, align 4
  %829 = fpext float %828 to double
  %830 = fsub double %806, %829
  %831 = getelementptr inbounds %struct.CompAtom* %789, i32 0, i32 2
  %832 = load i32* %831, align 4
  %833 = lshr i32 %832, 28
  %834 = mul nsw i32 2, %833
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds double* %536, i64 %835
  %837 = load double* %836, align 8
  %838 = mul nsw i32 2, %833
  %839 = add nsw i32 %838, 1
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds double* %536, i64 %840
  %842 = load double* %841, align 8
  %843 = getelementptr inbounds double* %817, i64 1
  %844 = load double* %843, align 8
  %845 = getelementptr inbounds double* %817, i64 2
  %846 = load double* %845, align 8
  %847 = getelementptr inbounds double* %817, i64 3
  %848 = load double* %847, align 8
  %849 = fmul double %848, %826
  %850 = fmul double %846, %826
  %851 = fmul double %844, %826
  %852 = fmul double %819, %826
  %853 = fmul double %830, %849
  %854 = fadd double %853, %850
  %855 = fmul double %854, %830
  %856 = fadd double %855, %851
  %857 = fmul double %856, %830
  %858 = fadd double %857, %852
  %859 = fmul double %837, %858
  %860 = fadd double %fullElectEnergy.1, %859
  %861 = fmul double %842, %858
  %862 = fadd double %fullElectEnergy_s.1, %861
  %863 = fmul double 3.000000e+00, %830
  %864 = fmul double %863, %849
  %865 = fmul double 2.000000e+00, %850
  %866 = fadd double %864, %865
  %867 = fmul double %866, %830
  %868 = fadd double %867, %851
  %869 = fmul double -2.000000e+00, %868
  %870 = fmul double %869, %837
  %871 = sext i32 %787 to i64
  %872 = getelementptr inbounds %class.Vector* %248, i64 %871
  %873 = fmul double %870, %793
  %874 = fmul double %873, %793
  %875 = fadd double %fullElectVirial_xx.1, %874
  %876 = fmul double %873, %798
  %877 = fadd double %fullElectVirial_xy.1, %876
  %878 = fmul double %873, %804
  %879 = fadd double %fullElectVirial_xz.1, %878
  %880 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %881 = load double* %880, align 8
  %882 = fadd double %881, %873
  store double %882, double* %880, align 8
  %883 = getelementptr inbounds %class.Vector* %872, i32 0, i32 0
  %884 = load double* %883, align 8
  %885 = fsub double %884, %873
  store double %885, double* %883, align 8
  %886 = fmul double %870, %798
  %887 = fmul double %886, %798
  %888 = fadd double %fullElectVirial_yy.1, %887
  %889 = fmul double %886, %804
  %890 = fadd double %fullElectVirial_yz.1, %889
  %891 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %892 = load double* %891, align 8
  %893 = fadd double %892, %886
  store double %893, double* %891, align 8
  %894 = getelementptr inbounds %class.Vector* %872, i32 0, i32 1
  %895 = load double* %894, align 8
  %896 = fsub double %895, %886
  store double %896, double* %894, align 8
  %897 = fmul double %870, %804
  %898 = fmul double %897, %804
  %899 = fadd double %fullElectVirial_zz.1, %898
  %900 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %901 = load double* %900, align 8
  %902 = fadd double %901, %897
  store double %902, double* %900, align 8
  %903 = getelementptr inbounds %class.Vector* %872, i32 0, i32 2
  %904 = load double* %903, align 8
  %905 = fsub double %904, %897
  store double %905, double* %903, align 8
  br label %906

; <label>:906                                     ; preds = %784
  %907 = add nsw i32 %k17.2, 1
  br label %782

; <label>:908                                     ; preds = %782
  %909 = ptrtoint i32* %plim.0 to i64
  %910 = ptrtoint i32* %242 to i64
  %911 = sub i64 %909, %910
  %912 = sdiv exact i64 %911, 4
  %913 = trunc i64 %912 to i32
  br label %914

; <label>:914                                     ; preds = %1057, %908
  %k17.3 = phi i32 [ 0, %908 ], [ %1058, %1057 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %908 ], [ %1050, %1057 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %908 ], [ %1041, %1057 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %908 ], [ %1039, %1057 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %908 ], [ %1030, %1057 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %908 ], [ %1028, %1057 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %908 ], [ %1026, %1057 ]
  %fullElectEnergy_s.2 = phi double [ %fullElectEnergy_s.1, %908 ], [ %1013, %1057 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %908 ], [ %1011, %1057 ]
  %915 = icmp slt i32 %k17.3, %913
  br i1 %915, label %916, label %1059

; <label>:916                                     ; preds = %914
  %917 = sext i32 %k17.3 to i64
  %918 = getelementptr inbounds i32* %242, i64 %917
  %919 = load i32* %918, align 4
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds %struct.CompAtom* %34, i64 %920
  %922 = getelementptr inbounds %struct.CompAtom* %921, i32 0, i32 0
  %923 = getelementptr inbounds %class.Vector* %922, i32 0, i32 0
  %924 = load double* %923, align 8
  %925 = fsub double %285, %924
  %926 = fmul double %925, %925
  %927 = getelementptr inbounds %struct.CompAtom* %921, i32 0, i32 0
  %928 = getelementptr inbounds %class.Vector* %927, i32 0, i32 1
  %929 = load double* %928, align 8
  %930 = fsub double %288, %929
  %931 = fmul double %930, %930
  %932 = fadd double %926, %931
  %933 = getelementptr inbounds %struct.CompAtom* %921, i32 0, i32 0
  %934 = getelementptr inbounds %class.Vector* %933, i32 0, i32 2
  %935 = load double* %934, align 8
  %936 = fsub double %291, %935
  %937 = fmul double %936, %936
  %938 = fadd double %932, %937
  %939 = fptrunc double %938 to float
  %940 = bitcast %union.anon.63* %r2f28 to float*
  store float %939, float* %940, align 4
  %941 = bitcast %union.anon.63* %r2f28 to i32*
  %942 = load i32* %941, align 4
  %943 = ashr i32 %942, 17
  %944 = add nsw i32 %943, %22
  %945 = mul nsw i32 16, %944
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds double* %14, i64 %946
  %948 = getelementptr inbounds double* %947, i64 8
  %949 = getelementptr inbounds double* %948, i64 4
  %950 = getelementptr inbounds double* %949, i64 0
  %951 = load double* %950, align 8
  %952 = bitcast %union.anon.63* %r2f28 to i32*
  %953 = load i32* %952, align 4
  %954 = and i32 %953, -131072
  store i32 %954, i32* %952, align 4
  %955 = getelementptr inbounds %struct.CompAtom* %921, i32 0, i32 1
  %956 = load float* %955, align 4
  %957 = fpext float %956 to double
  %958 = fmul double %542, %957
  %959 = bitcast %union.anon.63* %r2f28 to float*
  %960 = load float* %959, align 4
  %961 = fpext float %960 to double
  %962 = fsub double %938, %961
  %963 = getelementptr inbounds %struct.CompAtom* %921, i32 0, i32 2
  %964 = load i32* %963, align 4
  %965 = lshr i32 %964, 28
  %966 = mul nsw i32 2, %965
  %967 = sext i32 %966 to i64
  %968 = getelementptr inbounds double* %536, i64 %967
  %969 = load double* %968, align 8
  %970 = mul nsw i32 2, %965
  %971 = add nsw i32 %970, 1
  %972 = sext i32 %971 to i64
  %973 = getelementptr inbounds double* %536, i64 %972
  %974 = load double* %973, align 8
  %975 = getelementptr inbounds double* %949, i64 1
  %976 = load double* %975, align 8
  %977 = getelementptr inbounds double* %949, i64 2
  %978 = load double* %977, align 8
  %979 = getelementptr inbounds double* %949, i64 3
  %980 = load double* %979, align 8
  %981 = mul nsw i32 4, %944
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds double* %15, i64 %982
  %984 = getelementptr inbounds double* %983, i64 0
  %985 = load double* %984, align 8
  %986 = fmul double %18, %985
  %987 = fsub double %951, %986
  %988 = getelementptr inbounds double* %983, i64 1
  %989 = load double* %988, align 8
  %990 = fmul double %18, %989
  %991 = fsub double %976, %990
  %992 = getelementptr inbounds double* %983, i64 2
  %993 = load double* %992, align 8
  %994 = fmul double %18, %993
  %995 = fsub double %978, %994
  %996 = getelementptr inbounds double* %983, i64 3
  %997 = load double* %996, align 8
  %998 = fmul double %18, %997
  %999 = fsub double %980, %998
  %1000 = fmul double %999, %958
  %1001 = fmul double %995, %958
  %1002 = fmul double %991, %958
  %1003 = fmul double %987, %958
  %1004 = fmul double %962, %1000
  %1005 = fadd double %1004, %1001
  %1006 = fmul double %1005, %962
  %1007 = fadd double %1006, %1002
  %1008 = fmul double %1007, %962
  %1009 = fadd double %1008, %1003
  %1010 = fmul double %969, %1009
  %1011 = fadd double %fullElectEnergy.2, %1010
  %1012 = fmul double %974, %1009
  %1013 = fadd double %fullElectEnergy_s.2, %1012
  %1014 = fmul double 3.000000e+00, %962
  %1015 = fmul double %1014, %1000
  %1016 = fmul double 2.000000e+00, %1001
  %1017 = fadd double %1015, %1016
  %1018 = fmul double %1017, %962
  %1019 = fadd double %1018, %1002
  %1020 = fmul double -2.000000e+00, %1019
  %1021 = fmul double %1020, %969
  %1022 = sext i32 %919 to i64
  %1023 = getelementptr inbounds %class.Vector* %248, i64 %1022
  %1024 = fmul double %1021, %925
  %1025 = fmul double %1024, %925
  %1026 = fadd double %fullElectVirial_xx.2, %1025
  %1027 = fmul double %1024, %930
  %1028 = fadd double %fullElectVirial_xy.2, %1027
  %1029 = fmul double %1024, %936
  %1030 = fadd double %fullElectVirial_xz.2, %1029
  %1031 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1032 = load double* %1031, align 8
  %1033 = fadd double %1032, %1024
  store double %1033, double* %1031, align 8
  %1034 = getelementptr inbounds %class.Vector* %1023, i32 0, i32 0
  %1035 = load double* %1034, align 8
  %1036 = fsub double %1035, %1024
  store double %1036, double* %1034, align 8
  %1037 = fmul double %1021, %930
  %1038 = fmul double %1037, %930
  %1039 = fadd double %fullElectVirial_yy.2, %1038
  %1040 = fmul double %1037, %936
  %1041 = fadd double %fullElectVirial_yz.2, %1040
  %1042 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1043 = load double* %1042, align 8
  %1044 = fadd double %1043, %1037
  store double %1044, double* %1042, align 8
  %1045 = getelementptr inbounds %class.Vector* %1023, i32 0, i32 1
  %1046 = load double* %1045, align 8
  %1047 = fsub double %1046, %1037
  store double %1047, double* %1045, align 8
  %1048 = fmul double %1021, %936
  %1049 = fmul double %1048, %936
  %1050 = fadd double %fullElectVirial_zz.2, %1049
  %1051 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1052 = load double* %1051, align 8
  %1053 = fadd double %1052, %1048
  store double %1053, double* %1051, align 8
  %1054 = getelementptr inbounds %class.Vector* %1023, i32 0, i32 2
  %1055 = load double* %1054, align 8
  %1056 = fsub double %1055, %1048
  store double %1056, double* %1054, align 8
  br label %1057

; <label>:1057                                    ; preds = %916
  %1058 = add nsw i32 %k17.3, 1
  br label %914

; <label>:1059                                    ; preds = %914
  %1060 = ptrtoint i32* %plix.2 to i64
  %1061 = ptrtoint i32* %228 to i64
  %1062 = sub i64 %1060, %1061
  %1063 = sdiv exact i64 %1062, 4
  %1064 = trunc i64 %1063 to i32
  br label %1065

; <label>:1065                                    ; preds = %1204, %1059
  %k17.4 = phi i32 [ 0, %1059 ], [ %1205, %1204 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1059 ], [ %1197, %1204 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1059 ], [ %1188, %1204 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1059 ], [ %1186, %1204 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1059 ], [ %1177, %1204 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1059 ], [ %1175, %1204 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1059 ], [ %1173, %1204 ]
  %fullElectEnergy_s.3 = phi double [ %fullElectEnergy_s.2, %1059 ], [ %1160, %1204 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1059 ], [ %1158, %1204 ]
  %1066 = icmp slt i32 %k17.4, %1064
  br i1 %1066, label %1067, label %1206

; <label>:1067                                    ; preds = %1065
  %1068 = sext i32 %k17.4 to i64
  %1069 = getelementptr inbounds i32* %228, i64 %1068
  %1070 = load i32* %1069, align 4
  %1071 = sext i32 %1070 to i64
  %1072 = getelementptr inbounds %struct.CompAtom* %34, i64 %1071
  %1073 = getelementptr inbounds %struct.CompAtom* %1072, i32 0, i32 0
  %1074 = getelementptr inbounds %class.Vector* %1073, i32 0, i32 0
  %1075 = load double* %1074, align 8
  %1076 = fsub double %285, %1075
  %1077 = fmul double %1076, %1076
  %1078 = getelementptr inbounds %struct.CompAtom* %1072, i32 0, i32 0
  %1079 = getelementptr inbounds %class.Vector* %1078, i32 0, i32 1
  %1080 = load double* %1079, align 8
  %1081 = fsub double %288, %1080
  %1082 = fmul double %1081, %1081
  %1083 = fadd double %1077, %1082
  %1084 = getelementptr inbounds %struct.CompAtom* %1072, i32 0, i32 0
  %1085 = getelementptr inbounds %class.Vector* %1084, i32 0, i32 2
  %1086 = load double* %1085, align 8
  %1087 = fsub double %291, %1086
  %1088 = fmul double %1087, %1087
  %1089 = fadd double %1083, %1088
  %1090 = fptrunc double %1089 to float
  %1091 = bitcast %union.anon.64* %r2f53 to float*
  store float %1090, float* %1091, align 4
  %1092 = bitcast %union.anon.64* %r2f53 to i32*
  %1093 = load i32* %1092, align 4
  %1094 = ashr i32 %1093, 17
  %1095 = add nsw i32 %1094, %22
  %1096 = mul nsw i32 16, %1095
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds double* %14, i64 %1097
  %1099 = getelementptr inbounds double* %1098, i64 8
  %1100 = getelementptr inbounds double* %1099, i64 4
  %1101 = getelementptr inbounds double* %1100, i64 0
  %1102 = load double* %1101, align 8
  %1103 = bitcast %union.anon.64* %r2f53 to i32*
  %1104 = load i32* %1103, align 4
  %1105 = and i32 %1104, -131072
  store i32 %1105, i32* %1103, align 4
  %1106 = getelementptr inbounds %struct.CompAtom* %1072, i32 0, i32 1
  %1107 = load float* %1106, align 4
  %1108 = fpext float %1107 to double
  %1109 = fmul double %542, %1108
  %1110 = bitcast %union.anon.64* %r2f53 to float*
  %1111 = load float* %1110, align 4
  %1112 = fpext float %1111 to double
  %1113 = fsub double %1089, %1112
  %1114 = getelementptr inbounds %struct.CompAtom* %1072, i32 0, i32 2
  %1115 = load i32* %1114, align 4
  %1116 = lshr i32 %1115, 28
  %1117 = mul nsw i32 2, %1116
  %1118 = sext i32 %1117 to i64
  %1119 = getelementptr inbounds double* %536, i64 %1118
  %1120 = load double* %1119, align 8
  %1121 = mul nsw i32 2, %1116
  %1122 = add nsw i32 %1121, 1
  %1123 = sext i32 %1122 to i64
  %1124 = getelementptr inbounds double* %536, i64 %1123
  %1125 = load double* %1124, align 8
  %1126 = getelementptr inbounds double* %1100, i64 1
  %1127 = load double* %1126, align 8
  %1128 = getelementptr inbounds double* %1100, i64 2
  %1129 = load double* %1128, align 8
  %1130 = getelementptr inbounds double* %1100, i64 3
  %1131 = load double* %1130, align 8
  %1132 = mul nsw i32 4, %1095
  %1133 = sext i32 %1132 to i64
  %1134 = getelementptr inbounds double* %15, i64 %1133
  %1135 = getelementptr inbounds double* %1134, i64 0
  %1136 = load double* %1135, align 8
  %1137 = fsub double %1102, %1136
  %1138 = getelementptr inbounds double* %1134, i64 1
  %1139 = load double* %1138, align 8
  %1140 = fsub double %1127, %1139
  %1141 = getelementptr inbounds double* %1134, i64 2
  %1142 = load double* %1141, align 8
  %1143 = fsub double %1129, %1142
  %1144 = getelementptr inbounds double* %1134, i64 3
  %1145 = load double* %1144, align 8
  %1146 = fsub double %1131, %1145
  %1147 = fmul double %1146, %1109
  %1148 = fmul double %1143, %1109
  %1149 = fmul double %1140, %1109
  %1150 = fmul double %1137, %1109
  %1151 = fmul double %1113, %1147
  %1152 = fadd double %1151, %1148
  %1153 = fmul double %1152, %1113
  %1154 = fadd double %1153, %1149
  %1155 = fmul double %1154, %1113
  %1156 = fadd double %1155, %1150
  %1157 = fmul double %1120, %1156
  %1158 = fadd double %fullElectEnergy.3, %1157
  %1159 = fmul double %1125, %1156
  %1160 = fadd double %fullElectEnergy_s.3, %1159
  %1161 = fmul double 3.000000e+00, %1113
  %1162 = fmul double %1161, %1147
  %1163 = fmul double 2.000000e+00, %1148
  %1164 = fadd double %1162, %1163
  %1165 = fmul double %1164, %1113
  %1166 = fadd double %1165, %1149
  %1167 = fmul double -2.000000e+00, %1166
  %1168 = fmul double %1167, %1120
  %1169 = sext i32 %1070 to i64
  %1170 = getelementptr inbounds %class.Vector* %248, i64 %1169
  %1171 = fmul double %1168, %1076
  %1172 = fmul double %1171, %1076
  %1173 = fadd double %fullElectVirial_xx.3, %1172
  %1174 = fmul double %1171, %1081
  %1175 = fadd double %fullElectVirial_xy.3, %1174
  %1176 = fmul double %1171, %1087
  %1177 = fadd double %fullElectVirial_xz.3, %1176
  %1178 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1179 = load double* %1178, align 8
  %1180 = fadd double %1179, %1171
  store double %1180, double* %1178, align 8
  %1181 = getelementptr inbounds %class.Vector* %1170, i32 0, i32 0
  %1182 = load double* %1181, align 8
  %1183 = fsub double %1182, %1171
  store double %1183, double* %1181, align 8
  %1184 = fmul double %1168, %1081
  %1185 = fmul double %1184, %1081
  %1186 = fadd double %fullElectVirial_yy.3, %1185
  %1187 = fmul double %1184, %1087
  %1188 = fadd double %fullElectVirial_yz.3, %1187
  %1189 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1190 = load double* %1189, align 8
  %1191 = fadd double %1190, %1184
  store double %1191, double* %1189, align 8
  %1192 = getelementptr inbounds %class.Vector* %1170, i32 0, i32 1
  %1193 = load double* %1192, align 8
  %1194 = fsub double %1193, %1184
  store double %1194, double* %1192, align 8
  %1195 = fmul double %1168, %1087
  %1196 = fmul double %1195, %1087
  %1197 = fadd double %fullElectVirial_zz.3, %1196
  %1198 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1199 = load double* %1198, align 8
  %1200 = fadd double %1199, %1195
  store double %1200, double* %1198, align 8
  %1201 = getelementptr inbounds %class.Vector* %1170, i32 0, i32 2
  %1202 = load double* %1201, align 8
  %1203 = fsub double %1202, %1195
  store double %1203, double* %1201, align 8
  br label %1204

; <label>:1204                                    ; preds = %1067
  %1205 = add nsw i32 %k17.4, 1
  br label %1065

; <label>:1206                                    ; preds = %1065
  br label %1207

; <label>:1207                                    ; preds = %1206, %327
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %327 ], [ %pairlistoffset.1, %1206 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %327 ], [ %pairlistindex.2, %1206 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %327 ], [ %fixg_lower.3, %1206 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %327 ], [ %g_lower.3, %1206 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %327 ], [ %j_hgroup.2, %1206 ]
  %pairCount.3 = phi i32 [ %323, %327 ], [ %pairCount.2, %1206 ]
  %i.1 = phi i32 [ %329, %327 ], [ %i.0, %1206 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %327 ], [ %fullElectVirial_zz.3, %1206 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %327 ], [ %fullElectVirial_yz.3, %1206 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %327 ], [ %fullElectVirial_yy.3, %1206 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %327 ], [ %fullElectVirial_xz.3, %1206 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %327 ], [ %fullElectVirial_xy.3, %1206 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %327 ], [ %fullElectVirial_xx.3, %1206 ]
  %fullElectEnergy_s.4 = phi double [ %fullElectEnergy_s.0, %327 ], [ %fullElectEnergy_s.3, %1206 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %327 ], [ %fullElectEnergy.3, %1206 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %327 ], [ %776, %1206 ]
  %1208 = add nsw i32 %i.1, 1
  br label %264

; <label>:1209                                    ; preds = %264
  %1210 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1211 = icmp ne i32* %48, %1210
  br i1 %1211, label %1212, label %1217

; <label>:1212                                    ; preds = %1209
  %1213 = icmp eq i32* %48, null
  br i1 %1213, label %1216, label %1214

; <label>:1214                                    ; preds = %1212
  %1215 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1215) #8
  br label %1216

; <label>:1216                                    ; preds = %1214, %1212
  br label %1217

; <label>:1217                                    ; preds = %1216, %1209
  %1218 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1219 = icmp ne i32* %62, %1218
  br i1 %1219, label %1220, label %1225

; <label>:1220                                    ; preds = %1217
  %1221 = icmp eq i32* %62, null
  br i1 %1221, label %1224, label %1222

; <label>:1222                                    ; preds = %1220
  %1223 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1223) #8
  br label %1224

; <label>:1224                                    ; preds = %1222, %1220
  br label %1225

; <label>:1225                                    ; preds = %1224, %1217
  %1226 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1227 = icmp ne i32* %76, %1226
  br i1 %1227, label %1228, label %1233

; <label>:1228                                    ; preds = %1225
  %1229 = icmp eq i32* %76, null
  br i1 %1229, label %1232, label %1230

; <label>:1230                                    ; preds = %1228
  %1231 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1231) #8
  br label %1232

; <label>:1232                                    ; preds = %1230, %1228
  br label %1233

; <label>:1233                                    ; preds = %1232, %1225
  %1234 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1235 = icmp ne i32* %186, %1234
  br i1 %1235, label %1236, label %1241

; <label>:1236                                    ; preds = %1233
  %1237 = icmp eq i32* %186, null
  br i1 %1237, label %1240, label %1238

; <label>:1238                                    ; preds = %1236
  %1239 = bitcast i32* %186 to i8*
  call void @_ZdaPv(i8* %1239) #8
  br label %1240

; <label>:1240                                    ; preds = %1238, %1236
  br label %1241

; <label>:1241                                    ; preds = %1240, %1233
  %1242 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1243 = icmp ne i32* %200, %1242
  br i1 %1243, label %1244, label %1249

; <label>:1244                                    ; preds = %1241
  %1245 = icmp eq i32* %200, null
  br i1 %1245, label %1248, label %1246

; <label>:1246                                    ; preds = %1244
  %1247 = bitcast i32* %200 to i8*
  call void @_ZdaPv(i8* %1247) #8
  br label %1248

; <label>:1248                                    ; preds = %1246, %1244
  br label %1249

; <label>:1249                                    ; preds = %1248, %1241
  %1250 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1251 = icmp ne i32* %214, %1250
  br i1 %1251, label %1252, label %1257

; <label>:1252                                    ; preds = %1249
  %1253 = icmp eq i32* %214, null
  br i1 %1253, label %1256, label %1254

; <label>:1254                                    ; preds = %1252
  %1255 = bitcast i32* %214 to i8*
  call void @_ZdaPv(i8* %1255) #8
  br label %1256

; <label>:1256                                    ; preds = %1254, %1252
  br label %1257

; <label>:1257                                    ; preds = %1256, %1249
  %1258 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1259 = icmp ne i32* %228, %1258
  br i1 %1259, label %1260, label %1265

; <label>:1260                                    ; preds = %1257
  %1261 = icmp eq i32* %228, null
  br i1 %1261, label %1264, label %1262

; <label>:1262                                    ; preds = %1260
  %1263 = bitcast i32* %228 to i8*
  call void @_ZdaPv(i8* %1263) #8
  br label %1264

; <label>:1264                                    ; preds = %1262, %1260
  br label %1265

; <label>:1265                                    ; preds = %1264, %1257
  %1266 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1267 = icmp ne i32* %242, %1266
  br i1 %1267, label %1268, label %1273

; <label>:1268                                    ; preds = %1265
  %1269 = icmp eq i32* %242, null
  br i1 %1269, label %1272, label %1270

; <label>:1270                                    ; preds = %1268
  %1271 = bitcast i32* %242 to i8*
  call void @_ZdaPv(i8* %1271) #8
  br label %1272

; <label>:1272                                    ; preds = %1270, %1268
  br label %1273

; <label>:1273                                    ; preds = %1272, %1265
  %1274 = sitofp i32 %exclChecksum.0 to double
  %1275 = getelementptr inbounds double* %6, i64 22
  %1276 = load double* %1275, align 8
  %1277 = fadd double %1276, %1274
  store double %1277, double* %1275, align 8
  %1278 = getelementptr inbounds double* %6, i64 1
  %1279 = load double* %1278, align 8
  %1280 = fadd double %1279, %fullElectEnergy.0
  store double %1280, double* %1278, align 8
  %1281 = getelementptr inbounds double* %6, i64 24
  %1282 = load double* %1281, align 8
  %1283 = fadd double %1282, %fullElectEnergy_s.0
  store double %1283, double* %1281, align 8
  %1284 = getelementptr inbounds double* %6, i64 12
  %1285 = load double* %1284, align 8
  %1286 = fadd double %1285, %fullElectVirial_xx.0
  store double %1286, double* %1284, align 8
  %1287 = getelementptr inbounds double* %6, i64 13
  %1288 = load double* %1287, align 8
  %1289 = fadd double %1288, %fullElectVirial_xy.0
  store double %1289, double* %1287, align 8
  %1290 = getelementptr inbounds double* %6, i64 14
  %1291 = load double* %1290, align 8
  %1292 = fadd double %1291, %fullElectVirial_xz.0
  store double %1292, double* %1290, align 8
  %1293 = getelementptr inbounds double* %6, i64 15
  %1294 = load double* %1293, align 8
  %1295 = fadd double %1294, %fullElectVirial_xy.0
  store double %1295, double* %1293, align 8
  %1296 = getelementptr inbounds double* %6, i64 16
  %1297 = load double* %1296, align 8
  %1298 = fadd double %1297, %fullElectVirial_yy.0
  store double %1298, double* %1296, align 8
  %1299 = getelementptr inbounds double* %6, i64 17
  %1300 = load double* %1299, align 8
  %1301 = fadd double %1300, %fullElectVirial_yz.0
  store double %1301, double* %1299, align 8
  %1302 = getelementptr inbounds double* %6, i64 18
  %1303 = load double* %1302, align 8
  %1304 = fadd double %1303, %fullElectVirial_xz.0
  store double %1304, double* %1302, align 8
  %1305 = getelementptr inbounds double* %6, i64 19
  %1306 = load double* %1305, align 8
  %1307 = fadd double %1306, %fullElectVirial_yz.0
  store double %1307, double* %1305, align 8
  %1308 = getelementptr inbounds double* %6, i64 20
  %1309 = load double* %1308, align 8
  %1310 = fadd double %1309, %fullElectVirial_zz.0
  store double %1310, double* %1308, align 8
  br label %1311

; <label>:1311                                    ; preds = %1273, %161, %3
  ret void
}

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil13calc_pair_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.65, align 4
  %r2f29 = alloca %union.anon.66, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1159

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1159

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1061, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1061 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1061 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1061 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1062, %1061 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_zz.3, %1061 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yz.3, %1061 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yy.3, %1061 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xz.3, %1061 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xy.3, %1061 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xx.3, %1061 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1061 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1063

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1061

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1061

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %506 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %507 = add nsw i32 %506, 1
  %508 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %509 = load i32* %508, align 4
  %510 = lshr i32 %509, 28
  %511 = mul nsw i32 %507, %510
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds double* %505, i64 %512
  %514 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %515 = load float* %514, align 4
  %516 = fpext float %515 to double
  %517 = fmul double 3.320636e+02, %516
  %518 = fmul double %517, %15
  %519 = fmul double %518, %9
  %520 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %521 = load i32* %520, align 4
  %522 = and i32 %521, 4194303
  %523 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %522)
  %524 = zext i16 %523 to i32
  %525 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %524)
  %526 = icmp ne i32 %504, 0
  br i1 %526, label %527, label %589

; <label>:527                                     ; preds = %502
  br label %528

; <label>:528                                     ; preds = %586, %527
  %pli4.0 = phi i32* [ %221, %527 ], [ %pli4.2, %586 ]
  %plin.0 = phi i32* [ %235, %527 ], [ %plin.2, %586 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %527 ], [ %587, %586 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %527 ], [ %exclChecksum.3, %586 ]
  %529 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %529, label %530, label %588

; <label>:530                                     ; preds = %528
  %531 = sext i32 %k.0 to i64
  %532 = getelementptr inbounds i32* %207, i64 %531
  %533 = load i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.CompAtom* %36, i64 %534
  %536 = getelementptr inbounds %struct.CompAtom* %535, i32 0, i32 0
  %537 = getelementptr inbounds %class.Vector* %536, i32 0, i32 0
  %538 = load double* %537, align 8
  %539 = fsub double %303, %538
  %540 = fmul double %539, %539
  %541 = sext i32 %533 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %36, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 1
  %545 = load double* %544, align 8
  %546 = fsub double %306, %545
  %547 = fmul double %546, %546
  %548 = fadd double %540, %547
  %549 = sext i32 %533 to i64
  %550 = getelementptr inbounds %struct.CompAtom* %36, i64 %549
  %551 = getelementptr inbounds %struct.CompAtom* %550, i32 0, i32 0
  %552 = getelementptr inbounds %class.Vector* %551, i32 0, i32 2
  %553 = load double* %552, align 8
  %554 = fsub double %309, %553
  %555 = fmul double %554, %554
  %556 = fadd double %548, %555
  %557 = sext i32 %533 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %36, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 2
  %560 = load i32* %559, align 4
  %561 = lshr i32 %560, 26
  %562 = and i32 %561, 1
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %585, label %564

; <label>:564                                     ; preds = %530
  %565 = fcmp ole double %556, %7
  br i1 %565, label %566, label %585

; <label>:566                                     ; preds = %564
  %567 = fcmp ole double %556, %21
  br i1 %567, label %568, label %571

; <label>:568                                     ; preds = %566
  %569 = add nsw i32 %exclChecksum.1, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %585, label %571

; <label>:571                                     ; preds = %568, %566
  %exclChecksum.2 = phi i32 [ %569, %568 ], [ %exclChecksum.1, %566 ]
  %572 = sext i32 %533 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %36, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 2
  %575 = load i32* %574, align 4
  %576 = and i32 %575, 4194303
  %577 = icmp sge i32 %576, %293
  br i1 %577, label %578, label %582

; <label>:578                                     ; preds = %571
  %579 = icmp sle i32 %576, %295
  br i1 %579, label %580, label %582

; <label>:580                                     ; preds = %578
  %581 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %533, i32* %pli4.0, align 4
  br label %584

; <label>:582                                     ; preds = %578, %571
  %583 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %533, i32* %plin.0, align 4
  br label %584

; <label>:584                                     ; preds = %582, %580
  %pli4.1 = phi i32* [ %581, %580 ], [ %pli4.0, %582 ]
  %plin.1 = phi i32* [ %plin.0, %580 ], [ %583, %582 ]
  br label %585

; <label>:585                                     ; preds = %584, %568, %564, %530
  %pli4.2 = phi i32* [ %pli4.0, %530 ], [ %pli4.0, %568 ], [ %pli4.1, %584 ], [ %pli4.0, %564 ]
  %plin.2 = phi i32* [ %plin.0, %530 ], [ %plin.0, %568 ], [ %plin.1, %584 ], [ %plin.0, %564 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %530 ], [ %569, %568 ], [ %exclChecksum.2, %584 ], [ %exclChecksum.1, %564 ]
  br label %586

; <label>:586                                     ; preds = %585
  %587 = add nsw i32 %k.0, 1
  br label %528

; <label>:588                                     ; preds = %528
  br label %668

; <label>:589                                     ; preds = %502
  %590 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %590, label %591, label %667

; <label>:591                                     ; preds = %589
  %592 = sext i32 %pairlistoffset.1 to i64
  %593 = getelementptr inbounds i32* %207, i64 %592
  %594 = load i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %36, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 0
  %598 = getelementptr inbounds %class.Vector* %597, i32 0, i32 0
  %599 = load double* %598, align 8
  %600 = sext i32 %594 to i64
  %601 = getelementptr inbounds %struct.CompAtom* %36, i64 %600
  %602 = getelementptr inbounds %struct.CompAtom* %601, i32 0, i32 0
  %603 = getelementptr inbounds %class.Vector* %602, i32 0, i32 1
  %604 = load double* %603, align 8
  %605 = sext i32 %594 to i64
  %606 = getelementptr inbounds %struct.CompAtom* %36, i64 %605
  %607 = getelementptr inbounds %struct.CompAtom* %606, i32 0, i32 0
  %608 = getelementptr inbounds %class.Vector* %607, i32 0, i32 2
  %609 = load double* %608, align 8
  %610 = sext i32 %594 to i64
  %611 = getelementptr inbounds %struct.CompAtom* %36, i64 %610
  %612 = getelementptr inbounds %struct.CompAtom* %611, i32 0, i32 2
  %613 = load i32* %612, align 4
  %614 = and i32 %613, 4194303
  br label %615

; <label>:615                                     ; preds = %660, %591
  %pli4.3 = phi i32* [ %221, %591 ], [ %pli4.5, %660 ]
  %plin.3 = phi i32* [ %235, %591 ], [ %plin.5, %660 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %591 ], [ %618, %660 ]
  %j211.0 = phi i32 [ %594, %591 ], [ %621, %660 ]
  %p_j_x12.0 = phi double [ %599, %591 ], [ %628, %660 ]
  %p_j_y13.0 = phi double [ %604, %591 ], [ %636, %660 ]
  %p_j_z14.0 = phi double [ %609, %591 ], [ %644, %660 ]
  %atom215.0 = phi i32 [ %614, %591 ], [ %665, %660 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %591 ], [ %exclChecksum.6, %660 ]
  %616 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %616, label %617, label %666

; <label>:617                                     ; preds = %615
  %618 = add nsw i32 %k10.0, 1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i32* %207, i64 %619
  %621 = load i32* %620, align 4
  %622 = fsub double %303, %p_j_x12.0
  %623 = fmul double %622, %622
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds %struct.CompAtom* %36, i64 %624
  %626 = getelementptr inbounds %struct.CompAtom* %625, i32 0, i32 0
  %627 = getelementptr inbounds %class.Vector* %626, i32 0, i32 0
  %628 = load double* %627, align 8
  %629 = fsub double %306, %p_j_y13.0
  %630 = fmul double %629, %629
  %631 = fadd double %623, %630
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 1
  %636 = load double* %635, align 8
  %637 = fsub double %309, %p_j_z14.0
  %638 = fmul double %637, %637
  %639 = fadd double %631, %638
  %640 = sext i32 %621 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %36, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 2
  %644 = load double* %643, align 8
  %645 = fcmp ole double %639, %7
  br i1 %645, label %646, label %660

; <label>:646                                     ; preds = %617
  %647 = fcmp ole double %639, %21
  br i1 %647, label %648, label %651

; <label>:648                                     ; preds = %646
  %649 = add nsw i32 %exclChecksum.4, 1
  %650 = icmp ne i32 %649, 0
  br i1 %650, label %660, label %651

; <label>:651                                     ; preds = %648, %646
  %exclChecksum.5 = phi i32 [ %649, %648 ], [ %exclChecksum.4, %646 ]
  %652 = icmp sge i32 %atom215.0, %293
  br i1 %652, label %653, label %657

; <label>:653                                     ; preds = %651
  %654 = icmp sle i32 %atom215.0, %295
  br i1 %654, label %655, label %657

; <label>:655                                     ; preds = %653
  %656 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %659

; <label>:657                                     ; preds = %653, %651
  %658 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %659

; <label>:659                                     ; preds = %657, %655
  %pli4.4 = phi i32* [ %656, %655 ], [ %pli4.3, %657 ]
  %plin.4 = phi i32* [ %plin.3, %655 ], [ %658, %657 ]
  br label %660

; <label>:660                                     ; preds = %659, %648, %617
  %pli4.5 = phi i32* [ %pli4.3, %648 ], [ %pli4.4, %659 ], [ %pli4.3, %617 ]
  %plin.5 = phi i32* [ %plin.3, %648 ], [ %plin.4, %659 ], [ %plin.3, %617 ]
  %exclChecksum.6 = phi i32 [ %649, %648 ], [ %exclChecksum.5, %659 ], [ %exclChecksum.4, %617 ]
  %661 = sext i32 %621 to i64
  %662 = getelementptr inbounds %struct.CompAtom* %36, i64 %661
  %663 = getelementptr inbounds %struct.CompAtom* %662, i32 0, i32 2
  %664 = load i32* %663, align 4
  %665 = and i32 %664, 4194303
  br label %615

; <label>:666                                     ; preds = %615
  br label %667

; <label>:667                                     ; preds = %666, %589
  %pli4.6 = phi i32* [ %pli4.3, %666 ], [ %221, %589 ]
  %plin.6 = phi i32* [ %plin.3, %666 ], [ %235, %589 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %666 ], [ %exclChecksum.0, %589 ]
  br label %668

; <label>:668                                     ; preds = %667, %588
  %pli4.7 = phi i32* [ %pli4.0, %588 ], [ %pli4.6, %667 ]
  %plin.7 = phi i32* [ %plin.0, %588 ], [ %plin.6, %667 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %588 ], [ %exclChecksum.7, %667 ]
  %669 = ptrtoint i32* %pli4.7 to i64
  %670 = ptrtoint i32* %221 to i64
  %671 = sub i64 %669, %670
  %672 = sdiv exact i64 %671, 4
  %673 = trunc i64 %672 to i32
  %674 = icmp ne i32 %673, 0
  br i1 %674, label %675, label %682

; <label>:675                                     ; preds = %668
  %676 = sub nsw i32 %673, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %673 to i64
  %681 = getelementptr inbounds i32* %221, i64 %680
  store i32 %679, i32* %681, align 4
  br label %682

; <label>:682                                     ; preds = %675, %668
  br label %683

; <label>:683                                     ; preds = %705, %682
  %plin.8 = phi i32* [ %plin.7, %682 ], [ %plin.9, %705 ]
  %plix.0 = phi i32* [ %249, %682 ], [ %plix.1, %705 ]
  %plim.0 = phi i32* [ %263, %682 ], [ %plim.1, %705 ]
  %k18.0 = phi i32 [ 0, %682 ], [ %706, %705 ]
  %684 = icmp slt i32 %k18.0, %673
  br i1 %684, label %685, label %707

; <label>:685                                     ; preds = %683
  %686 = sext i32 %k18.0 to i64
  %687 = getelementptr inbounds i32* %221, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CompAtom* %36, i64 %689
  %691 = getelementptr inbounds %struct.CompAtom* %690, i32 0, i32 2
  %692 = load i32* %691, align 4
  %693 = and i32 %692, 4194303
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i8* %300, i64 %694
  %696 = load i8* %695, align 1
  %697 = sext i8 %696 to i32
  switch i32 %697, label %704 [
    i32 0, label %698
    i32 1, label %700
    i32 2, label %702
  ]

; <label>:698                                     ; preds = %685
  %699 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %688, i32* %plin.8, align 4
  br label %704

; <label>:700                                     ; preds = %685
  %701 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %688, i32* %plix.0, align 4
  br label %704

; <label>:702                                     ; preds = %685
  %703 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %688, i32* %plim.0, align 4
  br label %704

; <label>:704                                     ; preds = %702, %700, %698, %685
  %plin.9 = phi i32* [ %plin.8, %685 ], [ %plin.8, %702 ], [ %plin.8, %700 ], [ %699, %698 ]
  %plix.1 = phi i32* [ %plix.0, %685 ], [ %plix.0, %702 ], [ %701, %700 ], [ %plix.0, %698 ]
  %plim.1 = phi i32* [ %plim.0, %685 ], [ %703, %702 ], [ %plim.0, %700 ], [ %plim.0, %698 ]
  br label %705

; <label>:705                                     ; preds = %704
  %706 = add nsw i32 %k18.0, 1
  br label %683

; <label>:707                                     ; preds = %683
  %708 = ptrtoint i32* %plix.0 to i64
  %709 = ptrtoint i32* %249 to i64
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 4
  %712 = sext i32 %exclChecksum.8 to i64
  %713 = add nsw i64 %712, %711
  %714 = trunc i64 %713 to i32
  %715 = ptrtoint i32* %plim.0 to i64
  %716 = ptrtoint i32* %263 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %714 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plin.8 to i64
  %723 = ptrtoint i32* %235 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = trunc i64 %725 to i32
  br label %727

; <label>:727                                     ; preds = %887, %707
  %k18.1 = phi i32 [ 0, %707 ], [ %888, %887 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %707 ], [ %880, %887 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %707 ], [ %871, %887 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %707 ], [ %869, %887 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %707 ], [ %860, %887 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %707 ], [ %858, %887 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %707 ], [ %856, %887 ]
  %728 = icmp slt i32 %k18.1, %726
  br i1 %728, label %729, label %889

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k18.1 to i64
  %731 = getelementptr inbounds i32* %235, i64 %730
  %732 = load i32* %731, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.CompAtom* %36, i64 %733
  %735 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 0
  %737 = load double* %736, align 8
  %738 = fsub double %303, %737
  %739 = fmul double %738, %738
  %740 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %741 = getelementptr inbounds %class.Vector* %740, i32 0, i32 1
  %742 = load double* %741, align 8
  %743 = fsub double %306, %742
  %744 = fmul double %743, %743
  %745 = fadd double %739, %744
  %746 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %747 = getelementptr inbounds %class.Vector* %746, i32 0, i32 2
  %748 = load double* %747, align 8
  %749 = fsub double %309, %748
  %750 = fmul double %749, %749
  %751 = fadd double %745, %750
  %752 = fptrunc double %751 to float
  %753 = bitcast %union.anon.65* %r2f to float*
  store float %752, float* %753, align 4
  %754 = bitcast %union.anon.65* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = ashr i32 %755, 17
  %757 = add nsw i32 %756, %24
  %758 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %759 = load i32* %758, align 4
  %760 = and i32 %759, 4194303
  %761 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %760)
  %762 = zext i16 %761 to i32
  %763 = mul nsw i32 2, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %764
  %766 = mul nsw i32 16, %757
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double* %14, i64 %767
  %769 = getelementptr inbounds double* %768, i64 0
  %770 = load double* %769, align 8
  %771 = mul nsw i32 16, %757
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds double* %14, i64 %772
  %774 = getelementptr inbounds double* %773, i64 4
  %775 = getelementptr inbounds double* %774, i64 0
  %776 = load double* %775, align 8
  %777 = mul nsw i32 16, %757
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double* %14, i64 %778
  %780 = getelementptr inbounds double* %779, i64 8
  %781 = getelementptr inbounds double* %780, i64 0
  %782 = load double* %781, align 8
  %783 = bitcast %union.anon.65* %r2f to i32*
  %784 = load i32* %783, align 4
  %785 = and i32 %784, -131072
  store i32 %785, i32* %783, align 4
  %786 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 1
  %787 = load float* %786, align 4
  %788 = fpext float %787 to double
  %789 = fmul double %519, %788
  %790 = bitcast %union.anon.65* %r2f to float*
  %791 = load float* %790, align 4
  %792 = fpext float %791 to double
  %793 = fsub double %751, %792
  %794 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %795 = load i32* %794, align 4
  %796 = lshr i32 %795, 28
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds double* %513, i64 %797
  %799 = load double* %798, align 8
  %800 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 0
  %801 = load double* %800, align 8
  %802 = fmul double %15, %801
  %803 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 1
  %804 = load double* %803, align 8
  %805 = fmul double %15, %804
  %806 = fmul double %802, %770
  %807 = fmul double %805, %776
  %808 = fsub double %806, %807
  %809 = getelementptr inbounds double* %768, i64 3
  %810 = load double* %809, align 8
  %811 = fmul double %802, %810
  %812 = getelementptr inbounds double* %774, i64 3
  %813 = load double* %812, align 8
  %814 = fmul double %805, %813
  %815 = fsub double %811, %814
  %816 = getelementptr inbounds double* %768, i64 2
  %817 = load double* %816, align 8
  %818 = fmul double %802, %817
  %819 = getelementptr inbounds double* %774, i64 2
  %820 = load double* %819, align 8
  %821 = fmul double %805, %820
  %822 = fsub double %818, %821
  %823 = getelementptr inbounds double* %768, i64 1
  %824 = load double* %823, align 8
  %825 = fmul double %802, %824
  %826 = getelementptr inbounds double* %774, i64 1
  %827 = load double* %826, align 8
  %828 = fmul double %805, %827
  %829 = fsub double %825, %828
  %830 = fmul double %782, %789
  %831 = getelementptr inbounds double* %780, i64 3
  %832 = load double* %831, align 8
  %833 = fmul double %789, %832
  %834 = getelementptr inbounds double* %780, i64 2
  %835 = load double* %834, align 8
  %836 = fmul double %789, %835
  %837 = getelementptr inbounds double* %780, i64 1
  %838 = load double* %837, align 8
  %839 = fmul double %789, %838
  %840 = fadd double %833, %815
  %841 = fadd double %836, %822
  %842 = fadd double %839, %829
  %843 = fadd double %830, %808
  %844 = fmul double 3.000000e+00, %793
  %845 = fmul double %844, %840
  %846 = fmul double 2.000000e+00, %841
  %847 = fadd double %845, %846
  %848 = fmul double %847, %793
  %849 = fadd double %848, %842
  %850 = fmul double -2.000000e+00, %799
  %851 = fmul double %850, %849
  %852 = sext i32 %732 to i64
  %853 = getelementptr inbounds %class.Vector* %269, i64 %852
  %854 = fmul double %851, %738
  %855 = fmul double %854, %738
  %856 = fadd double %virial_xx.1, %855
  %857 = fmul double %854, %743
  %858 = fadd double %virial_xy.1, %857
  %859 = fmul double %854, %749
  %860 = fadd double %virial_xz.1, %859
  %861 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %862 = load double* %861, align 8
  %863 = fadd double %862, %854
  store double %863, double* %861, align 8
  %864 = getelementptr inbounds %class.Vector* %853, i32 0, i32 0
  %865 = load double* %864, align 8
  %866 = fsub double %865, %854
  store double %866, double* %864, align 8
  %867 = fmul double %851, %743
  %868 = fmul double %867, %743
  %869 = fadd double %virial_yy.1, %868
  %870 = fmul double %867, %749
  %871 = fadd double %virial_yz.1, %870
  %872 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %873 = load double* %872, align 8
  %874 = fadd double %873, %867
  store double %874, double* %872, align 8
  %875 = getelementptr inbounds %class.Vector* %853, i32 0, i32 1
  %876 = load double* %875, align 8
  %877 = fsub double %876, %867
  store double %877, double* %875, align 8
  %878 = fmul double %851, %749
  %879 = fmul double %878, %749
  %880 = fadd double %virial_zz.1, %879
  %881 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %882 = load double* %881, align 8
  %883 = fadd double %882, %878
  store double %883, double* %881, align 8
  %884 = getelementptr inbounds %class.Vector* %853, i32 0, i32 2
  %885 = load double* %884, align 8
  %886 = fsub double %885, %878
  store double %886, double* %884, align 8
  br label %887

; <label>:887                                     ; preds = %729
  %888 = add nsw i32 %k18.1, 1
  br label %727

; <label>:889                                     ; preds = %727
  %890 = ptrtoint i32* %plim.0 to i64
  %891 = ptrtoint i32* %263 to i64
  %892 = sub i64 %890, %891
  %893 = sdiv exact i64 %892, 4
  %894 = trunc i64 %893 to i32
  br label %895

; <label>:895                                     ; preds = %1058, %889
  %k18.2 = phi i32 [ 0, %889 ], [ %1059, %1058 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %889 ], [ %1051, %1058 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %889 ], [ %1042, %1058 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %889 ], [ %1040, %1058 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %889 ], [ %1031, %1058 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %889 ], [ %1029, %1058 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %889 ], [ %1027, %1058 ]
  %896 = icmp slt i32 %k18.2, %894
  br i1 %896, label %897, label %1060

; <label>:897                                     ; preds = %895
  %898 = sext i32 %k18.2 to i64
  %899 = getelementptr inbounds i32* %263, i64 %898
  %900 = load i32* %899, align 4
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds %struct.CompAtom* %36, i64 %901
  %903 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 0
  %904 = getelementptr inbounds %class.Vector* %903, i32 0, i32 0
  %905 = load double* %904, align 8
  %906 = fsub double %303, %905
  %907 = fmul double %906, %906
  %908 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 0
  %909 = getelementptr inbounds %class.Vector* %908, i32 0, i32 1
  %910 = load double* %909, align 8
  %911 = fsub double %306, %910
  %912 = fmul double %911, %911
  %913 = fadd double %907, %912
  %914 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 0
  %915 = getelementptr inbounds %class.Vector* %914, i32 0, i32 2
  %916 = load double* %915, align 8
  %917 = fsub double %309, %916
  %918 = fmul double %917, %917
  %919 = fadd double %913, %918
  %920 = fptrunc double %919 to float
  %921 = bitcast %union.anon.66* %r2f29 to float*
  store float %920, float* %921, align 4
  %922 = bitcast %union.anon.66* %r2f29 to i32*
  %923 = load i32* %922, align 4
  %924 = ashr i32 %923, 17
  %925 = add nsw i32 %924, %24
  %926 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 2
  %927 = load i32* %926, align 4
  %928 = and i32 %927, 4194303
  %929 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %928)
  %930 = zext i16 %929 to i32
  %931 = mul nsw i32 2, %930
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %932
  %934 = getelementptr inbounds %"struct.LJTable::TableEntry"* %933, i64 1
  %935 = mul nsw i32 16, %925
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds double* %14, i64 %936
  %938 = getelementptr inbounds double* %937, i64 0
  %939 = load double* %938, align 8
  %940 = mul nsw i32 16, %925
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds double* %14, i64 %941
  %943 = getelementptr inbounds double* %942, i64 4
  %944 = getelementptr inbounds double* %943, i64 0
  %945 = load double* %944, align 8
  %946 = mul nsw i32 16, %925
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds double* %14, i64 %947
  %949 = getelementptr inbounds double* %948, i64 8
  %950 = getelementptr inbounds double* %949, i64 0
  %951 = load double* %950, align 8
  %952 = bitcast %union.anon.66* %r2f29 to i32*
  %953 = load i32* %952, align 4
  %954 = and i32 %953, -131072
  store i32 %954, i32* %952, align 4
  %955 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 1
  %956 = load float* %955, align 4
  %957 = fpext float %956 to double
  %958 = fmul double %519, %957
  %959 = bitcast %union.anon.66* %r2f29 to float*
  %960 = load float* %959, align 4
  %961 = fpext float %960 to double
  %962 = fsub double %919, %961
  %963 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 2
  %964 = load i32* %963, align 4
  %965 = lshr i32 %964, 28
  %966 = zext i32 %965 to i64
  %967 = getelementptr inbounds double* %513, i64 %966
  %968 = load double* %967, align 8
  %969 = getelementptr inbounds %"struct.LJTable::TableEntry"* %934, i32 0, i32 0
  %970 = load double* %969, align 8
  %971 = fmul double %15, %970
  %972 = getelementptr inbounds %"struct.LJTable::TableEntry"* %934, i32 0, i32 1
  %973 = load double* %972, align 8
  %974 = fmul double %15, %973
  %975 = fmul double %971, %939
  %976 = fmul double %974, %945
  %977 = fsub double %975, %976
  %978 = getelementptr inbounds double* %937, i64 3
  %979 = load double* %978, align 8
  %980 = fmul double %971, %979
  %981 = getelementptr inbounds double* %943, i64 3
  %982 = load double* %981, align 8
  %983 = fmul double %974, %982
  %984 = fsub double %980, %983
  %985 = getelementptr inbounds double* %937, i64 2
  %986 = load double* %985, align 8
  %987 = fmul double %971, %986
  %988 = getelementptr inbounds double* %943, i64 2
  %989 = load double* %988, align 8
  %990 = fmul double %974, %989
  %991 = fsub double %987, %990
  %992 = getelementptr inbounds double* %937, i64 1
  %993 = load double* %992, align 8
  %994 = fmul double %971, %993
  %995 = getelementptr inbounds double* %943, i64 1
  %996 = load double* %995, align 8
  %997 = fmul double %974, %996
  %998 = fsub double %994, %997
  %999 = fsub double 1.000000e+00, %17
  %1000 = fmul double %999, %958
  %1001 = fmul double %951, %1000
  %1002 = getelementptr inbounds double* %949, i64 3
  %1003 = load double* %1002, align 8
  %1004 = fmul double %1000, %1003
  %1005 = getelementptr inbounds double* %949, i64 2
  %1006 = load double* %1005, align 8
  %1007 = fmul double %1000, %1006
  %1008 = getelementptr inbounds double* %949, i64 1
  %1009 = load double* %1008, align 8
  %1010 = fmul double %1000, %1009
  %1011 = fadd double %1004, %984
  %1012 = fadd double %1007, %991
  %1013 = fadd double %1010, %998
  %1014 = fadd double %1001, %977
  %1015 = fmul double 3.000000e+00, %962
  %1016 = fmul double %1015, %1011
  %1017 = fmul double 2.000000e+00, %1012
  %1018 = fadd double %1016, %1017
  %1019 = fmul double %1018, %962
  %1020 = fadd double %1019, %1013
  %1021 = fmul double -2.000000e+00, %968
  %1022 = fmul double %1021, %1020
  %1023 = sext i32 %900 to i64
  %1024 = getelementptr inbounds %class.Vector* %269, i64 %1023
  %1025 = fmul double %1022, %906
  %1026 = fmul double %1025, %906
  %1027 = fadd double %virial_xx.2, %1026
  %1028 = fmul double %1025, %911
  %1029 = fadd double %virial_xy.2, %1028
  %1030 = fmul double %1025, %917
  %1031 = fadd double %virial_xz.2, %1030
  %1032 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1033 = load double* %1032, align 8
  %1034 = fadd double %1033, %1025
  store double %1034, double* %1032, align 8
  %1035 = getelementptr inbounds %class.Vector* %1024, i32 0, i32 0
  %1036 = load double* %1035, align 8
  %1037 = fsub double %1036, %1025
  store double %1037, double* %1035, align 8
  %1038 = fmul double %1022, %911
  %1039 = fmul double %1038, %911
  %1040 = fadd double %virial_yy.2, %1039
  %1041 = fmul double %1038, %917
  %1042 = fadd double %virial_yz.2, %1041
  %1043 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1044 = load double* %1043, align 8
  %1045 = fadd double %1044, %1038
  store double %1045, double* %1043, align 8
  %1046 = getelementptr inbounds %class.Vector* %1024, i32 0, i32 1
  %1047 = load double* %1046, align 8
  %1048 = fsub double %1047, %1038
  store double %1048, double* %1046, align 8
  %1049 = fmul double %1022, %917
  %1050 = fmul double %1049, %917
  %1051 = fadd double %virial_zz.2, %1050
  %1052 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1053 = load double* %1052, align 8
  %1054 = fadd double %1053, %1049
  store double %1054, double* %1052, align 8
  %1055 = getelementptr inbounds %class.Vector* %1024, i32 0, i32 2
  %1056 = load double* %1055, align 8
  %1057 = fsub double %1056, %1049
  store double %1057, double* %1055, align 8
  br label %1058

; <label>:1058                                    ; preds = %897
  %1059 = add nsw i32 %k18.2, 1
  br label %895

; <label>:1060                                    ; preds = %895
  br label %1061

; <label>:1061                                    ; preds = %1060, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1060 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1060 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1060 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1060 ], [ %491, %488 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %339 ], [ %virial_zz.2, %1060 ], [ %virial_zz.0, %488 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %339 ], [ %virial_yz.2, %1060 ], [ %virial_yz.0, %488 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %339 ], [ %virial_yy.2, %1060 ], [ %virial_yy.0, %488 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %339 ], [ %virial_xz.2, %1060 ], [ %virial_xz.0, %488 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %339 ], [ %virial_xy.2, %1060 ], [ %virial_xy.0, %488 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %339 ], [ %virial_xx.2, %1060 ], [ %virial_xx.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %721, %1060 ], [ %exclChecksum.0, %488 ]
  %1062 = add nsw i32 %i.2, 1
  br label %283

; <label>:1063                                    ; preds = %283
  %1064 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1065 = icmp ne i32* %50, %1064
  br i1 %1065, label %1066, label %1071

; <label>:1066                                    ; preds = %1063
  %1067 = icmp eq i32* %50, null
  br i1 %1067, label %1070, label %1068

; <label>:1068                                    ; preds = %1066
  %1069 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1069) #8
  br label %1070

; <label>:1070                                    ; preds = %1068, %1066
  br label %1071

; <label>:1071                                    ; preds = %1070, %1063
  %1072 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1073 = icmp ne i32* %64, %1072
  br i1 %1073, label %1074, label %1079

; <label>:1074                                    ; preds = %1071
  %1075 = icmp eq i32* %64, null
  br i1 %1075, label %1078, label %1076

; <label>:1076                                    ; preds = %1074
  %1077 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1077) #8
  br label %1078

; <label>:1078                                    ; preds = %1076, %1074
  br label %1079

; <label>:1079                                    ; preds = %1078, %1071
  %1080 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1081 = icmp ne i32* %78, %1080
  br i1 %1081, label %1082, label %1087

; <label>:1082                                    ; preds = %1079
  %1083 = icmp eq i32* %78, null
  br i1 %1083, label %1086, label %1084

; <label>:1084                                    ; preds = %1082
  %1085 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1085) #8
  br label %1086

; <label>:1086                                    ; preds = %1084, %1082
  br label %1087

; <label>:1087                                    ; preds = %1086, %1079
  %1088 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1089 = icmp ne i32* %207, %1088
  br i1 %1089, label %1090, label %1095

; <label>:1090                                    ; preds = %1087
  %1091 = icmp eq i32* %207, null
  br i1 %1091, label %1094, label %1092

; <label>:1092                                    ; preds = %1090
  %1093 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1093) #8
  br label %1094

; <label>:1094                                    ; preds = %1092, %1090
  br label %1095

; <label>:1095                                    ; preds = %1094, %1087
  %1096 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1097 = icmp ne i32* %221, %1096
  br i1 %1097, label %1098, label %1103

; <label>:1098                                    ; preds = %1095
  %1099 = icmp eq i32* %221, null
  br i1 %1099, label %1102, label %1100

; <label>:1100                                    ; preds = %1098
  %1101 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1101) #8
  br label %1102

; <label>:1102                                    ; preds = %1100, %1098
  br label %1103

; <label>:1103                                    ; preds = %1102, %1095
  %1104 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1105 = icmp ne i32* %235, %1104
  br i1 %1105, label %1106, label %1111

; <label>:1106                                    ; preds = %1103
  %1107 = icmp eq i32* %235, null
  br i1 %1107, label %1110, label %1108

; <label>:1108                                    ; preds = %1106
  %1109 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1109) #8
  br label %1110

; <label>:1110                                    ; preds = %1108, %1106
  br label %1111

; <label>:1111                                    ; preds = %1110, %1103
  %1112 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1113 = icmp ne i32* %249, %1112
  br i1 %1113, label %1114, label %1119

; <label>:1114                                    ; preds = %1111
  %1115 = icmp eq i32* %249, null
  br i1 %1115, label %1118, label %1116

; <label>:1116                                    ; preds = %1114
  %1117 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1117) #8
  br label %1118

; <label>:1118                                    ; preds = %1116, %1114
  br label %1119

; <label>:1119                                    ; preds = %1118, %1111
  %1120 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1121 = icmp ne i32* %263, %1120
  br i1 %1121, label %1122, label %1127

; <label>:1122                                    ; preds = %1119
  %1123 = icmp eq i32* %263, null
  br i1 %1123, label %1126, label %1124

; <label>:1124                                    ; preds = %1122
  %1125 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1125) #8
  br label %1126

; <label>:1126                                    ; preds = %1124, %1122
  br label %1127

; <label>:1127                                    ; preds = %1126, %1119
  %1128 = sitofp i32 %exclChecksum.0 to double
  %1129 = getelementptr inbounds double* %6, i64 22
  %1130 = load double* %1129, align 8
  %1131 = fadd double %1130, %1128
  store double %1131, double* %1129, align 8
  %1132 = getelementptr inbounds double* %6, i64 3
  %1133 = load double* %1132, align 8
  %1134 = fadd double %1133, %virial_xx.0
  store double %1134, double* %1132, align 8
  %1135 = getelementptr inbounds double* %6, i64 4
  %1136 = load double* %1135, align 8
  %1137 = fadd double %1136, %virial_xy.0
  store double %1137, double* %1135, align 8
  %1138 = getelementptr inbounds double* %6, i64 5
  %1139 = load double* %1138, align 8
  %1140 = fadd double %1139, %virial_xz.0
  store double %1140, double* %1138, align 8
  %1141 = getelementptr inbounds double* %6, i64 6
  %1142 = load double* %1141, align 8
  %1143 = fadd double %1142, %virial_xy.0
  store double %1143, double* %1141, align 8
  %1144 = getelementptr inbounds double* %6, i64 7
  %1145 = load double* %1144, align 8
  %1146 = fadd double %1145, %virial_yy.0
  store double %1146, double* %1144, align 8
  %1147 = getelementptr inbounds double* %6, i64 8
  %1148 = load double* %1147, align 8
  %1149 = fadd double %1148, %virial_yz.0
  store double %1149, double* %1147, align 8
  %1150 = getelementptr inbounds double* %6, i64 9
  %1151 = load double* %1150, align 8
  %1152 = fadd double %1151, %virial_xz.0
  store double %1152, double* %1150, align 8
  %1153 = getelementptr inbounds double* %6, i64 10
  %1154 = load double* %1153, align 8
  %1155 = fadd double %1154, %virial_yz.0
  store double %1155, double* %1153, align 8
  %1156 = getelementptr inbounds double* %6, i64 11
  %1157 = load double* %1156, align 8
  %1158 = fadd double %1157, %virial_zz.0
  store double %1158, double* %1156, align 8
  br label %1159

; <label>:1159                                    ; preds = %1127, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil20calc_pair_energy_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.67, align 4
  %r2f29 = alloca %union.anon.68, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1197

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1197

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1093, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1093 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1093 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1093 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1094, %1093 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_zz.3, %1093 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yz.3, %1093 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yy.3, %1093 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xz.3, %1093 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xy.3, %1093 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xx.3, %1093 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %electEnergy.3, %1093 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy.3, %1093 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1093 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1095

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1093

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1093

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %506 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %507 = add nsw i32 %506, 1
  %508 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %509 = load i32* %508, align 4
  %510 = lshr i32 %509, 28
  %511 = mul nsw i32 %507, %510
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds double* %505, i64 %512
  %514 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %515 = load float* %514, align 4
  %516 = fpext float %515 to double
  %517 = fmul double 3.320636e+02, %516
  %518 = fmul double %517, %15
  %519 = fmul double %518, %9
  %520 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %521 = load i32* %520, align 4
  %522 = and i32 %521, 4194303
  %523 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %522)
  %524 = zext i16 %523 to i32
  %525 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %524)
  %526 = icmp ne i32 %504, 0
  br i1 %526, label %527, label %589

; <label>:527                                     ; preds = %502
  br label %528

; <label>:528                                     ; preds = %586, %527
  %pli4.0 = phi i32* [ %221, %527 ], [ %pli4.2, %586 ]
  %plin.0 = phi i32* [ %235, %527 ], [ %plin.2, %586 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %527 ], [ %587, %586 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %527 ], [ %exclChecksum.3, %586 ]
  %529 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %529, label %530, label %588

; <label>:530                                     ; preds = %528
  %531 = sext i32 %k.0 to i64
  %532 = getelementptr inbounds i32* %207, i64 %531
  %533 = load i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.CompAtom* %36, i64 %534
  %536 = getelementptr inbounds %struct.CompAtom* %535, i32 0, i32 0
  %537 = getelementptr inbounds %class.Vector* %536, i32 0, i32 0
  %538 = load double* %537, align 8
  %539 = fsub double %303, %538
  %540 = fmul double %539, %539
  %541 = sext i32 %533 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %36, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 1
  %545 = load double* %544, align 8
  %546 = fsub double %306, %545
  %547 = fmul double %546, %546
  %548 = fadd double %540, %547
  %549 = sext i32 %533 to i64
  %550 = getelementptr inbounds %struct.CompAtom* %36, i64 %549
  %551 = getelementptr inbounds %struct.CompAtom* %550, i32 0, i32 0
  %552 = getelementptr inbounds %class.Vector* %551, i32 0, i32 2
  %553 = load double* %552, align 8
  %554 = fsub double %309, %553
  %555 = fmul double %554, %554
  %556 = fadd double %548, %555
  %557 = sext i32 %533 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %36, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 2
  %560 = load i32* %559, align 4
  %561 = lshr i32 %560, 26
  %562 = and i32 %561, 1
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %585, label %564

; <label>:564                                     ; preds = %530
  %565 = fcmp ole double %556, %7
  br i1 %565, label %566, label %585

; <label>:566                                     ; preds = %564
  %567 = fcmp ole double %556, %21
  br i1 %567, label %568, label %571

; <label>:568                                     ; preds = %566
  %569 = add nsw i32 %exclChecksum.1, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %585, label %571

; <label>:571                                     ; preds = %568, %566
  %exclChecksum.2 = phi i32 [ %569, %568 ], [ %exclChecksum.1, %566 ]
  %572 = sext i32 %533 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %36, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 2
  %575 = load i32* %574, align 4
  %576 = and i32 %575, 4194303
  %577 = icmp sge i32 %576, %293
  br i1 %577, label %578, label %582

; <label>:578                                     ; preds = %571
  %579 = icmp sle i32 %576, %295
  br i1 %579, label %580, label %582

; <label>:580                                     ; preds = %578
  %581 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %533, i32* %pli4.0, align 4
  br label %584

; <label>:582                                     ; preds = %578, %571
  %583 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %533, i32* %plin.0, align 4
  br label %584

; <label>:584                                     ; preds = %582, %580
  %pli4.1 = phi i32* [ %581, %580 ], [ %pli4.0, %582 ]
  %plin.1 = phi i32* [ %plin.0, %580 ], [ %583, %582 ]
  br label %585

; <label>:585                                     ; preds = %584, %568, %564, %530
  %pli4.2 = phi i32* [ %pli4.0, %530 ], [ %pli4.0, %568 ], [ %pli4.1, %584 ], [ %pli4.0, %564 ]
  %plin.2 = phi i32* [ %plin.0, %530 ], [ %plin.0, %568 ], [ %plin.1, %584 ], [ %plin.0, %564 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %530 ], [ %569, %568 ], [ %exclChecksum.2, %584 ], [ %exclChecksum.1, %564 ]
  br label %586

; <label>:586                                     ; preds = %585
  %587 = add nsw i32 %k.0, 1
  br label %528

; <label>:588                                     ; preds = %528
  br label %668

; <label>:589                                     ; preds = %502
  %590 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %590, label %591, label %667

; <label>:591                                     ; preds = %589
  %592 = sext i32 %pairlistoffset.1 to i64
  %593 = getelementptr inbounds i32* %207, i64 %592
  %594 = load i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %36, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 0
  %598 = getelementptr inbounds %class.Vector* %597, i32 0, i32 0
  %599 = load double* %598, align 8
  %600 = sext i32 %594 to i64
  %601 = getelementptr inbounds %struct.CompAtom* %36, i64 %600
  %602 = getelementptr inbounds %struct.CompAtom* %601, i32 0, i32 0
  %603 = getelementptr inbounds %class.Vector* %602, i32 0, i32 1
  %604 = load double* %603, align 8
  %605 = sext i32 %594 to i64
  %606 = getelementptr inbounds %struct.CompAtom* %36, i64 %605
  %607 = getelementptr inbounds %struct.CompAtom* %606, i32 0, i32 0
  %608 = getelementptr inbounds %class.Vector* %607, i32 0, i32 2
  %609 = load double* %608, align 8
  %610 = sext i32 %594 to i64
  %611 = getelementptr inbounds %struct.CompAtom* %36, i64 %610
  %612 = getelementptr inbounds %struct.CompAtom* %611, i32 0, i32 2
  %613 = load i32* %612, align 4
  %614 = and i32 %613, 4194303
  br label %615

; <label>:615                                     ; preds = %660, %591
  %pli4.3 = phi i32* [ %221, %591 ], [ %pli4.5, %660 ]
  %plin.3 = phi i32* [ %235, %591 ], [ %plin.5, %660 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %591 ], [ %618, %660 ]
  %j211.0 = phi i32 [ %594, %591 ], [ %621, %660 ]
  %p_j_x12.0 = phi double [ %599, %591 ], [ %628, %660 ]
  %p_j_y13.0 = phi double [ %604, %591 ], [ %636, %660 ]
  %p_j_z14.0 = phi double [ %609, %591 ], [ %644, %660 ]
  %atom215.0 = phi i32 [ %614, %591 ], [ %665, %660 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %591 ], [ %exclChecksum.6, %660 ]
  %616 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %616, label %617, label %666

; <label>:617                                     ; preds = %615
  %618 = add nsw i32 %k10.0, 1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i32* %207, i64 %619
  %621 = load i32* %620, align 4
  %622 = fsub double %303, %p_j_x12.0
  %623 = fmul double %622, %622
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds %struct.CompAtom* %36, i64 %624
  %626 = getelementptr inbounds %struct.CompAtom* %625, i32 0, i32 0
  %627 = getelementptr inbounds %class.Vector* %626, i32 0, i32 0
  %628 = load double* %627, align 8
  %629 = fsub double %306, %p_j_y13.0
  %630 = fmul double %629, %629
  %631 = fadd double %623, %630
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 1
  %636 = load double* %635, align 8
  %637 = fsub double %309, %p_j_z14.0
  %638 = fmul double %637, %637
  %639 = fadd double %631, %638
  %640 = sext i32 %621 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %36, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 2
  %644 = load double* %643, align 8
  %645 = fcmp ole double %639, %7
  br i1 %645, label %646, label %660

; <label>:646                                     ; preds = %617
  %647 = fcmp ole double %639, %21
  br i1 %647, label %648, label %651

; <label>:648                                     ; preds = %646
  %649 = add nsw i32 %exclChecksum.4, 1
  %650 = icmp ne i32 %649, 0
  br i1 %650, label %660, label %651

; <label>:651                                     ; preds = %648, %646
  %exclChecksum.5 = phi i32 [ %649, %648 ], [ %exclChecksum.4, %646 ]
  %652 = icmp sge i32 %atom215.0, %293
  br i1 %652, label %653, label %657

; <label>:653                                     ; preds = %651
  %654 = icmp sle i32 %atom215.0, %295
  br i1 %654, label %655, label %657

; <label>:655                                     ; preds = %653
  %656 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %659

; <label>:657                                     ; preds = %653, %651
  %658 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %659

; <label>:659                                     ; preds = %657, %655
  %pli4.4 = phi i32* [ %656, %655 ], [ %pli4.3, %657 ]
  %plin.4 = phi i32* [ %plin.3, %655 ], [ %658, %657 ]
  br label %660

; <label>:660                                     ; preds = %659, %648, %617
  %pli4.5 = phi i32* [ %pli4.3, %648 ], [ %pli4.4, %659 ], [ %pli4.3, %617 ]
  %plin.5 = phi i32* [ %plin.3, %648 ], [ %plin.4, %659 ], [ %plin.3, %617 ]
  %exclChecksum.6 = phi i32 [ %649, %648 ], [ %exclChecksum.5, %659 ], [ %exclChecksum.4, %617 ]
  %661 = sext i32 %621 to i64
  %662 = getelementptr inbounds %struct.CompAtom* %36, i64 %661
  %663 = getelementptr inbounds %struct.CompAtom* %662, i32 0, i32 2
  %664 = load i32* %663, align 4
  %665 = and i32 %664, 4194303
  br label %615

; <label>:666                                     ; preds = %615
  br label %667

; <label>:667                                     ; preds = %666, %589
  %pli4.6 = phi i32* [ %pli4.3, %666 ], [ %221, %589 ]
  %plin.6 = phi i32* [ %plin.3, %666 ], [ %235, %589 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %666 ], [ %exclChecksum.0, %589 ]
  br label %668

; <label>:668                                     ; preds = %667, %588
  %pli4.7 = phi i32* [ %pli4.0, %588 ], [ %pli4.6, %667 ]
  %plin.7 = phi i32* [ %plin.0, %588 ], [ %plin.6, %667 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %588 ], [ %exclChecksum.7, %667 ]
  %669 = ptrtoint i32* %pli4.7 to i64
  %670 = ptrtoint i32* %221 to i64
  %671 = sub i64 %669, %670
  %672 = sdiv exact i64 %671, 4
  %673 = trunc i64 %672 to i32
  %674 = icmp ne i32 %673, 0
  br i1 %674, label %675, label %682

; <label>:675                                     ; preds = %668
  %676 = sub nsw i32 %673, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %673 to i64
  %681 = getelementptr inbounds i32* %221, i64 %680
  store i32 %679, i32* %681, align 4
  br label %682

; <label>:682                                     ; preds = %675, %668
  br label %683

; <label>:683                                     ; preds = %705, %682
  %plin.8 = phi i32* [ %plin.7, %682 ], [ %plin.9, %705 ]
  %plix.0 = phi i32* [ %249, %682 ], [ %plix.1, %705 ]
  %plim.0 = phi i32* [ %263, %682 ], [ %plim.1, %705 ]
  %k18.0 = phi i32 [ 0, %682 ], [ %706, %705 ]
  %684 = icmp slt i32 %k18.0, %673
  br i1 %684, label %685, label %707

; <label>:685                                     ; preds = %683
  %686 = sext i32 %k18.0 to i64
  %687 = getelementptr inbounds i32* %221, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CompAtom* %36, i64 %689
  %691 = getelementptr inbounds %struct.CompAtom* %690, i32 0, i32 2
  %692 = load i32* %691, align 4
  %693 = and i32 %692, 4194303
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i8* %300, i64 %694
  %696 = load i8* %695, align 1
  %697 = sext i8 %696 to i32
  switch i32 %697, label %704 [
    i32 0, label %698
    i32 1, label %700
    i32 2, label %702
  ]

; <label>:698                                     ; preds = %685
  %699 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %688, i32* %plin.8, align 4
  br label %704

; <label>:700                                     ; preds = %685
  %701 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %688, i32* %plix.0, align 4
  br label %704

; <label>:702                                     ; preds = %685
  %703 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %688, i32* %plim.0, align 4
  br label %704

; <label>:704                                     ; preds = %702, %700, %698, %685
  %plin.9 = phi i32* [ %plin.8, %685 ], [ %plin.8, %702 ], [ %plin.8, %700 ], [ %699, %698 ]
  %plix.1 = phi i32* [ %plix.0, %685 ], [ %plix.0, %702 ], [ %701, %700 ], [ %plix.0, %698 ]
  %plim.1 = phi i32* [ %plim.0, %685 ], [ %703, %702 ], [ %plim.0, %700 ], [ %plim.0, %698 ]
  br label %705

; <label>:705                                     ; preds = %704
  %706 = add nsw i32 %k18.0, 1
  br label %683

; <label>:707                                     ; preds = %683
  %708 = ptrtoint i32* %plix.0 to i64
  %709 = ptrtoint i32* %249 to i64
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 4
  %712 = sext i32 %exclChecksum.8 to i64
  %713 = add nsw i64 %712, %711
  %714 = trunc i64 %713 to i32
  %715 = ptrtoint i32* %plim.0 to i64
  %716 = ptrtoint i32* %263 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %714 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plin.8 to i64
  %723 = ptrtoint i32* %235 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = trunc i64 %725 to i32
  br label %727

; <label>:727                                     ; preds = %903, %707
  %k18.1 = phi i32 [ 0, %707 ], [ %904, %903 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %707 ], [ %896, %903 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %707 ], [ %887, %903 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %707 ], [ %885, %903 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %707 ], [ %876, %903 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %707 ], [ %874, %903 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %707 ], [ %872, %903 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %707 ], [ %855, %903 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %707 ], [ %837, %903 ]
  %728 = icmp slt i32 %k18.1, %726
  br i1 %728, label %729, label %905

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k18.1 to i64
  %731 = getelementptr inbounds i32* %235, i64 %730
  %732 = load i32* %731, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.CompAtom* %36, i64 %733
  %735 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 0
  %737 = load double* %736, align 8
  %738 = fsub double %303, %737
  %739 = fmul double %738, %738
  %740 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %741 = getelementptr inbounds %class.Vector* %740, i32 0, i32 1
  %742 = load double* %741, align 8
  %743 = fsub double %306, %742
  %744 = fmul double %743, %743
  %745 = fadd double %739, %744
  %746 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %747 = getelementptr inbounds %class.Vector* %746, i32 0, i32 2
  %748 = load double* %747, align 8
  %749 = fsub double %309, %748
  %750 = fmul double %749, %749
  %751 = fadd double %745, %750
  %752 = fptrunc double %751 to float
  %753 = bitcast %union.anon.67* %r2f to float*
  store float %752, float* %753, align 4
  %754 = bitcast %union.anon.67* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = ashr i32 %755, 17
  %757 = add nsw i32 %756, %24
  %758 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %759 = load i32* %758, align 4
  %760 = and i32 %759, 4194303
  %761 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %760)
  %762 = zext i16 %761 to i32
  %763 = mul nsw i32 2, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %764
  %766 = mul nsw i32 16, %757
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double* %14, i64 %767
  %769 = getelementptr inbounds double* %768, i64 0
  %770 = load double* %769, align 8
  %771 = mul nsw i32 16, %757
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds double* %14, i64 %772
  %774 = getelementptr inbounds double* %773, i64 4
  %775 = getelementptr inbounds double* %774, i64 0
  %776 = load double* %775, align 8
  %777 = mul nsw i32 16, %757
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double* %14, i64 %778
  %780 = getelementptr inbounds double* %779, i64 8
  %781 = getelementptr inbounds double* %780, i64 0
  %782 = load double* %781, align 8
  %783 = bitcast %union.anon.67* %r2f to i32*
  %784 = load i32* %783, align 4
  %785 = and i32 %784, -131072
  store i32 %785, i32* %783, align 4
  %786 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 1
  %787 = load float* %786, align 4
  %788 = fpext float %787 to double
  %789 = fmul double %519, %788
  %790 = bitcast %union.anon.67* %r2f to float*
  %791 = load float* %790, align 4
  %792 = fpext float %791 to double
  %793 = fsub double %751, %792
  %794 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %795 = load i32* %794, align 4
  %796 = lshr i32 %795, 28
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds double* %513, i64 %797
  %799 = load double* %798, align 8
  %800 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 0
  %801 = load double* %800, align 8
  %802 = fmul double %15, %801
  %803 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 1
  %804 = load double* %803, align 8
  %805 = fmul double %15, %804
  %806 = fmul double %802, %770
  %807 = fmul double %805, %776
  %808 = fsub double %806, %807
  %809 = getelementptr inbounds double* %768, i64 3
  %810 = load double* %809, align 8
  %811 = fmul double %802, %810
  %812 = getelementptr inbounds double* %774, i64 3
  %813 = load double* %812, align 8
  %814 = fmul double %805, %813
  %815 = fsub double %811, %814
  %816 = getelementptr inbounds double* %768, i64 2
  %817 = load double* %816, align 8
  %818 = fmul double %802, %817
  %819 = getelementptr inbounds double* %774, i64 2
  %820 = load double* %819, align 8
  %821 = fmul double %805, %820
  %822 = fsub double %818, %821
  %823 = getelementptr inbounds double* %768, i64 1
  %824 = load double* %823, align 8
  %825 = fmul double %802, %824
  %826 = getelementptr inbounds double* %774, i64 1
  %827 = load double* %826, align 8
  %828 = fmul double %805, %827
  %829 = fsub double %825, %828
  %830 = fmul double %793, %815
  %831 = fadd double %830, %822
  %832 = fmul double %831, %793
  %833 = fadd double %832, %829
  %834 = fmul double %833, %793
  %835 = fadd double %834, %808
  %836 = fmul double %799, %835
  %837 = fadd double %vdwEnergy.1, %836
  %838 = fmul double %782, %789
  %839 = getelementptr inbounds double* %780, i64 3
  %840 = load double* %839, align 8
  %841 = fmul double %789, %840
  %842 = getelementptr inbounds double* %780, i64 2
  %843 = load double* %842, align 8
  %844 = fmul double %789, %843
  %845 = getelementptr inbounds double* %780, i64 1
  %846 = load double* %845, align 8
  %847 = fmul double %789, %846
  %848 = fmul double %793, %841
  %849 = fadd double %848, %844
  %850 = fmul double %849, %793
  %851 = fadd double %850, %847
  %852 = fmul double %851, %793
  %853 = fadd double %852, %838
  %854 = fmul double %799, %853
  %855 = fadd double %electEnergy.1, %854
  %856 = fadd double %841, %815
  %857 = fadd double %844, %822
  %858 = fadd double %847, %829
  %859 = fadd double %838, %808
  %860 = fmul double 3.000000e+00, %793
  %861 = fmul double %860, %856
  %862 = fmul double 2.000000e+00, %857
  %863 = fadd double %861, %862
  %864 = fmul double %863, %793
  %865 = fadd double %864, %858
  %866 = fmul double -2.000000e+00, %799
  %867 = fmul double %866, %865
  %868 = sext i32 %732 to i64
  %869 = getelementptr inbounds %class.Vector* %269, i64 %868
  %870 = fmul double %867, %738
  %871 = fmul double %870, %738
  %872 = fadd double %virial_xx.1, %871
  %873 = fmul double %870, %743
  %874 = fadd double %virial_xy.1, %873
  %875 = fmul double %870, %749
  %876 = fadd double %virial_xz.1, %875
  %877 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %878 = load double* %877, align 8
  %879 = fadd double %878, %870
  store double %879, double* %877, align 8
  %880 = getelementptr inbounds %class.Vector* %869, i32 0, i32 0
  %881 = load double* %880, align 8
  %882 = fsub double %881, %870
  store double %882, double* %880, align 8
  %883 = fmul double %867, %743
  %884 = fmul double %883, %743
  %885 = fadd double %virial_yy.1, %884
  %886 = fmul double %883, %749
  %887 = fadd double %virial_yz.1, %886
  %888 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %889 = load double* %888, align 8
  %890 = fadd double %889, %883
  store double %890, double* %888, align 8
  %891 = getelementptr inbounds %class.Vector* %869, i32 0, i32 1
  %892 = load double* %891, align 8
  %893 = fsub double %892, %883
  store double %893, double* %891, align 8
  %894 = fmul double %867, %749
  %895 = fmul double %894, %749
  %896 = fadd double %virial_zz.1, %895
  %897 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %898 = load double* %897, align 8
  %899 = fadd double %898, %894
  store double %899, double* %897, align 8
  %900 = getelementptr inbounds %class.Vector* %869, i32 0, i32 2
  %901 = load double* %900, align 8
  %902 = fsub double %901, %894
  store double %902, double* %900, align 8
  br label %903

; <label>:903                                     ; preds = %729
  %904 = add nsw i32 %k18.1, 1
  br label %727

; <label>:905                                     ; preds = %727
  %906 = ptrtoint i32* %plim.0 to i64
  %907 = ptrtoint i32* %263 to i64
  %908 = sub i64 %906, %907
  %909 = sdiv exact i64 %908, 4
  %910 = trunc i64 %909 to i32
  br label %911

; <label>:911                                     ; preds = %1090, %905
  %k18.2 = phi i32 [ 0, %905 ], [ %1091, %1090 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %905 ], [ %1083, %1090 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %905 ], [ %1074, %1090 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %905 ], [ %1072, %1090 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %905 ], [ %1063, %1090 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %905 ], [ %1061, %1090 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %905 ], [ %1059, %1090 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %905 ], [ %1042, %1090 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %905 ], [ %1022, %1090 ]
  %912 = icmp slt i32 %k18.2, %910
  br i1 %912, label %913, label %1092

; <label>:913                                     ; preds = %911
  %914 = sext i32 %k18.2 to i64
  %915 = getelementptr inbounds i32* %263, i64 %914
  %916 = load i32* %915, align 4
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds %struct.CompAtom* %36, i64 %917
  %919 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 0
  %920 = getelementptr inbounds %class.Vector* %919, i32 0, i32 0
  %921 = load double* %920, align 8
  %922 = fsub double %303, %921
  %923 = fmul double %922, %922
  %924 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 0
  %925 = getelementptr inbounds %class.Vector* %924, i32 0, i32 1
  %926 = load double* %925, align 8
  %927 = fsub double %306, %926
  %928 = fmul double %927, %927
  %929 = fadd double %923, %928
  %930 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 0
  %931 = getelementptr inbounds %class.Vector* %930, i32 0, i32 2
  %932 = load double* %931, align 8
  %933 = fsub double %309, %932
  %934 = fmul double %933, %933
  %935 = fadd double %929, %934
  %936 = fptrunc double %935 to float
  %937 = bitcast %union.anon.68* %r2f29 to float*
  store float %936, float* %937, align 4
  %938 = bitcast %union.anon.68* %r2f29 to i32*
  %939 = load i32* %938, align 4
  %940 = ashr i32 %939, 17
  %941 = add nsw i32 %940, %24
  %942 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 2
  %943 = load i32* %942, align 4
  %944 = and i32 %943, 4194303
  %945 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %944)
  %946 = zext i16 %945 to i32
  %947 = mul nsw i32 2, %946
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %948
  %950 = getelementptr inbounds %"struct.LJTable::TableEntry"* %949, i64 1
  %951 = mul nsw i32 16, %941
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds double* %14, i64 %952
  %954 = getelementptr inbounds double* %953, i64 0
  %955 = load double* %954, align 8
  %956 = mul nsw i32 16, %941
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds double* %14, i64 %957
  %959 = getelementptr inbounds double* %958, i64 4
  %960 = getelementptr inbounds double* %959, i64 0
  %961 = load double* %960, align 8
  %962 = mul nsw i32 16, %941
  %963 = sext i32 %962 to i64
  %964 = getelementptr inbounds double* %14, i64 %963
  %965 = getelementptr inbounds double* %964, i64 8
  %966 = getelementptr inbounds double* %965, i64 0
  %967 = load double* %966, align 8
  %968 = bitcast %union.anon.68* %r2f29 to i32*
  %969 = load i32* %968, align 4
  %970 = and i32 %969, -131072
  store i32 %970, i32* %968, align 4
  %971 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 1
  %972 = load float* %971, align 4
  %973 = fpext float %972 to double
  %974 = fmul double %519, %973
  %975 = bitcast %union.anon.68* %r2f29 to float*
  %976 = load float* %975, align 4
  %977 = fpext float %976 to double
  %978 = fsub double %935, %977
  %979 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 2
  %980 = load i32* %979, align 4
  %981 = lshr i32 %980, 28
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds double* %513, i64 %982
  %984 = load double* %983, align 8
  %985 = getelementptr inbounds %"struct.LJTable::TableEntry"* %950, i32 0, i32 0
  %986 = load double* %985, align 8
  %987 = fmul double %15, %986
  %988 = getelementptr inbounds %"struct.LJTable::TableEntry"* %950, i32 0, i32 1
  %989 = load double* %988, align 8
  %990 = fmul double %15, %989
  %991 = fmul double %987, %955
  %992 = fmul double %990, %961
  %993 = fsub double %991, %992
  %994 = getelementptr inbounds double* %953, i64 3
  %995 = load double* %994, align 8
  %996 = fmul double %987, %995
  %997 = getelementptr inbounds double* %959, i64 3
  %998 = load double* %997, align 8
  %999 = fmul double %990, %998
  %1000 = fsub double %996, %999
  %1001 = getelementptr inbounds double* %953, i64 2
  %1002 = load double* %1001, align 8
  %1003 = fmul double %987, %1002
  %1004 = getelementptr inbounds double* %959, i64 2
  %1005 = load double* %1004, align 8
  %1006 = fmul double %990, %1005
  %1007 = fsub double %1003, %1006
  %1008 = getelementptr inbounds double* %953, i64 1
  %1009 = load double* %1008, align 8
  %1010 = fmul double %987, %1009
  %1011 = getelementptr inbounds double* %959, i64 1
  %1012 = load double* %1011, align 8
  %1013 = fmul double %990, %1012
  %1014 = fsub double %1010, %1013
  %1015 = fmul double %978, %1000
  %1016 = fadd double %1015, %1007
  %1017 = fmul double %1016, %978
  %1018 = fadd double %1017, %1014
  %1019 = fmul double %1018, %978
  %1020 = fadd double %1019, %993
  %1021 = fmul double %984, %1020
  %1022 = fadd double %vdwEnergy.2, %1021
  %1023 = fsub double 1.000000e+00, %17
  %1024 = fmul double %1023, %974
  %1025 = fmul double %967, %1024
  %1026 = getelementptr inbounds double* %965, i64 3
  %1027 = load double* %1026, align 8
  %1028 = fmul double %1024, %1027
  %1029 = getelementptr inbounds double* %965, i64 2
  %1030 = load double* %1029, align 8
  %1031 = fmul double %1024, %1030
  %1032 = getelementptr inbounds double* %965, i64 1
  %1033 = load double* %1032, align 8
  %1034 = fmul double %1024, %1033
  %1035 = fmul double %978, %1028
  %1036 = fadd double %1035, %1031
  %1037 = fmul double %1036, %978
  %1038 = fadd double %1037, %1034
  %1039 = fmul double %1038, %978
  %1040 = fadd double %1039, %1025
  %1041 = fmul double %984, %1040
  %1042 = fadd double %electEnergy.2, %1041
  %1043 = fadd double %1028, %1000
  %1044 = fadd double %1031, %1007
  %1045 = fadd double %1034, %1014
  %1046 = fadd double %1025, %993
  %1047 = fmul double 3.000000e+00, %978
  %1048 = fmul double %1047, %1043
  %1049 = fmul double 2.000000e+00, %1044
  %1050 = fadd double %1048, %1049
  %1051 = fmul double %1050, %978
  %1052 = fadd double %1051, %1045
  %1053 = fmul double -2.000000e+00, %984
  %1054 = fmul double %1053, %1052
  %1055 = sext i32 %916 to i64
  %1056 = getelementptr inbounds %class.Vector* %269, i64 %1055
  %1057 = fmul double %1054, %922
  %1058 = fmul double %1057, %922
  %1059 = fadd double %virial_xx.2, %1058
  %1060 = fmul double %1057, %927
  %1061 = fadd double %virial_xy.2, %1060
  %1062 = fmul double %1057, %933
  %1063 = fadd double %virial_xz.2, %1062
  %1064 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1065 = load double* %1064, align 8
  %1066 = fadd double %1065, %1057
  store double %1066, double* %1064, align 8
  %1067 = getelementptr inbounds %class.Vector* %1056, i32 0, i32 0
  %1068 = load double* %1067, align 8
  %1069 = fsub double %1068, %1057
  store double %1069, double* %1067, align 8
  %1070 = fmul double %1054, %927
  %1071 = fmul double %1070, %927
  %1072 = fadd double %virial_yy.2, %1071
  %1073 = fmul double %1070, %933
  %1074 = fadd double %virial_yz.2, %1073
  %1075 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1076 = load double* %1075, align 8
  %1077 = fadd double %1076, %1070
  store double %1077, double* %1075, align 8
  %1078 = getelementptr inbounds %class.Vector* %1056, i32 0, i32 1
  %1079 = load double* %1078, align 8
  %1080 = fsub double %1079, %1070
  store double %1080, double* %1078, align 8
  %1081 = fmul double %1054, %933
  %1082 = fmul double %1081, %933
  %1083 = fadd double %virial_zz.2, %1082
  %1084 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1085 = load double* %1084, align 8
  %1086 = fadd double %1085, %1081
  store double %1086, double* %1084, align 8
  %1087 = getelementptr inbounds %class.Vector* %1056, i32 0, i32 2
  %1088 = load double* %1087, align 8
  %1089 = fsub double %1088, %1081
  store double %1089, double* %1087, align 8
  br label %1090

; <label>:1090                                    ; preds = %913
  %1091 = add nsw i32 %k18.2, 1
  br label %911

; <label>:1092                                    ; preds = %911
  br label %1093

; <label>:1093                                    ; preds = %1092, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1092 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1092 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1092 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1092 ], [ %491, %488 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %339 ], [ %virial_zz.2, %1092 ], [ %virial_zz.0, %488 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %339 ], [ %virial_yz.2, %1092 ], [ %virial_yz.0, %488 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %339 ], [ %virial_yy.2, %1092 ], [ %virial_yy.0, %488 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %339 ], [ %virial_xz.2, %1092 ], [ %virial_xz.0, %488 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %339 ], [ %virial_xy.2, %1092 ], [ %virial_xy.0, %488 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %339 ], [ %virial_xx.2, %1092 ], [ %virial_xx.0, %488 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %339 ], [ %electEnergy.2, %1092 ], [ %electEnergy.0, %488 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %339 ], [ %vdwEnergy.2, %1092 ], [ %vdwEnergy.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %721, %1092 ], [ %exclChecksum.0, %488 ]
  %1094 = add nsw i32 %i.2, 1
  br label %283

; <label>:1095                                    ; preds = %283
  %1096 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1097 = icmp ne i32* %50, %1096
  br i1 %1097, label %1098, label %1103

; <label>:1098                                    ; preds = %1095
  %1099 = icmp eq i32* %50, null
  br i1 %1099, label %1102, label %1100

; <label>:1100                                    ; preds = %1098
  %1101 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1101) #8
  br label %1102

; <label>:1102                                    ; preds = %1100, %1098
  br label %1103

; <label>:1103                                    ; preds = %1102, %1095
  %1104 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1105 = icmp ne i32* %64, %1104
  br i1 %1105, label %1106, label %1111

; <label>:1106                                    ; preds = %1103
  %1107 = icmp eq i32* %64, null
  br i1 %1107, label %1110, label %1108

; <label>:1108                                    ; preds = %1106
  %1109 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1109) #8
  br label %1110

; <label>:1110                                    ; preds = %1108, %1106
  br label %1111

; <label>:1111                                    ; preds = %1110, %1103
  %1112 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1113 = icmp ne i32* %78, %1112
  br i1 %1113, label %1114, label %1119

; <label>:1114                                    ; preds = %1111
  %1115 = icmp eq i32* %78, null
  br i1 %1115, label %1118, label %1116

; <label>:1116                                    ; preds = %1114
  %1117 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1117) #8
  br label %1118

; <label>:1118                                    ; preds = %1116, %1114
  br label %1119

; <label>:1119                                    ; preds = %1118, %1111
  %1120 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1121 = icmp ne i32* %207, %1120
  br i1 %1121, label %1122, label %1127

; <label>:1122                                    ; preds = %1119
  %1123 = icmp eq i32* %207, null
  br i1 %1123, label %1126, label %1124

; <label>:1124                                    ; preds = %1122
  %1125 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1125) #8
  br label %1126

; <label>:1126                                    ; preds = %1124, %1122
  br label %1127

; <label>:1127                                    ; preds = %1126, %1119
  %1128 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1129 = icmp ne i32* %221, %1128
  br i1 %1129, label %1130, label %1135

; <label>:1130                                    ; preds = %1127
  %1131 = icmp eq i32* %221, null
  br i1 %1131, label %1134, label %1132

; <label>:1132                                    ; preds = %1130
  %1133 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1133) #8
  br label %1134

; <label>:1134                                    ; preds = %1132, %1130
  br label %1135

; <label>:1135                                    ; preds = %1134, %1127
  %1136 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1137 = icmp ne i32* %235, %1136
  br i1 %1137, label %1138, label %1143

; <label>:1138                                    ; preds = %1135
  %1139 = icmp eq i32* %235, null
  br i1 %1139, label %1142, label %1140

; <label>:1140                                    ; preds = %1138
  %1141 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1141) #8
  br label %1142

; <label>:1142                                    ; preds = %1140, %1138
  br label %1143

; <label>:1143                                    ; preds = %1142, %1135
  %1144 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1145 = icmp ne i32* %249, %1144
  br i1 %1145, label %1146, label %1151

; <label>:1146                                    ; preds = %1143
  %1147 = icmp eq i32* %249, null
  br i1 %1147, label %1150, label %1148

; <label>:1148                                    ; preds = %1146
  %1149 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1149) #8
  br label %1150

; <label>:1150                                    ; preds = %1148, %1146
  br label %1151

; <label>:1151                                    ; preds = %1150, %1143
  %1152 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1153 = icmp ne i32* %263, %1152
  br i1 %1153, label %1154, label %1159

; <label>:1154                                    ; preds = %1151
  %1155 = icmp eq i32* %263, null
  br i1 %1155, label %1158, label %1156

; <label>:1156                                    ; preds = %1154
  %1157 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1157) #8
  br label %1158

; <label>:1158                                    ; preds = %1156, %1154
  br label %1159

; <label>:1159                                    ; preds = %1158, %1151
  %1160 = sitofp i32 %exclChecksum.0 to double
  %1161 = getelementptr inbounds double* %6, i64 22
  %1162 = load double* %1161, align 8
  %1163 = fadd double %1162, %1160
  store double %1163, double* %1161, align 8
  %1164 = getelementptr inbounds double* %6, i64 2
  %1165 = load double* %1164, align 8
  %1166 = fadd double %1165, %vdwEnergy.0
  store double %1166, double* %1164, align 8
  %1167 = getelementptr inbounds double* %6, i64 0
  %1168 = load double* %1167, align 8
  %1169 = fadd double %1168, %electEnergy.0
  store double %1169, double* %1167, align 8
  %1170 = getelementptr inbounds double* %6, i64 3
  %1171 = load double* %1170, align 8
  %1172 = fadd double %1171, %virial_xx.0
  store double %1172, double* %1170, align 8
  %1173 = getelementptr inbounds double* %6, i64 4
  %1174 = load double* %1173, align 8
  %1175 = fadd double %1174, %virial_xy.0
  store double %1175, double* %1173, align 8
  %1176 = getelementptr inbounds double* %6, i64 5
  %1177 = load double* %1176, align 8
  %1178 = fadd double %1177, %virial_xz.0
  store double %1178, double* %1176, align 8
  %1179 = getelementptr inbounds double* %6, i64 6
  %1180 = load double* %1179, align 8
  %1181 = fadd double %1180, %virial_xy.0
  store double %1181, double* %1179, align 8
  %1182 = getelementptr inbounds double* %6, i64 7
  %1183 = load double* %1182, align 8
  %1184 = fadd double %1183, %virial_yy.0
  store double %1184, double* %1182, align 8
  %1185 = getelementptr inbounds double* %6, i64 8
  %1186 = load double* %1185, align 8
  %1187 = fadd double %1186, %virial_yz.0
  store double %1187, double* %1185, align 8
  %1188 = getelementptr inbounds double* %6, i64 9
  %1189 = load double* %1188, align 8
  %1190 = fadd double %1189, %virial_xz.0
  store double %1190, double* %1188, align 8
  %1191 = getelementptr inbounds double* %6, i64 10
  %1192 = load double* %1191, align 8
  %1193 = fadd double %1192, %virial_yz.0
  store double %1193, double* %1191, align 8
  %1194 = getelementptr inbounds double* %6, i64 11
  %1195 = load double* %1194, align 8
  %1196 = fadd double %1195, %virial_zz.0
  store double %1196, double* %1194, align 8
  br label %1197

; <label>:1197                                    ; preds = %1159, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil13calc_self_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.87, align 4
  %r2f28 = alloca %union.anon.88, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1218

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1218

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1120, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1120 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1120 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1120 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1120 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1120 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1120 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1121, %1120 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_zz.3, %1120 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yz.3, %1120 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yy.3, %1120 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xz.3, %1120 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xy.3, %1120 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xx.3, %1120 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1120 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1122

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1120

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %533 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %534 = add nsw i32 %533, 1
  %535 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %536 = load i32* %535, align 4
  %537 = lshr i32 %536, 28
  %538 = mul nsw i32 %534, %537
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds double* %532, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %542 = load float* %541, align 4
  %543 = fpext float %542 to double
  %544 = fmul double 3.320636e+02, %543
  %545 = fmul double %544, %15
  %546 = fmul double %545, %9
  %547 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 4194303
  %550 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %549)
  %551 = zext i16 %550 to i32
  %552 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %551)
  %553 = icmp ne i32 %531, 0
  br i1 %553, label %554, label %616

; <label>:554                                     ; preds = %529
  br label %555

; <label>:555                                     ; preds = %613, %554
  %pli3.0 = phi i32* [ %202, %554 ], [ %pli3.2, %613 ]
  %plin.0 = phi i32* [ %216, %554 ], [ %plin.2, %613 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %554 ], [ %614, %613 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %554 ], [ %exclChecksum.3, %613 ]
  %556 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %556, label %557, label %615

; <label>:557                                     ; preds = %555
  %558 = sext i32 %k.0 to i64
  %559 = getelementptr inbounds i32* %188, i64 %558
  %560 = load i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %36, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 0
  %564 = getelementptr inbounds %class.Vector* %563, i32 0, i32 0
  %565 = load double* %564, align 8
  %566 = fsub double %287, %565
  %567 = fmul double %566, %566
  %568 = sext i32 %560 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %36, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 1
  %572 = load double* %571, align 8
  %573 = fsub double %290, %572
  %574 = fmul double %573, %573
  %575 = fadd double %567, %574
  %576 = sext i32 %560 to i64
  %577 = getelementptr inbounds %struct.CompAtom* %36, i64 %576
  %578 = getelementptr inbounds %struct.CompAtom* %577, i32 0, i32 0
  %579 = getelementptr inbounds %class.Vector* %578, i32 0, i32 2
  %580 = load double* %579, align 8
  %581 = fsub double %293, %580
  %582 = fmul double %581, %581
  %583 = fadd double %575, %582
  %584 = sext i32 %560 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %36, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 2
  %587 = load i32* %586, align 4
  %588 = lshr i32 %587, 26
  %589 = and i32 %588, 1
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %612, label %591

; <label>:591                                     ; preds = %557
  %592 = fcmp ole double %583, %7
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %591
  %594 = fcmp ole double %583, %21
  br i1 %594, label %595, label %598

; <label>:595                                     ; preds = %593
  %596 = add nsw i32 %exclChecksum.1, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %612, label %598

; <label>:598                                     ; preds = %595, %593
  %exclChecksum.2 = phi i32 [ %596, %595 ], [ %exclChecksum.1, %593 ]
  %599 = sext i32 %560 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %36, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  %604 = icmp sge i32 %603, %277
  br i1 %604, label %605, label %609

; <label>:605                                     ; preds = %598
  %606 = icmp sle i32 %603, %279
  br i1 %606, label %607, label %609

; <label>:607                                     ; preds = %605
  %608 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %560, i32* %pli3.0, align 4
  br label %611

; <label>:609                                     ; preds = %605, %598
  %610 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %560, i32* %plin.0, align 4
  br label %611

; <label>:611                                     ; preds = %609, %607
  %pli3.1 = phi i32* [ %608, %607 ], [ %pli3.0, %609 ]
  %plin.1 = phi i32* [ %plin.0, %607 ], [ %610, %609 ]
  br label %612

; <label>:612                                     ; preds = %611, %595, %591, %557
  %pli3.2 = phi i32* [ %pli3.0, %557 ], [ %pli3.0, %595 ], [ %pli3.1, %611 ], [ %pli3.0, %591 ]
  %plin.2 = phi i32* [ %plin.0, %557 ], [ %plin.0, %595 ], [ %plin.1, %611 ], [ %plin.0, %591 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %557 ], [ %596, %595 ], [ %exclChecksum.2, %611 ], [ %exclChecksum.1, %591 ]
  br label %613

; <label>:613                                     ; preds = %612
  %614 = add nsw i32 %k.0, 1
  br label %555

; <label>:615                                     ; preds = %555
  br label %695

; <label>:616                                     ; preds = %529
  %617 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %617, label %618, label %694

; <label>:618                                     ; preds = %616
  %619 = sext i32 %pairlistoffset.1 to i64
  %620 = getelementptr inbounds i32* %188, i64 %619
  %621 = load i32* %620, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %36, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = sext i32 %621 to i64
  %628 = getelementptr inbounds %struct.CompAtom* %36, i64 %627
  %629 = getelementptr inbounds %struct.CompAtom* %628, i32 0, i32 0
  %630 = getelementptr inbounds %class.Vector* %629, i32 0, i32 1
  %631 = load double* %630, align 8
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 2
  %636 = load double* %635, align 8
  %637 = sext i32 %621 to i64
  %638 = getelementptr inbounds %struct.CompAtom* %36, i64 %637
  %639 = getelementptr inbounds %struct.CompAtom* %638, i32 0, i32 2
  %640 = load i32* %639, align 4
  %641 = and i32 %640, 4194303
  br label %642

; <label>:642                                     ; preds = %687, %618
  %pli3.3 = phi i32* [ %202, %618 ], [ %pli3.5, %687 ]
  %plin.3 = phi i32* [ %216, %618 ], [ %plin.5, %687 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %618 ], [ %645, %687 ]
  %j210.0 = phi i32 [ %621, %618 ], [ %648, %687 ]
  %p_j_x11.0 = phi double [ %626, %618 ], [ %655, %687 ]
  %p_j_y12.0 = phi double [ %631, %618 ], [ %663, %687 ]
  %p_j_z13.0 = phi double [ %636, %618 ], [ %671, %687 ]
  %atom214.0 = phi i32 [ %641, %618 ], [ %692, %687 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %618 ], [ %exclChecksum.6, %687 ]
  %643 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %643, label %644, label %693

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %k9.0, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32* %188, i64 %646
  %648 = load i32* %647, align 4
  %649 = fsub double %287, %p_j_x11.0
  %650 = fmul double %649, %649
  %651 = sext i32 %648 to i64
  %652 = getelementptr inbounds %struct.CompAtom* %36, i64 %651
  %653 = getelementptr inbounds %struct.CompAtom* %652, i32 0, i32 0
  %654 = getelementptr inbounds %class.Vector* %653, i32 0, i32 0
  %655 = load double* %654, align 8
  %656 = fsub double %290, %p_j_y12.0
  %657 = fmul double %656, %656
  %658 = fadd double %650, %657
  %659 = sext i32 %648 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %36, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 0
  %662 = getelementptr inbounds %class.Vector* %661, i32 0, i32 1
  %663 = load double* %662, align 8
  %664 = fsub double %293, %p_j_z13.0
  %665 = fmul double %664, %664
  %666 = fadd double %658, %665
  %667 = sext i32 %648 to i64
  %668 = getelementptr inbounds %struct.CompAtom* %36, i64 %667
  %669 = getelementptr inbounds %struct.CompAtom* %668, i32 0, i32 0
  %670 = getelementptr inbounds %class.Vector* %669, i32 0, i32 2
  %671 = load double* %670, align 8
  %672 = fcmp ole double %666, %7
  br i1 %672, label %673, label %687

; <label>:673                                     ; preds = %644
  %674 = fcmp ole double %666, %21
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = add nsw i32 %exclChecksum.4, 1
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %687, label %678

; <label>:678                                     ; preds = %675, %673
  %exclChecksum.5 = phi i32 [ %676, %675 ], [ %exclChecksum.4, %673 ]
  %679 = icmp sge i32 %atom214.0, %277
  br i1 %679, label %680, label %684

; <label>:680                                     ; preds = %678
  %681 = icmp sle i32 %atom214.0, %279
  br i1 %681, label %682, label %684

; <label>:682                                     ; preds = %680
  %683 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %686

; <label>:684                                     ; preds = %680, %678
  %685 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %686

; <label>:686                                     ; preds = %684, %682
  %pli3.4 = phi i32* [ %683, %682 ], [ %pli3.3, %684 ]
  %plin.4 = phi i32* [ %plin.3, %682 ], [ %685, %684 ]
  br label %687

; <label>:687                                     ; preds = %686, %675, %644
  %pli3.5 = phi i32* [ %pli3.3, %675 ], [ %pli3.4, %686 ], [ %pli3.3, %644 ]
  %plin.5 = phi i32* [ %plin.3, %675 ], [ %plin.4, %686 ], [ %plin.3, %644 ]
  %exclChecksum.6 = phi i32 [ %676, %675 ], [ %exclChecksum.5, %686 ], [ %exclChecksum.4, %644 ]
  %688 = sext i32 %648 to i64
  %689 = getelementptr inbounds %struct.CompAtom* %36, i64 %688
  %690 = getelementptr inbounds %struct.CompAtom* %689, i32 0, i32 2
  %691 = load i32* %690, align 4
  %692 = and i32 %691, 4194303
  br label %642

; <label>:693                                     ; preds = %642
  br label %694

; <label>:694                                     ; preds = %693, %616
  %pli3.6 = phi i32* [ %pli3.3, %693 ], [ %202, %616 ]
  %plin.6 = phi i32* [ %plin.3, %693 ], [ %216, %616 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %693 ], [ %exclChecksum.0, %616 ]
  br label %695

; <label>:695                                     ; preds = %694, %615
  %pli3.7 = phi i32* [ %pli3.0, %615 ], [ %pli3.6, %694 ]
  %plin.7 = phi i32* [ %plin.0, %615 ], [ %plin.6, %694 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %615 ], [ %exclChecksum.7, %694 ]
  %696 = ptrtoint i32* %pli3.7 to i64
  %697 = ptrtoint i32* %202 to i64
  %698 = sub i64 %696, %697
  %699 = sdiv exact i64 %698, 4
  %700 = trunc i64 %699 to i32
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %709

; <label>:702                                     ; preds = %695
  %703 = sub nsw i32 %700, 1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i32* %202, i64 %704
  %706 = load i32* %705, align 4
  %707 = sext i32 %700 to i64
  %708 = getelementptr inbounds i32* %202, i64 %707
  store i32 %706, i32* %708, align 4
  br label %709

; <label>:709                                     ; preds = %702, %695
  br label %710

; <label>:710                                     ; preds = %721, %709
  %plix.0 = phi i32* [ %230, %709 ], [ %719, %721 ]
  %pln.0 = phi i32* [ %216, %709 ], [ %722, %721 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %709 ], [ %720, %721 ]
  %711 = icmp ult i32* %pln.0, %plin.7
  br i1 %711, label %712, label %715

; <label>:712                                     ; preds = %710
  %713 = load i32* %pln.0, align 4
  %714 = icmp slt i32 %713, %j_hgroup.2
  br label %715

; <label>:715                                     ; preds = %712, %710
  %716 = phi i1 [ false, %710 ], [ %714, %712 ]
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %715
  %718 = load i32* %pln.0, align 4
  %719 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %718, i32* %plix.0, align 4
  %720 = add nsw i32 %exclChecksum.9, -1
  br label %721

; <label>:721                                     ; preds = %717
  %722 = getelementptr inbounds i32* %pln.0, i32 1
  br label %710

; <label>:723                                     ; preds = %715
  br label %724

; <label>:724                                     ; preds = %739, %723
  %plix.1 = phi i32* [ %plix.0, %723 ], [ %737, %739 ]
  %k17.0 = phi i32 [ 0, %723 ], [ %740, %739 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %723 ], [ %738, %739 ]
  %725 = icmp slt i32 %k17.0, %700
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = sext i32 %k17.0 to i64
  %728 = getelementptr inbounds i32* %202, i64 %727
  %729 = load i32* %728, align 4
  %730 = icmp slt i32 %729, %j_hgroup.2
  br label %731

; <label>:731                                     ; preds = %726, %724
  %732 = phi i1 [ false, %724 ], [ %730, %726 ]
  br i1 %732, label %733, label %741

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %202, i64 %734
  %736 = load i32* %735, align 4
  %737 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %736, i32* %plix.1, align 4
  %738 = add nsw i32 %exclChecksum.10, -1
  br label %739

; <label>:739                                     ; preds = %733
  %740 = add nsw i32 %k17.0, 1
  br label %724

; <label>:741                                     ; preds = %731
  br label %742

; <label>:742                                     ; preds = %764, %741
  %plin.8 = phi i32* [ %plin.7, %741 ], [ %plin.9, %764 ]
  %plix.2 = phi i32* [ %plix.1, %741 ], [ %plix.3, %764 ]
  %plim.0 = phi i32* [ %244, %741 ], [ %plim.1, %764 ]
  %k17.1 = phi i32 [ %k17.0, %741 ], [ %765, %764 ]
  %743 = icmp slt i32 %k17.1, %700
  br i1 %743, label %744, label %766

; <label>:744                                     ; preds = %742
  %745 = sext i32 %k17.1 to i64
  %746 = getelementptr inbounds i32* %202, i64 %745
  %747 = load i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CompAtom* %36, i64 %748
  %750 = getelementptr inbounds %struct.CompAtom* %749, i32 0, i32 2
  %751 = load i32* %750, align 4
  %752 = and i32 %751, 4194303
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8* %284, i64 %753
  %755 = load i8* %754, align 1
  %756 = sext i8 %755 to i32
  switch i32 %756, label %763 [
    i32 0, label %757
    i32 1, label %759
    i32 2, label %761
  ]

; <label>:757                                     ; preds = %744
  %758 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %747, i32* %plin.8, align 4
  br label %763

; <label>:759                                     ; preds = %744
  %760 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %747, i32* %plix.2, align 4
  br label %763

; <label>:761                                     ; preds = %744
  %762 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %747, i32* %plim.0, align 4
  br label %763

; <label>:763                                     ; preds = %761, %759, %757, %744
  %plin.9 = phi i32* [ %plin.8, %744 ], [ %plin.8, %761 ], [ %plin.8, %759 ], [ %758, %757 ]
  %plix.3 = phi i32* [ %plix.2, %744 ], [ %plix.2, %761 ], [ %760, %759 ], [ %plix.2, %757 ]
  %plim.1 = phi i32* [ %plim.0, %744 ], [ %762, %761 ], [ %plim.0, %759 ], [ %plim.0, %757 ]
  br label %764

; <label>:764                                     ; preds = %763
  %765 = add nsw i32 %k17.1, 1
  br label %742

; <label>:766                                     ; preds = %742
  %767 = ptrtoint i32* %plix.2 to i64
  %768 = ptrtoint i32* %230 to i64
  %769 = sub i64 %767, %768
  %770 = sdiv exact i64 %769, 4
  %771 = sext i32 %exclChecksum.10 to i64
  %772 = add nsw i64 %771, %770
  %773 = trunc i64 %772 to i32
  %774 = ptrtoint i32* %plim.0 to i64
  %775 = ptrtoint i32* %244 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %773 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plin.8 to i64
  %782 = ptrtoint i32* %pln.0 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = trunc i64 %784 to i32
  br label %786

; <label>:786                                     ; preds = %946, %766
  %k17.2 = phi i32 [ 0, %766 ], [ %947, %946 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %766 ], [ %939, %946 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %766 ], [ %930, %946 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %766 ], [ %928, %946 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %766 ], [ %919, %946 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %766 ], [ %917, %946 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %766 ], [ %915, %946 ]
  %787 = icmp slt i32 %k17.2, %785
  br i1 %787, label %788, label %948

; <label>:788                                     ; preds = %786
  %789 = sext i32 %k17.2 to i64
  %790 = getelementptr inbounds i32* %pln.0, i64 %789
  %791 = load i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds %struct.CompAtom* %36, i64 %792
  %794 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 0
  %796 = load double* %795, align 8
  %797 = fsub double %287, %796
  %798 = fmul double %797, %797
  %799 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %800 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %801 = load double* %800, align 8
  %802 = fsub double %290, %801
  %803 = fmul double %802, %802
  %804 = fadd double %798, %803
  %805 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %806 = getelementptr inbounds %class.Vector* %805, i32 0, i32 2
  %807 = load double* %806, align 8
  %808 = fsub double %293, %807
  %809 = fmul double %808, %808
  %810 = fadd double %804, %809
  %811 = fptrunc double %810 to float
  %812 = bitcast %union.anon.87* %r2f to float*
  store float %811, float* %812, align 4
  %813 = bitcast %union.anon.87* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = ashr i32 %814, 17
  %816 = add nsw i32 %815, %24
  %817 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %818 = load i32* %817, align 4
  %819 = and i32 %818, 4194303
  %820 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %819)
  %821 = zext i16 %820 to i32
  %822 = mul nsw i32 2, %821
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %823
  %825 = mul nsw i32 16, %816
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds double* %14, i64 %826
  %828 = getelementptr inbounds double* %827, i64 0
  %829 = load double* %828, align 8
  %830 = mul nsw i32 16, %816
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double* %14, i64 %831
  %833 = getelementptr inbounds double* %832, i64 4
  %834 = getelementptr inbounds double* %833, i64 0
  %835 = load double* %834, align 8
  %836 = mul nsw i32 16, %816
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds double* %14, i64 %837
  %839 = getelementptr inbounds double* %838, i64 8
  %840 = getelementptr inbounds double* %839, i64 0
  %841 = load double* %840, align 8
  %842 = bitcast %union.anon.87* %r2f to i32*
  %843 = load i32* %842, align 4
  %844 = and i32 %843, -131072
  store i32 %844, i32* %842, align 4
  %845 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 1
  %846 = load float* %845, align 4
  %847 = fpext float %846 to double
  %848 = fmul double %546, %847
  %849 = bitcast %union.anon.87* %r2f to float*
  %850 = load float* %849, align 4
  %851 = fpext float %850 to double
  %852 = fsub double %810, %851
  %853 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %854 = load i32* %853, align 4
  %855 = lshr i32 %854, 28
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds double* %540, i64 %856
  %858 = load double* %857, align 8
  %859 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 0
  %860 = load double* %859, align 8
  %861 = fmul double %15, %860
  %862 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 1
  %863 = load double* %862, align 8
  %864 = fmul double %15, %863
  %865 = fmul double %861, %829
  %866 = fmul double %864, %835
  %867 = fsub double %865, %866
  %868 = getelementptr inbounds double* %827, i64 3
  %869 = load double* %868, align 8
  %870 = fmul double %861, %869
  %871 = getelementptr inbounds double* %833, i64 3
  %872 = load double* %871, align 8
  %873 = fmul double %864, %872
  %874 = fsub double %870, %873
  %875 = getelementptr inbounds double* %827, i64 2
  %876 = load double* %875, align 8
  %877 = fmul double %861, %876
  %878 = getelementptr inbounds double* %833, i64 2
  %879 = load double* %878, align 8
  %880 = fmul double %864, %879
  %881 = fsub double %877, %880
  %882 = getelementptr inbounds double* %827, i64 1
  %883 = load double* %882, align 8
  %884 = fmul double %861, %883
  %885 = getelementptr inbounds double* %833, i64 1
  %886 = load double* %885, align 8
  %887 = fmul double %864, %886
  %888 = fsub double %884, %887
  %889 = fmul double %841, %848
  %890 = getelementptr inbounds double* %839, i64 3
  %891 = load double* %890, align 8
  %892 = fmul double %848, %891
  %893 = getelementptr inbounds double* %839, i64 2
  %894 = load double* %893, align 8
  %895 = fmul double %848, %894
  %896 = getelementptr inbounds double* %839, i64 1
  %897 = load double* %896, align 8
  %898 = fmul double %848, %897
  %899 = fadd double %892, %874
  %900 = fadd double %895, %881
  %901 = fadd double %898, %888
  %902 = fadd double %889, %867
  %903 = fmul double 3.000000e+00, %852
  %904 = fmul double %903, %899
  %905 = fmul double 2.000000e+00, %900
  %906 = fadd double %904, %905
  %907 = fmul double %906, %852
  %908 = fadd double %907, %901
  %909 = fmul double -2.000000e+00, %858
  %910 = fmul double %909, %908
  %911 = sext i32 %791 to i64
  %912 = getelementptr inbounds %class.Vector* %250, i64 %911
  %913 = fmul double %910, %797
  %914 = fmul double %913, %797
  %915 = fadd double %virial_xx.1, %914
  %916 = fmul double %913, %802
  %917 = fadd double %virial_xy.1, %916
  %918 = fmul double %913, %808
  %919 = fadd double %virial_xz.1, %918
  %920 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %921 = load double* %920, align 8
  %922 = fadd double %921, %913
  store double %922, double* %920, align 8
  %923 = getelementptr inbounds %class.Vector* %912, i32 0, i32 0
  %924 = load double* %923, align 8
  %925 = fsub double %924, %913
  store double %925, double* %923, align 8
  %926 = fmul double %910, %802
  %927 = fmul double %926, %802
  %928 = fadd double %virial_yy.1, %927
  %929 = fmul double %926, %808
  %930 = fadd double %virial_yz.1, %929
  %931 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %932 = load double* %931, align 8
  %933 = fadd double %932, %926
  store double %933, double* %931, align 8
  %934 = getelementptr inbounds %class.Vector* %912, i32 0, i32 1
  %935 = load double* %934, align 8
  %936 = fsub double %935, %926
  store double %936, double* %934, align 8
  %937 = fmul double %910, %808
  %938 = fmul double %937, %808
  %939 = fadd double %virial_zz.1, %938
  %940 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %941 = load double* %940, align 8
  %942 = fadd double %941, %937
  store double %942, double* %940, align 8
  %943 = getelementptr inbounds %class.Vector* %912, i32 0, i32 2
  %944 = load double* %943, align 8
  %945 = fsub double %944, %937
  store double %945, double* %943, align 8
  br label %946

; <label>:946                                     ; preds = %788
  %947 = add nsw i32 %k17.2, 1
  br label %786

; <label>:948                                     ; preds = %786
  %949 = ptrtoint i32* %plim.0 to i64
  %950 = ptrtoint i32* %244 to i64
  %951 = sub i64 %949, %950
  %952 = sdiv exact i64 %951, 4
  %953 = trunc i64 %952 to i32
  br label %954

; <label>:954                                     ; preds = %1117, %948
  %k17.3 = phi i32 [ 0, %948 ], [ %1118, %1117 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %948 ], [ %1110, %1117 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %948 ], [ %1101, %1117 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %948 ], [ %1099, %1117 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %948 ], [ %1090, %1117 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %948 ], [ %1088, %1117 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %948 ], [ %1086, %1117 ]
  %955 = icmp slt i32 %k17.3, %953
  br i1 %955, label %956, label %1119

; <label>:956                                     ; preds = %954
  %957 = sext i32 %k17.3 to i64
  %958 = getelementptr inbounds i32* %244, i64 %957
  %959 = load i32* %958, align 4
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds %struct.CompAtom* %36, i64 %960
  %962 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 0
  %963 = getelementptr inbounds %class.Vector* %962, i32 0, i32 0
  %964 = load double* %963, align 8
  %965 = fsub double %287, %964
  %966 = fmul double %965, %965
  %967 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 0
  %968 = getelementptr inbounds %class.Vector* %967, i32 0, i32 1
  %969 = load double* %968, align 8
  %970 = fsub double %290, %969
  %971 = fmul double %970, %970
  %972 = fadd double %966, %971
  %973 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 0
  %974 = getelementptr inbounds %class.Vector* %973, i32 0, i32 2
  %975 = load double* %974, align 8
  %976 = fsub double %293, %975
  %977 = fmul double %976, %976
  %978 = fadd double %972, %977
  %979 = fptrunc double %978 to float
  %980 = bitcast %union.anon.88* %r2f28 to float*
  store float %979, float* %980, align 4
  %981 = bitcast %union.anon.88* %r2f28 to i32*
  %982 = load i32* %981, align 4
  %983 = ashr i32 %982, 17
  %984 = add nsw i32 %983, %24
  %985 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 2
  %986 = load i32* %985, align 4
  %987 = and i32 %986, 4194303
  %988 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %987)
  %989 = zext i16 %988 to i32
  %990 = mul nsw i32 2, %989
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %991
  %993 = getelementptr inbounds %"struct.LJTable::TableEntry"* %992, i64 1
  %994 = mul nsw i32 16, %984
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds double* %14, i64 %995
  %997 = getelementptr inbounds double* %996, i64 0
  %998 = load double* %997, align 8
  %999 = mul nsw i32 16, %984
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds double* %14, i64 %1000
  %1002 = getelementptr inbounds double* %1001, i64 4
  %1003 = getelementptr inbounds double* %1002, i64 0
  %1004 = load double* %1003, align 8
  %1005 = mul nsw i32 16, %984
  %1006 = sext i32 %1005 to i64
  %1007 = getelementptr inbounds double* %14, i64 %1006
  %1008 = getelementptr inbounds double* %1007, i64 8
  %1009 = getelementptr inbounds double* %1008, i64 0
  %1010 = load double* %1009, align 8
  %1011 = bitcast %union.anon.88* %r2f28 to i32*
  %1012 = load i32* %1011, align 4
  %1013 = and i32 %1012, -131072
  store i32 %1013, i32* %1011, align 4
  %1014 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 1
  %1015 = load float* %1014, align 4
  %1016 = fpext float %1015 to double
  %1017 = fmul double %546, %1016
  %1018 = bitcast %union.anon.88* %r2f28 to float*
  %1019 = load float* %1018, align 4
  %1020 = fpext float %1019 to double
  %1021 = fsub double %978, %1020
  %1022 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 2
  %1023 = load i32* %1022, align 4
  %1024 = lshr i32 %1023, 28
  %1025 = zext i32 %1024 to i64
  %1026 = getelementptr inbounds double* %540, i64 %1025
  %1027 = load double* %1026, align 8
  %1028 = getelementptr inbounds %"struct.LJTable::TableEntry"* %993, i32 0, i32 0
  %1029 = load double* %1028, align 8
  %1030 = fmul double %15, %1029
  %1031 = getelementptr inbounds %"struct.LJTable::TableEntry"* %993, i32 0, i32 1
  %1032 = load double* %1031, align 8
  %1033 = fmul double %15, %1032
  %1034 = fmul double %1030, %998
  %1035 = fmul double %1033, %1004
  %1036 = fsub double %1034, %1035
  %1037 = getelementptr inbounds double* %996, i64 3
  %1038 = load double* %1037, align 8
  %1039 = fmul double %1030, %1038
  %1040 = getelementptr inbounds double* %1002, i64 3
  %1041 = load double* %1040, align 8
  %1042 = fmul double %1033, %1041
  %1043 = fsub double %1039, %1042
  %1044 = getelementptr inbounds double* %996, i64 2
  %1045 = load double* %1044, align 8
  %1046 = fmul double %1030, %1045
  %1047 = getelementptr inbounds double* %1002, i64 2
  %1048 = load double* %1047, align 8
  %1049 = fmul double %1033, %1048
  %1050 = fsub double %1046, %1049
  %1051 = getelementptr inbounds double* %996, i64 1
  %1052 = load double* %1051, align 8
  %1053 = fmul double %1030, %1052
  %1054 = getelementptr inbounds double* %1002, i64 1
  %1055 = load double* %1054, align 8
  %1056 = fmul double %1033, %1055
  %1057 = fsub double %1053, %1056
  %1058 = fsub double 1.000000e+00, %17
  %1059 = fmul double %1058, %1017
  %1060 = fmul double %1010, %1059
  %1061 = getelementptr inbounds double* %1008, i64 3
  %1062 = load double* %1061, align 8
  %1063 = fmul double %1059, %1062
  %1064 = getelementptr inbounds double* %1008, i64 2
  %1065 = load double* %1064, align 8
  %1066 = fmul double %1059, %1065
  %1067 = getelementptr inbounds double* %1008, i64 1
  %1068 = load double* %1067, align 8
  %1069 = fmul double %1059, %1068
  %1070 = fadd double %1063, %1043
  %1071 = fadd double %1066, %1050
  %1072 = fadd double %1069, %1057
  %1073 = fadd double %1060, %1036
  %1074 = fmul double 3.000000e+00, %1021
  %1075 = fmul double %1074, %1070
  %1076 = fmul double 2.000000e+00, %1071
  %1077 = fadd double %1075, %1076
  %1078 = fmul double %1077, %1021
  %1079 = fadd double %1078, %1072
  %1080 = fmul double -2.000000e+00, %1027
  %1081 = fmul double %1080, %1079
  %1082 = sext i32 %959 to i64
  %1083 = getelementptr inbounds %class.Vector* %250, i64 %1082
  %1084 = fmul double %1081, %965
  %1085 = fmul double %1084, %965
  %1086 = fadd double %virial_xx.2, %1085
  %1087 = fmul double %1084, %970
  %1088 = fadd double %virial_xy.2, %1087
  %1089 = fmul double %1084, %976
  %1090 = fadd double %virial_xz.2, %1089
  %1091 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1092 = load double* %1091, align 8
  %1093 = fadd double %1092, %1084
  store double %1093, double* %1091, align 8
  %1094 = getelementptr inbounds %class.Vector* %1083, i32 0, i32 0
  %1095 = load double* %1094, align 8
  %1096 = fsub double %1095, %1084
  store double %1096, double* %1094, align 8
  %1097 = fmul double %1081, %970
  %1098 = fmul double %1097, %970
  %1099 = fadd double %virial_yy.2, %1098
  %1100 = fmul double %1097, %976
  %1101 = fadd double %virial_yz.2, %1100
  %1102 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1103 = load double* %1102, align 8
  %1104 = fadd double %1103, %1097
  store double %1104, double* %1102, align 8
  %1105 = getelementptr inbounds %class.Vector* %1083, i32 0, i32 1
  %1106 = load double* %1105, align 8
  %1107 = fsub double %1106, %1097
  store double %1107, double* %1105, align 8
  %1108 = fmul double %1081, %976
  %1109 = fmul double %1108, %976
  %1110 = fadd double %virial_zz.2, %1109
  %1111 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1112 = load double* %1111, align 8
  %1113 = fadd double %1112, %1108
  store double %1113, double* %1111, align 8
  %1114 = getelementptr inbounds %class.Vector* %1083, i32 0, i32 2
  %1115 = load double* %1114, align 8
  %1116 = fsub double %1115, %1108
  store double %1116, double* %1114, align 8
  br label %1117

; <label>:1117                                    ; preds = %956
  %1118 = add nsw i32 %k17.3, 1
  br label %954

; <label>:1119                                    ; preds = %954
  br label %1120

; <label>:1120                                    ; preds = %1119, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1119 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1119 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1119 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1119 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1119 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1119 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1119 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %329 ], [ %virial_zz.2, %1119 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %329 ], [ %virial_yz.2, %1119 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %329 ], [ %virial_yy.2, %1119 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %329 ], [ %virial_xz.2, %1119 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %329 ], [ %virial_xy.2, %1119 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %329 ], [ %virial_xx.2, %1119 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %780, %1119 ]
  %1121 = add nsw i32 %i.1, 1
  br label %266

; <label>:1122                                    ; preds = %266
  %1123 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1124 = icmp ne i32* %50, %1123
  br i1 %1124, label %1125, label %1130

; <label>:1125                                    ; preds = %1122
  %1126 = icmp eq i32* %50, null
  br i1 %1126, label %1129, label %1127

; <label>:1127                                    ; preds = %1125
  %1128 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1128) #8
  br label %1129

; <label>:1129                                    ; preds = %1127, %1125
  br label %1130

; <label>:1130                                    ; preds = %1129, %1122
  %1131 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1132 = icmp ne i32* %64, %1131
  br i1 %1132, label %1133, label %1138

; <label>:1133                                    ; preds = %1130
  %1134 = icmp eq i32* %64, null
  br i1 %1134, label %1137, label %1135

; <label>:1135                                    ; preds = %1133
  %1136 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1136) #8
  br label %1137

; <label>:1137                                    ; preds = %1135, %1133
  br label %1138

; <label>:1138                                    ; preds = %1137, %1130
  %1139 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1140 = icmp ne i32* %78, %1139
  br i1 %1140, label %1141, label %1146

; <label>:1141                                    ; preds = %1138
  %1142 = icmp eq i32* %78, null
  br i1 %1142, label %1145, label %1143

; <label>:1143                                    ; preds = %1141
  %1144 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1144) #8
  br label %1145

; <label>:1145                                    ; preds = %1143, %1141
  br label %1146

; <label>:1146                                    ; preds = %1145, %1138
  %1147 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1148 = icmp ne i32* %188, %1147
  br i1 %1148, label %1149, label %1154

; <label>:1149                                    ; preds = %1146
  %1150 = icmp eq i32* %188, null
  br i1 %1150, label %1153, label %1151

; <label>:1151                                    ; preds = %1149
  %1152 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1152) #8
  br label %1153

; <label>:1153                                    ; preds = %1151, %1149
  br label %1154

; <label>:1154                                    ; preds = %1153, %1146
  %1155 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1156 = icmp ne i32* %202, %1155
  br i1 %1156, label %1157, label %1162

; <label>:1157                                    ; preds = %1154
  %1158 = icmp eq i32* %202, null
  br i1 %1158, label %1161, label %1159

; <label>:1159                                    ; preds = %1157
  %1160 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1160) #8
  br label %1161

; <label>:1161                                    ; preds = %1159, %1157
  br label %1162

; <label>:1162                                    ; preds = %1161, %1154
  %1163 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1164 = icmp ne i32* %216, %1163
  br i1 %1164, label %1165, label %1170

; <label>:1165                                    ; preds = %1162
  %1166 = icmp eq i32* %216, null
  br i1 %1166, label %1169, label %1167

; <label>:1167                                    ; preds = %1165
  %1168 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1168) #8
  br label %1169

; <label>:1169                                    ; preds = %1167, %1165
  br label %1170

; <label>:1170                                    ; preds = %1169, %1162
  %1171 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1172 = icmp ne i32* %230, %1171
  br i1 %1172, label %1173, label %1178

; <label>:1173                                    ; preds = %1170
  %1174 = icmp eq i32* %230, null
  br i1 %1174, label %1177, label %1175

; <label>:1175                                    ; preds = %1173
  %1176 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1176) #8
  br label %1177

; <label>:1177                                    ; preds = %1175, %1173
  br label %1178

; <label>:1178                                    ; preds = %1177, %1170
  %1179 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1180 = icmp ne i32* %244, %1179
  br i1 %1180, label %1181, label %1186

; <label>:1181                                    ; preds = %1178
  %1182 = icmp eq i32* %244, null
  br i1 %1182, label %1185, label %1183

; <label>:1183                                    ; preds = %1181
  %1184 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1184) #8
  br label %1185

; <label>:1185                                    ; preds = %1183, %1181
  br label %1186

; <label>:1186                                    ; preds = %1185, %1178
  %1187 = sitofp i32 %exclChecksum.0 to double
  %1188 = getelementptr inbounds double* %6, i64 22
  %1189 = load double* %1188, align 8
  %1190 = fadd double %1189, %1187
  store double %1190, double* %1188, align 8
  %1191 = getelementptr inbounds double* %6, i64 3
  %1192 = load double* %1191, align 8
  %1193 = fadd double %1192, %virial_xx.0
  store double %1193, double* %1191, align 8
  %1194 = getelementptr inbounds double* %6, i64 4
  %1195 = load double* %1194, align 8
  %1196 = fadd double %1195, %virial_xy.0
  store double %1196, double* %1194, align 8
  %1197 = getelementptr inbounds double* %6, i64 5
  %1198 = load double* %1197, align 8
  %1199 = fadd double %1198, %virial_xz.0
  store double %1199, double* %1197, align 8
  %1200 = getelementptr inbounds double* %6, i64 6
  %1201 = load double* %1200, align 8
  %1202 = fadd double %1201, %virial_xy.0
  store double %1202, double* %1200, align 8
  %1203 = getelementptr inbounds double* %6, i64 7
  %1204 = load double* %1203, align 8
  %1205 = fadd double %1204, %virial_yy.0
  store double %1205, double* %1203, align 8
  %1206 = getelementptr inbounds double* %6, i64 8
  %1207 = load double* %1206, align 8
  %1208 = fadd double %1207, %virial_yz.0
  store double %1208, double* %1206, align 8
  %1209 = getelementptr inbounds double* %6, i64 9
  %1210 = load double* %1209, align 8
  %1211 = fadd double %1210, %virial_xz.0
  store double %1211, double* %1209, align 8
  %1212 = getelementptr inbounds double* %6, i64 10
  %1213 = load double* %1212, align 8
  %1214 = fadd double %1213, %virial_yz.0
  store double %1214, double* %1212, align 8
  %1215 = getelementptr inbounds double* %6, i64 11
  %1216 = load double* %1215, align 8
  %1217 = fadd double %1216, %virial_zz.0
  store double %1217, double* %1215, align 8
  br label %1218

; <label>:1218                                    ; preds = %1186, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil20calc_self_energy_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.89, align 4
  %r2f28 = alloca %union.anon.90, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1256

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1256

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1152, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1152 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1152 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1152 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1152 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1152 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1152 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1153, %1152 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_zz.3, %1152 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yz.3, %1152 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yy.3, %1152 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xz.3, %1152 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xy.3, %1152 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xx.3, %1152 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %electEnergy.3, %1152 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy.3, %1152 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1152 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1154

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1152

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %533 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %534 = add nsw i32 %533, 1
  %535 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %536 = load i32* %535, align 4
  %537 = lshr i32 %536, 28
  %538 = mul nsw i32 %534, %537
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds double* %532, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %542 = load float* %541, align 4
  %543 = fpext float %542 to double
  %544 = fmul double 3.320636e+02, %543
  %545 = fmul double %544, %15
  %546 = fmul double %545, %9
  %547 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 4194303
  %550 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %549)
  %551 = zext i16 %550 to i32
  %552 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %551)
  %553 = icmp ne i32 %531, 0
  br i1 %553, label %554, label %616

; <label>:554                                     ; preds = %529
  br label %555

; <label>:555                                     ; preds = %613, %554
  %pli3.0 = phi i32* [ %202, %554 ], [ %pli3.2, %613 ]
  %plin.0 = phi i32* [ %216, %554 ], [ %plin.2, %613 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %554 ], [ %614, %613 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %554 ], [ %exclChecksum.3, %613 ]
  %556 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %556, label %557, label %615

; <label>:557                                     ; preds = %555
  %558 = sext i32 %k.0 to i64
  %559 = getelementptr inbounds i32* %188, i64 %558
  %560 = load i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %36, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 0
  %564 = getelementptr inbounds %class.Vector* %563, i32 0, i32 0
  %565 = load double* %564, align 8
  %566 = fsub double %287, %565
  %567 = fmul double %566, %566
  %568 = sext i32 %560 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %36, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 1
  %572 = load double* %571, align 8
  %573 = fsub double %290, %572
  %574 = fmul double %573, %573
  %575 = fadd double %567, %574
  %576 = sext i32 %560 to i64
  %577 = getelementptr inbounds %struct.CompAtom* %36, i64 %576
  %578 = getelementptr inbounds %struct.CompAtom* %577, i32 0, i32 0
  %579 = getelementptr inbounds %class.Vector* %578, i32 0, i32 2
  %580 = load double* %579, align 8
  %581 = fsub double %293, %580
  %582 = fmul double %581, %581
  %583 = fadd double %575, %582
  %584 = sext i32 %560 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %36, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 2
  %587 = load i32* %586, align 4
  %588 = lshr i32 %587, 26
  %589 = and i32 %588, 1
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %612, label %591

; <label>:591                                     ; preds = %557
  %592 = fcmp ole double %583, %7
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %591
  %594 = fcmp ole double %583, %21
  br i1 %594, label %595, label %598

; <label>:595                                     ; preds = %593
  %596 = add nsw i32 %exclChecksum.1, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %612, label %598

; <label>:598                                     ; preds = %595, %593
  %exclChecksum.2 = phi i32 [ %596, %595 ], [ %exclChecksum.1, %593 ]
  %599 = sext i32 %560 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %36, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  %604 = icmp sge i32 %603, %277
  br i1 %604, label %605, label %609

; <label>:605                                     ; preds = %598
  %606 = icmp sle i32 %603, %279
  br i1 %606, label %607, label %609

; <label>:607                                     ; preds = %605
  %608 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %560, i32* %pli3.0, align 4
  br label %611

; <label>:609                                     ; preds = %605, %598
  %610 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %560, i32* %plin.0, align 4
  br label %611

; <label>:611                                     ; preds = %609, %607
  %pli3.1 = phi i32* [ %608, %607 ], [ %pli3.0, %609 ]
  %plin.1 = phi i32* [ %plin.0, %607 ], [ %610, %609 ]
  br label %612

; <label>:612                                     ; preds = %611, %595, %591, %557
  %pli3.2 = phi i32* [ %pli3.0, %557 ], [ %pli3.0, %595 ], [ %pli3.1, %611 ], [ %pli3.0, %591 ]
  %plin.2 = phi i32* [ %plin.0, %557 ], [ %plin.0, %595 ], [ %plin.1, %611 ], [ %plin.0, %591 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %557 ], [ %596, %595 ], [ %exclChecksum.2, %611 ], [ %exclChecksum.1, %591 ]
  br label %613

; <label>:613                                     ; preds = %612
  %614 = add nsw i32 %k.0, 1
  br label %555

; <label>:615                                     ; preds = %555
  br label %695

; <label>:616                                     ; preds = %529
  %617 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %617, label %618, label %694

; <label>:618                                     ; preds = %616
  %619 = sext i32 %pairlistoffset.1 to i64
  %620 = getelementptr inbounds i32* %188, i64 %619
  %621 = load i32* %620, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %36, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = sext i32 %621 to i64
  %628 = getelementptr inbounds %struct.CompAtom* %36, i64 %627
  %629 = getelementptr inbounds %struct.CompAtom* %628, i32 0, i32 0
  %630 = getelementptr inbounds %class.Vector* %629, i32 0, i32 1
  %631 = load double* %630, align 8
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 2
  %636 = load double* %635, align 8
  %637 = sext i32 %621 to i64
  %638 = getelementptr inbounds %struct.CompAtom* %36, i64 %637
  %639 = getelementptr inbounds %struct.CompAtom* %638, i32 0, i32 2
  %640 = load i32* %639, align 4
  %641 = and i32 %640, 4194303
  br label %642

; <label>:642                                     ; preds = %687, %618
  %pli3.3 = phi i32* [ %202, %618 ], [ %pli3.5, %687 ]
  %plin.3 = phi i32* [ %216, %618 ], [ %plin.5, %687 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %618 ], [ %645, %687 ]
  %j210.0 = phi i32 [ %621, %618 ], [ %648, %687 ]
  %p_j_x11.0 = phi double [ %626, %618 ], [ %655, %687 ]
  %p_j_y12.0 = phi double [ %631, %618 ], [ %663, %687 ]
  %p_j_z13.0 = phi double [ %636, %618 ], [ %671, %687 ]
  %atom214.0 = phi i32 [ %641, %618 ], [ %692, %687 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %618 ], [ %exclChecksum.6, %687 ]
  %643 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %643, label %644, label %693

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %k9.0, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32* %188, i64 %646
  %648 = load i32* %647, align 4
  %649 = fsub double %287, %p_j_x11.0
  %650 = fmul double %649, %649
  %651 = sext i32 %648 to i64
  %652 = getelementptr inbounds %struct.CompAtom* %36, i64 %651
  %653 = getelementptr inbounds %struct.CompAtom* %652, i32 0, i32 0
  %654 = getelementptr inbounds %class.Vector* %653, i32 0, i32 0
  %655 = load double* %654, align 8
  %656 = fsub double %290, %p_j_y12.0
  %657 = fmul double %656, %656
  %658 = fadd double %650, %657
  %659 = sext i32 %648 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %36, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 0
  %662 = getelementptr inbounds %class.Vector* %661, i32 0, i32 1
  %663 = load double* %662, align 8
  %664 = fsub double %293, %p_j_z13.0
  %665 = fmul double %664, %664
  %666 = fadd double %658, %665
  %667 = sext i32 %648 to i64
  %668 = getelementptr inbounds %struct.CompAtom* %36, i64 %667
  %669 = getelementptr inbounds %struct.CompAtom* %668, i32 0, i32 0
  %670 = getelementptr inbounds %class.Vector* %669, i32 0, i32 2
  %671 = load double* %670, align 8
  %672 = fcmp ole double %666, %7
  br i1 %672, label %673, label %687

; <label>:673                                     ; preds = %644
  %674 = fcmp ole double %666, %21
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = add nsw i32 %exclChecksum.4, 1
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %687, label %678

; <label>:678                                     ; preds = %675, %673
  %exclChecksum.5 = phi i32 [ %676, %675 ], [ %exclChecksum.4, %673 ]
  %679 = icmp sge i32 %atom214.0, %277
  br i1 %679, label %680, label %684

; <label>:680                                     ; preds = %678
  %681 = icmp sle i32 %atom214.0, %279
  br i1 %681, label %682, label %684

; <label>:682                                     ; preds = %680
  %683 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %686

; <label>:684                                     ; preds = %680, %678
  %685 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %686

; <label>:686                                     ; preds = %684, %682
  %pli3.4 = phi i32* [ %683, %682 ], [ %pli3.3, %684 ]
  %plin.4 = phi i32* [ %plin.3, %682 ], [ %685, %684 ]
  br label %687

; <label>:687                                     ; preds = %686, %675, %644
  %pli3.5 = phi i32* [ %pli3.3, %675 ], [ %pli3.4, %686 ], [ %pli3.3, %644 ]
  %plin.5 = phi i32* [ %plin.3, %675 ], [ %plin.4, %686 ], [ %plin.3, %644 ]
  %exclChecksum.6 = phi i32 [ %676, %675 ], [ %exclChecksum.5, %686 ], [ %exclChecksum.4, %644 ]
  %688 = sext i32 %648 to i64
  %689 = getelementptr inbounds %struct.CompAtom* %36, i64 %688
  %690 = getelementptr inbounds %struct.CompAtom* %689, i32 0, i32 2
  %691 = load i32* %690, align 4
  %692 = and i32 %691, 4194303
  br label %642

; <label>:693                                     ; preds = %642
  br label %694

; <label>:694                                     ; preds = %693, %616
  %pli3.6 = phi i32* [ %pli3.3, %693 ], [ %202, %616 ]
  %plin.6 = phi i32* [ %plin.3, %693 ], [ %216, %616 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %693 ], [ %exclChecksum.0, %616 ]
  br label %695

; <label>:695                                     ; preds = %694, %615
  %pli3.7 = phi i32* [ %pli3.0, %615 ], [ %pli3.6, %694 ]
  %plin.7 = phi i32* [ %plin.0, %615 ], [ %plin.6, %694 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %615 ], [ %exclChecksum.7, %694 ]
  %696 = ptrtoint i32* %pli3.7 to i64
  %697 = ptrtoint i32* %202 to i64
  %698 = sub i64 %696, %697
  %699 = sdiv exact i64 %698, 4
  %700 = trunc i64 %699 to i32
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %709

; <label>:702                                     ; preds = %695
  %703 = sub nsw i32 %700, 1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i32* %202, i64 %704
  %706 = load i32* %705, align 4
  %707 = sext i32 %700 to i64
  %708 = getelementptr inbounds i32* %202, i64 %707
  store i32 %706, i32* %708, align 4
  br label %709

; <label>:709                                     ; preds = %702, %695
  br label %710

; <label>:710                                     ; preds = %721, %709
  %plix.0 = phi i32* [ %230, %709 ], [ %719, %721 ]
  %pln.0 = phi i32* [ %216, %709 ], [ %722, %721 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %709 ], [ %720, %721 ]
  %711 = icmp ult i32* %pln.0, %plin.7
  br i1 %711, label %712, label %715

; <label>:712                                     ; preds = %710
  %713 = load i32* %pln.0, align 4
  %714 = icmp slt i32 %713, %j_hgroup.2
  br label %715

; <label>:715                                     ; preds = %712, %710
  %716 = phi i1 [ false, %710 ], [ %714, %712 ]
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %715
  %718 = load i32* %pln.0, align 4
  %719 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %718, i32* %plix.0, align 4
  %720 = add nsw i32 %exclChecksum.9, -1
  br label %721

; <label>:721                                     ; preds = %717
  %722 = getelementptr inbounds i32* %pln.0, i32 1
  br label %710

; <label>:723                                     ; preds = %715
  br label %724

; <label>:724                                     ; preds = %739, %723
  %plix.1 = phi i32* [ %plix.0, %723 ], [ %737, %739 ]
  %k17.0 = phi i32 [ 0, %723 ], [ %740, %739 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %723 ], [ %738, %739 ]
  %725 = icmp slt i32 %k17.0, %700
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = sext i32 %k17.0 to i64
  %728 = getelementptr inbounds i32* %202, i64 %727
  %729 = load i32* %728, align 4
  %730 = icmp slt i32 %729, %j_hgroup.2
  br label %731

; <label>:731                                     ; preds = %726, %724
  %732 = phi i1 [ false, %724 ], [ %730, %726 ]
  br i1 %732, label %733, label %741

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %202, i64 %734
  %736 = load i32* %735, align 4
  %737 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %736, i32* %plix.1, align 4
  %738 = add nsw i32 %exclChecksum.10, -1
  br label %739

; <label>:739                                     ; preds = %733
  %740 = add nsw i32 %k17.0, 1
  br label %724

; <label>:741                                     ; preds = %731
  br label %742

; <label>:742                                     ; preds = %764, %741
  %plin.8 = phi i32* [ %plin.7, %741 ], [ %plin.9, %764 ]
  %plix.2 = phi i32* [ %plix.1, %741 ], [ %plix.3, %764 ]
  %plim.0 = phi i32* [ %244, %741 ], [ %plim.1, %764 ]
  %k17.1 = phi i32 [ %k17.0, %741 ], [ %765, %764 ]
  %743 = icmp slt i32 %k17.1, %700
  br i1 %743, label %744, label %766

; <label>:744                                     ; preds = %742
  %745 = sext i32 %k17.1 to i64
  %746 = getelementptr inbounds i32* %202, i64 %745
  %747 = load i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CompAtom* %36, i64 %748
  %750 = getelementptr inbounds %struct.CompAtom* %749, i32 0, i32 2
  %751 = load i32* %750, align 4
  %752 = and i32 %751, 4194303
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8* %284, i64 %753
  %755 = load i8* %754, align 1
  %756 = sext i8 %755 to i32
  switch i32 %756, label %763 [
    i32 0, label %757
    i32 1, label %759
    i32 2, label %761
  ]

; <label>:757                                     ; preds = %744
  %758 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %747, i32* %plin.8, align 4
  br label %763

; <label>:759                                     ; preds = %744
  %760 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %747, i32* %plix.2, align 4
  br label %763

; <label>:761                                     ; preds = %744
  %762 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %747, i32* %plim.0, align 4
  br label %763

; <label>:763                                     ; preds = %761, %759, %757, %744
  %plin.9 = phi i32* [ %plin.8, %744 ], [ %plin.8, %761 ], [ %plin.8, %759 ], [ %758, %757 ]
  %plix.3 = phi i32* [ %plix.2, %744 ], [ %plix.2, %761 ], [ %760, %759 ], [ %plix.2, %757 ]
  %plim.1 = phi i32* [ %plim.0, %744 ], [ %762, %761 ], [ %plim.0, %759 ], [ %plim.0, %757 ]
  br label %764

; <label>:764                                     ; preds = %763
  %765 = add nsw i32 %k17.1, 1
  br label %742

; <label>:766                                     ; preds = %742
  %767 = ptrtoint i32* %plix.2 to i64
  %768 = ptrtoint i32* %230 to i64
  %769 = sub i64 %767, %768
  %770 = sdiv exact i64 %769, 4
  %771 = sext i32 %exclChecksum.10 to i64
  %772 = add nsw i64 %771, %770
  %773 = trunc i64 %772 to i32
  %774 = ptrtoint i32* %plim.0 to i64
  %775 = ptrtoint i32* %244 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %773 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plin.8 to i64
  %782 = ptrtoint i32* %pln.0 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = trunc i64 %784 to i32
  br label %786

; <label>:786                                     ; preds = %962, %766
  %k17.2 = phi i32 [ 0, %766 ], [ %963, %962 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %766 ], [ %955, %962 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %766 ], [ %946, %962 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %766 ], [ %944, %962 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %766 ], [ %935, %962 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %766 ], [ %933, %962 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %766 ], [ %931, %962 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %766 ], [ %914, %962 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %766 ], [ %896, %962 ]
  %787 = icmp slt i32 %k17.2, %785
  br i1 %787, label %788, label %964

; <label>:788                                     ; preds = %786
  %789 = sext i32 %k17.2 to i64
  %790 = getelementptr inbounds i32* %pln.0, i64 %789
  %791 = load i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds %struct.CompAtom* %36, i64 %792
  %794 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 0
  %796 = load double* %795, align 8
  %797 = fsub double %287, %796
  %798 = fmul double %797, %797
  %799 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %800 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %801 = load double* %800, align 8
  %802 = fsub double %290, %801
  %803 = fmul double %802, %802
  %804 = fadd double %798, %803
  %805 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %806 = getelementptr inbounds %class.Vector* %805, i32 0, i32 2
  %807 = load double* %806, align 8
  %808 = fsub double %293, %807
  %809 = fmul double %808, %808
  %810 = fadd double %804, %809
  %811 = fptrunc double %810 to float
  %812 = bitcast %union.anon.89* %r2f to float*
  store float %811, float* %812, align 4
  %813 = bitcast %union.anon.89* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = ashr i32 %814, 17
  %816 = add nsw i32 %815, %24
  %817 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %818 = load i32* %817, align 4
  %819 = and i32 %818, 4194303
  %820 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %819)
  %821 = zext i16 %820 to i32
  %822 = mul nsw i32 2, %821
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %823
  %825 = mul nsw i32 16, %816
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds double* %14, i64 %826
  %828 = getelementptr inbounds double* %827, i64 0
  %829 = load double* %828, align 8
  %830 = mul nsw i32 16, %816
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double* %14, i64 %831
  %833 = getelementptr inbounds double* %832, i64 4
  %834 = getelementptr inbounds double* %833, i64 0
  %835 = load double* %834, align 8
  %836 = mul nsw i32 16, %816
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds double* %14, i64 %837
  %839 = getelementptr inbounds double* %838, i64 8
  %840 = getelementptr inbounds double* %839, i64 0
  %841 = load double* %840, align 8
  %842 = bitcast %union.anon.89* %r2f to i32*
  %843 = load i32* %842, align 4
  %844 = and i32 %843, -131072
  store i32 %844, i32* %842, align 4
  %845 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 1
  %846 = load float* %845, align 4
  %847 = fpext float %846 to double
  %848 = fmul double %546, %847
  %849 = bitcast %union.anon.89* %r2f to float*
  %850 = load float* %849, align 4
  %851 = fpext float %850 to double
  %852 = fsub double %810, %851
  %853 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %854 = load i32* %853, align 4
  %855 = lshr i32 %854, 28
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds double* %540, i64 %856
  %858 = load double* %857, align 8
  %859 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 0
  %860 = load double* %859, align 8
  %861 = fmul double %15, %860
  %862 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 1
  %863 = load double* %862, align 8
  %864 = fmul double %15, %863
  %865 = fmul double %861, %829
  %866 = fmul double %864, %835
  %867 = fsub double %865, %866
  %868 = getelementptr inbounds double* %827, i64 3
  %869 = load double* %868, align 8
  %870 = fmul double %861, %869
  %871 = getelementptr inbounds double* %833, i64 3
  %872 = load double* %871, align 8
  %873 = fmul double %864, %872
  %874 = fsub double %870, %873
  %875 = getelementptr inbounds double* %827, i64 2
  %876 = load double* %875, align 8
  %877 = fmul double %861, %876
  %878 = getelementptr inbounds double* %833, i64 2
  %879 = load double* %878, align 8
  %880 = fmul double %864, %879
  %881 = fsub double %877, %880
  %882 = getelementptr inbounds double* %827, i64 1
  %883 = load double* %882, align 8
  %884 = fmul double %861, %883
  %885 = getelementptr inbounds double* %833, i64 1
  %886 = load double* %885, align 8
  %887 = fmul double %864, %886
  %888 = fsub double %884, %887
  %889 = fmul double %852, %874
  %890 = fadd double %889, %881
  %891 = fmul double %890, %852
  %892 = fadd double %891, %888
  %893 = fmul double %892, %852
  %894 = fadd double %893, %867
  %895 = fmul double %858, %894
  %896 = fadd double %vdwEnergy.1, %895
  %897 = fmul double %841, %848
  %898 = getelementptr inbounds double* %839, i64 3
  %899 = load double* %898, align 8
  %900 = fmul double %848, %899
  %901 = getelementptr inbounds double* %839, i64 2
  %902 = load double* %901, align 8
  %903 = fmul double %848, %902
  %904 = getelementptr inbounds double* %839, i64 1
  %905 = load double* %904, align 8
  %906 = fmul double %848, %905
  %907 = fmul double %852, %900
  %908 = fadd double %907, %903
  %909 = fmul double %908, %852
  %910 = fadd double %909, %906
  %911 = fmul double %910, %852
  %912 = fadd double %911, %897
  %913 = fmul double %858, %912
  %914 = fadd double %electEnergy.1, %913
  %915 = fadd double %900, %874
  %916 = fadd double %903, %881
  %917 = fadd double %906, %888
  %918 = fadd double %897, %867
  %919 = fmul double 3.000000e+00, %852
  %920 = fmul double %919, %915
  %921 = fmul double 2.000000e+00, %916
  %922 = fadd double %920, %921
  %923 = fmul double %922, %852
  %924 = fadd double %923, %917
  %925 = fmul double -2.000000e+00, %858
  %926 = fmul double %925, %924
  %927 = sext i32 %791 to i64
  %928 = getelementptr inbounds %class.Vector* %250, i64 %927
  %929 = fmul double %926, %797
  %930 = fmul double %929, %797
  %931 = fadd double %virial_xx.1, %930
  %932 = fmul double %929, %802
  %933 = fadd double %virial_xy.1, %932
  %934 = fmul double %929, %808
  %935 = fadd double %virial_xz.1, %934
  %936 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %937 = load double* %936, align 8
  %938 = fadd double %937, %929
  store double %938, double* %936, align 8
  %939 = getelementptr inbounds %class.Vector* %928, i32 0, i32 0
  %940 = load double* %939, align 8
  %941 = fsub double %940, %929
  store double %941, double* %939, align 8
  %942 = fmul double %926, %802
  %943 = fmul double %942, %802
  %944 = fadd double %virial_yy.1, %943
  %945 = fmul double %942, %808
  %946 = fadd double %virial_yz.1, %945
  %947 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %948 = load double* %947, align 8
  %949 = fadd double %948, %942
  store double %949, double* %947, align 8
  %950 = getelementptr inbounds %class.Vector* %928, i32 0, i32 1
  %951 = load double* %950, align 8
  %952 = fsub double %951, %942
  store double %952, double* %950, align 8
  %953 = fmul double %926, %808
  %954 = fmul double %953, %808
  %955 = fadd double %virial_zz.1, %954
  %956 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %957 = load double* %956, align 8
  %958 = fadd double %957, %953
  store double %958, double* %956, align 8
  %959 = getelementptr inbounds %class.Vector* %928, i32 0, i32 2
  %960 = load double* %959, align 8
  %961 = fsub double %960, %953
  store double %961, double* %959, align 8
  br label %962

; <label>:962                                     ; preds = %788
  %963 = add nsw i32 %k17.2, 1
  br label %786

; <label>:964                                     ; preds = %786
  %965 = ptrtoint i32* %plim.0 to i64
  %966 = ptrtoint i32* %244 to i64
  %967 = sub i64 %965, %966
  %968 = sdiv exact i64 %967, 4
  %969 = trunc i64 %968 to i32
  br label %970

; <label>:970                                     ; preds = %1149, %964
  %k17.3 = phi i32 [ 0, %964 ], [ %1150, %1149 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %964 ], [ %1142, %1149 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %964 ], [ %1133, %1149 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %964 ], [ %1131, %1149 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %964 ], [ %1122, %1149 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %964 ], [ %1120, %1149 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %964 ], [ %1118, %1149 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %964 ], [ %1101, %1149 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %964 ], [ %1081, %1149 ]
  %971 = icmp slt i32 %k17.3, %969
  br i1 %971, label %972, label %1151

; <label>:972                                     ; preds = %970
  %973 = sext i32 %k17.3 to i64
  %974 = getelementptr inbounds i32* %244, i64 %973
  %975 = load i32* %974, align 4
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds %struct.CompAtom* %36, i64 %976
  %978 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 0
  %979 = getelementptr inbounds %class.Vector* %978, i32 0, i32 0
  %980 = load double* %979, align 8
  %981 = fsub double %287, %980
  %982 = fmul double %981, %981
  %983 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 0
  %984 = getelementptr inbounds %class.Vector* %983, i32 0, i32 1
  %985 = load double* %984, align 8
  %986 = fsub double %290, %985
  %987 = fmul double %986, %986
  %988 = fadd double %982, %987
  %989 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 0
  %990 = getelementptr inbounds %class.Vector* %989, i32 0, i32 2
  %991 = load double* %990, align 8
  %992 = fsub double %293, %991
  %993 = fmul double %992, %992
  %994 = fadd double %988, %993
  %995 = fptrunc double %994 to float
  %996 = bitcast %union.anon.90* %r2f28 to float*
  store float %995, float* %996, align 4
  %997 = bitcast %union.anon.90* %r2f28 to i32*
  %998 = load i32* %997, align 4
  %999 = ashr i32 %998, 17
  %1000 = add nsw i32 %999, %24
  %1001 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 2
  %1002 = load i32* %1001, align 4
  %1003 = and i32 %1002, 4194303
  %1004 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1003)
  %1005 = zext i16 %1004 to i32
  %1006 = mul nsw i32 2, %1005
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %1007
  %1009 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1008, i64 1
  %1010 = mul nsw i32 16, %1000
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds double* %14, i64 %1011
  %1013 = getelementptr inbounds double* %1012, i64 0
  %1014 = load double* %1013, align 8
  %1015 = mul nsw i32 16, %1000
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds double* %14, i64 %1016
  %1018 = getelementptr inbounds double* %1017, i64 4
  %1019 = getelementptr inbounds double* %1018, i64 0
  %1020 = load double* %1019, align 8
  %1021 = mul nsw i32 16, %1000
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds double* %14, i64 %1022
  %1024 = getelementptr inbounds double* %1023, i64 8
  %1025 = getelementptr inbounds double* %1024, i64 0
  %1026 = load double* %1025, align 8
  %1027 = bitcast %union.anon.90* %r2f28 to i32*
  %1028 = load i32* %1027, align 4
  %1029 = and i32 %1028, -131072
  store i32 %1029, i32* %1027, align 4
  %1030 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 1
  %1031 = load float* %1030, align 4
  %1032 = fpext float %1031 to double
  %1033 = fmul double %546, %1032
  %1034 = bitcast %union.anon.90* %r2f28 to float*
  %1035 = load float* %1034, align 4
  %1036 = fpext float %1035 to double
  %1037 = fsub double %994, %1036
  %1038 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 2
  %1039 = load i32* %1038, align 4
  %1040 = lshr i32 %1039, 28
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds double* %540, i64 %1041
  %1043 = load double* %1042, align 8
  %1044 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1009, i32 0, i32 0
  %1045 = load double* %1044, align 8
  %1046 = fmul double %15, %1045
  %1047 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1009, i32 0, i32 1
  %1048 = load double* %1047, align 8
  %1049 = fmul double %15, %1048
  %1050 = fmul double %1046, %1014
  %1051 = fmul double %1049, %1020
  %1052 = fsub double %1050, %1051
  %1053 = getelementptr inbounds double* %1012, i64 3
  %1054 = load double* %1053, align 8
  %1055 = fmul double %1046, %1054
  %1056 = getelementptr inbounds double* %1018, i64 3
  %1057 = load double* %1056, align 8
  %1058 = fmul double %1049, %1057
  %1059 = fsub double %1055, %1058
  %1060 = getelementptr inbounds double* %1012, i64 2
  %1061 = load double* %1060, align 8
  %1062 = fmul double %1046, %1061
  %1063 = getelementptr inbounds double* %1018, i64 2
  %1064 = load double* %1063, align 8
  %1065 = fmul double %1049, %1064
  %1066 = fsub double %1062, %1065
  %1067 = getelementptr inbounds double* %1012, i64 1
  %1068 = load double* %1067, align 8
  %1069 = fmul double %1046, %1068
  %1070 = getelementptr inbounds double* %1018, i64 1
  %1071 = load double* %1070, align 8
  %1072 = fmul double %1049, %1071
  %1073 = fsub double %1069, %1072
  %1074 = fmul double %1037, %1059
  %1075 = fadd double %1074, %1066
  %1076 = fmul double %1075, %1037
  %1077 = fadd double %1076, %1073
  %1078 = fmul double %1077, %1037
  %1079 = fadd double %1078, %1052
  %1080 = fmul double %1043, %1079
  %1081 = fadd double %vdwEnergy.2, %1080
  %1082 = fsub double 1.000000e+00, %17
  %1083 = fmul double %1082, %1033
  %1084 = fmul double %1026, %1083
  %1085 = getelementptr inbounds double* %1024, i64 3
  %1086 = load double* %1085, align 8
  %1087 = fmul double %1083, %1086
  %1088 = getelementptr inbounds double* %1024, i64 2
  %1089 = load double* %1088, align 8
  %1090 = fmul double %1083, %1089
  %1091 = getelementptr inbounds double* %1024, i64 1
  %1092 = load double* %1091, align 8
  %1093 = fmul double %1083, %1092
  %1094 = fmul double %1037, %1087
  %1095 = fadd double %1094, %1090
  %1096 = fmul double %1095, %1037
  %1097 = fadd double %1096, %1093
  %1098 = fmul double %1097, %1037
  %1099 = fadd double %1098, %1084
  %1100 = fmul double %1043, %1099
  %1101 = fadd double %electEnergy.2, %1100
  %1102 = fadd double %1087, %1059
  %1103 = fadd double %1090, %1066
  %1104 = fadd double %1093, %1073
  %1105 = fadd double %1084, %1052
  %1106 = fmul double 3.000000e+00, %1037
  %1107 = fmul double %1106, %1102
  %1108 = fmul double 2.000000e+00, %1103
  %1109 = fadd double %1107, %1108
  %1110 = fmul double %1109, %1037
  %1111 = fadd double %1110, %1104
  %1112 = fmul double -2.000000e+00, %1043
  %1113 = fmul double %1112, %1111
  %1114 = sext i32 %975 to i64
  %1115 = getelementptr inbounds %class.Vector* %250, i64 %1114
  %1116 = fmul double %1113, %981
  %1117 = fmul double %1116, %981
  %1118 = fadd double %virial_xx.2, %1117
  %1119 = fmul double %1116, %986
  %1120 = fadd double %virial_xy.2, %1119
  %1121 = fmul double %1116, %992
  %1122 = fadd double %virial_xz.2, %1121
  %1123 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1124 = load double* %1123, align 8
  %1125 = fadd double %1124, %1116
  store double %1125, double* %1123, align 8
  %1126 = getelementptr inbounds %class.Vector* %1115, i32 0, i32 0
  %1127 = load double* %1126, align 8
  %1128 = fsub double %1127, %1116
  store double %1128, double* %1126, align 8
  %1129 = fmul double %1113, %986
  %1130 = fmul double %1129, %986
  %1131 = fadd double %virial_yy.2, %1130
  %1132 = fmul double %1129, %992
  %1133 = fadd double %virial_yz.2, %1132
  %1134 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1135 = load double* %1134, align 8
  %1136 = fadd double %1135, %1129
  store double %1136, double* %1134, align 8
  %1137 = getelementptr inbounds %class.Vector* %1115, i32 0, i32 1
  %1138 = load double* %1137, align 8
  %1139 = fsub double %1138, %1129
  store double %1139, double* %1137, align 8
  %1140 = fmul double %1113, %992
  %1141 = fmul double %1140, %992
  %1142 = fadd double %virial_zz.2, %1141
  %1143 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1144 = load double* %1143, align 8
  %1145 = fadd double %1144, %1140
  store double %1145, double* %1143, align 8
  %1146 = getelementptr inbounds %class.Vector* %1115, i32 0, i32 2
  %1147 = load double* %1146, align 8
  %1148 = fsub double %1147, %1140
  store double %1148, double* %1146, align 8
  br label %1149

; <label>:1149                                    ; preds = %972
  %1150 = add nsw i32 %k17.3, 1
  br label %970

; <label>:1151                                    ; preds = %970
  br label %1152

; <label>:1152                                    ; preds = %1151, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1151 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1151 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1151 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1151 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1151 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1151 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1151 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %329 ], [ %virial_zz.2, %1151 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %329 ], [ %virial_yz.2, %1151 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %329 ], [ %virial_yy.2, %1151 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %329 ], [ %virial_xz.2, %1151 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %329 ], [ %virial_xy.2, %1151 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %329 ], [ %virial_xx.2, %1151 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %329 ], [ %electEnergy.2, %1151 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %329 ], [ %vdwEnergy.2, %1151 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %780, %1151 ]
  %1153 = add nsw i32 %i.1, 1
  br label %266

; <label>:1154                                    ; preds = %266
  %1155 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1156 = icmp ne i32* %50, %1155
  br i1 %1156, label %1157, label %1162

; <label>:1157                                    ; preds = %1154
  %1158 = icmp eq i32* %50, null
  br i1 %1158, label %1161, label %1159

; <label>:1159                                    ; preds = %1157
  %1160 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1160) #8
  br label %1161

; <label>:1161                                    ; preds = %1159, %1157
  br label %1162

; <label>:1162                                    ; preds = %1161, %1154
  %1163 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1164 = icmp ne i32* %64, %1163
  br i1 %1164, label %1165, label %1170

; <label>:1165                                    ; preds = %1162
  %1166 = icmp eq i32* %64, null
  br i1 %1166, label %1169, label %1167

; <label>:1167                                    ; preds = %1165
  %1168 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1168) #8
  br label %1169

; <label>:1169                                    ; preds = %1167, %1165
  br label %1170

; <label>:1170                                    ; preds = %1169, %1162
  %1171 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1172 = icmp ne i32* %78, %1171
  br i1 %1172, label %1173, label %1178

; <label>:1173                                    ; preds = %1170
  %1174 = icmp eq i32* %78, null
  br i1 %1174, label %1177, label %1175

; <label>:1175                                    ; preds = %1173
  %1176 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1176) #8
  br label %1177

; <label>:1177                                    ; preds = %1175, %1173
  br label %1178

; <label>:1178                                    ; preds = %1177, %1170
  %1179 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1180 = icmp ne i32* %188, %1179
  br i1 %1180, label %1181, label %1186

; <label>:1181                                    ; preds = %1178
  %1182 = icmp eq i32* %188, null
  br i1 %1182, label %1185, label %1183

; <label>:1183                                    ; preds = %1181
  %1184 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1184) #8
  br label %1185

; <label>:1185                                    ; preds = %1183, %1181
  br label %1186

; <label>:1186                                    ; preds = %1185, %1178
  %1187 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1188 = icmp ne i32* %202, %1187
  br i1 %1188, label %1189, label %1194

; <label>:1189                                    ; preds = %1186
  %1190 = icmp eq i32* %202, null
  br i1 %1190, label %1193, label %1191

; <label>:1191                                    ; preds = %1189
  %1192 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1192) #8
  br label %1193

; <label>:1193                                    ; preds = %1191, %1189
  br label %1194

; <label>:1194                                    ; preds = %1193, %1186
  %1195 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1196 = icmp ne i32* %216, %1195
  br i1 %1196, label %1197, label %1202

; <label>:1197                                    ; preds = %1194
  %1198 = icmp eq i32* %216, null
  br i1 %1198, label %1201, label %1199

; <label>:1199                                    ; preds = %1197
  %1200 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1200) #8
  br label %1201

; <label>:1201                                    ; preds = %1199, %1197
  br label %1202

; <label>:1202                                    ; preds = %1201, %1194
  %1203 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1204 = icmp ne i32* %230, %1203
  br i1 %1204, label %1205, label %1210

; <label>:1205                                    ; preds = %1202
  %1206 = icmp eq i32* %230, null
  br i1 %1206, label %1209, label %1207

; <label>:1207                                    ; preds = %1205
  %1208 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1208) #8
  br label %1209

; <label>:1209                                    ; preds = %1207, %1205
  br label %1210

; <label>:1210                                    ; preds = %1209, %1202
  %1211 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1212 = icmp ne i32* %244, %1211
  br i1 %1212, label %1213, label %1218

; <label>:1213                                    ; preds = %1210
  %1214 = icmp eq i32* %244, null
  br i1 %1214, label %1217, label %1215

; <label>:1215                                    ; preds = %1213
  %1216 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1216) #8
  br label %1217

; <label>:1217                                    ; preds = %1215, %1213
  br label %1218

; <label>:1218                                    ; preds = %1217, %1210
  %1219 = sitofp i32 %exclChecksum.0 to double
  %1220 = getelementptr inbounds double* %6, i64 22
  %1221 = load double* %1220, align 8
  %1222 = fadd double %1221, %1219
  store double %1222, double* %1220, align 8
  %1223 = getelementptr inbounds double* %6, i64 2
  %1224 = load double* %1223, align 8
  %1225 = fadd double %1224, %vdwEnergy.0
  store double %1225, double* %1223, align 8
  %1226 = getelementptr inbounds double* %6, i64 0
  %1227 = load double* %1226, align 8
  %1228 = fadd double %1227, %electEnergy.0
  store double %1228, double* %1226, align 8
  %1229 = getelementptr inbounds double* %6, i64 3
  %1230 = load double* %1229, align 8
  %1231 = fadd double %1230, %virial_xx.0
  store double %1231, double* %1229, align 8
  %1232 = getelementptr inbounds double* %6, i64 4
  %1233 = load double* %1232, align 8
  %1234 = fadd double %1233, %virial_xy.0
  store double %1234, double* %1232, align 8
  %1235 = getelementptr inbounds double* %6, i64 5
  %1236 = load double* %1235, align 8
  %1237 = fadd double %1236, %virial_xz.0
  store double %1237, double* %1235, align 8
  %1238 = getelementptr inbounds double* %6, i64 6
  %1239 = load double* %1238, align 8
  %1240 = fadd double %1239, %virial_xy.0
  store double %1240, double* %1238, align 8
  %1241 = getelementptr inbounds double* %6, i64 7
  %1242 = load double* %1241, align 8
  %1243 = fadd double %1242, %virial_yy.0
  store double %1243, double* %1241, align 8
  %1244 = getelementptr inbounds double* %6, i64 8
  %1245 = load double* %1244, align 8
  %1246 = fadd double %1245, %virial_yz.0
  store double %1246, double* %1244, align 8
  %1247 = getelementptr inbounds double* %6, i64 9
  %1248 = load double* %1247, align 8
  %1249 = fadd double %1248, %virial_xz.0
  store double %1249, double* %1247, align 8
  %1250 = getelementptr inbounds double* %6, i64 10
  %1251 = load double* %1250, align 8
  %1252 = fadd double %1251, %virial_yz.0
  store double %1252, double* %1250, align 8
  %1253 = getelementptr inbounds double* %6, i64 11
  %1254 = load double* %1253, align 8
  %1255 = fadd double %1254, %virial_zz.0
  store double %1255, double* %1253, align 8
  br label %1256

; <label>:1256                                    ; preds = %1218, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil23calc_pair_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.69, align 4
  %r2f32 = alloca %union.anon.70, align 4
  %r2f76 = alloca %union.anon.71, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1465

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %185

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  br label %139

; <label>:139                                     ; preds = %155, %138
  %all_fixed.2 = phi i32 [ %all_fixed.0, %138 ], [ %all_fixed.3, %155 ]
  %i.0 = phi i32 [ 0, %138 ], [ %156, %155 ]
  %140 = icmp ne i32 %all_fixed.2, 0
  br i1 %140, label %141, label %143

; <label>:141                                     ; preds = %139
  %142 = icmp slt i32 %i.0, %28
  br label %143

; <label>:143                                     ; preds = %141, %139
  %144 = phi i1 [ false, %139 ], [ %142, %141 ]
  br i1 %144, label %145, label %157

; <label>:145                                     ; preds = %143
  %146 = sext i32 %i.0 to i64
  %147 = getelementptr inbounds %struct.CompAtom* %34, i64 %146
  %148 = getelementptr inbounds %struct.CompAtom* %147, i32 0, i32 2
  %149 = load i32* %148, align 4
  %150 = lshr i32 %149, 26
  %151 = and i32 %150, 1
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

; <label>:153                                     ; preds = %145
  br label %154

; <label>:154                                     ; preds = %153, %145
  %all_fixed.3 = phi i32 [ %all_fixed.2, %145 ], [ 0, %153 ]
  br label %155

; <label>:155                                     ; preds = %154
  %156 = add nsw i32 %i.0, 1
  br label %139

; <label>:157                                     ; preds = %143
  %158 = icmp ne i32 %all_fixed.2, 0
  br i1 %158, label %159, label %184

; <label>:159                                     ; preds = %157
  %160 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %161 = icmp ne i32* %51, %160
  br i1 %161, label %162, label %167

; <label>:162                                     ; preds = %159
  %163 = icmp eq i32* %51, null
  br i1 %163, label %166, label %164

; <label>:164                                     ; preds = %162
  %165 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %165) #8
  br label %166

; <label>:166                                     ; preds = %164, %162
  br label %167

; <label>:167                                     ; preds = %166, %159
  %168 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %169 = icmp ne i32* %65, %168
  br i1 %169, label %170, label %175

; <label>:170                                     ; preds = %167
  %171 = icmp eq i32* %65, null
  br i1 %171, label %174, label %172

; <label>:172                                     ; preds = %170
  %173 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %173) #8
  br label %174

; <label>:174                                     ; preds = %172, %170
  br label %175

; <label>:175                                     ; preds = %174, %167
  %176 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %177 = icmp ne i32* %79, %176
  br i1 %177, label %178, label %183

; <label>:178                                     ; preds = %175
  %179 = icmp eq i32* %79, null
  br i1 %179, label %182, label %180

; <label>:180                                     ; preds = %178
  %181 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %181) #8
  br label %182

; <label>:182                                     ; preds = %180, %178
  br label %183

; <label>:183                                     ; preds = %182, %175
  br label %1465

; <label>:184                                     ; preds = %157
  br label %185

; <label>:185                                     ; preds = %184, %114
  %fixg.2 = phi i32 [ %fixg.0, %184 ], [ 0, %114 ]
  %186 = icmp ne i32 %fixg.2, 0
  br i1 %186, label %187, label %194

; <label>:187                                     ; preds = %185
  %188 = sub nsw i32 %fixg.2, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32* %65, i64 %189
  %191 = load i32* %190, align 4
  %192 = sext i32 %fixg.2 to i64
  %193 = getelementptr inbounds i32* %65, i64 %192
  store i32 %191, i32* %193, align 4
  br label %194

; <label>:194                                     ; preds = %187, %185
  %195 = icmp slt i32 %31, 1000
  br i1 %195, label %196, label %198

; <label>:196                                     ; preds = %194
  %197 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %207

; <label>:198                                     ; preds = %194
  %199 = add nsw i32 %31, 5
  %200 = sext i32 %199 to i64
  %201 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %200, i64 4)
  %202 = extractvalue { i64, i1 } %201, 1
  %203 = extractvalue { i64, i1 } %201, 0
  %204 = select i1 %202, i64 -1, i64 %203
  %205 = call noalias i8* @_Znam(i64 %204) #9
  %206 = bitcast i8* %205 to i32*
  br label %207

; <label>:207                                     ; preds = %198, %196
  %208 = phi i32* [ %197, %196 ], [ %206, %198 ]
  %209 = icmp slt i32 %31, 1000
  br i1 %209, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %221

; <label>:212                                     ; preds = %207
  %213 = add nsw i32 %31, 5
  %214 = sext i32 %213 to i64
  %215 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %214, i64 4)
  %216 = extractvalue { i64, i1 } %215, 1
  %217 = extractvalue { i64, i1 } %215, 0
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = call noalias i8* @_Znam(i64 %218) #9
  %220 = bitcast i8* %219 to i32*
  br label %221

; <label>:221                                     ; preds = %212, %210
  %222 = phi i32* [ %211, %210 ], [ %220, %212 ]
  %223 = icmp slt i32 %31, 1000
  br i1 %223, label %224, label %226

; <label>:224                                     ; preds = %221
  %225 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %235

; <label>:226                                     ; preds = %221
  %227 = add nsw i32 %31, 5
  %228 = sext i32 %227 to i64
  %229 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %228, i64 4)
  %230 = extractvalue { i64, i1 } %229, 1
  %231 = extractvalue { i64, i1 } %229, 0
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = call noalias i8* @_Znam(i64 %232) #9
  %234 = bitcast i8* %233 to i32*
  br label %235

; <label>:235                                     ; preds = %226, %224
  %236 = phi i32* [ %225, %224 ], [ %234, %226 ]
  %237 = icmp slt i32 %31, 1000
  br i1 %237, label %238, label %240

; <label>:238                                     ; preds = %235
  %239 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %249

; <label>:240                                     ; preds = %235
  %241 = add nsw i32 %31, 5
  %242 = sext i32 %241 to i64
  %243 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 4)
  %244 = extractvalue { i64, i1 } %243, 1
  %245 = extractvalue { i64, i1 } %243, 0
  %246 = select i1 %244, i64 -1, i64 %245
  %247 = call noalias i8* @_Znam(i64 %246) #9
  %248 = bitcast i8* %247 to i32*
  br label %249

; <label>:249                                     ; preds = %240, %238
  %250 = phi i32* [ %239, %238 ], [ %248, %240 ]
  %251 = icmp slt i32 %31, 1000
  br i1 %251, label %252, label %254

; <label>:252                                     ; preds = %249
  %253 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %263

; <label>:254                                     ; preds = %249
  %255 = add nsw i32 %31, 5
  %256 = sext i32 %255 to i64
  %257 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %256, i64 4)
  %258 = extractvalue { i64, i1 } %257, 1
  %259 = extractvalue { i64, i1 } %257, 0
  %260 = select i1 %258, i64 -1, i64 %259
  %261 = call noalias i8* @_Znam(i64 %260) #9
  %262 = bitcast i8* %261 to i32*
  br label %263

; <label>:263                                     ; preds = %254, %252
  %264 = phi i32* [ %253, %252 ], [ %262, %254 ]
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 0
  %267 = load %class.Vector** %266, align 8
  %268 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %269 = getelementptr inbounds [2 x %class.Vector*]* %268, i32 0, i64 1
  %270 = load %class.Vector** %269, align 8
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %272 = getelementptr inbounds [2 x %class.Vector*]* %271, i32 0, i64 0
  %273 = load %class.Vector** %272, align 8
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %275 = getelementptr inbounds [2 x %class.Vector*]* %274, i32 0, i64 1
  %276 = load %class.Vector** %275, align 8
  %277 = mul nsw i32 %28, %31
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %279 = load i32* %278, align 4
  %280 = mul nsw i32 %277, %279
  %281 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %282 = load i32* %281, align 4
  %283 = sdiv i32 %280, %282
  %284 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %285 = load i32* %284, align 4
  %286 = mul nsw i32 %277, %285
  %287 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %288 = load i32* %287, align 4
  %289 = sdiv i32 %286, %288
  br label %290

; <label>:290                                     ; preds = %1340, %263
  %pairlistindex.0 = phi i32 [ 0, %263 ], [ %pairlistindex.2, %1340 ]
  %pairlistoffset.0 = phi i32 [ 0, %263 ], [ %pairlistoffset.2, %1340 ]
  %pairCount.0 = phi i32 [ 0, %263 ], [ %pairCount.3, %1340 ]
  %i.1 = phi i32 [ 0, %263 ], [ %1341, %1340 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_zz.4, %1340 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yz.4, %1340 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yy.4, %1340 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xz.4, %1340 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xy.4, %1340 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xx.4, %1340 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_zz.3, %1340 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yz.3, %1340 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yy.3, %1340 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xz.3, %1340 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xy.3, %1340 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xx.3, %1340 ]
  %exclChecksum.0 = phi i32 [ 0, %263 ], [ %exclChecksum.9, %1340 ]
  %291 = icmp slt i32 %i.1, %28
  br i1 %291, label %292, label %1342

; <label>:292                                     ; preds = %290
  %293 = sext i32 %i.1 to i64
  %294 = getelementptr inbounds %struct.CompAtom* %34, i64 %293
  %295 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %296 = load i32* %295, align 4
  %297 = and i32 %296, 4194303
  %298 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %297)
  %299 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 0
  %300 = load i32* %299, align 4
  %301 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 1
  %302 = load i32* %301, align 4
  %303 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 2
  %304 = load i8** %303, align 8
  %305 = sext i32 %300 to i64
  %306 = sub i64 0, %305
  %307 = getelementptr inbounds i8* %304, i64 %306
  %308 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %309 = getelementptr inbounds %class.Vector* %308, i32 0, i32 0
  %310 = load double* %309, align 8
  %311 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %312 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %313 = load double* %312, align 8
  %314 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %315 = getelementptr inbounds %class.Vector* %314, i32 0, i32 2
  %316 = load double* %315, align 8
  %317 = sext i32 %i.1 to i64
  %318 = getelementptr inbounds %class.Vector* %267, i64 %317
  %319 = sext i32 %i.1 to i64
  %320 = getelementptr inbounds %class.Vector* %273, i64 %319
  %321 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %322 = load i32* %321, align 4
  %323 = lshr i32 %322, 22
  %324 = and i32 %323, 7
  %325 = icmp ne i32 %324, 0
  br i1 %325, label %332, label %326

; <label>:326                                     ; preds = %292
  %327 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %328 = load i32* %327, align 4
  %329 = lshr i32 %328, 25
  %330 = and i32 %329, 1
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %332, label %502

; <label>:332                                     ; preds = %326, %292
  %333 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %334 = load i32* %333, align 4
  %335 = lshr i32 %334, 22
  %336 = and i32 %335, 7
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %352

; <label>:338                                     ; preds = %332
  %339 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %340 = load i32* %339, align 4
  %341 = lshr i32 %340, 22
  %342 = and i32 %341, 7
  %343 = mul nsw i32 %342, %31
  %344 = add nsw i32 %pairCount.0, %343
  %345 = icmp slt i32 %pairCount.0, %283
  br i1 %345, label %348, label %346

; <label>:346                                     ; preds = %338
  %347 = icmp sge i32 %pairCount.0, %289
  br i1 %347, label %348, label %351

; <label>:348                                     ; preds = %346, %338
  %349 = sub nsw i32 %342, 1
  %350 = add nsw i32 %i.1, %349
  br label %1340

; <label>:351                                     ; preds = %346
  br label %352

; <label>:352                                     ; preds = %351, %332
  %pairCount.1 = phi i32 [ %344, %351 ], [ %pairCount.0, %332 ]
  %353 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %354 = icmp ne i32 %353, 0
  br i1 %354, label %355, label %361

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %357 = load i32* %356, align 4
  %358 = lshr i32 %357, 27
  %359 = and i32 %358, 1
  %360 = icmp ne i32 %359, 0
  br label %361

; <label>:361                                     ; preds = %355, %352
  %362 = phi i1 [ false, %352 ], [ %360, %355 ]
  %363 = zext i1 %362 to i32
  %364 = sext i32 0 to i64
  %365 = getelementptr inbounds i32* %208, i64 %364
  %366 = icmp ne i32 %363, 0
  br i1 %366, label %367, label %368

; <label>:367                                     ; preds = %361
  br label %369

; <label>:368                                     ; preds = %361
  br label %369

; <label>:369                                     ; preds = %368, %367
  %370 = phi i32* [ %65, %367 ], [ %51, %368 ]
  %371 = icmp ne i32 %363, 0
  br i1 %371, label %372, label %373

; <label>:372                                     ; preds = %369
  br label %374

; <label>:373                                     ; preds = %369
  br label %374

; <label>:374                                     ; preds = %373, %372
  %375 = phi i32 [ %fixg.2, %372 ], [ %g.0, %373 ]
  %376 = icmp slt i32 0, %375
  br i1 %376, label %377, label %471

; <label>:377                                     ; preds = %374
  %378 = sext i32 0 to i64
  %379 = getelementptr inbounds i32* %370, i64 %378
  %380 = load i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.CompAtom* %37, i64 %381
  %383 = getelementptr inbounds %struct.CompAtom* %382, i32 0, i32 0
  %384 = getelementptr inbounds %class.Vector* %383, i32 0, i32 0
  %385 = load double* %384, align 8
  %386 = sext i32 %380 to i64
  %387 = getelementptr inbounds %struct.CompAtom* %37, i64 %386
  %388 = getelementptr inbounds %struct.CompAtom* %387, i32 0, i32 0
  %389 = getelementptr inbounds %class.Vector* %388, i32 0, i32 1
  %390 = load double* %389, align 8
  %391 = sext i32 %380 to i64
  %392 = getelementptr inbounds %struct.CompAtom* %37, i64 %391
  %393 = getelementptr inbounds %struct.CompAtom* %392, i32 0, i32 0
  %394 = getelementptr inbounds %class.Vector* %393, i32 0, i32 2
  %395 = load double* %394, align 8
  br label %396

; <label>:396                                     ; preds = %429, %377
  %g.3 = phi i32 [ 0, %377 ], [ %399, %429 ]
  %gli.0 = phi i32* [ %79, %377 ], [ %gli.1, %429 ]
  %j2.0 = phi i32 [ %380, %377 ], [ %402, %429 ]
  %p_j_x.0 = phi double [ %385, %377 ], [ %409, %429 ]
  %p_j_y.0 = phi double [ %390, %377 ], [ %417, %429 ]
  %p_j_z.0 = phi double [ %395, %377 ], [ %425, %429 ]
  %397 = icmp slt i32 %g.3, %375
  br i1 %397, label %398, label %430

; <label>:398                                     ; preds = %396
  %399 = add nsw i32 %g.3, 1
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32* %370, i64 %400
  %402 = load i32* %401, align 4
  %403 = fsub double %310, %p_j_x.0
  %404 = fmul double %403, %403
  %405 = sext i32 %402 to i64
  %406 = getelementptr inbounds %struct.CompAtom* %37, i64 %405
  %407 = getelementptr inbounds %struct.CompAtom* %406, i32 0, i32 0
  %408 = getelementptr inbounds %class.Vector* %407, i32 0, i32 0
  %409 = load double* %408, align 8
  %410 = fsub double %313, %p_j_y.0
  %411 = fmul double %410, %410
  %412 = fadd double %404, %411
  %413 = sext i32 %402 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %37, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 1
  %417 = load double* %416, align 8
  %418 = fsub double %316, %p_j_z.0
  %419 = fmul double %418, %418
  %420 = fadd double %412, %419
  %421 = sext i32 %402 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %37, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  %426 = fcmp ole double %420, %8
  br i1 %426, label %427, label %429

; <label>:427                                     ; preds = %398
  store i32 %j2.0, i32* %gli.0, align 4
  %428 = getelementptr inbounds i32* %gli.0, i32 1
  br label %429

; <label>:429                                     ; preds = %427, %398
  %gli.1 = phi i32* [ %428, %427 ], [ %gli.0, %398 ]
  br label %396

; <label>:430                                     ; preds = %396
  %431 = ptrtoint i32* %gli.0 to i64
  %432 = ptrtoint i32* %79 to i64
  %433 = sub i64 %431, %432
  %434 = sdiv exact i64 %433, 4
  %435 = trunc i64 %434 to i32
  br label %436

; <label>:436                                     ; preds = %468, %430
  %pli.0 = phi i32* [ %365, %430 ], [ %467, %468 ]
  %h.0 = phi i32 [ 0, %430 ], [ %469, %468 ]
  %437 = icmp slt i32 %h.0, %435
  br i1 %437, label %438, label %470

; <label>:438                                     ; preds = %436
  %439 = sext i32 %h.0 to i64
  %440 = getelementptr inbounds i32* %79, i64 %439
  %441 = load i32* %440, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %37, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 25
  %447 = and i32 %446, 1
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %450

; <label>:449                                     ; preds = %438
  br label %457

; <label>:450                                     ; preds = %438
  %451 = sext i32 %441 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %37, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 2
  %454 = load i32* %453, align 4
  %455 = lshr i32 %454, 22
  %456 = and i32 %455, 7
  br label %457

; <label>:457                                     ; preds = %450, %449
  %458 = phi i32 [ 1, %449 ], [ %456, %450 ]
  %459 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %441, i32* %459, align 4
  %460 = add nsw i32 %441, 1
  %461 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %460, i32* %461, align 4
  %462 = add nsw i32 %441, 2
  %463 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %462, i32* %463, align 4
  %464 = add nsw i32 %441, 3
  %465 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %464, i32* %465, align 4
  %466 = sext i32 %458 to i64
  %467 = getelementptr inbounds i32* %pli.0, i64 %466
  br label %468

; <label>:468                                     ; preds = %457
  %469 = add nsw i32 %h.0, 1
  br label %436

; <label>:470                                     ; preds = %436
  br label %471

; <label>:471                                     ; preds = %470, %374
  %pli.1 = phi i32* [ %pli.0, %470 ], [ %365, %374 ]
  %472 = ptrtoint i32* %pli.1 to i64
  %473 = ptrtoint i32* %208 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %478, label %485

; <label>:478                                     ; preds = %471
  %479 = sub nsw i32 %476, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i32* %208, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %476 to i64
  %484 = getelementptr inbounds i32* %208, i64 %483
  store i32 %482, i32* %484, align 4
  br label %501

; <label>:485                                     ; preds = %471
  %486 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %487 = load i32* %486, align 4
  %488 = lshr i32 %487, 25
  %489 = and i32 %488, 1
  %490 = icmp ne i32 %489, 0
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %485
  br label %497

; <label>:492                                     ; preds = %485
  %493 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %494 = load i32* %493, align 4
  %495 = lshr i32 %494, 22
  %496 = and i32 %495, 7
  br label %497

; <label>:497                                     ; preds = %492, %491
  %498 = phi i32 [ 1, %491 ], [ %496, %492 ]
  %499 = sub nsw i32 %498, 1
  %500 = add nsw i32 %i.1, %499
  br label %1340

; <label>:501                                     ; preds = %478
  br label %502

; <label>:502                                     ; preds = %501, %326
  %pairlistindex.1 = phi i32 [ %476, %501 ], [ %pairlistindex.0, %326 ]
  %pairlistoffset.1 = phi i32 [ 0, %501 ], [ %pairlistoffset.0, %326 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %501 ], [ %pairCount.0, %326 ]
  %503 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %504 = icmp ne i32 %503, 0
  br i1 %504, label %505, label %511

; <label>:505                                     ; preds = %502
  %506 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 26
  %509 = and i32 %508, 1
  %510 = icmp ne i32 %509, 0
  br label %511

; <label>:511                                     ; preds = %505, %502
  %512 = phi i1 [ false, %502 ], [ %510, %505 ]
  %513 = zext i1 %512 to i32
  %514 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %515 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %516 = add nsw i32 %515, 1
  %517 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %518 = load i32* %517, align 4
  %519 = lshr i32 %518, 28
  %520 = mul nsw i32 %516, %519
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds double* %514, i64 %521
  %523 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 1
  %524 = load float* %523, align 4
  %525 = fpext float %524 to double
  %526 = fmul double 3.320636e+02, %525
  %527 = fmul double %526, %16
  %528 = fmul double %527, %9
  %529 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %530 = load i32* %529, align 4
  %531 = and i32 %530, 4194303
  %532 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %531)
  %533 = zext i16 %532 to i32
  %534 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %533)
  %535 = icmp ne i32 %513, 0
  br i1 %535, label %536, label %598

; <label>:536                                     ; preds = %511
  br label %537

; <label>:537                                     ; preds = %595, %536
  %pli4.0 = phi i32* [ %222, %536 ], [ %pli4.2, %595 ]
  %plin.0 = phi i32* [ %236, %536 ], [ %plin.2, %595 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %536 ], [ %596, %595 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %536 ], [ %exclChecksum.3, %595 ]
  %538 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %538, label %539, label %597

; <label>:539                                     ; preds = %537
  %540 = sext i32 %k.0 to i64
  %541 = getelementptr inbounds i32* %208, i64 %540
  %542 = load i32* %541, align 4
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds %struct.CompAtom* %37, i64 %543
  %545 = getelementptr inbounds %struct.CompAtom* %544, i32 0, i32 0
  %546 = getelementptr inbounds %class.Vector* %545, i32 0, i32 0
  %547 = load double* %546, align 8
  %548 = fsub double %310, %547
  %549 = fmul double %548, %548
  %550 = sext i32 %542 to i64
  %551 = getelementptr inbounds %struct.CompAtom* %37, i64 %550
  %552 = getelementptr inbounds %struct.CompAtom* %551, i32 0, i32 0
  %553 = getelementptr inbounds %class.Vector* %552, i32 0, i32 1
  %554 = load double* %553, align 8
  %555 = fsub double %313, %554
  %556 = fmul double %555, %555
  %557 = fadd double %549, %556
  %558 = sext i32 %542 to i64
  %559 = getelementptr inbounds %struct.CompAtom* %37, i64 %558
  %560 = getelementptr inbounds %struct.CompAtom* %559, i32 0, i32 0
  %561 = getelementptr inbounds %class.Vector* %560, i32 0, i32 2
  %562 = load double* %561, align 8
  %563 = fsub double %316, %562
  %564 = fmul double %563, %563
  %565 = fadd double %557, %564
  %566 = sext i32 %542 to i64
  %567 = getelementptr inbounds %struct.CompAtom* %37, i64 %566
  %568 = getelementptr inbounds %struct.CompAtom* %567, i32 0, i32 2
  %569 = load i32* %568, align 4
  %570 = lshr i32 %569, 26
  %571 = and i32 %570, 1
  %572 = icmp ne i32 %571, 0
  br i1 %572, label %594, label %573

; <label>:573                                     ; preds = %539
  %574 = fcmp ole double %565, %7
  br i1 %574, label %575, label %594

; <label>:575                                     ; preds = %573
  %576 = fcmp ole double %565, %22
  br i1 %576, label %577, label %580

; <label>:577                                     ; preds = %575
  %578 = add nsw i32 %exclChecksum.1, 1
  %579 = icmp ne i32 %578, 0
  br i1 %579, label %594, label %580

; <label>:580                                     ; preds = %577, %575
  %exclChecksum.2 = phi i32 [ %578, %577 ], [ %exclChecksum.1, %575 ]
  %581 = sext i32 %542 to i64
  %582 = getelementptr inbounds %struct.CompAtom* %37, i64 %581
  %583 = getelementptr inbounds %struct.CompAtom* %582, i32 0, i32 2
  %584 = load i32* %583, align 4
  %585 = and i32 %584, 4194303
  %586 = icmp sge i32 %585, %300
  br i1 %586, label %587, label %591

; <label>:587                                     ; preds = %580
  %588 = icmp sle i32 %585, %302
  br i1 %588, label %589, label %591

; <label>:589                                     ; preds = %587
  %590 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %542, i32* %pli4.0, align 4
  br label %593

; <label>:591                                     ; preds = %587, %580
  %592 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %542, i32* %plin.0, align 4
  br label %593

; <label>:593                                     ; preds = %591, %589
  %pli4.1 = phi i32* [ %590, %589 ], [ %pli4.0, %591 ]
  %plin.1 = phi i32* [ %plin.0, %589 ], [ %592, %591 ]
  br label %594

; <label>:594                                     ; preds = %593, %577, %573, %539
  %pli4.2 = phi i32* [ %pli4.0, %539 ], [ %pli4.0, %577 ], [ %pli4.1, %593 ], [ %pli4.0, %573 ]
  %plin.2 = phi i32* [ %plin.0, %539 ], [ %plin.0, %577 ], [ %plin.1, %593 ], [ %plin.0, %573 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %539 ], [ %578, %577 ], [ %exclChecksum.2, %593 ], [ %exclChecksum.1, %573 ]
  br label %595

; <label>:595                                     ; preds = %594
  %596 = add nsw i32 %k.0, 1
  br label %537

; <label>:597                                     ; preds = %537
  br label %677

; <label>:598                                     ; preds = %511
  %599 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %599, label %600, label %676

; <label>:600                                     ; preds = %598
  %601 = sext i32 %pairlistoffset.1 to i64
  %602 = getelementptr inbounds i32* %208, i64 %601
  %603 = load i32* %602, align 4
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds %struct.CompAtom* %37, i64 %604
  %606 = getelementptr inbounds %struct.CompAtom* %605, i32 0, i32 0
  %607 = getelementptr inbounds %class.Vector* %606, i32 0, i32 0
  %608 = load double* %607, align 8
  %609 = sext i32 %603 to i64
  %610 = getelementptr inbounds %struct.CompAtom* %37, i64 %609
  %611 = getelementptr inbounds %struct.CompAtom* %610, i32 0, i32 0
  %612 = getelementptr inbounds %class.Vector* %611, i32 0, i32 1
  %613 = load double* %612, align 8
  %614 = sext i32 %603 to i64
  %615 = getelementptr inbounds %struct.CompAtom* %37, i64 %614
  %616 = getelementptr inbounds %struct.CompAtom* %615, i32 0, i32 0
  %617 = getelementptr inbounds %class.Vector* %616, i32 0, i32 2
  %618 = load double* %617, align 8
  %619 = sext i32 %603 to i64
  %620 = getelementptr inbounds %struct.CompAtom* %37, i64 %619
  %621 = getelementptr inbounds %struct.CompAtom* %620, i32 0, i32 2
  %622 = load i32* %621, align 4
  %623 = and i32 %622, 4194303
  br label %624

; <label>:624                                     ; preds = %669, %600
  %pli4.3 = phi i32* [ %222, %600 ], [ %pli4.5, %669 ]
  %plin.3 = phi i32* [ %236, %600 ], [ %plin.5, %669 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %600 ], [ %627, %669 ]
  %j211.0 = phi i32 [ %603, %600 ], [ %630, %669 ]
  %p_j_x12.0 = phi double [ %608, %600 ], [ %637, %669 ]
  %p_j_y13.0 = phi double [ %613, %600 ], [ %645, %669 ]
  %p_j_z14.0 = phi double [ %618, %600 ], [ %653, %669 ]
  %atom215.0 = phi i32 [ %623, %600 ], [ %674, %669 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %600 ], [ %exclChecksum.6, %669 ]
  %625 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %625, label %626, label %675

; <label>:626                                     ; preds = %624
  %627 = add nsw i32 %k10.0, 1
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i32* %208, i64 %628
  %630 = load i32* %629, align 4
  %631 = fsub double %310, %p_j_x12.0
  %632 = fmul double %631, %631
  %633 = sext i32 %630 to i64
  %634 = getelementptr inbounds %struct.CompAtom* %37, i64 %633
  %635 = getelementptr inbounds %struct.CompAtom* %634, i32 0, i32 0
  %636 = getelementptr inbounds %class.Vector* %635, i32 0, i32 0
  %637 = load double* %636, align 8
  %638 = fsub double %313, %p_j_y13.0
  %639 = fmul double %638, %638
  %640 = fadd double %632, %639
  %641 = sext i32 %630 to i64
  %642 = getelementptr inbounds %struct.CompAtom* %37, i64 %641
  %643 = getelementptr inbounds %struct.CompAtom* %642, i32 0, i32 0
  %644 = getelementptr inbounds %class.Vector* %643, i32 0, i32 1
  %645 = load double* %644, align 8
  %646 = fsub double %316, %p_j_z14.0
  %647 = fmul double %646, %646
  %648 = fadd double %640, %647
  %649 = sext i32 %630 to i64
  %650 = getelementptr inbounds %struct.CompAtom* %37, i64 %649
  %651 = getelementptr inbounds %struct.CompAtom* %650, i32 0, i32 0
  %652 = getelementptr inbounds %class.Vector* %651, i32 0, i32 2
  %653 = load double* %652, align 8
  %654 = fcmp ole double %648, %7
  br i1 %654, label %655, label %669

; <label>:655                                     ; preds = %626
  %656 = fcmp ole double %648, %22
  br i1 %656, label %657, label %660

; <label>:657                                     ; preds = %655
  %658 = add nsw i32 %exclChecksum.4, 1
  %659 = icmp ne i32 %658, 0
  br i1 %659, label %669, label %660

; <label>:660                                     ; preds = %657, %655
  %exclChecksum.5 = phi i32 [ %658, %657 ], [ %exclChecksum.4, %655 ]
  %661 = icmp sge i32 %atom215.0, %300
  br i1 %661, label %662, label %666

; <label>:662                                     ; preds = %660
  %663 = icmp sle i32 %atom215.0, %302
  br i1 %663, label %664, label %666

; <label>:664                                     ; preds = %662
  %665 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %668

; <label>:666                                     ; preds = %662, %660
  %667 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %668

; <label>:668                                     ; preds = %666, %664
  %pli4.4 = phi i32* [ %665, %664 ], [ %pli4.3, %666 ]
  %plin.4 = phi i32* [ %plin.3, %664 ], [ %667, %666 ]
  br label %669

; <label>:669                                     ; preds = %668, %657, %626
  %pli4.5 = phi i32* [ %pli4.3, %657 ], [ %pli4.4, %668 ], [ %pli4.3, %626 ]
  %plin.5 = phi i32* [ %plin.3, %657 ], [ %plin.4, %668 ], [ %plin.3, %626 ]
  %exclChecksum.6 = phi i32 [ %658, %657 ], [ %exclChecksum.5, %668 ], [ %exclChecksum.4, %626 ]
  %670 = sext i32 %630 to i64
  %671 = getelementptr inbounds %struct.CompAtom* %37, i64 %670
  %672 = getelementptr inbounds %struct.CompAtom* %671, i32 0, i32 2
  %673 = load i32* %672, align 4
  %674 = and i32 %673, 4194303
  br label %624

; <label>:675                                     ; preds = %624
  br label %676

; <label>:676                                     ; preds = %675, %598
  %pli4.6 = phi i32* [ %pli4.3, %675 ], [ %222, %598 ]
  %plin.6 = phi i32* [ %plin.3, %675 ], [ %236, %598 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %675 ], [ %exclChecksum.0, %598 ]
  br label %677

; <label>:677                                     ; preds = %676, %597
  %pli4.7 = phi i32* [ %pli4.0, %597 ], [ %pli4.6, %676 ]
  %plin.7 = phi i32* [ %plin.0, %597 ], [ %plin.6, %676 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %597 ], [ %exclChecksum.7, %676 ]
  %678 = ptrtoint i32* %pli4.7 to i64
  %679 = ptrtoint i32* %222 to i64
  %680 = sub i64 %678, %679
  %681 = sdiv exact i64 %680, 4
  %682 = trunc i64 %681 to i32
  %683 = icmp ne i32 %682, 0
  br i1 %683, label %684, label %691

; <label>:684                                     ; preds = %677
  %685 = sub nsw i32 %682, 1
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i32* %222, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %682 to i64
  %690 = getelementptr inbounds i32* %222, i64 %689
  store i32 %688, i32* %690, align 4
  br label %691

; <label>:691                                     ; preds = %684, %677
  br label %692

; <label>:692                                     ; preds = %714, %691
  %plin.8 = phi i32* [ %plin.7, %691 ], [ %plin.9, %714 ]
  %plix.0 = phi i32* [ %250, %691 ], [ %plix.1, %714 ]
  %plim.0 = phi i32* [ %264, %691 ], [ %plim.1, %714 ]
  %k18.0 = phi i32 [ 0, %691 ], [ %715, %714 ]
  %693 = icmp slt i32 %k18.0, %682
  br i1 %693, label %694, label %716

; <label>:694                                     ; preds = %692
  %695 = sext i32 %k18.0 to i64
  %696 = getelementptr inbounds i32* %222, i64 %695
  %697 = load i32* %696, align 4
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds %struct.CompAtom* %37, i64 %698
  %700 = getelementptr inbounds %struct.CompAtom* %699, i32 0, i32 2
  %701 = load i32* %700, align 4
  %702 = and i32 %701, 4194303
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i8* %307, i64 %703
  %705 = load i8* %704, align 1
  %706 = sext i8 %705 to i32
  switch i32 %706, label %713 [
    i32 0, label %707
    i32 1, label %709
    i32 2, label %711
  ]

; <label>:707                                     ; preds = %694
  %708 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %697, i32* %plin.8, align 4
  br label %713

; <label>:709                                     ; preds = %694
  %710 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %697, i32* %plix.0, align 4
  br label %713

; <label>:711                                     ; preds = %694
  %712 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %697, i32* %plim.0, align 4
  br label %713

; <label>:713                                     ; preds = %711, %709, %707, %694
  %plin.9 = phi i32* [ %plin.8, %694 ], [ %plin.8, %711 ], [ %plin.8, %709 ], [ %708, %707 ]
  %plix.1 = phi i32* [ %plix.0, %694 ], [ %plix.0, %711 ], [ %710, %709 ], [ %plix.0, %707 ]
  %plim.1 = phi i32* [ %plim.0, %694 ], [ %712, %711 ], [ %plim.0, %709 ], [ %plim.0, %707 ]
  br label %714

; <label>:714                                     ; preds = %713
  %715 = add nsw i32 %k18.0, 1
  br label %692

; <label>:716                                     ; preds = %692
  %717 = ptrtoint i32* %plix.0 to i64
  %718 = ptrtoint i32* %250 to i64
  %719 = sub i64 %717, %718
  %720 = sdiv exact i64 %719, 4
  %721 = sext i32 %exclChecksum.8 to i64
  %722 = add nsw i64 %721, %720
  %723 = trunc i64 %722 to i32
  %724 = ptrtoint i32* %plim.0 to i64
  %725 = ptrtoint i32* %264 to i64
  %726 = sub i64 %724, %725
  %727 = sdiv exact i64 %726, 4
  %728 = sext i32 %723 to i64
  %729 = add nsw i64 %728, %727
  %730 = trunc i64 %729 to i32
  %731 = ptrtoint i32* %plin.8 to i64
  %732 = ptrtoint i32* %236 to i64
  %733 = sub i64 %731, %732
  %734 = sdiv exact i64 %733, 4
  %735 = trunc i64 %734 to i32
  br label %736

; <label>:736                                     ; preds = %956, %716
  %k18.1 = phi i32 [ 0, %716 ], [ %957, %956 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %716 ], [ %949, %956 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %716 ], [ %940, %956 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %716 ], [ %938, %956 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %716 ], [ %929, %956 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %716 ], [ %927, %956 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %716 ], [ %925, %956 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %716 ], [ %896, %956 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %716 ], [ %887, %956 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %716 ], [ %885, %956 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %716 ], [ %876, %956 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %716 ], [ %874, %956 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %716 ], [ %872, %956 ]
  %737 = icmp slt i32 %k18.1, %735
  br i1 %737, label %738, label %958

; <label>:738                                     ; preds = %736
  %739 = sext i32 %k18.1 to i64
  %740 = getelementptr inbounds i32* %236, i64 %739
  %741 = load i32* %740, align 4
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds %struct.CompAtom* %37, i64 %742
  %744 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 0
  %745 = getelementptr inbounds %class.Vector* %744, i32 0, i32 0
  %746 = load double* %745, align 8
  %747 = fsub double %310, %746
  %748 = fmul double %747, %747
  %749 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 0
  %750 = getelementptr inbounds %class.Vector* %749, i32 0, i32 1
  %751 = load double* %750, align 8
  %752 = fsub double %313, %751
  %753 = fmul double %752, %752
  %754 = fadd double %748, %753
  %755 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 0
  %756 = getelementptr inbounds %class.Vector* %755, i32 0, i32 2
  %757 = load double* %756, align 8
  %758 = fsub double %316, %757
  %759 = fmul double %758, %758
  %760 = fadd double %754, %759
  %761 = fptrunc double %760 to float
  %762 = bitcast %union.anon.69* %r2f to float*
  store float %761, float* %762, align 4
  %763 = bitcast %union.anon.69* %r2f to i32*
  %764 = load i32* %763, align 4
  %765 = ashr i32 %764, 17
  %766 = add nsw i32 %765, %25
  %767 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 2
  %768 = load i32* %767, align 4
  %769 = and i32 %768, 4194303
  %770 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %769)
  %771 = zext i16 %770 to i32
  %772 = mul nsw i32 2, %771
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds %"struct.LJTable::TableEntry"* %534, i64 %773
  %775 = mul nsw i32 16, %766
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds double* %14, i64 %776
  %778 = getelementptr inbounds double* %777, i64 0
  %779 = load double* %778, align 8
  %780 = mul nsw i32 16, %766
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds double* %14, i64 %781
  %783 = getelementptr inbounds double* %782, i64 4
  %784 = getelementptr inbounds double* %783, i64 0
  %785 = load double* %784, align 8
  %786 = mul nsw i32 16, %766
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds double* %14, i64 %787
  %789 = getelementptr inbounds double* %788, i64 8
  %790 = getelementptr inbounds double* %789, i64 0
  %791 = load double* %790, align 8
  %792 = mul nsw i32 16, %766
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds double* %14, i64 %793
  %795 = getelementptr inbounds double* %794, i64 8
  %796 = getelementptr inbounds double* %795, i64 4
  %797 = getelementptr inbounds double* %796, i64 0
  %798 = load double* %797, align 8
  %799 = bitcast %union.anon.69* %r2f to i32*
  %800 = load i32* %799, align 4
  %801 = and i32 %800, -131072
  store i32 %801, i32* %799, align 4
  %802 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 1
  %803 = load float* %802, align 4
  %804 = fpext float %803 to double
  %805 = fmul double %528, %804
  %806 = bitcast %union.anon.69* %r2f to float*
  %807 = load float* %806, align 4
  %808 = fpext float %807 to double
  %809 = fsub double %760, %808
  %810 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 2
  %811 = load i32* %810, align 4
  %812 = lshr i32 %811, 28
  %813 = zext i32 %812 to i64
  %814 = getelementptr inbounds double* %522, i64 %813
  %815 = load double* %814, align 8
  %816 = getelementptr inbounds %"struct.LJTable::TableEntry"* %774, i32 0, i32 0
  %817 = load double* %816, align 8
  %818 = fmul double %16, %817
  %819 = getelementptr inbounds %"struct.LJTable::TableEntry"* %774, i32 0, i32 1
  %820 = load double* %819, align 8
  %821 = fmul double %16, %820
  %822 = fmul double %818, %779
  %823 = fmul double %821, %785
  %824 = fsub double %822, %823
  %825 = getelementptr inbounds double* %777, i64 3
  %826 = load double* %825, align 8
  %827 = fmul double %818, %826
  %828 = getelementptr inbounds double* %783, i64 3
  %829 = load double* %828, align 8
  %830 = fmul double %821, %829
  %831 = fsub double %827, %830
  %832 = getelementptr inbounds double* %777, i64 2
  %833 = load double* %832, align 8
  %834 = fmul double %818, %833
  %835 = getelementptr inbounds double* %783, i64 2
  %836 = load double* %835, align 8
  %837 = fmul double %821, %836
  %838 = fsub double %834, %837
  %839 = getelementptr inbounds double* %777, i64 1
  %840 = load double* %839, align 8
  %841 = fmul double %818, %840
  %842 = getelementptr inbounds double* %783, i64 1
  %843 = load double* %842, align 8
  %844 = fmul double %821, %843
  %845 = fsub double %841, %844
  %846 = fmul double %791, %805
  %847 = getelementptr inbounds double* %789, i64 3
  %848 = load double* %847, align 8
  %849 = fmul double %805, %848
  %850 = getelementptr inbounds double* %789, i64 2
  %851 = load double* %850, align 8
  %852 = fmul double %805, %851
  %853 = getelementptr inbounds double* %789, i64 1
  %854 = load double* %853, align 8
  %855 = fmul double %805, %854
  %856 = fadd double %849, %831
  %857 = fadd double %852, %838
  %858 = fadd double %855, %845
  %859 = fadd double %846, %824
  %860 = fmul double 3.000000e+00, %809
  %861 = fmul double %860, %856
  %862 = fmul double 2.000000e+00, %857
  %863 = fadd double %861, %862
  %864 = fmul double %863, %809
  %865 = fadd double %864, %858
  %866 = fmul double -2.000000e+00, %815
  %867 = fmul double %866, %865
  %868 = sext i32 %741 to i64
  %869 = getelementptr inbounds %class.Vector* %270, i64 %868
  %870 = fmul double %867, %747
  %871 = fmul double %870, %747
  %872 = fadd double %virial_xx.1, %871
  %873 = fmul double %870, %752
  %874 = fadd double %virial_xy.1, %873
  %875 = fmul double %870, %758
  %876 = fadd double %virial_xz.1, %875
  %877 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %878 = load double* %877, align 8
  %879 = fadd double %878, %870
  store double %879, double* %877, align 8
  %880 = getelementptr inbounds %class.Vector* %869, i32 0, i32 0
  %881 = load double* %880, align 8
  %882 = fsub double %881, %870
  store double %882, double* %880, align 8
  %883 = fmul double %867, %752
  %884 = fmul double %883, %752
  %885 = fadd double %virial_yy.1, %884
  %886 = fmul double %883, %758
  %887 = fadd double %virial_yz.1, %886
  %888 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %889 = load double* %888, align 8
  %890 = fadd double %889, %883
  store double %890, double* %888, align 8
  %891 = getelementptr inbounds %class.Vector* %869, i32 0, i32 1
  %892 = load double* %891, align 8
  %893 = fsub double %892, %883
  store double %893, double* %891, align 8
  %894 = fmul double %867, %758
  %895 = fmul double %894, %758
  %896 = fadd double %virial_zz.1, %895
  %897 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %898 = load double* %897, align 8
  %899 = fadd double %898, %894
  store double %899, double* %897, align 8
  %900 = getelementptr inbounds %class.Vector* %869, i32 0, i32 2
  %901 = load double* %900, align 8
  %902 = fsub double %901, %894
  store double %902, double* %900, align 8
  %903 = getelementptr inbounds double* %796, i64 1
  %904 = load double* %903, align 8
  %905 = getelementptr inbounds double* %796, i64 2
  %906 = load double* %905, align 8
  %907 = getelementptr inbounds double* %796, i64 3
  %908 = load double* %907, align 8
  %909 = fmul double %908, %805
  %910 = fmul double %906, %805
  %911 = fmul double %904, %805
  %912 = fmul double %798, %805
  %913 = fmul double 3.000000e+00, %809
  %914 = fmul double %913, %909
  %915 = fmul double 2.000000e+00, %910
  %916 = fadd double %914, %915
  %917 = fmul double %916, %809
  %918 = fadd double %917, %911
  %919 = fmul double -2.000000e+00, %918
  %920 = fmul double %919, %815
  %921 = sext i32 %741 to i64
  %922 = getelementptr inbounds %class.Vector* %276, i64 %921
  %923 = fmul double %920, %747
  %924 = fmul double %923, %747
  %925 = fadd double %fullElectVirial_xx.1, %924
  %926 = fmul double %923, %752
  %927 = fadd double %fullElectVirial_xy.1, %926
  %928 = fmul double %923, %758
  %929 = fadd double %fullElectVirial_xz.1, %928
  %930 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %931 = load double* %930, align 8
  %932 = fadd double %931, %923
  store double %932, double* %930, align 8
  %933 = getelementptr inbounds %class.Vector* %922, i32 0, i32 0
  %934 = load double* %933, align 8
  %935 = fsub double %934, %923
  store double %935, double* %933, align 8
  %936 = fmul double %920, %752
  %937 = fmul double %936, %752
  %938 = fadd double %fullElectVirial_yy.1, %937
  %939 = fmul double %936, %758
  %940 = fadd double %fullElectVirial_yz.1, %939
  %941 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %942 = load double* %941, align 8
  %943 = fadd double %942, %936
  store double %943, double* %941, align 8
  %944 = getelementptr inbounds %class.Vector* %922, i32 0, i32 1
  %945 = load double* %944, align 8
  %946 = fsub double %945, %936
  store double %946, double* %944, align 8
  %947 = fmul double %920, %758
  %948 = fmul double %947, %758
  %949 = fadd double %fullElectVirial_zz.1, %948
  %950 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %951 = load double* %950, align 8
  %952 = fadd double %951, %947
  store double %952, double* %950, align 8
  %953 = getelementptr inbounds %class.Vector* %922, i32 0, i32 2
  %954 = load double* %953, align 8
  %955 = fsub double %954, %947
  store double %955, double* %953, align 8
  br label %956

; <label>:956                                     ; preds = %738
  %957 = add nsw i32 %k18.1, 1
  br label %736

; <label>:958                                     ; preds = %736
  %959 = ptrtoint i32* %plim.0 to i64
  %960 = ptrtoint i32* %264 to i64
  %961 = sub i64 %959, %960
  %962 = sdiv exact i64 %961, 4
  %963 = trunc i64 %962 to i32
  br label %964

; <label>:964                                     ; preds = %1206, %958
  %k18.2 = phi i32 [ 0, %958 ], [ %1207, %1206 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %958 ], [ %1199, %1206 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %958 ], [ %1190, %1206 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %958 ], [ %1188, %1206 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %958 ], [ %1179, %1206 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %958 ], [ %1177, %1206 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %958 ], [ %1175, %1206 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %958 ], [ %1127, %1206 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %958 ], [ %1118, %1206 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %958 ], [ %1116, %1206 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %958 ], [ %1107, %1206 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %958 ], [ %1105, %1206 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %958 ], [ %1103, %1206 ]
  %965 = icmp slt i32 %k18.2, %963
  br i1 %965, label %966, label %1208

; <label>:966                                     ; preds = %964
  %967 = sext i32 %k18.2 to i64
  %968 = getelementptr inbounds i32* %264, i64 %967
  %969 = load i32* %968, align 4
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds %struct.CompAtom* %37, i64 %970
  %972 = getelementptr inbounds %struct.CompAtom* %971, i32 0, i32 0
  %973 = getelementptr inbounds %class.Vector* %972, i32 0, i32 0
  %974 = load double* %973, align 8
  %975 = fsub double %310, %974
  %976 = fmul double %975, %975
  %977 = getelementptr inbounds %struct.CompAtom* %971, i32 0, i32 0
  %978 = getelementptr inbounds %class.Vector* %977, i32 0, i32 1
  %979 = load double* %978, align 8
  %980 = fsub double %313, %979
  %981 = fmul double %980, %980
  %982 = fadd double %976, %981
  %983 = getelementptr inbounds %struct.CompAtom* %971, i32 0, i32 0
  %984 = getelementptr inbounds %class.Vector* %983, i32 0, i32 2
  %985 = load double* %984, align 8
  %986 = fsub double %316, %985
  %987 = fmul double %986, %986
  %988 = fadd double %982, %987
  %989 = fptrunc double %988 to float
  %990 = bitcast %union.anon.70* %r2f32 to float*
  store float %989, float* %990, align 4
  %991 = bitcast %union.anon.70* %r2f32 to i32*
  %992 = load i32* %991, align 4
  %993 = ashr i32 %992, 17
  %994 = add nsw i32 %993, %25
  %995 = getelementptr inbounds %struct.CompAtom* %971, i32 0, i32 2
  %996 = load i32* %995, align 4
  %997 = and i32 %996, 4194303
  %998 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %997)
  %999 = zext i16 %998 to i32
  %1000 = mul nsw i32 2, %999
  %1001 = sext i32 %1000 to i64
  %1002 = getelementptr inbounds %"struct.LJTable::TableEntry"* %534, i64 %1001
  %1003 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1002, i64 1
  %1004 = mul nsw i32 16, %994
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds double* %14, i64 %1005
  %1007 = getelementptr inbounds double* %1006, i64 0
  %1008 = load double* %1007, align 8
  %1009 = mul nsw i32 16, %994
  %1010 = sext i32 %1009 to i64
  %1011 = getelementptr inbounds double* %14, i64 %1010
  %1012 = getelementptr inbounds double* %1011, i64 4
  %1013 = getelementptr inbounds double* %1012, i64 0
  %1014 = load double* %1013, align 8
  %1015 = mul nsw i32 16, %994
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds double* %14, i64 %1016
  %1018 = getelementptr inbounds double* %1017, i64 8
  %1019 = getelementptr inbounds double* %1018, i64 0
  %1020 = load double* %1019, align 8
  %1021 = mul nsw i32 16, %994
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds double* %14, i64 %1022
  %1024 = getelementptr inbounds double* %1023, i64 8
  %1025 = getelementptr inbounds double* %1024, i64 4
  %1026 = getelementptr inbounds double* %1025, i64 0
  %1027 = load double* %1026, align 8
  %1028 = bitcast %union.anon.70* %r2f32 to i32*
  %1029 = load i32* %1028, align 4
  %1030 = and i32 %1029, -131072
  store i32 %1030, i32* %1028, align 4
  %1031 = getelementptr inbounds %struct.CompAtom* %971, i32 0, i32 1
  %1032 = load float* %1031, align 4
  %1033 = fpext float %1032 to double
  %1034 = fmul double %528, %1033
  %1035 = bitcast %union.anon.70* %r2f32 to float*
  %1036 = load float* %1035, align 4
  %1037 = fpext float %1036 to double
  %1038 = fsub double %988, %1037
  %1039 = getelementptr inbounds %struct.CompAtom* %971, i32 0, i32 2
  %1040 = load i32* %1039, align 4
  %1041 = lshr i32 %1040, 28
  %1042 = zext i32 %1041 to i64
  %1043 = getelementptr inbounds double* %522, i64 %1042
  %1044 = load double* %1043, align 8
  %1045 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1003, i32 0, i32 0
  %1046 = load double* %1045, align 8
  %1047 = fmul double %16, %1046
  %1048 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1003, i32 0, i32 1
  %1049 = load double* %1048, align 8
  %1050 = fmul double %16, %1049
  %1051 = fmul double %1047, %1008
  %1052 = fmul double %1050, %1014
  %1053 = fsub double %1051, %1052
  %1054 = getelementptr inbounds double* %1006, i64 3
  %1055 = load double* %1054, align 8
  %1056 = fmul double %1047, %1055
  %1057 = getelementptr inbounds double* %1012, i64 3
  %1058 = load double* %1057, align 8
  %1059 = fmul double %1050, %1058
  %1060 = fsub double %1056, %1059
  %1061 = getelementptr inbounds double* %1006, i64 2
  %1062 = load double* %1061, align 8
  %1063 = fmul double %1047, %1062
  %1064 = getelementptr inbounds double* %1012, i64 2
  %1065 = load double* %1064, align 8
  %1066 = fmul double %1050, %1065
  %1067 = fsub double %1063, %1066
  %1068 = getelementptr inbounds double* %1006, i64 1
  %1069 = load double* %1068, align 8
  %1070 = fmul double %1047, %1069
  %1071 = getelementptr inbounds double* %1012, i64 1
  %1072 = load double* %1071, align 8
  %1073 = fmul double %1050, %1072
  %1074 = fsub double %1070, %1073
  %1075 = fsub double 1.000000e+00, %18
  %1076 = fmul double %1075, %1034
  %1077 = fmul double %1020, %1076
  %1078 = getelementptr inbounds double* %1018, i64 3
  %1079 = load double* %1078, align 8
  %1080 = fmul double %1076, %1079
  %1081 = getelementptr inbounds double* %1018, i64 2
  %1082 = load double* %1081, align 8
  %1083 = fmul double %1076, %1082
  %1084 = getelementptr inbounds double* %1018, i64 1
  %1085 = load double* %1084, align 8
  %1086 = fmul double %1076, %1085
  %1087 = fadd double %1080, %1060
  %1088 = fadd double %1083, %1067
  %1089 = fadd double %1086, %1074
  %1090 = fadd double %1077, %1053
  %1091 = fmul double 3.000000e+00, %1038
  %1092 = fmul double %1091, %1087
  %1093 = fmul double 2.000000e+00, %1088
  %1094 = fadd double %1092, %1093
  %1095 = fmul double %1094, %1038
  %1096 = fadd double %1095, %1089
  %1097 = fmul double -2.000000e+00, %1044
  %1098 = fmul double %1097, %1096
  %1099 = sext i32 %969 to i64
  %1100 = getelementptr inbounds %class.Vector* %270, i64 %1099
  %1101 = fmul double %1098, %975
  %1102 = fmul double %1101, %975
  %1103 = fadd double %virial_xx.2, %1102
  %1104 = fmul double %1101, %980
  %1105 = fadd double %virial_xy.2, %1104
  %1106 = fmul double %1101, %986
  %1107 = fadd double %virial_xz.2, %1106
  %1108 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %1109 = load double* %1108, align 8
  %1110 = fadd double %1109, %1101
  store double %1110, double* %1108, align 8
  %1111 = getelementptr inbounds %class.Vector* %1100, i32 0, i32 0
  %1112 = load double* %1111, align 8
  %1113 = fsub double %1112, %1101
  store double %1113, double* %1111, align 8
  %1114 = fmul double %1098, %980
  %1115 = fmul double %1114, %980
  %1116 = fadd double %virial_yy.2, %1115
  %1117 = fmul double %1114, %986
  %1118 = fadd double %virial_yz.2, %1117
  %1119 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %1120 = load double* %1119, align 8
  %1121 = fadd double %1120, %1114
  store double %1121, double* %1119, align 8
  %1122 = getelementptr inbounds %class.Vector* %1100, i32 0, i32 1
  %1123 = load double* %1122, align 8
  %1124 = fsub double %1123, %1114
  store double %1124, double* %1122, align 8
  %1125 = fmul double %1098, %986
  %1126 = fmul double %1125, %986
  %1127 = fadd double %virial_zz.2, %1126
  %1128 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %1129 = load double* %1128, align 8
  %1130 = fadd double %1129, %1125
  store double %1130, double* %1128, align 8
  %1131 = getelementptr inbounds %class.Vector* %1100, i32 0, i32 2
  %1132 = load double* %1131, align 8
  %1133 = fsub double %1132, %1125
  store double %1133, double* %1131, align 8
  %1134 = getelementptr inbounds double* %1025, i64 1
  %1135 = load double* %1134, align 8
  %1136 = getelementptr inbounds double* %1025, i64 2
  %1137 = load double* %1136, align 8
  %1138 = getelementptr inbounds double* %1025, i64 3
  %1139 = load double* %1138, align 8
  %1140 = mul nsw i32 4, %994
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds double* %15, i64 %1141
  %1143 = getelementptr inbounds double* %1142, i64 0
  %1144 = load double* %1143, align 8
  %1145 = fmul double %18, %1144
  %1146 = fsub double %1027, %1145
  %1147 = getelementptr inbounds double* %1142, i64 1
  %1148 = load double* %1147, align 8
  %1149 = fmul double %18, %1148
  %1150 = fsub double %1135, %1149
  %1151 = getelementptr inbounds double* %1142, i64 2
  %1152 = load double* %1151, align 8
  %1153 = fmul double %18, %1152
  %1154 = fsub double %1137, %1153
  %1155 = getelementptr inbounds double* %1142, i64 3
  %1156 = load double* %1155, align 8
  %1157 = fmul double %18, %1156
  %1158 = fsub double %1139, %1157
  %1159 = fmul double %1158, %1034
  %1160 = fmul double %1154, %1034
  %1161 = fmul double %1150, %1034
  %1162 = fmul double %1146, %1034
  %1163 = fmul double 3.000000e+00, %1038
  %1164 = fmul double %1163, %1159
  %1165 = fmul double 2.000000e+00, %1160
  %1166 = fadd double %1164, %1165
  %1167 = fmul double %1166, %1038
  %1168 = fadd double %1167, %1161
  %1169 = fmul double -2.000000e+00, %1168
  %1170 = fmul double %1169, %1044
  %1171 = sext i32 %969 to i64
  %1172 = getelementptr inbounds %class.Vector* %276, i64 %1171
  %1173 = fmul double %1170, %975
  %1174 = fmul double %1173, %975
  %1175 = fadd double %fullElectVirial_xx.2, %1174
  %1176 = fmul double %1173, %980
  %1177 = fadd double %fullElectVirial_xy.2, %1176
  %1178 = fmul double %1173, %986
  %1179 = fadd double %fullElectVirial_xz.2, %1178
  %1180 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1181 = load double* %1180, align 8
  %1182 = fadd double %1181, %1173
  store double %1182, double* %1180, align 8
  %1183 = getelementptr inbounds %class.Vector* %1172, i32 0, i32 0
  %1184 = load double* %1183, align 8
  %1185 = fsub double %1184, %1173
  store double %1185, double* %1183, align 8
  %1186 = fmul double %1170, %980
  %1187 = fmul double %1186, %980
  %1188 = fadd double %fullElectVirial_yy.2, %1187
  %1189 = fmul double %1186, %986
  %1190 = fadd double %fullElectVirial_yz.2, %1189
  %1191 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1192 = load double* %1191, align 8
  %1193 = fadd double %1192, %1186
  store double %1193, double* %1191, align 8
  %1194 = getelementptr inbounds %class.Vector* %1172, i32 0, i32 1
  %1195 = load double* %1194, align 8
  %1196 = fsub double %1195, %1186
  store double %1196, double* %1194, align 8
  %1197 = fmul double %1170, %986
  %1198 = fmul double %1197, %986
  %1199 = fadd double %fullElectVirial_zz.2, %1198
  %1200 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1201 = load double* %1200, align 8
  %1202 = fadd double %1201, %1197
  store double %1202, double* %1200, align 8
  %1203 = getelementptr inbounds %class.Vector* %1172, i32 0, i32 2
  %1204 = load double* %1203, align 8
  %1205 = fsub double %1204, %1197
  store double %1205, double* %1203, align 8
  br label %1206

; <label>:1206                                    ; preds = %966
  %1207 = add nsw i32 %k18.2, 1
  br label %964

; <label>:1208                                    ; preds = %964
  %1209 = ptrtoint i32* %plix.0 to i64
  %1210 = ptrtoint i32* %250 to i64
  %1211 = sub i64 %1209, %1210
  %1212 = sdiv exact i64 %1211, 4
  %1213 = trunc i64 %1212 to i32
  br label %1214

; <label>:1214                                    ; preds = %1337, %1208
  %k18.3 = phi i32 [ 0, %1208 ], [ %1338, %1337 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1208 ], [ %1330, %1337 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1208 ], [ %1321, %1337 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1208 ], [ %1319, %1337 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1208 ], [ %1310, %1337 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1208 ], [ %1308, %1337 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1208 ], [ %1306, %1337 ]
  %1215 = icmp slt i32 %k18.3, %1213
  br i1 %1215, label %1216, label %1339

; <label>:1216                                    ; preds = %1214
  %1217 = sext i32 %k18.3 to i64
  %1218 = getelementptr inbounds i32* %250, i64 %1217
  %1219 = load i32* %1218, align 4
  %1220 = sext i32 %1219 to i64
  %1221 = getelementptr inbounds %struct.CompAtom* %37, i64 %1220
  %1222 = getelementptr inbounds %struct.CompAtom* %1221, i32 0, i32 0
  %1223 = getelementptr inbounds %class.Vector* %1222, i32 0, i32 0
  %1224 = load double* %1223, align 8
  %1225 = fsub double %310, %1224
  %1226 = fmul double %1225, %1225
  %1227 = getelementptr inbounds %struct.CompAtom* %1221, i32 0, i32 0
  %1228 = getelementptr inbounds %class.Vector* %1227, i32 0, i32 1
  %1229 = load double* %1228, align 8
  %1230 = fsub double %313, %1229
  %1231 = fmul double %1230, %1230
  %1232 = fadd double %1226, %1231
  %1233 = getelementptr inbounds %struct.CompAtom* %1221, i32 0, i32 0
  %1234 = getelementptr inbounds %class.Vector* %1233, i32 0, i32 2
  %1235 = load double* %1234, align 8
  %1236 = fsub double %316, %1235
  %1237 = fmul double %1236, %1236
  %1238 = fadd double %1232, %1237
  %1239 = fptrunc double %1238 to float
  %1240 = bitcast %union.anon.71* %r2f76 to float*
  store float %1239, float* %1240, align 4
  %1241 = bitcast %union.anon.71* %r2f76 to i32*
  %1242 = load i32* %1241, align 4
  %1243 = ashr i32 %1242, 17
  %1244 = add nsw i32 %1243, %25
  %1245 = mul nsw i32 16, %1244
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds double* %14, i64 %1246
  %1248 = getelementptr inbounds double* %1247, i64 8
  %1249 = getelementptr inbounds double* %1248, i64 4
  %1250 = getelementptr inbounds double* %1249, i64 0
  %1251 = load double* %1250, align 8
  %1252 = bitcast %union.anon.71* %r2f76 to i32*
  %1253 = load i32* %1252, align 4
  %1254 = and i32 %1253, -131072
  store i32 %1254, i32* %1252, align 4
  %1255 = getelementptr inbounds %struct.CompAtom* %1221, i32 0, i32 1
  %1256 = load float* %1255, align 4
  %1257 = fpext float %1256 to double
  %1258 = fmul double %528, %1257
  %1259 = bitcast %union.anon.71* %r2f76 to float*
  %1260 = load float* %1259, align 4
  %1261 = fpext float %1260 to double
  %1262 = fsub double %1238, %1261
  %1263 = getelementptr inbounds %struct.CompAtom* %1221, i32 0, i32 2
  %1264 = load i32* %1263, align 4
  %1265 = lshr i32 %1264, 28
  %1266 = zext i32 %1265 to i64
  %1267 = getelementptr inbounds double* %522, i64 %1266
  %1268 = load double* %1267, align 8
  %1269 = getelementptr inbounds double* %1249, i64 1
  %1270 = load double* %1269, align 8
  %1271 = getelementptr inbounds double* %1249, i64 2
  %1272 = load double* %1271, align 8
  %1273 = getelementptr inbounds double* %1249, i64 3
  %1274 = load double* %1273, align 8
  %1275 = mul nsw i32 4, %1244
  %1276 = sext i32 %1275 to i64
  %1277 = getelementptr inbounds double* %15, i64 %1276
  %1278 = getelementptr inbounds double* %1277, i64 0
  %1279 = load double* %1278, align 8
  %1280 = fsub double %1251, %1279
  %1281 = getelementptr inbounds double* %1277, i64 1
  %1282 = load double* %1281, align 8
  %1283 = fsub double %1270, %1282
  %1284 = getelementptr inbounds double* %1277, i64 2
  %1285 = load double* %1284, align 8
  %1286 = fsub double %1272, %1285
  %1287 = getelementptr inbounds double* %1277, i64 3
  %1288 = load double* %1287, align 8
  %1289 = fsub double %1274, %1288
  %1290 = fmul double %1289, %1258
  %1291 = fmul double %1286, %1258
  %1292 = fmul double %1283, %1258
  %1293 = fmul double %1280, %1258
  %1294 = fmul double 3.000000e+00, %1262
  %1295 = fmul double %1294, %1290
  %1296 = fmul double 2.000000e+00, %1291
  %1297 = fadd double %1295, %1296
  %1298 = fmul double %1297, %1262
  %1299 = fadd double %1298, %1292
  %1300 = fmul double -2.000000e+00, %1299
  %1301 = fmul double %1300, %1268
  %1302 = sext i32 %1219 to i64
  %1303 = getelementptr inbounds %class.Vector* %276, i64 %1302
  %1304 = fmul double %1301, %1225
  %1305 = fmul double %1304, %1225
  %1306 = fadd double %fullElectVirial_xx.3, %1305
  %1307 = fmul double %1304, %1230
  %1308 = fadd double %fullElectVirial_xy.3, %1307
  %1309 = fmul double %1304, %1236
  %1310 = fadd double %fullElectVirial_xz.3, %1309
  %1311 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1312 = load double* %1311, align 8
  %1313 = fadd double %1312, %1304
  store double %1313, double* %1311, align 8
  %1314 = getelementptr inbounds %class.Vector* %1303, i32 0, i32 0
  %1315 = load double* %1314, align 8
  %1316 = fsub double %1315, %1304
  store double %1316, double* %1314, align 8
  %1317 = fmul double %1301, %1230
  %1318 = fmul double %1317, %1230
  %1319 = fadd double %fullElectVirial_yy.3, %1318
  %1320 = fmul double %1317, %1236
  %1321 = fadd double %fullElectVirial_yz.3, %1320
  %1322 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1323 = load double* %1322, align 8
  %1324 = fadd double %1323, %1317
  store double %1324, double* %1322, align 8
  %1325 = getelementptr inbounds %class.Vector* %1303, i32 0, i32 1
  %1326 = load double* %1325, align 8
  %1327 = fsub double %1326, %1317
  store double %1327, double* %1325, align 8
  %1328 = fmul double %1301, %1236
  %1329 = fmul double %1328, %1236
  %1330 = fadd double %fullElectVirial_zz.3, %1329
  %1331 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1332 = load double* %1331, align 8
  %1333 = fadd double %1332, %1328
  store double %1333, double* %1331, align 8
  %1334 = getelementptr inbounds %class.Vector* %1303, i32 0, i32 2
  %1335 = load double* %1334, align 8
  %1336 = fsub double %1335, %1328
  store double %1336, double* %1334, align 8
  br label %1337

; <label>:1337                                    ; preds = %1216
  %1338 = add nsw i32 %k18.3, 1
  br label %1214

; <label>:1339                                    ; preds = %1214
  br label %1340

; <label>:1340                                    ; preds = %1339, %497, %348
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %348 ], [ %pairlistindex.1, %1339 ], [ %476, %497 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %348 ], [ %pairlistoffset.1, %1339 ], [ 0, %497 ]
  %pairCount.3 = phi i32 [ %344, %348 ], [ %pairCount.2, %1339 ], [ %pairCount.1, %497 ]
  %i.2 = phi i32 [ %350, %348 ], [ %i.1, %1339 ], [ %500, %497 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %348 ], [ %fullElectVirial_zz.3, %1339 ], [ %fullElectVirial_zz.0, %497 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %348 ], [ %fullElectVirial_yz.3, %1339 ], [ %fullElectVirial_yz.0, %497 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %348 ], [ %fullElectVirial_yy.3, %1339 ], [ %fullElectVirial_yy.0, %497 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %348 ], [ %fullElectVirial_xz.3, %1339 ], [ %fullElectVirial_xz.0, %497 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %348 ], [ %fullElectVirial_xy.3, %1339 ], [ %fullElectVirial_xy.0, %497 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %348 ], [ %fullElectVirial_xx.3, %1339 ], [ %fullElectVirial_xx.0, %497 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %348 ], [ %virial_zz.2, %1339 ], [ %virial_zz.0, %497 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %348 ], [ %virial_yz.2, %1339 ], [ %virial_yz.0, %497 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %348 ], [ %virial_yy.2, %1339 ], [ %virial_yy.0, %497 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %348 ], [ %virial_xz.2, %1339 ], [ %virial_xz.0, %497 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %348 ], [ %virial_xy.2, %1339 ], [ %virial_xy.0, %497 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %348 ], [ %virial_xx.2, %1339 ], [ %virial_xx.0, %497 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %348 ], [ %730, %1339 ], [ %exclChecksum.0, %497 ]
  %1341 = add nsw i32 %i.2, 1
  br label %290

; <label>:1342                                    ; preds = %290
  %1343 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1344 = icmp ne i32* %51, %1343
  br i1 %1344, label %1345, label %1350

; <label>:1345                                    ; preds = %1342
  %1346 = icmp eq i32* %51, null
  br i1 %1346, label %1349, label %1347

; <label>:1347                                    ; preds = %1345
  %1348 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1348) #8
  br label %1349

; <label>:1349                                    ; preds = %1347, %1345
  br label %1350

; <label>:1350                                    ; preds = %1349, %1342
  %1351 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1352 = icmp ne i32* %65, %1351
  br i1 %1352, label %1353, label %1358

; <label>:1353                                    ; preds = %1350
  %1354 = icmp eq i32* %65, null
  br i1 %1354, label %1357, label %1355

; <label>:1355                                    ; preds = %1353
  %1356 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1356) #8
  br label %1357

; <label>:1357                                    ; preds = %1355, %1353
  br label %1358

; <label>:1358                                    ; preds = %1357, %1350
  %1359 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1360 = icmp ne i32* %79, %1359
  br i1 %1360, label %1361, label %1366

; <label>:1361                                    ; preds = %1358
  %1362 = icmp eq i32* %79, null
  br i1 %1362, label %1365, label %1363

; <label>:1363                                    ; preds = %1361
  %1364 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1364) #8
  br label %1365

; <label>:1365                                    ; preds = %1363, %1361
  br label %1366

; <label>:1366                                    ; preds = %1365, %1358
  %1367 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1368 = icmp ne i32* %208, %1367
  br i1 %1368, label %1369, label %1374

; <label>:1369                                    ; preds = %1366
  %1370 = icmp eq i32* %208, null
  br i1 %1370, label %1373, label %1371

; <label>:1371                                    ; preds = %1369
  %1372 = bitcast i32* %208 to i8*
  call void @_ZdaPv(i8* %1372) #8
  br label %1373

; <label>:1373                                    ; preds = %1371, %1369
  br label %1374

; <label>:1374                                    ; preds = %1373, %1366
  %1375 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1376 = icmp ne i32* %222, %1375
  br i1 %1376, label %1377, label %1382

; <label>:1377                                    ; preds = %1374
  %1378 = icmp eq i32* %222, null
  br i1 %1378, label %1381, label %1379

; <label>:1379                                    ; preds = %1377
  %1380 = bitcast i32* %222 to i8*
  call void @_ZdaPv(i8* %1380) #8
  br label %1381

; <label>:1381                                    ; preds = %1379, %1377
  br label %1382

; <label>:1382                                    ; preds = %1381, %1374
  %1383 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1384 = icmp ne i32* %236, %1383
  br i1 %1384, label %1385, label %1390

; <label>:1385                                    ; preds = %1382
  %1386 = icmp eq i32* %236, null
  br i1 %1386, label %1389, label %1387

; <label>:1387                                    ; preds = %1385
  %1388 = bitcast i32* %236 to i8*
  call void @_ZdaPv(i8* %1388) #8
  br label %1389

; <label>:1389                                    ; preds = %1387, %1385
  br label %1390

; <label>:1390                                    ; preds = %1389, %1382
  %1391 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1392 = icmp ne i32* %250, %1391
  br i1 %1392, label %1393, label %1398

; <label>:1393                                    ; preds = %1390
  %1394 = icmp eq i32* %250, null
  br i1 %1394, label %1397, label %1395

; <label>:1395                                    ; preds = %1393
  %1396 = bitcast i32* %250 to i8*
  call void @_ZdaPv(i8* %1396) #8
  br label %1397

; <label>:1397                                    ; preds = %1395, %1393
  br label %1398

; <label>:1398                                    ; preds = %1397, %1390
  %1399 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1400 = icmp ne i32* %264, %1399
  br i1 %1400, label %1401, label %1406

; <label>:1401                                    ; preds = %1398
  %1402 = icmp eq i32* %264, null
  br i1 %1402, label %1405, label %1403

; <label>:1403                                    ; preds = %1401
  %1404 = bitcast i32* %264 to i8*
  call void @_ZdaPv(i8* %1404) #8
  br label %1405

; <label>:1405                                    ; preds = %1403, %1401
  br label %1406

; <label>:1406                                    ; preds = %1405, %1398
  %1407 = sitofp i32 %exclChecksum.0 to double
  %1408 = getelementptr inbounds double* %6, i64 22
  %1409 = load double* %1408, align 8
  %1410 = fadd double %1409, %1407
  store double %1410, double* %1408, align 8
  %1411 = getelementptr inbounds double* %6, i64 3
  %1412 = load double* %1411, align 8
  %1413 = fadd double %1412, %virial_xx.0
  store double %1413, double* %1411, align 8
  %1414 = getelementptr inbounds double* %6, i64 4
  %1415 = load double* %1414, align 8
  %1416 = fadd double %1415, %virial_xy.0
  store double %1416, double* %1414, align 8
  %1417 = getelementptr inbounds double* %6, i64 5
  %1418 = load double* %1417, align 8
  %1419 = fadd double %1418, %virial_xz.0
  store double %1419, double* %1417, align 8
  %1420 = getelementptr inbounds double* %6, i64 6
  %1421 = load double* %1420, align 8
  %1422 = fadd double %1421, %virial_xy.0
  store double %1422, double* %1420, align 8
  %1423 = getelementptr inbounds double* %6, i64 7
  %1424 = load double* %1423, align 8
  %1425 = fadd double %1424, %virial_yy.0
  store double %1425, double* %1423, align 8
  %1426 = getelementptr inbounds double* %6, i64 8
  %1427 = load double* %1426, align 8
  %1428 = fadd double %1427, %virial_yz.0
  store double %1428, double* %1426, align 8
  %1429 = getelementptr inbounds double* %6, i64 9
  %1430 = load double* %1429, align 8
  %1431 = fadd double %1430, %virial_xz.0
  store double %1431, double* %1429, align 8
  %1432 = getelementptr inbounds double* %6, i64 10
  %1433 = load double* %1432, align 8
  %1434 = fadd double %1433, %virial_yz.0
  store double %1434, double* %1432, align 8
  %1435 = getelementptr inbounds double* %6, i64 11
  %1436 = load double* %1435, align 8
  %1437 = fadd double %1436, %virial_zz.0
  store double %1437, double* %1435, align 8
  %1438 = getelementptr inbounds double* %6, i64 12
  %1439 = load double* %1438, align 8
  %1440 = fadd double %1439, %fullElectVirial_xx.0
  store double %1440, double* %1438, align 8
  %1441 = getelementptr inbounds double* %6, i64 13
  %1442 = load double* %1441, align 8
  %1443 = fadd double %1442, %fullElectVirial_xy.0
  store double %1443, double* %1441, align 8
  %1444 = getelementptr inbounds double* %6, i64 14
  %1445 = load double* %1444, align 8
  %1446 = fadd double %1445, %fullElectVirial_xz.0
  store double %1446, double* %1444, align 8
  %1447 = getelementptr inbounds double* %6, i64 15
  %1448 = load double* %1447, align 8
  %1449 = fadd double %1448, %fullElectVirial_xy.0
  store double %1449, double* %1447, align 8
  %1450 = getelementptr inbounds double* %6, i64 16
  %1451 = load double* %1450, align 8
  %1452 = fadd double %1451, %fullElectVirial_yy.0
  store double %1452, double* %1450, align 8
  %1453 = getelementptr inbounds double* %6, i64 17
  %1454 = load double* %1453, align 8
  %1455 = fadd double %1454, %fullElectVirial_yz.0
  store double %1455, double* %1453, align 8
  %1456 = getelementptr inbounds double* %6, i64 18
  %1457 = load double* %1456, align 8
  %1458 = fadd double %1457, %fullElectVirial_xz.0
  store double %1458, double* %1456, align 8
  %1459 = getelementptr inbounds double* %6, i64 19
  %1460 = load double* %1459, align 8
  %1461 = fadd double %1460, %fullElectVirial_yz.0
  store double %1461, double* %1459, align 8
  %1462 = getelementptr inbounds double* %6, i64 20
  %1463 = load double* %1462, align 8
  %1464 = fadd double %1463, %fullElectVirial_zz.0
  store double %1464, double* %1462, align 8
  br label %1465

; <label>:1465                                    ; preds = %1406, %183, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil30calc_pair_energy_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.72, align 4
  %r2f32 = alloca %union.anon.73, align 4
  %r2f79 = alloca %union.anon.74, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1530

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %185

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  br label %139

; <label>:139                                     ; preds = %155, %138
  %all_fixed.2 = phi i32 [ %all_fixed.0, %138 ], [ %all_fixed.3, %155 ]
  %i.0 = phi i32 [ 0, %138 ], [ %156, %155 ]
  %140 = icmp ne i32 %all_fixed.2, 0
  br i1 %140, label %141, label %143

; <label>:141                                     ; preds = %139
  %142 = icmp slt i32 %i.0, %28
  br label %143

; <label>:143                                     ; preds = %141, %139
  %144 = phi i1 [ false, %139 ], [ %142, %141 ]
  br i1 %144, label %145, label %157

; <label>:145                                     ; preds = %143
  %146 = sext i32 %i.0 to i64
  %147 = getelementptr inbounds %struct.CompAtom* %34, i64 %146
  %148 = getelementptr inbounds %struct.CompAtom* %147, i32 0, i32 2
  %149 = load i32* %148, align 4
  %150 = lshr i32 %149, 26
  %151 = and i32 %150, 1
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

; <label>:153                                     ; preds = %145
  br label %154

; <label>:154                                     ; preds = %153, %145
  %all_fixed.3 = phi i32 [ %all_fixed.2, %145 ], [ 0, %153 ]
  br label %155

; <label>:155                                     ; preds = %154
  %156 = add nsw i32 %i.0, 1
  br label %139

; <label>:157                                     ; preds = %143
  %158 = icmp ne i32 %all_fixed.2, 0
  br i1 %158, label %159, label %184

; <label>:159                                     ; preds = %157
  %160 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %161 = icmp ne i32* %51, %160
  br i1 %161, label %162, label %167

; <label>:162                                     ; preds = %159
  %163 = icmp eq i32* %51, null
  br i1 %163, label %166, label %164

; <label>:164                                     ; preds = %162
  %165 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %165) #8
  br label %166

; <label>:166                                     ; preds = %164, %162
  br label %167

; <label>:167                                     ; preds = %166, %159
  %168 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %169 = icmp ne i32* %65, %168
  br i1 %169, label %170, label %175

; <label>:170                                     ; preds = %167
  %171 = icmp eq i32* %65, null
  br i1 %171, label %174, label %172

; <label>:172                                     ; preds = %170
  %173 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %173) #8
  br label %174

; <label>:174                                     ; preds = %172, %170
  br label %175

; <label>:175                                     ; preds = %174, %167
  %176 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %177 = icmp ne i32* %79, %176
  br i1 %177, label %178, label %183

; <label>:178                                     ; preds = %175
  %179 = icmp eq i32* %79, null
  br i1 %179, label %182, label %180

; <label>:180                                     ; preds = %178
  %181 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %181) #8
  br label %182

; <label>:182                                     ; preds = %180, %178
  br label %183

; <label>:183                                     ; preds = %182, %175
  br label %1530

; <label>:184                                     ; preds = %157
  br label %185

; <label>:185                                     ; preds = %184, %114
  %fixg.2 = phi i32 [ %fixg.0, %184 ], [ 0, %114 ]
  %186 = icmp ne i32 %fixg.2, 0
  br i1 %186, label %187, label %194

; <label>:187                                     ; preds = %185
  %188 = sub nsw i32 %fixg.2, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32* %65, i64 %189
  %191 = load i32* %190, align 4
  %192 = sext i32 %fixg.2 to i64
  %193 = getelementptr inbounds i32* %65, i64 %192
  store i32 %191, i32* %193, align 4
  br label %194

; <label>:194                                     ; preds = %187, %185
  %195 = icmp slt i32 %31, 1000
  br i1 %195, label %196, label %198

; <label>:196                                     ; preds = %194
  %197 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %207

; <label>:198                                     ; preds = %194
  %199 = add nsw i32 %31, 5
  %200 = sext i32 %199 to i64
  %201 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %200, i64 4)
  %202 = extractvalue { i64, i1 } %201, 1
  %203 = extractvalue { i64, i1 } %201, 0
  %204 = select i1 %202, i64 -1, i64 %203
  %205 = call noalias i8* @_Znam(i64 %204) #9
  %206 = bitcast i8* %205 to i32*
  br label %207

; <label>:207                                     ; preds = %198, %196
  %208 = phi i32* [ %197, %196 ], [ %206, %198 ]
  %209 = icmp slt i32 %31, 1000
  br i1 %209, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %221

; <label>:212                                     ; preds = %207
  %213 = add nsw i32 %31, 5
  %214 = sext i32 %213 to i64
  %215 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %214, i64 4)
  %216 = extractvalue { i64, i1 } %215, 1
  %217 = extractvalue { i64, i1 } %215, 0
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = call noalias i8* @_Znam(i64 %218) #9
  %220 = bitcast i8* %219 to i32*
  br label %221

; <label>:221                                     ; preds = %212, %210
  %222 = phi i32* [ %211, %210 ], [ %220, %212 ]
  %223 = icmp slt i32 %31, 1000
  br i1 %223, label %224, label %226

; <label>:224                                     ; preds = %221
  %225 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %235

; <label>:226                                     ; preds = %221
  %227 = add nsw i32 %31, 5
  %228 = sext i32 %227 to i64
  %229 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %228, i64 4)
  %230 = extractvalue { i64, i1 } %229, 1
  %231 = extractvalue { i64, i1 } %229, 0
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = call noalias i8* @_Znam(i64 %232) #9
  %234 = bitcast i8* %233 to i32*
  br label %235

; <label>:235                                     ; preds = %226, %224
  %236 = phi i32* [ %225, %224 ], [ %234, %226 ]
  %237 = icmp slt i32 %31, 1000
  br i1 %237, label %238, label %240

; <label>:238                                     ; preds = %235
  %239 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %249

; <label>:240                                     ; preds = %235
  %241 = add nsw i32 %31, 5
  %242 = sext i32 %241 to i64
  %243 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 4)
  %244 = extractvalue { i64, i1 } %243, 1
  %245 = extractvalue { i64, i1 } %243, 0
  %246 = select i1 %244, i64 -1, i64 %245
  %247 = call noalias i8* @_Znam(i64 %246) #9
  %248 = bitcast i8* %247 to i32*
  br label %249

; <label>:249                                     ; preds = %240, %238
  %250 = phi i32* [ %239, %238 ], [ %248, %240 ]
  %251 = icmp slt i32 %31, 1000
  br i1 %251, label %252, label %254

; <label>:252                                     ; preds = %249
  %253 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %263

; <label>:254                                     ; preds = %249
  %255 = add nsw i32 %31, 5
  %256 = sext i32 %255 to i64
  %257 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %256, i64 4)
  %258 = extractvalue { i64, i1 } %257, 1
  %259 = extractvalue { i64, i1 } %257, 0
  %260 = select i1 %258, i64 -1, i64 %259
  %261 = call noalias i8* @_Znam(i64 %260) #9
  %262 = bitcast i8* %261 to i32*
  br label %263

; <label>:263                                     ; preds = %254, %252
  %264 = phi i32* [ %253, %252 ], [ %262, %254 ]
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 0
  %267 = load %class.Vector** %266, align 8
  %268 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %269 = getelementptr inbounds [2 x %class.Vector*]* %268, i32 0, i64 1
  %270 = load %class.Vector** %269, align 8
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %272 = getelementptr inbounds [2 x %class.Vector*]* %271, i32 0, i64 0
  %273 = load %class.Vector** %272, align 8
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %275 = getelementptr inbounds [2 x %class.Vector*]* %274, i32 0, i64 1
  %276 = load %class.Vector** %275, align 8
  %277 = mul nsw i32 %28, %31
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %279 = load i32* %278, align 4
  %280 = mul nsw i32 %277, %279
  %281 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %282 = load i32* %281, align 4
  %283 = sdiv i32 %280, %282
  %284 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %285 = load i32* %284, align 4
  %286 = mul nsw i32 %277, %285
  %287 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %288 = load i32* %287, align 4
  %289 = sdiv i32 %286, %288
  br label %290

; <label>:290                                     ; preds = %1396, %263
  %pairlistindex.0 = phi i32 [ 0, %263 ], [ %pairlistindex.2, %1396 ]
  %pairlistoffset.0 = phi i32 [ 0, %263 ], [ %pairlistoffset.2, %1396 ]
  %pairCount.0 = phi i32 [ 0, %263 ], [ %pairCount.3, %1396 ]
  %i.1 = phi i32 [ 0, %263 ], [ %1397, %1396 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_zz.4, %1396 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yz.4, %1396 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yy.4, %1396 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xz.4, %1396 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xy.4, %1396 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xx.4, %1396 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectEnergy.4, %1396 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_zz.3, %1396 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yz.3, %1396 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yy.3, %1396 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xz.3, %1396 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xy.3, %1396 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xx.3, %1396 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %electEnergy.3, %1396 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %vdwEnergy.3, %1396 ]
  %exclChecksum.0 = phi i32 [ 0, %263 ], [ %exclChecksum.9, %1396 ]
  %291 = icmp slt i32 %i.1, %28
  br i1 %291, label %292, label %1398

; <label>:292                                     ; preds = %290
  %293 = sext i32 %i.1 to i64
  %294 = getelementptr inbounds %struct.CompAtom* %34, i64 %293
  %295 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %296 = load i32* %295, align 4
  %297 = and i32 %296, 4194303
  %298 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %297)
  %299 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 0
  %300 = load i32* %299, align 4
  %301 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 1
  %302 = load i32* %301, align 4
  %303 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 2
  %304 = load i8** %303, align 8
  %305 = sext i32 %300 to i64
  %306 = sub i64 0, %305
  %307 = getelementptr inbounds i8* %304, i64 %306
  %308 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %309 = getelementptr inbounds %class.Vector* %308, i32 0, i32 0
  %310 = load double* %309, align 8
  %311 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %312 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %313 = load double* %312, align 8
  %314 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %315 = getelementptr inbounds %class.Vector* %314, i32 0, i32 2
  %316 = load double* %315, align 8
  %317 = sext i32 %i.1 to i64
  %318 = getelementptr inbounds %class.Vector* %267, i64 %317
  %319 = sext i32 %i.1 to i64
  %320 = getelementptr inbounds %class.Vector* %273, i64 %319
  %321 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %322 = load i32* %321, align 4
  %323 = lshr i32 %322, 22
  %324 = and i32 %323, 7
  %325 = icmp ne i32 %324, 0
  br i1 %325, label %332, label %326

; <label>:326                                     ; preds = %292
  %327 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %328 = load i32* %327, align 4
  %329 = lshr i32 %328, 25
  %330 = and i32 %329, 1
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %332, label %502

; <label>:332                                     ; preds = %326, %292
  %333 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %334 = load i32* %333, align 4
  %335 = lshr i32 %334, 22
  %336 = and i32 %335, 7
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %352

; <label>:338                                     ; preds = %332
  %339 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %340 = load i32* %339, align 4
  %341 = lshr i32 %340, 22
  %342 = and i32 %341, 7
  %343 = mul nsw i32 %342, %31
  %344 = add nsw i32 %pairCount.0, %343
  %345 = icmp slt i32 %pairCount.0, %283
  br i1 %345, label %348, label %346

; <label>:346                                     ; preds = %338
  %347 = icmp sge i32 %pairCount.0, %289
  br i1 %347, label %348, label %351

; <label>:348                                     ; preds = %346, %338
  %349 = sub nsw i32 %342, 1
  %350 = add nsw i32 %i.1, %349
  br label %1396

; <label>:351                                     ; preds = %346
  br label %352

; <label>:352                                     ; preds = %351, %332
  %pairCount.1 = phi i32 [ %344, %351 ], [ %pairCount.0, %332 ]
  %353 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %354 = icmp ne i32 %353, 0
  br i1 %354, label %355, label %361

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %357 = load i32* %356, align 4
  %358 = lshr i32 %357, 27
  %359 = and i32 %358, 1
  %360 = icmp ne i32 %359, 0
  br label %361

; <label>:361                                     ; preds = %355, %352
  %362 = phi i1 [ false, %352 ], [ %360, %355 ]
  %363 = zext i1 %362 to i32
  %364 = sext i32 0 to i64
  %365 = getelementptr inbounds i32* %208, i64 %364
  %366 = icmp ne i32 %363, 0
  br i1 %366, label %367, label %368

; <label>:367                                     ; preds = %361
  br label %369

; <label>:368                                     ; preds = %361
  br label %369

; <label>:369                                     ; preds = %368, %367
  %370 = phi i32* [ %65, %367 ], [ %51, %368 ]
  %371 = icmp ne i32 %363, 0
  br i1 %371, label %372, label %373

; <label>:372                                     ; preds = %369
  br label %374

; <label>:373                                     ; preds = %369
  br label %374

; <label>:374                                     ; preds = %373, %372
  %375 = phi i32 [ %fixg.2, %372 ], [ %g.0, %373 ]
  %376 = icmp slt i32 0, %375
  br i1 %376, label %377, label %471

; <label>:377                                     ; preds = %374
  %378 = sext i32 0 to i64
  %379 = getelementptr inbounds i32* %370, i64 %378
  %380 = load i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.CompAtom* %37, i64 %381
  %383 = getelementptr inbounds %struct.CompAtom* %382, i32 0, i32 0
  %384 = getelementptr inbounds %class.Vector* %383, i32 0, i32 0
  %385 = load double* %384, align 8
  %386 = sext i32 %380 to i64
  %387 = getelementptr inbounds %struct.CompAtom* %37, i64 %386
  %388 = getelementptr inbounds %struct.CompAtom* %387, i32 0, i32 0
  %389 = getelementptr inbounds %class.Vector* %388, i32 0, i32 1
  %390 = load double* %389, align 8
  %391 = sext i32 %380 to i64
  %392 = getelementptr inbounds %struct.CompAtom* %37, i64 %391
  %393 = getelementptr inbounds %struct.CompAtom* %392, i32 0, i32 0
  %394 = getelementptr inbounds %class.Vector* %393, i32 0, i32 2
  %395 = load double* %394, align 8
  br label %396

; <label>:396                                     ; preds = %429, %377
  %g.3 = phi i32 [ 0, %377 ], [ %399, %429 ]
  %gli.0 = phi i32* [ %79, %377 ], [ %gli.1, %429 ]
  %j2.0 = phi i32 [ %380, %377 ], [ %402, %429 ]
  %p_j_x.0 = phi double [ %385, %377 ], [ %409, %429 ]
  %p_j_y.0 = phi double [ %390, %377 ], [ %417, %429 ]
  %p_j_z.0 = phi double [ %395, %377 ], [ %425, %429 ]
  %397 = icmp slt i32 %g.3, %375
  br i1 %397, label %398, label %430

; <label>:398                                     ; preds = %396
  %399 = add nsw i32 %g.3, 1
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32* %370, i64 %400
  %402 = load i32* %401, align 4
  %403 = fsub double %310, %p_j_x.0
  %404 = fmul double %403, %403
  %405 = sext i32 %402 to i64
  %406 = getelementptr inbounds %struct.CompAtom* %37, i64 %405
  %407 = getelementptr inbounds %struct.CompAtom* %406, i32 0, i32 0
  %408 = getelementptr inbounds %class.Vector* %407, i32 0, i32 0
  %409 = load double* %408, align 8
  %410 = fsub double %313, %p_j_y.0
  %411 = fmul double %410, %410
  %412 = fadd double %404, %411
  %413 = sext i32 %402 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %37, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 1
  %417 = load double* %416, align 8
  %418 = fsub double %316, %p_j_z.0
  %419 = fmul double %418, %418
  %420 = fadd double %412, %419
  %421 = sext i32 %402 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %37, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  %426 = fcmp ole double %420, %8
  br i1 %426, label %427, label %429

; <label>:427                                     ; preds = %398
  store i32 %j2.0, i32* %gli.0, align 4
  %428 = getelementptr inbounds i32* %gli.0, i32 1
  br label %429

; <label>:429                                     ; preds = %427, %398
  %gli.1 = phi i32* [ %428, %427 ], [ %gli.0, %398 ]
  br label %396

; <label>:430                                     ; preds = %396
  %431 = ptrtoint i32* %gli.0 to i64
  %432 = ptrtoint i32* %79 to i64
  %433 = sub i64 %431, %432
  %434 = sdiv exact i64 %433, 4
  %435 = trunc i64 %434 to i32
  br label %436

; <label>:436                                     ; preds = %468, %430
  %pli.0 = phi i32* [ %365, %430 ], [ %467, %468 ]
  %h.0 = phi i32 [ 0, %430 ], [ %469, %468 ]
  %437 = icmp slt i32 %h.0, %435
  br i1 %437, label %438, label %470

; <label>:438                                     ; preds = %436
  %439 = sext i32 %h.0 to i64
  %440 = getelementptr inbounds i32* %79, i64 %439
  %441 = load i32* %440, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %37, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 25
  %447 = and i32 %446, 1
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %450

; <label>:449                                     ; preds = %438
  br label %457

; <label>:450                                     ; preds = %438
  %451 = sext i32 %441 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %37, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 2
  %454 = load i32* %453, align 4
  %455 = lshr i32 %454, 22
  %456 = and i32 %455, 7
  br label %457

; <label>:457                                     ; preds = %450, %449
  %458 = phi i32 [ 1, %449 ], [ %456, %450 ]
  %459 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %441, i32* %459, align 4
  %460 = add nsw i32 %441, 1
  %461 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %460, i32* %461, align 4
  %462 = add nsw i32 %441, 2
  %463 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %462, i32* %463, align 4
  %464 = add nsw i32 %441, 3
  %465 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %464, i32* %465, align 4
  %466 = sext i32 %458 to i64
  %467 = getelementptr inbounds i32* %pli.0, i64 %466
  br label %468

; <label>:468                                     ; preds = %457
  %469 = add nsw i32 %h.0, 1
  br label %436

; <label>:470                                     ; preds = %436
  br label %471

; <label>:471                                     ; preds = %470, %374
  %pli.1 = phi i32* [ %pli.0, %470 ], [ %365, %374 ]
  %472 = ptrtoint i32* %pli.1 to i64
  %473 = ptrtoint i32* %208 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %478, label %485

; <label>:478                                     ; preds = %471
  %479 = sub nsw i32 %476, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i32* %208, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %476 to i64
  %484 = getelementptr inbounds i32* %208, i64 %483
  store i32 %482, i32* %484, align 4
  br label %501

; <label>:485                                     ; preds = %471
  %486 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %487 = load i32* %486, align 4
  %488 = lshr i32 %487, 25
  %489 = and i32 %488, 1
  %490 = icmp ne i32 %489, 0
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %485
  br label %497

; <label>:492                                     ; preds = %485
  %493 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %494 = load i32* %493, align 4
  %495 = lshr i32 %494, 22
  %496 = and i32 %495, 7
  br label %497

; <label>:497                                     ; preds = %492, %491
  %498 = phi i32 [ 1, %491 ], [ %496, %492 ]
  %499 = sub nsw i32 %498, 1
  %500 = add nsw i32 %i.1, %499
  br label %1396

; <label>:501                                     ; preds = %478
  br label %502

; <label>:502                                     ; preds = %501, %326
  %pairlistindex.1 = phi i32 [ %476, %501 ], [ %pairlistindex.0, %326 ]
  %pairlistoffset.1 = phi i32 [ 0, %501 ], [ %pairlistoffset.0, %326 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %501 ], [ %pairCount.0, %326 ]
  %503 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %504 = icmp ne i32 %503, 0
  br i1 %504, label %505, label %511

; <label>:505                                     ; preds = %502
  %506 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 26
  %509 = and i32 %508, 1
  %510 = icmp ne i32 %509, 0
  br label %511

; <label>:511                                     ; preds = %505, %502
  %512 = phi i1 [ false, %502 ], [ %510, %505 ]
  %513 = zext i1 %512 to i32
  %514 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %515 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %516 = add nsw i32 %515, 1
  %517 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %518 = load i32* %517, align 4
  %519 = lshr i32 %518, 28
  %520 = mul nsw i32 %516, %519
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds double* %514, i64 %521
  %523 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 1
  %524 = load float* %523, align 4
  %525 = fpext float %524 to double
  %526 = fmul double 3.320636e+02, %525
  %527 = fmul double %526, %16
  %528 = fmul double %527, %9
  %529 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %530 = load i32* %529, align 4
  %531 = and i32 %530, 4194303
  %532 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %531)
  %533 = zext i16 %532 to i32
  %534 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %533)
  %535 = icmp ne i32 %513, 0
  br i1 %535, label %536, label %598

; <label>:536                                     ; preds = %511
  br label %537

; <label>:537                                     ; preds = %595, %536
  %pli4.0 = phi i32* [ %222, %536 ], [ %pli4.2, %595 ]
  %plin.0 = phi i32* [ %236, %536 ], [ %plin.2, %595 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %536 ], [ %596, %595 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %536 ], [ %exclChecksum.3, %595 ]
  %538 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %538, label %539, label %597

; <label>:539                                     ; preds = %537
  %540 = sext i32 %k.0 to i64
  %541 = getelementptr inbounds i32* %208, i64 %540
  %542 = load i32* %541, align 4
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds %struct.CompAtom* %37, i64 %543
  %545 = getelementptr inbounds %struct.CompAtom* %544, i32 0, i32 0
  %546 = getelementptr inbounds %class.Vector* %545, i32 0, i32 0
  %547 = load double* %546, align 8
  %548 = fsub double %310, %547
  %549 = fmul double %548, %548
  %550 = sext i32 %542 to i64
  %551 = getelementptr inbounds %struct.CompAtom* %37, i64 %550
  %552 = getelementptr inbounds %struct.CompAtom* %551, i32 0, i32 0
  %553 = getelementptr inbounds %class.Vector* %552, i32 0, i32 1
  %554 = load double* %553, align 8
  %555 = fsub double %313, %554
  %556 = fmul double %555, %555
  %557 = fadd double %549, %556
  %558 = sext i32 %542 to i64
  %559 = getelementptr inbounds %struct.CompAtom* %37, i64 %558
  %560 = getelementptr inbounds %struct.CompAtom* %559, i32 0, i32 0
  %561 = getelementptr inbounds %class.Vector* %560, i32 0, i32 2
  %562 = load double* %561, align 8
  %563 = fsub double %316, %562
  %564 = fmul double %563, %563
  %565 = fadd double %557, %564
  %566 = sext i32 %542 to i64
  %567 = getelementptr inbounds %struct.CompAtom* %37, i64 %566
  %568 = getelementptr inbounds %struct.CompAtom* %567, i32 0, i32 2
  %569 = load i32* %568, align 4
  %570 = lshr i32 %569, 26
  %571 = and i32 %570, 1
  %572 = icmp ne i32 %571, 0
  br i1 %572, label %594, label %573

; <label>:573                                     ; preds = %539
  %574 = fcmp ole double %565, %7
  br i1 %574, label %575, label %594

; <label>:575                                     ; preds = %573
  %576 = fcmp ole double %565, %22
  br i1 %576, label %577, label %580

; <label>:577                                     ; preds = %575
  %578 = add nsw i32 %exclChecksum.1, 1
  %579 = icmp ne i32 %578, 0
  br i1 %579, label %594, label %580

; <label>:580                                     ; preds = %577, %575
  %exclChecksum.2 = phi i32 [ %578, %577 ], [ %exclChecksum.1, %575 ]
  %581 = sext i32 %542 to i64
  %582 = getelementptr inbounds %struct.CompAtom* %37, i64 %581
  %583 = getelementptr inbounds %struct.CompAtom* %582, i32 0, i32 2
  %584 = load i32* %583, align 4
  %585 = and i32 %584, 4194303
  %586 = icmp sge i32 %585, %300
  br i1 %586, label %587, label %591

; <label>:587                                     ; preds = %580
  %588 = icmp sle i32 %585, %302
  br i1 %588, label %589, label %591

; <label>:589                                     ; preds = %587
  %590 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %542, i32* %pli4.0, align 4
  br label %593

; <label>:591                                     ; preds = %587, %580
  %592 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %542, i32* %plin.0, align 4
  br label %593

; <label>:593                                     ; preds = %591, %589
  %pli4.1 = phi i32* [ %590, %589 ], [ %pli4.0, %591 ]
  %plin.1 = phi i32* [ %plin.0, %589 ], [ %592, %591 ]
  br label %594

; <label>:594                                     ; preds = %593, %577, %573, %539
  %pli4.2 = phi i32* [ %pli4.0, %539 ], [ %pli4.0, %577 ], [ %pli4.1, %593 ], [ %pli4.0, %573 ]
  %plin.2 = phi i32* [ %plin.0, %539 ], [ %plin.0, %577 ], [ %plin.1, %593 ], [ %plin.0, %573 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %539 ], [ %578, %577 ], [ %exclChecksum.2, %593 ], [ %exclChecksum.1, %573 ]
  br label %595

; <label>:595                                     ; preds = %594
  %596 = add nsw i32 %k.0, 1
  br label %537

; <label>:597                                     ; preds = %537
  br label %677

; <label>:598                                     ; preds = %511
  %599 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %599, label %600, label %676

; <label>:600                                     ; preds = %598
  %601 = sext i32 %pairlistoffset.1 to i64
  %602 = getelementptr inbounds i32* %208, i64 %601
  %603 = load i32* %602, align 4
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds %struct.CompAtom* %37, i64 %604
  %606 = getelementptr inbounds %struct.CompAtom* %605, i32 0, i32 0
  %607 = getelementptr inbounds %class.Vector* %606, i32 0, i32 0
  %608 = load double* %607, align 8
  %609 = sext i32 %603 to i64
  %610 = getelementptr inbounds %struct.CompAtom* %37, i64 %609
  %611 = getelementptr inbounds %struct.CompAtom* %610, i32 0, i32 0
  %612 = getelementptr inbounds %class.Vector* %611, i32 0, i32 1
  %613 = load double* %612, align 8
  %614 = sext i32 %603 to i64
  %615 = getelementptr inbounds %struct.CompAtom* %37, i64 %614
  %616 = getelementptr inbounds %struct.CompAtom* %615, i32 0, i32 0
  %617 = getelementptr inbounds %class.Vector* %616, i32 0, i32 2
  %618 = load double* %617, align 8
  %619 = sext i32 %603 to i64
  %620 = getelementptr inbounds %struct.CompAtom* %37, i64 %619
  %621 = getelementptr inbounds %struct.CompAtom* %620, i32 0, i32 2
  %622 = load i32* %621, align 4
  %623 = and i32 %622, 4194303
  br label %624

; <label>:624                                     ; preds = %669, %600
  %pli4.3 = phi i32* [ %222, %600 ], [ %pli4.5, %669 ]
  %plin.3 = phi i32* [ %236, %600 ], [ %plin.5, %669 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %600 ], [ %627, %669 ]
  %j211.0 = phi i32 [ %603, %600 ], [ %630, %669 ]
  %p_j_x12.0 = phi double [ %608, %600 ], [ %637, %669 ]
  %p_j_y13.0 = phi double [ %613, %600 ], [ %645, %669 ]
  %p_j_z14.0 = phi double [ %618, %600 ], [ %653, %669 ]
  %atom215.0 = phi i32 [ %623, %600 ], [ %674, %669 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %600 ], [ %exclChecksum.6, %669 ]
  %625 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %625, label %626, label %675

; <label>:626                                     ; preds = %624
  %627 = add nsw i32 %k10.0, 1
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i32* %208, i64 %628
  %630 = load i32* %629, align 4
  %631 = fsub double %310, %p_j_x12.0
  %632 = fmul double %631, %631
  %633 = sext i32 %630 to i64
  %634 = getelementptr inbounds %struct.CompAtom* %37, i64 %633
  %635 = getelementptr inbounds %struct.CompAtom* %634, i32 0, i32 0
  %636 = getelementptr inbounds %class.Vector* %635, i32 0, i32 0
  %637 = load double* %636, align 8
  %638 = fsub double %313, %p_j_y13.0
  %639 = fmul double %638, %638
  %640 = fadd double %632, %639
  %641 = sext i32 %630 to i64
  %642 = getelementptr inbounds %struct.CompAtom* %37, i64 %641
  %643 = getelementptr inbounds %struct.CompAtom* %642, i32 0, i32 0
  %644 = getelementptr inbounds %class.Vector* %643, i32 0, i32 1
  %645 = load double* %644, align 8
  %646 = fsub double %316, %p_j_z14.0
  %647 = fmul double %646, %646
  %648 = fadd double %640, %647
  %649 = sext i32 %630 to i64
  %650 = getelementptr inbounds %struct.CompAtom* %37, i64 %649
  %651 = getelementptr inbounds %struct.CompAtom* %650, i32 0, i32 0
  %652 = getelementptr inbounds %class.Vector* %651, i32 0, i32 2
  %653 = load double* %652, align 8
  %654 = fcmp ole double %648, %7
  br i1 %654, label %655, label %669

; <label>:655                                     ; preds = %626
  %656 = fcmp ole double %648, %22
  br i1 %656, label %657, label %660

; <label>:657                                     ; preds = %655
  %658 = add nsw i32 %exclChecksum.4, 1
  %659 = icmp ne i32 %658, 0
  br i1 %659, label %669, label %660

; <label>:660                                     ; preds = %657, %655
  %exclChecksum.5 = phi i32 [ %658, %657 ], [ %exclChecksum.4, %655 ]
  %661 = icmp sge i32 %atom215.0, %300
  br i1 %661, label %662, label %666

; <label>:662                                     ; preds = %660
  %663 = icmp sle i32 %atom215.0, %302
  br i1 %663, label %664, label %666

; <label>:664                                     ; preds = %662
  %665 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %668

; <label>:666                                     ; preds = %662, %660
  %667 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %668

; <label>:668                                     ; preds = %666, %664
  %pli4.4 = phi i32* [ %665, %664 ], [ %pli4.3, %666 ]
  %plin.4 = phi i32* [ %plin.3, %664 ], [ %667, %666 ]
  br label %669

; <label>:669                                     ; preds = %668, %657, %626
  %pli4.5 = phi i32* [ %pli4.3, %657 ], [ %pli4.4, %668 ], [ %pli4.3, %626 ]
  %plin.5 = phi i32* [ %plin.3, %657 ], [ %plin.4, %668 ], [ %plin.3, %626 ]
  %exclChecksum.6 = phi i32 [ %658, %657 ], [ %exclChecksum.5, %668 ], [ %exclChecksum.4, %626 ]
  %670 = sext i32 %630 to i64
  %671 = getelementptr inbounds %struct.CompAtom* %37, i64 %670
  %672 = getelementptr inbounds %struct.CompAtom* %671, i32 0, i32 2
  %673 = load i32* %672, align 4
  %674 = and i32 %673, 4194303
  br label %624

; <label>:675                                     ; preds = %624
  br label %676

; <label>:676                                     ; preds = %675, %598
  %pli4.6 = phi i32* [ %pli4.3, %675 ], [ %222, %598 ]
  %plin.6 = phi i32* [ %plin.3, %675 ], [ %236, %598 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %675 ], [ %exclChecksum.0, %598 ]
  br label %677

; <label>:677                                     ; preds = %676, %597
  %pli4.7 = phi i32* [ %pli4.0, %597 ], [ %pli4.6, %676 ]
  %plin.7 = phi i32* [ %plin.0, %597 ], [ %plin.6, %676 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %597 ], [ %exclChecksum.7, %676 ]
  %678 = ptrtoint i32* %pli4.7 to i64
  %679 = ptrtoint i32* %222 to i64
  %680 = sub i64 %678, %679
  %681 = sdiv exact i64 %680, 4
  %682 = trunc i64 %681 to i32
  %683 = icmp ne i32 %682, 0
  br i1 %683, label %684, label %691

; <label>:684                                     ; preds = %677
  %685 = sub nsw i32 %682, 1
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i32* %222, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %682 to i64
  %690 = getelementptr inbounds i32* %222, i64 %689
  store i32 %688, i32* %690, align 4
  br label %691

; <label>:691                                     ; preds = %684, %677
  br label %692

; <label>:692                                     ; preds = %714, %691
  %plin.8 = phi i32* [ %plin.7, %691 ], [ %plin.9, %714 ]
  %plix.0 = phi i32* [ %250, %691 ], [ %plix.1, %714 ]
  %plim.0 = phi i32* [ %264, %691 ], [ %plim.1, %714 ]
  %k18.0 = phi i32 [ 0, %691 ], [ %715, %714 ]
  %693 = icmp slt i32 %k18.0, %682
  br i1 %693, label %694, label %716

; <label>:694                                     ; preds = %692
  %695 = sext i32 %k18.0 to i64
  %696 = getelementptr inbounds i32* %222, i64 %695
  %697 = load i32* %696, align 4
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds %struct.CompAtom* %37, i64 %698
  %700 = getelementptr inbounds %struct.CompAtom* %699, i32 0, i32 2
  %701 = load i32* %700, align 4
  %702 = and i32 %701, 4194303
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i8* %307, i64 %703
  %705 = load i8* %704, align 1
  %706 = sext i8 %705 to i32
  switch i32 %706, label %713 [
    i32 0, label %707
    i32 1, label %709
    i32 2, label %711
  ]

; <label>:707                                     ; preds = %694
  %708 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %697, i32* %plin.8, align 4
  br label %713

; <label>:709                                     ; preds = %694
  %710 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %697, i32* %plix.0, align 4
  br label %713

; <label>:711                                     ; preds = %694
  %712 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %697, i32* %plim.0, align 4
  br label %713

; <label>:713                                     ; preds = %711, %709, %707, %694
  %plin.9 = phi i32* [ %plin.8, %694 ], [ %plin.8, %711 ], [ %plin.8, %709 ], [ %708, %707 ]
  %plix.1 = phi i32* [ %plix.0, %694 ], [ %plix.0, %711 ], [ %710, %709 ], [ %plix.0, %707 ]
  %plim.1 = phi i32* [ %plim.0, %694 ], [ %712, %711 ], [ %plim.0, %709 ], [ %plim.0, %707 ]
  br label %714

; <label>:714                                     ; preds = %713
  %715 = add nsw i32 %k18.0, 1
  br label %692

; <label>:716                                     ; preds = %692
  %717 = ptrtoint i32* %plix.0 to i64
  %718 = ptrtoint i32* %250 to i64
  %719 = sub i64 %717, %718
  %720 = sdiv exact i64 %719, 4
  %721 = sext i32 %exclChecksum.8 to i64
  %722 = add nsw i64 %721, %720
  %723 = trunc i64 %722 to i32
  %724 = ptrtoint i32* %plim.0 to i64
  %725 = ptrtoint i32* %264 to i64
  %726 = sub i64 %724, %725
  %727 = sdiv exact i64 %726, 4
  %728 = sext i32 %723 to i64
  %729 = add nsw i64 %728, %727
  %730 = trunc i64 %729 to i32
  %731 = ptrtoint i32* %plin.8 to i64
  %732 = ptrtoint i32* %236 to i64
  %733 = sub i64 %731, %732
  %734 = sdiv exact i64 %733, 4
  %735 = trunc i64 %734 to i32
  br label %736

; <label>:736                                     ; preds = %980, %716
  %k18.1 = phi i32 [ 0, %716 ], [ %981, %980 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %716 ], [ %973, %980 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %716 ], [ %964, %980 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %716 ], [ %962, %980 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %716 ], [ %953, %980 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %716 ], [ %951, %980 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %716 ], [ %949, %980 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %716 ], [ %936, %980 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %716 ], [ %912, %980 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %716 ], [ %903, %980 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %716 ], [ %901, %980 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %716 ], [ %892, %980 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %716 ], [ %890, %980 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %716 ], [ %888, %980 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %716 ], [ %871, %980 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %716 ], [ %853, %980 ]
  %737 = icmp slt i32 %k18.1, %735
  br i1 %737, label %738, label %982

; <label>:738                                     ; preds = %736
  %739 = sext i32 %k18.1 to i64
  %740 = getelementptr inbounds i32* %236, i64 %739
  %741 = load i32* %740, align 4
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds %struct.CompAtom* %37, i64 %742
  %744 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 0
  %745 = getelementptr inbounds %class.Vector* %744, i32 0, i32 0
  %746 = load double* %745, align 8
  %747 = fsub double %310, %746
  %748 = fmul double %747, %747
  %749 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 0
  %750 = getelementptr inbounds %class.Vector* %749, i32 0, i32 1
  %751 = load double* %750, align 8
  %752 = fsub double %313, %751
  %753 = fmul double %752, %752
  %754 = fadd double %748, %753
  %755 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 0
  %756 = getelementptr inbounds %class.Vector* %755, i32 0, i32 2
  %757 = load double* %756, align 8
  %758 = fsub double %316, %757
  %759 = fmul double %758, %758
  %760 = fadd double %754, %759
  %761 = fptrunc double %760 to float
  %762 = bitcast %union.anon.72* %r2f to float*
  store float %761, float* %762, align 4
  %763 = bitcast %union.anon.72* %r2f to i32*
  %764 = load i32* %763, align 4
  %765 = ashr i32 %764, 17
  %766 = add nsw i32 %765, %25
  %767 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 2
  %768 = load i32* %767, align 4
  %769 = and i32 %768, 4194303
  %770 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %769)
  %771 = zext i16 %770 to i32
  %772 = mul nsw i32 2, %771
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds %"struct.LJTable::TableEntry"* %534, i64 %773
  %775 = mul nsw i32 16, %766
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds double* %14, i64 %776
  %778 = getelementptr inbounds double* %777, i64 0
  %779 = load double* %778, align 8
  %780 = mul nsw i32 16, %766
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds double* %14, i64 %781
  %783 = getelementptr inbounds double* %782, i64 4
  %784 = getelementptr inbounds double* %783, i64 0
  %785 = load double* %784, align 8
  %786 = mul nsw i32 16, %766
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds double* %14, i64 %787
  %789 = getelementptr inbounds double* %788, i64 8
  %790 = getelementptr inbounds double* %789, i64 0
  %791 = load double* %790, align 8
  %792 = mul nsw i32 16, %766
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds double* %14, i64 %793
  %795 = getelementptr inbounds double* %794, i64 8
  %796 = getelementptr inbounds double* %795, i64 4
  %797 = getelementptr inbounds double* %796, i64 0
  %798 = load double* %797, align 8
  %799 = bitcast %union.anon.72* %r2f to i32*
  %800 = load i32* %799, align 4
  %801 = and i32 %800, -131072
  store i32 %801, i32* %799, align 4
  %802 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 1
  %803 = load float* %802, align 4
  %804 = fpext float %803 to double
  %805 = fmul double %528, %804
  %806 = bitcast %union.anon.72* %r2f to float*
  %807 = load float* %806, align 4
  %808 = fpext float %807 to double
  %809 = fsub double %760, %808
  %810 = getelementptr inbounds %struct.CompAtom* %743, i32 0, i32 2
  %811 = load i32* %810, align 4
  %812 = lshr i32 %811, 28
  %813 = zext i32 %812 to i64
  %814 = getelementptr inbounds double* %522, i64 %813
  %815 = load double* %814, align 8
  %816 = getelementptr inbounds %"struct.LJTable::TableEntry"* %774, i32 0, i32 0
  %817 = load double* %816, align 8
  %818 = fmul double %16, %817
  %819 = getelementptr inbounds %"struct.LJTable::TableEntry"* %774, i32 0, i32 1
  %820 = load double* %819, align 8
  %821 = fmul double %16, %820
  %822 = fmul double %818, %779
  %823 = fmul double %821, %785
  %824 = fsub double %822, %823
  %825 = getelementptr inbounds double* %777, i64 3
  %826 = load double* %825, align 8
  %827 = fmul double %818, %826
  %828 = getelementptr inbounds double* %783, i64 3
  %829 = load double* %828, align 8
  %830 = fmul double %821, %829
  %831 = fsub double %827, %830
  %832 = getelementptr inbounds double* %777, i64 2
  %833 = load double* %832, align 8
  %834 = fmul double %818, %833
  %835 = getelementptr inbounds double* %783, i64 2
  %836 = load double* %835, align 8
  %837 = fmul double %821, %836
  %838 = fsub double %834, %837
  %839 = getelementptr inbounds double* %777, i64 1
  %840 = load double* %839, align 8
  %841 = fmul double %818, %840
  %842 = getelementptr inbounds double* %783, i64 1
  %843 = load double* %842, align 8
  %844 = fmul double %821, %843
  %845 = fsub double %841, %844
  %846 = fmul double %809, %831
  %847 = fadd double %846, %838
  %848 = fmul double %847, %809
  %849 = fadd double %848, %845
  %850 = fmul double %849, %809
  %851 = fadd double %850, %824
  %852 = fmul double %815, %851
  %853 = fadd double %vdwEnergy.1, %852
  %854 = fmul double %791, %805
  %855 = getelementptr inbounds double* %789, i64 3
  %856 = load double* %855, align 8
  %857 = fmul double %805, %856
  %858 = getelementptr inbounds double* %789, i64 2
  %859 = load double* %858, align 8
  %860 = fmul double %805, %859
  %861 = getelementptr inbounds double* %789, i64 1
  %862 = load double* %861, align 8
  %863 = fmul double %805, %862
  %864 = fmul double %809, %857
  %865 = fadd double %864, %860
  %866 = fmul double %865, %809
  %867 = fadd double %866, %863
  %868 = fmul double %867, %809
  %869 = fadd double %868, %854
  %870 = fmul double %815, %869
  %871 = fadd double %electEnergy.1, %870
  %872 = fadd double %857, %831
  %873 = fadd double %860, %838
  %874 = fadd double %863, %845
  %875 = fadd double %854, %824
  %876 = fmul double 3.000000e+00, %809
  %877 = fmul double %876, %872
  %878 = fmul double 2.000000e+00, %873
  %879 = fadd double %877, %878
  %880 = fmul double %879, %809
  %881 = fadd double %880, %874
  %882 = fmul double -2.000000e+00, %815
  %883 = fmul double %882, %881
  %884 = sext i32 %741 to i64
  %885 = getelementptr inbounds %class.Vector* %270, i64 %884
  %886 = fmul double %883, %747
  %887 = fmul double %886, %747
  %888 = fadd double %virial_xx.1, %887
  %889 = fmul double %886, %752
  %890 = fadd double %virial_xy.1, %889
  %891 = fmul double %886, %758
  %892 = fadd double %virial_xz.1, %891
  %893 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %894 = load double* %893, align 8
  %895 = fadd double %894, %886
  store double %895, double* %893, align 8
  %896 = getelementptr inbounds %class.Vector* %885, i32 0, i32 0
  %897 = load double* %896, align 8
  %898 = fsub double %897, %886
  store double %898, double* %896, align 8
  %899 = fmul double %883, %752
  %900 = fmul double %899, %752
  %901 = fadd double %virial_yy.1, %900
  %902 = fmul double %899, %758
  %903 = fadd double %virial_yz.1, %902
  %904 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %905 = load double* %904, align 8
  %906 = fadd double %905, %899
  store double %906, double* %904, align 8
  %907 = getelementptr inbounds %class.Vector* %885, i32 0, i32 1
  %908 = load double* %907, align 8
  %909 = fsub double %908, %899
  store double %909, double* %907, align 8
  %910 = fmul double %883, %758
  %911 = fmul double %910, %758
  %912 = fadd double %virial_zz.1, %911
  %913 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %914 = load double* %913, align 8
  %915 = fadd double %914, %910
  store double %915, double* %913, align 8
  %916 = getelementptr inbounds %class.Vector* %885, i32 0, i32 2
  %917 = load double* %916, align 8
  %918 = fsub double %917, %910
  store double %918, double* %916, align 8
  %919 = getelementptr inbounds double* %796, i64 1
  %920 = load double* %919, align 8
  %921 = getelementptr inbounds double* %796, i64 2
  %922 = load double* %921, align 8
  %923 = getelementptr inbounds double* %796, i64 3
  %924 = load double* %923, align 8
  %925 = fmul double %924, %805
  %926 = fmul double %922, %805
  %927 = fmul double %920, %805
  %928 = fmul double %798, %805
  %929 = fmul double %809, %925
  %930 = fadd double %929, %926
  %931 = fmul double %930, %809
  %932 = fadd double %931, %927
  %933 = fmul double %932, %809
  %934 = fadd double %933, %928
  %935 = fmul double %815, %934
  %936 = fadd double %fullElectEnergy.1, %935
  %937 = fmul double 3.000000e+00, %809
  %938 = fmul double %937, %925
  %939 = fmul double 2.000000e+00, %926
  %940 = fadd double %938, %939
  %941 = fmul double %940, %809
  %942 = fadd double %941, %927
  %943 = fmul double -2.000000e+00, %942
  %944 = fmul double %943, %815
  %945 = sext i32 %741 to i64
  %946 = getelementptr inbounds %class.Vector* %276, i64 %945
  %947 = fmul double %944, %747
  %948 = fmul double %947, %747
  %949 = fadd double %fullElectVirial_xx.1, %948
  %950 = fmul double %947, %752
  %951 = fadd double %fullElectVirial_xy.1, %950
  %952 = fmul double %947, %758
  %953 = fadd double %fullElectVirial_xz.1, %952
  %954 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %955 = load double* %954, align 8
  %956 = fadd double %955, %947
  store double %956, double* %954, align 8
  %957 = getelementptr inbounds %class.Vector* %946, i32 0, i32 0
  %958 = load double* %957, align 8
  %959 = fsub double %958, %947
  store double %959, double* %957, align 8
  %960 = fmul double %944, %752
  %961 = fmul double %960, %752
  %962 = fadd double %fullElectVirial_yy.1, %961
  %963 = fmul double %960, %758
  %964 = fadd double %fullElectVirial_yz.1, %963
  %965 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %966 = load double* %965, align 8
  %967 = fadd double %966, %960
  store double %967, double* %965, align 8
  %968 = getelementptr inbounds %class.Vector* %946, i32 0, i32 1
  %969 = load double* %968, align 8
  %970 = fsub double %969, %960
  store double %970, double* %968, align 8
  %971 = fmul double %944, %758
  %972 = fmul double %971, %758
  %973 = fadd double %fullElectVirial_zz.1, %972
  %974 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %975 = load double* %974, align 8
  %976 = fadd double %975, %971
  store double %976, double* %974, align 8
  %977 = getelementptr inbounds %class.Vector* %946, i32 0, i32 2
  %978 = load double* %977, align 8
  %979 = fsub double %978, %971
  store double %979, double* %977, align 8
  br label %980

; <label>:980                                     ; preds = %738
  %981 = add nsw i32 %k18.1, 1
  br label %736

; <label>:982                                     ; preds = %736
  %983 = ptrtoint i32* %plim.0 to i64
  %984 = ptrtoint i32* %264 to i64
  %985 = sub i64 %983, %984
  %986 = sdiv exact i64 %985, 4
  %987 = trunc i64 %986 to i32
  br label %988

; <label>:988                                     ; preds = %1254, %982
  %k18.2 = phi i32 [ 0, %982 ], [ %1255, %1254 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %982 ], [ %1247, %1254 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %982 ], [ %1238, %1254 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %982 ], [ %1236, %1254 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %982 ], [ %1227, %1254 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %982 ], [ %1225, %1254 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %982 ], [ %1223, %1254 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %982 ], [ %1210, %1254 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %982 ], [ %1167, %1254 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %982 ], [ %1158, %1254 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %982 ], [ %1156, %1254 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %982 ], [ %1147, %1254 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %982 ], [ %1145, %1254 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %982 ], [ %1143, %1254 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %982 ], [ %1126, %1254 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %982 ], [ %1106, %1254 ]
  %989 = icmp slt i32 %k18.2, %987
  br i1 %989, label %990, label %1256

; <label>:990                                     ; preds = %988
  %991 = sext i32 %k18.2 to i64
  %992 = getelementptr inbounds i32* %264, i64 %991
  %993 = load i32* %992, align 4
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds %struct.CompAtom* %37, i64 %994
  %996 = getelementptr inbounds %struct.CompAtom* %995, i32 0, i32 0
  %997 = getelementptr inbounds %class.Vector* %996, i32 0, i32 0
  %998 = load double* %997, align 8
  %999 = fsub double %310, %998
  %1000 = fmul double %999, %999
  %1001 = getelementptr inbounds %struct.CompAtom* %995, i32 0, i32 0
  %1002 = getelementptr inbounds %class.Vector* %1001, i32 0, i32 1
  %1003 = load double* %1002, align 8
  %1004 = fsub double %313, %1003
  %1005 = fmul double %1004, %1004
  %1006 = fadd double %1000, %1005
  %1007 = getelementptr inbounds %struct.CompAtom* %995, i32 0, i32 0
  %1008 = getelementptr inbounds %class.Vector* %1007, i32 0, i32 2
  %1009 = load double* %1008, align 8
  %1010 = fsub double %316, %1009
  %1011 = fmul double %1010, %1010
  %1012 = fadd double %1006, %1011
  %1013 = fptrunc double %1012 to float
  %1014 = bitcast %union.anon.73* %r2f32 to float*
  store float %1013, float* %1014, align 4
  %1015 = bitcast %union.anon.73* %r2f32 to i32*
  %1016 = load i32* %1015, align 4
  %1017 = ashr i32 %1016, 17
  %1018 = add nsw i32 %1017, %25
  %1019 = getelementptr inbounds %struct.CompAtom* %995, i32 0, i32 2
  %1020 = load i32* %1019, align 4
  %1021 = and i32 %1020, 4194303
  %1022 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1021)
  %1023 = zext i16 %1022 to i32
  %1024 = mul nsw i32 2, %1023
  %1025 = sext i32 %1024 to i64
  %1026 = getelementptr inbounds %"struct.LJTable::TableEntry"* %534, i64 %1025
  %1027 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1026, i64 1
  %1028 = mul nsw i32 16, %1018
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds double* %14, i64 %1029
  %1031 = getelementptr inbounds double* %1030, i64 0
  %1032 = load double* %1031, align 8
  %1033 = mul nsw i32 16, %1018
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds double* %14, i64 %1034
  %1036 = getelementptr inbounds double* %1035, i64 4
  %1037 = getelementptr inbounds double* %1036, i64 0
  %1038 = load double* %1037, align 8
  %1039 = mul nsw i32 16, %1018
  %1040 = sext i32 %1039 to i64
  %1041 = getelementptr inbounds double* %14, i64 %1040
  %1042 = getelementptr inbounds double* %1041, i64 8
  %1043 = getelementptr inbounds double* %1042, i64 0
  %1044 = load double* %1043, align 8
  %1045 = mul nsw i32 16, %1018
  %1046 = sext i32 %1045 to i64
  %1047 = getelementptr inbounds double* %14, i64 %1046
  %1048 = getelementptr inbounds double* %1047, i64 8
  %1049 = getelementptr inbounds double* %1048, i64 4
  %1050 = getelementptr inbounds double* %1049, i64 0
  %1051 = load double* %1050, align 8
  %1052 = bitcast %union.anon.73* %r2f32 to i32*
  %1053 = load i32* %1052, align 4
  %1054 = and i32 %1053, -131072
  store i32 %1054, i32* %1052, align 4
  %1055 = getelementptr inbounds %struct.CompAtom* %995, i32 0, i32 1
  %1056 = load float* %1055, align 4
  %1057 = fpext float %1056 to double
  %1058 = fmul double %528, %1057
  %1059 = bitcast %union.anon.73* %r2f32 to float*
  %1060 = load float* %1059, align 4
  %1061 = fpext float %1060 to double
  %1062 = fsub double %1012, %1061
  %1063 = getelementptr inbounds %struct.CompAtom* %995, i32 0, i32 2
  %1064 = load i32* %1063, align 4
  %1065 = lshr i32 %1064, 28
  %1066 = zext i32 %1065 to i64
  %1067 = getelementptr inbounds double* %522, i64 %1066
  %1068 = load double* %1067, align 8
  %1069 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1027, i32 0, i32 0
  %1070 = load double* %1069, align 8
  %1071 = fmul double %16, %1070
  %1072 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1027, i32 0, i32 1
  %1073 = load double* %1072, align 8
  %1074 = fmul double %16, %1073
  %1075 = fmul double %1071, %1032
  %1076 = fmul double %1074, %1038
  %1077 = fsub double %1075, %1076
  %1078 = getelementptr inbounds double* %1030, i64 3
  %1079 = load double* %1078, align 8
  %1080 = fmul double %1071, %1079
  %1081 = getelementptr inbounds double* %1036, i64 3
  %1082 = load double* %1081, align 8
  %1083 = fmul double %1074, %1082
  %1084 = fsub double %1080, %1083
  %1085 = getelementptr inbounds double* %1030, i64 2
  %1086 = load double* %1085, align 8
  %1087 = fmul double %1071, %1086
  %1088 = getelementptr inbounds double* %1036, i64 2
  %1089 = load double* %1088, align 8
  %1090 = fmul double %1074, %1089
  %1091 = fsub double %1087, %1090
  %1092 = getelementptr inbounds double* %1030, i64 1
  %1093 = load double* %1092, align 8
  %1094 = fmul double %1071, %1093
  %1095 = getelementptr inbounds double* %1036, i64 1
  %1096 = load double* %1095, align 8
  %1097 = fmul double %1074, %1096
  %1098 = fsub double %1094, %1097
  %1099 = fmul double %1062, %1084
  %1100 = fadd double %1099, %1091
  %1101 = fmul double %1100, %1062
  %1102 = fadd double %1101, %1098
  %1103 = fmul double %1102, %1062
  %1104 = fadd double %1103, %1077
  %1105 = fmul double %1068, %1104
  %1106 = fadd double %vdwEnergy.2, %1105
  %1107 = fsub double 1.000000e+00, %18
  %1108 = fmul double %1107, %1058
  %1109 = fmul double %1044, %1108
  %1110 = getelementptr inbounds double* %1042, i64 3
  %1111 = load double* %1110, align 8
  %1112 = fmul double %1108, %1111
  %1113 = getelementptr inbounds double* %1042, i64 2
  %1114 = load double* %1113, align 8
  %1115 = fmul double %1108, %1114
  %1116 = getelementptr inbounds double* %1042, i64 1
  %1117 = load double* %1116, align 8
  %1118 = fmul double %1108, %1117
  %1119 = fmul double %1062, %1112
  %1120 = fadd double %1119, %1115
  %1121 = fmul double %1120, %1062
  %1122 = fadd double %1121, %1118
  %1123 = fmul double %1122, %1062
  %1124 = fadd double %1123, %1109
  %1125 = fmul double %1068, %1124
  %1126 = fadd double %electEnergy.2, %1125
  %1127 = fadd double %1112, %1084
  %1128 = fadd double %1115, %1091
  %1129 = fadd double %1118, %1098
  %1130 = fadd double %1109, %1077
  %1131 = fmul double 3.000000e+00, %1062
  %1132 = fmul double %1131, %1127
  %1133 = fmul double 2.000000e+00, %1128
  %1134 = fadd double %1132, %1133
  %1135 = fmul double %1134, %1062
  %1136 = fadd double %1135, %1129
  %1137 = fmul double -2.000000e+00, %1068
  %1138 = fmul double %1137, %1136
  %1139 = sext i32 %993 to i64
  %1140 = getelementptr inbounds %class.Vector* %270, i64 %1139
  %1141 = fmul double %1138, %999
  %1142 = fmul double %1141, %999
  %1143 = fadd double %virial_xx.2, %1142
  %1144 = fmul double %1141, %1004
  %1145 = fadd double %virial_xy.2, %1144
  %1146 = fmul double %1141, %1010
  %1147 = fadd double %virial_xz.2, %1146
  %1148 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %1149 = load double* %1148, align 8
  %1150 = fadd double %1149, %1141
  store double %1150, double* %1148, align 8
  %1151 = getelementptr inbounds %class.Vector* %1140, i32 0, i32 0
  %1152 = load double* %1151, align 8
  %1153 = fsub double %1152, %1141
  store double %1153, double* %1151, align 8
  %1154 = fmul double %1138, %1004
  %1155 = fmul double %1154, %1004
  %1156 = fadd double %virial_yy.2, %1155
  %1157 = fmul double %1154, %1010
  %1158 = fadd double %virial_yz.2, %1157
  %1159 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %1160 = load double* %1159, align 8
  %1161 = fadd double %1160, %1154
  store double %1161, double* %1159, align 8
  %1162 = getelementptr inbounds %class.Vector* %1140, i32 0, i32 1
  %1163 = load double* %1162, align 8
  %1164 = fsub double %1163, %1154
  store double %1164, double* %1162, align 8
  %1165 = fmul double %1138, %1010
  %1166 = fmul double %1165, %1010
  %1167 = fadd double %virial_zz.2, %1166
  %1168 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %1169 = load double* %1168, align 8
  %1170 = fadd double %1169, %1165
  store double %1170, double* %1168, align 8
  %1171 = getelementptr inbounds %class.Vector* %1140, i32 0, i32 2
  %1172 = load double* %1171, align 8
  %1173 = fsub double %1172, %1165
  store double %1173, double* %1171, align 8
  %1174 = getelementptr inbounds double* %1049, i64 1
  %1175 = load double* %1174, align 8
  %1176 = getelementptr inbounds double* %1049, i64 2
  %1177 = load double* %1176, align 8
  %1178 = getelementptr inbounds double* %1049, i64 3
  %1179 = load double* %1178, align 8
  %1180 = mul nsw i32 4, %1018
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds double* %15, i64 %1181
  %1183 = getelementptr inbounds double* %1182, i64 0
  %1184 = load double* %1183, align 8
  %1185 = fmul double %18, %1184
  %1186 = fsub double %1051, %1185
  %1187 = getelementptr inbounds double* %1182, i64 1
  %1188 = load double* %1187, align 8
  %1189 = fmul double %18, %1188
  %1190 = fsub double %1175, %1189
  %1191 = getelementptr inbounds double* %1182, i64 2
  %1192 = load double* %1191, align 8
  %1193 = fmul double %18, %1192
  %1194 = fsub double %1177, %1193
  %1195 = getelementptr inbounds double* %1182, i64 3
  %1196 = load double* %1195, align 8
  %1197 = fmul double %18, %1196
  %1198 = fsub double %1179, %1197
  %1199 = fmul double %1198, %1058
  %1200 = fmul double %1194, %1058
  %1201 = fmul double %1190, %1058
  %1202 = fmul double %1186, %1058
  %1203 = fmul double %1062, %1199
  %1204 = fadd double %1203, %1200
  %1205 = fmul double %1204, %1062
  %1206 = fadd double %1205, %1201
  %1207 = fmul double %1206, %1062
  %1208 = fadd double %1207, %1202
  %1209 = fmul double %1068, %1208
  %1210 = fadd double %fullElectEnergy.2, %1209
  %1211 = fmul double 3.000000e+00, %1062
  %1212 = fmul double %1211, %1199
  %1213 = fmul double 2.000000e+00, %1200
  %1214 = fadd double %1212, %1213
  %1215 = fmul double %1214, %1062
  %1216 = fadd double %1215, %1201
  %1217 = fmul double -2.000000e+00, %1216
  %1218 = fmul double %1217, %1068
  %1219 = sext i32 %993 to i64
  %1220 = getelementptr inbounds %class.Vector* %276, i64 %1219
  %1221 = fmul double %1218, %999
  %1222 = fmul double %1221, %999
  %1223 = fadd double %fullElectVirial_xx.2, %1222
  %1224 = fmul double %1221, %1004
  %1225 = fadd double %fullElectVirial_xy.2, %1224
  %1226 = fmul double %1221, %1010
  %1227 = fadd double %fullElectVirial_xz.2, %1226
  %1228 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1229 = load double* %1228, align 8
  %1230 = fadd double %1229, %1221
  store double %1230, double* %1228, align 8
  %1231 = getelementptr inbounds %class.Vector* %1220, i32 0, i32 0
  %1232 = load double* %1231, align 8
  %1233 = fsub double %1232, %1221
  store double %1233, double* %1231, align 8
  %1234 = fmul double %1218, %1004
  %1235 = fmul double %1234, %1004
  %1236 = fadd double %fullElectVirial_yy.2, %1235
  %1237 = fmul double %1234, %1010
  %1238 = fadd double %fullElectVirial_yz.2, %1237
  %1239 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1240 = load double* %1239, align 8
  %1241 = fadd double %1240, %1234
  store double %1241, double* %1239, align 8
  %1242 = getelementptr inbounds %class.Vector* %1220, i32 0, i32 1
  %1243 = load double* %1242, align 8
  %1244 = fsub double %1243, %1234
  store double %1244, double* %1242, align 8
  %1245 = fmul double %1218, %1010
  %1246 = fmul double %1245, %1010
  %1247 = fadd double %fullElectVirial_zz.2, %1246
  %1248 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1249 = load double* %1248, align 8
  %1250 = fadd double %1249, %1245
  store double %1250, double* %1248, align 8
  %1251 = getelementptr inbounds %class.Vector* %1220, i32 0, i32 2
  %1252 = load double* %1251, align 8
  %1253 = fsub double %1252, %1245
  store double %1253, double* %1251, align 8
  br label %1254

; <label>:1254                                    ; preds = %990
  %1255 = add nsw i32 %k18.2, 1
  br label %988

; <label>:1256                                    ; preds = %988
  %1257 = ptrtoint i32* %plix.0 to i64
  %1258 = ptrtoint i32* %250 to i64
  %1259 = sub i64 %1257, %1258
  %1260 = sdiv exact i64 %1259, 4
  %1261 = trunc i64 %1260 to i32
  br label %1262

; <label>:1262                                    ; preds = %1393, %1256
  %k18.3 = phi i32 [ 0, %1256 ], [ %1394, %1393 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1256 ], [ %1386, %1393 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1256 ], [ %1377, %1393 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1256 ], [ %1375, %1393 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1256 ], [ %1366, %1393 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1256 ], [ %1364, %1393 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1256 ], [ %1362, %1393 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1256 ], [ %1349, %1393 ]
  %1263 = icmp slt i32 %k18.3, %1261
  br i1 %1263, label %1264, label %1395

; <label>:1264                                    ; preds = %1262
  %1265 = sext i32 %k18.3 to i64
  %1266 = getelementptr inbounds i32* %250, i64 %1265
  %1267 = load i32* %1266, align 4
  %1268 = sext i32 %1267 to i64
  %1269 = getelementptr inbounds %struct.CompAtom* %37, i64 %1268
  %1270 = getelementptr inbounds %struct.CompAtom* %1269, i32 0, i32 0
  %1271 = getelementptr inbounds %class.Vector* %1270, i32 0, i32 0
  %1272 = load double* %1271, align 8
  %1273 = fsub double %310, %1272
  %1274 = fmul double %1273, %1273
  %1275 = getelementptr inbounds %struct.CompAtom* %1269, i32 0, i32 0
  %1276 = getelementptr inbounds %class.Vector* %1275, i32 0, i32 1
  %1277 = load double* %1276, align 8
  %1278 = fsub double %313, %1277
  %1279 = fmul double %1278, %1278
  %1280 = fadd double %1274, %1279
  %1281 = getelementptr inbounds %struct.CompAtom* %1269, i32 0, i32 0
  %1282 = getelementptr inbounds %class.Vector* %1281, i32 0, i32 2
  %1283 = load double* %1282, align 8
  %1284 = fsub double %316, %1283
  %1285 = fmul double %1284, %1284
  %1286 = fadd double %1280, %1285
  %1287 = fptrunc double %1286 to float
  %1288 = bitcast %union.anon.74* %r2f79 to float*
  store float %1287, float* %1288, align 4
  %1289 = bitcast %union.anon.74* %r2f79 to i32*
  %1290 = load i32* %1289, align 4
  %1291 = ashr i32 %1290, 17
  %1292 = add nsw i32 %1291, %25
  %1293 = mul nsw i32 16, %1292
  %1294 = sext i32 %1293 to i64
  %1295 = getelementptr inbounds double* %14, i64 %1294
  %1296 = getelementptr inbounds double* %1295, i64 8
  %1297 = getelementptr inbounds double* %1296, i64 4
  %1298 = getelementptr inbounds double* %1297, i64 0
  %1299 = load double* %1298, align 8
  %1300 = bitcast %union.anon.74* %r2f79 to i32*
  %1301 = load i32* %1300, align 4
  %1302 = and i32 %1301, -131072
  store i32 %1302, i32* %1300, align 4
  %1303 = getelementptr inbounds %struct.CompAtom* %1269, i32 0, i32 1
  %1304 = load float* %1303, align 4
  %1305 = fpext float %1304 to double
  %1306 = fmul double %528, %1305
  %1307 = bitcast %union.anon.74* %r2f79 to float*
  %1308 = load float* %1307, align 4
  %1309 = fpext float %1308 to double
  %1310 = fsub double %1286, %1309
  %1311 = getelementptr inbounds %struct.CompAtom* %1269, i32 0, i32 2
  %1312 = load i32* %1311, align 4
  %1313 = lshr i32 %1312, 28
  %1314 = zext i32 %1313 to i64
  %1315 = getelementptr inbounds double* %522, i64 %1314
  %1316 = load double* %1315, align 8
  %1317 = getelementptr inbounds double* %1297, i64 1
  %1318 = load double* %1317, align 8
  %1319 = getelementptr inbounds double* %1297, i64 2
  %1320 = load double* %1319, align 8
  %1321 = getelementptr inbounds double* %1297, i64 3
  %1322 = load double* %1321, align 8
  %1323 = mul nsw i32 4, %1292
  %1324 = sext i32 %1323 to i64
  %1325 = getelementptr inbounds double* %15, i64 %1324
  %1326 = getelementptr inbounds double* %1325, i64 0
  %1327 = load double* %1326, align 8
  %1328 = fsub double %1299, %1327
  %1329 = getelementptr inbounds double* %1325, i64 1
  %1330 = load double* %1329, align 8
  %1331 = fsub double %1318, %1330
  %1332 = getelementptr inbounds double* %1325, i64 2
  %1333 = load double* %1332, align 8
  %1334 = fsub double %1320, %1333
  %1335 = getelementptr inbounds double* %1325, i64 3
  %1336 = load double* %1335, align 8
  %1337 = fsub double %1322, %1336
  %1338 = fmul double %1337, %1306
  %1339 = fmul double %1334, %1306
  %1340 = fmul double %1331, %1306
  %1341 = fmul double %1328, %1306
  %1342 = fmul double %1310, %1338
  %1343 = fadd double %1342, %1339
  %1344 = fmul double %1343, %1310
  %1345 = fadd double %1344, %1340
  %1346 = fmul double %1345, %1310
  %1347 = fadd double %1346, %1341
  %1348 = fmul double %1316, %1347
  %1349 = fadd double %fullElectEnergy.3, %1348
  %1350 = fmul double 3.000000e+00, %1310
  %1351 = fmul double %1350, %1338
  %1352 = fmul double 2.000000e+00, %1339
  %1353 = fadd double %1351, %1352
  %1354 = fmul double %1353, %1310
  %1355 = fadd double %1354, %1340
  %1356 = fmul double -2.000000e+00, %1355
  %1357 = fmul double %1356, %1316
  %1358 = sext i32 %1267 to i64
  %1359 = getelementptr inbounds %class.Vector* %276, i64 %1358
  %1360 = fmul double %1357, %1273
  %1361 = fmul double %1360, %1273
  %1362 = fadd double %fullElectVirial_xx.3, %1361
  %1363 = fmul double %1360, %1278
  %1364 = fadd double %fullElectVirial_xy.3, %1363
  %1365 = fmul double %1360, %1284
  %1366 = fadd double %fullElectVirial_xz.3, %1365
  %1367 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1368 = load double* %1367, align 8
  %1369 = fadd double %1368, %1360
  store double %1369, double* %1367, align 8
  %1370 = getelementptr inbounds %class.Vector* %1359, i32 0, i32 0
  %1371 = load double* %1370, align 8
  %1372 = fsub double %1371, %1360
  store double %1372, double* %1370, align 8
  %1373 = fmul double %1357, %1278
  %1374 = fmul double %1373, %1278
  %1375 = fadd double %fullElectVirial_yy.3, %1374
  %1376 = fmul double %1373, %1284
  %1377 = fadd double %fullElectVirial_yz.3, %1376
  %1378 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1379 = load double* %1378, align 8
  %1380 = fadd double %1379, %1373
  store double %1380, double* %1378, align 8
  %1381 = getelementptr inbounds %class.Vector* %1359, i32 0, i32 1
  %1382 = load double* %1381, align 8
  %1383 = fsub double %1382, %1373
  store double %1383, double* %1381, align 8
  %1384 = fmul double %1357, %1284
  %1385 = fmul double %1384, %1284
  %1386 = fadd double %fullElectVirial_zz.3, %1385
  %1387 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1388 = load double* %1387, align 8
  %1389 = fadd double %1388, %1384
  store double %1389, double* %1387, align 8
  %1390 = getelementptr inbounds %class.Vector* %1359, i32 0, i32 2
  %1391 = load double* %1390, align 8
  %1392 = fsub double %1391, %1384
  store double %1392, double* %1390, align 8
  br label %1393

; <label>:1393                                    ; preds = %1264
  %1394 = add nsw i32 %k18.3, 1
  br label %1262

; <label>:1395                                    ; preds = %1262
  br label %1396

; <label>:1396                                    ; preds = %1395, %497, %348
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %348 ], [ %pairlistindex.1, %1395 ], [ %476, %497 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %348 ], [ %pairlistoffset.1, %1395 ], [ 0, %497 ]
  %pairCount.3 = phi i32 [ %344, %348 ], [ %pairCount.2, %1395 ], [ %pairCount.1, %497 ]
  %i.2 = phi i32 [ %350, %348 ], [ %i.1, %1395 ], [ %500, %497 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %348 ], [ %fullElectVirial_zz.3, %1395 ], [ %fullElectVirial_zz.0, %497 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %348 ], [ %fullElectVirial_yz.3, %1395 ], [ %fullElectVirial_yz.0, %497 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %348 ], [ %fullElectVirial_yy.3, %1395 ], [ %fullElectVirial_yy.0, %497 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %348 ], [ %fullElectVirial_xz.3, %1395 ], [ %fullElectVirial_xz.0, %497 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %348 ], [ %fullElectVirial_xy.3, %1395 ], [ %fullElectVirial_xy.0, %497 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %348 ], [ %fullElectVirial_xx.3, %1395 ], [ %fullElectVirial_xx.0, %497 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %348 ], [ %fullElectEnergy.3, %1395 ], [ %fullElectEnergy.0, %497 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %348 ], [ %virial_zz.2, %1395 ], [ %virial_zz.0, %497 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %348 ], [ %virial_yz.2, %1395 ], [ %virial_yz.0, %497 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %348 ], [ %virial_yy.2, %1395 ], [ %virial_yy.0, %497 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %348 ], [ %virial_xz.2, %1395 ], [ %virial_xz.0, %497 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %348 ], [ %virial_xy.2, %1395 ], [ %virial_xy.0, %497 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %348 ], [ %virial_xx.2, %1395 ], [ %virial_xx.0, %497 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %348 ], [ %electEnergy.2, %1395 ], [ %electEnergy.0, %497 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %348 ], [ %vdwEnergy.2, %1395 ], [ %vdwEnergy.0, %497 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %348 ], [ %730, %1395 ], [ %exclChecksum.0, %497 ]
  %1397 = add nsw i32 %i.2, 1
  br label %290

; <label>:1398                                    ; preds = %290
  %1399 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1400 = icmp ne i32* %51, %1399
  br i1 %1400, label %1401, label %1406

; <label>:1401                                    ; preds = %1398
  %1402 = icmp eq i32* %51, null
  br i1 %1402, label %1405, label %1403

; <label>:1403                                    ; preds = %1401
  %1404 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1404) #8
  br label %1405

; <label>:1405                                    ; preds = %1403, %1401
  br label %1406

; <label>:1406                                    ; preds = %1405, %1398
  %1407 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1408 = icmp ne i32* %65, %1407
  br i1 %1408, label %1409, label %1414

; <label>:1409                                    ; preds = %1406
  %1410 = icmp eq i32* %65, null
  br i1 %1410, label %1413, label %1411

; <label>:1411                                    ; preds = %1409
  %1412 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1412) #8
  br label %1413

; <label>:1413                                    ; preds = %1411, %1409
  br label %1414

; <label>:1414                                    ; preds = %1413, %1406
  %1415 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1416 = icmp ne i32* %79, %1415
  br i1 %1416, label %1417, label %1422

; <label>:1417                                    ; preds = %1414
  %1418 = icmp eq i32* %79, null
  br i1 %1418, label %1421, label %1419

; <label>:1419                                    ; preds = %1417
  %1420 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1420) #8
  br label %1421

; <label>:1421                                    ; preds = %1419, %1417
  br label %1422

; <label>:1422                                    ; preds = %1421, %1414
  %1423 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1424 = icmp ne i32* %208, %1423
  br i1 %1424, label %1425, label %1430

; <label>:1425                                    ; preds = %1422
  %1426 = icmp eq i32* %208, null
  br i1 %1426, label %1429, label %1427

; <label>:1427                                    ; preds = %1425
  %1428 = bitcast i32* %208 to i8*
  call void @_ZdaPv(i8* %1428) #8
  br label %1429

; <label>:1429                                    ; preds = %1427, %1425
  br label %1430

; <label>:1430                                    ; preds = %1429, %1422
  %1431 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1432 = icmp ne i32* %222, %1431
  br i1 %1432, label %1433, label %1438

; <label>:1433                                    ; preds = %1430
  %1434 = icmp eq i32* %222, null
  br i1 %1434, label %1437, label %1435

; <label>:1435                                    ; preds = %1433
  %1436 = bitcast i32* %222 to i8*
  call void @_ZdaPv(i8* %1436) #8
  br label %1437

; <label>:1437                                    ; preds = %1435, %1433
  br label %1438

; <label>:1438                                    ; preds = %1437, %1430
  %1439 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1440 = icmp ne i32* %236, %1439
  br i1 %1440, label %1441, label %1446

; <label>:1441                                    ; preds = %1438
  %1442 = icmp eq i32* %236, null
  br i1 %1442, label %1445, label %1443

; <label>:1443                                    ; preds = %1441
  %1444 = bitcast i32* %236 to i8*
  call void @_ZdaPv(i8* %1444) #8
  br label %1445

; <label>:1445                                    ; preds = %1443, %1441
  br label %1446

; <label>:1446                                    ; preds = %1445, %1438
  %1447 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1448 = icmp ne i32* %250, %1447
  br i1 %1448, label %1449, label %1454

; <label>:1449                                    ; preds = %1446
  %1450 = icmp eq i32* %250, null
  br i1 %1450, label %1453, label %1451

; <label>:1451                                    ; preds = %1449
  %1452 = bitcast i32* %250 to i8*
  call void @_ZdaPv(i8* %1452) #8
  br label %1453

; <label>:1453                                    ; preds = %1451, %1449
  br label %1454

; <label>:1454                                    ; preds = %1453, %1446
  %1455 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1456 = icmp ne i32* %264, %1455
  br i1 %1456, label %1457, label %1462

; <label>:1457                                    ; preds = %1454
  %1458 = icmp eq i32* %264, null
  br i1 %1458, label %1461, label %1459

; <label>:1459                                    ; preds = %1457
  %1460 = bitcast i32* %264 to i8*
  call void @_ZdaPv(i8* %1460) #8
  br label %1461

; <label>:1461                                    ; preds = %1459, %1457
  br label %1462

; <label>:1462                                    ; preds = %1461, %1454
  %1463 = sitofp i32 %exclChecksum.0 to double
  %1464 = getelementptr inbounds double* %6, i64 22
  %1465 = load double* %1464, align 8
  %1466 = fadd double %1465, %1463
  store double %1466, double* %1464, align 8
  %1467 = getelementptr inbounds double* %6, i64 2
  %1468 = load double* %1467, align 8
  %1469 = fadd double %1468, %vdwEnergy.0
  store double %1469, double* %1467, align 8
  %1470 = getelementptr inbounds double* %6, i64 0
  %1471 = load double* %1470, align 8
  %1472 = fadd double %1471, %electEnergy.0
  store double %1472, double* %1470, align 8
  %1473 = getelementptr inbounds double* %6, i64 3
  %1474 = load double* %1473, align 8
  %1475 = fadd double %1474, %virial_xx.0
  store double %1475, double* %1473, align 8
  %1476 = getelementptr inbounds double* %6, i64 4
  %1477 = load double* %1476, align 8
  %1478 = fadd double %1477, %virial_xy.0
  store double %1478, double* %1476, align 8
  %1479 = getelementptr inbounds double* %6, i64 5
  %1480 = load double* %1479, align 8
  %1481 = fadd double %1480, %virial_xz.0
  store double %1481, double* %1479, align 8
  %1482 = getelementptr inbounds double* %6, i64 6
  %1483 = load double* %1482, align 8
  %1484 = fadd double %1483, %virial_xy.0
  store double %1484, double* %1482, align 8
  %1485 = getelementptr inbounds double* %6, i64 7
  %1486 = load double* %1485, align 8
  %1487 = fadd double %1486, %virial_yy.0
  store double %1487, double* %1485, align 8
  %1488 = getelementptr inbounds double* %6, i64 8
  %1489 = load double* %1488, align 8
  %1490 = fadd double %1489, %virial_yz.0
  store double %1490, double* %1488, align 8
  %1491 = getelementptr inbounds double* %6, i64 9
  %1492 = load double* %1491, align 8
  %1493 = fadd double %1492, %virial_xz.0
  store double %1493, double* %1491, align 8
  %1494 = getelementptr inbounds double* %6, i64 10
  %1495 = load double* %1494, align 8
  %1496 = fadd double %1495, %virial_yz.0
  store double %1496, double* %1494, align 8
  %1497 = getelementptr inbounds double* %6, i64 11
  %1498 = load double* %1497, align 8
  %1499 = fadd double %1498, %virial_zz.0
  store double %1499, double* %1497, align 8
  %1500 = getelementptr inbounds double* %6, i64 1
  %1501 = load double* %1500, align 8
  %1502 = fadd double %1501, %fullElectEnergy.0
  store double %1502, double* %1500, align 8
  %1503 = getelementptr inbounds double* %6, i64 12
  %1504 = load double* %1503, align 8
  %1505 = fadd double %1504, %fullElectVirial_xx.0
  store double %1505, double* %1503, align 8
  %1506 = getelementptr inbounds double* %6, i64 13
  %1507 = load double* %1506, align 8
  %1508 = fadd double %1507, %fullElectVirial_xy.0
  store double %1508, double* %1506, align 8
  %1509 = getelementptr inbounds double* %6, i64 14
  %1510 = load double* %1509, align 8
  %1511 = fadd double %1510, %fullElectVirial_xz.0
  store double %1511, double* %1509, align 8
  %1512 = getelementptr inbounds double* %6, i64 15
  %1513 = load double* %1512, align 8
  %1514 = fadd double %1513, %fullElectVirial_xy.0
  store double %1514, double* %1512, align 8
  %1515 = getelementptr inbounds double* %6, i64 16
  %1516 = load double* %1515, align 8
  %1517 = fadd double %1516, %fullElectVirial_yy.0
  store double %1517, double* %1515, align 8
  %1518 = getelementptr inbounds double* %6, i64 17
  %1519 = load double* %1518, align 8
  %1520 = fadd double %1519, %fullElectVirial_yz.0
  store double %1520, double* %1518, align 8
  %1521 = getelementptr inbounds double* %6, i64 18
  %1522 = load double* %1521, align 8
  %1523 = fadd double %1522, %fullElectVirial_xz.0
  store double %1523, double* %1521, align 8
  %1524 = getelementptr inbounds double* %6, i64 19
  %1525 = load double* %1524, align 8
  %1526 = fadd double %1525, %fullElectVirial_yz.0
  store double %1526, double* %1524, align 8
  %1527 = getelementptr inbounds double* %6, i64 20
  %1528 = load double* %1527, align 8
  %1529 = fadd double %1528, %fullElectVirial_zz.0
  store double %1529, double* %1527, align 8
  br label %1530

; <label>:1530                                    ; preds = %1462, %183, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil23calc_self_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.91, align 4
  %r2f31 = alloca %union.anon.92, align 4
  %r2f75 = alloca %union.anon.93, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1524

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %166

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  %139 = icmp ne i32 %all_fixed.0, 0
  br i1 %139, label %140, label %165

; <label>:140                                     ; preds = %138
  %141 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %142 = icmp ne i32* %51, %141
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %140
  %144 = icmp eq i32* %51, null
  br i1 %144, label %147, label %145

; <label>:145                                     ; preds = %143
  %146 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %146) #8
  br label %147

; <label>:147                                     ; preds = %145, %143
  br label %148

; <label>:148                                     ; preds = %147, %140
  %149 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %150 = icmp ne i32* %65, %149
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %148
  %152 = icmp eq i32* %65, null
  br i1 %152, label %155, label %153

; <label>:153                                     ; preds = %151
  %154 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %154) #8
  br label %155

; <label>:155                                     ; preds = %153, %151
  br label %156

; <label>:156                                     ; preds = %155, %148
  %157 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %158 = icmp ne i32* %79, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %79, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  br label %1524

; <label>:165                                     ; preds = %138
  br label %166

; <label>:166                                     ; preds = %165, %114
  %fixg.2 = phi i32 [ %fixg.0, %165 ], [ 0, %114 ]
  %167 = icmp ne i32 %fixg.2, 0
  br i1 %167, label %168, label %175

; <label>:168                                     ; preds = %166
  %169 = sub nsw i32 %fixg.2, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32* %65, i64 %170
  %172 = load i32* %171, align 4
  %173 = sext i32 %fixg.2 to i64
  %174 = getelementptr inbounds i32* %65, i64 %173
  store i32 %172, i32* %174, align 4
  br label %175

; <label>:175                                     ; preds = %168, %166
  %176 = icmp slt i32 %31, 1000
  br i1 %176, label %177, label %179

; <label>:177                                     ; preds = %175
  %178 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %188

; <label>:179                                     ; preds = %175
  %180 = add nsw i32 %31, 5
  %181 = sext i32 %180 to i64
  %182 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %181, i64 4)
  %183 = extractvalue { i64, i1 } %182, 1
  %184 = extractvalue { i64, i1 } %182, 0
  %185 = select i1 %183, i64 -1, i64 %184
  %186 = call noalias i8* @_Znam(i64 %185) #9
  %187 = bitcast i8* %186 to i32*
  br label %188

; <label>:188                                     ; preds = %179, %177
  %189 = phi i32* [ %178, %177 ], [ %187, %179 ]
  %190 = icmp slt i32 %31, 1000
  br i1 %190, label %191, label %193

; <label>:191                                     ; preds = %188
  %192 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %202

; <label>:193                                     ; preds = %188
  %194 = add nsw i32 %31, 5
  %195 = sext i32 %194 to i64
  %196 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %195, i64 4)
  %197 = extractvalue { i64, i1 } %196, 1
  %198 = extractvalue { i64, i1 } %196, 0
  %199 = select i1 %197, i64 -1, i64 %198
  %200 = call noalias i8* @_Znam(i64 %199) #9
  %201 = bitcast i8* %200 to i32*
  br label %202

; <label>:202                                     ; preds = %193, %191
  %203 = phi i32* [ %192, %191 ], [ %201, %193 ]
  %204 = icmp slt i32 %31, 1000
  br i1 %204, label %205, label %207

; <label>:205                                     ; preds = %202
  %206 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %216

; <label>:207                                     ; preds = %202
  %208 = add nsw i32 %31, 5
  %209 = sext i32 %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %209, i64 4)
  %211 = extractvalue { i64, i1 } %210, 1
  %212 = extractvalue { i64, i1 } %210, 0
  %213 = select i1 %211, i64 -1, i64 %212
  %214 = call noalias i8* @_Znam(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  br label %216

; <label>:216                                     ; preds = %207, %205
  %217 = phi i32* [ %206, %205 ], [ %215, %207 ]
  %218 = icmp slt i32 %31, 1000
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %216
  %220 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %230

; <label>:221                                     ; preds = %216
  %222 = add nsw i32 %31, 5
  %223 = sext i32 %222 to i64
  %224 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %223, i64 4)
  %225 = extractvalue { i64, i1 } %224, 1
  %226 = extractvalue { i64, i1 } %224, 0
  %227 = select i1 %225, i64 -1, i64 %226
  %228 = call noalias i8* @_Znam(i64 %227) #9
  %229 = bitcast i8* %228 to i32*
  br label %230

; <label>:230                                     ; preds = %221, %219
  %231 = phi i32* [ %220, %219 ], [ %229, %221 ]
  %232 = icmp slt i32 %31, 1000
  br i1 %232, label %233, label %235

; <label>:233                                     ; preds = %230
  %234 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %244

; <label>:235                                     ; preds = %230
  %236 = add nsw i32 %31, 5
  %237 = sext i32 %236 to i64
  %238 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %237, i64 4)
  %239 = extractvalue { i64, i1 } %238, 1
  %240 = extractvalue { i64, i1 } %238, 0
  %241 = select i1 %239, i64 -1, i64 %240
  %242 = call noalias i8* @_Znam(i64 %241) #9
  %243 = bitcast i8* %242 to i32*
  br label %244

; <label>:244                                     ; preds = %235, %233
  %245 = phi i32* [ %234, %233 ], [ %243, %235 ]
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 0
  %248 = load %class.Vector** %247, align 8
  %249 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %250 = getelementptr inbounds [2 x %class.Vector*]* %249, i32 0, i64 1
  %251 = load %class.Vector** %250, align 8
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %253 = getelementptr inbounds [2 x %class.Vector*]* %252, i32 0, i64 0
  %254 = load %class.Vector** %253, align 8
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %256 = getelementptr inbounds [2 x %class.Vector*]* %255, i32 0, i64 1
  %257 = load %class.Vector** %256, align 8
  %258 = sub nsw i32 %28, 1
  %259 = mul nsw i32 %258, %31
  %260 = sdiv i32 %259, 2
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %262 = load i32* %261, align 4
  %263 = mul nsw i32 %260, %262
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %265 = load i32* %264, align 4
  %266 = sdiv i32 %263, %265
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %268 = load i32* %267, align 4
  %269 = mul nsw i32 %260, %268
  %270 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %271 = load i32* %270, align 4
  %272 = sdiv i32 %269, %271
  br label %273

; <label>:273                                     ; preds = %1399, %244
  %g_lower.0 = phi i32 [ 0, %244 ], [ %g_lower.4, %1399 ]
  %j_hgroup.0 = phi i32 [ 0, %244 ], [ %j_hgroup.3, %1399 ]
  %fixg_lower.0 = phi i32 [ 0, %244 ], [ %fixg_lower.4, %1399 ]
  %pairlistindex.0 = phi i32 [ 0, %244 ], [ %pairlistindex.3, %1399 ]
  %pairlistoffset.0 = phi i32 [ 0, %244 ], [ %pairlistoffset.2, %1399 ]
  %pairCount.0 = phi i32 [ 0, %244 ], [ %pairCount.3, %1399 ]
  %i.0 = phi i32 [ 0, %244 ], [ %1400, %1399 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_zz.4, %1399 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yz.4, %1399 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yy.4, %1399 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xz.4, %1399 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xy.4, %1399 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xx.4, %1399 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_zz.3, %1399 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yz.3, %1399 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yy.3, %1399 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xz.3, %1399 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xy.3, %1399 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xx.3, %1399 ]
  %exclChecksum.0 = phi i32 [ 0, %244 ], [ %exclChecksum.11, %1399 ]
  %274 = sub nsw i32 %28, 1
  %275 = icmp slt i32 %i.0, %274
  br i1 %275, label %276, label %1401

; <label>:276                                     ; preds = %273
  %277 = sext i32 %i.0 to i64
  %278 = getelementptr inbounds %struct.CompAtom* %34, i64 %277
  %279 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %280 = load i32* %279, align 4
  %281 = and i32 %280, 4194303
  %282 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %281)
  %283 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 0
  %284 = load i32* %283, align 4
  %285 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 1
  %286 = load i32* %285, align 4
  %287 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 2
  %288 = load i8** %287, align 8
  %289 = sext i32 %284 to i64
  %290 = sub i64 0, %289
  %291 = getelementptr inbounds i8* %288, i64 %290
  %292 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %293 = getelementptr inbounds %class.Vector* %292, i32 0, i32 0
  %294 = load double* %293, align 8
  %295 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %296 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %297 = load double* %296, align 8
  %298 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %299 = getelementptr inbounds %class.Vector* %298, i32 0, i32 2
  %300 = load double* %299, align 8
  %301 = sext i32 %i.0 to i64
  %302 = getelementptr inbounds %class.Vector* %248, i64 %301
  %303 = sext i32 %i.0 to i64
  %304 = getelementptr inbounds %class.Vector* %254, i64 %303
  %305 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %306 = load i32* %305, align 4
  %307 = lshr i32 %306, 22
  %308 = and i32 %307, 7
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %316, label %310

; <label>:310                                     ; preds = %276
  %311 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %312 = load i32* %311, align 4
  %313 = lshr i32 %312, 25
  %314 = and i32 %313, 1
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %527

; <label>:316                                     ; preds = %310, %276
  %317 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %318 = load i32* %317, align 4
  %319 = lshr i32 %318, 22
  %320 = and i32 %319, 7
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %342

; <label>:322                                     ; preds = %316
  %323 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %324 = load i32* %323, align 4
  %325 = lshr i32 %324, 22
  %326 = and i32 %325, 7
  %327 = sub nsw i32 %28, 1
  %328 = sub nsw i32 %327, %i.0
  %329 = mul nsw i32 %326, %328
  %330 = add nsw i32 %pairCount.0, %329
  %331 = sub nsw i32 %326, 1
  %332 = mul nsw i32 %326, %331
  %333 = sdiv i32 %332, 2
  %334 = sub nsw i32 %330, %333
  %335 = icmp slt i32 %pairCount.0, %266
  br i1 %335, label %338, label %336

; <label>:336                                     ; preds = %322
  %337 = icmp sge i32 %pairCount.0, %272
  br i1 %337, label %338, label %341

; <label>:338                                     ; preds = %336, %322
  %339 = sub nsw i32 %326, 1
  %340 = add nsw i32 %i.0, %339
  br label %1399

; <label>:341                                     ; preds = %336
  br label %342

; <label>:342                                     ; preds = %341, %316
  %pairCount.1 = phi i32 [ %334, %341 ], [ %pairCount.0, %316 ]
  %343 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %351

; <label>:345                                     ; preds = %342
  %346 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %347 = load i32* %346, align 4
  %348 = lshr i32 %347, 27
  %349 = and i32 %348, 1
  %350 = icmp ne i32 %349, 0
  br label %351

; <label>:351                                     ; preds = %345, %342
  %352 = phi i1 [ false, %342 ], [ %350, %345 ]
  %353 = zext i1 %352 to i32
  %354 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %355 = load i32* %354, align 4
  %356 = lshr i32 %355, 22
  %357 = and i32 %356, 7
  %358 = icmp ne i32 %357, 0
  br i1 %358, label %359, label %389

; <label>:359                                     ; preds = %351
  %360 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %361 = load i32* %360, align 4
  %362 = lshr i32 %361, 22
  %363 = and i32 %362, 7
  %364 = add nsw i32 %i.0, %363
  br label %365

; <label>:365                                     ; preds = %374, %359
  %g_lower.1 = phi i32 [ %g_lower.0, %359 ], [ %375, %374 ]
  %366 = icmp slt i32 %g_lower.1, %g.0
  br i1 %366, label %367, label %372

; <label>:367                                     ; preds = %365
  %368 = sext i32 %g_lower.1 to i64
  %369 = getelementptr inbounds i32* %51, i64 %368
  %370 = load i32* %369, align 4
  %371 = icmp slt i32 %370, %364
  br label %372

; <label>:372                                     ; preds = %367, %365
  %373 = phi i1 [ false, %365 ], [ %371, %367 ]
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %372
  %375 = add nsw i32 %g_lower.1, 1
  br label %365

; <label>:376                                     ; preds = %372
  br label %377

; <label>:377                                     ; preds = %386, %376
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %376 ], [ %387, %386 ]
  %378 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %378, label %379, label %384

; <label>:379                                     ; preds = %377
  %380 = sext i32 %fixg_lower.1 to i64
  %381 = getelementptr inbounds i32* %65, i64 %380
  %382 = load i32* %381, align 4
  %383 = icmp slt i32 %382, %364
  br label %384

; <label>:384                                     ; preds = %379, %377
  %385 = phi i1 [ false, %377 ], [ %383, %379 ]
  br i1 %385, label %386, label %388

; <label>:386                                     ; preds = %384
  %387 = add nsw i32 %fixg_lower.1, 1
  br label %377

; <label>:388                                     ; preds = %384
  br label %389

; <label>:389                                     ; preds = %388, %351
  %g_lower.2 = phi i32 [ %g_lower.1, %388 ], [ %g_lower.0, %351 ]
  %j_hgroup.1 = phi i32 [ %364, %388 ], [ %j_hgroup.0, %351 ]
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %388 ], [ %fixg_lower.0, %351 ]
  %390 = add nsw i32 %i.0, 1
  br label %391

; <label>:391                                     ; preds = %397, %389
  %pairlistindex.1 = phi i32 [ 0, %389 ], [ %394, %397 ]
  %j.1 = phi i32 [ %390, %389 ], [ %398, %397 ]
  %392 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %392, label %393, label %399

; <label>:393                                     ; preds = %391
  %394 = add nsw i32 %pairlistindex.1, 1
  %395 = sext i32 %pairlistindex.1 to i64
  %396 = getelementptr inbounds i32* %189, i64 %395
  store i32 %j.1, i32* %396, align 4
  br label %397

; <label>:397                                     ; preds = %393
  %398 = add nsw i32 %j.1, 1
  br label %391

; <label>:399                                     ; preds = %391
  %400 = sext i32 %pairlistindex.1 to i64
  %401 = getelementptr inbounds i32* %189, i64 %400
  %402 = icmp ne i32 %353, 0
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %399
  br label %405

; <label>:404                                     ; preds = %399
  br label %405

; <label>:405                                     ; preds = %404, %403
  %406 = phi i32* [ %65, %403 ], [ %51, %404 ]
  %407 = icmp ne i32 %353, 0
  br i1 %407, label %408, label %409

; <label>:408                                     ; preds = %405
  br label %410

; <label>:409                                     ; preds = %405
  br label %410

; <label>:410                                     ; preds = %409, %408
  %411 = phi i32 [ %fixg_lower.2, %408 ], [ %g_lower.2, %409 ]
  %412 = icmp ne i32 %353, 0
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %410
  br label %415

; <label>:414                                     ; preds = %410
  br label %415

; <label>:415                                     ; preds = %414, %413
  %416 = phi i32 [ %fixg.2, %413 ], [ %g.0, %414 ]
  %417 = icmp slt i32 %411, %416
  br i1 %417, label %418, label %512

; <label>:418                                     ; preds = %415
  %419 = sext i32 %411 to i64
  %420 = getelementptr inbounds i32* %406, i64 %419
  %421 = load i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds %struct.CompAtom* %37, i64 %422
  %424 = getelementptr inbounds %struct.CompAtom* %423, i32 0, i32 0
  %425 = getelementptr inbounds %class.Vector* %424, i32 0, i32 0
  %426 = load double* %425, align 8
  %427 = sext i32 %421 to i64
  %428 = getelementptr inbounds %struct.CompAtom* %37, i64 %427
  %429 = getelementptr inbounds %struct.CompAtom* %428, i32 0, i32 0
  %430 = getelementptr inbounds %class.Vector* %429, i32 0, i32 1
  %431 = load double* %430, align 8
  %432 = sext i32 %421 to i64
  %433 = getelementptr inbounds %struct.CompAtom* %37, i64 %432
  %434 = getelementptr inbounds %struct.CompAtom* %433, i32 0, i32 0
  %435 = getelementptr inbounds %class.Vector* %434, i32 0, i32 2
  %436 = load double* %435, align 8
  br label %437

; <label>:437                                     ; preds = %470, %418
  %g.3 = phi i32 [ %411, %418 ], [ %440, %470 ]
  %gli.0 = phi i32* [ %79, %418 ], [ %gli.1, %470 ]
  %j2.0 = phi i32 [ %421, %418 ], [ %443, %470 ]
  %p_j_x.0 = phi double [ %426, %418 ], [ %450, %470 ]
  %p_j_y.0 = phi double [ %431, %418 ], [ %458, %470 ]
  %p_j_z.0 = phi double [ %436, %418 ], [ %466, %470 ]
  %438 = icmp slt i32 %g.3, %416
  br i1 %438, label %439, label %471

; <label>:439                                     ; preds = %437
  %440 = add nsw i32 %g.3, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i32* %406, i64 %441
  %443 = load i32* %442, align 4
  %444 = fsub double %294, %p_j_x.0
  %445 = fmul double %444, %444
  %446 = sext i32 %443 to i64
  %447 = getelementptr inbounds %struct.CompAtom* %37, i64 %446
  %448 = getelementptr inbounds %struct.CompAtom* %447, i32 0, i32 0
  %449 = getelementptr inbounds %class.Vector* %448, i32 0, i32 0
  %450 = load double* %449, align 8
  %451 = fsub double %297, %p_j_y.0
  %452 = fmul double %451, %451
  %453 = fadd double %445, %452
  %454 = sext i32 %443 to i64
  %455 = getelementptr inbounds %struct.CompAtom* %37, i64 %454
  %456 = getelementptr inbounds %struct.CompAtom* %455, i32 0, i32 0
  %457 = getelementptr inbounds %class.Vector* %456, i32 0, i32 1
  %458 = load double* %457, align 8
  %459 = fsub double %300, %p_j_z.0
  %460 = fmul double %459, %459
  %461 = fadd double %453, %460
  %462 = sext i32 %443 to i64
  %463 = getelementptr inbounds %struct.CompAtom* %37, i64 %462
  %464 = getelementptr inbounds %struct.CompAtom* %463, i32 0, i32 0
  %465 = getelementptr inbounds %class.Vector* %464, i32 0, i32 2
  %466 = load double* %465, align 8
  %467 = fcmp ole double %461, %8
  br i1 %467, label %468, label %470

; <label>:468                                     ; preds = %439
  store i32 %j2.0, i32* %gli.0, align 4
  %469 = getelementptr inbounds i32* %gli.0, i32 1
  br label %470

; <label>:470                                     ; preds = %468, %439
  %gli.1 = phi i32* [ %469, %468 ], [ %gli.0, %439 ]
  br label %437

; <label>:471                                     ; preds = %437
  %472 = ptrtoint i32* %gli.0 to i64
  %473 = ptrtoint i32* %79 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  br label %477

; <label>:477                                     ; preds = %509, %471
  %pli.0 = phi i32* [ %401, %471 ], [ %508, %509 ]
  %h.0 = phi i32 [ 0, %471 ], [ %510, %509 ]
  %478 = icmp slt i32 %h.0, %476
  br i1 %478, label %479, label %511

; <label>:479                                     ; preds = %477
  %480 = sext i32 %h.0 to i64
  %481 = getelementptr inbounds i32* %79, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %37, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 25
  %488 = and i32 %487, 1
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %491

; <label>:490                                     ; preds = %479
  br label %498

; <label>:491                                     ; preds = %479
  %492 = sext i32 %482 to i64
  %493 = getelementptr inbounds %struct.CompAtom* %37, i64 %492
  %494 = getelementptr inbounds %struct.CompAtom* %493, i32 0, i32 2
  %495 = load i32* %494, align 4
  %496 = lshr i32 %495, 22
  %497 = and i32 %496, 7
  br label %498

; <label>:498                                     ; preds = %491, %490
  %499 = phi i32 [ 1, %490 ], [ %497, %491 ]
  %500 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %482, i32* %500, align 4
  %501 = add nsw i32 %482, 1
  %502 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %501, i32* %502, align 4
  %503 = add nsw i32 %482, 2
  %504 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %503, i32* %504, align 4
  %505 = add nsw i32 %482, 3
  %506 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %505, i32* %506, align 4
  %507 = sext i32 %499 to i64
  %508 = getelementptr inbounds i32* %pli.0, i64 %507
  br label %509

; <label>:509                                     ; preds = %498
  %510 = add nsw i32 %h.0, 1
  br label %477

; <label>:511                                     ; preds = %477
  br label %512

; <label>:512                                     ; preds = %511, %415
  %pli.1 = phi i32* [ %pli.0, %511 ], [ %401, %415 ]
  %513 = ptrtoint i32* %pli.1 to i64
  %514 = ptrtoint i32* %189 to i64
  %515 = sub i64 %513, %514
  %516 = sdiv exact i64 %515, 4
  %517 = trunc i64 %516 to i32
  %518 = icmp ne i32 %517, 0
  br i1 %518, label %519, label %526

; <label>:519                                     ; preds = %512
  %520 = sub nsw i32 %517, 1
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i32* %189, i64 %521
  %523 = load i32* %522, align 4
  %524 = sext i32 %517 to i64
  %525 = getelementptr inbounds i32* %189, i64 %524
  store i32 %523, i32* %525, align 4
  br label %526

; <label>:526                                     ; preds = %519, %512
  br label %529

; <label>:527                                     ; preds = %310
  %528 = add nsw i32 %pairlistoffset.0, 1
  br label %529

; <label>:529                                     ; preds = %527, %526
  %g_lower.3 = phi i32 [ %g_lower.2, %526 ], [ %g_lower.0, %527 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %526 ], [ %j_hgroup.0, %527 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %526 ], [ %fixg_lower.0, %527 ]
  %pairlistindex.2 = phi i32 [ %517, %526 ], [ %pairlistindex.0, %527 ]
  %pairlistoffset.1 = phi i32 [ 0, %526 ], [ %528, %527 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %526 ], [ %pairCount.0, %527 ]
  %530 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %538

; <label>:532                                     ; preds = %529
  %533 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 26
  %536 = and i32 %535, 1
  %537 = icmp ne i32 %536, 0
  br label %538

; <label>:538                                     ; preds = %532, %529
  %539 = phi i1 [ false, %529 ], [ %537, %532 ]
  %540 = zext i1 %539 to i32
  %541 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %542 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %543 = add nsw i32 %542, 1
  %544 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %545 = load i32* %544, align 4
  %546 = lshr i32 %545, 28
  %547 = mul nsw i32 %543, %546
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds double* %541, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 1
  %551 = load float* %550, align 4
  %552 = fpext float %551 to double
  %553 = fmul double 3.320636e+02, %552
  %554 = fmul double %553, %16
  %555 = fmul double %554, %9
  %556 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %557 = load i32* %556, align 4
  %558 = and i32 %557, 4194303
  %559 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %558)
  %560 = zext i16 %559 to i32
  %561 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %560)
  %562 = icmp ne i32 %540, 0
  br i1 %562, label %563, label %625

; <label>:563                                     ; preds = %538
  br label %564

; <label>:564                                     ; preds = %622, %563
  %pli3.0 = phi i32* [ %203, %563 ], [ %pli3.2, %622 ]
  %plin.0 = phi i32* [ %217, %563 ], [ %plin.2, %622 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %563 ], [ %623, %622 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %563 ], [ %exclChecksum.3, %622 ]
  %565 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %565, label %566, label %624

; <label>:566                                     ; preds = %564
  %567 = sext i32 %k.0 to i64
  %568 = getelementptr inbounds i32* %189, i64 %567
  %569 = load i32* %568, align 4
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds %struct.CompAtom* %37, i64 %570
  %572 = getelementptr inbounds %struct.CompAtom* %571, i32 0, i32 0
  %573 = getelementptr inbounds %class.Vector* %572, i32 0, i32 0
  %574 = load double* %573, align 8
  %575 = fsub double %294, %574
  %576 = fmul double %575, %575
  %577 = sext i32 %569 to i64
  %578 = getelementptr inbounds %struct.CompAtom* %37, i64 %577
  %579 = getelementptr inbounds %struct.CompAtom* %578, i32 0, i32 0
  %580 = getelementptr inbounds %class.Vector* %579, i32 0, i32 1
  %581 = load double* %580, align 8
  %582 = fsub double %297, %581
  %583 = fmul double %582, %582
  %584 = fadd double %576, %583
  %585 = sext i32 %569 to i64
  %586 = getelementptr inbounds %struct.CompAtom* %37, i64 %585
  %587 = getelementptr inbounds %struct.CompAtom* %586, i32 0, i32 0
  %588 = getelementptr inbounds %class.Vector* %587, i32 0, i32 2
  %589 = load double* %588, align 8
  %590 = fsub double %300, %589
  %591 = fmul double %590, %590
  %592 = fadd double %584, %591
  %593 = sext i32 %569 to i64
  %594 = getelementptr inbounds %struct.CompAtom* %37, i64 %593
  %595 = getelementptr inbounds %struct.CompAtom* %594, i32 0, i32 2
  %596 = load i32* %595, align 4
  %597 = lshr i32 %596, 26
  %598 = and i32 %597, 1
  %599 = icmp ne i32 %598, 0
  br i1 %599, label %621, label %600

; <label>:600                                     ; preds = %566
  %601 = fcmp ole double %592, %7
  br i1 %601, label %602, label %621

; <label>:602                                     ; preds = %600
  %603 = fcmp ole double %592, %22
  br i1 %603, label %604, label %607

; <label>:604                                     ; preds = %602
  %605 = add nsw i32 %exclChecksum.1, 1
  %606 = icmp ne i32 %605, 0
  br i1 %606, label %621, label %607

; <label>:607                                     ; preds = %604, %602
  %exclChecksum.2 = phi i32 [ %605, %604 ], [ %exclChecksum.1, %602 ]
  %608 = sext i32 %569 to i64
  %609 = getelementptr inbounds %struct.CompAtom* %37, i64 %608
  %610 = getelementptr inbounds %struct.CompAtom* %609, i32 0, i32 2
  %611 = load i32* %610, align 4
  %612 = and i32 %611, 4194303
  %613 = icmp sge i32 %612, %284
  br i1 %613, label %614, label %618

; <label>:614                                     ; preds = %607
  %615 = icmp sle i32 %612, %286
  br i1 %615, label %616, label %618

; <label>:616                                     ; preds = %614
  %617 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %569, i32* %pli3.0, align 4
  br label %620

; <label>:618                                     ; preds = %614, %607
  %619 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %569, i32* %plin.0, align 4
  br label %620

; <label>:620                                     ; preds = %618, %616
  %pli3.1 = phi i32* [ %617, %616 ], [ %pli3.0, %618 ]
  %plin.1 = phi i32* [ %plin.0, %616 ], [ %619, %618 ]
  br label %621

; <label>:621                                     ; preds = %620, %604, %600, %566
  %pli3.2 = phi i32* [ %pli3.0, %566 ], [ %pli3.0, %604 ], [ %pli3.1, %620 ], [ %pli3.0, %600 ]
  %plin.2 = phi i32* [ %plin.0, %566 ], [ %plin.0, %604 ], [ %plin.1, %620 ], [ %plin.0, %600 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %566 ], [ %605, %604 ], [ %exclChecksum.2, %620 ], [ %exclChecksum.1, %600 ]
  br label %622

; <label>:622                                     ; preds = %621
  %623 = add nsw i32 %k.0, 1
  br label %564

; <label>:624                                     ; preds = %564
  br label %704

; <label>:625                                     ; preds = %538
  %626 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %626, label %627, label %703

; <label>:627                                     ; preds = %625
  %628 = sext i32 %pairlistoffset.1 to i64
  %629 = getelementptr inbounds i32* %189, i64 %628
  %630 = load i32* %629, align 4
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %37, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 0
  %635 = load double* %634, align 8
  %636 = sext i32 %630 to i64
  %637 = getelementptr inbounds %struct.CompAtom* %37, i64 %636
  %638 = getelementptr inbounds %struct.CompAtom* %637, i32 0, i32 0
  %639 = getelementptr inbounds %class.Vector* %638, i32 0, i32 1
  %640 = load double* %639, align 8
  %641 = sext i32 %630 to i64
  %642 = getelementptr inbounds %struct.CompAtom* %37, i64 %641
  %643 = getelementptr inbounds %struct.CompAtom* %642, i32 0, i32 0
  %644 = getelementptr inbounds %class.Vector* %643, i32 0, i32 2
  %645 = load double* %644, align 8
  %646 = sext i32 %630 to i64
  %647 = getelementptr inbounds %struct.CompAtom* %37, i64 %646
  %648 = getelementptr inbounds %struct.CompAtom* %647, i32 0, i32 2
  %649 = load i32* %648, align 4
  %650 = and i32 %649, 4194303
  br label %651

; <label>:651                                     ; preds = %696, %627
  %pli3.3 = phi i32* [ %203, %627 ], [ %pli3.5, %696 ]
  %plin.3 = phi i32* [ %217, %627 ], [ %plin.5, %696 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %627 ], [ %654, %696 ]
  %j210.0 = phi i32 [ %630, %627 ], [ %657, %696 ]
  %p_j_x11.0 = phi double [ %635, %627 ], [ %664, %696 ]
  %p_j_y12.0 = phi double [ %640, %627 ], [ %672, %696 ]
  %p_j_z13.0 = phi double [ %645, %627 ], [ %680, %696 ]
  %atom214.0 = phi i32 [ %650, %627 ], [ %701, %696 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %627 ], [ %exclChecksum.6, %696 ]
  %652 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %652, label %653, label %702

; <label>:653                                     ; preds = %651
  %654 = add nsw i32 %k9.0, 1
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds i32* %189, i64 %655
  %657 = load i32* %656, align 4
  %658 = fsub double %294, %p_j_x11.0
  %659 = fmul double %658, %658
  %660 = sext i32 %657 to i64
  %661 = getelementptr inbounds %struct.CompAtom* %37, i64 %660
  %662 = getelementptr inbounds %struct.CompAtom* %661, i32 0, i32 0
  %663 = getelementptr inbounds %class.Vector* %662, i32 0, i32 0
  %664 = load double* %663, align 8
  %665 = fsub double %297, %p_j_y12.0
  %666 = fmul double %665, %665
  %667 = fadd double %659, %666
  %668 = sext i32 %657 to i64
  %669 = getelementptr inbounds %struct.CompAtom* %37, i64 %668
  %670 = getelementptr inbounds %struct.CompAtom* %669, i32 0, i32 0
  %671 = getelementptr inbounds %class.Vector* %670, i32 0, i32 1
  %672 = load double* %671, align 8
  %673 = fsub double %300, %p_j_z13.0
  %674 = fmul double %673, %673
  %675 = fadd double %667, %674
  %676 = sext i32 %657 to i64
  %677 = getelementptr inbounds %struct.CompAtom* %37, i64 %676
  %678 = getelementptr inbounds %struct.CompAtom* %677, i32 0, i32 0
  %679 = getelementptr inbounds %class.Vector* %678, i32 0, i32 2
  %680 = load double* %679, align 8
  %681 = fcmp ole double %675, %7
  br i1 %681, label %682, label %696

; <label>:682                                     ; preds = %653
  %683 = fcmp ole double %675, %22
  br i1 %683, label %684, label %687

; <label>:684                                     ; preds = %682
  %685 = add nsw i32 %exclChecksum.4, 1
  %686 = icmp ne i32 %685, 0
  br i1 %686, label %696, label %687

; <label>:687                                     ; preds = %684, %682
  %exclChecksum.5 = phi i32 [ %685, %684 ], [ %exclChecksum.4, %682 ]
  %688 = icmp sge i32 %atom214.0, %284
  br i1 %688, label %689, label %693

; <label>:689                                     ; preds = %687
  %690 = icmp sle i32 %atom214.0, %286
  br i1 %690, label %691, label %693

; <label>:691                                     ; preds = %689
  %692 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %695

; <label>:693                                     ; preds = %689, %687
  %694 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %695

; <label>:695                                     ; preds = %693, %691
  %pli3.4 = phi i32* [ %692, %691 ], [ %pli3.3, %693 ]
  %plin.4 = phi i32* [ %plin.3, %691 ], [ %694, %693 ]
  br label %696

; <label>:696                                     ; preds = %695, %684, %653
  %pli3.5 = phi i32* [ %pli3.3, %684 ], [ %pli3.4, %695 ], [ %pli3.3, %653 ]
  %plin.5 = phi i32* [ %plin.3, %684 ], [ %plin.4, %695 ], [ %plin.3, %653 ]
  %exclChecksum.6 = phi i32 [ %685, %684 ], [ %exclChecksum.5, %695 ], [ %exclChecksum.4, %653 ]
  %697 = sext i32 %657 to i64
  %698 = getelementptr inbounds %struct.CompAtom* %37, i64 %697
  %699 = getelementptr inbounds %struct.CompAtom* %698, i32 0, i32 2
  %700 = load i32* %699, align 4
  %701 = and i32 %700, 4194303
  br label %651

; <label>:702                                     ; preds = %651
  br label %703

; <label>:703                                     ; preds = %702, %625
  %pli3.6 = phi i32* [ %pli3.3, %702 ], [ %203, %625 ]
  %plin.6 = phi i32* [ %plin.3, %702 ], [ %217, %625 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %702 ], [ %exclChecksum.0, %625 ]
  br label %704

; <label>:704                                     ; preds = %703, %624
  %pli3.7 = phi i32* [ %pli3.0, %624 ], [ %pli3.6, %703 ]
  %plin.7 = phi i32* [ %plin.0, %624 ], [ %plin.6, %703 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %624 ], [ %exclChecksum.7, %703 ]
  %705 = ptrtoint i32* %pli3.7 to i64
  %706 = ptrtoint i32* %203 to i64
  %707 = sub i64 %705, %706
  %708 = sdiv exact i64 %707, 4
  %709 = trunc i64 %708 to i32
  %710 = icmp ne i32 %709, 0
  br i1 %710, label %711, label %718

; <label>:711                                     ; preds = %704
  %712 = sub nsw i32 %709, 1
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i32* %203, i64 %713
  %715 = load i32* %714, align 4
  %716 = sext i32 %709 to i64
  %717 = getelementptr inbounds i32* %203, i64 %716
  store i32 %715, i32* %717, align 4
  br label %718

; <label>:718                                     ; preds = %711, %704
  br label %719

; <label>:719                                     ; preds = %730, %718
  %plix.0 = phi i32* [ %231, %718 ], [ %728, %730 ]
  %pln.0 = phi i32* [ %217, %718 ], [ %731, %730 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %718 ], [ %729, %730 ]
  %720 = icmp ult i32* %pln.0, %plin.7
  br i1 %720, label %721, label %724

; <label>:721                                     ; preds = %719
  %722 = load i32* %pln.0, align 4
  %723 = icmp slt i32 %722, %j_hgroup.2
  br label %724

; <label>:724                                     ; preds = %721, %719
  %725 = phi i1 [ false, %719 ], [ %723, %721 ]
  br i1 %725, label %726, label %732

; <label>:726                                     ; preds = %724
  %727 = load i32* %pln.0, align 4
  %728 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %727, i32* %plix.0, align 4
  %729 = add nsw i32 %exclChecksum.9, -1
  br label %730

; <label>:730                                     ; preds = %726
  %731 = getelementptr inbounds i32* %pln.0, i32 1
  br label %719

; <label>:732                                     ; preds = %724
  br label %733

; <label>:733                                     ; preds = %748, %732
  %plix.1 = phi i32* [ %plix.0, %732 ], [ %746, %748 ]
  %k17.0 = phi i32 [ 0, %732 ], [ %749, %748 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %732 ], [ %747, %748 ]
  %734 = icmp slt i32 %k17.0, %709
  br i1 %734, label %735, label %740

; <label>:735                                     ; preds = %733
  %736 = sext i32 %k17.0 to i64
  %737 = getelementptr inbounds i32* %203, i64 %736
  %738 = load i32* %737, align 4
  %739 = icmp slt i32 %738, %j_hgroup.2
  br label %740

; <label>:740                                     ; preds = %735, %733
  %741 = phi i1 [ false, %733 ], [ %739, %735 ]
  br i1 %741, label %742, label %750

; <label>:742                                     ; preds = %740
  %743 = sext i32 %k17.0 to i64
  %744 = getelementptr inbounds i32* %203, i64 %743
  %745 = load i32* %744, align 4
  %746 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %745, i32* %plix.1, align 4
  %747 = add nsw i32 %exclChecksum.10, -1
  br label %748

; <label>:748                                     ; preds = %742
  %749 = add nsw i32 %k17.0, 1
  br label %733

; <label>:750                                     ; preds = %740
  br label %751

; <label>:751                                     ; preds = %773, %750
  %plin.8 = phi i32* [ %plin.7, %750 ], [ %plin.9, %773 ]
  %plix.2 = phi i32* [ %plix.1, %750 ], [ %plix.3, %773 ]
  %plim.0 = phi i32* [ %245, %750 ], [ %plim.1, %773 ]
  %k17.1 = phi i32 [ %k17.0, %750 ], [ %774, %773 ]
  %752 = icmp slt i32 %k17.1, %709
  br i1 %752, label %753, label %775

; <label>:753                                     ; preds = %751
  %754 = sext i32 %k17.1 to i64
  %755 = getelementptr inbounds i32* %203, i64 %754
  %756 = load i32* %755, align 4
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds %struct.CompAtom* %37, i64 %757
  %759 = getelementptr inbounds %struct.CompAtom* %758, i32 0, i32 2
  %760 = load i32* %759, align 4
  %761 = and i32 %760, 4194303
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8* %291, i64 %762
  %764 = load i8* %763, align 1
  %765 = sext i8 %764 to i32
  switch i32 %765, label %772 [
    i32 0, label %766
    i32 1, label %768
    i32 2, label %770
  ]

; <label>:766                                     ; preds = %753
  %767 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %756, i32* %plin.8, align 4
  br label %772

; <label>:768                                     ; preds = %753
  %769 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %756, i32* %plix.2, align 4
  br label %772

; <label>:770                                     ; preds = %753
  %771 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %756, i32* %plim.0, align 4
  br label %772

; <label>:772                                     ; preds = %770, %768, %766, %753
  %plin.9 = phi i32* [ %plin.8, %753 ], [ %plin.8, %770 ], [ %plin.8, %768 ], [ %767, %766 ]
  %plix.3 = phi i32* [ %plix.2, %753 ], [ %plix.2, %770 ], [ %769, %768 ], [ %plix.2, %766 ]
  %plim.1 = phi i32* [ %plim.0, %753 ], [ %771, %770 ], [ %plim.0, %768 ], [ %plim.0, %766 ]
  br label %773

; <label>:773                                     ; preds = %772
  %774 = add nsw i32 %k17.1, 1
  br label %751

; <label>:775                                     ; preds = %751
  %776 = ptrtoint i32* %plix.2 to i64
  %777 = ptrtoint i32* %231 to i64
  %778 = sub i64 %776, %777
  %779 = sdiv exact i64 %778, 4
  %780 = sext i32 %exclChecksum.10 to i64
  %781 = add nsw i64 %780, %779
  %782 = trunc i64 %781 to i32
  %783 = ptrtoint i32* %plim.0 to i64
  %784 = ptrtoint i32* %245 to i64
  %785 = sub i64 %783, %784
  %786 = sdiv exact i64 %785, 4
  %787 = sext i32 %782 to i64
  %788 = add nsw i64 %787, %786
  %789 = trunc i64 %788 to i32
  %790 = ptrtoint i32* %plin.8 to i64
  %791 = ptrtoint i32* %pln.0 to i64
  %792 = sub i64 %790, %791
  %793 = sdiv exact i64 %792, 4
  %794 = trunc i64 %793 to i32
  br label %795

; <label>:795                                     ; preds = %1015, %775
  %k17.2 = phi i32 [ 0, %775 ], [ %1016, %1015 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %775 ], [ %1008, %1015 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %775 ], [ %999, %1015 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %775 ], [ %997, %1015 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %775 ], [ %988, %1015 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %775 ], [ %986, %1015 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %775 ], [ %984, %1015 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %775 ], [ %955, %1015 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %775 ], [ %946, %1015 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %775 ], [ %944, %1015 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %775 ], [ %935, %1015 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %775 ], [ %933, %1015 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %775 ], [ %931, %1015 ]
  %796 = icmp slt i32 %k17.2, %794
  br i1 %796, label %797, label %1017

; <label>:797                                     ; preds = %795
  %798 = sext i32 %k17.2 to i64
  %799 = getelementptr inbounds i32* %pln.0, i64 %798
  %800 = load i32* %799, align 4
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds %struct.CompAtom* %37, i64 %801
  %803 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 0
  %804 = getelementptr inbounds %class.Vector* %803, i32 0, i32 0
  %805 = load double* %804, align 8
  %806 = fsub double %294, %805
  %807 = fmul double %806, %806
  %808 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 0
  %809 = getelementptr inbounds %class.Vector* %808, i32 0, i32 1
  %810 = load double* %809, align 8
  %811 = fsub double %297, %810
  %812 = fmul double %811, %811
  %813 = fadd double %807, %812
  %814 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 0
  %815 = getelementptr inbounds %class.Vector* %814, i32 0, i32 2
  %816 = load double* %815, align 8
  %817 = fsub double %300, %816
  %818 = fmul double %817, %817
  %819 = fadd double %813, %818
  %820 = fptrunc double %819 to float
  %821 = bitcast %union.anon.91* %r2f to float*
  store float %820, float* %821, align 4
  %822 = bitcast %union.anon.91* %r2f to i32*
  %823 = load i32* %822, align 4
  %824 = ashr i32 %823, 17
  %825 = add nsw i32 %824, %25
  %826 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 2
  %827 = load i32* %826, align 4
  %828 = and i32 %827, 4194303
  %829 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %828)
  %830 = zext i16 %829 to i32
  %831 = mul nsw i32 2, %830
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds %"struct.LJTable::TableEntry"* %561, i64 %832
  %834 = mul nsw i32 16, %825
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds double* %14, i64 %835
  %837 = getelementptr inbounds double* %836, i64 0
  %838 = load double* %837, align 8
  %839 = mul nsw i32 16, %825
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds double* %14, i64 %840
  %842 = getelementptr inbounds double* %841, i64 4
  %843 = getelementptr inbounds double* %842, i64 0
  %844 = load double* %843, align 8
  %845 = mul nsw i32 16, %825
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds double* %14, i64 %846
  %848 = getelementptr inbounds double* %847, i64 8
  %849 = getelementptr inbounds double* %848, i64 0
  %850 = load double* %849, align 8
  %851 = mul nsw i32 16, %825
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds double* %14, i64 %852
  %854 = getelementptr inbounds double* %853, i64 8
  %855 = getelementptr inbounds double* %854, i64 4
  %856 = getelementptr inbounds double* %855, i64 0
  %857 = load double* %856, align 8
  %858 = bitcast %union.anon.91* %r2f to i32*
  %859 = load i32* %858, align 4
  %860 = and i32 %859, -131072
  store i32 %860, i32* %858, align 4
  %861 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 1
  %862 = load float* %861, align 4
  %863 = fpext float %862 to double
  %864 = fmul double %555, %863
  %865 = bitcast %union.anon.91* %r2f to float*
  %866 = load float* %865, align 4
  %867 = fpext float %866 to double
  %868 = fsub double %819, %867
  %869 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 2
  %870 = load i32* %869, align 4
  %871 = lshr i32 %870, 28
  %872 = zext i32 %871 to i64
  %873 = getelementptr inbounds double* %549, i64 %872
  %874 = load double* %873, align 8
  %875 = getelementptr inbounds %"struct.LJTable::TableEntry"* %833, i32 0, i32 0
  %876 = load double* %875, align 8
  %877 = fmul double %16, %876
  %878 = getelementptr inbounds %"struct.LJTable::TableEntry"* %833, i32 0, i32 1
  %879 = load double* %878, align 8
  %880 = fmul double %16, %879
  %881 = fmul double %877, %838
  %882 = fmul double %880, %844
  %883 = fsub double %881, %882
  %884 = getelementptr inbounds double* %836, i64 3
  %885 = load double* %884, align 8
  %886 = fmul double %877, %885
  %887 = getelementptr inbounds double* %842, i64 3
  %888 = load double* %887, align 8
  %889 = fmul double %880, %888
  %890 = fsub double %886, %889
  %891 = getelementptr inbounds double* %836, i64 2
  %892 = load double* %891, align 8
  %893 = fmul double %877, %892
  %894 = getelementptr inbounds double* %842, i64 2
  %895 = load double* %894, align 8
  %896 = fmul double %880, %895
  %897 = fsub double %893, %896
  %898 = getelementptr inbounds double* %836, i64 1
  %899 = load double* %898, align 8
  %900 = fmul double %877, %899
  %901 = getelementptr inbounds double* %842, i64 1
  %902 = load double* %901, align 8
  %903 = fmul double %880, %902
  %904 = fsub double %900, %903
  %905 = fmul double %850, %864
  %906 = getelementptr inbounds double* %848, i64 3
  %907 = load double* %906, align 8
  %908 = fmul double %864, %907
  %909 = getelementptr inbounds double* %848, i64 2
  %910 = load double* %909, align 8
  %911 = fmul double %864, %910
  %912 = getelementptr inbounds double* %848, i64 1
  %913 = load double* %912, align 8
  %914 = fmul double %864, %913
  %915 = fadd double %908, %890
  %916 = fadd double %911, %897
  %917 = fadd double %914, %904
  %918 = fadd double %905, %883
  %919 = fmul double 3.000000e+00, %868
  %920 = fmul double %919, %915
  %921 = fmul double 2.000000e+00, %916
  %922 = fadd double %920, %921
  %923 = fmul double %922, %868
  %924 = fadd double %923, %917
  %925 = fmul double -2.000000e+00, %874
  %926 = fmul double %925, %924
  %927 = sext i32 %800 to i64
  %928 = getelementptr inbounds %class.Vector* %251, i64 %927
  %929 = fmul double %926, %806
  %930 = fmul double %929, %806
  %931 = fadd double %virial_xx.1, %930
  %932 = fmul double %929, %811
  %933 = fadd double %virial_xy.1, %932
  %934 = fmul double %929, %817
  %935 = fadd double %virial_xz.1, %934
  %936 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %937 = load double* %936, align 8
  %938 = fadd double %937, %929
  store double %938, double* %936, align 8
  %939 = getelementptr inbounds %class.Vector* %928, i32 0, i32 0
  %940 = load double* %939, align 8
  %941 = fsub double %940, %929
  store double %941, double* %939, align 8
  %942 = fmul double %926, %811
  %943 = fmul double %942, %811
  %944 = fadd double %virial_yy.1, %943
  %945 = fmul double %942, %817
  %946 = fadd double %virial_yz.1, %945
  %947 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %948 = load double* %947, align 8
  %949 = fadd double %948, %942
  store double %949, double* %947, align 8
  %950 = getelementptr inbounds %class.Vector* %928, i32 0, i32 1
  %951 = load double* %950, align 8
  %952 = fsub double %951, %942
  store double %952, double* %950, align 8
  %953 = fmul double %926, %817
  %954 = fmul double %953, %817
  %955 = fadd double %virial_zz.1, %954
  %956 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %957 = load double* %956, align 8
  %958 = fadd double %957, %953
  store double %958, double* %956, align 8
  %959 = getelementptr inbounds %class.Vector* %928, i32 0, i32 2
  %960 = load double* %959, align 8
  %961 = fsub double %960, %953
  store double %961, double* %959, align 8
  %962 = getelementptr inbounds double* %855, i64 1
  %963 = load double* %962, align 8
  %964 = getelementptr inbounds double* %855, i64 2
  %965 = load double* %964, align 8
  %966 = getelementptr inbounds double* %855, i64 3
  %967 = load double* %966, align 8
  %968 = fmul double %967, %864
  %969 = fmul double %965, %864
  %970 = fmul double %963, %864
  %971 = fmul double %857, %864
  %972 = fmul double 3.000000e+00, %868
  %973 = fmul double %972, %968
  %974 = fmul double 2.000000e+00, %969
  %975 = fadd double %973, %974
  %976 = fmul double %975, %868
  %977 = fadd double %976, %970
  %978 = fmul double -2.000000e+00, %977
  %979 = fmul double %978, %874
  %980 = sext i32 %800 to i64
  %981 = getelementptr inbounds %class.Vector* %257, i64 %980
  %982 = fmul double %979, %806
  %983 = fmul double %982, %806
  %984 = fadd double %fullElectVirial_xx.1, %983
  %985 = fmul double %982, %811
  %986 = fadd double %fullElectVirial_xy.1, %985
  %987 = fmul double %982, %817
  %988 = fadd double %fullElectVirial_xz.1, %987
  %989 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %990 = load double* %989, align 8
  %991 = fadd double %990, %982
  store double %991, double* %989, align 8
  %992 = getelementptr inbounds %class.Vector* %981, i32 0, i32 0
  %993 = load double* %992, align 8
  %994 = fsub double %993, %982
  store double %994, double* %992, align 8
  %995 = fmul double %979, %811
  %996 = fmul double %995, %811
  %997 = fadd double %fullElectVirial_yy.1, %996
  %998 = fmul double %995, %817
  %999 = fadd double %fullElectVirial_yz.1, %998
  %1000 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1001 = load double* %1000, align 8
  %1002 = fadd double %1001, %995
  store double %1002, double* %1000, align 8
  %1003 = getelementptr inbounds %class.Vector* %981, i32 0, i32 1
  %1004 = load double* %1003, align 8
  %1005 = fsub double %1004, %995
  store double %1005, double* %1003, align 8
  %1006 = fmul double %979, %817
  %1007 = fmul double %1006, %817
  %1008 = fadd double %fullElectVirial_zz.1, %1007
  %1009 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1010 = load double* %1009, align 8
  %1011 = fadd double %1010, %1006
  store double %1011, double* %1009, align 8
  %1012 = getelementptr inbounds %class.Vector* %981, i32 0, i32 2
  %1013 = load double* %1012, align 8
  %1014 = fsub double %1013, %1006
  store double %1014, double* %1012, align 8
  br label %1015

; <label>:1015                                    ; preds = %797
  %1016 = add nsw i32 %k17.2, 1
  br label %795

; <label>:1017                                    ; preds = %795
  %1018 = ptrtoint i32* %plim.0 to i64
  %1019 = ptrtoint i32* %245 to i64
  %1020 = sub i64 %1018, %1019
  %1021 = sdiv exact i64 %1020, 4
  %1022 = trunc i64 %1021 to i32
  br label %1023

; <label>:1023                                    ; preds = %1265, %1017
  %k17.3 = phi i32 [ 0, %1017 ], [ %1266, %1265 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %1017 ], [ %1258, %1265 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %1017 ], [ %1249, %1265 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %1017 ], [ %1247, %1265 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %1017 ], [ %1238, %1265 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %1017 ], [ %1236, %1265 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %1017 ], [ %1234, %1265 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %1017 ], [ %1186, %1265 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %1017 ], [ %1177, %1265 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %1017 ], [ %1175, %1265 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %1017 ], [ %1166, %1265 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %1017 ], [ %1164, %1265 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %1017 ], [ %1162, %1265 ]
  %1024 = icmp slt i32 %k17.3, %1022
  br i1 %1024, label %1025, label %1267

; <label>:1025                                    ; preds = %1023
  %1026 = sext i32 %k17.3 to i64
  %1027 = getelementptr inbounds i32* %245, i64 %1026
  %1028 = load i32* %1027, align 4
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds %struct.CompAtom* %37, i64 %1029
  %1031 = getelementptr inbounds %struct.CompAtom* %1030, i32 0, i32 0
  %1032 = getelementptr inbounds %class.Vector* %1031, i32 0, i32 0
  %1033 = load double* %1032, align 8
  %1034 = fsub double %294, %1033
  %1035 = fmul double %1034, %1034
  %1036 = getelementptr inbounds %struct.CompAtom* %1030, i32 0, i32 0
  %1037 = getelementptr inbounds %class.Vector* %1036, i32 0, i32 1
  %1038 = load double* %1037, align 8
  %1039 = fsub double %297, %1038
  %1040 = fmul double %1039, %1039
  %1041 = fadd double %1035, %1040
  %1042 = getelementptr inbounds %struct.CompAtom* %1030, i32 0, i32 0
  %1043 = getelementptr inbounds %class.Vector* %1042, i32 0, i32 2
  %1044 = load double* %1043, align 8
  %1045 = fsub double %300, %1044
  %1046 = fmul double %1045, %1045
  %1047 = fadd double %1041, %1046
  %1048 = fptrunc double %1047 to float
  %1049 = bitcast %union.anon.92* %r2f31 to float*
  store float %1048, float* %1049, align 4
  %1050 = bitcast %union.anon.92* %r2f31 to i32*
  %1051 = load i32* %1050, align 4
  %1052 = ashr i32 %1051, 17
  %1053 = add nsw i32 %1052, %25
  %1054 = getelementptr inbounds %struct.CompAtom* %1030, i32 0, i32 2
  %1055 = load i32* %1054, align 4
  %1056 = and i32 %1055, 4194303
  %1057 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1056)
  %1058 = zext i16 %1057 to i32
  %1059 = mul nsw i32 2, %1058
  %1060 = sext i32 %1059 to i64
  %1061 = getelementptr inbounds %"struct.LJTable::TableEntry"* %561, i64 %1060
  %1062 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1061, i64 1
  %1063 = mul nsw i32 16, %1053
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds double* %14, i64 %1064
  %1066 = getelementptr inbounds double* %1065, i64 0
  %1067 = load double* %1066, align 8
  %1068 = mul nsw i32 16, %1053
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds double* %14, i64 %1069
  %1071 = getelementptr inbounds double* %1070, i64 4
  %1072 = getelementptr inbounds double* %1071, i64 0
  %1073 = load double* %1072, align 8
  %1074 = mul nsw i32 16, %1053
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds double* %14, i64 %1075
  %1077 = getelementptr inbounds double* %1076, i64 8
  %1078 = getelementptr inbounds double* %1077, i64 0
  %1079 = load double* %1078, align 8
  %1080 = mul nsw i32 16, %1053
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds double* %14, i64 %1081
  %1083 = getelementptr inbounds double* %1082, i64 8
  %1084 = getelementptr inbounds double* %1083, i64 4
  %1085 = getelementptr inbounds double* %1084, i64 0
  %1086 = load double* %1085, align 8
  %1087 = bitcast %union.anon.92* %r2f31 to i32*
  %1088 = load i32* %1087, align 4
  %1089 = and i32 %1088, -131072
  store i32 %1089, i32* %1087, align 4
  %1090 = getelementptr inbounds %struct.CompAtom* %1030, i32 0, i32 1
  %1091 = load float* %1090, align 4
  %1092 = fpext float %1091 to double
  %1093 = fmul double %555, %1092
  %1094 = bitcast %union.anon.92* %r2f31 to float*
  %1095 = load float* %1094, align 4
  %1096 = fpext float %1095 to double
  %1097 = fsub double %1047, %1096
  %1098 = getelementptr inbounds %struct.CompAtom* %1030, i32 0, i32 2
  %1099 = load i32* %1098, align 4
  %1100 = lshr i32 %1099, 28
  %1101 = zext i32 %1100 to i64
  %1102 = getelementptr inbounds double* %549, i64 %1101
  %1103 = load double* %1102, align 8
  %1104 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1062, i32 0, i32 0
  %1105 = load double* %1104, align 8
  %1106 = fmul double %16, %1105
  %1107 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1062, i32 0, i32 1
  %1108 = load double* %1107, align 8
  %1109 = fmul double %16, %1108
  %1110 = fmul double %1106, %1067
  %1111 = fmul double %1109, %1073
  %1112 = fsub double %1110, %1111
  %1113 = getelementptr inbounds double* %1065, i64 3
  %1114 = load double* %1113, align 8
  %1115 = fmul double %1106, %1114
  %1116 = getelementptr inbounds double* %1071, i64 3
  %1117 = load double* %1116, align 8
  %1118 = fmul double %1109, %1117
  %1119 = fsub double %1115, %1118
  %1120 = getelementptr inbounds double* %1065, i64 2
  %1121 = load double* %1120, align 8
  %1122 = fmul double %1106, %1121
  %1123 = getelementptr inbounds double* %1071, i64 2
  %1124 = load double* %1123, align 8
  %1125 = fmul double %1109, %1124
  %1126 = fsub double %1122, %1125
  %1127 = getelementptr inbounds double* %1065, i64 1
  %1128 = load double* %1127, align 8
  %1129 = fmul double %1106, %1128
  %1130 = getelementptr inbounds double* %1071, i64 1
  %1131 = load double* %1130, align 8
  %1132 = fmul double %1109, %1131
  %1133 = fsub double %1129, %1132
  %1134 = fsub double 1.000000e+00, %18
  %1135 = fmul double %1134, %1093
  %1136 = fmul double %1079, %1135
  %1137 = getelementptr inbounds double* %1077, i64 3
  %1138 = load double* %1137, align 8
  %1139 = fmul double %1135, %1138
  %1140 = getelementptr inbounds double* %1077, i64 2
  %1141 = load double* %1140, align 8
  %1142 = fmul double %1135, %1141
  %1143 = getelementptr inbounds double* %1077, i64 1
  %1144 = load double* %1143, align 8
  %1145 = fmul double %1135, %1144
  %1146 = fadd double %1139, %1119
  %1147 = fadd double %1142, %1126
  %1148 = fadd double %1145, %1133
  %1149 = fadd double %1136, %1112
  %1150 = fmul double 3.000000e+00, %1097
  %1151 = fmul double %1150, %1146
  %1152 = fmul double 2.000000e+00, %1147
  %1153 = fadd double %1151, %1152
  %1154 = fmul double %1153, %1097
  %1155 = fadd double %1154, %1148
  %1156 = fmul double -2.000000e+00, %1103
  %1157 = fmul double %1156, %1155
  %1158 = sext i32 %1028 to i64
  %1159 = getelementptr inbounds %class.Vector* %251, i64 %1158
  %1160 = fmul double %1157, %1034
  %1161 = fmul double %1160, %1034
  %1162 = fadd double %virial_xx.2, %1161
  %1163 = fmul double %1160, %1039
  %1164 = fadd double %virial_xy.2, %1163
  %1165 = fmul double %1160, %1045
  %1166 = fadd double %virial_xz.2, %1165
  %1167 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %1168 = load double* %1167, align 8
  %1169 = fadd double %1168, %1160
  store double %1169, double* %1167, align 8
  %1170 = getelementptr inbounds %class.Vector* %1159, i32 0, i32 0
  %1171 = load double* %1170, align 8
  %1172 = fsub double %1171, %1160
  store double %1172, double* %1170, align 8
  %1173 = fmul double %1157, %1039
  %1174 = fmul double %1173, %1039
  %1175 = fadd double %virial_yy.2, %1174
  %1176 = fmul double %1173, %1045
  %1177 = fadd double %virial_yz.2, %1176
  %1178 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %1179 = load double* %1178, align 8
  %1180 = fadd double %1179, %1173
  store double %1180, double* %1178, align 8
  %1181 = getelementptr inbounds %class.Vector* %1159, i32 0, i32 1
  %1182 = load double* %1181, align 8
  %1183 = fsub double %1182, %1173
  store double %1183, double* %1181, align 8
  %1184 = fmul double %1157, %1045
  %1185 = fmul double %1184, %1045
  %1186 = fadd double %virial_zz.2, %1185
  %1187 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %1188 = load double* %1187, align 8
  %1189 = fadd double %1188, %1184
  store double %1189, double* %1187, align 8
  %1190 = getelementptr inbounds %class.Vector* %1159, i32 0, i32 2
  %1191 = load double* %1190, align 8
  %1192 = fsub double %1191, %1184
  store double %1192, double* %1190, align 8
  %1193 = getelementptr inbounds double* %1084, i64 1
  %1194 = load double* %1193, align 8
  %1195 = getelementptr inbounds double* %1084, i64 2
  %1196 = load double* %1195, align 8
  %1197 = getelementptr inbounds double* %1084, i64 3
  %1198 = load double* %1197, align 8
  %1199 = mul nsw i32 4, %1053
  %1200 = sext i32 %1199 to i64
  %1201 = getelementptr inbounds double* %15, i64 %1200
  %1202 = getelementptr inbounds double* %1201, i64 0
  %1203 = load double* %1202, align 8
  %1204 = fmul double %18, %1203
  %1205 = fsub double %1086, %1204
  %1206 = getelementptr inbounds double* %1201, i64 1
  %1207 = load double* %1206, align 8
  %1208 = fmul double %18, %1207
  %1209 = fsub double %1194, %1208
  %1210 = getelementptr inbounds double* %1201, i64 2
  %1211 = load double* %1210, align 8
  %1212 = fmul double %18, %1211
  %1213 = fsub double %1196, %1212
  %1214 = getelementptr inbounds double* %1201, i64 3
  %1215 = load double* %1214, align 8
  %1216 = fmul double %18, %1215
  %1217 = fsub double %1198, %1216
  %1218 = fmul double %1217, %1093
  %1219 = fmul double %1213, %1093
  %1220 = fmul double %1209, %1093
  %1221 = fmul double %1205, %1093
  %1222 = fmul double 3.000000e+00, %1097
  %1223 = fmul double %1222, %1218
  %1224 = fmul double 2.000000e+00, %1219
  %1225 = fadd double %1223, %1224
  %1226 = fmul double %1225, %1097
  %1227 = fadd double %1226, %1220
  %1228 = fmul double -2.000000e+00, %1227
  %1229 = fmul double %1228, %1103
  %1230 = sext i32 %1028 to i64
  %1231 = getelementptr inbounds %class.Vector* %257, i64 %1230
  %1232 = fmul double %1229, %1034
  %1233 = fmul double %1232, %1034
  %1234 = fadd double %fullElectVirial_xx.2, %1233
  %1235 = fmul double %1232, %1039
  %1236 = fadd double %fullElectVirial_xy.2, %1235
  %1237 = fmul double %1232, %1045
  %1238 = fadd double %fullElectVirial_xz.2, %1237
  %1239 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1240 = load double* %1239, align 8
  %1241 = fadd double %1240, %1232
  store double %1241, double* %1239, align 8
  %1242 = getelementptr inbounds %class.Vector* %1231, i32 0, i32 0
  %1243 = load double* %1242, align 8
  %1244 = fsub double %1243, %1232
  store double %1244, double* %1242, align 8
  %1245 = fmul double %1229, %1039
  %1246 = fmul double %1245, %1039
  %1247 = fadd double %fullElectVirial_yy.2, %1246
  %1248 = fmul double %1245, %1045
  %1249 = fadd double %fullElectVirial_yz.2, %1248
  %1250 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1251 = load double* %1250, align 8
  %1252 = fadd double %1251, %1245
  store double %1252, double* %1250, align 8
  %1253 = getelementptr inbounds %class.Vector* %1231, i32 0, i32 1
  %1254 = load double* %1253, align 8
  %1255 = fsub double %1254, %1245
  store double %1255, double* %1253, align 8
  %1256 = fmul double %1229, %1045
  %1257 = fmul double %1256, %1045
  %1258 = fadd double %fullElectVirial_zz.2, %1257
  %1259 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1260 = load double* %1259, align 8
  %1261 = fadd double %1260, %1256
  store double %1261, double* %1259, align 8
  %1262 = getelementptr inbounds %class.Vector* %1231, i32 0, i32 2
  %1263 = load double* %1262, align 8
  %1264 = fsub double %1263, %1256
  store double %1264, double* %1262, align 8
  br label %1265

; <label>:1265                                    ; preds = %1025
  %1266 = add nsw i32 %k17.3, 1
  br label %1023

; <label>:1267                                    ; preds = %1023
  %1268 = ptrtoint i32* %plix.2 to i64
  %1269 = ptrtoint i32* %231 to i64
  %1270 = sub i64 %1268, %1269
  %1271 = sdiv exact i64 %1270, 4
  %1272 = trunc i64 %1271 to i32
  br label %1273

; <label>:1273                                    ; preds = %1396, %1267
  %k17.4 = phi i32 [ 0, %1267 ], [ %1397, %1396 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1267 ], [ %1389, %1396 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1267 ], [ %1380, %1396 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1267 ], [ %1378, %1396 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1267 ], [ %1369, %1396 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1267 ], [ %1367, %1396 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1267 ], [ %1365, %1396 ]
  %1274 = icmp slt i32 %k17.4, %1272
  br i1 %1274, label %1275, label %1398

; <label>:1275                                    ; preds = %1273
  %1276 = sext i32 %k17.4 to i64
  %1277 = getelementptr inbounds i32* %231, i64 %1276
  %1278 = load i32* %1277, align 4
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds %struct.CompAtom* %37, i64 %1279
  %1281 = getelementptr inbounds %struct.CompAtom* %1280, i32 0, i32 0
  %1282 = getelementptr inbounds %class.Vector* %1281, i32 0, i32 0
  %1283 = load double* %1282, align 8
  %1284 = fsub double %294, %1283
  %1285 = fmul double %1284, %1284
  %1286 = getelementptr inbounds %struct.CompAtom* %1280, i32 0, i32 0
  %1287 = getelementptr inbounds %class.Vector* %1286, i32 0, i32 1
  %1288 = load double* %1287, align 8
  %1289 = fsub double %297, %1288
  %1290 = fmul double %1289, %1289
  %1291 = fadd double %1285, %1290
  %1292 = getelementptr inbounds %struct.CompAtom* %1280, i32 0, i32 0
  %1293 = getelementptr inbounds %class.Vector* %1292, i32 0, i32 2
  %1294 = load double* %1293, align 8
  %1295 = fsub double %300, %1294
  %1296 = fmul double %1295, %1295
  %1297 = fadd double %1291, %1296
  %1298 = fptrunc double %1297 to float
  %1299 = bitcast %union.anon.93* %r2f75 to float*
  store float %1298, float* %1299, align 4
  %1300 = bitcast %union.anon.93* %r2f75 to i32*
  %1301 = load i32* %1300, align 4
  %1302 = ashr i32 %1301, 17
  %1303 = add nsw i32 %1302, %25
  %1304 = mul nsw i32 16, %1303
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds double* %14, i64 %1305
  %1307 = getelementptr inbounds double* %1306, i64 8
  %1308 = getelementptr inbounds double* %1307, i64 4
  %1309 = getelementptr inbounds double* %1308, i64 0
  %1310 = load double* %1309, align 8
  %1311 = bitcast %union.anon.93* %r2f75 to i32*
  %1312 = load i32* %1311, align 4
  %1313 = and i32 %1312, -131072
  store i32 %1313, i32* %1311, align 4
  %1314 = getelementptr inbounds %struct.CompAtom* %1280, i32 0, i32 1
  %1315 = load float* %1314, align 4
  %1316 = fpext float %1315 to double
  %1317 = fmul double %555, %1316
  %1318 = bitcast %union.anon.93* %r2f75 to float*
  %1319 = load float* %1318, align 4
  %1320 = fpext float %1319 to double
  %1321 = fsub double %1297, %1320
  %1322 = getelementptr inbounds %struct.CompAtom* %1280, i32 0, i32 2
  %1323 = load i32* %1322, align 4
  %1324 = lshr i32 %1323, 28
  %1325 = zext i32 %1324 to i64
  %1326 = getelementptr inbounds double* %549, i64 %1325
  %1327 = load double* %1326, align 8
  %1328 = getelementptr inbounds double* %1308, i64 1
  %1329 = load double* %1328, align 8
  %1330 = getelementptr inbounds double* %1308, i64 2
  %1331 = load double* %1330, align 8
  %1332 = getelementptr inbounds double* %1308, i64 3
  %1333 = load double* %1332, align 8
  %1334 = mul nsw i32 4, %1303
  %1335 = sext i32 %1334 to i64
  %1336 = getelementptr inbounds double* %15, i64 %1335
  %1337 = getelementptr inbounds double* %1336, i64 0
  %1338 = load double* %1337, align 8
  %1339 = fsub double %1310, %1338
  %1340 = getelementptr inbounds double* %1336, i64 1
  %1341 = load double* %1340, align 8
  %1342 = fsub double %1329, %1341
  %1343 = getelementptr inbounds double* %1336, i64 2
  %1344 = load double* %1343, align 8
  %1345 = fsub double %1331, %1344
  %1346 = getelementptr inbounds double* %1336, i64 3
  %1347 = load double* %1346, align 8
  %1348 = fsub double %1333, %1347
  %1349 = fmul double %1348, %1317
  %1350 = fmul double %1345, %1317
  %1351 = fmul double %1342, %1317
  %1352 = fmul double %1339, %1317
  %1353 = fmul double 3.000000e+00, %1321
  %1354 = fmul double %1353, %1349
  %1355 = fmul double 2.000000e+00, %1350
  %1356 = fadd double %1354, %1355
  %1357 = fmul double %1356, %1321
  %1358 = fadd double %1357, %1351
  %1359 = fmul double -2.000000e+00, %1358
  %1360 = fmul double %1359, %1327
  %1361 = sext i32 %1278 to i64
  %1362 = getelementptr inbounds %class.Vector* %257, i64 %1361
  %1363 = fmul double %1360, %1284
  %1364 = fmul double %1363, %1284
  %1365 = fadd double %fullElectVirial_xx.3, %1364
  %1366 = fmul double %1363, %1289
  %1367 = fadd double %fullElectVirial_xy.3, %1366
  %1368 = fmul double %1363, %1295
  %1369 = fadd double %fullElectVirial_xz.3, %1368
  %1370 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1371 = load double* %1370, align 8
  %1372 = fadd double %1371, %1363
  store double %1372, double* %1370, align 8
  %1373 = getelementptr inbounds %class.Vector* %1362, i32 0, i32 0
  %1374 = load double* %1373, align 8
  %1375 = fsub double %1374, %1363
  store double %1375, double* %1373, align 8
  %1376 = fmul double %1360, %1289
  %1377 = fmul double %1376, %1289
  %1378 = fadd double %fullElectVirial_yy.3, %1377
  %1379 = fmul double %1376, %1295
  %1380 = fadd double %fullElectVirial_yz.3, %1379
  %1381 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1382 = load double* %1381, align 8
  %1383 = fadd double %1382, %1376
  store double %1383, double* %1381, align 8
  %1384 = getelementptr inbounds %class.Vector* %1362, i32 0, i32 1
  %1385 = load double* %1384, align 8
  %1386 = fsub double %1385, %1376
  store double %1386, double* %1384, align 8
  %1387 = fmul double %1360, %1295
  %1388 = fmul double %1387, %1295
  %1389 = fadd double %fullElectVirial_zz.3, %1388
  %1390 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1391 = load double* %1390, align 8
  %1392 = fadd double %1391, %1387
  store double %1392, double* %1390, align 8
  %1393 = getelementptr inbounds %class.Vector* %1362, i32 0, i32 2
  %1394 = load double* %1393, align 8
  %1395 = fsub double %1394, %1387
  store double %1395, double* %1393, align 8
  br label %1396

; <label>:1396                                    ; preds = %1275
  %1397 = add nsw i32 %k17.4, 1
  br label %1273

; <label>:1398                                    ; preds = %1273
  br label %1399

; <label>:1399                                    ; preds = %1398, %338
  %g_lower.4 = phi i32 [ %g_lower.0, %338 ], [ %g_lower.3, %1398 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %338 ], [ %j_hgroup.2, %1398 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %338 ], [ %fixg_lower.3, %1398 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %338 ], [ %pairlistindex.2, %1398 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %338 ], [ %pairlistoffset.1, %1398 ]
  %pairCount.3 = phi i32 [ %334, %338 ], [ %pairCount.2, %1398 ]
  %i.1 = phi i32 [ %340, %338 ], [ %i.0, %1398 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %338 ], [ %fullElectVirial_zz.3, %1398 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %338 ], [ %fullElectVirial_yz.3, %1398 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %338 ], [ %fullElectVirial_yy.3, %1398 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %338 ], [ %fullElectVirial_xz.3, %1398 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %338 ], [ %fullElectVirial_xy.3, %1398 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %338 ], [ %fullElectVirial_xx.3, %1398 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %338 ], [ %virial_zz.2, %1398 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %338 ], [ %virial_yz.2, %1398 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %338 ], [ %virial_yy.2, %1398 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %338 ], [ %virial_xz.2, %1398 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %338 ], [ %virial_xy.2, %1398 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %338 ], [ %virial_xx.2, %1398 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %338 ], [ %789, %1398 ]
  %1400 = add nsw i32 %i.1, 1
  br label %273

; <label>:1401                                    ; preds = %273
  %1402 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1403 = icmp ne i32* %51, %1402
  br i1 %1403, label %1404, label %1409

; <label>:1404                                    ; preds = %1401
  %1405 = icmp eq i32* %51, null
  br i1 %1405, label %1408, label %1406

; <label>:1406                                    ; preds = %1404
  %1407 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1407) #8
  br label %1408

; <label>:1408                                    ; preds = %1406, %1404
  br label %1409

; <label>:1409                                    ; preds = %1408, %1401
  %1410 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1411 = icmp ne i32* %65, %1410
  br i1 %1411, label %1412, label %1417

; <label>:1412                                    ; preds = %1409
  %1413 = icmp eq i32* %65, null
  br i1 %1413, label %1416, label %1414

; <label>:1414                                    ; preds = %1412
  %1415 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1415) #8
  br label %1416

; <label>:1416                                    ; preds = %1414, %1412
  br label %1417

; <label>:1417                                    ; preds = %1416, %1409
  %1418 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1419 = icmp ne i32* %79, %1418
  br i1 %1419, label %1420, label %1425

; <label>:1420                                    ; preds = %1417
  %1421 = icmp eq i32* %79, null
  br i1 %1421, label %1424, label %1422

; <label>:1422                                    ; preds = %1420
  %1423 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1423) #8
  br label %1424

; <label>:1424                                    ; preds = %1422, %1420
  br label %1425

; <label>:1425                                    ; preds = %1424, %1417
  %1426 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1427 = icmp ne i32* %189, %1426
  br i1 %1427, label %1428, label %1433

; <label>:1428                                    ; preds = %1425
  %1429 = icmp eq i32* %189, null
  br i1 %1429, label %1432, label %1430

; <label>:1430                                    ; preds = %1428
  %1431 = bitcast i32* %189 to i8*
  call void @_ZdaPv(i8* %1431) #8
  br label %1432

; <label>:1432                                    ; preds = %1430, %1428
  br label %1433

; <label>:1433                                    ; preds = %1432, %1425
  %1434 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1435 = icmp ne i32* %203, %1434
  br i1 %1435, label %1436, label %1441

; <label>:1436                                    ; preds = %1433
  %1437 = icmp eq i32* %203, null
  br i1 %1437, label %1440, label %1438

; <label>:1438                                    ; preds = %1436
  %1439 = bitcast i32* %203 to i8*
  call void @_ZdaPv(i8* %1439) #8
  br label %1440

; <label>:1440                                    ; preds = %1438, %1436
  br label %1441

; <label>:1441                                    ; preds = %1440, %1433
  %1442 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1443 = icmp ne i32* %217, %1442
  br i1 %1443, label %1444, label %1449

; <label>:1444                                    ; preds = %1441
  %1445 = icmp eq i32* %217, null
  br i1 %1445, label %1448, label %1446

; <label>:1446                                    ; preds = %1444
  %1447 = bitcast i32* %217 to i8*
  call void @_ZdaPv(i8* %1447) #8
  br label %1448

; <label>:1448                                    ; preds = %1446, %1444
  br label %1449

; <label>:1449                                    ; preds = %1448, %1441
  %1450 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1451 = icmp ne i32* %231, %1450
  br i1 %1451, label %1452, label %1457

; <label>:1452                                    ; preds = %1449
  %1453 = icmp eq i32* %231, null
  br i1 %1453, label %1456, label %1454

; <label>:1454                                    ; preds = %1452
  %1455 = bitcast i32* %231 to i8*
  call void @_ZdaPv(i8* %1455) #8
  br label %1456

; <label>:1456                                    ; preds = %1454, %1452
  br label %1457

; <label>:1457                                    ; preds = %1456, %1449
  %1458 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1459 = icmp ne i32* %245, %1458
  br i1 %1459, label %1460, label %1465

; <label>:1460                                    ; preds = %1457
  %1461 = icmp eq i32* %245, null
  br i1 %1461, label %1464, label %1462

; <label>:1462                                    ; preds = %1460
  %1463 = bitcast i32* %245 to i8*
  call void @_ZdaPv(i8* %1463) #8
  br label %1464

; <label>:1464                                    ; preds = %1462, %1460
  br label %1465

; <label>:1465                                    ; preds = %1464, %1457
  %1466 = sitofp i32 %exclChecksum.0 to double
  %1467 = getelementptr inbounds double* %6, i64 22
  %1468 = load double* %1467, align 8
  %1469 = fadd double %1468, %1466
  store double %1469, double* %1467, align 8
  %1470 = getelementptr inbounds double* %6, i64 3
  %1471 = load double* %1470, align 8
  %1472 = fadd double %1471, %virial_xx.0
  store double %1472, double* %1470, align 8
  %1473 = getelementptr inbounds double* %6, i64 4
  %1474 = load double* %1473, align 8
  %1475 = fadd double %1474, %virial_xy.0
  store double %1475, double* %1473, align 8
  %1476 = getelementptr inbounds double* %6, i64 5
  %1477 = load double* %1476, align 8
  %1478 = fadd double %1477, %virial_xz.0
  store double %1478, double* %1476, align 8
  %1479 = getelementptr inbounds double* %6, i64 6
  %1480 = load double* %1479, align 8
  %1481 = fadd double %1480, %virial_xy.0
  store double %1481, double* %1479, align 8
  %1482 = getelementptr inbounds double* %6, i64 7
  %1483 = load double* %1482, align 8
  %1484 = fadd double %1483, %virial_yy.0
  store double %1484, double* %1482, align 8
  %1485 = getelementptr inbounds double* %6, i64 8
  %1486 = load double* %1485, align 8
  %1487 = fadd double %1486, %virial_yz.0
  store double %1487, double* %1485, align 8
  %1488 = getelementptr inbounds double* %6, i64 9
  %1489 = load double* %1488, align 8
  %1490 = fadd double %1489, %virial_xz.0
  store double %1490, double* %1488, align 8
  %1491 = getelementptr inbounds double* %6, i64 10
  %1492 = load double* %1491, align 8
  %1493 = fadd double %1492, %virial_yz.0
  store double %1493, double* %1491, align 8
  %1494 = getelementptr inbounds double* %6, i64 11
  %1495 = load double* %1494, align 8
  %1496 = fadd double %1495, %virial_zz.0
  store double %1496, double* %1494, align 8
  %1497 = getelementptr inbounds double* %6, i64 12
  %1498 = load double* %1497, align 8
  %1499 = fadd double %1498, %fullElectVirial_xx.0
  store double %1499, double* %1497, align 8
  %1500 = getelementptr inbounds double* %6, i64 13
  %1501 = load double* %1500, align 8
  %1502 = fadd double %1501, %fullElectVirial_xy.0
  store double %1502, double* %1500, align 8
  %1503 = getelementptr inbounds double* %6, i64 14
  %1504 = load double* %1503, align 8
  %1505 = fadd double %1504, %fullElectVirial_xz.0
  store double %1505, double* %1503, align 8
  %1506 = getelementptr inbounds double* %6, i64 15
  %1507 = load double* %1506, align 8
  %1508 = fadd double %1507, %fullElectVirial_xy.0
  store double %1508, double* %1506, align 8
  %1509 = getelementptr inbounds double* %6, i64 16
  %1510 = load double* %1509, align 8
  %1511 = fadd double %1510, %fullElectVirial_yy.0
  store double %1511, double* %1509, align 8
  %1512 = getelementptr inbounds double* %6, i64 17
  %1513 = load double* %1512, align 8
  %1514 = fadd double %1513, %fullElectVirial_yz.0
  store double %1514, double* %1512, align 8
  %1515 = getelementptr inbounds double* %6, i64 18
  %1516 = load double* %1515, align 8
  %1517 = fadd double %1516, %fullElectVirial_xz.0
  store double %1517, double* %1515, align 8
  %1518 = getelementptr inbounds double* %6, i64 19
  %1519 = load double* %1518, align 8
  %1520 = fadd double %1519, %fullElectVirial_yz.0
  store double %1520, double* %1518, align 8
  %1521 = getelementptr inbounds double* %6, i64 20
  %1522 = load double* %1521, align 8
  %1523 = fadd double %1522, %fullElectVirial_zz.0
  store double %1523, double* %1521, align 8
  br label %1524

; <label>:1524                                    ; preds = %1465, %164, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil30calc_self_energy_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.94, align 4
  %r2f31 = alloca %union.anon.95, align 4
  %r2f78 = alloca %union.anon.96, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1589

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %166

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  %139 = icmp ne i32 %all_fixed.0, 0
  br i1 %139, label %140, label %165

; <label>:140                                     ; preds = %138
  %141 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %142 = icmp ne i32* %51, %141
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %140
  %144 = icmp eq i32* %51, null
  br i1 %144, label %147, label %145

; <label>:145                                     ; preds = %143
  %146 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %146) #8
  br label %147

; <label>:147                                     ; preds = %145, %143
  br label %148

; <label>:148                                     ; preds = %147, %140
  %149 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %150 = icmp ne i32* %65, %149
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %148
  %152 = icmp eq i32* %65, null
  br i1 %152, label %155, label %153

; <label>:153                                     ; preds = %151
  %154 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %154) #8
  br label %155

; <label>:155                                     ; preds = %153, %151
  br label %156

; <label>:156                                     ; preds = %155, %148
  %157 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %158 = icmp ne i32* %79, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %79, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  br label %1589

; <label>:165                                     ; preds = %138
  br label %166

; <label>:166                                     ; preds = %165, %114
  %fixg.2 = phi i32 [ %fixg.0, %165 ], [ 0, %114 ]
  %167 = icmp ne i32 %fixg.2, 0
  br i1 %167, label %168, label %175

; <label>:168                                     ; preds = %166
  %169 = sub nsw i32 %fixg.2, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32* %65, i64 %170
  %172 = load i32* %171, align 4
  %173 = sext i32 %fixg.2 to i64
  %174 = getelementptr inbounds i32* %65, i64 %173
  store i32 %172, i32* %174, align 4
  br label %175

; <label>:175                                     ; preds = %168, %166
  %176 = icmp slt i32 %31, 1000
  br i1 %176, label %177, label %179

; <label>:177                                     ; preds = %175
  %178 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %188

; <label>:179                                     ; preds = %175
  %180 = add nsw i32 %31, 5
  %181 = sext i32 %180 to i64
  %182 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %181, i64 4)
  %183 = extractvalue { i64, i1 } %182, 1
  %184 = extractvalue { i64, i1 } %182, 0
  %185 = select i1 %183, i64 -1, i64 %184
  %186 = call noalias i8* @_Znam(i64 %185) #9
  %187 = bitcast i8* %186 to i32*
  br label %188

; <label>:188                                     ; preds = %179, %177
  %189 = phi i32* [ %178, %177 ], [ %187, %179 ]
  %190 = icmp slt i32 %31, 1000
  br i1 %190, label %191, label %193

; <label>:191                                     ; preds = %188
  %192 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %202

; <label>:193                                     ; preds = %188
  %194 = add nsw i32 %31, 5
  %195 = sext i32 %194 to i64
  %196 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %195, i64 4)
  %197 = extractvalue { i64, i1 } %196, 1
  %198 = extractvalue { i64, i1 } %196, 0
  %199 = select i1 %197, i64 -1, i64 %198
  %200 = call noalias i8* @_Znam(i64 %199) #9
  %201 = bitcast i8* %200 to i32*
  br label %202

; <label>:202                                     ; preds = %193, %191
  %203 = phi i32* [ %192, %191 ], [ %201, %193 ]
  %204 = icmp slt i32 %31, 1000
  br i1 %204, label %205, label %207

; <label>:205                                     ; preds = %202
  %206 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %216

; <label>:207                                     ; preds = %202
  %208 = add nsw i32 %31, 5
  %209 = sext i32 %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %209, i64 4)
  %211 = extractvalue { i64, i1 } %210, 1
  %212 = extractvalue { i64, i1 } %210, 0
  %213 = select i1 %211, i64 -1, i64 %212
  %214 = call noalias i8* @_Znam(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  br label %216

; <label>:216                                     ; preds = %207, %205
  %217 = phi i32* [ %206, %205 ], [ %215, %207 ]
  %218 = icmp slt i32 %31, 1000
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %216
  %220 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %230

; <label>:221                                     ; preds = %216
  %222 = add nsw i32 %31, 5
  %223 = sext i32 %222 to i64
  %224 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %223, i64 4)
  %225 = extractvalue { i64, i1 } %224, 1
  %226 = extractvalue { i64, i1 } %224, 0
  %227 = select i1 %225, i64 -1, i64 %226
  %228 = call noalias i8* @_Znam(i64 %227) #9
  %229 = bitcast i8* %228 to i32*
  br label %230

; <label>:230                                     ; preds = %221, %219
  %231 = phi i32* [ %220, %219 ], [ %229, %221 ]
  %232 = icmp slt i32 %31, 1000
  br i1 %232, label %233, label %235

; <label>:233                                     ; preds = %230
  %234 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %244

; <label>:235                                     ; preds = %230
  %236 = add nsw i32 %31, 5
  %237 = sext i32 %236 to i64
  %238 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %237, i64 4)
  %239 = extractvalue { i64, i1 } %238, 1
  %240 = extractvalue { i64, i1 } %238, 0
  %241 = select i1 %239, i64 -1, i64 %240
  %242 = call noalias i8* @_Znam(i64 %241) #9
  %243 = bitcast i8* %242 to i32*
  br label %244

; <label>:244                                     ; preds = %235, %233
  %245 = phi i32* [ %234, %233 ], [ %243, %235 ]
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 0
  %248 = load %class.Vector** %247, align 8
  %249 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %250 = getelementptr inbounds [2 x %class.Vector*]* %249, i32 0, i64 1
  %251 = load %class.Vector** %250, align 8
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %253 = getelementptr inbounds [2 x %class.Vector*]* %252, i32 0, i64 0
  %254 = load %class.Vector** %253, align 8
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %256 = getelementptr inbounds [2 x %class.Vector*]* %255, i32 0, i64 1
  %257 = load %class.Vector** %256, align 8
  %258 = sub nsw i32 %28, 1
  %259 = mul nsw i32 %258, %31
  %260 = sdiv i32 %259, 2
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %262 = load i32* %261, align 4
  %263 = mul nsw i32 %260, %262
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %265 = load i32* %264, align 4
  %266 = sdiv i32 %263, %265
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %268 = load i32* %267, align 4
  %269 = mul nsw i32 %260, %268
  %270 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %271 = load i32* %270, align 4
  %272 = sdiv i32 %269, %271
  br label %273

; <label>:273                                     ; preds = %1455, %244
  %g_lower.0 = phi i32 [ 0, %244 ], [ %g_lower.4, %1455 ]
  %j_hgroup.0 = phi i32 [ 0, %244 ], [ %j_hgroup.3, %1455 ]
  %fixg_lower.0 = phi i32 [ 0, %244 ], [ %fixg_lower.4, %1455 ]
  %pairlistindex.0 = phi i32 [ 0, %244 ], [ %pairlistindex.3, %1455 ]
  %pairlistoffset.0 = phi i32 [ 0, %244 ], [ %pairlistoffset.2, %1455 ]
  %pairCount.0 = phi i32 [ 0, %244 ], [ %pairCount.3, %1455 ]
  %i.0 = phi i32 [ 0, %244 ], [ %1456, %1455 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_zz.4, %1455 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yz.4, %1455 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yy.4, %1455 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xz.4, %1455 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xy.4, %1455 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xx.4, %1455 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectEnergy.4, %1455 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_zz.3, %1455 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yz.3, %1455 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yy.3, %1455 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xz.3, %1455 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xy.3, %1455 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xx.3, %1455 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %electEnergy.3, %1455 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %vdwEnergy.3, %1455 ]
  %exclChecksum.0 = phi i32 [ 0, %244 ], [ %exclChecksum.11, %1455 ]
  %274 = sub nsw i32 %28, 1
  %275 = icmp slt i32 %i.0, %274
  br i1 %275, label %276, label %1457

; <label>:276                                     ; preds = %273
  %277 = sext i32 %i.0 to i64
  %278 = getelementptr inbounds %struct.CompAtom* %34, i64 %277
  %279 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %280 = load i32* %279, align 4
  %281 = and i32 %280, 4194303
  %282 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %281)
  %283 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 0
  %284 = load i32* %283, align 4
  %285 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 1
  %286 = load i32* %285, align 4
  %287 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 2
  %288 = load i8** %287, align 8
  %289 = sext i32 %284 to i64
  %290 = sub i64 0, %289
  %291 = getelementptr inbounds i8* %288, i64 %290
  %292 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %293 = getelementptr inbounds %class.Vector* %292, i32 0, i32 0
  %294 = load double* %293, align 8
  %295 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %296 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %297 = load double* %296, align 8
  %298 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %299 = getelementptr inbounds %class.Vector* %298, i32 0, i32 2
  %300 = load double* %299, align 8
  %301 = sext i32 %i.0 to i64
  %302 = getelementptr inbounds %class.Vector* %248, i64 %301
  %303 = sext i32 %i.0 to i64
  %304 = getelementptr inbounds %class.Vector* %254, i64 %303
  %305 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %306 = load i32* %305, align 4
  %307 = lshr i32 %306, 22
  %308 = and i32 %307, 7
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %316, label %310

; <label>:310                                     ; preds = %276
  %311 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %312 = load i32* %311, align 4
  %313 = lshr i32 %312, 25
  %314 = and i32 %313, 1
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %527

; <label>:316                                     ; preds = %310, %276
  %317 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %318 = load i32* %317, align 4
  %319 = lshr i32 %318, 22
  %320 = and i32 %319, 7
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %342

; <label>:322                                     ; preds = %316
  %323 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %324 = load i32* %323, align 4
  %325 = lshr i32 %324, 22
  %326 = and i32 %325, 7
  %327 = sub nsw i32 %28, 1
  %328 = sub nsw i32 %327, %i.0
  %329 = mul nsw i32 %326, %328
  %330 = add nsw i32 %pairCount.0, %329
  %331 = sub nsw i32 %326, 1
  %332 = mul nsw i32 %326, %331
  %333 = sdiv i32 %332, 2
  %334 = sub nsw i32 %330, %333
  %335 = icmp slt i32 %pairCount.0, %266
  br i1 %335, label %338, label %336

; <label>:336                                     ; preds = %322
  %337 = icmp sge i32 %pairCount.0, %272
  br i1 %337, label %338, label %341

; <label>:338                                     ; preds = %336, %322
  %339 = sub nsw i32 %326, 1
  %340 = add nsw i32 %i.0, %339
  br label %1455

; <label>:341                                     ; preds = %336
  br label %342

; <label>:342                                     ; preds = %341, %316
  %pairCount.1 = phi i32 [ %334, %341 ], [ %pairCount.0, %316 ]
  %343 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %351

; <label>:345                                     ; preds = %342
  %346 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %347 = load i32* %346, align 4
  %348 = lshr i32 %347, 27
  %349 = and i32 %348, 1
  %350 = icmp ne i32 %349, 0
  br label %351

; <label>:351                                     ; preds = %345, %342
  %352 = phi i1 [ false, %342 ], [ %350, %345 ]
  %353 = zext i1 %352 to i32
  %354 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %355 = load i32* %354, align 4
  %356 = lshr i32 %355, 22
  %357 = and i32 %356, 7
  %358 = icmp ne i32 %357, 0
  br i1 %358, label %359, label %389

; <label>:359                                     ; preds = %351
  %360 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %361 = load i32* %360, align 4
  %362 = lshr i32 %361, 22
  %363 = and i32 %362, 7
  %364 = add nsw i32 %i.0, %363
  br label %365

; <label>:365                                     ; preds = %374, %359
  %g_lower.1 = phi i32 [ %g_lower.0, %359 ], [ %375, %374 ]
  %366 = icmp slt i32 %g_lower.1, %g.0
  br i1 %366, label %367, label %372

; <label>:367                                     ; preds = %365
  %368 = sext i32 %g_lower.1 to i64
  %369 = getelementptr inbounds i32* %51, i64 %368
  %370 = load i32* %369, align 4
  %371 = icmp slt i32 %370, %364
  br label %372

; <label>:372                                     ; preds = %367, %365
  %373 = phi i1 [ false, %365 ], [ %371, %367 ]
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %372
  %375 = add nsw i32 %g_lower.1, 1
  br label %365

; <label>:376                                     ; preds = %372
  br label %377

; <label>:377                                     ; preds = %386, %376
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %376 ], [ %387, %386 ]
  %378 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %378, label %379, label %384

; <label>:379                                     ; preds = %377
  %380 = sext i32 %fixg_lower.1 to i64
  %381 = getelementptr inbounds i32* %65, i64 %380
  %382 = load i32* %381, align 4
  %383 = icmp slt i32 %382, %364
  br label %384

; <label>:384                                     ; preds = %379, %377
  %385 = phi i1 [ false, %377 ], [ %383, %379 ]
  br i1 %385, label %386, label %388

; <label>:386                                     ; preds = %384
  %387 = add nsw i32 %fixg_lower.1, 1
  br label %377

; <label>:388                                     ; preds = %384
  br label %389

; <label>:389                                     ; preds = %388, %351
  %g_lower.2 = phi i32 [ %g_lower.1, %388 ], [ %g_lower.0, %351 ]
  %j_hgroup.1 = phi i32 [ %364, %388 ], [ %j_hgroup.0, %351 ]
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %388 ], [ %fixg_lower.0, %351 ]
  %390 = add nsw i32 %i.0, 1
  br label %391

; <label>:391                                     ; preds = %397, %389
  %pairlistindex.1 = phi i32 [ 0, %389 ], [ %394, %397 ]
  %j.1 = phi i32 [ %390, %389 ], [ %398, %397 ]
  %392 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %392, label %393, label %399

; <label>:393                                     ; preds = %391
  %394 = add nsw i32 %pairlistindex.1, 1
  %395 = sext i32 %pairlistindex.1 to i64
  %396 = getelementptr inbounds i32* %189, i64 %395
  store i32 %j.1, i32* %396, align 4
  br label %397

; <label>:397                                     ; preds = %393
  %398 = add nsw i32 %j.1, 1
  br label %391

; <label>:399                                     ; preds = %391
  %400 = sext i32 %pairlistindex.1 to i64
  %401 = getelementptr inbounds i32* %189, i64 %400
  %402 = icmp ne i32 %353, 0
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %399
  br label %405

; <label>:404                                     ; preds = %399
  br label %405

; <label>:405                                     ; preds = %404, %403
  %406 = phi i32* [ %65, %403 ], [ %51, %404 ]
  %407 = icmp ne i32 %353, 0
  br i1 %407, label %408, label %409

; <label>:408                                     ; preds = %405
  br label %410

; <label>:409                                     ; preds = %405
  br label %410

; <label>:410                                     ; preds = %409, %408
  %411 = phi i32 [ %fixg_lower.2, %408 ], [ %g_lower.2, %409 ]
  %412 = icmp ne i32 %353, 0
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %410
  br label %415

; <label>:414                                     ; preds = %410
  br label %415

; <label>:415                                     ; preds = %414, %413
  %416 = phi i32 [ %fixg.2, %413 ], [ %g.0, %414 ]
  %417 = icmp slt i32 %411, %416
  br i1 %417, label %418, label %512

; <label>:418                                     ; preds = %415
  %419 = sext i32 %411 to i64
  %420 = getelementptr inbounds i32* %406, i64 %419
  %421 = load i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds %struct.CompAtom* %37, i64 %422
  %424 = getelementptr inbounds %struct.CompAtom* %423, i32 0, i32 0
  %425 = getelementptr inbounds %class.Vector* %424, i32 0, i32 0
  %426 = load double* %425, align 8
  %427 = sext i32 %421 to i64
  %428 = getelementptr inbounds %struct.CompAtom* %37, i64 %427
  %429 = getelementptr inbounds %struct.CompAtom* %428, i32 0, i32 0
  %430 = getelementptr inbounds %class.Vector* %429, i32 0, i32 1
  %431 = load double* %430, align 8
  %432 = sext i32 %421 to i64
  %433 = getelementptr inbounds %struct.CompAtom* %37, i64 %432
  %434 = getelementptr inbounds %struct.CompAtom* %433, i32 0, i32 0
  %435 = getelementptr inbounds %class.Vector* %434, i32 0, i32 2
  %436 = load double* %435, align 8
  br label %437

; <label>:437                                     ; preds = %470, %418
  %g.3 = phi i32 [ %411, %418 ], [ %440, %470 ]
  %gli.0 = phi i32* [ %79, %418 ], [ %gli.1, %470 ]
  %j2.0 = phi i32 [ %421, %418 ], [ %443, %470 ]
  %p_j_x.0 = phi double [ %426, %418 ], [ %450, %470 ]
  %p_j_y.0 = phi double [ %431, %418 ], [ %458, %470 ]
  %p_j_z.0 = phi double [ %436, %418 ], [ %466, %470 ]
  %438 = icmp slt i32 %g.3, %416
  br i1 %438, label %439, label %471

; <label>:439                                     ; preds = %437
  %440 = add nsw i32 %g.3, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i32* %406, i64 %441
  %443 = load i32* %442, align 4
  %444 = fsub double %294, %p_j_x.0
  %445 = fmul double %444, %444
  %446 = sext i32 %443 to i64
  %447 = getelementptr inbounds %struct.CompAtom* %37, i64 %446
  %448 = getelementptr inbounds %struct.CompAtom* %447, i32 0, i32 0
  %449 = getelementptr inbounds %class.Vector* %448, i32 0, i32 0
  %450 = load double* %449, align 8
  %451 = fsub double %297, %p_j_y.0
  %452 = fmul double %451, %451
  %453 = fadd double %445, %452
  %454 = sext i32 %443 to i64
  %455 = getelementptr inbounds %struct.CompAtom* %37, i64 %454
  %456 = getelementptr inbounds %struct.CompAtom* %455, i32 0, i32 0
  %457 = getelementptr inbounds %class.Vector* %456, i32 0, i32 1
  %458 = load double* %457, align 8
  %459 = fsub double %300, %p_j_z.0
  %460 = fmul double %459, %459
  %461 = fadd double %453, %460
  %462 = sext i32 %443 to i64
  %463 = getelementptr inbounds %struct.CompAtom* %37, i64 %462
  %464 = getelementptr inbounds %struct.CompAtom* %463, i32 0, i32 0
  %465 = getelementptr inbounds %class.Vector* %464, i32 0, i32 2
  %466 = load double* %465, align 8
  %467 = fcmp ole double %461, %8
  br i1 %467, label %468, label %470

; <label>:468                                     ; preds = %439
  store i32 %j2.0, i32* %gli.0, align 4
  %469 = getelementptr inbounds i32* %gli.0, i32 1
  br label %470

; <label>:470                                     ; preds = %468, %439
  %gli.1 = phi i32* [ %469, %468 ], [ %gli.0, %439 ]
  br label %437

; <label>:471                                     ; preds = %437
  %472 = ptrtoint i32* %gli.0 to i64
  %473 = ptrtoint i32* %79 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  br label %477

; <label>:477                                     ; preds = %509, %471
  %pli.0 = phi i32* [ %401, %471 ], [ %508, %509 ]
  %h.0 = phi i32 [ 0, %471 ], [ %510, %509 ]
  %478 = icmp slt i32 %h.0, %476
  br i1 %478, label %479, label %511

; <label>:479                                     ; preds = %477
  %480 = sext i32 %h.0 to i64
  %481 = getelementptr inbounds i32* %79, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %37, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 25
  %488 = and i32 %487, 1
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %491

; <label>:490                                     ; preds = %479
  br label %498

; <label>:491                                     ; preds = %479
  %492 = sext i32 %482 to i64
  %493 = getelementptr inbounds %struct.CompAtom* %37, i64 %492
  %494 = getelementptr inbounds %struct.CompAtom* %493, i32 0, i32 2
  %495 = load i32* %494, align 4
  %496 = lshr i32 %495, 22
  %497 = and i32 %496, 7
  br label %498

; <label>:498                                     ; preds = %491, %490
  %499 = phi i32 [ 1, %490 ], [ %497, %491 ]
  %500 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %482, i32* %500, align 4
  %501 = add nsw i32 %482, 1
  %502 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %501, i32* %502, align 4
  %503 = add nsw i32 %482, 2
  %504 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %503, i32* %504, align 4
  %505 = add nsw i32 %482, 3
  %506 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %505, i32* %506, align 4
  %507 = sext i32 %499 to i64
  %508 = getelementptr inbounds i32* %pli.0, i64 %507
  br label %509

; <label>:509                                     ; preds = %498
  %510 = add nsw i32 %h.0, 1
  br label %477

; <label>:511                                     ; preds = %477
  br label %512

; <label>:512                                     ; preds = %511, %415
  %pli.1 = phi i32* [ %pli.0, %511 ], [ %401, %415 ]
  %513 = ptrtoint i32* %pli.1 to i64
  %514 = ptrtoint i32* %189 to i64
  %515 = sub i64 %513, %514
  %516 = sdiv exact i64 %515, 4
  %517 = trunc i64 %516 to i32
  %518 = icmp ne i32 %517, 0
  br i1 %518, label %519, label %526

; <label>:519                                     ; preds = %512
  %520 = sub nsw i32 %517, 1
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i32* %189, i64 %521
  %523 = load i32* %522, align 4
  %524 = sext i32 %517 to i64
  %525 = getelementptr inbounds i32* %189, i64 %524
  store i32 %523, i32* %525, align 4
  br label %526

; <label>:526                                     ; preds = %519, %512
  br label %529

; <label>:527                                     ; preds = %310
  %528 = add nsw i32 %pairlistoffset.0, 1
  br label %529

; <label>:529                                     ; preds = %527, %526
  %g_lower.3 = phi i32 [ %g_lower.2, %526 ], [ %g_lower.0, %527 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %526 ], [ %j_hgroup.0, %527 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %526 ], [ %fixg_lower.0, %527 ]
  %pairlistindex.2 = phi i32 [ %517, %526 ], [ %pairlistindex.0, %527 ]
  %pairlistoffset.1 = phi i32 [ 0, %526 ], [ %528, %527 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %526 ], [ %pairCount.0, %527 ]
  %530 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %538

; <label>:532                                     ; preds = %529
  %533 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 26
  %536 = and i32 %535, 1
  %537 = icmp ne i32 %536, 0
  br label %538

; <label>:538                                     ; preds = %532, %529
  %539 = phi i1 [ false, %529 ], [ %537, %532 ]
  %540 = zext i1 %539 to i32
  %541 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %542 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %543 = add nsw i32 %542, 1
  %544 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %545 = load i32* %544, align 4
  %546 = lshr i32 %545, 28
  %547 = mul nsw i32 %543, %546
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds double* %541, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 1
  %551 = load float* %550, align 4
  %552 = fpext float %551 to double
  %553 = fmul double 3.320636e+02, %552
  %554 = fmul double %553, %16
  %555 = fmul double %554, %9
  %556 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %557 = load i32* %556, align 4
  %558 = and i32 %557, 4194303
  %559 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %558)
  %560 = zext i16 %559 to i32
  %561 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %560)
  %562 = icmp ne i32 %540, 0
  br i1 %562, label %563, label %625

; <label>:563                                     ; preds = %538
  br label %564

; <label>:564                                     ; preds = %622, %563
  %pli3.0 = phi i32* [ %203, %563 ], [ %pli3.2, %622 ]
  %plin.0 = phi i32* [ %217, %563 ], [ %plin.2, %622 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %563 ], [ %623, %622 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %563 ], [ %exclChecksum.3, %622 ]
  %565 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %565, label %566, label %624

; <label>:566                                     ; preds = %564
  %567 = sext i32 %k.0 to i64
  %568 = getelementptr inbounds i32* %189, i64 %567
  %569 = load i32* %568, align 4
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds %struct.CompAtom* %37, i64 %570
  %572 = getelementptr inbounds %struct.CompAtom* %571, i32 0, i32 0
  %573 = getelementptr inbounds %class.Vector* %572, i32 0, i32 0
  %574 = load double* %573, align 8
  %575 = fsub double %294, %574
  %576 = fmul double %575, %575
  %577 = sext i32 %569 to i64
  %578 = getelementptr inbounds %struct.CompAtom* %37, i64 %577
  %579 = getelementptr inbounds %struct.CompAtom* %578, i32 0, i32 0
  %580 = getelementptr inbounds %class.Vector* %579, i32 0, i32 1
  %581 = load double* %580, align 8
  %582 = fsub double %297, %581
  %583 = fmul double %582, %582
  %584 = fadd double %576, %583
  %585 = sext i32 %569 to i64
  %586 = getelementptr inbounds %struct.CompAtom* %37, i64 %585
  %587 = getelementptr inbounds %struct.CompAtom* %586, i32 0, i32 0
  %588 = getelementptr inbounds %class.Vector* %587, i32 0, i32 2
  %589 = load double* %588, align 8
  %590 = fsub double %300, %589
  %591 = fmul double %590, %590
  %592 = fadd double %584, %591
  %593 = sext i32 %569 to i64
  %594 = getelementptr inbounds %struct.CompAtom* %37, i64 %593
  %595 = getelementptr inbounds %struct.CompAtom* %594, i32 0, i32 2
  %596 = load i32* %595, align 4
  %597 = lshr i32 %596, 26
  %598 = and i32 %597, 1
  %599 = icmp ne i32 %598, 0
  br i1 %599, label %621, label %600

; <label>:600                                     ; preds = %566
  %601 = fcmp ole double %592, %7
  br i1 %601, label %602, label %621

; <label>:602                                     ; preds = %600
  %603 = fcmp ole double %592, %22
  br i1 %603, label %604, label %607

; <label>:604                                     ; preds = %602
  %605 = add nsw i32 %exclChecksum.1, 1
  %606 = icmp ne i32 %605, 0
  br i1 %606, label %621, label %607

; <label>:607                                     ; preds = %604, %602
  %exclChecksum.2 = phi i32 [ %605, %604 ], [ %exclChecksum.1, %602 ]
  %608 = sext i32 %569 to i64
  %609 = getelementptr inbounds %struct.CompAtom* %37, i64 %608
  %610 = getelementptr inbounds %struct.CompAtom* %609, i32 0, i32 2
  %611 = load i32* %610, align 4
  %612 = and i32 %611, 4194303
  %613 = icmp sge i32 %612, %284
  br i1 %613, label %614, label %618

; <label>:614                                     ; preds = %607
  %615 = icmp sle i32 %612, %286
  br i1 %615, label %616, label %618

; <label>:616                                     ; preds = %614
  %617 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %569, i32* %pli3.0, align 4
  br label %620

; <label>:618                                     ; preds = %614, %607
  %619 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %569, i32* %plin.0, align 4
  br label %620

; <label>:620                                     ; preds = %618, %616
  %pli3.1 = phi i32* [ %617, %616 ], [ %pli3.0, %618 ]
  %plin.1 = phi i32* [ %plin.0, %616 ], [ %619, %618 ]
  br label %621

; <label>:621                                     ; preds = %620, %604, %600, %566
  %pli3.2 = phi i32* [ %pli3.0, %566 ], [ %pli3.0, %604 ], [ %pli3.1, %620 ], [ %pli3.0, %600 ]
  %plin.2 = phi i32* [ %plin.0, %566 ], [ %plin.0, %604 ], [ %plin.1, %620 ], [ %plin.0, %600 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %566 ], [ %605, %604 ], [ %exclChecksum.2, %620 ], [ %exclChecksum.1, %600 ]
  br label %622

; <label>:622                                     ; preds = %621
  %623 = add nsw i32 %k.0, 1
  br label %564

; <label>:624                                     ; preds = %564
  br label %704

; <label>:625                                     ; preds = %538
  %626 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %626, label %627, label %703

; <label>:627                                     ; preds = %625
  %628 = sext i32 %pairlistoffset.1 to i64
  %629 = getelementptr inbounds i32* %189, i64 %628
  %630 = load i32* %629, align 4
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %37, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 0
  %635 = load double* %634, align 8
  %636 = sext i32 %630 to i64
  %637 = getelementptr inbounds %struct.CompAtom* %37, i64 %636
  %638 = getelementptr inbounds %struct.CompAtom* %637, i32 0, i32 0
  %639 = getelementptr inbounds %class.Vector* %638, i32 0, i32 1
  %640 = load double* %639, align 8
  %641 = sext i32 %630 to i64
  %642 = getelementptr inbounds %struct.CompAtom* %37, i64 %641
  %643 = getelementptr inbounds %struct.CompAtom* %642, i32 0, i32 0
  %644 = getelementptr inbounds %class.Vector* %643, i32 0, i32 2
  %645 = load double* %644, align 8
  %646 = sext i32 %630 to i64
  %647 = getelementptr inbounds %struct.CompAtom* %37, i64 %646
  %648 = getelementptr inbounds %struct.CompAtom* %647, i32 0, i32 2
  %649 = load i32* %648, align 4
  %650 = and i32 %649, 4194303
  br label %651

; <label>:651                                     ; preds = %696, %627
  %pli3.3 = phi i32* [ %203, %627 ], [ %pli3.5, %696 ]
  %plin.3 = phi i32* [ %217, %627 ], [ %plin.5, %696 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %627 ], [ %654, %696 ]
  %j210.0 = phi i32 [ %630, %627 ], [ %657, %696 ]
  %p_j_x11.0 = phi double [ %635, %627 ], [ %664, %696 ]
  %p_j_y12.0 = phi double [ %640, %627 ], [ %672, %696 ]
  %p_j_z13.0 = phi double [ %645, %627 ], [ %680, %696 ]
  %atom214.0 = phi i32 [ %650, %627 ], [ %701, %696 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %627 ], [ %exclChecksum.6, %696 ]
  %652 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %652, label %653, label %702

; <label>:653                                     ; preds = %651
  %654 = add nsw i32 %k9.0, 1
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds i32* %189, i64 %655
  %657 = load i32* %656, align 4
  %658 = fsub double %294, %p_j_x11.0
  %659 = fmul double %658, %658
  %660 = sext i32 %657 to i64
  %661 = getelementptr inbounds %struct.CompAtom* %37, i64 %660
  %662 = getelementptr inbounds %struct.CompAtom* %661, i32 0, i32 0
  %663 = getelementptr inbounds %class.Vector* %662, i32 0, i32 0
  %664 = load double* %663, align 8
  %665 = fsub double %297, %p_j_y12.0
  %666 = fmul double %665, %665
  %667 = fadd double %659, %666
  %668 = sext i32 %657 to i64
  %669 = getelementptr inbounds %struct.CompAtom* %37, i64 %668
  %670 = getelementptr inbounds %struct.CompAtom* %669, i32 0, i32 0
  %671 = getelementptr inbounds %class.Vector* %670, i32 0, i32 1
  %672 = load double* %671, align 8
  %673 = fsub double %300, %p_j_z13.0
  %674 = fmul double %673, %673
  %675 = fadd double %667, %674
  %676 = sext i32 %657 to i64
  %677 = getelementptr inbounds %struct.CompAtom* %37, i64 %676
  %678 = getelementptr inbounds %struct.CompAtom* %677, i32 0, i32 0
  %679 = getelementptr inbounds %class.Vector* %678, i32 0, i32 2
  %680 = load double* %679, align 8
  %681 = fcmp ole double %675, %7
  br i1 %681, label %682, label %696

; <label>:682                                     ; preds = %653
  %683 = fcmp ole double %675, %22
  br i1 %683, label %684, label %687

; <label>:684                                     ; preds = %682
  %685 = add nsw i32 %exclChecksum.4, 1
  %686 = icmp ne i32 %685, 0
  br i1 %686, label %696, label %687

; <label>:687                                     ; preds = %684, %682
  %exclChecksum.5 = phi i32 [ %685, %684 ], [ %exclChecksum.4, %682 ]
  %688 = icmp sge i32 %atom214.0, %284
  br i1 %688, label %689, label %693

; <label>:689                                     ; preds = %687
  %690 = icmp sle i32 %atom214.0, %286
  br i1 %690, label %691, label %693

; <label>:691                                     ; preds = %689
  %692 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %695

; <label>:693                                     ; preds = %689, %687
  %694 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %695

; <label>:695                                     ; preds = %693, %691
  %pli3.4 = phi i32* [ %692, %691 ], [ %pli3.3, %693 ]
  %plin.4 = phi i32* [ %plin.3, %691 ], [ %694, %693 ]
  br label %696

; <label>:696                                     ; preds = %695, %684, %653
  %pli3.5 = phi i32* [ %pli3.3, %684 ], [ %pli3.4, %695 ], [ %pli3.3, %653 ]
  %plin.5 = phi i32* [ %plin.3, %684 ], [ %plin.4, %695 ], [ %plin.3, %653 ]
  %exclChecksum.6 = phi i32 [ %685, %684 ], [ %exclChecksum.5, %695 ], [ %exclChecksum.4, %653 ]
  %697 = sext i32 %657 to i64
  %698 = getelementptr inbounds %struct.CompAtom* %37, i64 %697
  %699 = getelementptr inbounds %struct.CompAtom* %698, i32 0, i32 2
  %700 = load i32* %699, align 4
  %701 = and i32 %700, 4194303
  br label %651

; <label>:702                                     ; preds = %651
  br label %703

; <label>:703                                     ; preds = %702, %625
  %pli3.6 = phi i32* [ %pli3.3, %702 ], [ %203, %625 ]
  %plin.6 = phi i32* [ %plin.3, %702 ], [ %217, %625 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %702 ], [ %exclChecksum.0, %625 ]
  br label %704

; <label>:704                                     ; preds = %703, %624
  %pli3.7 = phi i32* [ %pli3.0, %624 ], [ %pli3.6, %703 ]
  %plin.7 = phi i32* [ %plin.0, %624 ], [ %plin.6, %703 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %624 ], [ %exclChecksum.7, %703 ]
  %705 = ptrtoint i32* %pli3.7 to i64
  %706 = ptrtoint i32* %203 to i64
  %707 = sub i64 %705, %706
  %708 = sdiv exact i64 %707, 4
  %709 = trunc i64 %708 to i32
  %710 = icmp ne i32 %709, 0
  br i1 %710, label %711, label %718

; <label>:711                                     ; preds = %704
  %712 = sub nsw i32 %709, 1
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i32* %203, i64 %713
  %715 = load i32* %714, align 4
  %716 = sext i32 %709 to i64
  %717 = getelementptr inbounds i32* %203, i64 %716
  store i32 %715, i32* %717, align 4
  br label %718

; <label>:718                                     ; preds = %711, %704
  br label %719

; <label>:719                                     ; preds = %730, %718
  %plix.0 = phi i32* [ %231, %718 ], [ %728, %730 ]
  %pln.0 = phi i32* [ %217, %718 ], [ %731, %730 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %718 ], [ %729, %730 ]
  %720 = icmp ult i32* %pln.0, %plin.7
  br i1 %720, label %721, label %724

; <label>:721                                     ; preds = %719
  %722 = load i32* %pln.0, align 4
  %723 = icmp slt i32 %722, %j_hgroup.2
  br label %724

; <label>:724                                     ; preds = %721, %719
  %725 = phi i1 [ false, %719 ], [ %723, %721 ]
  br i1 %725, label %726, label %732

; <label>:726                                     ; preds = %724
  %727 = load i32* %pln.0, align 4
  %728 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %727, i32* %plix.0, align 4
  %729 = add nsw i32 %exclChecksum.9, -1
  br label %730

; <label>:730                                     ; preds = %726
  %731 = getelementptr inbounds i32* %pln.0, i32 1
  br label %719

; <label>:732                                     ; preds = %724
  br label %733

; <label>:733                                     ; preds = %748, %732
  %plix.1 = phi i32* [ %plix.0, %732 ], [ %746, %748 ]
  %k17.0 = phi i32 [ 0, %732 ], [ %749, %748 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %732 ], [ %747, %748 ]
  %734 = icmp slt i32 %k17.0, %709
  br i1 %734, label %735, label %740

; <label>:735                                     ; preds = %733
  %736 = sext i32 %k17.0 to i64
  %737 = getelementptr inbounds i32* %203, i64 %736
  %738 = load i32* %737, align 4
  %739 = icmp slt i32 %738, %j_hgroup.2
  br label %740

; <label>:740                                     ; preds = %735, %733
  %741 = phi i1 [ false, %733 ], [ %739, %735 ]
  br i1 %741, label %742, label %750

; <label>:742                                     ; preds = %740
  %743 = sext i32 %k17.0 to i64
  %744 = getelementptr inbounds i32* %203, i64 %743
  %745 = load i32* %744, align 4
  %746 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %745, i32* %plix.1, align 4
  %747 = add nsw i32 %exclChecksum.10, -1
  br label %748

; <label>:748                                     ; preds = %742
  %749 = add nsw i32 %k17.0, 1
  br label %733

; <label>:750                                     ; preds = %740
  br label %751

; <label>:751                                     ; preds = %773, %750
  %plin.8 = phi i32* [ %plin.7, %750 ], [ %plin.9, %773 ]
  %plix.2 = phi i32* [ %plix.1, %750 ], [ %plix.3, %773 ]
  %plim.0 = phi i32* [ %245, %750 ], [ %plim.1, %773 ]
  %k17.1 = phi i32 [ %k17.0, %750 ], [ %774, %773 ]
  %752 = icmp slt i32 %k17.1, %709
  br i1 %752, label %753, label %775

; <label>:753                                     ; preds = %751
  %754 = sext i32 %k17.1 to i64
  %755 = getelementptr inbounds i32* %203, i64 %754
  %756 = load i32* %755, align 4
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds %struct.CompAtom* %37, i64 %757
  %759 = getelementptr inbounds %struct.CompAtom* %758, i32 0, i32 2
  %760 = load i32* %759, align 4
  %761 = and i32 %760, 4194303
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8* %291, i64 %762
  %764 = load i8* %763, align 1
  %765 = sext i8 %764 to i32
  switch i32 %765, label %772 [
    i32 0, label %766
    i32 1, label %768
    i32 2, label %770
  ]

; <label>:766                                     ; preds = %753
  %767 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %756, i32* %plin.8, align 4
  br label %772

; <label>:768                                     ; preds = %753
  %769 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %756, i32* %plix.2, align 4
  br label %772

; <label>:770                                     ; preds = %753
  %771 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %756, i32* %plim.0, align 4
  br label %772

; <label>:772                                     ; preds = %770, %768, %766, %753
  %plin.9 = phi i32* [ %plin.8, %753 ], [ %plin.8, %770 ], [ %plin.8, %768 ], [ %767, %766 ]
  %plix.3 = phi i32* [ %plix.2, %753 ], [ %plix.2, %770 ], [ %769, %768 ], [ %plix.2, %766 ]
  %plim.1 = phi i32* [ %plim.0, %753 ], [ %771, %770 ], [ %plim.0, %768 ], [ %plim.0, %766 ]
  br label %773

; <label>:773                                     ; preds = %772
  %774 = add nsw i32 %k17.1, 1
  br label %751

; <label>:775                                     ; preds = %751
  %776 = ptrtoint i32* %plix.2 to i64
  %777 = ptrtoint i32* %231 to i64
  %778 = sub i64 %776, %777
  %779 = sdiv exact i64 %778, 4
  %780 = sext i32 %exclChecksum.10 to i64
  %781 = add nsw i64 %780, %779
  %782 = trunc i64 %781 to i32
  %783 = ptrtoint i32* %plim.0 to i64
  %784 = ptrtoint i32* %245 to i64
  %785 = sub i64 %783, %784
  %786 = sdiv exact i64 %785, 4
  %787 = sext i32 %782 to i64
  %788 = add nsw i64 %787, %786
  %789 = trunc i64 %788 to i32
  %790 = ptrtoint i32* %plin.8 to i64
  %791 = ptrtoint i32* %pln.0 to i64
  %792 = sub i64 %790, %791
  %793 = sdiv exact i64 %792, 4
  %794 = trunc i64 %793 to i32
  br label %795

; <label>:795                                     ; preds = %1039, %775
  %k17.2 = phi i32 [ 0, %775 ], [ %1040, %1039 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %775 ], [ %1032, %1039 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %775 ], [ %1023, %1039 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %775 ], [ %1021, %1039 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %775 ], [ %1012, %1039 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %775 ], [ %1010, %1039 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %775 ], [ %1008, %1039 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %775 ], [ %995, %1039 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %775 ], [ %971, %1039 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %775 ], [ %962, %1039 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %775 ], [ %960, %1039 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %775 ], [ %951, %1039 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %775 ], [ %949, %1039 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %775 ], [ %947, %1039 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %775 ], [ %930, %1039 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %775 ], [ %912, %1039 ]
  %796 = icmp slt i32 %k17.2, %794
  br i1 %796, label %797, label %1041

; <label>:797                                     ; preds = %795
  %798 = sext i32 %k17.2 to i64
  %799 = getelementptr inbounds i32* %pln.0, i64 %798
  %800 = load i32* %799, align 4
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds %struct.CompAtom* %37, i64 %801
  %803 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 0
  %804 = getelementptr inbounds %class.Vector* %803, i32 0, i32 0
  %805 = load double* %804, align 8
  %806 = fsub double %294, %805
  %807 = fmul double %806, %806
  %808 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 0
  %809 = getelementptr inbounds %class.Vector* %808, i32 0, i32 1
  %810 = load double* %809, align 8
  %811 = fsub double %297, %810
  %812 = fmul double %811, %811
  %813 = fadd double %807, %812
  %814 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 0
  %815 = getelementptr inbounds %class.Vector* %814, i32 0, i32 2
  %816 = load double* %815, align 8
  %817 = fsub double %300, %816
  %818 = fmul double %817, %817
  %819 = fadd double %813, %818
  %820 = fptrunc double %819 to float
  %821 = bitcast %union.anon.94* %r2f to float*
  store float %820, float* %821, align 4
  %822 = bitcast %union.anon.94* %r2f to i32*
  %823 = load i32* %822, align 4
  %824 = ashr i32 %823, 17
  %825 = add nsw i32 %824, %25
  %826 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 2
  %827 = load i32* %826, align 4
  %828 = and i32 %827, 4194303
  %829 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %828)
  %830 = zext i16 %829 to i32
  %831 = mul nsw i32 2, %830
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds %"struct.LJTable::TableEntry"* %561, i64 %832
  %834 = mul nsw i32 16, %825
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds double* %14, i64 %835
  %837 = getelementptr inbounds double* %836, i64 0
  %838 = load double* %837, align 8
  %839 = mul nsw i32 16, %825
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds double* %14, i64 %840
  %842 = getelementptr inbounds double* %841, i64 4
  %843 = getelementptr inbounds double* %842, i64 0
  %844 = load double* %843, align 8
  %845 = mul nsw i32 16, %825
  %846 = sext i32 %845 to i64
  %847 = getelementptr inbounds double* %14, i64 %846
  %848 = getelementptr inbounds double* %847, i64 8
  %849 = getelementptr inbounds double* %848, i64 0
  %850 = load double* %849, align 8
  %851 = mul nsw i32 16, %825
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds double* %14, i64 %852
  %854 = getelementptr inbounds double* %853, i64 8
  %855 = getelementptr inbounds double* %854, i64 4
  %856 = getelementptr inbounds double* %855, i64 0
  %857 = load double* %856, align 8
  %858 = bitcast %union.anon.94* %r2f to i32*
  %859 = load i32* %858, align 4
  %860 = and i32 %859, -131072
  store i32 %860, i32* %858, align 4
  %861 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 1
  %862 = load float* %861, align 4
  %863 = fpext float %862 to double
  %864 = fmul double %555, %863
  %865 = bitcast %union.anon.94* %r2f to float*
  %866 = load float* %865, align 4
  %867 = fpext float %866 to double
  %868 = fsub double %819, %867
  %869 = getelementptr inbounds %struct.CompAtom* %802, i32 0, i32 2
  %870 = load i32* %869, align 4
  %871 = lshr i32 %870, 28
  %872 = zext i32 %871 to i64
  %873 = getelementptr inbounds double* %549, i64 %872
  %874 = load double* %873, align 8
  %875 = getelementptr inbounds %"struct.LJTable::TableEntry"* %833, i32 0, i32 0
  %876 = load double* %875, align 8
  %877 = fmul double %16, %876
  %878 = getelementptr inbounds %"struct.LJTable::TableEntry"* %833, i32 0, i32 1
  %879 = load double* %878, align 8
  %880 = fmul double %16, %879
  %881 = fmul double %877, %838
  %882 = fmul double %880, %844
  %883 = fsub double %881, %882
  %884 = getelementptr inbounds double* %836, i64 3
  %885 = load double* %884, align 8
  %886 = fmul double %877, %885
  %887 = getelementptr inbounds double* %842, i64 3
  %888 = load double* %887, align 8
  %889 = fmul double %880, %888
  %890 = fsub double %886, %889
  %891 = getelementptr inbounds double* %836, i64 2
  %892 = load double* %891, align 8
  %893 = fmul double %877, %892
  %894 = getelementptr inbounds double* %842, i64 2
  %895 = load double* %894, align 8
  %896 = fmul double %880, %895
  %897 = fsub double %893, %896
  %898 = getelementptr inbounds double* %836, i64 1
  %899 = load double* %898, align 8
  %900 = fmul double %877, %899
  %901 = getelementptr inbounds double* %842, i64 1
  %902 = load double* %901, align 8
  %903 = fmul double %880, %902
  %904 = fsub double %900, %903
  %905 = fmul double %868, %890
  %906 = fadd double %905, %897
  %907 = fmul double %906, %868
  %908 = fadd double %907, %904
  %909 = fmul double %908, %868
  %910 = fadd double %909, %883
  %911 = fmul double %874, %910
  %912 = fadd double %vdwEnergy.1, %911
  %913 = fmul double %850, %864
  %914 = getelementptr inbounds double* %848, i64 3
  %915 = load double* %914, align 8
  %916 = fmul double %864, %915
  %917 = getelementptr inbounds double* %848, i64 2
  %918 = load double* %917, align 8
  %919 = fmul double %864, %918
  %920 = getelementptr inbounds double* %848, i64 1
  %921 = load double* %920, align 8
  %922 = fmul double %864, %921
  %923 = fmul double %868, %916
  %924 = fadd double %923, %919
  %925 = fmul double %924, %868
  %926 = fadd double %925, %922
  %927 = fmul double %926, %868
  %928 = fadd double %927, %913
  %929 = fmul double %874, %928
  %930 = fadd double %electEnergy.1, %929
  %931 = fadd double %916, %890
  %932 = fadd double %919, %897
  %933 = fadd double %922, %904
  %934 = fadd double %913, %883
  %935 = fmul double 3.000000e+00, %868
  %936 = fmul double %935, %931
  %937 = fmul double 2.000000e+00, %932
  %938 = fadd double %936, %937
  %939 = fmul double %938, %868
  %940 = fadd double %939, %933
  %941 = fmul double -2.000000e+00, %874
  %942 = fmul double %941, %940
  %943 = sext i32 %800 to i64
  %944 = getelementptr inbounds %class.Vector* %251, i64 %943
  %945 = fmul double %942, %806
  %946 = fmul double %945, %806
  %947 = fadd double %virial_xx.1, %946
  %948 = fmul double %945, %811
  %949 = fadd double %virial_xy.1, %948
  %950 = fmul double %945, %817
  %951 = fadd double %virial_xz.1, %950
  %952 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %953 = load double* %952, align 8
  %954 = fadd double %953, %945
  store double %954, double* %952, align 8
  %955 = getelementptr inbounds %class.Vector* %944, i32 0, i32 0
  %956 = load double* %955, align 8
  %957 = fsub double %956, %945
  store double %957, double* %955, align 8
  %958 = fmul double %942, %811
  %959 = fmul double %958, %811
  %960 = fadd double %virial_yy.1, %959
  %961 = fmul double %958, %817
  %962 = fadd double %virial_yz.1, %961
  %963 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %964 = load double* %963, align 8
  %965 = fadd double %964, %958
  store double %965, double* %963, align 8
  %966 = getelementptr inbounds %class.Vector* %944, i32 0, i32 1
  %967 = load double* %966, align 8
  %968 = fsub double %967, %958
  store double %968, double* %966, align 8
  %969 = fmul double %942, %817
  %970 = fmul double %969, %817
  %971 = fadd double %virial_zz.1, %970
  %972 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %973 = load double* %972, align 8
  %974 = fadd double %973, %969
  store double %974, double* %972, align 8
  %975 = getelementptr inbounds %class.Vector* %944, i32 0, i32 2
  %976 = load double* %975, align 8
  %977 = fsub double %976, %969
  store double %977, double* %975, align 8
  %978 = getelementptr inbounds double* %855, i64 1
  %979 = load double* %978, align 8
  %980 = getelementptr inbounds double* %855, i64 2
  %981 = load double* %980, align 8
  %982 = getelementptr inbounds double* %855, i64 3
  %983 = load double* %982, align 8
  %984 = fmul double %983, %864
  %985 = fmul double %981, %864
  %986 = fmul double %979, %864
  %987 = fmul double %857, %864
  %988 = fmul double %868, %984
  %989 = fadd double %988, %985
  %990 = fmul double %989, %868
  %991 = fadd double %990, %986
  %992 = fmul double %991, %868
  %993 = fadd double %992, %987
  %994 = fmul double %874, %993
  %995 = fadd double %fullElectEnergy.1, %994
  %996 = fmul double 3.000000e+00, %868
  %997 = fmul double %996, %984
  %998 = fmul double 2.000000e+00, %985
  %999 = fadd double %997, %998
  %1000 = fmul double %999, %868
  %1001 = fadd double %1000, %986
  %1002 = fmul double -2.000000e+00, %1001
  %1003 = fmul double %1002, %874
  %1004 = sext i32 %800 to i64
  %1005 = getelementptr inbounds %class.Vector* %257, i64 %1004
  %1006 = fmul double %1003, %806
  %1007 = fmul double %1006, %806
  %1008 = fadd double %fullElectVirial_xx.1, %1007
  %1009 = fmul double %1006, %811
  %1010 = fadd double %fullElectVirial_xy.1, %1009
  %1011 = fmul double %1006, %817
  %1012 = fadd double %fullElectVirial_xz.1, %1011
  %1013 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1014 = load double* %1013, align 8
  %1015 = fadd double %1014, %1006
  store double %1015, double* %1013, align 8
  %1016 = getelementptr inbounds %class.Vector* %1005, i32 0, i32 0
  %1017 = load double* %1016, align 8
  %1018 = fsub double %1017, %1006
  store double %1018, double* %1016, align 8
  %1019 = fmul double %1003, %811
  %1020 = fmul double %1019, %811
  %1021 = fadd double %fullElectVirial_yy.1, %1020
  %1022 = fmul double %1019, %817
  %1023 = fadd double %fullElectVirial_yz.1, %1022
  %1024 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1025 = load double* %1024, align 8
  %1026 = fadd double %1025, %1019
  store double %1026, double* %1024, align 8
  %1027 = getelementptr inbounds %class.Vector* %1005, i32 0, i32 1
  %1028 = load double* %1027, align 8
  %1029 = fsub double %1028, %1019
  store double %1029, double* %1027, align 8
  %1030 = fmul double %1003, %817
  %1031 = fmul double %1030, %817
  %1032 = fadd double %fullElectVirial_zz.1, %1031
  %1033 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1034 = load double* %1033, align 8
  %1035 = fadd double %1034, %1030
  store double %1035, double* %1033, align 8
  %1036 = getelementptr inbounds %class.Vector* %1005, i32 0, i32 2
  %1037 = load double* %1036, align 8
  %1038 = fsub double %1037, %1030
  store double %1038, double* %1036, align 8
  br label %1039

; <label>:1039                                    ; preds = %797
  %1040 = add nsw i32 %k17.2, 1
  br label %795

; <label>:1041                                    ; preds = %795
  %1042 = ptrtoint i32* %plim.0 to i64
  %1043 = ptrtoint i32* %245 to i64
  %1044 = sub i64 %1042, %1043
  %1045 = sdiv exact i64 %1044, 4
  %1046 = trunc i64 %1045 to i32
  br label %1047

; <label>:1047                                    ; preds = %1313, %1041
  %k17.3 = phi i32 [ 0, %1041 ], [ %1314, %1313 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %1041 ], [ %1306, %1313 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %1041 ], [ %1297, %1313 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %1041 ], [ %1295, %1313 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %1041 ], [ %1286, %1313 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %1041 ], [ %1284, %1313 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %1041 ], [ %1282, %1313 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %1041 ], [ %1269, %1313 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %1041 ], [ %1226, %1313 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %1041 ], [ %1217, %1313 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %1041 ], [ %1215, %1313 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %1041 ], [ %1206, %1313 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %1041 ], [ %1204, %1313 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %1041 ], [ %1202, %1313 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %1041 ], [ %1185, %1313 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %1041 ], [ %1165, %1313 ]
  %1048 = icmp slt i32 %k17.3, %1046
  br i1 %1048, label %1049, label %1315

; <label>:1049                                    ; preds = %1047
  %1050 = sext i32 %k17.3 to i64
  %1051 = getelementptr inbounds i32* %245, i64 %1050
  %1052 = load i32* %1051, align 4
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds %struct.CompAtom* %37, i64 %1053
  %1055 = getelementptr inbounds %struct.CompAtom* %1054, i32 0, i32 0
  %1056 = getelementptr inbounds %class.Vector* %1055, i32 0, i32 0
  %1057 = load double* %1056, align 8
  %1058 = fsub double %294, %1057
  %1059 = fmul double %1058, %1058
  %1060 = getelementptr inbounds %struct.CompAtom* %1054, i32 0, i32 0
  %1061 = getelementptr inbounds %class.Vector* %1060, i32 0, i32 1
  %1062 = load double* %1061, align 8
  %1063 = fsub double %297, %1062
  %1064 = fmul double %1063, %1063
  %1065 = fadd double %1059, %1064
  %1066 = getelementptr inbounds %struct.CompAtom* %1054, i32 0, i32 0
  %1067 = getelementptr inbounds %class.Vector* %1066, i32 0, i32 2
  %1068 = load double* %1067, align 8
  %1069 = fsub double %300, %1068
  %1070 = fmul double %1069, %1069
  %1071 = fadd double %1065, %1070
  %1072 = fptrunc double %1071 to float
  %1073 = bitcast %union.anon.95* %r2f31 to float*
  store float %1072, float* %1073, align 4
  %1074 = bitcast %union.anon.95* %r2f31 to i32*
  %1075 = load i32* %1074, align 4
  %1076 = ashr i32 %1075, 17
  %1077 = add nsw i32 %1076, %25
  %1078 = getelementptr inbounds %struct.CompAtom* %1054, i32 0, i32 2
  %1079 = load i32* %1078, align 4
  %1080 = and i32 %1079, 4194303
  %1081 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1080)
  %1082 = zext i16 %1081 to i32
  %1083 = mul nsw i32 2, %1082
  %1084 = sext i32 %1083 to i64
  %1085 = getelementptr inbounds %"struct.LJTable::TableEntry"* %561, i64 %1084
  %1086 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1085, i64 1
  %1087 = mul nsw i32 16, %1077
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds double* %14, i64 %1088
  %1090 = getelementptr inbounds double* %1089, i64 0
  %1091 = load double* %1090, align 8
  %1092 = mul nsw i32 16, %1077
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds double* %14, i64 %1093
  %1095 = getelementptr inbounds double* %1094, i64 4
  %1096 = getelementptr inbounds double* %1095, i64 0
  %1097 = load double* %1096, align 8
  %1098 = mul nsw i32 16, %1077
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds double* %14, i64 %1099
  %1101 = getelementptr inbounds double* %1100, i64 8
  %1102 = getelementptr inbounds double* %1101, i64 0
  %1103 = load double* %1102, align 8
  %1104 = mul nsw i32 16, %1077
  %1105 = sext i32 %1104 to i64
  %1106 = getelementptr inbounds double* %14, i64 %1105
  %1107 = getelementptr inbounds double* %1106, i64 8
  %1108 = getelementptr inbounds double* %1107, i64 4
  %1109 = getelementptr inbounds double* %1108, i64 0
  %1110 = load double* %1109, align 8
  %1111 = bitcast %union.anon.95* %r2f31 to i32*
  %1112 = load i32* %1111, align 4
  %1113 = and i32 %1112, -131072
  store i32 %1113, i32* %1111, align 4
  %1114 = getelementptr inbounds %struct.CompAtom* %1054, i32 0, i32 1
  %1115 = load float* %1114, align 4
  %1116 = fpext float %1115 to double
  %1117 = fmul double %555, %1116
  %1118 = bitcast %union.anon.95* %r2f31 to float*
  %1119 = load float* %1118, align 4
  %1120 = fpext float %1119 to double
  %1121 = fsub double %1071, %1120
  %1122 = getelementptr inbounds %struct.CompAtom* %1054, i32 0, i32 2
  %1123 = load i32* %1122, align 4
  %1124 = lshr i32 %1123, 28
  %1125 = zext i32 %1124 to i64
  %1126 = getelementptr inbounds double* %549, i64 %1125
  %1127 = load double* %1126, align 8
  %1128 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1086, i32 0, i32 0
  %1129 = load double* %1128, align 8
  %1130 = fmul double %16, %1129
  %1131 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1086, i32 0, i32 1
  %1132 = load double* %1131, align 8
  %1133 = fmul double %16, %1132
  %1134 = fmul double %1130, %1091
  %1135 = fmul double %1133, %1097
  %1136 = fsub double %1134, %1135
  %1137 = getelementptr inbounds double* %1089, i64 3
  %1138 = load double* %1137, align 8
  %1139 = fmul double %1130, %1138
  %1140 = getelementptr inbounds double* %1095, i64 3
  %1141 = load double* %1140, align 8
  %1142 = fmul double %1133, %1141
  %1143 = fsub double %1139, %1142
  %1144 = getelementptr inbounds double* %1089, i64 2
  %1145 = load double* %1144, align 8
  %1146 = fmul double %1130, %1145
  %1147 = getelementptr inbounds double* %1095, i64 2
  %1148 = load double* %1147, align 8
  %1149 = fmul double %1133, %1148
  %1150 = fsub double %1146, %1149
  %1151 = getelementptr inbounds double* %1089, i64 1
  %1152 = load double* %1151, align 8
  %1153 = fmul double %1130, %1152
  %1154 = getelementptr inbounds double* %1095, i64 1
  %1155 = load double* %1154, align 8
  %1156 = fmul double %1133, %1155
  %1157 = fsub double %1153, %1156
  %1158 = fmul double %1121, %1143
  %1159 = fadd double %1158, %1150
  %1160 = fmul double %1159, %1121
  %1161 = fadd double %1160, %1157
  %1162 = fmul double %1161, %1121
  %1163 = fadd double %1162, %1136
  %1164 = fmul double %1127, %1163
  %1165 = fadd double %vdwEnergy.2, %1164
  %1166 = fsub double 1.000000e+00, %18
  %1167 = fmul double %1166, %1117
  %1168 = fmul double %1103, %1167
  %1169 = getelementptr inbounds double* %1101, i64 3
  %1170 = load double* %1169, align 8
  %1171 = fmul double %1167, %1170
  %1172 = getelementptr inbounds double* %1101, i64 2
  %1173 = load double* %1172, align 8
  %1174 = fmul double %1167, %1173
  %1175 = getelementptr inbounds double* %1101, i64 1
  %1176 = load double* %1175, align 8
  %1177 = fmul double %1167, %1176
  %1178 = fmul double %1121, %1171
  %1179 = fadd double %1178, %1174
  %1180 = fmul double %1179, %1121
  %1181 = fadd double %1180, %1177
  %1182 = fmul double %1181, %1121
  %1183 = fadd double %1182, %1168
  %1184 = fmul double %1127, %1183
  %1185 = fadd double %electEnergy.2, %1184
  %1186 = fadd double %1171, %1143
  %1187 = fadd double %1174, %1150
  %1188 = fadd double %1177, %1157
  %1189 = fadd double %1168, %1136
  %1190 = fmul double 3.000000e+00, %1121
  %1191 = fmul double %1190, %1186
  %1192 = fmul double 2.000000e+00, %1187
  %1193 = fadd double %1191, %1192
  %1194 = fmul double %1193, %1121
  %1195 = fadd double %1194, %1188
  %1196 = fmul double -2.000000e+00, %1127
  %1197 = fmul double %1196, %1195
  %1198 = sext i32 %1052 to i64
  %1199 = getelementptr inbounds %class.Vector* %251, i64 %1198
  %1200 = fmul double %1197, %1058
  %1201 = fmul double %1200, %1058
  %1202 = fadd double %virial_xx.2, %1201
  %1203 = fmul double %1200, %1063
  %1204 = fadd double %virial_xy.2, %1203
  %1205 = fmul double %1200, %1069
  %1206 = fadd double %virial_xz.2, %1205
  %1207 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %1208 = load double* %1207, align 8
  %1209 = fadd double %1208, %1200
  store double %1209, double* %1207, align 8
  %1210 = getelementptr inbounds %class.Vector* %1199, i32 0, i32 0
  %1211 = load double* %1210, align 8
  %1212 = fsub double %1211, %1200
  store double %1212, double* %1210, align 8
  %1213 = fmul double %1197, %1063
  %1214 = fmul double %1213, %1063
  %1215 = fadd double %virial_yy.2, %1214
  %1216 = fmul double %1213, %1069
  %1217 = fadd double %virial_yz.2, %1216
  %1218 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %1219 = load double* %1218, align 8
  %1220 = fadd double %1219, %1213
  store double %1220, double* %1218, align 8
  %1221 = getelementptr inbounds %class.Vector* %1199, i32 0, i32 1
  %1222 = load double* %1221, align 8
  %1223 = fsub double %1222, %1213
  store double %1223, double* %1221, align 8
  %1224 = fmul double %1197, %1069
  %1225 = fmul double %1224, %1069
  %1226 = fadd double %virial_zz.2, %1225
  %1227 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %1228 = load double* %1227, align 8
  %1229 = fadd double %1228, %1224
  store double %1229, double* %1227, align 8
  %1230 = getelementptr inbounds %class.Vector* %1199, i32 0, i32 2
  %1231 = load double* %1230, align 8
  %1232 = fsub double %1231, %1224
  store double %1232, double* %1230, align 8
  %1233 = getelementptr inbounds double* %1108, i64 1
  %1234 = load double* %1233, align 8
  %1235 = getelementptr inbounds double* %1108, i64 2
  %1236 = load double* %1235, align 8
  %1237 = getelementptr inbounds double* %1108, i64 3
  %1238 = load double* %1237, align 8
  %1239 = mul nsw i32 4, %1077
  %1240 = sext i32 %1239 to i64
  %1241 = getelementptr inbounds double* %15, i64 %1240
  %1242 = getelementptr inbounds double* %1241, i64 0
  %1243 = load double* %1242, align 8
  %1244 = fmul double %18, %1243
  %1245 = fsub double %1110, %1244
  %1246 = getelementptr inbounds double* %1241, i64 1
  %1247 = load double* %1246, align 8
  %1248 = fmul double %18, %1247
  %1249 = fsub double %1234, %1248
  %1250 = getelementptr inbounds double* %1241, i64 2
  %1251 = load double* %1250, align 8
  %1252 = fmul double %18, %1251
  %1253 = fsub double %1236, %1252
  %1254 = getelementptr inbounds double* %1241, i64 3
  %1255 = load double* %1254, align 8
  %1256 = fmul double %18, %1255
  %1257 = fsub double %1238, %1256
  %1258 = fmul double %1257, %1117
  %1259 = fmul double %1253, %1117
  %1260 = fmul double %1249, %1117
  %1261 = fmul double %1245, %1117
  %1262 = fmul double %1121, %1258
  %1263 = fadd double %1262, %1259
  %1264 = fmul double %1263, %1121
  %1265 = fadd double %1264, %1260
  %1266 = fmul double %1265, %1121
  %1267 = fadd double %1266, %1261
  %1268 = fmul double %1127, %1267
  %1269 = fadd double %fullElectEnergy.2, %1268
  %1270 = fmul double 3.000000e+00, %1121
  %1271 = fmul double %1270, %1258
  %1272 = fmul double 2.000000e+00, %1259
  %1273 = fadd double %1271, %1272
  %1274 = fmul double %1273, %1121
  %1275 = fadd double %1274, %1260
  %1276 = fmul double -2.000000e+00, %1275
  %1277 = fmul double %1276, %1127
  %1278 = sext i32 %1052 to i64
  %1279 = getelementptr inbounds %class.Vector* %257, i64 %1278
  %1280 = fmul double %1277, %1058
  %1281 = fmul double %1280, %1058
  %1282 = fadd double %fullElectVirial_xx.2, %1281
  %1283 = fmul double %1280, %1063
  %1284 = fadd double %fullElectVirial_xy.2, %1283
  %1285 = fmul double %1280, %1069
  %1286 = fadd double %fullElectVirial_xz.2, %1285
  %1287 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1288 = load double* %1287, align 8
  %1289 = fadd double %1288, %1280
  store double %1289, double* %1287, align 8
  %1290 = getelementptr inbounds %class.Vector* %1279, i32 0, i32 0
  %1291 = load double* %1290, align 8
  %1292 = fsub double %1291, %1280
  store double %1292, double* %1290, align 8
  %1293 = fmul double %1277, %1063
  %1294 = fmul double %1293, %1063
  %1295 = fadd double %fullElectVirial_yy.2, %1294
  %1296 = fmul double %1293, %1069
  %1297 = fadd double %fullElectVirial_yz.2, %1296
  %1298 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1299 = load double* %1298, align 8
  %1300 = fadd double %1299, %1293
  store double %1300, double* %1298, align 8
  %1301 = getelementptr inbounds %class.Vector* %1279, i32 0, i32 1
  %1302 = load double* %1301, align 8
  %1303 = fsub double %1302, %1293
  store double %1303, double* %1301, align 8
  %1304 = fmul double %1277, %1069
  %1305 = fmul double %1304, %1069
  %1306 = fadd double %fullElectVirial_zz.2, %1305
  %1307 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1308 = load double* %1307, align 8
  %1309 = fadd double %1308, %1304
  store double %1309, double* %1307, align 8
  %1310 = getelementptr inbounds %class.Vector* %1279, i32 0, i32 2
  %1311 = load double* %1310, align 8
  %1312 = fsub double %1311, %1304
  store double %1312, double* %1310, align 8
  br label %1313

; <label>:1313                                    ; preds = %1049
  %1314 = add nsw i32 %k17.3, 1
  br label %1047

; <label>:1315                                    ; preds = %1047
  %1316 = ptrtoint i32* %plix.2 to i64
  %1317 = ptrtoint i32* %231 to i64
  %1318 = sub i64 %1316, %1317
  %1319 = sdiv exact i64 %1318, 4
  %1320 = trunc i64 %1319 to i32
  br label %1321

; <label>:1321                                    ; preds = %1452, %1315
  %k17.4 = phi i32 [ 0, %1315 ], [ %1453, %1452 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1315 ], [ %1445, %1452 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1315 ], [ %1436, %1452 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1315 ], [ %1434, %1452 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1315 ], [ %1425, %1452 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1315 ], [ %1423, %1452 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1315 ], [ %1421, %1452 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1315 ], [ %1408, %1452 ]
  %1322 = icmp slt i32 %k17.4, %1320
  br i1 %1322, label %1323, label %1454

; <label>:1323                                    ; preds = %1321
  %1324 = sext i32 %k17.4 to i64
  %1325 = getelementptr inbounds i32* %231, i64 %1324
  %1326 = load i32* %1325, align 4
  %1327 = sext i32 %1326 to i64
  %1328 = getelementptr inbounds %struct.CompAtom* %37, i64 %1327
  %1329 = getelementptr inbounds %struct.CompAtom* %1328, i32 0, i32 0
  %1330 = getelementptr inbounds %class.Vector* %1329, i32 0, i32 0
  %1331 = load double* %1330, align 8
  %1332 = fsub double %294, %1331
  %1333 = fmul double %1332, %1332
  %1334 = getelementptr inbounds %struct.CompAtom* %1328, i32 0, i32 0
  %1335 = getelementptr inbounds %class.Vector* %1334, i32 0, i32 1
  %1336 = load double* %1335, align 8
  %1337 = fsub double %297, %1336
  %1338 = fmul double %1337, %1337
  %1339 = fadd double %1333, %1338
  %1340 = getelementptr inbounds %struct.CompAtom* %1328, i32 0, i32 0
  %1341 = getelementptr inbounds %class.Vector* %1340, i32 0, i32 2
  %1342 = load double* %1341, align 8
  %1343 = fsub double %300, %1342
  %1344 = fmul double %1343, %1343
  %1345 = fadd double %1339, %1344
  %1346 = fptrunc double %1345 to float
  %1347 = bitcast %union.anon.96* %r2f78 to float*
  store float %1346, float* %1347, align 4
  %1348 = bitcast %union.anon.96* %r2f78 to i32*
  %1349 = load i32* %1348, align 4
  %1350 = ashr i32 %1349, 17
  %1351 = add nsw i32 %1350, %25
  %1352 = mul nsw i32 16, %1351
  %1353 = sext i32 %1352 to i64
  %1354 = getelementptr inbounds double* %14, i64 %1353
  %1355 = getelementptr inbounds double* %1354, i64 8
  %1356 = getelementptr inbounds double* %1355, i64 4
  %1357 = getelementptr inbounds double* %1356, i64 0
  %1358 = load double* %1357, align 8
  %1359 = bitcast %union.anon.96* %r2f78 to i32*
  %1360 = load i32* %1359, align 4
  %1361 = and i32 %1360, -131072
  store i32 %1361, i32* %1359, align 4
  %1362 = getelementptr inbounds %struct.CompAtom* %1328, i32 0, i32 1
  %1363 = load float* %1362, align 4
  %1364 = fpext float %1363 to double
  %1365 = fmul double %555, %1364
  %1366 = bitcast %union.anon.96* %r2f78 to float*
  %1367 = load float* %1366, align 4
  %1368 = fpext float %1367 to double
  %1369 = fsub double %1345, %1368
  %1370 = getelementptr inbounds %struct.CompAtom* %1328, i32 0, i32 2
  %1371 = load i32* %1370, align 4
  %1372 = lshr i32 %1371, 28
  %1373 = zext i32 %1372 to i64
  %1374 = getelementptr inbounds double* %549, i64 %1373
  %1375 = load double* %1374, align 8
  %1376 = getelementptr inbounds double* %1356, i64 1
  %1377 = load double* %1376, align 8
  %1378 = getelementptr inbounds double* %1356, i64 2
  %1379 = load double* %1378, align 8
  %1380 = getelementptr inbounds double* %1356, i64 3
  %1381 = load double* %1380, align 8
  %1382 = mul nsw i32 4, %1351
  %1383 = sext i32 %1382 to i64
  %1384 = getelementptr inbounds double* %15, i64 %1383
  %1385 = getelementptr inbounds double* %1384, i64 0
  %1386 = load double* %1385, align 8
  %1387 = fsub double %1358, %1386
  %1388 = getelementptr inbounds double* %1384, i64 1
  %1389 = load double* %1388, align 8
  %1390 = fsub double %1377, %1389
  %1391 = getelementptr inbounds double* %1384, i64 2
  %1392 = load double* %1391, align 8
  %1393 = fsub double %1379, %1392
  %1394 = getelementptr inbounds double* %1384, i64 3
  %1395 = load double* %1394, align 8
  %1396 = fsub double %1381, %1395
  %1397 = fmul double %1396, %1365
  %1398 = fmul double %1393, %1365
  %1399 = fmul double %1390, %1365
  %1400 = fmul double %1387, %1365
  %1401 = fmul double %1369, %1397
  %1402 = fadd double %1401, %1398
  %1403 = fmul double %1402, %1369
  %1404 = fadd double %1403, %1399
  %1405 = fmul double %1404, %1369
  %1406 = fadd double %1405, %1400
  %1407 = fmul double %1375, %1406
  %1408 = fadd double %fullElectEnergy.3, %1407
  %1409 = fmul double 3.000000e+00, %1369
  %1410 = fmul double %1409, %1397
  %1411 = fmul double 2.000000e+00, %1398
  %1412 = fadd double %1410, %1411
  %1413 = fmul double %1412, %1369
  %1414 = fadd double %1413, %1399
  %1415 = fmul double -2.000000e+00, %1414
  %1416 = fmul double %1415, %1375
  %1417 = sext i32 %1326 to i64
  %1418 = getelementptr inbounds %class.Vector* %257, i64 %1417
  %1419 = fmul double %1416, %1332
  %1420 = fmul double %1419, %1332
  %1421 = fadd double %fullElectVirial_xx.3, %1420
  %1422 = fmul double %1419, %1337
  %1423 = fadd double %fullElectVirial_xy.3, %1422
  %1424 = fmul double %1419, %1343
  %1425 = fadd double %fullElectVirial_xz.3, %1424
  %1426 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1427 = load double* %1426, align 8
  %1428 = fadd double %1427, %1419
  store double %1428, double* %1426, align 8
  %1429 = getelementptr inbounds %class.Vector* %1418, i32 0, i32 0
  %1430 = load double* %1429, align 8
  %1431 = fsub double %1430, %1419
  store double %1431, double* %1429, align 8
  %1432 = fmul double %1416, %1337
  %1433 = fmul double %1432, %1337
  %1434 = fadd double %fullElectVirial_yy.3, %1433
  %1435 = fmul double %1432, %1343
  %1436 = fadd double %fullElectVirial_yz.3, %1435
  %1437 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1438 = load double* %1437, align 8
  %1439 = fadd double %1438, %1432
  store double %1439, double* %1437, align 8
  %1440 = getelementptr inbounds %class.Vector* %1418, i32 0, i32 1
  %1441 = load double* %1440, align 8
  %1442 = fsub double %1441, %1432
  store double %1442, double* %1440, align 8
  %1443 = fmul double %1416, %1343
  %1444 = fmul double %1443, %1343
  %1445 = fadd double %fullElectVirial_zz.3, %1444
  %1446 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1447 = load double* %1446, align 8
  %1448 = fadd double %1447, %1443
  store double %1448, double* %1446, align 8
  %1449 = getelementptr inbounds %class.Vector* %1418, i32 0, i32 2
  %1450 = load double* %1449, align 8
  %1451 = fsub double %1450, %1443
  store double %1451, double* %1449, align 8
  br label %1452

; <label>:1452                                    ; preds = %1323
  %1453 = add nsw i32 %k17.4, 1
  br label %1321

; <label>:1454                                    ; preds = %1321
  br label %1455

; <label>:1455                                    ; preds = %1454, %338
  %g_lower.4 = phi i32 [ %g_lower.0, %338 ], [ %g_lower.3, %1454 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %338 ], [ %j_hgroup.2, %1454 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %338 ], [ %fixg_lower.3, %1454 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %338 ], [ %pairlistindex.2, %1454 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %338 ], [ %pairlistoffset.1, %1454 ]
  %pairCount.3 = phi i32 [ %334, %338 ], [ %pairCount.2, %1454 ]
  %i.1 = phi i32 [ %340, %338 ], [ %i.0, %1454 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %338 ], [ %fullElectVirial_zz.3, %1454 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %338 ], [ %fullElectVirial_yz.3, %1454 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %338 ], [ %fullElectVirial_yy.3, %1454 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %338 ], [ %fullElectVirial_xz.3, %1454 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %338 ], [ %fullElectVirial_xy.3, %1454 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %338 ], [ %fullElectVirial_xx.3, %1454 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %338 ], [ %fullElectEnergy.3, %1454 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %338 ], [ %virial_zz.2, %1454 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %338 ], [ %virial_yz.2, %1454 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %338 ], [ %virial_yy.2, %1454 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %338 ], [ %virial_xz.2, %1454 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %338 ], [ %virial_xy.2, %1454 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %338 ], [ %virial_xx.2, %1454 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %338 ], [ %electEnergy.2, %1454 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %338 ], [ %vdwEnergy.2, %1454 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %338 ], [ %789, %1454 ]
  %1456 = add nsw i32 %i.1, 1
  br label %273

; <label>:1457                                    ; preds = %273
  %1458 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1459 = icmp ne i32* %51, %1458
  br i1 %1459, label %1460, label %1465

; <label>:1460                                    ; preds = %1457
  %1461 = icmp eq i32* %51, null
  br i1 %1461, label %1464, label %1462

; <label>:1462                                    ; preds = %1460
  %1463 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1463) #8
  br label %1464

; <label>:1464                                    ; preds = %1462, %1460
  br label %1465

; <label>:1465                                    ; preds = %1464, %1457
  %1466 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1467 = icmp ne i32* %65, %1466
  br i1 %1467, label %1468, label %1473

; <label>:1468                                    ; preds = %1465
  %1469 = icmp eq i32* %65, null
  br i1 %1469, label %1472, label %1470

; <label>:1470                                    ; preds = %1468
  %1471 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1471) #8
  br label %1472

; <label>:1472                                    ; preds = %1470, %1468
  br label %1473

; <label>:1473                                    ; preds = %1472, %1465
  %1474 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1475 = icmp ne i32* %79, %1474
  br i1 %1475, label %1476, label %1481

; <label>:1476                                    ; preds = %1473
  %1477 = icmp eq i32* %79, null
  br i1 %1477, label %1480, label %1478

; <label>:1478                                    ; preds = %1476
  %1479 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1479) #8
  br label %1480

; <label>:1480                                    ; preds = %1478, %1476
  br label %1481

; <label>:1481                                    ; preds = %1480, %1473
  %1482 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1483 = icmp ne i32* %189, %1482
  br i1 %1483, label %1484, label %1489

; <label>:1484                                    ; preds = %1481
  %1485 = icmp eq i32* %189, null
  br i1 %1485, label %1488, label %1486

; <label>:1486                                    ; preds = %1484
  %1487 = bitcast i32* %189 to i8*
  call void @_ZdaPv(i8* %1487) #8
  br label %1488

; <label>:1488                                    ; preds = %1486, %1484
  br label %1489

; <label>:1489                                    ; preds = %1488, %1481
  %1490 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1491 = icmp ne i32* %203, %1490
  br i1 %1491, label %1492, label %1497

; <label>:1492                                    ; preds = %1489
  %1493 = icmp eq i32* %203, null
  br i1 %1493, label %1496, label %1494

; <label>:1494                                    ; preds = %1492
  %1495 = bitcast i32* %203 to i8*
  call void @_ZdaPv(i8* %1495) #8
  br label %1496

; <label>:1496                                    ; preds = %1494, %1492
  br label %1497

; <label>:1497                                    ; preds = %1496, %1489
  %1498 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1499 = icmp ne i32* %217, %1498
  br i1 %1499, label %1500, label %1505

; <label>:1500                                    ; preds = %1497
  %1501 = icmp eq i32* %217, null
  br i1 %1501, label %1504, label %1502

; <label>:1502                                    ; preds = %1500
  %1503 = bitcast i32* %217 to i8*
  call void @_ZdaPv(i8* %1503) #8
  br label %1504

; <label>:1504                                    ; preds = %1502, %1500
  br label %1505

; <label>:1505                                    ; preds = %1504, %1497
  %1506 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1507 = icmp ne i32* %231, %1506
  br i1 %1507, label %1508, label %1513

; <label>:1508                                    ; preds = %1505
  %1509 = icmp eq i32* %231, null
  br i1 %1509, label %1512, label %1510

; <label>:1510                                    ; preds = %1508
  %1511 = bitcast i32* %231 to i8*
  call void @_ZdaPv(i8* %1511) #8
  br label %1512

; <label>:1512                                    ; preds = %1510, %1508
  br label %1513

; <label>:1513                                    ; preds = %1512, %1505
  %1514 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1515 = icmp ne i32* %245, %1514
  br i1 %1515, label %1516, label %1521

; <label>:1516                                    ; preds = %1513
  %1517 = icmp eq i32* %245, null
  br i1 %1517, label %1520, label %1518

; <label>:1518                                    ; preds = %1516
  %1519 = bitcast i32* %245 to i8*
  call void @_ZdaPv(i8* %1519) #8
  br label %1520

; <label>:1520                                    ; preds = %1518, %1516
  br label %1521

; <label>:1521                                    ; preds = %1520, %1513
  %1522 = sitofp i32 %exclChecksum.0 to double
  %1523 = getelementptr inbounds double* %6, i64 22
  %1524 = load double* %1523, align 8
  %1525 = fadd double %1524, %1522
  store double %1525, double* %1523, align 8
  %1526 = getelementptr inbounds double* %6, i64 2
  %1527 = load double* %1526, align 8
  %1528 = fadd double %1527, %vdwEnergy.0
  store double %1528, double* %1526, align 8
  %1529 = getelementptr inbounds double* %6, i64 0
  %1530 = load double* %1529, align 8
  %1531 = fadd double %1530, %electEnergy.0
  store double %1531, double* %1529, align 8
  %1532 = getelementptr inbounds double* %6, i64 3
  %1533 = load double* %1532, align 8
  %1534 = fadd double %1533, %virial_xx.0
  store double %1534, double* %1532, align 8
  %1535 = getelementptr inbounds double* %6, i64 4
  %1536 = load double* %1535, align 8
  %1537 = fadd double %1536, %virial_xy.0
  store double %1537, double* %1535, align 8
  %1538 = getelementptr inbounds double* %6, i64 5
  %1539 = load double* %1538, align 8
  %1540 = fadd double %1539, %virial_xz.0
  store double %1540, double* %1538, align 8
  %1541 = getelementptr inbounds double* %6, i64 6
  %1542 = load double* %1541, align 8
  %1543 = fadd double %1542, %virial_xy.0
  store double %1543, double* %1541, align 8
  %1544 = getelementptr inbounds double* %6, i64 7
  %1545 = load double* %1544, align 8
  %1546 = fadd double %1545, %virial_yy.0
  store double %1546, double* %1544, align 8
  %1547 = getelementptr inbounds double* %6, i64 8
  %1548 = load double* %1547, align 8
  %1549 = fadd double %1548, %virial_yz.0
  store double %1549, double* %1547, align 8
  %1550 = getelementptr inbounds double* %6, i64 9
  %1551 = load double* %1550, align 8
  %1552 = fadd double %1551, %virial_xz.0
  store double %1552, double* %1550, align 8
  %1553 = getelementptr inbounds double* %6, i64 10
  %1554 = load double* %1553, align 8
  %1555 = fadd double %1554, %virial_yz.0
  store double %1555, double* %1553, align 8
  %1556 = getelementptr inbounds double* %6, i64 11
  %1557 = load double* %1556, align 8
  %1558 = fadd double %1557, %virial_zz.0
  store double %1558, double* %1556, align 8
  %1559 = getelementptr inbounds double* %6, i64 1
  %1560 = load double* %1559, align 8
  %1561 = fadd double %1560, %fullElectEnergy.0
  store double %1561, double* %1559, align 8
  %1562 = getelementptr inbounds double* %6, i64 12
  %1563 = load double* %1562, align 8
  %1564 = fadd double %1563, %fullElectVirial_xx.0
  store double %1564, double* %1562, align 8
  %1565 = getelementptr inbounds double* %6, i64 13
  %1566 = load double* %1565, align 8
  %1567 = fadd double %1566, %fullElectVirial_xy.0
  store double %1567, double* %1565, align 8
  %1568 = getelementptr inbounds double* %6, i64 14
  %1569 = load double* %1568, align 8
  %1570 = fadd double %1569, %fullElectVirial_xz.0
  store double %1570, double* %1568, align 8
  %1571 = getelementptr inbounds double* %6, i64 15
  %1572 = load double* %1571, align 8
  %1573 = fadd double %1572, %fullElectVirial_xy.0
  store double %1573, double* %1571, align 8
  %1574 = getelementptr inbounds double* %6, i64 16
  %1575 = load double* %1574, align 8
  %1576 = fadd double %1575, %fullElectVirial_yy.0
  store double %1576, double* %1574, align 8
  %1577 = getelementptr inbounds double* %6, i64 17
  %1578 = load double* %1577, align 8
  %1579 = fadd double %1578, %fullElectVirial_yz.0
  store double %1579, double* %1577, align 8
  %1580 = getelementptr inbounds double* %6, i64 18
  %1581 = load double* %1580, align 8
  %1582 = fadd double %1581, %fullElectVirial_xz.0
  store double %1582, double* %1580, align 8
  %1583 = getelementptr inbounds double* %6, i64 19
  %1584 = load double* %1583, align 8
  %1585 = fadd double %1584, %fullElectVirial_yz.0
  store double %1585, double* %1583, align 8
  %1586 = getelementptr inbounds double* %6, i64 20
  %1587 = load double* %1586, align 8
  %1588 = fadd double %1587, %fullElectVirial_zz.0
  store double %1588, double* %1586, align 8
  br label %1589

; <label>:1589                                    ; preds = %1521, %164, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil29calc_pair_merge_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.75, align 4
  %r2f29 = alloca %union.anon.76, align 4
  %r2f62 = alloca %union.anon.77, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1308

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1308

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1210, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1210 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1210 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1210 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1211, %1210 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_zz.4, %1210 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yz.4, %1210 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yy.4, %1210 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xz.4, %1210 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xy.4, %1210 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xx.4, %1210 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1210 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1212

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1210

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1210

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %506 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %507 = add nsw i32 %506, 1
  %508 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %509 = load i32* %508, align 4
  %510 = lshr i32 %509, 28
  %511 = mul nsw i32 %507, %510
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds double* %505, i64 %512
  %514 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %515 = load float* %514, align 4
  %516 = fpext float %515 to double
  %517 = fmul double 3.320636e+02, %516
  %518 = fmul double %517, %15
  %519 = fmul double %518, %9
  %520 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %521 = load i32* %520, align 4
  %522 = and i32 %521, 4194303
  %523 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %522)
  %524 = zext i16 %523 to i32
  %525 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %524)
  %526 = icmp ne i32 %504, 0
  br i1 %526, label %527, label %589

; <label>:527                                     ; preds = %502
  br label %528

; <label>:528                                     ; preds = %586, %527
  %pli4.0 = phi i32* [ %221, %527 ], [ %pli4.2, %586 ]
  %plin.0 = phi i32* [ %235, %527 ], [ %plin.2, %586 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %527 ], [ %587, %586 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %527 ], [ %exclChecksum.3, %586 ]
  %529 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %529, label %530, label %588

; <label>:530                                     ; preds = %528
  %531 = sext i32 %k.0 to i64
  %532 = getelementptr inbounds i32* %207, i64 %531
  %533 = load i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.CompAtom* %36, i64 %534
  %536 = getelementptr inbounds %struct.CompAtom* %535, i32 0, i32 0
  %537 = getelementptr inbounds %class.Vector* %536, i32 0, i32 0
  %538 = load double* %537, align 8
  %539 = fsub double %303, %538
  %540 = fmul double %539, %539
  %541 = sext i32 %533 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %36, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 1
  %545 = load double* %544, align 8
  %546 = fsub double %306, %545
  %547 = fmul double %546, %546
  %548 = fadd double %540, %547
  %549 = sext i32 %533 to i64
  %550 = getelementptr inbounds %struct.CompAtom* %36, i64 %549
  %551 = getelementptr inbounds %struct.CompAtom* %550, i32 0, i32 0
  %552 = getelementptr inbounds %class.Vector* %551, i32 0, i32 2
  %553 = load double* %552, align 8
  %554 = fsub double %309, %553
  %555 = fmul double %554, %554
  %556 = fadd double %548, %555
  %557 = sext i32 %533 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %36, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 2
  %560 = load i32* %559, align 4
  %561 = lshr i32 %560, 26
  %562 = and i32 %561, 1
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %585, label %564

; <label>:564                                     ; preds = %530
  %565 = fcmp ole double %556, %7
  br i1 %565, label %566, label %585

; <label>:566                                     ; preds = %564
  %567 = fcmp ole double %556, %21
  br i1 %567, label %568, label %571

; <label>:568                                     ; preds = %566
  %569 = add nsw i32 %exclChecksum.1, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %585, label %571

; <label>:571                                     ; preds = %568, %566
  %exclChecksum.2 = phi i32 [ %569, %568 ], [ %exclChecksum.1, %566 ]
  %572 = sext i32 %533 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %36, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 2
  %575 = load i32* %574, align 4
  %576 = and i32 %575, 4194303
  %577 = icmp sge i32 %576, %293
  br i1 %577, label %578, label %582

; <label>:578                                     ; preds = %571
  %579 = icmp sle i32 %576, %295
  br i1 %579, label %580, label %582

; <label>:580                                     ; preds = %578
  %581 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %533, i32* %pli4.0, align 4
  br label %584

; <label>:582                                     ; preds = %578, %571
  %583 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %533, i32* %plin.0, align 4
  br label %584

; <label>:584                                     ; preds = %582, %580
  %pli4.1 = phi i32* [ %581, %580 ], [ %pli4.0, %582 ]
  %plin.1 = phi i32* [ %plin.0, %580 ], [ %583, %582 ]
  br label %585

; <label>:585                                     ; preds = %584, %568, %564, %530
  %pli4.2 = phi i32* [ %pli4.0, %530 ], [ %pli4.0, %568 ], [ %pli4.1, %584 ], [ %pli4.0, %564 ]
  %plin.2 = phi i32* [ %plin.0, %530 ], [ %plin.0, %568 ], [ %plin.1, %584 ], [ %plin.0, %564 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %530 ], [ %569, %568 ], [ %exclChecksum.2, %584 ], [ %exclChecksum.1, %564 ]
  br label %586

; <label>:586                                     ; preds = %585
  %587 = add nsw i32 %k.0, 1
  br label %528

; <label>:588                                     ; preds = %528
  br label %668

; <label>:589                                     ; preds = %502
  %590 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %590, label %591, label %667

; <label>:591                                     ; preds = %589
  %592 = sext i32 %pairlistoffset.1 to i64
  %593 = getelementptr inbounds i32* %207, i64 %592
  %594 = load i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %36, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 0
  %598 = getelementptr inbounds %class.Vector* %597, i32 0, i32 0
  %599 = load double* %598, align 8
  %600 = sext i32 %594 to i64
  %601 = getelementptr inbounds %struct.CompAtom* %36, i64 %600
  %602 = getelementptr inbounds %struct.CompAtom* %601, i32 0, i32 0
  %603 = getelementptr inbounds %class.Vector* %602, i32 0, i32 1
  %604 = load double* %603, align 8
  %605 = sext i32 %594 to i64
  %606 = getelementptr inbounds %struct.CompAtom* %36, i64 %605
  %607 = getelementptr inbounds %struct.CompAtom* %606, i32 0, i32 0
  %608 = getelementptr inbounds %class.Vector* %607, i32 0, i32 2
  %609 = load double* %608, align 8
  %610 = sext i32 %594 to i64
  %611 = getelementptr inbounds %struct.CompAtom* %36, i64 %610
  %612 = getelementptr inbounds %struct.CompAtom* %611, i32 0, i32 2
  %613 = load i32* %612, align 4
  %614 = and i32 %613, 4194303
  br label %615

; <label>:615                                     ; preds = %660, %591
  %pli4.3 = phi i32* [ %221, %591 ], [ %pli4.5, %660 ]
  %plin.3 = phi i32* [ %235, %591 ], [ %plin.5, %660 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %591 ], [ %618, %660 ]
  %j211.0 = phi i32 [ %594, %591 ], [ %621, %660 ]
  %p_j_x12.0 = phi double [ %599, %591 ], [ %628, %660 ]
  %p_j_y13.0 = phi double [ %604, %591 ], [ %636, %660 ]
  %p_j_z14.0 = phi double [ %609, %591 ], [ %644, %660 ]
  %atom215.0 = phi i32 [ %614, %591 ], [ %665, %660 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %591 ], [ %exclChecksum.6, %660 ]
  %616 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %616, label %617, label %666

; <label>:617                                     ; preds = %615
  %618 = add nsw i32 %k10.0, 1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i32* %207, i64 %619
  %621 = load i32* %620, align 4
  %622 = fsub double %303, %p_j_x12.0
  %623 = fmul double %622, %622
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds %struct.CompAtom* %36, i64 %624
  %626 = getelementptr inbounds %struct.CompAtom* %625, i32 0, i32 0
  %627 = getelementptr inbounds %class.Vector* %626, i32 0, i32 0
  %628 = load double* %627, align 8
  %629 = fsub double %306, %p_j_y13.0
  %630 = fmul double %629, %629
  %631 = fadd double %623, %630
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 1
  %636 = load double* %635, align 8
  %637 = fsub double %309, %p_j_z14.0
  %638 = fmul double %637, %637
  %639 = fadd double %631, %638
  %640 = sext i32 %621 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %36, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 2
  %644 = load double* %643, align 8
  %645 = fcmp ole double %639, %7
  br i1 %645, label %646, label %660

; <label>:646                                     ; preds = %617
  %647 = fcmp ole double %639, %21
  br i1 %647, label %648, label %651

; <label>:648                                     ; preds = %646
  %649 = add nsw i32 %exclChecksum.4, 1
  %650 = icmp ne i32 %649, 0
  br i1 %650, label %660, label %651

; <label>:651                                     ; preds = %648, %646
  %exclChecksum.5 = phi i32 [ %649, %648 ], [ %exclChecksum.4, %646 ]
  %652 = icmp sge i32 %atom215.0, %293
  br i1 %652, label %653, label %657

; <label>:653                                     ; preds = %651
  %654 = icmp sle i32 %atom215.0, %295
  br i1 %654, label %655, label %657

; <label>:655                                     ; preds = %653
  %656 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %659

; <label>:657                                     ; preds = %653, %651
  %658 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %659

; <label>:659                                     ; preds = %657, %655
  %pli4.4 = phi i32* [ %656, %655 ], [ %pli4.3, %657 ]
  %plin.4 = phi i32* [ %plin.3, %655 ], [ %658, %657 ]
  br label %660

; <label>:660                                     ; preds = %659, %648, %617
  %pli4.5 = phi i32* [ %pli4.3, %648 ], [ %pli4.4, %659 ], [ %pli4.3, %617 ]
  %plin.5 = phi i32* [ %plin.3, %648 ], [ %plin.4, %659 ], [ %plin.3, %617 ]
  %exclChecksum.6 = phi i32 [ %649, %648 ], [ %exclChecksum.5, %659 ], [ %exclChecksum.4, %617 ]
  %661 = sext i32 %621 to i64
  %662 = getelementptr inbounds %struct.CompAtom* %36, i64 %661
  %663 = getelementptr inbounds %struct.CompAtom* %662, i32 0, i32 2
  %664 = load i32* %663, align 4
  %665 = and i32 %664, 4194303
  br label %615

; <label>:666                                     ; preds = %615
  br label %667

; <label>:667                                     ; preds = %666, %589
  %pli4.6 = phi i32* [ %pli4.3, %666 ], [ %221, %589 ]
  %plin.6 = phi i32* [ %plin.3, %666 ], [ %235, %589 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %666 ], [ %exclChecksum.0, %589 ]
  br label %668

; <label>:668                                     ; preds = %667, %588
  %pli4.7 = phi i32* [ %pli4.0, %588 ], [ %pli4.6, %667 ]
  %plin.7 = phi i32* [ %plin.0, %588 ], [ %plin.6, %667 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %588 ], [ %exclChecksum.7, %667 ]
  %669 = ptrtoint i32* %pli4.7 to i64
  %670 = ptrtoint i32* %221 to i64
  %671 = sub i64 %669, %670
  %672 = sdiv exact i64 %671, 4
  %673 = trunc i64 %672 to i32
  %674 = icmp ne i32 %673, 0
  br i1 %674, label %675, label %682

; <label>:675                                     ; preds = %668
  %676 = sub nsw i32 %673, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %673 to i64
  %681 = getelementptr inbounds i32* %221, i64 %680
  store i32 %679, i32* %681, align 4
  br label %682

; <label>:682                                     ; preds = %675, %668
  br label %683

; <label>:683                                     ; preds = %705, %682
  %plin.8 = phi i32* [ %plin.7, %682 ], [ %plin.9, %705 ]
  %plix.0 = phi i32* [ %249, %682 ], [ %plix.1, %705 ]
  %plim.0 = phi i32* [ %263, %682 ], [ %plim.1, %705 ]
  %k18.0 = phi i32 [ 0, %682 ], [ %706, %705 ]
  %684 = icmp slt i32 %k18.0, %673
  br i1 %684, label %685, label %707

; <label>:685                                     ; preds = %683
  %686 = sext i32 %k18.0 to i64
  %687 = getelementptr inbounds i32* %221, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CompAtom* %36, i64 %689
  %691 = getelementptr inbounds %struct.CompAtom* %690, i32 0, i32 2
  %692 = load i32* %691, align 4
  %693 = and i32 %692, 4194303
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i8* %300, i64 %694
  %696 = load i8* %695, align 1
  %697 = sext i8 %696 to i32
  switch i32 %697, label %704 [
    i32 0, label %698
    i32 1, label %700
    i32 2, label %702
  ]

; <label>:698                                     ; preds = %685
  %699 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %688, i32* %plin.8, align 4
  br label %704

; <label>:700                                     ; preds = %685
  %701 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %688, i32* %plix.0, align 4
  br label %704

; <label>:702                                     ; preds = %685
  %703 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %688, i32* %plim.0, align 4
  br label %704

; <label>:704                                     ; preds = %702, %700, %698, %685
  %plin.9 = phi i32* [ %plin.8, %685 ], [ %plin.8, %702 ], [ %plin.8, %700 ], [ %699, %698 ]
  %plix.1 = phi i32* [ %plix.0, %685 ], [ %plix.0, %702 ], [ %701, %700 ], [ %plix.0, %698 ]
  %plim.1 = phi i32* [ %plim.0, %685 ], [ %703, %702 ], [ %plim.0, %700 ], [ %plim.0, %698 ]
  br label %705

; <label>:705                                     ; preds = %704
  %706 = add nsw i32 %k18.0, 1
  br label %683

; <label>:707                                     ; preds = %683
  %708 = ptrtoint i32* %plix.0 to i64
  %709 = ptrtoint i32* %249 to i64
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 4
  %712 = sext i32 %exclChecksum.8 to i64
  %713 = add nsw i64 %712, %711
  %714 = trunc i64 %713 to i32
  %715 = ptrtoint i32* %plim.0 to i64
  %716 = ptrtoint i32* %263 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %714 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plin.8 to i64
  %723 = ptrtoint i32* %235 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = trunc i64 %725 to i32
  br label %727

; <label>:727                                     ; preds = %887, %707
  %k18.1 = phi i32 [ 0, %707 ], [ %888, %887 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %707 ], [ %880, %887 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %707 ], [ %871, %887 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %707 ], [ %869, %887 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %707 ], [ %860, %887 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %707 ], [ %858, %887 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %707 ], [ %856, %887 ]
  %728 = icmp slt i32 %k18.1, %726
  br i1 %728, label %729, label %889

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k18.1 to i64
  %731 = getelementptr inbounds i32* %235, i64 %730
  %732 = load i32* %731, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.CompAtom* %36, i64 %733
  %735 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 0
  %737 = load double* %736, align 8
  %738 = fsub double %303, %737
  %739 = fmul double %738, %738
  %740 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %741 = getelementptr inbounds %class.Vector* %740, i32 0, i32 1
  %742 = load double* %741, align 8
  %743 = fsub double %306, %742
  %744 = fmul double %743, %743
  %745 = fadd double %739, %744
  %746 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %747 = getelementptr inbounds %class.Vector* %746, i32 0, i32 2
  %748 = load double* %747, align 8
  %749 = fsub double %309, %748
  %750 = fmul double %749, %749
  %751 = fadd double %745, %750
  %752 = fptrunc double %751 to float
  %753 = bitcast %union.anon.75* %r2f to float*
  store float %752, float* %753, align 4
  %754 = bitcast %union.anon.75* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = ashr i32 %755, 17
  %757 = add nsw i32 %756, %24
  %758 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %759 = load i32* %758, align 4
  %760 = and i32 %759, 4194303
  %761 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %760)
  %762 = zext i16 %761 to i32
  %763 = mul nsw i32 2, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %764
  %766 = mul nsw i32 16, %757
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double* %14, i64 %767
  %769 = getelementptr inbounds double* %768, i64 0
  %770 = load double* %769, align 8
  %771 = mul nsw i32 16, %757
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds double* %14, i64 %772
  %774 = getelementptr inbounds double* %773, i64 4
  %775 = getelementptr inbounds double* %774, i64 0
  %776 = load double* %775, align 8
  %777 = mul nsw i32 16, %757
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double* %14, i64 %778
  %780 = getelementptr inbounds double* %779, i64 8
  %781 = getelementptr inbounds double* %780, i64 0
  %782 = load double* %781, align 8
  %783 = bitcast %union.anon.75* %r2f to i32*
  %784 = load i32* %783, align 4
  %785 = and i32 %784, -131072
  store i32 %785, i32* %783, align 4
  %786 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 1
  %787 = load float* %786, align 4
  %788 = fpext float %787 to double
  %789 = fmul double %519, %788
  %790 = bitcast %union.anon.75* %r2f to float*
  %791 = load float* %790, align 4
  %792 = fpext float %791 to double
  %793 = fsub double %751, %792
  %794 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %795 = load i32* %794, align 4
  %796 = lshr i32 %795, 28
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds double* %513, i64 %797
  %799 = load double* %798, align 8
  %800 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 0
  %801 = load double* %800, align 8
  %802 = fmul double %15, %801
  %803 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 1
  %804 = load double* %803, align 8
  %805 = fmul double %15, %804
  %806 = fmul double %802, %770
  %807 = fmul double %805, %776
  %808 = fsub double %806, %807
  %809 = getelementptr inbounds double* %768, i64 3
  %810 = load double* %809, align 8
  %811 = fmul double %802, %810
  %812 = getelementptr inbounds double* %774, i64 3
  %813 = load double* %812, align 8
  %814 = fmul double %805, %813
  %815 = fsub double %811, %814
  %816 = getelementptr inbounds double* %768, i64 2
  %817 = load double* %816, align 8
  %818 = fmul double %802, %817
  %819 = getelementptr inbounds double* %774, i64 2
  %820 = load double* %819, align 8
  %821 = fmul double %805, %820
  %822 = fsub double %818, %821
  %823 = getelementptr inbounds double* %768, i64 1
  %824 = load double* %823, align 8
  %825 = fmul double %802, %824
  %826 = getelementptr inbounds double* %774, i64 1
  %827 = load double* %826, align 8
  %828 = fmul double %805, %827
  %829 = fsub double %825, %828
  %830 = getelementptr inbounds double* %780, i64 1
  %831 = load double* %830, align 8
  %832 = getelementptr inbounds double* %780, i64 2
  %833 = load double* %832, align 8
  %834 = getelementptr inbounds double* %780, i64 3
  %835 = load double* %834, align 8
  %836 = fmul double %835, %789
  %837 = fmul double %833, %789
  %838 = fmul double %831, %789
  %839 = fmul double %782, %789
  %840 = fadd double %836, %815
  %841 = fadd double %837, %822
  %842 = fadd double %838, %829
  %843 = fadd double %839, %808
  %844 = fmul double 3.000000e+00, %793
  %845 = fmul double %844, %840
  %846 = fmul double 2.000000e+00, %841
  %847 = fadd double %845, %846
  %848 = fmul double %847, %793
  %849 = fadd double %848, %842
  %850 = fmul double -2.000000e+00, %849
  %851 = fmul double %850, %799
  %852 = sext i32 %732 to i64
  %853 = getelementptr inbounds %class.Vector* %269, i64 %852
  %854 = fmul double %851, %738
  %855 = fmul double %854, %738
  %856 = fadd double %fullElectVirial_xx.1, %855
  %857 = fmul double %854, %743
  %858 = fadd double %fullElectVirial_xy.1, %857
  %859 = fmul double %854, %749
  %860 = fadd double %fullElectVirial_xz.1, %859
  %861 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %862 = load double* %861, align 8
  %863 = fadd double %862, %854
  store double %863, double* %861, align 8
  %864 = getelementptr inbounds %class.Vector* %853, i32 0, i32 0
  %865 = load double* %864, align 8
  %866 = fsub double %865, %854
  store double %866, double* %864, align 8
  %867 = fmul double %851, %743
  %868 = fmul double %867, %743
  %869 = fadd double %fullElectVirial_yy.1, %868
  %870 = fmul double %867, %749
  %871 = fadd double %fullElectVirial_yz.1, %870
  %872 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %873 = load double* %872, align 8
  %874 = fadd double %873, %867
  store double %874, double* %872, align 8
  %875 = getelementptr inbounds %class.Vector* %853, i32 0, i32 1
  %876 = load double* %875, align 8
  %877 = fsub double %876, %867
  store double %877, double* %875, align 8
  %878 = fmul double %851, %749
  %879 = fmul double %878, %749
  %880 = fadd double %fullElectVirial_zz.1, %879
  %881 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %882 = load double* %881, align 8
  %883 = fadd double %882, %878
  store double %883, double* %881, align 8
  %884 = getelementptr inbounds %class.Vector* %853, i32 0, i32 2
  %885 = load double* %884, align 8
  %886 = fsub double %885, %878
  store double %886, double* %884, align 8
  br label %887

; <label>:887                                     ; preds = %729
  %888 = add nsw i32 %k18.1, 1
  br label %727

; <label>:889                                     ; preds = %727
  %890 = ptrtoint i32* %plim.0 to i64
  %891 = ptrtoint i32* %263 to i64
  %892 = sub i64 %890, %891
  %893 = sdiv exact i64 %892, 4
  %894 = trunc i64 %893 to i32
  br label %895

; <label>:895                                     ; preds = %1076, %889
  %k18.2 = phi i32 [ 0, %889 ], [ %1077, %1076 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %889 ], [ %1069, %1076 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %889 ], [ %1060, %1076 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %889 ], [ %1058, %1076 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %889 ], [ %1049, %1076 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %889 ], [ %1047, %1076 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %889 ], [ %1045, %1076 ]
  %896 = icmp slt i32 %k18.2, %894
  br i1 %896, label %897, label %1078

; <label>:897                                     ; preds = %895
  %898 = sext i32 %k18.2 to i64
  %899 = getelementptr inbounds i32* %263, i64 %898
  %900 = load i32* %899, align 4
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds %struct.CompAtom* %36, i64 %901
  %903 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 0
  %904 = getelementptr inbounds %class.Vector* %903, i32 0, i32 0
  %905 = load double* %904, align 8
  %906 = fsub double %303, %905
  %907 = fmul double %906, %906
  %908 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 0
  %909 = getelementptr inbounds %class.Vector* %908, i32 0, i32 1
  %910 = load double* %909, align 8
  %911 = fsub double %306, %910
  %912 = fmul double %911, %911
  %913 = fadd double %907, %912
  %914 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 0
  %915 = getelementptr inbounds %class.Vector* %914, i32 0, i32 2
  %916 = load double* %915, align 8
  %917 = fsub double %309, %916
  %918 = fmul double %917, %917
  %919 = fadd double %913, %918
  %920 = fptrunc double %919 to float
  %921 = bitcast %union.anon.76* %r2f29 to float*
  store float %920, float* %921, align 4
  %922 = bitcast %union.anon.76* %r2f29 to i32*
  %923 = load i32* %922, align 4
  %924 = ashr i32 %923, 17
  %925 = add nsw i32 %924, %24
  %926 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 2
  %927 = load i32* %926, align 4
  %928 = and i32 %927, 4194303
  %929 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %928)
  %930 = zext i16 %929 to i32
  %931 = mul nsw i32 2, %930
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %932
  %934 = getelementptr inbounds %"struct.LJTable::TableEntry"* %933, i64 1
  %935 = mul nsw i32 16, %925
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds double* %14, i64 %936
  %938 = getelementptr inbounds double* %937, i64 0
  %939 = load double* %938, align 8
  %940 = mul nsw i32 16, %925
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds double* %14, i64 %941
  %943 = getelementptr inbounds double* %942, i64 4
  %944 = getelementptr inbounds double* %943, i64 0
  %945 = load double* %944, align 8
  %946 = mul nsw i32 16, %925
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds double* %14, i64 %947
  %949 = getelementptr inbounds double* %948, i64 8
  %950 = getelementptr inbounds double* %949, i64 0
  %951 = load double* %950, align 8
  %952 = bitcast %union.anon.76* %r2f29 to i32*
  %953 = load i32* %952, align 4
  %954 = and i32 %953, -131072
  store i32 %954, i32* %952, align 4
  %955 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 1
  %956 = load float* %955, align 4
  %957 = fpext float %956 to double
  %958 = fmul double %519, %957
  %959 = bitcast %union.anon.76* %r2f29 to float*
  %960 = load float* %959, align 4
  %961 = fpext float %960 to double
  %962 = fsub double %919, %961
  %963 = getelementptr inbounds %struct.CompAtom* %902, i32 0, i32 2
  %964 = load i32* %963, align 4
  %965 = lshr i32 %964, 28
  %966 = zext i32 %965 to i64
  %967 = getelementptr inbounds double* %513, i64 %966
  %968 = load double* %967, align 8
  %969 = getelementptr inbounds %"struct.LJTable::TableEntry"* %934, i32 0, i32 0
  %970 = load double* %969, align 8
  %971 = fmul double %15, %970
  %972 = getelementptr inbounds %"struct.LJTable::TableEntry"* %934, i32 0, i32 1
  %973 = load double* %972, align 8
  %974 = fmul double %15, %973
  %975 = fmul double %971, %939
  %976 = fmul double %974, %945
  %977 = fsub double %975, %976
  %978 = getelementptr inbounds double* %937, i64 3
  %979 = load double* %978, align 8
  %980 = fmul double %971, %979
  %981 = getelementptr inbounds double* %943, i64 3
  %982 = load double* %981, align 8
  %983 = fmul double %974, %982
  %984 = fsub double %980, %983
  %985 = getelementptr inbounds double* %937, i64 2
  %986 = load double* %985, align 8
  %987 = fmul double %971, %986
  %988 = getelementptr inbounds double* %943, i64 2
  %989 = load double* %988, align 8
  %990 = fmul double %974, %989
  %991 = fsub double %987, %990
  %992 = getelementptr inbounds double* %937, i64 1
  %993 = load double* %992, align 8
  %994 = fmul double %971, %993
  %995 = getelementptr inbounds double* %943, i64 1
  %996 = load double* %995, align 8
  %997 = fmul double %974, %996
  %998 = fsub double %994, %997
  %999 = getelementptr inbounds double* %949, i64 1
  %1000 = load double* %999, align 8
  %1001 = getelementptr inbounds double* %949, i64 2
  %1002 = load double* %1001, align 8
  %1003 = getelementptr inbounds double* %949, i64 3
  %1004 = load double* %1003, align 8
  %1005 = getelementptr inbounds double* %14, i64 12
  %1006 = mul nsw i32 16, %925
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds double* %1005, i64 %1007
  %1009 = getelementptr inbounds double* %1008, i64 0
  %1010 = load double* %1009, align 8
  %1011 = fmul double %17, %1010
  %1012 = fsub double %951, %1011
  %1013 = getelementptr inbounds double* %1008, i64 1
  %1014 = load double* %1013, align 8
  %1015 = fmul double %17, %1014
  %1016 = fsub double %1000, %1015
  %1017 = getelementptr inbounds double* %1008, i64 2
  %1018 = load double* %1017, align 8
  %1019 = fmul double %17, %1018
  %1020 = fsub double %1002, %1019
  %1021 = getelementptr inbounds double* %1008, i64 3
  %1022 = load double* %1021, align 8
  %1023 = fmul double %17, %1022
  %1024 = fsub double %1004, %1023
  %1025 = fmul double %1024, %958
  %1026 = fmul double %1020, %958
  %1027 = fmul double %1016, %958
  %1028 = fmul double %1012, %958
  %1029 = fadd double %1025, %984
  %1030 = fadd double %1026, %991
  %1031 = fadd double %1027, %998
  %1032 = fadd double %1028, %977
  %1033 = fmul double 3.000000e+00, %962
  %1034 = fmul double %1033, %1029
  %1035 = fmul double 2.000000e+00, %1030
  %1036 = fadd double %1034, %1035
  %1037 = fmul double %1036, %962
  %1038 = fadd double %1037, %1031
  %1039 = fmul double -2.000000e+00, %1038
  %1040 = fmul double %1039, %968
  %1041 = sext i32 %900 to i64
  %1042 = getelementptr inbounds %class.Vector* %269, i64 %1041
  %1043 = fmul double %1040, %906
  %1044 = fmul double %1043, %906
  %1045 = fadd double %fullElectVirial_xx.2, %1044
  %1046 = fmul double %1043, %911
  %1047 = fadd double %fullElectVirial_xy.2, %1046
  %1048 = fmul double %1043, %917
  %1049 = fadd double %fullElectVirial_xz.2, %1048
  %1050 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1051 = load double* %1050, align 8
  %1052 = fadd double %1051, %1043
  store double %1052, double* %1050, align 8
  %1053 = getelementptr inbounds %class.Vector* %1042, i32 0, i32 0
  %1054 = load double* %1053, align 8
  %1055 = fsub double %1054, %1043
  store double %1055, double* %1053, align 8
  %1056 = fmul double %1040, %911
  %1057 = fmul double %1056, %911
  %1058 = fadd double %fullElectVirial_yy.2, %1057
  %1059 = fmul double %1056, %917
  %1060 = fadd double %fullElectVirial_yz.2, %1059
  %1061 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1062 = load double* %1061, align 8
  %1063 = fadd double %1062, %1056
  store double %1063, double* %1061, align 8
  %1064 = getelementptr inbounds %class.Vector* %1042, i32 0, i32 1
  %1065 = load double* %1064, align 8
  %1066 = fsub double %1065, %1056
  store double %1066, double* %1064, align 8
  %1067 = fmul double %1040, %917
  %1068 = fmul double %1067, %917
  %1069 = fadd double %fullElectVirial_zz.2, %1068
  %1070 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1071 = load double* %1070, align 8
  %1072 = fadd double %1071, %1067
  store double %1072, double* %1070, align 8
  %1073 = getelementptr inbounds %class.Vector* %1042, i32 0, i32 2
  %1074 = load double* %1073, align 8
  %1075 = fsub double %1074, %1067
  store double %1075, double* %1073, align 8
  br label %1076

; <label>:1076                                    ; preds = %897
  %1077 = add nsw i32 %k18.2, 1
  br label %895

; <label>:1078                                    ; preds = %895
  %1079 = ptrtoint i32* %plix.0 to i64
  %1080 = ptrtoint i32* %249 to i64
  %1081 = sub i64 %1079, %1080
  %1082 = sdiv exact i64 %1081, 4
  %1083 = trunc i64 %1082 to i32
  br label %1084

; <label>:1084                                    ; preds = %1207, %1078
  %k18.3 = phi i32 [ 0, %1078 ], [ %1208, %1207 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1078 ], [ %1200, %1207 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1078 ], [ %1191, %1207 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1078 ], [ %1189, %1207 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1078 ], [ %1180, %1207 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1078 ], [ %1178, %1207 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1078 ], [ %1176, %1207 ]
  %1085 = icmp slt i32 %k18.3, %1083
  br i1 %1085, label %1086, label %1209

; <label>:1086                                    ; preds = %1084
  %1087 = sext i32 %k18.3 to i64
  %1088 = getelementptr inbounds i32* %249, i64 %1087
  %1089 = load i32* %1088, align 4
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds %struct.CompAtom* %36, i64 %1090
  %1092 = getelementptr inbounds %struct.CompAtom* %1091, i32 0, i32 0
  %1093 = getelementptr inbounds %class.Vector* %1092, i32 0, i32 0
  %1094 = load double* %1093, align 8
  %1095 = fsub double %303, %1094
  %1096 = fmul double %1095, %1095
  %1097 = getelementptr inbounds %struct.CompAtom* %1091, i32 0, i32 0
  %1098 = getelementptr inbounds %class.Vector* %1097, i32 0, i32 1
  %1099 = load double* %1098, align 8
  %1100 = fsub double %306, %1099
  %1101 = fmul double %1100, %1100
  %1102 = fadd double %1096, %1101
  %1103 = getelementptr inbounds %struct.CompAtom* %1091, i32 0, i32 0
  %1104 = getelementptr inbounds %class.Vector* %1103, i32 0, i32 2
  %1105 = load double* %1104, align 8
  %1106 = fsub double %309, %1105
  %1107 = fmul double %1106, %1106
  %1108 = fadd double %1102, %1107
  %1109 = fptrunc double %1108 to float
  %1110 = bitcast %union.anon.77* %r2f62 to float*
  store float %1109, float* %1110, align 4
  %1111 = bitcast %union.anon.77* %r2f62 to i32*
  %1112 = load i32* %1111, align 4
  %1113 = ashr i32 %1112, 17
  %1114 = add nsw i32 %1113, %24
  %1115 = mul nsw i32 16, %1114
  %1116 = sext i32 %1115 to i64
  %1117 = getelementptr inbounds double* %14, i64 %1116
  %1118 = getelementptr inbounds double* %1117, i64 8
  %1119 = getelementptr inbounds double* %1118, i64 0
  %1120 = load double* %1119, align 8
  %1121 = bitcast %union.anon.77* %r2f62 to i32*
  %1122 = load i32* %1121, align 4
  %1123 = and i32 %1122, -131072
  store i32 %1123, i32* %1121, align 4
  %1124 = getelementptr inbounds %struct.CompAtom* %1091, i32 0, i32 1
  %1125 = load float* %1124, align 4
  %1126 = fpext float %1125 to double
  %1127 = fmul double %519, %1126
  %1128 = bitcast %union.anon.77* %r2f62 to float*
  %1129 = load float* %1128, align 4
  %1130 = fpext float %1129 to double
  %1131 = fsub double %1108, %1130
  %1132 = getelementptr inbounds %struct.CompAtom* %1091, i32 0, i32 2
  %1133 = load i32* %1132, align 4
  %1134 = lshr i32 %1133, 28
  %1135 = zext i32 %1134 to i64
  %1136 = getelementptr inbounds double* %513, i64 %1135
  %1137 = load double* %1136, align 8
  %1138 = getelementptr inbounds double* %1118, i64 1
  %1139 = load double* %1138, align 8
  %1140 = getelementptr inbounds double* %1118, i64 2
  %1141 = load double* %1140, align 8
  %1142 = getelementptr inbounds double* %1118, i64 3
  %1143 = load double* %1142, align 8
  %1144 = getelementptr inbounds double* %14, i64 12
  %1145 = mul nsw i32 16, %1114
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds double* %1144, i64 %1146
  %1148 = getelementptr inbounds double* %1147, i64 0
  %1149 = load double* %1148, align 8
  %1150 = fsub double %1120, %1149
  %1151 = getelementptr inbounds double* %1147, i64 1
  %1152 = load double* %1151, align 8
  %1153 = fsub double %1139, %1152
  %1154 = getelementptr inbounds double* %1147, i64 2
  %1155 = load double* %1154, align 8
  %1156 = fsub double %1141, %1155
  %1157 = getelementptr inbounds double* %1147, i64 3
  %1158 = load double* %1157, align 8
  %1159 = fsub double %1143, %1158
  %1160 = fmul double %1159, %1127
  %1161 = fmul double %1156, %1127
  %1162 = fmul double %1153, %1127
  %1163 = fmul double %1150, %1127
  %1164 = fmul double 3.000000e+00, %1131
  %1165 = fmul double %1164, %1160
  %1166 = fmul double 2.000000e+00, %1161
  %1167 = fadd double %1165, %1166
  %1168 = fmul double %1167, %1131
  %1169 = fadd double %1168, %1162
  %1170 = fmul double -2.000000e+00, %1169
  %1171 = fmul double %1170, %1137
  %1172 = sext i32 %1089 to i64
  %1173 = getelementptr inbounds %class.Vector* %269, i64 %1172
  %1174 = fmul double %1171, %1095
  %1175 = fmul double %1174, %1095
  %1176 = fadd double %fullElectVirial_xx.3, %1175
  %1177 = fmul double %1174, %1100
  %1178 = fadd double %fullElectVirial_xy.3, %1177
  %1179 = fmul double %1174, %1106
  %1180 = fadd double %fullElectVirial_xz.3, %1179
  %1181 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1182 = load double* %1181, align 8
  %1183 = fadd double %1182, %1174
  store double %1183, double* %1181, align 8
  %1184 = getelementptr inbounds %class.Vector* %1173, i32 0, i32 0
  %1185 = load double* %1184, align 8
  %1186 = fsub double %1185, %1174
  store double %1186, double* %1184, align 8
  %1187 = fmul double %1171, %1100
  %1188 = fmul double %1187, %1100
  %1189 = fadd double %fullElectVirial_yy.3, %1188
  %1190 = fmul double %1187, %1106
  %1191 = fadd double %fullElectVirial_yz.3, %1190
  %1192 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1193 = load double* %1192, align 8
  %1194 = fadd double %1193, %1187
  store double %1194, double* %1192, align 8
  %1195 = getelementptr inbounds %class.Vector* %1173, i32 0, i32 1
  %1196 = load double* %1195, align 8
  %1197 = fsub double %1196, %1187
  store double %1197, double* %1195, align 8
  %1198 = fmul double %1171, %1106
  %1199 = fmul double %1198, %1106
  %1200 = fadd double %fullElectVirial_zz.3, %1199
  %1201 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1202 = load double* %1201, align 8
  %1203 = fadd double %1202, %1198
  store double %1203, double* %1201, align 8
  %1204 = getelementptr inbounds %class.Vector* %1173, i32 0, i32 2
  %1205 = load double* %1204, align 8
  %1206 = fsub double %1205, %1198
  store double %1206, double* %1204, align 8
  br label %1207

; <label>:1207                                    ; preds = %1086
  %1208 = add nsw i32 %k18.3, 1
  br label %1084

; <label>:1209                                    ; preds = %1084
  br label %1210

; <label>:1210                                    ; preds = %1209, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1209 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1209 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1209 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1209 ], [ %491, %488 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %339 ], [ %fullElectVirial_zz.3, %1209 ], [ %fullElectVirial_zz.0, %488 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %339 ], [ %fullElectVirial_yz.3, %1209 ], [ %fullElectVirial_yz.0, %488 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %339 ], [ %fullElectVirial_yy.3, %1209 ], [ %fullElectVirial_yy.0, %488 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %339 ], [ %fullElectVirial_xz.3, %1209 ], [ %fullElectVirial_xz.0, %488 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %339 ], [ %fullElectVirial_xy.3, %1209 ], [ %fullElectVirial_xy.0, %488 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %339 ], [ %fullElectVirial_xx.3, %1209 ], [ %fullElectVirial_xx.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %721, %1209 ], [ %exclChecksum.0, %488 ]
  %1211 = add nsw i32 %i.2, 1
  br label %283

; <label>:1212                                    ; preds = %283
  %1213 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1214 = icmp ne i32* %50, %1213
  br i1 %1214, label %1215, label %1220

; <label>:1215                                    ; preds = %1212
  %1216 = icmp eq i32* %50, null
  br i1 %1216, label %1219, label %1217

; <label>:1217                                    ; preds = %1215
  %1218 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1218) #8
  br label %1219

; <label>:1219                                    ; preds = %1217, %1215
  br label %1220

; <label>:1220                                    ; preds = %1219, %1212
  %1221 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1222 = icmp ne i32* %64, %1221
  br i1 %1222, label %1223, label %1228

; <label>:1223                                    ; preds = %1220
  %1224 = icmp eq i32* %64, null
  br i1 %1224, label %1227, label %1225

; <label>:1225                                    ; preds = %1223
  %1226 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1226) #8
  br label %1227

; <label>:1227                                    ; preds = %1225, %1223
  br label %1228

; <label>:1228                                    ; preds = %1227, %1220
  %1229 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1230 = icmp ne i32* %78, %1229
  br i1 %1230, label %1231, label %1236

; <label>:1231                                    ; preds = %1228
  %1232 = icmp eq i32* %78, null
  br i1 %1232, label %1235, label %1233

; <label>:1233                                    ; preds = %1231
  %1234 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1234) #8
  br label %1235

; <label>:1235                                    ; preds = %1233, %1231
  br label %1236

; <label>:1236                                    ; preds = %1235, %1228
  %1237 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1238 = icmp ne i32* %207, %1237
  br i1 %1238, label %1239, label %1244

; <label>:1239                                    ; preds = %1236
  %1240 = icmp eq i32* %207, null
  br i1 %1240, label %1243, label %1241

; <label>:1241                                    ; preds = %1239
  %1242 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1242) #8
  br label %1243

; <label>:1243                                    ; preds = %1241, %1239
  br label %1244

; <label>:1244                                    ; preds = %1243, %1236
  %1245 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1246 = icmp ne i32* %221, %1245
  br i1 %1246, label %1247, label %1252

; <label>:1247                                    ; preds = %1244
  %1248 = icmp eq i32* %221, null
  br i1 %1248, label %1251, label %1249

; <label>:1249                                    ; preds = %1247
  %1250 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1250) #8
  br label %1251

; <label>:1251                                    ; preds = %1249, %1247
  br label %1252

; <label>:1252                                    ; preds = %1251, %1244
  %1253 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1254 = icmp ne i32* %235, %1253
  br i1 %1254, label %1255, label %1260

; <label>:1255                                    ; preds = %1252
  %1256 = icmp eq i32* %235, null
  br i1 %1256, label %1259, label %1257

; <label>:1257                                    ; preds = %1255
  %1258 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1258) #8
  br label %1259

; <label>:1259                                    ; preds = %1257, %1255
  br label %1260

; <label>:1260                                    ; preds = %1259, %1252
  %1261 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1262 = icmp ne i32* %249, %1261
  br i1 %1262, label %1263, label %1268

; <label>:1263                                    ; preds = %1260
  %1264 = icmp eq i32* %249, null
  br i1 %1264, label %1267, label %1265

; <label>:1265                                    ; preds = %1263
  %1266 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1266) #8
  br label %1267

; <label>:1267                                    ; preds = %1265, %1263
  br label %1268

; <label>:1268                                    ; preds = %1267, %1260
  %1269 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1270 = icmp ne i32* %263, %1269
  br i1 %1270, label %1271, label %1276

; <label>:1271                                    ; preds = %1268
  %1272 = icmp eq i32* %263, null
  br i1 %1272, label %1275, label %1273

; <label>:1273                                    ; preds = %1271
  %1274 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1274) #8
  br label %1275

; <label>:1275                                    ; preds = %1273, %1271
  br label %1276

; <label>:1276                                    ; preds = %1275, %1268
  %1277 = sitofp i32 %exclChecksum.0 to double
  %1278 = getelementptr inbounds double* %6, i64 22
  %1279 = load double* %1278, align 8
  %1280 = fadd double %1279, %1277
  store double %1280, double* %1278, align 8
  %1281 = getelementptr inbounds double* %6, i64 12
  %1282 = load double* %1281, align 8
  %1283 = fadd double %1282, %fullElectVirial_xx.0
  store double %1283, double* %1281, align 8
  %1284 = getelementptr inbounds double* %6, i64 13
  %1285 = load double* %1284, align 8
  %1286 = fadd double %1285, %fullElectVirial_xy.0
  store double %1286, double* %1284, align 8
  %1287 = getelementptr inbounds double* %6, i64 14
  %1288 = load double* %1287, align 8
  %1289 = fadd double %1288, %fullElectVirial_xz.0
  store double %1289, double* %1287, align 8
  %1290 = getelementptr inbounds double* %6, i64 15
  %1291 = load double* %1290, align 8
  %1292 = fadd double %1291, %fullElectVirial_xy.0
  store double %1292, double* %1290, align 8
  %1293 = getelementptr inbounds double* %6, i64 16
  %1294 = load double* %1293, align 8
  %1295 = fadd double %1294, %fullElectVirial_yy.0
  store double %1295, double* %1293, align 8
  %1296 = getelementptr inbounds double* %6, i64 17
  %1297 = load double* %1296, align 8
  %1298 = fadd double %1297, %fullElectVirial_yz.0
  store double %1298, double* %1296, align 8
  %1299 = getelementptr inbounds double* %6, i64 18
  %1300 = load double* %1299, align 8
  %1301 = fadd double %1300, %fullElectVirial_xz.0
  store double %1301, double* %1299, align 8
  %1302 = getelementptr inbounds double* %6, i64 19
  %1303 = load double* %1302, align 8
  %1304 = fadd double %1303, %fullElectVirial_yz.0
  store double %1304, double* %1302, align 8
  %1305 = getelementptr inbounds double* %6, i64 20
  %1306 = load double* %1305, align 8
  %1307 = fadd double %1306, %fullElectVirial_zz.0
  store double %1307, double* %1305, align 8
  br label %1308

; <label>:1308                                    ; preds = %1276, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil36calc_pair_energy_merge_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.78, align 4
  %r2f29 = alloca %union.anon.79, align 4
  %r2f64 = alloca %union.anon.80, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1354

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1354

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1250, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1250 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1250 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1250 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1251, %1250 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_zz.4, %1250 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yz.4, %1250 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yy.4, %1250 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xz.4, %1250 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xy.4, %1250 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xx.4, %1250 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectEnergy.4, %1250 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy.3, %1250 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1250 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1252

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1250

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1250

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %506 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %507 = add nsw i32 %506, 1
  %508 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %509 = load i32* %508, align 4
  %510 = lshr i32 %509, 28
  %511 = mul nsw i32 %507, %510
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds double* %505, i64 %512
  %514 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %515 = load float* %514, align 4
  %516 = fpext float %515 to double
  %517 = fmul double 3.320636e+02, %516
  %518 = fmul double %517, %15
  %519 = fmul double %518, %9
  %520 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %521 = load i32* %520, align 4
  %522 = and i32 %521, 4194303
  %523 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %522)
  %524 = zext i16 %523 to i32
  %525 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %524)
  %526 = icmp ne i32 %504, 0
  br i1 %526, label %527, label %589

; <label>:527                                     ; preds = %502
  br label %528

; <label>:528                                     ; preds = %586, %527
  %pli4.0 = phi i32* [ %221, %527 ], [ %pli4.2, %586 ]
  %plin.0 = phi i32* [ %235, %527 ], [ %plin.2, %586 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %527 ], [ %587, %586 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %527 ], [ %exclChecksum.3, %586 ]
  %529 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %529, label %530, label %588

; <label>:530                                     ; preds = %528
  %531 = sext i32 %k.0 to i64
  %532 = getelementptr inbounds i32* %207, i64 %531
  %533 = load i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.CompAtom* %36, i64 %534
  %536 = getelementptr inbounds %struct.CompAtom* %535, i32 0, i32 0
  %537 = getelementptr inbounds %class.Vector* %536, i32 0, i32 0
  %538 = load double* %537, align 8
  %539 = fsub double %303, %538
  %540 = fmul double %539, %539
  %541 = sext i32 %533 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %36, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 1
  %545 = load double* %544, align 8
  %546 = fsub double %306, %545
  %547 = fmul double %546, %546
  %548 = fadd double %540, %547
  %549 = sext i32 %533 to i64
  %550 = getelementptr inbounds %struct.CompAtom* %36, i64 %549
  %551 = getelementptr inbounds %struct.CompAtom* %550, i32 0, i32 0
  %552 = getelementptr inbounds %class.Vector* %551, i32 0, i32 2
  %553 = load double* %552, align 8
  %554 = fsub double %309, %553
  %555 = fmul double %554, %554
  %556 = fadd double %548, %555
  %557 = sext i32 %533 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %36, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 2
  %560 = load i32* %559, align 4
  %561 = lshr i32 %560, 26
  %562 = and i32 %561, 1
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %585, label %564

; <label>:564                                     ; preds = %530
  %565 = fcmp ole double %556, %7
  br i1 %565, label %566, label %585

; <label>:566                                     ; preds = %564
  %567 = fcmp ole double %556, %21
  br i1 %567, label %568, label %571

; <label>:568                                     ; preds = %566
  %569 = add nsw i32 %exclChecksum.1, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %585, label %571

; <label>:571                                     ; preds = %568, %566
  %exclChecksum.2 = phi i32 [ %569, %568 ], [ %exclChecksum.1, %566 ]
  %572 = sext i32 %533 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %36, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 2
  %575 = load i32* %574, align 4
  %576 = and i32 %575, 4194303
  %577 = icmp sge i32 %576, %293
  br i1 %577, label %578, label %582

; <label>:578                                     ; preds = %571
  %579 = icmp sle i32 %576, %295
  br i1 %579, label %580, label %582

; <label>:580                                     ; preds = %578
  %581 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %533, i32* %pli4.0, align 4
  br label %584

; <label>:582                                     ; preds = %578, %571
  %583 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %533, i32* %plin.0, align 4
  br label %584

; <label>:584                                     ; preds = %582, %580
  %pli4.1 = phi i32* [ %581, %580 ], [ %pli4.0, %582 ]
  %plin.1 = phi i32* [ %plin.0, %580 ], [ %583, %582 ]
  br label %585

; <label>:585                                     ; preds = %584, %568, %564, %530
  %pli4.2 = phi i32* [ %pli4.0, %530 ], [ %pli4.0, %568 ], [ %pli4.1, %584 ], [ %pli4.0, %564 ]
  %plin.2 = phi i32* [ %plin.0, %530 ], [ %plin.0, %568 ], [ %plin.1, %584 ], [ %plin.0, %564 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %530 ], [ %569, %568 ], [ %exclChecksum.2, %584 ], [ %exclChecksum.1, %564 ]
  br label %586

; <label>:586                                     ; preds = %585
  %587 = add nsw i32 %k.0, 1
  br label %528

; <label>:588                                     ; preds = %528
  br label %668

; <label>:589                                     ; preds = %502
  %590 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %590, label %591, label %667

; <label>:591                                     ; preds = %589
  %592 = sext i32 %pairlistoffset.1 to i64
  %593 = getelementptr inbounds i32* %207, i64 %592
  %594 = load i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %36, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 0
  %598 = getelementptr inbounds %class.Vector* %597, i32 0, i32 0
  %599 = load double* %598, align 8
  %600 = sext i32 %594 to i64
  %601 = getelementptr inbounds %struct.CompAtom* %36, i64 %600
  %602 = getelementptr inbounds %struct.CompAtom* %601, i32 0, i32 0
  %603 = getelementptr inbounds %class.Vector* %602, i32 0, i32 1
  %604 = load double* %603, align 8
  %605 = sext i32 %594 to i64
  %606 = getelementptr inbounds %struct.CompAtom* %36, i64 %605
  %607 = getelementptr inbounds %struct.CompAtom* %606, i32 0, i32 0
  %608 = getelementptr inbounds %class.Vector* %607, i32 0, i32 2
  %609 = load double* %608, align 8
  %610 = sext i32 %594 to i64
  %611 = getelementptr inbounds %struct.CompAtom* %36, i64 %610
  %612 = getelementptr inbounds %struct.CompAtom* %611, i32 0, i32 2
  %613 = load i32* %612, align 4
  %614 = and i32 %613, 4194303
  br label %615

; <label>:615                                     ; preds = %660, %591
  %pli4.3 = phi i32* [ %221, %591 ], [ %pli4.5, %660 ]
  %plin.3 = phi i32* [ %235, %591 ], [ %plin.5, %660 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %591 ], [ %618, %660 ]
  %j211.0 = phi i32 [ %594, %591 ], [ %621, %660 ]
  %p_j_x12.0 = phi double [ %599, %591 ], [ %628, %660 ]
  %p_j_y13.0 = phi double [ %604, %591 ], [ %636, %660 ]
  %p_j_z14.0 = phi double [ %609, %591 ], [ %644, %660 ]
  %atom215.0 = phi i32 [ %614, %591 ], [ %665, %660 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %591 ], [ %exclChecksum.6, %660 ]
  %616 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %616, label %617, label %666

; <label>:617                                     ; preds = %615
  %618 = add nsw i32 %k10.0, 1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i32* %207, i64 %619
  %621 = load i32* %620, align 4
  %622 = fsub double %303, %p_j_x12.0
  %623 = fmul double %622, %622
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds %struct.CompAtom* %36, i64 %624
  %626 = getelementptr inbounds %struct.CompAtom* %625, i32 0, i32 0
  %627 = getelementptr inbounds %class.Vector* %626, i32 0, i32 0
  %628 = load double* %627, align 8
  %629 = fsub double %306, %p_j_y13.0
  %630 = fmul double %629, %629
  %631 = fadd double %623, %630
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 1
  %636 = load double* %635, align 8
  %637 = fsub double %309, %p_j_z14.0
  %638 = fmul double %637, %637
  %639 = fadd double %631, %638
  %640 = sext i32 %621 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %36, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 2
  %644 = load double* %643, align 8
  %645 = fcmp ole double %639, %7
  br i1 %645, label %646, label %660

; <label>:646                                     ; preds = %617
  %647 = fcmp ole double %639, %21
  br i1 %647, label %648, label %651

; <label>:648                                     ; preds = %646
  %649 = add nsw i32 %exclChecksum.4, 1
  %650 = icmp ne i32 %649, 0
  br i1 %650, label %660, label %651

; <label>:651                                     ; preds = %648, %646
  %exclChecksum.5 = phi i32 [ %649, %648 ], [ %exclChecksum.4, %646 ]
  %652 = icmp sge i32 %atom215.0, %293
  br i1 %652, label %653, label %657

; <label>:653                                     ; preds = %651
  %654 = icmp sle i32 %atom215.0, %295
  br i1 %654, label %655, label %657

; <label>:655                                     ; preds = %653
  %656 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %659

; <label>:657                                     ; preds = %653, %651
  %658 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %659

; <label>:659                                     ; preds = %657, %655
  %pli4.4 = phi i32* [ %656, %655 ], [ %pli4.3, %657 ]
  %plin.4 = phi i32* [ %plin.3, %655 ], [ %658, %657 ]
  br label %660

; <label>:660                                     ; preds = %659, %648, %617
  %pli4.5 = phi i32* [ %pli4.3, %648 ], [ %pli4.4, %659 ], [ %pli4.3, %617 ]
  %plin.5 = phi i32* [ %plin.3, %648 ], [ %plin.4, %659 ], [ %plin.3, %617 ]
  %exclChecksum.6 = phi i32 [ %649, %648 ], [ %exclChecksum.5, %659 ], [ %exclChecksum.4, %617 ]
  %661 = sext i32 %621 to i64
  %662 = getelementptr inbounds %struct.CompAtom* %36, i64 %661
  %663 = getelementptr inbounds %struct.CompAtom* %662, i32 0, i32 2
  %664 = load i32* %663, align 4
  %665 = and i32 %664, 4194303
  br label %615

; <label>:666                                     ; preds = %615
  br label %667

; <label>:667                                     ; preds = %666, %589
  %pli4.6 = phi i32* [ %pli4.3, %666 ], [ %221, %589 ]
  %plin.6 = phi i32* [ %plin.3, %666 ], [ %235, %589 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %666 ], [ %exclChecksum.0, %589 ]
  br label %668

; <label>:668                                     ; preds = %667, %588
  %pli4.7 = phi i32* [ %pli4.0, %588 ], [ %pli4.6, %667 ]
  %plin.7 = phi i32* [ %plin.0, %588 ], [ %plin.6, %667 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %588 ], [ %exclChecksum.7, %667 ]
  %669 = ptrtoint i32* %pli4.7 to i64
  %670 = ptrtoint i32* %221 to i64
  %671 = sub i64 %669, %670
  %672 = sdiv exact i64 %671, 4
  %673 = trunc i64 %672 to i32
  %674 = icmp ne i32 %673, 0
  br i1 %674, label %675, label %682

; <label>:675                                     ; preds = %668
  %676 = sub nsw i32 %673, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %673 to i64
  %681 = getelementptr inbounds i32* %221, i64 %680
  store i32 %679, i32* %681, align 4
  br label %682

; <label>:682                                     ; preds = %675, %668
  br label %683

; <label>:683                                     ; preds = %705, %682
  %plin.8 = phi i32* [ %plin.7, %682 ], [ %plin.9, %705 ]
  %plix.0 = phi i32* [ %249, %682 ], [ %plix.1, %705 ]
  %plim.0 = phi i32* [ %263, %682 ], [ %plim.1, %705 ]
  %k18.0 = phi i32 [ 0, %682 ], [ %706, %705 ]
  %684 = icmp slt i32 %k18.0, %673
  br i1 %684, label %685, label %707

; <label>:685                                     ; preds = %683
  %686 = sext i32 %k18.0 to i64
  %687 = getelementptr inbounds i32* %221, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CompAtom* %36, i64 %689
  %691 = getelementptr inbounds %struct.CompAtom* %690, i32 0, i32 2
  %692 = load i32* %691, align 4
  %693 = and i32 %692, 4194303
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i8* %300, i64 %694
  %696 = load i8* %695, align 1
  %697 = sext i8 %696 to i32
  switch i32 %697, label %704 [
    i32 0, label %698
    i32 1, label %700
    i32 2, label %702
  ]

; <label>:698                                     ; preds = %685
  %699 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %688, i32* %plin.8, align 4
  br label %704

; <label>:700                                     ; preds = %685
  %701 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %688, i32* %plix.0, align 4
  br label %704

; <label>:702                                     ; preds = %685
  %703 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %688, i32* %plim.0, align 4
  br label %704

; <label>:704                                     ; preds = %702, %700, %698, %685
  %plin.9 = phi i32* [ %plin.8, %685 ], [ %plin.8, %702 ], [ %plin.8, %700 ], [ %699, %698 ]
  %plix.1 = phi i32* [ %plix.0, %685 ], [ %plix.0, %702 ], [ %701, %700 ], [ %plix.0, %698 ]
  %plim.1 = phi i32* [ %plim.0, %685 ], [ %703, %702 ], [ %plim.0, %700 ], [ %plim.0, %698 ]
  br label %705

; <label>:705                                     ; preds = %704
  %706 = add nsw i32 %k18.0, 1
  br label %683

; <label>:707                                     ; preds = %683
  %708 = ptrtoint i32* %plix.0 to i64
  %709 = ptrtoint i32* %249 to i64
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 4
  %712 = sext i32 %exclChecksum.8 to i64
  %713 = add nsw i64 %712, %711
  %714 = trunc i64 %713 to i32
  %715 = ptrtoint i32* %plim.0 to i64
  %716 = ptrtoint i32* %263 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %714 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plin.8 to i64
  %723 = ptrtoint i32* %235 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = trunc i64 %725 to i32
  br label %727

; <label>:727                                     ; preds = %903, %707
  %k18.1 = phi i32 [ 0, %707 ], [ %904, %903 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %707 ], [ %896, %903 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %707 ], [ %887, %903 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %707 ], [ %885, %903 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %707 ], [ %876, %903 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %707 ], [ %874, %903 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %707 ], [ %872, %903 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %707 ], [ %855, %903 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %707 ], [ %837, %903 ]
  %728 = icmp slt i32 %k18.1, %726
  br i1 %728, label %729, label %905

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k18.1 to i64
  %731 = getelementptr inbounds i32* %235, i64 %730
  %732 = load i32* %731, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.CompAtom* %36, i64 %733
  %735 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 0
  %737 = load double* %736, align 8
  %738 = fsub double %303, %737
  %739 = fmul double %738, %738
  %740 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %741 = getelementptr inbounds %class.Vector* %740, i32 0, i32 1
  %742 = load double* %741, align 8
  %743 = fsub double %306, %742
  %744 = fmul double %743, %743
  %745 = fadd double %739, %744
  %746 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %747 = getelementptr inbounds %class.Vector* %746, i32 0, i32 2
  %748 = load double* %747, align 8
  %749 = fsub double %309, %748
  %750 = fmul double %749, %749
  %751 = fadd double %745, %750
  %752 = fptrunc double %751 to float
  %753 = bitcast %union.anon.78* %r2f to float*
  store float %752, float* %753, align 4
  %754 = bitcast %union.anon.78* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = ashr i32 %755, 17
  %757 = add nsw i32 %756, %24
  %758 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %759 = load i32* %758, align 4
  %760 = and i32 %759, 4194303
  %761 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %760)
  %762 = zext i16 %761 to i32
  %763 = mul nsw i32 2, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %764
  %766 = mul nsw i32 16, %757
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double* %14, i64 %767
  %769 = getelementptr inbounds double* %768, i64 0
  %770 = load double* %769, align 8
  %771 = mul nsw i32 16, %757
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds double* %14, i64 %772
  %774 = getelementptr inbounds double* %773, i64 4
  %775 = getelementptr inbounds double* %774, i64 0
  %776 = load double* %775, align 8
  %777 = mul nsw i32 16, %757
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double* %14, i64 %778
  %780 = getelementptr inbounds double* %779, i64 8
  %781 = getelementptr inbounds double* %780, i64 0
  %782 = load double* %781, align 8
  %783 = bitcast %union.anon.78* %r2f to i32*
  %784 = load i32* %783, align 4
  %785 = and i32 %784, -131072
  store i32 %785, i32* %783, align 4
  %786 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 1
  %787 = load float* %786, align 4
  %788 = fpext float %787 to double
  %789 = fmul double %519, %788
  %790 = bitcast %union.anon.78* %r2f to float*
  %791 = load float* %790, align 4
  %792 = fpext float %791 to double
  %793 = fsub double %751, %792
  %794 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %795 = load i32* %794, align 4
  %796 = lshr i32 %795, 28
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds double* %513, i64 %797
  %799 = load double* %798, align 8
  %800 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 0
  %801 = load double* %800, align 8
  %802 = fmul double %15, %801
  %803 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 1
  %804 = load double* %803, align 8
  %805 = fmul double %15, %804
  %806 = fmul double %802, %770
  %807 = fmul double %805, %776
  %808 = fsub double %806, %807
  %809 = getelementptr inbounds double* %768, i64 3
  %810 = load double* %809, align 8
  %811 = fmul double %802, %810
  %812 = getelementptr inbounds double* %774, i64 3
  %813 = load double* %812, align 8
  %814 = fmul double %805, %813
  %815 = fsub double %811, %814
  %816 = getelementptr inbounds double* %768, i64 2
  %817 = load double* %816, align 8
  %818 = fmul double %802, %817
  %819 = getelementptr inbounds double* %774, i64 2
  %820 = load double* %819, align 8
  %821 = fmul double %805, %820
  %822 = fsub double %818, %821
  %823 = getelementptr inbounds double* %768, i64 1
  %824 = load double* %823, align 8
  %825 = fmul double %802, %824
  %826 = getelementptr inbounds double* %774, i64 1
  %827 = load double* %826, align 8
  %828 = fmul double %805, %827
  %829 = fsub double %825, %828
  %830 = fmul double %793, %815
  %831 = fadd double %830, %822
  %832 = fmul double %831, %793
  %833 = fadd double %832, %829
  %834 = fmul double %833, %793
  %835 = fadd double %834, %808
  %836 = fmul double %799, %835
  %837 = fadd double %vdwEnergy.1, %836
  %838 = getelementptr inbounds double* %780, i64 1
  %839 = load double* %838, align 8
  %840 = getelementptr inbounds double* %780, i64 2
  %841 = load double* %840, align 8
  %842 = getelementptr inbounds double* %780, i64 3
  %843 = load double* %842, align 8
  %844 = fmul double %843, %789
  %845 = fmul double %841, %789
  %846 = fmul double %839, %789
  %847 = fmul double %782, %789
  %848 = fmul double %793, %844
  %849 = fadd double %848, %845
  %850 = fmul double %849, %793
  %851 = fadd double %850, %846
  %852 = fmul double %851, %793
  %853 = fadd double %852, %847
  %854 = fmul double %799, %853
  %855 = fadd double %fullElectEnergy.1, %854
  %856 = fadd double %844, %815
  %857 = fadd double %845, %822
  %858 = fadd double %846, %829
  %859 = fadd double %847, %808
  %860 = fmul double 3.000000e+00, %793
  %861 = fmul double %860, %856
  %862 = fmul double 2.000000e+00, %857
  %863 = fadd double %861, %862
  %864 = fmul double %863, %793
  %865 = fadd double %864, %858
  %866 = fmul double -2.000000e+00, %865
  %867 = fmul double %866, %799
  %868 = sext i32 %732 to i64
  %869 = getelementptr inbounds %class.Vector* %269, i64 %868
  %870 = fmul double %867, %738
  %871 = fmul double %870, %738
  %872 = fadd double %fullElectVirial_xx.1, %871
  %873 = fmul double %870, %743
  %874 = fadd double %fullElectVirial_xy.1, %873
  %875 = fmul double %870, %749
  %876 = fadd double %fullElectVirial_xz.1, %875
  %877 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %878 = load double* %877, align 8
  %879 = fadd double %878, %870
  store double %879, double* %877, align 8
  %880 = getelementptr inbounds %class.Vector* %869, i32 0, i32 0
  %881 = load double* %880, align 8
  %882 = fsub double %881, %870
  store double %882, double* %880, align 8
  %883 = fmul double %867, %743
  %884 = fmul double %883, %743
  %885 = fadd double %fullElectVirial_yy.1, %884
  %886 = fmul double %883, %749
  %887 = fadd double %fullElectVirial_yz.1, %886
  %888 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %889 = load double* %888, align 8
  %890 = fadd double %889, %883
  store double %890, double* %888, align 8
  %891 = getelementptr inbounds %class.Vector* %869, i32 0, i32 1
  %892 = load double* %891, align 8
  %893 = fsub double %892, %883
  store double %893, double* %891, align 8
  %894 = fmul double %867, %749
  %895 = fmul double %894, %749
  %896 = fadd double %fullElectVirial_zz.1, %895
  %897 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %898 = load double* %897, align 8
  %899 = fadd double %898, %894
  store double %899, double* %897, align 8
  %900 = getelementptr inbounds %class.Vector* %869, i32 0, i32 2
  %901 = load double* %900, align 8
  %902 = fsub double %901, %894
  store double %902, double* %900, align 8
  br label %903

; <label>:903                                     ; preds = %729
  %904 = add nsw i32 %k18.1, 1
  br label %727

; <label>:905                                     ; preds = %727
  %906 = ptrtoint i32* %plim.0 to i64
  %907 = ptrtoint i32* %263 to i64
  %908 = sub i64 %906, %907
  %909 = sdiv exact i64 %908, 4
  %910 = trunc i64 %909 to i32
  br label %911

; <label>:911                                     ; preds = %1108, %905
  %k18.2 = phi i32 [ 0, %905 ], [ %1109, %1108 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %905 ], [ %1101, %1108 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %905 ], [ %1092, %1108 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %905 ], [ %1090, %1108 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %905 ], [ %1081, %1108 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %905 ], [ %1079, %1108 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %905 ], [ %1077, %1108 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %905 ], [ %1060, %1108 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %905 ], [ %1022, %1108 ]
  %912 = icmp slt i32 %k18.2, %910
  br i1 %912, label %913, label %1110

; <label>:913                                     ; preds = %911
  %914 = sext i32 %k18.2 to i64
  %915 = getelementptr inbounds i32* %263, i64 %914
  %916 = load i32* %915, align 4
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds %struct.CompAtom* %36, i64 %917
  %919 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 0
  %920 = getelementptr inbounds %class.Vector* %919, i32 0, i32 0
  %921 = load double* %920, align 8
  %922 = fsub double %303, %921
  %923 = fmul double %922, %922
  %924 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 0
  %925 = getelementptr inbounds %class.Vector* %924, i32 0, i32 1
  %926 = load double* %925, align 8
  %927 = fsub double %306, %926
  %928 = fmul double %927, %927
  %929 = fadd double %923, %928
  %930 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 0
  %931 = getelementptr inbounds %class.Vector* %930, i32 0, i32 2
  %932 = load double* %931, align 8
  %933 = fsub double %309, %932
  %934 = fmul double %933, %933
  %935 = fadd double %929, %934
  %936 = fptrunc double %935 to float
  %937 = bitcast %union.anon.79* %r2f29 to float*
  store float %936, float* %937, align 4
  %938 = bitcast %union.anon.79* %r2f29 to i32*
  %939 = load i32* %938, align 4
  %940 = ashr i32 %939, 17
  %941 = add nsw i32 %940, %24
  %942 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 2
  %943 = load i32* %942, align 4
  %944 = and i32 %943, 4194303
  %945 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %944)
  %946 = zext i16 %945 to i32
  %947 = mul nsw i32 2, %946
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %948
  %950 = getelementptr inbounds %"struct.LJTable::TableEntry"* %949, i64 1
  %951 = mul nsw i32 16, %941
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds double* %14, i64 %952
  %954 = getelementptr inbounds double* %953, i64 0
  %955 = load double* %954, align 8
  %956 = mul nsw i32 16, %941
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds double* %14, i64 %957
  %959 = getelementptr inbounds double* %958, i64 4
  %960 = getelementptr inbounds double* %959, i64 0
  %961 = load double* %960, align 8
  %962 = mul nsw i32 16, %941
  %963 = sext i32 %962 to i64
  %964 = getelementptr inbounds double* %14, i64 %963
  %965 = getelementptr inbounds double* %964, i64 8
  %966 = getelementptr inbounds double* %965, i64 0
  %967 = load double* %966, align 8
  %968 = bitcast %union.anon.79* %r2f29 to i32*
  %969 = load i32* %968, align 4
  %970 = and i32 %969, -131072
  store i32 %970, i32* %968, align 4
  %971 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 1
  %972 = load float* %971, align 4
  %973 = fpext float %972 to double
  %974 = fmul double %519, %973
  %975 = bitcast %union.anon.79* %r2f29 to float*
  %976 = load float* %975, align 4
  %977 = fpext float %976 to double
  %978 = fsub double %935, %977
  %979 = getelementptr inbounds %struct.CompAtom* %918, i32 0, i32 2
  %980 = load i32* %979, align 4
  %981 = lshr i32 %980, 28
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds double* %513, i64 %982
  %984 = load double* %983, align 8
  %985 = getelementptr inbounds %"struct.LJTable::TableEntry"* %950, i32 0, i32 0
  %986 = load double* %985, align 8
  %987 = fmul double %15, %986
  %988 = getelementptr inbounds %"struct.LJTable::TableEntry"* %950, i32 0, i32 1
  %989 = load double* %988, align 8
  %990 = fmul double %15, %989
  %991 = fmul double %987, %955
  %992 = fmul double %990, %961
  %993 = fsub double %991, %992
  %994 = getelementptr inbounds double* %953, i64 3
  %995 = load double* %994, align 8
  %996 = fmul double %987, %995
  %997 = getelementptr inbounds double* %959, i64 3
  %998 = load double* %997, align 8
  %999 = fmul double %990, %998
  %1000 = fsub double %996, %999
  %1001 = getelementptr inbounds double* %953, i64 2
  %1002 = load double* %1001, align 8
  %1003 = fmul double %987, %1002
  %1004 = getelementptr inbounds double* %959, i64 2
  %1005 = load double* %1004, align 8
  %1006 = fmul double %990, %1005
  %1007 = fsub double %1003, %1006
  %1008 = getelementptr inbounds double* %953, i64 1
  %1009 = load double* %1008, align 8
  %1010 = fmul double %987, %1009
  %1011 = getelementptr inbounds double* %959, i64 1
  %1012 = load double* %1011, align 8
  %1013 = fmul double %990, %1012
  %1014 = fsub double %1010, %1013
  %1015 = fmul double %978, %1000
  %1016 = fadd double %1015, %1007
  %1017 = fmul double %1016, %978
  %1018 = fadd double %1017, %1014
  %1019 = fmul double %1018, %978
  %1020 = fadd double %1019, %993
  %1021 = fmul double %984, %1020
  %1022 = fadd double %vdwEnergy.2, %1021
  %1023 = getelementptr inbounds double* %965, i64 1
  %1024 = load double* %1023, align 8
  %1025 = getelementptr inbounds double* %965, i64 2
  %1026 = load double* %1025, align 8
  %1027 = getelementptr inbounds double* %965, i64 3
  %1028 = load double* %1027, align 8
  %1029 = getelementptr inbounds double* %14, i64 12
  %1030 = mul nsw i32 16, %941
  %1031 = sext i32 %1030 to i64
  %1032 = getelementptr inbounds double* %1029, i64 %1031
  %1033 = getelementptr inbounds double* %1032, i64 0
  %1034 = load double* %1033, align 8
  %1035 = fmul double %17, %1034
  %1036 = fsub double %967, %1035
  %1037 = getelementptr inbounds double* %1032, i64 1
  %1038 = load double* %1037, align 8
  %1039 = fmul double %17, %1038
  %1040 = fsub double %1024, %1039
  %1041 = getelementptr inbounds double* %1032, i64 2
  %1042 = load double* %1041, align 8
  %1043 = fmul double %17, %1042
  %1044 = fsub double %1026, %1043
  %1045 = getelementptr inbounds double* %1032, i64 3
  %1046 = load double* %1045, align 8
  %1047 = fmul double %17, %1046
  %1048 = fsub double %1028, %1047
  %1049 = fmul double %1048, %974
  %1050 = fmul double %1044, %974
  %1051 = fmul double %1040, %974
  %1052 = fmul double %1036, %974
  %1053 = fmul double %978, %1049
  %1054 = fadd double %1053, %1050
  %1055 = fmul double %1054, %978
  %1056 = fadd double %1055, %1051
  %1057 = fmul double %1056, %978
  %1058 = fadd double %1057, %1052
  %1059 = fmul double %984, %1058
  %1060 = fadd double %fullElectEnergy.2, %1059
  %1061 = fadd double %1049, %1000
  %1062 = fadd double %1050, %1007
  %1063 = fadd double %1051, %1014
  %1064 = fadd double %1052, %993
  %1065 = fmul double 3.000000e+00, %978
  %1066 = fmul double %1065, %1061
  %1067 = fmul double 2.000000e+00, %1062
  %1068 = fadd double %1066, %1067
  %1069 = fmul double %1068, %978
  %1070 = fadd double %1069, %1063
  %1071 = fmul double -2.000000e+00, %1070
  %1072 = fmul double %1071, %984
  %1073 = sext i32 %916 to i64
  %1074 = getelementptr inbounds %class.Vector* %269, i64 %1073
  %1075 = fmul double %1072, %922
  %1076 = fmul double %1075, %922
  %1077 = fadd double %fullElectVirial_xx.2, %1076
  %1078 = fmul double %1075, %927
  %1079 = fadd double %fullElectVirial_xy.2, %1078
  %1080 = fmul double %1075, %933
  %1081 = fadd double %fullElectVirial_xz.2, %1080
  %1082 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1083 = load double* %1082, align 8
  %1084 = fadd double %1083, %1075
  store double %1084, double* %1082, align 8
  %1085 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 0
  %1086 = load double* %1085, align 8
  %1087 = fsub double %1086, %1075
  store double %1087, double* %1085, align 8
  %1088 = fmul double %1072, %927
  %1089 = fmul double %1088, %927
  %1090 = fadd double %fullElectVirial_yy.2, %1089
  %1091 = fmul double %1088, %933
  %1092 = fadd double %fullElectVirial_yz.2, %1091
  %1093 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1094 = load double* %1093, align 8
  %1095 = fadd double %1094, %1088
  store double %1095, double* %1093, align 8
  %1096 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 1
  %1097 = load double* %1096, align 8
  %1098 = fsub double %1097, %1088
  store double %1098, double* %1096, align 8
  %1099 = fmul double %1072, %933
  %1100 = fmul double %1099, %933
  %1101 = fadd double %fullElectVirial_zz.2, %1100
  %1102 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1103 = load double* %1102, align 8
  %1104 = fadd double %1103, %1099
  store double %1104, double* %1102, align 8
  %1105 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 2
  %1106 = load double* %1105, align 8
  %1107 = fsub double %1106, %1099
  store double %1107, double* %1105, align 8
  br label %1108

; <label>:1108                                    ; preds = %913
  %1109 = add nsw i32 %k18.2, 1
  br label %911

; <label>:1110                                    ; preds = %911
  %1111 = ptrtoint i32* %plix.0 to i64
  %1112 = ptrtoint i32* %249 to i64
  %1113 = sub i64 %1111, %1112
  %1114 = sdiv exact i64 %1113, 4
  %1115 = trunc i64 %1114 to i32
  br label %1116

; <label>:1116                                    ; preds = %1247, %1110
  %k18.3 = phi i32 [ 0, %1110 ], [ %1248, %1247 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1110 ], [ %1240, %1247 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1110 ], [ %1231, %1247 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1110 ], [ %1229, %1247 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1110 ], [ %1220, %1247 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1110 ], [ %1218, %1247 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1110 ], [ %1216, %1247 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1110 ], [ %1203, %1247 ]
  %1117 = icmp slt i32 %k18.3, %1115
  br i1 %1117, label %1118, label %1249

; <label>:1118                                    ; preds = %1116
  %1119 = sext i32 %k18.3 to i64
  %1120 = getelementptr inbounds i32* %249, i64 %1119
  %1121 = load i32* %1120, align 4
  %1122 = sext i32 %1121 to i64
  %1123 = getelementptr inbounds %struct.CompAtom* %36, i64 %1122
  %1124 = getelementptr inbounds %struct.CompAtom* %1123, i32 0, i32 0
  %1125 = getelementptr inbounds %class.Vector* %1124, i32 0, i32 0
  %1126 = load double* %1125, align 8
  %1127 = fsub double %303, %1126
  %1128 = fmul double %1127, %1127
  %1129 = getelementptr inbounds %struct.CompAtom* %1123, i32 0, i32 0
  %1130 = getelementptr inbounds %class.Vector* %1129, i32 0, i32 1
  %1131 = load double* %1130, align 8
  %1132 = fsub double %306, %1131
  %1133 = fmul double %1132, %1132
  %1134 = fadd double %1128, %1133
  %1135 = getelementptr inbounds %struct.CompAtom* %1123, i32 0, i32 0
  %1136 = getelementptr inbounds %class.Vector* %1135, i32 0, i32 2
  %1137 = load double* %1136, align 8
  %1138 = fsub double %309, %1137
  %1139 = fmul double %1138, %1138
  %1140 = fadd double %1134, %1139
  %1141 = fptrunc double %1140 to float
  %1142 = bitcast %union.anon.80* %r2f64 to float*
  store float %1141, float* %1142, align 4
  %1143 = bitcast %union.anon.80* %r2f64 to i32*
  %1144 = load i32* %1143, align 4
  %1145 = ashr i32 %1144, 17
  %1146 = add nsw i32 %1145, %24
  %1147 = mul nsw i32 16, %1146
  %1148 = sext i32 %1147 to i64
  %1149 = getelementptr inbounds double* %14, i64 %1148
  %1150 = getelementptr inbounds double* %1149, i64 8
  %1151 = getelementptr inbounds double* %1150, i64 0
  %1152 = load double* %1151, align 8
  %1153 = bitcast %union.anon.80* %r2f64 to i32*
  %1154 = load i32* %1153, align 4
  %1155 = and i32 %1154, -131072
  store i32 %1155, i32* %1153, align 4
  %1156 = getelementptr inbounds %struct.CompAtom* %1123, i32 0, i32 1
  %1157 = load float* %1156, align 4
  %1158 = fpext float %1157 to double
  %1159 = fmul double %519, %1158
  %1160 = bitcast %union.anon.80* %r2f64 to float*
  %1161 = load float* %1160, align 4
  %1162 = fpext float %1161 to double
  %1163 = fsub double %1140, %1162
  %1164 = getelementptr inbounds %struct.CompAtom* %1123, i32 0, i32 2
  %1165 = load i32* %1164, align 4
  %1166 = lshr i32 %1165, 28
  %1167 = zext i32 %1166 to i64
  %1168 = getelementptr inbounds double* %513, i64 %1167
  %1169 = load double* %1168, align 8
  %1170 = getelementptr inbounds double* %1150, i64 1
  %1171 = load double* %1170, align 8
  %1172 = getelementptr inbounds double* %1150, i64 2
  %1173 = load double* %1172, align 8
  %1174 = getelementptr inbounds double* %1150, i64 3
  %1175 = load double* %1174, align 8
  %1176 = getelementptr inbounds double* %14, i64 12
  %1177 = mul nsw i32 16, %1146
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds double* %1176, i64 %1178
  %1180 = getelementptr inbounds double* %1179, i64 0
  %1181 = load double* %1180, align 8
  %1182 = fsub double %1152, %1181
  %1183 = getelementptr inbounds double* %1179, i64 1
  %1184 = load double* %1183, align 8
  %1185 = fsub double %1171, %1184
  %1186 = getelementptr inbounds double* %1179, i64 2
  %1187 = load double* %1186, align 8
  %1188 = fsub double %1173, %1187
  %1189 = getelementptr inbounds double* %1179, i64 3
  %1190 = load double* %1189, align 8
  %1191 = fsub double %1175, %1190
  %1192 = fmul double %1191, %1159
  %1193 = fmul double %1188, %1159
  %1194 = fmul double %1185, %1159
  %1195 = fmul double %1182, %1159
  %1196 = fmul double %1163, %1192
  %1197 = fadd double %1196, %1193
  %1198 = fmul double %1197, %1163
  %1199 = fadd double %1198, %1194
  %1200 = fmul double %1199, %1163
  %1201 = fadd double %1200, %1195
  %1202 = fmul double %1169, %1201
  %1203 = fadd double %fullElectEnergy.3, %1202
  %1204 = fmul double 3.000000e+00, %1163
  %1205 = fmul double %1204, %1192
  %1206 = fmul double 2.000000e+00, %1193
  %1207 = fadd double %1205, %1206
  %1208 = fmul double %1207, %1163
  %1209 = fadd double %1208, %1194
  %1210 = fmul double -2.000000e+00, %1209
  %1211 = fmul double %1210, %1169
  %1212 = sext i32 %1121 to i64
  %1213 = getelementptr inbounds %class.Vector* %269, i64 %1212
  %1214 = fmul double %1211, %1127
  %1215 = fmul double %1214, %1127
  %1216 = fadd double %fullElectVirial_xx.3, %1215
  %1217 = fmul double %1214, %1132
  %1218 = fadd double %fullElectVirial_xy.3, %1217
  %1219 = fmul double %1214, %1138
  %1220 = fadd double %fullElectVirial_xz.3, %1219
  %1221 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1222 = load double* %1221, align 8
  %1223 = fadd double %1222, %1214
  store double %1223, double* %1221, align 8
  %1224 = getelementptr inbounds %class.Vector* %1213, i32 0, i32 0
  %1225 = load double* %1224, align 8
  %1226 = fsub double %1225, %1214
  store double %1226, double* %1224, align 8
  %1227 = fmul double %1211, %1132
  %1228 = fmul double %1227, %1132
  %1229 = fadd double %fullElectVirial_yy.3, %1228
  %1230 = fmul double %1227, %1138
  %1231 = fadd double %fullElectVirial_yz.3, %1230
  %1232 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1233 = load double* %1232, align 8
  %1234 = fadd double %1233, %1227
  store double %1234, double* %1232, align 8
  %1235 = getelementptr inbounds %class.Vector* %1213, i32 0, i32 1
  %1236 = load double* %1235, align 8
  %1237 = fsub double %1236, %1227
  store double %1237, double* %1235, align 8
  %1238 = fmul double %1211, %1138
  %1239 = fmul double %1238, %1138
  %1240 = fadd double %fullElectVirial_zz.3, %1239
  %1241 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1242 = load double* %1241, align 8
  %1243 = fadd double %1242, %1238
  store double %1243, double* %1241, align 8
  %1244 = getelementptr inbounds %class.Vector* %1213, i32 0, i32 2
  %1245 = load double* %1244, align 8
  %1246 = fsub double %1245, %1238
  store double %1246, double* %1244, align 8
  br label %1247

; <label>:1247                                    ; preds = %1118
  %1248 = add nsw i32 %k18.3, 1
  br label %1116

; <label>:1249                                    ; preds = %1116
  br label %1250

; <label>:1250                                    ; preds = %1249, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1249 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1249 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1249 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1249 ], [ %491, %488 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %339 ], [ %fullElectVirial_zz.3, %1249 ], [ %fullElectVirial_zz.0, %488 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %339 ], [ %fullElectVirial_yz.3, %1249 ], [ %fullElectVirial_yz.0, %488 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %339 ], [ %fullElectVirial_yy.3, %1249 ], [ %fullElectVirial_yy.0, %488 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %339 ], [ %fullElectVirial_xz.3, %1249 ], [ %fullElectVirial_xz.0, %488 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %339 ], [ %fullElectVirial_xy.3, %1249 ], [ %fullElectVirial_xy.0, %488 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %339 ], [ %fullElectVirial_xx.3, %1249 ], [ %fullElectVirial_xx.0, %488 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %339 ], [ %fullElectEnergy.3, %1249 ], [ %fullElectEnergy.0, %488 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %339 ], [ %vdwEnergy.2, %1249 ], [ %vdwEnergy.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %721, %1249 ], [ %exclChecksum.0, %488 ]
  %1251 = add nsw i32 %i.2, 1
  br label %283

; <label>:1252                                    ; preds = %283
  %1253 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1254 = icmp ne i32* %50, %1253
  br i1 %1254, label %1255, label %1260

; <label>:1255                                    ; preds = %1252
  %1256 = icmp eq i32* %50, null
  br i1 %1256, label %1259, label %1257

; <label>:1257                                    ; preds = %1255
  %1258 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1258) #8
  br label %1259

; <label>:1259                                    ; preds = %1257, %1255
  br label %1260

; <label>:1260                                    ; preds = %1259, %1252
  %1261 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1262 = icmp ne i32* %64, %1261
  br i1 %1262, label %1263, label %1268

; <label>:1263                                    ; preds = %1260
  %1264 = icmp eq i32* %64, null
  br i1 %1264, label %1267, label %1265

; <label>:1265                                    ; preds = %1263
  %1266 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1266) #8
  br label %1267

; <label>:1267                                    ; preds = %1265, %1263
  br label %1268

; <label>:1268                                    ; preds = %1267, %1260
  %1269 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1270 = icmp ne i32* %78, %1269
  br i1 %1270, label %1271, label %1276

; <label>:1271                                    ; preds = %1268
  %1272 = icmp eq i32* %78, null
  br i1 %1272, label %1275, label %1273

; <label>:1273                                    ; preds = %1271
  %1274 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1274) #8
  br label %1275

; <label>:1275                                    ; preds = %1273, %1271
  br label %1276

; <label>:1276                                    ; preds = %1275, %1268
  %1277 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1278 = icmp ne i32* %207, %1277
  br i1 %1278, label %1279, label %1284

; <label>:1279                                    ; preds = %1276
  %1280 = icmp eq i32* %207, null
  br i1 %1280, label %1283, label %1281

; <label>:1281                                    ; preds = %1279
  %1282 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1282) #8
  br label %1283

; <label>:1283                                    ; preds = %1281, %1279
  br label %1284

; <label>:1284                                    ; preds = %1283, %1276
  %1285 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1286 = icmp ne i32* %221, %1285
  br i1 %1286, label %1287, label %1292

; <label>:1287                                    ; preds = %1284
  %1288 = icmp eq i32* %221, null
  br i1 %1288, label %1291, label %1289

; <label>:1289                                    ; preds = %1287
  %1290 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1290) #8
  br label %1291

; <label>:1291                                    ; preds = %1289, %1287
  br label %1292

; <label>:1292                                    ; preds = %1291, %1284
  %1293 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1294 = icmp ne i32* %235, %1293
  br i1 %1294, label %1295, label %1300

; <label>:1295                                    ; preds = %1292
  %1296 = icmp eq i32* %235, null
  br i1 %1296, label %1299, label %1297

; <label>:1297                                    ; preds = %1295
  %1298 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1298) #8
  br label %1299

; <label>:1299                                    ; preds = %1297, %1295
  br label %1300

; <label>:1300                                    ; preds = %1299, %1292
  %1301 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1302 = icmp ne i32* %249, %1301
  br i1 %1302, label %1303, label %1308

; <label>:1303                                    ; preds = %1300
  %1304 = icmp eq i32* %249, null
  br i1 %1304, label %1307, label %1305

; <label>:1305                                    ; preds = %1303
  %1306 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1306) #8
  br label %1307

; <label>:1307                                    ; preds = %1305, %1303
  br label %1308

; <label>:1308                                    ; preds = %1307, %1300
  %1309 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1310 = icmp ne i32* %263, %1309
  br i1 %1310, label %1311, label %1316

; <label>:1311                                    ; preds = %1308
  %1312 = icmp eq i32* %263, null
  br i1 %1312, label %1315, label %1313

; <label>:1313                                    ; preds = %1311
  %1314 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1314) #8
  br label %1315

; <label>:1315                                    ; preds = %1313, %1311
  br label %1316

; <label>:1316                                    ; preds = %1315, %1308
  %1317 = sitofp i32 %exclChecksum.0 to double
  %1318 = getelementptr inbounds double* %6, i64 22
  %1319 = load double* %1318, align 8
  %1320 = fadd double %1319, %1317
  store double %1320, double* %1318, align 8
  %1321 = getelementptr inbounds double* %6, i64 2
  %1322 = load double* %1321, align 8
  %1323 = fadd double %1322, %vdwEnergy.0
  store double %1323, double* %1321, align 8
  %1324 = getelementptr inbounds double* %6, i64 1
  %1325 = load double* %1324, align 8
  %1326 = fadd double %1325, %fullElectEnergy.0
  store double %1326, double* %1324, align 8
  %1327 = getelementptr inbounds double* %6, i64 12
  %1328 = load double* %1327, align 8
  %1329 = fadd double %1328, %fullElectVirial_xx.0
  store double %1329, double* %1327, align 8
  %1330 = getelementptr inbounds double* %6, i64 13
  %1331 = load double* %1330, align 8
  %1332 = fadd double %1331, %fullElectVirial_xy.0
  store double %1332, double* %1330, align 8
  %1333 = getelementptr inbounds double* %6, i64 14
  %1334 = load double* %1333, align 8
  %1335 = fadd double %1334, %fullElectVirial_xz.0
  store double %1335, double* %1333, align 8
  %1336 = getelementptr inbounds double* %6, i64 15
  %1337 = load double* %1336, align 8
  %1338 = fadd double %1337, %fullElectVirial_xy.0
  store double %1338, double* %1336, align 8
  %1339 = getelementptr inbounds double* %6, i64 16
  %1340 = load double* %1339, align 8
  %1341 = fadd double %1340, %fullElectVirial_yy.0
  store double %1341, double* %1339, align 8
  %1342 = getelementptr inbounds double* %6, i64 17
  %1343 = load double* %1342, align 8
  %1344 = fadd double %1343, %fullElectVirial_yz.0
  store double %1344, double* %1342, align 8
  %1345 = getelementptr inbounds double* %6, i64 18
  %1346 = load double* %1345, align 8
  %1347 = fadd double %1346, %fullElectVirial_xz.0
  store double %1347, double* %1345, align 8
  %1348 = getelementptr inbounds double* %6, i64 19
  %1349 = load double* %1348, align 8
  %1350 = fadd double %1349, %fullElectVirial_yz.0
  store double %1350, double* %1348, align 8
  %1351 = getelementptr inbounds double* %6, i64 20
  %1352 = load double* %1351, align 8
  %1353 = fadd double %1352, %fullElectVirial_zz.0
  store double %1353, double* %1351, align 8
  br label %1354

; <label>:1354                                    ; preds = %1316, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil29calc_self_merge_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.97, align 4
  %r2f28 = alloca %union.anon.98, align 4
  %r2f61 = alloca %union.anon.99, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1367

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1367

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1269, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1269 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1269 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1269 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1269 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1269 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1269 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1270, %1269 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_zz.4, %1269 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yz.4, %1269 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yy.4, %1269 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xz.4, %1269 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xy.4, %1269 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xx.4, %1269 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1269 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1271

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1269

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %533 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %534 = add nsw i32 %533, 1
  %535 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %536 = load i32* %535, align 4
  %537 = lshr i32 %536, 28
  %538 = mul nsw i32 %534, %537
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds double* %532, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %542 = load float* %541, align 4
  %543 = fpext float %542 to double
  %544 = fmul double 3.320636e+02, %543
  %545 = fmul double %544, %15
  %546 = fmul double %545, %9
  %547 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 4194303
  %550 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %549)
  %551 = zext i16 %550 to i32
  %552 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %551)
  %553 = icmp ne i32 %531, 0
  br i1 %553, label %554, label %616

; <label>:554                                     ; preds = %529
  br label %555

; <label>:555                                     ; preds = %613, %554
  %pli3.0 = phi i32* [ %202, %554 ], [ %pli3.2, %613 ]
  %plin.0 = phi i32* [ %216, %554 ], [ %plin.2, %613 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %554 ], [ %614, %613 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %554 ], [ %exclChecksum.3, %613 ]
  %556 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %556, label %557, label %615

; <label>:557                                     ; preds = %555
  %558 = sext i32 %k.0 to i64
  %559 = getelementptr inbounds i32* %188, i64 %558
  %560 = load i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %36, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 0
  %564 = getelementptr inbounds %class.Vector* %563, i32 0, i32 0
  %565 = load double* %564, align 8
  %566 = fsub double %287, %565
  %567 = fmul double %566, %566
  %568 = sext i32 %560 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %36, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 1
  %572 = load double* %571, align 8
  %573 = fsub double %290, %572
  %574 = fmul double %573, %573
  %575 = fadd double %567, %574
  %576 = sext i32 %560 to i64
  %577 = getelementptr inbounds %struct.CompAtom* %36, i64 %576
  %578 = getelementptr inbounds %struct.CompAtom* %577, i32 0, i32 0
  %579 = getelementptr inbounds %class.Vector* %578, i32 0, i32 2
  %580 = load double* %579, align 8
  %581 = fsub double %293, %580
  %582 = fmul double %581, %581
  %583 = fadd double %575, %582
  %584 = sext i32 %560 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %36, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 2
  %587 = load i32* %586, align 4
  %588 = lshr i32 %587, 26
  %589 = and i32 %588, 1
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %612, label %591

; <label>:591                                     ; preds = %557
  %592 = fcmp ole double %583, %7
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %591
  %594 = fcmp ole double %583, %21
  br i1 %594, label %595, label %598

; <label>:595                                     ; preds = %593
  %596 = add nsw i32 %exclChecksum.1, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %612, label %598

; <label>:598                                     ; preds = %595, %593
  %exclChecksum.2 = phi i32 [ %596, %595 ], [ %exclChecksum.1, %593 ]
  %599 = sext i32 %560 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %36, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  %604 = icmp sge i32 %603, %277
  br i1 %604, label %605, label %609

; <label>:605                                     ; preds = %598
  %606 = icmp sle i32 %603, %279
  br i1 %606, label %607, label %609

; <label>:607                                     ; preds = %605
  %608 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %560, i32* %pli3.0, align 4
  br label %611

; <label>:609                                     ; preds = %605, %598
  %610 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %560, i32* %plin.0, align 4
  br label %611

; <label>:611                                     ; preds = %609, %607
  %pli3.1 = phi i32* [ %608, %607 ], [ %pli3.0, %609 ]
  %plin.1 = phi i32* [ %plin.0, %607 ], [ %610, %609 ]
  br label %612

; <label>:612                                     ; preds = %611, %595, %591, %557
  %pli3.2 = phi i32* [ %pli3.0, %557 ], [ %pli3.0, %595 ], [ %pli3.1, %611 ], [ %pli3.0, %591 ]
  %plin.2 = phi i32* [ %plin.0, %557 ], [ %plin.0, %595 ], [ %plin.1, %611 ], [ %plin.0, %591 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %557 ], [ %596, %595 ], [ %exclChecksum.2, %611 ], [ %exclChecksum.1, %591 ]
  br label %613

; <label>:613                                     ; preds = %612
  %614 = add nsw i32 %k.0, 1
  br label %555

; <label>:615                                     ; preds = %555
  br label %695

; <label>:616                                     ; preds = %529
  %617 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %617, label %618, label %694

; <label>:618                                     ; preds = %616
  %619 = sext i32 %pairlistoffset.1 to i64
  %620 = getelementptr inbounds i32* %188, i64 %619
  %621 = load i32* %620, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %36, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = sext i32 %621 to i64
  %628 = getelementptr inbounds %struct.CompAtom* %36, i64 %627
  %629 = getelementptr inbounds %struct.CompAtom* %628, i32 0, i32 0
  %630 = getelementptr inbounds %class.Vector* %629, i32 0, i32 1
  %631 = load double* %630, align 8
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 2
  %636 = load double* %635, align 8
  %637 = sext i32 %621 to i64
  %638 = getelementptr inbounds %struct.CompAtom* %36, i64 %637
  %639 = getelementptr inbounds %struct.CompAtom* %638, i32 0, i32 2
  %640 = load i32* %639, align 4
  %641 = and i32 %640, 4194303
  br label %642

; <label>:642                                     ; preds = %687, %618
  %pli3.3 = phi i32* [ %202, %618 ], [ %pli3.5, %687 ]
  %plin.3 = phi i32* [ %216, %618 ], [ %plin.5, %687 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %618 ], [ %645, %687 ]
  %j210.0 = phi i32 [ %621, %618 ], [ %648, %687 ]
  %p_j_x11.0 = phi double [ %626, %618 ], [ %655, %687 ]
  %p_j_y12.0 = phi double [ %631, %618 ], [ %663, %687 ]
  %p_j_z13.0 = phi double [ %636, %618 ], [ %671, %687 ]
  %atom214.0 = phi i32 [ %641, %618 ], [ %692, %687 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %618 ], [ %exclChecksum.6, %687 ]
  %643 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %643, label %644, label %693

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %k9.0, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32* %188, i64 %646
  %648 = load i32* %647, align 4
  %649 = fsub double %287, %p_j_x11.0
  %650 = fmul double %649, %649
  %651 = sext i32 %648 to i64
  %652 = getelementptr inbounds %struct.CompAtom* %36, i64 %651
  %653 = getelementptr inbounds %struct.CompAtom* %652, i32 0, i32 0
  %654 = getelementptr inbounds %class.Vector* %653, i32 0, i32 0
  %655 = load double* %654, align 8
  %656 = fsub double %290, %p_j_y12.0
  %657 = fmul double %656, %656
  %658 = fadd double %650, %657
  %659 = sext i32 %648 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %36, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 0
  %662 = getelementptr inbounds %class.Vector* %661, i32 0, i32 1
  %663 = load double* %662, align 8
  %664 = fsub double %293, %p_j_z13.0
  %665 = fmul double %664, %664
  %666 = fadd double %658, %665
  %667 = sext i32 %648 to i64
  %668 = getelementptr inbounds %struct.CompAtom* %36, i64 %667
  %669 = getelementptr inbounds %struct.CompAtom* %668, i32 0, i32 0
  %670 = getelementptr inbounds %class.Vector* %669, i32 0, i32 2
  %671 = load double* %670, align 8
  %672 = fcmp ole double %666, %7
  br i1 %672, label %673, label %687

; <label>:673                                     ; preds = %644
  %674 = fcmp ole double %666, %21
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = add nsw i32 %exclChecksum.4, 1
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %687, label %678

; <label>:678                                     ; preds = %675, %673
  %exclChecksum.5 = phi i32 [ %676, %675 ], [ %exclChecksum.4, %673 ]
  %679 = icmp sge i32 %atom214.0, %277
  br i1 %679, label %680, label %684

; <label>:680                                     ; preds = %678
  %681 = icmp sle i32 %atom214.0, %279
  br i1 %681, label %682, label %684

; <label>:682                                     ; preds = %680
  %683 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %686

; <label>:684                                     ; preds = %680, %678
  %685 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %686

; <label>:686                                     ; preds = %684, %682
  %pli3.4 = phi i32* [ %683, %682 ], [ %pli3.3, %684 ]
  %plin.4 = phi i32* [ %plin.3, %682 ], [ %685, %684 ]
  br label %687

; <label>:687                                     ; preds = %686, %675, %644
  %pli3.5 = phi i32* [ %pli3.3, %675 ], [ %pli3.4, %686 ], [ %pli3.3, %644 ]
  %plin.5 = phi i32* [ %plin.3, %675 ], [ %plin.4, %686 ], [ %plin.3, %644 ]
  %exclChecksum.6 = phi i32 [ %676, %675 ], [ %exclChecksum.5, %686 ], [ %exclChecksum.4, %644 ]
  %688 = sext i32 %648 to i64
  %689 = getelementptr inbounds %struct.CompAtom* %36, i64 %688
  %690 = getelementptr inbounds %struct.CompAtom* %689, i32 0, i32 2
  %691 = load i32* %690, align 4
  %692 = and i32 %691, 4194303
  br label %642

; <label>:693                                     ; preds = %642
  br label %694

; <label>:694                                     ; preds = %693, %616
  %pli3.6 = phi i32* [ %pli3.3, %693 ], [ %202, %616 ]
  %plin.6 = phi i32* [ %plin.3, %693 ], [ %216, %616 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %693 ], [ %exclChecksum.0, %616 ]
  br label %695

; <label>:695                                     ; preds = %694, %615
  %pli3.7 = phi i32* [ %pli3.0, %615 ], [ %pli3.6, %694 ]
  %plin.7 = phi i32* [ %plin.0, %615 ], [ %plin.6, %694 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %615 ], [ %exclChecksum.7, %694 ]
  %696 = ptrtoint i32* %pli3.7 to i64
  %697 = ptrtoint i32* %202 to i64
  %698 = sub i64 %696, %697
  %699 = sdiv exact i64 %698, 4
  %700 = trunc i64 %699 to i32
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %709

; <label>:702                                     ; preds = %695
  %703 = sub nsw i32 %700, 1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i32* %202, i64 %704
  %706 = load i32* %705, align 4
  %707 = sext i32 %700 to i64
  %708 = getelementptr inbounds i32* %202, i64 %707
  store i32 %706, i32* %708, align 4
  br label %709

; <label>:709                                     ; preds = %702, %695
  br label %710

; <label>:710                                     ; preds = %721, %709
  %plix.0 = phi i32* [ %230, %709 ], [ %719, %721 ]
  %pln.0 = phi i32* [ %216, %709 ], [ %722, %721 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %709 ], [ %720, %721 ]
  %711 = icmp ult i32* %pln.0, %plin.7
  br i1 %711, label %712, label %715

; <label>:712                                     ; preds = %710
  %713 = load i32* %pln.0, align 4
  %714 = icmp slt i32 %713, %j_hgroup.2
  br label %715

; <label>:715                                     ; preds = %712, %710
  %716 = phi i1 [ false, %710 ], [ %714, %712 ]
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %715
  %718 = load i32* %pln.0, align 4
  %719 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %718, i32* %plix.0, align 4
  %720 = add nsw i32 %exclChecksum.9, -1
  br label %721

; <label>:721                                     ; preds = %717
  %722 = getelementptr inbounds i32* %pln.0, i32 1
  br label %710

; <label>:723                                     ; preds = %715
  br label %724

; <label>:724                                     ; preds = %739, %723
  %plix.1 = phi i32* [ %plix.0, %723 ], [ %737, %739 ]
  %k17.0 = phi i32 [ 0, %723 ], [ %740, %739 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %723 ], [ %738, %739 ]
  %725 = icmp slt i32 %k17.0, %700
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = sext i32 %k17.0 to i64
  %728 = getelementptr inbounds i32* %202, i64 %727
  %729 = load i32* %728, align 4
  %730 = icmp slt i32 %729, %j_hgroup.2
  br label %731

; <label>:731                                     ; preds = %726, %724
  %732 = phi i1 [ false, %724 ], [ %730, %726 ]
  br i1 %732, label %733, label %741

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %202, i64 %734
  %736 = load i32* %735, align 4
  %737 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %736, i32* %plix.1, align 4
  %738 = add nsw i32 %exclChecksum.10, -1
  br label %739

; <label>:739                                     ; preds = %733
  %740 = add nsw i32 %k17.0, 1
  br label %724

; <label>:741                                     ; preds = %731
  br label %742

; <label>:742                                     ; preds = %764, %741
  %plin.8 = phi i32* [ %plin.7, %741 ], [ %plin.9, %764 ]
  %plix.2 = phi i32* [ %plix.1, %741 ], [ %plix.3, %764 ]
  %plim.0 = phi i32* [ %244, %741 ], [ %plim.1, %764 ]
  %k17.1 = phi i32 [ %k17.0, %741 ], [ %765, %764 ]
  %743 = icmp slt i32 %k17.1, %700
  br i1 %743, label %744, label %766

; <label>:744                                     ; preds = %742
  %745 = sext i32 %k17.1 to i64
  %746 = getelementptr inbounds i32* %202, i64 %745
  %747 = load i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CompAtom* %36, i64 %748
  %750 = getelementptr inbounds %struct.CompAtom* %749, i32 0, i32 2
  %751 = load i32* %750, align 4
  %752 = and i32 %751, 4194303
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8* %284, i64 %753
  %755 = load i8* %754, align 1
  %756 = sext i8 %755 to i32
  switch i32 %756, label %763 [
    i32 0, label %757
    i32 1, label %759
    i32 2, label %761
  ]

; <label>:757                                     ; preds = %744
  %758 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %747, i32* %plin.8, align 4
  br label %763

; <label>:759                                     ; preds = %744
  %760 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %747, i32* %plix.2, align 4
  br label %763

; <label>:761                                     ; preds = %744
  %762 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %747, i32* %plim.0, align 4
  br label %763

; <label>:763                                     ; preds = %761, %759, %757, %744
  %plin.9 = phi i32* [ %plin.8, %744 ], [ %plin.8, %761 ], [ %plin.8, %759 ], [ %758, %757 ]
  %plix.3 = phi i32* [ %plix.2, %744 ], [ %plix.2, %761 ], [ %760, %759 ], [ %plix.2, %757 ]
  %plim.1 = phi i32* [ %plim.0, %744 ], [ %762, %761 ], [ %plim.0, %759 ], [ %plim.0, %757 ]
  br label %764

; <label>:764                                     ; preds = %763
  %765 = add nsw i32 %k17.1, 1
  br label %742

; <label>:766                                     ; preds = %742
  %767 = ptrtoint i32* %plix.2 to i64
  %768 = ptrtoint i32* %230 to i64
  %769 = sub i64 %767, %768
  %770 = sdiv exact i64 %769, 4
  %771 = sext i32 %exclChecksum.10 to i64
  %772 = add nsw i64 %771, %770
  %773 = trunc i64 %772 to i32
  %774 = ptrtoint i32* %plim.0 to i64
  %775 = ptrtoint i32* %244 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %773 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plin.8 to i64
  %782 = ptrtoint i32* %pln.0 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = trunc i64 %784 to i32
  br label %786

; <label>:786                                     ; preds = %946, %766
  %k17.2 = phi i32 [ 0, %766 ], [ %947, %946 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %766 ], [ %939, %946 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %766 ], [ %930, %946 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %766 ], [ %928, %946 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %766 ], [ %919, %946 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %766 ], [ %917, %946 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %766 ], [ %915, %946 ]
  %787 = icmp slt i32 %k17.2, %785
  br i1 %787, label %788, label %948

; <label>:788                                     ; preds = %786
  %789 = sext i32 %k17.2 to i64
  %790 = getelementptr inbounds i32* %pln.0, i64 %789
  %791 = load i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds %struct.CompAtom* %36, i64 %792
  %794 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 0
  %796 = load double* %795, align 8
  %797 = fsub double %287, %796
  %798 = fmul double %797, %797
  %799 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %800 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %801 = load double* %800, align 8
  %802 = fsub double %290, %801
  %803 = fmul double %802, %802
  %804 = fadd double %798, %803
  %805 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %806 = getelementptr inbounds %class.Vector* %805, i32 0, i32 2
  %807 = load double* %806, align 8
  %808 = fsub double %293, %807
  %809 = fmul double %808, %808
  %810 = fadd double %804, %809
  %811 = fptrunc double %810 to float
  %812 = bitcast %union.anon.97* %r2f to float*
  store float %811, float* %812, align 4
  %813 = bitcast %union.anon.97* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = ashr i32 %814, 17
  %816 = add nsw i32 %815, %24
  %817 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %818 = load i32* %817, align 4
  %819 = and i32 %818, 4194303
  %820 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %819)
  %821 = zext i16 %820 to i32
  %822 = mul nsw i32 2, %821
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %823
  %825 = mul nsw i32 16, %816
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds double* %14, i64 %826
  %828 = getelementptr inbounds double* %827, i64 0
  %829 = load double* %828, align 8
  %830 = mul nsw i32 16, %816
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double* %14, i64 %831
  %833 = getelementptr inbounds double* %832, i64 4
  %834 = getelementptr inbounds double* %833, i64 0
  %835 = load double* %834, align 8
  %836 = mul nsw i32 16, %816
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds double* %14, i64 %837
  %839 = getelementptr inbounds double* %838, i64 8
  %840 = getelementptr inbounds double* %839, i64 0
  %841 = load double* %840, align 8
  %842 = bitcast %union.anon.97* %r2f to i32*
  %843 = load i32* %842, align 4
  %844 = and i32 %843, -131072
  store i32 %844, i32* %842, align 4
  %845 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 1
  %846 = load float* %845, align 4
  %847 = fpext float %846 to double
  %848 = fmul double %546, %847
  %849 = bitcast %union.anon.97* %r2f to float*
  %850 = load float* %849, align 4
  %851 = fpext float %850 to double
  %852 = fsub double %810, %851
  %853 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %854 = load i32* %853, align 4
  %855 = lshr i32 %854, 28
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds double* %540, i64 %856
  %858 = load double* %857, align 8
  %859 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 0
  %860 = load double* %859, align 8
  %861 = fmul double %15, %860
  %862 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 1
  %863 = load double* %862, align 8
  %864 = fmul double %15, %863
  %865 = fmul double %861, %829
  %866 = fmul double %864, %835
  %867 = fsub double %865, %866
  %868 = getelementptr inbounds double* %827, i64 3
  %869 = load double* %868, align 8
  %870 = fmul double %861, %869
  %871 = getelementptr inbounds double* %833, i64 3
  %872 = load double* %871, align 8
  %873 = fmul double %864, %872
  %874 = fsub double %870, %873
  %875 = getelementptr inbounds double* %827, i64 2
  %876 = load double* %875, align 8
  %877 = fmul double %861, %876
  %878 = getelementptr inbounds double* %833, i64 2
  %879 = load double* %878, align 8
  %880 = fmul double %864, %879
  %881 = fsub double %877, %880
  %882 = getelementptr inbounds double* %827, i64 1
  %883 = load double* %882, align 8
  %884 = fmul double %861, %883
  %885 = getelementptr inbounds double* %833, i64 1
  %886 = load double* %885, align 8
  %887 = fmul double %864, %886
  %888 = fsub double %884, %887
  %889 = getelementptr inbounds double* %839, i64 1
  %890 = load double* %889, align 8
  %891 = getelementptr inbounds double* %839, i64 2
  %892 = load double* %891, align 8
  %893 = getelementptr inbounds double* %839, i64 3
  %894 = load double* %893, align 8
  %895 = fmul double %894, %848
  %896 = fmul double %892, %848
  %897 = fmul double %890, %848
  %898 = fmul double %841, %848
  %899 = fadd double %895, %874
  %900 = fadd double %896, %881
  %901 = fadd double %897, %888
  %902 = fadd double %898, %867
  %903 = fmul double 3.000000e+00, %852
  %904 = fmul double %903, %899
  %905 = fmul double 2.000000e+00, %900
  %906 = fadd double %904, %905
  %907 = fmul double %906, %852
  %908 = fadd double %907, %901
  %909 = fmul double -2.000000e+00, %908
  %910 = fmul double %909, %858
  %911 = sext i32 %791 to i64
  %912 = getelementptr inbounds %class.Vector* %250, i64 %911
  %913 = fmul double %910, %797
  %914 = fmul double %913, %797
  %915 = fadd double %fullElectVirial_xx.1, %914
  %916 = fmul double %913, %802
  %917 = fadd double %fullElectVirial_xy.1, %916
  %918 = fmul double %913, %808
  %919 = fadd double %fullElectVirial_xz.1, %918
  %920 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %921 = load double* %920, align 8
  %922 = fadd double %921, %913
  store double %922, double* %920, align 8
  %923 = getelementptr inbounds %class.Vector* %912, i32 0, i32 0
  %924 = load double* %923, align 8
  %925 = fsub double %924, %913
  store double %925, double* %923, align 8
  %926 = fmul double %910, %802
  %927 = fmul double %926, %802
  %928 = fadd double %fullElectVirial_yy.1, %927
  %929 = fmul double %926, %808
  %930 = fadd double %fullElectVirial_yz.1, %929
  %931 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %932 = load double* %931, align 8
  %933 = fadd double %932, %926
  store double %933, double* %931, align 8
  %934 = getelementptr inbounds %class.Vector* %912, i32 0, i32 1
  %935 = load double* %934, align 8
  %936 = fsub double %935, %926
  store double %936, double* %934, align 8
  %937 = fmul double %910, %808
  %938 = fmul double %937, %808
  %939 = fadd double %fullElectVirial_zz.1, %938
  %940 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %941 = load double* %940, align 8
  %942 = fadd double %941, %937
  store double %942, double* %940, align 8
  %943 = getelementptr inbounds %class.Vector* %912, i32 0, i32 2
  %944 = load double* %943, align 8
  %945 = fsub double %944, %937
  store double %945, double* %943, align 8
  br label %946

; <label>:946                                     ; preds = %788
  %947 = add nsw i32 %k17.2, 1
  br label %786

; <label>:948                                     ; preds = %786
  %949 = ptrtoint i32* %plim.0 to i64
  %950 = ptrtoint i32* %244 to i64
  %951 = sub i64 %949, %950
  %952 = sdiv exact i64 %951, 4
  %953 = trunc i64 %952 to i32
  br label %954

; <label>:954                                     ; preds = %1135, %948
  %k17.3 = phi i32 [ 0, %948 ], [ %1136, %1135 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %948 ], [ %1128, %1135 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %948 ], [ %1119, %1135 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %948 ], [ %1117, %1135 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %948 ], [ %1108, %1135 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %948 ], [ %1106, %1135 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %948 ], [ %1104, %1135 ]
  %955 = icmp slt i32 %k17.3, %953
  br i1 %955, label %956, label %1137

; <label>:956                                     ; preds = %954
  %957 = sext i32 %k17.3 to i64
  %958 = getelementptr inbounds i32* %244, i64 %957
  %959 = load i32* %958, align 4
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds %struct.CompAtom* %36, i64 %960
  %962 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 0
  %963 = getelementptr inbounds %class.Vector* %962, i32 0, i32 0
  %964 = load double* %963, align 8
  %965 = fsub double %287, %964
  %966 = fmul double %965, %965
  %967 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 0
  %968 = getelementptr inbounds %class.Vector* %967, i32 0, i32 1
  %969 = load double* %968, align 8
  %970 = fsub double %290, %969
  %971 = fmul double %970, %970
  %972 = fadd double %966, %971
  %973 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 0
  %974 = getelementptr inbounds %class.Vector* %973, i32 0, i32 2
  %975 = load double* %974, align 8
  %976 = fsub double %293, %975
  %977 = fmul double %976, %976
  %978 = fadd double %972, %977
  %979 = fptrunc double %978 to float
  %980 = bitcast %union.anon.98* %r2f28 to float*
  store float %979, float* %980, align 4
  %981 = bitcast %union.anon.98* %r2f28 to i32*
  %982 = load i32* %981, align 4
  %983 = ashr i32 %982, 17
  %984 = add nsw i32 %983, %24
  %985 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 2
  %986 = load i32* %985, align 4
  %987 = and i32 %986, 4194303
  %988 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %987)
  %989 = zext i16 %988 to i32
  %990 = mul nsw i32 2, %989
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %991
  %993 = getelementptr inbounds %"struct.LJTable::TableEntry"* %992, i64 1
  %994 = mul nsw i32 16, %984
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds double* %14, i64 %995
  %997 = getelementptr inbounds double* %996, i64 0
  %998 = load double* %997, align 8
  %999 = mul nsw i32 16, %984
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds double* %14, i64 %1000
  %1002 = getelementptr inbounds double* %1001, i64 4
  %1003 = getelementptr inbounds double* %1002, i64 0
  %1004 = load double* %1003, align 8
  %1005 = mul nsw i32 16, %984
  %1006 = sext i32 %1005 to i64
  %1007 = getelementptr inbounds double* %14, i64 %1006
  %1008 = getelementptr inbounds double* %1007, i64 8
  %1009 = getelementptr inbounds double* %1008, i64 0
  %1010 = load double* %1009, align 8
  %1011 = bitcast %union.anon.98* %r2f28 to i32*
  %1012 = load i32* %1011, align 4
  %1013 = and i32 %1012, -131072
  store i32 %1013, i32* %1011, align 4
  %1014 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 1
  %1015 = load float* %1014, align 4
  %1016 = fpext float %1015 to double
  %1017 = fmul double %546, %1016
  %1018 = bitcast %union.anon.98* %r2f28 to float*
  %1019 = load float* %1018, align 4
  %1020 = fpext float %1019 to double
  %1021 = fsub double %978, %1020
  %1022 = getelementptr inbounds %struct.CompAtom* %961, i32 0, i32 2
  %1023 = load i32* %1022, align 4
  %1024 = lshr i32 %1023, 28
  %1025 = zext i32 %1024 to i64
  %1026 = getelementptr inbounds double* %540, i64 %1025
  %1027 = load double* %1026, align 8
  %1028 = getelementptr inbounds %"struct.LJTable::TableEntry"* %993, i32 0, i32 0
  %1029 = load double* %1028, align 8
  %1030 = fmul double %15, %1029
  %1031 = getelementptr inbounds %"struct.LJTable::TableEntry"* %993, i32 0, i32 1
  %1032 = load double* %1031, align 8
  %1033 = fmul double %15, %1032
  %1034 = fmul double %1030, %998
  %1035 = fmul double %1033, %1004
  %1036 = fsub double %1034, %1035
  %1037 = getelementptr inbounds double* %996, i64 3
  %1038 = load double* %1037, align 8
  %1039 = fmul double %1030, %1038
  %1040 = getelementptr inbounds double* %1002, i64 3
  %1041 = load double* %1040, align 8
  %1042 = fmul double %1033, %1041
  %1043 = fsub double %1039, %1042
  %1044 = getelementptr inbounds double* %996, i64 2
  %1045 = load double* %1044, align 8
  %1046 = fmul double %1030, %1045
  %1047 = getelementptr inbounds double* %1002, i64 2
  %1048 = load double* %1047, align 8
  %1049 = fmul double %1033, %1048
  %1050 = fsub double %1046, %1049
  %1051 = getelementptr inbounds double* %996, i64 1
  %1052 = load double* %1051, align 8
  %1053 = fmul double %1030, %1052
  %1054 = getelementptr inbounds double* %1002, i64 1
  %1055 = load double* %1054, align 8
  %1056 = fmul double %1033, %1055
  %1057 = fsub double %1053, %1056
  %1058 = getelementptr inbounds double* %1008, i64 1
  %1059 = load double* %1058, align 8
  %1060 = getelementptr inbounds double* %1008, i64 2
  %1061 = load double* %1060, align 8
  %1062 = getelementptr inbounds double* %1008, i64 3
  %1063 = load double* %1062, align 8
  %1064 = getelementptr inbounds double* %14, i64 12
  %1065 = mul nsw i32 16, %984
  %1066 = sext i32 %1065 to i64
  %1067 = getelementptr inbounds double* %1064, i64 %1066
  %1068 = getelementptr inbounds double* %1067, i64 0
  %1069 = load double* %1068, align 8
  %1070 = fmul double %17, %1069
  %1071 = fsub double %1010, %1070
  %1072 = getelementptr inbounds double* %1067, i64 1
  %1073 = load double* %1072, align 8
  %1074 = fmul double %17, %1073
  %1075 = fsub double %1059, %1074
  %1076 = getelementptr inbounds double* %1067, i64 2
  %1077 = load double* %1076, align 8
  %1078 = fmul double %17, %1077
  %1079 = fsub double %1061, %1078
  %1080 = getelementptr inbounds double* %1067, i64 3
  %1081 = load double* %1080, align 8
  %1082 = fmul double %17, %1081
  %1083 = fsub double %1063, %1082
  %1084 = fmul double %1083, %1017
  %1085 = fmul double %1079, %1017
  %1086 = fmul double %1075, %1017
  %1087 = fmul double %1071, %1017
  %1088 = fadd double %1084, %1043
  %1089 = fadd double %1085, %1050
  %1090 = fadd double %1086, %1057
  %1091 = fadd double %1087, %1036
  %1092 = fmul double 3.000000e+00, %1021
  %1093 = fmul double %1092, %1088
  %1094 = fmul double 2.000000e+00, %1089
  %1095 = fadd double %1093, %1094
  %1096 = fmul double %1095, %1021
  %1097 = fadd double %1096, %1090
  %1098 = fmul double -2.000000e+00, %1097
  %1099 = fmul double %1098, %1027
  %1100 = sext i32 %959 to i64
  %1101 = getelementptr inbounds %class.Vector* %250, i64 %1100
  %1102 = fmul double %1099, %965
  %1103 = fmul double %1102, %965
  %1104 = fadd double %fullElectVirial_xx.2, %1103
  %1105 = fmul double %1102, %970
  %1106 = fadd double %fullElectVirial_xy.2, %1105
  %1107 = fmul double %1102, %976
  %1108 = fadd double %fullElectVirial_xz.2, %1107
  %1109 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1110 = load double* %1109, align 8
  %1111 = fadd double %1110, %1102
  store double %1111, double* %1109, align 8
  %1112 = getelementptr inbounds %class.Vector* %1101, i32 0, i32 0
  %1113 = load double* %1112, align 8
  %1114 = fsub double %1113, %1102
  store double %1114, double* %1112, align 8
  %1115 = fmul double %1099, %970
  %1116 = fmul double %1115, %970
  %1117 = fadd double %fullElectVirial_yy.2, %1116
  %1118 = fmul double %1115, %976
  %1119 = fadd double %fullElectVirial_yz.2, %1118
  %1120 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1121 = load double* %1120, align 8
  %1122 = fadd double %1121, %1115
  store double %1122, double* %1120, align 8
  %1123 = getelementptr inbounds %class.Vector* %1101, i32 0, i32 1
  %1124 = load double* %1123, align 8
  %1125 = fsub double %1124, %1115
  store double %1125, double* %1123, align 8
  %1126 = fmul double %1099, %976
  %1127 = fmul double %1126, %976
  %1128 = fadd double %fullElectVirial_zz.2, %1127
  %1129 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1130 = load double* %1129, align 8
  %1131 = fadd double %1130, %1126
  store double %1131, double* %1129, align 8
  %1132 = getelementptr inbounds %class.Vector* %1101, i32 0, i32 2
  %1133 = load double* %1132, align 8
  %1134 = fsub double %1133, %1126
  store double %1134, double* %1132, align 8
  br label %1135

; <label>:1135                                    ; preds = %956
  %1136 = add nsw i32 %k17.3, 1
  br label %954

; <label>:1137                                    ; preds = %954
  %1138 = ptrtoint i32* %plix.2 to i64
  %1139 = ptrtoint i32* %230 to i64
  %1140 = sub i64 %1138, %1139
  %1141 = sdiv exact i64 %1140, 4
  %1142 = trunc i64 %1141 to i32
  br label %1143

; <label>:1143                                    ; preds = %1266, %1137
  %k17.4 = phi i32 [ 0, %1137 ], [ %1267, %1266 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1137 ], [ %1259, %1266 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1137 ], [ %1250, %1266 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1137 ], [ %1248, %1266 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1137 ], [ %1239, %1266 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1137 ], [ %1237, %1266 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1137 ], [ %1235, %1266 ]
  %1144 = icmp slt i32 %k17.4, %1142
  br i1 %1144, label %1145, label %1268

; <label>:1145                                    ; preds = %1143
  %1146 = sext i32 %k17.4 to i64
  %1147 = getelementptr inbounds i32* %230, i64 %1146
  %1148 = load i32* %1147, align 4
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds %struct.CompAtom* %36, i64 %1149
  %1151 = getelementptr inbounds %struct.CompAtom* %1150, i32 0, i32 0
  %1152 = getelementptr inbounds %class.Vector* %1151, i32 0, i32 0
  %1153 = load double* %1152, align 8
  %1154 = fsub double %287, %1153
  %1155 = fmul double %1154, %1154
  %1156 = getelementptr inbounds %struct.CompAtom* %1150, i32 0, i32 0
  %1157 = getelementptr inbounds %class.Vector* %1156, i32 0, i32 1
  %1158 = load double* %1157, align 8
  %1159 = fsub double %290, %1158
  %1160 = fmul double %1159, %1159
  %1161 = fadd double %1155, %1160
  %1162 = getelementptr inbounds %struct.CompAtom* %1150, i32 0, i32 0
  %1163 = getelementptr inbounds %class.Vector* %1162, i32 0, i32 2
  %1164 = load double* %1163, align 8
  %1165 = fsub double %293, %1164
  %1166 = fmul double %1165, %1165
  %1167 = fadd double %1161, %1166
  %1168 = fptrunc double %1167 to float
  %1169 = bitcast %union.anon.99* %r2f61 to float*
  store float %1168, float* %1169, align 4
  %1170 = bitcast %union.anon.99* %r2f61 to i32*
  %1171 = load i32* %1170, align 4
  %1172 = ashr i32 %1171, 17
  %1173 = add nsw i32 %1172, %24
  %1174 = mul nsw i32 16, %1173
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds double* %14, i64 %1175
  %1177 = getelementptr inbounds double* %1176, i64 8
  %1178 = getelementptr inbounds double* %1177, i64 0
  %1179 = load double* %1178, align 8
  %1180 = bitcast %union.anon.99* %r2f61 to i32*
  %1181 = load i32* %1180, align 4
  %1182 = and i32 %1181, -131072
  store i32 %1182, i32* %1180, align 4
  %1183 = getelementptr inbounds %struct.CompAtom* %1150, i32 0, i32 1
  %1184 = load float* %1183, align 4
  %1185 = fpext float %1184 to double
  %1186 = fmul double %546, %1185
  %1187 = bitcast %union.anon.99* %r2f61 to float*
  %1188 = load float* %1187, align 4
  %1189 = fpext float %1188 to double
  %1190 = fsub double %1167, %1189
  %1191 = getelementptr inbounds %struct.CompAtom* %1150, i32 0, i32 2
  %1192 = load i32* %1191, align 4
  %1193 = lshr i32 %1192, 28
  %1194 = zext i32 %1193 to i64
  %1195 = getelementptr inbounds double* %540, i64 %1194
  %1196 = load double* %1195, align 8
  %1197 = getelementptr inbounds double* %1177, i64 1
  %1198 = load double* %1197, align 8
  %1199 = getelementptr inbounds double* %1177, i64 2
  %1200 = load double* %1199, align 8
  %1201 = getelementptr inbounds double* %1177, i64 3
  %1202 = load double* %1201, align 8
  %1203 = getelementptr inbounds double* %14, i64 12
  %1204 = mul nsw i32 16, %1173
  %1205 = sext i32 %1204 to i64
  %1206 = getelementptr inbounds double* %1203, i64 %1205
  %1207 = getelementptr inbounds double* %1206, i64 0
  %1208 = load double* %1207, align 8
  %1209 = fsub double %1179, %1208
  %1210 = getelementptr inbounds double* %1206, i64 1
  %1211 = load double* %1210, align 8
  %1212 = fsub double %1198, %1211
  %1213 = getelementptr inbounds double* %1206, i64 2
  %1214 = load double* %1213, align 8
  %1215 = fsub double %1200, %1214
  %1216 = getelementptr inbounds double* %1206, i64 3
  %1217 = load double* %1216, align 8
  %1218 = fsub double %1202, %1217
  %1219 = fmul double %1218, %1186
  %1220 = fmul double %1215, %1186
  %1221 = fmul double %1212, %1186
  %1222 = fmul double %1209, %1186
  %1223 = fmul double 3.000000e+00, %1190
  %1224 = fmul double %1223, %1219
  %1225 = fmul double 2.000000e+00, %1220
  %1226 = fadd double %1224, %1225
  %1227 = fmul double %1226, %1190
  %1228 = fadd double %1227, %1221
  %1229 = fmul double -2.000000e+00, %1228
  %1230 = fmul double %1229, %1196
  %1231 = sext i32 %1148 to i64
  %1232 = getelementptr inbounds %class.Vector* %250, i64 %1231
  %1233 = fmul double %1230, %1154
  %1234 = fmul double %1233, %1154
  %1235 = fadd double %fullElectVirial_xx.3, %1234
  %1236 = fmul double %1233, %1159
  %1237 = fadd double %fullElectVirial_xy.3, %1236
  %1238 = fmul double %1233, %1165
  %1239 = fadd double %fullElectVirial_xz.3, %1238
  %1240 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1241 = load double* %1240, align 8
  %1242 = fadd double %1241, %1233
  store double %1242, double* %1240, align 8
  %1243 = getelementptr inbounds %class.Vector* %1232, i32 0, i32 0
  %1244 = load double* %1243, align 8
  %1245 = fsub double %1244, %1233
  store double %1245, double* %1243, align 8
  %1246 = fmul double %1230, %1159
  %1247 = fmul double %1246, %1159
  %1248 = fadd double %fullElectVirial_yy.3, %1247
  %1249 = fmul double %1246, %1165
  %1250 = fadd double %fullElectVirial_yz.3, %1249
  %1251 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1252 = load double* %1251, align 8
  %1253 = fadd double %1252, %1246
  store double %1253, double* %1251, align 8
  %1254 = getelementptr inbounds %class.Vector* %1232, i32 0, i32 1
  %1255 = load double* %1254, align 8
  %1256 = fsub double %1255, %1246
  store double %1256, double* %1254, align 8
  %1257 = fmul double %1230, %1165
  %1258 = fmul double %1257, %1165
  %1259 = fadd double %fullElectVirial_zz.3, %1258
  %1260 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1261 = load double* %1260, align 8
  %1262 = fadd double %1261, %1257
  store double %1262, double* %1260, align 8
  %1263 = getelementptr inbounds %class.Vector* %1232, i32 0, i32 2
  %1264 = load double* %1263, align 8
  %1265 = fsub double %1264, %1257
  store double %1265, double* %1263, align 8
  br label %1266

; <label>:1266                                    ; preds = %1145
  %1267 = add nsw i32 %k17.4, 1
  br label %1143

; <label>:1268                                    ; preds = %1143
  br label %1269

; <label>:1269                                    ; preds = %1268, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1268 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1268 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1268 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1268 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1268 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1268 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1268 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %329 ], [ %fullElectVirial_zz.3, %1268 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %329 ], [ %fullElectVirial_yz.3, %1268 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %329 ], [ %fullElectVirial_yy.3, %1268 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %329 ], [ %fullElectVirial_xz.3, %1268 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %329 ], [ %fullElectVirial_xy.3, %1268 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %329 ], [ %fullElectVirial_xx.3, %1268 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %780, %1268 ]
  %1270 = add nsw i32 %i.1, 1
  br label %266

; <label>:1271                                    ; preds = %266
  %1272 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1273 = icmp ne i32* %50, %1272
  br i1 %1273, label %1274, label %1279

; <label>:1274                                    ; preds = %1271
  %1275 = icmp eq i32* %50, null
  br i1 %1275, label %1278, label %1276

; <label>:1276                                    ; preds = %1274
  %1277 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1277) #8
  br label %1278

; <label>:1278                                    ; preds = %1276, %1274
  br label %1279

; <label>:1279                                    ; preds = %1278, %1271
  %1280 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1281 = icmp ne i32* %64, %1280
  br i1 %1281, label %1282, label %1287

; <label>:1282                                    ; preds = %1279
  %1283 = icmp eq i32* %64, null
  br i1 %1283, label %1286, label %1284

; <label>:1284                                    ; preds = %1282
  %1285 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1285) #8
  br label %1286

; <label>:1286                                    ; preds = %1284, %1282
  br label %1287

; <label>:1287                                    ; preds = %1286, %1279
  %1288 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1289 = icmp ne i32* %78, %1288
  br i1 %1289, label %1290, label %1295

; <label>:1290                                    ; preds = %1287
  %1291 = icmp eq i32* %78, null
  br i1 %1291, label %1294, label %1292

; <label>:1292                                    ; preds = %1290
  %1293 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1293) #8
  br label %1294

; <label>:1294                                    ; preds = %1292, %1290
  br label %1295

; <label>:1295                                    ; preds = %1294, %1287
  %1296 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1297 = icmp ne i32* %188, %1296
  br i1 %1297, label %1298, label %1303

; <label>:1298                                    ; preds = %1295
  %1299 = icmp eq i32* %188, null
  br i1 %1299, label %1302, label %1300

; <label>:1300                                    ; preds = %1298
  %1301 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1301) #8
  br label %1302

; <label>:1302                                    ; preds = %1300, %1298
  br label %1303

; <label>:1303                                    ; preds = %1302, %1295
  %1304 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1305 = icmp ne i32* %202, %1304
  br i1 %1305, label %1306, label %1311

; <label>:1306                                    ; preds = %1303
  %1307 = icmp eq i32* %202, null
  br i1 %1307, label %1310, label %1308

; <label>:1308                                    ; preds = %1306
  %1309 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1309) #8
  br label %1310

; <label>:1310                                    ; preds = %1308, %1306
  br label %1311

; <label>:1311                                    ; preds = %1310, %1303
  %1312 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1313 = icmp ne i32* %216, %1312
  br i1 %1313, label %1314, label %1319

; <label>:1314                                    ; preds = %1311
  %1315 = icmp eq i32* %216, null
  br i1 %1315, label %1318, label %1316

; <label>:1316                                    ; preds = %1314
  %1317 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1317) #8
  br label %1318

; <label>:1318                                    ; preds = %1316, %1314
  br label %1319

; <label>:1319                                    ; preds = %1318, %1311
  %1320 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1321 = icmp ne i32* %230, %1320
  br i1 %1321, label %1322, label %1327

; <label>:1322                                    ; preds = %1319
  %1323 = icmp eq i32* %230, null
  br i1 %1323, label %1326, label %1324

; <label>:1324                                    ; preds = %1322
  %1325 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1325) #8
  br label %1326

; <label>:1326                                    ; preds = %1324, %1322
  br label %1327

; <label>:1327                                    ; preds = %1326, %1319
  %1328 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1329 = icmp ne i32* %244, %1328
  br i1 %1329, label %1330, label %1335

; <label>:1330                                    ; preds = %1327
  %1331 = icmp eq i32* %244, null
  br i1 %1331, label %1334, label %1332

; <label>:1332                                    ; preds = %1330
  %1333 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1333) #8
  br label %1334

; <label>:1334                                    ; preds = %1332, %1330
  br label %1335

; <label>:1335                                    ; preds = %1334, %1327
  %1336 = sitofp i32 %exclChecksum.0 to double
  %1337 = getelementptr inbounds double* %6, i64 22
  %1338 = load double* %1337, align 8
  %1339 = fadd double %1338, %1336
  store double %1339, double* %1337, align 8
  %1340 = getelementptr inbounds double* %6, i64 12
  %1341 = load double* %1340, align 8
  %1342 = fadd double %1341, %fullElectVirial_xx.0
  store double %1342, double* %1340, align 8
  %1343 = getelementptr inbounds double* %6, i64 13
  %1344 = load double* %1343, align 8
  %1345 = fadd double %1344, %fullElectVirial_xy.0
  store double %1345, double* %1343, align 8
  %1346 = getelementptr inbounds double* %6, i64 14
  %1347 = load double* %1346, align 8
  %1348 = fadd double %1347, %fullElectVirial_xz.0
  store double %1348, double* %1346, align 8
  %1349 = getelementptr inbounds double* %6, i64 15
  %1350 = load double* %1349, align 8
  %1351 = fadd double %1350, %fullElectVirial_xy.0
  store double %1351, double* %1349, align 8
  %1352 = getelementptr inbounds double* %6, i64 16
  %1353 = load double* %1352, align 8
  %1354 = fadd double %1353, %fullElectVirial_yy.0
  store double %1354, double* %1352, align 8
  %1355 = getelementptr inbounds double* %6, i64 17
  %1356 = load double* %1355, align 8
  %1357 = fadd double %1356, %fullElectVirial_yz.0
  store double %1357, double* %1355, align 8
  %1358 = getelementptr inbounds double* %6, i64 18
  %1359 = load double* %1358, align 8
  %1360 = fadd double %1359, %fullElectVirial_xz.0
  store double %1360, double* %1358, align 8
  %1361 = getelementptr inbounds double* %6, i64 19
  %1362 = load double* %1361, align 8
  %1363 = fadd double %1362, %fullElectVirial_yz.0
  store double %1363, double* %1361, align 8
  %1364 = getelementptr inbounds double* %6, i64 20
  %1365 = load double* %1364, align 8
  %1366 = fadd double %1365, %fullElectVirial_zz.0
  store double %1366, double* %1364, align 8
  br label %1367

; <label>:1367                                    ; preds = %1335, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil36calc_self_energy_merge_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.100, align 4
  %r2f28 = alloca %union.anon.101, align 4
  %r2f63 = alloca %union.anon.102, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1413

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1413

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1309, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1309 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1309 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1309 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1309 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1309 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1309 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1310, %1309 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_zz.4, %1309 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yz.4, %1309 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yy.4, %1309 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xz.4, %1309 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xy.4, %1309 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xx.4, %1309 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectEnergy.4, %1309 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy.3, %1309 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1309 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1311

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1309

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %533 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %534 = add nsw i32 %533, 1
  %535 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %536 = load i32* %535, align 4
  %537 = lshr i32 %536, 28
  %538 = mul nsw i32 %534, %537
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds double* %532, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %542 = load float* %541, align 4
  %543 = fpext float %542 to double
  %544 = fmul double 3.320636e+02, %543
  %545 = fmul double %544, %15
  %546 = fmul double %545, %9
  %547 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 4194303
  %550 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %549)
  %551 = zext i16 %550 to i32
  %552 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %551)
  %553 = icmp ne i32 %531, 0
  br i1 %553, label %554, label %616

; <label>:554                                     ; preds = %529
  br label %555

; <label>:555                                     ; preds = %613, %554
  %pli3.0 = phi i32* [ %202, %554 ], [ %pli3.2, %613 ]
  %plin.0 = phi i32* [ %216, %554 ], [ %plin.2, %613 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %554 ], [ %614, %613 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %554 ], [ %exclChecksum.3, %613 ]
  %556 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %556, label %557, label %615

; <label>:557                                     ; preds = %555
  %558 = sext i32 %k.0 to i64
  %559 = getelementptr inbounds i32* %188, i64 %558
  %560 = load i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %36, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 0
  %564 = getelementptr inbounds %class.Vector* %563, i32 0, i32 0
  %565 = load double* %564, align 8
  %566 = fsub double %287, %565
  %567 = fmul double %566, %566
  %568 = sext i32 %560 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %36, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 1
  %572 = load double* %571, align 8
  %573 = fsub double %290, %572
  %574 = fmul double %573, %573
  %575 = fadd double %567, %574
  %576 = sext i32 %560 to i64
  %577 = getelementptr inbounds %struct.CompAtom* %36, i64 %576
  %578 = getelementptr inbounds %struct.CompAtom* %577, i32 0, i32 0
  %579 = getelementptr inbounds %class.Vector* %578, i32 0, i32 2
  %580 = load double* %579, align 8
  %581 = fsub double %293, %580
  %582 = fmul double %581, %581
  %583 = fadd double %575, %582
  %584 = sext i32 %560 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %36, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 2
  %587 = load i32* %586, align 4
  %588 = lshr i32 %587, 26
  %589 = and i32 %588, 1
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %612, label %591

; <label>:591                                     ; preds = %557
  %592 = fcmp ole double %583, %7
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %591
  %594 = fcmp ole double %583, %21
  br i1 %594, label %595, label %598

; <label>:595                                     ; preds = %593
  %596 = add nsw i32 %exclChecksum.1, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %612, label %598

; <label>:598                                     ; preds = %595, %593
  %exclChecksum.2 = phi i32 [ %596, %595 ], [ %exclChecksum.1, %593 ]
  %599 = sext i32 %560 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %36, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  %604 = icmp sge i32 %603, %277
  br i1 %604, label %605, label %609

; <label>:605                                     ; preds = %598
  %606 = icmp sle i32 %603, %279
  br i1 %606, label %607, label %609

; <label>:607                                     ; preds = %605
  %608 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %560, i32* %pli3.0, align 4
  br label %611

; <label>:609                                     ; preds = %605, %598
  %610 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %560, i32* %plin.0, align 4
  br label %611

; <label>:611                                     ; preds = %609, %607
  %pli3.1 = phi i32* [ %608, %607 ], [ %pli3.0, %609 ]
  %plin.1 = phi i32* [ %plin.0, %607 ], [ %610, %609 ]
  br label %612

; <label>:612                                     ; preds = %611, %595, %591, %557
  %pli3.2 = phi i32* [ %pli3.0, %557 ], [ %pli3.0, %595 ], [ %pli3.1, %611 ], [ %pli3.0, %591 ]
  %plin.2 = phi i32* [ %plin.0, %557 ], [ %plin.0, %595 ], [ %plin.1, %611 ], [ %plin.0, %591 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %557 ], [ %596, %595 ], [ %exclChecksum.2, %611 ], [ %exclChecksum.1, %591 ]
  br label %613

; <label>:613                                     ; preds = %612
  %614 = add nsw i32 %k.0, 1
  br label %555

; <label>:615                                     ; preds = %555
  br label %695

; <label>:616                                     ; preds = %529
  %617 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %617, label %618, label %694

; <label>:618                                     ; preds = %616
  %619 = sext i32 %pairlistoffset.1 to i64
  %620 = getelementptr inbounds i32* %188, i64 %619
  %621 = load i32* %620, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %36, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = sext i32 %621 to i64
  %628 = getelementptr inbounds %struct.CompAtom* %36, i64 %627
  %629 = getelementptr inbounds %struct.CompAtom* %628, i32 0, i32 0
  %630 = getelementptr inbounds %class.Vector* %629, i32 0, i32 1
  %631 = load double* %630, align 8
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %36, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 2
  %636 = load double* %635, align 8
  %637 = sext i32 %621 to i64
  %638 = getelementptr inbounds %struct.CompAtom* %36, i64 %637
  %639 = getelementptr inbounds %struct.CompAtom* %638, i32 0, i32 2
  %640 = load i32* %639, align 4
  %641 = and i32 %640, 4194303
  br label %642

; <label>:642                                     ; preds = %687, %618
  %pli3.3 = phi i32* [ %202, %618 ], [ %pli3.5, %687 ]
  %plin.3 = phi i32* [ %216, %618 ], [ %plin.5, %687 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %618 ], [ %645, %687 ]
  %j210.0 = phi i32 [ %621, %618 ], [ %648, %687 ]
  %p_j_x11.0 = phi double [ %626, %618 ], [ %655, %687 ]
  %p_j_y12.0 = phi double [ %631, %618 ], [ %663, %687 ]
  %p_j_z13.0 = phi double [ %636, %618 ], [ %671, %687 ]
  %atom214.0 = phi i32 [ %641, %618 ], [ %692, %687 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %618 ], [ %exclChecksum.6, %687 ]
  %643 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %643, label %644, label %693

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %k9.0, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32* %188, i64 %646
  %648 = load i32* %647, align 4
  %649 = fsub double %287, %p_j_x11.0
  %650 = fmul double %649, %649
  %651 = sext i32 %648 to i64
  %652 = getelementptr inbounds %struct.CompAtom* %36, i64 %651
  %653 = getelementptr inbounds %struct.CompAtom* %652, i32 0, i32 0
  %654 = getelementptr inbounds %class.Vector* %653, i32 0, i32 0
  %655 = load double* %654, align 8
  %656 = fsub double %290, %p_j_y12.0
  %657 = fmul double %656, %656
  %658 = fadd double %650, %657
  %659 = sext i32 %648 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %36, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 0
  %662 = getelementptr inbounds %class.Vector* %661, i32 0, i32 1
  %663 = load double* %662, align 8
  %664 = fsub double %293, %p_j_z13.0
  %665 = fmul double %664, %664
  %666 = fadd double %658, %665
  %667 = sext i32 %648 to i64
  %668 = getelementptr inbounds %struct.CompAtom* %36, i64 %667
  %669 = getelementptr inbounds %struct.CompAtom* %668, i32 0, i32 0
  %670 = getelementptr inbounds %class.Vector* %669, i32 0, i32 2
  %671 = load double* %670, align 8
  %672 = fcmp ole double %666, %7
  br i1 %672, label %673, label %687

; <label>:673                                     ; preds = %644
  %674 = fcmp ole double %666, %21
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = add nsw i32 %exclChecksum.4, 1
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %687, label %678

; <label>:678                                     ; preds = %675, %673
  %exclChecksum.5 = phi i32 [ %676, %675 ], [ %exclChecksum.4, %673 ]
  %679 = icmp sge i32 %atom214.0, %277
  br i1 %679, label %680, label %684

; <label>:680                                     ; preds = %678
  %681 = icmp sle i32 %atom214.0, %279
  br i1 %681, label %682, label %684

; <label>:682                                     ; preds = %680
  %683 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %686

; <label>:684                                     ; preds = %680, %678
  %685 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %686

; <label>:686                                     ; preds = %684, %682
  %pli3.4 = phi i32* [ %683, %682 ], [ %pli3.3, %684 ]
  %plin.4 = phi i32* [ %plin.3, %682 ], [ %685, %684 ]
  br label %687

; <label>:687                                     ; preds = %686, %675, %644
  %pli3.5 = phi i32* [ %pli3.3, %675 ], [ %pli3.4, %686 ], [ %pli3.3, %644 ]
  %plin.5 = phi i32* [ %plin.3, %675 ], [ %plin.4, %686 ], [ %plin.3, %644 ]
  %exclChecksum.6 = phi i32 [ %676, %675 ], [ %exclChecksum.5, %686 ], [ %exclChecksum.4, %644 ]
  %688 = sext i32 %648 to i64
  %689 = getelementptr inbounds %struct.CompAtom* %36, i64 %688
  %690 = getelementptr inbounds %struct.CompAtom* %689, i32 0, i32 2
  %691 = load i32* %690, align 4
  %692 = and i32 %691, 4194303
  br label %642

; <label>:693                                     ; preds = %642
  br label %694

; <label>:694                                     ; preds = %693, %616
  %pli3.6 = phi i32* [ %pli3.3, %693 ], [ %202, %616 ]
  %plin.6 = phi i32* [ %plin.3, %693 ], [ %216, %616 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %693 ], [ %exclChecksum.0, %616 ]
  br label %695

; <label>:695                                     ; preds = %694, %615
  %pli3.7 = phi i32* [ %pli3.0, %615 ], [ %pli3.6, %694 ]
  %plin.7 = phi i32* [ %plin.0, %615 ], [ %plin.6, %694 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %615 ], [ %exclChecksum.7, %694 ]
  %696 = ptrtoint i32* %pli3.7 to i64
  %697 = ptrtoint i32* %202 to i64
  %698 = sub i64 %696, %697
  %699 = sdiv exact i64 %698, 4
  %700 = trunc i64 %699 to i32
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %709

; <label>:702                                     ; preds = %695
  %703 = sub nsw i32 %700, 1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i32* %202, i64 %704
  %706 = load i32* %705, align 4
  %707 = sext i32 %700 to i64
  %708 = getelementptr inbounds i32* %202, i64 %707
  store i32 %706, i32* %708, align 4
  br label %709

; <label>:709                                     ; preds = %702, %695
  br label %710

; <label>:710                                     ; preds = %721, %709
  %plix.0 = phi i32* [ %230, %709 ], [ %719, %721 ]
  %pln.0 = phi i32* [ %216, %709 ], [ %722, %721 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %709 ], [ %720, %721 ]
  %711 = icmp ult i32* %pln.0, %plin.7
  br i1 %711, label %712, label %715

; <label>:712                                     ; preds = %710
  %713 = load i32* %pln.0, align 4
  %714 = icmp slt i32 %713, %j_hgroup.2
  br label %715

; <label>:715                                     ; preds = %712, %710
  %716 = phi i1 [ false, %710 ], [ %714, %712 ]
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %715
  %718 = load i32* %pln.0, align 4
  %719 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %718, i32* %plix.0, align 4
  %720 = add nsw i32 %exclChecksum.9, -1
  br label %721

; <label>:721                                     ; preds = %717
  %722 = getelementptr inbounds i32* %pln.0, i32 1
  br label %710

; <label>:723                                     ; preds = %715
  br label %724

; <label>:724                                     ; preds = %739, %723
  %plix.1 = phi i32* [ %plix.0, %723 ], [ %737, %739 ]
  %k17.0 = phi i32 [ 0, %723 ], [ %740, %739 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %723 ], [ %738, %739 ]
  %725 = icmp slt i32 %k17.0, %700
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = sext i32 %k17.0 to i64
  %728 = getelementptr inbounds i32* %202, i64 %727
  %729 = load i32* %728, align 4
  %730 = icmp slt i32 %729, %j_hgroup.2
  br label %731

; <label>:731                                     ; preds = %726, %724
  %732 = phi i1 [ false, %724 ], [ %730, %726 ]
  br i1 %732, label %733, label %741

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %202, i64 %734
  %736 = load i32* %735, align 4
  %737 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %736, i32* %plix.1, align 4
  %738 = add nsw i32 %exclChecksum.10, -1
  br label %739

; <label>:739                                     ; preds = %733
  %740 = add nsw i32 %k17.0, 1
  br label %724

; <label>:741                                     ; preds = %731
  br label %742

; <label>:742                                     ; preds = %764, %741
  %plin.8 = phi i32* [ %plin.7, %741 ], [ %plin.9, %764 ]
  %plix.2 = phi i32* [ %plix.1, %741 ], [ %plix.3, %764 ]
  %plim.0 = phi i32* [ %244, %741 ], [ %plim.1, %764 ]
  %k17.1 = phi i32 [ %k17.0, %741 ], [ %765, %764 ]
  %743 = icmp slt i32 %k17.1, %700
  br i1 %743, label %744, label %766

; <label>:744                                     ; preds = %742
  %745 = sext i32 %k17.1 to i64
  %746 = getelementptr inbounds i32* %202, i64 %745
  %747 = load i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CompAtom* %36, i64 %748
  %750 = getelementptr inbounds %struct.CompAtom* %749, i32 0, i32 2
  %751 = load i32* %750, align 4
  %752 = and i32 %751, 4194303
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8* %284, i64 %753
  %755 = load i8* %754, align 1
  %756 = sext i8 %755 to i32
  switch i32 %756, label %763 [
    i32 0, label %757
    i32 1, label %759
    i32 2, label %761
  ]

; <label>:757                                     ; preds = %744
  %758 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %747, i32* %plin.8, align 4
  br label %763

; <label>:759                                     ; preds = %744
  %760 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %747, i32* %plix.2, align 4
  br label %763

; <label>:761                                     ; preds = %744
  %762 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %747, i32* %plim.0, align 4
  br label %763

; <label>:763                                     ; preds = %761, %759, %757, %744
  %plin.9 = phi i32* [ %plin.8, %744 ], [ %plin.8, %761 ], [ %plin.8, %759 ], [ %758, %757 ]
  %plix.3 = phi i32* [ %plix.2, %744 ], [ %plix.2, %761 ], [ %760, %759 ], [ %plix.2, %757 ]
  %plim.1 = phi i32* [ %plim.0, %744 ], [ %762, %761 ], [ %plim.0, %759 ], [ %plim.0, %757 ]
  br label %764

; <label>:764                                     ; preds = %763
  %765 = add nsw i32 %k17.1, 1
  br label %742

; <label>:766                                     ; preds = %742
  %767 = ptrtoint i32* %plix.2 to i64
  %768 = ptrtoint i32* %230 to i64
  %769 = sub i64 %767, %768
  %770 = sdiv exact i64 %769, 4
  %771 = sext i32 %exclChecksum.10 to i64
  %772 = add nsw i64 %771, %770
  %773 = trunc i64 %772 to i32
  %774 = ptrtoint i32* %plim.0 to i64
  %775 = ptrtoint i32* %244 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %773 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plin.8 to i64
  %782 = ptrtoint i32* %pln.0 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = trunc i64 %784 to i32
  br label %786

; <label>:786                                     ; preds = %962, %766
  %k17.2 = phi i32 [ 0, %766 ], [ %963, %962 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %766 ], [ %955, %962 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %766 ], [ %946, %962 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %766 ], [ %944, %962 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %766 ], [ %935, %962 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %766 ], [ %933, %962 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %766 ], [ %931, %962 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %766 ], [ %914, %962 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %766 ], [ %896, %962 ]
  %787 = icmp slt i32 %k17.2, %785
  br i1 %787, label %788, label %964

; <label>:788                                     ; preds = %786
  %789 = sext i32 %k17.2 to i64
  %790 = getelementptr inbounds i32* %pln.0, i64 %789
  %791 = load i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds %struct.CompAtom* %36, i64 %792
  %794 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 0
  %796 = load double* %795, align 8
  %797 = fsub double %287, %796
  %798 = fmul double %797, %797
  %799 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %800 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %801 = load double* %800, align 8
  %802 = fsub double %290, %801
  %803 = fmul double %802, %802
  %804 = fadd double %798, %803
  %805 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %806 = getelementptr inbounds %class.Vector* %805, i32 0, i32 2
  %807 = load double* %806, align 8
  %808 = fsub double %293, %807
  %809 = fmul double %808, %808
  %810 = fadd double %804, %809
  %811 = fptrunc double %810 to float
  %812 = bitcast %union.anon.100* %r2f to float*
  store float %811, float* %812, align 4
  %813 = bitcast %union.anon.100* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = ashr i32 %814, 17
  %816 = add nsw i32 %815, %24
  %817 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %818 = load i32* %817, align 4
  %819 = and i32 %818, 4194303
  %820 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %819)
  %821 = zext i16 %820 to i32
  %822 = mul nsw i32 2, %821
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %823
  %825 = mul nsw i32 16, %816
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds double* %14, i64 %826
  %828 = getelementptr inbounds double* %827, i64 0
  %829 = load double* %828, align 8
  %830 = mul nsw i32 16, %816
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double* %14, i64 %831
  %833 = getelementptr inbounds double* %832, i64 4
  %834 = getelementptr inbounds double* %833, i64 0
  %835 = load double* %834, align 8
  %836 = mul nsw i32 16, %816
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds double* %14, i64 %837
  %839 = getelementptr inbounds double* %838, i64 8
  %840 = getelementptr inbounds double* %839, i64 0
  %841 = load double* %840, align 8
  %842 = bitcast %union.anon.100* %r2f to i32*
  %843 = load i32* %842, align 4
  %844 = and i32 %843, -131072
  store i32 %844, i32* %842, align 4
  %845 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 1
  %846 = load float* %845, align 4
  %847 = fpext float %846 to double
  %848 = fmul double %546, %847
  %849 = bitcast %union.anon.100* %r2f to float*
  %850 = load float* %849, align 4
  %851 = fpext float %850 to double
  %852 = fsub double %810, %851
  %853 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %854 = load i32* %853, align 4
  %855 = lshr i32 %854, 28
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds double* %540, i64 %856
  %858 = load double* %857, align 8
  %859 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 0
  %860 = load double* %859, align 8
  %861 = fmul double %15, %860
  %862 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 1
  %863 = load double* %862, align 8
  %864 = fmul double %15, %863
  %865 = fmul double %861, %829
  %866 = fmul double %864, %835
  %867 = fsub double %865, %866
  %868 = getelementptr inbounds double* %827, i64 3
  %869 = load double* %868, align 8
  %870 = fmul double %861, %869
  %871 = getelementptr inbounds double* %833, i64 3
  %872 = load double* %871, align 8
  %873 = fmul double %864, %872
  %874 = fsub double %870, %873
  %875 = getelementptr inbounds double* %827, i64 2
  %876 = load double* %875, align 8
  %877 = fmul double %861, %876
  %878 = getelementptr inbounds double* %833, i64 2
  %879 = load double* %878, align 8
  %880 = fmul double %864, %879
  %881 = fsub double %877, %880
  %882 = getelementptr inbounds double* %827, i64 1
  %883 = load double* %882, align 8
  %884 = fmul double %861, %883
  %885 = getelementptr inbounds double* %833, i64 1
  %886 = load double* %885, align 8
  %887 = fmul double %864, %886
  %888 = fsub double %884, %887
  %889 = fmul double %852, %874
  %890 = fadd double %889, %881
  %891 = fmul double %890, %852
  %892 = fadd double %891, %888
  %893 = fmul double %892, %852
  %894 = fadd double %893, %867
  %895 = fmul double %858, %894
  %896 = fadd double %vdwEnergy.1, %895
  %897 = getelementptr inbounds double* %839, i64 1
  %898 = load double* %897, align 8
  %899 = getelementptr inbounds double* %839, i64 2
  %900 = load double* %899, align 8
  %901 = getelementptr inbounds double* %839, i64 3
  %902 = load double* %901, align 8
  %903 = fmul double %902, %848
  %904 = fmul double %900, %848
  %905 = fmul double %898, %848
  %906 = fmul double %841, %848
  %907 = fmul double %852, %903
  %908 = fadd double %907, %904
  %909 = fmul double %908, %852
  %910 = fadd double %909, %905
  %911 = fmul double %910, %852
  %912 = fadd double %911, %906
  %913 = fmul double %858, %912
  %914 = fadd double %fullElectEnergy.1, %913
  %915 = fadd double %903, %874
  %916 = fadd double %904, %881
  %917 = fadd double %905, %888
  %918 = fadd double %906, %867
  %919 = fmul double 3.000000e+00, %852
  %920 = fmul double %919, %915
  %921 = fmul double 2.000000e+00, %916
  %922 = fadd double %920, %921
  %923 = fmul double %922, %852
  %924 = fadd double %923, %917
  %925 = fmul double -2.000000e+00, %924
  %926 = fmul double %925, %858
  %927 = sext i32 %791 to i64
  %928 = getelementptr inbounds %class.Vector* %250, i64 %927
  %929 = fmul double %926, %797
  %930 = fmul double %929, %797
  %931 = fadd double %fullElectVirial_xx.1, %930
  %932 = fmul double %929, %802
  %933 = fadd double %fullElectVirial_xy.1, %932
  %934 = fmul double %929, %808
  %935 = fadd double %fullElectVirial_xz.1, %934
  %936 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %937 = load double* %936, align 8
  %938 = fadd double %937, %929
  store double %938, double* %936, align 8
  %939 = getelementptr inbounds %class.Vector* %928, i32 0, i32 0
  %940 = load double* %939, align 8
  %941 = fsub double %940, %929
  store double %941, double* %939, align 8
  %942 = fmul double %926, %802
  %943 = fmul double %942, %802
  %944 = fadd double %fullElectVirial_yy.1, %943
  %945 = fmul double %942, %808
  %946 = fadd double %fullElectVirial_yz.1, %945
  %947 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %948 = load double* %947, align 8
  %949 = fadd double %948, %942
  store double %949, double* %947, align 8
  %950 = getelementptr inbounds %class.Vector* %928, i32 0, i32 1
  %951 = load double* %950, align 8
  %952 = fsub double %951, %942
  store double %952, double* %950, align 8
  %953 = fmul double %926, %808
  %954 = fmul double %953, %808
  %955 = fadd double %fullElectVirial_zz.1, %954
  %956 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %957 = load double* %956, align 8
  %958 = fadd double %957, %953
  store double %958, double* %956, align 8
  %959 = getelementptr inbounds %class.Vector* %928, i32 0, i32 2
  %960 = load double* %959, align 8
  %961 = fsub double %960, %953
  store double %961, double* %959, align 8
  br label %962

; <label>:962                                     ; preds = %788
  %963 = add nsw i32 %k17.2, 1
  br label %786

; <label>:964                                     ; preds = %786
  %965 = ptrtoint i32* %plim.0 to i64
  %966 = ptrtoint i32* %244 to i64
  %967 = sub i64 %965, %966
  %968 = sdiv exact i64 %967, 4
  %969 = trunc i64 %968 to i32
  br label %970

; <label>:970                                     ; preds = %1167, %964
  %k17.3 = phi i32 [ 0, %964 ], [ %1168, %1167 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %964 ], [ %1160, %1167 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %964 ], [ %1151, %1167 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %964 ], [ %1149, %1167 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %964 ], [ %1140, %1167 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %964 ], [ %1138, %1167 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %964 ], [ %1136, %1167 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %964 ], [ %1119, %1167 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %964 ], [ %1081, %1167 ]
  %971 = icmp slt i32 %k17.3, %969
  br i1 %971, label %972, label %1169

; <label>:972                                     ; preds = %970
  %973 = sext i32 %k17.3 to i64
  %974 = getelementptr inbounds i32* %244, i64 %973
  %975 = load i32* %974, align 4
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds %struct.CompAtom* %36, i64 %976
  %978 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 0
  %979 = getelementptr inbounds %class.Vector* %978, i32 0, i32 0
  %980 = load double* %979, align 8
  %981 = fsub double %287, %980
  %982 = fmul double %981, %981
  %983 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 0
  %984 = getelementptr inbounds %class.Vector* %983, i32 0, i32 1
  %985 = load double* %984, align 8
  %986 = fsub double %290, %985
  %987 = fmul double %986, %986
  %988 = fadd double %982, %987
  %989 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 0
  %990 = getelementptr inbounds %class.Vector* %989, i32 0, i32 2
  %991 = load double* %990, align 8
  %992 = fsub double %293, %991
  %993 = fmul double %992, %992
  %994 = fadd double %988, %993
  %995 = fptrunc double %994 to float
  %996 = bitcast %union.anon.101* %r2f28 to float*
  store float %995, float* %996, align 4
  %997 = bitcast %union.anon.101* %r2f28 to i32*
  %998 = load i32* %997, align 4
  %999 = ashr i32 %998, 17
  %1000 = add nsw i32 %999, %24
  %1001 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 2
  %1002 = load i32* %1001, align 4
  %1003 = and i32 %1002, 4194303
  %1004 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1003)
  %1005 = zext i16 %1004 to i32
  %1006 = mul nsw i32 2, %1005
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %1007
  %1009 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1008, i64 1
  %1010 = mul nsw i32 16, %1000
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds double* %14, i64 %1011
  %1013 = getelementptr inbounds double* %1012, i64 0
  %1014 = load double* %1013, align 8
  %1015 = mul nsw i32 16, %1000
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds double* %14, i64 %1016
  %1018 = getelementptr inbounds double* %1017, i64 4
  %1019 = getelementptr inbounds double* %1018, i64 0
  %1020 = load double* %1019, align 8
  %1021 = mul nsw i32 16, %1000
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds double* %14, i64 %1022
  %1024 = getelementptr inbounds double* %1023, i64 8
  %1025 = getelementptr inbounds double* %1024, i64 0
  %1026 = load double* %1025, align 8
  %1027 = bitcast %union.anon.101* %r2f28 to i32*
  %1028 = load i32* %1027, align 4
  %1029 = and i32 %1028, -131072
  store i32 %1029, i32* %1027, align 4
  %1030 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 1
  %1031 = load float* %1030, align 4
  %1032 = fpext float %1031 to double
  %1033 = fmul double %546, %1032
  %1034 = bitcast %union.anon.101* %r2f28 to float*
  %1035 = load float* %1034, align 4
  %1036 = fpext float %1035 to double
  %1037 = fsub double %994, %1036
  %1038 = getelementptr inbounds %struct.CompAtom* %977, i32 0, i32 2
  %1039 = load i32* %1038, align 4
  %1040 = lshr i32 %1039, 28
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds double* %540, i64 %1041
  %1043 = load double* %1042, align 8
  %1044 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1009, i32 0, i32 0
  %1045 = load double* %1044, align 8
  %1046 = fmul double %15, %1045
  %1047 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1009, i32 0, i32 1
  %1048 = load double* %1047, align 8
  %1049 = fmul double %15, %1048
  %1050 = fmul double %1046, %1014
  %1051 = fmul double %1049, %1020
  %1052 = fsub double %1050, %1051
  %1053 = getelementptr inbounds double* %1012, i64 3
  %1054 = load double* %1053, align 8
  %1055 = fmul double %1046, %1054
  %1056 = getelementptr inbounds double* %1018, i64 3
  %1057 = load double* %1056, align 8
  %1058 = fmul double %1049, %1057
  %1059 = fsub double %1055, %1058
  %1060 = getelementptr inbounds double* %1012, i64 2
  %1061 = load double* %1060, align 8
  %1062 = fmul double %1046, %1061
  %1063 = getelementptr inbounds double* %1018, i64 2
  %1064 = load double* %1063, align 8
  %1065 = fmul double %1049, %1064
  %1066 = fsub double %1062, %1065
  %1067 = getelementptr inbounds double* %1012, i64 1
  %1068 = load double* %1067, align 8
  %1069 = fmul double %1046, %1068
  %1070 = getelementptr inbounds double* %1018, i64 1
  %1071 = load double* %1070, align 8
  %1072 = fmul double %1049, %1071
  %1073 = fsub double %1069, %1072
  %1074 = fmul double %1037, %1059
  %1075 = fadd double %1074, %1066
  %1076 = fmul double %1075, %1037
  %1077 = fadd double %1076, %1073
  %1078 = fmul double %1077, %1037
  %1079 = fadd double %1078, %1052
  %1080 = fmul double %1043, %1079
  %1081 = fadd double %vdwEnergy.2, %1080
  %1082 = getelementptr inbounds double* %1024, i64 1
  %1083 = load double* %1082, align 8
  %1084 = getelementptr inbounds double* %1024, i64 2
  %1085 = load double* %1084, align 8
  %1086 = getelementptr inbounds double* %1024, i64 3
  %1087 = load double* %1086, align 8
  %1088 = getelementptr inbounds double* %14, i64 12
  %1089 = mul nsw i32 16, %1000
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds double* %1088, i64 %1090
  %1092 = getelementptr inbounds double* %1091, i64 0
  %1093 = load double* %1092, align 8
  %1094 = fmul double %17, %1093
  %1095 = fsub double %1026, %1094
  %1096 = getelementptr inbounds double* %1091, i64 1
  %1097 = load double* %1096, align 8
  %1098 = fmul double %17, %1097
  %1099 = fsub double %1083, %1098
  %1100 = getelementptr inbounds double* %1091, i64 2
  %1101 = load double* %1100, align 8
  %1102 = fmul double %17, %1101
  %1103 = fsub double %1085, %1102
  %1104 = getelementptr inbounds double* %1091, i64 3
  %1105 = load double* %1104, align 8
  %1106 = fmul double %17, %1105
  %1107 = fsub double %1087, %1106
  %1108 = fmul double %1107, %1033
  %1109 = fmul double %1103, %1033
  %1110 = fmul double %1099, %1033
  %1111 = fmul double %1095, %1033
  %1112 = fmul double %1037, %1108
  %1113 = fadd double %1112, %1109
  %1114 = fmul double %1113, %1037
  %1115 = fadd double %1114, %1110
  %1116 = fmul double %1115, %1037
  %1117 = fadd double %1116, %1111
  %1118 = fmul double %1043, %1117
  %1119 = fadd double %fullElectEnergy.2, %1118
  %1120 = fadd double %1108, %1059
  %1121 = fadd double %1109, %1066
  %1122 = fadd double %1110, %1073
  %1123 = fadd double %1111, %1052
  %1124 = fmul double 3.000000e+00, %1037
  %1125 = fmul double %1124, %1120
  %1126 = fmul double 2.000000e+00, %1121
  %1127 = fadd double %1125, %1126
  %1128 = fmul double %1127, %1037
  %1129 = fadd double %1128, %1122
  %1130 = fmul double -2.000000e+00, %1129
  %1131 = fmul double %1130, %1043
  %1132 = sext i32 %975 to i64
  %1133 = getelementptr inbounds %class.Vector* %250, i64 %1132
  %1134 = fmul double %1131, %981
  %1135 = fmul double %1134, %981
  %1136 = fadd double %fullElectVirial_xx.2, %1135
  %1137 = fmul double %1134, %986
  %1138 = fadd double %fullElectVirial_xy.2, %1137
  %1139 = fmul double %1134, %992
  %1140 = fadd double %fullElectVirial_xz.2, %1139
  %1141 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1142 = load double* %1141, align 8
  %1143 = fadd double %1142, %1134
  store double %1143, double* %1141, align 8
  %1144 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 0
  %1145 = load double* %1144, align 8
  %1146 = fsub double %1145, %1134
  store double %1146, double* %1144, align 8
  %1147 = fmul double %1131, %986
  %1148 = fmul double %1147, %986
  %1149 = fadd double %fullElectVirial_yy.2, %1148
  %1150 = fmul double %1147, %992
  %1151 = fadd double %fullElectVirial_yz.2, %1150
  %1152 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1153 = load double* %1152, align 8
  %1154 = fadd double %1153, %1147
  store double %1154, double* %1152, align 8
  %1155 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 1
  %1156 = load double* %1155, align 8
  %1157 = fsub double %1156, %1147
  store double %1157, double* %1155, align 8
  %1158 = fmul double %1131, %992
  %1159 = fmul double %1158, %992
  %1160 = fadd double %fullElectVirial_zz.2, %1159
  %1161 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1162 = load double* %1161, align 8
  %1163 = fadd double %1162, %1158
  store double %1163, double* %1161, align 8
  %1164 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 2
  %1165 = load double* %1164, align 8
  %1166 = fsub double %1165, %1158
  store double %1166, double* %1164, align 8
  br label %1167

; <label>:1167                                    ; preds = %972
  %1168 = add nsw i32 %k17.3, 1
  br label %970

; <label>:1169                                    ; preds = %970
  %1170 = ptrtoint i32* %plix.2 to i64
  %1171 = ptrtoint i32* %230 to i64
  %1172 = sub i64 %1170, %1171
  %1173 = sdiv exact i64 %1172, 4
  %1174 = trunc i64 %1173 to i32
  br label %1175

; <label>:1175                                    ; preds = %1306, %1169
  %k17.4 = phi i32 [ 0, %1169 ], [ %1307, %1306 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1169 ], [ %1299, %1306 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1169 ], [ %1290, %1306 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1169 ], [ %1288, %1306 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1169 ], [ %1279, %1306 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1169 ], [ %1277, %1306 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1169 ], [ %1275, %1306 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1169 ], [ %1262, %1306 ]
  %1176 = icmp slt i32 %k17.4, %1174
  br i1 %1176, label %1177, label %1308

; <label>:1177                                    ; preds = %1175
  %1178 = sext i32 %k17.4 to i64
  %1179 = getelementptr inbounds i32* %230, i64 %1178
  %1180 = load i32* %1179, align 4
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds %struct.CompAtom* %36, i64 %1181
  %1183 = getelementptr inbounds %struct.CompAtom* %1182, i32 0, i32 0
  %1184 = getelementptr inbounds %class.Vector* %1183, i32 0, i32 0
  %1185 = load double* %1184, align 8
  %1186 = fsub double %287, %1185
  %1187 = fmul double %1186, %1186
  %1188 = getelementptr inbounds %struct.CompAtom* %1182, i32 0, i32 0
  %1189 = getelementptr inbounds %class.Vector* %1188, i32 0, i32 1
  %1190 = load double* %1189, align 8
  %1191 = fsub double %290, %1190
  %1192 = fmul double %1191, %1191
  %1193 = fadd double %1187, %1192
  %1194 = getelementptr inbounds %struct.CompAtom* %1182, i32 0, i32 0
  %1195 = getelementptr inbounds %class.Vector* %1194, i32 0, i32 2
  %1196 = load double* %1195, align 8
  %1197 = fsub double %293, %1196
  %1198 = fmul double %1197, %1197
  %1199 = fadd double %1193, %1198
  %1200 = fptrunc double %1199 to float
  %1201 = bitcast %union.anon.102* %r2f63 to float*
  store float %1200, float* %1201, align 4
  %1202 = bitcast %union.anon.102* %r2f63 to i32*
  %1203 = load i32* %1202, align 4
  %1204 = ashr i32 %1203, 17
  %1205 = add nsw i32 %1204, %24
  %1206 = mul nsw i32 16, %1205
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds double* %14, i64 %1207
  %1209 = getelementptr inbounds double* %1208, i64 8
  %1210 = getelementptr inbounds double* %1209, i64 0
  %1211 = load double* %1210, align 8
  %1212 = bitcast %union.anon.102* %r2f63 to i32*
  %1213 = load i32* %1212, align 4
  %1214 = and i32 %1213, -131072
  store i32 %1214, i32* %1212, align 4
  %1215 = getelementptr inbounds %struct.CompAtom* %1182, i32 0, i32 1
  %1216 = load float* %1215, align 4
  %1217 = fpext float %1216 to double
  %1218 = fmul double %546, %1217
  %1219 = bitcast %union.anon.102* %r2f63 to float*
  %1220 = load float* %1219, align 4
  %1221 = fpext float %1220 to double
  %1222 = fsub double %1199, %1221
  %1223 = getelementptr inbounds %struct.CompAtom* %1182, i32 0, i32 2
  %1224 = load i32* %1223, align 4
  %1225 = lshr i32 %1224, 28
  %1226 = zext i32 %1225 to i64
  %1227 = getelementptr inbounds double* %540, i64 %1226
  %1228 = load double* %1227, align 8
  %1229 = getelementptr inbounds double* %1209, i64 1
  %1230 = load double* %1229, align 8
  %1231 = getelementptr inbounds double* %1209, i64 2
  %1232 = load double* %1231, align 8
  %1233 = getelementptr inbounds double* %1209, i64 3
  %1234 = load double* %1233, align 8
  %1235 = getelementptr inbounds double* %14, i64 12
  %1236 = mul nsw i32 16, %1205
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds double* %1235, i64 %1237
  %1239 = getelementptr inbounds double* %1238, i64 0
  %1240 = load double* %1239, align 8
  %1241 = fsub double %1211, %1240
  %1242 = getelementptr inbounds double* %1238, i64 1
  %1243 = load double* %1242, align 8
  %1244 = fsub double %1230, %1243
  %1245 = getelementptr inbounds double* %1238, i64 2
  %1246 = load double* %1245, align 8
  %1247 = fsub double %1232, %1246
  %1248 = getelementptr inbounds double* %1238, i64 3
  %1249 = load double* %1248, align 8
  %1250 = fsub double %1234, %1249
  %1251 = fmul double %1250, %1218
  %1252 = fmul double %1247, %1218
  %1253 = fmul double %1244, %1218
  %1254 = fmul double %1241, %1218
  %1255 = fmul double %1222, %1251
  %1256 = fadd double %1255, %1252
  %1257 = fmul double %1256, %1222
  %1258 = fadd double %1257, %1253
  %1259 = fmul double %1258, %1222
  %1260 = fadd double %1259, %1254
  %1261 = fmul double %1228, %1260
  %1262 = fadd double %fullElectEnergy.3, %1261
  %1263 = fmul double 3.000000e+00, %1222
  %1264 = fmul double %1263, %1251
  %1265 = fmul double 2.000000e+00, %1252
  %1266 = fadd double %1264, %1265
  %1267 = fmul double %1266, %1222
  %1268 = fadd double %1267, %1253
  %1269 = fmul double -2.000000e+00, %1268
  %1270 = fmul double %1269, %1228
  %1271 = sext i32 %1180 to i64
  %1272 = getelementptr inbounds %class.Vector* %250, i64 %1271
  %1273 = fmul double %1270, %1186
  %1274 = fmul double %1273, %1186
  %1275 = fadd double %fullElectVirial_xx.3, %1274
  %1276 = fmul double %1273, %1191
  %1277 = fadd double %fullElectVirial_xy.3, %1276
  %1278 = fmul double %1273, %1197
  %1279 = fadd double %fullElectVirial_xz.3, %1278
  %1280 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1281 = load double* %1280, align 8
  %1282 = fadd double %1281, %1273
  store double %1282, double* %1280, align 8
  %1283 = getelementptr inbounds %class.Vector* %1272, i32 0, i32 0
  %1284 = load double* %1283, align 8
  %1285 = fsub double %1284, %1273
  store double %1285, double* %1283, align 8
  %1286 = fmul double %1270, %1191
  %1287 = fmul double %1286, %1191
  %1288 = fadd double %fullElectVirial_yy.3, %1287
  %1289 = fmul double %1286, %1197
  %1290 = fadd double %fullElectVirial_yz.3, %1289
  %1291 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1292 = load double* %1291, align 8
  %1293 = fadd double %1292, %1286
  store double %1293, double* %1291, align 8
  %1294 = getelementptr inbounds %class.Vector* %1272, i32 0, i32 1
  %1295 = load double* %1294, align 8
  %1296 = fsub double %1295, %1286
  store double %1296, double* %1294, align 8
  %1297 = fmul double %1270, %1197
  %1298 = fmul double %1297, %1197
  %1299 = fadd double %fullElectVirial_zz.3, %1298
  %1300 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1301 = load double* %1300, align 8
  %1302 = fadd double %1301, %1297
  store double %1302, double* %1300, align 8
  %1303 = getelementptr inbounds %class.Vector* %1272, i32 0, i32 2
  %1304 = load double* %1303, align 8
  %1305 = fsub double %1304, %1297
  store double %1305, double* %1303, align 8
  br label %1306

; <label>:1306                                    ; preds = %1177
  %1307 = add nsw i32 %k17.4, 1
  br label %1175

; <label>:1308                                    ; preds = %1175
  br label %1309

; <label>:1309                                    ; preds = %1308, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1308 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1308 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1308 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1308 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1308 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1308 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1308 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %329 ], [ %fullElectVirial_zz.3, %1308 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %329 ], [ %fullElectVirial_yz.3, %1308 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %329 ], [ %fullElectVirial_yy.3, %1308 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %329 ], [ %fullElectVirial_xz.3, %1308 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %329 ], [ %fullElectVirial_xy.3, %1308 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %329 ], [ %fullElectVirial_xx.3, %1308 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %329 ], [ %fullElectEnergy.3, %1308 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %329 ], [ %vdwEnergy.2, %1308 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %780, %1308 ]
  %1310 = add nsw i32 %i.1, 1
  br label %266

; <label>:1311                                    ; preds = %266
  %1312 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1313 = icmp ne i32* %50, %1312
  br i1 %1313, label %1314, label %1319

; <label>:1314                                    ; preds = %1311
  %1315 = icmp eq i32* %50, null
  br i1 %1315, label %1318, label %1316

; <label>:1316                                    ; preds = %1314
  %1317 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1317) #8
  br label %1318

; <label>:1318                                    ; preds = %1316, %1314
  br label %1319

; <label>:1319                                    ; preds = %1318, %1311
  %1320 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1321 = icmp ne i32* %64, %1320
  br i1 %1321, label %1322, label %1327

; <label>:1322                                    ; preds = %1319
  %1323 = icmp eq i32* %64, null
  br i1 %1323, label %1326, label %1324

; <label>:1324                                    ; preds = %1322
  %1325 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1325) #8
  br label %1326

; <label>:1326                                    ; preds = %1324, %1322
  br label %1327

; <label>:1327                                    ; preds = %1326, %1319
  %1328 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1329 = icmp ne i32* %78, %1328
  br i1 %1329, label %1330, label %1335

; <label>:1330                                    ; preds = %1327
  %1331 = icmp eq i32* %78, null
  br i1 %1331, label %1334, label %1332

; <label>:1332                                    ; preds = %1330
  %1333 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1333) #8
  br label %1334

; <label>:1334                                    ; preds = %1332, %1330
  br label %1335

; <label>:1335                                    ; preds = %1334, %1327
  %1336 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1337 = icmp ne i32* %188, %1336
  br i1 %1337, label %1338, label %1343

; <label>:1338                                    ; preds = %1335
  %1339 = icmp eq i32* %188, null
  br i1 %1339, label %1342, label %1340

; <label>:1340                                    ; preds = %1338
  %1341 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1341) #8
  br label %1342

; <label>:1342                                    ; preds = %1340, %1338
  br label %1343

; <label>:1343                                    ; preds = %1342, %1335
  %1344 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1345 = icmp ne i32* %202, %1344
  br i1 %1345, label %1346, label %1351

; <label>:1346                                    ; preds = %1343
  %1347 = icmp eq i32* %202, null
  br i1 %1347, label %1350, label %1348

; <label>:1348                                    ; preds = %1346
  %1349 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1349) #8
  br label %1350

; <label>:1350                                    ; preds = %1348, %1346
  br label %1351

; <label>:1351                                    ; preds = %1350, %1343
  %1352 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1353 = icmp ne i32* %216, %1352
  br i1 %1353, label %1354, label %1359

; <label>:1354                                    ; preds = %1351
  %1355 = icmp eq i32* %216, null
  br i1 %1355, label %1358, label %1356

; <label>:1356                                    ; preds = %1354
  %1357 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1357) #8
  br label %1358

; <label>:1358                                    ; preds = %1356, %1354
  br label %1359

; <label>:1359                                    ; preds = %1358, %1351
  %1360 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1361 = icmp ne i32* %230, %1360
  br i1 %1361, label %1362, label %1367

; <label>:1362                                    ; preds = %1359
  %1363 = icmp eq i32* %230, null
  br i1 %1363, label %1366, label %1364

; <label>:1364                                    ; preds = %1362
  %1365 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1365) #8
  br label %1366

; <label>:1366                                    ; preds = %1364, %1362
  br label %1367

; <label>:1367                                    ; preds = %1366, %1359
  %1368 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1369 = icmp ne i32* %244, %1368
  br i1 %1369, label %1370, label %1375

; <label>:1370                                    ; preds = %1367
  %1371 = icmp eq i32* %244, null
  br i1 %1371, label %1374, label %1372

; <label>:1372                                    ; preds = %1370
  %1373 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1373) #8
  br label %1374

; <label>:1374                                    ; preds = %1372, %1370
  br label %1375

; <label>:1375                                    ; preds = %1374, %1367
  %1376 = sitofp i32 %exclChecksum.0 to double
  %1377 = getelementptr inbounds double* %6, i64 22
  %1378 = load double* %1377, align 8
  %1379 = fadd double %1378, %1376
  store double %1379, double* %1377, align 8
  %1380 = getelementptr inbounds double* %6, i64 2
  %1381 = load double* %1380, align 8
  %1382 = fadd double %1381, %vdwEnergy.0
  store double %1382, double* %1380, align 8
  %1383 = getelementptr inbounds double* %6, i64 1
  %1384 = load double* %1383, align 8
  %1385 = fadd double %1384, %fullElectEnergy.0
  store double %1385, double* %1383, align 8
  %1386 = getelementptr inbounds double* %6, i64 12
  %1387 = load double* %1386, align 8
  %1388 = fadd double %1387, %fullElectVirial_xx.0
  store double %1388, double* %1386, align 8
  %1389 = getelementptr inbounds double* %6, i64 13
  %1390 = load double* %1389, align 8
  %1391 = fadd double %1390, %fullElectVirial_xy.0
  store double %1391, double* %1389, align 8
  %1392 = getelementptr inbounds double* %6, i64 14
  %1393 = load double* %1392, align 8
  %1394 = fadd double %1393, %fullElectVirial_xz.0
  store double %1394, double* %1392, align 8
  %1395 = getelementptr inbounds double* %6, i64 15
  %1396 = load double* %1395, align 8
  %1397 = fadd double %1396, %fullElectVirial_xy.0
  store double %1397, double* %1395, align 8
  %1398 = getelementptr inbounds double* %6, i64 16
  %1399 = load double* %1398, align 8
  %1400 = fadd double %1399, %fullElectVirial_yy.0
  store double %1400, double* %1398, align 8
  %1401 = getelementptr inbounds double* %6, i64 17
  %1402 = load double* %1401, align 8
  %1403 = fadd double %1402, %fullElectVirial_yz.0
  store double %1403, double* %1401, align 8
  %1404 = getelementptr inbounds double* %6, i64 18
  %1405 = load double* %1404, align 8
  %1406 = fadd double %1405, %fullElectVirial_xz.0
  store double %1406, double* %1404, align 8
  %1407 = getelementptr inbounds double* %6, i64 19
  %1408 = load double* %1407, align 8
  %1409 = fadd double %1408, %fullElectVirial_yz.0
  store double %1409, double* %1407, align 8
  %1410 = getelementptr inbounds double* %6, i64 20
  %1411 = load double* %1410, align 8
  %1412 = fadd double %1411, %fullElectVirial_zz.0
  store double %1412, double* %1410, align 8
  br label %1413

; <label>:1413                                    ; preds = %1375, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil28calc_pair_slow_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.81, align 4
  %r2f29 = alloca %union.anon.82, align 4
  %r2f51 = alloca %union.anon.83, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1200

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %182

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  br label %136

; <label>:136                                     ; preds = %152, %135
  %all_fixed.2 = phi i32 [ %all_fixed.0, %135 ], [ %all_fixed.3, %152 ]
  %i.0 = phi i32 [ 0, %135 ], [ %153, %152 ]
  %137 = icmp ne i32 %all_fixed.2, 0
  br i1 %137, label %138, label %140

; <label>:138                                     ; preds = %136
  %139 = icmp slt i32 %i.0, %25
  br label %140

; <label>:140                                     ; preds = %138, %136
  %141 = phi i1 [ false, %136 ], [ %139, %138 ]
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %140
  %143 = sext i32 %i.0 to i64
  %144 = getelementptr inbounds %struct.CompAtom* %31, i64 %143
  %145 = getelementptr inbounds %struct.CompAtom* %144, i32 0, i32 2
  %146 = load i32* %145, align 4
  %147 = lshr i32 %146, 26
  %148 = and i32 %147, 1
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %151, label %150

; <label>:150                                     ; preds = %142
  br label %151

; <label>:151                                     ; preds = %150, %142
  %all_fixed.3 = phi i32 [ %all_fixed.2, %142 ], [ 0, %150 ]
  br label %152

; <label>:152                                     ; preds = %151
  %153 = add nsw i32 %i.0, 1
  br label %136

; <label>:154                                     ; preds = %140
  %155 = icmp ne i32 %all_fixed.2, 0
  br i1 %155, label %156, label %181

; <label>:156                                     ; preds = %154
  %157 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %158 = icmp ne i32* %48, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %48, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  %165 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %166 = icmp ne i32* %62, %165
  br i1 %166, label %167, label %172

; <label>:167                                     ; preds = %164
  %168 = icmp eq i32* %62, null
  br i1 %168, label %171, label %169

; <label>:169                                     ; preds = %167
  %170 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %170) #8
  br label %171

; <label>:171                                     ; preds = %169, %167
  br label %172

; <label>:172                                     ; preds = %171, %164
  %173 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %174 = icmp ne i32* %76, %173
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %172
  %176 = icmp eq i32* %76, null
  br i1 %176, label %179, label %177

; <label>:177                                     ; preds = %175
  %178 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %178) #8
  br label %179

; <label>:179                                     ; preds = %177, %175
  br label %180

; <label>:180                                     ; preds = %179, %172
  br label %1200

; <label>:181                                     ; preds = %154
  br label %182

; <label>:182                                     ; preds = %181, %111
  %fixg.2 = phi i32 [ %fixg.0, %181 ], [ 0, %111 ]
  %183 = icmp ne i32 %fixg.2, 0
  br i1 %183, label %184, label %191

; <label>:184                                     ; preds = %182
  %185 = sub nsw i32 %fixg.2, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32* %62, i64 %186
  %188 = load i32* %187, align 4
  %189 = sext i32 %fixg.2 to i64
  %190 = getelementptr inbounds i32* %62, i64 %189
  store i32 %188, i32* %190, align 4
  br label %191

; <label>:191                                     ; preds = %184, %182
  %192 = icmp slt i32 %28, 1000
  br i1 %192, label %193, label %195

; <label>:193                                     ; preds = %191
  %194 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %204

; <label>:195                                     ; preds = %191
  %196 = add nsw i32 %28, 5
  %197 = sext i32 %196 to i64
  %198 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %197, i64 4)
  %199 = extractvalue { i64, i1 } %198, 1
  %200 = extractvalue { i64, i1 } %198, 0
  %201 = select i1 %199, i64 -1, i64 %200
  %202 = call noalias i8* @_Znam(i64 %201) #9
  %203 = bitcast i8* %202 to i32*
  br label %204

; <label>:204                                     ; preds = %195, %193
  %205 = phi i32* [ %194, %193 ], [ %203, %195 ]
  %206 = icmp slt i32 %28, 1000
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %204
  %208 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %218

; <label>:209                                     ; preds = %204
  %210 = add nsw i32 %28, 5
  %211 = sext i32 %210 to i64
  %212 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %211, i64 4)
  %213 = extractvalue { i64, i1 } %212, 1
  %214 = extractvalue { i64, i1 } %212, 0
  %215 = select i1 %213, i64 -1, i64 %214
  %216 = call noalias i8* @_Znam(i64 %215) #9
  %217 = bitcast i8* %216 to i32*
  br label %218

; <label>:218                                     ; preds = %209, %207
  %219 = phi i32* [ %208, %207 ], [ %217, %209 ]
  %220 = icmp slt i32 %28, 1000
  br i1 %220, label %221, label %223

; <label>:221                                     ; preds = %218
  %222 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %232

; <label>:223                                     ; preds = %218
  %224 = add nsw i32 %28, 5
  %225 = sext i32 %224 to i64
  %226 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %225, i64 4)
  %227 = extractvalue { i64, i1 } %226, 1
  %228 = extractvalue { i64, i1 } %226, 0
  %229 = select i1 %227, i64 -1, i64 %228
  %230 = call noalias i8* @_Znam(i64 %229) #9
  %231 = bitcast i8* %230 to i32*
  br label %232

; <label>:232                                     ; preds = %223, %221
  %233 = phi i32* [ %222, %221 ], [ %231, %223 ]
  %234 = icmp slt i32 %28, 1000
  br i1 %234, label %235, label %237

; <label>:235                                     ; preds = %232
  %236 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %246

; <label>:237                                     ; preds = %232
  %238 = add nsw i32 %28, 5
  %239 = sext i32 %238 to i64
  %240 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %239, i64 4)
  %241 = extractvalue { i64, i1 } %240, 1
  %242 = extractvalue { i64, i1 } %240, 0
  %243 = select i1 %241, i64 -1, i64 %242
  %244 = call noalias i8* @_Znam(i64 %243) #9
  %245 = bitcast i8* %244 to i32*
  br label %246

; <label>:246                                     ; preds = %237, %235
  %247 = phi i32* [ %236, %235 ], [ %245, %237 ]
  %248 = icmp slt i32 %28, 1000
  br i1 %248, label %249, label %251

; <label>:249                                     ; preds = %246
  %250 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %260

; <label>:251                                     ; preds = %246
  %252 = add nsw i32 %28, 5
  %253 = sext i32 %252 to i64
  %254 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %253, i64 4)
  %255 = extractvalue { i64, i1 } %254, 1
  %256 = extractvalue { i64, i1 } %254, 0
  %257 = select i1 %255, i64 -1, i64 %256
  %258 = call noalias i8* @_Znam(i64 %257) #9
  %259 = bitcast i8* %258 to i32*
  br label %260

; <label>:260                                     ; preds = %251, %249
  %261 = phi i32* [ %250, %249 ], [ %259, %251 ]
  %262 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %263 = getelementptr inbounds [2 x %class.Vector*]* %262, i32 0, i64 0
  %264 = load %class.Vector** %263, align 8
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 1
  %267 = load %class.Vector** %266, align 8
  %268 = mul nsw i32 %25, %28
  %269 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %270 = load i32* %269, align 4
  %271 = mul nsw i32 %268, %270
  %272 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %273 = load i32* %272, align 4
  %274 = sdiv i32 %271, %273
  %275 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %276 = load i32* %275, align 4
  %277 = mul nsw i32 %268, %276
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %279 = load i32* %278, align 4
  %280 = sdiv i32 %277, %279
  br label %281

; <label>:281                                     ; preds = %1102, %260
  %pairlistindex.0 = phi i32 [ 0, %260 ], [ %pairlistindex.2, %1102 ]
  %pairlistoffset.0 = phi i32 [ 0, %260 ], [ %pairlistoffset.2, %1102 ]
  %pairCount.0 = phi i32 [ 0, %260 ], [ %pairCount.3, %1102 ]
  %i.1 = phi i32 [ 0, %260 ], [ %1103, %1102 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_zz.4, %1102 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yz.4, %1102 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yy.4, %1102 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xz.4, %1102 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xy.4, %1102 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xx.4, %1102 ]
  %exclChecksum.0 = phi i32 [ 0, %260 ], [ %exclChecksum.9, %1102 ]
  %282 = icmp slt i32 %i.1, %25
  br i1 %282, label %283, label %1104

; <label>:283                                     ; preds = %281
  %284 = sext i32 %i.1 to i64
  %285 = getelementptr inbounds %struct.CompAtom* %31, i64 %284
  %286 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %287 = load i32* %286, align 4
  %288 = and i32 %287, 4194303
  %289 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %288)
  %290 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 0
  %291 = load i32* %290, align 4
  %292 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 1
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 2
  %295 = load i8** %294, align 8
  %296 = sext i32 %291 to i64
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8* %295, i64 %297
  %299 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %300 = getelementptr inbounds %class.Vector* %299, i32 0, i32 0
  %301 = load double* %300, align 8
  %302 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %303 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %304 = load double* %303, align 8
  %305 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %306 = getelementptr inbounds %class.Vector* %305, i32 0, i32 2
  %307 = load double* %306, align 8
  %308 = sext i32 %i.1 to i64
  %309 = getelementptr inbounds %class.Vector* %264, i64 %308
  %310 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %311 = load i32* %310, align 4
  %312 = lshr i32 %311, 22
  %313 = and i32 %312, 7
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %321, label %315

; <label>:315                                     ; preds = %283
  %316 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %317 = load i32* %316, align 4
  %318 = lshr i32 %317, 25
  %319 = and i32 %318, 1
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %321, label %491

; <label>:321                                     ; preds = %315, %283
  %322 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %323 = load i32* %322, align 4
  %324 = lshr i32 %323, 22
  %325 = and i32 %324, 7
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %341

; <label>:327                                     ; preds = %321
  %328 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %329 = load i32* %328, align 4
  %330 = lshr i32 %329, 22
  %331 = and i32 %330, 7
  %332 = mul nsw i32 %331, %28
  %333 = add nsw i32 %pairCount.0, %332
  %334 = icmp slt i32 %pairCount.0, %274
  br i1 %334, label %337, label %335

; <label>:335                                     ; preds = %327
  %336 = icmp sge i32 %pairCount.0, %280
  br i1 %336, label %337, label %340

; <label>:337                                     ; preds = %335, %327
  %338 = sub nsw i32 %331, 1
  %339 = add nsw i32 %i.1, %338
  br label %1102

; <label>:340                                     ; preds = %335
  br label %341

; <label>:341                                     ; preds = %340, %321
  %pairCount.1 = phi i32 [ %333, %340 ], [ %pairCount.0, %321 ]
  %342 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %350

; <label>:344                                     ; preds = %341
  %345 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 27
  %348 = and i32 %347, 1
  %349 = icmp ne i32 %348, 0
  br label %350

; <label>:350                                     ; preds = %344, %341
  %351 = phi i1 [ false, %341 ], [ %349, %344 ]
  %352 = zext i1 %351 to i32
  %353 = sext i32 0 to i64
  %354 = getelementptr inbounds i32* %205, i64 %353
  %355 = icmp ne i32 %352, 0
  br i1 %355, label %356, label %357

; <label>:356                                     ; preds = %350
  br label %358

; <label>:357                                     ; preds = %350
  br label %358

; <label>:358                                     ; preds = %357, %356
  %359 = phi i32* [ %62, %356 ], [ %48, %357 ]
  %360 = icmp ne i32 %352, 0
  br i1 %360, label %361, label %362

; <label>:361                                     ; preds = %358
  br label %363

; <label>:362                                     ; preds = %358
  br label %363

; <label>:363                                     ; preds = %362, %361
  %364 = phi i32 [ %fixg.2, %361 ], [ %g.0, %362 ]
  %365 = icmp slt i32 0, %364
  br i1 %365, label %366, label %460

; <label>:366                                     ; preds = %363
  %367 = sext i32 0 to i64
  %368 = getelementptr inbounds i32* %359, i64 %367
  %369 = load i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds %struct.CompAtom* %34, i64 %370
  %372 = getelementptr inbounds %struct.CompAtom* %371, i32 0, i32 0
  %373 = getelementptr inbounds %class.Vector* %372, i32 0, i32 0
  %374 = load double* %373, align 8
  %375 = sext i32 %369 to i64
  %376 = getelementptr inbounds %struct.CompAtom* %34, i64 %375
  %377 = getelementptr inbounds %struct.CompAtom* %376, i32 0, i32 0
  %378 = getelementptr inbounds %class.Vector* %377, i32 0, i32 1
  %379 = load double* %378, align 8
  %380 = sext i32 %369 to i64
  %381 = getelementptr inbounds %struct.CompAtom* %34, i64 %380
  %382 = getelementptr inbounds %struct.CompAtom* %381, i32 0, i32 0
  %383 = getelementptr inbounds %class.Vector* %382, i32 0, i32 2
  %384 = load double* %383, align 8
  br label %385

; <label>:385                                     ; preds = %418, %366
  %g.3 = phi i32 [ 0, %366 ], [ %388, %418 ]
  %gli.0 = phi i32* [ %76, %366 ], [ %gli.1, %418 ]
  %j2.0 = phi i32 [ %369, %366 ], [ %391, %418 ]
  %p_j_x.0 = phi double [ %374, %366 ], [ %398, %418 ]
  %p_j_y.0 = phi double [ %379, %366 ], [ %406, %418 ]
  %p_j_z.0 = phi double [ %384, %366 ], [ %414, %418 ]
  %386 = icmp slt i32 %g.3, %364
  br i1 %386, label %387, label %419

; <label>:387                                     ; preds = %385
  %388 = add nsw i32 %g.3, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32* %359, i64 %389
  %391 = load i32* %390, align 4
  %392 = fsub double %301, %p_j_x.0
  %393 = fmul double %392, %392
  %394 = sext i32 %391 to i64
  %395 = getelementptr inbounds %struct.CompAtom* %34, i64 %394
  %396 = getelementptr inbounds %struct.CompAtom* %395, i32 0, i32 0
  %397 = getelementptr inbounds %class.Vector* %396, i32 0, i32 0
  %398 = load double* %397, align 8
  %399 = fsub double %304, %p_j_y.0
  %400 = fmul double %399, %399
  %401 = fadd double %393, %400
  %402 = sext i32 %391 to i64
  %403 = getelementptr inbounds %struct.CompAtom* %34, i64 %402
  %404 = getelementptr inbounds %struct.CompAtom* %403, i32 0, i32 0
  %405 = getelementptr inbounds %class.Vector* %404, i32 0, i32 1
  %406 = load double* %405, align 8
  %407 = fsub double %307, %p_j_z.0
  %408 = fmul double %407, %407
  %409 = fadd double %401, %408
  %410 = sext i32 %391 to i64
  %411 = getelementptr inbounds %struct.CompAtom* %34, i64 %410
  %412 = getelementptr inbounds %struct.CompAtom* %411, i32 0, i32 0
  %413 = getelementptr inbounds %class.Vector* %412, i32 0, i32 2
  %414 = load double* %413, align 8
  %415 = fcmp ole double %409, %8
  br i1 %415, label %416, label %418

; <label>:416                                     ; preds = %387
  store i32 %j2.0, i32* %gli.0, align 4
  %417 = getelementptr inbounds i32* %gli.0, i32 1
  br label %418

; <label>:418                                     ; preds = %416, %387
  %gli.1 = phi i32* [ %417, %416 ], [ %gli.0, %387 ]
  br label %385

; <label>:419                                     ; preds = %385
  %420 = ptrtoint i32* %gli.0 to i64
  %421 = ptrtoint i32* %76 to i64
  %422 = sub i64 %420, %421
  %423 = sdiv exact i64 %422, 4
  %424 = trunc i64 %423 to i32
  br label %425

; <label>:425                                     ; preds = %457, %419
  %pli.0 = phi i32* [ %354, %419 ], [ %456, %457 ]
  %h.0 = phi i32 [ 0, %419 ], [ %458, %457 ]
  %426 = icmp slt i32 %h.0, %424
  br i1 %426, label %427, label %459

; <label>:427                                     ; preds = %425
  %428 = sext i32 %h.0 to i64
  %429 = getelementptr inbounds i32* %76, i64 %428
  %430 = load i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds %struct.CompAtom* %34, i64 %431
  %433 = getelementptr inbounds %struct.CompAtom* %432, i32 0, i32 2
  %434 = load i32* %433, align 4
  %435 = lshr i32 %434, 25
  %436 = and i32 %435, 1
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %439

; <label>:438                                     ; preds = %427
  br label %446

; <label>:439                                     ; preds = %427
  %440 = sext i32 %430 to i64
  %441 = getelementptr inbounds %struct.CompAtom* %34, i64 %440
  %442 = getelementptr inbounds %struct.CompAtom* %441, i32 0, i32 2
  %443 = load i32* %442, align 4
  %444 = lshr i32 %443, 22
  %445 = and i32 %444, 7
  br label %446

; <label>:446                                     ; preds = %439, %438
  %447 = phi i32 [ 1, %438 ], [ %445, %439 ]
  %448 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %430, i32* %448, align 4
  %449 = add nsw i32 %430, 1
  %450 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %449, i32* %450, align 4
  %451 = add nsw i32 %430, 2
  %452 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %430, 3
  %454 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %453, i32* %454, align 4
  %455 = sext i32 %447 to i64
  %456 = getelementptr inbounds i32* %pli.0, i64 %455
  br label %457

; <label>:457                                     ; preds = %446
  %458 = add nsw i32 %h.0, 1
  br label %425

; <label>:459                                     ; preds = %425
  br label %460

; <label>:460                                     ; preds = %459, %363
  %pli.1 = phi i32* [ %pli.0, %459 ], [ %354, %363 ]
  %461 = ptrtoint i32* %pli.1 to i64
  %462 = ptrtoint i32* %205 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  %466 = icmp ne i32 %465, 0
  br i1 %466, label %467, label %474

; <label>:467                                     ; preds = %460
  %468 = sub nsw i32 %465, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i32* %205, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %465 to i64
  %473 = getelementptr inbounds i32* %205, i64 %472
  store i32 %471, i32* %473, align 4
  br label %490

; <label>:474                                     ; preds = %460
  %475 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %476 = load i32* %475, align 4
  %477 = lshr i32 %476, 25
  %478 = and i32 %477, 1
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %480, label %481

; <label>:480                                     ; preds = %474
  br label %486

; <label>:481                                     ; preds = %474
  %482 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %483 = load i32* %482, align 4
  %484 = lshr i32 %483, 22
  %485 = and i32 %484, 7
  br label %486

; <label>:486                                     ; preds = %481, %480
  %487 = phi i32 [ 1, %480 ], [ %485, %481 ]
  %488 = sub nsw i32 %487, 1
  %489 = add nsw i32 %i.1, %488
  br label %1102

; <label>:490                                     ; preds = %467
  br label %491

; <label>:491                                     ; preds = %490, %315
  %pairlistindex.1 = phi i32 [ %465, %490 ], [ %pairlistindex.0, %315 ]
  %pairlistoffset.1 = phi i32 [ 0, %490 ], [ %pairlistoffset.0, %315 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %490 ], [ %pairCount.0, %315 ]
  %492 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %493 = icmp ne i32 %492, 0
  br i1 %493, label %494, label %500

; <label>:494                                     ; preds = %491
  %495 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %496 = load i32* %495, align 4
  %497 = lshr i32 %496, 26
  %498 = and i32 %497, 1
  %499 = icmp ne i32 %498, 0
  br label %500

; <label>:500                                     ; preds = %494, %491
  %501 = phi i1 [ false, %491 ], [ %499, %494 ]
  %502 = zext i1 %501 to i32
  %503 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %504 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %505 = add nsw i32 %504, 1
  %506 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 28
  %509 = mul nsw i32 %505, %508
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds double* %503, i64 %510
  %512 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 1
  %513 = load float* %512, align 4
  %514 = fpext float %513 to double
  %515 = fmul double 3.320636e+02, %514
  %516 = fmul double %515, %16
  %517 = fmul double %516, %9
  %518 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %519 = load i32* %518, align 4
  %520 = and i32 %519, 4194303
  %521 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %520)
  %522 = zext i16 %521 to i32
  %523 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %522)
  %524 = icmp ne i32 %502, 0
  br i1 %524, label %525, label %587

; <label>:525                                     ; preds = %500
  br label %526

; <label>:526                                     ; preds = %584, %525
  %pli4.0 = phi i32* [ %219, %525 ], [ %pli4.2, %584 ]
  %plin.0 = phi i32* [ %233, %525 ], [ %plin.2, %584 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %525 ], [ %585, %584 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %525 ], [ %exclChecksum.3, %584 ]
  %527 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %527, label %528, label %586

; <label>:528                                     ; preds = %526
  %529 = sext i32 %k.0 to i64
  %530 = getelementptr inbounds i32* %205, i64 %529
  %531 = load i32* %530, align 4
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %34, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 0
  %536 = load double* %535, align 8
  %537 = fsub double %301, %536
  %538 = fmul double %537, %537
  %539 = sext i32 %531 to i64
  %540 = getelementptr inbounds %struct.CompAtom* %34, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %540, i32 0, i32 0
  %542 = getelementptr inbounds %class.Vector* %541, i32 0, i32 1
  %543 = load double* %542, align 8
  %544 = fsub double %304, %543
  %545 = fmul double %544, %544
  %546 = fadd double %538, %545
  %547 = sext i32 %531 to i64
  %548 = getelementptr inbounds %struct.CompAtom* %34, i64 %547
  %549 = getelementptr inbounds %struct.CompAtom* %548, i32 0, i32 0
  %550 = getelementptr inbounds %class.Vector* %549, i32 0, i32 2
  %551 = load double* %550, align 8
  %552 = fsub double %307, %551
  %553 = fmul double %552, %552
  %554 = fadd double %546, %553
  %555 = sext i32 %531 to i64
  %556 = getelementptr inbounds %struct.CompAtom* %34, i64 %555
  %557 = getelementptr inbounds %struct.CompAtom* %556, i32 0, i32 2
  %558 = load i32* %557, align 4
  %559 = lshr i32 %558, 26
  %560 = and i32 %559, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %583, label %562

; <label>:562                                     ; preds = %528
  %563 = fcmp ole double %554, %7
  br i1 %563, label %564, label %583

; <label>:564                                     ; preds = %562
  %565 = fcmp ole double %554, %19
  br i1 %565, label %566, label %569

; <label>:566                                     ; preds = %564
  %567 = add nsw i32 %exclChecksum.1, 1
  %568 = icmp ne i32 %567, 0
  br i1 %568, label %583, label %569

; <label>:569                                     ; preds = %566, %564
  %exclChecksum.2 = phi i32 [ %567, %566 ], [ %exclChecksum.1, %564 ]
  %570 = sext i32 %531 to i64
  %571 = getelementptr inbounds %struct.CompAtom* %34, i64 %570
  %572 = getelementptr inbounds %struct.CompAtom* %571, i32 0, i32 2
  %573 = load i32* %572, align 4
  %574 = and i32 %573, 4194303
  %575 = icmp sge i32 %574, %291
  br i1 %575, label %576, label %580

; <label>:576                                     ; preds = %569
  %577 = icmp sle i32 %574, %293
  br i1 %577, label %578, label %580

; <label>:578                                     ; preds = %576
  %579 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %531, i32* %pli4.0, align 4
  br label %582

; <label>:580                                     ; preds = %576, %569
  %581 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %531, i32* %plin.0, align 4
  br label %582

; <label>:582                                     ; preds = %580, %578
  %pli4.1 = phi i32* [ %579, %578 ], [ %pli4.0, %580 ]
  %plin.1 = phi i32* [ %plin.0, %578 ], [ %581, %580 ]
  br label %583

; <label>:583                                     ; preds = %582, %566, %562, %528
  %pli4.2 = phi i32* [ %pli4.0, %528 ], [ %pli4.0, %566 ], [ %pli4.1, %582 ], [ %pli4.0, %562 ]
  %plin.2 = phi i32* [ %plin.0, %528 ], [ %plin.0, %566 ], [ %plin.1, %582 ], [ %plin.0, %562 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %528 ], [ %567, %566 ], [ %exclChecksum.2, %582 ], [ %exclChecksum.1, %562 ]
  br label %584

; <label>:584                                     ; preds = %583
  %585 = add nsw i32 %k.0, 1
  br label %526

; <label>:586                                     ; preds = %526
  br label %666

; <label>:587                                     ; preds = %500
  %588 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %588, label %589, label %665

; <label>:589                                     ; preds = %587
  %590 = sext i32 %pairlistoffset.1 to i64
  %591 = getelementptr inbounds i32* %205, i64 %590
  %592 = load i32* %591, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds %struct.CompAtom* %34, i64 %593
  %595 = getelementptr inbounds %struct.CompAtom* %594, i32 0, i32 0
  %596 = getelementptr inbounds %class.Vector* %595, i32 0, i32 0
  %597 = load double* %596, align 8
  %598 = sext i32 %592 to i64
  %599 = getelementptr inbounds %struct.CompAtom* %34, i64 %598
  %600 = getelementptr inbounds %struct.CompAtom* %599, i32 0, i32 0
  %601 = getelementptr inbounds %class.Vector* %600, i32 0, i32 1
  %602 = load double* %601, align 8
  %603 = sext i32 %592 to i64
  %604 = getelementptr inbounds %struct.CompAtom* %34, i64 %603
  %605 = getelementptr inbounds %struct.CompAtom* %604, i32 0, i32 0
  %606 = getelementptr inbounds %class.Vector* %605, i32 0, i32 2
  %607 = load double* %606, align 8
  %608 = sext i32 %592 to i64
  %609 = getelementptr inbounds %struct.CompAtom* %34, i64 %608
  %610 = getelementptr inbounds %struct.CompAtom* %609, i32 0, i32 2
  %611 = load i32* %610, align 4
  %612 = and i32 %611, 4194303
  br label %613

; <label>:613                                     ; preds = %658, %589
  %pli4.3 = phi i32* [ %219, %589 ], [ %pli4.5, %658 ]
  %plin.3 = phi i32* [ %233, %589 ], [ %plin.5, %658 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %589 ], [ %616, %658 ]
  %j211.0 = phi i32 [ %592, %589 ], [ %619, %658 ]
  %p_j_x12.0 = phi double [ %597, %589 ], [ %626, %658 ]
  %p_j_y13.0 = phi double [ %602, %589 ], [ %634, %658 ]
  %p_j_z14.0 = phi double [ %607, %589 ], [ %642, %658 ]
  %atom215.0 = phi i32 [ %612, %589 ], [ %663, %658 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %589 ], [ %exclChecksum.6, %658 ]
  %614 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %614, label %615, label %664

; <label>:615                                     ; preds = %613
  %616 = add nsw i32 %k10.0, 1
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i32* %205, i64 %617
  %619 = load i32* %618, align 4
  %620 = fsub double %301, %p_j_x12.0
  %621 = fmul double %620, %620
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %34, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = fsub double %304, %p_j_y13.0
  %628 = fmul double %627, %627
  %629 = fadd double %621, %628
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %34, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 1
  %634 = load double* %633, align 8
  %635 = fsub double %307, %p_j_z14.0
  %636 = fmul double %635, %635
  %637 = fadd double %629, %636
  %638 = sext i32 %619 to i64
  %639 = getelementptr inbounds %struct.CompAtom* %34, i64 %638
  %640 = getelementptr inbounds %struct.CompAtom* %639, i32 0, i32 0
  %641 = getelementptr inbounds %class.Vector* %640, i32 0, i32 2
  %642 = load double* %641, align 8
  %643 = fcmp ole double %637, %7
  br i1 %643, label %644, label %658

; <label>:644                                     ; preds = %615
  %645 = fcmp ole double %637, %19
  br i1 %645, label %646, label %649

; <label>:646                                     ; preds = %644
  %647 = add nsw i32 %exclChecksum.4, 1
  %648 = icmp ne i32 %647, 0
  br i1 %648, label %658, label %649

; <label>:649                                     ; preds = %646, %644
  %exclChecksum.5 = phi i32 [ %647, %646 ], [ %exclChecksum.4, %644 ]
  %650 = icmp sge i32 %atom215.0, %291
  br i1 %650, label %651, label %655

; <label>:651                                     ; preds = %649
  %652 = icmp sle i32 %atom215.0, %293
  br i1 %652, label %653, label %655

; <label>:653                                     ; preds = %651
  %654 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %657

; <label>:655                                     ; preds = %651, %649
  %656 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %657

; <label>:657                                     ; preds = %655, %653
  %pli4.4 = phi i32* [ %654, %653 ], [ %pli4.3, %655 ]
  %plin.4 = phi i32* [ %plin.3, %653 ], [ %656, %655 ]
  br label %658

; <label>:658                                     ; preds = %657, %646, %615
  %pli4.5 = phi i32* [ %pli4.3, %646 ], [ %pli4.4, %657 ], [ %pli4.3, %615 ]
  %plin.5 = phi i32* [ %plin.3, %646 ], [ %plin.4, %657 ], [ %plin.3, %615 ]
  %exclChecksum.6 = phi i32 [ %647, %646 ], [ %exclChecksum.5, %657 ], [ %exclChecksum.4, %615 ]
  %659 = sext i32 %619 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %34, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 2
  %662 = load i32* %661, align 4
  %663 = and i32 %662, 4194303
  br label %613

; <label>:664                                     ; preds = %613
  br label %665

; <label>:665                                     ; preds = %664, %587
  %pli4.6 = phi i32* [ %pli4.3, %664 ], [ %219, %587 ]
  %plin.6 = phi i32* [ %plin.3, %664 ], [ %233, %587 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %664 ], [ %exclChecksum.0, %587 ]
  br label %666

; <label>:666                                     ; preds = %665, %586
  %pli4.7 = phi i32* [ %pli4.0, %586 ], [ %pli4.6, %665 ]
  %plin.7 = phi i32* [ %plin.0, %586 ], [ %plin.6, %665 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %586 ], [ %exclChecksum.7, %665 ]
  %667 = ptrtoint i32* %pli4.7 to i64
  %668 = ptrtoint i32* %219 to i64
  %669 = sub i64 %667, %668
  %670 = sdiv exact i64 %669, 4
  %671 = trunc i64 %670 to i32
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %673, label %680

; <label>:673                                     ; preds = %666
  %674 = sub nsw i32 %671, 1
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i32* %219, i64 %675
  %677 = load i32* %676, align 4
  %678 = sext i32 %671 to i64
  %679 = getelementptr inbounds i32* %219, i64 %678
  store i32 %677, i32* %679, align 4
  br label %680

; <label>:680                                     ; preds = %673, %666
  br label %681

; <label>:681                                     ; preds = %703, %680
  %plin.8 = phi i32* [ %plin.7, %680 ], [ %plin.9, %703 ]
  %plix.0 = phi i32* [ %247, %680 ], [ %plix.1, %703 ]
  %plim.0 = phi i32* [ %261, %680 ], [ %plim.1, %703 ]
  %k18.0 = phi i32 [ 0, %680 ], [ %704, %703 ]
  %682 = icmp slt i32 %k18.0, %671
  br i1 %682, label %683, label %705

; <label>:683                                     ; preds = %681
  %684 = sext i32 %k18.0 to i64
  %685 = getelementptr inbounds i32* %219, i64 %684
  %686 = load i32* %685, align 4
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds %struct.CompAtom* %34, i64 %687
  %689 = getelementptr inbounds %struct.CompAtom* %688, i32 0, i32 2
  %690 = load i32* %689, align 4
  %691 = and i32 %690, 4194303
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8* %298, i64 %692
  %694 = load i8* %693, align 1
  %695 = sext i8 %694 to i32
  switch i32 %695, label %702 [
    i32 0, label %696
    i32 1, label %698
    i32 2, label %700
  ]

; <label>:696                                     ; preds = %683
  %697 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %686, i32* %plin.8, align 4
  br label %702

; <label>:698                                     ; preds = %683
  %699 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %686, i32* %plix.0, align 4
  br label %702

; <label>:700                                     ; preds = %683
  %701 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %686, i32* %plim.0, align 4
  br label %702

; <label>:702                                     ; preds = %700, %698, %696, %683
  %plin.9 = phi i32* [ %plin.8, %683 ], [ %plin.8, %700 ], [ %plin.8, %698 ], [ %697, %696 ]
  %plix.1 = phi i32* [ %plix.0, %683 ], [ %plix.0, %700 ], [ %699, %698 ], [ %plix.0, %696 ]
  %plim.1 = phi i32* [ %plim.0, %683 ], [ %701, %700 ], [ %plim.0, %698 ], [ %plim.0, %696 ]
  br label %703

; <label>:703                                     ; preds = %702
  %704 = add nsw i32 %k18.0, 1
  br label %681

; <label>:705                                     ; preds = %681
  %706 = ptrtoint i32* %plix.0 to i64
  %707 = ptrtoint i32* %247 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %exclChecksum.8 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plim.0 to i64
  %714 = ptrtoint i32* %261 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = sext i32 %712 to i64
  %718 = add nsw i64 %717, %716
  %719 = trunc i64 %718 to i32
  %720 = ptrtoint i32* %plin.8 to i64
  %721 = ptrtoint i32* %233 to i64
  %722 = sub i64 %720, %721
  %723 = sdiv exact i64 %722, 4
  %724 = trunc i64 %723 to i32
  br label %725

; <label>:725                                     ; preds = %833, %705
  %k18.1 = phi i32 [ 0, %705 ], [ %834, %833 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %705 ], [ %826, %833 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %705 ], [ %817, %833 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %705 ], [ %815, %833 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %705 ], [ %806, %833 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %705 ], [ %804, %833 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %705 ], [ %802, %833 ]
  %726 = icmp slt i32 %k18.1, %724
  br i1 %726, label %727, label %835

; <label>:727                                     ; preds = %725
  %728 = sext i32 %k18.1 to i64
  %729 = getelementptr inbounds i32* %233, i64 %728
  %730 = load i32* %729, align 4
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds %struct.CompAtom* %34, i64 %731
  %733 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %734 = getelementptr inbounds %class.Vector* %733, i32 0, i32 0
  %735 = load double* %734, align 8
  %736 = fsub double %301, %735
  %737 = fmul double %736, %736
  %738 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %739 = getelementptr inbounds %class.Vector* %738, i32 0, i32 1
  %740 = load double* %739, align 8
  %741 = fsub double %304, %740
  %742 = fmul double %741, %741
  %743 = fadd double %737, %742
  %744 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %745 = getelementptr inbounds %class.Vector* %744, i32 0, i32 2
  %746 = load double* %745, align 8
  %747 = fsub double %307, %746
  %748 = fmul double %747, %747
  %749 = fadd double %743, %748
  %750 = fptrunc double %749 to float
  %751 = bitcast %union.anon.81* %r2f to float*
  store float %750, float* %751, align 4
  %752 = bitcast %union.anon.81* %r2f to i32*
  %753 = load i32* %752, align 4
  %754 = ashr i32 %753, 17
  %755 = add nsw i32 %754, %22
  %756 = mul nsw i32 16, %755
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds double* %14, i64 %757
  %759 = getelementptr inbounds double* %758, i64 8
  %760 = getelementptr inbounds double* %759, i64 4
  %761 = getelementptr inbounds double* %760, i64 0
  %762 = load double* %761, align 8
  %763 = bitcast %union.anon.81* %r2f to i32*
  %764 = load i32* %763, align 4
  %765 = and i32 %764, -131072
  store i32 %765, i32* %763, align 4
  %766 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 1
  %767 = load float* %766, align 4
  %768 = fpext float %767 to double
  %769 = fmul double %517, %768
  %770 = bitcast %union.anon.81* %r2f to float*
  %771 = load float* %770, align 4
  %772 = fpext float %771 to double
  %773 = fsub double %749, %772
  %774 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 2
  %775 = load i32* %774, align 4
  %776 = lshr i32 %775, 28
  %777 = zext i32 %776 to i64
  %778 = getelementptr inbounds double* %511, i64 %777
  %779 = load double* %778, align 8
  %780 = getelementptr inbounds double* %760, i64 1
  %781 = load double* %780, align 8
  %782 = getelementptr inbounds double* %760, i64 2
  %783 = load double* %782, align 8
  %784 = getelementptr inbounds double* %760, i64 3
  %785 = load double* %784, align 8
  %786 = fmul double %785, %769
  %787 = fmul double %783, %769
  %788 = fmul double %781, %769
  %789 = fmul double %762, %769
  %790 = fmul double 3.000000e+00, %773
  %791 = fmul double %790, %786
  %792 = fmul double 2.000000e+00, %787
  %793 = fadd double %791, %792
  %794 = fmul double %793, %773
  %795 = fadd double %794, %788
  %796 = fmul double -2.000000e+00, %795
  %797 = fmul double %796, %779
  %798 = sext i32 %730 to i64
  %799 = getelementptr inbounds %class.Vector* %267, i64 %798
  %800 = fmul double %797, %736
  %801 = fmul double %800, %736
  %802 = fadd double %fullElectVirial_xx.1, %801
  %803 = fmul double %800, %741
  %804 = fadd double %fullElectVirial_xy.1, %803
  %805 = fmul double %800, %747
  %806 = fadd double %fullElectVirial_xz.1, %805
  %807 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %808 = load double* %807, align 8
  %809 = fadd double %808, %800
  store double %809, double* %807, align 8
  %810 = getelementptr inbounds %class.Vector* %799, i32 0, i32 0
  %811 = load double* %810, align 8
  %812 = fsub double %811, %800
  store double %812, double* %810, align 8
  %813 = fmul double %797, %741
  %814 = fmul double %813, %741
  %815 = fadd double %fullElectVirial_yy.1, %814
  %816 = fmul double %813, %747
  %817 = fadd double %fullElectVirial_yz.1, %816
  %818 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %819 = load double* %818, align 8
  %820 = fadd double %819, %813
  store double %820, double* %818, align 8
  %821 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %822 = load double* %821, align 8
  %823 = fsub double %822, %813
  store double %823, double* %821, align 8
  %824 = fmul double %797, %747
  %825 = fmul double %824, %747
  %826 = fadd double %fullElectVirial_zz.1, %825
  %827 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %828 = load double* %827, align 8
  %829 = fadd double %828, %824
  store double %829, double* %827, align 8
  %830 = getelementptr inbounds %class.Vector* %799, i32 0, i32 2
  %831 = load double* %830, align 8
  %832 = fsub double %831, %824
  store double %832, double* %830, align 8
  br label %833

; <label>:833                                     ; preds = %727
  %834 = add nsw i32 %k18.1, 1
  br label %725

; <label>:835                                     ; preds = %725
  %836 = ptrtoint i32* %plim.0 to i64
  %837 = ptrtoint i32* %261 to i64
  %838 = sub i64 %836, %837
  %839 = sdiv exact i64 %838, 4
  %840 = trunc i64 %839 to i32
  br label %841

; <label>:841                                     ; preds = %968, %835
  %k18.2 = phi i32 [ 0, %835 ], [ %969, %968 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %835 ], [ %961, %968 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %835 ], [ %952, %968 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %835 ], [ %950, %968 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %835 ], [ %941, %968 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %835 ], [ %939, %968 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %835 ], [ %937, %968 ]
  %842 = icmp slt i32 %k18.2, %840
  br i1 %842, label %843, label %970

; <label>:843                                     ; preds = %841
  %844 = sext i32 %k18.2 to i64
  %845 = getelementptr inbounds i32* %261, i64 %844
  %846 = load i32* %845, align 4
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds %struct.CompAtom* %34, i64 %847
  %849 = getelementptr inbounds %struct.CompAtom* %848, i32 0, i32 0
  %850 = getelementptr inbounds %class.Vector* %849, i32 0, i32 0
  %851 = load double* %850, align 8
  %852 = fsub double %301, %851
  %853 = fmul double %852, %852
  %854 = getelementptr inbounds %struct.CompAtom* %848, i32 0, i32 0
  %855 = getelementptr inbounds %class.Vector* %854, i32 0, i32 1
  %856 = load double* %855, align 8
  %857 = fsub double %304, %856
  %858 = fmul double %857, %857
  %859 = fadd double %853, %858
  %860 = getelementptr inbounds %struct.CompAtom* %848, i32 0, i32 0
  %861 = getelementptr inbounds %class.Vector* %860, i32 0, i32 2
  %862 = load double* %861, align 8
  %863 = fsub double %307, %862
  %864 = fmul double %863, %863
  %865 = fadd double %859, %864
  %866 = fptrunc double %865 to float
  %867 = bitcast %union.anon.82* %r2f29 to float*
  store float %866, float* %867, align 4
  %868 = bitcast %union.anon.82* %r2f29 to i32*
  %869 = load i32* %868, align 4
  %870 = ashr i32 %869, 17
  %871 = add nsw i32 %870, %22
  %872 = mul nsw i32 16, %871
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds double* %14, i64 %873
  %875 = getelementptr inbounds double* %874, i64 8
  %876 = getelementptr inbounds double* %875, i64 4
  %877 = getelementptr inbounds double* %876, i64 0
  %878 = load double* %877, align 8
  %879 = bitcast %union.anon.82* %r2f29 to i32*
  %880 = load i32* %879, align 4
  %881 = and i32 %880, -131072
  store i32 %881, i32* %879, align 4
  %882 = getelementptr inbounds %struct.CompAtom* %848, i32 0, i32 1
  %883 = load float* %882, align 4
  %884 = fpext float %883 to double
  %885 = fmul double %517, %884
  %886 = bitcast %union.anon.82* %r2f29 to float*
  %887 = load float* %886, align 4
  %888 = fpext float %887 to double
  %889 = fsub double %865, %888
  %890 = getelementptr inbounds %struct.CompAtom* %848, i32 0, i32 2
  %891 = load i32* %890, align 4
  %892 = lshr i32 %891, 28
  %893 = zext i32 %892 to i64
  %894 = getelementptr inbounds double* %511, i64 %893
  %895 = load double* %894, align 8
  %896 = getelementptr inbounds double* %876, i64 1
  %897 = load double* %896, align 8
  %898 = getelementptr inbounds double* %876, i64 2
  %899 = load double* %898, align 8
  %900 = getelementptr inbounds double* %876, i64 3
  %901 = load double* %900, align 8
  %902 = mul nsw i32 4, %871
  %903 = sext i32 %902 to i64
  %904 = getelementptr inbounds double* %15, i64 %903
  %905 = getelementptr inbounds double* %904, i64 0
  %906 = load double* %905, align 8
  %907 = fmul double %18, %906
  %908 = fsub double %878, %907
  %909 = getelementptr inbounds double* %904, i64 1
  %910 = load double* %909, align 8
  %911 = fmul double %18, %910
  %912 = fsub double %897, %911
  %913 = getelementptr inbounds double* %904, i64 2
  %914 = load double* %913, align 8
  %915 = fmul double %18, %914
  %916 = fsub double %899, %915
  %917 = getelementptr inbounds double* %904, i64 3
  %918 = load double* %917, align 8
  %919 = fmul double %18, %918
  %920 = fsub double %901, %919
  %921 = fmul double %920, %885
  %922 = fmul double %916, %885
  %923 = fmul double %912, %885
  %924 = fmul double %908, %885
  %925 = fmul double 3.000000e+00, %889
  %926 = fmul double %925, %921
  %927 = fmul double 2.000000e+00, %922
  %928 = fadd double %926, %927
  %929 = fmul double %928, %889
  %930 = fadd double %929, %923
  %931 = fmul double -2.000000e+00, %930
  %932 = fmul double %931, %895
  %933 = sext i32 %846 to i64
  %934 = getelementptr inbounds %class.Vector* %267, i64 %933
  %935 = fmul double %932, %852
  %936 = fmul double %935, %852
  %937 = fadd double %fullElectVirial_xx.2, %936
  %938 = fmul double %935, %857
  %939 = fadd double %fullElectVirial_xy.2, %938
  %940 = fmul double %935, %863
  %941 = fadd double %fullElectVirial_xz.2, %940
  %942 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %943 = load double* %942, align 8
  %944 = fadd double %943, %935
  store double %944, double* %942, align 8
  %945 = getelementptr inbounds %class.Vector* %934, i32 0, i32 0
  %946 = load double* %945, align 8
  %947 = fsub double %946, %935
  store double %947, double* %945, align 8
  %948 = fmul double %932, %857
  %949 = fmul double %948, %857
  %950 = fadd double %fullElectVirial_yy.2, %949
  %951 = fmul double %948, %863
  %952 = fadd double %fullElectVirial_yz.2, %951
  %953 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %954 = load double* %953, align 8
  %955 = fadd double %954, %948
  store double %955, double* %953, align 8
  %956 = getelementptr inbounds %class.Vector* %934, i32 0, i32 1
  %957 = load double* %956, align 8
  %958 = fsub double %957, %948
  store double %958, double* %956, align 8
  %959 = fmul double %932, %863
  %960 = fmul double %959, %863
  %961 = fadd double %fullElectVirial_zz.2, %960
  %962 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %963 = load double* %962, align 8
  %964 = fadd double %963, %959
  store double %964, double* %962, align 8
  %965 = getelementptr inbounds %class.Vector* %934, i32 0, i32 2
  %966 = load double* %965, align 8
  %967 = fsub double %966, %959
  store double %967, double* %965, align 8
  br label %968

; <label>:968                                     ; preds = %843
  %969 = add nsw i32 %k18.2, 1
  br label %841

; <label>:970                                     ; preds = %841
  %971 = ptrtoint i32* %plix.0 to i64
  %972 = ptrtoint i32* %247 to i64
  %973 = sub i64 %971, %972
  %974 = sdiv exact i64 %973, 4
  %975 = trunc i64 %974 to i32
  br label %976

; <label>:976                                     ; preds = %1099, %970
  %k18.3 = phi i32 [ 0, %970 ], [ %1100, %1099 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %970 ], [ %1092, %1099 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %970 ], [ %1083, %1099 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %970 ], [ %1081, %1099 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %970 ], [ %1072, %1099 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %970 ], [ %1070, %1099 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %970 ], [ %1068, %1099 ]
  %977 = icmp slt i32 %k18.3, %975
  br i1 %977, label %978, label %1101

; <label>:978                                     ; preds = %976
  %979 = sext i32 %k18.3 to i64
  %980 = getelementptr inbounds i32* %247, i64 %979
  %981 = load i32* %980, align 4
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds %struct.CompAtom* %34, i64 %982
  %984 = getelementptr inbounds %struct.CompAtom* %983, i32 0, i32 0
  %985 = getelementptr inbounds %class.Vector* %984, i32 0, i32 0
  %986 = load double* %985, align 8
  %987 = fsub double %301, %986
  %988 = fmul double %987, %987
  %989 = getelementptr inbounds %struct.CompAtom* %983, i32 0, i32 0
  %990 = getelementptr inbounds %class.Vector* %989, i32 0, i32 1
  %991 = load double* %990, align 8
  %992 = fsub double %304, %991
  %993 = fmul double %992, %992
  %994 = fadd double %988, %993
  %995 = getelementptr inbounds %struct.CompAtom* %983, i32 0, i32 0
  %996 = getelementptr inbounds %class.Vector* %995, i32 0, i32 2
  %997 = load double* %996, align 8
  %998 = fsub double %307, %997
  %999 = fmul double %998, %998
  %1000 = fadd double %994, %999
  %1001 = fptrunc double %1000 to float
  %1002 = bitcast %union.anon.83* %r2f51 to float*
  store float %1001, float* %1002, align 4
  %1003 = bitcast %union.anon.83* %r2f51 to i32*
  %1004 = load i32* %1003, align 4
  %1005 = ashr i32 %1004, 17
  %1006 = add nsw i32 %1005, %22
  %1007 = mul nsw i32 16, %1006
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds double* %14, i64 %1008
  %1010 = getelementptr inbounds double* %1009, i64 8
  %1011 = getelementptr inbounds double* %1010, i64 4
  %1012 = getelementptr inbounds double* %1011, i64 0
  %1013 = load double* %1012, align 8
  %1014 = bitcast %union.anon.83* %r2f51 to i32*
  %1015 = load i32* %1014, align 4
  %1016 = and i32 %1015, -131072
  store i32 %1016, i32* %1014, align 4
  %1017 = getelementptr inbounds %struct.CompAtom* %983, i32 0, i32 1
  %1018 = load float* %1017, align 4
  %1019 = fpext float %1018 to double
  %1020 = fmul double %517, %1019
  %1021 = bitcast %union.anon.83* %r2f51 to float*
  %1022 = load float* %1021, align 4
  %1023 = fpext float %1022 to double
  %1024 = fsub double %1000, %1023
  %1025 = getelementptr inbounds %struct.CompAtom* %983, i32 0, i32 2
  %1026 = load i32* %1025, align 4
  %1027 = lshr i32 %1026, 28
  %1028 = zext i32 %1027 to i64
  %1029 = getelementptr inbounds double* %511, i64 %1028
  %1030 = load double* %1029, align 8
  %1031 = getelementptr inbounds double* %1011, i64 1
  %1032 = load double* %1031, align 8
  %1033 = getelementptr inbounds double* %1011, i64 2
  %1034 = load double* %1033, align 8
  %1035 = getelementptr inbounds double* %1011, i64 3
  %1036 = load double* %1035, align 8
  %1037 = mul nsw i32 4, %1006
  %1038 = sext i32 %1037 to i64
  %1039 = getelementptr inbounds double* %15, i64 %1038
  %1040 = getelementptr inbounds double* %1039, i64 0
  %1041 = load double* %1040, align 8
  %1042 = fsub double %1013, %1041
  %1043 = getelementptr inbounds double* %1039, i64 1
  %1044 = load double* %1043, align 8
  %1045 = fsub double %1032, %1044
  %1046 = getelementptr inbounds double* %1039, i64 2
  %1047 = load double* %1046, align 8
  %1048 = fsub double %1034, %1047
  %1049 = getelementptr inbounds double* %1039, i64 3
  %1050 = load double* %1049, align 8
  %1051 = fsub double %1036, %1050
  %1052 = fmul double %1051, %1020
  %1053 = fmul double %1048, %1020
  %1054 = fmul double %1045, %1020
  %1055 = fmul double %1042, %1020
  %1056 = fmul double 3.000000e+00, %1024
  %1057 = fmul double %1056, %1052
  %1058 = fmul double 2.000000e+00, %1053
  %1059 = fadd double %1057, %1058
  %1060 = fmul double %1059, %1024
  %1061 = fadd double %1060, %1054
  %1062 = fmul double -2.000000e+00, %1061
  %1063 = fmul double %1062, %1030
  %1064 = sext i32 %981 to i64
  %1065 = getelementptr inbounds %class.Vector* %267, i64 %1064
  %1066 = fmul double %1063, %987
  %1067 = fmul double %1066, %987
  %1068 = fadd double %fullElectVirial_xx.3, %1067
  %1069 = fmul double %1066, %992
  %1070 = fadd double %fullElectVirial_xy.3, %1069
  %1071 = fmul double %1066, %998
  %1072 = fadd double %fullElectVirial_xz.3, %1071
  %1073 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %1074 = load double* %1073, align 8
  %1075 = fadd double %1074, %1066
  store double %1075, double* %1073, align 8
  %1076 = getelementptr inbounds %class.Vector* %1065, i32 0, i32 0
  %1077 = load double* %1076, align 8
  %1078 = fsub double %1077, %1066
  store double %1078, double* %1076, align 8
  %1079 = fmul double %1063, %992
  %1080 = fmul double %1079, %992
  %1081 = fadd double %fullElectVirial_yy.3, %1080
  %1082 = fmul double %1079, %998
  %1083 = fadd double %fullElectVirial_yz.3, %1082
  %1084 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %1085 = load double* %1084, align 8
  %1086 = fadd double %1085, %1079
  store double %1086, double* %1084, align 8
  %1087 = getelementptr inbounds %class.Vector* %1065, i32 0, i32 1
  %1088 = load double* %1087, align 8
  %1089 = fsub double %1088, %1079
  store double %1089, double* %1087, align 8
  %1090 = fmul double %1063, %998
  %1091 = fmul double %1090, %998
  %1092 = fadd double %fullElectVirial_zz.3, %1091
  %1093 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %1094 = load double* %1093, align 8
  %1095 = fadd double %1094, %1090
  store double %1095, double* %1093, align 8
  %1096 = getelementptr inbounds %class.Vector* %1065, i32 0, i32 2
  %1097 = load double* %1096, align 8
  %1098 = fsub double %1097, %1090
  store double %1098, double* %1096, align 8
  br label %1099

; <label>:1099                                    ; preds = %978
  %1100 = add nsw i32 %k18.3, 1
  br label %976

; <label>:1101                                    ; preds = %976
  br label %1102

; <label>:1102                                    ; preds = %1101, %486, %337
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %337 ], [ %pairlistindex.1, %1101 ], [ %465, %486 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %337 ], [ %pairlistoffset.1, %1101 ], [ 0, %486 ]
  %pairCount.3 = phi i32 [ %333, %337 ], [ %pairCount.2, %1101 ], [ %pairCount.1, %486 ]
  %i.2 = phi i32 [ %339, %337 ], [ %i.1, %1101 ], [ %489, %486 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %337 ], [ %fullElectVirial_zz.3, %1101 ], [ %fullElectVirial_zz.0, %486 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %337 ], [ %fullElectVirial_yz.3, %1101 ], [ %fullElectVirial_yz.0, %486 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %337 ], [ %fullElectVirial_yy.3, %1101 ], [ %fullElectVirial_yy.0, %486 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %337 ], [ %fullElectVirial_xz.3, %1101 ], [ %fullElectVirial_xz.0, %486 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %337 ], [ %fullElectVirial_xy.3, %1101 ], [ %fullElectVirial_xy.0, %486 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %337 ], [ %fullElectVirial_xx.3, %1101 ], [ %fullElectVirial_xx.0, %486 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %337 ], [ %719, %1101 ], [ %exclChecksum.0, %486 ]
  %1103 = add nsw i32 %i.2, 1
  br label %281

; <label>:1104                                    ; preds = %281
  %1105 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1106 = icmp ne i32* %48, %1105
  br i1 %1106, label %1107, label %1112

; <label>:1107                                    ; preds = %1104
  %1108 = icmp eq i32* %48, null
  br i1 %1108, label %1111, label %1109

; <label>:1109                                    ; preds = %1107
  %1110 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1110) #8
  br label %1111

; <label>:1111                                    ; preds = %1109, %1107
  br label %1112

; <label>:1112                                    ; preds = %1111, %1104
  %1113 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1114 = icmp ne i32* %62, %1113
  br i1 %1114, label %1115, label %1120

; <label>:1115                                    ; preds = %1112
  %1116 = icmp eq i32* %62, null
  br i1 %1116, label %1119, label %1117

; <label>:1117                                    ; preds = %1115
  %1118 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1118) #8
  br label %1119

; <label>:1119                                    ; preds = %1117, %1115
  br label %1120

; <label>:1120                                    ; preds = %1119, %1112
  %1121 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1122 = icmp ne i32* %76, %1121
  br i1 %1122, label %1123, label %1128

; <label>:1123                                    ; preds = %1120
  %1124 = icmp eq i32* %76, null
  br i1 %1124, label %1127, label %1125

; <label>:1125                                    ; preds = %1123
  %1126 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1126) #8
  br label %1127

; <label>:1127                                    ; preds = %1125, %1123
  br label %1128

; <label>:1128                                    ; preds = %1127, %1120
  %1129 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1130 = icmp ne i32* %205, %1129
  br i1 %1130, label %1131, label %1136

; <label>:1131                                    ; preds = %1128
  %1132 = icmp eq i32* %205, null
  br i1 %1132, label %1135, label %1133

; <label>:1133                                    ; preds = %1131
  %1134 = bitcast i32* %205 to i8*
  call void @_ZdaPv(i8* %1134) #8
  br label %1135

; <label>:1135                                    ; preds = %1133, %1131
  br label %1136

; <label>:1136                                    ; preds = %1135, %1128
  %1137 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1138 = icmp ne i32* %219, %1137
  br i1 %1138, label %1139, label %1144

; <label>:1139                                    ; preds = %1136
  %1140 = icmp eq i32* %219, null
  br i1 %1140, label %1143, label %1141

; <label>:1141                                    ; preds = %1139
  %1142 = bitcast i32* %219 to i8*
  call void @_ZdaPv(i8* %1142) #8
  br label %1143

; <label>:1143                                    ; preds = %1141, %1139
  br label %1144

; <label>:1144                                    ; preds = %1143, %1136
  %1145 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1146 = icmp ne i32* %233, %1145
  br i1 %1146, label %1147, label %1152

; <label>:1147                                    ; preds = %1144
  %1148 = icmp eq i32* %233, null
  br i1 %1148, label %1151, label %1149

; <label>:1149                                    ; preds = %1147
  %1150 = bitcast i32* %233 to i8*
  call void @_ZdaPv(i8* %1150) #8
  br label %1151

; <label>:1151                                    ; preds = %1149, %1147
  br label %1152

; <label>:1152                                    ; preds = %1151, %1144
  %1153 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1154 = icmp ne i32* %247, %1153
  br i1 %1154, label %1155, label %1160

; <label>:1155                                    ; preds = %1152
  %1156 = icmp eq i32* %247, null
  br i1 %1156, label %1159, label %1157

; <label>:1157                                    ; preds = %1155
  %1158 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %1158) #8
  br label %1159

; <label>:1159                                    ; preds = %1157, %1155
  br label %1160

; <label>:1160                                    ; preds = %1159, %1152
  %1161 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1162 = icmp ne i32* %261, %1161
  br i1 %1162, label %1163, label %1168

; <label>:1163                                    ; preds = %1160
  %1164 = icmp eq i32* %261, null
  br i1 %1164, label %1167, label %1165

; <label>:1165                                    ; preds = %1163
  %1166 = bitcast i32* %261 to i8*
  call void @_ZdaPv(i8* %1166) #8
  br label %1167

; <label>:1167                                    ; preds = %1165, %1163
  br label %1168

; <label>:1168                                    ; preds = %1167, %1160
  %1169 = sitofp i32 %exclChecksum.0 to double
  %1170 = getelementptr inbounds double* %6, i64 22
  %1171 = load double* %1170, align 8
  %1172 = fadd double %1171, %1169
  store double %1172, double* %1170, align 8
  %1173 = getelementptr inbounds double* %6, i64 12
  %1174 = load double* %1173, align 8
  %1175 = fadd double %1174, %fullElectVirial_xx.0
  store double %1175, double* %1173, align 8
  %1176 = getelementptr inbounds double* %6, i64 13
  %1177 = load double* %1176, align 8
  %1178 = fadd double %1177, %fullElectVirial_xy.0
  store double %1178, double* %1176, align 8
  %1179 = getelementptr inbounds double* %6, i64 14
  %1180 = load double* %1179, align 8
  %1181 = fadd double %1180, %fullElectVirial_xz.0
  store double %1181, double* %1179, align 8
  %1182 = getelementptr inbounds double* %6, i64 15
  %1183 = load double* %1182, align 8
  %1184 = fadd double %1183, %fullElectVirial_xy.0
  store double %1184, double* %1182, align 8
  %1185 = getelementptr inbounds double* %6, i64 16
  %1186 = load double* %1185, align 8
  %1187 = fadd double %1186, %fullElectVirial_yy.0
  store double %1187, double* %1185, align 8
  %1188 = getelementptr inbounds double* %6, i64 17
  %1189 = load double* %1188, align 8
  %1190 = fadd double %1189, %fullElectVirial_yz.0
  store double %1190, double* %1188, align 8
  %1191 = getelementptr inbounds double* %6, i64 18
  %1192 = load double* %1191, align 8
  %1193 = fadd double %1192, %fullElectVirial_xz.0
  store double %1193, double* %1191, align 8
  %1194 = getelementptr inbounds double* %6, i64 19
  %1195 = load double* %1194, align 8
  %1196 = fadd double %1195, %fullElectVirial_yz.0
  store double %1196, double* %1194, align 8
  %1197 = getelementptr inbounds double* %6, i64 20
  %1198 = load double* %1197, align 8
  %1199 = fadd double %1198, %fullElectVirial_zz.0
  store double %1199, double* %1197, align 8
  br label %1200

; <label>:1200                                    ; preds = %1168, %180, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil35calc_pair_energy_slow_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.84, align 4
  %r2f29 = alloca %union.anon.85, align 4
  %r2f52 = alloca %union.anon.86, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1227

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %182

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  br label %136

; <label>:136                                     ; preds = %152, %135
  %all_fixed.2 = phi i32 [ %all_fixed.0, %135 ], [ %all_fixed.3, %152 ]
  %i.0 = phi i32 [ 0, %135 ], [ %153, %152 ]
  %137 = icmp ne i32 %all_fixed.2, 0
  br i1 %137, label %138, label %140

; <label>:138                                     ; preds = %136
  %139 = icmp slt i32 %i.0, %25
  br label %140

; <label>:140                                     ; preds = %138, %136
  %141 = phi i1 [ false, %136 ], [ %139, %138 ]
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %140
  %143 = sext i32 %i.0 to i64
  %144 = getelementptr inbounds %struct.CompAtom* %31, i64 %143
  %145 = getelementptr inbounds %struct.CompAtom* %144, i32 0, i32 2
  %146 = load i32* %145, align 4
  %147 = lshr i32 %146, 26
  %148 = and i32 %147, 1
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %151, label %150

; <label>:150                                     ; preds = %142
  br label %151

; <label>:151                                     ; preds = %150, %142
  %all_fixed.3 = phi i32 [ %all_fixed.2, %142 ], [ 0, %150 ]
  br label %152

; <label>:152                                     ; preds = %151
  %153 = add nsw i32 %i.0, 1
  br label %136

; <label>:154                                     ; preds = %140
  %155 = icmp ne i32 %all_fixed.2, 0
  br i1 %155, label %156, label %181

; <label>:156                                     ; preds = %154
  %157 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %158 = icmp ne i32* %48, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %48, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  %165 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %166 = icmp ne i32* %62, %165
  br i1 %166, label %167, label %172

; <label>:167                                     ; preds = %164
  %168 = icmp eq i32* %62, null
  br i1 %168, label %171, label %169

; <label>:169                                     ; preds = %167
  %170 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %170) #8
  br label %171

; <label>:171                                     ; preds = %169, %167
  br label %172

; <label>:172                                     ; preds = %171, %164
  %173 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %174 = icmp ne i32* %76, %173
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %172
  %176 = icmp eq i32* %76, null
  br i1 %176, label %179, label %177

; <label>:177                                     ; preds = %175
  %178 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %178) #8
  br label %179

; <label>:179                                     ; preds = %177, %175
  br label %180

; <label>:180                                     ; preds = %179, %172
  br label %1227

; <label>:181                                     ; preds = %154
  br label %182

; <label>:182                                     ; preds = %181, %111
  %fixg.2 = phi i32 [ %fixg.0, %181 ], [ 0, %111 ]
  %183 = icmp ne i32 %fixg.2, 0
  br i1 %183, label %184, label %191

; <label>:184                                     ; preds = %182
  %185 = sub nsw i32 %fixg.2, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32* %62, i64 %186
  %188 = load i32* %187, align 4
  %189 = sext i32 %fixg.2 to i64
  %190 = getelementptr inbounds i32* %62, i64 %189
  store i32 %188, i32* %190, align 4
  br label %191

; <label>:191                                     ; preds = %184, %182
  %192 = icmp slt i32 %28, 1000
  br i1 %192, label %193, label %195

; <label>:193                                     ; preds = %191
  %194 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %204

; <label>:195                                     ; preds = %191
  %196 = add nsw i32 %28, 5
  %197 = sext i32 %196 to i64
  %198 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %197, i64 4)
  %199 = extractvalue { i64, i1 } %198, 1
  %200 = extractvalue { i64, i1 } %198, 0
  %201 = select i1 %199, i64 -1, i64 %200
  %202 = call noalias i8* @_Znam(i64 %201) #9
  %203 = bitcast i8* %202 to i32*
  br label %204

; <label>:204                                     ; preds = %195, %193
  %205 = phi i32* [ %194, %193 ], [ %203, %195 ]
  %206 = icmp slt i32 %28, 1000
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %204
  %208 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %218

; <label>:209                                     ; preds = %204
  %210 = add nsw i32 %28, 5
  %211 = sext i32 %210 to i64
  %212 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %211, i64 4)
  %213 = extractvalue { i64, i1 } %212, 1
  %214 = extractvalue { i64, i1 } %212, 0
  %215 = select i1 %213, i64 -1, i64 %214
  %216 = call noalias i8* @_Znam(i64 %215) #9
  %217 = bitcast i8* %216 to i32*
  br label %218

; <label>:218                                     ; preds = %209, %207
  %219 = phi i32* [ %208, %207 ], [ %217, %209 ]
  %220 = icmp slt i32 %28, 1000
  br i1 %220, label %221, label %223

; <label>:221                                     ; preds = %218
  %222 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %232

; <label>:223                                     ; preds = %218
  %224 = add nsw i32 %28, 5
  %225 = sext i32 %224 to i64
  %226 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %225, i64 4)
  %227 = extractvalue { i64, i1 } %226, 1
  %228 = extractvalue { i64, i1 } %226, 0
  %229 = select i1 %227, i64 -1, i64 %228
  %230 = call noalias i8* @_Znam(i64 %229) #9
  %231 = bitcast i8* %230 to i32*
  br label %232

; <label>:232                                     ; preds = %223, %221
  %233 = phi i32* [ %222, %221 ], [ %231, %223 ]
  %234 = icmp slt i32 %28, 1000
  br i1 %234, label %235, label %237

; <label>:235                                     ; preds = %232
  %236 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %246

; <label>:237                                     ; preds = %232
  %238 = add nsw i32 %28, 5
  %239 = sext i32 %238 to i64
  %240 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %239, i64 4)
  %241 = extractvalue { i64, i1 } %240, 1
  %242 = extractvalue { i64, i1 } %240, 0
  %243 = select i1 %241, i64 -1, i64 %242
  %244 = call noalias i8* @_Znam(i64 %243) #9
  %245 = bitcast i8* %244 to i32*
  br label %246

; <label>:246                                     ; preds = %237, %235
  %247 = phi i32* [ %236, %235 ], [ %245, %237 ]
  %248 = icmp slt i32 %28, 1000
  br i1 %248, label %249, label %251

; <label>:249                                     ; preds = %246
  %250 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %260

; <label>:251                                     ; preds = %246
  %252 = add nsw i32 %28, 5
  %253 = sext i32 %252 to i64
  %254 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %253, i64 4)
  %255 = extractvalue { i64, i1 } %254, 1
  %256 = extractvalue { i64, i1 } %254, 0
  %257 = select i1 %255, i64 -1, i64 %256
  %258 = call noalias i8* @_Znam(i64 %257) #9
  %259 = bitcast i8* %258 to i32*
  br label %260

; <label>:260                                     ; preds = %251, %249
  %261 = phi i32* [ %250, %249 ], [ %259, %251 ]
  %262 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %263 = getelementptr inbounds [2 x %class.Vector*]* %262, i32 0, i64 0
  %264 = load %class.Vector** %263, align 8
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 1
  %267 = load %class.Vector** %266, align 8
  %268 = mul nsw i32 %25, %28
  %269 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %270 = load i32* %269, align 4
  %271 = mul nsw i32 %268, %270
  %272 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %273 = load i32* %272, align 4
  %274 = sdiv i32 %271, %273
  %275 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %276 = load i32* %275, align 4
  %277 = mul nsw i32 %268, %276
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %279 = load i32* %278, align 4
  %280 = sdiv i32 %277, %279
  br label %281

; <label>:281                                     ; preds = %1126, %260
  %pairlistindex.0 = phi i32 [ 0, %260 ], [ %pairlistindex.2, %1126 ]
  %pairlistoffset.0 = phi i32 [ 0, %260 ], [ %pairlistoffset.2, %1126 ]
  %pairCount.0 = phi i32 [ 0, %260 ], [ %pairCount.3, %1126 ]
  %i.1 = phi i32 [ 0, %260 ], [ %1127, %1126 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_zz.4, %1126 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yz.4, %1126 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yy.4, %1126 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xz.4, %1126 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xy.4, %1126 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xx.4, %1126 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectEnergy.4, %1126 ]
  %exclChecksum.0 = phi i32 [ 0, %260 ], [ %exclChecksum.9, %1126 ]
  %282 = icmp slt i32 %i.1, %25
  br i1 %282, label %283, label %1128

; <label>:283                                     ; preds = %281
  %284 = sext i32 %i.1 to i64
  %285 = getelementptr inbounds %struct.CompAtom* %31, i64 %284
  %286 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %287 = load i32* %286, align 4
  %288 = and i32 %287, 4194303
  %289 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %288)
  %290 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 0
  %291 = load i32* %290, align 4
  %292 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 1
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 2
  %295 = load i8** %294, align 8
  %296 = sext i32 %291 to i64
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8* %295, i64 %297
  %299 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %300 = getelementptr inbounds %class.Vector* %299, i32 0, i32 0
  %301 = load double* %300, align 8
  %302 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %303 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %304 = load double* %303, align 8
  %305 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %306 = getelementptr inbounds %class.Vector* %305, i32 0, i32 2
  %307 = load double* %306, align 8
  %308 = sext i32 %i.1 to i64
  %309 = getelementptr inbounds %class.Vector* %264, i64 %308
  %310 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %311 = load i32* %310, align 4
  %312 = lshr i32 %311, 22
  %313 = and i32 %312, 7
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %321, label %315

; <label>:315                                     ; preds = %283
  %316 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %317 = load i32* %316, align 4
  %318 = lshr i32 %317, 25
  %319 = and i32 %318, 1
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %321, label %491

; <label>:321                                     ; preds = %315, %283
  %322 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %323 = load i32* %322, align 4
  %324 = lshr i32 %323, 22
  %325 = and i32 %324, 7
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %341

; <label>:327                                     ; preds = %321
  %328 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %329 = load i32* %328, align 4
  %330 = lshr i32 %329, 22
  %331 = and i32 %330, 7
  %332 = mul nsw i32 %331, %28
  %333 = add nsw i32 %pairCount.0, %332
  %334 = icmp slt i32 %pairCount.0, %274
  br i1 %334, label %337, label %335

; <label>:335                                     ; preds = %327
  %336 = icmp sge i32 %pairCount.0, %280
  br i1 %336, label %337, label %340

; <label>:337                                     ; preds = %335, %327
  %338 = sub nsw i32 %331, 1
  %339 = add nsw i32 %i.1, %338
  br label %1126

; <label>:340                                     ; preds = %335
  br label %341

; <label>:341                                     ; preds = %340, %321
  %pairCount.1 = phi i32 [ %333, %340 ], [ %pairCount.0, %321 ]
  %342 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %350

; <label>:344                                     ; preds = %341
  %345 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 27
  %348 = and i32 %347, 1
  %349 = icmp ne i32 %348, 0
  br label %350

; <label>:350                                     ; preds = %344, %341
  %351 = phi i1 [ false, %341 ], [ %349, %344 ]
  %352 = zext i1 %351 to i32
  %353 = sext i32 0 to i64
  %354 = getelementptr inbounds i32* %205, i64 %353
  %355 = icmp ne i32 %352, 0
  br i1 %355, label %356, label %357

; <label>:356                                     ; preds = %350
  br label %358

; <label>:357                                     ; preds = %350
  br label %358

; <label>:358                                     ; preds = %357, %356
  %359 = phi i32* [ %62, %356 ], [ %48, %357 ]
  %360 = icmp ne i32 %352, 0
  br i1 %360, label %361, label %362

; <label>:361                                     ; preds = %358
  br label %363

; <label>:362                                     ; preds = %358
  br label %363

; <label>:363                                     ; preds = %362, %361
  %364 = phi i32 [ %fixg.2, %361 ], [ %g.0, %362 ]
  %365 = icmp slt i32 0, %364
  br i1 %365, label %366, label %460

; <label>:366                                     ; preds = %363
  %367 = sext i32 0 to i64
  %368 = getelementptr inbounds i32* %359, i64 %367
  %369 = load i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds %struct.CompAtom* %34, i64 %370
  %372 = getelementptr inbounds %struct.CompAtom* %371, i32 0, i32 0
  %373 = getelementptr inbounds %class.Vector* %372, i32 0, i32 0
  %374 = load double* %373, align 8
  %375 = sext i32 %369 to i64
  %376 = getelementptr inbounds %struct.CompAtom* %34, i64 %375
  %377 = getelementptr inbounds %struct.CompAtom* %376, i32 0, i32 0
  %378 = getelementptr inbounds %class.Vector* %377, i32 0, i32 1
  %379 = load double* %378, align 8
  %380 = sext i32 %369 to i64
  %381 = getelementptr inbounds %struct.CompAtom* %34, i64 %380
  %382 = getelementptr inbounds %struct.CompAtom* %381, i32 0, i32 0
  %383 = getelementptr inbounds %class.Vector* %382, i32 0, i32 2
  %384 = load double* %383, align 8
  br label %385

; <label>:385                                     ; preds = %418, %366
  %g.3 = phi i32 [ 0, %366 ], [ %388, %418 ]
  %gli.0 = phi i32* [ %76, %366 ], [ %gli.1, %418 ]
  %j2.0 = phi i32 [ %369, %366 ], [ %391, %418 ]
  %p_j_x.0 = phi double [ %374, %366 ], [ %398, %418 ]
  %p_j_y.0 = phi double [ %379, %366 ], [ %406, %418 ]
  %p_j_z.0 = phi double [ %384, %366 ], [ %414, %418 ]
  %386 = icmp slt i32 %g.3, %364
  br i1 %386, label %387, label %419

; <label>:387                                     ; preds = %385
  %388 = add nsw i32 %g.3, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32* %359, i64 %389
  %391 = load i32* %390, align 4
  %392 = fsub double %301, %p_j_x.0
  %393 = fmul double %392, %392
  %394 = sext i32 %391 to i64
  %395 = getelementptr inbounds %struct.CompAtom* %34, i64 %394
  %396 = getelementptr inbounds %struct.CompAtom* %395, i32 0, i32 0
  %397 = getelementptr inbounds %class.Vector* %396, i32 0, i32 0
  %398 = load double* %397, align 8
  %399 = fsub double %304, %p_j_y.0
  %400 = fmul double %399, %399
  %401 = fadd double %393, %400
  %402 = sext i32 %391 to i64
  %403 = getelementptr inbounds %struct.CompAtom* %34, i64 %402
  %404 = getelementptr inbounds %struct.CompAtom* %403, i32 0, i32 0
  %405 = getelementptr inbounds %class.Vector* %404, i32 0, i32 1
  %406 = load double* %405, align 8
  %407 = fsub double %307, %p_j_z.0
  %408 = fmul double %407, %407
  %409 = fadd double %401, %408
  %410 = sext i32 %391 to i64
  %411 = getelementptr inbounds %struct.CompAtom* %34, i64 %410
  %412 = getelementptr inbounds %struct.CompAtom* %411, i32 0, i32 0
  %413 = getelementptr inbounds %class.Vector* %412, i32 0, i32 2
  %414 = load double* %413, align 8
  %415 = fcmp ole double %409, %8
  br i1 %415, label %416, label %418

; <label>:416                                     ; preds = %387
  store i32 %j2.0, i32* %gli.0, align 4
  %417 = getelementptr inbounds i32* %gli.0, i32 1
  br label %418

; <label>:418                                     ; preds = %416, %387
  %gli.1 = phi i32* [ %417, %416 ], [ %gli.0, %387 ]
  br label %385

; <label>:419                                     ; preds = %385
  %420 = ptrtoint i32* %gli.0 to i64
  %421 = ptrtoint i32* %76 to i64
  %422 = sub i64 %420, %421
  %423 = sdiv exact i64 %422, 4
  %424 = trunc i64 %423 to i32
  br label %425

; <label>:425                                     ; preds = %457, %419
  %pli.0 = phi i32* [ %354, %419 ], [ %456, %457 ]
  %h.0 = phi i32 [ 0, %419 ], [ %458, %457 ]
  %426 = icmp slt i32 %h.0, %424
  br i1 %426, label %427, label %459

; <label>:427                                     ; preds = %425
  %428 = sext i32 %h.0 to i64
  %429 = getelementptr inbounds i32* %76, i64 %428
  %430 = load i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds %struct.CompAtom* %34, i64 %431
  %433 = getelementptr inbounds %struct.CompAtom* %432, i32 0, i32 2
  %434 = load i32* %433, align 4
  %435 = lshr i32 %434, 25
  %436 = and i32 %435, 1
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %439

; <label>:438                                     ; preds = %427
  br label %446

; <label>:439                                     ; preds = %427
  %440 = sext i32 %430 to i64
  %441 = getelementptr inbounds %struct.CompAtom* %34, i64 %440
  %442 = getelementptr inbounds %struct.CompAtom* %441, i32 0, i32 2
  %443 = load i32* %442, align 4
  %444 = lshr i32 %443, 22
  %445 = and i32 %444, 7
  br label %446

; <label>:446                                     ; preds = %439, %438
  %447 = phi i32 [ 1, %438 ], [ %445, %439 ]
  %448 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %430, i32* %448, align 4
  %449 = add nsw i32 %430, 1
  %450 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %449, i32* %450, align 4
  %451 = add nsw i32 %430, 2
  %452 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %430, 3
  %454 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %453, i32* %454, align 4
  %455 = sext i32 %447 to i64
  %456 = getelementptr inbounds i32* %pli.0, i64 %455
  br label %457

; <label>:457                                     ; preds = %446
  %458 = add nsw i32 %h.0, 1
  br label %425

; <label>:459                                     ; preds = %425
  br label %460

; <label>:460                                     ; preds = %459, %363
  %pli.1 = phi i32* [ %pli.0, %459 ], [ %354, %363 ]
  %461 = ptrtoint i32* %pli.1 to i64
  %462 = ptrtoint i32* %205 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  %466 = icmp ne i32 %465, 0
  br i1 %466, label %467, label %474

; <label>:467                                     ; preds = %460
  %468 = sub nsw i32 %465, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i32* %205, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %465 to i64
  %473 = getelementptr inbounds i32* %205, i64 %472
  store i32 %471, i32* %473, align 4
  br label %490

; <label>:474                                     ; preds = %460
  %475 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %476 = load i32* %475, align 4
  %477 = lshr i32 %476, 25
  %478 = and i32 %477, 1
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %480, label %481

; <label>:480                                     ; preds = %474
  br label %486

; <label>:481                                     ; preds = %474
  %482 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %483 = load i32* %482, align 4
  %484 = lshr i32 %483, 22
  %485 = and i32 %484, 7
  br label %486

; <label>:486                                     ; preds = %481, %480
  %487 = phi i32 [ 1, %480 ], [ %485, %481 ]
  %488 = sub nsw i32 %487, 1
  %489 = add nsw i32 %i.1, %488
  br label %1126

; <label>:490                                     ; preds = %467
  br label %491

; <label>:491                                     ; preds = %490, %315
  %pairlistindex.1 = phi i32 [ %465, %490 ], [ %pairlistindex.0, %315 ]
  %pairlistoffset.1 = phi i32 [ 0, %490 ], [ %pairlistoffset.0, %315 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %490 ], [ %pairCount.0, %315 ]
  %492 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %493 = icmp ne i32 %492, 0
  br i1 %493, label %494, label %500

; <label>:494                                     ; preds = %491
  %495 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %496 = load i32* %495, align 4
  %497 = lshr i32 %496, 26
  %498 = and i32 %497, 1
  %499 = icmp ne i32 %498, 0
  br label %500

; <label>:500                                     ; preds = %494, %491
  %501 = phi i1 [ false, %491 ], [ %499, %494 ]
  %502 = zext i1 %501 to i32
  %503 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %504 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %505 = add nsw i32 %504, 1
  %506 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 28
  %509 = mul nsw i32 %505, %508
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds double* %503, i64 %510
  %512 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 1
  %513 = load float* %512, align 4
  %514 = fpext float %513 to double
  %515 = fmul double 3.320636e+02, %514
  %516 = fmul double %515, %16
  %517 = fmul double %516, %9
  %518 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %519 = load i32* %518, align 4
  %520 = and i32 %519, 4194303
  %521 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %520)
  %522 = zext i16 %521 to i32
  %523 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %522)
  %524 = icmp ne i32 %502, 0
  br i1 %524, label %525, label %587

; <label>:525                                     ; preds = %500
  br label %526

; <label>:526                                     ; preds = %584, %525
  %pli4.0 = phi i32* [ %219, %525 ], [ %pli4.2, %584 ]
  %plin.0 = phi i32* [ %233, %525 ], [ %plin.2, %584 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %525 ], [ %585, %584 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %525 ], [ %exclChecksum.3, %584 ]
  %527 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %527, label %528, label %586

; <label>:528                                     ; preds = %526
  %529 = sext i32 %k.0 to i64
  %530 = getelementptr inbounds i32* %205, i64 %529
  %531 = load i32* %530, align 4
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %34, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 0
  %536 = load double* %535, align 8
  %537 = fsub double %301, %536
  %538 = fmul double %537, %537
  %539 = sext i32 %531 to i64
  %540 = getelementptr inbounds %struct.CompAtom* %34, i64 %539
  %541 = getelementptr inbounds %struct.CompAtom* %540, i32 0, i32 0
  %542 = getelementptr inbounds %class.Vector* %541, i32 0, i32 1
  %543 = load double* %542, align 8
  %544 = fsub double %304, %543
  %545 = fmul double %544, %544
  %546 = fadd double %538, %545
  %547 = sext i32 %531 to i64
  %548 = getelementptr inbounds %struct.CompAtom* %34, i64 %547
  %549 = getelementptr inbounds %struct.CompAtom* %548, i32 0, i32 0
  %550 = getelementptr inbounds %class.Vector* %549, i32 0, i32 2
  %551 = load double* %550, align 8
  %552 = fsub double %307, %551
  %553 = fmul double %552, %552
  %554 = fadd double %546, %553
  %555 = sext i32 %531 to i64
  %556 = getelementptr inbounds %struct.CompAtom* %34, i64 %555
  %557 = getelementptr inbounds %struct.CompAtom* %556, i32 0, i32 2
  %558 = load i32* %557, align 4
  %559 = lshr i32 %558, 26
  %560 = and i32 %559, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %583, label %562

; <label>:562                                     ; preds = %528
  %563 = fcmp ole double %554, %7
  br i1 %563, label %564, label %583

; <label>:564                                     ; preds = %562
  %565 = fcmp ole double %554, %19
  br i1 %565, label %566, label %569

; <label>:566                                     ; preds = %564
  %567 = add nsw i32 %exclChecksum.1, 1
  %568 = icmp ne i32 %567, 0
  br i1 %568, label %583, label %569

; <label>:569                                     ; preds = %566, %564
  %exclChecksum.2 = phi i32 [ %567, %566 ], [ %exclChecksum.1, %564 ]
  %570 = sext i32 %531 to i64
  %571 = getelementptr inbounds %struct.CompAtom* %34, i64 %570
  %572 = getelementptr inbounds %struct.CompAtom* %571, i32 0, i32 2
  %573 = load i32* %572, align 4
  %574 = and i32 %573, 4194303
  %575 = icmp sge i32 %574, %291
  br i1 %575, label %576, label %580

; <label>:576                                     ; preds = %569
  %577 = icmp sle i32 %574, %293
  br i1 %577, label %578, label %580

; <label>:578                                     ; preds = %576
  %579 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %531, i32* %pli4.0, align 4
  br label %582

; <label>:580                                     ; preds = %576, %569
  %581 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %531, i32* %plin.0, align 4
  br label %582

; <label>:582                                     ; preds = %580, %578
  %pli4.1 = phi i32* [ %579, %578 ], [ %pli4.0, %580 ]
  %plin.1 = phi i32* [ %plin.0, %578 ], [ %581, %580 ]
  br label %583

; <label>:583                                     ; preds = %582, %566, %562, %528
  %pli4.2 = phi i32* [ %pli4.0, %528 ], [ %pli4.0, %566 ], [ %pli4.1, %582 ], [ %pli4.0, %562 ]
  %plin.2 = phi i32* [ %plin.0, %528 ], [ %plin.0, %566 ], [ %plin.1, %582 ], [ %plin.0, %562 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %528 ], [ %567, %566 ], [ %exclChecksum.2, %582 ], [ %exclChecksum.1, %562 ]
  br label %584

; <label>:584                                     ; preds = %583
  %585 = add nsw i32 %k.0, 1
  br label %526

; <label>:586                                     ; preds = %526
  br label %666

; <label>:587                                     ; preds = %500
  %588 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %588, label %589, label %665

; <label>:589                                     ; preds = %587
  %590 = sext i32 %pairlistoffset.1 to i64
  %591 = getelementptr inbounds i32* %205, i64 %590
  %592 = load i32* %591, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds %struct.CompAtom* %34, i64 %593
  %595 = getelementptr inbounds %struct.CompAtom* %594, i32 0, i32 0
  %596 = getelementptr inbounds %class.Vector* %595, i32 0, i32 0
  %597 = load double* %596, align 8
  %598 = sext i32 %592 to i64
  %599 = getelementptr inbounds %struct.CompAtom* %34, i64 %598
  %600 = getelementptr inbounds %struct.CompAtom* %599, i32 0, i32 0
  %601 = getelementptr inbounds %class.Vector* %600, i32 0, i32 1
  %602 = load double* %601, align 8
  %603 = sext i32 %592 to i64
  %604 = getelementptr inbounds %struct.CompAtom* %34, i64 %603
  %605 = getelementptr inbounds %struct.CompAtom* %604, i32 0, i32 0
  %606 = getelementptr inbounds %class.Vector* %605, i32 0, i32 2
  %607 = load double* %606, align 8
  %608 = sext i32 %592 to i64
  %609 = getelementptr inbounds %struct.CompAtom* %34, i64 %608
  %610 = getelementptr inbounds %struct.CompAtom* %609, i32 0, i32 2
  %611 = load i32* %610, align 4
  %612 = and i32 %611, 4194303
  br label %613

; <label>:613                                     ; preds = %658, %589
  %pli4.3 = phi i32* [ %219, %589 ], [ %pli4.5, %658 ]
  %plin.3 = phi i32* [ %233, %589 ], [ %plin.5, %658 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %589 ], [ %616, %658 ]
  %j211.0 = phi i32 [ %592, %589 ], [ %619, %658 ]
  %p_j_x12.0 = phi double [ %597, %589 ], [ %626, %658 ]
  %p_j_y13.0 = phi double [ %602, %589 ], [ %634, %658 ]
  %p_j_z14.0 = phi double [ %607, %589 ], [ %642, %658 ]
  %atom215.0 = phi i32 [ %612, %589 ], [ %663, %658 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %589 ], [ %exclChecksum.6, %658 ]
  %614 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %614, label %615, label %664

; <label>:615                                     ; preds = %613
  %616 = add nsw i32 %k10.0, 1
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i32* %205, i64 %617
  %619 = load i32* %618, align 4
  %620 = fsub double %301, %p_j_x12.0
  %621 = fmul double %620, %620
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %34, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = fsub double %304, %p_j_y13.0
  %628 = fmul double %627, %627
  %629 = fadd double %621, %628
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %34, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 1
  %634 = load double* %633, align 8
  %635 = fsub double %307, %p_j_z14.0
  %636 = fmul double %635, %635
  %637 = fadd double %629, %636
  %638 = sext i32 %619 to i64
  %639 = getelementptr inbounds %struct.CompAtom* %34, i64 %638
  %640 = getelementptr inbounds %struct.CompAtom* %639, i32 0, i32 0
  %641 = getelementptr inbounds %class.Vector* %640, i32 0, i32 2
  %642 = load double* %641, align 8
  %643 = fcmp ole double %637, %7
  br i1 %643, label %644, label %658

; <label>:644                                     ; preds = %615
  %645 = fcmp ole double %637, %19
  br i1 %645, label %646, label %649

; <label>:646                                     ; preds = %644
  %647 = add nsw i32 %exclChecksum.4, 1
  %648 = icmp ne i32 %647, 0
  br i1 %648, label %658, label %649

; <label>:649                                     ; preds = %646, %644
  %exclChecksum.5 = phi i32 [ %647, %646 ], [ %exclChecksum.4, %644 ]
  %650 = icmp sge i32 %atom215.0, %291
  br i1 %650, label %651, label %655

; <label>:651                                     ; preds = %649
  %652 = icmp sle i32 %atom215.0, %293
  br i1 %652, label %653, label %655

; <label>:653                                     ; preds = %651
  %654 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %657

; <label>:655                                     ; preds = %651, %649
  %656 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %657

; <label>:657                                     ; preds = %655, %653
  %pli4.4 = phi i32* [ %654, %653 ], [ %pli4.3, %655 ]
  %plin.4 = phi i32* [ %plin.3, %653 ], [ %656, %655 ]
  br label %658

; <label>:658                                     ; preds = %657, %646, %615
  %pli4.5 = phi i32* [ %pli4.3, %646 ], [ %pli4.4, %657 ], [ %pli4.3, %615 ]
  %plin.5 = phi i32* [ %plin.3, %646 ], [ %plin.4, %657 ], [ %plin.3, %615 ]
  %exclChecksum.6 = phi i32 [ %647, %646 ], [ %exclChecksum.5, %657 ], [ %exclChecksum.4, %615 ]
  %659 = sext i32 %619 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %34, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 2
  %662 = load i32* %661, align 4
  %663 = and i32 %662, 4194303
  br label %613

; <label>:664                                     ; preds = %613
  br label %665

; <label>:665                                     ; preds = %664, %587
  %pli4.6 = phi i32* [ %pli4.3, %664 ], [ %219, %587 ]
  %plin.6 = phi i32* [ %plin.3, %664 ], [ %233, %587 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %664 ], [ %exclChecksum.0, %587 ]
  br label %666

; <label>:666                                     ; preds = %665, %586
  %pli4.7 = phi i32* [ %pli4.0, %586 ], [ %pli4.6, %665 ]
  %plin.7 = phi i32* [ %plin.0, %586 ], [ %plin.6, %665 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %586 ], [ %exclChecksum.7, %665 ]
  %667 = ptrtoint i32* %pli4.7 to i64
  %668 = ptrtoint i32* %219 to i64
  %669 = sub i64 %667, %668
  %670 = sdiv exact i64 %669, 4
  %671 = trunc i64 %670 to i32
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %673, label %680

; <label>:673                                     ; preds = %666
  %674 = sub nsw i32 %671, 1
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i32* %219, i64 %675
  %677 = load i32* %676, align 4
  %678 = sext i32 %671 to i64
  %679 = getelementptr inbounds i32* %219, i64 %678
  store i32 %677, i32* %679, align 4
  br label %680

; <label>:680                                     ; preds = %673, %666
  br label %681

; <label>:681                                     ; preds = %703, %680
  %plin.8 = phi i32* [ %plin.7, %680 ], [ %plin.9, %703 ]
  %plix.0 = phi i32* [ %247, %680 ], [ %plix.1, %703 ]
  %plim.0 = phi i32* [ %261, %680 ], [ %plim.1, %703 ]
  %k18.0 = phi i32 [ 0, %680 ], [ %704, %703 ]
  %682 = icmp slt i32 %k18.0, %671
  br i1 %682, label %683, label %705

; <label>:683                                     ; preds = %681
  %684 = sext i32 %k18.0 to i64
  %685 = getelementptr inbounds i32* %219, i64 %684
  %686 = load i32* %685, align 4
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds %struct.CompAtom* %34, i64 %687
  %689 = getelementptr inbounds %struct.CompAtom* %688, i32 0, i32 2
  %690 = load i32* %689, align 4
  %691 = and i32 %690, 4194303
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8* %298, i64 %692
  %694 = load i8* %693, align 1
  %695 = sext i8 %694 to i32
  switch i32 %695, label %702 [
    i32 0, label %696
    i32 1, label %698
    i32 2, label %700
  ]

; <label>:696                                     ; preds = %683
  %697 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %686, i32* %plin.8, align 4
  br label %702

; <label>:698                                     ; preds = %683
  %699 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %686, i32* %plix.0, align 4
  br label %702

; <label>:700                                     ; preds = %683
  %701 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %686, i32* %plim.0, align 4
  br label %702

; <label>:702                                     ; preds = %700, %698, %696, %683
  %plin.9 = phi i32* [ %plin.8, %683 ], [ %plin.8, %700 ], [ %plin.8, %698 ], [ %697, %696 ]
  %plix.1 = phi i32* [ %plix.0, %683 ], [ %plix.0, %700 ], [ %699, %698 ], [ %plix.0, %696 ]
  %plim.1 = phi i32* [ %plim.0, %683 ], [ %701, %700 ], [ %plim.0, %698 ], [ %plim.0, %696 ]
  br label %703

; <label>:703                                     ; preds = %702
  %704 = add nsw i32 %k18.0, 1
  br label %681

; <label>:705                                     ; preds = %681
  %706 = ptrtoint i32* %plix.0 to i64
  %707 = ptrtoint i32* %247 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %exclChecksum.8 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plim.0 to i64
  %714 = ptrtoint i32* %261 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = sext i32 %712 to i64
  %718 = add nsw i64 %717, %716
  %719 = trunc i64 %718 to i32
  %720 = ptrtoint i32* %plin.8 to i64
  %721 = ptrtoint i32* %233 to i64
  %722 = sub i64 %720, %721
  %723 = sdiv exact i64 %722, 4
  %724 = trunc i64 %723 to i32
  br label %725

; <label>:725                                     ; preds = %841, %705
  %k18.1 = phi i32 [ 0, %705 ], [ %842, %841 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %705 ], [ %834, %841 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %705 ], [ %825, %841 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %705 ], [ %823, %841 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %705 ], [ %814, %841 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %705 ], [ %812, %841 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %705 ], [ %810, %841 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %705 ], [ %797, %841 ]
  %726 = icmp slt i32 %k18.1, %724
  br i1 %726, label %727, label %843

; <label>:727                                     ; preds = %725
  %728 = sext i32 %k18.1 to i64
  %729 = getelementptr inbounds i32* %233, i64 %728
  %730 = load i32* %729, align 4
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds %struct.CompAtom* %34, i64 %731
  %733 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %734 = getelementptr inbounds %class.Vector* %733, i32 0, i32 0
  %735 = load double* %734, align 8
  %736 = fsub double %301, %735
  %737 = fmul double %736, %736
  %738 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %739 = getelementptr inbounds %class.Vector* %738, i32 0, i32 1
  %740 = load double* %739, align 8
  %741 = fsub double %304, %740
  %742 = fmul double %741, %741
  %743 = fadd double %737, %742
  %744 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 0
  %745 = getelementptr inbounds %class.Vector* %744, i32 0, i32 2
  %746 = load double* %745, align 8
  %747 = fsub double %307, %746
  %748 = fmul double %747, %747
  %749 = fadd double %743, %748
  %750 = fptrunc double %749 to float
  %751 = bitcast %union.anon.84* %r2f to float*
  store float %750, float* %751, align 4
  %752 = bitcast %union.anon.84* %r2f to i32*
  %753 = load i32* %752, align 4
  %754 = ashr i32 %753, 17
  %755 = add nsw i32 %754, %22
  %756 = mul nsw i32 16, %755
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds double* %14, i64 %757
  %759 = getelementptr inbounds double* %758, i64 8
  %760 = getelementptr inbounds double* %759, i64 4
  %761 = getelementptr inbounds double* %760, i64 0
  %762 = load double* %761, align 8
  %763 = bitcast %union.anon.84* %r2f to i32*
  %764 = load i32* %763, align 4
  %765 = and i32 %764, -131072
  store i32 %765, i32* %763, align 4
  %766 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 1
  %767 = load float* %766, align 4
  %768 = fpext float %767 to double
  %769 = fmul double %517, %768
  %770 = bitcast %union.anon.84* %r2f to float*
  %771 = load float* %770, align 4
  %772 = fpext float %771 to double
  %773 = fsub double %749, %772
  %774 = getelementptr inbounds %struct.CompAtom* %732, i32 0, i32 2
  %775 = load i32* %774, align 4
  %776 = lshr i32 %775, 28
  %777 = zext i32 %776 to i64
  %778 = getelementptr inbounds double* %511, i64 %777
  %779 = load double* %778, align 8
  %780 = getelementptr inbounds double* %760, i64 1
  %781 = load double* %780, align 8
  %782 = getelementptr inbounds double* %760, i64 2
  %783 = load double* %782, align 8
  %784 = getelementptr inbounds double* %760, i64 3
  %785 = load double* %784, align 8
  %786 = fmul double %785, %769
  %787 = fmul double %783, %769
  %788 = fmul double %781, %769
  %789 = fmul double %762, %769
  %790 = fmul double %773, %786
  %791 = fadd double %790, %787
  %792 = fmul double %791, %773
  %793 = fadd double %792, %788
  %794 = fmul double %793, %773
  %795 = fadd double %794, %789
  %796 = fmul double %779, %795
  %797 = fadd double %fullElectEnergy.1, %796
  %798 = fmul double 3.000000e+00, %773
  %799 = fmul double %798, %786
  %800 = fmul double 2.000000e+00, %787
  %801 = fadd double %799, %800
  %802 = fmul double %801, %773
  %803 = fadd double %802, %788
  %804 = fmul double -2.000000e+00, %803
  %805 = fmul double %804, %779
  %806 = sext i32 %730 to i64
  %807 = getelementptr inbounds %class.Vector* %267, i64 %806
  %808 = fmul double %805, %736
  %809 = fmul double %808, %736
  %810 = fadd double %fullElectVirial_xx.1, %809
  %811 = fmul double %808, %741
  %812 = fadd double %fullElectVirial_xy.1, %811
  %813 = fmul double %808, %747
  %814 = fadd double %fullElectVirial_xz.1, %813
  %815 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %816 = load double* %815, align 8
  %817 = fadd double %816, %808
  store double %817, double* %815, align 8
  %818 = getelementptr inbounds %class.Vector* %807, i32 0, i32 0
  %819 = load double* %818, align 8
  %820 = fsub double %819, %808
  store double %820, double* %818, align 8
  %821 = fmul double %805, %741
  %822 = fmul double %821, %741
  %823 = fadd double %fullElectVirial_yy.1, %822
  %824 = fmul double %821, %747
  %825 = fadd double %fullElectVirial_yz.1, %824
  %826 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %827 = load double* %826, align 8
  %828 = fadd double %827, %821
  store double %828, double* %826, align 8
  %829 = getelementptr inbounds %class.Vector* %807, i32 0, i32 1
  %830 = load double* %829, align 8
  %831 = fsub double %830, %821
  store double %831, double* %829, align 8
  %832 = fmul double %805, %747
  %833 = fmul double %832, %747
  %834 = fadd double %fullElectVirial_zz.1, %833
  %835 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %836 = load double* %835, align 8
  %837 = fadd double %836, %832
  store double %837, double* %835, align 8
  %838 = getelementptr inbounds %class.Vector* %807, i32 0, i32 2
  %839 = load double* %838, align 8
  %840 = fsub double %839, %832
  store double %840, double* %838, align 8
  br label %841

; <label>:841                                     ; preds = %727
  %842 = add nsw i32 %k18.1, 1
  br label %725

; <label>:843                                     ; preds = %725
  %844 = ptrtoint i32* %plim.0 to i64
  %845 = ptrtoint i32* %261 to i64
  %846 = sub i64 %844, %845
  %847 = sdiv exact i64 %846, 4
  %848 = trunc i64 %847 to i32
  br label %849

; <label>:849                                     ; preds = %984, %843
  %k18.2 = phi i32 [ 0, %843 ], [ %985, %984 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %843 ], [ %977, %984 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %843 ], [ %968, %984 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %843 ], [ %966, %984 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %843 ], [ %957, %984 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %843 ], [ %955, %984 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %843 ], [ %953, %984 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %843 ], [ %940, %984 ]
  %850 = icmp slt i32 %k18.2, %848
  br i1 %850, label %851, label %986

; <label>:851                                     ; preds = %849
  %852 = sext i32 %k18.2 to i64
  %853 = getelementptr inbounds i32* %261, i64 %852
  %854 = load i32* %853, align 4
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds %struct.CompAtom* %34, i64 %855
  %857 = getelementptr inbounds %struct.CompAtom* %856, i32 0, i32 0
  %858 = getelementptr inbounds %class.Vector* %857, i32 0, i32 0
  %859 = load double* %858, align 8
  %860 = fsub double %301, %859
  %861 = fmul double %860, %860
  %862 = getelementptr inbounds %struct.CompAtom* %856, i32 0, i32 0
  %863 = getelementptr inbounds %class.Vector* %862, i32 0, i32 1
  %864 = load double* %863, align 8
  %865 = fsub double %304, %864
  %866 = fmul double %865, %865
  %867 = fadd double %861, %866
  %868 = getelementptr inbounds %struct.CompAtom* %856, i32 0, i32 0
  %869 = getelementptr inbounds %class.Vector* %868, i32 0, i32 2
  %870 = load double* %869, align 8
  %871 = fsub double %307, %870
  %872 = fmul double %871, %871
  %873 = fadd double %867, %872
  %874 = fptrunc double %873 to float
  %875 = bitcast %union.anon.85* %r2f29 to float*
  store float %874, float* %875, align 4
  %876 = bitcast %union.anon.85* %r2f29 to i32*
  %877 = load i32* %876, align 4
  %878 = ashr i32 %877, 17
  %879 = add nsw i32 %878, %22
  %880 = mul nsw i32 16, %879
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds double* %14, i64 %881
  %883 = getelementptr inbounds double* %882, i64 8
  %884 = getelementptr inbounds double* %883, i64 4
  %885 = getelementptr inbounds double* %884, i64 0
  %886 = load double* %885, align 8
  %887 = bitcast %union.anon.85* %r2f29 to i32*
  %888 = load i32* %887, align 4
  %889 = and i32 %888, -131072
  store i32 %889, i32* %887, align 4
  %890 = getelementptr inbounds %struct.CompAtom* %856, i32 0, i32 1
  %891 = load float* %890, align 4
  %892 = fpext float %891 to double
  %893 = fmul double %517, %892
  %894 = bitcast %union.anon.85* %r2f29 to float*
  %895 = load float* %894, align 4
  %896 = fpext float %895 to double
  %897 = fsub double %873, %896
  %898 = getelementptr inbounds %struct.CompAtom* %856, i32 0, i32 2
  %899 = load i32* %898, align 4
  %900 = lshr i32 %899, 28
  %901 = zext i32 %900 to i64
  %902 = getelementptr inbounds double* %511, i64 %901
  %903 = load double* %902, align 8
  %904 = getelementptr inbounds double* %884, i64 1
  %905 = load double* %904, align 8
  %906 = getelementptr inbounds double* %884, i64 2
  %907 = load double* %906, align 8
  %908 = getelementptr inbounds double* %884, i64 3
  %909 = load double* %908, align 8
  %910 = mul nsw i32 4, %879
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds double* %15, i64 %911
  %913 = getelementptr inbounds double* %912, i64 0
  %914 = load double* %913, align 8
  %915 = fmul double %18, %914
  %916 = fsub double %886, %915
  %917 = getelementptr inbounds double* %912, i64 1
  %918 = load double* %917, align 8
  %919 = fmul double %18, %918
  %920 = fsub double %905, %919
  %921 = getelementptr inbounds double* %912, i64 2
  %922 = load double* %921, align 8
  %923 = fmul double %18, %922
  %924 = fsub double %907, %923
  %925 = getelementptr inbounds double* %912, i64 3
  %926 = load double* %925, align 8
  %927 = fmul double %18, %926
  %928 = fsub double %909, %927
  %929 = fmul double %928, %893
  %930 = fmul double %924, %893
  %931 = fmul double %920, %893
  %932 = fmul double %916, %893
  %933 = fmul double %897, %929
  %934 = fadd double %933, %930
  %935 = fmul double %934, %897
  %936 = fadd double %935, %931
  %937 = fmul double %936, %897
  %938 = fadd double %937, %932
  %939 = fmul double %903, %938
  %940 = fadd double %fullElectEnergy.2, %939
  %941 = fmul double 3.000000e+00, %897
  %942 = fmul double %941, %929
  %943 = fmul double 2.000000e+00, %930
  %944 = fadd double %942, %943
  %945 = fmul double %944, %897
  %946 = fadd double %945, %931
  %947 = fmul double -2.000000e+00, %946
  %948 = fmul double %947, %903
  %949 = sext i32 %854 to i64
  %950 = getelementptr inbounds %class.Vector* %267, i64 %949
  %951 = fmul double %948, %860
  %952 = fmul double %951, %860
  %953 = fadd double %fullElectVirial_xx.2, %952
  %954 = fmul double %951, %865
  %955 = fadd double %fullElectVirial_xy.2, %954
  %956 = fmul double %951, %871
  %957 = fadd double %fullElectVirial_xz.2, %956
  %958 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %959 = load double* %958, align 8
  %960 = fadd double %959, %951
  store double %960, double* %958, align 8
  %961 = getelementptr inbounds %class.Vector* %950, i32 0, i32 0
  %962 = load double* %961, align 8
  %963 = fsub double %962, %951
  store double %963, double* %961, align 8
  %964 = fmul double %948, %865
  %965 = fmul double %964, %865
  %966 = fadd double %fullElectVirial_yy.2, %965
  %967 = fmul double %964, %871
  %968 = fadd double %fullElectVirial_yz.2, %967
  %969 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %970 = load double* %969, align 8
  %971 = fadd double %970, %964
  store double %971, double* %969, align 8
  %972 = getelementptr inbounds %class.Vector* %950, i32 0, i32 1
  %973 = load double* %972, align 8
  %974 = fsub double %973, %964
  store double %974, double* %972, align 8
  %975 = fmul double %948, %871
  %976 = fmul double %975, %871
  %977 = fadd double %fullElectVirial_zz.2, %976
  %978 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %979 = load double* %978, align 8
  %980 = fadd double %979, %975
  store double %980, double* %978, align 8
  %981 = getelementptr inbounds %class.Vector* %950, i32 0, i32 2
  %982 = load double* %981, align 8
  %983 = fsub double %982, %975
  store double %983, double* %981, align 8
  br label %984

; <label>:984                                     ; preds = %851
  %985 = add nsw i32 %k18.2, 1
  br label %849

; <label>:986                                     ; preds = %849
  %987 = ptrtoint i32* %plix.0 to i64
  %988 = ptrtoint i32* %247 to i64
  %989 = sub i64 %987, %988
  %990 = sdiv exact i64 %989, 4
  %991 = trunc i64 %990 to i32
  br label %992

; <label>:992                                     ; preds = %1123, %986
  %k18.3 = phi i32 [ 0, %986 ], [ %1124, %1123 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %986 ], [ %1116, %1123 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %986 ], [ %1107, %1123 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %986 ], [ %1105, %1123 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %986 ], [ %1096, %1123 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %986 ], [ %1094, %1123 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %986 ], [ %1092, %1123 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %986 ], [ %1079, %1123 ]
  %993 = icmp slt i32 %k18.3, %991
  br i1 %993, label %994, label %1125

; <label>:994                                     ; preds = %992
  %995 = sext i32 %k18.3 to i64
  %996 = getelementptr inbounds i32* %247, i64 %995
  %997 = load i32* %996, align 4
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds %struct.CompAtom* %34, i64 %998
  %1000 = getelementptr inbounds %struct.CompAtom* %999, i32 0, i32 0
  %1001 = getelementptr inbounds %class.Vector* %1000, i32 0, i32 0
  %1002 = load double* %1001, align 8
  %1003 = fsub double %301, %1002
  %1004 = fmul double %1003, %1003
  %1005 = getelementptr inbounds %struct.CompAtom* %999, i32 0, i32 0
  %1006 = getelementptr inbounds %class.Vector* %1005, i32 0, i32 1
  %1007 = load double* %1006, align 8
  %1008 = fsub double %304, %1007
  %1009 = fmul double %1008, %1008
  %1010 = fadd double %1004, %1009
  %1011 = getelementptr inbounds %struct.CompAtom* %999, i32 0, i32 0
  %1012 = getelementptr inbounds %class.Vector* %1011, i32 0, i32 2
  %1013 = load double* %1012, align 8
  %1014 = fsub double %307, %1013
  %1015 = fmul double %1014, %1014
  %1016 = fadd double %1010, %1015
  %1017 = fptrunc double %1016 to float
  %1018 = bitcast %union.anon.86* %r2f52 to float*
  store float %1017, float* %1018, align 4
  %1019 = bitcast %union.anon.86* %r2f52 to i32*
  %1020 = load i32* %1019, align 4
  %1021 = ashr i32 %1020, 17
  %1022 = add nsw i32 %1021, %22
  %1023 = mul nsw i32 16, %1022
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds double* %14, i64 %1024
  %1026 = getelementptr inbounds double* %1025, i64 8
  %1027 = getelementptr inbounds double* %1026, i64 4
  %1028 = getelementptr inbounds double* %1027, i64 0
  %1029 = load double* %1028, align 8
  %1030 = bitcast %union.anon.86* %r2f52 to i32*
  %1031 = load i32* %1030, align 4
  %1032 = and i32 %1031, -131072
  store i32 %1032, i32* %1030, align 4
  %1033 = getelementptr inbounds %struct.CompAtom* %999, i32 0, i32 1
  %1034 = load float* %1033, align 4
  %1035 = fpext float %1034 to double
  %1036 = fmul double %517, %1035
  %1037 = bitcast %union.anon.86* %r2f52 to float*
  %1038 = load float* %1037, align 4
  %1039 = fpext float %1038 to double
  %1040 = fsub double %1016, %1039
  %1041 = getelementptr inbounds %struct.CompAtom* %999, i32 0, i32 2
  %1042 = load i32* %1041, align 4
  %1043 = lshr i32 %1042, 28
  %1044 = zext i32 %1043 to i64
  %1045 = getelementptr inbounds double* %511, i64 %1044
  %1046 = load double* %1045, align 8
  %1047 = getelementptr inbounds double* %1027, i64 1
  %1048 = load double* %1047, align 8
  %1049 = getelementptr inbounds double* %1027, i64 2
  %1050 = load double* %1049, align 8
  %1051 = getelementptr inbounds double* %1027, i64 3
  %1052 = load double* %1051, align 8
  %1053 = mul nsw i32 4, %1022
  %1054 = sext i32 %1053 to i64
  %1055 = getelementptr inbounds double* %15, i64 %1054
  %1056 = getelementptr inbounds double* %1055, i64 0
  %1057 = load double* %1056, align 8
  %1058 = fsub double %1029, %1057
  %1059 = getelementptr inbounds double* %1055, i64 1
  %1060 = load double* %1059, align 8
  %1061 = fsub double %1048, %1060
  %1062 = getelementptr inbounds double* %1055, i64 2
  %1063 = load double* %1062, align 8
  %1064 = fsub double %1050, %1063
  %1065 = getelementptr inbounds double* %1055, i64 3
  %1066 = load double* %1065, align 8
  %1067 = fsub double %1052, %1066
  %1068 = fmul double %1067, %1036
  %1069 = fmul double %1064, %1036
  %1070 = fmul double %1061, %1036
  %1071 = fmul double %1058, %1036
  %1072 = fmul double %1040, %1068
  %1073 = fadd double %1072, %1069
  %1074 = fmul double %1073, %1040
  %1075 = fadd double %1074, %1070
  %1076 = fmul double %1075, %1040
  %1077 = fadd double %1076, %1071
  %1078 = fmul double %1046, %1077
  %1079 = fadd double %fullElectEnergy.3, %1078
  %1080 = fmul double 3.000000e+00, %1040
  %1081 = fmul double %1080, %1068
  %1082 = fmul double 2.000000e+00, %1069
  %1083 = fadd double %1081, %1082
  %1084 = fmul double %1083, %1040
  %1085 = fadd double %1084, %1070
  %1086 = fmul double -2.000000e+00, %1085
  %1087 = fmul double %1086, %1046
  %1088 = sext i32 %997 to i64
  %1089 = getelementptr inbounds %class.Vector* %267, i64 %1088
  %1090 = fmul double %1087, %1003
  %1091 = fmul double %1090, %1003
  %1092 = fadd double %fullElectVirial_xx.3, %1091
  %1093 = fmul double %1090, %1008
  %1094 = fadd double %fullElectVirial_xy.3, %1093
  %1095 = fmul double %1090, %1014
  %1096 = fadd double %fullElectVirial_xz.3, %1095
  %1097 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %1098 = load double* %1097, align 8
  %1099 = fadd double %1098, %1090
  store double %1099, double* %1097, align 8
  %1100 = getelementptr inbounds %class.Vector* %1089, i32 0, i32 0
  %1101 = load double* %1100, align 8
  %1102 = fsub double %1101, %1090
  store double %1102, double* %1100, align 8
  %1103 = fmul double %1087, %1008
  %1104 = fmul double %1103, %1008
  %1105 = fadd double %fullElectVirial_yy.3, %1104
  %1106 = fmul double %1103, %1014
  %1107 = fadd double %fullElectVirial_yz.3, %1106
  %1108 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %1109 = load double* %1108, align 8
  %1110 = fadd double %1109, %1103
  store double %1110, double* %1108, align 8
  %1111 = getelementptr inbounds %class.Vector* %1089, i32 0, i32 1
  %1112 = load double* %1111, align 8
  %1113 = fsub double %1112, %1103
  store double %1113, double* %1111, align 8
  %1114 = fmul double %1087, %1014
  %1115 = fmul double %1114, %1014
  %1116 = fadd double %fullElectVirial_zz.3, %1115
  %1117 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %1118 = load double* %1117, align 8
  %1119 = fadd double %1118, %1114
  store double %1119, double* %1117, align 8
  %1120 = getelementptr inbounds %class.Vector* %1089, i32 0, i32 2
  %1121 = load double* %1120, align 8
  %1122 = fsub double %1121, %1114
  store double %1122, double* %1120, align 8
  br label %1123

; <label>:1123                                    ; preds = %994
  %1124 = add nsw i32 %k18.3, 1
  br label %992

; <label>:1125                                    ; preds = %992
  br label %1126

; <label>:1126                                    ; preds = %1125, %486, %337
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %337 ], [ %pairlistindex.1, %1125 ], [ %465, %486 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %337 ], [ %pairlistoffset.1, %1125 ], [ 0, %486 ]
  %pairCount.3 = phi i32 [ %333, %337 ], [ %pairCount.2, %1125 ], [ %pairCount.1, %486 ]
  %i.2 = phi i32 [ %339, %337 ], [ %i.1, %1125 ], [ %489, %486 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %337 ], [ %fullElectVirial_zz.3, %1125 ], [ %fullElectVirial_zz.0, %486 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %337 ], [ %fullElectVirial_yz.3, %1125 ], [ %fullElectVirial_yz.0, %486 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %337 ], [ %fullElectVirial_yy.3, %1125 ], [ %fullElectVirial_yy.0, %486 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %337 ], [ %fullElectVirial_xz.3, %1125 ], [ %fullElectVirial_xz.0, %486 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %337 ], [ %fullElectVirial_xy.3, %1125 ], [ %fullElectVirial_xy.0, %486 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %337 ], [ %fullElectVirial_xx.3, %1125 ], [ %fullElectVirial_xx.0, %486 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %337 ], [ %fullElectEnergy.3, %1125 ], [ %fullElectEnergy.0, %486 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %337 ], [ %719, %1125 ], [ %exclChecksum.0, %486 ]
  %1127 = add nsw i32 %i.2, 1
  br label %281

; <label>:1128                                    ; preds = %281
  %1129 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1130 = icmp ne i32* %48, %1129
  br i1 %1130, label %1131, label %1136

; <label>:1131                                    ; preds = %1128
  %1132 = icmp eq i32* %48, null
  br i1 %1132, label %1135, label %1133

; <label>:1133                                    ; preds = %1131
  %1134 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1134) #8
  br label %1135

; <label>:1135                                    ; preds = %1133, %1131
  br label %1136

; <label>:1136                                    ; preds = %1135, %1128
  %1137 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1138 = icmp ne i32* %62, %1137
  br i1 %1138, label %1139, label %1144

; <label>:1139                                    ; preds = %1136
  %1140 = icmp eq i32* %62, null
  br i1 %1140, label %1143, label %1141

; <label>:1141                                    ; preds = %1139
  %1142 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1142) #8
  br label %1143

; <label>:1143                                    ; preds = %1141, %1139
  br label %1144

; <label>:1144                                    ; preds = %1143, %1136
  %1145 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1146 = icmp ne i32* %76, %1145
  br i1 %1146, label %1147, label %1152

; <label>:1147                                    ; preds = %1144
  %1148 = icmp eq i32* %76, null
  br i1 %1148, label %1151, label %1149

; <label>:1149                                    ; preds = %1147
  %1150 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1150) #8
  br label %1151

; <label>:1151                                    ; preds = %1149, %1147
  br label %1152

; <label>:1152                                    ; preds = %1151, %1144
  %1153 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1154 = icmp ne i32* %205, %1153
  br i1 %1154, label %1155, label %1160

; <label>:1155                                    ; preds = %1152
  %1156 = icmp eq i32* %205, null
  br i1 %1156, label %1159, label %1157

; <label>:1157                                    ; preds = %1155
  %1158 = bitcast i32* %205 to i8*
  call void @_ZdaPv(i8* %1158) #8
  br label %1159

; <label>:1159                                    ; preds = %1157, %1155
  br label %1160

; <label>:1160                                    ; preds = %1159, %1152
  %1161 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1162 = icmp ne i32* %219, %1161
  br i1 %1162, label %1163, label %1168

; <label>:1163                                    ; preds = %1160
  %1164 = icmp eq i32* %219, null
  br i1 %1164, label %1167, label %1165

; <label>:1165                                    ; preds = %1163
  %1166 = bitcast i32* %219 to i8*
  call void @_ZdaPv(i8* %1166) #8
  br label %1167

; <label>:1167                                    ; preds = %1165, %1163
  br label %1168

; <label>:1168                                    ; preds = %1167, %1160
  %1169 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1170 = icmp ne i32* %233, %1169
  br i1 %1170, label %1171, label %1176

; <label>:1171                                    ; preds = %1168
  %1172 = icmp eq i32* %233, null
  br i1 %1172, label %1175, label %1173

; <label>:1173                                    ; preds = %1171
  %1174 = bitcast i32* %233 to i8*
  call void @_ZdaPv(i8* %1174) #8
  br label %1175

; <label>:1175                                    ; preds = %1173, %1171
  br label %1176

; <label>:1176                                    ; preds = %1175, %1168
  %1177 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1178 = icmp ne i32* %247, %1177
  br i1 %1178, label %1179, label %1184

; <label>:1179                                    ; preds = %1176
  %1180 = icmp eq i32* %247, null
  br i1 %1180, label %1183, label %1181

; <label>:1181                                    ; preds = %1179
  %1182 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %1182) #8
  br label %1183

; <label>:1183                                    ; preds = %1181, %1179
  br label %1184

; <label>:1184                                    ; preds = %1183, %1176
  %1185 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1186 = icmp ne i32* %261, %1185
  br i1 %1186, label %1187, label %1192

; <label>:1187                                    ; preds = %1184
  %1188 = icmp eq i32* %261, null
  br i1 %1188, label %1191, label %1189

; <label>:1189                                    ; preds = %1187
  %1190 = bitcast i32* %261 to i8*
  call void @_ZdaPv(i8* %1190) #8
  br label %1191

; <label>:1191                                    ; preds = %1189, %1187
  br label %1192

; <label>:1192                                    ; preds = %1191, %1184
  %1193 = sitofp i32 %exclChecksum.0 to double
  %1194 = getelementptr inbounds double* %6, i64 22
  %1195 = load double* %1194, align 8
  %1196 = fadd double %1195, %1193
  store double %1196, double* %1194, align 8
  %1197 = getelementptr inbounds double* %6, i64 1
  %1198 = load double* %1197, align 8
  %1199 = fadd double %1198, %fullElectEnergy.0
  store double %1199, double* %1197, align 8
  %1200 = getelementptr inbounds double* %6, i64 12
  %1201 = load double* %1200, align 8
  %1202 = fadd double %1201, %fullElectVirial_xx.0
  store double %1202, double* %1200, align 8
  %1203 = getelementptr inbounds double* %6, i64 13
  %1204 = load double* %1203, align 8
  %1205 = fadd double %1204, %fullElectVirial_xy.0
  store double %1205, double* %1203, align 8
  %1206 = getelementptr inbounds double* %6, i64 14
  %1207 = load double* %1206, align 8
  %1208 = fadd double %1207, %fullElectVirial_xz.0
  store double %1208, double* %1206, align 8
  %1209 = getelementptr inbounds double* %6, i64 15
  %1210 = load double* %1209, align 8
  %1211 = fadd double %1210, %fullElectVirial_xy.0
  store double %1211, double* %1209, align 8
  %1212 = getelementptr inbounds double* %6, i64 16
  %1213 = load double* %1212, align 8
  %1214 = fadd double %1213, %fullElectVirial_yy.0
  store double %1214, double* %1212, align 8
  %1215 = getelementptr inbounds double* %6, i64 17
  %1216 = load double* %1215, align 8
  %1217 = fadd double %1216, %fullElectVirial_yz.0
  store double %1217, double* %1215, align 8
  %1218 = getelementptr inbounds double* %6, i64 18
  %1219 = load double* %1218, align 8
  %1220 = fadd double %1219, %fullElectVirial_xz.0
  store double %1220, double* %1218, align 8
  %1221 = getelementptr inbounds double* %6, i64 19
  %1222 = load double* %1221, align 8
  %1223 = fadd double %1222, %fullElectVirial_yz.0
  store double %1223, double* %1221, align 8
  %1224 = getelementptr inbounds double* %6, i64 20
  %1225 = load double* %1224, align 8
  %1226 = fadd double %1225, %fullElectVirial_zz.0
  store double %1226, double* %1224, align 8
  br label %1227

; <label>:1227                                    ; preds = %1192, %180, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil28calc_self_slow_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.103, align 4
  %r2f28 = alloca %union.anon.104, align 4
  %r2f50 = alloca %union.anon.105, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1259

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %163

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  %136 = icmp ne i32 %all_fixed.0, 0
  br i1 %136, label %137, label %162

; <label>:137                                     ; preds = %135
  %138 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %139 = icmp ne i32* %48, %138
  br i1 %139, label %140, label %145

; <label>:140                                     ; preds = %137
  %141 = icmp eq i32* %48, null
  br i1 %141, label %144, label %142

; <label>:142                                     ; preds = %140
  %143 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %143) #8
  br label %144

; <label>:144                                     ; preds = %142, %140
  br label %145

; <label>:145                                     ; preds = %144, %137
  %146 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %147 = icmp ne i32* %62, %146
  br i1 %147, label %148, label %153

; <label>:148                                     ; preds = %145
  %149 = icmp eq i32* %62, null
  br i1 %149, label %152, label %150

; <label>:150                                     ; preds = %148
  %151 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %151) #8
  br label %152

; <label>:152                                     ; preds = %150, %148
  br label %153

; <label>:153                                     ; preds = %152, %145
  %154 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %155 = icmp ne i32* %76, %154
  br i1 %155, label %156, label %161

; <label>:156                                     ; preds = %153
  %157 = icmp eq i32* %76, null
  br i1 %157, label %160, label %158

; <label>:158                                     ; preds = %156
  %159 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %159) #8
  br label %160

; <label>:160                                     ; preds = %158, %156
  br label %161

; <label>:161                                     ; preds = %160, %153
  br label %1259

; <label>:162                                     ; preds = %135
  br label %163

; <label>:163                                     ; preds = %162, %111
  %fixg.2 = phi i32 [ %fixg.0, %162 ], [ 0, %111 ]
  %164 = icmp ne i32 %fixg.2, 0
  br i1 %164, label %165, label %172

; <label>:165                                     ; preds = %163
  %166 = sub nsw i32 %fixg.2, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32* %62, i64 %167
  %169 = load i32* %168, align 4
  %170 = sext i32 %fixg.2 to i64
  %171 = getelementptr inbounds i32* %62, i64 %170
  store i32 %169, i32* %171, align 4
  br label %172

; <label>:172                                     ; preds = %165, %163
  %173 = icmp slt i32 %28, 1000
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %172
  %175 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %185

; <label>:176                                     ; preds = %172
  %177 = add nsw i32 %28, 5
  %178 = sext i32 %177 to i64
  %179 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %178, i64 4)
  %180 = extractvalue { i64, i1 } %179, 1
  %181 = extractvalue { i64, i1 } %179, 0
  %182 = select i1 %180, i64 -1, i64 %181
  %183 = call noalias i8* @_Znam(i64 %182) #9
  %184 = bitcast i8* %183 to i32*
  br label %185

; <label>:185                                     ; preds = %176, %174
  %186 = phi i32* [ %175, %174 ], [ %184, %176 ]
  %187 = icmp slt i32 %28, 1000
  br i1 %187, label %188, label %190

; <label>:188                                     ; preds = %185
  %189 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %199

; <label>:190                                     ; preds = %185
  %191 = add nsw i32 %28, 5
  %192 = sext i32 %191 to i64
  %193 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %192, i64 4)
  %194 = extractvalue { i64, i1 } %193, 1
  %195 = extractvalue { i64, i1 } %193, 0
  %196 = select i1 %194, i64 -1, i64 %195
  %197 = call noalias i8* @_Znam(i64 %196) #9
  %198 = bitcast i8* %197 to i32*
  br label %199

; <label>:199                                     ; preds = %190, %188
  %200 = phi i32* [ %189, %188 ], [ %198, %190 ]
  %201 = icmp slt i32 %28, 1000
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %199
  %203 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %213

; <label>:204                                     ; preds = %199
  %205 = add nsw i32 %28, 5
  %206 = sext i32 %205 to i64
  %207 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %206, i64 4)
  %208 = extractvalue { i64, i1 } %207, 1
  %209 = extractvalue { i64, i1 } %207, 0
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = call noalias i8* @_Znam(i64 %210) #9
  %212 = bitcast i8* %211 to i32*
  br label %213

; <label>:213                                     ; preds = %204, %202
  %214 = phi i32* [ %203, %202 ], [ %212, %204 ]
  %215 = icmp slt i32 %28, 1000
  br i1 %215, label %216, label %218

; <label>:216                                     ; preds = %213
  %217 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %227

; <label>:218                                     ; preds = %213
  %219 = add nsw i32 %28, 5
  %220 = sext i32 %219 to i64
  %221 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %220, i64 4)
  %222 = extractvalue { i64, i1 } %221, 1
  %223 = extractvalue { i64, i1 } %221, 0
  %224 = select i1 %222, i64 -1, i64 %223
  %225 = call noalias i8* @_Znam(i64 %224) #9
  %226 = bitcast i8* %225 to i32*
  br label %227

; <label>:227                                     ; preds = %218, %216
  %228 = phi i32* [ %217, %216 ], [ %226, %218 ]
  %229 = icmp slt i32 %28, 1000
  br i1 %229, label %230, label %232

; <label>:230                                     ; preds = %227
  %231 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %241

; <label>:232                                     ; preds = %227
  %233 = add nsw i32 %28, 5
  %234 = sext i32 %233 to i64
  %235 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %234, i64 4)
  %236 = extractvalue { i64, i1 } %235, 1
  %237 = extractvalue { i64, i1 } %235, 0
  %238 = select i1 %236, i64 -1, i64 %237
  %239 = call noalias i8* @_Znam(i64 %238) #9
  %240 = bitcast i8* %239 to i32*
  br label %241

; <label>:241                                     ; preds = %232, %230
  %242 = phi i32* [ %231, %230 ], [ %240, %232 ]
  %243 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %244 = getelementptr inbounds [2 x %class.Vector*]* %243, i32 0, i64 0
  %245 = load %class.Vector** %244, align 8
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 1
  %248 = load %class.Vector** %247, align 8
  %249 = sub nsw i32 %25, 1
  %250 = mul nsw i32 %249, %28
  %251 = sdiv i32 %250, 2
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %253 = load i32* %252, align 4
  %254 = mul nsw i32 %251, %253
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %256 = load i32* %255, align 4
  %257 = sdiv i32 %254, %256
  %258 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %259 = load i32* %258, align 4
  %260 = mul nsw i32 %251, %259
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %262 = load i32* %261, align 4
  %263 = sdiv i32 %260, %262
  br label %264

; <label>:264                                     ; preds = %1161, %241
  %pairlistoffset.0 = phi i32 [ 0, %241 ], [ %pairlistoffset.2, %1161 ]
  %pairlistindex.0 = phi i32 [ 0, %241 ], [ %pairlistindex.3, %1161 ]
  %fixg_lower.0 = phi i32 [ 0, %241 ], [ %fixg_lower.4, %1161 ]
  %g_lower.0 = phi i32 [ 0, %241 ], [ %g_lower.4, %1161 ]
  %j_hgroup.0 = phi i32 [ 0, %241 ], [ %j_hgroup.3, %1161 ]
  %pairCount.0 = phi i32 [ 0, %241 ], [ %pairCount.3, %1161 ]
  %i.0 = phi i32 [ 0, %241 ], [ %1162, %1161 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_zz.4, %1161 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yz.4, %1161 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yy.4, %1161 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xz.4, %1161 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xy.4, %1161 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xx.4, %1161 ]
  %exclChecksum.0 = phi i32 [ 0, %241 ], [ %exclChecksum.11, %1161 ]
  %265 = sub nsw i32 %25, 1
  %266 = icmp slt i32 %i.0, %265
  br i1 %266, label %267, label %1163

; <label>:267                                     ; preds = %264
  %268 = sext i32 %i.0 to i64
  %269 = getelementptr inbounds %struct.CompAtom* %31, i64 %268
  %270 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %271 = load i32* %270, align 4
  %272 = and i32 %271, 4194303
  %273 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %272)
  %274 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 0
  %275 = load i32* %274, align 4
  %276 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 1
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 2
  %279 = load i8** %278, align 8
  %280 = sext i32 %275 to i64
  %281 = sub i64 0, %280
  %282 = getelementptr inbounds i8* %279, i64 %281
  %283 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %284 = getelementptr inbounds %class.Vector* %283, i32 0, i32 0
  %285 = load double* %284, align 8
  %286 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %287 = getelementptr inbounds %class.Vector* %286, i32 0, i32 1
  %288 = load double* %287, align 8
  %289 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %290 = getelementptr inbounds %class.Vector* %289, i32 0, i32 2
  %291 = load double* %290, align 8
  %292 = sext i32 %i.0 to i64
  %293 = getelementptr inbounds %class.Vector* %245, i64 %292
  %294 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %295 = load i32* %294, align 4
  %296 = lshr i32 %295, 22
  %297 = and i32 %296, 7
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %305, label %299

; <label>:299                                     ; preds = %267
  %300 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %301 = load i32* %300, align 4
  %302 = lshr i32 %301, 25
  %303 = and i32 %302, 1
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %305, label %516

; <label>:305                                     ; preds = %299, %267
  %306 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %307 = load i32* %306, align 4
  %308 = lshr i32 %307, 22
  %309 = and i32 %308, 7
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %311, label %331

; <label>:311                                     ; preds = %305
  %312 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = sub nsw i32 %25, 1
  %317 = sub nsw i32 %316, %i.0
  %318 = mul nsw i32 %315, %317
  %319 = add nsw i32 %pairCount.0, %318
  %320 = sub nsw i32 %315, 1
  %321 = mul nsw i32 %315, %320
  %322 = sdiv i32 %321, 2
  %323 = sub nsw i32 %319, %322
  %324 = icmp slt i32 %pairCount.0, %257
  br i1 %324, label %327, label %325

; <label>:325                                     ; preds = %311
  %326 = icmp sge i32 %pairCount.0, %263
  br i1 %326, label %327, label %330

; <label>:327                                     ; preds = %325, %311
  %328 = sub nsw i32 %315, 1
  %329 = add nsw i32 %i.0, %328
  br label %1161

; <label>:330                                     ; preds = %325
  br label %331

; <label>:331                                     ; preds = %330, %305
  %pairCount.1 = phi i32 [ %323, %330 ], [ %pairCount.0, %305 ]
  %332 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %340

; <label>:334                                     ; preds = %331
  %335 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %336 = load i32* %335, align 4
  %337 = lshr i32 %336, 27
  %338 = and i32 %337, 1
  %339 = icmp ne i32 %338, 0
  br label %340

; <label>:340                                     ; preds = %334, %331
  %341 = phi i1 [ false, %331 ], [ %339, %334 ]
  %342 = zext i1 %341 to i32
  %343 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %344 = load i32* %343, align 4
  %345 = lshr i32 %344, 22
  %346 = and i32 %345, 7
  %347 = icmp ne i32 %346, 0
  br i1 %347, label %348, label %378

; <label>:348                                     ; preds = %340
  %349 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %350 = load i32* %349, align 4
  %351 = lshr i32 %350, 22
  %352 = and i32 %351, 7
  %353 = add nsw i32 %i.0, %352
  br label %354

; <label>:354                                     ; preds = %363, %348
  %g_lower.1 = phi i32 [ %g_lower.0, %348 ], [ %364, %363 ]
  %355 = icmp slt i32 %g_lower.1, %g.0
  br i1 %355, label %356, label %361

; <label>:356                                     ; preds = %354
  %357 = sext i32 %g_lower.1 to i64
  %358 = getelementptr inbounds i32* %48, i64 %357
  %359 = load i32* %358, align 4
  %360 = icmp slt i32 %359, %353
  br label %361

; <label>:361                                     ; preds = %356, %354
  %362 = phi i1 [ false, %354 ], [ %360, %356 ]
  br i1 %362, label %363, label %365

; <label>:363                                     ; preds = %361
  %364 = add nsw i32 %g_lower.1, 1
  br label %354

; <label>:365                                     ; preds = %361
  br label %366

; <label>:366                                     ; preds = %375, %365
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %365 ], [ %376, %375 ]
  %367 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %367, label %368, label %373

; <label>:368                                     ; preds = %366
  %369 = sext i32 %fixg_lower.1 to i64
  %370 = getelementptr inbounds i32* %62, i64 %369
  %371 = load i32* %370, align 4
  %372 = icmp slt i32 %371, %353
  br label %373

; <label>:373                                     ; preds = %368, %366
  %374 = phi i1 [ false, %366 ], [ %372, %368 ]
  br i1 %374, label %375, label %377

; <label>:375                                     ; preds = %373
  %376 = add nsw i32 %fixg_lower.1, 1
  br label %366

; <label>:377                                     ; preds = %373
  br label %378

; <label>:378                                     ; preds = %377, %340
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %377 ], [ %fixg_lower.0, %340 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %377 ], [ %g_lower.0, %340 ]
  %j_hgroup.1 = phi i32 [ %353, %377 ], [ %j_hgroup.0, %340 ]
  %379 = add nsw i32 %i.0, 1
  br label %380

; <label>:380                                     ; preds = %386, %378
  %pairlistindex.1 = phi i32 [ 0, %378 ], [ %383, %386 ]
  %j.1 = phi i32 [ %379, %378 ], [ %387, %386 ]
  %381 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %381, label %382, label %388

; <label>:382                                     ; preds = %380
  %383 = add nsw i32 %pairlistindex.1, 1
  %384 = sext i32 %pairlistindex.1 to i64
  %385 = getelementptr inbounds i32* %186, i64 %384
  store i32 %j.1, i32* %385, align 4
  br label %386

; <label>:386                                     ; preds = %382
  %387 = add nsw i32 %j.1, 1
  br label %380

; <label>:388                                     ; preds = %380
  %389 = sext i32 %pairlistindex.1 to i64
  %390 = getelementptr inbounds i32* %186, i64 %389
  %391 = icmp ne i32 %342, 0
  br i1 %391, label %392, label %393

; <label>:392                                     ; preds = %388
  br label %394

; <label>:393                                     ; preds = %388
  br label %394

; <label>:394                                     ; preds = %393, %392
  %395 = phi i32* [ %62, %392 ], [ %48, %393 ]
  %396 = icmp ne i32 %342, 0
  br i1 %396, label %397, label %398

; <label>:397                                     ; preds = %394
  br label %399

; <label>:398                                     ; preds = %394
  br label %399

; <label>:399                                     ; preds = %398, %397
  %400 = phi i32 [ %fixg_lower.2, %397 ], [ %g_lower.2, %398 ]
  %401 = icmp ne i32 %342, 0
  br i1 %401, label %402, label %403

; <label>:402                                     ; preds = %399
  br label %404

; <label>:403                                     ; preds = %399
  br label %404

; <label>:404                                     ; preds = %403, %402
  %405 = phi i32 [ %fixg.2, %402 ], [ %g.0, %403 ]
  %406 = icmp slt i32 %400, %405
  br i1 %406, label %407, label %501

; <label>:407                                     ; preds = %404
  %408 = sext i32 %400 to i64
  %409 = getelementptr inbounds i32* %395, i64 %408
  %410 = load i32* %409, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds %struct.CompAtom* %34, i64 %411
  %413 = getelementptr inbounds %struct.CompAtom* %412, i32 0, i32 0
  %414 = getelementptr inbounds %class.Vector* %413, i32 0, i32 0
  %415 = load double* %414, align 8
  %416 = sext i32 %410 to i64
  %417 = getelementptr inbounds %struct.CompAtom* %34, i64 %416
  %418 = getelementptr inbounds %struct.CompAtom* %417, i32 0, i32 0
  %419 = getelementptr inbounds %class.Vector* %418, i32 0, i32 1
  %420 = load double* %419, align 8
  %421 = sext i32 %410 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %34, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  br label %426

; <label>:426                                     ; preds = %459, %407
  %g.3 = phi i32 [ %400, %407 ], [ %429, %459 ]
  %gli.0 = phi i32* [ %76, %407 ], [ %gli.1, %459 ]
  %j2.0 = phi i32 [ %410, %407 ], [ %432, %459 ]
  %p_j_x.0 = phi double [ %415, %407 ], [ %439, %459 ]
  %p_j_y.0 = phi double [ %420, %407 ], [ %447, %459 ]
  %p_j_z.0 = phi double [ %425, %407 ], [ %455, %459 ]
  %427 = icmp slt i32 %g.3, %405
  br i1 %427, label %428, label %460

; <label>:428                                     ; preds = %426
  %429 = add nsw i32 %g.3, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32* %395, i64 %430
  %432 = load i32* %431, align 4
  %433 = fsub double %285, %p_j_x.0
  %434 = fmul double %433, %433
  %435 = sext i32 %432 to i64
  %436 = getelementptr inbounds %struct.CompAtom* %34, i64 %435
  %437 = getelementptr inbounds %struct.CompAtom* %436, i32 0, i32 0
  %438 = getelementptr inbounds %class.Vector* %437, i32 0, i32 0
  %439 = load double* %438, align 8
  %440 = fsub double %288, %p_j_y.0
  %441 = fmul double %440, %440
  %442 = fadd double %434, %441
  %443 = sext i32 %432 to i64
  %444 = getelementptr inbounds %struct.CompAtom* %34, i64 %443
  %445 = getelementptr inbounds %struct.CompAtom* %444, i32 0, i32 0
  %446 = getelementptr inbounds %class.Vector* %445, i32 0, i32 1
  %447 = load double* %446, align 8
  %448 = fsub double %291, %p_j_z.0
  %449 = fmul double %448, %448
  %450 = fadd double %442, %449
  %451 = sext i32 %432 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %34, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 0
  %454 = getelementptr inbounds %class.Vector* %453, i32 0, i32 2
  %455 = load double* %454, align 8
  %456 = fcmp ole double %450, %8
  br i1 %456, label %457, label %459

; <label>:457                                     ; preds = %428
  store i32 %j2.0, i32* %gli.0, align 4
  %458 = getelementptr inbounds i32* %gli.0, i32 1
  br label %459

; <label>:459                                     ; preds = %457, %428
  %gli.1 = phi i32* [ %458, %457 ], [ %gli.0, %428 ]
  br label %426

; <label>:460                                     ; preds = %426
  %461 = ptrtoint i32* %gli.0 to i64
  %462 = ptrtoint i32* %76 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  br label %466

; <label>:466                                     ; preds = %498, %460
  %pli.0 = phi i32* [ %390, %460 ], [ %497, %498 ]
  %h.0 = phi i32 [ 0, %460 ], [ %499, %498 ]
  %467 = icmp slt i32 %h.0, %465
  br i1 %467, label %468, label %500

; <label>:468                                     ; preds = %466
  %469 = sext i32 %h.0 to i64
  %470 = getelementptr inbounds i32* %76, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.CompAtom* %34, i64 %472
  %474 = getelementptr inbounds %struct.CompAtom* %473, i32 0, i32 2
  %475 = load i32* %474, align 4
  %476 = lshr i32 %475, 25
  %477 = and i32 %476, 1
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %480

; <label>:479                                     ; preds = %468
  br label %487

; <label>:480                                     ; preds = %468
  %481 = sext i32 %471 to i64
  %482 = getelementptr inbounds %struct.CompAtom* %34, i64 %481
  %483 = getelementptr inbounds %struct.CompAtom* %482, i32 0, i32 2
  %484 = load i32* %483, align 4
  %485 = lshr i32 %484, 22
  %486 = and i32 %485, 7
  br label %487

; <label>:487                                     ; preds = %480, %479
  %488 = phi i32 [ 1, %479 ], [ %486, %480 ]
  %489 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %471, i32* %489, align 4
  %490 = add nsw i32 %471, 1
  %491 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %490, i32* %491, align 4
  %492 = add nsw i32 %471, 2
  %493 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %471, 3
  %495 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %494, i32* %495, align 4
  %496 = sext i32 %488 to i64
  %497 = getelementptr inbounds i32* %pli.0, i64 %496
  br label %498

; <label>:498                                     ; preds = %487
  %499 = add nsw i32 %h.0, 1
  br label %466

; <label>:500                                     ; preds = %466
  br label %501

; <label>:501                                     ; preds = %500, %404
  %pli.1 = phi i32* [ %pli.0, %500 ], [ %390, %404 ]
  %502 = ptrtoint i32* %pli.1 to i64
  %503 = ptrtoint i32* %186 to i64
  %504 = sub i64 %502, %503
  %505 = sdiv exact i64 %504, 4
  %506 = trunc i64 %505 to i32
  %507 = icmp ne i32 %506, 0
  br i1 %507, label %508, label %515

; <label>:508                                     ; preds = %501
  %509 = sub nsw i32 %506, 1
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32* %186, i64 %510
  %512 = load i32* %511, align 4
  %513 = sext i32 %506 to i64
  %514 = getelementptr inbounds i32* %186, i64 %513
  store i32 %512, i32* %514, align 4
  br label %515

; <label>:515                                     ; preds = %508, %501
  br label %518

; <label>:516                                     ; preds = %299
  %517 = add nsw i32 %pairlistoffset.0, 1
  br label %518

; <label>:518                                     ; preds = %516, %515
  %pairlistoffset.1 = phi i32 [ 0, %515 ], [ %517, %516 ]
  %pairlistindex.2 = phi i32 [ %506, %515 ], [ %pairlistindex.0, %516 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %515 ], [ %fixg_lower.0, %516 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %515 ], [ %g_lower.0, %516 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %515 ], [ %j_hgroup.0, %516 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %515 ], [ %pairCount.0, %516 ]
  %519 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %520 = icmp ne i32 %519, 0
  br i1 %520, label %521, label %527

; <label>:521                                     ; preds = %518
  %522 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %523 = load i32* %522, align 4
  %524 = lshr i32 %523, 26
  %525 = and i32 %524, 1
  %526 = icmp ne i32 %525, 0
  br label %527

; <label>:527                                     ; preds = %521, %518
  %528 = phi i1 [ false, %518 ], [ %526, %521 ]
  %529 = zext i1 %528 to i32
  %530 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %531 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %532 = add nsw i32 %531, 1
  %533 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 28
  %536 = mul nsw i32 %532, %535
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds double* %530, i64 %537
  %539 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 1
  %540 = load float* %539, align 4
  %541 = fpext float %540 to double
  %542 = fmul double 3.320636e+02, %541
  %543 = fmul double %542, %16
  %544 = fmul double %543, %9
  %545 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %546 = load i32* %545, align 4
  %547 = and i32 %546, 4194303
  %548 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %547)
  %549 = zext i16 %548 to i32
  %550 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %549)
  %551 = icmp ne i32 %529, 0
  br i1 %551, label %552, label %614

; <label>:552                                     ; preds = %527
  br label %553

; <label>:553                                     ; preds = %611, %552
  %pli3.0 = phi i32* [ %200, %552 ], [ %pli3.2, %611 ]
  %plin.0 = phi i32* [ %214, %552 ], [ %plin.2, %611 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %552 ], [ %612, %611 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %552 ], [ %exclChecksum.3, %611 ]
  %554 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %554, label %555, label %613

; <label>:555                                     ; preds = %553
  %556 = sext i32 %k.0 to i64
  %557 = getelementptr inbounds i32* %186, i64 %556
  %558 = load i32* %557, align 4
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %34, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 0
  %563 = load double* %562, align 8
  %564 = fsub double %285, %563
  %565 = fmul double %564, %564
  %566 = sext i32 %558 to i64
  %567 = getelementptr inbounds %struct.CompAtom* %34, i64 %566
  %568 = getelementptr inbounds %struct.CompAtom* %567, i32 0, i32 0
  %569 = getelementptr inbounds %class.Vector* %568, i32 0, i32 1
  %570 = load double* %569, align 8
  %571 = fsub double %288, %570
  %572 = fmul double %571, %571
  %573 = fadd double %565, %572
  %574 = sext i32 %558 to i64
  %575 = getelementptr inbounds %struct.CompAtom* %34, i64 %574
  %576 = getelementptr inbounds %struct.CompAtom* %575, i32 0, i32 0
  %577 = getelementptr inbounds %class.Vector* %576, i32 0, i32 2
  %578 = load double* %577, align 8
  %579 = fsub double %291, %578
  %580 = fmul double %579, %579
  %581 = fadd double %573, %580
  %582 = sext i32 %558 to i64
  %583 = getelementptr inbounds %struct.CompAtom* %34, i64 %582
  %584 = getelementptr inbounds %struct.CompAtom* %583, i32 0, i32 2
  %585 = load i32* %584, align 4
  %586 = lshr i32 %585, 26
  %587 = and i32 %586, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %610, label %589

; <label>:589                                     ; preds = %555
  %590 = fcmp ole double %581, %7
  br i1 %590, label %591, label %610

; <label>:591                                     ; preds = %589
  %592 = fcmp ole double %581, %19
  br i1 %592, label %593, label %596

; <label>:593                                     ; preds = %591
  %594 = add nsw i32 %exclChecksum.1, 1
  %595 = icmp ne i32 %594, 0
  br i1 %595, label %610, label %596

; <label>:596                                     ; preds = %593, %591
  %exclChecksum.2 = phi i32 [ %594, %593 ], [ %exclChecksum.1, %591 ]
  %597 = sext i32 %558 to i64
  %598 = getelementptr inbounds %struct.CompAtom* %34, i64 %597
  %599 = getelementptr inbounds %struct.CompAtom* %598, i32 0, i32 2
  %600 = load i32* %599, align 4
  %601 = and i32 %600, 4194303
  %602 = icmp sge i32 %601, %275
  br i1 %602, label %603, label %607

; <label>:603                                     ; preds = %596
  %604 = icmp sle i32 %601, %277
  br i1 %604, label %605, label %607

; <label>:605                                     ; preds = %603
  %606 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %558, i32* %pli3.0, align 4
  br label %609

; <label>:607                                     ; preds = %603, %596
  %608 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %558, i32* %plin.0, align 4
  br label %609

; <label>:609                                     ; preds = %607, %605
  %pli3.1 = phi i32* [ %606, %605 ], [ %pli3.0, %607 ]
  %plin.1 = phi i32* [ %plin.0, %605 ], [ %608, %607 ]
  br label %610

; <label>:610                                     ; preds = %609, %593, %589, %555
  %pli3.2 = phi i32* [ %pli3.0, %555 ], [ %pli3.0, %593 ], [ %pli3.1, %609 ], [ %pli3.0, %589 ]
  %plin.2 = phi i32* [ %plin.0, %555 ], [ %plin.0, %593 ], [ %plin.1, %609 ], [ %plin.0, %589 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %555 ], [ %594, %593 ], [ %exclChecksum.2, %609 ], [ %exclChecksum.1, %589 ]
  br label %611

; <label>:611                                     ; preds = %610
  %612 = add nsw i32 %k.0, 1
  br label %553

; <label>:613                                     ; preds = %553
  br label %693

; <label>:614                                     ; preds = %527
  %615 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %615, label %616, label %692

; <label>:616                                     ; preds = %614
  %617 = sext i32 %pairlistoffset.1 to i64
  %618 = getelementptr inbounds i32* %186, i64 %617
  %619 = load i32* %618, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds %struct.CompAtom* %34, i64 %620
  %622 = getelementptr inbounds %struct.CompAtom* %621, i32 0, i32 0
  %623 = getelementptr inbounds %class.Vector* %622, i32 0, i32 0
  %624 = load double* %623, align 8
  %625 = sext i32 %619 to i64
  %626 = getelementptr inbounds %struct.CompAtom* %34, i64 %625
  %627 = getelementptr inbounds %struct.CompAtom* %626, i32 0, i32 0
  %628 = getelementptr inbounds %class.Vector* %627, i32 0, i32 1
  %629 = load double* %628, align 8
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %34, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 2
  %634 = load double* %633, align 8
  %635 = sext i32 %619 to i64
  %636 = getelementptr inbounds %struct.CompAtom* %34, i64 %635
  %637 = getelementptr inbounds %struct.CompAtom* %636, i32 0, i32 2
  %638 = load i32* %637, align 4
  %639 = and i32 %638, 4194303
  br label %640

; <label>:640                                     ; preds = %685, %616
  %pli3.3 = phi i32* [ %200, %616 ], [ %pli3.5, %685 ]
  %plin.3 = phi i32* [ %214, %616 ], [ %plin.5, %685 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %616 ], [ %643, %685 ]
  %j210.0 = phi i32 [ %619, %616 ], [ %646, %685 ]
  %p_j_x11.0 = phi double [ %624, %616 ], [ %653, %685 ]
  %p_j_y12.0 = phi double [ %629, %616 ], [ %661, %685 ]
  %p_j_z13.0 = phi double [ %634, %616 ], [ %669, %685 ]
  %atom214.0 = phi i32 [ %639, %616 ], [ %690, %685 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %616 ], [ %exclChecksum.6, %685 ]
  %641 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %641, label %642, label %691

; <label>:642                                     ; preds = %640
  %643 = add nsw i32 %k9.0, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds i32* %186, i64 %644
  %646 = load i32* %645, align 4
  %647 = fsub double %285, %p_j_x11.0
  %648 = fmul double %647, %647
  %649 = sext i32 %646 to i64
  %650 = getelementptr inbounds %struct.CompAtom* %34, i64 %649
  %651 = getelementptr inbounds %struct.CompAtom* %650, i32 0, i32 0
  %652 = getelementptr inbounds %class.Vector* %651, i32 0, i32 0
  %653 = load double* %652, align 8
  %654 = fsub double %288, %p_j_y12.0
  %655 = fmul double %654, %654
  %656 = fadd double %648, %655
  %657 = sext i32 %646 to i64
  %658 = getelementptr inbounds %struct.CompAtom* %34, i64 %657
  %659 = getelementptr inbounds %struct.CompAtom* %658, i32 0, i32 0
  %660 = getelementptr inbounds %class.Vector* %659, i32 0, i32 1
  %661 = load double* %660, align 8
  %662 = fsub double %291, %p_j_z13.0
  %663 = fmul double %662, %662
  %664 = fadd double %656, %663
  %665 = sext i32 %646 to i64
  %666 = getelementptr inbounds %struct.CompAtom* %34, i64 %665
  %667 = getelementptr inbounds %struct.CompAtom* %666, i32 0, i32 0
  %668 = getelementptr inbounds %class.Vector* %667, i32 0, i32 2
  %669 = load double* %668, align 8
  %670 = fcmp ole double %664, %7
  br i1 %670, label %671, label %685

; <label>:671                                     ; preds = %642
  %672 = fcmp ole double %664, %19
  br i1 %672, label %673, label %676

; <label>:673                                     ; preds = %671
  %674 = add nsw i32 %exclChecksum.4, 1
  %675 = icmp ne i32 %674, 0
  br i1 %675, label %685, label %676

; <label>:676                                     ; preds = %673, %671
  %exclChecksum.5 = phi i32 [ %674, %673 ], [ %exclChecksum.4, %671 ]
  %677 = icmp sge i32 %atom214.0, %275
  br i1 %677, label %678, label %682

; <label>:678                                     ; preds = %676
  %679 = icmp sle i32 %atom214.0, %277
  br i1 %679, label %680, label %682

; <label>:680                                     ; preds = %678
  %681 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %684

; <label>:682                                     ; preds = %678, %676
  %683 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %684

; <label>:684                                     ; preds = %682, %680
  %pli3.4 = phi i32* [ %681, %680 ], [ %pli3.3, %682 ]
  %plin.4 = phi i32* [ %plin.3, %680 ], [ %683, %682 ]
  br label %685

; <label>:685                                     ; preds = %684, %673, %642
  %pli3.5 = phi i32* [ %pli3.3, %673 ], [ %pli3.4, %684 ], [ %pli3.3, %642 ]
  %plin.5 = phi i32* [ %plin.3, %673 ], [ %plin.4, %684 ], [ %plin.3, %642 ]
  %exclChecksum.6 = phi i32 [ %674, %673 ], [ %exclChecksum.5, %684 ], [ %exclChecksum.4, %642 ]
  %686 = sext i32 %646 to i64
  %687 = getelementptr inbounds %struct.CompAtom* %34, i64 %686
  %688 = getelementptr inbounds %struct.CompAtom* %687, i32 0, i32 2
  %689 = load i32* %688, align 4
  %690 = and i32 %689, 4194303
  br label %640

; <label>:691                                     ; preds = %640
  br label %692

; <label>:692                                     ; preds = %691, %614
  %pli3.6 = phi i32* [ %pli3.3, %691 ], [ %200, %614 ]
  %plin.6 = phi i32* [ %plin.3, %691 ], [ %214, %614 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %691 ], [ %exclChecksum.0, %614 ]
  br label %693

; <label>:693                                     ; preds = %692, %613
  %pli3.7 = phi i32* [ %pli3.0, %613 ], [ %pli3.6, %692 ]
  %plin.7 = phi i32* [ %plin.0, %613 ], [ %plin.6, %692 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %613 ], [ %exclChecksum.7, %692 ]
  %694 = ptrtoint i32* %pli3.7 to i64
  %695 = ptrtoint i32* %200 to i64
  %696 = sub i64 %694, %695
  %697 = sdiv exact i64 %696, 4
  %698 = trunc i64 %697 to i32
  %699 = icmp ne i32 %698, 0
  br i1 %699, label %700, label %707

; <label>:700                                     ; preds = %693
  %701 = sub nsw i32 %698, 1
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i32* %200, i64 %702
  %704 = load i32* %703, align 4
  %705 = sext i32 %698 to i64
  %706 = getelementptr inbounds i32* %200, i64 %705
  store i32 %704, i32* %706, align 4
  br label %707

; <label>:707                                     ; preds = %700, %693
  br label %708

; <label>:708                                     ; preds = %719, %707
  %plix.0 = phi i32* [ %228, %707 ], [ %717, %719 ]
  %pln.0 = phi i32* [ %214, %707 ], [ %720, %719 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %707 ], [ %718, %719 ]
  %709 = icmp ult i32* %pln.0, %plin.7
  br i1 %709, label %710, label %713

; <label>:710                                     ; preds = %708
  %711 = load i32* %pln.0, align 4
  %712 = icmp slt i32 %711, %j_hgroup.2
  br label %713

; <label>:713                                     ; preds = %710, %708
  %714 = phi i1 [ false, %708 ], [ %712, %710 ]
  br i1 %714, label %715, label %721

; <label>:715                                     ; preds = %713
  %716 = load i32* %pln.0, align 4
  %717 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %716, i32* %plix.0, align 4
  %718 = add nsw i32 %exclChecksum.9, -1
  br label %719

; <label>:719                                     ; preds = %715
  %720 = getelementptr inbounds i32* %pln.0, i32 1
  br label %708

; <label>:721                                     ; preds = %713
  br label %722

; <label>:722                                     ; preds = %737, %721
  %plix.1 = phi i32* [ %plix.0, %721 ], [ %735, %737 ]
  %k17.0 = phi i32 [ 0, %721 ], [ %738, %737 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %721 ], [ %736, %737 ]
  %723 = icmp slt i32 %k17.0, %698
  br i1 %723, label %724, label %729

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %200, i64 %725
  %727 = load i32* %726, align 4
  %728 = icmp slt i32 %727, %j_hgroup.2
  br label %729

; <label>:729                                     ; preds = %724, %722
  %730 = phi i1 [ false, %722 ], [ %728, %724 ]
  br i1 %730, label %731, label %739

; <label>:731                                     ; preds = %729
  %732 = sext i32 %k17.0 to i64
  %733 = getelementptr inbounds i32* %200, i64 %732
  %734 = load i32* %733, align 4
  %735 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %734, i32* %plix.1, align 4
  %736 = add nsw i32 %exclChecksum.10, -1
  br label %737

; <label>:737                                     ; preds = %731
  %738 = add nsw i32 %k17.0, 1
  br label %722

; <label>:739                                     ; preds = %729
  br label %740

; <label>:740                                     ; preds = %762, %739
  %plin.8 = phi i32* [ %plin.7, %739 ], [ %plin.9, %762 ]
  %plix.2 = phi i32* [ %plix.1, %739 ], [ %plix.3, %762 ]
  %plim.0 = phi i32* [ %242, %739 ], [ %plim.1, %762 ]
  %k17.1 = phi i32 [ %k17.0, %739 ], [ %763, %762 ]
  %741 = icmp slt i32 %k17.1, %698
  br i1 %741, label %742, label %764

; <label>:742                                     ; preds = %740
  %743 = sext i32 %k17.1 to i64
  %744 = getelementptr inbounds i32* %200, i64 %743
  %745 = load i32* %744, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds %struct.CompAtom* %34, i64 %746
  %748 = getelementptr inbounds %struct.CompAtom* %747, i32 0, i32 2
  %749 = load i32* %748, align 4
  %750 = and i32 %749, 4194303
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8* %282, i64 %751
  %753 = load i8* %752, align 1
  %754 = sext i8 %753 to i32
  switch i32 %754, label %761 [
    i32 0, label %755
    i32 1, label %757
    i32 2, label %759
  ]

; <label>:755                                     ; preds = %742
  %756 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %745, i32* %plin.8, align 4
  br label %761

; <label>:757                                     ; preds = %742
  %758 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %745, i32* %plix.2, align 4
  br label %761

; <label>:759                                     ; preds = %742
  %760 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %745, i32* %plim.0, align 4
  br label %761

; <label>:761                                     ; preds = %759, %757, %755, %742
  %plin.9 = phi i32* [ %plin.8, %742 ], [ %plin.8, %759 ], [ %plin.8, %757 ], [ %756, %755 ]
  %plix.3 = phi i32* [ %plix.2, %742 ], [ %plix.2, %759 ], [ %758, %757 ], [ %plix.2, %755 ]
  %plim.1 = phi i32* [ %plim.0, %742 ], [ %760, %759 ], [ %plim.0, %757 ], [ %plim.0, %755 ]
  br label %762

; <label>:762                                     ; preds = %761
  %763 = add nsw i32 %k17.1, 1
  br label %740

; <label>:764                                     ; preds = %740
  %765 = ptrtoint i32* %plix.2 to i64
  %766 = ptrtoint i32* %228 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %exclChecksum.10 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plim.0 to i64
  %773 = ptrtoint i32* %242 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = sext i32 %771 to i64
  %777 = add nsw i64 %776, %775
  %778 = trunc i64 %777 to i32
  %779 = ptrtoint i32* %plin.8 to i64
  %780 = ptrtoint i32* %pln.0 to i64
  %781 = sub i64 %779, %780
  %782 = sdiv exact i64 %781, 4
  %783 = trunc i64 %782 to i32
  br label %784

; <label>:784                                     ; preds = %892, %764
  %k17.2 = phi i32 [ 0, %764 ], [ %893, %892 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %764 ], [ %885, %892 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %764 ], [ %876, %892 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %764 ], [ %874, %892 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %764 ], [ %865, %892 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %764 ], [ %863, %892 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %764 ], [ %861, %892 ]
  %785 = icmp slt i32 %k17.2, %783
  br i1 %785, label %786, label %894

; <label>:786                                     ; preds = %784
  %787 = sext i32 %k17.2 to i64
  %788 = getelementptr inbounds i32* %pln.0, i64 %787
  %789 = load i32* %788, align 4
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds %struct.CompAtom* %34, i64 %790
  %792 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %793 = getelementptr inbounds %class.Vector* %792, i32 0, i32 0
  %794 = load double* %793, align 8
  %795 = fsub double %285, %794
  %796 = fmul double %795, %795
  %797 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %798 = getelementptr inbounds %class.Vector* %797, i32 0, i32 1
  %799 = load double* %798, align 8
  %800 = fsub double %288, %799
  %801 = fmul double %800, %800
  %802 = fadd double %796, %801
  %803 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %804 = getelementptr inbounds %class.Vector* %803, i32 0, i32 2
  %805 = load double* %804, align 8
  %806 = fsub double %291, %805
  %807 = fmul double %806, %806
  %808 = fadd double %802, %807
  %809 = fptrunc double %808 to float
  %810 = bitcast %union.anon.103* %r2f to float*
  store float %809, float* %810, align 4
  %811 = bitcast %union.anon.103* %r2f to i32*
  %812 = load i32* %811, align 4
  %813 = ashr i32 %812, 17
  %814 = add nsw i32 %813, %22
  %815 = mul nsw i32 16, %814
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds double* %14, i64 %816
  %818 = getelementptr inbounds double* %817, i64 8
  %819 = getelementptr inbounds double* %818, i64 4
  %820 = getelementptr inbounds double* %819, i64 0
  %821 = load double* %820, align 8
  %822 = bitcast %union.anon.103* %r2f to i32*
  %823 = load i32* %822, align 4
  %824 = and i32 %823, -131072
  store i32 %824, i32* %822, align 4
  %825 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 1
  %826 = load float* %825, align 4
  %827 = fpext float %826 to double
  %828 = fmul double %544, %827
  %829 = bitcast %union.anon.103* %r2f to float*
  %830 = load float* %829, align 4
  %831 = fpext float %830 to double
  %832 = fsub double %808, %831
  %833 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 2
  %834 = load i32* %833, align 4
  %835 = lshr i32 %834, 28
  %836 = zext i32 %835 to i64
  %837 = getelementptr inbounds double* %538, i64 %836
  %838 = load double* %837, align 8
  %839 = getelementptr inbounds double* %819, i64 1
  %840 = load double* %839, align 8
  %841 = getelementptr inbounds double* %819, i64 2
  %842 = load double* %841, align 8
  %843 = getelementptr inbounds double* %819, i64 3
  %844 = load double* %843, align 8
  %845 = fmul double %844, %828
  %846 = fmul double %842, %828
  %847 = fmul double %840, %828
  %848 = fmul double %821, %828
  %849 = fmul double 3.000000e+00, %832
  %850 = fmul double %849, %845
  %851 = fmul double 2.000000e+00, %846
  %852 = fadd double %850, %851
  %853 = fmul double %852, %832
  %854 = fadd double %853, %847
  %855 = fmul double -2.000000e+00, %854
  %856 = fmul double %855, %838
  %857 = sext i32 %789 to i64
  %858 = getelementptr inbounds %class.Vector* %248, i64 %857
  %859 = fmul double %856, %795
  %860 = fmul double %859, %795
  %861 = fadd double %fullElectVirial_xx.1, %860
  %862 = fmul double %859, %800
  %863 = fadd double %fullElectVirial_xy.1, %862
  %864 = fmul double %859, %806
  %865 = fadd double %fullElectVirial_xz.1, %864
  %866 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %867 = load double* %866, align 8
  %868 = fadd double %867, %859
  store double %868, double* %866, align 8
  %869 = getelementptr inbounds %class.Vector* %858, i32 0, i32 0
  %870 = load double* %869, align 8
  %871 = fsub double %870, %859
  store double %871, double* %869, align 8
  %872 = fmul double %856, %800
  %873 = fmul double %872, %800
  %874 = fadd double %fullElectVirial_yy.1, %873
  %875 = fmul double %872, %806
  %876 = fadd double %fullElectVirial_yz.1, %875
  %877 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %878 = load double* %877, align 8
  %879 = fadd double %878, %872
  store double %879, double* %877, align 8
  %880 = getelementptr inbounds %class.Vector* %858, i32 0, i32 1
  %881 = load double* %880, align 8
  %882 = fsub double %881, %872
  store double %882, double* %880, align 8
  %883 = fmul double %856, %806
  %884 = fmul double %883, %806
  %885 = fadd double %fullElectVirial_zz.1, %884
  %886 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %887 = load double* %886, align 8
  %888 = fadd double %887, %883
  store double %888, double* %886, align 8
  %889 = getelementptr inbounds %class.Vector* %858, i32 0, i32 2
  %890 = load double* %889, align 8
  %891 = fsub double %890, %883
  store double %891, double* %889, align 8
  br label %892

; <label>:892                                     ; preds = %786
  %893 = add nsw i32 %k17.2, 1
  br label %784

; <label>:894                                     ; preds = %784
  %895 = ptrtoint i32* %plim.0 to i64
  %896 = ptrtoint i32* %242 to i64
  %897 = sub i64 %895, %896
  %898 = sdiv exact i64 %897, 4
  %899 = trunc i64 %898 to i32
  br label %900

; <label>:900                                     ; preds = %1027, %894
  %k17.3 = phi i32 [ 0, %894 ], [ %1028, %1027 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %894 ], [ %1020, %1027 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %894 ], [ %1011, %1027 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %894 ], [ %1009, %1027 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %894 ], [ %1000, %1027 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %894 ], [ %998, %1027 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %894 ], [ %996, %1027 ]
  %901 = icmp slt i32 %k17.3, %899
  br i1 %901, label %902, label %1029

; <label>:902                                     ; preds = %900
  %903 = sext i32 %k17.3 to i64
  %904 = getelementptr inbounds i32* %242, i64 %903
  %905 = load i32* %904, align 4
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds %struct.CompAtom* %34, i64 %906
  %908 = getelementptr inbounds %struct.CompAtom* %907, i32 0, i32 0
  %909 = getelementptr inbounds %class.Vector* %908, i32 0, i32 0
  %910 = load double* %909, align 8
  %911 = fsub double %285, %910
  %912 = fmul double %911, %911
  %913 = getelementptr inbounds %struct.CompAtom* %907, i32 0, i32 0
  %914 = getelementptr inbounds %class.Vector* %913, i32 0, i32 1
  %915 = load double* %914, align 8
  %916 = fsub double %288, %915
  %917 = fmul double %916, %916
  %918 = fadd double %912, %917
  %919 = getelementptr inbounds %struct.CompAtom* %907, i32 0, i32 0
  %920 = getelementptr inbounds %class.Vector* %919, i32 0, i32 2
  %921 = load double* %920, align 8
  %922 = fsub double %291, %921
  %923 = fmul double %922, %922
  %924 = fadd double %918, %923
  %925 = fptrunc double %924 to float
  %926 = bitcast %union.anon.104* %r2f28 to float*
  store float %925, float* %926, align 4
  %927 = bitcast %union.anon.104* %r2f28 to i32*
  %928 = load i32* %927, align 4
  %929 = ashr i32 %928, 17
  %930 = add nsw i32 %929, %22
  %931 = mul nsw i32 16, %930
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds double* %14, i64 %932
  %934 = getelementptr inbounds double* %933, i64 8
  %935 = getelementptr inbounds double* %934, i64 4
  %936 = getelementptr inbounds double* %935, i64 0
  %937 = load double* %936, align 8
  %938 = bitcast %union.anon.104* %r2f28 to i32*
  %939 = load i32* %938, align 4
  %940 = and i32 %939, -131072
  store i32 %940, i32* %938, align 4
  %941 = getelementptr inbounds %struct.CompAtom* %907, i32 0, i32 1
  %942 = load float* %941, align 4
  %943 = fpext float %942 to double
  %944 = fmul double %544, %943
  %945 = bitcast %union.anon.104* %r2f28 to float*
  %946 = load float* %945, align 4
  %947 = fpext float %946 to double
  %948 = fsub double %924, %947
  %949 = getelementptr inbounds %struct.CompAtom* %907, i32 0, i32 2
  %950 = load i32* %949, align 4
  %951 = lshr i32 %950, 28
  %952 = zext i32 %951 to i64
  %953 = getelementptr inbounds double* %538, i64 %952
  %954 = load double* %953, align 8
  %955 = getelementptr inbounds double* %935, i64 1
  %956 = load double* %955, align 8
  %957 = getelementptr inbounds double* %935, i64 2
  %958 = load double* %957, align 8
  %959 = getelementptr inbounds double* %935, i64 3
  %960 = load double* %959, align 8
  %961 = mul nsw i32 4, %930
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds double* %15, i64 %962
  %964 = getelementptr inbounds double* %963, i64 0
  %965 = load double* %964, align 8
  %966 = fmul double %18, %965
  %967 = fsub double %937, %966
  %968 = getelementptr inbounds double* %963, i64 1
  %969 = load double* %968, align 8
  %970 = fmul double %18, %969
  %971 = fsub double %956, %970
  %972 = getelementptr inbounds double* %963, i64 2
  %973 = load double* %972, align 8
  %974 = fmul double %18, %973
  %975 = fsub double %958, %974
  %976 = getelementptr inbounds double* %963, i64 3
  %977 = load double* %976, align 8
  %978 = fmul double %18, %977
  %979 = fsub double %960, %978
  %980 = fmul double %979, %944
  %981 = fmul double %975, %944
  %982 = fmul double %971, %944
  %983 = fmul double %967, %944
  %984 = fmul double 3.000000e+00, %948
  %985 = fmul double %984, %980
  %986 = fmul double 2.000000e+00, %981
  %987 = fadd double %985, %986
  %988 = fmul double %987, %948
  %989 = fadd double %988, %982
  %990 = fmul double -2.000000e+00, %989
  %991 = fmul double %990, %954
  %992 = sext i32 %905 to i64
  %993 = getelementptr inbounds %class.Vector* %248, i64 %992
  %994 = fmul double %991, %911
  %995 = fmul double %994, %911
  %996 = fadd double %fullElectVirial_xx.2, %995
  %997 = fmul double %994, %916
  %998 = fadd double %fullElectVirial_xy.2, %997
  %999 = fmul double %994, %922
  %1000 = fadd double %fullElectVirial_xz.2, %999
  %1001 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1002 = load double* %1001, align 8
  %1003 = fadd double %1002, %994
  store double %1003, double* %1001, align 8
  %1004 = getelementptr inbounds %class.Vector* %993, i32 0, i32 0
  %1005 = load double* %1004, align 8
  %1006 = fsub double %1005, %994
  store double %1006, double* %1004, align 8
  %1007 = fmul double %991, %916
  %1008 = fmul double %1007, %916
  %1009 = fadd double %fullElectVirial_yy.2, %1008
  %1010 = fmul double %1007, %922
  %1011 = fadd double %fullElectVirial_yz.2, %1010
  %1012 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1013 = load double* %1012, align 8
  %1014 = fadd double %1013, %1007
  store double %1014, double* %1012, align 8
  %1015 = getelementptr inbounds %class.Vector* %993, i32 0, i32 1
  %1016 = load double* %1015, align 8
  %1017 = fsub double %1016, %1007
  store double %1017, double* %1015, align 8
  %1018 = fmul double %991, %922
  %1019 = fmul double %1018, %922
  %1020 = fadd double %fullElectVirial_zz.2, %1019
  %1021 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1022 = load double* %1021, align 8
  %1023 = fadd double %1022, %1018
  store double %1023, double* %1021, align 8
  %1024 = getelementptr inbounds %class.Vector* %993, i32 0, i32 2
  %1025 = load double* %1024, align 8
  %1026 = fsub double %1025, %1018
  store double %1026, double* %1024, align 8
  br label %1027

; <label>:1027                                    ; preds = %902
  %1028 = add nsw i32 %k17.3, 1
  br label %900

; <label>:1029                                    ; preds = %900
  %1030 = ptrtoint i32* %plix.2 to i64
  %1031 = ptrtoint i32* %228 to i64
  %1032 = sub i64 %1030, %1031
  %1033 = sdiv exact i64 %1032, 4
  %1034 = trunc i64 %1033 to i32
  br label %1035

; <label>:1035                                    ; preds = %1158, %1029
  %k17.4 = phi i32 [ 0, %1029 ], [ %1159, %1158 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1029 ], [ %1151, %1158 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1029 ], [ %1142, %1158 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1029 ], [ %1140, %1158 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1029 ], [ %1131, %1158 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1029 ], [ %1129, %1158 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1029 ], [ %1127, %1158 ]
  %1036 = icmp slt i32 %k17.4, %1034
  br i1 %1036, label %1037, label %1160

; <label>:1037                                    ; preds = %1035
  %1038 = sext i32 %k17.4 to i64
  %1039 = getelementptr inbounds i32* %228, i64 %1038
  %1040 = load i32* %1039, align 4
  %1041 = sext i32 %1040 to i64
  %1042 = getelementptr inbounds %struct.CompAtom* %34, i64 %1041
  %1043 = getelementptr inbounds %struct.CompAtom* %1042, i32 0, i32 0
  %1044 = getelementptr inbounds %class.Vector* %1043, i32 0, i32 0
  %1045 = load double* %1044, align 8
  %1046 = fsub double %285, %1045
  %1047 = fmul double %1046, %1046
  %1048 = getelementptr inbounds %struct.CompAtom* %1042, i32 0, i32 0
  %1049 = getelementptr inbounds %class.Vector* %1048, i32 0, i32 1
  %1050 = load double* %1049, align 8
  %1051 = fsub double %288, %1050
  %1052 = fmul double %1051, %1051
  %1053 = fadd double %1047, %1052
  %1054 = getelementptr inbounds %struct.CompAtom* %1042, i32 0, i32 0
  %1055 = getelementptr inbounds %class.Vector* %1054, i32 0, i32 2
  %1056 = load double* %1055, align 8
  %1057 = fsub double %291, %1056
  %1058 = fmul double %1057, %1057
  %1059 = fadd double %1053, %1058
  %1060 = fptrunc double %1059 to float
  %1061 = bitcast %union.anon.105* %r2f50 to float*
  store float %1060, float* %1061, align 4
  %1062 = bitcast %union.anon.105* %r2f50 to i32*
  %1063 = load i32* %1062, align 4
  %1064 = ashr i32 %1063, 17
  %1065 = add nsw i32 %1064, %22
  %1066 = mul nsw i32 16, %1065
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds double* %14, i64 %1067
  %1069 = getelementptr inbounds double* %1068, i64 8
  %1070 = getelementptr inbounds double* %1069, i64 4
  %1071 = getelementptr inbounds double* %1070, i64 0
  %1072 = load double* %1071, align 8
  %1073 = bitcast %union.anon.105* %r2f50 to i32*
  %1074 = load i32* %1073, align 4
  %1075 = and i32 %1074, -131072
  store i32 %1075, i32* %1073, align 4
  %1076 = getelementptr inbounds %struct.CompAtom* %1042, i32 0, i32 1
  %1077 = load float* %1076, align 4
  %1078 = fpext float %1077 to double
  %1079 = fmul double %544, %1078
  %1080 = bitcast %union.anon.105* %r2f50 to float*
  %1081 = load float* %1080, align 4
  %1082 = fpext float %1081 to double
  %1083 = fsub double %1059, %1082
  %1084 = getelementptr inbounds %struct.CompAtom* %1042, i32 0, i32 2
  %1085 = load i32* %1084, align 4
  %1086 = lshr i32 %1085, 28
  %1087 = zext i32 %1086 to i64
  %1088 = getelementptr inbounds double* %538, i64 %1087
  %1089 = load double* %1088, align 8
  %1090 = getelementptr inbounds double* %1070, i64 1
  %1091 = load double* %1090, align 8
  %1092 = getelementptr inbounds double* %1070, i64 2
  %1093 = load double* %1092, align 8
  %1094 = getelementptr inbounds double* %1070, i64 3
  %1095 = load double* %1094, align 8
  %1096 = mul nsw i32 4, %1065
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds double* %15, i64 %1097
  %1099 = getelementptr inbounds double* %1098, i64 0
  %1100 = load double* %1099, align 8
  %1101 = fsub double %1072, %1100
  %1102 = getelementptr inbounds double* %1098, i64 1
  %1103 = load double* %1102, align 8
  %1104 = fsub double %1091, %1103
  %1105 = getelementptr inbounds double* %1098, i64 2
  %1106 = load double* %1105, align 8
  %1107 = fsub double %1093, %1106
  %1108 = getelementptr inbounds double* %1098, i64 3
  %1109 = load double* %1108, align 8
  %1110 = fsub double %1095, %1109
  %1111 = fmul double %1110, %1079
  %1112 = fmul double %1107, %1079
  %1113 = fmul double %1104, %1079
  %1114 = fmul double %1101, %1079
  %1115 = fmul double 3.000000e+00, %1083
  %1116 = fmul double %1115, %1111
  %1117 = fmul double 2.000000e+00, %1112
  %1118 = fadd double %1116, %1117
  %1119 = fmul double %1118, %1083
  %1120 = fadd double %1119, %1113
  %1121 = fmul double -2.000000e+00, %1120
  %1122 = fmul double %1121, %1089
  %1123 = sext i32 %1040 to i64
  %1124 = getelementptr inbounds %class.Vector* %248, i64 %1123
  %1125 = fmul double %1122, %1046
  %1126 = fmul double %1125, %1046
  %1127 = fadd double %fullElectVirial_xx.3, %1126
  %1128 = fmul double %1125, %1051
  %1129 = fadd double %fullElectVirial_xy.3, %1128
  %1130 = fmul double %1125, %1057
  %1131 = fadd double %fullElectVirial_xz.3, %1130
  %1132 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1133 = load double* %1132, align 8
  %1134 = fadd double %1133, %1125
  store double %1134, double* %1132, align 8
  %1135 = getelementptr inbounds %class.Vector* %1124, i32 0, i32 0
  %1136 = load double* %1135, align 8
  %1137 = fsub double %1136, %1125
  store double %1137, double* %1135, align 8
  %1138 = fmul double %1122, %1051
  %1139 = fmul double %1138, %1051
  %1140 = fadd double %fullElectVirial_yy.3, %1139
  %1141 = fmul double %1138, %1057
  %1142 = fadd double %fullElectVirial_yz.3, %1141
  %1143 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1144 = load double* %1143, align 8
  %1145 = fadd double %1144, %1138
  store double %1145, double* %1143, align 8
  %1146 = getelementptr inbounds %class.Vector* %1124, i32 0, i32 1
  %1147 = load double* %1146, align 8
  %1148 = fsub double %1147, %1138
  store double %1148, double* %1146, align 8
  %1149 = fmul double %1122, %1057
  %1150 = fmul double %1149, %1057
  %1151 = fadd double %fullElectVirial_zz.3, %1150
  %1152 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1153 = load double* %1152, align 8
  %1154 = fadd double %1153, %1149
  store double %1154, double* %1152, align 8
  %1155 = getelementptr inbounds %class.Vector* %1124, i32 0, i32 2
  %1156 = load double* %1155, align 8
  %1157 = fsub double %1156, %1149
  store double %1157, double* %1155, align 8
  br label %1158

; <label>:1158                                    ; preds = %1037
  %1159 = add nsw i32 %k17.4, 1
  br label %1035

; <label>:1160                                    ; preds = %1035
  br label %1161

; <label>:1161                                    ; preds = %1160, %327
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %327 ], [ %pairlistoffset.1, %1160 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %327 ], [ %pairlistindex.2, %1160 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %327 ], [ %fixg_lower.3, %1160 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %327 ], [ %g_lower.3, %1160 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %327 ], [ %j_hgroup.2, %1160 ]
  %pairCount.3 = phi i32 [ %323, %327 ], [ %pairCount.2, %1160 ]
  %i.1 = phi i32 [ %329, %327 ], [ %i.0, %1160 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %327 ], [ %fullElectVirial_zz.3, %1160 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %327 ], [ %fullElectVirial_yz.3, %1160 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %327 ], [ %fullElectVirial_yy.3, %1160 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %327 ], [ %fullElectVirial_xz.3, %1160 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %327 ], [ %fullElectVirial_xy.3, %1160 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %327 ], [ %fullElectVirial_xx.3, %1160 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %327 ], [ %778, %1160 ]
  %1162 = add nsw i32 %i.1, 1
  br label %264

; <label>:1163                                    ; preds = %264
  %1164 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1165 = icmp ne i32* %48, %1164
  br i1 %1165, label %1166, label %1171

; <label>:1166                                    ; preds = %1163
  %1167 = icmp eq i32* %48, null
  br i1 %1167, label %1170, label %1168

; <label>:1168                                    ; preds = %1166
  %1169 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1169) #8
  br label %1170

; <label>:1170                                    ; preds = %1168, %1166
  br label %1171

; <label>:1171                                    ; preds = %1170, %1163
  %1172 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1173 = icmp ne i32* %62, %1172
  br i1 %1173, label %1174, label %1179

; <label>:1174                                    ; preds = %1171
  %1175 = icmp eq i32* %62, null
  br i1 %1175, label %1178, label %1176

; <label>:1176                                    ; preds = %1174
  %1177 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1177) #8
  br label %1178

; <label>:1178                                    ; preds = %1176, %1174
  br label %1179

; <label>:1179                                    ; preds = %1178, %1171
  %1180 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1181 = icmp ne i32* %76, %1180
  br i1 %1181, label %1182, label %1187

; <label>:1182                                    ; preds = %1179
  %1183 = icmp eq i32* %76, null
  br i1 %1183, label %1186, label %1184

; <label>:1184                                    ; preds = %1182
  %1185 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1185) #8
  br label %1186

; <label>:1186                                    ; preds = %1184, %1182
  br label %1187

; <label>:1187                                    ; preds = %1186, %1179
  %1188 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1189 = icmp ne i32* %186, %1188
  br i1 %1189, label %1190, label %1195

; <label>:1190                                    ; preds = %1187
  %1191 = icmp eq i32* %186, null
  br i1 %1191, label %1194, label %1192

; <label>:1192                                    ; preds = %1190
  %1193 = bitcast i32* %186 to i8*
  call void @_ZdaPv(i8* %1193) #8
  br label %1194

; <label>:1194                                    ; preds = %1192, %1190
  br label %1195

; <label>:1195                                    ; preds = %1194, %1187
  %1196 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1197 = icmp ne i32* %200, %1196
  br i1 %1197, label %1198, label %1203

; <label>:1198                                    ; preds = %1195
  %1199 = icmp eq i32* %200, null
  br i1 %1199, label %1202, label %1200

; <label>:1200                                    ; preds = %1198
  %1201 = bitcast i32* %200 to i8*
  call void @_ZdaPv(i8* %1201) #8
  br label %1202

; <label>:1202                                    ; preds = %1200, %1198
  br label %1203

; <label>:1203                                    ; preds = %1202, %1195
  %1204 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1205 = icmp ne i32* %214, %1204
  br i1 %1205, label %1206, label %1211

; <label>:1206                                    ; preds = %1203
  %1207 = icmp eq i32* %214, null
  br i1 %1207, label %1210, label %1208

; <label>:1208                                    ; preds = %1206
  %1209 = bitcast i32* %214 to i8*
  call void @_ZdaPv(i8* %1209) #8
  br label %1210

; <label>:1210                                    ; preds = %1208, %1206
  br label %1211

; <label>:1211                                    ; preds = %1210, %1203
  %1212 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1213 = icmp ne i32* %228, %1212
  br i1 %1213, label %1214, label %1219

; <label>:1214                                    ; preds = %1211
  %1215 = icmp eq i32* %228, null
  br i1 %1215, label %1218, label %1216

; <label>:1216                                    ; preds = %1214
  %1217 = bitcast i32* %228 to i8*
  call void @_ZdaPv(i8* %1217) #8
  br label %1218

; <label>:1218                                    ; preds = %1216, %1214
  br label %1219

; <label>:1219                                    ; preds = %1218, %1211
  %1220 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1221 = icmp ne i32* %242, %1220
  br i1 %1221, label %1222, label %1227

; <label>:1222                                    ; preds = %1219
  %1223 = icmp eq i32* %242, null
  br i1 %1223, label %1226, label %1224

; <label>:1224                                    ; preds = %1222
  %1225 = bitcast i32* %242 to i8*
  call void @_ZdaPv(i8* %1225) #8
  br label %1226

; <label>:1226                                    ; preds = %1224, %1222
  br label %1227

; <label>:1227                                    ; preds = %1226, %1219
  %1228 = sitofp i32 %exclChecksum.0 to double
  %1229 = getelementptr inbounds double* %6, i64 22
  %1230 = load double* %1229, align 8
  %1231 = fadd double %1230, %1228
  store double %1231, double* %1229, align 8
  %1232 = getelementptr inbounds double* %6, i64 12
  %1233 = load double* %1232, align 8
  %1234 = fadd double %1233, %fullElectVirial_xx.0
  store double %1234, double* %1232, align 8
  %1235 = getelementptr inbounds double* %6, i64 13
  %1236 = load double* %1235, align 8
  %1237 = fadd double %1236, %fullElectVirial_xy.0
  store double %1237, double* %1235, align 8
  %1238 = getelementptr inbounds double* %6, i64 14
  %1239 = load double* %1238, align 8
  %1240 = fadd double %1239, %fullElectVirial_xz.0
  store double %1240, double* %1238, align 8
  %1241 = getelementptr inbounds double* %6, i64 15
  %1242 = load double* %1241, align 8
  %1243 = fadd double %1242, %fullElectVirial_xy.0
  store double %1243, double* %1241, align 8
  %1244 = getelementptr inbounds double* %6, i64 16
  %1245 = load double* %1244, align 8
  %1246 = fadd double %1245, %fullElectVirial_yy.0
  store double %1246, double* %1244, align 8
  %1247 = getelementptr inbounds double* %6, i64 17
  %1248 = load double* %1247, align 8
  %1249 = fadd double %1248, %fullElectVirial_yz.0
  store double %1249, double* %1247, align 8
  %1250 = getelementptr inbounds double* %6, i64 18
  %1251 = load double* %1250, align 8
  %1252 = fadd double %1251, %fullElectVirial_xz.0
  store double %1252, double* %1250, align 8
  %1253 = getelementptr inbounds double* %6, i64 19
  %1254 = load double* %1253, align 8
  %1255 = fadd double %1254, %fullElectVirial_yz.0
  store double %1255, double* %1253, align 8
  %1256 = getelementptr inbounds double* %6, i64 20
  %1257 = load double* %1256, align 8
  %1258 = fadd double %1257, %fullElectVirial_zz.0
  store double %1258, double* %1256, align 8
  br label %1259

; <label>:1259                                    ; preds = %1227, %161, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil35calc_self_energy_slow_fullelect_lesEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.106, align 4
  %r2f28 = alloca %union.anon.107, align 4
  %r2f51 = alloca %union.anon.108, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1286

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %163

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  %136 = icmp ne i32 %all_fixed.0, 0
  br i1 %136, label %137, label %162

; <label>:137                                     ; preds = %135
  %138 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %139 = icmp ne i32* %48, %138
  br i1 %139, label %140, label %145

; <label>:140                                     ; preds = %137
  %141 = icmp eq i32* %48, null
  br i1 %141, label %144, label %142

; <label>:142                                     ; preds = %140
  %143 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %143) #8
  br label %144

; <label>:144                                     ; preds = %142, %140
  br label %145

; <label>:145                                     ; preds = %144, %137
  %146 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %147 = icmp ne i32* %62, %146
  br i1 %147, label %148, label %153

; <label>:148                                     ; preds = %145
  %149 = icmp eq i32* %62, null
  br i1 %149, label %152, label %150

; <label>:150                                     ; preds = %148
  %151 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %151) #8
  br label %152

; <label>:152                                     ; preds = %150, %148
  br label %153

; <label>:153                                     ; preds = %152, %145
  %154 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %155 = icmp ne i32* %76, %154
  br i1 %155, label %156, label %161

; <label>:156                                     ; preds = %153
  %157 = icmp eq i32* %76, null
  br i1 %157, label %160, label %158

; <label>:158                                     ; preds = %156
  %159 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %159) #8
  br label %160

; <label>:160                                     ; preds = %158, %156
  br label %161

; <label>:161                                     ; preds = %160, %153
  br label %1286

; <label>:162                                     ; preds = %135
  br label %163

; <label>:163                                     ; preds = %162, %111
  %fixg.2 = phi i32 [ %fixg.0, %162 ], [ 0, %111 ]
  %164 = icmp ne i32 %fixg.2, 0
  br i1 %164, label %165, label %172

; <label>:165                                     ; preds = %163
  %166 = sub nsw i32 %fixg.2, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32* %62, i64 %167
  %169 = load i32* %168, align 4
  %170 = sext i32 %fixg.2 to i64
  %171 = getelementptr inbounds i32* %62, i64 %170
  store i32 %169, i32* %171, align 4
  br label %172

; <label>:172                                     ; preds = %165, %163
  %173 = icmp slt i32 %28, 1000
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %172
  %175 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %185

; <label>:176                                     ; preds = %172
  %177 = add nsw i32 %28, 5
  %178 = sext i32 %177 to i64
  %179 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %178, i64 4)
  %180 = extractvalue { i64, i1 } %179, 1
  %181 = extractvalue { i64, i1 } %179, 0
  %182 = select i1 %180, i64 -1, i64 %181
  %183 = call noalias i8* @_Znam(i64 %182) #9
  %184 = bitcast i8* %183 to i32*
  br label %185

; <label>:185                                     ; preds = %176, %174
  %186 = phi i32* [ %175, %174 ], [ %184, %176 ]
  %187 = icmp slt i32 %28, 1000
  br i1 %187, label %188, label %190

; <label>:188                                     ; preds = %185
  %189 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %199

; <label>:190                                     ; preds = %185
  %191 = add nsw i32 %28, 5
  %192 = sext i32 %191 to i64
  %193 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %192, i64 4)
  %194 = extractvalue { i64, i1 } %193, 1
  %195 = extractvalue { i64, i1 } %193, 0
  %196 = select i1 %194, i64 -1, i64 %195
  %197 = call noalias i8* @_Znam(i64 %196) #9
  %198 = bitcast i8* %197 to i32*
  br label %199

; <label>:199                                     ; preds = %190, %188
  %200 = phi i32* [ %189, %188 ], [ %198, %190 ]
  %201 = icmp slt i32 %28, 1000
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %199
  %203 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %213

; <label>:204                                     ; preds = %199
  %205 = add nsw i32 %28, 5
  %206 = sext i32 %205 to i64
  %207 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %206, i64 4)
  %208 = extractvalue { i64, i1 } %207, 1
  %209 = extractvalue { i64, i1 } %207, 0
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = call noalias i8* @_Znam(i64 %210) #9
  %212 = bitcast i8* %211 to i32*
  br label %213

; <label>:213                                     ; preds = %204, %202
  %214 = phi i32* [ %203, %202 ], [ %212, %204 ]
  %215 = icmp slt i32 %28, 1000
  br i1 %215, label %216, label %218

; <label>:216                                     ; preds = %213
  %217 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %227

; <label>:218                                     ; preds = %213
  %219 = add nsw i32 %28, 5
  %220 = sext i32 %219 to i64
  %221 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %220, i64 4)
  %222 = extractvalue { i64, i1 } %221, 1
  %223 = extractvalue { i64, i1 } %221, 0
  %224 = select i1 %222, i64 -1, i64 %223
  %225 = call noalias i8* @_Znam(i64 %224) #9
  %226 = bitcast i8* %225 to i32*
  br label %227

; <label>:227                                     ; preds = %218, %216
  %228 = phi i32* [ %217, %216 ], [ %226, %218 ]
  %229 = icmp slt i32 %28, 1000
  br i1 %229, label %230, label %232

; <label>:230                                     ; preds = %227
  %231 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %241

; <label>:232                                     ; preds = %227
  %233 = add nsw i32 %28, 5
  %234 = sext i32 %233 to i64
  %235 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %234, i64 4)
  %236 = extractvalue { i64, i1 } %235, 1
  %237 = extractvalue { i64, i1 } %235, 0
  %238 = select i1 %236, i64 -1, i64 %237
  %239 = call noalias i8* @_Znam(i64 %238) #9
  %240 = bitcast i8* %239 to i32*
  br label %241

; <label>:241                                     ; preds = %232, %230
  %242 = phi i32* [ %231, %230 ], [ %240, %232 ]
  %243 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %244 = getelementptr inbounds [2 x %class.Vector*]* %243, i32 0, i64 0
  %245 = load %class.Vector** %244, align 8
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 1
  %248 = load %class.Vector** %247, align 8
  %249 = sub nsw i32 %25, 1
  %250 = mul nsw i32 %249, %28
  %251 = sdiv i32 %250, 2
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %253 = load i32* %252, align 4
  %254 = mul nsw i32 %251, %253
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %256 = load i32* %255, align 4
  %257 = sdiv i32 %254, %256
  %258 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %259 = load i32* %258, align 4
  %260 = mul nsw i32 %251, %259
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %262 = load i32* %261, align 4
  %263 = sdiv i32 %260, %262
  br label %264

; <label>:264                                     ; preds = %1185, %241
  %pairlistoffset.0 = phi i32 [ 0, %241 ], [ %pairlistoffset.2, %1185 ]
  %pairlistindex.0 = phi i32 [ 0, %241 ], [ %pairlistindex.3, %1185 ]
  %fixg_lower.0 = phi i32 [ 0, %241 ], [ %fixg_lower.4, %1185 ]
  %g_lower.0 = phi i32 [ 0, %241 ], [ %g_lower.4, %1185 ]
  %j_hgroup.0 = phi i32 [ 0, %241 ], [ %j_hgroup.3, %1185 ]
  %pairCount.0 = phi i32 [ 0, %241 ], [ %pairCount.3, %1185 ]
  %i.0 = phi i32 [ 0, %241 ], [ %1186, %1185 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_zz.4, %1185 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yz.4, %1185 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yy.4, %1185 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xz.4, %1185 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xy.4, %1185 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xx.4, %1185 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectEnergy.4, %1185 ]
  %exclChecksum.0 = phi i32 [ 0, %241 ], [ %exclChecksum.11, %1185 ]
  %265 = sub nsw i32 %25, 1
  %266 = icmp slt i32 %i.0, %265
  br i1 %266, label %267, label %1187

; <label>:267                                     ; preds = %264
  %268 = sext i32 %i.0 to i64
  %269 = getelementptr inbounds %struct.CompAtom* %31, i64 %268
  %270 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %271 = load i32* %270, align 4
  %272 = and i32 %271, 4194303
  %273 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %272)
  %274 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 0
  %275 = load i32* %274, align 4
  %276 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 1
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 2
  %279 = load i8** %278, align 8
  %280 = sext i32 %275 to i64
  %281 = sub i64 0, %280
  %282 = getelementptr inbounds i8* %279, i64 %281
  %283 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %284 = getelementptr inbounds %class.Vector* %283, i32 0, i32 0
  %285 = load double* %284, align 8
  %286 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %287 = getelementptr inbounds %class.Vector* %286, i32 0, i32 1
  %288 = load double* %287, align 8
  %289 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %290 = getelementptr inbounds %class.Vector* %289, i32 0, i32 2
  %291 = load double* %290, align 8
  %292 = sext i32 %i.0 to i64
  %293 = getelementptr inbounds %class.Vector* %245, i64 %292
  %294 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %295 = load i32* %294, align 4
  %296 = lshr i32 %295, 22
  %297 = and i32 %296, 7
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %305, label %299

; <label>:299                                     ; preds = %267
  %300 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %301 = load i32* %300, align 4
  %302 = lshr i32 %301, 25
  %303 = and i32 %302, 1
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %305, label %516

; <label>:305                                     ; preds = %299, %267
  %306 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %307 = load i32* %306, align 4
  %308 = lshr i32 %307, 22
  %309 = and i32 %308, 7
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %311, label %331

; <label>:311                                     ; preds = %305
  %312 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = sub nsw i32 %25, 1
  %317 = sub nsw i32 %316, %i.0
  %318 = mul nsw i32 %315, %317
  %319 = add nsw i32 %pairCount.0, %318
  %320 = sub nsw i32 %315, 1
  %321 = mul nsw i32 %315, %320
  %322 = sdiv i32 %321, 2
  %323 = sub nsw i32 %319, %322
  %324 = icmp slt i32 %pairCount.0, %257
  br i1 %324, label %327, label %325

; <label>:325                                     ; preds = %311
  %326 = icmp sge i32 %pairCount.0, %263
  br i1 %326, label %327, label %330

; <label>:327                                     ; preds = %325, %311
  %328 = sub nsw i32 %315, 1
  %329 = add nsw i32 %i.0, %328
  br label %1185

; <label>:330                                     ; preds = %325
  br label %331

; <label>:331                                     ; preds = %330, %305
  %pairCount.1 = phi i32 [ %323, %330 ], [ %pairCount.0, %305 ]
  %332 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %340

; <label>:334                                     ; preds = %331
  %335 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %336 = load i32* %335, align 4
  %337 = lshr i32 %336, 27
  %338 = and i32 %337, 1
  %339 = icmp ne i32 %338, 0
  br label %340

; <label>:340                                     ; preds = %334, %331
  %341 = phi i1 [ false, %331 ], [ %339, %334 ]
  %342 = zext i1 %341 to i32
  %343 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %344 = load i32* %343, align 4
  %345 = lshr i32 %344, 22
  %346 = and i32 %345, 7
  %347 = icmp ne i32 %346, 0
  br i1 %347, label %348, label %378

; <label>:348                                     ; preds = %340
  %349 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %350 = load i32* %349, align 4
  %351 = lshr i32 %350, 22
  %352 = and i32 %351, 7
  %353 = add nsw i32 %i.0, %352
  br label %354

; <label>:354                                     ; preds = %363, %348
  %g_lower.1 = phi i32 [ %g_lower.0, %348 ], [ %364, %363 ]
  %355 = icmp slt i32 %g_lower.1, %g.0
  br i1 %355, label %356, label %361

; <label>:356                                     ; preds = %354
  %357 = sext i32 %g_lower.1 to i64
  %358 = getelementptr inbounds i32* %48, i64 %357
  %359 = load i32* %358, align 4
  %360 = icmp slt i32 %359, %353
  br label %361

; <label>:361                                     ; preds = %356, %354
  %362 = phi i1 [ false, %354 ], [ %360, %356 ]
  br i1 %362, label %363, label %365

; <label>:363                                     ; preds = %361
  %364 = add nsw i32 %g_lower.1, 1
  br label %354

; <label>:365                                     ; preds = %361
  br label %366

; <label>:366                                     ; preds = %375, %365
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %365 ], [ %376, %375 ]
  %367 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %367, label %368, label %373

; <label>:368                                     ; preds = %366
  %369 = sext i32 %fixg_lower.1 to i64
  %370 = getelementptr inbounds i32* %62, i64 %369
  %371 = load i32* %370, align 4
  %372 = icmp slt i32 %371, %353
  br label %373

; <label>:373                                     ; preds = %368, %366
  %374 = phi i1 [ false, %366 ], [ %372, %368 ]
  br i1 %374, label %375, label %377

; <label>:375                                     ; preds = %373
  %376 = add nsw i32 %fixg_lower.1, 1
  br label %366

; <label>:377                                     ; preds = %373
  br label %378

; <label>:378                                     ; preds = %377, %340
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %377 ], [ %fixg_lower.0, %340 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %377 ], [ %g_lower.0, %340 ]
  %j_hgroup.1 = phi i32 [ %353, %377 ], [ %j_hgroup.0, %340 ]
  %379 = add nsw i32 %i.0, 1
  br label %380

; <label>:380                                     ; preds = %386, %378
  %pairlistindex.1 = phi i32 [ 0, %378 ], [ %383, %386 ]
  %j.1 = phi i32 [ %379, %378 ], [ %387, %386 ]
  %381 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %381, label %382, label %388

; <label>:382                                     ; preds = %380
  %383 = add nsw i32 %pairlistindex.1, 1
  %384 = sext i32 %pairlistindex.1 to i64
  %385 = getelementptr inbounds i32* %186, i64 %384
  store i32 %j.1, i32* %385, align 4
  br label %386

; <label>:386                                     ; preds = %382
  %387 = add nsw i32 %j.1, 1
  br label %380

; <label>:388                                     ; preds = %380
  %389 = sext i32 %pairlistindex.1 to i64
  %390 = getelementptr inbounds i32* %186, i64 %389
  %391 = icmp ne i32 %342, 0
  br i1 %391, label %392, label %393

; <label>:392                                     ; preds = %388
  br label %394

; <label>:393                                     ; preds = %388
  br label %394

; <label>:394                                     ; preds = %393, %392
  %395 = phi i32* [ %62, %392 ], [ %48, %393 ]
  %396 = icmp ne i32 %342, 0
  br i1 %396, label %397, label %398

; <label>:397                                     ; preds = %394
  br label %399

; <label>:398                                     ; preds = %394
  br label %399

; <label>:399                                     ; preds = %398, %397
  %400 = phi i32 [ %fixg_lower.2, %397 ], [ %g_lower.2, %398 ]
  %401 = icmp ne i32 %342, 0
  br i1 %401, label %402, label %403

; <label>:402                                     ; preds = %399
  br label %404

; <label>:403                                     ; preds = %399
  br label %404

; <label>:404                                     ; preds = %403, %402
  %405 = phi i32 [ %fixg.2, %402 ], [ %g.0, %403 ]
  %406 = icmp slt i32 %400, %405
  br i1 %406, label %407, label %501

; <label>:407                                     ; preds = %404
  %408 = sext i32 %400 to i64
  %409 = getelementptr inbounds i32* %395, i64 %408
  %410 = load i32* %409, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds %struct.CompAtom* %34, i64 %411
  %413 = getelementptr inbounds %struct.CompAtom* %412, i32 0, i32 0
  %414 = getelementptr inbounds %class.Vector* %413, i32 0, i32 0
  %415 = load double* %414, align 8
  %416 = sext i32 %410 to i64
  %417 = getelementptr inbounds %struct.CompAtom* %34, i64 %416
  %418 = getelementptr inbounds %struct.CompAtom* %417, i32 0, i32 0
  %419 = getelementptr inbounds %class.Vector* %418, i32 0, i32 1
  %420 = load double* %419, align 8
  %421 = sext i32 %410 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %34, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  br label %426

; <label>:426                                     ; preds = %459, %407
  %g.3 = phi i32 [ %400, %407 ], [ %429, %459 ]
  %gli.0 = phi i32* [ %76, %407 ], [ %gli.1, %459 ]
  %j2.0 = phi i32 [ %410, %407 ], [ %432, %459 ]
  %p_j_x.0 = phi double [ %415, %407 ], [ %439, %459 ]
  %p_j_y.0 = phi double [ %420, %407 ], [ %447, %459 ]
  %p_j_z.0 = phi double [ %425, %407 ], [ %455, %459 ]
  %427 = icmp slt i32 %g.3, %405
  br i1 %427, label %428, label %460

; <label>:428                                     ; preds = %426
  %429 = add nsw i32 %g.3, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32* %395, i64 %430
  %432 = load i32* %431, align 4
  %433 = fsub double %285, %p_j_x.0
  %434 = fmul double %433, %433
  %435 = sext i32 %432 to i64
  %436 = getelementptr inbounds %struct.CompAtom* %34, i64 %435
  %437 = getelementptr inbounds %struct.CompAtom* %436, i32 0, i32 0
  %438 = getelementptr inbounds %class.Vector* %437, i32 0, i32 0
  %439 = load double* %438, align 8
  %440 = fsub double %288, %p_j_y.0
  %441 = fmul double %440, %440
  %442 = fadd double %434, %441
  %443 = sext i32 %432 to i64
  %444 = getelementptr inbounds %struct.CompAtom* %34, i64 %443
  %445 = getelementptr inbounds %struct.CompAtom* %444, i32 0, i32 0
  %446 = getelementptr inbounds %class.Vector* %445, i32 0, i32 1
  %447 = load double* %446, align 8
  %448 = fsub double %291, %p_j_z.0
  %449 = fmul double %448, %448
  %450 = fadd double %442, %449
  %451 = sext i32 %432 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %34, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 0
  %454 = getelementptr inbounds %class.Vector* %453, i32 0, i32 2
  %455 = load double* %454, align 8
  %456 = fcmp ole double %450, %8
  br i1 %456, label %457, label %459

; <label>:457                                     ; preds = %428
  store i32 %j2.0, i32* %gli.0, align 4
  %458 = getelementptr inbounds i32* %gli.0, i32 1
  br label %459

; <label>:459                                     ; preds = %457, %428
  %gli.1 = phi i32* [ %458, %457 ], [ %gli.0, %428 ]
  br label %426

; <label>:460                                     ; preds = %426
  %461 = ptrtoint i32* %gli.0 to i64
  %462 = ptrtoint i32* %76 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  br label %466

; <label>:466                                     ; preds = %498, %460
  %pli.0 = phi i32* [ %390, %460 ], [ %497, %498 ]
  %h.0 = phi i32 [ 0, %460 ], [ %499, %498 ]
  %467 = icmp slt i32 %h.0, %465
  br i1 %467, label %468, label %500

; <label>:468                                     ; preds = %466
  %469 = sext i32 %h.0 to i64
  %470 = getelementptr inbounds i32* %76, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.CompAtom* %34, i64 %472
  %474 = getelementptr inbounds %struct.CompAtom* %473, i32 0, i32 2
  %475 = load i32* %474, align 4
  %476 = lshr i32 %475, 25
  %477 = and i32 %476, 1
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %480

; <label>:479                                     ; preds = %468
  br label %487

; <label>:480                                     ; preds = %468
  %481 = sext i32 %471 to i64
  %482 = getelementptr inbounds %struct.CompAtom* %34, i64 %481
  %483 = getelementptr inbounds %struct.CompAtom* %482, i32 0, i32 2
  %484 = load i32* %483, align 4
  %485 = lshr i32 %484, 22
  %486 = and i32 %485, 7
  br label %487

; <label>:487                                     ; preds = %480, %479
  %488 = phi i32 [ 1, %479 ], [ %486, %480 ]
  %489 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %471, i32* %489, align 4
  %490 = add nsw i32 %471, 1
  %491 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %490, i32* %491, align 4
  %492 = add nsw i32 %471, 2
  %493 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %471, 3
  %495 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %494, i32* %495, align 4
  %496 = sext i32 %488 to i64
  %497 = getelementptr inbounds i32* %pli.0, i64 %496
  br label %498

; <label>:498                                     ; preds = %487
  %499 = add nsw i32 %h.0, 1
  br label %466

; <label>:500                                     ; preds = %466
  br label %501

; <label>:501                                     ; preds = %500, %404
  %pli.1 = phi i32* [ %pli.0, %500 ], [ %390, %404 ]
  %502 = ptrtoint i32* %pli.1 to i64
  %503 = ptrtoint i32* %186 to i64
  %504 = sub i64 %502, %503
  %505 = sdiv exact i64 %504, 4
  %506 = trunc i64 %505 to i32
  %507 = icmp ne i32 %506, 0
  br i1 %507, label %508, label %515

; <label>:508                                     ; preds = %501
  %509 = sub nsw i32 %506, 1
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32* %186, i64 %510
  %512 = load i32* %511, align 4
  %513 = sext i32 %506 to i64
  %514 = getelementptr inbounds i32* %186, i64 %513
  store i32 %512, i32* %514, align 4
  br label %515

; <label>:515                                     ; preds = %508, %501
  br label %518

; <label>:516                                     ; preds = %299
  %517 = add nsw i32 %pairlistoffset.0, 1
  br label %518

; <label>:518                                     ; preds = %516, %515
  %pairlistoffset.1 = phi i32 [ 0, %515 ], [ %517, %516 ]
  %pairlistindex.2 = phi i32 [ %506, %515 ], [ %pairlistindex.0, %516 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %515 ], [ %fixg_lower.0, %516 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %515 ], [ %g_lower.0, %516 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %515 ], [ %j_hgroup.0, %516 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %515 ], [ %pairCount.0, %516 ]
  %519 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %520 = icmp ne i32 %519, 0
  br i1 %520, label %521, label %527

; <label>:521                                     ; preds = %518
  %522 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %523 = load i32* %522, align 4
  %524 = lshr i32 %523, 26
  %525 = and i32 %524, 1
  %526 = icmp ne i32 %525, 0
  br label %527

; <label>:527                                     ; preds = %521, %518
  %528 = phi i1 [ false, %518 ], [ %526, %521 ]
  %529 = zext i1 %528 to i32
  %530 = load double** @_ZN20ComputeNonbondedUtil12lambda_tableE, align 8
  %531 = load i32* @_ZN20ComputeNonbondedUtil9lesFactorE, align 4
  %532 = add nsw i32 %531, 1
  %533 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 28
  %536 = mul nsw i32 %532, %535
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds double* %530, i64 %537
  %539 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 1
  %540 = load float* %539, align 4
  %541 = fpext float %540 to double
  %542 = fmul double 3.320636e+02, %541
  %543 = fmul double %542, %16
  %544 = fmul double %543, %9
  %545 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %546 = load i32* %545, align 4
  %547 = and i32 %546, 4194303
  %548 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %547)
  %549 = zext i16 %548 to i32
  %550 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %549)
  %551 = icmp ne i32 %529, 0
  br i1 %551, label %552, label %614

; <label>:552                                     ; preds = %527
  br label %553

; <label>:553                                     ; preds = %611, %552
  %pli3.0 = phi i32* [ %200, %552 ], [ %pli3.2, %611 ]
  %plin.0 = phi i32* [ %214, %552 ], [ %plin.2, %611 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %552 ], [ %612, %611 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %552 ], [ %exclChecksum.3, %611 ]
  %554 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %554, label %555, label %613

; <label>:555                                     ; preds = %553
  %556 = sext i32 %k.0 to i64
  %557 = getelementptr inbounds i32* %186, i64 %556
  %558 = load i32* %557, align 4
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %34, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 0
  %563 = load double* %562, align 8
  %564 = fsub double %285, %563
  %565 = fmul double %564, %564
  %566 = sext i32 %558 to i64
  %567 = getelementptr inbounds %struct.CompAtom* %34, i64 %566
  %568 = getelementptr inbounds %struct.CompAtom* %567, i32 0, i32 0
  %569 = getelementptr inbounds %class.Vector* %568, i32 0, i32 1
  %570 = load double* %569, align 8
  %571 = fsub double %288, %570
  %572 = fmul double %571, %571
  %573 = fadd double %565, %572
  %574 = sext i32 %558 to i64
  %575 = getelementptr inbounds %struct.CompAtom* %34, i64 %574
  %576 = getelementptr inbounds %struct.CompAtom* %575, i32 0, i32 0
  %577 = getelementptr inbounds %class.Vector* %576, i32 0, i32 2
  %578 = load double* %577, align 8
  %579 = fsub double %291, %578
  %580 = fmul double %579, %579
  %581 = fadd double %573, %580
  %582 = sext i32 %558 to i64
  %583 = getelementptr inbounds %struct.CompAtom* %34, i64 %582
  %584 = getelementptr inbounds %struct.CompAtom* %583, i32 0, i32 2
  %585 = load i32* %584, align 4
  %586 = lshr i32 %585, 26
  %587 = and i32 %586, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %610, label %589

; <label>:589                                     ; preds = %555
  %590 = fcmp ole double %581, %7
  br i1 %590, label %591, label %610

; <label>:591                                     ; preds = %589
  %592 = fcmp ole double %581, %19
  br i1 %592, label %593, label %596

; <label>:593                                     ; preds = %591
  %594 = add nsw i32 %exclChecksum.1, 1
  %595 = icmp ne i32 %594, 0
  br i1 %595, label %610, label %596

; <label>:596                                     ; preds = %593, %591
  %exclChecksum.2 = phi i32 [ %594, %593 ], [ %exclChecksum.1, %591 ]
  %597 = sext i32 %558 to i64
  %598 = getelementptr inbounds %struct.CompAtom* %34, i64 %597
  %599 = getelementptr inbounds %struct.CompAtom* %598, i32 0, i32 2
  %600 = load i32* %599, align 4
  %601 = and i32 %600, 4194303
  %602 = icmp sge i32 %601, %275
  br i1 %602, label %603, label %607

; <label>:603                                     ; preds = %596
  %604 = icmp sle i32 %601, %277
  br i1 %604, label %605, label %607

; <label>:605                                     ; preds = %603
  %606 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %558, i32* %pli3.0, align 4
  br label %609

; <label>:607                                     ; preds = %603, %596
  %608 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %558, i32* %plin.0, align 4
  br label %609

; <label>:609                                     ; preds = %607, %605
  %pli3.1 = phi i32* [ %606, %605 ], [ %pli3.0, %607 ]
  %plin.1 = phi i32* [ %plin.0, %605 ], [ %608, %607 ]
  br label %610

; <label>:610                                     ; preds = %609, %593, %589, %555
  %pli3.2 = phi i32* [ %pli3.0, %555 ], [ %pli3.0, %593 ], [ %pli3.1, %609 ], [ %pli3.0, %589 ]
  %plin.2 = phi i32* [ %plin.0, %555 ], [ %plin.0, %593 ], [ %plin.1, %609 ], [ %plin.0, %589 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %555 ], [ %594, %593 ], [ %exclChecksum.2, %609 ], [ %exclChecksum.1, %589 ]
  br label %611

; <label>:611                                     ; preds = %610
  %612 = add nsw i32 %k.0, 1
  br label %553

; <label>:613                                     ; preds = %553
  br label %693

; <label>:614                                     ; preds = %527
  %615 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %615, label %616, label %692

; <label>:616                                     ; preds = %614
  %617 = sext i32 %pairlistoffset.1 to i64
  %618 = getelementptr inbounds i32* %186, i64 %617
  %619 = load i32* %618, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds %struct.CompAtom* %34, i64 %620
  %622 = getelementptr inbounds %struct.CompAtom* %621, i32 0, i32 0
  %623 = getelementptr inbounds %class.Vector* %622, i32 0, i32 0
  %624 = load double* %623, align 8
  %625 = sext i32 %619 to i64
  %626 = getelementptr inbounds %struct.CompAtom* %34, i64 %625
  %627 = getelementptr inbounds %struct.CompAtom* %626, i32 0, i32 0
  %628 = getelementptr inbounds %class.Vector* %627, i32 0, i32 1
  %629 = load double* %628, align 8
  %630 = sext i32 %619 to i64
  %631 = getelementptr inbounds %struct.CompAtom* %34, i64 %630
  %632 = getelementptr inbounds %struct.CompAtom* %631, i32 0, i32 0
  %633 = getelementptr inbounds %class.Vector* %632, i32 0, i32 2
  %634 = load double* %633, align 8
  %635 = sext i32 %619 to i64
  %636 = getelementptr inbounds %struct.CompAtom* %34, i64 %635
  %637 = getelementptr inbounds %struct.CompAtom* %636, i32 0, i32 2
  %638 = load i32* %637, align 4
  %639 = and i32 %638, 4194303
  br label %640

; <label>:640                                     ; preds = %685, %616
  %pli3.3 = phi i32* [ %200, %616 ], [ %pli3.5, %685 ]
  %plin.3 = phi i32* [ %214, %616 ], [ %plin.5, %685 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %616 ], [ %643, %685 ]
  %j210.0 = phi i32 [ %619, %616 ], [ %646, %685 ]
  %p_j_x11.0 = phi double [ %624, %616 ], [ %653, %685 ]
  %p_j_y12.0 = phi double [ %629, %616 ], [ %661, %685 ]
  %p_j_z13.0 = phi double [ %634, %616 ], [ %669, %685 ]
  %atom214.0 = phi i32 [ %639, %616 ], [ %690, %685 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %616 ], [ %exclChecksum.6, %685 ]
  %641 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %641, label %642, label %691

; <label>:642                                     ; preds = %640
  %643 = add nsw i32 %k9.0, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds i32* %186, i64 %644
  %646 = load i32* %645, align 4
  %647 = fsub double %285, %p_j_x11.0
  %648 = fmul double %647, %647
  %649 = sext i32 %646 to i64
  %650 = getelementptr inbounds %struct.CompAtom* %34, i64 %649
  %651 = getelementptr inbounds %struct.CompAtom* %650, i32 0, i32 0
  %652 = getelementptr inbounds %class.Vector* %651, i32 0, i32 0
  %653 = load double* %652, align 8
  %654 = fsub double %288, %p_j_y12.0
  %655 = fmul double %654, %654
  %656 = fadd double %648, %655
  %657 = sext i32 %646 to i64
  %658 = getelementptr inbounds %struct.CompAtom* %34, i64 %657
  %659 = getelementptr inbounds %struct.CompAtom* %658, i32 0, i32 0
  %660 = getelementptr inbounds %class.Vector* %659, i32 0, i32 1
  %661 = load double* %660, align 8
  %662 = fsub double %291, %p_j_z13.0
  %663 = fmul double %662, %662
  %664 = fadd double %656, %663
  %665 = sext i32 %646 to i64
  %666 = getelementptr inbounds %struct.CompAtom* %34, i64 %665
  %667 = getelementptr inbounds %struct.CompAtom* %666, i32 0, i32 0
  %668 = getelementptr inbounds %class.Vector* %667, i32 0, i32 2
  %669 = load double* %668, align 8
  %670 = fcmp ole double %664, %7
  br i1 %670, label %671, label %685

; <label>:671                                     ; preds = %642
  %672 = fcmp ole double %664, %19
  br i1 %672, label %673, label %676

; <label>:673                                     ; preds = %671
  %674 = add nsw i32 %exclChecksum.4, 1
  %675 = icmp ne i32 %674, 0
  br i1 %675, label %685, label %676

; <label>:676                                     ; preds = %673, %671
  %exclChecksum.5 = phi i32 [ %674, %673 ], [ %exclChecksum.4, %671 ]
  %677 = icmp sge i32 %atom214.0, %275
  br i1 %677, label %678, label %682

; <label>:678                                     ; preds = %676
  %679 = icmp sle i32 %atom214.0, %277
  br i1 %679, label %680, label %682

; <label>:680                                     ; preds = %678
  %681 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %684

; <label>:682                                     ; preds = %678, %676
  %683 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %684

; <label>:684                                     ; preds = %682, %680
  %pli3.4 = phi i32* [ %681, %680 ], [ %pli3.3, %682 ]
  %plin.4 = phi i32* [ %plin.3, %680 ], [ %683, %682 ]
  br label %685

; <label>:685                                     ; preds = %684, %673, %642
  %pli3.5 = phi i32* [ %pli3.3, %673 ], [ %pli3.4, %684 ], [ %pli3.3, %642 ]
  %plin.5 = phi i32* [ %plin.3, %673 ], [ %plin.4, %684 ], [ %plin.3, %642 ]
  %exclChecksum.6 = phi i32 [ %674, %673 ], [ %exclChecksum.5, %684 ], [ %exclChecksum.4, %642 ]
  %686 = sext i32 %646 to i64
  %687 = getelementptr inbounds %struct.CompAtom* %34, i64 %686
  %688 = getelementptr inbounds %struct.CompAtom* %687, i32 0, i32 2
  %689 = load i32* %688, align 4
  %690 = and i32 %689, 4194303
  br label %640

; <label>:691                                     ; preds = %640
  br label %692

; <label>:692                                     ; preds = %691, %614
  %pli3.6 = phi i32* [ %pli3.3, %691 ], [ %200, %614 ]
  %plin.6 = phi i32* [ %plin.3, %691 ], [ %214, %614 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %691 ], [ %exclChecksum.0, %614 ]
  br label %693

; <label>:693                                     ; preds = %692, %613
  %pli3.7 = phi i32* [ %pli3.0, %613 ], [ %pli3.6, %692 ]
  %plin.7 = phi i32* [ %plin.0, %613 ], [ %plin.6, %692 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %613 ], [ %exclChecksum.7, %692 ]
  %694 = ptrtoint i32* %pli3.7 to i64
  %695 = ptrtoint i32* %200 to i64
  %696 = sub i64 %694, %695
  %697 = sdiv exact i64 %696, 4
  %698 = trunc i64 %697 to i32
  %699 = icmp ne i32 %698, 0
  br i1 %699, label %700, label %707

; <label>:700                                     ; preds = %693
  %701 = sub nsw i32 %698, 1
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i32* %200, i64 %702
  %704 = load i32* %703, align 4
  %705 = sext i32 %698 to i64
  %706 = getelementptr inbounds i32* %200, i64 %705
  store i32 %704, i32* %706, align 4
  br label %707

; <label>:707                                     ; preds = %700, %693
  br label %708

; <label>:708                                     ; preds = %719, %707
  %plix.0 = phi i32* [ %228, %707 ], [ %717, %719 ]
  %pln.0 = phi i32* [ %214, %707 ], [ %720, %719 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %707 ], [ %718, %719 ]
  %709 = icmp ult i32* %pln.0, %plin.7
  br i1 %709, label %710, label %713

; <label>:710                                     ; preds = %708
  %711 = load i32* %pln.0, align 4
  %712 = icmp slt i32 %711, %j_hgroup.2
  br label %713

; <label>:713                                     ; preds = %710, %708
  %714 = phi i1 [ false, %708 ], [ %712, %710 ]
  br i1 %714, label %715, label %721

; <label>:715                                     ; preds = %713
  %716 = load i32* %pln.0, align 4
  %717 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %716, i32* %plix.0, align 4
  %718 = add nsw i32 %exclChecksum.9, -1
  br label %719

; <label>:719                                     ; preds = %715
  %720 = getelementptr inbounds i32* %pln.0, i32 1
  br label %708

; <label>:721                                     ; preds = %713
  br label %722

; <label>:722                                     ; preds = %737, %721
  %plix.1 = phi i32* [ %plix.0, %721 ], [ %735, %737 ]
  %k17.0 = phi i32 [ 0, %721 ], [ %738, %737 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %721 ], [ %736, %737 ]
  %723 = icmp slt i32 %k17.0, %698
  br i1 %723, label %724, label %729

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %200, i64 %725
  %727 = load i32* %726, align 4
  %728 = icmp slt i32 %727, %j_hgroup.2
  br label %729

; <label>:729                                     ; preds = %724, %722
  %730 = phi i1 [ false, %722 ], [ %728, %724 ]
  br i1 %730, label %731, label %739

; <label>:731                                     ; preds = %729
  %732 = sext i32 %k17.0 to i64
  %733 = getelementptr inbounds i32* %200, i64 %732
  %734 = load i32* %733, align 4
  %735 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %734, i32* %plix.1, align 4
  %736 = add nsw i32 %exclChecksum.10, -1
  br label %737

; <label>:737                                     ; preds = %731
  %738 = add nsw i32 %k17.0, 1
  br label %722

; <label>:739                                     ; preds = %729
  br label %740

; <label>:740                                     ; preds = %762, %739
  %plin.8 = phi i32* [ %plin.7, %739 ], [ %plin.9, %762 ]
  %plix.2 = phi i32* [ %plix.1, %739 ], [ %plix.3, %762 ]
  %plim.0 = phi i32* [ %242, %739 ], [ %plim.1, %762 ]
  %k17.1 = phi i32 [ %k17.0, %739 ], [ %763, %762 ]
  %741 = icmp slt i32 %k17.1, %698
  br i1 %741, label %742, label %764

; <label>:742                                     ; preds = %740
  %743 = sext i32 %k17.1 to i64
  %744 = getelementptr inbounds i32* %200, i64 %743
  %745 = load i32* %744, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds %struct.CompAtom* %34, i64 %746
  %748 = getelementptr inbounds %struct.CompAtom* %747, i32 0, i32 2
  %749 = load i32* %748, align 4
  %750 = and i32 %749, 4194303
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8* %282, i64 %751
  %753 = load i8* %752, align 1
  %754 = sext i8 %753 to i32
  switch i32 %754, label %761 [
    i32 0, label %755
    i32 1, label %757
    i32 2, label %759
  ]

; <label>:755                                     ; preds = %742
  %756 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %745, i32* %plin.8, align 4
  br label %761

; <label>:757                                     ; preds = %742
  %758 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %745, i32* %plix.2, align 4
  br label %761

; <label>:759                                     ; preds = %742
  %760 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %745, i32* %plim.0, align 4
  br label %761

; <label>:761                                     ; preds = %759, %757, %755, %742
  %plin.9 = phi i32* [ %plin.8, %742 ], [ %plin.8, %759 ], [ %plin.8, %757 ], [ %756, %755 ]
  %plix.3 = phi i32* [ %plix.2, %742 ], [ %plix.2, %759 ], [ %758, %757 ], [ %plix.2, %755 ]
  %plim.1 = phi i32* [ %plim.0, %742 ], [ %760, %759 ], [ %plim.0, %757 ], [ %plim.0, %755 ]
  br label %762

; <label>:762                                     ; preds = %761
  %763 = add nsw i32 %k17.1, 1
  br label %740

; <label>:764                                     ; preds = %740
  %765 = ptrtoint i32* %plix.2 to i64
  %766 = ptrtoint i32* %228 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %exclChecksum.10 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plim.0 to i64
  %773 = ptrtoint i32* %242 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = sext i32 %771 to i64
  %777 = add nsw i64 %776, %775
  %778 = trunc i64 %777 to i32
  %779 = ptrtoint i32* %plin.8 to i64
  %780 = ptrtoint i32* %pln.0 to i64
  %781 = sub i64 %779, %780
  %782 = sdiv exact i64 %781, 4
  %783 = trunc i64 %782 to i32
  br label %784

; <label>:784                                     ; preds = %900, %764
  %k17.2 = phi i32 [ 0, %764 ], [ %901, %900 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %764 ], [ %893, %900 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %764 ], [ %884, %900 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %764 ], [ %882, %900 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %764 ], [ %873, %900 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %764 ], [ %871, %900 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %764 ], [ %869, %900 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %764 ], [ %856, %900 ]
  %785 = icmp slt i32 %k17.2, %783
  br i1 %785, label %786, label %902

; <label>:786                                     ; preds = %784
  %787 = sext i32 %k17.2 to i64
  %788 = getelementptr inbounds i32* %pln.0, i64 %787
  %789 = load i32* %788, align 4
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds %struct.CompAtom* %34, i64 %790
  %792 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %793 = getelementptr inbounds %class.Vector* %792, i32 0, i32 0
  %794 = load double* %793, align 8
  %795 = fsub double %285, %794
  %796 = fmul double %795, %795
  %797 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %798 = getelementptr inbounds %class.Vector* %797, i32 0, i32 1
  %799 = load double* %798, align 8
  %800 = fsub double %288, %799
  %801 = fmul double %800, %800
  %802 = fadd double %796, %801
  %803 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 0
  %804 = getelementptr inbounds %class.Vector* %803, i32 0, i32 2
  %805 = load double* %804, align 8
  %806 = fsub double %291, %805
  %807 = fmul double %806, %806
  %808 = fadd double %802, %807
  %809 = fptrunc double %808 to float
  %810 = bitcast %union.anon.106* %r2f to float*
  store float %809, float* %810, align 4
  %811 = bitcast %union.anon.106* %r2f to i32*
  %812 = load i32* %811, align 4
  %813 = ashr i32 %812, 17
  %814 = add nsw i32 %813, %22
  %815 = mul nsw i32 16, %814
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds double* %14, i64 %816
  %818 = getelementptr inbounds double* %817, i64 8
  %819 = getelementptr inbounds double* %818, i64 4
  %820 = getelementptr inbounds double* %819, i64 0
  %821 = load double* %820, align 8
  %822 = bitcast %union.anon.106* %r2f to i32*
  %823 = load i32* %822, align 4
  %824 = and i32 %823, -131072
  store i32 %824, i32* %822, align 4
  %825 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 1
  %826 = load float* %825, align 4
  %827 = fpext float %826 to double
  %828 = fmul double %544, %827
  %829 = bitcast %union.anon.106* %r2f to float*
  %830 = load float* %829, align 4
  %831 = fpext float %830 to double
  %832 = fsub double %808, %831
  %833 = getelementptr inbounds %struct.CompAtom* %791, i32 0, i32 2
  %834 = load i32* %833, align 4
  %835 = lshr i32 %834, 28
  %836 = zext i32 %835 to i64
  %837 = getelementptr inbounds double* %538, i64 %836
  %838 = load double* %837, align 8
  %839 = getelementptr inbounds double* %819, i64 1
  %840 = load double* %839, align 8
  %841 = getelementptr inbounds double* %819, i64 2
  %842 = load double* %841, align 8
  %843 = getelementptr inbounds double* %819, i64 3
  %844 = load double* %843, align 8
  %845 = fmul double %844, %828
  %846 = fmul double %842, %828
  %847 = fmul double %840, %828
  %848 = fmul double %821, %828
  %849 = fmul double %832, %845
  %850 = fadd double %849, %846
  %851 = fmul double %850, %832
  %852 = fadd double %851, %847
  %853 = fmul double %852, %832
  %854 = fadd double %853, %848
  %855 = fmul double %838, %854
  %856 = fadd double %fullElectEnergy.1, %855
  %857 = fmul double 3.000000e+00, %832
  %858 = fmul double %857, %845
  %859 = fmul double 2.000000e+00, %846
  %860 = fadd double %858, %859
  %861 = fmul double %860, %832
  %862 = fadd double %861, %847
  %863 = fmul double -2.000000e+00, %862
  %864 = fmul double %863, %838
  %865 = sext i32 %789 to i64
  %866 = getelementptr inbounds %class.Vector* %248, i64 %865
  %867 = fmul double %864, %795
  %868 = fmul double %867, %795
  %869 = fadd double %fullElectVirial_xx.1, %868
  %870 = fmul double %867, %800
  %871 = fadd double %fullElectVirial_xy.1, %870
  %872 = fmul double %867, %806
  %873 = fadd double %fullElectVirial_xz.1, %872
  %874 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %875 = load double* %874, align 8
  %876 = fadd double %875, %867
  store double %876, double* %874, align 8
  %877 = getelementptr inbounds %class.Vector* %866, i32 0, i32 0
  %878 = load double* %877, align 8
  %879 = fsub double %878, %867
  store double %879, double* %877, align 8
  %880 = fmul double %864, %800
  %881 = fmul double %880, %800
  %882 = fadd double %fullElectVirial_yy.1, %881
  %883 = fmul double %880, %806
  %884 = fadd double %fullElectVirial_yz.1, %883
  %885 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %886 = load double* %885, align 8
  %887 = fadd double %886, %880
  store double %887, double* %885, align 8
  %888 = getelementptr inbounds %class.Vector* %866, i32 0, i32 1
  %889 = load double* %888, align 8
  %890 = fsub double %889, %880
  store double %890, double* %888, align 8
  %891 = fmul double %864, %806
  %892 = fmul double %891, %806
  %893 = fadd double %fullElectVirial_zz.1, %892
  %894 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %895 = load double* %894, align 8
  %896 = fadd double %895, %891
  store double %896, double* %894, align 8
  %897 = getelementptr inbounds %class.Vector* %866, i32 0, i32 2
  %898 = load double* %897, align 8
  %899 = fsub double %898, %891
  store double %899, double* %897, align 8
  br label %900

; <label>:900                                     ; preds = %786
  %901 = add nsw i32 %k17.2, 1
  br label %784

; <label>:902                                     ; preds = %784
  %903 = ptrtoint i32* %plim.0 to i64
  %904 = ptrtoint i32* %242 to i64
  %905 = sub i64 %903, %904
  %906 = sdiv exact i64 %905, 4
  %907 = trunc i64 %906 to i32
  br label %908

; <label>:908                                     ; preds = %1043, %902
  %k17.3 = phi i32 [ 0, %902 ], [ %1044, %1043 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %902 ], [ %1036, %1043 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %902 ], [ %1027, %1043 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %902 ], [ %1025, %1043 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %902 ], [ %1016, %1043 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %902 ], [ %1014, %1043 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %902 ], [ %1012, %1043 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %902 ], [ %999, %1043 ]
  %909 = icmp slt i32 %k17.3, %907
  br i1 %909, label %910, label %1045

; <label>:910                                     ; preds = %908
  %911 = sext i32 %k17.3 to i64
  %912 = getelementptr inbounds i32* %242, i64 %911
  %913 = load i32* %912, align 4
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds %struct.CompAtom* %34, i64 %914
  %916 = getelementptr inbounds %struct.CompAtom* %915, i32 0, i32 0
  %917 = getelementptr inbounds %class.Vector* %916, i32 0, i32 0
  %918 = load double* %917, align 8
  %919 = fsub double %285, %918
  %920 = fmul double %919, %919
  %921 = getelementptr inbounds %struct.CompAtom* %915, i32 0, i32 0
  %922 = getelementptr inbounds %class.Vector* %921, i32 0, i32 1
  %923 = load double* %922, align 8
  %924 = fsub double %288, %923
  %925 = fmul double %924, %924
  %926 = fadd double %920, %925
  %927 = getelementptr inbounds %struct.CompAtom* %915, i32 0, i32 0
  %928 = getelementptr inbounds %class.Vector* %927, i32 0, i32 2
  %929 = load double* %928, align 8
  %930 = fsub double %291, %929
  %931 = fmul double %930, %930
  %932 = fadd double %926, %931
  %933 = fptrunc double %932 to float
  %934 = bitcast %union.anon.107* %r2f28 to float*
  store float %933, float* %934, align 4
  %935 = bitcast %union.anon.107* %r2f28 to i32*
  %936 = load i32* %935, align 4
  %937 = ashr i32 %936, 17
  %938 = add nsw i32 %937, %22
  %939 = mul nsw i32 16, %938
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds double* %14, i64 %940
  %942 = getelementptr inbounds double* %941, i64 8
  %943 = getelementptr inbounds double* %942, i64 4
  %944 = getelementptr inbounds double* %943, i64 0
  %945 = load double* %944, align 8
  %946 = bitcast %union.anon.107* %r2f28 to i32*
  %947 = load i32* %946, align 4
  %948 = and i32 %947, -131072
  store i32 %948, i32* %946, align 4
  %949 = getelementptr inbounds %struct.CompAtom* %915, i32 0, i32 1
  %950 = load float* %949, align 4
  %951 = fpext float %950 to double
  %952 = fmul double %544, %951
  %953 = bitcast %union.anon.107* %r2f28 to float*
  %954 = load float* %953, align 4
  %955 = fpext float %954 to double
  %956 = fsub double %932, %955
  %957 = getelementptr inbounds %struct.CompAtom* %915, i32 0, i32 2
  %958 = load i32* %957, align 4
  %959 = lshr i32 %958, 28
  %960 = zext i32 %959 to i64
  %961 = getelementptr inbounds double* %538, i64 %960
  %962 = load double* %961, align 8
  %963 = getelementptr inbounds double* %943, i64 1
  %964 = load double* %963, align 8
  %965 = getelementptr inbounds double* %943, i64 2
  %966 = load double* %965, align 8
  %967 = getelementptr inbounds double* %943, i64 3
  %968 = load double* %967, align 8
  %969 = mul nsw i32 4, %938
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds double* %15, i64 %970
  %972 = getelementptr inbounds double* %971, i64 0
  %973 = load double* %972, align 8
  %974 = fmul double %18, %973
  %975 = fsub double %945, %974
  %976 = getelementptr inbounds double* %971, i64 1
  %977 = load double* %976, align 8
  %978 = fmul double %18, %977
  %979 = fsub double %964, %978
  %980 = getelementptr inbounds double* %971, i64 2
  %981 = load double* %980, align 8
  %982 = fmul double %18, %981
  %983 = fsub double %966, %982
  %984 = getelementptr inbounds double* %971, i64 3
  %985 = load double* %984, align 8
  %986 = fmul double %18, %985
  %987 = fsub double %968, %986
  %988 = fmul double %987, %952
  %989 = fmul double %983, %952
  %990 = fmul double %979, %952
  %991 = fmul double %975, %952
  %992 = fmul double %956, %988
  %993 = fadd double %992, %989
  %994 = fmul double %993, %956
  %995 = fadd double %994, %990
  %996 = fmul double %995, %956
  %997 = fadd double %996, %991
  %998 = fmul double %962, %997
  %999 = fadd double %fullElectEnergy.2, %998
  %1000 = fmul double 3.000000e+00, %956
  %1001 = fmul double %1000, %988
  %1002 = fmul double 2.000000e+00, %989
  %1003 = fadd double %1001, %1002
  %1004 = fmul double %1003, %956
  %1005 = fadd double %1004, %990
  %1006 = fmul double -2.000000e+00, %1005
  %1007 = fmul double %1006, %962
  %1008 = sext i32 %913 to i64
  %1009 = getelementptr inbounds %class.Vector* %248, i64 %1008
  %1010 = fmul double %1007, %919
  %1011 = fmul double %1010, %919
  %1012 = fadd double %fullElectVirial_xx.2, %1011
  %1013 = fmul double %1010, %924
  %1014 = fadd double %fullElectVirial_xy.2, %1013
  %1015 = fmul double %1010, %930
  %1016 = fadd double %fullElectVirial_xz.2, %1015
  %1017 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1018 = load double* %1017, align 8
  %1019 = fadd double %1018, %1010
  store double %1019, double* %1017, align 8
  %1020 = getelementptr inbounds %class.Vector* %1009, i32 0, i32 0
  %1021 = load double* %1020, align 8
  %1022 = fsub double %1021, %1010
  store double %1022, double* %1020, align 8
  %1023 = fmul double %1007, %924
  %1024 = fmul double %1023, %924
  %1025 = fadd double %fullElectVirial_yy.2, %1024
  %1026 = fmul double %1023, %930
  %1027 = fadd double %fullElectVirial_yz.2, %1026
  %1028 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1029 = load double* %1028, align 8
  %1030 = fadd double %1029, %1023
  store double %1030, double* %1028, align 8
  %1031 = getelementptr inbounds %class.Vector* %1009, i32 0, i32 1
  %1032 = load double* %1031, align 8
  %1033 = fsub double %1032, %1023
  store double %1033, double* %1031, align 8
  %1034 = fmul double %1007, %930
  %1035 = fmul double %1034, %930
  %1036 = fadd double %fullElectVirial_zz.2, %1035
  %1037 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1038 = load double* %1037, align 8
  %1039 = fadd double %1038, %1034
  store double %1039, double* %1037, align 8
  %1040 = getelementptr inbounds %class.Vector* %1009, i32 0, i32 2
  %1041 = load double* %1040, align 8
  %1042 = fsub double %1041, %1034
  store double %1042, double* %1040, align 8
  br label %1043

; <label>:1043                                    ; preds = %910
  %1044 = add nsw i32 %k17.3, 1
  br label %908

; <label>:1045                                    ; preds = %908
  %1046 = ptrtoint i32* %plix.2 to i64
  %1047 = ptrtoint i32* %228 to i64
  %1048 = sub i64 %1046, %1047
  %1049 = sdiv exact i64 %1048, 4
  %1050 = trunc i64 %1049 to i32
  br label %1051

; <label>:1051                                    ; preds = %1182, %1045
  %k17.4 = phi i32 [ 0, %1045 ], [ %1183, %1182 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1045 ], [ %1175, %1182 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1045 ], [ %1166, %1182 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1045 ], [ %1164, %1182 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1045 ], [ %1155, %1182 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1045 ], [ %1153, %1182 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1045 ], [ %1151, %1182 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1045 ], [ %1138, %1182 ]
  %1052 = icmp slt i32 %k17.4, %1050
  br i1 %1052, label %1053, label %1184

; <label>:1053                                    ; preds = %1051
  %1054 = sext i32 %k17.4 to i64
  %1055 = getelementptr inbounds i32* %228, i64 %1054
  %1056 = load i32* %1055, align 4
  %1057 = sext i32 %1056 to i64
  %1058 = getelementptr inbounds %struct.CompAtom* %34, i64 %1057
  %1059 = getelementptr inbounds %struct.CompAtom* %1058, i32 0, i32 0
  %1060 = getelementptr inbounds %class.Vector* %1059, i32 0, i32 0
  %1061 = load double* %1060, align 8
  %1062 = fsub double %285, %1061
  %1063 = fmul double %1062, %1062
  %1064 = getelementptr inbounds %struct.CompAtom* %1058, i32 0, i32 0
  %1065 = getelementptr inbounds %class.Vector* %1064, i32 0, i32 1
  %1066 = load double* %1065, align 8
  %1067 = fsub double %288, %1066
  %1068 = fmul double %1067, %1067
  %1069 = fadd double %1063, %1068
  %1070 = getelementptr inbounds %struct.CompAtom* %1058, i32 0, i32 0
  %1071 = getelementptr inbounds %class.Vector* %1070, i32 0, i32 2
  %1072 = load double* %1071, align 8
  %1073 = fsub double %291, %1072
  %1074 = fmul double %1073, %1073
  %1075 = fadd double %1069, %1074
  %1076 = fptrunc double %1075 to float
  %1077 = bitcast %union.anon.108* %r2f51 to float*
  store float %1076, float* %1077, align 4
  %1078 = bitcast %union.anon.108* %r2f51 to i32*
  %1079 = load i32* %1078, align 4
  %1080 = ashr i32 %1079, 17
  %1081 = add nsw i32 %1080, %22
  %1082 = mul nsw i32 16, %1081
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds double* %14, i64 %1083
  %1085 = getelementptr inbounds double* %1084, i64 8
  %1086 = getelementptr inbounds double* %1085, i64 4
  %1087 = getelementptr inbounds double* %1086, i64 0
  %1088 = load double* %1087, align 8
  %1089 = bitcast %union.anon.108* %r2f51 to i32*
  %1090 = load i32* %1089, align 4
  %1091 = and i32 %1090, -131072
  store i32 %1091, i32* %1089, align 4
  %1092 = getelementptr inbounds %struct.CompAtom* %1058, i32 0, i32 1
  %1093 = load float* %1092, align 4
  %1094 = fpext float %1093 to double
  %1095 = fmul double %544, %1094
  %1096 = bitcast %union.anon.108* %r2f51 to float*
  %1097 = load float* %1096, align 4
  %1098 = fpext float %1097 to double
  %1099 = fsub double %1075, %1098
  %1100 = getelementptr inbounds %struct.CompAtom* %1058, i32 0, i32 2
  %1101 = load i32* %1100, align 4
  %1102 = lshr i32 %1101, 28
  %1103 = zext i32 %1102 to i64
  %1104 = getelementptr inbounds double* %538, i64 %1103
  %1105 = load double* %1104, align 8
  %1106 = getelementptr inbounds double* %1086, i64 1
  %1107 = load double* %1106, align 8
  %1108 = getelementptr inbounds double* %1086, i64 2
  %1109 = load double* %1108, align 8
  %1110 = getelementptr inbounds double* %1086, i64 3
  %1111 = load double* %1110, align 8
  %1112 = mul nsw i32 4, %1081
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds double* %15, i64 %1113
  %1115 = getelementptr inbounds double* %1114, i64 0
  %1116 = load double* %1115, align 8
  %1117 = fsub double %1088, %1116
  %1118 = getelementptr inbounds double* %1114, i64 1
  %1119 = load double* %1118, align 8
  %1120 = fsub double %1107, %1119
  %1121 = getelementptr inbounds double* %1114, i64 2
  %1122 = load double* %1121, align 8
  %1123 = fsub double %1109, %1122
  %1124 = getelementptr inbounds double* %1114, i64 3
  %1125 = load double* %1124, align 8
  %1126 = fsub double %1111, %1125
  %1127 = fmul double %1126, %1095
  %1128 = fmul double %1123, %1095
  %1129 = fmul double %1120, %1095
  %1130 = fmul double %1117, %1095
  %1131 = fmul double %1099, %1127
  %1132 = fadd double %1131, %1128
  %1133 = fmul double %1132, %1099
  %1134 = fadd double %1133, %1129
  %1135 = fmul double %1134, %1099
  %1136 = fadd double %1135, %1130
  %1137 = fmul double %1105, %1136
  %1138 = fadd double %fullElectEnergy.3, %1137
  %1139 = fmul double 3.000000e+00, %1099
  %1140 = fmul double %1139, %1127
  %1141 = fmul double 2.000000e+00, %1128
  %1142 = fadd double %1140, %1141
  %1143 = fmul double %1142, %1099
  %1144 = fadd double %1143, %1129
  %1145 = fmul double -2.000000e+00, %1144
  %1146 = fmul double %1145, %1105
  %1147 = sext i32 %1056 to i64
  %1148 = getelementptr inbounds %class.Vector* %248, i64 %1147
  %1149 = fmul double %1146, %1062
  %1150 = fmul double %1149, %1062
  %1151 = fadd double %fullElectVirial_xx.3, %1150
  %1152 = fmul double %1149, %1067
  %1153 = fadd double %fullElectVirial_xy.3, %1152
  %1154 = fmul double %1149, %1073
  %1155 = fadd double %fullElectVirial_xz.3, %1154
  %1156 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1157 = load double* %1156, align 8
  %1158 = fadd double %1157, %1149
  store double %1158, double* %1156, align 8
  %1159 = getelementptr inbounds %class.Vector* %1148, i32 0, i32 0
  %1160 = load double* %1159, align 8
  %1161 = fsub double %1160, %1149
  store double %1161, double* %1159, align 8
  %1162 = fmul double %1146, %1067
  %1163 = fmul double %1162, %1067
  %1164 = fadd double %fullElectVirial_yy.3, %1163
  %1165 = fmul double %1162, %1073
  %1166 = fadd double %fullElectVirial_yz.3, %1165
  %1167 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1168 = load double* %1167, align 8
  %1169 = fadd double %1168, %1162
  store double %1169, double* %1167, align 8
  %1170 = getelementptr inbounds %class.Vector* %1148, i32 0, i32 1
  %1171 = load double* %1170, align 8
  %1172 = fsub double %1171, %1162
  store double %1172, double* %1170, align 8
  %1173 = fmul double %1146, %1073
  %1174 = fmul double %1173, %1073
  %1175 = fadd double %fullElectVirial_zz.3, %1174
  %1176 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1177 = load double* %1176, align 8
  %1178 = fadd double %1177, %1173
  store double %1178, double* %1176, align 8
  %1179 = getelementptr inbounds %class.Vector* %1148, i32 0, i32 2
  %1180 = load double* %1179, align 8
  %1181 = fsub double %1180, %1173
  store double %1181, double* %1179, align 8
  br label %1182

; <label>:1182                                    ; preds = %1053
  %1183 = add nsw i32 %k17.4, 1
  br label %1051

; <label>:1184                                    ; preds = %1051
  br label %1185

; <label>:1185                                    ; preds = %1184, %327
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %327 ], [ %pairlistoffset.1, %1184 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %327 ], [ %pairlistindex.2, %1184 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %327 ], [ %fixg_lower.3, %1184 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %327 ], [ %g_lower.3, %1184 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %327 ], [ %j_hgroup.2, %1184 ]
  %pairCount.3 = phi i32 [ %323, %327 ], [ %pairCount.2, %1184 ]
  %i.1 = phi i32 [ %329, %327 ], [ %i.0, %1184 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %327 ], [ %fullElectVirial_zz.3, %1184 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %327 ], [ %fullElectVirial_yz.3, %1184 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %327 ], [ %fullElectVirial_yy.3, %1184 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %327 ], [ %fullElectVirial_xz.3, %1184 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %327 ], [ %fullElectVirial_xy.3, %1184 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %327 ], [ %fullElectVirial_xx.3, %1184 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %327 ], [ %fullElectEnergy.3, %1184 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %327 ], [ %778, %1184 ]
  %1186 = add nsw i32 %i.1, 1
  br label %264

; <label>:1187                                    ; preds = %264
  %1188 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1189 = icmp ne i32* %48, %1188
  br i1 %1189, label %1190, label %1195

; <label>:1190                                    ; preds = %1187
  %1191 = icmp eq i32* %48, null
  br i1 %1191, label %1194, label %1192

; <label>:1192                                    ; preds = %1190
  %1193 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1193) #8
  br label %1194

; <label>:1194                                    ; preds = %1192, %1190
  br label %1195

; <label>:1195                                    ; preds = %1194, %1187
  %1196 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1197 = icmp ne i32* %62, %1196
  br i1 %1197, label %1198, label %1203

; <label>:1198                                    ; preds = %1195
  %1199 = icmp eq i32* %62, null
  br i1 %1199, label %1202, label %1200

; <label>:1200                                    ; preds = %1198
  %1201 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1201) #8
  br label %1202

; <label>:1202                                    ; preds = %1200, %1198
  br label %1203

; <label>:1203                                    ; preds = %1202, %1195
  %1204 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1205 = icmp ne i32* %76, %1204
  br i1 %1205, label %1206, label %1211

; <label>:1206                                    ; preds = %1203
  %1207 = icmp eq i32* %76, null
  br i1 %1207, label %1210, label %1208

; <label>:1208                                    ; preds = %1206
  %1209 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1209) #8
  br label %1210

; <label>:1210                                    ; preds = %1208, %1206
  br label %1211

; <label>:1211                                    ; preds = %1210, %1203
  %1212 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1213 = icmp ne i32* %186, %1212
  br i1 %1213, label %1214, label %1219

; <label>:1214                                    ; preds = %1211
  %1215 = icmp eq i32* %186, null
  br i1 %1215, label %1218, label %1216

; <label>:1216                                    ; preds = %1214
  %1217 = bitcast i32* %186 to i8*
  call void @_ZdaPv(i8* %1217) #8
  br label %1218

; <label>:1218                                    ; preds = %1216, %1214
  br label %1219

; <label>:1219                                    ; preds = %1218, %1211
  %1220 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1221 = icmp ne i32* %200, %1220
  br i1 %1221, label %1222, label %1227

; <label>:1222                                    ; preds = %1219
  %1223 = icmp eq i32* %200, null
  br i1 %1223, label %1226, label %1224

; <label>:1224                                    ; preds = %1222
  %1225 = bitcast i32* %200 to i8*
  call void @_ZdaPv(i8* %1225) #8
  br label %1226

; <label>:1226                                    ; preds = %1224, %1222
  br label %1227

; <label>:1227                                    ; preds = %1226, %1219
  %1228 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1229 = icmp ne i32* %214, %1228
  br i1 %1229, label %1230, label %1235

; <label>:1230                                    ; preds = %1227
  %1231 = icmp eq i32* %214, null
  br i1 %1231, label %1234, label %1232

; <label>:1232                                    ; preds = %1230
  %1233 = bitcast i32* %214 to i8*
  call void @_ZdaPv(i8* %1233) #8
  br label %1234

; <label>:1234                                    ; preds = %1232, %1230
  br label %1235

; <label>:1235                                    ; preds = %1234, %1227
  %1236 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1237 = icmp ne i32* %228, %1236
  br i1 %1237, label %1238, label %1243

; <label>:1238                                    ; preds = %1235
  %1239 = icmp eq i32* %228, null
  br i1 %1239, label %1242, label %1240

; <label>:1240                                    ; preds = %1238
  %1241 = bitcast i32* %228 to i8*
  call void @_ZdaPv(i8* %1241) #8
  br label %1242

; <label>:1242                                    ; preds = %1240, %1238
  br label %1243

; <label>:1243                                    ; preds = %1242, %1235
  %1244 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1245 = icmp ne i32* %242, %1244
  br i1 %1245, label %1246, label %1251

; <label>:1246                                    ; preds = %1243
  %1247 = icmp eq i32* %242, null
  br i1 %1247, label %1250, label %1248

; <label>:1248                                    ; preds = %1246
  %1249 = bitcast i32* %242 to i8*
  call void @_ZdaPv(i8* %1249) #8
  br label %1250

; <label>:1250                                    ; preds = %1248, %1246
  br label %1251

; <label>:1251                                    ; preds = %1250, %1243
  %1252 = sitofp i32 %exclChecksum.0 to double
  %1253 = getelementptr inbounds double* %6, i64 22
  %1254 = load double* %1253, align 8
  %1255 = fadd double %1254, %1252
  store double %1255, double* %1253, align 8
  %1256 = getelementptr inbounds double* %6, i64 1
  %1257 = load double* %1256, align 8
  %1258 = fadd double %1257, %fullElectEnergy.0
  store double %1258, double* %1256, align 8
  %1259 = getelementptr inbounds double* %6, i64 12
  %1260 = load double* %1259, align 8
  %1261 = fadd double %1260, %fullElectVirial_xx.0
  store double %1261, double* %1259, align 8
  %1262 = getelementptr inbounds double* %6, i64 13
  %1263 = load double* %1262, align 8
  %1264 = fadd double %1263, %fullElectVirial_xy.0
  store double %1264, double* %1262, align 8
  %1265 = getelementptr inbounds double* %6, i64 14
  %1266 = load double* %1265, align 8
  %1267 = fadd double %1266, %fullElectVirial_xz.0
  store double %1267, double* %1265, align 8
  %1268 = getelementptr inbounds double* %6, i64 15
  %1269 = load double* %1268, align 8
  %1270 = fadd double %1269, %fullElectVirial_xy.0
  store double %1270, double* %1268, align 8
  %1271 = getelementptr inbounds double* %6, i64 16
  %1272 = load double* %1271, align 8
  %1273 = fadd double %1272, %fullElectVirial_yy.0
  store double %1273, double* %1271, align 8
  %1274 = getelementptr inbounds double* %6, i64 17
  %1275 = load double* %1274, align 8
  %1276 = fadd double %1275, %fullElectVirial_yz.0
  store double %1276, double* %1274, align 8
  %1277 = getelementptr inbounds double* %6, i64 18
  %1278 = load double* %1277, align 8
  %1279 = fadd double %1278, %fullElectVirial_xz.0
  store double %1279, double* %1277, align 8
  %1280 = getelementptr inbounds double* %6, i64 19
  %1281 = load double* %1280, align 8
  %1282 = fadd double %1281, %fullElectVirial_yz.0
  store double %1282, double* %1280, align 8
  %1283 = getelementptr inbounds double* %6, i64 20
  %1284 = load double* %1283, align 8
  %1285 = fadd double %1284, %fullElectVirial_zz.0
  store double %1285, double* %1283, align 8
  br label %1286

; <label>:1286                                    ; preds = %1251, %161, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil9calc_pairEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon, align 4
  %r2f29 = alloca %union.anon.0, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1136

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1136

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1038, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1038 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1038 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1038 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1039, %1038 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_zz.3, %1038 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yz.3, %1038 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yy.3, %1038 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xz.3, %1038 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xy.3, %1038 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xx.3, %1038 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1038 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1040

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1038

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1038

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %506 = load float* %505, align 4
  %507 = fpext float %506 to double
  %508 = fmul double 3.320636e+02, %507
  %509 = fmul double %508, %15
  %510 = fmul double %509, %9
  %511 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %512 = load i32* %511, align 4
  %513 = and i32 %512, 4194303
  %514 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %513)
  %515 = zext i16 %514 to i32
  %516 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %515)
  %517 = icmp ne i32 %504, 0
  br i1 %517, label %518, label %580

; <label>:518                                     ; preds = %502
  br label %519

; <label>:519                                     ; preds = %577, %518
  %pli4.0 = phi i32* [ %221, %518 ], [ %pli4.2, %577 ]
  %plin.0 = phi i32* [ %235, %518 ], [ %plin.2, %577 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %518 ], [ %578, %577 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %518 ], [ %exclChecksum.3, %577 ]
  %520 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %520, label %521, label %579

; <label>:521                                     ; preds = %519
  %522 = sext i32 %k.0 to i64
  %523 = getelementptr inbounds i32* %207, i64 %522
  %524 = load i32* %523, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds %struct.CompAtom* %36, i64 %525
  %527 = getelementptr inbounds %struct.CompAtom* %526, i32 0, i32 0
  %528 = getelementptr inbounds %class.Vector* %527, i32 0, i32 0
  %529 = load double* %528, align 8
  %530 = fsub double %303, %529
  %531 = fmul double %530, %530
  %532 = sext i32 %524 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %36, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 1
  %536 = load double* %535, align 8
  %537 = fsub double %306, %536
  %538 = fmul double %537, %537
  %539 = fadd double %531, %538
  %540 = sext i32 %524 to i64
  %541 = getelementptr inbounds %struct.CompAtom* %36, i64 %540
  %542 = getelementptr inbounds %struct.CompAtom* %541, i32 0, i32 0
  %543 = getelementptr inbounds %class.Vector* %542, i32 0, i32 2
  %544 = load double* %543, align 8
  %545 = fsub double %309, %544
  %546 = fmul double %545, %545
  %547 = fadd double %539, %546
  %548 = sext i32 %524 to i64
  %549 = getelementptr inbounds %struct.CompAtom* %36, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %549, i32 0, i32 2
  %551 = load i32* %550, align 4
  %552 = lshr i32 %551, 26
  %553 = and i32 %552, 1
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %576, label %555

; <label>:555                                     ; preds = %521
  %556 = fcmp ole double %547, %7
  br i1 %556, label %557, label %576

; <label>:557                                     ; preds = %555
  %558 = fcmp ole double %547, %21
  br i1 %558, label %559, label %562

; <label>:559                                     ; preds = %557
  %560 = add nsw i32 %exclChecksum.1, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %576, label %562

; <label>:562                                     ; preds = %559, %557
  %exclChecksum.2 = phi i32 [ %560, %559 ], [ %exclChecksum.1, %557 ]
  %563 = sext i32 %524 to i64
  %564 = getelementptr inbounds %struct.CompAtom* %36, i64 %563
  %565 = getelementptr inbounds %struct.CompAtom* %564, i32 0, i32 2
  %566 = load i32* %565, align 4
  %567 = and i32 %566, 4194303
  %568 = icmp sge i32 %567, %293
  br i1 %568, label %569, label %573

; <label>:569                                     ; preds = %562
  %570 = icmp sle i32 %567, %295
  br i1 %570, label %571, label %573

; <label>:571                                     ; preds = %569
  %572 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %524, i32* %pli4.0, align 4
  br label %575

; <label>:573                                     ; preds = %569, %562
  %574 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %524, i32* %plin.0, align 4
  br label %575

; <label>:575                                     ; preds = %573, %571
  %pli4.1 = phi i32* [ %572, %571 ], [ %pli4.0, %573 ]
  %plin.1 = phi i32* [ %plin.0, %571 ], [ %574, %573 ]
  br label %576

; <label>:576                                     ; preds = %575, %559, %555, %521
  %pli4.2 = phi i32* [ %pli4.0, %521 ], [ %pli4.0, %559 ], [ %pli4.1, %575 ], [ %pli4.0, %555 ]
  %plin.2 = phi i32* [ %plin.0, %521 ], [ %plin.0, %559 ], [ %plin.1, %575 ], [ %plin.0, %555 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %521 ], [ %560, %559 ], [ %exclChecksum.2, %575 ], [ %exclChecksum.1, %555 ]
  br label %577

; <label>:577                                     ; preds = %576
  %578 = add nsw i32 %k.0, 1
  br label %519

; <label>:579                                     ; preds = %519
  br label %659

; <label>:580                                     ; preds = %502
  %581 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %581, label %582, label %658

; <label>:582                                     ; preds = %580
  %583 = sext i32 %pairlistoffset.1 to i64
  %584 = getelementptr inbounds i32* %207, i64 %583
  %585 = load i32* %584, align 4
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtom* %36, i64 %586
  %588 = getelementptr inbounds %struct.CompAtom* %587, i32 0, i32 0
  %589 = getelementptr inbounds %class.Vector* %588, i32 0, i32 0
  %590 = load double* %589, align 8
  %591 = sext i32 %585 to i64
  %592 = getelementptr inbounds %struct.CompAtom* %36, i64 %591
  %593 = getelementptr inbounds %struct.CompAtom* %592, i32 0, i32 0
  %594 = getelementptr inbounds %class.Vector* %593, i32 0, i32 1
  %595 = load double* %594, align 8
  %596 = sext i32 %585 to i64
  %597 = getelementptr inbounds %struct.CompAtom* %36, i64 %596
  %598 = getelementptr inbounds %struct.CompAtom* %597, i32 0, i32 0
  %599 = getelementptr inbounds %class.Vector* %598, i32 0, i32 2
  %600 = load double* %599, align 8
  %601 = sext i32 %585 to i64
  %602 = getelementptr inbounds %struct.CompAtom* %36, i64 %601
  %603 = getelementptr inbounds %struct.CompAtom* %602, i32 0, i32 2
  %604 = load i32* %603, align 4
  %605 = and i32 %604, 4194303
  br label %606

; <label>:606                                     ; preds = %651, %582
  %pli4.3 = phi i32* [ %221, %582 ], [ %pli4.5, %651 ]
  %plin.3 = phi i32* [ %235, %582 ], [ %plin.5, %651 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %582 ], [ %609, %651 ]
  %j211.0 = phi i32 [ %585, %582 ], [ %612, %651 ]
  %p_j_x12.0 = phi double [ %590, %582 ], [ %619, %651 ]
  %p_j_y13.0 = phi double [ %595, %582 ], [ %627, %651 ]
  %p_j_z14.0 = phi double [ %600, %582 ], [ %635, %651 ]
  %atom215.0 = phi i32 [ %605, %582 ], [ %656, %651 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %582 ], [ %exclChecksum.6, %651 ]
  %607 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %607, label %608, label %657

; <label>:608                                     ; preds = %606
  %609 = add nsw i32 %k10.0, 1
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i32* %207, i64 %610
  %612 = load i32* %611, align 4
  %613 = fsub double %303, %p_j_x12.0
  %614 = fmul double %613, %613
  %615 = sext i32 %612 to i64
  %616 = getelementptr inbounds %struct.CompAtom* %36, i64 %615
  %617 = getelementptr inbounds %struct.CompAtom* %616, i32 0, i32 0
  %618 = getelementptr inbounds %class.Vector* %617, i32 0, i32 0
  %619 = load double* %618, align 8
  %620 = fsub double %306, %p_j_y13.0
  %621 = fmul double %620, %620
  %622 = fadd double %614, %621
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 1
  %627 = load double* %626, align 8
  %628 = fsub double %309, %p_j_z14.0
  %629 = fmul double %628, %628
  %630 = fadd double %622, %629
  %631 = sext i32 %612 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %36, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 2
  %635 = load double* %634, align 8
  %636 = fcmp ole double %630, %7
  br i1 %636, label %637, label %651

; <label>:637                                     ; preds = %608
  %638 = fcmp ole double %630, %21
  br i1 %638, label %639, label %642

; <label>:639                                     ; preds = %637
  %640 = add nsw i32 %exclChecksum.4, 1
  %641 = icmp ne i32 %640, 0
  br i1 %641, label %651, label %642

; <label>:642                                     ; preds = %639, %637
  %exclChecksum.5 = phi i32 [ %640, %639 ], [ %exclChecksum.4, %637 ]
  %643 = icmp sge i32 %atom215.0, %293
  br i1 %643, label %644, label %648

; <label>:644                                     ; preds = %642
  %645 = icmp sle i32 %atom215.0, %295
  br i1 %645, label %646, label %648

; <label>:646                                     ; preds = %644
  %647 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %650

; <label>:648                                     ; preds = %644, %642
  %649 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %650

; <label>:650                                     ; preds = %648, %646
  %pli4.4 = phi i32* [ %647, %646 ], [ %pli4.3, %648 ]
  %plin.4 = phi i32* [ %plin.3, %646 ], [ %649, %648 ]
  br label %651

; <label>:651                                     ; preds = %650, %639, %608
  %pli4.5 = phi i32* [ %pli4.3, %639 ], [ %pli4.4, %650 ], [ %pli4.3, %608 ]
  %plin.5 = phi i32* [ %plin.3, %639 ], [ %plin.4, %650 ], [ %plin.3, %608 ]
  %exclChecksum.6 = phi i32 [ %640, %639 ], [ %exclChecksum.5, %650 ], [ %exclChecksum.4, %608 ]
  %652 = sext i32 %612 to i64
  %653 = getelementptr inbounds %struct.CompAtom* %36, i64 %652
  %654 = getelementptr inbounds %struct.CompAtom* %653, i32 0, i32 2
  %655 = load i32* %654, align 4
  %656 = and i32 %655, 4194303
  br label %606

; <label>:657                                     ; preds = %606
  br label %658

; <label>:658                                     ; preds = %657, %580
  %pli4.6 = phi i32* [ %pli4.3, %657 ], [ %221, %580 ]
  %plin.6 = phi i32* [ %plin.3, %657 ], [ %235, %580 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %657 ], [ %exclChecksum.0, %580 ]
  br label %659

; <label>:659                                     ; preds = %658, %579
  %pli4.7 = phi i32* [ %pli4.0, %579 ], [ %pli4.6, %658 ]
  %plin.7 = phi i32* [ %plin.0, %579 ], [ %plin.6, %658 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %579 ], [ %exclChecksum.7, %658 ]
  %660 = ptrtoint i32* %pli4.7 to i64
  %661 = ptrtoint i32* %221 to i64
  %662 = sub i64 %660, %661
  %663 = sdiv exact i64 %662, 4
  %664 = trunc i64 %663 to i32
  %665 = icmp ne i32 %664, 0
  br i1 %665, label %666, label %673

; <label>:666                                     ; preds = %659
  %667 = sub nsw i32 %664, 1
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i32* %221, i64 %668
  %670 = load i32* %669, align 4
  %671 = sext i32 %664 to i64
  %672 = getelementptr inbounds i32* %221, i64 %671
  store i32 %670, i32* %672, align 4
  br label %673

; <label>:673                                     ; preds = %666, %659
  br label %674

; <label>:674                                     ; preds = %696, %673
  %plin.8 = phi i32* [ %plin.7, %673 ], [ %plin.9, %696 ]
  %plix.0 = phi i32* [ %249, %673 ], [ %plix.1, %696 ]
  %plim.0 = phi i32* [ %263, %673 ], [ %plim.1, %696 ]
  %k18.0 = phi i32 [ 0, %673 ], [ %697, %696 ]
  %675 = icmp slt i32 %k18.0, %664
  br i1 %675, label %676, label %698

; <label>:676                                     ; preds = %674
  %677 = sext i32 %k18.0 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds %struct.CompAtom* %36, i64 %680
  %682 = getelementptr inbounds %struct.CompAtom* %681, i32 0, i32 2
  %683 = load i32* %682, align 4
  %684 = and i32 %683, 4194303
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i8* %300, i64 %685
  %687 = load i8* %686, align 1
  %688 = sext i8 %687 to i32
  switch i32 %688, label %695 [
    i32 0, label %689
    i32 1, label %691
    i32 2, label %693
  ]

; <label>:689                                     ; preds = %676
  %690 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %679, i32* %plin.8, align 4
  br label %695

; <label>:691                                     ; preds = %676
  %692 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %679, i32* %plix.0, align 4
  br label %695

; <label>:693                                     ; preds = %676
  %694 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %679, i32* %plim.0, align 4
  br label %695

; <label>:695                                     ; preds = %693, %691, %689, %676
  %plin.9 = phi i32* [ %plin.8, %676 ], [ %plin.8, %693 ], [ %plin.8, %691 ], [ %690, %689 ]
  %plix.1 = phi i32* [ %plix.0, %676 ], [ %plix.0, %693 ], [ %692, %691 ], [ %plix.0, %689 ]
  %plim.1 = phi i32* [ %plim.0, %676 ], [ %694, %693 ], [ %plim.0, %691 ], [ %plim.0, %689 ]
  br label %696

; <label>:696                                     ; preds = %695
  %697 = add nsw i32 %k18.0, 1
  br label %674

; <label>:698                                     ; preds = %674
  %699 = ptrtoint i32* %plix.0 to i64
  %700 = ptrtoint i32* %249 to i64
  %701 = sub i64 %699, %700
  %702 = sdiv exact i64 %701, 4
  %703 = sext i32 %exclChecksum.8 to i64
  %704 = add nsw i64 %703, %702
  %705 = trunc i64 %704 to i32
  %706 = ptrtoint i32* %plim.0 to i64
  %707 = ptrtoint i32* %263 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %705 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plin.8 to i64
  %714 = ptrtoint i32* %235 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = trunc i64 %716 to i32
  br label %718

; <label>:718                                     ; preds = %871, %698
  %k18.1 = phi i32 [ 0, %698 ], [ %872, %871 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %698 ], [ %864, %871 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %698 ], [ %855, %871 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %698 ], [ %853, %871 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %698 ], [ %844, %871 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %698 ], [ %842, %871 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %698 ], [ %840, %871 ]
  %719 = icmp slt i32 %k18.1, %717
  br i1 %719, label %720, label %873

; <label>:720                                     ; preds = %718
  %721 = sext i32 %k18.1 to i64
  %722 = getelementptr inbounds i32* %235, i64 %721
  %723 = load i32* %722, align 4
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds %struct.CompAtom* %36, i64 %724
  %726 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %727 = getelementptr inbounds %class.Vector* %726, i32 0, i32 0
  %728 = load double* %727, align 8
  %729 = fsub double %303, %728
  %730 = fmul double %729, %729
  %731 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %732 = getelementptr inbounds %class.Vector* %731, i32 0, i32 1
  %733 = load double* %732, align 8
  %734 = fsub double %306, %733
  %735 = fmul double %734, %734
  %736 = fadd double %730, %735
  %737 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %738 = getelementptr inbounds %class.Vector* %737, i32 0, i32 2
  %739 = load double* %738, align 8
  %740 = fsub double %309, %739
  %741 = fmul double %740, %740
  %742 = fadd double %736, %741
  %743 = fptrunc double %742 to float
  %744 = bitcast %union.anon* %r2f to float*
  store float %743, float* %744, align 4
  %745 = bitcast %union.anon* %r2f to i32*
  %746 = load i32* %745, align 4
  %747 = ashr i32 %746, 17
  %748 = add nsw i32 %747, %24
  %749 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 2
  %750 = load i32* %749, align 4
  %751 = and i32 %750, 4194303
  %752 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %751)
  %753 = zext i16 %752 to i32
  %754 = mul nsw i32 2, %753
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %755
  %757 = mul nsw i32 16, %748
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds double* %14, i64 %758
  %760 = getelementptr inbounds double* %759, i64 0
  %761 = load double* %760, align 8
  %762 = mul nsw i32 16, %748
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds double* %14, i64 %763
  %765 = getelementptr inbounds double* %764, i64 4
  %766 = getelementptr inbounds double* %765, i64 0
  %767 = load double* %766, align 8
  %768 = mul nsw i32 16, %748
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds double* %14, i64 %769
  %771 = getelementptr inbounds double* %770, i64 8
  %772 = getelementptr inbounds double* %771, i64 0
  %773 = load double* %772, align 8
  %774 = bitcast %union.anon* %r2f to i32*
  %775 = load i32* %774, align 4
  %776 = and i32 %775, -131072
  store i32 %776, i32* %774, align 4
  %777 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 1
  %778 = load float* %777, align 4
  %779 = fpext float %778 to double
  %780 = fmul double %510, %779
  %781 = bitcast %union.anon* %r2f to float*
  %782 = load float* %781, align 4
  %783 = fpext float %782 to double
  %784 = fsub double %742, %783
  %785 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 0
  %786 = load double* %785, align 8
  %787 = fmul double %15, %786
  %788 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 1
  %789 = load double* %788, align 8
  %790 = fmul double %15, %789
  %791 = fmul double %787, %761
  %792 = fmul double %790, %767
  %793 = fsub double %791, %792
  %794 = getelementptr inbounds double* %759, i64 3
  %795 = load double* %794, align 8
  %796 = fmul double %787, %795
  %797 = getelementptr inbounds double* %765, i64 3
  %798 = load double* %797, align 8
  %799 = fmul double %790, %798
  %800 = fsub double %796, %799
  %801 = getelementptr inbounds double* %759, i64 2
  %802 = load double* %801, align 8
  %803 = fmul double %787, %802
  %804 = getelementptr inbounds double* %765, i64 2
  %805 = load double* %804, align 8
  %806 = fmul double %790, %805
  %807 = fsub double %803, %806
  %808 = getelementptr inbounds double* %759, i64 1
  %809 = load double* %808, align 8
  %810 = fmul double %787, %809
  %811 = getelementptr inbounds double* %765, i64 1
  %812 = load double* %811, align 8
  %813 = fmul double %790, %812
  %814 = fsub double %810, %813
  %815 = fmul double %773, %780
  %816 = getelementptr inbounds double* %771, i64 3
  %817 = load double* %816, align 8
  %818 = fmul double %780, %817
  %819 = getelementptr inbounds double* %771, i64 2
  %820 = load double* %819, align 8
  %821 = fmul double %780, %820
  %822 = getelementptr inbounds double* %771, i64 1
  %823 = load double* %822, align 8
  %824 = fmul double %780, %823
  %825 = fadd double %818, %800
  %826 = fadd double %821, %807
  %827 = fadd double %824, %814
  %828 = fadd double %815, %793
  %829 = fmul double 3.000000e+00, %784
  %830 = fmul double %829, %825
  %831 = fmul double 2.000000e+00, %826
  %832 = fadd double %830, %831
  %833 = fmul double %832, %784
  %834 = fadd double %833, %827
  %835 = fmul double -2.000000e+00, %834
  %836 = sext i32 %723 to i64
  %837 = getelementptr inbounds %class.Vector* %269, i64 %836
  %838 = fmul double %835, %729
  %839 = fmul double %838, %729
  %840 = fadd double %virial_xx.1, %839
  %841 = fmul double %838, %734
  %842 = fadd double %virial_xy.1, %841
  %843 = fmul double %838, %740
  %844 = fadd double %virial_xz.1, %843
  %845 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %846 = load double* %845, align 8
  %847 = fadd double %846, %838
  store double %847, double* %845, align 8
  %848 = getelementptr inbounds %class.Vector* %837, i32 0, i32 0
  %849 = load double* %848, align 8
  %850 = fsub double %849, %838
  store double %850, double* %848, align 8
  %851 = fmul double %835, %734
  %852 = fmul double %851, %734
  %853 = fadd double %virial_yy.1, %852
  %854 = fmul double %851, %740
  %855 = fadd double %virial_yz.1, %854
  %856 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %857 = load double* %856, align 8
  %858 = fadd double %857, %851
  store double %858, double* %856, align 8
  %859 = getelementptr inbounds %class.Vector* %837, i32 0, i32 1
  %860 = load double* %859, align 8
  %861 = fsub double %860, %851
  store double %861, double* %859, align 8
  %862 = fmul double %835, %740
  %863 = fmul double %862, %740
  %864 = fadd double %virial_zz.1, %863
  %865 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %866 = load double* %865, align 8
  %867 = fadd double %866, %862
  store double %867, double* %865, align 8
  %868 = getelementptr inbounds %class.Vector* %837, i32 0, i32 2
  %869 = load double* %868, align 8
  %870 = fsub double %869, %862
  store double %870, double* %868, align 8
  br label %871

; <label>:871                                     ; preds = %720
  %872 = add nsw i32 %k18.1, 1
  br label %718

; <label>:873                                     ; preds = %718
  %874 = ptrtoint i32* %plim.0 to i64
  %875 = ptrtoint i32* %263 to i64
  %876 = sub i64 %874, %875
  %877 = sdiv exact i64 %876, 4
  %878 = trunc i64 %877 to i32
  br label %879

; <label>:879                                     ; preds = %1035, %873
  %k18.2 = phi i32 [ 0, %873 ], [ %1036, %1035 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %873 ], [ %1028, %1035 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %873 ], [ %1019, %1035 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %873 ], [ %1017, %1035 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %873 ], [ %1008, %1035 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %873 ], [ %1006, %1035 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %873 ], [ %1004, %1035 ]
  %880 = icmp slt i32 %k18.2, %878
  br i1 %880, label %881, label %1037

; <label>:881                                     ; preds = %879
  %882 = sext i32 %k18.2 to i64
  %883 = getelementptr inbounds i32* %263, i64 %882
  %884 = load i32* %883, align 4
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds %struct.CompAtom* %36, i64 %885
  %887 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 0
  %888 = getelementptr inbounds %class.Vector* %887, i32 0, i32 0
  %889 = load double* %888, align 8
  %890 = fsub double %303, %889
  %891 = fmul double %890, %890
  %892 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 0
  %893 = getelementptr inbounds %class.Vector* %892, i32 0, i32 1
  %894 = load double* %893, align 8
  %895 = fsub double %306, %894
  %896 = fmul double %895, %895
  %897 = fadd double %891, %896
  %898 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 0
  %899 = getelementptr inbounds %class.Vector* %898, i32 0, i32 2
  %900 = load double* %899, align 8
  %901 = fsub double %309, %900
  %902 = fmul double %901, %901
  %903 = fadd double %897, %902
  %904 = fptrunc double %903 to float
  %905 = bitcast %union.anon.0* %r2f29 to float*
  store float %904, float* %905, align 4
  %906 = bitcast %union.anon.0* %r2f29 to i32*
  %907 = load i32* %906, align 4
  %908 = ashr i32 %907, 17
  %909 = add nsw i32 %908, %24
  %910 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 2
  %911 = load i32* %910, align 4
  %912 = and i32 %911, 4194303
  %913 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %912)
  %914 = zext i16 %913 to i32
  %915 = mul nsw i32 2, %914
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %916
  %918 = getelementptr inbounds %"struct.LJTable::TableEntry"* %917, i64 1
  %919 = mul nsw i32 16, %909
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds double* %14, i64 %920
  %922 = getelementptr inbounds double* %921, i64 0
  %923 = load double* %922, align 8
  %924 = mul nsw i32 16, %909
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds double* %14, i64 %925
  %927 = getelementptr inbounds double* %926, i64 4
  %928 = getelementptr inbounds double* %927, i64 0
  %929 = load double* %928, align 8
  %930 = mul nsw i32 16, %909
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds double* %14, i64 %931
  %933 = getelementptr inbounds double* %932, i64 8
  %934 = getelementptr inbounds double* %933, i64 0
  %935 = load double* %934, align 8
  %936 = bitcast %union.anon.0* %r2f29 to i32*
  %937 = load i32* %936, align 4
  %938 = and i32 %937, -131072
  store i32 %938, i32* %936, align 4
  %939 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 1
  %940 = load float* %939, align 4
  %941 = fpext float %940 to double
  %942 = fmul double %510, %941
  %943 = bitcast %union.anon.0* %r2f29 to float*
  %944 = load float* %943, align 4
  %945 = fpext float %944 to double
  %946 = fsub double %903, %945
  %947 = getelementptr inbounds %"struct.LJTable::TableEntry"* %918, i32 0, i32 0
  %948 = load double* %947, align 8
  %949 = fmul double %15, %948
  %950 = getelementptr inbounds %"struct.LJTable::TableEntry"* %918, i32 0, i32 1
  %951 = load double* %950, align 8
  %952 = fmul double %15, %951
  %953 = fmul double %949, %923
  %954 = fmul double %952, %929
  %955 = fsub double %953, %954
  %956 = getelementptr inbounds double* %921, i64 3
  %957 = load double* %956, align 8
  %958 = fmul double %949, %957
  %959 = getelementptr inbounds double* %927, i64 3
  %960 = load double* %959, align 8
  %961 = fmul double %952, %960
  %962 = fsub double %958, %961
  %963 = getelementptr inbounds double* %921, i64 2
  %964 = load double* %963, align 8
  %965 = fmul double %949, %964
  %966 = getelementptr inbounds double* %927, i64 2
  %967 = load double* %966, align 8
  %968 = fmul double %952, %967
  %969 = fsub double %965, %968
  %970 = getelementptr inbounds double* %921, i64 1
  %971 = load double* %970, align 8
  %972 = fmul double %949, %971
  %973 = getelementptr inbounds double* %927, i64 1
  %974 = load double* %973, align 8
  %975 = fmul double %952, %974
  %976 = fsub double %972, %975
  %977 = fsub double 1.000000e+00, %17
  %978 = fmul double %977, %942
  %979 = fmul double %935, %978
  %980 = getelementptr inbounds double* %933, i64 3
  %981 = load double* %980, align 8
  %982 = fmul double %978, %981
  %983 = getelementptr inbounds double* %933, i64 2
  %984 = load double* %983, align 8
  %985 = fmul double %978, %984
  %986 = getelementptr inbounds double* %933, i64 1
  %987 = load double* %986, align 8
  %988 = fmul double %978, %987
  %989 = fadd double %982, %962
  %990 = fadd double %985, %969
  %991 = fadd double %988, %976
  %992 = fadd double %979, %955
  %993 = fmul double 3.000000e+00, %946
  %994 = fmul double %993, %989
  %995 = fmul double 2.000000e+00, %990
  %996 = fadd double %994, %995
  %997 = fmul double %996, %946
  %998 = fadd double %997, %991
  %999 = fmul double -2.000000e+00, %998
  %1000 = sext i32 %884 to i64
  %1001 = getelementptr inbounds %class.Vector* %269, i64 %1000
  %1002 = fmul double %999, %890
  %1003 = fmul double %1002, %890
  %1004 = fadd double %virial_xx.2, %1003
  %1005 = fmul double %1002, %895
  %1006 = fadd double %virial_xy.2, %1005
  %1007 = fmul double %1002, %901
  %1008 = fadd double %virial_xz.2, %1007
  %1009 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1010 = load double* %1009, align 8
  %1011 = fadd double %1010, %1002
  store double %1011, double* %1009, align 8
  %1012 = getelementptr inbounds %class.Vector* %1001, i32 0, i32 0
  %1013 = load double* %1012, align 8
  %1014 = fsub double %1013, %1002
  store double %1014, double* %1012, align 8
  %1015 = fmul double %999, %895
  %1016 = fmul double %1015, %895
  %1017 = fadd double %virial_yy.2, %1016
  %1018 = fmul double %1015, %901
  %1019 = fadd double %virial_yz.2, %1018
  %1020 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1021 = load double* %1020, align 8
  %1022 = fadd double %1021, %1015
  store double %1022, double* %1020, align 8
  %1023 = getelementptr inbounds %class.Vector* %1001, i32 0, i32 1
  %1024 = load double* %1023, align 8
  %1025 = fsub double %1024, %1015
  store double %1025, double* %1023, align 8
  %1026 = fmul double %999, %901
  %1027 = fmul double %1026, %901
  %1028 = fadd double %virial_zz.2, %1027
  %1029 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1030 = load double* %1029, align 8
  %1031 = fadd double %1030, %1026
  store double %1031, double* %1029, align 8
  %1032 = getelementptr inbounds %class.Vector* %1001, i32 0, i32 2
  %1033 = load double* %1032, align 8
  %1034 = fsub double %1033, %1026
  store double %1034, double* %1032, align 8
  br label %1035

; <label>:1035                                    ; preds = %881
  %1036 = add nsw i32 %k18.2, 1
  br label %879

; <label>:1037                                    ; preds = %879
  br label %1038

; <label>:1038                                    ; preds = %1037, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1037 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1037 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1037 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1037 ], [ %491, %488 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %339 ], [ %virial_zz.2, %1037 ], [ %virial_zz.0, %488 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %339 ], [ %virial_yz.2, %1037 ], [ %virial_yz.0, %488 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %339 ], [ %virial_yy.2, %1037 ], [ %virial_yy.0, %488 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %339 ], [ %virial_xz.2, %1037 ], [ %virial_xz.0, %488 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %339 ], [ %virial_xy.2, %1037 ], [ %virial_xy.0, %488 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %339 ], [ %virial_xx.2, %1037 ], [ %virial_xx.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %712, %1037 ], [ %exclChecksum.0, %488 ]
  %1039 = add nsw i32 %i.2, 1
  br label %283

; <label>:1040                                    ; preds = %283
  %1041 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1042 = icmp ne i32* %50, %1041
  br i1 %1042, label %1043, label %1048

; <label>:1043                                    ; preds = %1040
  %1044 = icmp eq i32* %50, null
  br i1 %1044, label %1047, label %1045

; <label>:1045                                    ; preds = %1043
  %1046 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1046) #8
  br label %1047

; <label>:1047                                    ; preds = %1045, %1043
  br label %1048

; <label>:1048                                    ; preds = %1047, %1040
  %1049 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1050 = icmp ne i32* %64, %1049
  br i1 %1050, label %1051, label %1056

; <label>:1051                                    ; preds = %1048
  %1052 = icmp eq i32* %64, null
  br i1 %1052, label %1055, label %1053

; <label>:1053                                    ; preds = %1051
  %1054 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1054) #8
  br label %1055

; <label>:1055                                    ; preds = %1053, %1051
  br label %1056

; <label>:1056                                    ; preds = %1055, %1048
  %1057 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1058 = icmp ne i32* %78, %1057
  br i1 %1058, label %1059, label %1064

; <label>:1059                                    ; preds = %1056
  %1060 = icmp eq i32* %78, null
  br i1 %1060, label %1063, label %1061

; <label>:1061                                    ; preds = %1059
  %1062 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1062) #8
  br label %1063

; <label>:1063                                    ; preds = %1061, %1059
  br label %1064

; <label>:1064                                    ; preds = %1063, %1056
  %1065 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1066 = icmp ne i32* %207, %1065
  br i1 %1066, label %1067, label %1072

; <label>:1067                                    ; preds = %1064
  %1068 = icmp eq i32* %207, null
  br i1 %1068, label %1071, label %1069

; <label>:1069                                    ; preds = %1067
  %1070 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1070) #8
  br label %1071

; <label>:1071                                    ; preds = %1069, %1067
  br label %1072

; <label>:1072                                    ; preds = %1071, %1064
  %1073 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1074 = icmp ne i32* %221, %1073
  br i1 %1074, label %1075, label %1080

; <label>:1075                                    ; preds = %1072
  %1076 = icmp eq i32* %221, null
  br i1 %1076, label %1079, label %1077

; <label>:1077                                    ; preds = %1075
  %1078 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1078) #8
  br label %1079

; <label>:1079                                    ; preds = %1077, %1075
  br label %1080

; <label>:1080                                    ; preds = %1079, %1072
  %1081 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1082 = icmp ne i32* %235, %1081
  br i1 %1082, label %1083, label %1088

; <label>:1083                                    ; preds = %1080
  %1084 = icmp eq i32* %235, null
  br i1 %1084, label %1087, label %1085

; <label>:1085                                    ; preds = %1083
  %1086 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1086) #8
  br label %1087

; <label>:1087                                    ; preds = %1085, %1083
  br label %1088

; <label>:1088                                    ; preds = %1087, %1080
  %1089 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1090 = icmp ne i32* %249, %1089
  br i1 %1090, label %1091, label %1096

; <label>:1091                                    ; preds = %1088
  %1092 = icmp eq i32* %249, null
  br i1 %1092, label %1095, label %1093

; <label>:1093                                    ; preds = %1091
  %1094 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1094) #8
  br label %1095

; <label>:1095                                    ; preds = %1093, %1091
  br label %1096

; <label>:1096                                    ; preds = %1095, %1088
  %1097 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1098 = icmp ne i32* %263, %1097
  br i1 %1098, label %1099, label %1104

; <label>:1099                                    ; preds = %1096
  %1100 = icmp eq i32* %263, null
  br i1 %1100, label %1103, label %1101

; <label>:1101                                    ; preds = %1099
  %1102 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1102) #8
  br label %1103

; <label>:1103                                    ; preds = %1101, %1099
  br label %1104

; <label>:1104                                    ; preds = %1103, %1096
  %1105 = sitofp i32 %exclChecksum.0 to double
  %1106 = getelementptr inbounds double* %6, i64 22
  %1107 = load double* %1106, align 8
  %1108 = fadd double %1107, %1105
  store double %1108, double* %1106, align 8
  %1109 = getelementptr inbounds double* %6, i64 3
  %1110 = load double* %1109, align 8
  %1111 = fadd double %1110, %virial_xx.0
  store double %1111, double* %1109, align 8
  %1112 = getelementptr inbounds double* %6, i64 4
  %1113 = load double* %1112, align 8
  %1114 = fadd double %1113, %virial_xy.0
  store double %1114, double* %1112, align 8
  %1115 = getelementptr inbounds double* %6, i64 5
  %1116 = load double* %1115, align 8
  %1117 = fadd double %1116, %virial_xz.0
  store double %1117, double* %1115, align 8
  %1118 = getelementptr inbounds double* %6, i64 6
  %1119 = load double* %1118, align 8
  %1120 = fadd double %1119, %virial_xy.0
  store double %1120, double* %1118, align 8
  %1121 = getelementptr inbounds double* %6, i64 7
  %1122 = load double* %1121, align 8
  %1123 = fadd double %1122, %virial_yy.0
  store double %1123, double* %1121, align 8
  %1124 = getelementptr inbounds double* %6, i64 8
  %1125 = load double* %1124, align 8
  %1126 = fadd double %1125, %virial_yz.0
  store double %1126, double* %1124, align 8
  %1127 = getelementptr inbounds double* %6, i64 9
  %1128 = load double* %1127, align 8
  %1129 = fadd double %1128, %virial_xz.0
  store double %1129, double* %1127, align 8
  %1130 = getelementptr inbounds double* %6, i64 10
  %1131 = load double* %1130, align 8
  %1132 = fadd double %1131, %virial_yz.0
  store double %1132, double* %1130, align 8
  %1133 = getelementptr inbounds double* %6, i64 11
  %1134 = load double* %1133, align 8
  %1135 = fadd double %1134, %virial_zz.0
  store double %1135, double* %1133, align 8
  br label %1136

; <label>:1136                                    ; preds = %1104, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil16calc_pair_energyEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.1, align 4
  %r2f29 = alloca %union.anon.2, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1170

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1170

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1066, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1066 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1066 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1066 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1067, %1066 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_zz.3, %1066 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yz.3, %1066 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_yy.3, %1066 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xz.3, %1066 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xy.3, %1066 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %virial_xx.3, %1066 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %electEnergy.3, %1066 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy.3, %1066 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1066 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1068

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1066

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1066

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %506 = load float* %505, align 4
  %507 = fpext float %506 to double
  %508 = fmul double 3.320636e+02, %507
  %509 = fmul double %508, %15
  %510 = fmul double %509, %9
  %511 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %512 = load i32* %511, align 4
  %513 = and i32 %512, 4194303
  %514 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %513)
  %515 = zext i16 %514 to i32
  %516 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %515)
  %517 = icmp ne i32 %504, 0
  br i1 %517, label %518, label %580

; <label>:518                                     ; preds = %502
  br label %519

; <label>:519                                     ; preds = %577, %518
  %pli4.0 = phi i32* [ %221, %518 ], [ %pli4.2, %577 ]
  %plin.0 = phi i32* [ %235, %518 ], [ %plin.2, %577 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %518 ], [ %578, %577 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %518 ], [ %exclChecksum.3, %577 ]
  %520 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %520, label %521, label %579

; <label>:521                                     ; preds = %519
  %522 = sext i32 %k.0 to i64
  %523 = getelementptr inbounds i32* %207, i64 %522
  %524 = load i32* %523, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds %struct.CompAtom* %36, i64 %525
  %527 = getelementptr inbounds %struct.CompAtom* %526, i32 0, i32 0
  %528 = getelementptr inbounds %class.Vector* %527, i32 0, i32 0
  %529 = load double* %528, align 8
  %530 = fsub double %303, %529
  %531 = fmul double %530, %530
  %532 = sext i32 %524 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %36, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 1
  %536 = load double* %535, align 8
  %537 = fsub double %306, %536
  %538 = fmul double %537, %537
  %539 = fadd double %531, %538
  %540 = sext i32 %524 to i64
  %541 = getelementptr inbounds %struct.CompAtom* %36, i64 %540
  %542 = getelementptr inbounds %struct.CompAtom* %541, i32 0, i32 0
  %543 = getelementptr inbounds %class.Vector* %542, i32 0, i32 2
  %544 = load double* %543, align 8
  %545 = fsub double %309, %544
  %546 = fmul double %545, %545
  %547 = fadd double %539, %546
  %548 = sext i32 %524 to i64
  %549 = getelementptr inbounds %struct.CompAtom* %36, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %549, i32 0, i32 2
  %551 = load i32* %550, align 4
  %552 = lshr i32 %551, 26
  %553 = and i32 %552, 1
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %576, label %555

; <label>:555                                     ; preds = %521
  %556 = fcmp ole double %547, %7
  br i1 %556, label %557, label %576

; <label>:557                                     ; preds = %555
  %558 = fcmp ole double %547, %21
  br i1 %558, label %559, label %562

; <label>:559                                     ; preds = %557
  %560 = add nsw i32 %exclChecksum.1, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %576, label %562

; <label>:562                                     ; preds = %559, %557
  %exclChecksum.2 = phi i32 [ %560, %559 ], [ %exclChecksum.1, %557 ]
  %563 = sext i32 %524 to i64
  %564 = getelementptr inbounds %struct.CompAtom* %36, i64 %563
  %565 = getelementptr inbounds %struct.CompAtom* %564, i32 0, i32 2
  %566 = load i32* %565, align 4
  %567 = and i32 %566, 4194303
  %568 = icmp sge i32 %567, %293
  br i1 %568, label %569, label %573

; <label>:569                                     ; preds = %562
  %570 = icmp sle i32 %567, %295
  br i1 %570, label %571, label %573

; <label>:571                                     ; preds = %569
  %572 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %524, i32* %pli4.0, align 4
  br label %575

; <label>:573                                     ; preds = %569, %562
  %574 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %524, i32* %plin.0, align 4
  br label %575

; <label>:575                                     ; preds = %573, %571
  %pli4.1 = phi i32* [ %572, %571 ], [ %pli4.0, %573 ]
  %plin.1 = phi i32* [ %plin.0, %571 ], [ %574, %573 ]
  br label %576

; <label>:576                                     ; preds = %575, %559, %555, %521
  %pli4.2 = phi i32* [ %pli4.0, %521 ], [ %pli4.0, %559 ], [ %pli4.1, %575 ], [ %pli4.0, %555 ]
  %plin.2 = phi i32* [ %plin.0, %521 ], [ %plin.0, %559 ], [ %plin.1, %575 ], [ %plin.0, %555 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %521 ], [ %560, %559 ], [ %exclChecksum.2, %575 ], [ %exclChecksum.1, %555 ]
  br label %577

; <label>:577                                     ; preds = %576
  %578 = add nsw i32 %k.0, 1
  br label %519

; <label>:579                                     ; preds = %519
  br label %659

; <label>:580                                     ; preds = %502
  %581 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %581, label %582, label %658

; <label>:582                                     ; preds = %580
  %583 = sext i32 %pairlistoffset.1 to i64
  %584 = getelementptr inbounds i32* %207, i64 %583
  %585 = load i32* %584, align 4
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtom* %36, i64 %586
  %588 = getelementptr inbounds %struct.CompAtom* %587, i32 0, i32 0
  %589 = getelementptr inbounds %class.Vector* %588, i32 0, i32 0
  %590 = load double* %589, align 8
  %591 = sext i32 %585 to i64
  %592 = getelementptr inbounds %struct.CompAtom* %36, i64 %591
  %593 = getelementptr inbounds %struct.CompAtom* %592, i32 0, i32 0
  %594 = getelementptr inbounds %class.Vector* %593, i32 0, i32 1
  %595 = load double* %594, align 8
  %596 = sext i32 %585 to i64
  %597 = getelementptr inbounds %struct.CompAtom* %36, i64 %596
  %598 = getelementptr inbounds %struct.CompAtom* %597, i32 0, i32 0
  %599 = getelementptr inbounds %class.Vector* %598, i32 0, i32 2
  %600 = load double* %599, align 8
  %601 = sext i32 %585 to i64
  %602 = getelementptr inbounds %struct.CompAtom* %36, i64 %601
  %603 = getelementptr inbounds %struct.CompAtom* %602, i32 0, i32 2
  %604 = load i32* %603, align 4
  %605 = and i32 %604, 4194303
  br label %606

; <label>:606                                     ; preds = %651, %582
  %pli4.3 = phi i32* [ %221, %582 ], [ %pli4.5, %651 ]
  %plin.3 = phi i32* [ %235, %582 ], [ %plin.5, %651 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %582 ], [ %609, %651 ]
  %j211.0 = phi i32 [ %585, %582 ], [ %612, %651 ]
  %p_j_x12.0 = phi double [ %590, %582 ], [ %619, %651 ]
  %p_j_y13.0 = phi double [ %595, %582 ], [ %627, %651 ]
  %p_j_z14.0 = phi double [ %600, %582 ], [ %635, %651 ]
  %atom215.0 = phi i32 [ %605, %582 ], [ %656, %651 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %582 ], [ %exclChecksum.6, %651 ]
  %607 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %607, label %608, label %657

; <label>:608                                     ; preds = %606
  %609 = add nsw i32 %k10.0, 1
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i32* %207, i64 %610
  %612 = load i32* %611, align 4
  %613 = fsub double %303, %p_j_x12.0
  %614 = fmul double %613, %613
  %615 = sext i32 %612 to i64
  %616 = getelementptr inbounds %struct.CompAtom* %36, i64 %615
  %617 = getelementptr inbounds %struct.CompAtom* %616, i32 0, i32 0
  %618 = getelementptr inbounds %class.Vector* %617, i32 0, i32 0
  %619 = load double* %618, align 8
  %620 = fsub double %306, %p_j_y13.0
  %621 = fmul double %620, %620
  %622 = fadd double %614, %621
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 1
  %627 = load double* %626, align 8
  %628 = fsub double %309, %p_j_z14.0
  %629 = fmul double %628, %628
  %630 = fadd double %622, %629
  %631 = sext i32 %612 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %36, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 2
  %635 = load double* %634, align 8
  %636 = fcmp ole double %630, %7
  br i1 %636, label %637, label %651

; <label>:637                                     ; preds = %608
  %638 = fcmp ole double %630, %21
  br i1 %638, label %639, label %642

; <label>:639                                     ; preds = %637
  %640 = add nsw i32 %exclChecksum.4, 1
  %641 = icmp ne i32 %640, 0
  br i1 %641, label %651, label %642

; <label>:642                                     ; preds = %639, %637
  %exclChecksum.5 = phi i32 [ %640, %639 ], [ %exclChecksum.4, %637 ]
  %643 = icmp sge i32 %atom215.0, %293
  br i1 %643, label %644, label %648

; <label>:644                                     ; preds = %642
  %645 = icmp sle i32 %atom215.0, %295
  br i1 %645, label %646, label %648

; <label>:646                                     ; preds = %644
  %647 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %650

; <label>:648                                     ; preds = %644, %642
  %649 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %650

; <label>:650                                     ; preds = %648, %646
  %pli4.4 = phi i32* [ %647, %646 ], [ %pli4.3, %648 ]
  %plin.4 = phi i32* [ %plin.3, %646 ], [ %649, %648 ]
  br label %651

; <label>:651                                     ; preds = %650, %639, %608
  %pli4.5 = phi i32* [ %pli4.3, %639 ], [ %pli4.4, %650 ], [ %pli4.3, %608 ]
  %plin.5 = phi i32* [ %plin.3, %639 ], [ %plin.4, %650 ], [ %plin.3, %608 ]
  %exclChecksum.6 = phi i32 [ %640, %639 ], [ %exclChecksum.5, %650 ], [ %exclChecksum.4, %608 ]
  %652 = sext i32 %612 to i64
  %653 = getelementptr inbounds %struct.CompAtom* %36, i64 %652
  %654 = getelementptr inbounds %struct.CompAtom* %653, i32 0, i32 2
  %655 = load i32* %654, align 4
  %656 = and i32 %655, 4194303
  br label %606

; <label>:657                                     ; preds = %606
  br label %658

; <label>:658                                     ; preds = %657, %580
  %pli4.6 = phi i32* [ %pli4.3, %657 ], [ %221, %580 ]
  %plin.6 = phi i32* [ %plin.3, %657 ], [ %235, %580 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %657 ], [ %exclChecksum.0, %580 ]
  br label %659

; <label>:659                                     ; preds = %658, %579
  %pli4.7 = phi i32* [ %pli4.0, %579 ], [ %pli4.6, %658 ]
  %plin.7 = phi i32* [ %plin.0, %579 ], [ %plin.6, %658 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %579 ], [ %exclChecksum.7, %658 ]
  %660 = ptrtoint i32* %pli4.7 to i64
  %661 = ptrtoint i32* %221 to i64
  %662 = sub i64 %660, %661
  %663 = sdiv exact i64 %662, 4
  %664 = trunc i64 %663 to i32
  %665 = icmp ne i32 %664, 0
  br i1 %665, label %666, label %673

; <label>:666                                     ; preds = %659
  %667 = sub nsw i32 %664, 1
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i32* %221, i64 %668
  %670 = load i32* %669, align 4
  %671 = sext i32 %664 to i64
  %672 = getelementptr inbounds i32* %221, i64 %671
  store i32 %670, i32* %672, align 4
  br label %673

; <label>:673                                     ; preds = %666, %659
  br label %674

; <label>:674                                     ; preds = %696, %673
  %plin.8 = phi i32* [ %plin.7, %673 ], [ %plin.9, %696 ]
  %plix.0 = phi i32* [ %249, %673 ], [ %plix.1, %696 ]
  %plim.0 = phi i32* [ %263, %673 ], [ %plim.1, %696 ]
  %k18.0 = phi i32 [ 0, %673 ], [ %697, %696 ]
  %675 = icmp slt i32 %k18.0, %664
  br i1 %675, label %676, label %698

; <label>:676                                     ; preds = %674
  %677 = sext i32 %k18.0 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds %struct.CompAtom* %36, i64 %680
  %682 = getelementptr inbounds %struct.CompAtom* %681, i32 0, i32 2
  %683 = load i32* %682, align 4
  %684 = and i32 %683, 4194303
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i8* %300, i64 %685
  %687 = load i8* %686, align 1
  %688 = sext i8 %687 to i32
  switch i32 %688, label %695 [
    i32 0, label %689
    i32 1, label %691
    i32 2, label %693
  ]

; <label>:689                                     ; preds = %676
  %690 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %679, i32* %plin.8, align 4
  br label %695

; <label>:691                                     ; preds = %676
  %692 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %679, i32* %plix.0, align 4
  br label %695

; <label>:693                                     ; preds = %676
  %694 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %679, i32* %plim.0, align 4
  br label %695

; <label>:695                                     ; preds = %693, %691, %689, %676
  %plin.9 = phi i32* [ %plin.8, %676 ], [ %plin.8, %693 ], [ %plin.8, %691 ], [ %690, %689 ]
  %plix.1 = phi i32* [ %plix.0, %676 ], [ %plix.0, %693 ], [ %692, %691 ], [ %plix.0, %689 ]
  %plim.1 = phi i32* [ %plim.0, %676 ], [ %694, %693 ], [ %plim.0, %691 ], [ %plim.0, %689 ]
  br label %696

; <label>:696                                     ; preds = %695
  %697 = add nsw i32 %k18.0, 1
  br label %674

; <label>:698                                     ; preds = %674
  %699 = ptrtoint i32* %plix.0 to i64
  %700 = ptrtoint i32* %249 to i64
  %701 = sub i64 %699, %700
  %702 = sdiv exact i64 %701, 4
  %703 = sext i32 %exclChecksum.8 to i64
  %704 = add nsw i64 %703, %702
  %705 = trunc i64 %704 to i32
  %706 = ptrtoint i32* %plim.0 to i64
  %707 = ptrtoint i32* %263 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %705 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plin.8 to i64
  %714 = ptrtoint i32* %235 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = trunc i64 %716 to i32
  br label %718

; <label>:718                                     ; preds = %885, %698
  %k18.1 = phi i32 [ 0, %698 ], [ %886, %885 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %698 ], [ %878, %885 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %698 ], [ %869, %885 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %698 ], [ %867, %885 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %698 ], [ %858, %885 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %698 ], [ %856, %885 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %698 ], [ %854, %885 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %698 ], [ %838, %885 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %698 ], [ %821, %885 ]
  %719 = icmp slt i32 %k18.1, %717
  br i1 %719, label %720, label %887

; <label>:720                                     ; preds = %718
  %721 = sext i32 %k18.1 to i64
  %722 = getelementptr inbounds i32* %235, i64 %721
  %723 = load i32* %722, align 4
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds %struct.CompAtom* %36, i64 %724
  %726 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %727 = getelementptr inbounds %class.Vector* %726, i32 0, i32 0
  %728 = load double* %727, align 8
  %729 = fsub double %303, %728
  %730 = fmul double %729, %729
  %731 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %732 = getelementptr inbounds %class.Vector* %731, i32 0, i32 1
  %733 = load double* %732, align 8
  %734 = fsub double %306, %733
  %735 = fmul double %734, %734
  %736 = fadd double %730, %735
  %737 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %738 = getelementptr inbounds %class.Vector* %737, i32 0, i32 2
  %739 = load double* %738, align 8
  %740 = fsub double %309, %739
  %741 = fmul double %740, %740
  %742 = fadd double %736, %741
  %743 = fptrunc double %742 to float
  %744 = bitcast %union.anon.1* %r2f to float*
  store float %743, float* %744, align 4
  %745 = bitcast %union.anon.1* %r2f to i32*
  %746 = load i32* %745, align 4
  %747 = ashr i32 %746, 17
  %748 = add nsw i32 %747, %24
  %749 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 2
  %750 = load i32* %749, align 4
  %751 = and i32 %750, 4194303
  %752 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %751)
  %753 = zext i16 %752 to i32
  %754 = mul nsw i32 2, %753
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %755
  %757 = mul nsw i32 16, %748
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds double* %14, i64 %758
  %760 = getelementptr inbounds double* %759, i64 0
  %761 = load double* %760, align 8
  %762 = mul nsw i32 16, %748
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds double* %14, i64 %763
  %765 = getelementptr inbounds double* %764, i64 4
  %766 = getelementptr inbounds double* %765, i64 0
  %767 = load double* %766, align 8
  %768 = mul nsw i32 16, %748
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds double* %14, i64 %769
  %771 = getelementptr inbounds double* %770, i64 8
  %772 = getelementptr inbounds double* %771, i64 0
  %773 = load double* %772, align 8
  %774 = bitcast %union.anon.1* %r2f to i32*
  %775 = load i32* %774, align 4
  %776 = and i32 %775, -131072
  store i32 %776, i32* %774, align 4
  %777 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 1
  %778 = load float* %777, align 4
  %779 = fpext float %778 to double
  %780 = fmul double %510, %779
  %781 = bitcast %union.anon.1* %r2f to float*
  %782 = load float* %781, align 4
  %783 = fpext float %782 to double
  %784 = fsub double %742, %783
  %785 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 0
  %786 = load double* %785, align 8
  %787 = fmul double %15, %786
  %788 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 1
  %789 = load double* %788, align 8
  %790 = fmul double %15, %789
  %791 = fmul double %787, %761
  %792 = fmul double %790, %767
  %793 = fsub double %791, %792
  %794 = getelementptr inbounds double* %759, i64 3
  %795 = load double* %794, align 8
  %796 = fmul double %787, %795
  %797 = getelementptr inbounds double* %765, i64 3
  %798 = load double* %797, align 8
  %799 = fmul double %790, %798
  %800 = fsub double %796, %799
  %801 = getelementptr inbounds double* %759, i64 2
  %802 = load double* %801, align 8
  %803 = fmul double %787, %802
  %804 = getelementptr inbounds double* %765, i64 2
  %805 = load double* %804, align 8
  %806 = fmul double %790, %805
  %807 = fsub double %803, %806
  %808 = getelementptr inbounds double* %759, i64 1
  %809 = load double* %808, align 8
  %810 = fmul double %787, %809
  %811 = getelementptr inbounds double* %765, i64 1
  %812 = load double* %811, align 8
  %813 = fmul double %790, %812
  %814 = fsub double %810, %813
  %815 = fmul double %784, %800
  %816 = fadd double %815, %807
  %817 = fmul double %816, %784
  %818 = fadd double %817, %814
  %819 = fmul double %818, %784
  %820 = fadd double %819, %793
  %821 = fadd double %vdwEnergy.1, %820
  %822 = fmul double %773, %780
  %823 = getelementptr inbounds double* %771, i64 3
  %824 = load double* %823, align 8
  %825 = fmul double %780, %824
  %826 = getelementptr inbounds double* %771, i64 2
  %827 = load double* %826, align 8
  %828 = fmul double %780, %827
  %829 = getelementptr inbounds double* %771, i64 1
  %830 = load double* %829, align 8
  %831 = fmul double %780, %830
  %832 = fmul double %784, %825
  %833 = fadd double %832, %828
  %834 = fmul double %833, %784
  %835 = fadd double %834, %831
  %836 = fmul double %835, %784
  %837 = fadd double %836, %822
  %838 = fadd double %electEnergy.1, %837
  %839 = fadd double %825, %800
  %840 = fadd double %828, %807
  %841 = fadd double %831, %814
  %842 = fadd double %822, %793
  %843 = fmul double 3.000000e+00, %784
  %844 = fmul double %843, %839
  %845 = fmul double 2.000000e+00, %840
  %846 = fadd double %844, %845
  %847 = fmul double %846, %784
  %848 = fadd double %847, %841
  %849 = fmul double -2.000000e+00, %848
  %850 = sext i32 %723 to i64
  %851 = getelementptr inbounds %class.Vector* %269, i64 %850
  %852 = fmul double %849, %729
  %853 = fmul double %852, %729
  %854 = fadd double %virial_xx.1, %853
  %855 = fmul double %852, %734
  %856 = fadd double %virial_xy.1, %855
  %857 = fmul double %852, %740
  %858 = fadd double %virial_xz.1, %857
  %859 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %860 = load double* %859, align 8
  %861 = fadd double %860, %852
  store double %861, double* %859, align 8
  %862 = getelementptr inbounds %class.Vector* %851, i32 0, i32 0
  %863 = load double* %862, align 8
  %864 = fsub double %863, %852
  store double %864, double* %862, align 8
  %865 = fmul double %849, %734
  %866 = fmul double %865, %734
  %867 = fadd double %virial_yy.1, %866
  %868 = fmul double %865, %740
  %869 = fadd double %virial_yz.1, %868
  %870 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %871 = load double* %870, align 8
  %872 = fadd double %871, %865
  store double %872, double* %870, align 8
  %873 = getelementptr inbounds %class.Vector* %851, i32 0, i32 1
  %874 = load double* %873, align 8
  %875 = fsub double %874, %865
  store double %875, double* %873, align 8
  %876 = fmul double %849, %740
  %877 = fmul double %876, %740
  %878 = fadd double %virial_zz.1, %877
  %879 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %880 = load double* %879, align 8
  %881 = fadd double %880, %876
  store double %881, double* %879, align 8
  %882 = getelementptr inbounds %class.Vector* %851, i32 0, i32 2
  %883 = load double* %882, align 8
  %884 = fsub double %883, %876
  store double %884, double* %882, align 8
  br label %885

; <label>:885                                     ; preds = %720
  %886 = add nsw i32 %k18.1, 1
  br label %718

; <label>:887                                     ; preds = %718
  %888 = ptrtoint i32* %plim.0 to i64
  %889 = ptrtoint i32* %263 to i64
  %890 = sub i64 %888, %889
  %891 = sdiv exact i64 %890, 4
  %892 = trunc i64 %891 to i32
  br label %893

; <label>:893                                     ; preds = %1063, %887
  %k18.2 = phi i32 [ 0, %887 ], [ %1064, %1063 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %887 ], [ %1056, %1063 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %887 ], [ %1047, %1063 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %887 ], [ %1045, %1063 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %887 ], [ %1036, %1063 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %887 ], [ %1034, %1063 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %887 ], [ %1032, %1063 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %887 ], [ %1016, %1063 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %887 ], [ %997, %1063 ]
  %894 = icmp slt i32 %k18.2, %892
  br i1 %894, label %895, label %1065

; <label>:895                                     ; preds = %893
  %896 = sext i32 %k18.2 to i64
  %897 = getelementptr inbounds i32* %263, i64 %896
  %898 = load i32* %897, align 4
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds %struct.CompAtom* %36, i64 %899
  %901 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 0
  %902 = getelementptr inbounds %class.Vector* %901, i32 0, i32 0
  %903 = load double* %902, align 8
  %904 = fsub double %303, %903
  %905 = fmul double %904, %904
  %906 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 0
  %907 = getelementptr inbounds %class.Vector* %906, i32 0, i32 1
  %908 = load double* %907, align 8
  %909 = fsub double %306, %908
  %910 = fmul double %909, %909
  %911 = fadd double %905, %910
  %912 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 0
  %913 = getelementptr inbounds %class.Vector* %912, i32 0, i32 2
  %914 = load double* %913, align 8
  %915 = fsub double %309, %914
  %916 = fmul double %915, %915
  %917 = fadd double %911, %916
  %918 = fptrunc double %917 to float
  %919 = bitcast %union.anon.2* %r2f29 to float*
  store float %918, float* %919, align 4
  %920 = bitcast %union.anon.2* %r2f29 to i32*
  %921 = load i32* %920, align 4
  %922 = ashr i32 %921, 17
  %923 = add nsw i32 %922, %24
  %924 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 2
  %925 = load i32* %924, align 4
  %926 = and i32 %925, 4194303
  %927 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %926)
  %928 = zext i16 %927 to i32
  %929 = mul nsw i32 2, %928
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %930
  %932 = getelementptr inbounds %"struct.LJTable::TableEntry"* %931, i64 1
  %933 = mul nsw i32 16, %923
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds double* %14, i64 %934
  %936 = getelementptr inbounds double* %935, i64 0
  %937 = load double* %936, align 8
  %938 = mul nsw i32 16, %923
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds double* %14, i64 %939
  %941 = getelementptr inbounds double* %940, i64 4
  %942 = getelementptr inbounds double* %941, i64 0
  %943 = load double* %942, align 8
  %944 = mul nsw i32 16, %923
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds double* %14, i64 %945
  %947 = getelementptr inbounds double* %946, i64 8
  %948 = getelementptr inbounds double* %947, i64 0
  %949 = load double* %948, align 8
  %950 = bitcast %union.anon.2* %r2f29 to i32*
  %951 = load i32* %950, align 4
  %952 = and i32 %951, -131072
  store i32 %952, i32* %950, align 4
  %953 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 1
  %954 = load float* %953, align 4
  %955 = fpext float %954 to double
  %956 = fmul double %510, %955
  %957 = bitcast %union.anon.2* %r2f29 to float*
  %958 = load float* %957, align 4
  %959 = fpext float %958 to double
  %960 = fsub double %917, %959
  %961 = getelementptr inbounds %"struct.LJTable::TableEntry"* %932, i32 0, i32 0
  %962 = load double* %961, align 8
  %963 = fmul double %15, %962
  %964 = getelementptr inbounds %"struct.LJTable::TableEntry"* %932, i32 0, i32 1
  %965 = load double* %964, align 8
  %966 = fmul double %15, %965
  %967 = fmul double %963, %937
  %968 = fmul double %966, %943
  %969 = fsub double %967, %968
  %970 = getelementptr inbounds double* %935, i64 3
  %971 = load double* %970, align 8
  %972 = fmul double %963, %971
  %973 = getelementptr inbounds double* %941, i64 3
  %974 = load double* %973, align 8
  %975 = fmul double %966, %974
  %976 = fsub double %972, %975
  %977 = getelementptr inbounds double* %935, i64 2
  %978 = load double* %977, align 8
  %979 = fmul double %963, %978
  %980 = getelementptr inbounds double* %941, i64 2
  %981 = load double* %980, align 8
  %982 = fmul double %966, %981
  %983 = fsub double %979, %982
  %984 = getelementptr inbounds double* %935, i64 1
  %985 = load double* %984, align 8
  %986 = fmul double %963, %985
  %987 = getelementptr inbounds double* %941, i64 1
  %988 = load double* %987, align 8
  %989 = fmul double %966, %988
  %990 = fsub double %986, %989
  %991 = fmul double %960, %976
  %992 = fadd double %991, %983
  %993 = fmul double %992, %960
  %994 = fadd double %993, %990
  %995 = fmul double %994, %960
  %996 = fadd double %995, %969
  %997 = fadd double %vdwEnergy.2, %996
  %998 = fsub double 1.000000e+00, %17
  %999 = fmul double %998, %956
  %1000 = fmul double %949, %999
  %1001 = getelementptr inbounds double* %947, i64 3
  %1002 = load double* %1001, align 8
  %1003 = fmul double %999, %1002
  %1004 = getelementptr inbounds double* %947, i64 2
  %1005 = load double* %1004, align 8
  %1006 = fmul double %999, %1005
  %1007 = getelementptr inbounds double* %947, i64 1
  %1008 = load double* %1007, align 8
  %1009 = fmul double %999, %1008
  %1010 = fmul double %960, %1003
  %1011 = fadd double %1010, %1006
  %1012 = fmul double %1011, %960
  %1013 = fadd double %1012, %1009
  %1014 = fmul double %1013, %960
  %1015 = fadd double %1014, %1000
  %1016 = fadd double %electEnergy.2, %1015
  %1017 = fadd double %1003, %976
  %1018 = fadd double %1006, %983
  %1019 = fadd double %1009, %990
  %1020 = fadd double %1000, %969
  %1021 = fmul double 3.000000e+00, %960
  %1022 = fmul double %1021, %1017
  %1023 = fmul double 2.000000e+00, %1018
  %1024 = fadd double %1022, %1023
  %1025 = fmul double %1024, %960
  %1026 = fadd double %1025, %1019
  %1027 = fmul double -2.000000e+00, %1026
  %1028 = sext i32 %898 to i64
  %1029 = getelementptr inbounds %class.Vector* %269, i64 %1028
  %1030 = fmul double %1027, %904
  %1031 = fmul double %1030, %904
  %1032 = fadd double %virial_xx.2, %1031
  %1033 = fmul double %1030, %909
  %1034 = fadd double %virial_xy.2, %1033
  %1035 = fmul double %1030, %915
  %1036 = fadd double %virial_xz.2, %1035
  %1037 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1038 = load double* %1037, align 8
  %1039 = fadd double %1038, %1030
  store double %1039, double* %1037, align 8
  %1040 = getelementptr inbounds %class.Vector* %1029, i32 0, i32 0
  %1041 = load double* %1040, align 8
  %1042 = fsub double %1041, %1030
  store double %1042, double* %1040, align 8
  %1043 = fmul double %1027, %909
  %1044 = fmul double %1043, %909
  %1045 = fadd double %virial_yy.2, %1044
  %1046 = fmul double %1043, %915
  %1047 = fadd double %virial_yz.2, %1046
  %1048 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1049 = load double* %1048, align 8
  %1050 = fadd double %1049, %1043
  store double %1050, double* %1048, align 8
  %1051 = getelementptr inbounds %class.Vector* %1029, i32 0, i32 1
  %1052 = load double* %1051, align 8
  %1053 = fsub double %1052, %1043
  store double %1053, double* %1051, align 8
  %1054 = fmul double %1027, %915
  %1055 = fmul double %1054, %915
  %1056 = fadd double %virial_zz.2, %1055
  %1057 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1058 = load double* %1057, align 8
  %1059 = fadd double %1058, %1054
  store double %1059, double* %1057, align 8
  %1060 = getelementptr inbounds %class.Vector* %1029, i32 0, i32 2
  %1061 = load double* %1060, align 8
  %1062 = fsub double %1061, %1054
  store double %1062, double* %1060, align 8
  br label %1063

; <label>:1063                                    ; preds = %895
  %1064 = add nsw i32 %k18.2, 1
  br label %893

; <label>:1065                                    ; preds = %893
  br label %1066

; <label>:1066                                    ; preds = %1065, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1065 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1065 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1065 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1065 ], [ %491, %488 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %339 ], [ %virial_zz.2, %1065 ], [ %virial_zz.0, %488 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %339 ], [ %virial_yz.2, %1065 ], [ %virial_yz.0, %488 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %339 ], [ %virial_yy.2, %1065 ], [ %virial_yy.0, %488 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %339 ], [ %virial_xz.2, %1065 ], [ %virial_xz.0, %488 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %339 ], [ %virial_xy.2, %1065 ], [ %virial_xy.0, %488 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %339 ], [ %virial_xx.2, %1065 ], [ %virial_xx.0, %488 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %339 ], [ %electEnergy.2, %1065 ], [ %electEnergy.0, %488 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %339 ], [ %vdwEnergy.2, %1065 ], [ %vdwEnergy.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %712, %1065 ], [ %exclChecksum.0, %488 ]
  %1067 = add nsw i32 %i.2, 1
  br label %283

; <label>:1068                                    ; preds = %283
  %1069 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1070 = icmp ne i32* %50, %1069
  br i1 %1070, label %1071, label %1076

; <label>:1071                                    ; preds = %1068
  %1072 = icmp eq i32* %50, null
  br i1 %1072, label %1075, label %1073

; <label>:1073                                    ; preds = %1071
  %1074 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1074) #8
  br label %1075

; <label>:1075                                    ; preds = %1073, %1071
  br label %1076

; <label>:1076                                    ; preds = %1075, %1068
  %1077 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1078 = icmp ne i32* %64, %1077
  br i1 %1078, label %1079, label %1084

; <label>:1079                                    ; preds = %1076
  %1080 = icmp eq i32* %64, null
  br i1 %1080, label %1083, label %1081

; <label>:1081                                    ; preds = %1079
  %1082 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1082) #8
  br label %1083

; <label>:1083                                    ; preds = %1081, %1079
  br label %1084

; <label>:1084                                    ; preds = %1083, %1076
  %1085 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1086 = icmp ne i32* %78, %1085
  br i1 %1086, label %1087, label %1092

; <label>:1087                                    ; preds = %1084
  %1088 = icmp eq i32* %78, null
  br i1 %1088, label %1091, label %1089

; <label>:1089                                    ; preds = %1087
  %1090 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1090) #8
  br label %1091

; <label>:1091                                    ; preds = %1089, %1087
  br label %1092

; <label>:1092                                    ; preds = %1091, %1084
  %1093 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1094 = icmp ne i32* %207, %1093
  br i1 %1094, label %1095, label %1100

; <label>:1095                                    ; preds = %1092
  %1096 = icmp eq i32* %207, null
  br i1 %1096, label %1099, label %1097

; <label>:1097                                    ; preds = %1095
  %1098 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1098) #8
  br label %1099

; <label>:1099                                    ; preds = %1097, %1095
  br label %1100

; <label>:1100                                    ; preds = %1099, %1092
  %1101 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1102 = icmp ne i32* %221, %1101
  br i1 %1102, label %1103, label %1108

; <label>:1103                                    ; preds = %1100
  %1104 = icmp eq i32* %221, null
  br i1 %1104, label %1107, label %1105

; <label>:1105                                    ; preds = %1103
  %1106 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1106) #8
  br label %1107

; <label>:1107                                    ; preds = %1105, %1103
  br label %1108

; <label>:1108                                    ; preds = %1107, %1100
  %1109 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1110 = icmp ne i32* %235, %1109
  br i1 %1110, label %1111, label %1116

; <label>:1111                                    ; preds = %1108
  %1112 = icmp eq i32* %235, null
  br i1 %1112, label %1115, label %1113

; <label>:1113                                    ; preds = %1111
  %1114 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1114) #8
  br label %1115

; <label>:1115                                    ; preds = %1113, %1111
  br label %1116

; <label>:1116                                    ; preds = %1115, %1108
  %1117 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1118 = icmp ne i32* %249, %1117
  br i1 %1118, label %1119, label %1124

; <label>:1119                                    ; preds = %1116
  %1120 = icmp eq i32* %249, null
  br i1 %1120, label %1123, label %1121

; <label>:1121                                    ; preds = %1119
  %1122 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1122) #8
  br label %1123

; <label>:1123                                    ; preds = %1121, %1119
  br label %1124

; <label>:1124                                    ; preds = %1123, %1116
  %1125 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1126 = icmp ne i32* %263, %1125
  br i1 %1126, label %1127, label %1132

; <label>:1127                                    ; preds = %1124
  %1128 = icmp eq i32* %263, null
  br i1 %1128, label %1131, label %1129

; <label>:1129                                    ; preds = %1127
  %1130 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1130) #8
  br label %1131

; <label>:1131                                    ; preds = %1129, %1127
  br label %1132

; <label>:1132                                    ; preds = %1131, %1124
  %1133 = sitofp i32 %exclChecksum.0 to double
  %1134 = getelementptr inbounds double* %6, i64 22
  %1135 = load double* %1134, align 8
  %1136 = fadd double %1135, %1133
  store double %1136, double* %1134, align 8
  %1137 = getelementptr inbounds double* %6, i64 2
  %1138 = load double* %1137, align 8
  %1139 = fadd double %1138, %vdwEnergy.0
  store double %1139, double* %1137, align 8
  %1140 = getelementptr inbounds double* %6, i64 0
  %1141 = load double* %1140, align 8
  %1142 = fadd double %1141, %electEnergy.0
  store double %1142, double* %1140, align 8
  %1143 = getelementptr inbounds double* %6, i64 3
  %1144 = load double* %1143, align 8
  %1145 = fadd double %1144, %virial_xx.0
  store double %1145, double* %1143, align 8
  %1146 = getelementptr inbounds double* %6, i64 4
  %1147 = load double* %1146, align 8
  %1148 = fadd double %1147, %virial_xy.0
  store double %1148, double* %1146, align 8
  %1149 = getelementptr inbounds double* %6, i64 5
  %1150 = load double* %1149, align 8
  %1151 = fadd double %1150, %virial_xz.0
  store double %1151, double* %1149, align 8
  %1152 = getelementptr inbounds double* %6, i64 6
  %1153 = load double* %1152, align 8
  %1154 = fadd double %1153, %virial_xy.0
  store double %1154, double* %1152, align 8
  %1155 = getelementptr inbounds double* %6, i64 7
  %1156 = load double* %1155, align 8
  %1157 = fadd double %1156, %virial_yy.0
  store double %1157, double* %1155, align 8
  %1158 = getelementptr inbounds double* %6, i64 8
  %1159 = load double* %1158, align 8
  %1160 = fadd double %1159, %virial_yz.0
  store double %1160, double* %1158, align 8
  %1161 = getelementptr inbounds double* %6, i64 9
  %1162 = load double* %1161, align 8
  %1163 = fadd double %1162, %virial_xz.0
  store double %1163, double* %1161, align 8
  %1164 = getelementptr inbounds double* %6, i64 10
  %1165 = load double* %1164, align 8
  %1166 = fadd double %1165, %virial_yz.0
  store double %1166, double* %1164, align 8
  %1167 = getelementptr inbounds double* %6, i64 11
  %1168 = load double* %1167, align 8
  %1169 = fadd double %1168, %virial_zz.0
  store double %1169, double* %1167, align 8
  br label %1170

; <label>:1170                                    ; preds = %1132, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.21, align 4
  %r2f28 = alloca %union.anon.22, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1195

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1195

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1097, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1097 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1097 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1097 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1097 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1097 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1097 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1098, %1097 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_zz.3, %1097 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yz.3, %1097 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yy.3, %1097 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xz.3, %1097 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xy.3, %1097 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xx.3, %1097 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1097 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1099

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1097

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %533 = load float* %532, align 4
  %534 = fpext float %533 to double
  %535 = fmul double 3.320636e+02, %534
  %536 = fmul double %535, %15
  %537 = fmul double %536, %9
  %538 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %539 = load i32* %538, align 4
  %540 = and i32 %539, 4194303
  %541 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %540)
  %542 = zext i16 %541 to i32
  %543 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %542)
  %544 = icmp ne i32 %531, 0
  br i1 %544, label %545, label %607

; <label>:545                                     ; preds = %529
  br label %546

; <label>:546                                     ; preds = %604, %545
  %pli3.0 = phi i32* [ %202, %545 ], [ %pli3.2, %604 ]
  %plin.0 = phi i32* [ %216, %545 ], [ %plin.2, %604 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %545 ], [ %605, %604 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %545 ], [ %exclChecksum.3, %604 ]
  %547 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %547, label %548, label %606

; <label>:548                                     ; preds = %546
  %549 = sext i32 %k.0 to i64
  %550 = getelementptr inbounds i32* %188, i64 %549
  %551 = load i32* %550, align 4
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtom* %36, i64 %552
  %554 = getelementptr inbounds %struct.CompAtom* %553, i32 0, i32 0
  %555 = getelementptr inbounds %class.Vector* %554, i32 0, i32 0
  %556 = load double* %555, align 8
  %557 = fsub double %287, %556
  %558 = fmul double %557, %557
  %559 = sext i32 %551 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %36, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 1
  %563 = load double* %562, align 8
  %564 = fsub double %290, %563
  %565 = fmul double %564, %564
  %566 = fadd double %558, %565
  %567 = sext i32 %551 to i64
  %568 = getelementptr inbounds %struct.CompAtom* %36, i64 %567
  %569 = getelementptr inbounds %struct.CompAtom* %568, i32 0, i32 0
  %570 = getelementptr inbounds %class.Vector* %569, i32 0, i32 2
  %571 = load double* %570, align 8
  %572 = fsub double %293, %571
  %573 = fmul double %572, %572
  %574 = fadd double %566, %573
  %575 = sext i32 %551 to i64
  %576 = getelementptr inbounds %struct.CompAtom* %36, i64 %575
  %577 = getelementptr inbounds %struct.CompAtom* %576, i32 0, i32 2
  %578 = load i32* %577, align 4
  %579 = lshr i32 %578, 26
  %580 = and i32 %579, 1
  %581 = icmp ne i32 %580, 0
  br i1 %581, label %603, label %582

; <label>:582                                     ; preds = %548
  %583 = fcmp ole double %574, %7
  br i1 %583, label %584, label %603

; <label>:584                                     ; preds = %582
  %585 = fcmp ole double %574, %21
  br i1 %585, label %586, label %589

; <label>:586                                     ; preds = %584
  %587 = add nsw i32 %exclChecksum.1, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %603, label %589

; <label>:589                                     ; preds = %586, %584
  %exclChecksum.2 = phi i32 [ %587, %586 ], [ %exclChecksum.1, %584 ]
  %590 = sext i32 %551 to i64
  %591 = getelementptr inbounds %struct.CompAtom* %36, i64 %590
  %592 = getelementptr inbounds %struct.CompAtom* %591, i32 0, i32 2
  %593 = load i32* %592, align 4
  %594 = and i32 %593, 4194303
  %595 = icmp sge i32 %594, %277
  br i1 %595, label %596, label %600

; <label>:596                                     ; preds = %589
  %597 = icmp sle i32 %594, %279
  br i1 %597, label %598, label %600

; <label>:598                                     ; preds = %596
  %599 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %551, i32* %pli3.0, align 4
  br label %602

; <label>:600                                     ; preds = %596, %589
  %601 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %551, i32* %plin.0, align 4
  br label %602

; <label>:602                                     ; preds = %600, %598
  %pli3.1 = phi i32* [ %599, %598 ], [ %pli3.0, %600 ]
  %plin.1 = phi i32* [ %plin.0, %598 ], [ %601, %600 ]
  br label %603

; <label>:603                                     ; preds = %602, %586, %582, %548
  %pli3.2 = phi i32* [ %pli3.0, %548 ], [ %pli3.0, %586 ], [ %pli3.1, %602 ], [ %pli3.0, %582 ]
  %plin.2 = phi i32* [ %plin.0, %548 ], [ %plin.0, %586 ], [ %plin.1, %602 ], [ %plin.0, %582 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %548 ], [ %587, %586 ], [ %exclChecksum.2, %602 ], [ %exclChecksum.1, %582 ]
  br label %604

; <label>:604                                     ; preds = %603
  %605 = add nsw i32 %k.0, 1
  br label %546

; <label>:606                                     ; preds = %546
  br label %686

; <label>:607                                     ; preds = %529
  %608 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %608, label %609, label %685

; <label>:609                                     ; preds = %607
  %610 = sext i32 %pairlistoffset.1 to i64
  %611 = getelementptr inbounds i32* %188, i64 %610
  %612 = load i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %struct.CompAtom* %36, i64 %613
  %615 = getelementptr inbounds %struct.CompAtom* %614, i32 0, i32 0
  %616 = getelementptr inbounds %class.Vector* %615, i32 0, i32 0
  %617 = load double* %616, align 8
  %618 = sext i32 %612 to i64
  %619 = getelementptr inbounds %struct.CompAtom* %36, i64 %618
  %620 = getelementptr inbounds %struct.CompAtom* %619, i32 0, i32 0
  %621 = getelementptr inbounds %class.Vector* %620, i32 0, i32 1
  %622 = load double* %621, align 8
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 2
  %627 = load double* %626, align 8
  %628 = sext i32 %612 to i64
  %629 = getelementptr inbounds %struct.CompAtom* %36, i64 %628
  %630 = getelementptr inbounds %struct.CompAtom* %629, i32 0, i32 2
  %631 = load i32* %630, align 4
  %632 = and i32 %631, 4194303
  br label %633

; <label>:633                                     ; preds = %678, %609
  %pli3.3 = phi i32* [ %202, %609 ], [ %pli3.5, %678 ]
  %plin.3 = phi i32* [ %216, %609 ], [ %plin.5, %678 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %609 ], [ %636, %678 ]
  %j210.0 = phi i32 [ %612, %609 ], [ %639, %678 ]
  %p_j_x11.0 = phi double [ %617, %609 ], [ %646, %678 ]
  %p_j_y12.0 = phi double [ %622, %609 ], [ %654, %678 ]
  %p_j_z13.0 = phi double [ %627, %609 ], [ %662, %678 ]
  %atom214.0 = phi i32 [ %632, %609 ], [ %683, %678 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %609 ], [ %exclChecksum.6, %678 ]
  %634 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %634, label %635, label %684

; <label>:635                                     ; preds = %633
  %636 = add nsw i32 %k9.0, 1
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i32* %188, i64 %637
  %639 = load i32* %638, align 4
  %640 = fsub double %287, %p_j_x11.0
  %641 = fmul double %640, %640
  %642 = sext i32 %639 to i64
  %643 = getelementptr inbounds %struct.CompAtom* %36, i64 %642
  %644 = getelementptr inbounds %struct.CompAtom* %643, i32 0, i32 0
  %645 = getelementptr inbounds %class.Vector* %644, i32 0, i32 0
  %646 = load double* %645, align 8
  %647 = fsub double %290, %p_j_y12.0
  %648 = fmul double %647, %647
  %649 = fadd double %641, %648
  %650 = sext i32 %639 to i64
  %651 = getelementptr inbounds %struct.CompAtom* %36, i64 %650
  %652 = getelementptr inbounds %struct.CompAtom* %651, i32 0, i32 0
  %653 = getelementptr inbounds %class.Vector* %652, i32 0, i32 1
  %654 = load double* %653, align 8
  %655 = fsub double %293, %p_j_z13.0
  %656 = fmul double %655, %655
  %657 = fadd double %649, %656
  %658 = sext i32 %639 to i64
  %659 = getelementptr inbounds %struct.CompAtom* %36, i64 %658
  %660 = getelementptr inbounds %struct.CompAtom* %659, i32 0, i32 0
  %661 = getelementptr inbounds %class.Vector* %660, i32 0, i32 2
  %662 = load double* %661, align 8
  %663 = fcmp ole double %657, %7
  br i1 %663, label %664, label %678

; <label>:664                                     ; preds = %635
  %665 = fcmp ole double %657, %21
  br i1 %665, label %666, label %669

; <label>:666                                     ; preds = %664
  %667 = add nsw i32 %exclChecksum.4, 1
  %668 = icmp ne i32 %667, 0
  br i1 %668, label %678, label %669

; <label>:669                                     ; preds = %666, %664
  %exclChecksum.5 = phi i32 [ %667, %666 ], [ %exclChecksum.4, %664 ]
  %670 = icmp sge i32 %atom214.0, %277
  br i1 %670, label %671, label %675

; <label>:671                                     ; preds = %669
  %672 = icmp sle i32 %atom214.0, %279
  br i1 %672, label %673, label %675

; <label>:673                                     ; preds = %671
  %674 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %677

; <label>:675                                     ; preds = %671, %669
  %676 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %677

; <label>:677                                     ; preds = %675, %673
  %pli3.4 = phi i32* [ %674, %673 ], [ %pli3.3, %675 ]
  %plin.4 = phi i32* [ %plin.3, %673 ], [ %676, %675 ]
  br label %678

; <label>:678                                     ; preds = %677, %666, %635
  %pli3.5 = phi i32* [ %pli3.3, %666 ], [ %pli3.4, %677 ], [ %pli3.3, %635 ]
  %plin.5 = phi i32* [ %plin.3, %666 ], [ %plin.4, %677 ], [ %plin.3, %635 ]
  %exclChecksum.6 = phi i32 [ %667, %666 ], [ %exclChecksum.5, %677 ], [ %exclChecksum.4, %635 ]
  %679 = sext i32 %639 to i64
  %680 = getelementptr inbounds %struct.CompAtom* %36, i64 %679
  %681 = getelementptr inbounds %struct.CompAtom* %680, i32 0, i32 2
  %682 = load i32* %681, align 4
  %683 = and i32 %682, 4194303
  br label %633

; <label>:684                                     ; preds = %633
  br label %685

; <label>:685                                     ; preds = %684, %607
  %pli3.6 = phi i32* [ %pli3.3, %684 ], [ %202, %607 ]
  %plin.6 = phi i32* [ %plin.3, %684 ], [ %216, %607 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %684 ], [ %exclChecksum.0, %607 ]
  br label %686

; <label>:686                                     ; preds = %685, %606
  %pli3.7 = phi i32* [ %pli3.0, %606 ], [ %pli3.6, %685 ]
  %plin.7 = phi i32* [ %plin.0, %606 ], [ %plin.6, %685 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %606 ], [ %exclChecksum.7, %685 ]
  %687 = ptrtoint i32* %pli3.7 to i64
  %688 = ptrtoint i32* %202 to i64
  %689 = sub i64 %687, %688
  %690 = sdiv exact i64 %689, 4
  %691 = trunc i64 %690 to i32
  %692 = icmp ne i32 %691, 0
  br i1 %692, label %693, label %700

; <label>:693                                     ; preds = %686
  %694 = sub nsw i32 %691, 1
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i32* %202, i64 %695
  %697 = load i32* %696, align 4
  %698 = sext i32 %691 to i64
  %699 = getelementptr inbounds i32* %202, i64 %698
  store i32 %697, i32* %699, align 4
  br label %700

; <label>:700                                     ; preds = %693, %686
  br label %701

; <label>:701                                     ; preds = %712, %700
  %plix.0 = phi i32* [ %230, %700 ], [ %710, %712 ]
  %pln.0 = phi i32* [ %216, %700 ], [ %713, %712 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %700 ], [ %711, %712 ]
  %702 = icmp ult i32* %pln.0, %plin.7
  br i1 %702, label %703, label %706

; <label>:703                                     ; preds = %701
  %704 = load i32* %pln.0, align 4
  %705 = icmp slt i32 %704, %j_hgroup.2
  br label %706

; <label>:706                                     ; preds = %703, %701
  %707 = phi i1 [ false, %701 ], [ %705, %703 ]
  br i1 %707, label %708, label %714

; <label>:708                                     ; preds = %706
  %709 = load i32* %pln.0, align 4
  %710 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %709, i32* %plix.0, align 4
  %711 = add nsw i32 %exclChecksum.9, -1
  br label %712

; <label>:712                                     ; preds = %708
  %713 = getelementptr inbounds i32* %pln.0, i32 1
  br label %701

; <label>:714                                     ; preds = %706
  br label %715

; <label>:715                                     ; preds = %730, %714
  %plix.1 = phi i32* [ %plix.0, %714 ], [ %728, %730 ]
  %k17.0 = phi i32 [ 0, %714 ], [ %731, %730 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %714 ], [ %729, %730 ]
  %716 = icmp slt i32 %k17.0, %691
  br i1 %716, label %717, label %722

; <label>:717                                     ; preds = %715
  %718 = sext i32 %k17.0 to i64
  %719 = getelementptr inbounds i32* %202, i64 %718
  %720 = load i32* %719, align 4
  %721 = icmp slt i32 %720, %j_hgroup.2
  br label %722

; <label>:722                                     ; preds = %717, %715
  %723 = phi i1 [ false, %715 ], [ %721, %717 ]
  br i1 %723, label %724, label %732

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %202, i64 %725
  %727 = load i32* %726, align 4
  %728 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %727, i32* %plix.1, align 4
  %729 = add nsw i32 %exclChecksum.10, -1
  br label %730

; <label>:730                                     ; preds = %724
  %731 = add nsw i32 %k17.0, 1
  br label %715

; <label>:732                                     ; preds = %722
  br label %733

; <label>:733                                     ; preds = %755, %732
  %plin.8 = phi i32* [ %plin.7, %732 ], [ %plin.9, %755 ]
  %plix.2 = phi i32* [ %plix.1, %732 ], [ %plix.3, %755 ]
  %plim.0 = phi i32* [ %244, %732 ], [ %plim.1, %755 ]
  %k17.1 = phi i32 [ %k17.0, %732 ], [ %756, %755 ]
  %734 = icmp slt i32 %k17.1, %691
  br i1 %734, label %735, label %757

; <label>:735                                     ; preds = %733
  %736 = sext i32 %k17.1 to i64
  %737 = getelementptr inbounds i32* %202, i64 %736
  %738 = load i32* %737, align 4
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds %struct.CompAtom* %36, i64 %739
  %741 = getelementptr inbounds %struct.CompAtom* %740, i32 0, i32 2
  %742 = load i32* %741, align 4
  %743 = and i32 %742, 4194303
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8* %284, i64 %744
  %746 = load i8* %745, align 1
  %747 = sext i8 %746 to i32
  switch i32 %747, label %754 [
    i32 0, label %748
    i32 1, label %750
    i32 2, label %752
  ]

; <label>:748                                     ; preds = %735
  %749 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %738, i32* %plin.8, align 4
  br label %754

; <label>:750                                     ; preds = %735
  %751 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %738, i32* %plix.2, align 4
  br label %754

; <label>:752                                     ; preds = %735
  %753 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %738, i32* %plim.0, align 4
  br label %754

; <label>:754                                     ; preds = %752, %750, %748, %735
  %plin.9 = phi i32* [ %plin.8, %735 ], [ %plin.8, %752 ], [ %plin.8, %750 ], [ %749, %748 ]
  %plix.3 = phi i32* [ %plix.2, %735 ], [ %plix.2, %752 ], [ %751, %750 ], [ %plix.2, %748 ]
  %plim.1 = phi i32* [ %plim.0, %735 ], [ %753, %752 ], [ %plim.0, %750 ], [ %plim.0, %748 ]
  br label %755

; <label>:755                                     ; preds = %754
  %756 = add nsw i32 %k17.1, 1
  br label %733

; <label>:757                                     ; preds = %733
  %758 = ptrtoint i32* %plix.2 to i64
  %759 = ptrtoint i32* %230 to i64
  %760 = sub i64 %758, %759
  %761 = sdiv exact i64 %760, 4
  %762 = sext i32 %exclChecksum.10 to i64
  %763 = add nsw i64 %762, %761
  %764 = trunc i64 %763 to i32
  %765 = ptrtoint i32* %plim.0 to i64
  %766 = ptrtoint i32* %244 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %764 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plin.8 to i64
  %773 = ptrtoint i32* %pln.0 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = trunc i64 %775 to i32
  br label %777

; <label>:777                                     ; preds = %930, %757
  %k17.2 = phi i32 [ 0, %757 ], [ %931, %930 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %757 ], [ %923, %930 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %757 ], [ %914, %930 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %757 ], [ %912, %930 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %757 ], [ %903, %930 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %757 ], [ %901, %930 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %757 ], [ %899, %930 ]
  %778 = icmp slt i32 %k17.2, %776
  br i1 %778, label %779, label %932

; <label>:779                                     ; preds = %777
  %780 = sext i32 %k17.2 to i64
  %781 = getelementptr inbounds i32* %pln.0, i64 %780
  %782 = load i32* %781, align 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds %struct.CompAtom* %36, i64 %783
  %785 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %786 = getelementptr inbounds %class.Vector* %785, i32 0, i32 0
  %787 = load double* %786, align 8
  %788 = fsub double %287, %787
  %789 = fmul double %788, %788
  %790 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %791 = getelementptr inbounds %class.Vector* %790, i32 0, i32 1
  %792 = load double* %791, align 8
  %793 = fsub double %290, %792
  %794 = fmul double %793, %793
  %795 = fadd double %789, %794
  %796 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %797 = getelementptr inbounds %class.Vector* %796, i32 0, i32 2
  %798 = load double* %797, align 8
  %799 = fsub double %293, %798
  %800 = fmul double %799, %799
  %801 = fadd double %795, %800
  %802 = fptrunc double %801 to float
  %803 = bitcast %union.anon.21* %r2f to float*
  store float %802, float* %803, align 4
  %804 = bitcast %union.anon.21* %r2f to i32*
  %805 = load i32* %804, align 4
  %806 = ashr i32 %805, 17
  %807 = add nsw i32 %806, %24
  %808 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 2
  %809 = load i32* %808, align 4
  %810 = and i32 %809, 4194303
  %811 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %810)
  %812 = zext i16 %811 to i32
  %813 = mul nsw i32 2, %812
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %814
  %816 = mul nsw i32 16, %807
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds double* %14, i64 %817
  %819 = getelementptr inbounds double* %818, i64 0
  %820 = load double* %819, align 8
  %821 = mul nsw i32 16, %807
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds double* %14, i64 %822
  %824 = getelementptr inbounds double* %823, i64 4
  %825 = getelementptr inbounds double* %824, i64 0
  %826 = load double* %825, align 8
  %827 = mul nsw i32 16, %807
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds double* %14, i64 %828
  %830 = getelementptr inbounds double* %829, i64 8
  %831 = getelementptr inbounds double* %830, i64 0
  %832 = load double* %831, align 8
  %833 = bitcast %union.anon.21* %r2f to i32*
  %834 = load i32* %833, align 4
  %835 = and i32 %834, -131072
  store i32 %835, i32* %833, align 4
  %836 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 1
  %837 = load float* %836, align 4
  %838 = fpext float %837 to double
  %839 = fmul double %537, %838
  %840 = bitcast %union.anon.21* %r2f to float*
  %841 = load float* %840, align 4
  %842 = fpext float %841 to double
  %843 = fsub double %801, %842
  %844 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 0
  %845 = load double* %844, align 8
  %846 = fmul double %15, %845
  %847 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 1
  %848 = load double* %847, align 8
  %849 = fmul double %15, %848
  %850 = fmul double %846, %820
  %851 = fmul double %849, %826
  %852 = fsub double %850, %851
  %853 = getelementptr inbounds double* %818, i64 3
  %854 = load double* %853, align 8
  %855 = fmul double %846, %854
  %856 = getelementptr inbounds double* %824, i64 3
  %857 = load double* %856, align 8
  %858 = fmul double %849, %857
  %859 = fsub double %855, %858
  %860 = getelementptr inbounds double* %818, i64 2
  %861 = load double* %860, align 8
  %862 = fmul double %846, %861
  %863 = getelementptr inbounds double* %824, i64 2
  %864 = load double* %863, align 8
  %865 = fmul double %849, %864
  %866 = fsub double %862, %865
  %867 = getelementptr inbounds double* %818, i64 1
  %868 = load double* %867, align 8
  %869 = fmul double %846, %868
  %870 = getelementptr inbounds double* %824, i64 1
  %871 = load double* %870, align 8
  %872 = fmul double %849, %871
  %873 = fsub double %869, %872
  %874 = fmul double %832, %839
  %875 = getelementptr inbounds double* %830, i64 3
  %876 = load double* %875, align 8
  %877 = fmul double %839, %876
  %878 = getelementptr inbounds double* %830, i64 2
  %879 = load double* %878, align 8
  %880 = fmul double %839, %879
  %881 = getelementptr inbounds double* %830, i64 1
  %882 = load double* %881, align 8
  %883 = fmul double %839, %882
  %884 = fadd double %877, %859
  %885 = fadd double %880, %866
  %886 = fadd double %883, %873
  %887 = fadd double %874, %852
  %888 = fmul double 3.000000e+00, %843
  %889 = fmul double %888, %884
  %890 = fmul double 2.000000e+00, %885
  %891 = fadd double %889, %890
  %892 = fmul double %891, %843
  %893 = fadd double %892, %886
  %894 = fmul double -2.000000e+00, %893
  %895 = sext i32 %782 to i64
  %896 = getelementptr inbounds %class.Vector* %250, i64 %895
  %897 = fmul double %894, %788
  %898 = fmul double %897, %788
  %899 = fadd double %virial_xx.1, %898
  %900 = fmul double %897, %793
  %901 = fadd double %virial_xy.1, %900
  %902 = fmul double %897, %799
  %903 = fadd double %virial_xz.1, %902
  %904 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %905 = load double* %904, align 8
  %906 = fadd double %905, %897
  store double %906, double* %904, align 8
  %907 = getelementptr inbounds %class.Vector* %896, i32 0, i32 0
  %908 = load double* %907, align 8
  %909 = fsub double %908, %897
  store double %909, double* %907, align 8
  %910 = fmul double %894, %793
  %911 = fmul double %910, %793
  %912 = fadd double %virial_yy.1, %911
  %913 = fmul double %910, %799
  %914 = fadd double %virial_yz.1, %913
  %915 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %916 = load double* %915, align 8
  %917 = fadd double %916, %910
  store double %917, double* %915, align 8
  %918 = getelementptr inbounds %class.Vector* %896, i32 0, i32 1
  %919 = load double* %918, align 8
  %920 = fsub double %919, %910
  store double %920, double* %918, align 8
  %921 = fmul double %894, %799
  %922 = fmul double %921, %799
  %923 = fadd double %virial_zz.1, %922
  %924 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %925 = load double* %924, align 8
  %926 = fadd double %925, %921
  store double %926, double* %924, align 8
  %927 = getelementptr inbounds %class.Vector* %896, i32 0, i32 2
  %928 = load double* %927, align 8
  %929 = fsub double %928, %921
  store double %929, double* %927, align 8
  br label %930

; <label>:930                                     ; preds = %779
  %931 = add nsw i32 %k17.2, 1
  br label %777

; <label>:932                                     ; preds = %777
  %933 = ptrtoint i32* %plim.0 to i64
  %934 = ptrtoint i32* %244 to i64
  %935 = sub i64 %933, %934
  %936 = sdiv exact i64 %935, 4
  %937 = trunc i64 %936 to i32
  br label %938

; <label>:938                                     ; preds = %1094, %932
  %k17.3 = phi i32 [ 0, %932 ], [ %1095, %1094 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %932 ], [ %1087, %1094 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %932 ], [ %1078, %1094 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %932 ], [ %1076, %1094 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %932 ], [ %1067, %1094 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %932 ], [ %1065, %1094 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %932 ], [ %1063, %1094 ]
  %939 = icmp slt i32 %k17.3, %937
  br i1 %939, label %940, label %1096

; <label>:940                                     ; preds = %938
  %941 = sext i32 %k17.3 to i64
  %942 = getelementptr inbounds i32* %244, i64 %941
  %943 = load i32* %942, align 4
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds %struct.CompAtom* %36, i64 %944
  %946 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 0
  %947 = getelementptr inbounds %class.Vector* %946, i32 0, i32 0
  %948 = load double* %947, align 8
  %949 = fsub double %287, %948
  %950 = fmul double %949, %949
  %951 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 0
  %952 = getelementptr inbounds %class.Vector* %951, i32 0, i32 1
  %953 = load double* %952, align 8
  %954 = fsub double %290, %953
  %955 = fmul double %954, %954
  %956 = fadd double %950, %955
  %957 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 0
  %958 = getelementptr inbounds %class.Vector* %957, i32 0, i32 2
  %959 = load double* %958, align 8
  %960 = fsub double %293, %959
  %961 = fmul double %960, %960
  %962 = fadd double %956, %961
  %963 = fptrunc double %962 to float
  %964 = bitcast %union.anon.22* %r2f28 to float*
  store float %963, float* %964, align 4
  %965 = bitcast %union.anon.22* %r2f28 to i32*
  %966 = load i32* %965, align 4
  %967 = ashr i32 %966, 17
  %968 = add nsw i32 %967, %24
  %969 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 2
  %970 = load i32* %969, align 4
  %971 = and i32 %970, 4194303
  %972 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %971)
  %973 = zext i16 %972 to i32
  %974 = mul nsw i32 2, %973
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %975
  %977 = getelementptr inbounds %"struct.LJTable::TableEntry"* %976, i64 1
  %978 = mul nsw i32 16, %968
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds double* %14, i64 %979
  %981 = getelementptr inbounds double* %980, i64 0
  %982 = load double* %981, align 8
  %983 = mul nsw i32 16, %968
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds double* %14, i64 %984
  %986 = getelementptr inbounds double* %985, i64 4
  %987 = getelementptr inbounds double* %986, i64 0
  %988 = load double* %987, align 8
  %989 = mul nsw i32 16, %968
  %990 = sext i32 %989 to i64
  %991 = getelementptr inbounds double* %14, i64 %990
  %992 = getelementptr inbounds double* %991, i64 8
  %993 = getelementptr inbounds double* %992, i64 0
  %994 = load double* %993, align 8
  %995 = bitcast %union.anon.22* %r2f28 to i32*
  %996 = load i32* %995, align 4
  %997 = and i32 %996, -131072
  store i32 %997, i32* %995, align 4
  %998 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 1
  %999 = load float* %998, align 4
  %1000 = fpext float %999 to double
  %1001 = fmul double %537, %1000
  %1002 = bitcast %union.anon.22* %r2f28 to float*
  %1003 = load float* %1002, align 4
  %1004 = fpext float %1003 to double
  %1005 = fsub double %962, %1004
  %1006 = getelementptr inbounds %"struct.LJTable::TableEntry"* %977, i32 0, i32 0
  %1007 = load double* %1006, align 8
  %1008 = fmul double %15, %1007
  %1009 = getelementptr inbounds %"struct.LJTable::TableEntry"* %977, i32 0, i32 1
  %1010 = load double* %1009, align 8
  %1011 = fmul double %15, %1010
  %1012 = fmul double %1008, %982
  %1013 = fmul double %1011, %988
  %1014 = fsub double %1012, %1013
  %1015 = getelementptr inbounds double* %980, i64 3
  %1016 = load double* %1015, align 8
  %1017 = fmul double %1008, %1016
  %1018 = getelementptr inbounds double* %986, i64 3
  %1019 = load double* %1018, align 8
  %1020 = fmul double %1011, %1019
  %1021 = fsub double %1017, %1020
  %1022 = getelementptr inbounds double* %980, i64 2
  %1023 = load double* %1022, align 8
  %1024 = fmul double %1008, %1023
  %1025 = getelementptr inbounds double* %986, i64 2
  %1026 = load double* %1025, align 8
  %1027 = fmul double %1011, %1026
  %1028 = fsub double %1024, %1027
  %1029 = getelementptr inbounds double* %980, i64 1
  %1030 = load double* %1029, align 8
  %1031 = fmul double %1008, %1030
  %1032 = getelementptr inbounds double* %986, i64 1
  %1033 = load double* %1032, align 8
  %1034 = fmul double %1011, %1033
  %1035 = fsub double %1031, %1034
  %1036 = fsub double 1.000000e+00, %17
  %1037 = fmul double %1036, %1001
  %1038 = fmul double %994, %1037
  %1039 = getelementptr inbounds double* %992, i64 3
  %1040 = load double* %1039, align 8
  %1041 = fmul double %1037, %1040
  %1042 = getelementptr inbounds double* %992, i64 2
  %1043 = load double* %1042, align 8
  %1044 = fmul double %1037, %1043
  %1045 = getelementptr inbounds double* %992, i64 1
  %1046 = load double* %1045, align 8
  %1047 = fmul double %1037, %1046
  %1048 = fadd double %1041, %1021
  %1049 = fadd double %1044, %1028
  %1050 = fadd double %1047, %1035
  %1051 = fadd double %1038, %1014
  %1052 = fmul double 3.000000e+00, %1005
  %1053 = fmul double %1052, %1048
  %1054 = fmul double 2.000000e+00, %1049
  %1055 = fadd double %1053, %1054
  %1056 = fmul double %1055, %1005
  %1057 = fadd double %1056, %1050
  %1058 = fmul double -2.000000e+00, %1057
  %1059 = sext i32 %943 to i64
  %1060 = getelementptr inbounds %class.Vector* %250, i64 %1059
  %1061 = fmul double %1058, %949
  %1062 = fmul double %1061, %949
  %1063 = fadd double %virial_xx.2, %1062
  %1064 = fmul double %1061, %954
  %1065 = fadd double %virial_xy.2, %1064
  %1066 = fmul double %1061, %960
  %1067 = fadd double %virial_xz.2, %1066
  %1068 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1069 = load double* %1068, align 8
  %1070 = fadd double %1069, %1061
  store double %1070, double* %1068, align 8
  %1071 = getelementptr inbounds %class.Vector* %1060, i32 0, i32 0
  %1072 = load double* %1071, align 8
  %1073 = fsub double %1072, %1061
  store double %1073, double* %1071, align 8
  %1074 = fmul double %1058, %954
  %1075 = fmul double %1074, %954
  %1076 = fadd double %virial_yy.2, %1075
  %1077 = fmul double %1074, %960
  %1078 = fadd double %virial_yz.2, %1077
  %1079 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1080 = load double* %1079, align 8
  %1081 = fadd double %1080, %1074
  store double %1081, double* %1079, align 8
  %1082 = getelementptr inbounds %class.Vector* %1060, i32 0, i32 1
  %1083 = load double* %1082, align 8
  %1084 = fsub double %1083, %1074
  store double %1084, double* %1082, align 8
  %1085 = fmul double %1058, %960
  %1086 = fmul double %1085, %960
  %1087 = fadd double %virial_zz.2, %1086
  %1088 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1089 = load double* %1088, align 8
  %1090 = fadd double %1089, %1085
  store double %1090, double* %1088, align 8
  %1091 = getelementptr inbounds %class.Vector* %1060, i32 0, i32 2
  %1092 = load double* %1091, align 8
  %1093 = fsub double %1092, %1085
  store double %1093, double* %1091, align 8
  br label %1094

; <label>:1094                                    ; preds = %940
  %1095 = add nsw i32 %k17.3, 1
  br label %938

; <label>:1096                                    ; preds = %938
  br label %1097

; <label>:1097                                    ; preds = %1096, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1096 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1096 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1096 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1096 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1096 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1096 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1096 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %329 ], [ %virial_zz.2, %1096 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %329 ], [ %virial_yz.2, %1096 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %329 ], [ %virial_yy.2, %1096 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %329 ], [ %virial_xz.2, %1096 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %329 ], [ %virial_xy.2, %1096 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %329 ], [ %virial_xx.2, %1096 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %771, %1096 ]
  %1098 = add nsw i32 %i.1, 1
  br label %266

; <label>:1099                                    ; preds = %266
  %1100 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1101 = icmp ne i32* %50, %1100
  br i1 %1101, label %1102, label %1107

; <label>:1102                                    ; preds = %1099
  %1103 = icmp eq i32* %50, null
  br i1 %1103, label %1106, label %1104

; <label>:1104                                    ; preds = %1102
  %1105 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1105) #8
  br label %1106

; <label>:1106                                    ; preds = %1104, %1102
  br label %1107

; <label>:1107                                    ; preds = %1106, %1099
  %1108 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1109 = icmp ne i32* %64, %1108
  br i1 %1109, label %1110, label %1115

; <label>:1110                                    ; preds = %1107
  %1111 = icmp eq i32* %64, null
  br i1 %1111, label %1114, label %1112

; <label>:1112                                    ; preds = %1110
  %1113 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1113) #8
  br label %1114

; <label>:1114                                    ; preds = %1112, %1110
  br label %1115

; <label>:1115                                    ; preds = %1114, %1107
  %1116 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1117 = icmp ne i32* %78, %1116
  br i1 %1117, label %1118, label %1123

; <label>:1118                                    ; preds = %1115
  %1119 = icmp eq i32* %78, null
  br i1 %1119, label %1122, label %1120

; <label>:1120                                    ; preds = %1118
  %1121 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1121) #8
  br label %1122

; <label>:1122                                    ; preds = %1120, %1118
  br label %1123

; <label>:1123                                    ; preds = %1122, %1115
  %1124 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1125 = icmp ne i32* %188, %1124
  br i1 %1125, label %1126, label %1131

; <label>:1126                                    ; preds = %1123
  %1127 = icmp eq i32* %188, null
  br i1 %1127, label %1130, label %1128

; <label>:1128                                    ; preds = %1126
  %1129 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1129) #8
  br label %1130

; <label>:1130                                    ; preds = %1128, %1126
  br label %1131

; <label>:1131                                    ; preds = %1130, %1123
  %1132 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1133 = icmp ne i32* %202, %1132
  br i1 %1133, label %1134, label %1139

; <label>:1134                                    ; preds = %1131
  %1135 = icmp eq i32* %202, null
  br i1 %1135, label %1138, label %1136

; <label>:1136                                    ; preds = %1134
  %1137 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1137) #8
  br label %1138

; <label>:1138                                    ; preds = %1136, %1134
  br label %1139

; <label>:1139                                    ; preds = %1138, %1131
  %1140 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1141 = icmp ne i32* %216, %1140
  br i1 %1141, label %1142, label %1147

; <label>:1142                                    ; preds = %1139
  %1143 = icmp eq i32* %216, null
  br i1 %1143, label %1146, label %1144

; <label>:1144                                    ; preds = %1142
  %1145 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1145) #8
  br label %1146

; <label>:1146                                    ; preds = %1144, %1142
  br label %1147

; <label>:1147                                    ; preds = %1146, %1139
  %1148 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1149 = icmp ne i32* %230, %1148
  br i1 %1149, label %1150, label %1155

; <label>:1150                                    ; preds = %1147
  %1151 = icmp eq i32* %230, null
  br i1 %1151, label %1154, label %1152

; <label>:1152                                    ; preds = %1150
  %1153 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1153) #8
  br label %1154

; <label>:1154                                    ; preds = %1152, %1150
  br label %1155

; <label>:1155                                    ; preds = %1154, %1147
  %1156 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1157 = icmp ne i32* %244, %1156
  br i1 %1157, label %1158, label %1163

; <label>:1158                                    ; preds = %1155
  %1159 = icmp eq i32* %244, null
  br i1 %1159, label %1162, label %1160

; <label>:1160                                    ; preds = %1158
  %1161 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1161) #8
  br label %1162

; <label>:1162                                    ; preds = %1160, %1158
  br label %1163

; <label>:1163                                    ; preds = %1162, %1155
  %1164 = sitofp i32 %exclChecksum.0 to double
  %1165 = getelementptr inbounds double* %6, i64 22
  %1166 = load double* %1165, align 8
  %1167 = fadd double %1166, %1164
  store double %1167, double* %1165, align 8
  %1168 = getelementptr inbounds double* %6, i64 3
  %1169 = load double* %1168, align 8
  %1170 = fadd double %1169, %virial_xx.0
  store double %1170, double* %1168, align 8
  %1171 = getelementptr inbounds double* %6, i64 4
  %1172 = load double* %1171, align 8
  %1173 = fadd double %1172, %virial_xy.0
  store double %1173, double* %1171, align 8
  %1174 = getelementptr inbounds double* %6, i64 5
  %1175 = load double* %1174, align 8
  %1176 = fadd double %1175, %virial_xz.0
  store double %1176, double* %1174, align 8
  %1177 = getelementptr inbounds double* %6, i64 6
  %1178 = load double* %1177, align 8
  %1179 = fadd double %1178, %virial_xy.0
  store double %1179, double* %1177, align 8
  %1180 = getelementptr inbounds double* %6, i64 7
  %1181 = load double* %1180, align 8
  %1182 = fadd double %1181, %virial_yy.0
  store double %1182, double* %1180, align 8
  %1183 = getelementptr inbounds double* %6, i64 8
  %1184 = load double* %1183, align 8
  %1185 = fadd double %1184, %virial_yz.0
  store double %1185, double* %1183, align 8
  %1186 = getelementptr inbounds double* %6, i64 9
  %1187 = load double* %1186, align 8
  %1188 = fadd double %1187, %virial_xz.0
  store double %1188, double* %1186, align 8
  %1189 = getelementptr inbounds double* %6, i64 10
  %1190 = load double* %1189, align 8
  %1191 = fadd double %1190, %virial_yz.0
  store double %1191, double* %1189, align 8
  %1192 = getelementptr inbounds double* %6, i64 11
  %1193 = load double* %1192, align 8
  %1194 = fadd double %1193, %virial_zz.0
  store double %1194, double* %1192, align 8
  br label %1195

; <label>:1195                                    ; preds = %1163, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil16calc_self_energyEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.23, align 4
  %r2f28 = alloca %union.anon.24, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1229

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1229

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1125, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1125 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1125 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1125 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1125 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1125 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1125 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1126, %1125 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_zz.3, %1125 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yz.3, %1125 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_yy.3, %1125 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xz.3, %1125 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xy.3, %1125 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %virial_xx.3, %1125 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %electEnergy.3, %1125 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy.3, %1125 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1125 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1127

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1125

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %533 = load float* %532, align 4
  %534 = fpext float %533 to double
  %535 = fmul double 3.320636e+02, %534
  %536 = fmul double %535, %15
  %537 = fmul double %536, %9
  %538 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %539 = load i32* %538, align 4
  %540 = and i32 %539, 4194303
  %541 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %540)
  %542 = zext i16 %541 to i32
  %543 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %542)
  %544 = icmp ne i32 %531, 0
  br i1 %544, label %545, label %607

; <label>:545                                     ; preds = %529
  br label %546

; <label>:546                                     ; preds = %604, %545
  %pli3.0 = phi i32* [ %202, %545 ], [ %pli3.2, %604 ]
  %plin.0 = phi i32* [ %216, %545 ], [ %plin.2, %604 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %545 ], [ %605, %604 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %545 ], [ %exclChecksum.3, %604 ]
  %547 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %547, label %548, label %606

; <label>:548                                     ; preds = %546
  %549 = sext i32 %k.0 to i64
  %550 = getelementptr inbounds i32* %188, i64 %549
  %551 = load i32* %550, align 4
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtom* %36, i64 %552
  %554 = getelementptr inbounds %struct.CompAtom* %553, i32 0, i32 0
  %555 = getelementptr inbounds %class.Vector* %554, i32 0, i32 0
  %556 = load double* %555, align 8
  %557 = fsub double %287, %556
  %558 = fmul double %557, %557
  %559 = sext i32 %551 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %36, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 1
  %563 = load double* %562, align 8
  %564 = fsub double %290, %563
  %565 = fmul double %564, %564
  %566 = fadd double %558, %565
  %567 = sext i32 %551 to i64
  %568 = getelementptr inbounds %struct.CompAtom* %36, i64 %567
  %569 = getelementptr inbounds %struct.CompAtom* %568, i32 0, i32 0
  %570 = getelementptr inbounds %class.Vector* %569, i32 0, i32 2
  %571 = load double* %570, align 8
  %572 = fsub double %293, %571
  %573 = fmul double %572, %572
  %574 = fadd double %566, %573
  %575 = sext i32 %551 to i64
  %576 = getelementptr inbounds %struct.CompAtom* %36, i64 %575
  %577 = getelementptr inbounds %struct.CompAtom* %576, i32 0, i32 2
  %578 = load i32* %577, align 4
  %579 = lshr i32 %578, 26
  %580 = and i32 %579, 1
  %581 = icmp ne i32 %580, 0
  br i1 %581, label %603, label %582

; <label>:582                                     ; preds = %548
  %583 = fcmp ole double %574, %7
  br i1 %583, label %584, label %603

; <label>:584                                     ; preds = %582
  %585 = fcmp ole double %574, %21
  br i1 %585, label %586, label %589

; <label>:586                                     ; preds = %584
  %587 = add nsw i32 %exclChecksum.1, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %603, label %589

; <label>:589                                     ; preds = %586, %584
  %exclChecksum.2 = phi i32 [ %587, %586 ], [ %exclChecksum.1, %584 ]
  %590 = sext i32 %551 to i64
  %591 = getelementptr inbounds %struct.CompAtom* %36, i64 %590
  %592 = getelementptr inbounds %struct.CompAtom* %591, i32 0, i32 2
  %593 = load i32* %592, align 4
  %594 = and i32 %593, 4194303
  %595 = icmp sge i32 %594, %277
  br i1 %595, label %596, label %600

; <label>:596                                     ; preds = %589
  %597 = icmp sle i32 %594, %279
  br i1 %597, label %598, label %600

; <label>:598                                     ; preds = %596
  %599 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %551, i32* %pli3.0, align 4
  br label %602

; <label>:600                                     ; preds = %596, %589
  %601 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %551, i32* %plin.0, align 4
  br label %602

; <label>:602                                     ; preds = %600, %598
  %pli3.1 = phi i32* [ %599, %598 ], [ %pli3.0, %600 ]
  %plin.1 = phi i32* [ %plin.0, %598 ], [ %601, %600 ]
  br label %603

; <label>:603                                     ; preds = %602, %586, %582, %548
  %pli3.2 = phi i32* [ %pli3.0, %548 ], [ %pli3.0, %586 ], [ %pli3.1, %602 ], [ %pli3.0, %582 ]
  %plin.2 = phi i32* [ %plin.0, %548 ], [ %plin.0, %586 ], [ %plin.1, %602 ], [ %plin.0, %582 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %548 ], [ %587, %586 ], [ %exclChecksum.2, %602 ], [ %exclChecksum.1, %582 ]
  br label %604

; <label>:604                                     ; preds = %603
  %605 = add nsw i32 %k.0, 1
  br label %546

; <label>:606                                     ; preds = %546
  br label %686

; <label>:607                                     ; preds = %529
  %608 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %608, label %609, label %685

; <label>:609                                     ; preds = %607
  %610 = sext i32 %pairlistoffset.1 to i64
  %611 = getelementptr inbounds i32* %188, i64 %610
  %612 = load i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %struct.CompAtom* %36, i64 %613
  %615 = getelementptr inbounds %struct.CompAtom* %614, i32 0, i32 0
  %616 = getelementptr inbounds %class.Vector* %615, i32 0, i32 0
  %617 = load double* %616, align 8
  %618 = sext i32 %612 to i64
  %619 = getelementptr inbounds %struct.CompAtom* %36, i64 %618
  %620 = getelementptr inbounds %struct.CompAtom* %619, i32 0, i32 0
  %621 = getelementptr inbounds %class.Vector* %620, i32 0, i32 1
  %622 = load double* %621, align 8
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 2
  %627 = load double* %626, align 8
  %628 = sext i32 %612 to i64
  %629 = getelementptr inbounds %struct.CompAtom* %36, i64 %628
  %630 = getelementptr inbounds %struct.CompAtom* %629, i32 0, i32 2
  %631 = load i32* %630, align 4
  %632 = and i32 %631, 4194303
  br label %633

; <label>:633                                     ; preds = %678, %609
  %pli3.3 = phi i32* [ %202, %609 ], [ %pli3.5, %678 ]
  %plin.3 = phi i32* [ %216, %609 ], [ %plin.5, %678 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %609 ], [ %636, %678 ]
  %j210.0 = phi i32 [ %612, %609 ], [ %639, %678 ]
  %p_j_x11.0 = phi double [ %617, %609 ], [ %646, %678 ]
  %p_j_y12.0 = phi double [ %622, %609 ], [ %654, %678 ]
  %p_j_z13.0 = phi double [ %627, %609 ], [ %662, %678 ]
  %atom214.0 = phi i32 [ %632, %609 ], [ %683, %678 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %609 ], [ %exclChecksum.6, %678 ]
  %634 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %634, label %635, label %684

; <label>:635                                     ; preds = %633
  %636 = add nsw i32 %k9.0, 1
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i32* %188, i64 %637
  %639 = load i32* %638, align 4
  %640 = fsub double %287, %p_j_x11.0
  %641 = fmul double %640, %640
  %642 = sext i32 %639 to i64
  %643 = getelementptr inbounds %struct.CompAtom* %36, i64 %642
  %644 = getelementptr inbounds %struct.CompAtom* %643, i32 0, i32 0
  %645 = getelementptr inbounds %class.Vector* %644, i32 0, i32 0
  %646 = load double* %645, align 8
  %647 = fsub double %290, %p_j_y12.0
  %648 = fmul double %647, %647
  %649 = fadd double %641, %648
  %650 = sext i32 %639 to i64
  %651 = getelementptr inbounds %struct.CompAtom* %36, i64 %650
  %652 = getelementptr inbounds %struct.CompAtom* %651, i32 0, i32 0
  %653 = getelementptr inbounds %class.Vector* %652, i32 0, i32 1
  %654 = load double* %653, align 8
  %655 = fsub double %293, %p_j_z13.0
  %656 = fmul double %655, %655
  %657 = fadd double %649, %656
  %658 = sext i32 %639 to i64
  %659 = getelementptr inbounds %struct.CompAtom* %36, i64 %658
  %660 = getelementptr inbounds %struct.CompAtom* %659, i32 0, i32 0
  %661 = getelementptr inbounds %class.Vector* %660, i32 0, i32 2
  %662 = load double* %661, align 8
  %663 = fcmp ole double %657, %7
  br i1 %663, label %664, label %678

; <label>:664                                     ; preds = %635
  %665 = fcmp ole double %657, %21
  br i1 %665, label %666, label %669

; <label>:666                                     ; preds = %664
  %667 = add nsw i32 %exclChecksum.4, 1
  %668 = icmp ne i32 %667, 0
  br i1 %668, label %678, label %669

; <label>:669                                     ; preds = %666, %664
  %exclChecksum.5 = phi i32 [ %667, %666 ], [ %exclChecksum.4, %664 ]
  %670 = icmp sge i32 %atom214.0, %277
  br i1 %670, label %671, label %675

; <label>:671                                     ; preds = %669
  %672 = icmp sle i32 %atom214.0, %279
  br i1 %672, label %673, label %675

; <label>:673                                     ; preds = %671
  %674 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %677

; <label>:675                                     ; preds = %671, %669
  %676 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %677

; <label>:677                                     ; preds = %675, %673
  %pli3.4 = phi i32* [ %674, %673 ], [ %pli3.3, %675 ]
  %plin.4 = phi i32* [ %plin.3, %673 ], [ %676, %675 ]
  br label %678

; <label>:678                                     ; preds = %677, %666, %635
  %pli3.5 = phi i32* [ %pli3.3, %666 ], [ %pli3.4, %677 ], [ %pli3.3, %635 ]
  %plin.5 = phi i32* [ %plin.3, %666 ], [ %plin.4, %677 ], [ %plin.3, %635 ]
  %exclChecksum.6 = phi i32 [ %667, %666 ], [ %exclChecksum.5, %677 ], [ %exclChecksum.4, %635 ]
  %679 = sext i32 %639 to i64
  %680 = getelementptr inbounds %struct.CompAtom* %36, i64 %679
  %681 = getelementptr inbounds %struct.CompAtom* %680, i32 0, i32 2
  %682 = load i32* %681, align 4
  %683 = and i32 %682, 4194303
  br label %633

; <label>:684                                     ; preds = %633
  br label %685

; <label>:685                                     ; preds = %684, %607
  %pli3.6 = phi i32* [ %pli3.3, %684 ], [ %202, %607 ]
  %plin.6 = phi i32* [ %plin.3, %684 ], [ %216, %607 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %684 ], [ %exclChecksum.0, %607 ]
  br label %686

; <label>:686                                     ; preds = %685, %606
  %pli3.7 = phi i32* [ %pli3.0, %606 ], [ %pli3.6, %685 ]
  %plin.7 = phi i32* [ %plin.0, %606 ], [ %plin.6, %685 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %606 ], [ %exclChecksum.7, %685 ]
  %687 = ptrtoint i32* %pli3.7 to i64
  %688 = ptrtoint i32* %202 to i64
  %689 = sub i64 %687, %688
  %690 = sdiv exact i64 %689, 4
  %691 = trunc i64 %690 to i32
  %692 = icmp ne i32 %691, 0
  br i1 %692, label %693, label %700

; <label>:693                                     ; preds = %686
  %694 = sub nsw i32 %691, 1
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i32* %202, i64 %695
  %697 = load i32* %696, align 4
  %698 = sext i32 %691 to i64
  %699 = getelementptr inbounds i32* %202, i64 %698
  store i32 %697, i32* %699, align 4
  br label %700

; <label>:700                                     ; preds = %693, %686
  br label %701

; <label>:701                                     ; preds = %712, %700
  %plix.0 = phi i32* [ %230, %700 ], [ %710, %712 ]
  %pln.0 = phi i32* [ %216, %700 ], [ %713, %712 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %700 ], [ %711, %712 ]
  %702 = icmp ult i32* %pln.0, %plin.7
  br i1 %702, label %703, label %706

; <label>:703                                     ; preds = %701
  %704 = load i32* %pln.0, align 4
  %705 = icmp slt i32 %704, %j_hgroup.2
  br label %706

; <label>:706                                     ; preds = %703, %701
  %707 = phi i1 [ false, %701 ], [ %705, %703 ]
  br i1 %707, label %708, label %714

; <label>:708                                     ; preds = %706
  %709 = load i32* %pln.0, align 4
  %710 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %709, i32* %plix.0, align 4
  %711 = add nsw i32 %exclChecksum.9, -1
  br label %712

; <label>:712                                     ; preds = %708
  %713 = getelementptr inbounds i32* %pln.0, i32 1
  br label %701

; <label>:714                                     ; preds = %706
  br label %715

; <label>:715                                     ; preds = %730, %714
  %plix.1 = phi i32* [ %plix.0, %714 ], [ %728, %730 ]
  %k17.0 = phi i32 [ 0, %714 ], [ %731, %730 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %714 ], [ %729, %730 ]
  %716 = icmp slt i32 %k17.0, %691
  br i1 %716, label %717, label %722

; <label>:717                                     ; preds = %715
  %718 = sext i32 %k17.0 to i64
  %719 = getelementptr inbounds i32* %202, i64 %718
  %720 = load i32* %719, align 4
  %721 = icmp slt i32 %720, %j_hgroup.2
  br label %722

; <label>:722                                     ; preds = %717, %715
  %723 = phi i1 [ false, %715 ], [ %721, %717 ]
  br i1 %723, label %724, label %732

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %202, i64 %725
  %727 = load i32* %726, align 4
  %728 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %727, i32* %plix.1, align 4
  %729 = add nsw i32 %exclChecksum.10, -1
  br label %730

; <label>:730                                     ; preds = %724
  %731 = add nsw i32 %k17.0, 1
  br label %715

; <label>:732                                     ; preds = %722
  br label %733

; <label>:733                                     ; preds = %755, %732
  %plin.8 = phi i32* [ %plin.7, %732 ], [ %plin.9, %755 ]
  %plix.2 = phi i32* [ %plix.1, %732 ], [ %plix.3, %755 ]
  %plim.0 = phi i32* [ %244, %732 ], [ %plim.1, %755 ]
  %k17.1 = phi i32 [ %k17.0, %732 ], [ %756, %755 ]
  %734 = icmp slt i32 %k17.1, %691
  br i1 %734, label %735, label %757

; <label>:735                                     ; preds = %733
  %736 = sext i32 %k17.1 to i64
  %737 = getelementptr inbounds i32* %202, i64 %736
  %738 = load i32* %737, align 4
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds %struct.CompAtom* %36, i64 %739
  %741 = getelementptr inbounds %struct.CompAtom* %740, i32 0, i32 2
  %742 = load i32* %741, align 4
  %743 = and i32 %742, 4194303
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8* %284, i64 %744
  %746 = load i8* %745, align 1
  %747 = sext i8 %746 to i32
  switch i32 %747, label %754 [
    i32 0, label %748
    i32 1, label %750
    i32 2, label %752
  ]

; <label>:748                                     ; preds = %735
  %749 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %738, i32* %plin.8, align 4
  br label %754

; <label>:750                                     ; preds = %735
  %751 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %738, i32* %plix.2, align 4
  br label %754

; <label>:752                                     ; preds = %735
  %753 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %738, i32* %plim.0, align 4
  br label %754

; <label>:754                                     ; preds = %752, %750, %748, %735
  %plin.9 = phi i32* [ %plin.8, %735 ], [ %plin.8, %752 ], [ %plin.8, %750 ], [ %749, %748 ]
  %plix.3 = phi i32* [ %plix.2, %735 ], [ %plix.2, %752 ], [ %751, %750 ], [ %plix.2, %748 ]
  %plim.1 = phi i32* [ %plim.0, %735 ], [ %753, %752 ], [ %plim.0, %750 ], [ %plim.0, %748 ]
  br label %755

; <label>:755                                     ; preds = %754
  %756 = add nsw i32 %k17.1, 1
  br label %733

; <label>:757                                     ; preds = %733
  %758 = ptrtoint i32* %plix.2 to i64
  %759 = ptrtoint i32* %230 to i64
  %760 = sub i64 %758, %759
  %761 = sdiv exact i64 %760, 4
  %762 = sext i32 %exclChecksum.10 to i64
  %763 = add nsw i64 %762, %761
  %764 = trunc i64 %763 to i32
  %765 = ptrtoint i32* %plim.0 to i64
  %766 = ptrtoint i32* %244 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %764 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plin.8 to i64
  %773 = ptrtoint i32* %pln.0 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = trunc i64 %775 to i32
  br label %777

; <label>:777                                     ; preds = %944, %757
  %k17.2 = phi i32 [ 0, %757 ], [ %945, %944 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %757 ], [ %937, %944 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %757 ], [ %928, %944 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %757 ], [ %926, %944 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %757 ], [ %917, %944 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %757 ], [ %915, %944 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %757 ], [ %913, %944 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %757 ], [ %897, %944 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %757 ], [ %880, %944 ]
  %778 = icmp slt i32 %k17.2, %776
  br i1 %778, label %779, label %946

; <label>:779                                     ; preds = %777
  %780 = sext i32 %k17.2 to i64
  %781 = getelementptr inbounds i32* %pln.0, i64 %780
  %782 = load i32* %781, align 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds %struct.CompAtom* %36, i64 %783
  %785 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %786 = getelementptr inbounds %class.Vector* %785, i32 0, i32 0
  %787 = load double* %786, align 8
  %788 = fsub double %287, %787
  %789 = fmul double %788, %788
  %790 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %791 = getelementptr inbounds %class.Vector* %790, i32 0, i32 1
  %792 = load double* %791, align 8
  %793 = fsub double %290, %792
  %794 = fmul double %793, %793
  %795 = fadd double %789, %794
  %796 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %797 = getelementptr inbounds %class.Vector* %796, i32 0, i32 2
  %798 = load double* %797, align 8
  %799 = fsub double %293, %798
  %800 = fmul double %799, %799
  %801 = fadd double %795, %800
  %802 = fptrunc double %801 to float
  %803 = bitcast %union.anon.23* %r2f to float*
  store float %802, float* %803, align 4
  %804 = bitcast %union.anon.23* %r2f to i32*
  %805 = load i32* %804, align 4
  %806 = ashr i32 %805, 17
  %807 = add nsw i32 %806, %24
  %808 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 2
  %809 = load i32* %808, align 4
  %810 = and i32 %809, 4194303
  %811 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %810)
  %812 = zext i16 %811 to i32
  %813 = mul nsw i32 2, %812
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %814
  %816 = mul nsw i32 16, %807
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds double* %14, i64 %817
  %819 = getelementptr inbounds double* %818, i64 0
  %820 = load double* %819, align 8
  %821 = mul nsw i32 16, %807
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds double* %14, i64 %822
  %824 = getelementptr inbounds double* %823, i64 4
  %825 = getelementptr inbounds double* %824, i64 0
  %826 = load double* %825, align 8
  %827 = mul nsw i32 16, %807
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds double* %14, i64 %828
  %830 = getelementptr inbounds double* %829, i64 8
  %831 = getelementptr inbounds double* %830, i64 0
  %832 = load double* %831, align 8
  %833 = bitcast %union.anon.23* %r2f to i32*
  %834 = load i32* %833, align 4
  %835 = and i32 %834, -131072
  store i32 %835, i32* %833, align 4
  %836 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 1
  %837 = load float* %836, align 4
  %838 = fpext float %837 to double
  %839 = fmul double %537, %838
  %840 = bitcast %union.anon.23* %r2f to float*
  %841 = load float* %840, align 4
  %842 = fpext float %841 to double
  %843 = fsub double %801, %842
  %844 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 0
  %845 = load double* %844, align 8
  %846 = fmul double %15, %845
  %847 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 1
  %848 = load double* %847, align 8
  %849 = fmul double %15, %848
  %850 = fmul double %846, %820
  %851 = fmul double %849, %826
  %852 = fsub double %850, %851
  %853 = getelementptr inbounds double* %818, i64 3
  %854 = load double* %853, align 8
  %855 = fmul double %846, %854
  %856 = getelementptr inbounds double* %824, i64 3
  %857 = load double* %856, align 8
  %858 = fmul double %849, %857
  %859 = fsub double %855, %858
  %860 = getelementptr inbounds double* %818, i64 2
  %861 = load double* %860, align 8
  %862 = fmul double %846, %861
  %863 = getelementptr inbounds double* %824, i64 2
  %864 = load double* %863, align 8
  %865 = fmul double %849, %864
  %866 = fsub double %862, %865
  %867 = getelementptr inbounds double* %818, i64 1
  %868 = load double* %867, align 8
  %869 = fmul double %846, %868
  %870 = getelementptr inbounds double* %824, i64 1
  %871 = load double* %870, align 8
  %872 = fmul double %849, %871
  %873 = fsub double %869, %872
  %874 = fmul double %843, %859
  %875 = fadd double %874, %866
  %876 = fmul double %875, %843
  %877 = fadd double %876, %873
  %878 = fmul double %877, %843
  %879 = fadd double %878, %852
  %880 = fadd double %vdwEnergy.1, %879
  %881 = fmul double %832, %839
  %882 = getelementptr inbounds double* %830, i64 3
  %883 = load double* %882, align 8
  %884 = fmul double %839, %883
  %885 = getelementptr inbounds double* %830, i64 2
  %886 = load double* %885, align 8
  %887 = fmul double %839, %886
  %888 = getelementptr inbounds double* %830, i64 1
  %889 = load double* %888, align 8
  %890 = fmul double %839, %889
  %891 = fmul double %843, %884
  %892 = fadd double %891, %887
  %893 = fmul double %892, %843
  %894 = fadd double %893, %890
  %895 = fmul double %894, %843
  %896 = fadd double %895, %881
  %897 = fadd double %electEnergy.1, %896
  %898 = fadd double %884, %859
  %899 = fadd double %887, %866
  %900 = fadd double %890, %873
  %901 = fadd double %881, %852
  %902 = fmul double 3.000000e+00, %843
  %903 = fmul double %902, %898
  %904 = fmul double 2.000000e+00, %899
  %905 = fadd double %903, %904
  %906 = fmul double %905, %843
  %907 = fadd double %906, %900
  %908 = fmul double -2.000000e+00, %907
  %909 = sext i32 %782 to i64
  %910 = getelementptr inbounds %class.Vector* %250, i64 %909
  %911 = fmul double %908, %788
  %912 = fmul double %911, %788
  %913 = fadd double %virial_xx.1, %912
  %914 = fmul double %911, %793
  %915 = fadd double %virial_xy.1, %914
  %916 = fmul double %911, %799
  %917 = fadd double %virial_xz.1, %916
  %918 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %919 = load double* %918, align 8
  %920 = fadd double %919, %911
  store double %920, double* %918, align 8
  %921 = getelementptr inbounds %class.Vector* %910, i32 0, i32 0
  %922 = load double* %921, align 8
  %923 = fsub double %922, %911
  store double %923, double* %921, align 8
  %924 = fmul double %908, %793
  %925 = fmul double %924, %793
  %926 = fadd double %virial_yy.1, %925
  %927 = fmul double %924, %799
  %928 = fadd double %virial_yz.1, %927
  %929 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %930 = load double* %929, align 8
  %931 = fadd double %930, %924
  store double %931, double* %929, align 8
  %932 = getelementptr inbounds %class.Vector* %910, i32 0, i32 1
  %933 = load double* %932, align 8
  %934 = fsub double %933, %924
  store double %934, double* %932, align 8
  %935 = fmul double %908, %799
  %936 = fmul double %935, %799
  %937 = fadd double %virial_zz.1, %936
  %938 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %939 = load double* %938, align 8
  %940 = fadd double %939, %935
  store double %940, double* %938, align 8
  %941 = getelementptr inbounds %class.Vector* %910, i32 0, i32 2
  %942 = load double* %941, align 8
  %943 = fsub double %942, %935
  store double %943, double* %941, align 8
  br label %944

; <label>:944                                     ; preds = %779
  %945 = add nsw i32 %k17.2, 1
  br label %777

; <label>:946                                     ; preds = %777
  %947 = ptrtoint i32* %plim.0 to i64
  %948 = ptrtoint i32* %244 to i64
  %949 = sub i64 %947, %948
  %950 = sdiv exact i64 %949, 4
  %951 = trunc i64 %950 to i32
  br label %952

; <label>:952                                     ; preds = %1122, %946
  %k17.3 = phi i32 [ 0, %946 ], [ %1123, %1122 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %946 ], [ %1115, %1122 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %946 ], [ %1106, %1122 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %946 ], [ %1104, %1122 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %946 ], [ %1095, %1122 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %946 ], [ %1093, %1122 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %946 ], [ %1091, %1122 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %946 ], [ %1075, %1122 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %946 ], [ %1056, %1122 ]
  %953 = icmp slt i32 %k17.3, %951
  br i1 %953, label %954, label %1124

; <label>:954                                     ; preds = %952
  %955 = sext i32 %k17.3 to i64
  %956 = getelementptr inbounds i32* %244, i64 %955
  %957 = load i32* %956, align 4
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds %struct.CompAtom* %36, i64 %958
  %960 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 0
  %961 = getelementptr inbounds %class.Vector* %960, i32 0, i32 0
  %962 = load double* %961, align 8
  %963 = fsub double %287, %962
  %964 = fmul double %963, %963
  %965 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 0
  %966 = getelementptr inbounds %class.Vector* %965, i32 0, i32 1
  %967 = load double* %966, align 8
  %968 = fsub double %290, %967
  %969 = fmul double %968, %968
  %970 = fadd double %964, %969
  %971 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 0
  %972 = getelementptr inbounds %class.Vector* %971, i32 0, i32 2
  %973 = load double* %972, align 8
  %974 = fsub double %293, %973
  %975 = fmul double %974, %974
  %976 = fadd double %970, %975
  %977 = fptrunc double %976 to float
  %978 = bitcast %union.anon.24* %r2f28 to float*
  store float %977, float* %978, align 4
  %979 = bitcast %union.anon.24* %r2f28 to i32*
  %980 = load i32* %979, align 4
  %981 = ashr i32 %980, 17
  %982 = add nsw i32 %981, %24
  %983 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 2
  %984 = load i32* %983, align 4
  %985 = and i32 %984, 4194303
  %986 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %985)
  %987 = zext i16 %986 to i32
  %988 = mul nsw i32 2, %987
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %989
  %991 = getelementptr inbounds %"struct.LJTable::TableEntry"* %990, i64 1
  %992 = mul nsw i32 16, %982
  %993 = sext i32 %992 to i64
  %994 = getelementptr inbounds double* %14, i64 %993
  %995 = getelementptr inbounds double* %994, i64 0
  %996 = load double* %995, align 8
  %997 = mul nsw i32 16, %982
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds double* %14, i64 %998
  %1000 = getelementptr inbounds double* %999, i64 4
  %1001 = getelementptr inbounds double* %1000, i64 0
  %1002 = load double* %1001, align 8
  %1003 = mul nsw i32 16, %982
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds double* %14, i64 %1004
  %1006 = getelementptr inbounds double* %1005, i64 8
  %1007 = getelementptr inbounds double* %1006, i64 0
  %1008 = load double* %1007, align 8
  %1009 = bitcast %union.anon.24* %r2f28 to i32*
  %1010 = load i32* %1009, align 4
  %1011 = and i32 %1010, -131072
  store i32 %1011, i32* %1009, align 4
  %1012 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 1
  %1013 = load float* %1012, align 4
  %1014 = fpext float %1013 to double
  %1015 = fmul double %537, %1014
  %1016 = bitcast %union.anon.24* %r2f28 to float*
  %1017 = load float* %1016, align 4
  %1018 = fpext float %1017 to double
  %1019 = fsub double %976, %1018
  %1020 = getelementptr inbounds %"struct.LJTable::TableEntry"* %991, i32 0, i32 0
  %1021 = load double* %1020, align 8
  %1022 = fmul double %15, %1021
  %1023 = getelementptr inbounds %"struct.LJTable::TableEntry"* %991, i32 0, i32 1
  %1024 = load double* %1023, align 8
  %1025 = fmul double %15, %1024
  %1026 = fmul double %1022, %996
  %1027 = fmul double %1025, %1002
  %1028 = fsub double %1026, %1027
  %1029 = getelementptr inbounds double* %994, i64 3
  %1030 = load double* %1029, align 8
  %1031 = fmul double %1022, %1030
  %1032 = getelementptr inbounds double* %1000, i64 3
  %1033 = load double* %1032, align 8
  %1034 = fmul double %1025, %1033
  %1035 = fsub double %1031, %1034
  %1036 = getelementptr inbounds double* %994, i64 2
  %1037 = load double* %1036, align 8
  %1038 = fmul double %1022, %1037
  %1039 = getelementptr inbounds double* %1000, i64 2
  %1040 = load double* %1039, align 8
  %1041 = fmul double %1025, %1040
  %1042 = fsub double %1038, %1041
  %1043 = getelementptr inbounds double* %994, i64 1
  %1044 = load double* %1043, align 8
  %1045 = fmul double %1022, %1044
  %1046 = getelementptr inbounds double* %1000, i64 1
  %1047 = load double* %1046, align 8
  %1048 = fmul double %1025, %1047
  %1049 = fsub double %1045, %1048
  %1050 = fmul double %1019, %1035
  %1051 = fadd double %1050, %1042
  %1052 = fmul double %1051, %1019
  %1053 = fadd double %1052, %1049
  %1054 = fmul double %1053, %1019
  %1055 = fadd double %1054, %1028
  %1056 = fadd double %vdwEnergy.2, %1055
  %1057 = fsub double 1.000000e+00, %17
  %1058 = fmul double %1057, %1015
  %1059 = fmul double %1008, %1058
  %1060 = getelementptr inbounds double* %1006, i64 3
  %1061 = load double* %1060, align 8
  %1062 = fmul double %1058, %1061
  %1063 = getelementptr inbounds double* %1006, i64 2
  %1064 = load double* %1063, align 8
  %1065 = fmul double %1058, %1064
  %1066 = getelementptr inbounds double* %1006, i64 1
  %1067 = load double* %1066, align 8
  %1068 = fmul double %1058, %1067
  %1069 = fmul double %1019, %1062
  %1070 = fadd double %1069, %1065
  %1071 = fmul double %1070, %1019
  %1072 = fadd double %1071, %1068
  %1073 = fmul double %1072, %1019
  %1074 = fadd double %1073, %1059
  %1075 = fadd double %electEnergy.2, %1074
  %1076 = fadd double %1062, %1035
  %1077 = fadd double %1065, %1042
  %1078 = fadd double %1068, %1049
  %1079 = fadd double %1059, %1028
  %1080 = fmul double 3.000000e+00, %1019
  %1081 = fmul double %1080, %1076
  %1082 = fmul double 2.000000e+00, %1077
  %1083 = fadd double %1081, %1082
  %1084 = fmul double %1083, %1019
  %1085 = fadd double %1084, %1078
  %1086 = fmul double -2.000000e+00, %1085
  %1087 = sext i32 %957 to i64
  %1088 = getelementptr inbounds %class.Vector* %250, i64 %1087
  %1089 = fmul double %1086, %963
  %1090 = fmul double %1089, %963
  %1091 = fadd double %virial_xx.2, %1090
  %1092 = fmul double %1089, %968
  %1093 = fadd double %virial_xy.2, %1092
  %1094 = fmul double %1089, %974
  %1095 = fadd double %virial_xz.2, %1094
  %1096 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1097 = load double* %1096, align 8
  %1098 = fadd double %1097, %1089
  store double %1098, double* %1096, align 8
  %1099 = getelementptr inbounds %class.Vector* %1088, i32 0, i32 0
  %1100 = load double* %1099, align 8
  %1101 = fsub double %1100, %1089
  store double %1101, double* %1099, align 8
  %1102 = fmul double %1086, %968
  %1103 = fmul double %1102, %968
  %1104 = fadd double %virial_yy.2, %1103
  %1105 = fmul double %1102, %974
  %1106 = fadd double %virial_yz.2, %1105
  %1107 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1108 = load double* %1107, align 8
  %1109 = fadd double %1108, %1102
  store double %1109, double* %1107, align 8
  %1110 = getelementptr inbounds %class.Vector* %1088, i32 0, i32 1
  %1111 = load double* %1110, align 8
  %1112 = fsub double %1111, %1102
  store double %1112, double* %1110, align 8
  %1113 = fmul double %1086, %974
  %1114 = fmul double %1113, %974
  %1115 = fadd double %virial_zz.2, %1114
  %1116 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1117 = load double* %1116, align 8
  %1118 = fadd double %1117, %1113
  store double %1118, double* %1116, align 8
  %1119 = getelementptr inbounds %class.Vector* %1088, i32 0, i32 2
  %1120 = load double* %1119, align 8
  %1121 = fsub double %1120, %1113
  store double %1121, double* %1119, align 8
  br label %1122

; <label>:1122                                    ; preds = %954
  %1123 = add nsw i32 %k17.3, 1
  br label %952

; <label>:1124                                    ; preds = %952
  br label %1125

; <label>:1125                                    ; preds = %1124, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1124 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1124 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1124 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1124 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1124 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1124 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1124 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %329 ], [ %virial_zz.2, %1124 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %329 ], [ %virial_yz.2, %1124 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %329 ], [ %virial_yy.2, %1124 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %329 ], [ %virial_xz.2, %1124 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %329 ], [ %virial_xy.2, %1124 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %329 ], [ %virial_xx.2, %1124 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %329 ], [ %electEnergy.2, %1124 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %329 ], [ %vdwEnergy.2, %1124 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %771, %1124 ]
  %1126 = add nsw i32 %i.1, 1
  br label %266

; <label>:1127                                    ; preds = %266
  %1128 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1129 = icmp ne i32* %50, %1128
  br i1 %1129, label %1130, label %1135

; <label>:1130                                    ; preds = %1127
  %1131 = icmp eq i32* %50, null
  br i1 %1131, label %1134, label %1132

; <label>:1132                                    ; preds = %1130
  %1133 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1133) #8
  br label %1134

; <label>:1134                                    ; preds = %1132, %1130
  br label %1135

; <label>:1135                                    ; preds = %1134, %1127
  %1136 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1137 = icmp ne i32* %64, %1136
  br i1 %1137, label %1138, label %1143

; <label>:1138                                    ; preds = %1135
  %1139 = icmp eq i32* %64, null
  br i1 %1139, label %1142, label %1140

; <label>:1140                                    ; preds = %1138
  %1141 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1141) #8
  br label %1142

; <label>:1142                                    ; preds = %1140, %1138
  br label %1143

; <label>:1143                                    ; preds = %1142, %1135
  %1144 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1145 = icmp ne i32* %78, %1144
  br i1 %1145, label %1146, label %1151

; <label>:1146                                    ; preds = %1143
  %1147 = icmp eq i32* %78, null
  br i1 %1147, label %1150, label %1148

; <label>:1148                                    ; preds = %1146
  %1149 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1149) #8
  br label %1150

; <label>:1150                                    ; preds = %1148, %1146
  br label %1151

; <label>:1151                                    ; preds = %1150, %1143
  %1152 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1153 = icmp ne i32* %188, %1152
  br i1 %1153, label %1154, label %1159

; <label>:1154                                    ; preds = %1151
  %1155 = icmp eq i32* %188, null
  br i1 %1155, label %1158, label %1156

; <label>:1156                                    ; preds = %1154
  %1157 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1157) #8
  br label %1158

; <label>:1158                                    ; preds = %1156, %1154
  br label %1159

; <label>:1159                                    ; preds = %1158, %1151
  %1160 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1161 = icmp ne i32* %202, %1160
  br i1 %1161, label %1162, label %1167

; <label>:1162                                    ; preds = %1159
  %1163 = icmp eq i32* %202, null
  br i1 %1163, label %1166, label %1164

; <label>:1164                                    ; preds = %1162
  %1165 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1165) #8
  br label %1166

; <label>:1166                                    ; preds = %1164, %1162
  br label %1167

; <label>:1167                                    ; preds = %1166, %1159
  %1168 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1169 = icmp ne i32* %216, %1168
  br i1 %1169, label %1170, label %1175

; <label>:1170                                    ; preds = %1167
  %1171 = icmp eq i32* %216, null
  br i1 %1171, label %1174, label %1172

; <label>:1172                                    ; preds = %1170
  %1173 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1173) #8
  br label %1174

; <label>:1174                                    ; preds = %1172, %1170
  br label %1175

; <label>:1175                                    ; preds = %1174, %1167
  %1176 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1177 = icmp ne i32* %230, %1176
  br i1 %1177, label %1178, label %1183

; <label>:1178                                    ; preds = %1175
  %1179 = icmp eq i32* %230, null
  br i1 %1179, label %1182, label %1180

; <label>:1180                                    ; preds = %1178
  %1181 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1181) #8
  br label %1182

; <label>:1182                                    ; preds = %1180, %1178
  br label %1183

; <label>:1183                                    ; preds = %1182, %1175
  %1184 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1185 = icmp ne i32* %244, %1184
  br i1 %1185, label %1186, label %1191

; <label>:1186                                    ; preds = %1183
  %1187 = icmp eq i32* %244, null
  br i1 %1187, label %1190, label %1188

; <label>:1188                                    ; preds = %1186
  %1189 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1189) #8
  br label %1190

; <label>:1190                                    ; preds = %1188, %1186
  br label %1191

; <label>:1191                                    ; preds = %1190, %1183
  %1192 = sitofp i32 %exclChecksum.0 to double
  %1193 = getelementptr inbounds double* %6, i64 22
  %1194 = load double* %1193, align 8
  %1195 = fadd double %1194, %1192
  store double %1195, double* %1193, align 8
  %1196 = getelementptr inbounds double* %6, i64 2
  %1197 = load double* %1196, align 8
  %1198 = fadd double %1197, %vdwEnergy.0
  store double %1198, double* %1196, align 8
  %1199 = getelementptr inbounds double* %6, i64 0
  %1200 = load double* %1199, align 8
  %1201 = fadd double %1200, %electEnergy.0
  store double %1201, double* %1199, align 8
  %1202 = getelementptr inbounds double* %6, i64 3
  %1203 = load double* %1202, align 8
  %1204 = fadd double %1203, %virial_xx.0
  store double %1204, double* %1202, align 8
  %1205 = getelementptr inbounds double* %6, i64 4
  %1206 = load double* %1205, align 8
  %1207 = fadd double %1206, %virial_xy.0
  store double %1207, double* %1205, align 8
  %1208 = getelementptr inbounds double* %6, i64 5
  %1209 = load double* %1208, align 8
  %1210 = fadd double %1209, %virial_xz.0
  store double %1210, double* %1208, align 8
  %1211 = getelementptr inbounds double* %6, i64 6
  %1212 = load double* %1211, align 8
  %1213 = fadd double %1212, %virial_xy.0
  store double %1213, double* %1211, align 8
  %1214 = getelementptr inbounds double* %6, i64 7
  %1215 = load double* %1214, align 8
  %1216 = fadd double %1215, %virial_yy.0
  store double %1216, double* %1214, align 8
  %1217 = getelementptr inbounds double* %6, i64 8
  %1218 = load double* %1217, align 8
  %1219 = fadd double %1218, %virial_yz.0
  store double %1219, double* %1217, align 8
  %1220 = getelementptr inbounds double* %6, i64 9
  %1221 = load double* %1220, align 8
  %1222 = fadd double %1221, %virial_xz.0
  store double %1222, double* %1220, align 8
  %1223 = getelementptr inbounds double* %6, i64 10
  %1224 = load double* %1223, align 8
  %1225 = fadd double %1224, %virial_yz.0
  store double %1225, double* %1223, align 8
  %1226 = getelementptr inbounds double* %6, i64 11
  %1227 = load double* %1226, align 8
  %1228 = fadd double %1227, %virial_zz.0
  store double %1228, double* %1226, align 8
  br label %1229

; <label>:1229                                    ; preds = %1191, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil19calc_pair_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.3, align 4
  %r2f32 = alloca %union.anon.4, align 4
  %r2f75 = alloca %union.anon.5, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1433

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %185

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  br label %139

; <label>:139                                     ; preds = %155, %138
  %all_fixed.2 = phi i32 [ %all_fixed.0, %138 ], [ %all_fixed.3, %155 ]
  %i.0 = phi i32 [ 0, %138 ], [ %156, %155 ]
  %140 = icmp ne i32 %all_fixed.2, 0
  br i1 %140, label %141, label %143

; <label>:141                                     ; preds = %139
  %142 = icmp slt i32 %i.0, %28
  br label %143

; <label>:143                                     ; preds = %141, %139
  %144 = phi i1 [ false, %139 ], [ %142, %141 ]
  br i1 %144, label %145, label %157

; <label>:145                                     ; preds = %143
  %146 = sext i32 %i.0 to i64
  %147 = getelementptr inbounds %struct.CompAtom* %34, i64 %146
  %148 = getelementptr inbounds %struct.CompAtom* %147, i32 0, i32 2
  %149 = load i32* %148, align 4
  %150 = lshr i32 %149, 26
  %151 = and i32 %150, 1
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

; <label>:153                                     ; preds = %145
  br label %154

; <label>:154                                     ; preds = %153, %145
  %all_fixed.3 = phi i32 [ %all_fixed.2, %145 ], [ 0, %153 ]
  br label %155

; <label>:155                                     ; preds = %154
  %156 = add nsw i32 %i.0, 1
  br label %139

; <label>:157                                     ; preds = %143
  %158 = icmp ne i32 %all_fixed.2, 0
  br i1 %158, label %159, label %184

; <label>:159                                     ; preds = %157
  %160 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %161 = icmp ne i32* %51, %160
  br i1 %161, label %162, label %167

; <label>:162                                     ; preds = %159
  %163 = icmp eq i32* %51, null
  br i1 %163, label %166, label %164

; <label>:164                                     ; preds = %162
  %165 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %165) #8
  br label %166

; <label>:166                                     ; preds = %164, %162
  br label %167

; <label>:167                                     ; preds = %166, %159
  %168 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %169 = icmp ne i32* %65, %168
  br i1 %169, label %170, label %175

; <label>:170                                     ; preds = %167
  %171 = icmp eq i32* %65, null
  br i1 %171, label %174, label %172

; <label>:172                                     ; preds = %170
  %173 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %173) #8
  br label %174

; <label>:174                                     ; preds = %172, %170
  br label %175

; <label>:175                                     ; preds = %174, %167
  %176 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %177 = icmp ne i32* %79, %176
  br i1 %177, label %178, label %183

; <label>:178                                     ; preds = %175
  %179 = icmp eq i32* %79, null
  br i1 %179, label %182, label %180

; <label>:180                                     ; preds = %178
  %181 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %181) #8
  br label %182

; <label>:182                                     ; preds = %180, %178
  br label %183

; <label>:183                                     ; preds = %182, %175
  br label %1433

; <label>:184                                     ; preds = %157
  br label %185

; <label>:185                                     ; preds = %184, %114
  %fixg.2 = phi i32 [ %fixg.0, %184 ], [ 0, %114 ]
  %186 = icmp ne i32 %fixg.2, 0
  br i1 %186, label %187, label %194

; <label>:187                                     ; preds = %185
  %188 = sub nsw i32 %fixg.2, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32* %65, i64 %189
  %191 = load i32* %190, align 4
  %192 = sext i32 %fixg.2 to i64
  %193 = getelementptr inbounds i32* %65, i64 %192
  store i32 %191, i32* %193, align 4
  br label %194

; <label>:194                                     ; preds = %187, %185
  %195 = icmp slt i32 %31, 1000
  br i1 %195, label %196, label %198

; <label>:196                                     ; preds = %194
  %197 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %207

; <label>:198                                     ; preds = %194
  %199 = add nsw i32 %31, 5
  %200 = sext i32 %199 to i64
  %201 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %200, i64 4)
  %202 = extractvalue { i64, i1 } %201, 1
  %203 = extractvalue { i64, i1 } %201, 0
  %204 = select i1 %202, i64 -1, i64 %203
  %205 = call noalias i8* @_Znam(i64 %204) #9
  %206 = bitcast i8* %205 to i32*
  br label %207

; <label>:207                                     ; preds = %198, %196
  %208 = phi i32* [ %197, %196 ], [ %206, %198 ]
  %209 = icmp slt i32 %31, 1000
  br i1 %209, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %221

; <label>:212                                     ; preds = %207
  %213 = add nsw i32 %31, 5
  %214 = sext i32 %213 to i64
  %215 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %214, i64 4)
  %216 = extractvalue { i64, i1 } %215, 1
  %217 = extractvalue { i64, i1 } %215, 0
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = call noalias i8* @_Znam(i64 %218) #9
  %220 = bitcast i8* %219 to i32*
  br label %221

; <label>:221                                     ; preds = %212, %210
  %222 = phi i32* [ %211, %210 ], [ %220, %212 ]
  %223 = icmp slt i32 %31, 1000
  br i1 %223, label %224, label %226

; <label>:224                                     ; preds = %221
  %225 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %235

; <label>:226                                     ; preds = %221
  %227 = add nsw i32 %31, 5
  %228 = sext i32 %227 to i64
  %229 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %228, i64 4)
  %230 = extractvalue { i64, i1 } %229, 1
  %231 = extractvalue { i64, i1 } %229, 0
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = call noalias i8* @_Znam(i64 %232) #9
  %234 = bitcast i8* %233 to i32*
  br label %235

; <label>:235                                     ; preds = %226, %224
  %236 = phi i32* [ %225, %224 ], [ %234, %226 ]
  %237 = icmp slt i32 %31, 1000
  br i1 %237, label %238, label %240

; <label>:238                                     ; preds = %235
  %239 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %249

; <label>:240                                     ; preds = %235
  %241 = add nsw i32 %31, 5
  %242 = sext i32 %241 to i64
  %243 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 4)
  %244 = extractvalue { i64, i1 } %243, 1
  %245 = extractvalue { i64, i1 } %243, 0
  %246 = select i1 %244, i64 -1, i64 %245
  %247 = call noalias i8* @_Znam(i64 %246) #9
  %248 = bitcast i8* %247 to i32*
  br label %249

; <label>:249                                     ; preds = %240, %238
  %250 = phi i32* [ %239, %238 ], [ %248, %240 ]
  %251 = icmp slt i32 %31, 1000
  br i1 %251, label %252, label %254

; <label>:252                                     ; preds = %249
  %253 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %263

; <label>:254                                     ; preds = %249
  %255 = add nsw i32 %31, 5
  %256 = sext i32 %255 to i64
  %257 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %256, i64 4)
  %258 = extractvalue { i64, i1 } %257, 1
  %259 = extractvalue { i64, i1 } %257, 0
  %260 = select i1 %258, i64 -1, i64 %259
  %261 = call noalias i8* @_Znam(i64 %260) #9
  %262 = bitcast i8* %261 to i32*
  br label %263

; <label>:263                                     ; preds = %254, %252
  %264 = phi i32* [ %253, %252 ], [ %262, %254 ]
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 0
  %267 = load %class.Vector** %266, align 8
  %268 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %269 = getelementptr inbounds [2 x %class.Vector*]* %268, i32 0, i64 1
  %270 = load %class.Vector** %269, align 8
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %272 = getelementptr inbounds [2 x %class.Vector*]* %271, i32 0, i64 0
  %273 = load %class.Vector** %272, align 8
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %275 = getelementptr inbounds [2 x %class.Vector*]* %274, i32 0, i64 1
  %276 = load %class.Vector** %275, align 8
  %277 = mul nsw i32 %28, %31
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %279 = load i32* %278, align 4
  %280 = mul nsw i32 %277, %279
  %281 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %282 = load i32* %281, align 4
  %283 = sdiv i32 %280, %282
  %284 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %285 = load i32* %284, align 4
  %286 = mul nsw i32 %277, %285
  %287 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %288 = load i32* %287, align 4
  %289 = sdiv i32 %286, %288
  br label %290

; <label>:290                                     ; preds = %1308, %263
  %pairlistindex.0 = phi i32 [ 0, %263 ], [ %pairlistindex.2, %1308 ]
  %pairlistoffset.0 = phi i32 [ 0, %263 ], [ %pairlistoffset.2, %1308 ]
  %pairCount.0 = phi i32 [ 0, %263 ], [ %pairCount.3, %1308 ]
  %i.1 = phi i32 [ 0, %263 ], [ %1309, %1308 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_zz.4, %1308 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yz.4, %1308 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yy.4, %1308 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xz.4, %1308 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xy.4, %1308 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xx.4, %1308 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_zz.3, %1308 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yz.3, %1308 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yy.3, %1308 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xz.3, %1308 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xy.3, %1308 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xx.3, %1308 ]
  %exclChecksum.0 = phi i32 [ 0, %263 ], [ %exclChecksum.9, %1308 ]
  %291 = icmp slt i32 %i.1, %28
  br i1 %291, label %292, label %1310

; <label>:292                                     ; preds = %290
  %293 = sext i32 %i.1 to i64
  %294 = getelementptr inbounds %struct.CompAtom* %34, i64 %293
  %295 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %296 = load i32* %295, align 4
  %297 = and i32 %296, 4194303
  %298 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %297)
  %299 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 0
  %300 = load i32* %299, align 4
  %301 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 1
  %302 = load i32* %301, align 4
  %303 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 2
  %304 = load i8** %303, align 8
  %305 = sext i32 %300 to i64
  %306 = sub i64 0, %305
  %307 = getelementptr inbounds i8* %304, i64 %306
  %308 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %309 = getelementptr inbounds %class.Vector* %308, i32 0, i32 0
  %310 = load double* %309, align 8
  %311 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %312 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %313 = load double* %312, align 8
  %314 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %315 = getelementptr inbounds %class.Vector* %314, i32 0, i32 2
  %316 = load double* %315, align 8
  %317 = sext i32 %i.1 to i64
  %318 = getelementptr inbounds %class.Vector* %267, i64 %317
  %319 = sext i32 %i.1 to i64
  %320 = getelementptr inbounds %class.Vector* %273, i64 %319
  %321 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %322 = load i32* %321, align 4
  %323 = lshr i32 %322, 22
  %324 = and i32 %323, 7
  %325 = icmp ne i32 %324, 0
  br i1 %325, label %332, label %326

; <label>:326                                     ; preds = %292
  %327 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %328 = load i32* %327, align 4
  %329 = lshr i32 %328, 25
  %330 = and i32 %329, 1
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %332, label %502

; <label>:332                                     ; preds = %326, %292
  %333 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %334 = load i32* %333, align 4
  %335 = lshr i32 %334, 22
  %336 = and i32 %335, 7
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %352

; <label>:338                                     ; preds = %332
  %339 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %340 = load i32* %339, align 4
  %341 = lshr i32 %340, 22
  %342 = and i32 %341, 7
  %343 = mul nsw i32 %342, %31
  %344 = add nsw i32 %pairCount.0, %343
  %345 = icmp slt i32 %pairCount.0, %283
  br i1 %345, label %348, label %346

; <label>:346                                     ; preds = %338
  %347 = icmp sge i32 %pairCount.0, %289
  br i1 %347, label %348, label %351

; <label>:348                                     ; preds = %346, %338
  %349 = sub nsw i32 %342, 1
  %350 = add nsw i32 %i.1, %349
  br label %1308

; <label>:351                                     ; preds = %346
  br label %352

; <label>:352                                     ; preds = %351, %332
  %pairCount.1 = phi i32 [ %344, %351 ], [ %pairCount.0, %332 ]
  %353 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %354 = icmp ne i32 %353, 0
  br i1 %354, label %355, label %361

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %357 = load i32* %356, align 4
  %358 = lshr i32 %357, 27
  %359 = and i32 %358, 1
  %360 = icmp ne i32 %359, 0
  br label %361

; <label>:361                                     ; preds = %355, %352
  %362 = phi i1 [ false, %352 ], [ %360, %355 ]
  %363 = zext i1 %362 to i32
  %364 = sext i32 0 to i64
  %365 = getelementptr inbounds i32* %208, i64 %364
  %366 = icmp ne i32 %363, 0
  br i1 %366, label %367, label %368

; <label>:367                                     ; preds = %361
  br label %369

; <label>:368                                     ; preds = %361
  br label %369

; <label>:369                                     ; preds = %368, %367
  %370 = phi i32* [ %65, %367 ], [ %51, %368 ]
  %371 = icmp ne i32 %363, 0
  br i1 %371, label %372, label %373

; <label>:372                                     ; preds = %369
  br label %374

; <label>:373                                     ; preds = %369
  br label %374

; <label>:374                                     ; preds = %373, %372
  %375 = phi i32 [ %fixg.2, %372 ], [ %g.0, %373 ]
  %376 = icmp slt i32 0, %375
  br i1 %376, label %377, label %471

; <label>:377                                     ; preds = %374
  %378 = sext i32 0 to i64
  %379 = getelementptr inbounds i32* %370, i64 %378
  %380 = load i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.CompAtom* %37, i64 %381
  %383 = getelementptr inbounds %struct.CompAtom* %382, i32 0, i32 0
  %384 = getelementptr inbounds %class.Vector* %383, i32 0, i32 0
  %385 = load double* %384, align 8
  %386 = sext i32 %380 to i64
  %387 = getelementptr inbounds %struct.CompAtom* %37, i64 %386
  %388 = getelementptr inbounds %struct.CompAtom* %387, i32 0, i32 0
  %389 = getelementptr inbounds %class.Vector* %388, i32 0, i32 1
  %390 = load double* %389, align 8
  %391 = sext i32 %380 to i64
  %392 = getelementptr inbounds %struct.CompAtom* %37, i64 %391
  %393 = getelementptr inbounds %struct.CompAtom* %392, i32 0, i32 0
  %394 = getelementptr inbounds %class.Vector* %393, i32 0, i32 2
  %395 = load double* %394, align 8
  br label %396

; <label>:396                                     ; preds = %429, %377
  %g.3 = phi i32 [ 0, %377 ], [ %399, %429 ]
  %gli.0 = phi i32* [ %79, %377 ], [ %gli.1, %429 ]
  %j2.0 = phi i32 [ %380, %377 ], [ %402, %429 ]
  %p_j_x.0 = phi double [ %385, %377 ], [ %409, %429 ]
  %p_j_y.0 = phi double [ %390, %377 ], [ %417, %429 ]
  %p_j_z.0 = phi double [ %395, %377 ], [ %425, %429 ]
  %397 = icmp slt i32 %g.3, %375
  br i1 %397, label %398, label %430

; <label>:398                                     ; preds = %396
  %399 = add nsw i32 %g.3, 1
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32* %370, i64 %400
  %402 = load i32* %401, align 4
  %403 = fsub double %310, %p_j_x.0
  %404 = fmul double %403, %403
  %405 = sext i32 %402 to i64
  %406 = getelementptr inbounds %struct.CompAtom* %37, i64 %405
  %407 = getelementptr inbounds %struct.CompAtom* %406, i32 0, i32 0
  %408 = getelementptr inbounds %class.Vector* %407, i32 0, i32 0
  %409 = load double* %408, align 8
  %410 = fsub double %313, %p_j_y.0
  %411 = fmul double %410, %410
  %412 = fadd double %404, %411
  %413 = sext i32 %402 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %37, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 1
  %417 = load double* %416, align 8
  %418 = fsub double %316, %p_j_z.0
  %419 = fmul double %418, %418
  %420 = fadd double %412, %419
  %421 = sext i32 %402 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %37, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  %426 = fcmp ole double %420, %8
  br i1 %426, label %427, label %429

; <label>:427                                     ; preds = %398
  store i32 %j2.0, i32* %gli.0, align 4
  %428 = getelementptr inbounds i32* %gli.0, i32 1
  br label %429

; <label>:429                                     ; preds = %427, %398
  %gli.1 = phi i32* [ %428, %427 ], [ %gli.0, %398 ]
  br label %396

; <label>:430                                     ; preds = %396
  %431 = ptrtoint i32* %gli.0 to i64
  %432 = ptrtoint i32* %79 to i64
  %433 = sub i64 %431, %432
  %434 = sdiv exact i64 %433, 4
  %435 = trunc i64 %434 to i32
  br label %436

; <label>:436                                     ; preds = %468, %430
  %pli.0 = phi i32* [ %365, %430 ], [ %467, %468 ]
  %h.0 = phi i32 [ 0, %430 ], [ %469, %468 ]
  %437 = icmp slt i32 %h.0, %435
  br i1 %437, label %438, label %470

; <label>:438                                     ; preds = %436
  %439 = sext i32 %h.0 to i64
  %440 = getelementptr inbounds i32* %79, i64 %439
  %441 = load i32* %440, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %37, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 25
  %447 = and i32 %446, 1
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %450

; <label>:449                                     ; preds = %438
  br label %457

; <label>:450                                     ; preds = %438
  %451 = sext i32 %441 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %37, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 2
  %454 = load i32* %453, align 4
  %455 = lshr i32 %454, 22
  %456 = and i32 %455, 7
  br label %457

; <label>:457                                     ; preds = %450, %449
  %458 = phi i32 [ 1, %449 ], [ %456, %450 ]
  %459 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %441, i32* %459, align 4
  %460 = add nsw i32 %441, 1
  %461 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %460, i32* %461, align 4
  %462 = add nsw i32 %441, 2
  %463 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %462, i32* %463, align 4
  %464 = add nsw i32 %441, 3
  %465 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %464, i32* %465, align 4
  %466 = sext i32 %458 to i64
  %467 = getelementptr inbounds i32* %pli.0, i64 %466
  br label %468

; <label>:468                                     ; preds = %457
  %469 = add nsw i32 %h.0, 1
  br label %436

; <label>:470                                     ; preds = %436
  br label %471

; <label>:471                                     ; preds = %470, %374
  %pli.1 = phi i32* [ %pli.0, %470 ], [ %365, %374 ]
  %472 = ptrtoint i32* %pli.1 to i64
  %473 = ptrtoint i32* %208 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %478, label %485

; <label>:478                                     ; preds = %471
  %479 = sub nsw i32 %476, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i32* %208, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %476 to i64
  %484 = getelementptr inbounds i32* %208, i64 %483
  store i32 %482, i32* %484, align 4
  br label %501

; <label>:485                                     ; preds = %471
  %486 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %487 = load i32* %486, align 4
  %488 = lshr i32 %487, 25
  %489 = and i32 %488, 1
  %490 = icmp ne i32 %489, 0
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %485
  br label %497

; <label>:492                                     ; preds = %485
  %493 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %494 = load i32* %493, align 4
  %495 = lshr i32 %494, 22
  %496 = and i32 %495, 7
  br label %497

; <label>:497                                     ; preds = %492, %491
  %498 = phi i32 [ 1, %491 ], [ %496, %492 ]
  %499 = sub nsw i32 %498, 1
  %500 = add nsw i32 %i.1, %499
  br label %1308

; <label>:501                                     ; preds = %478
  br label %502

; <label>:502                                     ; preds = %501, %326
  %pairlistindex.1 = phi i32 [ %476, %501 ], [ %pairlistindex.0, %326 ]
  %pairlistoffset.1 = phi i32 [ 0, %501 ], [ %pairlistoffset.0, %326 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %501 ], [ %pairCount.0, %326 ]
  %503 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %504 = icmp ne i32 %503, 0
  br i1 %504, label %505, label %511

; <label>:505                                     ; preds = %502
  %506 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 26
  %509 = and i32 %508, 1
  %510 = icmp ne i32 %509, 0
  br label %511

; <label>:511                                     ; preds = %505, %502
  %512 = phi i1 [ false, %502 ], [ %510, %505 ]
  %513 = zext i1 %512 to i32
  %514 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 1
  %515 = load float* %514, align 4
  %516 = fpext float %515 to double
  %517 = fmul double 3.320636e+02, %516
  %518 = fmul double %517, %16
  %519 = fmul double %518, %9
  %520 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %521 = load i32* %520, align 4
  %522 = and i32 %521, 4194303
  %523 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %522)
  %524 = zext i16 %523 to i32
  %525 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %524)
  %526 = icmp ne i32 %513, 0
  br i1 %526, label %527, label %589

; <label>:527                                     ; preds = %511
  br label %528

; <label>:528                                     ; preds = %586, %527
  %pli4.0 = phi i32* [ %222, %527 ], [ %pli4.2, %586 ]
  %plin.0 = phi i32* [ %236, %527 ], [ %plin.2, %586 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %527 ], [ %587, %586 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %527 ], [ %exclChecksum.3, %586 ]
  %529 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %529, label %530, label %588

; <label>:530                                     ; preds = %528
  %531 = sext i32 %k.0 to i64
  %532 = getelementptr inbounds i32* %208, i64 %531
  %533 = load i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.CompAtom* %37, i64 %534
  %536 = getelementptr inbounds %struct.CompAtom* %535, i32 0, i32 0
  %537 = getelementptr inbounds %class.Vector* %536, i32 0, i32 0
  %538 = load double* %537, align 8
  %539 = fsub double %310, %538
  %540 = fmul double %539, %539
  %541 = sext i32 %533 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %37, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 1
  %545 = load double* %544, align 8
  %546 = fsub double %313, %545
  %547 = fmul double %546, %546
  %548 = fadd double %540, %547
  %549 = sext i32 %533 to i64
  %550 = getelementptr inbounds %struct.CompAtom* %37, i64 %549
  %551 = getelementptr inbounds %struct.CompAtom* %550, i32 0, i32 0
  %552 = getelementptr inbounds %class.Vector* %551, i32 0, i32 2
  %553 = load double* %552, align 8
  %554 = fsub double %316, %553
  %555 = fmul double %554, %554
  %556 = fadd double %548, %555
  %557 = sext i32 %533 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %37, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 2
  %560 = load i32* %559, align 4
  %561 = lshr i32 %560, 26
  %562 = and i32 %561, 1
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %585, label %564

; <label>:564                                     ; preds = %530
  %565 = fcmp ole double %556, %7
  br i1 %565, label %566, label %585

; <label>:566                                     ; preds = %564
  %567 = fcmp ole double %556, %22
  br i1 %567, label %568, label %571

; <label>:568                                     ; preds = %566
  %569 = add nsw i32 %exclChecksum.1, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %585, label %571

; <label>:571                                     ; preds = %568, %566
  %exclChecksum.2 = phi i32 [ %569, %568 ], [ %exclChecksum.1, %566 ]
  %572 = sext i32 %533 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %37, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 2
  %575 = load i32* %574, align 4
  %576 = and i32 %575, 4194303
  %577 = icmp sge i32 %576, %300
  br i1 %577, label %578, label %582

; <label>:578                                     ; preds = %571
  %579 = icmp sle i32 %576, %302
  br i1 %579, label %580, label %582

; <label>:580                                     ; preds = %578
  %581 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %533, i32* %pli4.0, align 4
  br label %584

; <label>:582                                     ; preds = %578, %571
  %583 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %533, i32* %plin.0, align 4
  br label %584

; <label>:584                                     ; preds = %582, %580
  %pli4.1 = phi i32* [ %581, %580 ], [ %pli4.0, %582 ]
  %plin.1 = phi i32* [ %plin.0, %580 ], [ %583, %582 ]
  br label %585

; <label>:585                                     ; preds = %584, %568, %564, %530
  %pli4.2 = phi i32* [ %pli4.0, %530 ], [ %pli4.0, %568 ], [ %pli4.1, %584 ], [ %pli4.0, %564 ]
  %plin.2 = phi i32* [ %plin.0, %530 ], [ %plin.0, %568 ], [ %plin.1, %584 ], [ %plin.0, %564 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %530 ], [ %569, %568 ], [ %exclChecksum.2, %584 ], [ %exclChecksum.1, %564 ]
  br label %586

; <label>:586                                     ; preds = %585
  %587 = add nsw i32 %k.0, 1
  br label %528

; <label>:588                                     ; preds = %528
  br label %668

; <label>:589                                     ; preds = %511
  %590 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %590, label %591, label %667

; <label>:591                                     ; preds = %589
  %592 = sext i32 %pairlistoffset.1 to i64
  %593 = getelementptr inbounds i32* %208, i64 %592
  %594 = load i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %37, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 0
  %598 = getelementptr inbounds %class.Vector* %597, i32 0, i32 0
  %599 = load double* %598, align 8
  %600 = sext i32 %594 to i64
  %601 = getelementptr inbounds %struct.CompAtom* %37, i64 %600
  %602 = getelementptr inbounds %struct.CompAtom* %601, i32 0, i32 0
  %603 = getelementptr inbounds %class.Vector* %602, i32 0, i32 1
  %604 = load double* %603, align 8
  %605 = sext i32 %594 to i64
  %606 = getelementptr inbounds %struct.CompAtom* %37, i64 %605
  %607 = getelementptr inbounds %struct.CompAtom* %606, i32 0, i32 0
  %608 = getelementptr inbounds %class.Vector* %607, i32 0, i32 2
  %609 = load double* %608, align 8
  %610 = sext i32 %594 to i64
  %611 = getelementptr inbounds %struct.CompAtom* %37, i64 %610
  %612 = getelementptr inbounds %struct.CompAtom* %611, i32 0, i32 2
  %613 = load i32* %612, align 4
  %614 = and i32 %613, 4194303
  br label %615

; <label>:615                                     ; preds = %660, %591
  %pli4.3 = phi i32* [ %222, %591 ], [ %pli4.5, %660 ]
  %plin.3 = phi i32* [ %236, %591 ], [ %plin.5, %660 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %591 ], [ %618, %660 ]
  %j211.0 = phi i32 [ %594, %591 ], [ %621, %660 ]
  %p_j_x12.0 = phi double [ %599, %591 ], [ %628, %660 ]
  %p_j_y13.0 = phi double [ %604, %591 ], [ %636, %660 ]
  %p_j_z14.0 = phi double [ %609, %591 ], [ %644, %660 ]
  %atom215.0 = phi i32 [ %614, %591 ], [ %665, %660 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %591 ], [ %exclChecksum.6, %660 ]
  %616 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %616, label %617, label %666

; <label>:617                                     ; preds = %615
  %618 = add nsw i32 %k10.0, 1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i32* %208, i64 %619
  %621 = load i32* %620, align 4
  %622 = fsub double %310, %p_j_x12.0
  %623 = fmul double %622, %622
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds %struct.CompAtom* %37, i64 %624
  %626 = getelementptr inbounds %struct.CompAtom* %625, i32 0, i32 0
  %627 = getelementptr inbounds %class.Vector* %626, i32 0, i32 0
  %628 = load double* %627, align 8
  %629 = fsub double %313, %p_j_y13.0
  %630 = fmul double %629, %629
  %631 = fadd double %623, %630
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %37, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 1
  %636 = load double* %635, align 8
  %637 = fsub double %316, %p_j_z14.0
  %638 = fmul double %637, %637
  %639 = fadd double %631, %638
  %640 = sext i32 %621 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %37, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 2
  %644 = load double* %643, align 8
  %645 = fcmp ole double %639, %7
  br i1 %645, label %646, label %660

; <label>:646                                     ; preds = %617
  %647 = fcmp ole double %639, %22
  br i1 %647, label %648, label %651

; <label>:648                                     ; preds = %646
  %649 = add nsw i32 %exclChecksum.4, 1
  %650 = icmp ne i32 %649, 0
  br i1 %650, label %660, label %651

; <label>:651                                     ; preds = %648, %646
  %exclChecksum.5 = phi i32 [ %649, %648 ], [ %exclChecksum.4, %646 ]
  %652 = icmp sge i32 %atom215.0, %300
  br i1 %652, label %653, label %657

; <label>:653                                     ; preds = %651
  %654 = icmp sle i32 %atom215.0, %302
  br i1 %654, label %655, label %657

; <label>:655                                     ; preds = %653
  %656 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %659

; <label>:657                                     ; preds = %653, %651
  %658 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %659

; <label>:659                                     ; preds = %657, %655
  %pli4.4 = phi i32* [ %656, %655 ], [ %pli4.3, %657 ]
  %plin.4 = phi i32* [ %plin.3, %655 ], [ %658, %657 ]
  br label %660

; <label>:660                                     ; preds = %659, %648, %617
  %pli4.5 = phi i32* [ %pli4.3, %648 ], [ %pli4.4, %659 ], [ %pli4.3, %617 ]
  %plin.5 = phi i32* [ %plin.3, %648 ], [ %plin.4, %659 ], [ %plin.3, %617 ]
  %exclChecksum.6 = phi i32 [ %649, %648 ], [ %exclChecksum.5, %659 ], [ %exclChecksum.4, %617 ]
  %661 = sext i32 %621 to i64
  %662 = getelementptr inbounds %struct.CompAtom* %37, i64 %661
  %663 = getelementptr inbounds %struct.CompAtom* %662, i32 0, i32 2
  %664 = load i32* %663, align 4
  %665 = and i32 %664, 4194303
  br label %615

; <label>:666                                     ; preds = %615
  br label %667

; <label>:667                                     ; preds = %666, %589
  %pli4.6 = phi i32* [ %pli4.3, %666 ], [ %222, %589 ]
  %plin.6 = phi i32* [ %plin.3, %666 ], [ %236, %589 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %666 ], [ %exclChecksum.0, %589 ]
  br label %668

; <label>:668                                     ; preds = %667, %588
  %pli4.7 = phi i32* [ %pli4.0, %588 ], [ %pli4.6, %667 ]
  %plin.7 = phi i32* [ %plin.0, %588 ], [ %plin.6, %667 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %588 ], [ %exclChecksum.7, %667 ]
  %669 = ptrtoint i32* %pli4.7 to i64
  %670 = ptrtoint i32* %222 to i64
  %671 = sub i64 %669, %670
  %672 = sdiv exact i64 %671, 4
  %673 = trunc i64 %672 to i32
  %674 = icmp ne i32 %673, 0
  br i1 %674, label %675, label %682

; <label>:675                                     ; preds = %668
  %676 = sub nsw i32 %673, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32* %222, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %673 to i64
  %681 = getelementptr inbounds i32* %222, i64 %680
  store i32 %679, i32* %681, align 4
  br label %682

; <label>:682                                     ; preds = %675, %668
  br label %683

; <label>:683                                     ; preds = %705, %682
  %plin.8 = phi i32* [ %plin.7, %682 ], [ %plin.9, %705 ]
  %plix.0 = phi i32* [ %250, %682 ], [ %plix.1, %705 ]
  %plim.0 = phi i32* [ %264, %682 ], [ %plim.1, %705 ]
  %k18.0 = phi i32 [ 0, %682 ], [ %706, %705 ]
  %684 = icmp slt i32 %k18.0, %673
  br i1 %684, label %685, label %707

; <label>:685                                     ; preds = %683
  %686 = sext i32 %k18.0 to i64
  %687 = getelementptr inbounds i32* %222, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CompAtom* %37, i64 %689
  %691 = getelementptr inbounds %struct.CompAtom* %690, i32 0, i32 2
  %692 = load i32* %691, align 4
  %693 = and i32 %692, 4194303
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i8* %307, i64 %694
  %696 = load i8* %695, align 1
  %697 = sext i8 %696 to i32
  switch i32 %697, label %704 [
    i32 0, label %698
    i32 1, label %700
    i32 2, label %702
  ]

; <label>:698                                     ; preds = %685
  %699 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %688, i32* %plin.8, align 4
  br label %704

; <label>:700                                     ; preds = %685
  %701 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %688, i32* %plix.0, align 4
  br label %704

; <label>:702                                     ; preds = %685
  %703 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %688, i32* %plim.0, align 4
  br label %704

; <label>:704                                     ; preds = %702, %700, %698, %685
  %plin.9 = phi i32* [ %plin.8, %685 ], [ %plin.8, %702 ], [ %plin.8, %700 ], [ %699, %698 ]
  %plix.1 = phi i32* [ %plix.0, %685 ], [ %plix.0, %702 ], [ %701, %700 ], [ %plix.0, %698 ]
  %plim.1 = phi i32* [ %plim.0, %685 ], [ %703, %702 ], [ %plim.0, %700 ], [ %plim.0, %698 ]
  br label %705

; <label>:705                                     ; preds = %704
  %706 = add nsw i32 %k18.0, 1
  br label %683

; <label>:707                                     ; preds = %683
  %708 = ptrtoint i32* %plix.0 to i64
  %709 = ptrtoint i32* %250 to i64
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 4
  %712 = sext i32 %exclChecksum.8 to i64
  %713 = add nsw i64 %712, %711
  %714 = trunc i64 %713 to i32
  %715 = ptrtoint i32* %plim.0 to i64
  %716 = ptrtoint i32* %264 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %714 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plin.8 to i64
  %723 = ptrtoint i32* %236 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = trunc i64 %725 to i32
  br label %727

; <label>:727                                     ; preds = %939, %707
  %k18.1 = phi i32 [ 0, %707 ], [ %940, %939 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %707 ], [ %932, %939 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %707 ], [ %923, %939 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %707 ], [ %921, %939 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %707 ], [ %912, %939 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %707 ], [ %910, %939 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %707 ], [ %908, %939 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %707 ], [ %880, %939 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %707 ], [ %871, %939 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %707 ], [ %869, %939 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %707 ], [ %860, %939 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %707 ], [ %858, %939 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %707 ], [ %856, %939 ]
  %728 = icmp slt i32 %k18.1, %726
  br i1 %728, label %729, label %941

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k18.1 to i64
  %731 = getelementptr inbounds i32* %236, i64 %730
  %732 = load i32* %731, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.CompAtom* %37, i64 %733
  %735 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 0
  %737 = load double* %736, align 8
  %738 = fsub double %310, %737
  %739 = fmul double %738, %738
  %740 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %741 = getelementptr inbounds %class.Vector* %740, i32 0, i32 1
  %742 = load double* %741, align 8
  %743 = fsub double %313, %742
  %744 = fmul double %743, %743
  %745 = fadd double %739, %744
  %746 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %747 = getelementptr inbounds %class.Vector* %746, i32 0, i32 2
  %748 = load double* %747, align 8
  %749 = fsub double %316, %748
  %750 = fmul double %749, %749
  %751 = fadd double %745, %750
  %752 = fptrunc double %751 to float
  %753 = bitcast %union.anon.3* %r2f to float*
  store float %752, float* %753, align 4
  %754 = bitcast %union.anon.3* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = ashr i32 %755, 17
  %757 = add nsw i32 %756, %25
  %758 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %759 = load i32* %758, align 4
  %760 = and i32 %759, 4194303
  %761 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %760)
  %762 = zext i16 %761 to i32
  %763 = mul nsw i32 2, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %764
  %766 = mul nsw i32 16, %757
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double* %14, i64 %767
  %769 = getelementptr inbounds double* %768, i64 0
  %770 = load double* %769, align 8
  %771 = mul nsw i32 16, %757
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds double* %14, i64 %772
  %774 = getelementptr inbounds double* %773, i64 4
  %775 = getelementptr inbounds double* %774, i64 0
  %776 = load double* %775, align 8
  %777 = mul nsw i32 16, %757
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double* %14, i64 %778
  %780 = getelementptr inbounds double* %779, i64 8
  %781 = getelementptr inbounds double* %780, i64 0
  %782 = load double* %781, align 8
  %783 = mul nsw i32 16, %757
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds double* %14, i64 %784
  %786 = getelementptr inbounds double* %785, i64 8
  %787 = getelementptr inbounds double* %786, i64 4
  %788 = getelementptr inbounds double* %787, i64 0
  %789 = load double* %788, align 8
  %790 = bitcast %union.anon.3* %r2f to i32*
  %791 = load i32* %790, align 4
  %792 = and i32 %791, -131072
  store i32 %792, i32* %790, align 4
  %793 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 1
  %794 = load float* %793, align 4
  %795 = fpext float %794 to double
  %796 = fmul double %519, %795
  %797 = bitcast %union.anon.3* %r2f to float*
  %798 = load float* %797, align 4
  %799 = fpext float %798 to double
  %800 = fsub double %751, %799
  %801 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 0
  %802 = load double* %801, align 8
  %803 = fmul double %16, %802
  %804 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 1
  %805 = load double* %804, align 8
  %806 = fmul double %16, %805
  %807 = fmul double %803, %770
  %808 = fmul double %806, %776
  %809 = fsub double %807, %808
  %810 = getelementptr inbounds double* %768, i64 3
  %811 = load double* %810, align 8
  %812 = fmul double %803, %811
  %813 = getelementptr inbounds double* %774, i64 3
  %814 = load double* %813, align 8
  %815 = fmul double %806, %814
  %816 = fsub double %812, %815
  %817 = getelementptr inbounds double* %768, i64 2
  %818 = load double* %817, align 8
  %819 = fmul double %803, %818
  %820 = getelementptr inbounds double* %774, i64 2
  %821 = load double* %820, align 8
  %822 = fmul double %806, %821
  %823 = fsub double %819, %822
  %824 = getelementptr inbounds double* %768, i64 1
  %825 = load double* %824, align 8
  %826 = fmul double %803, %825
  %827 = getelementptr inbounds double* %774, i64 1
  %828 = load double* %827, align 8
  %829 = fmul double %806, %828
  %830 = fsub double %826, %829
  %831 = fmul double %782, %796
  %832 = getelementptr inbounds double* %780, i64 3
  %833 = load double* %832, align 8
  %834 = fmul double %796, %833
  %835 = getelementptr inbounds double* %780, i64 2
  %836 = load double* %835, align 8
  %837 = fmul double %796, %836
  %838 = getelementptr inbounds double* %780, i64 1
  %839 = load double* %838, align 8
  %840 = fmul double %796, %839
  %841 = fadd double %834, %816
  %842 = fadd double %837, %823
  %843 = fadd double %840, %830
  %844 = fadd double %831, %809
  %845 = fmul double 3.000000e+00, %800
  %846 = fmul double %845, %841
  %847 = fmul double 2.000000e+00, %842
  %848 = fadd double %846, %847
  %849 = fmul double %848, %800
  %850 = fadd double %849, %843
  %851 = fmul double -2.000000e+00, %850
  %852 = sext i32 %732 to i64
  %853 = getelementptr inbounds %class.Vector* %270, i64 %852
  %854 = fmul double %851, %738
  %855 = fmul double %854, %738
  %856 = fadd double %virial_xx.1, %855
  %857 = fmul double %854, %743
  %858 = fadd double %virial_xy.1, %857
  %859 = fmul double %854, %749
  %860 = fadd double %virial_xz.1, %859
  %861 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %862 = load double* %861, align 8
  %863 = fadd double %862, %854
  store double %863, double* %861, align 8
  %864 = getelementptr inbounds %class.Vector* %853, i32 0, i32 0
  %865 = load double* %864, align 8
  %866 = fsub double %865, %854
  store double %866, double* %864, align 8
  %867 = fmul double %851, %743
  %868 = fmul double %867, %743
  %869 = fadd double %virial_yy.1, %868
  %870 = fmul double %867, %749
  %871 = fadd double %virial_yz.1, %870
  %872 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %873 = load double* %872, align 8
  %874 = fadd double %873, %867
  store double %874, double* %872, align 8
  %875 = getelementptr inbounds %class.Vector* %853, i32 0, i32 1
  %876 = load double* %875, align 8
  %877 = fsub double %876, %867
  store double %877, double* %875, align 8
  %878 = fmul double %851, %749
  %879 = fmul double %878, %749
  %880 = fadd double %virial_zz.1, %879
  %881 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %882 = load double* %881, align 8
  %883 = fadd double %882, %878
  store double %883, double* %881, align 8
  %884 = getelementptr inbounds %class.Vector* %853, i32 0, i32 2
  %885 = load double* %884, align 8
  %886 = fsub double %885, %878
  store double %886, double* %884, align 8
  %887 = getelementptr inbounds double* %787, i64 1
  %888 = load double* %887, align 8
  %889 = getelementptr inbounds double* %787, i64 2
  %890 = load double* %889, align 8
  %891 = getelementptr inbounds double* %787, i64 3
  %892 = load double* %891, align 8
  %893 = fmul double %892, %796
  %894 = fmul double %890, %796
  %895 = fmul double %888, %796
  %896 = fmul double %789, %796
  %897 = fmul double 3.000000e+00, %800
  %898 = fmul double %897, %893
  %899 = fmul double 2.000000e+00, %894
  %900 = fadd double %898, %899
  %901 = fmul double %900, %800
  %902 = fadd double %901, %895
  %903 = fmul double -2.000000e+00, %902
  %904 = sext i32 %732 to i64
  %905 = getelementptr inbounds %class.Vector* %276, i64 %904
  %906 = fmul double %903, %738
  %907 = fmul double %906, %738
  %908 = fadd double %fullElectVirial_xx.1, %907
  %909 = fmul double %906, %743
  %910 = fadd double %fullElectVirial_xy.1, %909
  %911 = fmul double %906, %749
  %912 = fadd double %fullElectVirial_xz.1, %911
  %913 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %914 = load double* %913, align 8
  %915 = fadd double %914, %906
  store double %915, double* %913, align 8
  %916 = getelementptr inbounds %class.Vector* %905, i32 0, i32 0
  %917 = load double* %916, align 8
  %918 = fsub double %917, %906
  store double %918, double* %916, align 8
  %919 = fmul double %903, %743
  %920 = fmul double %919, %743
  %921 = fadd double %fullElectVirial_yy.1, %920
  %922 = fmul double %919, %749
  %923 = fadd double %fullElectVirial_yz.1, %922
  %924 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %925 = load double* %924, align 8
  %926 = fadd double %925, %919
  store double %926, double* %924, align 8
  %927 = getelementptr inbounds %class.Vector* %905, i32 0, i32 1
  %928 = load double* %927, align 8
  %929 = fsub double %928, %919
  store double %929, double* %927, align 8
  %930 = fmul double %903, %749
  %931 = fmul double %930, %749
  %932 = fadd double %fullElectVirial_zz.1, %931
  %933 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %934 = load double* %933, align 8
  %935 = fadd double %934, %930
  store double %935, double* %933, align 8
  %936 = getelementptr inbounds %class.Vector* %905, i32 0, i32 2
  %937 = load double* %936, align 8
  %938 = fsub double %937, %930
  store double %938, double* %936, align 8
  br label %939

; <label>:939                                     ; preds = %729
  %940 = add nsw i32 %k18.1, 1
  br label %727

; <label>:941                                     ; preds = %727
  %942 = ptrtoint i32* %plim.0 to i64
  %943 = ptrtoint i32* %264 to i64
  %944 = sub i64 %942, %943
  %945 = sdiv exact i64 %944, 4
  %946 = trunc i64 %945 to i32
  br label %947

; <label>:947                                     ; preds = %1181, %941
  %k18.2 = phi i32 [ 0, %941 ], [ %1182, %1181 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %941 ], [ %1174, %1181 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %941 ], [ %1165, %1181 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %941 ], [ %1163, %1181 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %941 ], [ %1154, %1181 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %941 ], [ %1152, %1181 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %941 ], [ %1150, %1181 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %941 ], [ %1103, %1181 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %941 ], [ %1094, %1181 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %941 ], [ %1092, %1181 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %941 ], [ %1083, %1181 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %941 ], [ %1081, %1181 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %941 ], [ %1079, %1181 ]
  %948 = icmp slt i32 %k18.2, %946
  br i1 %948, label %949, label %1183

; <label>:949                                     ; preds = %947
  %950 = sext i32 %k18.2 to i64
  %951 = getelementptr inbounds i32* %264, i64 %950
  %952 = load i32* %951, align 4
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds %struct.CompAtom* %37, i64 %953
  %955 = getelementptr inbounds %struct.CompAtom* %954, i32 0, i32 0
  %956 = getelementptr inbounds %class.Vector* %955, i32 0, i32 0
  %957 = load double* %956, align 8
  %958 = fsub double %310, %957
  %959 = fmul double %958, %958
  %960 = getelementptr inbounds %struct.CompAtom* %954, i32 0, i32 0
  %961 = getelementptr inbounds %class.Vector* %960, i32 0, i32 1
  %962 = load double* %961, align 8
  %963 = fsub double %313, %962
  %964 = fmul double %963, %963
  %965 = fadd double %959, %964
  %966 = getelementptr inbounds %struct.CompAtom* %954, i32 0, i32 0
  %967 = getelementptr inbounds %class.Vector* %966, i32 0, i32 2
  %968 = load double* %967, align 8
  %969 = fsub double %316, %968
  %970 = fmul double %969, %969
  %971 = fadd double %965, %970
  %972 = fptrunc double %971 to float
  %973 = bitcast %union.anon.4* %r2f32 to float*
  store float %972, float* %973, align 4
  %974 = bitcast %union.anon.4* %r2f32 to i32*
  %975 = load i32* %974, align 4
  %976 = ashr i32 %975, 17
  %977 = add nsw i32 %976, %25
  %978 = getelementptr inbounds %struct.CompAtom* %954, i32 0, i32 2
  %979 = load i32* %978, align 4
  %980 = and i32 %979, 4194303
  %981 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %980)
  %982 = zext i16 %981 to i32
  %983 = mul nsw i32 2, %982
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %984
  %986 = getelementptr inbounds %"struct.LJTable::TableEntry"* %985, i64 1
  %987 = mul nsw i32 16, %977
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds double* %14, i64 %988
  %990 = getelementptr inbounds double* %989, i64 0
  %991 = load double* %990, align 8
  %992 = mul nsw i32 16, %977
  %993 = sext i32 %992 to i64
  %994 = getelementptr inbounds double* %14, i64 %993
  %995 = getelementptr inbounds double* %994, i64 4
  %996 = getelementptr inbounds double* %995, i64 0
  %997 = load double* %996, align 8
  %998 = mul nsw i32 16, %977
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds double* %14, i64 %999
  %1001 = getelementptr inbounds double* %1000, i64 8
  %1002 = getelementptr inbounds double* %1001, i64 0
  %1003 = load double* %1002, align 8
  %1004 = mul nsw i32 16, %977
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds double* %14, i64 %1005
  %1007 = getelementptr inbounds double* %1006, i64 8
  %1008 = getelementptr inbounds double* %1007, i64 4
  %1009 = getelementptr inbounds double* %1008, i64 0
  %1010 = load double* %1009, align 8
  %1011 = bitcast %union.anon.4* %r2f32 to i32*
  %1012 = load i32* %1011, align 4
  %1013 = and i32 %1012, -131072
  store i32 %1013, i32* %1011, align 4
  %1014 = getelementptr inbounds %struct.CompAtom* %954, i32 0, i32 1
  %1015 = load float* %1014, align 4
  %1016 = fpext float %1015 to double
  %1017 = fmul double %519, %1016
  %1018 = bitcast %union.anon.4* %r2f32 to float*
  %1019 = load float* %1018, align 4
  %1020 = fpext float %1019 to double
  %1021 = fsub double %971, %1020
  %1022 = getelementptr inbounds %"struct.LJTable::TableEntry"* %986, i32 0, i32 0
  %1023 = load double* %1022, align 8
  %1024 = fmul double %16, %1023
  %1025 = getelementptr inbounds %"struct.LJTable::TableEntry"* %986, i32 0, i32 1
  %1026 = load double* %1025, align 8
  %1027 = fmul double %16, %1026
  %1028 = fmul double %1024, %991
  %1029 = fmul double %1027, %997
  %1030 = fsub double %1028, %1029
  %1031 = getelementptr inbounds double* %989, i64 3
  %1032 = load double* %1031, align 8
  %1033 = fmul double %1024, %1032
  %1034 = getelementptr inbounds double* %995, i64 3
  %1035 = load double* %1034, align 8
  %1036 = fmul double %1027, %1035
  %1037 = fsub double %1033, %1036
  %1038 = getelementptr inbounds double* %989, i64 2
  %1039 = load double* %1038, align 8
  %1040 = fmul double %1024, %1039
  %1041 = getelementptr inbounds double* %995, i64 2
  %1042 = load double* %1041, align 8
  %1043 = fmul double %1027, %1042
  %1044 = fsub double %1040, %1043
  %1045 = getelementptr inbounds double* %989, i64 1
  %1046 = load double* %1045, align 8
  %1047 = fmul double %1024, %1046
  %1048 = getelementptr inbounds double* %995, i64 1
  %1049 = load double* %1048, align 8
  %1050 = fmul double %1027, %1049
  %1051 = fsub double %1047, %1050
  %1052 = fsub double 1.000000e+00, %18
  %1053 = fmul double %1052, %1017
  %1054 = fmul double %1003, %1053
  %1055 = getelementptr inbounds double* %1001, i64 3
  %1056 = load double* %1055, align 8
  %1057 = fmul double %1053, %1056
  %1058 = getelementptr inbounds double* %1001, i64 2
  %1059 = load double* %1058, align 8
  %1060 = fmul double %1053, %1059
  %1061 = getelementptr inbounds double* %1001, i64 1
  %1062 = load double* %1061, align 8
  %1063 = fmul double %1053, %1062
  %1064 = fadd double %1057, %1037
  %1065 = fadd double %1060, %1044
  %1066 = fadd double %1063, %1051
  %1067 = fadd double %1054, %1030
  %1068 = fmul double 3.000000e+00, %1021
  %1069 = fmul double %1068, %1064
  %1070 = fmul double 2.000000e+00, %1065
  %1071 = fadd double %1069, %1070
  %1072 = fmul double %1071, %1021
  %1073 = fadd double %1072, %1066
  %1074 = fmul double -2.000000e+00, %1073
  %1075 = sext i32 %952 to i64
  %1076 = getelementptr inbounds %class.Vector* %270, i64 %1075
  %1077 = fmul double %1074, %958
  %1078 = fmul double %1077, %958
  %1079 = fadd double %virial_xx.2, %1078
  %1080 = fmul double %1077, %963
  %1081 = fadd double %virial_xy.2, %1080
  %1082 = fmul double %1077, %969
  %1083 = fadd double %virial_xz.2, %1082
  %1084 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %1085 = load double* %1084, align 8
  %1086 = fadd double %1085, %1077
  store double %1086, double* %1084, align 8
  %1087 = getelementptr inbounds %class.Vector* %1076, i32 0, i32 0
  %1088 = load double* %1087, align 8
  %1089 = fsub double %1088, %1077
  store double %1089, double* %1087, align 8
  %1090 = fmul double %1074, %963
  %1091 = fmul double %1090, %963
  %1092 = fadd double %virial_yy.2, %1091
  %1093 = fmul double %1090, %969
  %1094 = fadd double %virial_yz.2, %1093
  %1095 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %1096 = load double* %1095, align 8
  %1097 = fadd double %1096, %1090
  store double %1097, double* %1095, align 8
  %1098 = getelementptr inbounds %class.Vector* %1076, i32 0, i32 1
  %1099 = load double* %1098, align 8
  %1100 = fsub double %1099, %1090
  store double %1100, double* %1098, align 8
  %1101 = fmul double %1074, %969
  %1102 = fmul double %1101, %969
  %1103 = fadd double %virial_zz.2, %1102
  %1104 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %1105 = load double* %1104, align 8
  %1106 = fadd double %1105, %1101
  store double %1106, double* %1104, align 8
  %1107 = getelementptr inbounds %class.Vector* %1076, i32 0, i32 2
  %1108 = load double* %1107, align 8
  %1109 = fsub double %1108, %1101
  store double %1109, double* %1107, align 8
  %1110 = getelementptr inbounds double* %1008, i64 1
  %1111 = load double* %1110, align 8
  %1112 = getelementptr inbounds double* %1008, i64 2
  %1113 = load double* %1112, align 8
  %1114 = getelementptr inbounds double* %1008, i64 3
  %1115 = load double* %1114, align 8
  %1116 = mul nsw i32 4, %977
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds double* %15, i64 %1117
  %1119 = getelementptr inbounds double* %1118, i64 0
  %1120 = load double* %1119, align 8
  %1121 = fmul double %18, %1120
  %1122 = fsub double %1010, %1121
  %1123 = getelementptr inbounds double* %1118, i64 1
  %1124 = load double* %1123, align 8
  %1125 = fmul double %18, %1124
  %1126 = fsub double %1111, %1125
  %1127 = getelementptr inbounds double* %1118, i64 2
  %1128 = load double* %1127, align 8
  %1129 = fmul double %18, %1128
  %1130 = fsub double %1113, %1129
  %1131 = getelementptr inbounds double* %1118, i64 3
  %1132 = load double* %1131, align 8
  %1133 = fmul double %18, %1132
  %1134 = fsub double %1115, %1133
  %1135 = fmul double %1134, %1017
  %1136 = fmul double %1130, %1017
  %1137 = fmul double %1126, %1017
  %1138 = fmul double %1122, %1017
  %1139 = fmul double 3.000000e+00, %1021
  %1140 = fmul double %1139, %1135
  %1141 = fmul double 2.000000e+00, %1136
  %1142 = fadd double %1140, %1141
  %1143 = fmul double %1142, %1021
  %1144 = fadd double %1143, %1137
  %1145 = fmul double -2.000000e+00, %1144
  %1146 = sext i32 %952 to i64
  %1147 = getelementptr inbounds %class.Vector* %276, i64 %1146
  %1148 = fmul double %1145, %958
  %1149 = fmul double %1148, %958
  %1150 = fadd double %fullElectVirial_xx.2, %1149
  %1151 = fmul double %1148, %963
  %1152 = fadd double %fullElectVirial_xy.2, %1151
  %1153 = fmul double %1148, %969
  %1154 = fadd double %fullElectVirial_xz.2, %1153
  %1155 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1156 = load double* %1155, align 8
  %1157 = fadd double %1156, %1148
  store double %1157, double* %1155, align 8
  %1158 = getelementptr inbounds %class.Vector* %1147, i32 0, i32 0
  %1159 = load double* %1158, align 8
  %1160 = fsub double %1159, %1148
  store double %1160, double* %1158, align 8
  %1161 = fmul double %1145, %963
  %1162 = fmul double %1161, %963
  %1163 = fadd double %fullElectVirial_yy.2, %1162
  %1164 = fmul double %1161, %969
  %1165 = fadd double %fullElectVirial_yz.2, %1164
  %1166 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1167 = load double* %1166, align 8
  %1168 = fadd double %1167, %1161
  store double %1168, double* %1166, align 8
  %1169 = getelementptr inbounds %class.Vector* %1147, i32 0, i32 1
  %1170 = load double* %1169, align 8
  %1171 = fsub double %1170, %1161
  store double %1171, double* %1169, align 8
  %1172 = fmul double %1145, %969
  %1173 = fmul double %1172, %969
  %1174 = fadd double %fullElectVirial_zz.2, %1173
  %1175 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1176 = load double* %1175, align 8
  %1177 = fadd double %1176, %1172
  store double %1177, double* %1175, align 8
  %1178 = getelementptr inbounds %class.Vector* %1147, i32 0, i32 2
  %1179 = load double* %1178, align 8
  %1180 = fsub double %1179, %1172
  store double %1180, double* %1178, align 8
  br label %1181

; <label>:1181                                    ; preds = %949
  %1182 = add nsw i32 %k18.2, 1
  br label %947

; <label>:1183                                    ; preds = %947
  %1184 = ptrtoint i32* %plix.0 to i64
  %1185 = ptrtoint i32* %250 to i64
  %1186 = sub i64 %1184, %1185
  %1187 = sdiv exact i64 %1186, 4
  %1188 = trunc i64 %1187 to i32
  br label %1189

; <label>:1189                                    ; preds = %1305, %1183
  %k18.3 = phi i32 [ 0, %1183 ], [ %1306, %1305 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1183 ], [ %1298, %1305 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1183 ], [ %1289, %1305 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1183 ], [ %1287, %1305 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1183 ], [ %1278, %1305 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1183 ], [ %1276, %1305 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1183 ], [ %1274, %1305 ]
  %1190 = icmp slt i32 %k18.3, %1188
  br i1 %1190, label %1191, label %1307

; <label>:1191                                    ; preds = %1189
  %1192 = sext i32 %k18.3 to i64
  %1193 = getelementptr inbounds i32* %250, i64 %1192
  %1194 = load i32* %1193, align 4
  %1195 = sext i32 %1194 to i64
  %1196 = getelementptr inbounds %struct.CompAtom* %37, i64 %1195
  %1197 = getelementptr inbounds %struct.CompAtom* %1196, i32 0, i32 0
  %1198 = getelementptr inbounds %class.Vector* %1197, i32 0, i32 0
  %1199 = load double* %1198, align 8
  %1200 = fsub double %310, %1199
  %1201 = fmul double %1200, %1200
  %1202 = getelementptr inbounds %struct.CompAtom* %1196, i32 0, i32 0
  %1203 = getelementptr inbounds %class.Vector* %1202, i32 0, i32 1
  %1204 = load double* %1203, align 8
  %1205 = fsub double %313, %1204
  %1206 = fmul double %1205, %1205
  %1207 = fadd double %1201, %1206
  %1208 = getelementptr inbounds %struct.CompAtom* %1196, i32 0, i32 0
  %1209 = getelementptr inbounds %class.Vector* %1208, i32 0, i32 2
  %1210 = load double* %1209, align 8
  %1211 = fsub double %316, %1210
  %1212 = fmul double %1211, %1211
  %1213 = fadd double %1207, %1212
  %1214 = fptrunc double %1213 to float
  %1215 = bitcast %union.anon.5* %r2f75 to float*
  store float %1214, float* %1215, align 4
  %1216 = bitcast %union.anon.5* %r2f75 to i32*
  %1217 = load i32* %1216, align 4
  %1218 = ashr i32 %1217, 17
  %1219 = add nsw i32 %1218, %25
  %1220 = mul nsw i32 16, %1219
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds double* %14, i64 %1221
  %1223 = getelementptr inbounds double* %1222, i64 8
  %1224 = getelementptr inbounds double* %1223, i64 4
  %1225 = getelementptr inbounds double* %1224, i64 0
  %1226 = load double* %1225, align 8
  %1227 = bitcast %union.anon.5* %r2f75 to i32*
  %1228 = load i32* %1227, align 4
  %1229 = and i32 %1228, -131072
  store i32 %1229, i32* %1227, align 4
  %1230 = getelementptr inbounds %struct.CompAtom* %1196, i32 0, i32 1
  %1231 = load float* %1230, align 4
  %1232 = fpext float %1231 to double
  %1233 = fmul double %519, %1232
  %1234 = bitcast %union.anon.5* %r2f75 to float*
  %1235 = load float* %1234, align 4
  %1236 = fpext float %1235 to double
  %1237 = fsub double %1213, %1236
  %1238 = getelementptr inbounds double* %1224, i64 1
  %1239 = load double* %1238, align 8
  %1240 = getelementptr inbounds double* %1224, i64 2
  %1241 = load double* %1240, align 8
  %1242 = getelementptr inbounds double* %1224, i64 3
  %1243 = load double* %1242, align 8
  %1244 = mul nsw i32 4, %1219
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds double* %15, i64 %1245
  %1247 = getelementptr inbounds double* %1246, i64 0
  %1248 = load double* %1247, align 8
  %1249 = fsub double %1226, %1248
  %1250 = getelementptr inbounds double* %1246, i64 1
  %1251 = load double* %1250, align 8
  %1252 = fsub double %1239, %1251
  %1253 = getelementptr inbounds double* %1246, i64 2
  %1254 = load double* %1253, align 8
  %1255 = fsub double %1241, %1254
  %1256 = getelementptr inbounds double* %1246, i64 3
  %1257 = load double* %1256, align 8
  %1258 = fsub double %1243, %1257
  %1259 = fmul double %1258, %1233
  %1260 = fmul double %1255, %1233
  %1261 = fmul double %1252, %1233
  %1262 = fmul double %1249, %1233
  %1263 = fmul double 3.000000e+00, %1237
  %1264 = fmul double %1263, %1259
  %1265 = fmul double 2.000000e+00, %1260
  %1266 = fadd double %1264, %1265
  %1267 = fmul double %1266, %1237
  %1268 = fadd double %1267, %1261
  %1269 = fmul double -2.000000e+00, %1268
  %1270 = sext i32 %1194 to i64
  %1271 = getelementptr inbounds %class.Vector* %276, i64 %1270
  %1272 = fmul double %1269, %1200
  %1273 = fmul double %1272, %1200
  %1274 = fadd double %fullElectVirial_xx.3, %1273
  %1275 = fmul double %1272, %1205
  %1276 = fadd double %fullElectVirial_xy.3, %1275
  %1277 = fmul double %1272, %1211
  %1278 = fadd double %fullElectVirial_xz.3, %1277
  %1279 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1280 = load double* %1279, align 8
  %1281 = fadd double %1280, %1272
  store double %1281, double* %1279, align 8
  %1282 = getelementptr inbounds %class.Vector* %1271, i32 0, i32 0
  %1283 = load double* %1282, align 8
  %1284 = fsub double %1283, %1272
  store double %1284, double* %1282, align 8
  %1285 = fmul double %1269, %1205
  %1286 = fmul double %1285, %1205
  %1287 = fadd double %fullElectVirial_yy.3, %1286
  %1288 = fmul double %1285, %1211
  %1289 = fadd double %fullElectVirial_yz.3, %1288
  %1290 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1291 = load double* %1290, align 8
  %1292 = fadd double %1291, %1285
  store double %1292, double* %1290, align 8
  %1293 = getelementptr inbounds %class.Vector* %1271, i32 0, i32 1
  %1294 = load double* %1293, align 8
  %1295 = fsub double %1294, %1285
  store double %1295, double* %1293, align 8
  %1296 = fmul double %1269, %1211
  %1297 = fmul double %1296, %1211
  %1298 = fadd double %fullElectVirial_zz.3, %1297
  %1299 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1300 = load double* %1299, align 8
  %1301 = fadd double %1300, %1296
  store double %1301, double* %1299, align 8
  %1302 = getelementptr inbounds %class.Vector* %1271, i32 0, i32 2
  %1303 = load double* %1302, align 8
  %1304 = fsub double %1303, %1296
  store double %1304, double* %1302, align 8
  br label %1305

; <label>:1305                                    ; preds = %1191
  %1306 = add nsw i32 %k18.3, 1
  br label %1189

; <label>:1307                                    ; preds = %1189
  br label %1308

; <label>:1308                                    ; preds = %1307, %497, %348
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %348 ], [ %pairlistindex.1, %1307 ], [ %476, %497 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %348 ], [ %pairlistoffset.1, %1307 ], [ 0, %497 ]
  %pairCount.3 = phi i32 [ %344, %348 ], [ %pairCount.2, %1307 ], [ %pairCount.1, %497 ]
  %i.2 = phi i32 [ %350, %348 ], [ %i.1, %1307 ], [ %500, %497 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %348 ], [ %fullElectVirial_zz.3, %1307 ], [ %fullElectVirial_zz.0, %497 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %348 ], [ %fullElectVirial_yz.3, %1307 ], [ %fullElectVirial_yz.0, %497 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %348 ], [ %fullElectVirial_yy.3, %1307 ], [ %fullElectVirial_yy.0, %497 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %348 ], [ %fullElectVirial_xz.3, %1307 ], [ %fullElectVirial_xz.0, %497 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %348 ], [ %fullElectVirial_xy.3, %1307 ], [ %fullElectVirial_xy.0, %497 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %348 ], [ %fullElectVirial_xx.3, %1307 ], [ %fullElectVirial_xx.0, %497 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %348 ], [ %virial_zz.2, %1307 ], [ %virial_zz.0, %497 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %348 ], [ %virial_yz.2, %1307 ], [ %virial_yz.0, %497 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %348 ], [ %virial_yy.2, %1307 ], [ %virial_yy.0, %497 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %348 ], [ %virial_xz.2, %1307 ], [ %virial_xz.0, %497 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %348 ], [ %virial_xy.2, %1307 ], [ %virial_xy.0, %497 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %348 ], [ %virial_xx.2, %1307 ], [ %virial_xx.0, %497 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %348 ], [ %721, %1307 ], [ %exclChecksum.0, %497 ]
  %1309 = add nsw i32 %i.2, 1
  br label %290

; <label>:1310                                    ; preds = %290
  %1311 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1312 = icmp ne i32* %51, %1311
  br i1 %1312, label %1313, label %1318

; <label>:1313                                    ; preds = %1310
  %1314 = icmp eq i32* %51, null
  br i1 %1314, label %1317, label %1315

; <label>:1315                                    ; preds = %1313
  %1316 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1316) #8
  br label %1317

; <label>:1317                                    ; preds = %1315, %1313
  br label %1318

; <label>:1318                                    ; preds = %1317, %1310
  %1319 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1320 = icmp ne i32* %65, %1319
  br i1 %1320, label %1321, label %1326

; <label>:1321                                    ; preds = %1318
  %1322 = icmp eq i32* %65, null
  br i1 %1322, label %1325, label %1323

; <label>:1323                                    ; preds = %1321
  %1324 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1324) #8
  br label %1325

; <label>:1325                                    ; preds = %1323, %1321
  br label %1326

; <label>:1326                                    ; preds = %1325, %1318
  %1327 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1328 = icmp ne i32* %79, %1327
  br i1 %1328, label %1329, label %1334

; <label>:1329                                    ; preds = %1326
  %1330 = icmp eq i32* %79, null
  br i1 %1330, label %1333, label %1331

; <label>:1331                                    ; preds = %1329
  %1332 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1332) #8
  br label %1333

; <label>:1333                                    ; preds = %1331, %1329
  br label %1334

; <label>:1334                                    ; preds = %1333, %1326
  %1335 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1336 = icmp ne i32* %208, %1335
  br i1 %1336, label %1337, label %1342

; <label>:1337                                    ; preds = %1334
  %1338 = icmp eq i32* %208, null
  br i1 %1338, label %1341, label %1339

; <label>:1339                                    ; preds = %1337
  %1340 = bitcast i32* %208 to i8*
  call void @_ZdaPv(i8* %1340) #8
  br label %1341

; <label>:1341                                    ; preds = %1339, %1337
  br label %1342

; <label>:1342                                    ; preds = %1341, %1334
  %1343 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1344 = icmp ne i32* %222, %1343
  br i1 %1344, label %1345, label %1350

; <label>:1345                                    ; preds = %1342
  %1346 = icmp eq i32* %222, null
  br i1 %1346, label %1349, label %1347

; <label>:1347                                    ; preds = %1345
  %1348 = bitcast i32* %222 to i8*
  call void @_ZdaPv(i8* %1348) #8
  br label %1349

; <label>:1349                                    ; preds = %1347, %1345
  br label %1350

; <label>:1350                                    ; preds = %1349, %1342
  %1351 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1352 = icmp ne i32* %236, %1351
  br i1 %1352, label %1353, label %1358

; <label>:1353                                    ; preds = %1350
  %1354 = icmp eq i32* %236, null
  br i1 %1354, label %1357, label %1355

; <label>:1355                                    ; preds = %1353
  %1356 = bitcast i32* %236 to i8*
  call void @_ZdaPv(i8* %1356) #8
  br label %1357

; <label>:1357                                    ; preds = %1355, %1353
  br label %1358

; <label>:1358                                    ; preds = %1357, %1350
  %1359 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1360 = icmp ne i32* %250, %1359
  br i1 %1360, label %1361, label %1366

; <label>:1361                                    ; preds = %1358
  %1362 = icmp eq i32* %250, null
  br i1 %1362, label %1365, label %1363

; <label>:1363                                    ; preds = %1361
  %1364 = bitcast i32* %250 to i8*
  call void @_ZdaPv(i8* %1364) #8
  br label %1365

; <label>:1365                                    ; preds = %1363, %1361
  br label %1366

; <label>:1366                                    ; preds = %1365, %1358
  %1367 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1368 = icmp ne i32* %264, %1367
  br i1 %1368, label %1369, label %1374

; <label>:1369                                    ; preds = %1366
  %1370 = icmp eq i32* %264, null
  br i1 %1370, label %1373, label %1371

; <label>:1371                                    ; preds = %1369
  %1372 = bitcast i32* %264 to i8*
  call void @_ZdaPv(i8* %1372) #8
  br label %1373

; <label>:1373                                    ; preds = %1371, %1369
  br label %1374

; <label>:1374                                    ; preds = %1373, %1366
  %1375 = sitofp i32 %exclChecksum.0 to double
  %1376 = getelementptr inbounds double* %6, i64 22
  %1377 = load double* %1376, align 8
  %1378 = fadd double %1377, %1375
  store double %1378, double* %1376, align 8
  %1379 = getelementptr inbounds double* %6, i64 3
  %1380 = load double* %1379, align 8
  %1381 = fadd double %1380, %virial_xx.0
  store double %1381, double* %1379, align 8
  %1382 = getelementptr inbounds double* %6, i64 4
  %1383 = load double* %1382, align 8
  %1384 = fadd double %1383, %virial_xy.0
  store double %1384, double* %1382, align 8
  %1385 = getelementptr inbounds double* %6, i64 5
  %1386 = load double* %1385, align 8
  %1387 = fadd double %1386, %virial_xz.0
  store double %1387, double* %1385, align 8
  %1388 = getelementptr inbounds double* %6, i64 6
  %1389 = load double* %1388, align 8
  %1390 = fadd double %1389, %virial_xy.0
  store double %1390, double* %1388, align 8
  %1391 = getelementptr inbounds double* %6, i64 7
  %1392 = load double* %1391, align 8
  %1393 = fadd double %1392, %virial_yy.0
  store double %1393, double* %1391, align 8
  %1394 = getelementptr inbounds double* %6, i64 8
  %1395 = load double* %1394, align 8
  %1396 = fadd double %1395, %virial_yz.0
  store double %1396, double* %1394, align 8
  %1397 = getelementptr inbounds double* %6, i64 9
  %1398 = load double* %1397, align 8
  %1399 = fadd double %1398, %virial_xz.0
  store double %1399, double* %1397, align 8
  %1400 = getelementptr inbounds double* %6, i64 10
  %1401 = load double* %1400, align 8
  %1402 = fadd double %1401, %virial_yz.0
  store double %1402, double* %1400, align 8
  %1403 = getelementptr inbounds double* %6, i64 11
  %1404 = load double* %1403, align 8
  %1405 = fadd double %1404, %virial_zz.0
  store double %1405, double* %1403, align 8
  %1406 = getelementptr inbounds double* %6, i64 12
  %1407 = load double* %1406, align 8
  %1408 = fadd double %1407, %fullElectVirial_xx.0
  store double %1408, double* %1406, align 8
  %1409 = getelementptr inbounds double* %6, i64 13
  %1410 = load double* %1409, align 8
  %1411 = fadd double %1410, %fullElectVirial_xy.0
  store double %1411, double* %1409, align 8
  %1412 = getelementptr inbounds double* %6, i64 14
  %1413 = load double* %1412, align 8
  %1414 = fadd double %1413, %fullElectVirial_xz.0
  store double %1414, double* %1412, align 8
  %1415 = getelementptr inbounds double* %6, i64 15
  %1416 = load double* %1415, align 8
  %1417 = fadd double %1416, %fullElectVirial_xy.0
  store double %1417, double* %1415, align 8
  %1418 = getelementptr inbounds double* %6, i64 16
  %1419 = load double* %1418, align 8
  %1420 = fadd double %1419, %fullElectVirial_yy.0
  store double %1420, double* %1418, align 8
  %1421 = getelementptr inbounds double* %6, i64 17
  %1422 = load double* %1421, align 8
  %1423 = fadd double %1422, %fullElectVirial_yz.0
  store double %1423, double* %1421, align 8
  %1424 = getelementptr inbounds double* %6, i64 18
  %1425 = load double* %1424, align 8
  %1426 = fadd double %1425, %fullElectVirial_xz.0
  store double %1426, double* %1424, align 8
  %1427 = getelementptr inbounds double* %6, i64 19
  %1428 = load double* %1427, align 8
  %1429 = fadd double %1428, %fullElectVirial_yz.0
  store double %1429, double* %1427, align 8
  %1430 = getelementptr inbounds double* %6, i64 20
  %1431 = load double* %1430, align 8
  %1432 = fadd double %1431, %fullElectVirial_zz.0
  store double %1432, double* %1430, align 8
  br label %1433

; <label>:1433                                    ; preds = %1374, %183, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil26calc_pair_energy_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.6, align 4
  %r2f32 = alloca %union.anon.7, align 4
  %r2f78 = alloca %union.anon.8, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1491

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %185

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  br label %139

; <label>:139                                     ; preds = %155, %138
  %all_fixed.2 = phi i32 [ %all_fixed.0, %138 ], [ %all_fixed.3, %155 ]
  %i.0 = phi i32 [ 0, %138 ], [ %156, %155 ]
  %140 = icmp ne i32 %all_fixed.2, 0
  br i1 %140, label %141, label %143

; <label>:141                                     ; preds = %139
  %142 = icmp slt i32 %i.0, %28
  br label %143

; <label>:143                                     ; preds = %141, %139
  %144 = phi i1 [ false, %139 ], [ %142, %141 ]
  br i1 %144, label %145, label %157

; <label>:145                                     ; preds = %143
  %146 = sext i32 %i.0 to i64
  %147 = getelementptr inbounds %struct.CompAtom* %34, i64 %146
  %148 = getelementptr inbounds %struct.CompAtom* %147, i32 0, i32 2
  %149 = load i32* %148, align 4
  %150 = lshr i32 %149, 26
  %151 = and i32 %150, 1
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

; <label>:153                                     ; preds = %145
  br label %154

; <label>:154                                     ; preds = %153, %145
  %all_fixed.3 = phi i32 [ %all_fixed.2, %145 ], [ 0, %153 ]
  br label %155

; <label>:155                                     ; preds = %154
  %156 = add nsw i32 %i.0, 1
  br label %139

; <label>:157                                     ; preds = %143
  %158 = icmp ne i32 %all_fixed.2, 0
  br i1 %158, label %159, label %184

; <label>:159                                     ; preds = %157
  %160 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %161 = icmp ne i32* %51, %160
  br i1 %161, label %162, label %167

; <label>:162                                     ; preds = %159
  %163 = icmp eq i32* %51, null
  br i1 %163, label %166, label %164

; <label>:164                                     ; preds = %162
  %165 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %165) #8
  br label %166

; <label>:166                                     ; preds = %164, %162
  br label %167

; <label>:167                                     ; preds = %166, %159
  %168 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %169 = icmp ne i32* %65, %168
  br i1 %169, label %170, label %175

; <label>:170                                     ; preds = %167
  %171 = icmp eq i32* %65, null
  br i1 %171, label %174, label %172

; <label>:172                                     ; preds = %170
  %173 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %173) #8
  br label %174

; <label>:174                                     ; preds = %172, %170
  br label %175

; <label>:175                                     ; preds = %174, %167
  %176 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %177 = icmp ne i32* %79, %176
  br i1 %177, label %178, label %183

; <label>:178                                     ; preds = %175
  %179 = icmp eq i32* %79, null
  br i1 %179, label %182, label %180

; <label>:180                                     ; preds = %178
  %181 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %181) #8
  br label %182

; <label>:182                                     ; preds = %180, %178
  br label %183

; <label>:183                                     ; preds = %182, %175
  br label %1491

; <label>:184                                     ; preds = %157
  br label %185

; <label>:185                                     ; preds = %184, %114
  %fixg.2 = phi i32 [ %fixg.0, %184 ], [ 0, %114 ]
  %186 = icmp ne i32 %fixg.2, 0
  br i1 %186, label %187, label %194

; <label>:187                                     ; preds = %185
  %188 = sub nsw i32 %fixg.2, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32* %65, i64 %189
  %191 = load i32* %190, align 4
  %192 = sext i32 %fixg.2 to i64
  %193 = getelementptr inbounds i32* %65, i64 %192
  store i32 %191, i32* %193, align 4
  br label %194

; <label>:194                                     ; preds = %187, %185
  %195 = icmp slt i32 %31, 1000
  br i1 %195, label %196, label %198

; <label>:196                                     ; preds = %194
  %197 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %207

; <label>:198                                     ; preds = %194
  %199 = add nsw i32 %31, 5
  %200 = sext i32 %199 to i64
  %201 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %200, i64 4)
  %202 = extractvalue { i64, i1 } %201, 1
  %203 = extractvalue { i64, i1 } %201, 0
  %204 = select i1 %202, i64 -1, i64 %203
  %205 = call noalias i8* @_Znam(i64 %204) #9
  %206 = bitcast i8* %205 to i32*
  br label %207

; <label>:207                                     ; preds = %198, %196
  %208 = phi i32* [ %197, %196 ], [ %206, %198 ]
  %209 = icmp slt i32 %31, 1000
  br i1 %209, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %221

; <label>:212                                     ; preds = %207
  %213 = add nsw i32 %31, 5
  %214 = sext i32 %213 to i64
  %215 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %214, i64 4)
  %216 = extractvalue { i64, i1 } %215, 1
  %217 = extractvalue { i64, i1 } %215, 0
  %218 = select i1 %216, i64 -1, i64 %217
  %219 = call noalias i8* @_Znam(i64 %218) #9
  %220 = bitcast i8* %219 to i32*
  br label %221

; <label>:221                                     ; preds = %212, %210
  %222 = phi i32* [ %211, %210 ], [ %220, %212 ]
  %223 = icmp slt i32 %31, 1000
  br i1 %223, label %224, label %226

; <label>:224                                     ; preds = %221
  %225 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %235

; <label>:226                                     ; preds = %221
  %227 = add nsw i32 %31, 5
  %228 = sext i32 %227 to i64
  %229 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %228, i64 4)
  %230 = extractvalue { i64, i1 } %229, 1
  %231 = extractvalue { i64, i1 } %229, 0
  %232 = select i1 %230, i64 -1, i64 %231
  %233 = call noalias i8* @_Znam(i64 %232) #9
  %234 = bitcast i8* %233 to i32*
  br label %235

; <label>:235                                     ; preds = %226, %224
  %236 = phi i32* [ %225, %224 ], [ %234, %226 ]
  %237 = icmp slt i32 %31, 1000
  br i1 %237, label %238, label %240

; <label>:238                                     ; preds = %235
  %239 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %249

; <label>:240                                     ; preds = %235
  %241 = add nsw i32 %31, 5
  %242 = sext i32 %241 to i64
  %243 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 4)
  %244 = extractvalue { i64, i1 } %243, 1
  %245 = extractvalue { i64, i1 } %243, 0
  %246 = select i1 %244, i64 -1, i64 %245
  %247 = call noalias i8* @_Znam(i64 %246) #9
  %248 = bitcast i8* %247 to i32*
  br label %249

; <label>:249                                     ; preds = %240, %238
  %250 = phi i32* [ %239, %238 ], [ %248, %240 ]
  %251 = icmp slt i32 %31, 1000
  br i1 %251, label %252, label %254

; <label>:252                                     ; preds = %249
  %253 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %263

; <label>:254                                     ; preds = %249
  %255 = add nsw i32 %31, 5
  %256 = sext i32 %255 to i64
  %257 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %256, i64 4)
  %258 = extractvalue { i64, i1 } %257, 1
  %259 = extractvalue { i64, i1 } %257, 0
  %260 = select i1 %258, i64 -1, i64 %259
  %261 = call noalias i8* @_Znam(i64 %260) #9
  %262 = bitcast i8* %261 to i32*
  br label %263

; <label>:263                                     ; preds = %254, %252
  %264 = phi i32* [ %253, %252 ], [ %262, %254 ]
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 0
  %267 = load %class.Vector** %266, align 8
  %268 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %269 = getelementptr inbounds [2 x %class.Vector*]* %268, i32 0, i64 1
  %270 = load %class.Vector** %269, align 8
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %272 = getelementptr inbounds [2 x %class.Vector*]* %271, i32 0, i64 0
  %273 = load %class.Vector** %272, align 8
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %275 = getelementptr inbounds [2 x %class.Vector*]* %274, i32 0, i64 1
  %276 = load %class.Vector** %275, align 8
  %277 = mul nsw i32 %28, %31
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %279 = load i32* %278, align 4
  %280 = mul nsw i32 %277, %279
  %281 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %282 = load i32* %281, align 4
  %283 = sdiv i32 %280, %282
  %284 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %285 = load i32* %284, align 4
  %286 = mul nsw i32 %277, %285
  %287 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %288 = load i32* %287, align 4
  %289 = sdiv i32 %286, %288
  br label %290

; <label>:290                                     ; preds = %1357, %263
  %pairlistindex.0 = phi i32 [ 0, %263 ], [ %pairlistindex.2, %1357 ]
  %pairlistoffset.0 = phi i32 [ 0, %263 ], [ %pairlistoffset.2, %1357 ]
  %pairCount.0 = phi i32 [ 0, %263 ], [ %pairCount.3, %1357 ]
  %i.1 = phi i32 [ 0, %263 ], [ %1358, %1357 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_zz.4, %1357 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yz.4, %1357 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_yy.4, %1357 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xz.4, %1357 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xy.4, %1357 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectVirial_xx.4, %1357 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %fullElectEnergy.4, %1357 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_zz.3, %1357 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yz.3, %1357 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_yy.3, %1357 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xz.3, %1357 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xy.3, %1357 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %263 ], [ %virial_xx.3, %1357 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %electEnergy.3, %1357 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %263 ], [ %vdwEnergy.3, %1357 ]
  %exclChecksum.0 = phi i32 [ 0, %263 ], [ %exclChecksum.9, %1357 ]
  %291 = icmp slt i32 %i.1, %28
  br i1 %291, label %292, label %1359

; <label>:292                                     ; preds = %290
  %293 = sext i32 %i.1 to i64
  %294 = getelementptr inbounds %struct.CompAtom* %34, i64 %293
  %295 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %296 = load i32* %295, align 4
  %297 = and i32 %296, 4194303
  %298 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %297)
  %299 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 0
  %300 = load i32* %299, align 4
  %301 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 1
  %302 = load i32* %301, align 4
  %303 = getelementptr inbounds %class.ExclusionCheck* %298, i32 0, i32 2
  %304 = load i8** %303, align 8
  %305 = sext i32 %300 to i64
  %306 = sub i64 0, %305
  %307 = getelementptr inbounds i8* %304, i64 %306
  %308 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %309 = getelementptr inbounds %class.Vector* %308, i32 0, i32 0
  %310 = load double* %309, align 8
  %311 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %312 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %313 = load double* %312, align 8
  %314 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 0
  %315 = getelementptr inbounds %class.Vector* %314, i32 0, i32 2
  %316 = load double* %315, align 8
  %317 = sext i32 %i.1 to i64
  %318 = getelementptr inbounds %class.Vector* %267, i64 %317
  %319 = sext i32 %i.1 to i64
  %320 = getelementptr inbounds %class.Vector* %273, i64 %319
  %321 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %322 = load i32* %321, align 4
  %323 = lshr i32 %322, 22
  %324 = and i32 %323, 7
  %325 = icmp ne i32 %324, 0
  br i1 %325, label %332, label %326

; <label>:326                                     ; preds = %292
  %327 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %328 = load i32* %327, align 4
  %329 = lshr i32 %328, 25
  %330 = and i32 %329, 1
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %332, label %502

; <label>:332                                     ; preds = %326, %292
  %333 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %334 = load i32* %333, align 4
  %335 = lshr i32 %334, 22
  %336 = and i32 %335, 7
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %352

; <label>:338                                     ; preds = %332
  %339 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %340 = load i32* %339, align 4
  %341 = lshr i32 %340, 22
  %342 = and i32 %341, 7
  %343 = mul nsw i32 %342, %31
  %344 = add nsw i32 %pairCount.0, %343
  %345 = icmp slt i32 %pairCount.0, %283
  br i1 %345, label %348, label %346

; <label>:346                                     ; preds = %338
  %347 = icmp sge i32 %pairCount.0, %289
  br i1 %347, label %348, label %351

; <label>:348                                     ; preds = %346, %338
  %349 = sub nsw i32 %342, 1
  %350 = add nsw i32 %i.1, %349
  br label %1357

; <label>:351                                     ; preds = %346
  br label %352

; <label>:352                                     ; preds = %351, %332
  %pairCount.1 = phi i32 [ %344, %351 ], [ %pairCount.0, %332 ]
  %353 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %354 = icmp ne i32 %353, 0
  br i1 %354, label %355, label %361

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %357 = load i32* %356, align 4
  %358 = lshr i32 %357, 27
  %359 = and i32 %358, 1
  %360 = icmp ne i32 %359, 0
  br label %361

; <label>:361                                     ; preds = %355, %352
  %362 = phi i1 [ false, %352 ], [ %360, %355 ]
  %363 = zext i1 %362 to i32
  %364 = sext i32 0 to i64
  %365 = getelementptr inbounds i32* %208, i64 %364
  %366 = icmp ne i32 %363, 0
  br i1 %366, label %367, label %368

; <label>:367                                     ; preds = %361
  br label %369

; <label>:368                                     ; preds = %361
  br label %369

; <label>:369                                     ; preds = %368, %367
  %370 = phi i32* [ %65, %367 ], [ %51, %368 ]
  %371 = icmp ne i32 %363, 0
  br i1 %371, label %372, label %373

; <label>:372                                     ; preds = %369
  br label %374

; <label>:373                                     ; preds = %369
  br label %374

; <label>:374                                     ; preds = %373, %372
  %375 = phi i32 [ %fixg.2, %372 ], [ %g.0, %373 ]
  %376 = icmp slt i32 0, %375
  br i1 %376, label %377, label %471

; <label>:377                                     ; preds = %374
  %378 = sext i32 0 to i64
  %379 = getelementptr inbounds i32* %370, i64 %378
  %380 = load i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.CompAtom* %37, i64 %381
  %383 = getelementptr inbounds %struct.CompAtom* %382, i32 0, i32 0
  %384 = getelementptr inbounds %class.Vector* %383, i32 0, i32 0
  %385 = load double* %384, align 8
  %386 = sext i32 %380 to i64
  %387 = getelementptr inbounds %struct.CompAtom* %37, i64 %386
  %388 = getelementptr inbounds %struct.CompAtom* %387, i32 0, i32 0
  %389 = getelementptr inbounds %class.Vector* %388, i32 0, i32 1
  %390 = load double* %389, align 8
  %391 = sext i32 %380 to i64
  %392 = getelementptr inbounds %struct.CompAtom* %37, i64 %391
  %393 = getelementptr inbounds %struct.CompAtom* %392, i32 0, i32 0
  %394 = getelementptr inbounds %class.Vector* %393, i32 0, i32 2
  %395 = load double* %394, align 8
  br label %396

; <label>:396                                     ; preds = %429, %377
  %g.3 = phi i32 [ 0, %377 ], [ %399, %429 ]
  %gli.0 = phi i32* [ %79, %377 ], [ %gli.1, %429 ]
  %j2.0 = phi i32 [ %380, %377 ], [ %402, %429 ]
  %p_j_x.0 = phi double [ %385, %377 ], [ %409, %429 ]
  %p_j_y.0 = phi double [ %390, %377 ], [ %417, %429 ]
  %p_j_z.0 = phi double [ %395, %377 ], [ %425, %429 ]
  %397 = icmp slt i32 %g.3, %375
  br i1 %397, label %398, label %430

; <label>:398                                     ; preds = %396
  %399 = add nsw i32 %g.3, 1
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32* %370, i64 %400
  %402 = load i32* %401, align 4
  %403 = fsub double %310, %p_j_x.0
  %404 = fmul double %403, %403
  %405 = sext i32 %402 to i64
  %406 = getelementptr inbounds %struct.CompAtom* %37, i64 %405
  %407 = getelementptr inbounds %struct.CompAtom* %406, i32 0, i32 0
  %408 = getelementptr inbounds %class.Vector* %407, i32 0, i32 0
  %409 = load double* %408, align 8
  %410 = fsub double %313, %p_j_y.0
  %411 = fmul double %410, %410
  %412 = fadd double %404, %411
  %413 = sext i32 %402 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %37, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 1
  %417 = load double* %416, align 8
  %418 = fsub double %316, %p_j_z.0
  %419 = fmul double %418, %418
  %420 = fadd double %412, %419
  %421 = sext i32 %402 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %37, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  %426 = fcmp ole double %420, %8
  br i1 %426, label %427, label %429

; <label>:427                                     ; preds = %398
  store i32 %j2.0, i32* %gli.0, align 4
  %428 = getelementptr inbounds i32* %gli.0, i32 1
  br label %429

; <label>:429                                     ; preds = %427, %398
  %gli.1 = phi i32* [ %428, %427 ], [ %gli.0, %398 ]
  br label %396

; <label>:430                                     ; preds = %396
  %431 = ptrtoint i32* %gli.0 to i64
  %432 = ptrtoint i32* %79 to i64
  %433 = sub i64 %431, %432
  %434 = sdiv exact i64 %433, 4
  %435 = trunc i64 %434 to i32
  br label %436

; <label>:436                                     ; preds = %468, %430
  %pli.0 = phi i32* [ %365, %430 ], [ %467, %468 ]
  %h.0 = phi i32 [ 0, %430 ], [ %469, %468 ]
  %437 = icmp slt i32 %h.0, %435
  br i1 %437, label %438, label %470

; <label>:438                                     ; preds = %436
  %439 = sext i32 %h.0 to i64
  %440 = getelementptr inbounds i32* %79, i64 %439
  %441 = load i32* %440, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %37, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 25
  %447 = and i32 %446, 1
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %450

; <label>:449                                     ; preds = %438
  br label %457

; <label>:450                                     ; preds = %438
  %451 = sext i32 %441 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %37, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 2
  %454 = load i32* %453, align 4
  %455 = lshr i32 %454, 22
  %456 = and i32 %455, 7
  br label %457

; <label>:457                                     ; preds = %450, %449
  %458 = phi i32 [ 1, %449 ], [ %456, %450 ]
  %459 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %441, i32* %459, align 4
  %460 = add nsw i32 %441, 1
  %461 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %460, i32* %461, align 4
  %462 = add nsw i32 %441, 2
  %463 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %462, i32* %463, align 4
  %464 = add nsw i32 %441, 3
  %465 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %464, i32* %465, align 4
  %466 = sext i32 %458 to i64
  %467 = getelementptr inbounds i32* %pli.0, i64 %466
  br label %468

; <label>:468                                     ; preds = %457
  %469 = add nsw i32 %h.0, 1
  br label %436

; <label>:470                                     ; preds = %436
  br label %471

; <label>:471                                     ; preds = %470, %374
  %pli.1 = phi i32* [ %pli.0, %470 ], [ %365, %374 ]
  %472 = ptrtoint i32* %pli.1 to i64
  %473 = ptrtoint i32* %208 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  %477 = icmp ne i32 %476, 0
  br i1 %477, label %478, label %485

; <label>:478                                     ; preds = %471
  %479 = sub nsw i32 %476, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i32* %208, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %476 to i64
  %484 = getelementptr inbounds i32* %208, i64 %483
  store i32 %482, i32* %484, align 4
  br label %501

; <label>:485                                     ; preds = %471
  %486 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %487 = load i32* %486, align 4
  %488 = lshr i32 %487, 25
  %489 = and i32 %488, 1
  %490 = icmp ne i32 %489, 0
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %485
  br label %497

; <label>:492                                     ; preds = %485
  %493 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %494 = load i32* %493, align 4
  %495 = lshr i32 %494, 22
  %496 = and i32 %495, 7
  br label %497

; <label>:497                                     ; preds = %492, %491
  %498 = phi i32 [ 1, %491 ], [ %496, %492 ]
  %499 = sub nsw i32 %498, 1
  %500 = add nsw i32 %i.1, %499
  br label %1357

; <label>:501                                     ; preds = %478
  br label %502

; <label>:502                                     ; preds = %501, %326
  %pairlistindex.1 = phi i32 [ %476, %501 ], [ %pairlistindex.0, %326 ]
  %pairlistoffset.1 = phi i32 [ 0, %501 ], [ %pairlistoffset.0, %326 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %501 ], [ %pairCount.0, %326 ]
  %503 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %504 = icmp ne i32 %503, 0
  br i1 %504, label %505, label %511

; <label>:505                                     ; preds = %502
  %506 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %507 = load i32* %506, align 4
  %508 = lshr i32 %507, 26
  %509 = and i32 %508, 1
  %510 = icmp ne i32 %509, 0
  br label %511

; <label>:511                                     ; preds = %505, %502
  %512 = phi i1 [ false, %502 ], [ %510, %505 ]
  %513 = zext i1 %512 to i32
  %514 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 1
  %515 = load float* %514, align 4
  %516 = fpext float %515 to double
  %517 = fmul double 3.320636e+02, %516
  %518 = fmul double %517, %16
  %519 = fmul double %518, %9
  %520 = getelementptr inbounds %struct.CompAtom* %294, i32 0, i32 2
  %521 = load i32* %520, align 4
  %522 = and i32 %521, 4194303
  %523 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %522)
  %524 = zext i16 %523 to i32
  %525 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %524)
  %526 = icmp ne i32 %513, 0
  br i1 %526, label %527, label %589

; <label>:527                                     ; preds = %511
  br label %528

; <label>:528                                     ; preds = %586, %527
  %pli4.0 = phi i32* [ %222, %527 ], [ %pli4.2, %586 ]
  %plin.0 = phi i32* [ %236, %527 ], [ %plin.2, %586 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %527 ], [ %587, %586 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %527 ], [ %exclChecksum.3, %586 ]
  %529 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %529, label %530, label %588

; <label>:530                                     ; preds = %528
  %531 = sext i32 %k.0 to i64
  %532 = getelementptr inbounds i32* %208, i64 %531
  %533 = load i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.CompAtom* %37, i64 %534
  %536 = getelementptr inbounds %struct.CompAtom* %535, i32 0, i32 0
  %537 = getelementptr inbounds %class.Vector* %536, i32 0, i32 0
  %538 = load double* %537, align 8
  %539 = fsub double %310, %538
  %540 = fmul double %539, %539
  %541 = sext i32 %533 to i64
  %542 = getelementptr inbounds %struct.CompAtom* %37, i64 %541
  %543 = getelementptr inbounds %struct.CompAtom* %542, i32 0, i32 0
  %544 = getelementptr inbounds %class.Vector* %543, i32 0, i32 1
  %545 = load double* %544, align 8
  %546 = fsub double %313, %545
  %547 = fmul double %546, %546
  %548 = fadd double %540, %547
  %549 = sext i32 %533 to i64
  %550 = getelementptr inbounds %struct.CompAtom* %37, i64 %549
  %551 = getelementptr inbounds %struct.CompAtom* %550, i32 0, i32 0
  %552 = getelementptr inbounds %class.Vector* %551, i32 0, i32 2
  %553 = load double* %552, align 8
  %554 = fsub double %316, %553
  %555 = fmul double %554, %554
  %556 = fadd double %548, %555
  %557 = sext i32 %533 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %37, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 2
  %560 = load i32* %559, align 4
  %561 = lshr i32 %560, 26
  %562 = and i32 %561, 1
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %585, label %564

; <label>:564                                     ; preds = %530
  %565 = fcmp ole double %556, %7
  br i1 %565, label %566, label %585

; <label>:566                                     ; preds = %564
  %567 = fcmp ole double %556, %22
  br i1 %567, label %568, label %571

; <label>:568                                     ; preds = %566
  %569 = add nsw i32 %exclChecksum.1, 1
  %570 = icmp ne i32 %569, 0
  br i1 %570, label %585, label %571

; <label>:571                                     ; preds = %568, %566
  %exclChecksum.2 = phi i32 [ %569, %568 ], [ %exclChecksum.1, %566 ]
  %572 = sext i32 %533 to i64
  %573 = getelementptr inbounds %struct.CompAtom* %37, i64 %572
  %574 = getelementptr inbounds %struct.CompAtom* %573, i32 0, i32 2
  %575 = load i32* %574, align 4
  %576 = and i32 %575, 4194303
  %577 = icmp sge i32 %576, %300
  br i1 %577, label %578, label %582

; <label>:578                                     ; preds = %571
  %579 = icmp sle i32 %576, %302
  br i1 %579, label %580, label %582

; <label>:580                                     ; preds = %578
  %581 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %533, i32* %pli4.0, align 4
  br label %584

; <label>:582                                     ; preds = %578, %571
  %583 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %533, i32* %plin.0, align 4
  br label %584

; <label>:584                                     ; preds = %582, %580
  %pli4.1 = phi i32* [ %581, %580 ], [ %pli4.0, %582 ]
  %plin.1 = phi i32* [ %plin.0, %580 ], [ %583, %582 ]
  br label %585

; <label>:585                                     ; preds = %584, %568, %564, %530
  %pli4.2 = phi i32* [ %pli4.0, %530 ], [ %pli4.0, %568 ], [ %pli4.1, %584 ], [ %pli4.0, %564 ]
  %plin.2 = phi i32* [ %plin.0, %530 ], [ %plin.0, %568 ], [ %plin.1, %584 ], [ %plin.0, %564 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %530 ], [ %569, %568 ], [ %exclChecksum.2, %584 ], [ %exclChecksum.1, %564 ]
  br label %586

; <label>:586                                     ; preds = %585
  %587 = add nsw i32 %k.0, 1
  br label %528

; <label>:588                                     ; preds = %528
  br label %668

; <label>:589                                     ; preds = %511
  %590 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %590, label %591, label %667

; <label>:591                                     ; preds = %589
  %592 = sext i32 %pairlistoffset.1 to i64
  %593 = getelementptr inbounds i32* %208, i64 %592
  %594 = load i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds %struct.CompAtom* %37, i64 %595
  %597 = getelementptr inbounds %struct.CompAtom* %596, i32 0, i32 0
  %598 = getelementptr inbounds %class.Vector* %597, i32 0, i32 0
  %599 = load double* %598, align 8
  %600 = sext i32 %594 to i64
  %601 = getelementptr inbounds %struct.CompAtom* %37, i64 %600
  %602 = getelementptr inbounds %struct.CompAtom* %601, i32 0, i32 0
  %603 = getelementptr inbounds %class.Vector* %602, i32 0, i32 1
  %604 = load double* %603, align 8
  %605 = sext i32 %594 to i64
  %606 = getelementptr inbounds %struct.CompAtom* %37, i64 %605
  %607 = getelementptr inbounds %struct.CompAtom* %606, i32 0, i32 0
  %608 = getelementptr inbounds %class.Vector* %607, i32 0, i32 2
  %609 = load double* %608, align 8
  %610 = sext i32 %594 to i64
  %611 = getelementptr inbounds %struct.CompAtom* %37, i64 %610
  %612 = getelementptr inbounds %struct.CompAtom* %611, i32 0, i32 2
  %613 = load i32* %612, align 4
  %614 = and i32 %613, 4194303
  br label %615

; <label>:615                                     ; preds = %660, %591
  %pli4.3 = phi i32* [ %222, %591 ], [ %pli4.5, %660 ]
  %plin.3 = phi i32* [ %236, %591 ], [ %plin.5, %660 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %591 ], [ %618, %660 ]
  %j211.0 = phi i32 [ %594, %591 ], [ %621, %660 ]
  %p_j_x12.0 = phi double [ %599, %591 ], [ %628, %660 ]
  %p_j_y13.0 = phi double [ %604, %591 ], [ %636, %660 ]
  %p_j_z14.0 = phi double [ %609, %591 ], [ %644, %660 ]
  %atom215.0 = phi i32 [ %614, %591 ], [ %665, %660 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %591 ], [ %exclChecksum.6, %660 ]
  %616 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %616, label %617, label %666

; <label>:617                                     ; preds = %615
  %618 = add nsw i32 %k10.0, 1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i32* %208, i64 %619
  %621 = load i32* %620, align 4
  %622 = fsub double %310, %p_j_x12.0
  %623 = fmul double %622, %622
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds %struct.CompAtom* %37, i64 %624
  %626 = getelementptr inbounds %struct.CompAtom* %625, i32 0, i32 0
  %627 = getelementptr inbounds %class.Vector* %626, i32 0, i32 0
  %628 = load double* %627, align 8
  %629 = fsub double %313, %p_j_y13.0
  %630 = fmul double %629, %629
  %631 = fadd double %623, %630
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %37, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 1
  %636 = load double* %635, align 8
  %637 = fsub double %316, %p_j_z14.0
  %638 = fmul double %637, %637
  %639 = fadd double %631, %638
  %640 = sext i32 %621 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %37, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 2
  %644 = load double* %643, align 8
  %645 = fcmp ole double %639, %7
  br i1 %645, label %646, label %660

; <label>:646                                     ; preds = %617
  %647 = fcmp ole double %639, %22
  br i1 %647, label %648, label %651

; <label>:648                                     ; preds = %646
  %649 = add nsw i32 %exclChecksum.4, 1
  %650 = icmp ne i32 %649, 0
  br i1 %650, label %660, label %651

; <label>:651                                     ; preds = %648, %646
  %exclChecksum.5 = phi i32 [ %649, %648 ], [ %exclChecksum.4, %646 ]
  %652 = icmp sge i32 %atom215.0, %300
  br i1 %652, label %653, label %657

; <label>:653                                     ; preds = %651
  %654 = icmp sle i32 %atom215.0, %302
  br i1 %654, label %655, label %657

; <label>:655                                     ; preds = %653
  %656 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %659

; <label>:657                                     ; preds = %653, %651
  %658 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %659

; <label>:659                                     ; preds = %657, %655
  %pli4.4 = phi i32* [ %656, %655 ], [ %pli4.3, %657 ]
  %plin.4 = phi i32* [ %plin.3, %655 ], [ %658, %657 ]
  br label %660

; <label>:660                                     ; preds = %659, %648, %617
  %pli4.5 = phi i32* [ %pli4.3, %648 ], [ %pli4.4, %659 ], [ %pli4.3, %617 ]
  %plin.5 = phi i32* [ %plin.3, %648 ], [ %plin.4, %659 ], [ %plin.3, %617 ]
  %exclChecksum.6 = phi i32 [ %649, %648 ], [ %exclChecksum.5, %659 ], [ %exclChecksum.4, %617 ]
  %661 = sext i32 %621 to i64
  %662 = getelementptr inbounds %struct.CompAtom* %37, i64 %661
  %663 = getelementptr inbounds %struct.CompAtom* %662, i32 0, i32 2
  %664 = load i32* %663, align 4
  %665 = and i32 %664, 4194303
  br label %615

; <label>:666                                     ; preds = %615
  br label %667

; <label>:667                                     ; preds = %666, %589
  %pli4.6 = phi i32* [ %pli4.3, %666 ], [ %222, %589 ]
  %plin.6 = phi i32* [ %plin.3, %666 ], [ %236, %589 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %666 ], [ %exclChecksum.0, %589 ]
  br label %668

; <label>:668                                     ; preds = %667, %588
  %pli4.7 = phi i32* [ %pli4.0, %588 ], [ %pli4.6, %667 ]
  %plin.7 = phi i32* [ %plin.0, %588 ], [ %plin.6, %667 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %588 ], [ %exclChecksum.7, %667 ]
  %669 = ptrtoint i32* %pli4.7 to i64
  %670 = ptrtoint i32* %222 to i64
  %671 = sub i64 %669, %670
  %672 = sdiv exact i64 %671, 4
  %673 = trunc i64 %672 to i32
  %674 = icmp ne i32 %673, 0
  br i1 %674, label %675, label %682

; <label>:675                                     ; preds = %668
  %676 = sub nsw i32 %673, 1
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32* %222, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %673 to i64
  %681 = getelementptr inbounds i32* %222, i64 %680
  store i32 %679, i32* %681, align 4
  br label %682

; <label>:682                                     ; preds = %675, %668
  br label %683

; <label>:683                                     ; preds = %705, %682
  %plin.8 = phi i32* [ %plin.7, %682 ], [ %plin.9, %705 ]
  %plix.0 = phi i32* [ %250, %682 ], [ %plix.1, %705 ]
  %plim.0 = phi i32* [ %264, %682 ], [ %plim.1, %705 ]
  %k18.0 = phi i32 [ 0, %682 ], [ %706, %705 ]
  %684 = icmp slt i32 %k18.0, %673
  br i1 %684, label %685, label %707

; <label>:685                                     ; preds = %683
  %686 = sext i32 %k18.0 to i64
  %687 = getelementptr inbounds i32* %222, i64 %686
  %688 = load i32* %687, align 4
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.CompAtom* %37, i64 %689
  %691 = getelementptr inbounds %struct.CompAtom* %690, i32 0, i32 2
  %692 = load i32* %691, align 4
  %693 = and i32 %692, 4194303
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i8* %307, i64 %694
  %696 = load i8* %695, align 1
  %697 = sext i8 %696 to i32
  switch i32 %697, label %704 [
    i32 0, label %698
    i32 1, label %700
    i32 2, label %702
  ]

; <label>:698                                     ; preds = %685
  %699 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %688, i32* %plin.8, align 4
  br label %704

; <label>:700                                     ; preds = %685
  %701 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %688, i32* %plix.0, align 4
  br label %704

; <label>:702                                     ; preds = %685
  %703 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %688, i32* %plim.0, align 4
  br label %704

; <label>:704                                     ; preds = %702, %700, %698, %685
  %plin.9 = phi i32* [ %plin.8, %685 ], [ %plin.8, %702 ], [ %plin.8, %700 ], [ %699, %698 ]
  %plix.1 = phi i32* [ %plix.0, %685 ], [ %plix.0, %702 ], [ %701, %700 ], [ %plix.0, %698 ]
  %plim.1 = phi i32* [ %plim.0, %685 ], [ %703, %702 ], [ %plim.0, %700 ], [ %plim.0, %698 ]
  br label %705

; <label>:705                                     ; preds = %704
  %706 = add nsw i32 %k18.0, 1
  br label %683

; <label>:707                                     ; preds = %683
  %708 = ptrtoint i32* %plix.0 to i64
  %709 = ptrtoint i32* %250 to i64
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 4
  %712 = sext i32 %exclChecksum.8 to i64
  %713 = add nsw i64 %712, %711
  %714 = trunc i64 %713 to i32
  %715 = ptrtoint i32* %plim.0 to i64
  %716 = ptrtoint i32* %264 to i64
  %717 = sub i64 %715, %716
  %718 = sdiv exact i64 %717, 4
  %719 = sext i32 %714 to i64
  %720 = add nsw i64 %719, %718
  %721 = trunc i64 %720 to i32
  %722 = ptrtoint i32* %plin.8 to i64
  %723 = ptrtoint i32* %236 to i64
  %724 = sub i64 %722, %723
  %725 = sdiv exact i64 %724, 4
  %726 = trunc i64 %725 to i32
  br label %727

; <label>:727                                     ; preds = %960, %707
  %k18.1 = phi i32 [ 0, %707 ], [ %961, %960 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %707 ], [ %953, %960 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %707 ], [ %944, %960 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %707 ], [ %942, %960 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %707 ], [ %933, %960 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %707 ], [ %931, %960 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %707 ], [ %929, %960 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %707 ], [ %917, %960 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %707 ], [ %894, %960 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %707 ], [ %885, %960 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %707 ], [ %883, %960 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %707 ], [ %874, %960 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %707 ], [ %872, %960 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %707 ], [ %870, %960 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %707 ], [ %854, %960 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %707 ], [ %837, %960 ]
  %728 = icmp slt i32 %k18.1, %726
  br i1 %728, label %729, label %962

; <label>:729                                     ; preds = %727
  %730 = sext i32 %k18.1 to i64
  %731 = getelementptr inbounds i32* %236, i64 %730
  %732 = load i32* %731, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.CompAtom* %37, i64 %733
  %735 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 0
  %737 = load double* %736, align 8
  %738 = fsub double %310, %737
  %739 = fmul double %738, %738
  %740 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %741 = getelementptr inbounds %class.Vector* %740, i32 0, i32 1
  %742 = load double* %741, align 8
  %743 = fsub double %313, %742
  %744 = fmul double %743, %743
  %745 = fadd double %739, %744
  %746 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 0
  %747 = getelementptr inbounds %class.Vector* %746, i32 0, i32 2
  %748 = load double* %747, align 8
  %749 = fsub double %316, %748
  %750 = fmul double %749, %749
  %751 = fadd double %745, %750
  %752 = fptrunc double %751 to float
  %753 = bitcast %union.anon.6* %r2f to float*
  store float %752, float* %753, align 4
  %754 = bitcast %union.anon.6* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = ashr i32 %755, 17
  %757 = add nsw i32 %756, %25
  %758 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 2
  %759 = load i32* %758, align 4
  %760 = and i32 %759, 4194303
  %761 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %760)
  %762 = zext i16 %761 to i32
  %763 = mul nsw i32 2, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %764
  %766 = mul nsw i32 16, %757
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double* %14, i64 %767
  %769 = getelementptr inbounds double* %768, i64 0
  %770 = load double* %769, align 8
  %771 = mul nsw i32 16, %757
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds double* %14, i64 %772
  %774 = getelementptr inbounds double* %773, i64 4
  %775 = getelementptr inbounds double* %774, i64 0
  %776 = load double* %775, align 8
  %777 = mul nsw i32 16, %757
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double* %14, i64 %778
  %780 = getelementptr inbounds double* %779, i64 8
  %781 = getelementptr inbounds double* %780, i64 0
  %782 = load double* %781, align 8
  %783 = mul nsw i32 16, %757
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds double* %14, i64 %784
  %786 = getelementptr inbounds double* %785, i64 8
  %787 = getelementptr inbounds double* %786, i64 4
  %788 = getelementptr inbounds double* %787, i64 0
  %789 = load double* %788, align 8
  %790 = bitcast %union.anon.6* %r2f to i32*
  %791 = load i32* %790, align 4
  %792 = and i32 %791, -131072
  store i32 %792, i32* %790, align 4
  %793 = getelementptr inbounds %struct.CompAtom* %734, i32 0, i32 1
  %794 = load float* %793, align 4
  %795 = fpext float %794 to double
  %796 = fmul double %519, %795
  %797 = bitcast %union.anon.6* %r2f to float*
  %798 = load float* %797, align 4
  %799 = fpext float %798 to double
  %800 = fsub double %751, %799
  %801 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 0
  %802 = load double* %801, align 8
  %803 = fmul double %16, %802
  %804 = getelementptr inbounds %"struct.LJTable::TableEntry"* %765, i32 0, i32 1
  %805 = load double* %804, align 8
  %806 = fmul double %16, %805
  %807 = fmul double %803, %770
  %808 = fmul double %806, %776
  %809 = fsub double %807, %808
  %810 = getelementptr inbounds double* %768, i64 3
  %811 = load double* %810, align 8
  %812 = fmul double %803, %811
  %813 = getelementptr inbounds double* %774, i64 3
  %814 = load double* %813, align 8
  %815 = fmul double %806, %814
  %816 = fsub double %812, %815
  %817 = getelementptr inbounds double* %768, i64 2
  %818 = load double* %817, align 8
  %819 = fmul double %803, %818
  %820 = getelementptr inbounds double* %774, i64 2
  %821 = load double* %820, align 8
  %822 = fmul double %806, %821
  %823 = fsub double %819, %822
  %824 = getelementptr inbounds double* %768, i64 1
  %825 = load double* %824, align 8
  %826 = fmul double %803, %825
  %827 = getelementptr inbounds double* %774, i64 1
  %828 = load double* %827, align 8
  %829 = fmul double %806, %828
  %830 = fsub double %826, %829
  %831 = fmul double %800, %816
  %832 = fadd double %831, %823
  %833 = fmul double %832, %800
  %834 = fadd double %833, %830
  %835 = fmul double %834, %800
  %836 = fadd double %835, %809
  %837 = fadd double %vdwEnergy.1, %836
  %838 = fmul double %782, %796
  %839 = getelementptr inbounds double* %780, i64 3
  %840 = load double* %839, align 8
  %841 = fmul double %796, %840
  %842 = getelementptr inbounds double* %780, i64 2
  %843 = load double* %842, align 8
  %844 = fmul double %796, %843
  %845 = getelementptr inbounds double* %780, i64 1
  %846 = load double* %845, align 8
  %847 = fmul double %796, %846
  %848 = fmul double %800, %841
  %849 = fadd double %848, %844
  %850 = fmul double %849, %800
  %851 = fadd double %850, %847
  %852 = fmul double %851, %800
  %853 = fadd double %852, %838
  %854 = fadd double %electEnergy.1, %853
  %855 = fadd double %841, %816
  %856 = fadd double %844, %823
  %857 = fadd double %847, %830
  %858 = fadd double %838, %809
  %859 = fmul double 3.000000e+00, %800
  %860 = fmul double %859, %855
  %861 = fmul double 2.000000e+00, %856
  %862 = fadd double %860, %861
  %863 = fmul double %862, %800
  %864 = fadd double %863, %857
  %865 = fmul double -2.000000e+00, %864
  %866 = sext i32 %732 to i64
  %867 = getelementptr inbounds %class.Vector* %270, i64 %866
  %868 = fmul double %865, %738
  %869 = fmul double %868, %738
  %870 = fadd double %virial_xx.1, %869
  %871 = fmul double %868, %743
  %872 = fadd double %virial_xy.1, %871
  %873 = fmul double %868, %749
  %874 = fadd double %virial_xz.1, %873
  %875 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %876 = load double* %875, align 8
  %877 = fadd double %876, %868
  store double %877, double* %875, align 8
  %878 = getelementptr inbounds %class.Vector* %867, i32 0, i32 0
  %879 = load double* %878, align 8
  %880 = fsub double %879, %868
  store double %880, double* %878, align 8
  %881 = fmul double %865, %743
  %882 = fmul double %881, %743
  %883 = fadd double %virial_yy.1, %882
  %884 = fmul double %881, %749
  %885 = fadd double %virial_yz.1, %884
  %886 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %887 = load double* %886, align 8
  %888 = fadd double %887, %881
  store double %888, double* %886, align 8
  %889 = getelementptr inbounds %class.Vector* %867, i32 0, i32 1
  %890 = load double* %889, align 8
  %891 = fsub double %890, %881
  store double %891, double* %889, align 8
  %892 = fmul double %865, %749
  %893 = fmul double %892, %749
  %894 = fadd double %virial_zz.1, %893
  %895 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %896 = load double* %895, align 8
  %897 = fadd double %896, %892
  store double %897, double* %895, align 8
  %898 = getelementptr inbounds %class.Vector* %867, i32 0, i32 2
  %899 = load double* %898, align 8
  %900 = fsub double %899, %892
  store double %900, double* %898, align 8
  %901 = getelementptr inbounds double* %787, i64 1
  %902 = load double* %901, align 8
  %903 = getelementptr inbounds double* %787, i64 2
  %904 = load double* %903, align 8
  %905 = getelementptr inbounds double* %787, i64 3
  %906 = load double* %905, align 8
  %907 = fmul double %906, %796
  %908 = fmul double %904, %796
  %909 = fmul double %902, %796
  %910 = fmul double %789, %796
  %911 = fmul double %800, %907
  %912 = fadd double %911, %908
  %913 = fmul double %912, %800
  %914 = fadd double %913, %909
  %915 = fmul double %914, %800
  %916 = fadd double %915, %910
  %917 = fadd double %fullElectEnergy.1, %916
  %918 = fmul double 3.000000e+00, %800
  %919 = fmul double %918, %907
  %920 = fmul double 2.000000e+00, %908
  %921 = fadd double %919, %920
  %922 = fmul double %921, %800
  %923 = fadd double %922, %909
  %924 = fmul double -2.000000e+00, %923
  %925 = sext i32 %732 to i64
  %926 = getelementptr inbounds %class.Vector* %276, i64 %925
  %927 = fmul double %924, %738
  %928 = fmul double %927, %738
  %929 = fadd double %fullElectVirial_xx.1, %928
  %930 = fmul double %927, %743
  %931 = fadd double %fullElectVirial_xy.1, %930
  %932 = fmul double %927, %749
  %933 = fadd double %fullElectVirial_xz.1, %932
  %934 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %935 = load double* %934, align 8
  %936 = fadd double %935, %927
  store double %936, double* %934, align 8
  %937 = getelementptr inbounds %class.Vector* %926, i32 0, i32 0
  %938 = load double* %937, align 8
  %939 = fsub double %938, %927
  store double %939, double* %937, align 8
  %940 = fmul double %924, %743
  %941 = fmul double %940, %743
  %942 = fadd double %fullElectVirial_yy.1, %941
  %943 = fmul double %940, %749
  %944 = fadd double %fullElectVirial_yz.1, %943
  %945 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %946 = load double* %945, align 8
  %947 = fadd double %946, %940
  store double %947, double* %945, align 8
  %948 = getelementptr inbounds %class.Vector* %926, i32 0, i32 1
  %949 = load double* %948, align 8
  %950 = fsub double %949, %940
  store double %950, double* %948, align 8
  %951 = fmul double %924, %749
  %952 = fmul double %951, %749
  %953 = fadd double %fullElectVirial_zz.1, %952
  %954 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %955 = load double* %954, align 8
  %956 = fadd double %955, %951
  store double %956, double* %954, align 8
  %957 = getelementptr inbounds %class.Vector* %926, i32 0, i32 2
  %958 = load double* %957, align 8
  %959 = fsub double %958, %951
  store double %959, double* %957, align 8
  br label %960

; <label>:960                                     ; preds = %729
  %961 = add nsw i32 %k18.1, 1
  br label %727

; <label>:962                                     ; preds = %727
  %963 = ptrtoint i32* %plim.0 to i64
  %964 = ptrtoint i32* %264 to i64
  %965 = sub i64 %963, %964
  %966 = sdiv exact i64 %965, 4
  %967 = trunc i64 %966 to i32
  br label %968

; <label>:968                                     ; preds = %1223, %962
  %k18.2 = phi i32 [ 0, %962 ], [ %1224, %1223 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %962 ], [ %1216, %1223 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %962 ], [ %1207, %1223 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %962 ], [ %1205, %1223 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %962 ], [ %1196, %1223 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %962 ], [ %1194, %1223 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %962 ], [ %1192, %1223 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %962 ], [ %1180, %1223 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %962 ], [ %1138, %1223 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %962 ], [ %1129, %1223 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %962 ], [ %1127, %1223 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %962 ], [ %1118, %1223 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %962 ], [ %1116, %1223 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %962 ], [ %1114, %1223 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %962 ], [ %1098, %1223 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %962 ], [ %1079, %1223 ]
  %969 = icmp slt i32 %k18.2, %967
  br i1 %969, label %970, label %1225

; <label>:970                                     ; preds = %968
  %971 = sext i32 %k18.2 to i64
  %972 = getelementptr inbounds i32* %264, i64 %971
  %973 = load i32* %972, align 4
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds %struct.CompAtom* %37, i64 %974
  %976 = getelementptr inbounds %struct.CompAtom* %975, i32 0, i32 0
  %977 = getelementptr inbounds %class.Vector* %976, i32 0, i32 0
  %978 = load double* %977, align 8
  %979 = fsub double %310, %978
  %980 = fmul double %979, %979
  %981 = getelementptr inbounds %struct.CompAtom* %975, i32 0, i32 0
  %982 = getelementptr inbounds %class.Vector* %981, i32 0, i32 1
  %983 = load double* %982, align 8
  %984 = fsub double %313, %983
  %985 = fmul double %984, %984
  %986 = fadd double %980, %985
  %987 = getelementptr inbounds %struct.CompAtom* %975, i32 0, i32 0
  %988 = getelementptr inbounds %class.Vector* %987, i32 0, i32 2
  %989 = load double* %988, align 8
  %990 = fsub double %316, %989
  %991 = fmul double %990, %990
  %992 = fadd double %986, %991
  %993 = fptrunc double %992 to float
  %994 = bitcast %union.anon.7* %r2f32 to float*
  store float %993, float* %994, align 4
  %995 = bitcast %union.anon.7* %r2f32 to i32*
  %996 = load i32* %995, align 4
  %997 = ashr i32 %996, 17
  %998 = add nsw i32 %997, %25
  %999 = getelementptr inbounds %struct.CompAtom* %975, i32 0, i32 2
  %1000 = load i32* %999, align 4
  %1001 = and i32 %1000, 4194303
  %1002 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1001)
  %1003 = zext i16 %1002 to i32
  %1004 = mul nsw i32 2, %1003
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds %"struct.LJTable::TableEntry"* %525, i64 %1005
  %1007 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1006, i64 1
  %1008 = mul nsw i32 16, %998
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds double* %14, i64 %1009
  %1011 = getelementptr inbounds double* %1010, i64 0
  %1012 = load double* %1011, align 8
  %1013 = mul nsw i32 16, %998
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds double* %14, i64 %1014
  %1016 = getelementptr inbounds double* %1015, i64 4
  %1017 = getelementptr inbounds double* %1016, i64 0
  %1018 = load double* %1017, align 8
  %1019 = mul nsw i32 16, %998
  %1020 = sext i32 %1019 to i64
  %1021 = getelementptr inbounds double* %14, i64 %1020
  %1022 = getelementptr inbounds double* %1021, i64 8
  %1023 = getelementptr inbounds double* %1022, i64 0
  %1024 = load double* %1023, align 8
  %1025 = mul nsw i32 16, %998
  %1026 = sext i32 %1025 to i64
  %1027 = getelementptr inbounds double* %14, i64 %1026
  %1028 = getelementptr inbounds double* %1027, i64 8
  %1029 = getelementptr inbounds double* %1028, i64 4
  %1030 = getelementptr inbounds double* %1029, i64 0
  %1031 = load double* %1030, align 8
  %1032 = bitcast %union.anon.7* %r2f32 to i32*
  %1033 = load i32* %1032, align 4
  %1034 = and i32 %1033, -131072
  store i32 %1034, i32* %1032, align 4
  %1035 = getelementptr inbounds %struct.CompAtom* %975, i32 0, i32 1
  %1036 = load float* %1035, align 4
  %1037 = fpext float %1036 to double
  %1038 = fmul double %519, %1037
  %1039 = bitcast %union.anon.7* %r2f32 to float*
  %1040 = load float* %1039, align 4
  %1041 = fpext float %1040 to double
  %1042 = fsub double %992, %1041
  %1043 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1007, i32 0, i32 0
  %1044 = load double* %1043, align 8
  %1045 = fmul double %16, %1044
  %1046 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1007, i32 0, i32 1
  %1047 = load double* %1046, align 8
  %1048 = fmul double %16, %1047
  %1049 = fmul double %1045, %1012
  %1050 = fmul double %1048, %1018
  %1051 = fsub double %1049, %1050
  %1052 = getelementptr inbounds double* %1010, i64 3
  %1053 = load double* %1052, align 8
  %1054 = fmul double %1045, %1053
  %1055 = getelementptr inbounds double* %1016, i64 3
  %1056 = load double* %1055, align 8
  %1057 = fmul double %1048, %1056
  %1058 = fsub double %1054, %1057
  %1059 = getelementptr inbounds double* %1010, i64 2
  %1060 = load double* %1059, align 8
  %1061 = fmul double %1045, %1060
  %1062 = getelementptr inbounds double* %1016, i64 2
  %1063 = load double* %1062, align 8
  %1064 = fmul double %1048, %1063
  %1065 = fsub double %1061, %1064
  %1066 = getelementptr inbounds double* %1010, i64 1
  %1067 = load double* %1066, align 8
  %1068 = fmul double %1045, %1067
  %1069 = getelementptr inbounds double* %1016, i64 1
  %1070 = load double* %1069, align 8
  %1071 = fmul double %1048, %1070
  %1072 = fsub double %1068, %1071
  %1073 = fmul double %1042, %1058
  %1074 = fadd double %1073, %1065
  %1075 = fmul double %1074, %1042
  %1076 = fadd double %1075, %1072
  %1077 = fmul double %1076, %1042
  %1078 = fadd double %1077, %1051
  %1079 = fadd double %vdwEnergy.2, %1078
  %1080 = fsub double 1.000000e+00, %18
  %1081 = fmul double %1080, %1038
  %1082 = fmul double %1024, %1081
  %1083 = getelementptr inbounds double* %1022, i64 3
  %1084 = load double* %1083, align 8
  %1085 = fmul double %1081, %1084
  %1086 = getelementptr inbounds double* %1022, i64 2
  %1087 = load double* %1086, align 8
  %1088 = fmul double %1081, %1087
  %1089 = getelementptr inbounds double* %1022, i64 1
  %1090 = load double* %1089, align 8
  %1091 = fmul double %1081, %1090
  %1092 = fmul double %1042, %1085
  %1093 = fadd double %1092, %1088
  %1094 = fmul double %1093, %1042
  %1095 = fadd double %1094, %1091
  %1096 = fmul double %1095, %1042
  %1097 = fadd double %1096, %1082
  %1098 = fadd double %electEnergy.2, %1097
  %1099 = fadd double %1085, %1058
  %1100 = fadd double %1088, %1065
  %1101 = fadd double %1091, %1072
  %1102 = fadd double %1082, %1051
  %1103 = fmul double 3.000000e+00, %1042
  %1104 = fmul double %1103, %1099
  %1105 = fmul double 2.000000e+00, %1100
  %1106 = fadd double %1104, %1105
  %1107 = fmul double %1106, %1042
  %1108 = fadd double %1107, %1101
  %1109 = fmul double -2.000000e+00, %1108
  %1110 = sext i32 %973 to i64
  %1111 = getelementptr inbounds %class.Vector* %270, i64 %1110
  %1112 = fmul double %1109, %979
  %1113 = fmul double %1112, %979
  %1114 = fadd double %virial_xx.2, %1113
  %1115 = fmul double %1112, %984
  %1116 = fadd double %virial_xy.2, %1115
  %1117 = fmul double %1112, %990
  %1118 = fadd double %virial_xz.2, %1117
  %1119 = getelementptr inbounds %class.Vector* %318, i32 0, i32 0
  %1120 = load double* %1119, align 8
  %1121 = fadd double %1120, %1112
  store double %1121, double* %1119, align 8
  %1122 = getelementptr inbounds %class.Vector* %1111, i32 0, i32 0
  %1123 = load double* %1122, align 8
  %1124 = fsub double %1123, %1112
  store double %1124, double* %1122, align 8
  %1125 = fmul double %1109, %984
  %1126 = fmul double %1125, %984
  %1127 = fadd double %virial_yy.2, %1126
  %1128 = fmul double %1125, %990
  %1129 = fadd double %virial_yz.2, %1128
  %1130 = getelementptr inbounds %class.Vector* %318, i32 0, i32 1
  %1131 = load double* %1130, align 8
  %1132 = fadd double %1131, %1125
  store double %1132, double* %1130, align 8
  %1133 = getelementptr inbounds %class.Vector* %1111, i32 0, i32 1
  %1134 = load double* %1133, align 8
  %1135 = fsub double %1134, %1125
  store double %1135, double* %1133, align 8
  %1136 = fmul double %1109, %990
  %1137 = fmul double %1136, %990
  %1138 = fadd double %virial_zz.2, %1137
  %1139 = getelementptr inbounds %class.Vector* %318, i32 0, i32 2
  %1140 = load double* %1139, align 8
  %1141 = fadd double %1140, %1136
  store double %1141, double* %1139, align 8
  %1142 = getelementptr inbounds %class.Vector* %1111, i32 0, i32 2
  %1143 = load double* %1142, align 8
  %1144 = fsub double %1143, %1136
  store double %1144, double* %1142, align 8
  %1145 = getelementptr inbounds double* %1029, i64 1
  %1146 = load double* %1145, align 8
  %1147 = getelementptr inbounds double* %1029, i64 2
  %1148 = load double* %1147, align 8
  %1149 = getelementptr inbounds double* %1029, i64 3
  %1150 = load double* %1149, align 8
  %1151 = mul nsw i32 4, %998
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds double* %15, i64 %1152
  %1154 = getelementptr inbounds double* %1153, i64 0
  %1155 = load double* %1154, align 8
  %1156 = fmul double %18, %1155
  %1157 = fsub double %1031, %1156
  %1158 = getelementptr inbounds double* %1153, i64 1
  %1159 = load double* %1158, align 8
  %1160 = fmul double %18, %1159
  %1161 = fsub double %1146, %1160
  %1162 = getelementptr inbounds double* %1153, i64 2
  %1163 = load double* %1162, align 8
  %1164 = fmul double %18, %1163
  %1165 = fsub double %1148, %1164
  %1166 = getelementptr inbounds double* %1153, i64 3
  %1167 = load double* %1166, align 8
  %1168 = fmul double %18, %1167
  %1169 = fsub double %1150, %1168
  %1170 = fmul double %1169, %1038
  %1171 = fmul double %1165, %1038
  %1172 = fmul double %1161, %1038
  %1173 = fmul double %1157, %1038
  %1174 = fmul double %1042, %1170
  %1175 = fadd double %1174, %1171
  %1176 = fmul double %1175, %1042
  %1177 = fadd double %1176, %1172
  %1178 = fmul double %1177, %1042
  %1179 = fadd double %1178, %1173
  %1180 = fadd double %fullElectEnergy.2, %1179
  %1181 = fmul double 3.000000e+00, %1042
  %1182 = fmul double %1181, %1170
  %1183 = fmul double 2.000000e+00, %1171
  %1184 = fadd double %1182, %1183
  %1185 = fmul double %1184, %1042
  %1186 = fadd double %1185, %1172
  %1187 = fmul double -2.000000e+00, %1186
  %1188 = sext i32 %973 to i64
  %1189 = getelementptr inbounds %class.Vector* %276, i64 %1188
  %1190 = fmul double %1187, %979
  %1191 = fmul double %1190, %979
  %1192 = fadd double %fullElectVirial_xx.2, %1191
  %1193 = fmul double %1190, %984
  %1194 = fadd double %fullElectVirial_xy.2, %1193
  %1195 = fmul double %1190, %990
  %1196 = fadd double %fullElectVirial_xz.2, %1195
  %1197 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1198 = load double* %1197, align 8
  %1199 = fadd double %1198, %1190
  store double %1199, double* %1197, align 8
  %1200 = getelementptr inbounds %class.Vector* %1189, i32 0, i32 0
  %1201 = load double* %1200, align 8
  %1202 = fsub double %1201, %1190
  store double %1202, double* %1200, align 8
  %1203 = fmul double %1187, %984
  %1204 = fmul double %1203, %984
  %1205 = fadd double %fullElectVirial_yy.2, %1204
  %1206 = fmul double %1203, %990
  %1207 = fadd double %fullElectVirial_yz.2, %1206
  %1208 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1209 = load double* %1208, align 8
  %1210 = fadd double %1209, %1203
  store double %1210, double* %1208, align 8
  %1211 = getelementptr inbounds %class.Vector* %1189, i32 0, i32 1
  %1212 = load double* %1211, align 8
  %1213 = fsub double %1212, %1203
  store double %1213, double* %1211, align 8
  %1214 = fmul double %1187, %990
  %1215 = fmul double %1214, %990
  %1216 = fadd double %fullElectVirial_zz.2, %1215
  %1217 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1218 = load double* %1217, align 8
  %1219 = fadd double %1218, %1214
  store double %1219, double* %1217, align 8
  %1220 = getelementptr inbounds %class.Vector* %1189, i32 0, i32 2
  %1221 = load double* %1220, align 8
  %1222 = fsub double %1221, %1214
  store double %1222, double* %1220, align 8
  br label %1223

; <label>:1223                                    ; preds = %970
  %1224 = add nsw i32 %k18.2, 1
  br label %968

; <label>:1225                                    ; preds = %968
  %1226 = ptrtoint i32* %plix.0 to i64
  %1227 = ptrtoint i32* %250 to i64
  %1228 = sub i64 %1226, %1227
  %1229 = sdiv exact i64 %1228, 4
  %1230 = trunc i64 %1229 to i32
  br label %1231

; <label>:1231                                    ; preds = %1354, %1225
  %k18.3 = phi i32 [ 0, %1225 ], [ %1355, %1354 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1225 ], [ %1347, %1354 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1225 ], [ %1338, %1354 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1225 ], [ %1336, %1354 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1225 ], [ %1327, %1354 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1225 ], [ %1325, %1354 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1225 ], [ %1323, %1354 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1225 ], [ %1311, %1354 ]
  %1232 = icmp slt i32 %k18.3, %1230
  br i1 %1232, label %1233, label %1356

; <label>:1233                                    ; preds = %1231
  %1234 = sext i32 %k18.3 to i64
  %1235 = getelementptr inbounds i32* %250, i64 %1234
  %1236 = load i32* %1235, align 4
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds %struct.CompAtom* %37, i64 %1237
  %1239 = getelementptr inbounds %struct.CompAtom* %1238, i32 0, i32 0
  %1240 = getelementptr inbounds %class.Vector* %1239, i32 0, i32 0
  %1241 = load double* %1240, align 8
  %1242 = fsub double %310, %1241
  %1243 = fmul double %1242, %1242
  %1244 = getelementptr inbounds %struct.CompAtom* %1238, i32 0, i32 0
  %1245 = getelementptr inbounds %class.Vector* %1244, i32 0, i32 1
  %1246 = load double* %1245, align 8
  %1247 = fsub double %313, %1246
  %1248 = fmul double %1247, %1247
  %1249 = fadd double %1243, %1248
  %1250 = getelementptr inbounds %struct.CompAtom* %1238, i32 0, i32 0
  %1251 = getelementptr inbounds %class.Vector* %1250, i32 0, i32 2
  %1252 = load double* %1251, align 8
  %1253 = fsub double %316, %1252
  %1254 = fmul double %1253, %1253
  %1255 = fadd double %1249, %1254
  %1256 = fptrunc double %1255 to float
  %1257 = bitcast %union.anon.8* %r2f78 to float*
  store float %1256, float* %1257, align 4
  %1258 = bitcast %union.anon.8* %r2f78 to i32*
  %1259 = load i32* %1258, align 4
  %1260 = ashr i32 %1259, 17
  %1261 = add nsw i32 %1260, %25
  %1262 = mul nsw i32 16, %1261
  %1263 = sext i32 %1262 to i64
  %1264 = getelementptr inbounds double* %14, i64 %1263
  %1265 = getelementptr inbounds double* %1264, i64 8
  %1266 = getelementptr inbounds double* %1265, i64 4
  %1267 = getelementptr inbounds double* %1266, i64 0
  %1268 = load double* %1267, align 8
  %1269 = bitcast %union.anon.8* %r2f78 to i32*
  %1270 = load i32* %1269, align 4
  %1271 = and i32 %1270, -131072
  store i32 %1271, i32* %1269, align 4
  %1272 = getelementptr inbounds %struct.CompAtom* %1238, i32 0, i32 1
  %1273 = load float* %1272, align 4
  %1274 = fpext float %1273 to double
  %1275 = fmul double %519, %1274
  %1276 = bitcast %union.anon.8* %r2f78 to float*
  %1277 = load float* %1276, align 4
  %1278 = fpext float %1277 to double
  %1279 = fsub double %1255, %1278
  %1280 = getelementptr inbounds double* %1266, i64 1
  %1281 = load double* %1280, align 8
  %1282 = getelementptr inbounds double* %1266, i64 2
  %1283 = load double* %1282, align 8
  %1284 = getelementptr inbounds double* %1266, i64 3
  %1285 = load double* %1284, align 8
  %1286 = mul nsw i32 4, %1261
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds double* %15, i64 %1287
  %1289 = getelementptr inbounds double* %1288, i64 0
  %1290 = load double* %1289, align 8
  %1291 = fsub double %1268, %1290
  %1292 = getelementptr inbounds double* %1288, i64 1
  %1293 = load double* %1292, align 8
  %1294 = fsub double %1281, %1293
  %1295 = getelementptr inbounds double* %1288, i64 2
  %1296 = load double* %1295, align 8
  %1297 = fsub double %1283, %1296
  %1298 = getelementptr inbounds double* %1288, i64 3
  %1299 = load double* %1298, align 8
  %1300 = fsub double %1285, %1299
  %1301 = fmul double %1300, %1275
  %1302 = fmul double %1297, %1275
  %1303 = fmul double %1294, %1275
  %1304 = fmul double %1291, %1275
  %1305 = fmul double %1279, %1301
  %1306 = fadd double %1305, %1302
  %1307 = fmul double %1306, %1279
  %1308 = fadd double %1307, %1303
  %1309 = fmul double %1308, %1279
  %1310 = fadd double %1309, %1304
  %1311 = fadd double %fullElectEnergy.3, %1310
  %1312 = fmul double 3.000000e+00, %1279
  %1313 = fmul double %1312, %1301
  %1314 = fmul double 2.000000e+00, %1302
  %1315 = fadd double %1313, %1314
  %1316 = fmul double %1315, %1279
  %1317 = fadd double %1316, %1303
  %1318 = fmul double -2.000000e+00, %1317
  %1319 = sext i32 %1236 to i64
  %1320 = getelementptr inbounds %class.Vector* %276, i64 %1319
  %1321 = fmul double %1318, %1242
  %1322 = fmul double %1321, %1242
  %1323 = fadd double %fullElectVirial_xx.3, %1322
  %1324 = fmul double %1321, %1247
  %1325 = fadd double %fullElectVirial_xy.3, %1324
  %1326 = fmul double %1321, %1253
  %1327 = fadd double %fullElectVirial_xz.3, %1326
  %1328 = getelementptr inbounds %class.Vector* %320, i32 0, i32 0
  %1329 = load double* %1328, align 8
  %1330 = fadd double %1329, %1321
  store double %1330, double* %1328, align 8
  %1331 = getelementptr inbounds %class.Vector* %1320, i32 0, i32 0
  %1332 = load double* %1331, align 8
  %1333 = fsub double %1332, %1321
  store double %1333, double* %1331, align 8
  %1334 = fmul double %1318, %1247
  %1335 = fmul double %1334, %1247
  %1336 = fadd double %fullElectVirial_yy.3, %1335
  %1337 = fmul double %1334, %1253
  %1338 = fadd double %fullElectVirial_yz.3, %1337
  %1339 = getelementptr inbounds %class.Vector* %320, i32 0, i32 1
  %1340 = load double* %1339, align 8
  %1341 = fadd double %1340, %1334
  store double %1341, double* %1339, align 8
  %1342 = getelementptr inbounds %class.Vector* %1320, i32 0, i32 1
  %1343 = load double* %1342, align 8
  %1344 = fsub double %1343, %1334
  store double %1344, double* %1342, align 8
  %1345 = fmul double %1318, %1253
  %1346 = fmul double %1345, %1253
  %1347 = fadd double %fullElectVirial_zz.3, %1346
  %1348 = getelementptr inbounds %class.Vector* %320, i32 0, i32 2
  %1349 = load double* %1348, align 8
  %1350 = fadd double %1349, %1345
  store double %1350, double* %1348, align 8
  %1351 = getelementptr inbounds %class.Vector* %1320, i32 0, i32 2
  %1352 = load double* %1351, align 8
  %1353 = fsub double %1352, %1345
  store double %1353, double* %1351, align 8
  br label %1354

; <label>:1354                                    ; preds = %1233
  %1355 = add nsw i32 %k18.3, 1
  br label %1231

; <label>:1356                                    ; preds = %1231
  br label %1357

; <label>:1357                                    ; preds = %1356, %497, %348
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %348 ], [ %pairlistindex.1, %1356 ], [ %476, %497 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %348 ], [ %pairlistoffset.1, %1356 ], [ 0, %497 ]
  %pairCount.3 = phi i32 [ %344, %348 ], [ %pairCount.2, %1356 ], [ %pairCount.1, %497 ]
  %i.2 = phi i32 [ %350, %348 ], [ %i.1, %1356 ], [ %500, %497 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %348 ], [ %fullElectVirial_zz.3, %1356 ], [ %fullElectVirial_zz.0, %497 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %348 ], [ %fullElectVirial_yz.3, %1356 ], [ %fullElectVirial_yz.0, %497 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %348 ], [ %fullElectVirial_yy.3, %1356 ], [ %fullElectVirial_yy.0, %497 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %348 ], [ %fullElectVirial_xz.3, %1356 ], [ %fullElectVirial_xz.0, %497 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %348 ], [ %fullElectVirial_xy.3, %1356 ], [ %fullElectVirial_xy.0, %497 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %348 ], [ %fullElectVirial_xx.3, %1356 ], [ %fullElectVirial_xx.0, %497 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %348 ], [ %fullElectEnergy.3, %1356 ], [ %fullElectEnergy.0, %497 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %348 ], [ %virial_zz.2, %1356 ], [ %virial_zz.0, %497 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %348 ], [ %virial_yz.2, %1356 ], [ %virial_yz.0, %497 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %348 ], [ %virial_yy.2, %1356 ], [ %virial_yy.0, %497 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %348 ], [ %virial_xz.2, %1356 ], [ %virial_xz.0, %497 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %348 ], [ %virial_xy.2, %1356 ], [ %virial_xy.0, %497 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %348 ], [ %virial_xx.2, %1356 ], [ %virial_xx.0, %497 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %348 ], [ %electEnergy.2, %1356 ], [ %electEnergy.0, %497 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %348 ], [ %vdwEnergy.2, %1356 ], [ %vdwEnergy.0, %497 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %348 ], [ %721, %1356 ], [ %exclChecksum.0, %497 ]
  %1358 = add nsw i32 %i.2, 1
  br label %290

; <label>:1359                                    ; preds = %290
  %1360 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1361 = icmp ne i32* %51, %1360
  br i1 %1361, label %1362, label %1367

; <label>:1362                                    ; preds = %1359
  %1363 = icmp eq i32* %51, null
  br i1 %1363, label %1366, label %1364

; <label>:1364                                    ; preds = %1362
  %1365 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1365) #8
  br label %1366

; <label>:1366                                    ; preds = %1364, %1362
  br label %1367

; <label>:1367                                    ; preds = %1366, %1359
  %1368 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1369 = icmp ne i32* %65, %1368
  br i1 %1369, label %1370, label %1375

; <label>:1370                                    ; preds = %1367
  %1371 = icmp eq i32* %65, null
  br i1 %1371, label %1374, label %1372

; <label>:1372                                    ; preds = %1370
  %1373 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1373) #8
  br label %1374

; <label>:1374                                    ; preds = %1372, %1370
  br label %1375

; <label>:1375                                    ; preds = %1374, %1367
  %1376 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1377 = icmp ne i32* %79, %1376
  br i1 %1377, label %1378, label %1383

; <label>:1378                                    ; preds = %1375
  %1379 = icmp eq i32* %79, null
  br i1 %1379, label %1382, label %1380

; <label>:1380                                    ; preds = %1378
  %1381 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1381) #8
  br label %1382

; <label>:1382                                    ; preds = %1380, %1378
  br label %1383

; <label>:1383                                    ; preds = %1382, %1375
  %1384 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1385 = icmp ne i32* %208, %1384
  br i1 %1385, label %1386, label %1391

; <label>:1386                                    ; preds = %1383
  %1387 = icmp eq i32* %208, null
  br i1 %1387, label %1390, label %1388

; <label>:1388                                    ; preds = %1386
  %1389 = bitcast i32* %208 to i8*
  call void @_ZdaPv(i8* %1389) #8
  br label %1390

; <label>:1390                                    ; preds = %1388, %1386
  br label %1391

; <label>:1391                                    ; preds = %1390, %1383
  %1392 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1393 = icmp ne i32* %222, %1392
  br i1 %1393, label %1394, label %1399

; <label>:1394                                    ; preds = %1391
  %1395 = icmp eq i32* %222, null
  br i1 %1395, label %1398, label %1396

; <label>:1396                                    ; preds = %1394
  %1397 = bitcast i32* %222 to i8*
  call void @_ZdaPv(i8* %1397) #8
  br label %1398

; <label>:1398                                    ; preds = %1396, %1394
  br label %1399

; <label>:1399                                    ; preds = %1398, %1391
  %1400 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1401 = icmp ne i32* %236, %1400
  br i1 %1401, label %1402, label %1407

; <label>:1402                                    ; preds = %1399
  %1403 = icmp eq i32* %236, null
  br i1 %1403, label %1406, label %1404

; <label>:1404                                    ; preds = %1402
  %1405 = bitcast i32* %236 to i8*
  call void @_ZdaPv(i8* %1405) #8
  br label %1406

; <label>:1406                                    ; preds = %1404, %1402
  br label %1407

; <label>:1407                                    ; preds = %1406, %1399
  %1408 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1409 = icmp ne i32* %250, %1408
  br i1 %1409, label %1410, label %1415

; <label>:1410                                    ; preds = %1407
  %1411 = icmp eq i32* %250, null
  br i1 %1411, label %1414, label %1412

; <label>:1412                                    ; preds = %1410
  %1413 = bitcast i32* %250 to i8*
  call void @_ZdaPv(i8* %1413) #8
  br label %1414

; <label>:1414                                    ; preds = %1412, %1410
  br label %1415

; <label>:1415                                    ; preds = %1414, %1407
  %1416 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1417 = icmp ne i32* %264, %1416
  br i1 %1417, label %1418, label %1423

; <label>:1418                                    ; preds = %1415
  %1419 = icmp eq i32* %264, null
  br i1 %1419, label %1422, label %1420

; <label>:1420                                    ; preds = %1418
  %1421 = bitcast i32* %264 to i8*
  call void @_ZdaPv(i8* %1421) #8
  br label %1422

; <label>:1422                                    ; preds = %1420, %1418
  br label %1423

; <label>:1423                                    ; preds = %1422, %1415
  %1424 = sitofp i32 %exclChecksum.0 to double
  %1425 = getelementptr inbounds double* %6, i64 22
  %1426 = load double* %1425, align 8
  %1427 = fadd double %1426, %1424
  store double %1427, double* %1425, align 8
  %1428 = getelementptr inbounds double* %6, i64 2
  %1429 = load double* %1428, align 8
  %1430 = fadd double %1429, %vdwEnergy.0
  store double %1430, double* %1428, align 8
  %1431 = getelementptr inbounds double* %6, i64 0
  %1432 = load double* %1431, align 8
  %1433 = fadd double %1432, %electEnergy.0
  store double %1433, double* %1431, align 8
  %1434 = getelementptr inbounds double* %6, i64 3
  %1435 = load double* %1434, align 8
  %1436 = fadd double %1435, %virial_xx.0
  store double %1436, double* %1434, align 8
  %1437 = getelementptr inbounds double* %6, i64 4
  %1438 = load double* %1437, align 8
  %1439 = fadd double %1438, %virial_xy.0
  store double %1439, double* %1437, align 8
  %1440 = getelementptr inbounds double* %6, i64 5
  %1441 = load double* %1440, align 8
  %1442 = fadd double %1441, %virial_xz.0
  store double %1442, double* %1440, align 8
  %1443 = getelementptr inbounds double* %6, i64 6
  %1444 = load double* %1443, align 8
  %1445 = fadd double %1444, %virial_xy.0
  store double %1445, double* %1443, align 8
  %1446 = getelementptr inbounds double* %6, i64 7
  %1447 = load double* %1446, align 8
  %1448 = fadd double %1447, %virial_yy.0
  store double %1448, double* %1446, align 8
  %1449 = getelementptr inbounds double* %6, i64 8
  %1450 = load double* %1449, align 8
  %1451 = fadd double %1450, %virial_yz.0
  store double %1451, double* %1449, align 8
  %1452 = getelementptr inbounds double* %6, i64 9
  %1453 = load double* %1452, align 8
  %1454 = fadd double %1453, %virial_xz.0
  store double %1454, double* %1452, align 8
  %1455 = getelementptr inbounds double* %6, i64 10
  %1456 = load double* %1455, align 8
  %1457 = fadd double %1456, %virial_yz.0
  store double %1457, double* %1455, align 8
  %1458 = getelementptr inbounds double* %6, i64 11
  %1459 = load double* %1458, align 8
  %1460 = fadd double %1459, %virial_zz.0
  store double %1460, double* %1458, align 8
  %1461 = getelementptr inbounds double* %6, i64 1
  %1462 = load double* %1461, align 8
  %1463 = fadd double %1462, %fullElectEnergy.0
  store double %1463, double* %1461, align 8
  %1464 = getelementptr inbounds double* %6, i64 12
  %1465 = load double* %1464, align 8
  %1466 = fadd double %1465, %fullElectVirial_xx.0
  store double %1466, double* %1464, align 8
  %1467 = getelementptr inbounds double* %6, i64 13
  %1468 = load double* %1467, align 8
  %1469 = fadd double %1468, %fullElectVirial_xy.0
  store double %1469, double* %1467, align 8
  %1470 = getelementptr inbounds double* %6, i64 14
  %1471 = load double* %1470, align 8
  %1472 = fadd double %1471, %fullElectVirial_xz.0
  store double %1472, double* %1470, align 8
  %1473 = getelementptr inbounds double* %6, i64 15
  %1474 = load double* %1473, align 8
  %1475 = fadd double %1474, %fullElectVirial_xy.0
  store double %1475, double* %1473, align 8
  %1476 = getelementptr inbounds double* %6, i64 16
  %1477 = load double* %1476, align 8
  %1478 = fadd double %1477, %fullElectVirial_yy.0
  store double %1478, double* %1476, align 8
  %1479 = getelementptr inbounds double* %6, i64 17
  %1480 = load double* %1479, align 8
  %1481 = fadd double %1480, %fullElectVirial_yz.0
  store double %1481, double* %1479, align 8
  %1482 = getelementptr inbounds double* %6, i64 18
  %1483 = load double* %1482, align 8
  %1484 = fadd double %1483, %fullElectVirial_xz.0
  store double %1484, double* %1482, align 8
  %1485 = getelementptr inbounds double* %6, i64 19
  %1486 = load double* %1485, align 8
  %1487 = fadd double %1486, %fullElectVirial_yz.0
  store double %1487, double* %1485, align 8
  %1488 = getelementptr inbounds double* %6, i64 20
  %1489 = load double* %1488, align 8
  %1490 = fadd double %1489, %fullElectVirial_zz.0
  store double %1490, double* %1488, align 8
  br label %1491

; <label>:1491                                    ; preds = %1423, %183, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil19calc_self_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.25, align 4
  %r2f31 = alloca %union.anon.26, align 4
  %r2f74 = alloca %union.anon.27, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1492

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %166

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  %139 = icmp ne i32 %all_fixed.0, 0
  br i1 %139, label %140, label %165

; <label>:140                                     ; preds = %138
  %141 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %142 = icmp ne i32* %51, %141
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %140
  %144 = icmp eq i32* %51, null
  br i1 %144, label %147, label %145

; <label>:145                                     ; preds = %143
  %146 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %146) #8
  br label %147

; <label>:147                                     ; preds = %145, %143
  br label %148

; <label>:148                                     ; preds = %147, %140
  %149 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %150 = icmp ne i32* %65, %149
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %148
  %152 = icmp eq i32* %65, null
  br i1 %152, label %155, label %153

; <label>:153                                     ; preds = %151
  %154 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %154) #8
  br label %155

; <label>:155                                     ; preds = %153, %151
  br label %156

; <label>:156                                     ; preds = %155, %148
  %157 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %158 = icmp ne i32* %79, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %79, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  br label %1492

; <label>:165                                     ; preds = %138
  br label %166

; <label>:166                                     ; preds = %165, %114
  %fixg.2 = phi i32 [ %fixg.0, %165 ], [ 0, %114 ]
  %167 = icmp ne i32 %fixg.2, 0
  br i1 %167, label %168, label %175

; <label>:168                                     ; preds = %166
  %169 = sub nsw i32 %fixg.2, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32* %65, i64 %170
  %172 = load i32* %171, align 4
  %173 = sext i32 %fixg.2 to i64
  %174 = getelementptr inbounds i32* %65, i64 %173
  store i32 %172, i32* %174, align 4
  br label %175

; <label>:175                                     ; preds = %168, %166
  %176 = icmp slt i32 %31, 1000
  br i1 %176, label %177, label %179

; <label>:177                                     ; preds = %175
  %178 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %188

; <label>:179                                     ; preds = %175
  %180 = add nsw i32 %31, 5
  %181 = sext i32 %180 to i64
  %182 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %181, i64 4)
  %183 = extractvalue { i64, i1 } %182, 1
  %184 = extractvalue { i64, i1 } %182, 0
  %185 = select i1 %183, i64 -1, i64 %184
  %186 = call noalias i8* @_Znam(i64 %185) #9
  %187 = bitcast i8* %186 to i32*
  br label %188

; <label>:188                                     ; preds = %179, %177
  %189 = phi i32* [ %178, %177 ], [ %187, %179 ]
  %190 = icmp slt i32 %31, 1000
  br i1 %190, label %191, label %193

; <label>:191                                     ; preds = %188
  %192 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %202

; <label>:193                                     ; preds = %188
  %194 = add nsw i32 %31, 5
  %195 = sext i32 %194 to i64
  %196 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %195, i64 4)
  %197 = extractvalue { i64, i1 } %196, 1
  %198 = extractvalue { i64, i1 } %196, 0
  %199 = select i1 %197, i64 -1, i64 %198
  %200 = call noalias i8* @_Znam(i64 %199) #9
  %201 = bitcast i8* %200 to i32*
  br label %202

; <label>:202                                     ; preds = %193, %191
  %203 = phi i32* [ %192, %191 ], [ %201, %193 ]
  %204 = icmp slt i32 %31, 1000
  br i1 %204, label %205, label %207

; <label>:205                                     ; preds = %202
  %206 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %216

; <label>:207                                     ; preds = %202
  %208 = add nsw i32 %31, 5
  %209 = sext i32 %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %209, i64 4)
  %211 = extractvalue { i64, i1 } %210, 1
  %212 = extractvalue { i64, i1 } %210, 0
  %213 = select i1 %211, i64 -1, i64 %212
  %214 = call noalias i8* @_Znam(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  br label %216

; <label>:216                                     ; preds = %207, %205
  %217 = phi i32* [ %206, %205 ], [ %215, %207 ]
  %218 = icmp slt i32 %31, 1000
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %216
  %220 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %230

; <label>:221                                     ; preds = %216
  %222 = add nsw i32 %31, 5
  %223 = sext i32 %222 to i64
  %224 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %223, i64 4)
  %225 = extractvalue { i64, i1 } %224, 1
  %226 = extractvalue { i64, i1 } %224, 0
  %227 = select i1 %225, i64 -1, i64 %226
  %228 = call noalias i8* @_Znam(i64 %227) #9
  %229 = bitcast i8* %228 to i32*
  br label %230

; <label>:230                                     ; preds = %221, %219
  %231 = phi i32* [ %220, %219 ], [ %229, %221 ]
  %232 = icmp slt i32 %31, 1000
  br i1 %232, label %233, label %235

; <label>:233                                     ; preds = %230
  %234 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %244

; <label>:235                                     ; preds = %230
  %236 = add nsw i32 %31, 5
  %237 = sext i32 %236 to i64
  %238 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %237, i64 4)
  %239 = extractvalue { i64, i1 } %238, 1
  %240 = extractvalue { i64, i1 } %238, 0
  %241 = select i1 %239, i64 -1, i64 %240
  %242 = call noalias i8* @_Znam(i64 %241) #9
  %243 = bitcast i8* %242 to i32*
  br label %244

; <label>:244                                     ; preds = %235, %233
  %245 = phi i32* [ %234, %233 ], [ %243, %235 ]
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 0
  %248 = load %class.Vector** %247, align 8
  %249 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %250 = getelementptr inbounds [2 x %class.Vector*]* %249, i32 0, i64 1
  %251 = load %class.Vector** %250, align 8
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %253 = getelementptr inbounds [2 x %class.Vector*]* %252, i32 0, i64 0
  %254 = load %class.Vector** %253, align 8
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %256 = getelementptr inbounds [2 x %class.Vector*]* %255, i32 0, i64 1
  %257 = load %class.Vector** %256, align 8
  %258 = sub nsw i32 %28, 1
  %259 = mul nsw i32 %258, %31
  %260 = sdiv i32 %259, 2
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %262 = load i32* %261, align 4
  %263 = mul nsw i32 %260, %262
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %265 = load i32* %264, align 4
  %266 = sdiv i32 %263, %265
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %268 = load i32* %267, align 4
  %269 = mul nsw i32 %260, %268
  %270 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %271 = load i32* %270, align 4
  %272 = sdiv i32 %269, %271
  br label %273

; <label>:273                                     ; preds = %1367, %244
  %g_lower.0 = phi i32 [ 0, %244 ], [ %g_lower.4, %1367 ]
  %j_hgroup.0 = phi i32 [ 0, %244 ], [ %j_hgroup.3, %1367 ]
  %fixg_lower.0 = phi i32 [ 0, %244 ], [ %fixg_lower.4, %1367 ]
  %pairlistindex.0 = phi i32 [ 0, %244 ], [ %pairlistindex.3, %1367 ]
  %pairlistoffset.0 = phi i32 [ 0, %244 ], [ %pairlistoffset.2, %1367 ]
  %pairCount.0 = phi i32 [ 0, %244 ], [ %pairCount.3, %1367 ]
  %i.0 = phi i32 [ 0, %244 ], [ %1368, %1367 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_zz.4, %1367 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yz.4, %1367 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yy.4, %1367 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xz.4, %1367 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xy.4, %1367 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xx.4, %1367 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_zz.3, %1367 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yz.3, %1367 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yy.3, %1367 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xz.3, %1367 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xy.3, %1367 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xx.3, %1367 ]
  %exclChecksum.0 = phi i32 [ 0, %244 ], [ %exclChecksum.11, %1367 ]
  %274 = sub nsw i32 %28, 1
  %275 = icmp slt i32 %i.0, %274
  br i1 %275, label %276, label %1369

; <label>:276                                     ; preds = %273
  %277 = sext i32 %i.0 to i64
  %278 = getelementptr inbounds %struct.CompAtom* %34, i64 %277
  %279 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %280 = load i32* %279, align 4
  %281 = and i32 %280, 4194303
  %282 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %281)
  %283 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 0
  %284 = load i32* %283, align 4
  %285 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 1
  %286 = load i32* %285, align 4
  %287 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 2
  %288 = load i8** %287, align 8
  %289 = sext i32 %284 to i64
  %290 = sub i64 0, %289
  %291 = getelementptr inbounds i8* %288, i64 %290
  %292 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %293 = getelementptr inbounds %class.Vector* %292, i32 0, i32 0
  %294 = load double* %293, align 8
  %295 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %296 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %297 = load double* %296, align 8
  %298 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %299 = getelementptr inbounds %class.Vector* %298, i32 0, i32 2
  %300 = load double* %299, align 8
  %301 = sext i32 %i.0 to i64
  %302 = getelementptr inbounds %class.Vector* %248, i64 %301
  %303 = sext i32 %i.0 to i64
  %304 = getelementptr inbounds %class.Vector* %254, i64 %303
  %305 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %306 = load i32* %305, align 4
  %307 = lshr i32 %306, 22
  %308 = and i32 %307, 7
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %316, label %310

; <label>:310                                     ; preds = %276
  %311 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %312 = load i32* %311, align 4
  %313 = lshr i32 %312, 25
  %314 = and i32 %313, 1
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %527

; <label>:316                                     ; preds = %310, %276
  %317 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %318 = load i32* %317, align 4
  %319 = lshr i32 %318, 22
  %320 = and i32 %319, 7
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %342

; <label>:322                                     ; preds = %316
  %323 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %324 = load i32* %323, align 4
  %325 = lshr i32 %324, 22
  %326 = and i32 %325, 7
  %327 = sub nsw i32 %28, 1
  %328 = sub nsw i32 %327, %i.0
  %329 = mul nsw i32 %326, %328
  %330 = add nsw i32 %pairCount.0, %329
  %331 = sub nsw i32 %326, 1
  %332 = mul nsw i32 %326, %331
  %333 = sdiv i32 %332, 2
  %334 = sub nsw i32 %330, %333
  %335 = icmp slt i32 %pairCount.0, %266
  br i1 %335, label %338, label %336

; <label>:336                                     ; preds = %322
  %337 = icmp sge i32 %pairCount.0, %272
  br i1 %337, label %338, label %341

; <label>:338                                     ; preds = %336, %322
  %339 = sub nsw i32 %326, 1
  %340 = add nsw i32 %i.0, %339
  br label %1367

; <label>:341                                     ; preds = %336
  br label %342

; <label>:342                                     ; preds = %341, %316
  %pairCount.1 = phi i32 [ %334, %341 ], [ %pairCount.0, %316 ]
  %343 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %351

; <label>:345                                     ; preds = %342
  %346 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %347 = load i32* %346, align 4
  %348 = lshr i32 %347, 27
  %349 = and i32 %348, 1
  %350 = icmp ne i32 %349, 0
  br label %351

; <label>:351                                     ; preds = %345, %342
  %352 = phi i1 [ false, %342 ], [ %350, %345 ]
  %353 = zext i1 %352 to i32
  %354 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %355 = load i32* %354, align 4
  %356 = lshr i32 %355, 22
  %357 = and i32 %356, 7
  %358 = icmp ne i32 %357, 0
  br i1 %358, label %359, label %389

; <label>:359                                     ; preds = %351
  %360 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %361 = load i32* %360, align 4
  %362 = lshr i32 %361, 22
  %363 = and i32 %362, 7
  %364 = add nsw i32 %i.0, %363
  br label %365

; <label>:365                                     ; preds = %374, %359
  %g_lower.1 = phi i32 [ %g_lower.0, %359 ], [ %375, %374 ]
  %366 = icmp slt i32 %g_lower.1, %g.0
  br i1 %366, label %367, label %372

; <label>:367                                     ; preds = %365
  %368 = sext i32 %g_lower.1 to i64
  %369 = getelementptr inbounds i32* %51, i64 %368
  %370 = load i32* %369, align 4
  %371 = icmp slt i32 %370, %364
  br label %372

; <label>:372                                     ; preds = %367, %365
  %373 = phi i1 [ false, %365 ], [ %371, %367 ]
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %372
  %375 = add nsw i32 %g_lower.1, 1
  br label %365

; <label>:376                                     ; preds = %372
  br label %377

; <label>:377                                     ; preds = %386, %376
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %376 ], [ %387, %386 ]
  %378 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %378, label %379, label %384

; <label>:379                                     ; preds = %377
  %380 = sext i32 %fixg_lower.1 to i64
  %381 = getelementptr inbounds i32* %65, i64 %380
  %382 = load i32* %381, align 4
  %383 = icmp slt i32 %382, %364
  br label %384

; <label>:384                                     ; preds = %379, %377
  %385 = phi i1 [ false, %377 ], [ %383, %379 ]
  br i1 %385, label %386, label %388

; <label>:386                                     ; preds = %384
  %387 = add nsw i32 %fixg_lower.1, 1
  br label %377

; <label>:388                                     ; preds = %384
  br label %389

; <label>:389                                     ; preds = %388, %351
  %g_lower.2 = phi i32 [ %g_lower.1, %388 ], [ %g_lower.0, %351 ]
  %j_hgroup.1 = phi i32 [ %364, %388 ], [ %j_hgroup.0, %351 ]
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %388 ], [ %fixg_lower.0, %351 ]
  %390 = add nsw i32 %i.0, 1
  br label %391

; <label>:391                                     ; preds = %397, %389
  %pairlistindex.1 = phi i32 [ 0, %389 ], [ %394, %397 ]
  %j.1 = phi i32 [ %390, %389 ], [ %398, %397 ]
  %392 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %392, label %393, label %399

; <label>:393                                     ; preds = %391
  %394 = add nsw i32 %pairlistindex.1, 1
  %395 = sext i32 %pairlistindex.1 to i64
  %396 = getelementptr inbounds i32* %189, i64 %395
  store i32 %j.1, i32* %396, align 4
  br label %397

; <label>:397                                     ; preds = %393
  %398 = add nsw i32 %j.1, 1
  br label %391

; <label>:399                                     ; preds = %391
  %400 = sext i32 %pairlistindex.1 to i64
  %401 = getelementptr inbounds i32* %189, i64 %400
  %402 = icmp ne i32 %353, 0
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %399
  br label %405

; <label>:404                                     ; preds = %399
  br label %405

; <label>:405                                     ; preds = %404, %403
  %406 = phi i32* [ %65, %403 ], [ %51, %404 ]
  %407 = icmp ne i32 %353, 0
  br i1 %407, label %408, label %409

; <label>:408                                     ; preds = %405
  br label %410

; <label>:409                                     ; preds = %405
  br label %410

; <label>:410                                     ; preds = %409, %408
  %411 = phi i32 [ %fixg_lower.2, %408 ], [ %g_lower.2, %409 ]
  %412 = icmp ne i32 %353, 0
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %410
  br label %415

; <label>:414                                     ; preds = %410
  br label %415

; <label>:415                                     ; preds = %414, %413
  %416 = phi i32 [ %fixg.2, %413 ], [ %g.0, %414 ]
  %417 = icmp slt i32 %411, %416
  br i1 %417, label %418, label %512

; <label>:418                                     ; preds = %415
  %419 = sext i32 %411 to i64
  %420 = getelementptr inbounds i32* %406, i64 %419
  %421 = load i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds %struct.CompAtom* %37, i64 %422
  %424 = getelementptr inbounds %struct.CompAtom* %423, i32 0, i32 0
  %425 = getelementptr inbounds %class.Vector* %424, i32 0, i32 0
  %426 = load double* %425, align 8
  %427 = sext i32 %421 to i64
  %428 = getelementptr inbounds %struct.CompAtom* %37, i64 %427
  %429 = getelementptr inbounds %struct.CompAtom* %428, i32 0, i32 0
  %430 = getelementptr inbounds %class.Vector* %429, i32 0, i32 1
  %431 = load double* %430, align 8
  %432 = sext i32 %421 to i64
  %433 = getelementptr inbounds %struct.CompAtom* %37, i64 %432
  %434 = getelementptr inbounds %struct.CompAtom* %433, i32 0, i32 0
  %435 = getelementptr inbounds %class.Vector* %434, i32 0, i32 2
  %436 = load double* %435, align 8
  br label %437

; <label>:437                                     ; preds = %470, %418
  %g.3 = phi i32 [ %411, %418 ], [ %440, %470 ]
  %gli.0 = phi i32* [ %79, %418 ], [ %gli.1, %470 ]
  %j2.0 = phi i32 [ %421, %418 ], [ %443, %470 ]
  %p_j_x.0 = phi double [ %426, %418 ], [ %450, %470 ]
  %p_j_y.0 = phi double [ %431, %418 ], [ %458, %470 ]
  %p_j_z.0 = phi double [ %436, %418 ], [ %466, %470 ]
  %438 = icmp slt i32 %g.3, %416
  br i1 %438, label %439, label %471

; <label>:439                                     ; preds = %437
  %440 = add nsw i32 %g.3, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i32* %406, i64 %441
  %443 = load i32* %442, align 4
  %444 = fsub double %294, %p_j_x.0
  %445 = fmul double %444, %444
  %446 = sext i32 %443 to i64
  %447 = getelementptr inbounds %struct.CompAtom* %37, i64 %446
  %448 = getelementptr inbounds %struct.CompAtom* %447, i32 0, i32 0
  %449 = getelementptr inbounds %class.Vector* %448, i32 0, i32 0
  %450 = load double* %449, align 8
  %451 = fsub double %297, %p_j_y.0
  %452 = fmul double %451, %451
  %453 = fadd double %445, %452
  %454 = sext i32 %443 to i64
  %455 = getelementptr inbounds %struct.CompAtom* %37, i64 %454
  %456 = getelementptr inbounds %struct.CompAtom* %455, i32 0, i32 0
  %457 = getelementptr inbounds %class.Vector* %456, i32 0, i32 1
  %458 = load double* %457, align 8
  %459 = fsub double %300, %p_j_z.0
  %460 = fmul double %459, %459
  %461 = fadd double %453, %460
  %462 = sext i32 %443 to i64
  %463 = getelementptr inbounds %struct.CompAtom* %37, i64 %462
  %464 = getelementptr inbounds %struct.CompAtom* %463, i32 0, i32 0
  %465 = getelementptr inbounds %class.Vector* %464, i32 0, i32 2
  %466 = load double* %465, align 8
  %467 = fcmp ole double %461, %8
  br i1 %467, label %468, label %470

; <label>:468                                     ; preds = %439
  store i32 %j2.0, i32* %gli.0, align 4
  %469 = getelementptr inbounds i32* %gli.0, i32 1
  br label %470

; <label>:470                                     ; preds = %468, %439
  %gli.1 = phi i32* [ %469, %468 ], [ %gli.0, %439 ]
  br label %437

; <label>:471                                     ; preds = %437
  %472 = ptrtoint i32* %gli.0 to i64
  %473 = ptrtoint i32* %79 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  br label %477

; <label>:477                                     ; preds = %509, %471
  %pli.0 = phi i32* [ %401, %471 ], [ %508, %509 ]
  %h.0 = phi i32 [ 0, %471 ], [ %510, %509 ]
  %478 = icmp slt i32 %h.0, %476
  br i1 %478, label %479, label %511

; <label>:479                                     ; preds = %477
  %480 = sext i32 %h.0 to i64
  %481 = getelementptr inbounds i32* %79, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %37, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 25
  %488 = and i32 %487, 1
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %491

; <label>:490                                     ; preds = %479
  br label %498

; <label>:491                                     ; preds = %479
  %492 = sext i32 %482 to i64
  %493 = getelementptr inbounds %struct.CompAtom* %37, i64 %492
  %494 = getelementptr inbounds %struct.CompAtom* %493, i32 0, i32 2
  %495 = load i32* %494, align 4
  %496 = lshr i32 %495, 22
  %497 = and i32 %496, 7
  br label %498

; <label>:498                                     ; preds = %491, %490
  %499 = phi i32 [ 1, %490 ], [ %497, %491 ]
  %500 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %482, i32* %500, align 4
  %501 = add nsw i32 %482, 1
  %502 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %501, i32* %502, align 4
  %503 = add nsw i32 %482, 2
  %504 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %503, i32* %504, align 4
  %505 = add nsw i32 %482, 3
  %506 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %505, i32* %506, align 4
  %507 = sext i32 %499 to i64
  %508 = getelementptr inbounds i32* %pli.0, i64 %507
  br label %509

; <label>:509                                     ; preds = %498
  %510 = add nsw i32 %h.0, 1
  br label %477

; <label>:511                                     ; preds = %477
  br label %512

; <label>:512                                     ; preds = %511, %415
  %pli.1 = phi i32* [ %pli.0, %511 ], [ %401, %415 ]
  %513 = ptrtoint i32* %pli.1 to i64
  %514 = ptrtoint i32* %189 to i64
  %515 = sub i64 %513, %514
  %516 = sdiv exact i64 %515, 4
  %517 = trunc i64 %516 to i32
  %518 = icmp ne i32 %517, 0
  br i1 %518, label %519, label %526

; <label>:519                                     ; preds = %512
  %520 = sub nsw i32 %517, 1
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i32* %189, i64 %521
  %523 = load i32* %522, align 4
  %524 = sext i32 %517 to i64
  %525 = getelementptr inbounds i32* %189, i64 %524
  store i32 %523, i32* %525, align 4
  br label %526

; <label>:526                                     ; preds = %519, %512
  br label %529

; <label>:527                                     ; preds = %310
  %528 = add nsw i32 %pairlistoffset.0, 1
  br label %529

; <label>:529                                     ; preds = %527, %526
  %g_lower.3 = phi i32 [ %g_lower.2, %526 ], [ %g_lower.0, %527 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %526 ], [ %j_hgroup.0, %527 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %526 ], [ %fixg_lower.0, %527 ]
  %pairlistindex.2 = phi i32 [ %517, %526 ], [ %pairlistindex.0, %527 ]
  %pairlistoffset.1 = phi i32 [ 0, %526 ], [ %528, %527 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %526 ], [ %pairCount.0, %527 ]
  %530 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %538

; <label>:532                                     ; preds = %529
  %533 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 26
  %536 = and i32 %535, 1
  %537 = icmp ne i32 %536, 0
  br label %538

; <label>:538                                     ; preds = %532, %529
  %539 = phi i1 [ false, %529 ], [ %537, %532 ]
  %540 = zext i1 %539 to i32
  %541 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 1
  %542 = load float* %541, align 4
  %543 = fpext float %542 to double
  %544 = fmul double 3.320636e+02, %543
  %545 = fmul double %544, %16
  %546 = fmul double %545, %9
  %547 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 4194303
  %550 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %549)
  %551 = zext i16 %550 to i32
  %552 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %551)
  %553 = icmp ne i32 %540, 0
  br i1 %553, label %554, label %616

; <label>:554                                     ; preds = %538
  br label %555

; <label>:555                                     ; preds = %613, %554
  %pli3.0 = phi i32* [ %203, %554 ], [ %pli3.2, %613 ]
  %plin.0 = phi i32* [ %217, %554 ], [ %plin.2, %613 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %554 ], [ %614, %613 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %554 ], [ %exclChecksum.3, %613 ]
  %556 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %556, label %557, label %615

; <label>:557                                     ; preds = %555
  %558 = sext i32 %k.0 to i64
  %559 = getelementptr inbounds i32* %189, i64 %558
  %560 = load i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %37, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 0
  %564 = getelementptr inbounds %class.Vector* %563, i32 0, i32 0
  %565 = load double* %564, align 8
  %566 = fsub double %294, %565
  %567 = fmul double %566, %566
  %568 = sext i32 %560 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %37, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 1
  %572 = load double* %571, align 8
  %573 = fsub double %297, %572
  %574 = fmul double %573, %573
  %575 = fadd double %567, %574
  %576 = sext i32 %560 to i64
  %577 = getelementptr inbounds %struct.CompAtom* %37, i64 %576
  %578 = getelementptr inbounds %struct.CompAtom* %577, i32 0, i32 0
  %579 = getelementptr inbounds %class.Vector* %578, i32 0, i32 2
  %580 = load double* %579, align 8
  %581 = fsub double %300, %580
  %582 = fmul double %581, %581
  %583 = fadd double %575, %582
  %584 = sext i32 %560 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %37, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 2
  %587 = load i32* %586, align 4
  %588 = lshr i32 %587, 26
  %589 = and i32 %588, 1
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %612, label %591

; <label>:591                                     ; preds = %557
  %592 = fcmp ole double %583, %7
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %591
  %594 = fcmp ole double %583, %22
  br i1 %594, label %595, label %598

; <label>:595                                     ; preds = %593
  %596 = add nsw i32 %exclChecksum.1, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %612, label %598

; <label>:598                                     ; preds = %595, %593
  %exclChecksum.2 = phi i32 [ %596, %595 ], [ %exclChecksum.1, %593 ]
  %599 = sext i32 %560 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %37, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  %604 = icmp sge i32 %603, %284
  br i1 %604, label %605, label %609

; <label>:605                                     ; preds = %598
  %606 = icmp sle i32 %603, %286
  br i1 %606, label %607, label %609

; <label>:607                                     ; preds = %605
  %608 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %560, i32* %pli3.0, align 4
  br label %611

; <label>:609                                     ; preds = %605, %598
  %610 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %560, i32* %plin.0, align 4
  br label %611

; <label>:611                                     ; preds = %609, %607
  %pli3.1 = phi i32* [ %608, %607 ], [ %pli3.0, %609 ]
  %plin.1 = phi i32* [ %plin.0, %607 ], [ %610, %609 ]
  br label %612

; <label>:612                                     ; preds = %611, %595, %591, %557
  %pli3.2 = phi i32* [ %pli3.0, %557 ], [ %pli3.0, %595 ], [ %pli3.1, %611 ], [ %pli3.0, %591 ]
  %plin.2 = phi i32* [ %plin.0, %557 ], [ %plin.0, %595 ], [ %plin.1, %611 ], [ %plin.0, %591 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %557 ], [ %596, %595 ], [ %exclChecksum.2, %611 ], [ %exclChecksum.1, %591 ]
  br label %613

; <label>:613                                     ; preds = %612
  %614 = add nsw i32 %k.0, 1
  br label %555

; <label>:615                                     ; preds = %555
  br label %695

; <label>:616                                     ; preds = %538
  %617 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %617, label %618, label %694

; <label>:618                                     ; preds = %616
  %619 = sext i32 %pairlistoffset.1 to i64
  %620 = getelementptr inbounds i32* %189, i64 %619
  %621 = load i32* %620, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %37, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = sext i32 %621 to i64
  %628 = getelementptr inbounds %struct.CompAtom* %37, i64 %627
  %629 = getelementptr inbounds %struct.CompAtom* %628, i32 0, i32 0
  %630 = getelementptr inbounds %class.Vector* %629, i32 0, i32 1
  %631 = load double* %630, align 8
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %37, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 2
  %636 = load double* %635, align 8
  %637 = sext i32 %621 to i64
  %638 = getelementptr inbounds %struct.CompAtom* %37, i64 %637
  %639 = getelementptr inbounds %struct.CompAtom* %638, i32 0, i32 2
  %640 = load i32* %639, align 4
  %641 = and i32 %640, 4194303
  br label %642

; <label>:642                                     ; preds = %687, %618
  %pli3.3 = phi i32* [ %203, %618 ], [ %pli3.5, %687 ]
  %plin.3 = phi i32* [ %217, %618 ], [ %plin.5, %687 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %618 ], [ %645, %687 ]
  %j210.0 = phi i32 [ %621, %618 ], [ %648, %687 ]
  %p_j_x11.0 = phi double [ %626, %618 ], [ %655, %687 ]
  %p_j_y12.0 = phi double [ %631, %618 ], [ %663, %687 ]
  %p_j_z13.0 = phi double [ %636, %618 ], [ %671, %687 ]
  %atom214.0 = phi i32 [ %641, %618 ], [ %692, %687 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %618 ], [ %exclChecksum.6, %687 ]
  %643 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %643, label %644, label %693

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %k9.0, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32* %189, i64 %646
  %648 = load i32* %647, align 4
  %649 = fsub double %294, %p_j_x11.0
  %650 = fmul double %649, %649
  %651 = sext i32 %648 to i64
  %652 = getelementptr inbounds %struct.CompAtom* %37, i64 %651
  %653 = getelementptr inbounds %struct.CompAtom* %652, i32 0, i32 0
  %654 = getelementptr inbounds %class.Vector* %653, i32 0, i32 0
  %655 = load double* %654, align 8
  %656 = fsub double %297, %p_j_y12.0
  %657 = fmul double %656, %656
  %658 = fadd double %650, %657
  %659 = sext i32 %648 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %37, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 0
  %662 = getelementptr inbounds %class.Vector* %661, i32 0, i32 1
  %663 = load double* %662, align 8
  %664 = fsub double %300, %p_j_z13.0
  %665 = fmul double %664, %664
  %666 = fadd double %658, %665
  %667 = sext i32 %648 to i64
  %668 = getelementptr inbounds %struct.CompAtom* %37, i64 %667
  %669 = getelementptr inbounds %struct.CompAtom* %668, i32 0, i32 0
  %670 = getelementptr inbounds %class.Vector* %669, i32 0, i32 2
  %671 = load double* %670, align 8
  %672 = fcmp ole double %666, %7
  br i1 %672, label %673, label %687

; <label>:673                                     ; preds = %644
  %674 = fcmp ole double %666, %22
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = add nsw i32 %exclChecksum.4, 1
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %687, label %678

; <label>:678                                     ; preds = %675, %673
  %exclChecksum.5 = phi i32 [ %676, %675 ], [ %exclChecksum.4, %673 ]
  %679 = icmp sge i32 %atom214.0, %284
  br i1 %679, label %680, label %684

; <label>:680                                     ; preds = %678
  %681 = icmp sle i32 %atom214.0, %286
  br i1 %681, label %682, label %684

; <label>:682                                     ; preds = %680
  %683 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %686

; <label>:684                                     ; preds = %680, %678
  %685 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %686

; <label>:686                                     ; preds = %684, %682
  %pli3.4 = phi i32* [ %683, %682 ], [ %pli3.3, %684 ]
  %plin.4 = phi i32* [ %plin.3, %682 ], [ %685, %684 ]
  br label %687

; <label>:687                                     ; preds = %686, %675, %644
  %pli3.5 = phi i32* [ %pli3.3, %675 ], [ %pli3.4, %686 ], [ %pli3.3, %644 ]
  %plin.5 = phi i32* [ %plin.3, %675 ], [ %plin.4, %686 ], [ %plin.3, %644 ]
  %exclChecksum.6 = phi i32 [ %676, %675 ], [ %exclChecksum.5, %686 ], [ %exclChecksum.4, %644 ]
  %688 = sext i32 %648 to i64
  %689 = getelementptr inbounds %struct.CompAtom* %37, i64 %688
  %690 = getelementptr inbounds %struct.CompAtom* %689, i32 0, i32 2
  %691 = load i32* %690, align 4
  %692 = and i32 %691, 4194303
  br label %642

; <label>:693                                     ; preds = %642
  br label %694

; <label>:694                                     ; preds = %693, %616
  %pli3.6 = phi i32* [ %pli3.3, %693 ], [ %203, %616 ]
  %plin.6 = phi i32* [ %plin.3, %693 ], [ %217, %616 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %693 ], [ %exclChecksum.0, %616 ]
  br label %695

; <label>:695                                     ; preds = %694, %615
  %pli3.7 = phi i32* [ %pli3.0, %615 ], [ %pli3.6, %694 ]
  %plin.7 = phi i32* [ %plin.0, %615 ], [ %plin.6, %694 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %615 ], [ %exclChecksum.7, %694 ]
  %696 = ptrtoint i32* %pli3.7 to i64
  %697 = ptrtoint i32* %203 to i64
  %698 = sub i64 %696, %697
  %699 = sdiv exact i64 %698, 4
  %700 = trunc i64 %699 to i32
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %709

; <label>:702                                     ; preds = %695
  %703 = sub nsw i32 %700, 1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i32* %203, i64 %704
  %706 = load i32* %705, align 4
  %707 = sext i32 %700 to i64
  %708 = getelementptr inbounds i32* %203, i64 %707
  store i32 %706, i32* %708, align 4
  br label %709

; <label>:709                                     ; preds = %702, %695
  br label %710

; <label>:710                                     ; preds = %721, %709
  %plix.0 = phi i32* [ %231, %709 ], [ %719, %721 ]
  %pln.0 = phi i32* [ %217, %709 ], [ %722, %721 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %709 ], [ %720, %721 ]
  %711 = icmp ult i32* %pln.0, %plin.7
  br i1 %711, label %712, label %715

; <label>:712                                     ; preds = %710
  %713 = load i32* %pln.0, align 4
  %714 = icmp slt i32 %713, %j_hgroup.2
  br label %715

; <label>:715                                     ; preds = %712, %710
  %716 = phi i1 [ false, %710 ], [ %714, %712 ]
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %715
  %718 = load i32* %pln.0, align 4
  %719 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %718, i32* %plix.0, align 4
  %720 = add nsw i32 %exclChecksum.9, -1
  br label %721

; <label>:721                                     ; preds = %717
  %722 = getelementptr inbounds i32* %pln.0, i32 1
  br label %710

; <label>:723                                     ; preds = %715
  br label %724

; <label>:724                                     ; preds = %739, %723
  %plix.1 = phi i32* [ %plix.0, %723 ], [ %737, %739 ]
  %k17.0 = phi i32 [ 0, %723 ], [ %740, %739 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %723 ], [ %738, %739 ]
  %725 = icmp slt i32 %k17.0, %700
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = sext i32 %k17.0 to i64
  %728 = getelementptr inbounds i32* %203, i64 %727
  %729 = load i32* %728, align 4
  %730 = icmp slt i32 %729, %j_hgroup.2
  br label %731

; <label>:731                                     ; preds = %726, %724
  %732 = phi i1 [ false, %724 ], [ %730, %726 ]
  br i1 %732, label %733, label %741

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %203, i64 %734
  %736 = load i32* %735, align 4
  %737 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %736, i32* %plix.1, align 4
  %738 = add nsw i32 %exclChecksum.10, -1
  br label %739

; <label>:739                                     ; preds = %733
  %740 = add nsw i32 %k17.0, 1
  br label %724

; <label>:741                                     ; preds = %731
  br label %742

; <label>:742                                     ; preds = %764, %741
  %plin.8 = phi i32* [ %plin.7, %741 ], [ %plin.9, %764 ]
  %plix.2 = phi i32* [ %plix.1, %741 ], [ %plix.3, %764 ]
  %plim.0 = phi i32* [ %245, %741 ], [ %plim.1, %764 ]
  %k17.1 = phi i32 [ %k17.0, %741 ], [ %765, %764 ]
  %743 = icmp slt i32 %k17.1, %700
  br i1 %743, label %744, label %766

; <label>:744                                     ; preds = %742
  %745 = sext i32 %k17.1 to i64
  %746 = getelementptr inbounds i32* %203, i64 %745
  %747 = load i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CompAtom* %37, i64 %748
  %750 = getelementptr inbounds %struct.CompAtom* %749, i32 0, i32 2
  %751 = load i32* %750, align 4
  %752 = and i32 %751, 4194303
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8* %291, i64 %753
  %755 = load i8* %754, align 1
  %756 = sext i8 %755 to i32
  switch i32 %756, label %763 [
    i32 0, label %757
    i32 1, label %759
    i32 2, label %761
  ]

; <label>:757                                     ; preds = %744
  %758 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %747, i32* %plin.8, align 4
  br label %763

; <label>:759                                     ; preds = %744
  %760 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %747, i32* %plix.2, align 4
  br label %763

; <label>:761                                     ; preds = %744
  %762 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %747, i32* %plim.0, align 4
  br label %763

; <label>:763                                     ; preds = %761, %759, %757, %744
  %plin.9 = phi i32* [ %plin.8, %744 ], [ %plin.8, %761 ], [ %plin.8, %759 ], [ %758, %757 ]
  %plix.3 = phi i32* [ %plix.2, %744 ], [ %plix.2, %761 ], [ %760, %759 ], [ %plix.2, %757 ]
  %plim.1 = phi i32* [ %plim.0, %744 ], [ %762, %761 ], [ %plim.0, %759 ], [ %plim.0, %757 ]
  br label %764

; <label>:764                                     ; preds = %763
  %765 = add nsw i32 %k17.1, 1
  br label %742

; <label>:766                                     ; preds = %742
  %767 = ptrtoint i32* %plix.2 to i64
  %768 = ptrtoint i32* %231 to i64
  %769 = sub i64 %767, %768
  %770 = sdiv exact i64 %769, 4
  %771 = sext i32 %exclChecksum.10 to i64
  %772 = add nsw i64 %771, %770
  %773 = trunc i64 %772 to i32
  %774 = ptrtoint i32* %plim.0 to i64
  %775 = ptrtoint i32* %245 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %773 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plin.8 to i64
  %782 = ptrtoint i32* %pln.0 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = trunc i64 %784 to i32
  br label %786

; <label>:786                                     ; preds = %998, %766
  %k17.2 = phi i32 [ 0, %766 ], [ %999, %998 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %766 ], [ %991, %998 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %766 ], [ %982, %998 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %766 ], [ %980, %998 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %766 ], [ %971, %998 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %766 ], [ %969, %998 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %766 ], [ %967, %998 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %766 ], [ %939, %998 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %766 ], [ %930, %998 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %766 ], [ %928, %998 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %766 ], [ %919, %998 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %766 ], [ %917, %998 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %766 ], [ %915, %998 ]
  %787 = icmp slt i32 %k17.2, %785
  br i1 %787, label %788, label %1000

; <label>:788                                     ; preds = %786
  %789 = sext i32 %k17.2 to i64
  %790 = getelementptr inbounds i32* %pln.0, i64 %789
  %791 = load i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds %struct.CompAtom* %37, i64 %792
  %794 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 0
  %796 = load double* %795, align 8
  %797 = fsub double %294, %796
  %798 = fmul double %797, %797
  %799 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %800 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %801 = load double* %800, align 8
  %802 = fsub double %297, %801
  %803 = fmul double %802, %802
  %804 = fadd double %798, %803
  %805 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %806 = getelementptr inbounds %class.Vector* %805, i32 0, i32 2
  %807 = load double* %806, align 8
  %808 = fsub double %300, %807
  %809 = fmul double %808, %808
  %810 = fadd double %804, %809
  %811 = fptrunc double %810 to float
  %812 = bitcast %union.anon.25* %r2f to float*
  store float %811, float* %812, align 4
  %813 = bitcast %union.anon.25* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = ashr i32 %814, 17
  %816 = add nsw i32 %815, %25
  %817 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %818 = load i32* %817, align 4
  %819 = and i32 %818, 4194303
  %820 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %819)
  %821 = zext i16 %820 to i32
  %822 = mul nsw i32 2, %821
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %823
  %825 = mul nsw i32 16, %816
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds double* %14, i64 %826
  %828 = getelementptr inbounds double* %827, i64 0
  %829 = load double* %828, align 8
  %830 = mul nsw i32 16, %816
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double* %14, i64 %831
  %833 = getelementptr inbounds double* %832, i64 4
  %834 = getelementptr inbounds double* %833, i64 0
  %835 = load double* %834, align 8
  %836 = mul nsw i32 16, %816
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds double* %14, i64 %837
  %839 = getelementptr inbounds double* %838, i64 8
  %840 = getelementptr inbounds double* %839, i64 0
  %841 = load double* %840, align 8
  %842 = mul nsw i32 16, %816
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds double* %14, i64 %843
  %845 = getelementptr inbounds double* %844, i64 8
  %846 = getelementptr inbounds double* %845, i64 4
  %847 = getelementptr inbounds double* %846, i64 0
  %848 = load double* %847, align 8
  %849 = bitcast %union.anon.25* %r2f to i32*
  %850 = load i32* %849, align 4
  %851 = and i32 %850, -131072
  store i32 %851, i32* %849, align 4
  %852 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 1
  %853 = load float* %852, align 4
  %854 = fpext float %853 to double
  %855 = fmul double %546, %854
  %856 = bitcast %union.anon.25* %r2f to float*
  %857 = load float* %856, align 4
  %858 = fpext float %857 to double
  %859 = fsub double %810, %858
  %860 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 0
  %861 = load double* %860, align 8
  %862 = fmul double %16, %861
  %863 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 1
  %864 = load double* %863, align 8
  %865 = fmul double %16, %864
  %866 = fmul double %862, %829
  %867 = fmul double %865, %835
  %868 = fsub double %866, %867
  %869 = getelementptr inbounds double* %827, i64 3
  %870 = load double* %869, align 8
  %871 = fmul double %862, %870
  %872 = getelementptr inbounds double* %833, i64 3
  %873 = load double* %872, align 8
  %874 = fmul double %865, %873
  %875 = fsub double %871, %874
  %876 = getelementptr inbounds double* %827, i64 2
  %877 = load double* %876, align 8
  %878 = fmul double %862, %877
  %879 = getelementptr inbounds double* %833, i64 2
  %880 = load double* %879, align 8
  %881 = fmul double %865, %880
  %882 = fsub double %878, %881
  %883 = getelementptr inbounds double* %827, i64 1
  %884 = load double* %883, align 8
  %885 = fmul double %862, %884
  %886 = getelementptr inbounds double* %833, i64 1
  %887 = load double* %886, align 8
  %888 = fmul double %865, %887
  %889 = fsub double %885, %888
  %890 = fmul double %841, %855
  %891 = getelementptr inbounds double* %839, i64 3
  %892 = load double* %891, align 8
  %893 = fmul double %855, %892
  %894 = getelementptr inbounds double* %839, i64 2
  %895 = load double* %894, align 8
  %896 = fmul double %855, %895
  %897 = getelementptr inbounds double* %839, i64 1
  %898 = load double* %897, align 8
  %899 = fmul double %855, %898
  %900 = fadd double %893, %875
  %901 = fadd double %896, %882
  %902 = fadd double %899, %889
  %903 = fadd double %890, %868
  %904 = fmul double 3.000000e+00, %859
  %905 = fmul double %904, %900
  %906 = fmul double 2.000000e+00, %901
  %907 = fadd double %905, %906
  %908 = fmul double %907, %859
  %909 = fadd double %908, %902
  %910 = fmul double -2.000000e+00, %909
  %911 = sext i32 %791 to i64
  %912 = getelementptr inbounds %class.Vector* %251, i64 %911
  %913 = fmul double %910, %797
  %914 = fmul double %913, %797
  %915 = fadd double %virial_xx.1, %914
  %916 = fmul double %913, %802
  %917 = fadd double %virial_xy.1, %916
  %918 = fmul double %913, %808
  %919 = fadd double %virial_xz.1, %918
  %920 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %921 = load double* %920, align 8
  %922 = fadd double %921, %913
  store double %922, double* %920, align 8
  %923 = getelementptr inbounds %class.Vector* %912, i32 0, i32 0
  %924 = load double* %923, align 8
  %925 = fsub double %924, %913
  store double %925, double* %923, align 8
  %926 = fmul double %910, %802
  %927 = fmul double %926, %802
  %928 = fadd double %virial_yy.1, %927
  %929 = fmul double %926, %808
  %930 = fadd double %virial_yz.1, %929
  %931 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %932 = load double* %931, align 8
  %933 = fadd double %932, %926
  store double %933, double* %931, align 8
  %934 = getelementptr inbounds %class.Vector* %912, i32 0, i32 1
  %935 = load double* %934, align 8
  %936 = fsub double %935, %926
  store double %936, double* %934, align 8
  %937 = fmul double %910, %808
  %938 = fmul double %937, %808
  %939 = fadd double %virial_zz.1, %938
  %940 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %941 = load double* %940, align 8
  %942 = fadd double %941, %937
  store double %942, double* %940, align 8
  %943 = getelementptr inbounds %class.Vector* %912, i32 0, i32 2
  %944 = load double* %943, align 8
  %945 = fsub double %944, %937
  store double %945, double* %943, align 8
  %946 = getelementptr inbounds double* %846, i64 1
  %947 = load double* %946, align 8
  %948 = getelementptr inbounds double* %846, i64 2
  %949 = load double* %948, align 8
  %950 = getelementptr inbounds double* %846, i64 3
  %951 = load double* %950, align 8
  %952 = fmul double %951, %855
  %953 = fmul double %949, %855
  %954 = fmul double %947, %855
  %955 = fmul double %848, %855
  %956 = fmul double 3.000000e+00, %859
  %957 = fmul double %956, %952
  %958 = fmul double 2.000000e+00, %953
  %959 = fadd double %957, %958
  %960 = fmul double %959, %859
  %961 = fadd double %960, %954
  %962 = fmul double -2.000000e+00, %961
  %963 = sext i32 %791 to i64
  %964 = getelementptr inbounds %class.Vector* %257, i64 %963
  %965 = fmul double %962, %797
  %966 = fmul double %965, %797
  %967 = fadd double %fullElectVirial_xx.1, %966
  %968 = fmul double %965, %802
  %969 = fadd double %fullElectVirial_xy.1, %968
  %970 = fmul double %965, %808
  %971 = fadd double %fullElectVirial_xz.1, %970
  %972 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %973 = load double* %972, align 8
  %974 = fadd double %973, %965
  store double %974, double* %972, align 8
  %975 = getelementptr inbounds %class.Vector* %964, i32 0, i32 0
  %976 = load double* %975, align 8
  %977 = fsub double %976, %965
  store double %977, double* %975, align 8
  %978 = fmul double %962, %802
  %979 = fmul double %978, %802
  %980 = fadd double %fullElectVirial_yy.1, %979
  %981 = fmul double %978, %808
  %982 = fadd double %fullElectVirial_yz.1, %981
  %983 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %984 = load double* %983, align 8
  %985 = fadd double %984, %978
  store double %985, double* %983, align 8
  %986 = getelementptr inbounds %class.Vector* %964, i32 0, i32 1
  %987 = load double* %986, align 8
  %988 = fsub double %987, %978
  store double %988, double* %986, align 8
  %989 = fmul double %962, %808
  %990 = fmul double %989, %808
  %991 = fadd double %fullElectVirial_zz.1, %990
  %992 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %993 = load double* %992, align 8
  %994 = fadd double %993, %989
  store double %994, double* %992, align 8
  %995 = getelementptr inbounds %class.Vector* %964, i32 0, i32 2
  %996 = load double* %995, align 8
  %997 = fsub double %996, %989
  store double %997, double* %995, align 8
  br label %998

; <label>:998                                     ; preds = %788
  %999 = add nsw i32 %k17.2, 1
  br label %786

; <label>:1000                                    ; preds = %786
  %1001 = ptrtoint i32* %plim.0 to i64
  %1002 = ptrtoint i32* %245 to i64
  %1003 = sub i64 %1001, %1002
  %1004 = sdiv exact i64 %1003, 4
  %1005 = trunc i64 %1004 to i32
  br label %1006

; <label>:1006                                    ; preds = %1240, %1000
  %k17.3 = phi i32 [ 0, %1000 ], [ %1241, %1240 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %1000 ], [ %1233, %1240 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %1000 ], [ %1224, %1240 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %1000 ], [ %1222, %1240 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %1000 ], [ %1213, %1240 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %1000 ], [ %1211, %1240 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %1000 ], [ %1209, %1240 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %1000 ], [ %1162, %1240 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %1000 ], [ %1153, %1240 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %1000 ], [ %1151, %1240 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %1000 ], [ %1142, %1240 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %1000 ], [ %1140, %1240 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %1000 ], [ %1138, %1240 ]
  %1007 = icmp slt i32 %k17.3, %1005
  br i1 %1007, label %1008, label %1242

; <label>:1008                                    ; preds = %1006
  %1009 = sext i32 %k17.3 to i64
  %1010 = getelementptr inbounds i32* %245, i64 %1009
  %1011 = load i32* %1010, align 4
  %1012 = sext i32 %1011 to i64
  %1013 = getelementptr inbounds %struct.CompAtom* %37, i64 %1012
  %1014 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 0
  %1015 = getelementptr inbounds %class.Vector* %1014, i32 0, i32 0
  %1016 = load double* %1015, align 8
  %1017 = fsub double %294, %1016
  %1018 = fmul double %1017, %1017
  %1019 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 0
  %1020 = getelementptr inbounds %class.Vector* %1019, i32 0, i32 1
  %1021 = load double* %1020, align 8
  %1022 = fsub double %297, %1021
  %1023 = fmul double %1022, %1022
  %1024 = fadd double %1018, %1023
  %1025 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 0
  %1026 = getelementptr inbounds %class.Vector* %1025, i32 0, i32 2
  %1027 = load double* %1026, align 8
  %1028 = fsub double %300, %1027
  %1029 = fmul double %1028, %1028
  %1030 = fadd double %1024, %1029
  %1031 = fptrunc double %1030 to float
  %1032 = bitcast %union.anon.26* %r2f31 to float*
  store float %1031, float* %1032, align 4
  %1033 = bitcast %union.anon.26* %r2f31 to i32*
  %1034 = load i32* %1033, align 4
  %1035 = ashr i32 %1034, 17
  %1036 = add nsw i32 %1035, %25
  %1037 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 2
  %1038 = load i32* %1037, align 4
  %1039 = and i32 %1038, 4194303
  %1040 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1039)
  %1041 = zext i16 %1040 to i32
  %1042 = mul nsw i32 2, %1041
  %1043 = sext i32 %1042 to i64
  %1044 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %1043
  %1045 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1044, i64 1
  %1046 = mul nsw i32 16, %1036
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds double* %14, i64 %1047
  %1049 = getelementptr inbounds double* %1048, i64 0
  %1050 = load double* %1049, align 8
  %1051 = mul nsw i32 16, %1036
  %1052 = sext i32 %1051 to i64
  %1053 = getelementptr inbounds double* %14, i64 %1052
  %1054 = getelementptr inbounds double* %1053, i64 4
  %1055 = getelementptr inbounds double* %1054, i64 0
  %1056 = load double* %1055, align 8
  %1057 = mul nsw i32 16, %1036
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds double* %14, i64 %1058
  %1060 = getelementptr inbounds double* %1059, i64 8
  %1061 = getelementptr inbounds double* %1060, i64 0
  %1062 = load double* %1061, align 8
  %1063 = mul nsw i32 16, %1036
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds double* %14, i64 %1064
  %1066 = getelementptr inbounds double* %1065, i64 8
  %1067 = getelementptr inbounds double* %1066, i64 4
  %1068 = getelementptr inbounds double* %1067, i64 0
  %1069 = load double* %1068, align 8
  %1070 = bitcast %union.anon.26* %r2f31 to i32*
  %1071 = load i32* %1070, align 4
  %1072 = and i32 %1071, -131072
  store i32 %1072, i32* %1070, align 4
  %1073 = getelementptr inbounds %struct.CompAtom* %1013, i32 0, i32 1
  %1074 = load float* %1073, align 4
  %1075 = fpext float %1074 to double
  %1076 = fmul double %546, %1075
  %1077 = bitcast %union.anon.26* %r2f31 to float*
  %1078 = load float* %1077, align 4
  %1079 = fpext float %1078 to double
  %1080 = fsub double %1030, %1079
  %1081 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1045, i32 0, i32 0
  %1082 = load double* %1081, align 8
  %1083 = fmul double %16, %1082
  %1084 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1045, i32 0, i32 1
  %1085 = load double* %1084, align 8
  %1086 = fmul double %16, %1085
  %1087 = fmul double %1083, %1050
  %1088 = fmul double %1086, %1056
  %1089 = fsub double %1087, %1088
  %1090 = getelementptr inbounds double* %1048, i64 3
  %1091 = load double* %1090, align 8
  %1092 = fmul double %1083, %1091
  %1093 = getelementptr inbounds double* %1054, i64 3
  %1094 = load double* %1093, align 8
  %1095 = fmul double %1086, %1094
  %1096 = fsub double %1092, %1095
  %1097 = getelementptr inbounds double* %1048, i64 2
  %1098 = load double* %1097, align 8
  %1099 = fmul double %1083, %1098
  %1100 = getelementptr inbounds double* %1054, i64 2
  %1101 = load double* %1100, align 8
  %1102 = fmul double %1086, %1101
  %1103 = fsub double %1099, %1102
  %1104 = getelementptr inbounds double* %1048, i64 1
  %1105 = load double* %1104, align 8
  %1106 = fmul double %1083, %1105
  %1107 = getelementptr inbounds double* %1054, i64 1
  %1108 = load double* %1107, align 8
  %1109 = fmul double %1086, %1108
  %1110 = fsub double %1106, %1109
  %1111 = fsub double 1.000000e+00, %18
  %1112 = fmul double %1111, %1076
  %1113 = fmul double %1062, %1112
  %1114 = getelementptr inbounds double* %1060, i64 3
  %1115 = load double* %1114, align 8
  %1116 = fmul double %1112, %1115
  %1117 = getelementptr inbounds double* %1060, i64 2
  %1118 = load double* %1117, align 8
  %1119 = fmul double %1112, %1118
  %1120 = getelementptr inbounds double* %1060, i64 1
  %1121 = load double* %1120, align 8
  %1122 = fmul double %1112, %1121
  %1123 = fadd double %1116, %1096
  %1124 = fadd double %1119, %1103
  %1125 = fadd double %1122, %1110
  %1126 = fadd double %1113, %1089
  %1127 = fmul double 3.000000e+00, %1080
  %1128 = fmul double %1127, %1123
  %1129 = fmul double 2.000000e+00, %1124
  %1130 = fadd double %1128, %1129
  %1131 = fmul double %1130, %1080
  %1132 = fadd double %1131, %1125
  %1133 = fmul double -2.000000e+00, %1132
  %1134 = sext i32 %1011 to i64
  %1135 = getelementptr inbounds %class.Vector* %251, i64 %1134
  %1136 = fmul double %1133, %1017
  %1137 = fmul double %1136, %1017
  %1138 = fadd double %virial_xx.2, %1137
  %1139 = fmul double %1136, %1022
  %1140 = fadd double %virial_xy.2, %1139
  %1141 = fmul double %1136, %1028
  %1142 = fadd double %virial_xz.2, %1141
  %1143 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %1144 = load double* %1143, align 8
  %1145 = fadd double %1144, %1136
  store double %1145, double* %1143, align 8
  %1146 = getelementptr inbounds %class.Vector* %1135, i32 0, i32 0
  %1147 = load double* %1146, align 8
  %1148 = fsub double %1147, %1136
  store double %1148, double* %1146, align 8
  %1149 = fmul double %1133, %1022
  %1150 = fmul double %1149, %1022
  %1151 = fadd double %virial_yy.2, %1150
  %1152 = fmul double %1149, %1028
  %1153 = fadd double %virial_yz.2, %1152
  %1154 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %1155 = load double* %1154, align 8
  %1156 = fadd double %1155, %1149
  store double %1156, double* %1154, align 8
  %1157 = getelementptr inbounds %class.Vector* %1135, i32 0, i32 1
  %1158 = load double* %1157, align 8
  %1159 = fsub double %1158, %1149
  store double %1159, double* %1157, align 8
  %1160 = fmul double %1133, %1028
  %1161 = fmul double %1160, %1028
  %1162 = fadd double %virial_zz.2, %1161
  %1163 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %1164 = load double* %1163, align 8
  %1165 = fadd double %1164, %1160
  store double %1165, double* %1163, align 8
  %1166 = getelementptr inbounds %class.Vector* %1135, i32 0, i32 2
  %1167 = load double* %1166, align 8
  %1168 = fsub double %1167, %1160
  store double %1168, double* %1166, align 8
  %1169 = getelementptr inbounds double* %1067, i64 1
  %1170 = load double* %1169, align 8
  %1171 = getelementptr inbounds double* %1067, i64 2
  %1172 = load double* %1171, align 8
  %1173 = getelementptr inbounds double* %1067, i64 3
  %1174 = load double* %1173, align 8
  %1175 = mul nsw i32 4, %1036
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds double* %15, i64 %1176
  %1178 = getelementptr inbounds double* %1177, i64 0
  %1179 = load double* %1178, align 8
  %1180 = fmul double %18, %1179
  %1181 = fsub double %1069, %1180
  %1182 = getelementptr inbounds double* %1177, i64 1
  %1183 = load double* %1182, align 8
  %1184 = fmul double %18, %1183
  %1185 = fsub double %1170, %1184
  %1186 = getelementptr inbounds double* %1177, i64 2
  %1187 = load double* %1186, align 8
  %1188 = fmul double %18, %1187
  %1189 = fsub double %1172, %1188
  %1190 = getelementptr inbounds double* %1177, i64 3
  %1191 = load double* %1190, align 8
  %1192 = fmul double %18, %1191
  %1193 = fsub double %1174, %1192
  %1194 = fmul double %1193, %1076
  %1195 = fmul double %1189, %1076
  %1196 = fmul double %1185, %1076
  %1197 = fmul double %1181, %1076
  %1198 = fmul double 3.000000e+00, %1080
  %1199 = fmul double %1198, %1194
  %1200 = fmul double 2.000000e+00, %1195
  %1201 = fadd double %1199, %1200
  %1202 = fmul double %1201, %1080
  %1203 = fadd double %1202, %1196
  %1204 = fmul double -2.000000e+00, %1203
  %1205 = sext i32 %1011 to i64
  %1206 = getelementptr inbounds %class.Vector* %257, i64 %1205
  %1207 = fmul double %1204, %1017
  %1208 = fmul double %1207, %1017
  %1209 = fadd double %fullElectVirial_xx.2, %1208
  %1210 = fmul double %1207, %1022
  %1211 = fadd double %fullElectVirial_xy.2, %1210
  %1212 = fmul double %1207, %1028
  %1213 = fadd double %fullElectVirial_xz.2, %1212
  %1214 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1215 = load double* %1214, align 8
  %1216 = fadd double %1215, %1207
  store double %1216, double* %1214, align 8
  %1217 = getelementptr inbounds %class.Vector* %1206, i32 0, i32 0
  %1218 = load double* %1217, align 8
  %1219 = fsub double %1218, %1207
  store double %1219, double* %1217, align 8
  %1220 = fmul double %1204, %1022
  %1221 = fmul double %1220, %1022
  %1222 = fadd double %fullElectVirial_yy.2, %1221
  %1223 = fmul double %1220, %1028
  %1224 = fadd double %fullElectVirial_yz.2, %1223
  %1225 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1226 = load double* %1225, align 8
  %1227 = fadd double %1226, %1220
  store double %1227, double* %1225, align 8
  %1228 = getelementptr inbounds %class.Vector* %1206, i32 0, i32 1
  %1229 = load double* %1228, align 8
  %1230 = fsub double %1229, %1220
  store double %1230, double* %1228, align 8
  %1231 = fmul double %1204, %1028
  %1232 = fmul double %1231, %1028
  %1233 = fadd double %fullElectVirial_zz.2, %1232
  %1234 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1235 = load double* %1234, align 8
  %1236 = fadd double %1235, %1231
  store double %1236, double* %1234, align 8
  %1237 = getelementptr inbounds %class.Vector* %1206, i32 0, i32 2
  %1238 = load double* %1237, align 8
  %1239 = fsub double %1238, %1231
  store double %1239, double* %1237, align 8
  br label %1240

; <label>:1240                                    ; preds = %1008
  %1241 = add nsw i32 %k17.3, 1
  br label %1006

; <label>:1242                                    ; preds = %1006
  %1243 = ptrtoint i32* %plix.2 to i64
  %1244 = ptrtoint i32* %231 to i64
  %1245 = sub i64 %1243, %1244
  %1246 = sdiv exact i64 %1245, 4
  %1247 = trunc i64 %1246 to i32
  br label %1248

; <label>:1248                                    ; preds = %1364, %1242
  %k17.4 = phi i32 [ 0, %1242 ], [ %1365, %1364 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1242 ], [ %1357, %1364 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1242 ], [ %1348, %1364 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1242 ], [ %1346, %1364 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1242 ], [ %1337, %1364 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1242 ], [ %1335, %1364 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1242 ], [ %1333, %1364 ]
  %1249 = icmp slt i32 %k17.4, %1247
  br i1 %1249, label %1250, label %1366

; <label>:1250                                    ; preds = %1248
  %1251 = sext i32 %k17.4 to i64
  %1252 = getelementptr inbounds i32* %231, i64 %1251
  %1253 = load i32* %1252, align 4
  %1254 = sext i32 %1253 to i64
  %1255 = getelementptr inbounds %struct.CompAtom* %37, i64 %1254
  %1256 = getelementptr inbounds %struct.CompAtom* %1255, i32 0, i32 0
  %1257 = getelementptr inbounds %class.Vector* %1256, i32 0, i32 0
  %1258 = load double* %1257, align 8
  %1259 = fsub double %294, %1258
  %1260 = fmul double %1259, %1259
  %1261 = getelementptr inbounds %struct.CompAtom* %1255, i32 0, i32 0
  %1262 = getelementptr inbounds %class.Vector* %1261, i32 0, i32 1
  %1263 = load double* %1262, align 8
  %1264 = fsub double %297, %1263
  %1265 = fmul double %1264, %1264
  %1266 = fadd double %1260, %1265
  %1267 = getelementptr inbounds %struct.CompAtom* %1255, i32 0, i32 0
  %1268 = getelementptr inbounds %class.Vector* %1267, i32 0, i32 2
  %1269 = load double* %1268, align 8
  %1270 = fsub double %300, %1269
  %1271 = fmul double %1270, %1270
  %1272 = fadd double %1266, %1271
  %1273 = fptrunc double %1272 to float
  %1274 = bitcast %union.anon.27* %r2f74 to float*
  store float %1273, float* %1274, align 4
  %1275 = bitcast %union.anon.27* %r2f74 to i32*
  %1276 = load i32* %1275, align 4
  %1277 = ashr i32 %1276, 17
  %1278 = add nsw i32 %1277, %25
  %1279 = mul nsw i32 16, %1278
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds double* %14, i64 %1280
  %1282 = getelementptr inbounds double* %1281, i64 8
  %1283 = getelementptr inbounds double* %1282, i64 4
  %1284 = getelementptr inbounds double* %1283, i64 0
  %1285 = load double* %1284, align 8
  %1286 = bitcast %union.anon.27* %r2f74 to i32*
  %1287 = load i32* %1286, align 4
  %1288 = and i32 %1287, -131072
  store i32 %1288, i32* %1286, align 4
  %1289 = getelementptr inbounds %struct.CompAtom* %1255, i32 0, i32 1
  %1290 = load float* %1289, align 4
  %1291 = fpext float %1290 to double
  %1292 = fmul double %546, %1291
  %1293 = bitcast %union.anon.27* %r2f74 to float*
  %1294 = load float* %1293, align 4
  %1295 = fpext float %1294 to double
  %1296 = fsub double %1272, %1295
  %1297 = getelementptr inbounds double* %1283, i64 1
  %1298 = load double* %1297, align 8
  %1299 = getelementptr inbounds double* %1283, i64 2
  %1300 = load double* %1299, align 8
  %1301 = getelementptr inbounds double* %1283, i64 3
  %1302 = load double* %1301, align 8
  %1303 = mul nsw i32 4, %1278
  %1304 = sext i32 %1303 to i64
  %1305 = getelementptr inbounds double* %15, i64 %1304
  %1306 = getelementptr inbounds double* %1305, i64 0
  %1307 = load double* %1306, align 8
  %1308 = fsub double %1285, %1307
  %1309 = getelementptr inbounds double* %1305, i64 1
  %1310 = load double* %1309, align 8
  %1311 = fsub double %1298, %1310
  %1312 = getelementptr inbounds double* %1305, i64 2
  %1313 = load double* %1312, align 8
  %1314 = fsub double %1300, %1313
  %1315 = getelementptr inbounds double* %1305, i64 3
  %1316 = load double* %1315, align 8
  %1317 = fsub double %1302, %1316
  %1318 = fmul double %1317, %1292
  %1319 = fmul double %1314, %1292
  %1320 = fmul double %1311, %1292
  %1321 = fmul double %1308, %1292
  %1322 = fmul double 3.000000e+00, %1296
  %1323 = fmul double %1322, %1318
  %1324 = fmul double 2.000000e+00, %1319
  %1325 = fadd double %1323, %1324
  %1326 = fmul double %1325, %1296
  %1327 = fadd double %1326, %1320
  %1328 = fmul double -2.000000e+00, %1327
  %1329 = sext i32 %1253 to i64
  %1330 = getelementptr inbounds %class.Vector* %257, i64 %1329
  %1331 = fmul double %1328, %1259
  %1332 = fmul double %1331, %1259
  %1333 = fadd double %fullElectVirial_xx.3, %1332
  %1334 = fmul double %1331, %1264
  %1335 = fadd double %fullElectVirial_xy.3, %1334
  %1336 = fmul double %1331, %1270
  %1337 = fadd double %fullElectVirial_xz.3, %1336
  %1338 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1339 = load double* %1338, align 8
  %1340 = fadd double %1339, %1331
  store double %1340, double* %1338, align 8
  %1341 = getelementptr inbounds %class.Vector* %1330, i32 0, i32 0
  %1342 = load double* %1341, align 8
  %1343 = fsub double %1342, %1331
  store double %1343, double* %1341, align 8
  %1344 = fmul double %1328, %1264
  %1345 = fmul double %1344, %1264
  %1346 = fadd double %fullElectVirial_yy.3, %1345
  %1347 = fmul double %1344, %1270
  %1348 = fadd double %fullElectVirial_yz.3, %1347
  %1349 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1350 = load double* %1349, align 8
  %1351 = fadd double %1350, %1344
  store double %1351, double* %1349, align 8
  %1352 = getelementptr inbounds %class.Vector* %1330, i32 0, i32 1
  %1353 = load double* %1352, align 8
  %1354 = fsub double %1353, %1344
  store double %1354, double* %1352, align 8
  %1355 = fmul double %1328, %1270
  %1356 = fmul double %1355, %1270
  %1357 = fadd double %fullElectVirial_zz.3, %1356
  %1358 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1359 = load double* %1358, align 8
  %1360 = fadd double %1359, %1355
  store double %1360, double* %1358, align 8
  %1361 = getelementptr inbounds %class.Vector* %1330, i32 0, i32 2
  %1362 = load double* %1361, align 8
  %1363 = fsub double %1362, %1355
  store double %1363, double* %1361, align 8
  br label %1364

; <label>:1364                                    ; preds = %1250
  %1365 = add nsw i32 %k17.4, 1
  br label %1248

; <label>:1366                                    ; preds = %1248
  br label %1367

; <label>:1367                                    ; preds = %1366, %338
  %g_lower.4 = phi i32 [ %g_lower.0, %338 ], [ %g_lower.3, %1366 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %338 ], [ %j_hgroup.2, %1366 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %338 ], [ %fixg_lower.3, %1366 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %338 ], [ %pairlistindex.2, %1366 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %338 ], [ %pairlistoffset.1, %1366 ]
  %pairCount.3 = phi i32 [ %334, %338 ], [ %pairCount.2, %1366 ]
  %i.1 = phi i32 [ %340, %338 ], [ %i.0, %1366 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %338 ], [ %fullElectVirial_zz.3, %1366 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %338 ], [ %fullElectVirial_yz.3, %1366 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %338 ], [ %fullElectVirial_yy.3, %1366 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %338 ], [ %fullElectVirial_xz.3, %1366 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %338 ], [ %fullElectVirial_xy.3, %1366 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %338 ], [ %fullElectVirial_xx.3, %1366 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %338 ], [ %virial_zz.2, %1366 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %338 ], [ %virial_yz.2, %1366 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %338 ], [ %virial_yy.2, %1366 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %338 ], [ %virial_xz.2, %1366 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %338 ], [ %virial_xy.2, %1366 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %338 ], [ %virial_xx.2, %1366 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %338 ], [ %780, %1366 ]
  %1368 = add nsw i32 %i.1, 1
  br label %273

; <label>:1369                                    ; preds = %273
  %1370 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1371 = icmp ne i32* %51, %1370
  br i1 %1371, label %1372, label %1377

; <label>:1372                                    ; preds = %1369
  %1373 = icmp eq i32* %51, null
  br i1 %1373, label %1376, label %1374

; <label>:1374                                    ; preds = %1372
  %1375 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1375) #8
  br label %1376

; <label>:1376                                    ; preds = %1374, %1372
  br label %1377

; <label>:1377                                    ; preds = %1376, %1369
  %1378 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1379 = icmp ne i32* %65, %1378
  br i1 %1379, label %1380, label %1385

; <label>:1380                                    ; preds = %1377
  %1381 = icmp eq i32* %65, null
  br i1 %1381, label %1384, label %1382

; <label>:1382                                    ; preds = %1380
  %1383 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1383) #8
  br label %1384

; <label>:1384                                    ; preds = %1382, %1380
  br label %1385

; <label>:1385                                    ; preds = %1384, %1377
  %1386 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1387 = icmp ne i32* %79, %1386
  br i1 %1387, label %1388, label %1393

; <label>:1388                                    ; preds = %1385
  %1389 = icmp eq i32* %79, null
  br i1 %1389, label %1392, label %1390

; <label>:1390                                    ; preds = %1388
  %1391 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1391) #8
  br label %1392

; <label>:1392                                    ; preds = %1390, %1388
  br label %1393

; <label>:1393                                    ; preds = %1392, %1385
  %1394 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1395 = icmp ne i32* %189, %1394
  br i1 %1395, label %1396, label %1401

; <label>:1396                                    ; preds = %1393
  %1397 = icmp eq i32* %189, null
  br i1 %1397, label %1400, label %1398

; <label>:1398                                    ; preds = %1396
  %1399 = bitcast i32* %189 to i8*
  call void @_ZdaPv(i8* %1399) #8
  br label %1400

; <label>:1400                                    ; preds = %1398, %1396
  br label %1401

; <label>:1401                                    ; preds = %1400, %1393
  %1402 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1403 = icmp ne i32* %203, %1402
  br i1 %1403, label %1404, label %1409

; <label>:1404                                    ; preds = %1401
  %1405 = icmp eq i32* %203, null
  br i1 %1405, label %1408, label %1406

; <label>:1406                                    ; preds = %1404
  %1407 = bitcast i32* %203 to i8*
  call void @_ZdaPv(i8* %1407) #8
  br label %1408

; <label>:1408                                    ; preds = %1406, %1404
  br label %1409

; <label>:1409                                    ; preds = %1408, %1401
  %1410 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1411 = icmp ne i32* %217, %1410
  br i1 %1411, label %1412, label %1417

; <label>:1412                                    ; preds = %1409
  %1413 = icmp eq i32* %217, null
  br i1 %1413, label %1416, label %1414

; <label>:1414                                    ; preds = %1412
  %1415 = bitcast i32* %217 to i8*
  call void @_ZdaPv(i8* %1415) #8
  br label %1416

; <label>:1416                                    ; preds = %1414, %1412
  br label %1417

; <label>:1417                                    ; preds = %1416, %1409
  %1418 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1419 = icmp ne i32* %231, %1418
  br i1 %1419, label %1420, label %1425

; <label>:1420                                    ; preds = %1417
  %1421 = icmp eq i32* %231, null
  br i1 %1421, label %1424, label %1422

; <label>:1422                                    ; preds = %1420
  %1423 = bitcast i32* %231 to i8*
  call void @_ZdaPv(i8* %1423) #8
  br label %1424

; <label>:1424                                    ; preds = %1422, %1420
  br label %1425

; <label>:1425                                    ; preds = %1424, %1417
  %1426 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1427 = icmp ne i32* %245, %1426
  br i1 %1427, label %1428, label %1433

; <label>:1428                                    ; preds = %1425
  %1429 = icmp eq i32* %245, null
  br i1 %1429, label %1432, label %1430

; <label>:1430                                    ; preds = %1428
  %1431 = bitcast i32* %245 to i8*
  call void @_ZdaPv(i8* %1431) #8
  br label %1432

; <label>:1432                                    ; preds = %1430, %1428
  br label %1433

; <label>:1433                                    ; preds = %1432, %1425
  %1434 = sitofp i32 %exclChecksum.0 to double
  %1435 = getelementptr inbounds double* %6, i64 22
  %1436 = load double* %1435, align 8
  %1437 = fadd double %1436, %1434
  store double %1437, double* %1435, align 8
  %1438 = getelementptr inbounds double* %6, i64 3
  %1439 = load double* %1438, align 8
  %1440 = fadd double %1439, %virial_xx.0
  store double %1440, double* %1438, align 8
  %1441 = getelementptr inbounds double* %6, i64 4
  %1442 = load double* %1441, align 8
  %1443 = fadd double %1442, %virial_xy.0
  store double %1443, double* %1441, align 8
  %1444 = getelementptr inbounds double* %6, i64 5
  %1445 = load double* %1444, align 8
  %1446 = fadd double %1445, %virial_xz.0
  store double %1446, double* %1444, align 8
  %1447 = getelementptr inbounds double* %6, i64 6
  %1448 = load double* %1447, align 8
  %1449 = fadd double %1448, %virial_xy.0
  store double %1449, double* %1447, align 8
  %1450 = getelementptr inbounds double* %6, i64 7
  %1451 = load double* %1450, align 8
  %1452 = fadd double %1451, %virial_yy.0
  store double %1452, double* %1450, align 8
  %1453 = getelementptr inbounds double* %6, i64 8
  %1454 = load double* %1453, align 8
  %1455 = fadd double %1454, %virial_yz.0
  store double %1455, double* %1453, align 8
  %1456 = getelementptr inbounds double* %6, i64 9
  %1457 = load double* %1456, align 8
  %1458 = fadd double %1457, %virial_xz.0
  store double %1458, double* %1456, align 8
  %1459 = getelementptr inbounds double* %6, i64 10
  %1460 = load double* %1459, align 8
  %1461 = fadd double %1460, %virial_yz.0
  store double %1461, double* %1459, align 8
  %1462 = getelementptr inbounds double* %6, i64 11
  %1463 = load double* %1462, align 8
  %1464 = fadd double %1463, %virial_zz.0
  store double %1464, double* %1462, align 8
  %1465 = getelementptr inbounds double* %6, i64 12
  %1466 = load double* %1465, align 8
  %1467 = fadd double %1466, %fullElectVirial_xx.0
  store double %1467, double* %1465, align 8
  %1468 = getelementptr inbounds double* %6, i64 13
  %1469 = load double* %1468, align 8
  %1470 = fadd double %1469, %fullElectVirial_xy.0
  store double %1470, double* %1468, align 8
  %1471 = getelementptr inbounds double* %6, i64 14
  %1472 = load double* %1471, align 8
  %1473 = fadd double %1472, %fullElectVirial_xz.0
  store double %1473, double* %1471, align 8
  %1474 = getelementptr inbounds double* %6, i64 15
  %1475 = load double* %1474, align 8
  %1476 = fadd double %1475, %fullElectVirial_xy.0
  store double %1476, double* %1474, align 8
  %1477 = getelementptr inbounds double* %6, i64 16
  %1478 = load double* %1477, align 8
  %1479 = fadd double %1478, %fullElectVirial_yy.0
  store double %1479, double* %1477, align 8
  %1480 = getelementptr inbounds double* %6, i64 17
  %1481 = load double* %1480, align 8
  %1482 = fadd double %1481, %fullElectVirial_yz.0
  store double %1482, double* %1480, align 8
  %1483 = getelementptr inbounds double* %6, i64 18
  %1484 = load double* %1483, align 8
  %1485 = fadd double %1484, %fullElectVirial_xz.0
  store double %1485, double* %1483, align 8
  %1486 = getelementptr inbounds double* %6, i64 19
  %1487 = load double* %1486, align 8
  %1488 = fadd double %1487, %fullElectVirial_yz.0
  store double %1488, double* %1486, align 8
  %1489 = getelementptr inbounds double* %6, i64 20
  %1490 = load double* %1489, align 8
  %1491 = fadd double %1490, %fullElectVirial_zz.0
  store double %1491, double* %1489, align 8
  br label %1492

; <label>:1492                                    ; preds = %1433, %164, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil26calc_self_energy_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.28, align 4
  %r2f31 = alloca %union.anon.29, align 4
  %r2f77 = alloca %union.anon.30, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1550

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %22 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %23 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %24 = sub nsw i32 %23, 127
  %25 = mul nsw i32 64, %24
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 0
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %30 = getelementptr inbounds [2 x i32]* %29, i32 0, i64 1
  %31 = load i32* %30, align 4
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 0
  %34 = load %struct.CompAtom** %33, align 8
  %35 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %36 = getelementptr inbounds [2 x %struct.CompAtom*]* %35, i32 0, i64 1
  %37 = load %struct.CompAtom** %36, align 8
  %38 = icmp slt i32 %31, 1000
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %4
  %40 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %50

; <label>:41                                      ; preds = %4
  %42 = add nsw i32 %31, 5
  %43 = sext i32 %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %43, i64 4)
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = call noalias i8* @_Znam(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  br label %50

; <label>:50                                      ; preds = %41, %39
  %51 = phi i32* [ %40, %39 ], [ %49, %41 ]
  %52 = icmp slt i32 %31, 1000
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %50
  %54 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %64

; <label>:55                                      ; preds = %50
  %56 = add nsw i32 %31, 5
  %57 = sext i32 %56 to i64
  %58 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %57, i64 4)
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 -1, i64 %60
  %62 = call noalias i8* @_Znam(i64 %61) #9
  %63 = bitcast i8* %62 to i32*
  br label %64

; <label>:64                                      ; preds = %55, %53
  %65 = phi i32* [ %54, %53 ], [ %63, %55 ]
  %66 = icmp slt i32 %31, 1000
  br i1 %66, label %67, label %69

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %78

; <label>:69                                      ; preds = %64
  %70 = add nsw i32 %31, 5
  %71 = sext i32 %70 to i64
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 4)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call noalias i8* @_Znam(i64 %75) #9
  %77 = bitcast i8* %76 to i32*
  br label %78

; <label>:78                                      ; preds = %69, %67
  %79 = phi i32* [ %68, %67 ], [ %77, %69 ]
  br label %80

; <label>:80                                      ; preds = %103, %78
  %g.0 = phi i32 [ 0, %78 ], [ %g.1, %103 ]
  %j.0 = phi i32 [ 0, %78 ], [ %104, %103 ]
  %81 = icmp slt i32 %j.0, %31
  br i1 %81, label %82, label %105

; <label>:82                                      ; preds = %80
  %83 = sext i32 %j.0 to i64
  %84 = getelementptr inbounds %struct.CompAtom* %37, i64 %83
  %85 = getelementptr inbounds %struct.CompAtom* %84, i32 0, i32 2
  %86 = load i32* %85, align 4
  %87 = lshr i32 %86, 22
  %88 = and i32 %87, 7
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %98, label %90

; <label>:90                                      ; preds = %82
  %91 = sext i32 %j.0 to i64
  %92 = getelementptr inbounds %struct.CompAtom* %37, i64 %91
  %93 = getelementptr inbounds %struct.CompAtom* %92, i32 0, i32 2
  %94 = load i32* %93, align 4
  %95 = lshr i32 %94, 25
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %90, %82
  %99 = add nsw i32 %g.0, 1
  %100 = sext i32 %g.0 to i64
  %101 = getelementptr inbounds i32* %51, i64 %100
  store i32 %j.0, i32* %101, align 4
  br label %102

; <label>:102                                     ; preds = %98, %90
  %g.1 = phi i32 [ %99, %98 ], [ %g.0, %90 ]
  br label %103

; <label>:103                                     ; preds = %102
  %104 = add nsw i32 %j.0, 1
  br label %80

; <label>:105                                     ; preds = %80
  %106 = icmp ne i32 %g.0, 0
  br i1 %106, label %107, label %114

; <label>:107                                     ; preds = %105
  %108 = sub nsw i32 %g.0, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32* %51, i64 %109
  %111 = load i32* %110, align 4
  %112 = sext i32 %g.0 to i64
  %113 = getelementptr inbounds i32* %51, i64 %112
  store i32 %111, i32* %113, align 4
  br label %114

; <label>:114                                     ; preds = %107, %105
  %115 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %166

; <label>:117                                     ; preds = %114
  br label %118

; <label>:118                                     ; preds = %136, %117
  %all_fixed.0 = phi i32 [ 1, %117 ], [ %all_fixed.1, %136 ]
  %fixg.0 = phi i32 [ 0, %117 ], [ %fixg.1, %136 ]
  %g.2 = phi i32 [ 0, %117 ], [ %137, %136 ]
  %119 = icmp slt i32 %g.2, %g.0
  br i1 %119, label %120, label %138

; <label>:120                                     ; preds = %118
  %121 = sext i32 %g.2 to i64
  %122 = getelementptr inbounds i32* %51, i64 %121
  %123 = load i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CompAtom* %37, i64 %124
  %126 = getelementptr inbounds %struct.CompAtom* %125, i32 0, i32 2
  %127 = load i32* %126, align 4
  %128 = lshr i32 %127, 27
  %129 = and i32 %128, 1
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %135, label %131

; <label>:131                                     ; preds = %120
  %132 = add nsw i32 %fixg.0, 1
  %133 = sext i32 %fixg.0 to i64
  %134 = getelementptr inbounds i32* %65, i64 %133
  store i32 %123, i32* %134, align 4
  br label %135

; <label>:135                                     ; preds = %131, %120
  %all_fixed.1 = phi i32 [ %all_fixed.0, %120 ], [ 0, %131 ]
  %fixg.1 = phi i32 [ %fixg.0, %120 ], [ %132, %131 ]
  br label %136

; <label>:136                                     ; preds = %135
  %137 = add nsw i32 %g.2, 1
  br label %118

; <label>:138                                     ; preds = %118
  %139 = icmp ne i32 %all_fixed.0, 0
  br i1 %139, label %140, label %165

; <label>:140                                     ; preds = %138
  %141 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %142 = icmp ne i32* %51, %141
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %140
  %144 = icmp eq i32* %51, null
  br i1 %144, label %147, label %145

; <label>:145                                     ; preds = %143
  %146 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %146) #8
  br label %147

; <label>:147                                     ; preds = %145, %143
  br label %148

; <label>:148                                     ; preds = %147, %140
  %149 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %150 = icmp ne i32* %65, %149
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %148
  %152 = icmp eq i32* %65, null
  br i1 %152, label %155, label %153

; <label>:153                                     ; preds = %151
  %154 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %154) #8
  br label %155

; <label>:155                                     ; preds = %153, %151
  br label %156

; <label>:156                                     ; preds = %155, %148
  %157 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %158 = icmp ne i32* %79, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %79, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  br label %1550

; <label>:165                                     ; preds = %138
  br label %166

; <label>:166                                     ; preds = %165, %114
  %fixg.2 = phi i32 [ %fixg.0, %165 ], [ 0, %114 ]
  %167 = icmp ne i32 %fixg.2, 0
  br i1 %167, label %168, label %175

; <label>:168                                     ; preds = %166
  %169 = sub nsw i32 %fixg.2, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32* %65, i64 %170
  %172 = load i32* %171, align 4
  %173 = sext i32 %fixg.2 to i64
  %174 = getelementptr inbounds i32* %65, i64 %173
  store i32 %172, i32* %174, align 4
  br label %175

; <label>:175                                     ; preds = %168, %166
  %176 = icmp slt i32 %31, 1000
  br i1 %176, label %177, label %179

; <label>:177                                     ; preds = %175
  %178 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %188

; <label>:179                                     ; preds = %175
  %180 = add nsw i32 %31, 5
  %181 = sext i32 %180 to i64
  %182 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %181, i64 4)
  %183 = extractvalue { i64, i1 } %182, 1
  %184 = extractvalue { i64, i1 } %182, 0
  %185 = select i1 %183, i64 -1, i64 %184
  %186 = call noalias i8* @_Znam(i64 %185) #9
  %187 = bitcast i8* %186 to i32*
  br label %188

; <label>:188                                     ; preds = %179, %177
  %189 = phi i32* [ %178, %177 ], [ %187, %179 ]
  %190 = icmp slt i32 %31, 1000
  br i1 %190, label %191, label %193

; <label>:191                                     ; preds = %188
  %192 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %202

; <label>:193                                     ; preds = %188
  %194 = add nsw i32 %31, 5
  %195 = sext i32 %194 to i64
  %196 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %195, i64 4)
  %197 = extractvalue { i64, i1 } %196, 1
  %198 = extractvalue { i64, i1 } %196, 0
  %199 = select i1 %197, i64 -1, i64 %198
  %200 = call noalias i8* @_Znam(i64 %199) #9
  %201 = bitcast i8* %200 to i32*
  br label %202

; <label>:202                                     ; preds = %193, %191
  %203 = phi i32* [ %192, %191 ], [ %201, %193 ]
  %204 = icmp slt i32 %31, 1000
  br i1 %204, label %205, label %207

; <label>:205                                     ; preds = %202
  %206 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %216

; <label>:207                                     ; preds = %202
  %208 = add nsw i32 %31, 5
  %209 = sext i32 %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %209, i64 4)
  %211 = extractvalue { i64, i1 } %210, 1
  %212 = extractvalue { i64, i1 } %210, 0
  %213 = select i1 %211, i64 -1, i64 %212
  %214 = call noalias i8* @_Znam(i64 %213) #9
  %215 = bitcast i8* %214 to i32*
  br label %216

; <label>:216                                     ; preds = %207, %205
  %217 = phi i32* [ %206, %205 ], [ %215, %207 ]
  %218 = icmp slt i32 %31, 1000
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %216
  %220 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %230

; <label>:221                                     ; preds = %216
  %222 = add nsw i32 %31, 5
  %223 = sext i32 %222 to i64
  %224 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %223, i64 4)
  %225 = extractvalue { i64, i1 } %224, 1
  %226 = extractvalue { i64, i1 } %224, 0
  %227 = select i1 %225, i64 -1, i64 %226
  %228 = call noalias i8* @_Znam(i64 %227) #9
  %229 = bitcast i8* %228 to i32*
  br label %230

; <label>:230                                     ; preds = %221, %219
  %231 = phi i32* [ %220, %219 ], [ %229, %221 ]
  %232 = icmp slt i32 %31, 1000
  br i1 %232, label %233, label %235

; <label>:233                                     ; preds = %230
  %234 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %244

; <label>:235                                     ; preds = %230
  %236 = add nsw i32 %31, 5
  %237 = sext i32 %236 to i64
  %238 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %237, i64 4)
  %239 = extractvalue { i64, i1 } %238, 1
  %240 = extractvalue { i64, i1 } %238, 0
  %241 = select i1 %239, i64 -1, i64 %240
  %242 = call noalias i8* @_Znam(i64 %241) #9
  %243 = bitcast i8* %242 to i32*
  br label %244

; <label>:244                                     ; preds = %235, %233
  %245 = phi i32* [ %234, %233 ], [ %243, %235 ]
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 0
  %248 = load %class.Vector** %247, align 8
  %249 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 1
  %250 = getelementptr inbounds [2 x %class.Vector*]* %249, i32 0, i64 1
  %251 = load %class.Vector** %250, align 8
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %253 = getelementptr inbounds [2 x %class.Vector*]* %252, i32 0, i64 0
  %254 = load %class.Vector** %253, align 8
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %256 = getelementptr inbounds [2 x %class.Vector*]* %255, i32 0, i64 1
  %257 = load %class.Vector** %256, align 8
  %258 = sub nsw i32 %28, 1
  %259 = mul nsw i32 %258, %31
  %260 = sdiv i32 %259, 2
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %262 = load i32* %261, align 4
  %263 = mul nsw i32 %260, %262
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %265 = load i32* %264, align 4
  %266 = sdiv i32 %263, %265
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %268 = load i32* %267, align 4
  %269 = mul nsw i32 %260, %268
  %270 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %271 = load i32* %270, align 4
  %272 = sdiv i32 %269, %271
  br label %273

; <label>:273                                     ; preds = %1416, %244
  %g_lower.0 = phi i32 [ 0, %244 ], [ %g_lower.4, %1416 ]
  %j_hgroup.0 = phi i32 [ 0, %244 ], [ %j_hgroup.3, %1416 ]
  %fixg_lower.0 = phi i32 [ 0, %244 ], [ %fixg_lower.4, %1416 ]
  %pairlistindex.0 = phi i32 [ 0, %244 ], [ %pairlistindex.3, %1416 ]
  %pairlistoffset.0 = phi i32 [ 0, %244 ], [ %pairlistoffset.2, %1416 ]
  %pairCount.0 = phi i32 [ 0, %244 ], [ %pairCount.3, %1416 ]
  %i.0 = phi i32 [ 0, %244 ], [ %1417, %1416 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_zz.4, %1416 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yz.4, %1416 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_yy.4, %1416 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xz.4, %1416 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xy.4, %1416 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectVirial_xx.4, %1416 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %fullElectEnergy.4, %1416 ]
  %virial_zz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_zz.3, %1416 ]
  %virial_yz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yz.3, %1416 ]
  %virial_yy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_yy.3, %1416 ]
  %virial_xz.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xz.3, %1416 ]
  %virial_xy.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xy.3, %1416 ]
  %virial_xx.0 = phi double [ 0.000000e+00, %244 ], [ %virial_xx.3, %1416 ]
  %electEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %electEnergy.3, %1416 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %244 ], [ %vdwEnergy.3, %1416 ]
  %exclChecksum.0 = phi i32 [ 0, %244 ], [ %exclChecksum.11, %1416 ]
  %274 = sub nsw i32 %28, 1
  %275 = icmp slt i32 %i.0, %274
  br i1 %275, label %276, label %1418

; <label>:276                                     ; preds = %273
  %277 = sext i32 %i.0 to i64
  %278 = getelementptr inbounds %struct.CompAtom* %34, i64 %277
  %279 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %280 = load i32* %279, align 4
  %281 = and i32 %280, 4194303
  %282 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %281)
  %283 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 0
  %284 = load i32* %283, align 4
  %285 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 1
  %286 = load i32* %285, align 4
  %287 = getelementptr inbounds %class.ExclusionCheck* %282, i32 0, i32 2
  %288 = load i8** %287, align 8
  %289 = sext i32 %284 to i64
  %290 = sub i64 0, %289
  %291 = getelementptr inbounds i8* %288, i64 %290
  %292 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %293 = getelementptr inbounds %class.Vector* %292, i32 0, i32 0
  %294 = load double* %293, align 8
  %295 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %296 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %297 = load double* %296, align 8
  %298 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 0
  %299 = getelementptr inbounds %class.Vector* %298, i32 0, i32 2
  %300 = load double* %299, align 8
  %301 = sext i32 %i.0 to i64
  %302 = getelementptr inbounds %class.Vector* %248, i64 %301
  %303 = sext i32 %i.0 to i64
  %304 = getelementptr inbounds %class.Vector* %254, i64 %303
  %305 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %306 = load i32* %305, align 4
  %307 = lshr i32 %306, 22
  %308 = and i32 %307, 7
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %316, label %310

; <label>:310                                     ; preds = %276
  %311 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %312 = load i32* %311, align 4
  %313 = lshr i32 %312, 25
  %314 = and i32 %313, 1
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %527

; <label>:316                                     ; preds = %310, %276
  %317 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %318 = load i32* %317, align 4
  %319 = lshr i32 %318, 22
  %320 = and i32 %319, 7
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %342

; <label>:322                                     ; preds = %316
  %323 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %324 = load i32* %323, align 4
  %325 = lshr i32 %324, 22
  %326 = and i32 %325, 7
  %327 = sub nsw i32 %28, 1
  %328 = sub nsw i32 %327, %i.0
  %329 = mul nsw i32 %326, %328
  %330 = add nsw i32 %pairCount.0, %329
  %331 = sub nsw i32 %326, 1
  %332 = mul nsw i32 %326, %331
  %333 = sdiv i32 %332, 2
  %334 = sub nsw i32 %330, %333
  %335 = icmp slt i32 %pairCount.0, %266
  br i1 %335, label %338, label %336

; <label>:336                                     ; preds = %322
  %337 = icmp sge i32 %pairCount.0, %272
  br i1 %337, label %338, label %341

; <label>:338                                     ; preds = %336, %322
  %339 = sub nsw i32 %326, 1
  %340 = add nsw i32 %i.0, %339
  br label %1416

; <label>:341                                     ; preds = %336
  br label %342

; <label>:342                                     ; preds = %341, %316
  %pairCount.1 = phi i32 [ %334, %341 ], [ %pairCount.0, %316 ]
  %343 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %351

; <label>:345                                     ; preds = %342
  %346 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %347 = load i32* %346, align 4
  %348 = lshr i32 %347, 27
  %349 = and i32 %348, 1
  %350 = icmp ne i32 %349, 0
  br label %351

; <label>:351                                     ; preds = %345, %342
  %352 = phi i1 [ false, %342 ], [ %350, %345 ]
  %353 = zext i1 %352 to i32
  %354 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %355 = load i32* %354, align 4
  %356 = lshr i32 %355, 22
  %357 = and i32 %356, 7
  %358 = icmp ne i32 %357, 0
  br i1 %358, label %359, label %389

; <label>:359                                     ; preds = %351
  %360 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %361 = load i32* %360, align 4
  %362 = lshr i32 %361, 22
  %363 = and i32 %362, 7
  %364 = add nsw i32 %i.0, %363
  br label %365

; <label>:365                                     ; preds = %374, %359
  %g_lower.1 = phi i32 [ %g_lower.0, %359 ], [ %375, %374 ]
  %366 = icmp slt i32 %g_lower.1, %g.0
  br i1 %366, label %367, label %372

; <label>:367                                     ; preds = %365
  %368 = sext i32 %g_lower.1 to i64
  %369 = getelementptr inbounds i32* %51, i64 %368
  %370 = load i32* %369, align 4
  %371 = icmp slt i32 %370, %364
  br label %372

; <label>:372                                     ; preds = %367, %365
  %373 = phi i1 [ false, %365 ], [ %371, %367 ]
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %372
  %375 = add nsw i32 %g_lower.1, 1
  br label %365

; <label>:376                                     ; preds = %372
  br label %377

; <label>:377                                     ; preds = %386, %376
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %376 ], [ %387, %386 ]
  %378 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %378, label %379, label %384

; <label>:379                                     ; preds = %377
  %380 = sext i32 %fixg_lower.1 to i64
  %381 = getelementptr inbounds i32* %65, i64 %380
  %382 = load i32* %381, align 4
  %383 = icmp slt i32 %382, %364
  br label %384

; <label>:384                                     ; preds = %379, %377
  %385 = phi i1 [ false, %377 ], [ %383, %379 ]
  br i1 %385, label %386, label %388

; <label>:386                                     ; preds = %384
  %387 = add nsw i32 %fixg_lower.1, 1
  br label %377

; <label>:388                                     ; preds = %384
  br label %389

; <label>:389                                     ; preds = %388, %351
  %g_lower.2 = phi i32 [ %g_lower.1, %388 ], [ %g_lower.0, %351 ]
  %j_hgroup.1 = phi i32 [ %364, %388 ], [ %j_hgroup.0, %351 ]
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %388 ], [ %fixg_lower.0, %351 ]
  %390 = add nsw i32 %i.0, 1
  br label %391

; <label>:391                                     ; preds = %397, %389
  %pairlistindex.1 = phi i32 [ 0, %389 ], [ %394, %397 ]
  %j.1 = phi i32 [ %390, %389 ], [ %398, %397 ]
  %392 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %392, label %393, label %399

; <label>:393                                     ; preds = %391
  %394 = add nsw i32 %pairlistindex.1, 1
  %395 = sext i32 %pairlistindex.1 to i64
  %396 = getelementptr inbounds i32* %189, i64 %395
  store i32 %j.1, i32* %396, align 4
  br label %397

; <label>:397                                     ; preds = %393
  %398 = add nsw i32 %j.1, 1
  br label %391

; <label>:399                                     ; preds = %391
  %400 = sext i32 %pairlistindex.1 to i64
  %401 = getelementptr inbounds i32* %189, i64 %400
  %402 = icmp ne i32 %353, 0
  br i1 %402, label %403, label %404

; <label>:403                                     ; preds = %399
  br label %405

; <label>:404                                     ; preds = %399
  br label %405

; <label>:405                                     ; preds = %404, %403
  %406 = phi i32* [ %65, %403 ], [ %51, %404 ]
  %407 = icmp ne i32 %353, 0
  br i1 %407, label %408, label %409

; <label>:408                                     ; preds = %405
  br label %410

; <label>:409                                     ; preds = %405
  br label %410

; <label>:410                                     ; preds = %409, %408
  %411 = phi i32 [ %fixg_lower.2, %408 ], [ %g_lower.2, %409 ]
  %412 = icmp ne i32 %353, 0
  br i1 %412, label %413, label %414

; <label>:413                                     ; preds = %410
  br label %415

; <label>:414                                     ; preds = %410
  br label %415

; <label>:415                                     ; preds = %414, %413
  %416 = phi i32 [ %fixg.2, %413 ], [ %g.0, %414 ]
  %417 = icmp slt i32 %411, %416
  br i1 %417, label %418, label %512

; <label>:418                                     ; preds = %415
  %419 = sext i32 %411 to i64
  %420 = getelementptr inbounds i32* %406, i64 %419
  %421 = load i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds %struct.CompAtom* %37, i64 %422
  %424 = getelementptr inbounds %struct.CompAtom* %423, i32 0, i32 0
  %425 = getelementptr inbounds %class.Vector* %424, i32 0, i32 0
  %426 = load double* %425, align 8
  %427 = sext i32 %421 to i64
  %428 = getelementptr inbounds %struct.CompAtom* %37, i64 %427
  %429 = getelementptr inbounds %struct.CompAtom* %428, i32 0, i32 0
  %430 = getelementptr inbounds %class.Vector* %429, i32 0, i32 1
  %431 = load double* %430, align 8
  %432 = sext i32 %421 to i64
  %433 = getelementptr inbounds %struct.CompAtom* %37, i64 %432
  %434 = getelementptr inbounds %struct.CompAtom* %433, i32 0, i32 0
  %435 = getelementptr inbounds %class.Vector* %434, i32 0, i32 2
  %436 = load double* %435, align 8
  br label %437

; <label>:437                                     ; preds = %470, %418
  %g.3 = phi i32 [ %411, %418 ], [ %440, %470 ]
  %gli.0 = phi i32* [ %79, %418 ], [ %gli.1, %470 ]
  %j2.0 = phi i32 [ %421, %418 ], [ %443, %470 ]
  %p_j_x.0 = phi double [ %426, %418 ], [ %450, %470 ]
  %p_j_y.0 = phi double [ %431, %418 ], [ %458, %470 ]
  %p_j_z.0 = phi double [ %436, %418 ], [ %466, %470 ]
  %438 = icmp slt i32 %g.3, %416
  br i1 %438, label %439, label %471

; <label>:439                                     ; preds = %437
  %440 = add nsw i32 %g.3, 1
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i32* %406, i64 %441
  %443 = load i32* %442, align 4
  %444 = fsub double %294, %p_j_x.0
  %445 = fmul double %444, %444
  %446 = sext i32 %443 to i64
  %447 = getelementptr inbounds %struct.CompAtom* %37, i64 %446
  %448 = getelementptr inbounds %struct.CompAtom* %447, i32 0, i32 0
  %449 = getelementptr inbounds %class.Vector* %448, i32 0, i32 0
  %450 = load double* %449, align 8
  %451 = fsub double %297, %p_j_y.0
  %452 = fmul double %451, %451
  %453 = fadd double %445, %452
  %454 = sext i32 %443 to i64
  %455 = getelementptr inbounds %struct.CompAtom* %37, i64 %454
  %456 = getelementptr inbounds %struct.CompAtom* %455, i32 0, i32 0
  %457 = getelementptr inbounds %class.Vector* %456, i32 0, i32 1
  %458 = load double* %457, align 8
  %459 = fsub double %300, %p_j_z.0
  %460 = fmul double %459, %459
  %461 = fadd double %453, %460
  %462 = sext i32 %443 to i64
  %463 = getelementptr inbounds %struct.CompAtom* %37, i64 %462
  %464 = getelementptr inbounds %struct.CompAtom* %463, i32 0, i32 0
  %465 = getelementptr inbounds %class.Vector* %464, i32 0, i32 2
  %466 = load double* %465, align 8
  %467 = fcmp ole double %461, %8
  br i1 %467, label %468, label %470

; <label>:468                                     ; preds = %439
  store i32 %j2.0, i32* %gli.0, align 4
  %469 = getelementptr inbounds i32* %gli.0, i32 1
  br label %470

; <label>:470                                     ; preds = %468, %439
  %gli.1 = phi i32* [ %469, %468 ], [ %gli.0, %439 ]
  br label %437

; <label>:471                                     ; preds = %437
  %472 = ptrtoint i32* %gli.0 to i64
  %473 = ptrtoint i32* %79 to i64
  %474 = sub i64 %472, %473
  %475 = sdiv exact i64 %474, 4
  %476 = trunc i64 %475 to i32
  br label %477

; <label>:477                                     ; preds = %509, %471
  %pli.0 = phi i32* [ %401, %471 ], [ %508, %509 ]
  %h.0 = phi i32 [ 0, %471 ], [ %510, %509 ]
  %478 = icmp slt i32 %h.0, %476
  br i1 %478, label %479, label %511

; <label>:479                                     ; preds = %477
  %480 = sext i32 %h.0 to i64
  %481 = getelementptr inbounds i32* %79, i64 %480
  %482 = load i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %37, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 25
  %488 = and i32 %487, 1
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %491

; <label>:490                                     ; preds = %479
  br label %498

; <label>:491                                     ; preds = %479
  %492 = sext i32 %482 to i64
  %493 = getelementptr inbounds %struct.CompAtom* %37, i64 %492
  %494 = getelementptr inbounds %struct.CompAtom* %493, i32 0, i32 2
  %495 = load i32* %494, align 4
  %496 = lshr i32 %495, 22
  %497 = and i32 %496, 7
  br label %498

; <label>:498                                     ; preds = %491, %490
  %499 = phi i32 [ 1, %490 ], [ %497, %491 ]
  %500 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %482, i32* %500, align 4
  %501 = add nsw i32 %482, 1
  %502 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %501, i32* %502, align 4
  %503 = add nsw i32 %482, 2
  %504 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %503, i32* %504, align 4
  %505 = add nsw i32 %482, 3
  %506 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %505, i32* %506, align 4
  %507 = sext i32 %499 to i64
  %508 = getelementptr inbounds i32* %pli.0, i64 %507
  br label %509

; <label>:509                                     ; preds = %498
  %510 = add nsw i32 %h.0, 1
  br label %477

; <label>:511                                     ; preds = %477
  br label %512

; <label>:512                                     ; preds = %511, %415
  %pli.1 = phi i32* [ %pli.0, %511 ], [ %401, %415 ]
  %513 = ptrtoint i32* %pli.1 to i64
  %514 = ptrtoint i32* %189 to i64
  %515 = sub i64 %513, %514
  %516 = sdiv exact i64 %515, 4
  %517 = trunc i64 %516 to i32
  %518 = icmp ne i32 %517, 0
  br i1 %518, label %519, label %526

; <label>:519                                     ; preds = %512
  %520 = sub nsw i32 %517, 1
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i32* %189, i64 %521
  %523 = load i32* %522, align 4
  %524 = sext i32 %517 to i64
  %525 = getelementptr inbounds i32* %189, i64 %524
  store i32 %523, i32* %525, align 4
  br label %526

; <label>:526                                     ; preds = %519, %512
  br label %529

; <label>:527                                     ; preds = %310
  %528 = add nsw i32 %pairlistoffset.0, 1
  br label %529

; <label>:529                                     ; preds = %527, %526
  %g_lower.3 = phi i32 [ %g_lower.2, %526 ], [ %g_lower.0, %527 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %526 ], [ %j_hgroup.0, %527 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %526 ], [ %fixg_lower.0, %527 ]
  %pairlistindex.2 = phi i32 [ %517, %526 ], [ %pairlistindex.0, %527 ]
  %pairlistoffset.1 = phi i32 [ 0, %526 ], [ %528, %527 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %526 ], [ %pairCount.0, %527 ]
  %530 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %538

; <label>:532                                     ; preds = %529
  %533 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %534 = load i32* %533, align 4
  %535 = lshr i32 %534, 26
  %536 = and i32 %535, 1
  %537 = icmp ne i32 %536, 0
  br label %538

; <label>:538                                     ; preds = %532, %529
  %539 = phi i1 [ false, %529 ], [ %537, %532 ]
  %540 = zext i1 %539 to i32
  %541 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 1
  %542 = load float* %541, align 4
  %543 = fpext float %542 to double
  %544 = fmul double 3.320636e+02, %543
  %545 = fmul double %544, %16
  %546 = fmul double %545, %9
  %547 = getelementptr inbounds %struct.CompAtom* %278, i32 0, i32 2
  %548 = load i32* %547, align 4
  %549 = and i32 %548, 4194303
  %550 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %549)
  %551 = zext i16 %550 to i32
  %552 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %551)
  %553 = icmp ne i32 %540, 0
  br i1 %553, label %554, label %616

; <label>:554                                     ; preds = %538
  br label %555

; <label>:555                                     ; preds = %613, %554
  %pli3.0 = phi i32* [ %203, %554 ], [ %pli3.2, %613 ]
  %plin.0 = phi i32* [ %217, %554 ], [ %plin.2, %613 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %554 ], [ %614, %613 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %554 ], [ %exclChecksum.3, %613 ]
  %556 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %556, label %557, label %615

; <label>:557                                     ; preds = %555
  %558 = sext i32 %k.0 to i64
  %559 = getelementptr inbounds i32* %189, i64 %558
  %560 = load i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %37, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 0
  %564 = getelementptr inbounds %class.Vector* %563, i32 0, i32 0
  %565 = load double* %564, align 8
  %566 = fsub double %294, %565
  %567 = fmul double %566, %566
  %568 = sext i32 %560 to i64
  %569 = getelementptr inbounds %struct.CompAtom* %37, i64 %568
  %570 = getelementptr inbounds %struct.CompAtom* %569, i32 0, i32 0
  %571 = getelementptr inbounds %class.Vector* %570, i32 0, i32 1
  %572 = load double* %571, align 8
  %573 = fsub double %297, %572
  %574 = fmul double %573, %573
  %575 = fadd double %567, %574
  %576 = sext i32 %560 to i64
  %577 = getelementptr inbounds %struct.CompAtom* %37, i64 %576
  %578 = getelementptr inbounds %struct.CompAtom* %577, i32 0, i32 0
  %579 = getelementptr inbounds %class.Vector* %578, i32 0, i32 2
  %580 = load double* %579, align 8
  %581 = fsub double %300, %580
  %582 = fmul double %581, %581
  %583 = fadd double %575, %582
  %584 = sext i32 %560 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %37, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 2
  %587 = load i32* %586, align 4
  %588 = lshr i32 %587, 26
  %589 = and i32 %588, 1
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %612, label %591

; <label>:591                                     ; preds = %557
  %592 = fcmp ole double %583, %7
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %591
  %594 = fcmp ole double %583, %22
  br i1 %594, label %595, label %598

; <label>:595                                     ; preds = %593
  %596 = add nsw i32 %exclChecksum.1, 1
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %612, label %598

; <label>:598                                     ; preds = %595, %593
  %exclChecksum.2 = phi i32 [ %596, %595 ], [ %exclChecksum.1, %593 ]
  %599 = sext i32 %560 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %37, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  %604 = icmp sge i32 %603, %284
  br i1 %604, label %605, label %609

; <label>:605                                     ; preds = %598
  %606 = icmp sle i32 %603, %286
  br i1 %606, label %607, label %609

; <label>:607                                     ; preds = %605
  %608 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %560, i32* %pli3.0, align 4
  br label %611

; <label>:609                                     ; preds = %605, %598
  %610 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %560, i32* %plin.0, align 4
  br label %611

; <label>:611                                     ; preds = %609, %607
  %pli3.1 = phi i32* [ %608, %607 ], [ %pli3.0, %609 ]
  %plin.1 = phi i32* [ %plin.0, %607 ], [ %610, %609 ]
  br label %612

; <label>:612                                     ; preds = %611, %595, %591, %557
  %pli3.2 = phi i32* [ %pli3.0, %557 ], [ %pli3.0, %595 ], [ %pli3.1, %611 ], [ %pli3.0, %591 ]
  %plin.2 = phi i32* [ %plin.0, %557 ], [ %plin.0, %595 ], [ %plin.1, %611 ], [ %plin.0, %591 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %557 ], [ %596, %595 ], [ %exclChecksum.2, %611 ], [ %exclChecksum.1, %591 ]
  br label %613

; <label>:613                                     ; preds = %612
  %614 = add nsw i32 %k.0, 1
  br label %555

; <label>:615                                     ; preds = %555
  br label %695

; <label>:616                                     ; preds = %538
  %617 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %617, label %618, label %694

; <label>:618                                     ; preds = %616
  %619 = sext i32 %pairlistoffset.1 to i64
  %620 = getelementptr inbounds i32* %189, i64 %619
  %621 = load i32* %620, align 4
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds %struct.CompAtom* %37, i64 %622
  %624 = getelementptr inbounds %struct.CompAtom* %623, i32 0, i32 0
  %625 = getelementptr inbounds %class.Vector* %624, i32 0, i32 0
  %626 = load double* %625, align 8
  %627 = sext i32 %621 to i64
  %628 = getelementptr inbounds %struct.CompAtom* %37, i64 %627
  %629 = getelementptr inbounds %struct.CompAtom* %628, i32 0, i32 0
  %630 = getelementptr inbounds %class.Vector* %629, i32 0, i32 1
  %631 = load double* %630, align 8
  %632 = sext i32 %621 to i64
  %633 = getelementptr inbounds %struct.CompAtom* %37, i64 %632
  %634 = getelementptr inbounds %struct.CompAtom* %633, i32 0, i32 0
  %635 = getelementptr inbounds %class.Vector* %634, i32 0, i32 2
  %636 = load double* %635, align 8
  %637 = sext i32 %621 to i64
  %638 = getelementptr inbounds %struct.CompAtom* %37, i64 %637
  %639 = getelementptr inbounds %struct.CompAtom* %638, i32 0, i32 2
  %640 = load i32* %639, align 4
  %641 = and i32 %640, 4194303
  br label %642

; <label>:642                                     ; preds = %687, %618
  %pli3.3 = phi i32* [ %203, %618 ], [ %pli3.5, %687 ]
  %plin.3 = phi i32* [ %217, %618 ], [ %plin.5, %687 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %618 ], [ %645, %687 ]
  %j210.0 = phi i32 [ %621, %618 ], [ %648, %687 ]
  %p_j_x11.0 = phi double [ %626, %618 ], [ %655, %687 ]
  %p_j_y12.0 = phi double [ %631, %618 ], [ %663, %687 ]
  %p_j_z13.0 = phi double [ %636, %618 ], [ %671, %687 ]
  %atom214.0 = phi i32 [ %641, %618 ], [ %692, %687 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %618 ], [ %exclChecksum.6, %687 ]
  %643 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %643, label %644, label %693

; <label>:644                                     ; preds = %642
  %645 = add nsw i32 %k9.0, 1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32* %189, i64 %646
  %648 = load i32* %647, align 4
  %649 = fsub double %294, %p_j_x11.0
  %650 = fmul double %649, %649
  %651 = sext i32 %648 to i64
  %652 = getelementptr inbounds %struct.CompAtom* %37, i64 %651
  %653 = getelementptr inbounds %struct.CompAtom* %652, i32 0, i32 0
  %654 = getelementptr inbounds %class.Vector* %653, i32 0, i32 0
  %655 = load double* %654, align 8
  %656 = fsub double %297, %p_j_y12.0
  %657 = fmul double %656, %656
  %658 = fadd double %650, %657
  %659 = sext i32 %648 to i64
  %660 = getelementptr inbounds %struct.CompAtom* %37, i64 %659
  %661 = getelementptr inbounds %struct.CompAtom* %660, i32 0, i32 0
  %662 = getelementptr inbounds %class.Vector* %661, i32 0, i32 1
  %663 = load double* %662, align 8
  %664 = fsub double %300, %p_j_z13.0
  %665 = fmul double %664, %664
  %666 = fadd double %658, %665
  %667 = sext i32 %648 to i64
  %668 = getelementptr inbounds %struct.CompAtom* %37, i64 %667
  %669 = getelementptr inbounds %struct.CompAtom* %668, i32 0, i32 0
  %670 = getelementptr inbounds %class.Vector* %669, i32 0, i32 2
  %671 = load double* %670, align 8
  %672 = fcmp ole double %666, %7
  br i1 %672, label %673, label %687

; <label>:673                                     ; preds = %644
  %674 = fcmp ole double %666, %22
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = add nsw i32 %exclChecksum.4, 1
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %687, label %678

; <label>:678                                     ; preds = %675, %673
  %exclChecksum.5 = phi i32 [ %676, %675 ], [ %exclChecksum.4, %673 ]
  %679 = icmp sge i32 %atom214.0, %284
  br i1 %679, label %680, label %684

; <label>:680                                     ; preds = %678
  %681 = icmp sle i32 %atom214.0, %286
  br i1 %681, label %682, label %684

; <label>:682                                     ; preds = %680
  %683 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %686

; <label>:684                                     ; preds = %680, %678
  %685 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %686

; <label>:686                                     ; preds = %684, %682
  %pli3.4 = phi i32* [ %683, %682 ], [ %pli3.3, %684 ]
  %plin.4 = phi i32* [ %plin.3, %682 ], [ %685, %684 ]
  br label %687

; <label>:687                                     ; preds = %686, %675, %644
  %pli3.5 = phi i32* [ %pli3.3, %675 ], [ %pli3.4, %686 ], [ %pli3.3, %644 ]
  %plin.5 = phi i32* [ %plin.3, %675 ], [ %plin.4, %686 ], [ %plin.3, %644 ]
  %exclChecksum.6 = phi i32 [ %676, %675 ], [ %exclChecksum.5, %686 ], [ %exclChecksum.4, %644 ]
  %688 = sext i32 %648 to i64
  %689 = getelementptr inbounds %struct.CompAtom* %37, i64 %688
  %690 = getelementptr inbounds %struct.CompAtom* %689, i32 0, i32 2
  %691 = load i32* %690, align 4
  %692 = and i32 %691, 4194303
  br label %642

; <label>:693                                     ; preds = %642
  br label %694

; <label>:694                                     ; preds = %693, %616
  %pli3.6 = phi i32* [ %pli3.3, %693 ], [ %203, %616 ]
  %plin.6 = phi i32* [ %plin.3, %693 ], [ %217, %616 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %693 ], [ %exclChecksum.0, %616 ]
  br label %695

; <label>:695                                     ; preds = %694, %615
  %pli3.7 = phi i32* [ %pli3.0, %615 ], [ %pli3.6, %694 ]
  %plin.7 = phi i32* [ %plin.0, %615 ], [ %plin.6, %694 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %615 ], [ %exclChecksum.7, %694 ]
  %696 = ptrtoint i32* %pli3.7 to i64
  %697 = ptrtoint i32* %203 to i64
  %698 = sub i64 %696, %697
  %699 = sdiv exact i64 %698, 4
  %700 = trunc i64 %699 to i32
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %709

; <label>:702                                     ; preds = %695
  %703 = sub nsw i32 %700, 1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i32* %203, i64 %704
  %706 = load i32* %705, align 4
  %707 = sext i32 %700 to i64
  %708 = getelementptr inbounds i32* %203, i64 %707
  store i32 %706, i32* %708, align 4
  br label %709

; <label>:709                                     ; preds = %702, %695
  br label %710

; <label>:710                                     ; preds = %721, %709
  %plix.0 = phi i32* [ %231, %709 ], [ %719, %721 ]
  %pln.0 = phi i32* [ %217, %709 ], [ %722, %721 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %709 ], [ %720, %721 ]
  %711 = icmp ult i32* %pln.0, %plin.7
  br i1 %711, label %712, label %715

; <label>:712                                     ; preds = %710
  %713 = load i32* %pln.0, align 4
  %714 = icmp slt i32 %713, %j_hgroup.2
  br label %715

; <label>:715                                     ; preds = %712, %710
  %716 = phi i1 [ false, %710 ], [ %714, %712 ]
  br i1 %716, label %717, label %723

; <label>:717                                     ; preds = %715
  %718 = load i32* %pln.0, align 4
  %719 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %718, i32* %plix.0, align 4
  %720 = add nsw i32 %exclChecksum.9, -1
  br label %721

; <label>:721                                     ; preds = %717
  %722 = getelementptr inbounds i32* %pln.0, i32 1
  br label %710

; <label>:723                                     ; preds = %715
  br label %724

; <label>:724                                     ; preds = %739, %723
  %plix.1 = phi i32* [ %plix.0, %723 ], [ %737, %739 ]
  %k17.0 = phi i32 [ 0, %723 ], [ %740, %739 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %723 ], [ %738, %739 ]
  %725 = icmp slt i32 %k17.0, %700
  br i1 %725, label %726, label %731

; <label>:726                                     ; preds = %724
  %727 = sext i32 %k17.0 to i64
  %728 = getelementptr inbounds i32* %203, i64 %727
  %729 = load i32* %728, align 4
  %730 = icmp slt i32 %729, %j_hgroup.2
  br label %731

; <label>:731                                     ; preds = %726, %724
  %732 = phi i1 [ false, %724 ], [ %730, %726 ]
  br i1 %732, label %733, label %741

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.0 to i64
  %735 = getelementptr inbounds i32* %203, i64 %734
  %736 = load i32* %735, align 4
  %737 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %736, i32* %plix.1, align 4
  %738 = add nsw i32 %exclChecksum.10, -1
  br label %739

; <label>:739                                     ; preds = %733
  %740 = add nsw i32 %k17.0, 1
  br label %724

; <label>:741                                     ; preds = %731
  br label %742

; <label>:742                                     ; preds = %764, %741
  %plin.8 = phi i32* [ %plin.7, %741 ], [ %plin.9, %764 ]
  %plix.2 = phi i32* [ %plix.1, %741 ], [ %plix.3, %764 ]
  %plim.0 = phi i32* [ %245, %741 ], [ %plim.1, %764 ]
  %k17.1 = phi i32 [ %k17.0, %741 ], [ %765, %764 ]
  %743 = icmp slt i32 %k17.1, %700
  br i1 %743, label %744, label %766

; <label>:744                                     ; preds = %742
  %745 = sext i32 %k17.1 to i64
  %746 = getelementptr inbounds i32* %203, i64 %745
  %747 = load i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.CompAtom* %37, i64 %748
  %750 = getelementptr inbounds %struct.CompAtom* %749, i32 0, i32 2
  %751 = load i32* %750, align 4
  %752 = and i32 %751, 4194303
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8* %291, i64 %753
  %755 = load i8* %754, align 1
  %756 = sext i8 %755 to i32
  switch i32 %756, label %763 [
    i32 0, label %757
    i32 1, label %759
    i32 2, label %761
  ]

; <label>:757                                     ; preds = %744
  %758 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %747, i32* %plin.8, align 4
  br label %763

; <label>:759                                     ; preds = %744
  %760 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %747, i32* %plix.2, align 4
  br label %763

; <label>:761                                     ; preds = %744
  %762 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %747, i32* %plim.0, align 4
  br label %763

; <label>:763                                     ; preds = %761, %759, %757, %744
  %plin.9 = phi i32* [ %plin.8, %744 ], [ %plin.8, %761 ], [ %plin.8, %759 ], [ %758, %757 ]
  %plix.3 = phi i32* [ %plix.2, %744 ], [ %plix.2, %761 ], [ %760, %759 ], [ %plix.2, %757 ]
  %plim.1 = phi i32* [ %plim.0, %744 ], [ %762, %761 ], [ %plim.0, %759 ], [ %plim.0, %757 ]
  br label %764

; <label>:764                                     ; preds = %763
  %765 = add nsw i32 %k17.1, 1
  br label %742

; <label>:766                                     ; preds = %742
  %767 = ptrtoint i32* %plix.2 to i64
  %768 = ptrtoint i32* %231 to i64
  %769 = sub i64 %767, %768
  %770 = sdiv exact i64 %769, 4
  %771 = sext i32 %exclChecksum.10 to i64
  %772 = add nsw i64 %771, %770
  %773 = trunc i64 %772 to i32
  %774 = ptrtoint i32* %plim.0 to i64
  %775 = ptrtoint i32* %245 to i64
  %776 = sub i64 %774, %775
  %777 = sdiv exact i64 %776, 4
  %778 = sext i32 %773 to i64
  %779 = add nsw i64 %778, %777
  %780 = trunc i64 %779 to i32
  %781 = ptrtoint i32* %plin.8 to i64
  %782 = ptrtoint i32* %pln.0 to i64
  %783 = sub i64 %781, %782
  %784 = sdiv exact i64 %783, 4
  %785 = trunc i64 %784 to i32
  br label %786

; <label>:786                                     ; preds = %1019, %766
  %k17.2 = phi i32 [ 0, %766 ], [ %1020, %1019 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %766 ], [ %1012, %1019 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %766 ], [ %1003, %1019 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %766 ], [ %1001, %1019 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %766 ], [ %992, %1019 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %766 ], [ %990, %1019 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %766 ], [ %988, %1019 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %766 ], [ %976, %1019 ]
  %virial_zz.1 = phi double [ %virial_zz.0, %766 ], [ %953, %1019 ]
  %virial_yz.1 = phi double [ %virial_yz.0, %766 ], [ %944, %1019 ]
  %virial_yy.1 = phi double [ %virial_yy.0, %766 ], [ %942, %1019 ]
  %virial_xz.1 = phi double [ %virial_xz.0, %766 ], [ %933, %1019 ]
  %virial_xy.1 = phi double [ %virial_xy.0, %766 ], [ %931, %1019 ]
  %virial_xx.1 = phi double [ %virial_xx.0, %766 ], [ %929, %1019 ]
  %electEnergy.1 = phi double [ %electEnergy.0, %766 ], [ %913, %1019 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %766 ], [ %896, %1019 ]
  %787 = icmp slt i32 %k17.2, %785
  br i1 %787, label %788, label %1021

; <label>:788                                     ; preds = %786
  %789 = sext i32 %k17.2 to i64
  %790 = getelementptr inbounds i32* %pln.0, i64 %789
  %791 = load i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds %struct.CompAtom* %37, i64 %792
  %794 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 0
  %796 = load double* %795, align 8
  %797 = fsub double %294, %796
  %798 = fmul double %797, %797
  %799 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %800 = getelementptr inbounds %class.Vector* %799, i32 0, i32 1
  %801 = load double* %800, align 8
  %802 = fsub double %297, %801
  %803 = fmul double %802, %802
  %804 = fadd double %798, %803
  %805 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 0
  %806 = getelementptr inbounds %class.Vector* %805, i32 0, i32 2
  %807 = load double* %806, align 8
  %808 = fsub double %300, %807
  %809 = fmul double %808, %808
  %810 = fadd double %804, %809
  %811 = fptrunc double %810 to float
  %812 = bitcast %union.anon.28* %r2f to float*
  store float %811, float* %812, align 4
  %813 = bitcast %union.anon.28* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = ashr i32 %814, 17
  %816 = add nsw i32 %815, %25
  %817 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 2
  %818 = load i32* %817, align 4
  %819 = and i32 %818, 4194303
  %820 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %819)
  %821 = zext i16 %820 to i32
  %822 = mul nsw i32 2, %821
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %823
  %825 = mul nsw i32 16, %816
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds double* %14, i64 %826
  %828 = getelementptr inbounds double* %827, i64 0
  %829 = load double* %828, align 8
  %830 = mul nsw i32 16, %816
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double* %14, i64 %831
  %833 = getelementptr inbounds double* %832, i64 4
  %834 = getelementptr inbounds double* %833, i64 0
  %835 = load double* %834, align 8
  %836 = mul nsw i32 16, %816
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds double* %14, i64 %837
  %839 = getelementptr inbounds double* %838, i64 8
  %840 = getelementptr inbounds double* %839, i64 0
  %841 = load double* %840, align 8
  %842 = mul nsw i32 16, %816
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds double* %14, i64 %843
  %845 = getelementptr inbounds double* %844, i64 8
  %846 = getelementptr inbounds double* %845, i64 4
  %847 = getelementptr inbounds double* %846, i64 0
  %848 = load double* %847, align 8
  %849 = bitcast %union.anon.28* %r2f to i32*
  %850 = load i32* %849, align 4
  %851 = and i32 %850, -131072
  store i32 %851, i32* %849, align 4
  %852 = getelementptr inbounds %struct.CompAtom* %793, i32 0, i32 1
  %853 = load float* %852, align 4
  %854 = fpext float %853 to double
  %855 = fmul double %546, %854
  %856 = bitcast %union.anon.28* %r2f to float*
  %857 = load float* %856, align 4
  %858 = fpext float %857 to double
  %859 = fsub double %810, %858
  %860 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 0
  %861 = load double* %860, align 8
  %862 = fmul double %16, %861
  %863 = getelementptr inbounds %"struct.LJTable::TableEntry"* %824, i32 0, i32 1
  %864 = load double* %863, align 8
  %865 = fmul double %16, %864
  %866 = fmul double %862, %829
  %867 = fmul double %865, %835
  %868 = fsub double %866, %867
  %869 = getelementptr inbounds double* %827, i64 3
  %870 = load double* %869, align 8
  %871 = fmul double %862, %870
  %872 = getelementptr inbounds double* %833, i64 3
  %873 = load double* %872, align 8
  %874 = fmul double %865, %873
  %875 = fsub double %871, %874
  %876 = getelementptr inbounds double* %827, i64 2
  %877 = load double* %876, align 8
  %878 = fmul double %862, %877
  %879 = getelementptr inbounds double* %833, i64 2
  %880 = load double* %879, align 8
  %881 = fmul double %865, %880
  %882 = fsub double %878, %881
  %883 = getelementptr inbounds double* %827, i64 1
  %884 = load double* %883, align 8
  %885 = fmul double %862, %884
  %886 = getelementptr inbounds double* %833, i64 1
  %887 = load double* %886, align 8
  %888 = fmul double %865, %887
  %889 = fsub double %885, %888
  %890 = fmul double %859, %875
  %891 = fadd double %890, %882
  %892 = fmul double %891, %859
  %893 = fadd double %892, %889
  %894 = fmul double %893, %859
  %895 = fadd double %894, %868
  %896 = fadd double %vdwEnergy.1, %895
  %897 = fmul double %841, %855
  %898 = getelementptr inbounds double* %839, i64 3
  %899 = load double* %898, align 8
  %900 = fmul double %855, %899
  %901 = getelementptr inbounds double* %839, i64 2
  %902 = load double* %901, align 8
  %903 = fmul double %855, %902
  %904 = getelementptr inbounds double* %839, i64 1
  %905 = load double* %904, align 8
  %906 = fmul double %855, %905
  %907 = fmul double %859, %900
  %908 = fadd double %907, %903
  %909 = fmul double %908, %859
  %910 = fadd double %909, %906
  %911 = fmul double %910, %859
  %912 = fadd double %911, %897
  %913 = fadd double %electEnergy.1, %912
  %914 = fadd double %900, %875
  %915 = fadd double %903, %882
  %916 = fadd double %906, %889
  %917 = fadd double %897, %868
  %918 = fmul double 3.000000e+00, %859
  %919 = fmul double %918, %914
  %920 = fmul double 2.000000e+00, %915
  %921 = fadd double %919, %920
  %922 = fmul double %921, %859
  %923 = fadd double %922, %916
  %924 = fmul double -2.000000e+00, %923
  %925 = sext i32 %791 to i64
  %926 = getelementptr inbounds %class.Vector* %251, i64 %925
  %927 = fmul double %924, %797
  %928 = fmul double %927, %797
  %929 = fadd double %virial_xx.1, %928
  %930 = fmul double %927, %802
  %931 = fadd double %virial_xy.1, %930
  %932 = fmul double %927, %808
  %933 = fadd double %virial_xz.1, %932
  %934 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %935 = load double* %934, align 8
  %936 = fadd double %935, %927
  store double %936, double* %934, align 8
  %937 = getelementptr inbounds %class.Vector* %926, i32 0, i32 0
  %938 = load double* %937, align 8
  %939 = fsub double %938, %927
  store double %939, double* %937, align 8
  %940 = fmul double %924, %802
  %941 = fmul double %940, %802
  %942 = fadd double %virial_yy.1, %941
  %943 = fmul double %940, %808
  %944 = fadd double %virial_yz.1, %943
  %945 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %946 = load double* %945, align 8
  %947 = fadd double %946, %940
  store double %947, double* %945, align 8
  %948 = getelementptr inbounds %class.Vector* %926, i32 0, i32 1
  %949 = load double* %948, align 8
  %950 = fsub double %949, %940
  store double %950, double* %948, align 8
  %951 = fmul double %924, %808
  %952 = fmul double %951, %808
  %953 = fadd double %virial_zz.1, %952
  %954 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %955 = load double* %954, align 8
  %956 = fadd double %955, %951
  store double %956, double* %954, align 8
  %957 = getelementptr inbounds %class.Vector* %926, i32 0, i32 2
  %958 = load double* %957, align 8
  %959 = fsub double %958, %951
  store double %959, double* %957, align 8
  %960 = getelementptr inbounds double* %846, i64 1
  %961 = load double* %960, align 8
  %962 = getelementptr inbounds double* %846, i64 2
  %963 = load double* %962, align 8
  %964 = getelementptr inbounds double* %846, i64 3
  %965 = load double* %964, align 8
  %966 = fmul double %965, %855
  %967 = fmul double %963, %855
  %968 = fmul double %961, %855
  %969 = fmul double %848, %855
  %970 = fmul double %859, %966
  %971 = fadd double %970, %967
  %972 = fmul double %971, %859
  %973 = fadd double %972, %968
  %974 = fmul double %973, %859
  %975 = fadd double %974, %969
  %976 = fadd double %fullElectEnergy.1, %975
  %977 = fmul double 3.000000e+00, %859
  %978 = fmul double %977, %966
  %979 = fmul double 2.000000e+00, %967
  %980 = fadd double %978, %979
  %981 = fmul double %980, %859
  %982 = fadd double %981, %968
  %983 = fmul double -2.000000e+00, %982
  %984 = sext i32 %791 to i64
  %985 = getelementptr inbounds %class.Vector* %257, i64 %984
  %986 = fmul double %983, %797
  %987 = fmul double %986, %797
  %988 = fadd double %fullElectVirial_xx.1, %987
  %989 = fmul double %986, %802
  %990 = fadd double %fullElectVirial_xy.1, %989
  %991 = fmul double %986, %808
  %992 = fadd double %fullElectVirial_xz.1, %991
  %993 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %994 = load double* %993, align 8
  %995 = fadd double %994, %986
  store double %995, double* %993, align 8
  %996 = getelementptr inbounds %class.Vector* %985, i32 0, i32 0
  %997 = load double* %996, align 8
  %998 = fsub double %997, %986
  store double %998, double* %996, align 8
  %999 = fmul double %983, %802
  %1000 = fmul double %999, %802
  %1001 = fadd double %fullElectVirial_yy.1, %1000
  %1002 = fmul double %999, %808
  %1003 = fadd double %fullElectVirial_yz.1, %1002
  %1004 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1005 = load double* %1004, align 8
  %1006 = fadd double %1005, %999
  store double %1006, double* %1004, align 8
  %1007 = getelementptr inbounds %class.Vector* %985, i32 0, i32 1
  %1008 = load double* %1007, align 8
  %1009 = fsub double %1008, %999
  store double %1009, double* %1007, align 8
  %1010 = fmul double %983, %808
  %1011 = fmul double %1010, %808
  %1012 = fadd double %fullElectVirial_zz.1, %1011
  %1013 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1014 = load double* %1013, align 8
  %1015 = fadd double %1014, %1010
  store double %1015, double* %1013, align 8
  %1016 = getelementptr inbounds %class.Vector* %985, i32 0, i32 2
  %1017 = load double* %1016, align 8
  %1018 = fsub double %1017, %1010
  store double %1018, double* %1016, align 8
  br label %1019

; <label>:1019                                    ; preds = %788
  %1020 = add nsw i32 %k17.2, 1
  br label %786

; <label>:1021                                    ; preds = %786
  %1022 = ptrtoint i32* %plim.0 to i64
  %1023 = ptrtoint i32* %245 to i64
  %1024 = sub i64 %1022, %1023
  %1025 = sdiv exact i64 %1024, 4
  %1026 = trunc i64 %1025 to i32
  br label %1027

; <label>:1027                                    ; preds = %1282, %1021
  %k17.3 = phi i32 [ 0, %1021 ], [ %1283, %1282 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %1021 ], [ %1275, %1282 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %1021 ], [ %1266, %1282 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %1021 ], [ %1264, %1282 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %1021 ], [ %1255, %1282 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %1021 ], [ %1253, %1282 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %1021 ], [ %1251, %1282 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %1021 ], [ %1239, %1282 ]
  %virial_zz.2 = phi double [ %virial_zz.1, %1021 ], [ %1197, %1282 ]
  %virial_yz.2 = phi double [ %virial_yz.1, %1021 ], [ %1188, %1282 ]
  %virial_yy.2 = phi double [ %virial_yy.1, %1021 ], [ %1186, %1282 ]
  %virial_xz.2 = phi double [ %virial_xz.1, %1021 ], [ %1177, %1282 ]
  %virial_xy.2 = phi double [ %virial_xy.1, %1021 ], [ %1175, %1282 ]
  %virial_xx.2 = phi double [ %virial_xx.1, %1021 ], [ %1173, %1282 ]
  %electEnergy.2 = phi double [ %electEnergy.1, %1021 ], [ %1157, %1282 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %1021 ], [ %1138, %1282 ]
  %1028 = icmp slt i32 %k17.3, %1026
  br i1 %1028, label %1029, label %1284

; <label>:1029                                    ; preds = %1027
  %1030 = sext i32 %k17.3 to i64
  %1031 = getelementptr inbounds i32* %245, i64 %1030
  %1032 = load i32* %1031, align 4
  %1033 = sext i32 %1032 to i64
  %1034 = getelementptr inbounds %struct.CompAtom* %37, i64 %1033
  %1035 = getelementptr inbounds %struct.CompAtom* %1034, i32 0, i32 0
  %1036 = getelementptr inbounds %class.Vector* %1035, i32 0, i32 0
  %1037 = load double* %1036, align 8
  %1038 = fsub double %294, %1037
  %1039 = fmul double %1038, %1038
  %1040 = getelementptr inbounds %struct.CompAtom* %1034, i32 0, i32 0
  %1041 = getelementptr inbounds %class.Vector* %1040, i32 0, i32 1
  %1042 = load double* %1041, align 8
  %1043 = fsub double %297, %1042
  %1044 = fmul double %1043, %1043
  %1045 = fadd double %1039, %1044
  %1046 = getelementptr inbounds %struct.CompAtom* %1034, i32 0, i32 0
  %1047 = getelementptr inbounds %class.Vector* %1046, i32 0, i32 2
  %1048 = load double* %1047, align 8
  %1049 = fsub double %300, %1048
  %1050 = fmul double %1049, %1049
  %1051 = fadd double %1045, %1050
  %1052 = fptrunc double %1051 to float
  %1053 = bitcast %union.anon.29* %r2f31 to float*
  store float %1052, float* %1053, align 4
  %1054 = bitcast %union.anon.29* %r2f31 to i32*
  %1055 = load i32* %1054, align 4
  %1056 = ashr i32 %1055, 17
  %1057 = add nsw i32 %1056, %25
  %1058 = getelementptr inbounds %struct.CompAtom* %1034, i32 0, i32 2
  %1059 = load i32* %1058, align 4
  %1060 = and i32 %1059, 4194303
  %1061 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %1060)
  %1062 = zext i16 %1061 to i32
  %1063 = mul nsw i32 2, %1062
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds %"struct.LJTable::TableEntry"* %552, i64 %1064
  %1066 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1065, i64 1
  %1067 = mul nsw i32 16, %1057
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds double* %14, i64 %1068
  %1070 = getelementptr inbounds double* %1069, i64 0
  %1071 = load double* %1070, align 8
  %1072 = mul nsw i32 16, %1057
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds double* %14, i64 %1073
  %1075 = getelementptr inbounds double* %1074, i64 4
  %1076 = getelementptr inbounds double* %1075, i64 0
  %1077 = load double* %1076, align 8
  %1078 = mul nsw i32 16, %1057
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds double* %14, i64 %1079
  %1081 = getelementptr inbounds double* %1080, i64 8
  %1082 = getelementptr inbounds double* %1081, i64 0
  %1083 = load double* %1082, align 8
  %1084 = mul nsw i32 16, %1057
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds double* %14, i64 %1085
  %1087 = getelementptr inbounds double* %1086, i64 8
  %1088 = getelementptr inbounds double* %1087, i64 4
  %1089 = getelementptr inbounds double* %1088, i64 0
  %1090 = load double* %1089, align 8
  %1091 = bitcast %union.anon.29* %r2f31 to i32*
  %1092 = load i32* %1091, align 4
  %1093 = and i32 %1092, -131072
  store i32 %1093, i32* %1091, align 4
  %1094 = getelementptr inbounds %struct.CompAtom* %1034, i32 0, i32 1
  %1095 = load float* %1094, align 4
  %1096 = fpext float %1095 to double
  %1097 = fmul double %546, %1096
  %1098 = bitcast %union.anon.29* %r2f31 to float*
  %1099 = load float* %1098, align 4
  %1100 = fpext float %1099 to double
  %1101 = fsub double %1051, %1100
  %1102 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1066, i32 0, i32 0
  %1103 = load double* %1102, align 8
  %1104 = fmul double %16, %1103
  %1105 = getelementptr inbounds %"struct.LJTable::TableEntry"* %1066, i32 0, i32 1
  %1106 = load double* %1105, align 8
  %1107 = fmul double %16, %1106
  %1108 = fmul double %1104, %1071
  %1109 = fmul double %1107, %1077
  %1110 = fsub double %1108, %1109
  %1111 = getelementptr inbounds double* %1069, i64 3
  %1112 = load double* %1111, align 8
  %1113 = fmul double %1104, %1112
  %1114 = getelementptr inbounds double* %1075, i64 3
  %1115 = load double* %1114, align 8
  %1116 = fmul double %1107, %1115
  %1117 = fsub double %1113, %1116
  %1118 = getelementptr inbounds double* %1069, i64 2
  %1119 = load double* %1118, align 8
  %1120 = fmul double %1104, %1119
  %1121 = getelementptr inbounds double* %1075, i64 2
  %1122 = load double* %1121, align 8
  %1123 = fmul double %1107, %1122
  %1124 = fsub double %1120, %1123
  %1125 = getelementptr inbounds double* %1069, i64 1
  %1126 = load double* %1125, align 8
  %1127 = fmul double %1104, %1126
  %1128 = getelementptr inbounds double* %1075, i64 1
  %1129 = load double* %1128, align 8
  %1130 = fmul double %1107, %1129
  %1131 = fsub double %1127, %1130
  %1132 = fmul double %1101, %1117
  %1133 = fadd double %1132, %1124
  %1134 = fmul double %1133, %1101
  %1135 = fadd double %1134, %1131
  %1136 = fmul double %1135, %1101
  %1137 = fadd double %1136, %1110
  %1138 = fadd double %vdwEnergy.2, %1137
  %1139 = fsub double 1.000000e+00, %18
  %1140 = fmul double %1139, %1097
  %1141 = fmul double %1083, %1140
  %1142 = getelementptr inbounds double* %1081, i64 3
  %1143 = load double* %1142, align 8
  %1144 = fmul double %1140, %1143
  %1145 = getelementptr inbounds double* %1081, i64 2
  %1146 = load double* %1145, align 8
  %1147 = fmul double %1140, %1146
  %1148 = getelementptr inbounds double* %1081, i64 1
  %1149 = load double* %1148, align 8
  %1150 = fmul double %1140, %1149
  %1151 = fmul double %1101, %1144
  %1152 = fadd double %1151, %1147
  %1153 = fmul double %1152, %1101
  %1154 = fadd double %1153, %1150
  %1155 = fmul double %1154, %1101
  %1156 = fadd double %1155, %1141
  %1157 = fadd double %electEnergy.2, %1156
  %1158 = fadd double %1144, %1117
  %1159 = fadd double %1147, %1124
  %1160 = fadd double %1150, %1131
  %1161 = fadd double %1141, %1110
  %1162 = fmul double 3.000000e+00, %1101
  %1163 = fmul double %1162, %1158
  %1164 = fmul double 2.000000e+00, %1159
  %1165 = fadd double %1163, %1164
  %1166 = fmul double %1165, %1101
  %1167 = fadd double %1166, %1160
  %1168 = fmul double -2.000000e+00, %1167
  %1169 = sext i32 %1032 to i64
  %1170 = getelementptr inbounds %class.Vector* %251, i64 %1169
  %1171 = fmul double %1168, %1038
  %1172 = fmul double %1171, %1038
  %1173 = fadd double %virial_xx.2, %1172
  %1174 = fmul double %1171, %1043
  %1175 = fadd double %virial_xy.2, %1174
  %1176 = fmul double %1171, %1049
  %1177 = fadd double %virial_xz.2, %1176
  %1178 = getelementptr inbounds %class.Vector* %302, i32 0, i32 0
  %1179 = load double* %1178, align 8
  %1180 = fadd double %1179, %1171
  store double %1180, double* %1178, align 8
  %1181 = getelementptr inbounds %class.Vector* %1170, i32 0, i32 0
  %1182 = load double* %1181, align 8
  %1183 = fsub double %1182, %1171
  store double %1183, double* %1181, align 8
  %1184 = fmul double %1168, %1043
  %1185 = fmul double %1184, %1043
  %1186 = fadd double %virial_yy.2, %1185
  %1187 = fmul double %1184, %1049
  %1188 = fadd double %virial_yz.2, %1187
  %1189 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %1190 = load double* %1189, align 8
  %1191 = fadd double %1190, %1184
  store double %1191, double* %1189, align 8
  %1192 = getelementptr inbounds %class.Vector* %1170, i32 0, i32 1
  %1193 = load double* %1192, align 8
  %1194 = fsub double %1193, %1184
  store double %1194, double* %1192, align 8
  %1195 = fmul double %1168, %1049
  %1196 = fmul double %1195, %1049
  %1197 = fadd double %virial_zz.2, %1196
  %1198 = getelementptr inbounds %class.Vector* %302, i32 0, i32 2
  %1199 = load double* %1198, align 8
  %1200 = fadd double %1199, %1195
  store double %1200, double* %1198, align 8
  %1201 = getelementptr inbounds %class.Vector* %1170, i32 0, i32 2
  %1202 = load double* %1201, align 8
  %1203 = fsub double %1202, %1195
  store double %1203, double* %1201, align 8
  %1204 = getelementptr inbounds double* %1088, i64 1
  %1205 = load double* %1204, align 8
  %1206 = getelementptr inbounds double* %1088, i64 2
  %1207 = load double* %1206, align 8
  %1208 = getelementptr inbounds double* %1088, i64 3
  %1209 = load double* %1208, align 8
  %1210 = mul nsw i32 4, %1057
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds double* %15, i64 %1211
  %1213 = getelementptr inbounds double* %1212, i64 0
  %1214 = load double* %1213, align 8
  %1215 = fmul double %18, %1214
  %1216 = fsub double %1090, %1215
  %1217 = getelementptr inbounds double* %1212, i64 1
  %1218 = load double* %1217, align 8
  %1219 = fmul double %18, %1218
  %1220 = fsub double %1205, %1219
  %1221 = getelementptr inbounds double* %1212, i64 2
  %1222 = load double* %1221, align 8
  %1223 = fmul double %18, %1222
  %1224 = fsub double %1207, %1223
  %1225 = getelementptr inbounds double* %1212, i64 3
  %1226 = load double* %1225, align 8
  %1227 = fmul double %18, %1226
  %1228 = fsub double %1209, %1227
  %1229 = fmul double %1228, %1097
  %1230 = fmul double %1224, %1097
  %1231 = fmul double %1220, %1097
  %1232 = fmul double %1216, %1097
  %1233 = fmul double %1101, %1229
  %1234 = fadd double %1233, %1230
  %1235 = fmul double %1234, %1101
  %1236 = fadd double %1235, %1231
  %1237 = fmul double %1236, %1101
  %1238 = fadd double %1237, %1232
  %1239 = fadd double %fullElectEnergy.2, %1238
  %1240 = fmul double 3.000000e+00, %1101
  %1241 = fmul double %1240, %1229
  %1242 = fmul double 2.000000e+00, %1230
  %1243 = fadd double %1241, %1242
  %1244 = fmul double %1243, %1101
  %1245 = fadd double %1244, %1231
  %1246 = fmul double -2.000000e+00, %1245
  %1247 = sext i32 %1032 to i64
  %1248 = getelementptr inbounds %class.Vector* %257, i64 %1247
  %1249 = fmul double %1246, %1038
  %1250 = fmul double %1249, %1038
  %1251 = fadd double %fullElectVirial_xx.2, %1250
  %1252 = fmul double %1249, %1043
  %1253 = fadd double %fullElectVirial_xy.2, %1252
  %1254 = fmul double %1249, %1049
  %1255 = fadd double %fullElectVirial_xz.2, %1254
  %1256 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1257 = load double* %1256, align 8
  %1258 = fadd double %1257, %1249
  store double %1258, double* %1256, align 8
  %1259 = getelementptr inbounds %class.Vector* %1248, i32 0, i32 0
  %1260 = load double* %1259, align 8
  %1261 = fsub double %1260, %1249
  store double %1261, double* %1259, align 8
  %1262 = fmul double %1246, %1043
  %1263 = fmul double %1262, %1043
  %1264 = fadd double %fullElectVirial_yy.2, %1263
  %1265 = fmul double %1262, %1049
  %1266 = fadd double %fullElectVirial_yz.2, %1265
  %1267 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1268 = load double* %1267, align 8
  %1269 = fadd double %1268, %1262
  store double %1269, double* %1267, align 8
  %1270 = getelementptr inbounds %class.Vector* %1248, i32 0, i32 1
  %1271 = load double* %1270, align 8
  %1272 = fsub double %1271, %1262
  store double %1272, double* %1270, align 8
  %1273 = fmul double %1246, %1049
  %1274 = fmul double %1273, %1049
  %1275 = fadd double %fullElectVirial_zz.2, %1274
  %1276 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1277 = load double* %1276, align 8
  %1278 = fadd double %1277, %1273
  store double %1278, double* %1276, align 8
  %1279 = getelementptr inbounds %class.Vector* %1248, i32 0, i32 2
  %1280 = load double* %1279, align 8
  %1281 = fsub double %1280, %1273
  store double %1281, double* %1279, align 8
  br label %1282

; <label>:1282                                    ; preds = %1029
  %1283 = add nsw i32 %k17.3, 1
  br label %1027

; <label>:1284                                    ; preds = %1027
  %1285 = ptrtoint i32* %plix.2 to i64
  %1286 = ptrtoint i32* %231 to i64
  %1287 = sub i64 %1285, %1286
  %1288 = sdiv exact i64 %1287, 4
  %1289 = trunc i64 %1288 to i32
  br label %1290

; <label>:1290                                    ; preds = %1413, %1284
  %k17.4 = phi i32 [ 0, %1284 ], [ %1414, %1413 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1284 ], [ %1406, %1413 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1284 ], [ %1397, %1413 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1284 ], [ %1395, %1413 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1284 ], [ %1386, %1413 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1284 ], [ %1384, %1413 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1284 ], [ %1382, %1413 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1284 ], [ %1370, %1413 ]
  %1291 = icmp slt i32 %k17.4, %1289
  br i1 %1291, label %1292, label %1415

; <label>:1292                                    ; preds = %1290
  %1293 = sext i32 %k17.4 to i64
  %1294 = getelementptr inbounds i32* %231, i64 %1293
  %1295 = load i32* %1294, align 4
  %1296 = sext i32 %1295 to i64
  %1297 = getelementptr inbounds %struct.CompAtom* %37, i64 %1296
  %1298 = getelementptr inbounds %struct.CompAtom* %1297, i32 0, i32 0
  %1299 = getelementptr inbounds %class.Vector* %1298, i32 0, i32 0
  %1300 = load double* %1299, align 8
  %1301 = fsub double %294, %1300
  %1302 = fmul double %1301, %1301
  %1303 = getelementptr inbounds %struct.CompAtom* %1297, i32 0, i32 0
  %1304 = getelementptr inbounds %class.Vector* %1303, i32 0, i32 1
  %1305 = load double* %1304, align 8
  %1306 = fsub double %297, %1305
  %1307 = fmul double %1306, %1306
  %1308 = fadd double %1302, %1307
  %1309 = getelementptr inbounds %struct.CompAtom* %1297, i32 0, i32 0
  %1310 = getelementptr inbounds %class.Vector* %1309, i32 0, i32 2
  %1311 = load double* %1310, align 8
  %1312 = fsub double %300, %1311
  %1313 = fmul double %1312, %1312
  %1314 = fadd double %1308, %1313
  %1315 = fptrunc double %1314 to float
  %1316 = bitcast %union.anon.30* %r2f77 to float*
  store float %1315, float* %1316, align 4
  %1317 = bitcast %union.anon.30* %r2f77 to i32*
  %1318 = load i32* %1317, align 4
  %1319 = ashr i32 %1318, 17
  %1320 = add nsw i32 %1319, %25
  %1321 = mul nsw i32 16, %1320
  %1322 = sext i32 %1321 to i64
  %1323 = getelementptr inbounds double* %14, i64 %1322
  %1324 = getelementptr inbounds double* %1323, i64 8
  %1325 = getelementptr inbounds double* %1324, i64 4
  %1326 = getelementptr inbounds double* %1325, i64 0
  %1327 = load double* %1326, align 8
  %1328 = bitcast %union.anon.30* %r2f77 to i32*
  %1329 = load i32* %1328, align 4
  %1330 = and i32 %1329, -131072
  store i32 %1330, i32* %1328, align 4
  %1331 = getelementptr inbounds %struct.CompAtom* %1297, i32 0, i32 1
  %1332 = load float* %1331, align 4
  %1333 = fpext float %1332 to double
  %1334 = fmul double %546, %1333
  %1335 = bitcast %union.anon.30* %r2f77 to float*
  %1336 = load float* %1335, align 4
  %1337 = fpext float %1336 to double
  %1338 = fsub double %1314, %1337
  %1339 = getelementptr inbounds double* %1325, i64 1
  %1340 = load double* %1339, align 8
  %1341 = getelementptr inbounds double* %1325, i64 2
  %1342 = load double* %1341, align 8
  %1343 = getelementptr inbounds double* %1325, i64 3
  %1344 = load double* %1343, align 8
  %1345 = mul nsw i32 4, %1320
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds double* %15, i64 %1346
  %1348 = getelementptr inbounds double* %1347, i64 0
  %1349 = load double* %1348, align 8
  %1350 = fsub double %1327, %1349
  %1351 = getelementptr inbounds double* %1347, i64 1
  %1352 = load double* %1351, align 8
  %1353 = fsub double %1340, %1352
  %1354 = getelementptr inbounds double* %1347, i64 2
  %1355 = load double* %1354, align 8
  %1356 = fsub double %1342, %1355
  %1357 = getelementptr inbounds double* %1347, i64 3
  %1358 = load double* %1357, align 8
  %1359 = fsub double %1344, %1358
  %1360 = fmul double %1359, %1334
  %1361 = fmul double %1356, %1334
  %1362 = fmul double %1353, %1334
  %1363 = fmul double %1350, %1334
  %1364 = fmul double %1338, %1360
  %1365 = fadd double %1364, %1361
  %1366 = fmul double %1365, %1338
  %1367 = fadd double %1366, %1362
  %1368 = fmul double %1367, %1338
  %1369 = fadd double %1368, %1363
  %1370 = fadd double %fullElectEnergy.3, %1369
  %1371 = fmul double 3.000000e+00, %1338
  %1372 = fmul double %1371, %1360
  %1373 = fmul double 2.000000e+00, %1361
  %1374 = fadd double %1372, %1373
  %1375 = fmul double %1374, %1338
  %1376 = fadd double %1375, %1362
  %1377 = fmul double -2.000000e+00, %1376
  %1378 = sext i32 %1295 to i64
  %1379 = getelementptr inbounds %class.Vector* %257, i64 %1378
  %1380 = fmul double %1377, %1301
  %1381 = fmul double %1380, %1301
  %1382 = fadd double %fullElectVirial_xx.3, %1381
  %1383 = fmul double %1380, %1306
  %1384 = fadd double %fullElectVirial_xy.3, %1383
  %1385 = fmul double %1380, %1312
  %1386 = fadd double %fullElectVirial_xz.3, %1385
  %1387 = getelementptr inbounds %class.Vector* %304, i32 0, i32 0
  %1388 = load double* %1387, align 8
  %1389 = fadd double %1388, %1380
  store double %1389, double* %1387, align 8
  %1390 = getelementptr inbounds %class.Vector* %1379, i32 0, i32 0
  %1391 = load double* %1390, align 8
  %1392 = fsub double %1391, %1380
  store double %1392, double* %1390, align 8
  %1393 = fmul double %1377, %1306
  %1394 = fmul double %1393, %1306
  %1395 = fadd double %fullElectVirial_yy.3, %1394
  %1396 = fmul double %1393, %1312
  %1397 = fadd double %fullElectVirial_yz.3, %1396
  %1398 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %1399 = load double* %1398, align 8
  %1400 = fadd double %1399, %1393
  store double %1400, double* %1398, align 8
  %1401 = getelementptr inbounds %class.Vector* %1379, i32 0, i32 1
  %1402 = load double* %1401, align 8
  %1403 = fsub double %1402, %1393
  store double %1403, double* %1401, align 8
  %1404 = fmul double %1377, %1312
  %1405 = fmul double %1404, %1312
  %1406 = fadd double %fullElectVirial_zz.3, %1405
  %1407 = getelementptr inbounds %class.Vector* %304, i32 0, i32 2
  %1408 = load double* %1407, align 8
  %1409 = fadd double %1408, %1404
  store double %1409, double* %1407, align 8
  %1410 = getelementptr inbounds %class.Vector* %1379, i32 0, i32 2
  %1411 = load double* %1410, align 8
  %1412 = fsub double %1411, %1404
  store double %1412, double* %1410, align 8
  br label %1413

; <label>:1413                                    ; preds = %1292
  %1414 = add nsw i32 %k17.4, 1
  br label %1290

; <label>:1415                                    ; preds = %1290
  br label %1416

; <label>:1416                                    ; preds = %1415, %338
  %g_lower.4 = phi i32 [ %g_lower.0, %338 ], [ %g_lower.3, %1415 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %338 ], [ %j_hgroup.2, %1415 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %338 ], [ %fixg_lower.3, %1415 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %338 ], [ %pairlistindex.2, %1415 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %338 ], [ %pairlistoffset.1, %1415 ]
  %pairCount.3 = phi i32 [ %334, %338 ], [ %pairCount.2, %1415 ]
  %i.1 = phi i32 [ %340, %338 ], [ %i.0, %1415 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %338 ], [ %fullElectVirial_zz.3, %1415 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %338 ], [ %fullElectVirial_yz.3, %1415 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %338 ], [ %fullElectVirial_yy.3, %1415 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %338 ], [ %fullElectVirial_xz.3, %1415 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %338 ], [ %fullElectVirial_xy.3, %1415 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %338 ], [ %fullElectVirial_xx.3, %1415 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %338 ], [ %fullElectEnergy.3, %1415 ]
  %virial_zz.3 = phi double [ %virial_zz.0, %338 ], [ %virial_zz.2, %1415 ]
  %virial_yz.3 = phi double [ %virial_yz.0, %338 ], [ %virial_yz.2, %1415 ]
  %virial_yy.3 = phi double [ %virial_yy.0, %338 ], [ %virial_yy.2, %1415 ]
  %virial_xz.3 = phi double [ %virial_xz.0, %338 ], [ %virial_xz.2, %1415 ]
  %virial_xy.3 = phi double [ %virial_xy.0, %338 ], [ %virial_xy.2, %1415 ]
  %virial_xx.3 = phi double [ %virial_xx.0, %338 ], [ %virial_xx.2, %1415 ]
  %electEnergy.3 = phi double [ %electEnergy.0, %338 ], [ %electEnergy.2, %1415 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %338 ], [ %vdwEnergy.2, %1415 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %338 ], [ %780, %1415 ]
  %1417 = add nsw i32 %i.1, 1
  br label %273

; <label>:1418                                    ; preds = %273
  %1419 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1420 = icmp ne i32* %51, %1419
  br i1 %1420, label %1421, label %1426

; <label>:1421                                    ; preds = %1418
  %1422 = icmp eq i32* %51, null
  br i1 %1422, label %1425, label %1423

; <label>:1423                                    ; preds = %1421
  %1424 = bitcast i32* %51 to i8*
  call void @_ZdaPv(i8* %1424) #8
  br label %1425

; <label>:1425                                    ; preds = %1423, %1421
  br label %1426

; <label>:1426                                    ; preds = %1425, %1418
  %1427 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1428 = icmp ne i32* %65, %1427
  br i1 %1428, label %1429, label %1434

; <label>:1429                                    ; preds = %1426
  %1430 = icmp eq i32* %65, null
  br i1 %1430, label %1433, label %1431

; <label>:1431                                    ; preds = %1429
  %1432 = bitcast i32* %65 to i8*
  call void @_ZdaPv(i8* %1432) #8
  br label %1433

; <label>:1433                                    ; preds = %1431, %1429
  br label %1434

; <label>:1434                                    ; preds = %1433, %1426
  %1435 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1436 = icmp ne i32* %79, %1435
  br i1 %1436, label %1437, label %1442

; <label>:1437                                    ; preds = %1434
  %1438 = icmp eq i32* %79, null
  br i1 %1438, label %1441, label %1439

; <label>:1439                                    ; preds = %1437
  %1440 = bitcast i32* %79 to i8*
  call void @_ZdaPv(i8* %1440) #8
  br label %1441

; <label>:1441                                    ; preds = %1439, %1437
  br label %1442

; <label>:1442                                    ; preds = %1441, %1434
  %1443 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1444 = icmp ne i32* %189, %1443
  br i1 %1444, label %1445, label %1450

; <label>:1445                                    ; preds = %1442
  %1446 = icmp eq i32* %189, null
  br i1 %1446, label %1449, label %1447

; <label>:1447                                    ; preds = %1445
  %1448 = bitcast i32* %189 to i8*
  call void @_ZdaPv(i8* %1448) #8
  br label %1449

; <label>:1449                                    ; preds = %1447, %1445
  br label %1450

; <label>:1450                                    ; preds = %1449, %1442
  %1451 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1452 = icmp ne i32* %203, %1451
  br i1 %1452, label %1453, label %1458

; <label>:1453                                    ; preds = %1450
  %1454 = icmp eq i32* %203, null
  br i1 %1454, label %1457, label %1455

; <label>:1455                                    ; preds = %1453
  %1456 = bitcast i32* %203 to i8*
  call void @_ZdaPv(i8* %1456) #8
  br label %1457

; <label>:1457                                    ; preds = %1455, %1453
  br label %1458

; <label>:1458                                    ; preds = %1457, %1450
  %1459 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1460 = icmp ne i32* %217, %1459
  br i1 %1460, label %1461, label %1466

; <label>:1461                                    ; preds = %1458
  %1462 = icmp eq i32* %217, null
  br i1 %1462, label %1465, label %1463

; <label>:1463                                    ; preds = %1461
  %1464 = bitcast i32* %217 to i8*
  call void @_ZdaPv(i8* %1464) #8
  br label %1465

; <label>:1465                                    ; preds = %1463, %1461
  br label %1466

; <label>:1466                                    ; preds = %1465, %1458
  %1467 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1468 = icmp ne i32* %231, %1467
  br i1 %1468, label %1469, label %1474

; <label>:1469                                    ; preds = %1466
  %1470 = icmp eq i32* %231, null
  br i1 %1470, label %1473, label %1471

; <label>:1471                                    ; preds = %1469
  %1472 = bitcast i32* %231 to i8*
  call void @_ZdaPv(i8* %1472) #8
  br label %1473

; <label>:1473                                    ; preds = %1471, %1469
  br label %1474

; <label>:1474                                    ; preds = %1473, %1466
  %1475 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1476 = icmp ne i32* %245, %1475
  br i1 %1476, label %1477, label %1482

; <label>:1477                                    ; preds = %1474
  %1478 = icmp eq i32* %245, null
  br i1 %1478, label %1481, label %1479

; <label>:1479                                    ; preds = %1477
  %1480 = bitcast i32* %245 to i8*
  call void @_ZdaPv(i8* %1480) #8
  br label %1481

; <label>:1481                                    ; preds = %1479, %1477
  br label %1482

; <label>:1482                                    ; preds = %1481, %1474
  %1483 = sitofp i32 %exclChecksum.0 to double
  %1484 = getelementptr inbounds double* %6, i64 22
  %1485 = load double* %1484, align 8
  %1486 = fadd double %1485, %1483
  store double %1486, double* %1484, align 8
  %1487 = getelementptr inbounds double* %6, i64 2
  %1488 = load double* %1487, align 8
  %1489 = fadd double %1488, %vdwEnergy.0
  store double %1489, double* %1487, align 8
  %1490 = getelementptr inbounds double* %6, i64 0
  %1491 = load double* %1490, align 8
  %1492 = fadd double %1491, %electEnergy.0
  store double %1492, double* %1490, align 8
  %1493 = getelementptr inbounds double* %6, i64 3
  %1494 = load double* %1493, align 8
  %1495 = fadd double %1494, %virial_xx.0
  store double %1495, double* %1493, align 8
  %1496 = getelementptr inbounds double* %6, i64 4
  %1497 = load double* %1496, align 8
  %1498 = fadd double %1497, %virial_xy.0
  store double %1498, double* %1496, align 8
  %1499 = getelementptr inbounds double* %6, i64 5
  %1500 = load double* %1499, align 8
  %1501 = fadd double %1500, %virial_xz.0
  store double %1501, double* %1499, align 8
  %1502 = getelementptr inbounds double* %6, i64 6
  %1503 = load double* %1502, align 8
  %1504 = fadd double %1503, %virial_xy.0
  store double %1504, double* %1502, align 8
  %1505 = getelementptr inbounds double* %6, i64 7
  %1506 = load double* %1505, align 8
  %1507 = fadd double %1506, %virial_yy.0
  store double %1507, double* %1505, align 8
  %1508 = getelementptr inbounds double* %6, i64 8
  %1509 = load double* %1508, align 8
  %1510 = fadd double %1509, %virial_yz.0
  store double %1510, double* %1508, align 8
  %1511 = getelementptr inbounds double* %6, i64 9
  %1512 = load double* %1511, align 8
  %1513 = fadd double %1512, %virial_xz.0
  store double %1513, double* %1511, align 8
  %1514 = getelementptr inbounds double* %6, i64 10
  %1515 = load double* %1514, align 8
  %1516 = fadd double %1515, %virial_yz.0
  store double %1516, double* %1514, align 8
  %1517 = getelementptr inbounds double* %6, i64 11
  %1518 = load double* %1517, align 8
  %1519 = fadd double %1518, %virial_zz.0
  store double %1519, double* %1517, align 8
  %1520 = getelementptr inbounds double* %6, i64 1
  %1521 = load double* %1520, align 8
  %1522 = fadd double %1521, %fullElectEnergy.0
  store double %1522, double* %1520, align 8
  %1523 = getelementptr inbounds double* %6, i64 12
  %1524 = load double* %1523, align 8
  %1525 = fadd double %1524, %fullElectVirial_xx.0
  store double %1525, double* %1523, align 8
  %1526 = getelementptr inbounds double* %6, i64 13
  %1527 = load double* %1526, align 8
  %1528 = fadd double %1527, %fullElectVirial_xy.0
  store double %1528, double* %1526, align 8
  %1529 = getelementptr inbounds double* %6, i64 14
  %1530 = load double* %1529, align 8
  %1531 = fadd double %1530, %fullElectVirial_xz.0
  store double %1531, double* %1529, align 8
  %1532 = getelementptr inbounds double* %6, i64 15
  %1533 = load double* %1532, align 8
  %1534 = fadd double %1533, %fullElectVirial_xy.0
  store double %1534, double* %1532, align 8
  %1535 = getelementptr inbounds double* %6, i64 16
  %1536 = load double* %1535, align 8
  %1537 = fadd double %1536, %fullElectVirial_yy.0
  store double %1537, double* %1535, align 8
  %1538 = getelementptr inbounds double* %6, i64 17
  %1539 = load double* %1538, align 8
  %1540 = fadd double %1539, %fullElectVirial_yz.0
  store double %1540, double* %1538, align 8
  %1541 = getelementptr inbounds double* %6, i64 18
  %1542 = load double* %1541, align 8
  %1543 = fadd double %1542, %fullElectVirial_xz.0
  store double %1543, double* %1541, align 8
  %1544 = getelementptr inbounds double* %6, i64 19
  %1545 = load double* %1544, align 8
  %1546 = fadd double %1545, %fullElectVirial_yz.0
  store double %1546, double* %1544, align 8
  %1547 = getelementptr inbounds double* %6, i64 20
  %1548 = load double* %1547, align 8
  %1549 = fadd double %1548, %fullElectVirial_zz.0
  store double %1549, double* %1547, align 8
  br label %1550

; <label>:1550                                    ; preds = %1482, %164, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil25calc_pair_merge_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.9, align 4
  %r2f29 = alloca %union.anon.10, align 4
  %r2f61 = alloca %union.anon.11, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1278

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1278

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1180, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1180 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1180 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1180 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1181, %1180 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_zz.4, %1180 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yz.4, %1180 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yy.4, %1180 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xz.4, %1180 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xy.4, %1180 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xx.4, %1180 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1180 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1182

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1180

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1180

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %506 = load float* %505, align 4
  %507 = fpext float %506 to double
  %508 = fmul double 3.320636e+02, %507
  %509 = fmul double %508, %15
  %510 = fmul double %509, %9
  %511 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %512 = load i32* %511, align 4
  %513 = and i32 %512, 4194303
  %514 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %513)
  %515 = zext i16 %514 to i32
  %516 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %515)
  %517 = icmp ne i32 %504, 0
  br i1 %517, label %518, label %580

; <label>:518                                     ; preds = %502
  br label %519

; <label>:519                                     ; preds = %577, %518
  %pli4.0 = phi i32* [ %221, %518 ], [ %pli4.2, %577 ]
  %plin.0 = phi i32* [ %235, %518 ], [ %plin.2, %577 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %518 ], [ %578, %577 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %518 ], [ %exclChecksum.3, %577 ]
  %520 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %520, label %521, label %579

; <label>:521                                     ; preds = %519
  %522 = sext i32 %k.0 to i64
  %523 = getelementptr inbounds i32* %207, i64 %522
  %524 = load i32* %523, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds %struct.CompAtom* %36, i64 %525
  %527 = getelementptr inbounds %struct.CompAtom* %526, i32 0, i32 0
  %528 = getelementptr inbounds %class.Vector* %527, i32 0, i32 0
  %529 = load double* %528, align 8
  %530 = fsub double %303, %529
  %531 = fmul double %530, %530
  %532 = sext i32 %524 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %36, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 1
  %536 = load double* %535, align 8
  %537 = fsub double %306, %536
  %538 = fmul double %537, %537
  %539 = fadd double %531, %538
  %540 = sext i32 %524 to i64
  %541 = getelementptr inbounds %struct.CompAtom* %36, i64 %540
  %542 = getelementptr inbounds %struct.CompAtom* %541, i32 0, i32 0
  %543 = getelementptr inbounds %class.Vector* %542, i32 0, i32 2
  %544 = load double* %543, align 8
  %545 = fsub double %309, %544
  %546 = fmul double %545, %545
  %547 = fadd double %539, %546
  %548 = sext i32 %524 to i64
  %549 = getelementptr inbounds %struct.CompAtom* %36, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %549, i32 0, i32 2
  %551 = load i32* %550, align 4
  %552 = lshr i32 %551, 26
  %553 = and i32 %552, 1
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %576, label %555

; <label>:555                                     ; preds = %521
  %556 = fcmp ole double %547, %7
  br i1 %556, label %557, label %576

; <label>:557                                     ; preds = %555
  %558 = fcmp ole double %547, %21
  br i1 %558, label %559, label %562

; <label>:559                                     ; preds = %557
  %560 = add nsw i32 %exclChecksum.1, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %576, label %562

; <label>:562                                     ; preds = %559, %557
  %exclChecksum.2 = phi i32 [ %560, %559 ], [ %exclChecksum.1, %557 ]
  %563 = sext i32 %524 to i64
  %564 = getelementptr inbounds %struct.CompAtom* %36, i64 %563
  %565 = getelementptr inbounds %struct.CompAtom* %564, i32 0, i32 2
  %566 = load i32* %565, align 4
  %567 = and i32 %566, 4194303
  %568 = icmp sge i32 %567, %293
  br i1 %568, label %569, label %573

; <label>:569                                     ; preds = %562
  %570 = icmp sle i32 %567, %295
  br i1 %570, label %571, label %573

; <label>:571                                     ; preds = %569
  %572 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %524, i32* %pli4.0, align 4
  br label %575

; <label>:573                                     ; preds = %569, %562
  %574 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %524, i32* %plin.0, align 4
  br label %575

; <label>:575                                     ; preds = %573, %571
  %pli4.1 = phi i32* [ %572, %571 ], [ %pli4.0, %573 ]
  %plin.1 = phi i32* [ %plin.0, %571 ], [ %574, %573 ]
  br label %576

; <label>:576                                     ; preds = %575, %559, %555, %521
  %pli4.2 = phi i32* [ %pli4.0, %521 ], [ %pli4.0, %559 ], [ %pli4.1, %575 ], [ %pli4.0, %555 ]
  %plin.2 = phi i32* [ %plin.0, %521 ], [ %plin.0, %559 ], [ %plin.1, %575 ], [ %plin.0, %555 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %521 ], [ %560, %559 ], [ %exclChecksum.2, %575 ], [ %exclChecksum.1, %555 ]
  br label %577

; <label>:577                                     ; preds = %576
  %578 = add nsw i32 %k.0, 1
  br label %519

; <label>:579                                     ; preds = %519
  br label %659

; <label>:580                                     ; preds = %502
  %581 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %581, label %582, label %658

; <label>:582                                     ; preds = %580
  %583 = sext i32 %pairlistoffset.1 to i64
  %584 = getelementptr inbounds i32* %207, i64 %583
  %585 = load i32* %584, align 4
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtom* %36, i64 %586
  %588 = getelementptr inbounds %struct.CompAtom* %587, i32 0, i32 0
  %589 = getelementptr inbounds %class.Vector* %588, i32 0, i32 0
  %590 = load double* %589, align 8
  %591 = sext i32 %585 to i64
  %592 = getelementptr inbounds %struct.CompAtom* %36, i64 %591
  %593 = getelementptr inbounds %struct.CompAtom* %592, i32 0, i32 0
  %594 = getelementptr inbounds %class.Vector* %593, i32 0, i32 1
  %595 = load double* %594, align 8
  %596 = sext i32 %585 to i64
  %597 = getelementptr inbounds %struct.CompAtom* %36, i64 %596
  %598 = getelementptr inbounds %struct.CompAtom* %597, i32 0, i32 0
  %599 = getelementptr inbounds %class.Vector* %598, i32 0, i32 2
  %600 = load double* %599, align 8
  %601 = sext i32 %585 to i64
  %602 = getelementptr inbounds %struct.CompAtom* %36, i64 %601
  %603 = getelementptr inbounds %struct.CompAtom* %602, i32 0, i32 2
  %604 = load i32* %603, align 4
  %605 = and i32 %604, 4194303
  br label %606

; <label>:606                                     ; preds = %651, %582
  %pli4.3 = phi i32* [ %221, %582 ], [ %pli4.5, %651 ]
  %plin.3 = phi i32* [ %235, %582 ], [ %plin.5, %651 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %582 ], [ %609, %651 ]
  %j211.0 = phi i32 [ %585, %582 ], [ %612, %651 ]
  %p_j_x12.0 = phi double [ %590, %582 ], [ %619, %651 ]
  %p_j_y13.0 = phi double [ %595, %582 ], [ %627, %651 ]
  %p_j_z14.0 = phi double [ %600, %582 ], [ %635, %651 ]
  %atom215.0 = phi i32 [ %605, %582 ], [ %656, %651 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %582 ], [ %exclChecksum.6, %651 ]
  %607 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %607, label %608, label %657

; <label>:608                                     ; preds = %606
  %609 = add nsw i32 %k10.0, 1
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i32* %207, i64 %610
  %612 = load i32* %611, align 4
  %613 = fsub double %303, %p_j_x12.0
  %614 = fmul double %613, %613
  %615 = sext i32 %612 to i64
  %616 = getelementptr inbounds %struct.CompAtom* %36, i64 %615
  %617 = getelementptr inbounds %struct.CompAtom* %616, i32 0, i32 0
  %618 = getelementptr inbounds %class.Vector* %617, i32 0, i32 0
  %619 = load double* %618, align 8
  %620 = fsub double %306, %p_j_y13.0
  %621 = fmul double %620, %620
  %622 = fadd double %614, %621
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 1
  %627 = load double* %626, align 8
  %628 = fsub double %309, %p_j_z14.0
  %629 = fmul double %628, %628
  %630 = fadd double %622, %629
  %631 = sext i32 %612 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %36, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 2
  %635 = load double* %634, align 8
  %636 = fcmp ole double %630, %7
  br i1 %636, label %637, label %651

; <label>:637                                     ; preds = %608
  %638 = fcmp ole double %630, %21
  br i1 %638, label %639, label %642

; <label>:639                                     ; preds = %637
  %640 = add nsw i32 %exclChecksum.4, 1
  %641 = icmp ne i32 %640, 0
  br i1 %641, label %651, label %642

; <label>:642                                     ; preds = %639, %637
  %exclChecksum.5 = phi i32 [ %640, %639 ], [ %exclChecksum.4, %637 ]
  %643 = icmp sge i32 %atom215.0, %293
  br i1 %643, label %644, label %648

; <label>:644                                     ; preds = %642
  %645 = icmp sle i32 %atom215.0, %295
  br i1 %645, label %646, label %648

; <label>:646                                     ; preds = %644
  %647 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %650

; <label>:648                                     ; preds = %644, %642
  %649 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %650

; <label>:650                                     ; preds = %648, %646
  %pli4.4 = phi i32* [ %647, %646 ], [ %pli4.3, %648 ]
  %plin.4 = phi i32* [ %plin.3, %646 ], [ %649, %648 ]
  br label %651

; <label>:651                                     ; preds = %650, %639, %608
  %pli4.5 = phi i32* [ %pli4.3, %639 ], [ %pli4.4, %650 ], [ %pli4.3, %608 ]
  %plin.5 = phi i32* [ %plin.3, %639 ], [ %plin.4, %650 ], [ %plin.3, %608 ]
  %exclChecksum.6 = phi i32 [ %640, %639 ], [ %exclChecksum.5, %650 ], [ %exclChecksum.4, %608 ]
  %652 = sext i32 %612 to i64
  %653 = getelementptr inbounds %struct.CompAtom* %36, i64 %652
  %654 = getelementptr inbounds %struct.CompAtom* %653, i32 0, i32 2
  %655 = load i32* %654, align 4
  %656 = and i32 %655, 4194303
  br label %606

; <label>:657                                     ; preds = %606
  br label %658

; <label>:658                                     ; preds = %657, %580
  %pli4.6 = phi i32* [ %pli4.3, %657 ], [ %221, %580 ]
  %plin.6 = phi i32* [ %plin.3, %657 ], [ %235, %580 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %657 ], [ %exclChecksum.0, %580 ]
  br label %659

; <label>:659                                     ; preds = %658, %579
  %pli4.7 = phi i32* [ %pli4.0, %579 ], [ %pli4.6, %658 ]
  %plin.7 = phi i32* [ %plin.0, %579 ], [ %plin.6, %658 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %579 ], [ %exclChecksum.7, %658 ]
  %660 = ptrtoint i32* %pli4.7 to i64
  %661 = ptrtoint i32* %221 to i64
  %662 = sub i64 %660, %661
  %663 = sdiv exact i64 %662, 4
  %664 = trunc i64 %663 to i32
  %665 = icmp ne i32 %664, 0
  br i1 %665, label %666, label %673

; <label>:666                                     ; preds = %659
  %667 = sub nsw i32 %664, 1
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i32* %221, i64 %668
  %670 = load i32* %669, align 4
  %671 = sext i32 %664 to i64
  %672 = getelementptr inbounds i32* %221, i64 %671
  store i32 %670, i32* %672, align 4
  br label %673

; <label>:673                                     ; preds = %666, %659
  br label %674

; <label>:674                                     ; preds = %696, %673
  %plin.8 = phi i32* [ %plin.7, %673 ], [ %plin.9, %696 ]
  %plix.0 = phi i32* [ %249, %673 ], [ %plix.1, %696 ]
  %plim.0 = phi i32* [ %263, %673 ], [ %plim.1, %696 ]
  %k18.0 = phi i32 [ 0, %673 ], [ %697, %696 ]
  %675 = icmp slt i32 %k18.0, %664
  br i1 %675, label %676, label %698

; <label>:676                                     ; preds = %674
  %677 = sext i32 %k18.0 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds %struct.CompAtom* %36, i64 %680
  %682 = getelementptr inbounds %struct.CompAtom* %681, i32 0, i32 2
  %683 = load i32* %682, align 4
  %684 = and i32 %683, 4194303
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i8* %300, i64 %685
  %687 = load i8* %686, align 1
  %688 = sext i8 %687 to i32
  switch i32 %688, label %695 [
    i32 0, label %689
    i32 1, label %691
    i32 2, label %693
  ]

; <label>:689                                     ; preds = %676
  %690 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %679, i32* %plin.8, align 4
  br label %695

; <label>:691                                     ; preds = %676
  %692 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %679, i32* %plix.0, align 4
  br label %695

; <label>:693                                     ; preds = %676
  %694 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %679, i32* %plim.0, align 4
  br label %695

; <label>:695                                     ; preds = %693, %691, %689, %676
  %plin.9 = phi i32* [ %plin.8, %676 ], [ %plin.8, %693 ], [ %plin.8, %691 ], [ %690, %689 ]
  %plix.1 = phi i32* [ %plix.0, %676 ], [ %plix.0, %693 ], [ %692, %691 ], [ %plix.0, %689 ]
  %plim.1 = phi i32* [ %plim.0, %676 ], [ %694, %693 ], [ %plim.0, %691 ], [ %plim.0, %689 ]
  br label %696

; <label>:696                                     ; preds = %695
  %697 = add nsw i32 %k18.0, 1
  br label %674

; <label>:698                                     ; preds = %674
  %699 = ptrtoint i32* %plix.0 to i64
  %700 = ptrtoint i32* %249 to i64
  %701 = sub i64 %699, %700
  %702 = sdiv exact i64 %701, 4
  %703 = sext i32 %exclChecksum.8 to i64
  %704 = add nsw i64 %703, %702
  %705 = trunc i64 %704 to i32
  %706 = ptrtoint i32* %plim.0 to i64
  %707 = ptrtoint i32* %263 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %705 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plin.8 to i64
  %714 = ptrtoint i32* %235 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = trunc i64 %716 to i32
  br label %718

; <label>:718                                     ; preds = %871, %698
  %k18.1 = phi i32 [ 0, %698 ], [ %872, %871 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %698 ], [ %864, %871 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %698 ], [ %855, %871 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %698 ], [ %853, %871 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %698 ], [ %844, %871 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %698 ], [ %842, %871 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %698 ], [ %840, %871 ]
  %719 = icmp slt i32 %k18.1, %717
  br i1 %719, label %720, label %873

; <label>:720                                     ; preds = %718
  %721 = sext i32 %k18.1 to i64
  %722 = getelementptr inbounds i32* %235, i64 %721
  %723 = load i32* %722, align 4
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds %struct.CompAtom* %36, i64 %724
  %726 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %727 = getelementptr inbounds %class.Vector* %726, i32 0, i32 0
  %728 = load double* %727, align 8
  %729 = fsub double %303, %728
  %730 = fmul double %729, %729
  %731 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %732 = getelementptr inbounds %class.Vector* %731, i32 0, i32 1
  %733 = load double* %732, align 8
  %734 = fsub double %306, %733
  %735 = fmul double %734, %734
  %736 = fadd double %730, %735
  %737 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %738 = getelementptr inbounds %class.Vector* %737, i32 0, i32 2
  %739 = load double* %738, align 8
  %740 = fsub double %309, %739
  %741 = fmul double %740, %740
  %742 = fadd double %736, %741
  %743 = fptrunc double %742 to float
  %744 = bitcast %union.anon.9* %r2f to float*
  store float %743, float* %744, align 4
  %745 = bitcast %union.anon.9* %r2f to i32*
  %746 = load i32* %745, align 4
  %747 = ashr i32 %746, 17
  %748 = add nsw i32 %747, %24
  %749 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 2
  %750 = load i32* %749, align 4
  %751 = and i32 %750, 4194303
  %752 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %751)
  %753 = zext i16 %752 to i32
  %754 = mul nsw i32 2, %753
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %755
  %757 = mul nsw i32 16, %748
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds double* %14, i64 %758
  %760 = getelementptr inbounds double* %759, i64 0
  %761 = load double* %760, align 8
  %762 = mul nsw i32 16, %748
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds double* %14, i64 %763
  %765 = getelementptr inbounds double* %764, i64 4
  %766 = getelementptr inbounds double* %765, i64 0
  %767 = load double* %766, align 8
  %768 = mul nsw i32 16, %748
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds double* %14, i64 %769
  %771 = getelementptr inbounds double* %770, i64 8
  %772 = getelementptr inbounds double* %771, i64 0
  %773 = load double* %772, align 8
  %774 = bitcast %union.anon.9* %r2f to i32*
  %775 = load i32* %774, align 4
  %776 = and i32 %775, -131072
  store i32 %776, i32* %774, align 4
  %777 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 1
  %778 = load float* %777, align 4
  %779 = fpext float %778 to double
  %780 = fmul double %510, %779
  %781 = bitcast %union.anon.9* %r2f to float*
  %782 = load float* %781, align 4
  %783 = fpext float %782 to double
  %784 = fsub double %742, %783
  %785 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 0
  %786 = load double* %785, align 8
  %787 = fmul double %15, %786
  %788 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 1
  %789 = load double* %788, align 8
  %790 = fmul double %15, %789
  %791 = fmul double %787, %761
  %792 = fmul double %790, %767
  %793 = fsub double %791, %792
  %794 = getelementptr inbounds double* %759, i64 3
  %795 = load double* %794, align 8
  %796 = fmul double %787, %795
  %797 = getelementptr inbounds double* %765, i64 3
  %798 = load double* %797, align 8
  %799 = fmul double %790, %798
  %800 = fsub double %796, %799
  %801 = getelementptr inbounds double* %759, i64 2
  %802 = load double* %801, align 8
  %803 = fmul double %787, %802
  %804 = getelementptr inbounds double* %765, i64 2
  %805 = load double* %804, align 8
  %806 = fmul double %790, %805
  %807 = fsub double %803, %806
  %808 = getelementptr inbounds double* %759, i64 1
  %809 = load double* %808, align 8
  %810 = fmul double %787, %809
  %811 = getelementptr inbounds double* %765, i64 1
  %812 = load double* %811, align 8
  %813 = fmul double %790, %812
  %814 = fsub double %810, %813
  %815 = getelementptr inbounds double* %771, i64 1
  %816 = load double* %815, align 8
  %817 = getelementptr inbounds double* %771, i64 2
  %818 = load double* %817, align 8
  %819 = getelementptr inbounds double* %771, i64 3
  %820 = load double* %819, align 8
  %821 = fmul double %820, %780
  %822 = fmul double %818, %780
  %823 = fmul double %816, %780
  %824 = fmul double %773, %780
  %825 = fadd double %821, %800
  %826 = fadd double %822, %807
  %827 = fadd double %823, %814
  %828 = fadd double %824, %793
  %829 = fmul double 3.000000e+00, %784
  %830 = fmul double %829, %825
  %831 = fmul double 2.000000e+00, %826
  %832 = fadd double %830, %831
  %833 = fmul double %832, %784
  %834 = fadd double %833, %827
  %835 = fmul double -2.000000e+00, %834
  %836 = sext i32 %723 to i64
  %837 = getelementptr inbounds %class.Vector* %269, i64 %836
  %838 = fmul double %835, %729
  %839 = fmul double %838, %729
  %840 = fadd double %fullElectVirial_xx.1, %839
  %841 = fmul double %838, %734
  %842 = fadd double %fullElectVirial_xy.1, %841
  %843 = fmul double %838, %740
  %844 = fadd double %fullElectVirial_xz.1, %843
  %845 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %846 = load double* %845, align 8
  %847 = fadd double %846, %838
  store double %847, double* %845, align 8
  %848 = getelementptr inbounds %class.Vector* %837, i32 0, i32 0
  %849 = load double* %848, align 8
  %850 = fsub double %849, %838
  store double %850, double* %848, align 8
  %851 = fmul double %835, %734
  %852 = fmul double %851, %734
  %853 = fadd double %fullElectVirial_yy.1, %852
  %854 = fmul double %851, %740
  %855 = fadd double %fullElectVirial_yz.1, %854
  %856 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %857 = load double* %856, align 8
  %858 = fadd double %857, %851
  store double %858, double* %856, align 8
  %859 = getelementptr inbounds %class.Vector* %837, i32 0, i32 1
  %860 = load double* %859, align 8
  %861 = fsub double %860, %851
  store double %861, double* %859, align 8
  %862 = fmul double %835, %740
  %863 = fmul double %862, %740
  %864 = fadd double %fullElectVirial_zz.1, %863
  %865 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %866 = load double* %865, align 8
  %867 = fadd double %866, %862
  store double %867, double* %865, align 8
  %868 = getelementptr inbounds %class.Vector* %837, i32 0, i32 2
  %869 = load double* %868, align 8
  %870 = fsub double %869, %862
  store double %870, double* %868, align 8
  br label %871

; <label>:871                                     ; preds = %720
  %872 = add nsw i32 %k18.1, 1
  br label %718

; <label>:873                                     ; preds = %718
  %874 = ptrtoint i32* %plim.0 to i64
  %875 = ptrtoint i32* %263 to i64
  %876 = sub i64 %874, %875
  %877 = sdiv exact i64 %876, 4
  %878 = trunc i64 %877 to i32
  br label %879

; <label>:879                                     ; preds = %1053, %873
  %k18.2 = phi i32 [ 0, %873 ], [ %1054, %1053 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %873 ], [ %1046, %1053 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %873 ], [ %1037, %1053 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %873 ], [ %1035, %1053 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %873 ], [ %1026, %1053 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %873 ], [ %1024, %1053 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %873 ], [ %1022, %1053 ]
  %880 = icmp slt i32 %k18.2, %878
  br i1 %880, label %881, label %1055

; <label>:881                                     ; preds = %879
  %882 = sext i32 %k18.2 to i64
  %883 = getelementptr inbounds i32* %263, i64 %882
  %884 = load i32* %883, align 4
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds %struct.CompAtom* %36, i64 %885
  %887 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 0
  %888 = getelementptr inbounds %class.Vector* %887, i32 0, i32 0
  %889 = load double* %888, align 8
  %890 = fsub double %303, %889
  %891 = fmul double %890, %890
  %892 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 0
  %893 = getelementptr inbounds %class.Vector* %892, i32 0, i32 1
  %894 = load double* %893, align 8
  %895 = fsub double %306, %894
  %896 = fmul double %895, %895
  %897 = fadd double %891, %896
  %898 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 0
  %899 = getelementptr inbounds %class.Vector* %898, i32 0, i32 2
  %900 = load double* %899, align 8
  %901 = fsub double %309, %900
  %902 = fmul double %901, %901
  %903 = fadd double %897, %902
  %904 = fptrunc double %903 to float
  %905 = bitcast %union.anon.10* %r2f29 to float*
  store float %904, float* %905, align 4
  %906 = bitcast %union.anon.10* %r2f29 to i32*
  %907 = load i32* %906, align 4
  %908 = ashr i32 %907, 17
  %909 = add nsw i32 %908, %24
  %910 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 2
  %911 = load i32* %910, align 4
  %912 = and i32 %911, 4194303
  %913 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %912)
  %914 = zext i16 %913 to i32
  %915 = mul nsw i32 2, %914
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %916
  %918 = getelementptr inbounds %"struct.LJTable::TableEntry"* %917, i64 1
  %919 = mul nsw i32 16, %909
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds double* %14, i64 %920
  %922 = getelementptr inbounds double* %921, i64 0
  %923 = load double* %922, align 8
  %924 = mul nsw i32 16, %909
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds double* %14, i64 %925
  %927 = getelementptr inbounds double* %926, i64 4
  %928 = getelementptr inbounds double* %927, i64 0
  %929 = load double* %928, align 8
  %930 = mul nsw i32 16, %909
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds double* %14, i64 %931
  %933 = getelementptr inbounds double* %932, i64 8
  %934 = getelementptr inbounds double* %933, i64 0
  %935 = load double* %934, align 8
  %936 = bitcast %union.anon.10* %r2f29 to i32*
  %937 = load i32* %936, align 4
  %938 = and i32 %937, -131072
  store i32 %938, i32* %936, align 4
  %939 = getelementptr inbounds %struct.CompAtom* %886, i32 0, i32 1
  %940 = load float* %939, align 4
  %941 = fpext float %940 to double
  %942 = fmul double %510, %941
  %943 = bitcast %union.anon.10* %r2f29 to float*
  %944 = load float* %943, align 4
  %945 = fpext float %944 to double
  %946 = fsub double %903, %945
  %947 = getelementptr inbounds %"struct.LJTable::TableEntry"* %918, i32 0, i32 0
  %948 = load double* %947, align 8
  %949 = fmul double %15, %948
  %950 = getelementptr inbounds %"struct.LJTable::TableEntry"* %918, i32 0, i32 1
  %951 = load double* %950, align 8
  %952 = fmul double %15, %951
  %953 = fmul double %949, %923
  %954 = fmul double %952, %929
  %955 = fsub double %953, %954
  %956 = getelementptr inbounds double* %921, i64 3
  %957 = load double* %956, align 8
  %958 = fmul double %949, %957
  %959 = getelementptr inbounds double* %927, i64 3
  %960 = load double* %959, align 8
  %961 = fmul double %952, %960
  %962 = fsub double %958, %961
  %963 = getelementptr inbounds double* %921, i64 2
  %964 = load double* %963, align 8
  %965 = fmul double %949, %964
  %966 = getelementptr inbounds double* %927, i64 2
  %967 = load double* %966, align 8
  %968 = fmul double %952, %967
  %969 = fsub double %965, %968
  %970 = getelementptr inbounds double* %921, i64 1
  %971 = load double* %970, align 8
  %972 = fmul double %949, %971
  %973 = getelementptr inbounds double* %927, i64 1
  %974 = load double* %973, align 8
  %975 = fmul double %952, %974
  %976 = fsub double %972, %975
  %977 = getelementptr inbounds double* %933, i64 1
  %978 = load double* %977, align 8
  %979 = getelementptr inbounds double* %933, i64 2
  %980 = load double* %979, align 8
  %981 = getelementptr inbounds double* %933, i64 3
  %982 = load double* %981, align 8
  %983 = getelementptr inbounds double* %14, i64 12
  %984 = mul nsw i32 16, %909
  %985 = sext i32 %984 to i64
  %986 = getelementptr inbounds double* %983, i64 %985
  %987 = getelementptr inbounds double* %986, i64 0
  %988 = load double* %987, align 8
  %989 = fmul double %17, %988
  %990 = fsub double %935, %989
  %991 = getelementptr inbounds double* %986, i64 1
  %992 = load double* %991, align 8
  %993 = fmul double %17, %992
  %994 = fsub double %978, %993
  %995 = getelementptr inbounds double* %986, i64 2
  %996 = load double* %995, align 8
  %997 = fmul double %17, %996
  %998 = fsub double %980, %997
  %999 = getelementptr inbounds double* %986, i64 3
  %1000 = load double* %999, align 8
  %1001 = fmul double %17, %1000
  %1002 = fsub double %982, %1001
  %1003 = fmul double %1002, %942
  %1004 = fmul double %998, %942
  %1005 = fmul double %994, %942
  %1006 = fmul double %990, %942
  %1007 = fadd double %1003, %962
  %1008 = fadd double %1004, %969
  %1009 = fadd double %1005, %976
  %1010 = fadd double %1006, %955
  %1011 = fmul double 3.000000e+00, %946
  %1012 = fmul double %1011, %1007
  %1013 = fmul double 2.000000e+00, %1008
  %1014 = fadd double %1012, %1013
  %1015 = fmul double %1014, %946
  %1016 = fadd double %1015, %1009
  %1017 = fmul double -2.000000e+00, %1016
  %1018 = sext i32 %884 to i64
  %1019 = getelementptr inbounds %class.Vector* %269, i64 %1018
  %1020 = fmul double %1017, %890
  %1021 = fmul double %1020, %890
  %1022 = fadd double %fullElectVirial_xx.2, %1021
  %1023 = fmul double %1020, %895
  %1024 = fadd double %fullElectVirial_xy.2, %1023
  %1025 = fmul double %1020, %901
  %1026 = fadd double %fullElectVirial_xz.2, %1025
  %1027 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1028 = load double* %1027, align 8
  %1029 = fadd double %1028, %1020
  store double %1029, double* %1027, align 8
  %1030 = getelementptr inbounds %class.Vector* %1019, i32 0, i32 0
  %1031 = load double* %1030, align 8
  %1032 = fsub double %1031, %1020
  store double %1032, double* %1030, align 8
  %1033 = fmul double %1017, %895
  %1034 = fmul double %1033, %895
  %1035 = fadd double %fullElectVirial_yy.2, %1034
  %1036 = fmul double %1033, %901
  %1037 = fadd double %fullElectVirial_yz.2, %1036
  %1038 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1039 = load double* %1038, align 8
  %1040 = fadd double %1039, %1033
  store double %1040, double* %1038, align 8
  %1041 = getelementptr inbounds %class.Vector* %1019, i32 0, i32 1
  %1042 = load double* %1041, align 8
  %1043 = fsub double %1042, %1033
  store double %1043, double* %1041, align 8
  %1044 = fmul double %1017, %901
  %1045 = fmul double %1044, %901
  %1046 = fadd double %fullElectVirial_zz.2, %1045
  %1047 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1048 = load double* %1047, align 8
  %1049 = fadd double %1048, %1044
  store double %1049, double* %1047, align 8
  %1050 = getelementptr inbounds %class.Vector* %1019, i32 0, i32 2
  %1051 = load double* %1050, align 8
  %1052 = fsub double %1051, %1044
  store double %1052, double* %1050, align 8
  br label %1053

; <label>:1053                                    ; preds = %881
  %1054 = add nsw i32 %k18.2, 1
  br label %879

; <label>:1055                                    ; preds = %879
  %1056 = ptrtoint i32* %plix.0 to i64
  %1057 = ptrtoint i32* %249 to i64
  %1058 = sub i64 %1056, %1057
  %1059 = sdiv exact i64 %1058, 4
  %1060 = trunc i64 %1059 to i32
  br label %1061

; <label>:1061                                    ; preds = %1177, %1055
  %k18.3 = phi i32 [ 0, %1055 ], [ %1178, %1177 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1055 ], [ %1170, %1177 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1055 ], [ %1161, %1177 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1055 ], [ %1159, %1177 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1055 ], [ %1150, %1177 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1055 ], [ %1148, %1177 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1055 ], [ %1146, %1177 ]
  %1062 = icmp slt i32 %k18.3, %1060
  br i1 %1062, label %1063, label %1179

; <label>:1063                                    ; preds = %1061
  %1064 = sext i32 %k18.3 to i64
  %1065 = getelementptr inbounds i32* %249, i64 %1064
  %1066 = load i32* %1065, align 4
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds %struct.CompAtom* %36, i64 %1067
  %1069 = getelementptr inbounds %struct.CompAtom* %1068, i32 0, i32 0
  %1070 = getelementptr inbounds %class.Vector* %1069, i32 0, i32 0
  %1071 = load double* %1070, align 8
  %1072 = fsub double %303, %1071
  %1073 = fmul double %1072, %1072
  %1074 = getelementptr inbounds %struct.CompAtom* %1068, i32 0, i32 0
  %1075 = getelementptr inbounds %class.Vector* %1074, i32 0, i32 1
  %1076 = load double* %1075, align 8
  %1077 = fsub double %306, %1076
  %1078 = fmul double %1077, %1077
  %1079 = fadd double %1073, %1078
  %1080 = getelementptr inbounds %struct.CompAtom* %1068, i32 0, i32 0
  %1081 = getelementptr inbounds %class.Vector* %1080, i32 0, i32 2
  %1082 = load double* %1081, align 8
  %1083 = fsub double %309, %1082
  %1084 = fmul double %1083, %1083
  %1085 = fadd double %1079, %1084
  %1086 = fptrunc double %1085 to float
  %1087 = bitcast %union.anon.11* %r2f61 to float*
  store float %1086, float* %1087, align 4
  %1088 = bitcast %union.anon.11* %r2f61 to i32*
  %1089 = load i32* %1088, align 4
  %1090 = ashr i32 %1089, 17
  %1091 = add nsw i32 %1090, %24
  %1092 = mul nsw i32 16, %1091
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds double* %14, i64 %1093
  %1095 = getelementptr inbounds double* %1094, i64 8
  %1096 = getelementptr inbounds double* %1095, i64 0
  %1097 = load double* %1096, align 8
  %1098 = bitcast %union.anon.11* %r2f61 to i32*
  %1099 = load i32* %1098, align 4
  %1100 = and i32 %1099, -131072
  store i32 %1100, i32* %1098, align 4
  %1101 = getelementptr inbounds %struct.CompAtom* %1068, i32 0, i32 1
  %1102 = load float* %1101, align 4
  %1103 = fpext float %1102 to double
  %1104 = fmul double %510, %1103
  %1105 = bitcast %union.anon.11* %r2f61 to float*
  %1106 = load float* %1105, align 4
  %1107 = fpext float %1106 to double
  %1108 = fsub double %1085, %1107
  %1109 = getelementptr inbounds double* %1095, i64 1
  %1110 = load double* %1109, align 8
  %1111 = getelementptr inbounds double* %1095, i64 2
  %1112 = load double* %1111, align 8
  %1113 = getelementptr inbounds double* %1095, i64 3
  %1114 = load double* %1113, align 8
  %1115 = getelementptr inbounds double* %14, i64 12
  %1116 = mul nsw i32 16, %1091
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds double* %1115, i64 %1117
  %1119 = getelementptr inbounds double* %1118, i64 0
  %1120 = load double* %1119, align 8
  %1121 = fsub double %1097, %1120
  %1122 = getelementptr inbounds double* %1118, i64 1
  %1123 = load double* %1122, align 8
  %1124 = fsub double %1110, %1123
  %1125 = getelementptr inbounds double* %1118, i64 2
  %1126 = load double* %1125, align 8
  %1127 = fsub double %1112, %1126
  %1128 = getelementptr inbounds double* %1118, i64 3
  %1129 = load double* %1128, align 8
  %1130 = fsub double %1114, %1129
  %1131 = fmul double %1130, %1104
  %1132 = fmul double %1127, %1104
  %1133 = fmul double %1124, %1104
  %1134 = fmul double %1121, %1104
  %1135 = fmul double 3.000000e+00, %1108
  %1136 = fmul double %1135, %1131
  %1137 = fmul double 2.000000e+00, %1132
  %1138 = fadd double %1136, %1137
  %1139 = fmul double %1138, %1108
  %1140 = fadd double %1139, %1133
  %1141 = fmul double -2.000000e+00, %1140
  %1142 = sext i32 %1066 to i64
  %1143 = getelementptr inbounds %class.Vector* %269, i64 %1142
  %1144 = fmul double %1141, %1072
  %1145 = fmul double %1144, %1072
  %1146 = fadd double %fullElectVirial_xx.3, %1145
  %1147 = fmul double %1144, %1077
  %1148 = fadd double %fullElectVirial_xy.3, %1147
  %1149 = fmul double %1144, %1083
  %1150 = fadd double %fullElectVirial_xz.3, %1149
  %1151 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1152 = load double* %1151, align 8
  %1153 = fadd double %1152, %1144
  store double %1153, double* %1151, align 8
  %1154 = getelementptr inbounds %class.Vector* %1143, i32 0, i32 0
  %1155 = load double* %1154, align 8
  %1156 = fsub double %1155, %1144
  store double %1156, double* %1154, align 8
  %1157 = fmul double %1141, %1077
  %1158 = fmul double %1157, %1077
  %1159 = fadd double %fullElectVirial_yy.3, %1158
  %1160 = fmul double %1157, %1083
  %1161 = fadd double %fullElectVirial_yz.3, %1160
  %1162 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1163 = load double* %1162, align 8
  %1164 = fadd double %1163, %1157
  store double %1164, double* %1162, align 8
  %1165 = getelementptr inbounds %class.Vector* %1143, i32 0, i32 1
  %1166 = load double* %1165, align 8
  %1167 = fsub double %1166, %1157
  store double %1167, double* %1165, align 8
  %1168 = fmul double %1141, %1083
  %1169 = fmul double %1168, %1083
  %1170 = fadd double %fullElectVirial_zz.3, %1169
  %1171 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1172 = load double* %1171, align 8
  %1173 = fadd double %1172, %1168
  store double %1173, double* %1171, align 8
  %1174 = getelementptr inbounds %class.Vector* %1143, i32 0, i32 2
  %1175 = load double* %1174, align 8
  %1176 = fsub double %1175, %1168
  store double %1176, double* %1174, align 8
  br label %1177

; <label>:1177                                    ; preds = %1063
  %1178 = add nsw i32 %k18.3, 1
  br label %1061

; <label>:1179                                    ; preds = %1061
  br label %1180

; <label>:1180                                    ; preds = %1179, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1179 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1179 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1179 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1179 ], [ %491, %488 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %339 ], [ %fullElectVirial_zz.3, %1179 ], [ %fullElectVirial_zz.0, %488 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %339 ], [ %fullElectVirial_yz.3, %1179 ], [ %fullElectVirial_yz.0, %488 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %339 ], [ %fullElectVirial_yy.3, %1179 ], [ %fullElectVirial_yy.0, %488 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %339 ], [ %fullElectVirial_xz.3, %1179 ], [ %fullElectVirial_xz.0, %488 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %339 ], [ %fullElectVirial_xy.3, %1179 ], [ %fullElectVirial_xy.0, %488 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %339 ], [ %fullElectVirial_xx.3, %1179 ], [ %fullElectVirial_xx.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %712, %1179 ], [ %exclChecksum.0, %488 ]
  %1181 = add nsw i32 %i.2, 1
  br label %283

; <label>:1182                                    ; preds = %283
  %1183 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1184 = icmp ne i32* %50, %1183
  br i1 %1184, label %1185, label %1190

; <label>:1185                                    ; preds = %1182
  %1186 = icmp eq i32* %50, null
  br i1 %1186, label %1189, label %1187

; <label>:1187                                    ; preds = %1185
  %1188 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1188) #8
  br label %1189

; <label>:1189                                    ; preds = %1187, %1185
  br label %1190

; <label>:1190                                    ; preds = %1189, %1182
  %1191 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1192 = icmp ne i32* %64, %1191
  br i1 %1192, label %1193, label %1198

; <label>:1193                                    ; preds = %1190
  %1194 = icmp eq i32* %64, null
  br i1 %1194, label %1197, label %1195

; <label>:1195                                    ; preds = %1193
  %1196 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1196) #8
  br label %1197

; <label>:1197                                    ; preds = %1195, %1193
  br label %1198

; <label>:1198                                    ; preds = %1197, %1190
  %1199 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1200 = icmp ne i32* %78, %1199
  br i1 %1200, label %1201, label %1206

; <label>:1201                                    ; preds = %1198
  %1202 = icmp eq i32* %78, null
  br i1 %1202, label %1205, label %1203

; <label>:1203                                    ; preds = %1201
  %1204 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1204) #8
  br label %1205

; <label>:1205                                    ; preds = %1203, %1201
  br label %1206

; <label>:1206                                    ; preds = %1205, %1198
  %1207 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1208 = icmp ne i32* %207, %1207
  br i1 %1208, label %1209, label %1214

; <label>:1209                                    ; preds = %1206
  %1210 = icmp eq i32* %207, null
  br i1 %1210, label %1213, label %1211

; <label>:1211                                    ; preds = %1209
  %1212 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1212) #8
  br label %1213

; <label>:1213                                    ; preds = %1211, %1209
  br label %1214

; <label>:1214                                    ; preds = %1213, %1206
  %1215 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1216 = icmp ne i32* %221, %1215
  br i1 %1216, label %1217, label %1222

; <label>:1217                                    ; preds = %1214
  %1218 = icmp eq i32* %221, null
  br i1 %1218, label %1221, label %1219

; <label>:1219                                    ; preds = %1217
  %1220 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1220) #8
  br label %1221

; <label>:1221                                    ; preds = %1219, %1217
  br label %1222

; <label>:1222                                    ; preds = %1221, %1214
  %1223 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1224 = icmp ne i32* %235, %1223
  br i1 %1224, label %1225, label %1230

; <label>:1225                                    ; preds = %1222
  %1226 = icmp eq i32* %235, null
  br i1 %1226, label %1229, label %1227

; <label>:1227                                    ; preds = %1225
  %1228 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1228) #8
  br label %1229

; <label>:1229                                    ; preds = %1227, %1225
  br label %1230

; <label>:1230                                    ; preds = %1229, %1222
  %1231 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1232 = icmp ne i32* %249, %1231
  br i1 %1232, label %1233, label %1238

; <label>:1233                                    ; preds = %1230
  %1234 = icmp eq i32* %249, null
  br i1 %1234, label %1237, label %1235

; <label>:1235                                    ; preds = %1233
  %1236 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1236) #8
  br label %1237

; <label>:1237                                    ; preds = %1235, %1233
  br label %1238

; <label>:1238                                    ; preds = %1237, %1230
  %1239 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1240 = icmp ne i32* %263, %1239
  br i1 %1240, label %1241, label %1246

; <label>:1241                                    ; preds = %1238
  %1242 = icmp eq i32* %263, null
  br i1 %1242, label %1245, label %1243

; <label>:1243                                    ; preds = %1241
  %1244 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1244) #8
  br label %1245

; <label>:1245                                    ; preds = %1243, %1241
  br label %1246

; <label>:1246                                    ; preds = %1245, %1238
  %1247 = sitofp i32 %exclChecksum.0 to double
  %1248 = getelementptr inbounds double* %6, i64 22
  %1249 = load double* %1248, align 8
  %1250 = fadd double %1249, %1247
  store double %1250, double* %1248, align 8
  %1251 = getelementptr inbounds double* %6, i64 12
  %1252 = load double* %1251, align 8
  %1253 = fadd double %1252, %fullElectVirial_xx.0
  store double %1253, double* %1251, align 8
  %1254 = getelementptr inbounds double* %6, i64 13
  %1255 = load double* %1254, align 8
  %1256 = fadd double %1255, %fullElectVirial_xy.0
  store double %1256, double* %1254, align 8
  %1257 = getelementptr inbounds double* %6, i64 14
  %1258 = load double* %1257, align 8
  %1259 = fadd double %1258, %fullElectVirial_xz.0
  store double %1259, double* %1257, align 8
  %1260 = getelementptr inbounds double* %6, i64 15
  %1261 = load double* %1260, align 8
  %1262 = fadd double %1261, %fullElectVirial_xy.0
  store double %1262, double* %1260, align 8
  %1263 = getelementptr inbounds double* %6, i64 16
  %1264 = load double* %1263, align 8
  %1265 = fadd double %1264, %fullElectVirial_yy.0
  store double %1265, double* %1263, align 8
  %1266 = getelementptr inbounds double* %6, i64 17
  %1267 = load double* %1266, align 8
  %1268 = fadd double %1267, %fullElectVirial_yz.0
  store double %1268, double* %1266, align 8
  %1269 = getelementptr inbounds double* %6, i64 18
  %1270 = load double* %1269, align 8
  %1271 = fadd double %1270, %fullElectVirial_xz.0
  store double %1271, double* %1269, align 8
  %1272 = getelementptr inbounds double* %6, i64 19
  %1273 = load double* %1272, align 8
  %1274 = fadd double %1273, %fullElectVirial_yz.0
  store double %1274, double* %1272, align 8
  %1275 = getelementptr inbounds double* %6, i64 20
  %1276 = load double* %1275, align 8
  %1277 = fadd double %1276, %fullElectVirial_zz.0
  store double %1277, double* %1275, align 8
  br label %1278

; <label>:1278                                    ; preds = %1246, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil32calc_pair_energy_merge_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.12, align 4
  %r2f29 = alloca %union.anon.13, align 4
  %r2f63 = alloca %union.anon.14, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1319

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %184

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  br label %138

; <label>:138                                     ; preds = %154, %137
  %all_fixed.2 = phi i32 [ %all_fixed.0, %137 ], [ %all_fixed.3, %154 ]
  %i.0 = phi i32 [ 0, %137 ], [ %155, %154 ]
  %139 = icmp ne i32 %all_fixed.2, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %138
  %141 = icmp slt i32 %i.0, %27
  br label %142

; <label>:142                                     ; preds = %140, %138
  %143 = phi i1 [ false, %138 ], [ %141, %140 ]
  br i1 %143, label %144, label %156

; <label>:144                                     ; preds = %142
  %145 = sext i32 %i.0 to i64
  %146 = getelementptr inbounds %struct.CompAtom* %33, i64 %145
  %147 = getelementptr inbounds %struct.CompAtom* %146, i32 0, i32 2
  %148 = load i32* %147, align 4
  %149 = lshr i32 %148, 26
  %150 = and i32 %149, 1
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %153, label %152

; <label>:152                                     ; preds = %144
  br label %153

; <label>:153                                     ; preds = %152, %144
  %all_fixed.3 = phi i32 [ %all_fixed.2, %144 ], [ 0, %152 ]
  br label %154

; <label>:154                                     ; preds = %153
  %155 = add nsw i32 %i.0, 1
  br label %138

; <label>:156                                     ; preds = %142
  %157 = icmp ne i32 %all_fixed.2, 0
  br i1 %157, label %158, label %183

; <label>:158                                     ; preds = %156
  %159 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %160 = icmp ne i32* %50, %159
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = icmp eq i32* %50, null
  br i1 %162, label %165, label %163

; <label>:163                                     ; preds = %161
  %164 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %164) #8
  br label %165

; <label>:165                                     ; preds = %163, %161
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %168 = icmp ne i32* %64, %167
  br i1 %168, label %169, label %174

; <label>:169                                     ; preds = %166
  %170 = icmp eq i32* %64, null
  br i1 %170, label %173, label %171

; <label>:171                                     ; preds = %169
  %172 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %172) #8
  br label %173

; <label>:173                                     ; preds = %171, %169
  br label %174

; <label>:174                                     ; preds = %173, %166
  %175 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %176 = icmp ne i32* %78, %175
  br i1 %176, label %177, label %182

; <label>:177                                     ; preds = %174
  %178 = icmp eq i32* %78, null
  br i1 %178, label %181, label %179

; <label>:179                                     ; preds = %177
  %180 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %180) #8
  br label %181

; <label>:181                                     ; preds = %179, %177
  br label %182

; <label>:182                                     ; preds = %181, %174
  br label %1319

; <label>:183                                     ; preds = %156
  br label %184

; <label>:184                                     ; preds = %183, %113
  %fixg.2 = phi i32 [ %fixg.0, %183 ], [ 0, %113 ]
  %185 = icmp ne i32 %fixg.2, 0
  br i1 %185, label %186, label %193

; <label>:186                                     ; preds = %184
  %187 = sub nsw i32 %fixg.2, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32* %64, i64 %188
  %190 = load i32* %189, align 4
  %191 = sext i32 %fixg.2 to i64
  %192 = getelementptr inbounds i32* %64, i64 %191
  store i32 %190, i32* %192, align 4
  br label %193

; <label>:193                                     ; preds = %186, %184
  %194 = icmp slt i32 %30, 1000
  br i1 %194, label %195, label %197

; <label>:195                                     ; preds = %193
  %196 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %206

; <label>:197                                     ; preds = %193
  %198 = add nsw i32 %30, 5
  %199 = sext i32 %198 to i64
  %200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 4)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  %203 = select i1 %201, i64 -1, i64 %202
  %204 = call noalias i8* @_Znam(i64 %203) #9
  %205 = bitcast i8* %204 to i32*
  br label %206

; <label>:206                                     ; preds = %197, %195
  %207 = phi i32* [ %196, %195 ], [ %205, %197 ]
  %208 = icmp slt i32 %30, 1000
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %220

; <label>:211                                     ; preds = %206
  %212 = add nsw i32 %30, 5
  %213 = sext i32 %212 to i64
  %214 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %213, i64 4)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = call noalias i8* @_Znam(i64 %217) #9
  %219 = bitcast i8* %218 to i32*
  br label %220

; <label>:220                                     ; preds = %211, %209
  %221 = phi i32* [ %210, %209 ], [ %219, %211 ]
  %222 = icmp slt i32 %30, 1000
  br i1 %222, label %223, label %225

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %234

; <label>:225                                     ; preds = %220
  %226 = add nsw i32 %30, 5
  %227 = sext i32 %226 to i64
  %228 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %227, i64 4)
  %229 = extractvalue { i64, i1 } %228, 1
  %230 = extractvalue { i64, i1 } %228, 0
  %231 = select i1 %229, i64 -1, i64 %230
  %232 = call noalias i8* @_Znam(i64 %231) #9
  %233 = bitcast i8* %232 to i32*
  br label %234

; <label>:234                                     ; preds = %225, %223
  %235 = phi i32* [ %224, %223 ], [ %233, %225 ]
  %236 = icmp slt i32 %30, 1000
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %234
  %238 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %248

; <label>:239                                     ; preds = %234
  %240 = add nsw i32 %30, 5
  %241 = sext i32 %240 to i64
  %242 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 4)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = call noalias i8* @_Znam(i64 %245) #9
  %247 = bitcast i8* %246 to i32*
  br label %248

; <label>:248                                     ; preds = %239, %237
  %249 = phi i32* [ %238, %237 ], [ %247, %239 ]
  %250 = icmp slt i32 %30, 1000
  br i1 %250, label %251, label %253

; <label>:251                                     ; preds = %248
  %252 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %262

; <label>:253                                     ; preds = %248
  %254 = add nsw i32 %30, 5
  %255 = sext i32 %254 to i64
  %256 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %255, i64 4)
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 -1, i64 %258
  %260 = call noalias i8* @_Znam(i64 %259) #9
  %261 = bitcast i8* %260 to i32*
  br label %262

; <label>:262                                     ; preds = %253, %251
  %263 = phi i32* [ %252, %251 ], [ %261, %253 ]
  %264 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %265 = getelementptr inbounds [2 x %class.Vector*]* %264, i32 0, i64 0
  %266 = load %class.Vector** %265, align 8
  %267 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %268 = getelementptr inbounds [2 x %class.Vector*]* %267, i32 0, i64 1
  %269 = load %class.Vector** %268, align 8
  %270 = mul nsw i32 %27, %30
  %271 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %272 = load i32* %271, align 4
  %273 = mul nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %275 = load i32* %274, align 4
  %276 = sdiv i32 %273, %275
  %277 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %278 = load i32* %277, align 4
  %279 = mul nsw i32 %270, %278
  %280 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %281 = load i32* %280, align 4
  %282 = sdiv i32 %279, %281
  br label %283

; <label>:283                                     ; preds = %1215, %262
  %pairlistindex.0 = phi i32 [ 0, %262 ], [ %pairlistindex.2, %1215 ]
  %pairlistoffset.0 = phi i32 [ 0, %262 ], [ %pairlistoffset.2, %1215 ]
  %pairCount.0 = phi i32 [ 0, %262 ], [ %pairCount.3, %1215 ]
  %i.1 = phi i32 [ 0, %262 ], [ %1216, %1215 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_zz.4, %1215 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yz.4, %1215 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_yy.4, %1215 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xz.4, %1215 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xy.4, %1215 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectVirial_xx.4, %1215 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %fullElectEnergy.4, %1215 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %262 ], [ %vdwEnergy.3, %1215 ]
  %exclChecksum.0 = phi i32 [ 0, %262 ], [ %exclChecksum.9, %1215 ]
  %284 = icmp slt i32 %i.1, %27
  br i1 %284, label %285, label %1217

; <label>:285                                     ; preds = %283
  %286 = sext i32 %i.1 to i64
  %287 = getelementptr inbounds %struct.CompAtom* %33, i64 %286
  %288 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %289 = load i32* %288, align 4
  %290 = and i32 %289, 4194303
  %291 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %290)
  %292 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 0
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 1
  %295 = load i32* %294, align 4
  %296 = getelementptr inbounds %class.ExclusionCheck* %291, i32 0, i32 2
  %297 = load i8** %296, align 8
  %298 = sext i32 %293 to i64
  %299 = sub i64 0, %298
  %300 = getelementptr inbounds i8* %297, i64 %299
  %301 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %302 = getelementptr inbounds %class.Vector* %301, i32 0, i32 0
  %303 = load double* %302, align 8
  %304 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %305 = getelementptr inbounds %class.Vector* %304, i32 0, i32 1
  %306 = load double* %305, align 8
  %307 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 0
  %308 = getelementptr inbounds %class.Vector* %307, i32 0, i32 2
  %309 = load double* %308, align 8
  %310 = sext i32 %i.1 to i64
  %311 = getelementptr inbounds %class.Vector* %266, i64 %310
  %312 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %323, label %317

; <label>:317                                     ; preds = %285
  %318 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %319 = load i32* %318, align 4
  %320 = lshr i32 %319, 25
  %321 = and i32 %320, 1
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %493

; <label>:323                                     ; preds = %317, %285
  %324 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %325 = load i32* %324, align 4
  %326 = lshr i32 %325, 22
  %327 = and i32 %326, 7
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %329, label %343

; <label>:329                                     ; preds = %323
  %330 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %331 = load i32* %330, align 4
  %332 = lshr i32 %331, 22
  %333 = and i32 %332, 7
  %334 = mul nsw i32 %333, %30
  %335 = add nsw i32 %pairCount.0, %334
  %336 = icmp slt i32 %pairCount.0, %276
  br i1 %336, label %339, label %337

; <label>:337                                     ; preds = %329
  %338 = icmp sge i32 %pairCount.0, %282
  br i1 %338, label %339, label %342

; <label>:339                                     ; preds = %337, %329
  %340 = sub nsw i32 %333, 1
  %341 = add nsw i32 %i.1, %340
  br label %1215

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %342, %323
  %pairCount.1 = phi i32 [ %335, %342 ], [ %pairCount.0, %323 ]
  %344 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %346, label %352

; <label>:346                                     ; preds = %343
  %347 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %348 = load i32* %347, align 4
  %349 = lshr i32 %348, 27
  %350 = and i32 %349, 1
  %351 = icmp ne i32 %350, 0
  br label %352

; <label>:352                                     ; preds = %346, %343
  %353 = phi i1 [ false, %343 ], [ %351, %346 ]
  %354 = zext i1 %353 to i32
  %355 = sext i32 0 to i64
  %356 = getelementptr inbounds i32* %207, i64 %355
  %357 = icmp ne i32 %354, 0
  br i1 %357, label %358, label %359

; <label>:358                                     ; preds = %352
  br label %360

; <label>:359                                     ; preds = %352
  br label %360

; <label>:360                                     ; preds = %359, %358
  %361 = phi i32* [ %64, %358 ], [ %50, %359 ]
  %362 = icmp ne i32 %354, 0
  br i1 %362, label %363, label %364

; <label>:363                                     ; preds = %360
  br label %365

; <label>:364                                     ; preds = %360
  br label %365

; <label>:365                                     ; preds = %364, %363
  %366 = phi i32 [ %fixg.2, %363 ], [ %g.0, %364 ]
  %367 = icmp slt i32 0, %366
  br i1 %367, label %368, label %462

; <label>:368                                     ; preds = %365
  %369 = sext i32 0 to i64
  %370 = getelementptr inbounds i32* %361, i64 %369
  %371 = load i32* %370, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.CompAtom* %36, i64 %372
  %374 = getelementptr inbounds %struct.CompAtom* %373, i32 0, i32 0
  %375 = getelementptr inbounds %class.Vector* %374, i32 0, i32 0
  %376 = load double* %375, align 8
  %377 = sext i32 %371 to i64
  %378 = getelementptr inbounds %struct.CompAtom* %36, i64 %377
  %379 = getelementptr inbounds %struct.CompAtom* %378, i32 0, i32 0
  %380 = getelementptr inbounds %class.Vector* %379, i32 0, i32 1
  %381 = load double* %380, align 8
  %382 = sext i32 %371 to i64
  %383 = getelementptr inbounds %struct.CompAtom* %36, i64 %382
  %384 = getelementptr inbounds %struct.CompAtom* %383, i32 0, i32 0
  %385 = getelementptr inbounds %class.Vector* %384, i32 0, i32 2
  %386 = load double* %385, align 8
  br label %387

; <label>:387                                     ; preds = %420, %368
  %g.3 = phi i32 [ 0, %368 ], [ %390, %420 ]
  %gli.0 = phi i32* [ %78, %368 ], [ %gli.1, %420 ]
  %j2.0 = phi i32 [ %371, %368 ], [ %393, %420 ]
  %p_j_x.0 = phi double [ %376, %368 ], [ %400, %420 ]
  %p_j_y.0 = phi double [ %381, %368 ], [ %408, %420 ]
  %p_j_z.0 = phi double [ %386, %368 ], [ %416, %420 ]
  %388 = icmp slt i32 %g.3, %366
  br i1 %388, label %389, label %421

; <label>:389                                     ; preds = %387
  %390 = add nsw i32 %g.3, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32* %361, i64 %391
  %393 = load i32* %392, align 4
  %394 = fsub double %303, %p_j_x.0
  %395 = fmul double %394, %394
  %396 = sext i32 %393 to i64
  %397 = getelementptr inbounds %struct.CompAtom* %36, i64 %396
  %398 = getelementptr inbounds %struct.CompAtom* %397, i32 0, i32 0
  %399 = getelementptr inbounds %class.Vector* %398, i32 0, i32 0
  %400 = load double* %399, align 8
  %401 = fsub double %306, %p_j_y.0
  %402 = fmul double %401, %401
  %403 = fadd double %395, %402
  %404 = sext i32 %393 to i64
  %405 = getelementptr inbounds %struct.CompAtom* %36, i64 %404
  %406 = getelementptr inbounds %struct.CompAtom* %405, i32 0, i32 0
  %407 = getelementptr inbounds %class.Vector* %406, i32 0, i32 1
  %408 = load double* %407, align 8
  %409 = fsub double %309, %p_j_z.0
  %410 = fmul double %409, %409
  %411 = fadd double %403, %410
  %412 = sext i32 %393 to i64
  %413 = getelementptr inbounds %struct.CompAtom* %36, i64 %412
  %414 = getelementptr inbounds %struct.CompAtom* %413, i32 0, i32 0
  %415 = getelementptr inbounds %class.Vector* %414, i32 0, i32 2
  %416 = load double* %415, align 8
  %417 = fcmp ole double %411, %8
  br i1 %417, label %418, label %420

; <label>:418                                     ; preds = %389
  store i32 %j2.0, i32* %gli.0, align 4
  %419 = getelementptr inbounds i32* %gli.0, i32 1
  br label %420

; <label>:420                                     ; preds = %418, %389
  %gli.1 = phi i32* [ %419, %418 ], [ %gli.0, %389 ]
  br label %387

; <label>:421                                     ; preds = %387
  %422 = ptrtoint i32* %gli.0 to i64
  %423 = ptrtoint i32* %78 to i64
  %424 = sub i64 %422, %423
  %425 = sdiv exact i64 %424, 4
  %426 = trunc i64 %425 to i32
  br label %427

; <label>:427                                     ; preds = %459, %421
  %pli.0 = phi i32* [ %356, %421 ], [ %458, %459 ]
  %h.0 = phi i32 [ 0, %421 ], [ %460, %459 ]
  %428 = icmp slt i32 %h.0, %426
  br i1 %428, label %429, label %461

; <label>:429                                     ; preds = %427
  %430 = sext i32 %h.0 to i64
  %431 = getelementptr inbounds i32* %78, i64 %430
  %432 = load i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CompAtom* %36, i64 %433
  %435 = getelementptr inbounds %struct.CompAtom* %434, i32 0, i32 2
  %436 = load i32* %435, align 4
  %437 = lshr i32 %436, 25
  %438 = and i32 %437, 1
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %441

; <label>:440                                     ; preds = %429
  br label %448

; <label>:441                                     ; preds = %429
  %442 = sext i32 %432 to i64
  %443 = getelementptr inbounds %struct.CompAtom* %36, i64 %442
  %444 = getelementptr inbounds %struct.CompAtom* %443, i32 0, i32 2
  %445 = load i32* %444, align 4
  %446 = lshr i32 %445, 22
  %447 = and i32 %446, 7
  br label %448

; <label>:448                                     ; preds = %441, %440
  %449 = phi i32 [ 1, %440 ], [ %447, %441 ]
  %450 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %432, i32* %450, align 4
  %451 = add nsw i32 %432, 1
  %452 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %432, 2
  %454 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %453, i32* %454, align 4
  %455 = add nsw i32 %432, 3
  %456 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %455, i32* %456, align 4
  %457 = sext i32 %449 to i64
  %458 = getelementptr inbounds i32* %pli.0, i64 %457
  br label %459

; <label>:459                                     ; preds = %448
  %460 = add nsw i32 %h.0, 1
  br label %427

; <label>:461                                     ; preds = %427
  br label %462

; <label>:462                                     ; preds = %461, %365
  %pli.1 = phi i32* [ %pli.0, %461 ], [ %356, %365 ]
  %463 = ptrtoint i32* %pli.1 to i64
  %464 = ptrtoint i32* %207 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  %468 = icmp ne i32 %467, 0
  br i1 %468, label %469, label %476

; <label>:469                                     ; preds = %462
  %470 = sub nsw i32 %467, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32* %207, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %467 to i64
  %475 = getelementptr inbounds i32* %207, i64 %474
  store i32 %473, i32* %475, align 4
  br label %492

; <label>:476                                     ; preds = %462
  %477 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %478 = load i32* %477, align 4
  %479 = lshr i32 %478, 25
  %480 = and i32 %479, 1
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %476
  br label %488

; <label>:483                                     ; preds = %476
  %484 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %485 = load i32* %484, align 4
  %486 = lshr i32 %485, 22
  %487 = and i32 %486, 7
  br label %488

; <label>:488                                     ; preds = %483, %482
  %489 = phi i32 [ 1, %482 ], [ %487, %483 ]
  %490 = sub nsw i32 %489, 1
  %491 = add nsw i32 %i.1, %490
  br label %1215

; <label>:492                                     ; preds = %469
  br label %493

; <label>:493                                     ; preds = %492, %317
  %pairlistindex.1 = phi i32 [ %467, %492 ], [ %pairlistindex.0, %317 ]
  %pairlistoffset.1 = phi i32 [ 0, %492 ], [ %pairlistoffset.0, %317 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %492 ], [ %pairCount.0, %317 ]
  %494 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %502

; <label>:496                                     ; preds = %493
  %497 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %498 = load i32* %497, align 4
  %499 = lshr i32 %498, 26
  %500 = and i32 %499, 1
  %501 = icmp ne i32 %500, 0
  br label %502

; <label>:502                                     ; preds = %496, %493
  %503 = phi i1 [ false, %493 ], [ %501, %496 ]
  %504 = zext i1 %503 to i32
  %505 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 1
  %506 = load float* %505, align 4
  %507 = fpext float %506 to double
  %508 = fmul double 3.320636e+02, %507
  %509 = fmul double %508, %15
  %510 = fmul double %509, %9
  %511 = getelementptr inbounds %struct.CompAtom* %287, i32 0, i32 2
  %512 = load i32* %511, align 4
  %513 = and i32 %512, 4194303
  %514 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %513)
  %515 = zext i16 %514 to i32
  %516 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %515)
  %517 = icmp ne i32 %504, 0
  br i1 %517, label %518, label %580

; <label>:518                                     ; preds = %502
  br label %519

; <label>:519                                     ; preds = %577, %518
  %pli4.0 = phi i32* [ %221, %518 ], [ %pli4.2, %577 ]
  %plin.0 = phi i32* [ %235, %518 ], [ %plin.2, %577 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %518 ], [ %578, %577 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %518 ], [ %exclChecksum.3, %577 ]
  %520 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %520, label %521, label %579

; <label>:521                                     ; preds = %519
  %522 = sext i32 %k.0 to i64
  %523 = getelementptr inbounds i32* %207, i64 %522
  %524 = load i32* %523, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds %struct.CompAtom* %36, i64 %525
  %527 = getelementptr inbounds %struct.CompAtom* %526, i32 0, i32 0
  %528 = getelementptr inbounds %class.Vector* %527, i32 0, i32 0
  %529 = load double* %528, align 8
  %530 = fsub double %303, %529
  %531 = fmul double %530, %530
  %532 = sext i32 %524 to i64
  %533 = getelementptr inbounds %struct.CompAtom* %36, i64 %532
  %534 = getelementptr inbounds %struct.CompAtom* %533, i32 0, i32 0
  %535 = getelementptr inbounds %class.Vector* %534, i32 0, i32 1
  %536 = load double* %535, align 8
  %537 = fsub double %306, %536
  %538 = fmul double %537, %537
  %539 = fadd double %531, %538
  %540 = sext i32 %524 to i64
  %541 = getelementptr inbounds %struct.CompAtom* %36, i64 %540
  %542 = getelementptr inbounds %struct.CompAtom* %541, i32 0, i32 0
  %543 = getelementptr inbounds %class.Vector* %542, i32 0, i32 2
  %544 = load double* %543, align 8
  %545 = fsub double %309, %544
  %546 = fmul double %545, %545
  %547 = fadd double %539, %546
  %548 = sext i32 %524 to i64
  %549 = getelementptr inbounds %struct.CompAtom* %36, i64 %548
  %550 = getelementptr inbounds %struct.CompAtom* %549, i32 0, i32 2
  %551 = load i32* %550, align 4
  %552 = lshr i32 %551, 26
  %553 = and i32 %552, 1
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %576, label %555

; <label>:555                                     ; preds = %521
  %556 = fcmp ole double %547, %7
  br i1 %556, label %557, label %576

; <label>:557                                     ; preds = %555
  %558 = fcmp ole double %547, %21
  br i1 %558, label %559, label %562

; <label>:559                                     ; preds = %557
  %560 = add nsw i32 %exclChecksum.1, 1
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %576, label %562

; <label>:562                                     ; preds = %559, %557
  %exclChecksum.2 = phi i32 [ %560, %559 ], [ %exclChecksum.1, %557 ]
  %563 = sext i32 %524 to i64
  %564 = getelementptr inbounds %struct.CompAtom* %36, i64 %563
  %565 = getelementptr inbounds %struct.CompAtom* %564, i32 0, i32 2
  %566 = load i32* %565, align 4
  %567 = and i32 %566, 4194303
  %568 = icmp sge i32 %567, %293
  br i1 %568, label %569, label %573

; <label>:569                                     ; preds = %562
  %570 = icmp sle i32 %567, %295
  br i1 %570, label %571, label %573

; <label>:571                                     ; preds = %569
  %572 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %524, i32* %pli4.0, align 4
  br label %575

; <label>:573                                     ; preds = %569, %562
  %574 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %524, i32* %plin.0, align 4
  br label %575

; <label>:575                                     ; preds = %573, %571
  %pli4.1 = phi i32* [ %572, %571 ], [ %pli4.0, %573 ]
  %plin.1 = phi i32* [ %plin.0, %571 ], [ %574, %573 ]
  br label %576

; <label>:576                                     ; preds = %575, %559, %555, %521
  %pli4.2 = phi i32* [ %pli4.0, %521 ], [ %pli4.0, %559 ], [ %pli4.1, %575 ], [ %pli4.0, %555 ]
  %plin.2 = phi i32* [ %plin.0, %521 ], [ %plin.0, %559 ], [ %plin.1, %575 ], [ %plin.0, %555 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %521 ], [ %560, %559 ], [ %exclChecksum.2, %575 ], [ %exclChecksum.1, %555 ]
  br label %577

; <label>:577                                     ; preds = %576
  %578 = add nsw i32 %k.0, 1
  br label %519

; <label>:579                                     ; preds = %519
  br label %659

; <label>:580                                     ; preds = %502
  %581 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %581, label %582, label %658

; <label>:582                                     ; preds = %580
  %583 = sext i32 %pairlistoffset.1 to i64
  %584 = getelementptr inbounds i32* %207, i64 %583
  %585 = load i32* %584, align 4
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtom* %36, i64 %586
  %588 = getelementptr inbounds %struct.CompAtom* %587, i32 0, i32 0
  %589 = getelementptr inbounds %class.Vector* %588, i32 0, i32 0
  %590 = load double* %589, align 8
  %591 = sext i32 %585 to i64
  %592 = getelementptr inbounds %struct.CompAtom* %36, i64 %591
  %593 = getelementptr inbounds %struct.CompAtom* %592, i32 0, i32 0
  %594 = getelementptr inbounds %class.Vector* %593, i32 0, i32 1
  %595 = load double* %594, align 8
  %596 = sext i32 %585 to i64
  %597 = getelementptr inbounds %struct.CompAtom* %36, i64 %596
  %598 = getelementptr inbounds %struct.CompAtom* %597, i32 0, i32 0
  %599 = getelementptr inbounds %class.Vector* %598, i32 0, i32 2
  %600 = load double* %599, align 8
  %601 = sext i32 %585 to i64
  %602 = getelementptr inbounds %struct.CompAtom* %36, i64 %601
  %603 = getelementptr inbounds %struct.CompAtom* %602, i32 0, i32 2
  %604 = load i32* %603, align 4
  %605 = and i32 %604, 4194303
  br label %606

; <label>:606                                     ; preds = %651, %582
  %pli4.3 = phi i32* [ %221, %582 ], [ %pli4.5, %651 ]
  %plin.3 = phi i32* [ %235, %582 ], [ %plin.5, %651 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %582 ], [ %609, %651 ]
  %j211.0 = phi i32 [ %585, %582 ], [ %612, %651 ]
  %p_j_x12.0 = phi double [ %590, %582 ], [ %619, %651 ]
  %p_j_y13.0 = phi double [ %595, %582 ], [ %627, %651 ]
  %p_j_z14.0 = phi double [ %600, %582 ], [ %635, %651 ]
  %atom215.0 = phi i32 [ %605, %582 ], [ %656, %651 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %582 ], [ %exclChecksum.6, %651 ]
  %607 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %607, label %608, label %657

; <label>:608                                     ; preds = %606
  %609 = add nsw i32 %k10.0, 1
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i32* %207, i64 %610
  %612 = load i32* %611, align 4
  %613 = fsub double %303, %p_j_x12.0
  %614 = fmul double %613, %613
  %615 = sext i32 %612 to i64
  %616 = getelementptr inbounds %struct.CompAtom* %36, i64 %615
  %617 = getelementptr inbounds %struct.CompAtom* %616, i32 0, i32 0
  %618 = getelementptr inbounds %class.Vector* %617, i32 0, i32 0
  %619 = load double* %618, align 8
  %620 = fsub double %306, %p_j_y13.0
  %621 = fmul double %620, %620
  %622 = fadd double %614, %621
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 1
  %627 = load double* %626, align 8
  %628 = fsub double %309, %p_j_z14.0
  %629 = fmul double %628, %628
  %630 = fadd double %622, %629
  %631 = sext i32 %612 to i64
  %632 = getelementptr inbounds %struct.CompAtom* %36, i64 %631
  %633 = getelementptr inbounds %struct.CompAtom* %632, i32 0, i32 0
  %634 = getelementptr inbounds %class.Vector* %633, i32 0, i32 2
  %635 = load double* %634, align 8
  %636 = fcmp ole double %630, %7
  br i1 %636, label %637, label %651

; <label>:637                                     ; preds = %608
  %638 = fcmp ole double %630, %21
  br i1 %638, label %639, label %642

; <label>:639                                     ; preds = %637
  %640 = add nsw i32 %exclChecksum.4, 1
  %641 = icmp ne i32 %640, 0
  br i1 %641, label %651, label %642

; <label>:642                                     ; preds = %639, %637
  %exclChecksum.5 = phi i32 [ %640, %639 ], [ %exclChecksum.4, %637 ]
  %643 = icmp sge i32 %atom215.0, %293
  br i1 %643, label %644, label %648

; <label>:644                                     ; preds = %642
  %645 = icmp sle i32 %atom215.0, %295
  br i1 %645, label %646, label %648

; <label>:646                                     ; preds = %644
  %647 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %650

; <label>:648                                     ; preds = %644, %642
  %649 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %650

; <label>:650                                     ; preds = %648, %646
  %pli4.4 = phi i32* [ %647, %646 ], [ %pli4.3, %648 ]
  %plin.4 = phi i32* [ %plin.3, %646 ], [ %649, %648 ]
  br label %651

; <label>:651                                     ; preds = %650, %639, %608
  %pli4.5 = phi i32* [ %pli4.3, %639 ], [ %pli4.4, %650 ], [ %pli4.3, %608 ]
  %plin.5 = phi i32* [ %plin.3, %639 ], [ %plin.4, %650 ], [ %plin.3, %608 ]
  %exclChecksum.6 = phi i32 [ %640, %639 ], [ %exclChecksum.5, %650 ], [ %exclChecksum.4, %608 ]
  %652 = sext i32 %612 to i64
  %653 = getelementptr inbounds %struct.CompAtom* %36, i64 %652
  %654 = getelementptr inbounds %struct.CompAtom* %653, i32 0, i32 2
  %655 = load i32* %654, align 4
  %656 = and i32 %655, 4194303
  br label %606

; <label>:657                                     ; preds = %606
  br label %658

; <label>:658                                     ; preds = %657, %580
  %pli4.6 = phi i32* [ %pli4.3, %657 ], [ %221, %580 ]
  %plin.6 = phi i32* [ %plin.3, %657 ], [ %235, %580 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %657 ], [ %exclChecksum.0, %580 ]
  br label %659

; <label>:659                                     ; preds = %658, %579
  %pli4.7 = phi i32* [ %pli4.0, %579 ], [ %pli4.6, %658 ]
  %plin.7 = phi i32* [ %plin.0, %579 ], [ %plin.6, %658 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %579 ], [ %exclChecksum.7, %658 ]
  %660 = ptrtoint i32* %pli4.7 to i64
  %661 = ptrtoint i32* %221 to i64
  %662 = sub i64 %660, %661
  %663 = sdiv exact i64 %662, 4
  %664 = trunc i64 %663 to i32
  %665 = icmp ne i32 %664, 0
  br i1 %665, label %666, label %673

; <label>:666                                     ; preds = %659
  %667 = sub nsw i32 %664, 1
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i32* %221, i64 %668
  %670 = load i32* %669, align 4
  %671 = sext i32 %664 to i64
  %672 = getelementptr inbounds i32* %221, i64 %671
  store i32 %670, i32* %672, align 4
  br label %673

; <label>:673                                     ; preds = %666, %659
  br label %674

; <label>:674                                     ; preds = %696, %673
  %plin.8 = phi i32* [ %plin.7, %673 ], [ %plin.9, %696 ]
  %plix.0 = phi i32* [ %249, %673 ], [ %plix.1, %696 ]
  %plim.0 = phi i32* [ %263, %673 ], [ %plim.1, %696 ]
  %k18.0 = phi i32 [ 0, %673 ], [ %697, %696 ]
  %675 = icmp slt i32 %k18.0, %664
  br i1 %675, label %676, label %698

; <label>:676                                     ; preds = %674
  %677 = sext i32 %k18.0 to i64
  %678 = getelementptr inbounds i32* %221, i64 %677
  %679 = load i32* %678, align 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds %struct.CompAtom* %36, i64 %680
  %682 = getelementptr inbounds %struct.CompAtom* %681, i32 0, i32 2
  %683 = load i32* %682, align 4
  %684 = and i32 %683, 4194303
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i8* %300, i64 %685
  %687 = load i8* %686, align 1
  %688 = sext i8 %687 to i32
  switch i32 %688, label %695 [
    i32 0, label %689
    i32 1, label %691
    i32 2, label %693
  ]

; <label>:689                                     ; preds = %676
  %690 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %679, i32* %plin.8, align 4
  br label %695

; <label>:691                                     ; preds = %676
  %692 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %679, i32* %plix.0, align 4
  br label %695

; <label>:693                                     ; preds = %676
  %694 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %679, i32* %plim.0, align 4
  br label %695

; <label>:695                                     ; preds = %693, %691, %689, %676
  %plin.9 = phi i32* [ %plin.8, %676 ], [ %plin.8, %693 ], [ %plin.8, %691 ], [ %690, %689 ]
  %plix.1 = phi i32* [ %plix.0, %676 ], [ %plix.0, %693 ], [ %692, %691 ], [ %plix.0, %689 ]
  %plim.1 = phi i32* [ %plim.0, %676 ], [ %694, %693 ], [ %plim.0, %691 ], [ %plim.0, %689 ]
  br label %696

; <label>:696                                     ; preds = %695
  %697 = add nsw i32 %k18.0, 1
  br label %674

; <label>:698                                     ; preds = %674
  %699 = ptrtoint i32* %plix.0 to i64
  %700 = ptrtoint i32* %249 to i64
  %701 = sub i64 %699, %700
  %702 = sdiv exact i64 %701, 4
  %703 = sext i32 %exclChecksum.8 to i64
  %704 = add nsw i64 %703, %702
  %705 = trunc i64 %704 to i32
  %706 = ptrtoint i32* %plim.0 to i64
  %707 = ptrtoint i32* %263 to i64
  %708 = sub i64 %706, %707
  %709 = sdiv exact i64 %708, 4
  %710 = sext i32 %705 to i64
  %711 = add nsw i64 %710, %709
  %712 = trunc i64 %711 to i32
  %713 = ptrtoint i32* %plin.8 to i64
  %714 = ptrtoint i32* %235 to i64
  %715 = sub i64 %713, %714
  %716 = sdiv exact i64 %715, 4
  %717 = trunc i64 %716 to i32
  br label %718

; <label>:718                                     ; preds = %885, %698
  %k18.1 = phi i32 [ 0, %698 ], [ %886, %885 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %698 ], [ %878, %885 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %698 ], [ %869, %885 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %698 ], [ %867, %885 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %698 ], [ %858, %885 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %698 ], [ %856, %885 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %698 ], [ %854, %885 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %698 ], [ %838, %885 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %698 ], [ %821, %885 ]
  %719 = icmp slt i32 %k18.1, %717
  br i1 %719, label %720, label %887

; <label>:720                                     ; preds = %718
  %721 = sext i32 %k18.1 to i64
  %722 = getelementptr inbounds i32* %235, i64 %721
  %723 = load i32* %722, align 4
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds %struct.CompAtom* %36, i64 %724
  %726 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %727 = getelementptr inbounds %class.Vector* %726, i32 0, i32 0
  %728 = load double* %727, align 8
  %729 = fsub double %303, %728
  %730 = fmul double %729, %729
  %731 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %732 = getelementptr inbounds %class.Vector* %731, i32 0, i32 1
  %733 = load double* %732, align 8
  %734 = fsub double %306, %733
  %735 = fmul double %734, %734
  %736 = fadd double %730, %735
  %737 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 0
  %738 = getelementptr inbounds %class.Vector* %737, i32 0, i32 2
  %739 = load double* %738, align 8
  %740 = fsub double %309, %739
  %741 = fmul double %740, %740
  %742 = fadd double %736, %741
  %743 = fptrunc double %742 to float
  %744 = bitcast %union.anon.12* %r2f to float*
  store float %743, float* %744, align 4
  %745 = bitcast %union.anon.12* %r2f to i32*
  %746 = load i32* %745, align 4
  %747 = ashr i32 %746, 17
  %748 = add nsw i32 %747, %24
  %749 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 2
  %750 = load i32* %749, align 4
  %751 = and i32 %750, 4194303
  %752 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %751)
  %753 = zext i16 %752 to i32
  %754 = mul nsw i32 2, %753
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %755
  %757 = mul nsw i32 16, %748
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds double* %14, i64 %758
  %760 = getelementptr inbounds double* %759, i64 0
  %761 = load double* %760, align 8
  %762 = mul nsw i32 16, %748
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds double* %14, i64 %763
  %765 = getelementptr inbounds double* %764, i64 4
  %766 = getelementptr inbounds double* %765, i64 0
  %767 = load double* %766, align 8
  %768 = mul nsw i32 16, %748
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds double* %14, i64 %769
  %771 = getelementptr inbounds double* %770, i64 8
  %772 = getelementptr inbounds double* %771, i64 0
  %773 = load double* %772, align 8
  %774 = bitcast %union.anon.12* %r2f to i32*
  %775 = load i32* %774, align 4
  %776 = and i32 %775, -131072
  store i32 %776, i32* %774, align 4
  %777 = getelementptr inbounds %struct.CompAtom* %725, i32 0, i32 1
  %778 = load float* %777, align 4
  %779 = fpext float %778 to double
  %780 = fmul double %510, %779
  %781 = bitcast %union.anon.12* %r2f to float*
  %782 = load float* %781, align 4
  %783 = fpext float %782 to double
  %784 = fsub double %742, %783
  %785 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 0
  %786 = load double* %785, align 8
  %787 = fmul double %15, %786
  %788 = getelementptr inbounds %"struct.LJTable::TableEntry"* %756, i32 0, i32 1
  %789 = load double* %788, align 8
  %790 = fmul double %15, %789
  %791 = fmul double %787, %761
  %792 = fmul double %790, %767
  %793 = fsub double %791, %792
  %794 = getelementptr inbounds double* %759, i64 3
  %795 = load double* %794, align 8
  %796 = fmul double %787, %795
  %797 = getelementptr inbounds double* %765, i64 3
  %798 = load double* %797, align 8
  %799 = fmul double %790, %798
  %800 = fsub double %796, %799
  %801 = getelementptr inbounds double* %759, i64 2
  %802 = load double* %801, align 8
  %803 = fmul double %787, %802
  %804 = getelementptr inbounds double* %765, i64 2
  %805 = load double* %804, align 8
  %806 = fmul double %790, %805
  %807 = fsub double %803, %806
  %808 = getelementptr inbounds double* %759, i64 1
  %809 = load double* %808, align 8
  %810 = fmul double %787, %809
  %811 = getelementptr inbounds double* %765, i64 1
  %812 = load double* %811, align 8
  %813 = fmul double %790, %812
  %814 = fsub double %810, %813
  %815 = fmul double %784, %800
  %816 = fadd double %815, %807
  %817 = fmul double %816, %784
  %818 = fadd double %817, %814
  %819 = fmul double %818, %784
  %820 = fadd double %819, %793
  %821 = fadd double %vdwEnergy.1, %820
  %822 = getelementptr inbounds double* %771, i64 1
  %823 = load double* %822, align 8
  %824 = getelementptr inbounds double* %771, i64 2
  %825 = load double* %824, align 8
  %826 = getelementptr inbounds double* %771, i64 3
  %827 = load double* %826, align 8
  %828 = fmul double %827, %780
  %829 = fmul double %825, %780
  %830 = fmul double %823, %780
  %831 = fmul double %773, %780
  %832 = fmul double %784, %828
  %833 = fadd double %832, %829
  %834 = fmul double %833, %784
  %835 = fadd double %834, %830
  %836 = fmul double %835, %784
  %837 = fadd double %836, %831
  %838 = fadd double %fullElectEnergy.1, %837
  %839 = fadd double %828, %800
  %840 = fadd double %829, %807
  %841 = fadd double %830, %814
  %842 = fadd double %831, %793
  %843 = fmul double 3.000000e+00, %784
  %844 = fmul double %843, %839
  %845 = fmul double 2.000000e+00, %840
  %846 = fadd double %844, %845
  %847 = fmul double %846, %784
  %848 = fadd double %847, %841
  %849 = fmul double -2.000000e+00, %848
  %850 = sext i32 %723 to i64
  %851 = getelementptr inbounds %class.Vector* %269, i64 %850
  %852 = fmul double %849, %729
  %853 = fmul double %852, %729
  %854 = fadd double %fullElectVirial_xx.1, %853
  %855 = fmul double %852, %734
  %856 = fadd double %fullElectVirial_xy.1, %855
  %857 = fmul double %852, %740
  %858 = fadd double %fullElectVirial_xz.1, %857
  %859 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %860 = load double* %859, align 8
  %861 = fadd double %860, %852
  store double %861, double* %859, align 8
  %862 = getelementptr inbounds %class.Vector* %851, i32 0, i32 0
  %863 = load double* %862, align 8
  %864 = fsub double %863, %852
  store double %864, double* %862, align 8
  %865 = fmul double %849, %734
  %866 = fmul double %865, %734
  %867 = fadd double %fullElectVirial_yy.1, %866
  %868 = fmul double %865, %740
  %869 = fadd double %fullElectVirial_yz.1, %868
  %870 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %871 = load double* %870, align 8
  %872 = fadd double %871, %865
  store double %872, double* %870, align 8
  %873 = getelementptr inbounds %class.Vector* %851, i32 0, i32 1
  %874 = load double* %873, align 8
  %875 = fsub double %874, %865
  store double %875, double* %873, align 8
  %876 = fmul double %849, %740
  %877 = fmul double %876, %740
  %878 = fadd double %fullElectVirial_zz.1, %877
  %879 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %880 = load double* %879, align 8
  %881 = fadd double %880, %876
  store double %881, double* %879, align 8
  %882 = getelementptr inbounds %class.Vector* %851, i32 0, i32 2
  %883 = load double* %882, align 8
  %884 = fsub double %883, %876
  store double %884, double* %882, align 8
  br label %885

; <label>:885                                     ; preds = %720
  %886 = add nsw i32 %k18.1, 1
  br label %718

; <label>:887                                     ; preds = %718
  %888 = ptrtoint i32* %plim.0 to i64
  %889 = ptrtoint i32* %263 to i64
  %890 = sub i64 %888, %889
  %891 = sdiv exact i64 %890, 4
  %892 = trunc i64 %891 to i32
  br label %893

; <label>:893                                     ; preds = %1081, %887
  %k18.2 = phi i32 [ 0, %887 ], [ %1082, %1081 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %887 ], [ %1074, %1081 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %887 ], [ %1065, %1081 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %887 ], [ %1063, %1081 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %887 ], [ %1054, %1081 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %887 ], [ %1052, %1081 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %887 ], [ %1050, %1081 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %887 ], [ %1034, %1081 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %887 ], [ %997, %1081 ]
  %894 = icmp slt i32 %k18.2, %892
  br i1 %894, label %895, label %1083

; <label>:895                                     ; preds = %893
  %896 = sext i32 %k18.2 to i64
  %897 = getelementptr inbounds i32* %263, i64 %896
  %898 = load i32* %897, align 4
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds %struct.CompAtom* %36, i64 %899
  %901 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 0
  %902 = getelementptr inbounds %class.Vector* %901, i32 0, i32 0
  %903 = load double* %902, align 8
  %904 = fsub double %303, %903
  %905 = fmul double %904, %904
  %906 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 0
  %907 = getelementptr inbounds %class.Vector* %906, i32 0, i32 1
  %908 = load double* %907, align 8
  %909 = fsub double %306, %908
  %910 = fmul double %909, %909
  %911 = fadd double %905, %910
  %912 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 0
  %913 = getelementptr inbounds %class.Vector* %912, i32 0, i32 2
  %914 = load double* %913, align 8
  %915 = fsub double %309, %914
  %916 = fmul double %915, %915
  %917 = fadd double %911, %916
  %918 = fptrunc double %917 to float
  %919 = bitcast %union.anon.13* %r2f29 to float*
  store float %918, float* %919, align 4
  %920 = bitcast %union.anon.13* %r2f29 to i32*
  %921 = load i32* %920, align 4
  %922 = ashr i32 %921, 17
  %923 = add nsw i32 %922, %24
  %924 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 2
  %925 = load i32* %924, align 4
  %926 = and i32 %925, 4194303
  %927 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %926)
  %928 = zext i16 %927 to i32
  %929 = mul nsw i32 2, %928
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds %"struct.LJTable::TableEntry"* %516, i64 %930
  %932 = getelementptr inbounds %"struct.LJTable::TableEntry"* %931, i64 1
  %933 = mul nsw i32 16, %923
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds double* %14, i64 %934
  %936 = getelementptr inbounds double* %935, i64 0
  %937 = load double* %936, align 8
  %938 = mul nsw i32 16, %923
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds double* %14, i64 %939
  %941 = getelementptr inbounds double* %940, i64 4
  %942 = getelementptr inbounds double* %941, i64 0
  %943 = load double* %942, align 8
  %944 = mul nsw i32 16, %923
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds double* %14, i64 %945
  %947 = getelementptr inbounds double* %946, i64 8
  %948 = getelementptr inbounds double* %947, i64 0
  %949 = load double* %948, align 8
  %950 = bitcast %union.anon.13* %r2f29 to i32*
  %951 = load i32* %950, align 4
  %952 = and i32 %951, -131072
  store i32 %952, i32* %950, align 4
  %953 = getelementptr inbounds %struct.CompAtom* %900, i32 0, i32 1
  %954 = load float* %953, align 4
  %955 = fpext float %954 to double
  %956 = fmul double %510, %955
  %957 = bitcast %union.anon.13* %r2f29 to float*
  %958 = load float* %957, align 4
  %959 = fpext float %958 to double
  %960 = fsub double %917, %959
  %961 = getelementptr inbounds %"struct.LJTable::TableEntry"* %932, i32 0, i32 0
  %962 = load double* %961, align 8
  %963 = fmul double %15, %962
  %964 = getelementptr inbounds %"struct.LJTable::TableEntry"* %932, i32 0, i32 1
  %965 = load double* %964, align 8
  %966 = fmul double %15, %965
  %967 = fmul double %963, %937
  %968 = fmul double %966, %943
  %969 = fsub double %967, %968
  %970 = getelementptr inbounds double* %935, i64 3
  %971 = load double* %970, align 8
  %972 = fmul double %963, %971
  %973 = getelementptr inbounds double* %941, i64 3
  %974 = load double* %973, align 8
  %975 = fmul double %966, %974
  %976 = fsub double %972, %975
  %977 = getelementptr inbounds double* %935, i64 2
  %978 = load double* %977, align 8
  %979 = fmul double %963, %978
  %980 = getelementptr inbounds double* %941, i64 2
  %981 = load double* %980, align 8
  %982 = fmul double %966, %981
  %983 = fsub double %979, %982
  %984 = getelementptr inbounds double* %935, i64 1
  %985 = load double* %984, align 8
  %986 = fmul double %963, %985
  %987 = getelementptr inbounds double* %941, i64 1
  %988 = load double* %987, align 8
  %989 = fmul double %966, %988
  %990 = fsub double %986, %989
  %991 = fmul double %960, %976
  %992 = fadd double %991, %983
  %993 = fmul double %992, %960
  %994 = fadd double %993, %990
  %995 = fmul double %994, %960
  %996 = fadd double %995, %969
  %997 = fadd double %vdwEnergy.2, %996
  %998 = getelementptr inbounds double* %947, i64 1
  %999 = load double* %998, align 8
  %1000 = getelementptr inbounds double* %947, i64 2
  %1001 = load double* %1000, align 8
  %1002 = getelementptr inbounds double* %947, i64 3
  %1003 = load double* %1002, align 8
  %1004 = getelementptr inbounds double* %14, i64 12
  %1005 = mul nsw i32 16, %923
  %1006 = sext i32 %1005 to i64
  %1007 = getelementptr inbounds double* %1004, i64 %1006
  %1008 = getelementptr inbounds double* %1007, i64 0
  %1009 = load double* %1008, align 8
  %1010 = fmul double %17, %1009
  %1011 = fsub double %949, %1010
  %1012 = getelementptr inbounds double* %1007, i64 1
  %1013 = load double* %1012, align 8
  %1014 = fmul double %17, %1013
  %1015 = fsub double %999, %1014
  %1016 = getelementptr inbounds double* %1007, i64 2
  %1017 = load double* %1016, align 8
  %1018 = fmul double %17, %1017
  %1019 = fsub double %1001, %1018
  %1020 = getelementptr inbounds double* %1007, i64 3
  %1021 = load double* %1020, align 8
  %1022 = fmul double %17, %1021
  %1023 = fsub double %1003, %1022
  %1024 = fmul double %1023, %956
  %1025 = fmul double %1019, %956
  %1026 = fmul double %1015, %956
  %1027 = fmul double %1011, %956
  %1028 = fmul double %960, %1024
  %1029 = fadd double %1028, %1025
  %1030 = fmul double %1029, %960
  %1031 = fadd double %1030, %1026
  %1032 = fmul double %1031, %960
  %1033 = fadd double %1032, %1027
  %1034 = fadd double %fullElectEnergy.2, %1033
  %1035 = fadd double %1024, %976
  %1036 = fadd double %1025, %983
  %1037 = fadd double %1026, %990
  %1038 = fadd double %1027, %969
  %1039 = fmul double 3.000000e+00, %960
  %1040 = fmul double %1039, %1035
  %1041 = fmul double 2.000000e+00, %1036
  %1042 = fadd double %1040, %1041
  %1043 = fmul double %1042, %960
  %1044 = fadd double %1043, %1037
  %1045 = fmul double -2.000000e+00, %1044
  %1046 = sext i32 %898 to i64
  %1047 = getelementptr inbounds %class.Vector* %269, i64 %1046
  %1048 = fmul double %1045, %904
  %1049 = fmul double %1048, %904
  %1050 = fadd double %fullElectVirial_xx.2, %1049
  %1051 = fmul double %1048, %909
  %1052 = fadd double %fullElectVirial_xy.2, %1051
  %1053 = fmul double %1048, %915
  %1054 = fadd double %fullElectVirial_xz.2, %1053
  %1055 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1056 = load double* %1055, align 8
  %1057 = fadd double %1056, %1048
  store double %1057, double* %1055, align 8
  %1058 = getelementptr inbounds %class.Vector* %1047, i32 0, i32 0
  %1059 = load double* %1058, align 8
  %1060 = fsub double %1059, %1048
  store double %1060, double* %1058, align 8
  %1061 = fmul double %1045, %909
  %1062 = fmul double %1061, %909
  %1063 = fadd double %fullElectVirial_yy.2, %1062
  %1064 = fmul double %1061, %915
  %1065 = fadd double %fullElectVirial_yz.2, %1064
  %1066 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1067 = load double* %1066, align 8
  %1068 = fadd double %1067, %1061
  store double %1068, double* %1066, align 8
  %1069 = getelementptr inbounds %class.Vector* %1047, i32 0, i32 1
  %1070 = load double* %1069, align 8
  %1071 = fsub double %1070, %1061
  store double %1071, double* %1069, align 8
  %1072 = fmul double %1045, %915
  %1073 = fmul double %1072, %915
  %1074 = fadd double %fullElectVirial_zz.2, %1073
  %1075 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1076 = load double* %1075, align 8
  %1077 = fadd double %1076, %1072
  store double %1077, double* %1075, align 8
  %1078 = getelementptr inbounds %class.Vector* %1047, i32 0, i32 2
  %1079 = load double* %1078, align 8
  %1080 = fsub double %1079, %1072
  store double %1080, double* %1078, align 8
  br label %1081

; <label>:1081                                    ; preds = %895
  %1082 = add nsw i32 %k18.2, 1
  br label %893

; <label>:1083                                    ; preds = %893
  %1084 = ptrtoint i32* %plix.0 to i64
  %1085 = ptrtoint i32* %249 to i64
  %1086 = sub i64 %1084, %1085
  %1087 = sdiv exact i64 %1086, 4
  %1088 = trunc i64 %1087 to i32
  br label %1089

; <label>:1089                                    ; preds = %1212, %1083
  %k18.3 = phi i32 [ 0, %1083 ], [ %1213, %1212 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1083 ], [ %1205, %1212 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1083 ], [ %1196, %1212 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1083 ], [ %1194, %1212 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1083 ], [ %1185, %1212 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1083 ], [ %1183, %1212 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1083 ], [ %1181, %1212 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1083 ], [ %1169, %1212 ]
  %1090 = icmp slt i32 %k18.3, %1088
  br i1 %1090, label %1091, label %1214

; <label>:1091                                    ; preds = %1089
  %1092 = sext i32 %k18.3 to i64
  %1093 = getelementptr inbounds i32* %249, i64 %1092
  %1094 = load i32* %1093, align 4
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds %struct.CompAtom* %36, i64 %1095
  %1097 = getelementptr inbounds %struct.CompAtom* %1096, i32 0, i32 0
  %1098 = getelementptr inbounds %class.Vector* %1097, i32 0, i32 0
  %1099 = load double* %1098, align 8
  %1100 = fsub double %303, %1099
  %1101 = fmul double %1100, %1100
  %1102 = getelementptr inbounds %struct.CompAtom* %1096, i32 0, i32 0
  %1103 = getelementptr inbounds %class.Vector* %1102, i32 0, i32 1
  %1104 = load double* %1103, align 8
  %1105 = fsub double %306, %1104
  %1106 = fmul double %1105, %1105
  %1107 = fadd double %1101, %1106
  %1108 = getelementptr inbounds %struct.CompAtom* %1096, i32 0, i32 0
  %1109 = getelementptr inbounds %class.Vector* %1108, i32 0, i32 2
  %1110 = load double* %1109, align 8
  %1111 = fsub double %309, %1110
  %1112 = fmul double %1111, %1111
  %1113 = fadd double %1107, %1112
  %1114 = fptrunc double %1113 to float
  %1115 = bitcast %union.anon.14* %r2f63 to float*
  store float %1114, float* %1115, align 4
  %1116 = bitcast %union.anon.14* %r2f63 to i32*
  %1117 = load i32* %1116, align 4
  %1118 = ashr i32 %1117, 17
  %1119 = add nsw i32 %1118, %24
  %1120 = mul nsw i32 16, %1119
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds double* %14, i64 %1121
  %1123 = getelementptr inbounds double* %1122, i64 8
  %1124 = getelementptr inbounds double* %1123, i64 0
  %1125 = load double* %1124, align 8
  %1126 = bitcast %union.anon.14* %r2f63 to i32*
  %1127 = load i32* %1126, align 4
  %1128 = and i32 %1127, -131072
  store i32 %1128, i32* %1126, align 4
  %1129 = getelementptr inbounds %struct.CompAtom* %1096, i32 0, i32 1
  %1130 = load float* %1129, align 4
  %1131 = fpext float %1130 to double
  %1132 = fmul double %510, %1131
  %1133 = bitcast %union.anon.14* %r2f63 to float*
  %1134 = load float* %1133, align 4
  %1135 = fpext float %1134 to double
  %1136 = fsub double %1113, %1135
  %1137 = getelementptr inbounds double* %1123, i64 1
  %1138 = load double* %1137, align 8
  %1139 = getelementptr inbounds double* %1123, i64 2
  %1140 = load double* %1139, align 8
  %1141 = getelementptr inbounds double* %1123, i64 3
  %1142 = load double* %1141, align 8
  %1143 = getelementptr inbounds double* %14, i64 12
  %1144 = mul nsw i32 16, %1119
  %1145 = sext i32 %1144 to i64
  %1146 = getelementptr inbounds double* %1143, i64 %1145
  %1147 = getelementptr inbounds double* %1146, i64 0
  %1148 = load double* %1147, align 8
  %1149 = fsub double %1125, %1148
  %1150 = getelementptr inbounds double* %1146, i64 1
  %1151 = load double* %1150, align 8
  %1152 = fsub double %1138, %1151
  %1153 = getelementptr inbounds double* %1146, i64 2
  %1154 = load double* %1153, align 8
  %1155 = fsub double %1140, %1154
  %1156 = getelementptr inbounds double* %1146, i64 3
  %1157 = load double* %1156, align 8
  %1158 = fsub double %1142, %1157
  %1159 = fmul double %1158, %1132
  %1160 = fmul double %1155, %1132
  %1161 = fmul double %1152, %1132
  %1162 = fmul double %1149, %1132
  %1163 = fmul double %1136, %1159
  %1164 = fadd double %1163, %1160
  %1165 = fmul double %1164, %1136
  %1166 = fadd double %1165, %1161
  %1167 = fmul double %1166, %1136
  %1168 = fadd double %1167, %1162
  %1169 = fadd double %fullElectEnergy.3, %1168
  %1170 = fmul double 3.000000e+00, %1136
  %1171 = fmul double %1170, %1159
  %1172 = fmul double 2.000000e+00, %1160
  %1173 = fadd double %1171, %1172
  %1174 = fmul double %1173, %1136
  %1175 = fadd double %1174, %1161
  %1176 = fmul double -2.000000e+00, %1175
  %1177 = sext i32 %1094 to i64
  %1178 = getelementptr inbounds %class.Vector* %269, i64 %1177
  %1179 = fmul double %1176, %1100
  %1180 = fmul double %1179, %1100
  %1181 = fadd double %fullElectVirial_xx.3, %1180
  %1182 = fmul double %1179, %1105
  %1183 = fadd double %fullElectVirial_xy.3, %1182
  %1184 = fmul double %1179, %1111
  %1185 = fadd double %fullElectVirial_xz.3, %1184
  %1186 = getelementptr inbounds %class.Vector* %311, i32 0, i32 0
  %1187 = load double* %1186, align 8
  %1188 = fadd double %1187, %1179
  store double %1188, double* %1186, align 8
  %1189 = getelementptr inbounds %class.Vector* %1178, i32 0, i32 0
  %1190 = load double* %1189, align 8
  %1191 = fsub double %1190, %1179
  store double %1191, double* %1189, align 8
  %1192 = fmul double %1176, %1105
  %1193 = fmul double %1192, %1105
  %1194 = fadd double %fullElectVirial_yy.3, %1193
  %1195 = fmul double %1192, %1111
  %1196 = fadd double %fullElectVirial_yz.3, %1195
  %1197 = getelementptr inbounds %class.Vector* %311, i32 0, i32 1
  %1198 = load double* %1197, align 8
  %1199 = fadd double %1198, %1192
  store double %1199, double* %1197, align 8
  %1200 = getelementptr inbounds %class.Vector* %1178, i32 0, i32 1
  %1201 = load double* %1200, align 8
  %1202 = fsub double %1201, %1192
  store double %1202, double* %1200, align 8
  %1203 = fmul double %1176, %1111
  %1204 = fmul double %1203, %1111
  %1205 = fadd double %fullElectVirial_zz.3, %1204
  %1206 = getelementptr inbounds %class.Vector* %311, i32 0, i32 2
  %1207 = load double* %1206, align 8
  %1208 = fadd double %1207, %1203
  store double %1208, double* %1206, align 8
  %1209 = getelementptr inbounds %class.Vector* %1178, i32 0, i32 2
  %1210 = load double* %1209, align 8
  %1211 = fsub double %1210, %1203
  store double %1211, double* %1209, align 8
  br label %1212

; <label>:1212                                    ; preds = %1091
  %1213 = add nsw i32 %k18.3, 1
  br label %1089

; <label>:1214                                    ; preds = %1089
  br label %1215

; <label>:1215                                    ; preds = %1214, %488, %339
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %339 ], [ %pairlistindex.1, %1214 ], [ %467, %488 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %339 ], [ %pairlistoffset.1, %1214 ], [ 0, %488 ]
  %pairCount.3 = phi i32 [ %335, %339 ], [ %pairCount.2, %1214 ], [ %pairCount.1, %488 ]
  %i.2 = phi i32 [ %341, %339 ], [ %i.1, %1214 ], [ %491, %488 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %339 ], [ %fullElectVirial_zz.3, %1214 ], [ %fullElectVirial_zz.0, %488 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %339 ], [ %fullElectVirial_yz.3, %1214 ], [ %fullElectVirial_yz.0, %488 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %339 ], [ %fullElectVirial_yy.3, %1214 ], [ %fullElectVirial_yy.0, %488 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %339 ], [ %fullElectVirial_xz.3, %1214 ], [ %fullElectVirial_xz.0, %488 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %339 ], [ %fullElectVirial_xy.3, %1214 ], [ %fullElectVirial_xy.0, %488 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %339 ], [ %fullElectVirial_xx.3, %1214 ], [ %fullElectVirial_xx.0, %488 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %339 ], [ %fullElectEnergy.3, %1214 ], [ %fullElectEnergy.0, %488 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %339 ], [ %vdwEnergy.2, %1214 ], [ %vdwEnergy.0, %488 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %339 ], [ %712, %1214 ], [ %exclChecksum.0, %488 ]
  %1216 = add nsw i32 %i.2, 1
  br label %283

; <label>:1217                                    ; preds = %283
  %1218 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1219 = icmp ne i32* %50, %1218
  br i1 %1219, label %1220, label %1225

; <label>:1220                                    ; preds = %1217
  %1221 = icmp eq i32* %50, null
  br i1 %1221, label %1224, label %1222

; <label>:1222                                    ; preds = %1220
  %1223 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1223) #8
  br label %1224

; <label>:1224                                    ; preds = %1222, %1220
  br label %1225

; <label>:1225                                    ; preds = %1224, %1217
  %1226 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1227 = icmp ne i32* %64, %1226
  br i1 %1227, label %1228, label %1233

; <label>:1228                                    ; preds = %1225
  %1229 = icmp eq i32* %64, null
  br i1 %1229, label %1232, label %1230

; <label>:1230                                    ; preds = %1228
  %1231 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1231) #8
  br label %1232

; <label>:1232                                    ; preds = %1230, %1228
  br label %1233

; <label>:1233                                    ; preds = %1232, %1225
  %1234 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1235 = icmp ne i32* %78, %1234
  br i1 %1235, label %1236, label %1241

; <label>:1236                                    ; preds = %1233
  %1237 = icmp eq i32* %78, null
  br i1 %1237, label %1240, label %1238

; <label>:1238                                    ; preds = %1236
  %1239 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1239) #8
  br label %1240

; <label>:1240                                    ; preds = %1238, %1236
  br label %1241

; <label>:1241                                    ; preds = %1240, %1233
  %1242 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1243 = icmp ne i32* %207, %1242
  br i1 %1243, label %1244, label %1249

; <label>:1244                                    ; preds = %1241
  %1245 = icmp eq i32* %207, null
  br i1 %1245, label %1248, label %1246

; <label>:1246                                    ; preds = %1244
  %1247 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %1247) #8
  br label %1248

; <label>:1248                                    ; preds = %1246, %1244
  br label %1249

; <label>:1249                                    ; preds = %1248, %1241
  %1250 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1251 = icmp ne i32* %221, %1250
  br i1 %1251, label %1252, label %1257

; <label>:1252                                    ; preds = %1249
  %1253 = icmp eq i32* %221, null
  br i1 %1253, label %1256, label %1254

; <label>:1254                                    ; preds = %1252
  %1255 = bitcast i32* %221 to i8*
  call void @_ZdaPv(i8* %1255) #8
  br label %1256

; <label>:1256                                    ; preds = %1254, %1252
  br label %1257

; <label>:1257                                    ; preds = %1256, %1249
  %1258 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1259 = icmp ne i32* %235, %1258
  br i1 %1259, label %1260, label %1265

; <label>:1260                                    ; preds = %1257
  %1261 = icmp eq i32* %235, null
  br i1 %1261, label %1264, label %1262

; <label>:1262                                    ; preds = %1260
  %1263 = bitcast i32* %235 to i8*
  call void @_ZdaPv(i8* %1263) #8
  br label %1264

; <label>:1264                                    ; preds = %1262, %1260
  br label %1265

; <label>:1265                                    ; preds = %1264, %1257
  %1266 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1267 = icmp ne i32* %249, %1266
  br i1 %1267, label %1268, label %1273

; <label>:1268                                    ; preds = %1265
  %1269 = icmp eq i32* %249, null
  br i1 %1269, label %1272, label %1270

; <label>:1270                                    ; preds = %1268
  %1271 = bitcast i32* %249 to i8*
  call void @_ZdaPv(i8* %1271) #8
  br label %1272

; <label>:1272                                    ; preds = %1270, %1268
  br label %1273

; <label>:1273                                    ; preds = %1272, %1265
  %1274 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1275 = icmp ne i32* %263, %1274
  br i1 %1275, label %1276, label %1281

; <label>:1276                                    ; preds = %1273
  %1277 = icmp eq i32* %263, null
  br i1 %1277, label %1280, label %1278

; <label>:1278                                    ; preds = %1276
  %1279 = bitcast i32* %263 to i8*
  call void @_ZdaPv(i8* %1279) #8
  br label %1280

; <label>:1280                                    ; preds = %1278, %1276
  br label %1281

; <label>:1281                                    ; preds = %1280, %1273
  %1282 = sitofp i32 %exclChecksum.0 to double
  %1283 = getelementptr inbounds double* %6, i64 22
  %1284 = load double* %1283, align 8
  %1285 = fadd double %1284, %1282
  store double %1285, double* %1283, align 8
  %1286 = getelementptr inbounds double* %6, i64 2
  %1287 = load double* %1286, align 8
  %1288 = fadd double %1287, %vdwEnergy.0
  store double %1288, double* %1286, align 8
  %1289 = getelementptr inbounds double* %6, i64 1
  %1290 = load double* %1289, align 8
  %1291 = fadd double %1290, %fullElectEnergy.0
  store double %1291, double* %1289, align 8
  %1292 = getelementptr inbounds double* %6, i64 12
  %1293 = load double* %1292, align 8
  %1294 = fadd double %1293, %fullElectVirial_xx.0
  store double %1294, double* %1292, align 8
  %1295 = getelementptr inbounds double* %6, i64 13
  %1296 = load double* %1295, align 8
  %1297 = fadd double %1296, %fullElectVirial_xy.0
  store double %1297, double* %1295, align 8
  %1298 = getelementptr inbounds double* %6, i64 14
  %1299 = load double* %1298, align 8
  %1300 = fadd double %1299, %fullElectVirial_xz.0
  store double %1300, double* %1298, align 8
  %1301 = getelementptr inbounds double* %6, i64 15
  %1302 = load double* %1301, align 8
  %1303 = fadd double %1302, %fullElectVirial_xy.0
  store double %1303, double* %1301, align 8
  %1304 = getelementptr inbounds double* %6, i64 16
  %1305 = load double* %1304, align 8
  %1306 = fadd double %1305, %fullElectVirial_yy.0
  store double %1306, double* %1304, align 8
  %1307 = getelementptr inbounds double* %6, i64 17
  %1308 = load double* %1307, align 8
  %1309 = fadd double %1308, %fullElectVirial_yz.0
  store double %1309, double* %1307, align 8
  %1310 = getelementptr inbounds double* %6, i64 18
  %1311 = load double* %1310, align 8
  %1312 = fadd double %1311, %fullElectVirial_xz.0
  store double %1312, double* %1310, align 8
  %1313 = getelementptr inbounds double* %6, i64 19
  %1314 = load double* %1313, align 8
  %1315 = fadd double %1314, %fullElectVirial_yz.0
  store double %1315, double* %1313, align 8
  %1316 = getelementptr inbounds double* %6, i64 20
  %1317 = load double* %1316, align 8
  %1318 = fadd double %1317, %fullElectVirial_zz.0
  store double %1318, double* %1316, align 8
  br label %1319

; <label>:1319                                    ; preds = %1281, %182, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil25calc_self_merge_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.31, align 4
  %r2f28 = alloca %union.anon.32, align 4
  %r2f60 = alloca %union.anon.33, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1337

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1337

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1239, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1239 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1239 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1239 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1239 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1239 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1239 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1240, %1239 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_zz.4, %1239 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yz.4, %1239 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yy.4, %1239 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xz.4, %1239 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xy.4, %1239 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xx.4, %1239 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1239 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1241

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1239

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %533 = load float* %532, align 4
  %534 = fpext float %533 to double
  %535 = fmul double 3.320636e+02, %534
  %536 = fmul double %535, %15
  %537 = fmul double %536, %9
  %538 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %539 = load i32* %538, align 4
  %540 = and i32 %539, 4194303
  %541 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %540)
  %542 = zext i16 %541 to i32
  %543 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %542)
  %544 = icmp ne i32 %531, 0
  br i1 %544, label %545, label %607

; <label>:545                                     ; preds = %529
  br label %546

; <label>:546                                     ; preds = %604, %545
  %pli3.0 = phi i32* [ %202, %545 ], [ %pli3.2, %604 ]
  %plin.0 = phi i32* [ %216, %545 ], [ %plin.2, %604 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %545 ], [ %605, %604 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %545 ], [ %exclChecksum.3, %604 ]
  %547 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %547, label %548, label %606

; <label>:548                                     ; preds = %546
  %549 = sext i32 %k.0 to i64
  %550 = getelementptr inbounds i32* %188, i64 %549
  %551 = load i32* %550, align 4
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtom* %36, i64 %552
  %554 = getelementptr inbounds %struct.CompAtom* %553, i32 0, i32 0
  %555 = getelementptr inbounds %class.Vector* %554, i32 0, i32 0
  %556 = load double* %555, align 8
  %557 = fsub double %287, %556
  %558 = fmul double %557, %557
  %559 = sext i32 %551 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %36, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 1
  %563 = load double* %562, align 8
  %564 = fsub double %290, %563
  %565 = fmul double %564, %564
  %566 = fadd double %558, %565
  %567 = sext i32 %551 to i64
  %568 = getelementptr inbounds %struct.CompAtom* %36, i64 %567
  %569 = getelementptr inbounds %struct.CompAtom* %568, i32 0, i32 0
  %570 = getelementptr inbounds %class.Vector* %569, i32 0, i32 2
  %571 = load double* %570, align 8
  %572 = fsub double %293, %571
  %573 = fmul double %572, %572
  %574 = fadd double %566, %573
  %575 = sext i32 %551 to i64
  %576 = getelementptr inbounds %struct.CompAtom* %36, i64 %575
  %577 = getelementptr inbounds %struct.CompAtom* %576, i32 0, i32 2
  %578 = load i32* %577, align 4
  %579 = lshr i32 %578, 26
  %580 = and i32 %579, 1
  %581 = icmp ne i32 %580, 0
  br i1 %581, label %603, label %582

; <label>:582                                     ; preds = %548
  %583 = fcmp ole double %574, %7
  br i1 %583, label %584, label %603

; <label>:584                                     ; preds = %582
  %585 = fcmp ole double %574, %21
  br i1 %585, label %586, label %589

; <label>:586                                     ; preds = %584
  %587 = add nsw i32 %exclChecksum.1, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %603, label %589

; <label>:589                                     ; preds = %586, %584
  %exclChecksum.2 = phi i32 [ %587, %586 ], [ %exclChecksum.1, %584 ]
  %590 = sext i32 %551 to i64
  %591 = getelementptr inbounds %struct.CompAtom* %36, i64 %590
  %592 = getelementptr inbounds %struct.CompAtom* %591, i32 0, i32 2
  %593 = load i32* %592, align 4
  %594 = and i32 %593, 4194303
  %595 = icmp sge i32 %594, %277
  br i1 %595, label %596, label %600

; <label>:596                                     ; preds = %589
  %597 = icmp sle i32 %594, %279
  br i1 %597, label %598, label %600

; <label>:598                                     ; preds = %596
  %599 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %551, i32* %pli3.0, align 4
  br label %602

; <label>:600                                     ; preds = %596, %589
  %601 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %551, i32* %plin.0, align 4
  br label %602

; <label>:602                                     ; preds = %600, %598
  %pli3.1 = phi i32* [ %599, %598 ], [ %pli3.0, %600 ]
  %plin.1 = phi i32* [ %plin.0, %598 ], [ %601, %600 ]
  br label %603

; <label>:603                                     ; preds = %602, %586, %582, %548
  %pli3.2 = phi i32* [ %pli3.0, %548 ], [ %pli3.0, %586 ], [ %pli3.1, %602 ], [ %pli3.0, %582 ]
  %plin.2 = phi i32* [ %plin.0, %548 ], [ %plin.0, %586 ], [ %plin.1, %602 ], [ %plin.0, %582 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %548 ], [ %587, %586 ], [ %exclChecksum.2, %602 ], [ %exclChecksum.1, %582 ]
  br label %604

; <label>:604                                     ; preds = %603
  %605 = add nsw i32 %k.0, 1
  br label %546

; <label>:606                                     ; preds = %546
  br label %686

; <label>:607                                     ; preds = %529
  %608 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %608, label %609, label %685

; <label>:609                                     ; preds = %607
  %610 = sext i32 %pairlistoffset.1 to i64
  %611 = getelementptr inbounds i32* %188, i64 %610
  %612 = load i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %struct.CompAtom* %36, i64 %613
  %615 = getelementptr inbounds %struct.CompAtom* %614, i32 0, i32 0
  %616 = getelementptr inbounds %class.Vector* %615, i32 0, i32 0
  %617 = load double* %616, align 8
  %618 = sext i32 %612 to i64
  %619 = getelementptr inbounds %struct.CompAtom* %36, i64 %618
  %620 = getelementptr inbounds %struct.CompAtom* %619, i32 0, i32 0
  %621 = getelementptr inbounds %class.Vector* %620, i32 0, i32 1
  %622 = load double* %621, align 8
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 2
  %627 = load double* %626, align 8
  %628 = sext i32 %612 to i64
  %629 = getelementptr inbounds %struct.CompAtom* %36, i64 %628
  %630 = getelementptr inbounds %struct.CompAtom* %629, i32 0, i32 2
  %631 = load i32* %630, align 4
  %632 = and i32 %631, 4194303
  br label %633

; <label>:633                                     ; preds = %678, %609
  %pli3.3 = phi i32* [ %202, %609 ], [ %pli3.5, %678 ]
  %plin.3 = phi i32* [ %216, %609 ], [ %plin.5, %678 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %609 ], [ %636, %678 ]
  %j210.0 = phi i32 [ %612, %609 ], [ %639, %678 ]
  %p_j_x11.0 = phi double [ %617, %609 ], [ %646, %678 ]
  %p_j_y12.0 = phi double [ %622, %609 ], [ %654, %678 ]
  %p_j_z13.0 = phi double [ %627, %609 ], [ %662, %678 ]
  %atom214.0 = phi i32 [ %632, %609 ], [ %683, %678 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %609 ], [ %exclChecksum.6, %678 ]
  %634 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %634, label %635, label %684

; <label>:635                                     ; preds = %633
  %636 = add nsw i32 %k9.0, 1
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i32* %188, i64 %637
  %639 = load i32* %638, align 4
  %640 = fsub double %287, %p_j_x11.0
  %641 = fmul double %640, %640
  %642 = sext i32 %639 to i64
  %643 = getelementptr inbounds %struct.CompAtom* %36, i64 %642
  %644 = getelementptr inbounds %struct.CompAtom* %643, i32 0, i32 0
  %645 = getelementptr inbounds %class.Vector* %644, i32 0, i32 0
  %646 = load double* %645, align 8
  %647 = fsub double %290, %p_j_y12.0
  %648 = fmul double %647, %647
  %649 = fadd double %641, %648
  %650 = sext i32 %639 to i64
  %651 = getelementptr inbounds %struct.CompAtom* %36, i64 %650
  %652 = getelementptr inbounds %struct.CompAtom* %651, i32 0, i32 0
  %653 = getelementptr inbounds %class.Vector* %652, i32 0, i32 1
  %654 = load double* %653, align 8
  %655 = fsub double %293, %p_j_z13.0
  %656 = fmul double %655, %655
  %657 = fadd double %649, %656
  %658 = sext i32 %639 to i64
  %659 = getelementptr inbounds %struct.CompAtom* %36, i64 %658
  %660 = getelementptr inbounds %struct.CompAtom* %659, i32 0, i32 0
  %661 = getelementptr inbounds %class.Vector* %660, i32 0, i32 2
  %662 = load double* %661, align 8
  %663 = fcmp ole double %657, %7
  br i1 %663, label %664, label %678

; <label>:664                                     ; preds = %635
  %665 = fcmp ole double %657, %21
  br i1 %665, label %666, label %669

; <label>:666                                     ; preds = %664
  %667 = add nsw i32 %exclChecksum.4, 1
  %668 = icmp ne i32 %667, 0
  br i1 %668, label %678, label %669

; <label>:669                                     ; preds = %666, %664
  %exclChecksum.5 = phi i32 [ %667, %666 ], [ %exclChecksum.4, %664 ]
  %670 = icmp sge i32 %atom214.0, %277
  br i1 %670, label %671, label %675

; <label>:671                                     ; preds = %669
  %672 = icmp sle i32 %atom214.0, %279
  br i1 %672, label %673, label %675

; <label>:673                                     ; preds = %671
  %674 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %677

; <label>:675                                     ; preds = %671, %669
  %676 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %677

; <label>:677                                     ; preds = %675, %673
  %pli3.4 = phi i32* [ %674, %673 ], [ %pli3.3, %675 ]
  %plin.4 = phi i32* [ %plin.3, %673 ], [ %676, %675 ]
  br label %678

; <label>:678                                     ; preds = %677, %666, %635
  %pli3.5 = phi i32* [ %pli3.3, %666 ], [ %pli3.4, %677 ], [ %pli3.3, %635 ]
  %plin.5 = phi i32* [ %plin.3, %666 ], [ %plin.4, %677 ], [ %plin.3, %635 ]
  %exclChecksum.6 = phi i32 [ %667, %666 ], [ %exclChecksum.5, %677 ], [ %exclChecksum.4, %635 ]
  %679 = sext i32 %639 to i64
  %680 = getelementptr inbounds %struct.CompAtom* %36, i64 %679
  %681 = getelementptr inbounds %struct.CompAtom* %680, i32 0, i32 2
  %682 = load i32* %681, align 4
  %683 = and i32 %682, 4194303
  br label %633

; <label>:684                                     ; preds = %633
  br label %685

; <label>:685                                     ; preds = %684, %607
  %pli3.6 = phi i32* [ %pli3.3, %684 ], [ %202, %607 ]
  %plin.6 = phi i32* [ %plin.3, %684 ], [ %216, %607 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %684 ], [ %exclChecksum.0, %607 ]
  br label %686

; <label>:686                                     ; preds = %685, %606
  %pli3.7 = phi i32* [ %pli3.0, %606 ], [ %pli3.6, %685 ]
  %plin.7 = phi i32* [ %plin.0, %606 ], [ %plin.6, %685 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %606 ], [ %exclChecksum.7, %685 ]
  %687 = ptrtoint i32* %pli3.7 to i64
  %688 = ptrtoint i32* %202 to i64
  %689 = sub i64 %687, %688
  %690 = sdiv exact i64 %689, 4
  %691 = trunc i64 %690 to i32
  %692 = icmp ne i32 %691, 0
  br i1 %692, label %693, label %700

; <label>:693                                     ; preds = %686
  %694 = sub nsw i32 %691, 1
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i32* %202, i64 %695
  %697 = load i32* %696, align 4
  %698 = sext i32 %691 to i64
  %699 = getelementptr inbounds i32* %202, i64 %698
  store i32 %697, i32* %699, align 4
  br label %700

; <label>:700                                     ; preds = %693, %686
  br label %701

; <label>:701                                     ; preds = %712, %700
  %plix.0 = phi i32* [ %230, %700 ], [ %710, %712 ]
  %pln.0 = phi i32* [ %216, %700 ], [ %713, %712 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %700 ], [ %711, %712 ]
  %702 = icmp ult i32* %pln.0, %plin.7
  br i1 %702, label %703, label %706

; <label>:703                                     ; preds = %701
  %704 = load i32* %pln.0, align 4
  %705 = icmp slt i32 %704, %j_hgroup.2
  br label %706

; <label>:706                                     ; preds = %703, %701
  %707 = phi i1 [ false, %701 ], [ %705, %703 ]
  br i1 %707, label %708, label %714

; <label>:708                                     ; preds = %706
  %709 = load i32* %pln.0, align 4
  %710 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %709, i32* %plix.0, align 4
  %711 = add nsw i32 %exclChecksum.9, -1
  br label %712

; <label>:712                                     ; preds = %708
  %713 = getelementptr inbounds i32* %pln.0, i32 1
  br label %701

; <label>:714                                     ; preds = %706
  br label %715

; <label>:715                                     ; preds = %730, %714
  %plix.1 = phi i32* [ %plix.0, %714 ], [ %728, %730 ]
  %k17.0 = phi i32 [ 0, %714 ], [ %731, %730 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %714 ], [ %729, %730 ]
  %716 = icmp slt i32 %k17.0, %691
  br i1 %716, label %717, label %722

; <label>:717                                     ; preds = %715
  %718 = sext i32 %k17.0 to i64
  %719 = getelementptr inbounds i32* %202, i64 %718
  %720 = load i32* %719, align 4
  %721 = icmp slt i32 %720, %j_hgroup.2
  br label %722

; <label>:722                                     ; preds = %717, %715
  %723 = phi i1 [ false, %715 ], [ %721, %717 ]
  br i1 %723, label %724, label %732

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %202, i64 %725
  %727 = load i32* %726, align 4
  %728 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %727, i32* %plix.1, align 4
  %729 = add nsw i32 %exclChecksum.10, -1
  br label %730

; <label>:730                                     ; preds = %724
  %731 = add nsw i32 %k17.0, 1
  br label %715

; <label>:732                                     ; preds = %722
  br label %733

; <label>:733                                     ; preds = %755, %732
  %plin.8 = phi i32* [ %plin.7, %732 ], [ %plin.9, %755 ]
  %plix.2 = phi i32* [ %plix.1, %732 ], [ %plix.3, %755 ]
  %plim.0 = phi i32* [ %244, %732 ], [ %plim.1, %755 ]
  %k17.1 = phi i32 [ %k17.0, %732 ], [ %756, %755 ]
  %734 = icmp slt i32 %k17.1, %691
  br i1 %734, label %735, label %757

; <label>:735                                     ; preds = %733
  %736 = sext i32 %k17.1 to i64
  %737 = getelementptr inbounds i32* %202, i64 %736
  %738 = load i32* %737, align 4
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds %struct.CompAtom* %36, i64 %739
  %741 = getelementptr inbounds %struct.CompAtom* %740, i32 0, i32 2
  %742 = load i32* %741, align 4
  %743 = and i32 %742, 4194303
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8* %284, i64 %744
  %746 = load i8* %745, align 1
  %747 = sext i8 %746 to i32
  switch i32 %747, label %754 [
    i32 0, label %748
    i32 1, label %750
    i32 2, label %752
  ]

; <label>:748                                     ; preds = %735
  %749 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %738, i32* %plin.8, align 4
  br label %754

; <label>:750                                     ; preds = %735
  %751 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %738, i32* %plix.2, align 4
  br label %754

; <label>:752                                     ; preds = %735
  %753 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %738, i32* %plim.0, align 4
  br label %754

; <label>:754                                     ; preds = %752, %750, %748, %735
  %plin.9 = phi i32* [ %plin.8, %735 ], [ %plin.8, %752 ], [ %plin.8, %750 ], [ %749, %748 ]
  %plix.3 = phi i32* [ %plix.2, %735 ], [ %plix.2, %752 ], [ %751, %750 ], [ %plix.2, %748 ]
  %plim.1 = phi i32* [ %plim.0, %735 ], [ %753, %752 ], [ %plim.0, %750 ], [ %plim.0, %748 ]
  br label %755

; <label>:755                                     ; preds = %754
  %756 = add nsw i32 %k17.1, 1
  br label %733

; <label>:757                                     ; preds = %733
  %758 = ptrtoint i32* %plix.2 to i64
  %759 = ptrtoint i32* %230 to i64
  %760 = sub i64 %758, %759
  %761 = sdiv exact i64 %760, 4
  %762 = sext i32 %exclChecksum.10 to i64
  %763 = add nsw i64 %762, %761
  %764 = trunc i64 %763 to i32
  %765 = ptrtoint i32* %plim.0 to i64
  %766 = ptrtoint i32* %244 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %764 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plin.8 to i64
  %773 = ptrtoint i32* %pln.0 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = trunc i64 %775 to i32
  br label %777

; <label>:777                                     ; preds = %930, %757
  %k17.2 = phi i32 [ 0, %757 ], [ %931, %930 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %757 ], [ %923, %930 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %757 ], [ %914, %930 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %757 ], [ %912, %930 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %757 ], [ %903, %930 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %757 ], [ %901, %930 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %757 ], [ %899, %930 ]
  %778 = icmp slt i32 %k17.2, %776
  br i1 %778, label %779, label %932

; <label>:779                                     ; preds = %777
  %780 = sext i32 %k17.2 to i64
  %781 = getelementptr inbounds i32* %pln.0, i64 %780
  %782 = load i32* %781, align 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds %struct.CompAtom* %36, i64 %783
  %785 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %786 = getelementptr inbounds %class.Vector* %785, i32 0, i32 0
  %787 = load double* %786, align 8
  %788 = fsub double %287, %787
  %789 = fmul double %788, %788
  %790 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %791 = getelementptr inbounds %class.Vector* %790, i32 0, i32 1
  %792 = load double* %791, align 8
  %793 = fsub double %290, %792
  %794 = fmul double %793, %793
  %795 = fadd double %789, %794
  %796 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %797 = getelementptr inbounds %class.Vector* %796, i32 0, i32 2
  %798 = load double* %797, align 8
  %799 = fsub double %293, %798
  %800 = fmul double %799, %799
  %801 = fadd double %795, %800
  %802 = fptrunc double %801 to float
  %803 = bitcast %union.anon.31* %r2f to float*
  store float %802, float* %803, align 4
  %804 = bitcast %union.anon.31* %r2f to i32*
  %805 = load i32* %804, align 4
  %806 = ashr i32 %805, 17
  %807 = add nsw i32 %806, %24
  %808 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 2
  %809 = load i32* %808, align 4
  %810 = and i32 %809, 4194303
  %811 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %810)
  %812 = zext i16 %811 to i32
  %813 = mul nsw i32 2, %812
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %814
  %816 = mul nsw i32 16, %807
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds double* %14, i64 %817
  %819 = getelementptr inbounds double* %818, i64 0
  %820 = load double* %819, align 8
  %821 = mul nsw i32 16, %807
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds double* %14, i64 %822
  %824 = getelementptr inbounds double* %823, i64 4
  %825 = getelementptr inbounds double* %824, i64 0
  %826 = load double* %825, align 8
  %827 = mul nsw i32 16, %807
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds double* %14, i64 %828
  %830 = getelementptr inbounds double* %829, i64 8
  %831 = getelementptr inbounds double* %830, i64 0
  %832 = load double* %831, align 8
  %833 = bitcast %union.anon.31* %r2f to i32*
  %834 = load i32* %833, align 4
  %835 = and i32 %834, -131072
  store i32 %835, i32* %833, align 4
  %836 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 1
  %837 = load float* %836, align 4
  %838 = fpext float %837 to double
  %839 = fmul double %537, %838
  %840 = bitcast %union.anon.31* %r2f to float*
  %841 = load float* %840, align 4
  %842 = fpext float %841 to double
  %843 = fsub double %801, %842
  %844 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 0
  %845 = load double* %844, align 8
  %846 = fmul double %15, %845
  %847 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 1
  %848 = load double* %847, align 8
  %849 = fmul double %15, %848
  %850 = fmul double %846, %820
  %851 = fmul double %849, %826
  %852 = fsub double %850, %851
  %853 = getelementptr inbounds double* %818, i64 3
  %854 = load double* %853, align 8
  %855 = fmul double %846, %854
  %856 = getelementptr inbounds double* %824, i64 3
  %857 = load double* %856, align 8
  %858 = fmul double %849, %857
  %859 = fsub double %855, %858
  %860 = getelementptr inbounds double* %818, i64 2
  %861 = load double* %860, align 8
  %862 = fmul double %846, %861
  %863 = getelementptr inbounds double* %824, i64 2
  %864 = load double* %863, align 8
  %865 = fmul double %849, %864
  %866 = fsub double %862, %865
  %867 = getelementptr inbounds double* %818, i64 1
  %868 = load double* %867, align 8
  %869 = fmul double %846, %868
  %870 = getelementptr inbounds double* %824, i64 1
  %871 = load double* %870, align 8
  %872 = fmul double %849, %871
  %873 = fsub double %869, %872
  %874 = getelementptr inbounds double* %830, i64 1
  %875 = load double* %874, align 8
  %876 = getelementptr inbounds double* %830, i64 2
  %877 = load double* %876, align 8
  %878 = getelementptr inbounds double* %830, i64 3
  %879 = load double* %878, align 8
  %880 = fmul double %879, %839
  %881 = fmul double %877, %839
  %882 = fmul double %875, %839
  %883 = fmul double %832, %839
  %884 = fadd double %880, %859
  %885 = fadd double %881, %866
  %886 = fadd double %882, %873
  %887 = fadd double %883, %852
  %888 = fmul double 3.000000e+00, %843
  %889 = fmul double %888, %884
  %890 = fmul double 2.000000e+00, %885
  %891 = fadd double %889, %890
  %892 = fmul double %891, %843
  %893 = fadd double %892, %886
  %894 = fmul double -2.000000e+00, %893
  %895 = sext i32 %782 to i64
  %896 = getelementptr inbounds %class.Vector* %250, i64 %895
  %897 = fmul double %894, %788
  %898 = fmul double %897, %788
  %899 = fadd double %fullElectVirial_xx.1, %898
  %900 = fmul double %897, %793
  %901 = fadd double %fullElectVirial_xy.1, %900
  %902 = fmul double %897, %799
  %903 = fadd double %fullElectVirial_xz.1, %902
  %904 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %905 = load double* %904, align 8
  %906 = fadd double %905, %897
  store double %906, double* %904, align 8
  %907 = getelementptr inbounds %class.Vector* %896, i32 0, i32 0
  %908 = load double* %907, align 8
  %909 = fsub double %908, %897
  store double %909, double* %907, align 8
  %910 = fmul double %894, %793
  %911 = fmul double %910, %793
  %912 = fadd double %fullElectVirial_yy.1, %911
  %913 = fmul double %910, %799
  %914 = fadd double %fullElectVirial_yz.1, %913
  %915 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %916 = load double* %915, align 8
  %917 = fadd double %916, %910
  store double %917, double* %915, align 8
  %918 = getelementptr inbounds %class.Vector* %896, i32 0, i32 1
  %919 = load double* %918, align 8
  %920 = fsub double %919, %910
  store double %920, double* %918, align 8
  %921 = fmul double %894, %799
  %922 = fmul double %921, %799
  %923 = fadd double %fullElectVirial_zz.1, %922
  %924 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %925 = load double* %924, align 8
  %926 = fadd double %925, %921
  store double %926, double* %924, align 8
  %927 = getelementptr inbounds %class.Vector* %896, i32 0, i32 2
  %928 = load double* %927, align 8
  %929 = fsub double %928, %921
  store double %929, double* %927, align 8
  br label %930

; <label>:930                                     ; preds = %779
  %931 = add nsw i32 %k17.2, 1
  br label %777

; <label>:932                                     ; preds = %777
  %933 = ptrtoint i32* %plim.0 to i64
  %934 = ptrtoint i32* %244 to i64
  %935 = sub i64 %933, %934
  %936 = sdiv exact i64 %935, 4
  %937 = trunc i64 %936 to i32
  br label %938

; <label>:938                                     ; preds = %1112, %932
  %k17.3 = phi i32 [ 0, %932 ], [ %1113, %1112 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %932 ], [ %1105, %1112 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %932 ], [ %1096, %1112 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %932 ], [ %1094, %1112 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %932 ], [ %1085, %1112 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %932 ], [ %1083, %1112 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %932 ], [ %1081, %1112 ]
  %939 = icmp slt i32 %k17.3, %937
  br i1 %939, label %940, label %1114

; <label>:940                                     ; preds = %938
  %941 = sext i32 %k17.3 to i64
  %942 = getelementptr inbounds i32* %244, i64 %941
  %943 = load i32* %942, align 4
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds %struct.CompAtom* %36, i64 %944
  %946 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 0
  %947 = getelementptr inbounds %class.Vector* %946, i32 0, i32 0
  %948 = load double* %947, align 8
  %949 = fsub double %287, %948
  %950 = fmul double %949, %949
  %951 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 0
  %952 = getelementptr inbounds %class.Vector* %951, i32 0, i32 1
  %953 = load double* %952, align 8
  %954 = fsub double %290, %953
  %955 = fmul double %954, %954
  %956 = fadd double %950, %955
  %957 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 0
  %958 = getelementptr inbounds %class.Vector* %957, i32 0, i32 2
  %959 = load double* %958, align 8
  %960 = fsub double %293, %959
  %961 = fmul double %960, %960
  %962 = fadd double %956, %961
  %963 = fptrunc double %962 to float
  %964 = bitcast %union.anon.32* %r2f28 to float*
  store float %963, float* %964, align 4
  %965 = bitcast %union.anon.32* %r2f28 to i32*
  %966 = load i32* %965, align 4
  %967 = ashr i32 %966, 17
  %968 = add nsw i32 %967, %24
  %969 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 2
  %970 = load i32* %969, align 4
  %971 = and i32 %970, 4194303
  %972 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %971)
  %973 = zext i16 %972 to i32
  %974 = mul nsw i32 2, %973
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %975
  %977 = getelementptr inbounds %"struct.LJTable::TableEntry"* %976, i64 1
  %978 = mul nsw i32 16, %968
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds double* %14, i64 %979
  %981 = getelementptr inbounds double* %980, i64 0
  %982 = load double* %981, align 8
  %983 = mul nsw i32 16, %968
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds double* %14, i64 %984
  %986 = getelementptr inbounds double* %985, i64 4
  %987 = getelementptr inbounds double* %986, i64 0
  %988 = load double* %987, align 8
  %989 = mul nsw i32 16, %968
  %990 = sext i32 %989 to i64
  %991 = getelementptr inbounds double* %14, i64 %990
  %992 = getelementptr inbounds double* %991, i64 8
  %993 = getelementptr inbounds double* %992, i64 0
  %994 = load double* %993, align 8
  %995 = bitcast %union.anon.32* %r2f28 to i32*
  %996 = load i32* %995, align 4
  %997 = and i32 %996, -131072
  store i32 %997, i32* %995, align 4
  %998 = getelementptr inbounds %struct.CompAtom* %945, i32 0, i32 1
  %999 = load float* %998, align 4
  %1000 = fpext float %999 to double
  %1001 = fmul double %537, %1000
  %1002 = bitcast %union.anon.32* %r2f28 to float*
  %1003 = load float* %1002, align 4
  %1004 = fpext float %1003 to double
  %1005 = fsub double %962, %1004
  %1006 = getelementptr inbounds %"struct.LJTable::TableEntry"* %977, i32 0, i32 0
  %1007 = load double* %1006, align 8
  %1008 = fmul double %15, %1007
  %1009 = getelementptr inbounds %"struct.LJTable::TableEntry"* %977, i32 0, i32 1
  %1010 = load double* %1009, align 8
  %1011 = fmul double %15, %1010
  %1012 = fmul double %1008, %982
  %1013 = fmul double %1011, %988
  %1014 = fsub double %1012, %1013
  %1015 = getelementptr inbounds double* %980, i64 3
  %1016 = load double* %1015, align 8
  %1017 = fmul double %1008, %1016
  %1018 = getelementptr inbounds double* %986, i64 3
  %1019 = load double* %1018, align 8
  %1020 = fmul double %1011, %1019
  %1021 = fsub double %1017, %1020
  %1022 = getelementptr inbounds double* %980, i64 2
  %1023 = load double* %1022, align 8
  %1024 = fmul double %1008, %1023
  %1025 = getelementptr inbounds double* %986, i64 2
  %1026 = load double* %1025, align 8
  %1027 = fmul double %1011, %1026
  %1028 = fsub double %1024, %1027
  %1029 = getelementptr inbounds double* %980, i64 1
  %1030 = load double* %1029, align 8
  %1031 = fmul double %1008, %1030
  %1032 = getelementptr inbounds double* %986, i64 1
  %1033 = load double* %1032, align 8
  %1034 = fmul double %1011, %1033
  %1035 = fsub double %1031, %1034
  %1036 = getelementptr inbounds double* %992, i64 1
  %1037 = load double* %1036, align 8
  %1038 = getelementptr inbounds double* %992, i64 2
  %1039 = load double* %1038, align 8
  %1040 = getelementptr inbounds double* %992, i64 3
  %1041 = load double* %1040, align 8
  %1042 = getelementptr inbounds double* %14, i64 12
  %1043 = mul nsw i32 16, %968
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds double* %1042, i64 %1044
  %1046 = getelementptr inbounds double* %1045, i64 0
  %1047 = load double* %1046, align 8
  %1048 = fmul double %17, %1047
  %1049 = fsub double %994, %1048
  %1050 = getelementptr inbounds double* %1045, i64 1
  %1051 = load double* %1050, align 8
  %1052 = fmul double %17, %1051
  %1053 = fsub double %1037, %1052
  %1054 = getelementptr inbounds double* %1045, i64 2
  %1055 = load double* %1054, align 8
  %1056 = fmul double %17, %1055
  %1057 = fsub double %1039, %1056
  %1058 = getelementptr inbounds double* %1045, i64 3
  %1059 = load double* %1058, align 8
  %1060 = fmul double %17, %1059
  %1061 = fsub double %1041, %1060
  %1062 = fmul double %1061, %1001
  %1063 = fmul double %1057, %1001
  %1064 = fmul double %1053, %1001
  %1065 = fmul double %1049, %1001
  %1066 = fadd double %1062, %1021
  %1067 = fadd double %1063, %1028
  %1068 = fadd double %1064, %1035
  %1069 = fadd double %1065, %1014
  %1070 = fmul double 3.000000e+00, %1005
  %1071 = fmul double %1070, %1066
  %1072 = fmul double 2.000000e+00, %1067
  %1073 = fadd double %1071, %1072
  %1074 = fmul double %1073, %1005
  %1075 = fadd double %1074, %1068
  %1076 = fmul double -2.000000e+00, %1075
  %1077 = sext i32 %943 to i64
  %1078 = getelementptr inbounds %class.Vector* %250, i64 %1077
  %1079 = fmul double %1076, %949
  %1080 = fmul double %1079, %949
  %1081 = fadd double %fullElectVirial_xx.2, %1080
  %1082 = fmul double %1079, %954
  %1083 = fadd double %fullElectVirial_xy.2, %1082
  %1084 = fmul double %1079, %960
  %1085 = fadd double %fullElectVirial_xz.2, %1084
  %1086 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1087 = load double* %1086, align 8
  %1088 = fadd double %1087, %1079
  store double %1088, double* %1086, align 8
  %1089 = getelementptr inbounds %class.Vector* %1078, i32 0, i32 0
  %1090 = load double* %1089, align 8
  %1091 = fsub double %1090, %1079
  store double %1091, double* %1089, align 8
  %1092 = fmul double %1076, %954
  %1093 = fmul double %1092, %954
  %1094 = fadd double %fullElectVirial_yy.2, %1093
  %1095 = fmul double %1092, %960
  %1096 = fadd double %fullElectVirial_yz.2, %1095
  %1097 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1098 = load double* %1097, align 8
  %1099 = fadd double %1098, %1092
  store double %1099, double* %1097, align 8
  %1100 = getelementptr inbounds %class.Vector* %1078, i32 0, i32 1
  %1101 = load double* %1100, align 8
  %1102 = fsub double %1101, %1092
  store double %1102, double* %1100, align 8
  %1103 = fmul double %1076, %960
  %1104 = fmul double %1103, %960
  %1105 = fadd double %fullElectVirial_zz.2, %1104
  %1106 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1107 = load double* %1106, align 8
  %1108 = fadd double %1107, %1103
  store double %1108, double* %1106, align 8
  %1109 = getelementptr inbounds %class.Vector* %1078, i32 0, i32 2
  %1110 = load double* %1109, align 8
  %1111 = fsub double %1110, %1103
  store double %1111, double* %1109, align 8
  br label %1112

; <label>:1112                                    ; preds = %940
  %1113 = add nsw i32 %k17.3, 1
  br label %938

; <label>:1114                                    ; preds = %938
  %1115 = ptrtoint i32* %plix.2 to i64
  %1116 = ptrtoint i32* %230 to i64
  %1117 = sub i64 %1115, %1116
  %1118 = sdiv exact i64 %1117, 4
  %1119 = trunc i64 %1118 to i32
  br label %1120

; <label>:1120                                    ; preds = %1236, %1114
  %k17.4 = phi i32 [ 0, %1114 ], [ %1237, %1236 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1114 ], [ %1229, %1236 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1114 ], [ %1220, %1236 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1114 ], [ %1218, %1236 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1114 ], [ %1209, %1236 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1114 ], [ %1207, %1236 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1114 ], [ %1205, %1236 ]
  %1121 = icmp slt i32 %k17.4, %1119
  br i1 %1121, label %1122, label %1238

; <label>:1122                                    ; preds = %1120
  %1123 = sext i32 %k17.4 to i64
  %1124 = getelementptr inbounds i32* %230, i64 %1123
  %1125 = load i32* %1124, align 4
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds %struct.CompAtom* %36, i64 %1126
  %1128 = getelementptr inbounds %struct.CompAtom* %1127, i32 0, i32 0
  %1129 = getelementptr inbounds %class.Vector* %1128, i32 0, i32 0
  %1130 = load double* %1129, align 8
  %1131 = fsub double %287, %1130
  %1132 = fmul double %1131, %1131
  %1133 = getelementptr inbounds %struct.CompAtom* %1127, i32 0, i32 0
  %1134 = getelementptr inbounds %class.Vector* %1133, i32 0, i32 1
  %1135 = load double* %1134, align 8
  %1136 = fsub double %290, %1135
  %1137 = fmul double %1136, %1136
  %1138 = fadd double %1132, %1137
  %1139 = getelementptr inbounds %struct.CompAtom* %1127, i32 0, i32 0
  %1140 = getelementptr inbounds %class.Vector* %1139, i32 0, i32 2
  %1141 = load double* %1140, align 8
  %1142 = fsub double %293, %1141
  %1143 = fmul double %1142, %1142
  %1144 = fadd double %1138, %1143
  %1145 = fptrunc double %1144 to float
  %1146 = bitcast %union.anon.33* %r2f60 to float*
  store float %1145, float* %1146, align 4
  %1147 = bitcast %union.anon.33* %r2f60 to i32*
  %1148 = load i32* %1147, align 4
  %1149 = ashr i32 %1148, 17
  %1150 = add nsw i32 %1149, %24
  %1151 = mul nsw i32 16, %1150
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds double* %14, i64 %1152
  %1154 = getelementptr inbounds double* %1153, i64 8
  %1155 = getelementptr inbounds double* %1154, i64 0
  %1156 = load double* %1155, align 8
  %1157 = bitcast %union.anon.33* %r2f60 to i32*
  %1158 = load i32* %1157, align 4
  %1159 = and i32 %1158, -131072
  store i32 %1159, i32* %1157, align 4
  %1160 = getelementptr inbounds %struct.CompAtom* %1127, i32 0, i32 1
  %1161 = load float* %1160, align 4
  %1162 = fpext float %1161 to double
  %1163 = fmul double %537, %1162
  %1164 = bitcast %union.anon.33* %r2f60 to float*
  %1165 = load float* %1164, align 4
  %1166 = fpext float %1165 to double
  %1167 = fsub double %1144, %1166
  %1168 = getelementptr inbounds double* %1154, i64 1
  %1169 = load double* %1168, align 8
  %1170 = getelementptr inbounds double* %1154, i64 2
  %1171 = load double* %1170, align 8
  %1172 = getelementptr inbounds double* %1154, i64 3
  %1173 = load double* %1172, align 8
  %1174 = getelementptr inbounds double* %14, i64 12
  %1175 = mul nsw i32 16, %1150
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds double* %1174, i64 %1176
  %1178 = getelementptr inbounds double* %1177, i64 0
  %1179 = load double* %1178, align 8
  %1180 = fsub double %1156, %1179
  %1181 = getelementptr inbounds double* %1177, i64 1
  %1182 = load double* %1181, align 8
  %1183 = fsub double %1169, %1182
  %1184 = getelementptr inbounds double* %1177, i64 2
  %1185 = load double* %1184, align 8
  %1186 = fsub double %1171, %1185
  %1187 = getelementptr inbounds double* %1177, i64 3
  %1188 = load double* %1187, align 8
  %1189 = fsub double %1173, %1188
  %1190 = fmul double %1189, %1163
  %1191 = fmul double %1186, %1163
  %1192 = fmul double %1183, %1163
  %1193 = fmul double %1180, %1163
  %1194 = fmul double 3.000000e+00, %1167
  %1195 = fmul double %1194, %1190
  %1196 = fmul double 2.000000e+00, %1191
  %1197 = fadd double %1195, %1196
  %1198 = fmul double %1197, %1167
  %1199 = fadd double %1198, %1192
  %1200 = fmul double -2.000000e+00, %1199
  %1201 = sext i32 %1125 to i64
  %1202 = getelementptr inbounds %class.Vector* %250, i64 %1201
  %1203 = fmul double %1200, %1131
  %1204 = fmul double %1203, %1131
  %1205 = fadd double %fullElectVirial_xx.3, %1204
  %1206 = fmul double %1203, %1136
  %1207 = fadd double %fullElectVirial_xy.3, %1206
  %1208 = fmul double %1203, %1142
  %1209 = fadd double %fullElectVirial_xz.3, %1208
  %1210 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1211 = load double* %1210, align 8
  %1212 = fadd double %1211, %1203
  store double %1212, double* %1210, align 8
  %1213 = getelementptr inbounds %class.Vector* %1202, i32 0, i32 0
  %1214 = load double* %1213, align 8
  %1215 = fsub double %1214, %1203
  store double %1215, double* %1213, align 8
  %1216 = fmul double %1200, %1136
  %1217 = fmul double %1216, %1136
  %1218 = fadd double %fullElectVirial_yy.3, %1217
  %1219 = fmul double %1216, %1142
  %1220 = fadd double %fullElectVirial_yz.3, %1219
  %1221 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1222 = load double* %1221, align 8
  %1223 = fadd double %1222, %1216
  store double %1223, double* %1221, align 8
  %1224 = getelementptr inbounds %class.Vector* %1202, i32 0, i32 1
  %1225 = load double* %1224, align 8
  %1226 = fsub double %1225, %1216
  store double %1226, double* %1224, align 8
  %1227 = fmul double %1200, %1142
  %1228 = fmul double %1227, %1142
  %1229 = fadd double %fullElectVirial_zz.3, %1228
  %1230 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1231 = load double* %1230, align 8
  %1232 = fadd double %1231, %1227
  store double %1232, double* %1230, align 8
  %1233 = getelementptr inbounds %class.Vector* %1202, i32 0, i32 2
  %1234 = load double* %1233, align 8
  %1235 = fsub double %1234, %1227
  store double %1235, double* %1233, align 8
  br label %1236

; <label>:1236                                    ; preds = %1122
  %1237 = add nsw i32 %k17.4, 1
  br label %1120

; <label>:1238                                    ; preds = %1120
  br label %1239

; <label>:1239                                    ; preds = %1238, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1238 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1238 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1238 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1238 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1238 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1238 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1238 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %329 ], [ %fullElectVirial_zz.3, %1238 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %329 ], [ %fullElectVirial_yz.3, %1238 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %329 ], [ %fullElectVirial_yy.3, %1238 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %329 ], [ %fullElectVirial_xz.3, %1238 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %329 ], [ %fullElectVirial_xy.3, %1238 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %329 ], [ %fullElectVirial_xx.3, %1238 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %771, %1238 ]
  %1240 = add nsw i32 %i.1, 1
  br label %266

; <label>:1241                                    ; preds = %266
  %1242 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1243 = icmp ne i32* %50, %1242
  br i1 %1243, label %1244, label %1249

; <label>:1244                                    ; preds = %1241
  %1245 = icmp eq i32* %50, null
  br i1 %1245, label %1248, label %1246

; <label>:1246                                    ; preds = %1244
  %1247 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1247) #8
  br label %1248

; <label>:1248                                    ; preds = %1246, %1244
  br label %1249

; <label>:1249                                    ; preds = %1248, %1241
  %1250 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1251 = icmp ne i32* %64, %1250
  br i1 %1251, label %1252, label %1257

; <label>:1252                                    ; preds = %1249
  %1253 = icmp eq i32* %64, null
  br i1 %1253, label %1256, label %1254

; <label>:1254                                    ; preds = %1252
  %1255 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1255) #8
  br label %1256

; <label>:1256                                    ; preds = %1254, %1252
  br label %1257

; <label>:1257                                    ; preds = %1256, %1249
  %1258 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1259 = icmp ne i32* %78, %1258
  br i1 %1259, label %1260, label %1265

; <label>:1260                                    ; preds = %1257
  %1261 = icmp eq i32* %78, null
  br i1 %1261, label %1264, label %1262

; <label>:1262                                    ; preds = %1260
  %1263 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1263) #8
  br label %1264

; <label>:1264                                    ; preds = %1262, %1260
  br label %1265

; <label>:1265                                    ; preds = %1264, %1257
  %1266 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1267 = icmp ne i32* %188, %1266
  br i1 %1267, label %1268, label %1273

; <label>:1268                                    ; preds = %1265
  %1269 = icmp eq i32* %188, null
  br i1 %1269, label %1272, label %1270

; <label>:1270                                    ; preds = %1268
  %1271 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1271) #8
  br label %1272

; <label>:1272                                    ; preds = %1270, %1268
  br label %1273

; <label>:1273                                    ; preds = %1272, %1265
  %1274 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1275 = icmp ne i32* %202, %1274
  br i1 %1275, label %1276, label %1281

; <label>:1276                                    ; preds = %1273
  %1277 = icmp eq i32* %202, null
  br i1 %1277, label %1280, label %1278

; <label>:1278                                    ; preds = %1276
  %1279 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1279) #8
  br label %1280

; <label>:1280                                    ; preds = %1278, %1276
  br label %1281

; <label>:1281                                    ; preds = %1280, %1273
  %1282 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1283 = icmp ne i32* %216, %1282
  br i1 %1283, label %1284, label %1289

; <label>:1284                                    ; preds = %1281
  %1285 = icmp eq i32* %216, null
  br i1 %1285, label %1288, label %1286

; <label>:1286                                    ; preds = %1284
  %1287 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1287) #8
  br label %1288

; <label>:1288                                    ; preds = %1286, %1284
  br label %1289

; <label>:1289                                    ; preds = %1288, %1281
  %1290 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1291 = icmp ne i32* %230, %1290
  br i1 %1291, label %1292, label %1297

; <label>:1292                                    ; preds = %1289
  %1293 = icmp eq i32* %230, null
  br i1 %1293, label %1296, label %1294

; <label>:1294                                    ; preds = %1292
  %1295 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1295) #8
  br label %1296

; <label>:1296                                    ; preds = %1294, %1292
  br label %1297

; <label>:1297                                    ; preds = %1296, %1289
  %1298 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1299 = icmp ne i32* %244, %1298
  br i1 %1299, label %1300, label %1305

; <label>:1300                                    ; preds = %1297
  %1301 = icmp eq i32* %244, null
  br i1 %1301, label %1304, label %1302

; <label>:1302                                    ; preds = %1300
  %1303 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1303) #8
  br label %1304

; <label>:1304                                    ; preds = %1302, %1300
  br label %1305

; <label>:1305                                    ; preds = %1304, %1297
  %1306 = sitofp i32 %exclChecksum.0 to double
  %1307 = getelementptr inbounds double* %6, i64 22
  %1308 = load double* %1307, align 8
  %1309 = fadd double %1308, %1306
  store double %1309, double* %1307, align 8
  %1310 = getelementptr inbounds double* %6, i64 12
  %1311 = load double* %1310, align 8
  %1312 = fadd double %1311, %fullElectVirial_xx.0
  store double %1312, double* %1310, align 8
  %1313 = getelementptr inbounds double* %6, i64 13
  %1314 = load double* %1313, align 8
  %1315 = fadd double %1314, %fullElectVirial_xy.0
  store double %1315, double* %1313, align 8
  %1316 = getelementptr inbounds double* %6, i64 14
  %1317 = load double* %1316, align 8
  %1318 = fadd double %1317, %fullElectVirial_xz.0
  store double %1318, double* %1316, align 8
  %1319 = getelementptr inbounds double* %6, i64 15
  %1320 = load double* %1319, align 8
  %1321 = fadd double %1320, %fullElectVirial_xy.0
  store double %1321, double* %1319, align 8
  %1322 = getelementptr inbounds double* %6, i64 16
  %1323 = load double* %1322, align 8
  %1324 = fadd double %1323, %fullElectVirial_yy.0
  store double %1324, double* %1322, align 8
  %1325 = getelementptr inbounds double* %6, i64 17
  %1326 = load double* %1325, align 8
  %1327 = fadd double %1326, %fullElectVirial_yz.0
  store double %1327, double* %1325, align 8
  %1328 = getelementptr inbounds double* %6, i64 18
  %1329 = load double* %1328, align 8
  %1330 = fadd double %1329, %fullElectVirial_xz.0
  store double %1330, double* %1328, align 8
  %1331 = getelementptr inbounds double* %6, i64 19
  %1332 = load double* %1331, align 8
  %1333 = fadd double %1332, %fullElectVirial_yz.0
  store double %1333, double* %1331, align 8
  %1334 = getelementptr inbounds double* %6, i64 20
  %1335 = load double* %1334, align 8
  %1336 = fadd double %1335, %fullElectVirial_zz.0
  store double %1336, double* %1334, align 8
  br label %1337

; <label>:1337                                    ; preds = %1305, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil32calc_self_energy_merge_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.34, align 4
  %r2f28 = alloca %union.anon.35, align 4
  %r2f62 = alloca %union.anon.36, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1378

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil13table_noshortE, align 8
  %15 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double* @_ZN20ComputeNonbondedUtil9switchOn2E, align 8
  %19 = load double* @_ZN20ComputeNonbondedUtil2c1E, align 8
  %20 = load double* @_ZN20ComputeNonbondedUtil2c3E, align 8
  %21 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %22 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %23 = sub nsw i32 %22, 127
  %24 = mul nsw i32 64, %23
  %25 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %26 = getelementptr inbounds [2 x i32]* %25, i32 0, i64 0
  %27 = load i32* %26, align 4
  %28 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %29 = getelementptr inbounds [2 x i32]* %28, i32 0, i64 1
  %30 = load i32* %29, align 4
  %31 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %32 = getelementptr inbounds [2 x %struct.CompAtom*]* %31, i32 0, i64 0
  %33 = load %struct.CompAtom** %32, align 8
  %34 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %35 = getelementptr inbounds [2 x %struct.CompAtom*]* %34, i32 0, i64 1
  %36 = load %struct.CompAtom** %35, align 8
  %37 = icmp slt i32 %30, 1000
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %4
  %39 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %49

; <label>:40                                      ; preds = %4
  %41 = add nsw i32 %30, 5
  %42 = sext i32 %41 to i64
  %43 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 4)
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 -1, i64 %45
  %47 = call noalias i8* @_Znam(i64 %46) #9
  %48 = bitcast i8* %47 to i32*
  br label %49

; <label>:49                                      ; preds = %40, %38
  %50 = phi i32* [ %39, %38 ], [ %48, %40 ]
  %51 = icmp slt i32 %30, 1000
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %63

; <label>:54                                      ; preds = %49
  %55 = add nsw i32 %30, 5
  %56 = sext i32 %55 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4)
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call noalias i8* @_Znam(i64 %60) #9
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63                                      ; preds = %54, %52
  %64 = phi i32* [ %53, %52 ], [ %62, %54 ]
  %65 = icmp slt i32 %30, 1000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %77

; <label>:68                                      ; preds = %63
  %69 = add nsw i32 %30, 5
  %70 = sext i32 %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = call noalias i8* @_Znam(i64 %74) #9
  %76 = bitcast i8* %75 to i32*
  br label %77

; <label>:77                                      ; preds = %68, %66
  %78 = phi i32* [ %67, %66 ], [ %76, %68 ]
  br label %79

; <label>:79                                      ; preds = %102, %77
  %g.0 = phi i32 [ 0, %77 ], [ %g.1, %102 ]
  %j.0 = phi i32 [ 0, %77 ], [ %103, %102 ]
  %80 = icmp slt i32 %j.0, %30
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %79
  %82 = sext i32 %j.0 to i64
  %83 = getelementptr inbounds %struct.CompAtom* %36, i64 %82
  %84 = getelementptr inbounds %struct.CompAtom* %83, i32 0, i32 2
  %85 = load i32* %84, align 4
  %86 = lshr i32 %85, 22
  %87 = and i32 %86, 7
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %97, label %89

; <label>:89                                      ; preds = %81
  %90 = sext i32 %j.0 to i64
  %91 = getelementptr inbounds %struct.CompAtom* %36, i64 %90
  %92 = getelementptr inbounds %struct.CompAtom* %91, i32 0, i32 2
  %93 = load i32* %92, align 4
  %94 = lshr i32 %93, 25
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97                                      ; preds = %89, %81
  %98 = add nsw i32 %g.0, 1
  %99 = sext i32 %g.0 to i64
  %100 = getelementptr inbounds i32* %50, i64 %99
  store i32 %j.0, i32* %100, align 4
  br label %101

; <label>:101                                     ; preds = %97, %89
  %g.1 = phi i32 [ %98, %97 ], [ %g.0, %89 ]
  br label %102

; <label>:102                                     ; preds = %101
  %103 = add nsw i32 %j.0, 1
  br label %79

; <label>:104                                     ; preds = %79
  %105 = icmp ne i32 %g.0, 0
  br i1 %105, label %106, label %113

; <label>:106                                     ; preds = %104
  %107 = sub nsw i32 %g.0, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32* %50, i64 %108
  %110 = load i32* %109, align 4
  %111 = sext i32 %g.0 to i64
  %112 = getelementptr inbounds i32* %50, i64 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113                                     ; preds = %106, %104
  %114 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %165

; <label>:116                                     ; preds = %113
  br label %117

; <label>:117                                     ; preds = %135, %116
  %all_fixed.0 = phi i32 [ 1, %116 ], [ %all_fixed.1, %135 ]
  %fixg.0 = phi i32 [ 0, %116 ], [ %fixg.1, %135 ]
  %g.2 = phi i32 [ 0, %116 ], [ %136, %135 ]
  %118 = icmp slt i32 %g.2, %g.0
  br i1 %118, label %119, label %137

; <label>:119                                     ; preds = %117
  %120 = sext i32 %g.2 to i64
  %121 = getelementptr inbounds i32* %50, i64 %120
  %122 = load i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.CompAtom* %36, i64 %123
  %125 = getelementptr inbounds %struct.CompAtom* %124, i32 0, i32 2
  %126 = load i32* %125, align 4
  %127 = lshr i32 %126, 27
  %128 = and i32 %127, 1
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130                                     ; preds = %119
  %131 = add nsw i32 %fixg.0, 1
  %132 = sext i32 %fixg.0 to i64
  %133 = getelementptr inbounds i32* %64, i64 %132
  store i32 %122, i32* %133, align 4
  br label %134

; <label>:134                                     ; preds = %130, %119
  %all_fixed.1 = phi i32 [ %all_fixed.0, %119 ], [ 0, %130 ]
  %fixg.1 = phi i32 [ %fixg.0, %119 ], [ %131, %130 ]
  br label %135

; <label>:135                                     ; preds = %134
  %136 = add nsw i32 %g.2, 1
  br label %117

; <label>:137                                     ; preds = %117
  %138 = icmp ne i32 %all_fixed.0, 0
  br i1 %138, label %139, label %164

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %141 = icmp ne i32* %50, %140
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %139
  %143 = icmp eq i32* %50, null
  br i1 %143, label %146, label %144

; <label>:144                                     ; preds = %142
  %145 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %145) #8
  br label %146

; <label>:146                                     ; preds = %144, %142
  br label %147

; <label>:147                                     ; preds = %146, %139
  %148 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %149 = icmp ne i32* %64, %148
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %147
  %151 = icmp eq i32* %64, null
  br i1 %151, label %154, label %152

; <label>:152                                     ; preds = %150
  %153 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %153) #8
  br label %154

; <label>:154                                     ; preds = %152, %150
  br label %155

; <label>:155                                     ; preds = %154, %147
  %156 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %157 = icmp ne i32* %78, %156
  br i1 %157, label %158, label %163

; <label>:158                                     ; preds = %155
  %159 = icmp eq i32* %78, null
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %158
  %161 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %161) #8
  br label %162

; <label>:162                                     ; preds = %160, %158
  br label %163

; <label>:163                                     ; preds = %162, %155
  br label %1378

; <label>:164                                     ; preds = %137
  br label %165

; <label>:165                                     ; preds = %164, %113
  %fixg.2 = phi i32 [ %fixg.0, %164 ], [ 0, %113 ]
  %166 = icmp ne i32 %fixg.2, 0
  br i1 %166, label %167, label %174

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 %fixg.2, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32* %64, i64 %169
  %171 = load i32* %170, align 4
  %172 = sext i32 %fixg.2 to i64
  %173 = getelementptr inbounds i32* %64, i64 %172
  store i32 %171, i32* %173, align 4
  br label %174

; <label>:174                                     ; preds = %167, %165
  %175 = icmp slt i32 %30, 1000
  br i1 %175, label %176, label %178

; <label>:176                                     ; preds = %174
  %177 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %187

; <label>:178                                     ; preds = %174
  %179 = add nsw i32 %30, 5
  %180 = sext i32 %179 to i64
  %181 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %180, i64 4)
  %182 = extractvalue { i64, i1 } %181, 1
  %183 = extractvalue { i64, i1 } %181, 0
  %184 = select i1 %182, i64 -1, i64 %183
  %185 = call noalias i8* @_Znam(i64 %184) #9
  %186 = bitcast i8* %185 to i32*
  br label %187

; <label>:187                                     ; preds = %178, %176
  %188 = phi i32* [ %177, %176 ], [ %186, %178 ]
  %189 = icmp slt i32 %30, 1000
  br i1 %189, label %190, label %192

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %201

; <label>:192                                     ; preds = %187
  %193 = add nsw i32 %30, 5
  %194 = sext i32 %193 to i64
  %195 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %194, i64 4)
  %196 = extractvalue { i64, i1 } %195, 1
  %197 = extractvalue { i64, i1 } %195, 0
  %198 = select i1 %196, i64 -1, i64 %197
  %199 = call noalias i8* @_Znam(i64 %198) #9
  %200 = bitcast i8* %199 to i32*
  br label %201

; <label>:201                                     ; preds = %192, %190
  %202 = phi i32* [ %191, %190 ], [ %200, %192 ]
  %203 = icmp slt i32 %30, 1000
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %201
  %205 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %215

; <label>:206                                     ; preds = %201
  %207 = add nsw i32 %30, 5
  %208 = sext i32 %207 to i64
  %209 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %208, i64 4)
  %210 = extractvalue { i64, i1 } %209, 1
  %211 = extractvalue { i64, i1 } %209, 0
  %212 = select i1 %210, i64 -1, i64 %211
  %213 = call noalias i8* @_Znam(i64 %212) #9
  %214 = bitcast i8* %213 to i32*
  br label %215

; <label>:215                                     ; preds = %206, %204
  %216 = phi i32* [ %205, %204 ], [ %214, %206 ]
  %217 = icmp slt i32 %30, 1000
  br i1 %217, label %218, label %220

; <label>:218                                     ; preds = %215
  %219 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %229

; <label>:220                                     ; preds = %215
  %221 = add nsw i32 %30, 5
  %222 = sext i32 %221 to i64
  %223 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %222, i64 4)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = call noalias i8* @_Znam(i64 %226) #9
  %228 = bitcast i8* %227 to i32*
  br label %229

; <label>:229                                     ; preds = %220, %218
  %230 = phi i32* [ %219, %218 ], [ %228, %220 ]
  %231 = icmp slt i32 %30, 1000
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %229
  %233 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %243

; <label>:234                                     ; preds = %229
  %235 = add nsw i32 %30, 5
  %236 = sext i32 %235 to i64
  %237 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %236, i64 4)
  %238 = extractvalue { i64, i1 } %237, 1
  %239 = extractvalue { i64, i1 } %237, 0
  %240 = select i1 %238, i64 -1, i64 %239
  %241 = call noalias i8* @_Znam(i64 %240) #9
  %242 = bitcast i8* %241 to i32*
  br label %243

; <label>:243                                     ; preds = %234, %232
  %244 = phi i32* [ %233, %232 ], [ %242, %234 ]
  %245 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %246 = getelementptr inbounds [2 x %class.Vector*]* %245, i32 0, i64 0
  %247 = load %class.Vector** %246, align 8
  %248 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %249 = getelementptr inbounds [2 x %class.Vector*]* %248, i32 0, i64 1
  %250 = load %class.Vector** %249, align 8
  %251 = sub nsw i32 %27, 1
  %252 = mul nsw i32 %251, %30
  %253 = sdiv i32 %252, 2
  %254 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %255 = load i32* %254, align 4
  %256 = mul nsw i32 %253, %255
  %257 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %258 = load i32* %257, align 4
  %259 = sdiv i32 %256, %258
  %260 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %261 = load i32* %260, align 4
  %262 = mul nsw i32 %253, %261
  %263 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %264 = load i32* %263, align 4
  %265 = sdiv i32 %262, %264
  br label %266

; <label>:266                                     ; preds = %1274, %243
  %fixg_lower.0 = phi i32 [ 0, %243 ], [ %fixg_lower.4, %1274 ]
  %g_lower.0 = phi i32 [ 0, %243 ], [ %g_lower.4, %1274 ]
  %j_hgroup.0 = phi i32 [ 0, %243 ], [ %j_hgroup.3, %1274 ]
  %pairlistindex.0 = phi i32 [ 0, %243 ], [ %pairlistindex.3, %1274 ]
  %pairlistoffset.0 = phi i32 [ 0, %243 ], [ %pairlistoffset.2, %1274 ]
  %pairCount.0 = phi i32 [ 0, %243 ], [ %pairCount.3, %1274 ]
  %i.0 = phi i32 [ 0, %243 ], [ %1275, %1274 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_zz.4, %1274 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yz.4, %1274 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_yy.4, %1274 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xz.4, %1274 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xy.4, %1274 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectVirial_xx.4, %1274 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %fullElectEnergy.4, %1274 ]
  %vdwEnergy.0 = phi double [ 0.000000e+00, %243 ], [ %vdwEnergy.3, %1274 ]
  %exclChecksum.0 = phi i32 [ 0, %243 ], [ %exclChecksum.11, %1274 ]
  %267 = sub nsw i32 %27, 1
  %268 = icmp slt i32 %i.0, %267
  br i1 %268, label %269, label %1276

; <label>:269                                     ; preds = %266
  %270 = sext i32 %i.0 to i64
  %271 = getelementptr inbounds %struct.CompAtom* %33, i64 %270
  %272 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %273 = load i32* %272, align 4
  %274 = and i32 %273, 4194303
  %275 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %274)
  %276 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 0
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 1
  %279 = load i32* %278, align 4
  %280 = getelementptr inbounds %class.ExclusionCheck* %275, i32 0, i32 2
  %281 = load i8** %280, align 8
  %282 = sext i32 %277 to i64
  %283 = sub i64 0, %282
  %284 = getelementptr inbounds i8* %281, i64 %283
  %285 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %286 = getelementptr inbounds %class.Vector* %285, i32 0, i32 0
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %289 = getelementptr inbounds %class.Vector* %288, i32 0, i32 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 0
  %292 = getelementptr inbounds %class.Vector* %291, i32 0, i32 2
  %293 = load double* %292, align 8
  %294 = sext i32 %i.0 to i64
  %295 = getelementptr inbounds %class.Vector* %247, i64 %294
  %296 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %297 = load i32* %296, align 4
  %298 = lshr i32 %297, 22
  %299 = and i32 %298, 7
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %307, label %301

; <label>:301                                     ; preds = %269
  %302 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %303 = load i32* %302, align 4
  %304 = lshr i32 %303, 25
  %305 = and i32 %304, 1
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %518

; <label>:307                                     ; preds = %301, %269
  %308 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %309 = load i32* %308, align 4
  %310 = lshr i32 %309, 22
  %311 = and i32 %310, 7
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %333

; <label>:313                                     ; preds = %307
  %314 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %315 = load i32* %314, align 4
  %316 = lshr i32 %315, 22
  %317 = and i32 %316, 7
  %318 = sub nsw i32 %27, 1
  %319 = sub nsw i32 %318, %i.0
  %320 = mul nsw i32 %317, %319
  %321 = add nsw i32 %pairCount.0, %320
  %322 = sub nsw i32 %317, 1
  %323 = mul nsw i32 %317, %322
  %324 = sdiv i32 %323, 2
  %325 = sub nsw i32 %321, %324
  %326 = icmp slt i32 %pairCount.0, %259
  br i1 %326, label %329, label %327

; <label>:327                                     ; preds = %313
  %328 = icmp sge i32 %pairCount.0, %265
  br i1 %328, label %329, label %332

; <label>:329                                     ; preds = %327, %313
  %330 = sub nsw i32 %317, 1
  %331 = add nsw i32 %i.0, %330
  br label %1274

; <label>:332                                     ; preds = %327
  br label %333

; <label>:333                                     ; preds = %332, %307
  %pairCount.1 = phi i32 [ %325, %332 ], [ %pairCount.0, %307 ]
  %334 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %342

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %338 = load i32* %337, align 4
  %339 = lshr i32 %338, 27
  %340 = and i32 %339, 1
  %341 = icmp ne i32 %340, 0
  br label %342

; <label>:342                                     ; preds = %336, %333
  %343 = phi i1 [ false, %333 ], [ %341, %336 ]
  %344 = zext i1 %343 to i32
  %345 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 22
  %348 = and i32 %347, 7
  %349 = icmp ne i32 %348, 0
  br i1 %349, label %350, label %380

; <label>:350                                     ; preds = %342
  %351 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %352 = load i32* %351, align 4
  %353 = lshr i32 %352, 22
  %354 = and i32 %353, 7
  %355 = add nsw i32 %i.0, %354
  br label %356

; <label>:356                                     ; preds = %365, %350
  %g_lower.1 = phi i32 [ %g_lower.0, %350 ], [ %366, %365 ]
  %357 = icmp slt i32 %g_lower.1, %g.0
  br i1 %357, label %358, label %363

; <label>:358                                     ; preds = %356
  %359 = sext i32 %g_lower.1 to i64
  %360 = getelementptr inbounds i32* %50, i64 %359
  %361 = load i32* %360, align 4
  %362 = icmp slt i32 %361, %355
  br label %363

; <label>:363                                     ; preds = %358, %356
  %364 = phi i1 [ false, %356 ], [ %362, %358 ]
  br i1 %364, label %365, label %367

; <label>:365                                     ; preds = %363
  %366 = add nsw i32 %g_lower.1, 1
  br label %356

; <label>:367                                     ; preds = %363
  br label %368

; <label>:368                                     ; preds = %377, %367
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %367 ], [ %378, %377 ]
  %369 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %369, label %370, label %375

; <label>:370                                     ; preds = %368
  %371 = sext i32 %fixg_lower.1 to i64
  %372 = getelementptr inbounds i32* %64, i64 %371
  %373 = load i32* %372, align 4
  %374 = icmp slt i32 %373, %355
  br label %375

; <label>:375                                     ; preds = %370, %368
  %376 = phi i1 [ false, %368 ], [ %374, %370 ]
  br i1 %376, label %377, label %379

; <label>:377                                     ; preds = %375
  %378 = add nsw i32 %fixg_lower.1, 1
  br label %368

; <label>:379                                     ; preds = %375
  br label %380

; <label>:380                                     ; preds = %379, %342
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %379 ], [ %fixg_lower.0, %342 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %379 ], [ %g_lower.0, %342 ]
  %j_hgroup.1 = phi i32 [ %355, %379 ], [ %j_hgroup.0, %342 ]
  %381 = add nsw i32 %i.0, 1
  br label %382

; <label>:382                                     ; preds = %388, %380
  %pairlistindex.1 = phi i32 [ 0, %380 ], [ %385, %388 ]
  %j.1 = phi i32 [ %381, %380 ], [ %389, %388 ]
  %383 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %383, label %384, label %390

; <label>:384                                     ; preds = %382
  %385 = add nsw i32 %pairlistindex.1, 1
  %386 = sext i32 %pairlistindex.1 to i64
  %387 = getelementptr inbounds i32* %188, i64 %386
  store i32 %j.1, i32* %387, align 4
  br label %388

; <label>:388                                     ; preds = %384
  %389 = add nsw i32 %j.1, 1
  br label %382

; <label>:390                                     ; preds = %382
  %391 = sext i32 %pairlistindex.1 to i64
  %392 = getelementptr inbounds i32* %188, i64 %391
  %393 = icmp ne i32 %344, 0
  br i1 %393, label %394, label %395

; <label>:394                                     ; preds = %390
  br label %396

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %395, %394
  %397 = phi i32* [ %64, %394 ], [ %50, %395 ]
  %398 = icmp ne i32 %344, 0
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %396
  br label %401

; <label>:400                                     ; preds = %396
  br label %401

; <label>:401                                     ; preds = %400, %399
  %402 = phi i32 [ %fixg_lower.2, %399 ], [ %g_lower.2, %400 ]
  %403 = icmp ne i32 %344, 0
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %401
  br label %406

; <label>:405                                     ; preds = %401
  br label %406

; <label>:406                                     ; preds = %405, %404
  %407 = phi i32 [ %fixg.2, %404 ], [ %g.0, %405 ]
  %408 = icmp slt i32 %402, %407
  br i1 %408, label %409, label %503

; <label>:409                                     ; preds = %406
  %410 = sext i32 %402 to i64
  %411 = getelementptr inbounds i32* %397, i64 %410
  %412 = load i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.CompAtom* %36, i64 %413
  %415 = getelementptr inbounds %struct.CompAtom* %414, i32 0, i32 0
  %416 = getelementptr inbounds %class.Vector* %415, i32 0, i32 0
  %417 = load double* %416, align 8
  %418 = sext i32 %412 to i64
  %419 = getelementptr inbounds %struct.CompAtom* %36, i64 %418
  %420 = getelementptr inbounds %struct.CompAtom* %419, i32 0, i32 0
  %421 = getelementptr inbounds %class.Vector* %420, i32 0, i32 1
  %422 = load double* %421, align 8
  %423 = sext i32 %412 to i64
  %424 = getelementptr inbounds %struct.CompAtom* %36, i64 %423
  %425 = getelementptr inbounds %struct.CompAtom* %424, i32 0, i32 0
  %426 = getelementptr inbounds %class.Vector* %425, i32 0, i32 2
  %427 = load double* %426, align 8
  br label %428

; <label>:428                                     ; preds = %461, %409
  %g.3 = phi i32 [ %402, %409 ], [ %431, %461 ]
  %gli.0 = phi i32* [ %78, %409 ], [ %gli.1, %461 ]
  %j2.0 = phi i32 [ %412, %409 ], [ %434, %461 ]
  %p_j_x.0 = phi double [ %417, %409 ], [ %441, %461 ]
  %p_j_y.0 = phi double [ %422, %409 ], [ %449, %461 ]
  %p_j_z.0 = phi double [ %427, %409 ], [ %457, %461 ]
  %429 = icmp slt i32 %g.3, %407
  br i1 %429, label %430, label %462

; <label>:430                                     ; preds = %428
  %431 = add nsw i32 %g.3, 1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i32* %397, i64 %432
  %434 = load i32* %433, align 4
  %435 = fsub double %287, %p_j_x.0
  %436 = fmul double %435, %435
  %437 = sext i32 %434 to i64
  %438 = getelementptr inbounds %struct.CompAtom* %36, i64 %437
  %439 = getelementptr inbounds %struct.CompAtom* %438, i32 0, i32 0
  %440 = getelementptr inbounds %class.Vector* %439, i32 0, i32 0
  %441 = load double* %440, align 8
  %442 = fsub double %290, %p_j_y.0
  %443 = fmul double %442, %442
  %444 = fadd double %436, %443
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds %struct.CompAtom* %36, i64 %445
  %447 = getelementptr inbounds %struct.CompAtom* %446, i32 0, i32 0
  %448 = getelementptr inbounds %class.Vector* %447, i32 0, i32 1
  %449 = load double* %448, align 8
  %450 = fsub double %293, %p_j_z.0
  %451 = fmul double %450, %450
  %452 = fadd double %444, %451
  %453 = sext i32 %434 to i64
  %454 = getelementptr inbounds %struct.CompAtom* %36, i64 %453
  %455 = getelementptr inbounds %struct.CompAtom* %454, i32 0, i32 0
  %456 = getelementptr inbounds %class.Vector* %455, i32 0, i32 2
  %457 = load double* %456, align 8
  %458 = fcmp ole double %452, %8
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %430
  store i32 %j2.0, i32* %gli.0, align 4
  %460 = getelementptr inbounds i32* %gli.0, i32 1
  br label %461

; <label>:461                                     ; preds = %459, %430
  %gli.1 = phi i32* [ %460, %459 ], [ %gli.0, %430 ]
  br label %428

; <label>:462                                     ; preds = %428
  %463 = ptrtoint i32* %gli.0 to i64
  %464 = ptrtoint i32* %78 to i64
  %465 = sub i64 %463, %464
  %466 = sdiv exact i64 %465, 4
  %467 = trunc i64 %466 to i32
  br label %468

; <label>:468                                     ; preds = %500, %462
  %pli.0 = phi i32* [ %392, %462 ], [ %499, %500 ]
  %h.0 = phi i32 [ 0, %462 ], [ %501, %500 ]
  %469 = icmp slt i32 %h.0, %467
  br i1 %469, label %470, label %502

; <label>:470                                     ; preds = %468
  %471 = sext i32 %h.0 to i64
  %472 = getelementptr inbounds i32* %78, i64 %471
  %473 = load i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.CompAtom* %36, i64 %474
  %476 = getelementptr inbounds %struct.CompAtom* %475, i32 0, i32 2
  %477 = load i32* %476, align 4
  %478 = lshr i32 %477, 25
  %479 = and i32 %478, 1
  %480 = icmp ne i32 %479, 0
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %470
  br label %489

; <label>:482                                     ; preds = %470
  %483 = sext i32 %473 to i64
  %484 = getelementptr inbounds %struct.CompAtom* %36, i64 %483
  %485 = getelementptr inbounds %struct.CompAtom* %484, i32 0, i32 2
  %486 = load i32* %485, align 4
  %487 = lshr i32 %486, 22
  %488 = and i32 %487, 7
  br label %489

; <label>:489                                     ; preds = %482, %481
  %490 = phi i32 [ 1, %481 ], [ %488, %482 ]
  %491 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %473, i32* %491, align 4
  %492 = add nsw i32 %473, 1
  %493 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %473, 2
  %495 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %494, i32* %495, align 4
  %496 = add nsw i32 %473, 3
  %497 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %496, i32* %497, align 4
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i32* %pli.0, i64 %498
  br label %500

; <label>:500                                     ; preds = %489
  %501 = add nsw i32 %h.0, 1
  br label %468

; <label>:502                                     ; preds = %468
  br label %503

; <label>:503                                     ; preds = %502, %406
  %pli.1 = phi i32* [ %pli.0, %502 ], [ %392, %406 ]
  %504 = ptrtoint i32* %pli.1 to i64
  %505 = ptrtoint i32* %188 to i64
  %506 = sub i64 %504, %505
  %507 = sdiv exact i64 %506, 4
  %508 = trunc i64 %507 to i32
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %517

; <label>:510                                     ; preds = %503
  %511 = sub nsw i32 %508, 1
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i32* %188, i64 %512
  %514 = load i32* %513, align 4
  %515 = sext i32 %508 to i64
  %516 = getelementptr inbounds i32* %188, i64 %515
  store i32 %514, i32* %516, align 4
  br label %517

; <label>:517                                     ; preds = %510, %503
  br label %520

; <label>:518                                     ; preds = %301
  %519 = add nsw i32 %pairlistoffset.0, 1
  br label %520

; <label>:520                                     ; preds = %518, %517
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %517 ], [ %fixg_lower.0, %518 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %517 ], [ %g_lower.0, %518 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %517 ], [ %j_hgroup.0, %518 ]
  %pairlistindex.2 = phi i32 [ %508, %517 ], [ %pairlistindex.0, %518 ]
  %pairlistoffset.1 = phi i32 [ 0, %517 ], [ %519, %518 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %517 ], [ %pairCount.0, %518 ]
  %521 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %522 = icmp ne i32 %521, 0
  br i1 %522, label %523, label %529

; <label>:523                                     ; preds = %520
  %524 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %525 = load i32* %524, align 4
  %526 = lshr i32 %525, 26
  %527 = and i32 %526, 1
  %528 = icmp ne i32 %527, 0
  br label %529

; <label>:529                                     ; preds = %523, %520
  %530 = phi i1 [ false, %520 ], [ %528, %523 ]
  %531 = zext i1 %530 to i32
  %532 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 1
  %533 = load float* %532, align 4
  %534 = fpext float %533 to double
  %535 = fmul double 3.320636e+02, %534
  %536 = fmul double %535, %15
  %537 = fmul double %536, %9
  %538 = getelementptr inbounds %struct.CompAtom* %271, i32 0, i32 2
  %539 = load i32* %538, align 4
  %540 = and i32 %539, 4194303
  %541 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %540)
  %542 = zext i16 %541 to i32
  %543 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %542)
  %544 = icmp ne i32 %531, 0
  br i1 %544, label %545, label %607

; <label>:545                                     ; preds = %529
  br label %546

; <label>:546                                     ; preds = %604, %545
  %pli3.0 = phi i32* [ %202, %545 ], [ %pli3.2, %604 ]
  %plin.0 = phi i32* [ %216, %545 ], [ %plin.2, %604 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %545 ], [ %605, %604 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %545 ], [ %exclChecksum.3, %604 ]
  %547 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %547, label %548, label %606

; <label>:548                                     ; preds = %546
  %549 = sext i32 %k.0 to i64
  %550 = getelementptr inbounds i32* %188, i64 %549
  %551 = load i32* %550, align 4
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtom* %36, i64 %552
  %554 = getelementptr inbounds %struct.CompAtom* %553, i32 0, i32 0
  %555 = getelementptr inbounds %class.Vector* %554, i32 0, i32 0
  %556 = load double* %555, align 8
  %557 = fsub double %287, %556
  %558 = fmul double %557, %557
  %559 = sext i32 %551 to i64
  %560 = getelementptr inbounds %struct.CompAtom* %36, i64 %559
  %561 = getelementptr inbounds %struct.CompAtom* %560, i32 0, i32 0
  %562 = getelementptr inbounds %class.Vector* %561, i32 0, i32 1
  %563 = load double* %562, align 8
  %564 = fsub double %290, %563
  %565 = fmul double %564, %564
  %566 = fadd double %558, %565
  %567 = sext i32 %551 to i64
  %568 = getelementptr inbounds %struct.CompAtom* %36, i64 %567
  %569 = getelementptr inbounds %struct.CompAtom* %568, i32 0, i32 0
  %570 = getelementptr inbounds %class.Vector* %569, i32 0, i32 2
  %571 = load double* %570, align 8
  %572 = fsub double %293, %571
  %573 = fmul double %572, %572
  %574 = fadd double %566, %573
  %575 = sext i32 %551 to i64
  %576 = getelementptr inbounds %struct.CompAtom* %36, i64 %575
  %577 = getelementptr inbounds %struct.CompAtom* %576, i32 0, i32 2
  %578 = load i32* %577, align 4
  %579 = lshr i32 %578, 26
  %580 = and i32 %579, 1
  %581 = icmp ne i32 %580, 0
  br i1 %581, label %603, label %582

; <label>:582                                     ; preds = %548
  %583 = fcmp ole double %574, %7
  br i1 %583, label %584, label %603

; <label>:584                                     ; preds = %582
  %585 = fcmp ole double %574, %21
  br i1 %585, label %586, label %589

; <label>:586                                     ; preds = %584
  %587 = add nsw i32 %exclChecksum.1, 1
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %603, label %589

; <label>:589                                     ; preds = %586, %584
  %exclChecksum.2 = phi i32 [ %587, %586 ], [ %exclChecksum.1, %584 ]
  %590 = sext i32 %551 to i64
  %591 = getelementptr inbounds %struct.CompAtom* %36, i64 %590
  %592 = getelementptr inbounds %struct.CompAtom* %591, i32 0, i32 2
  %593 = load i32* %592, align 4
  %594 = and i32 %593, 4194303
  %595 = icmp sge i32 %594, %277
  br i1 %595, label %596, label %600

; <label>:596                                     ; preds = %589
  %597 = icmp sle i32 %594, %279
  br i1 %597, label %598, label %600

; <label>:598                                     ; preds = %596
  %599 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %551, i32* %pli3.0, align 4
  br label %602

; <label>:600                                     ; preds = %596, %589
  %601 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %551, i32* %plin.0, align 4
  br label %602

; <label>:602                                     ; preds = %600, %598
  %pli3.1 = phi i32* [ %599, %598 ], [ %pli3.0, %600 ]
  %plin.1 = phi i32* [ %plin.0, %598 ], [ %601, %600 ]
  br label %603

; <label>:603                                     ; preds = %602, %586, %582, %548
  %pli3.2 = phi i32* [ %pli3.0, %548 ], [ %pli3.0, %586 ], [ %pli3.1, %602 ], [ %pli3.0, %582 ]
  %plin.2 = phi i32* [ %plin.0, %548 ], [ %plin.0, %586 ], [ %plin.1, %602 ], [ %plin.0, %582 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %548 ], [ %587, %586 ], [ %exclChecksum.2, %602 ], [ %exclChecksum.1, %582 ]
  br label %604

; <label>:604                                     ; preds = %603
  %605 = add nsw i32 %k.0, 1
  br label %546

; <label>:606                                     ; preds = %546
  br label %686

; <label>:607                                     ; preds = %529
  %608 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %608, label %609, label %685

; <label>:609                                     ; preds = %607
  %610 = sext i32 %pairlistoffset.1 to i64
  %611 = getelementptr inbounds i32* %188, i64 %610
  %612 = load i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %struct.CompAtom* %36, i64 %613
  %615 = getelementptr inbounds %struct.CompAtom* %614, i32 0, i32 0
  %616 = getelementptr inbounds %class.Vector* %615, i32 0, i32 0
  %617 = load double* %616, align 8
  %618 = sext i32 %612 to i64
  %619 = getelementptr inbounds %struct.CompAtom* %36, i64 %618
  %620 = getelementptr inbounds %struct.CompAtom* %619, i32 0, i32 0
  %621 = getelementptr inbounds %class.Vector* %620, i32 0, i32 1
  %622 = load double* %621, align 8
  %623 = sext i32 %612 to i64
  %624 = getelementptr inbounds %struct.CompAtom* %36, i64 %623
  %625 = getelementptr inbounds %struct.CompAtom* %624, i32 0, i32 0
  %626 = getelementptr inbounds %class.Vector* %625, i32 0, i32 2
  %627 = load double* %626, align 8
  %628 = sext i32 %612 to i64
  %629 = getelementptr inbounds %struct.CompAtom* %36, i64 %628
  %630 = getelementptr inbounds %struct.CompAtom* %629, i32 0, i32 2
  %631 = load i32* %630, align 4
  %632 = and i32 %631, 4194303
  br label %633

; <label>:633                                     ; preds = %678, %609
  %pli3.3 = phi i32* [ %202, %609 ], [ %pli3.5, %678 ]
  %plin.3 = phi i32* [ %216, %609 ], [ %plin.5, %678 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %609 ], [ %636, %678 ]
  %j210.0 = phi i32 [ %612, %609 ], [ %639, %678 ]
  %p_j_x11.0 = phi double [ %617, %609 ], [ %646, %678 ]
  %p_j_y12.0 = phi double [ %622, %609 ], [ %654, %678 ]
  %p_j_z13.0 = phi double [ %627, %609 ], [ %662, %678 ]
  %atom214.0 = phi i32 [ %632, %609 ], [ %683, %678 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %609 ], [ %exclChecksum.6, %678 ]
  %634 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %634, label %635, label %684

; <label>:635                                     ; preds = %633
  %636 = add nsw i32 %k9.0, 1
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i32* %188, i64 %637
  %639 = load i32* %638, align 4
  %640 = fsub double %287, %p_j_x11.0
  %641 = fmul double %640, %640
  %642 = sext i32 %639 to i64
  %643 = getelementptr inbounds %struct.CompAtom* %36, i64 %642
  %644 = getelementptr inbounds %struct.CompAtom* %643, i32 0, i32 0
  %645 = getelementptr inbounds %class.Vector* %644, i32 0, i32 0
  %646 = load double* %645, align 8
  %647 = fsub double %290, %p_j_y12.0
  %648 = fmul double %647, %647
  %649 = fadd double %641, %648
  %650 = sext i32 %639 to i64
  %651 = getelementptr inbounds %struct.CompAtom* %36, i64 %650
  %652 = getelementptr inbounds %struct.CompAtom* %651, i32 0, i32 0
  %653 = getelementptr inbounds %class.Vector* %652, i32 0, i32 1
  %654 = load double* %653, align 8
  %655 = fsub double %293, %p_j_z13.0
  %656 = fmul double %655, %655
  %657 = fadd double %649, %656
  %658 = sext i32 %639 to i64
  %659 = getelementptr inbounds %struct.CompAtom* %36, i64 %658
  %660 = getelementptr inbounds %struct.CompAtom* %659, i32 0, i32 0
  %661 = getelementptr inbounds %class.Vector* %660, i32 0, i32 2
  %662 = load double* %661, align 8
  %663 = fcmp ole double %657, %7
  br i1 %663, label %664, label %678

; <label>:664                                     ; preds = %635
  %665 = fcmp ole double %657, %21
  br i1 %665, label %666, label %669

; <label>:666                                     ; preds = %664
  %667 = add nsw i32 %exclChecksum.4, 1
  %668 = icmp ne i32 %667, 0
  br i1 %668, label %678, label %669

; <label>:669                                     ; preds = %666, %664
  %exclChecksum.5 = phi i32 [ %667, %666 ], [ %exclChecksum.4, %664 ]
  %670 = icmp sge i32 %atom214.0, %277
  br i1 %670, label %671, label %675

; <label>:671                                     ; preds = %669
  %672 = icmp sle i32 %atom214.0, %279
  br i1 %672, label %673, label %675

; <label>:673                                     ; preds = %671
  %674 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %677

; <label>:675                                     ; preds = %671, %669
  %676 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %677

; <label>:677                                     ; preds = %675, %673
  %pli3.4 = phi i32* [ %674, %673 ], [ %pli3.3, %675 ]
  %plin.4 = phi i32* [ %plin.3, %673 ], [ %676, %675 ]
  br label %678

; <label>:678                                     ; preds = %677, %666, %635
  %pli3.5 = phi i32* [ %pli3.3, %666 ], [ %pli3.4, %677 ], [ %pli3.3, %635 ]
  %plin.5 = phi i32* [ %plin.3, %666 ], [ %plin.4, %677 ], [ %plin.3, %635 ]
  %exclChecksum.6 = phi i32 [ %667, %666 ], [ %exclChecksum.5, %677 ], [ %exclChecksum.4, %635 ]
  %679 = sext i32 %639 to i64
  %680 = getelementptr inbounds %struct.CompAtom* %36, i64 %679
  %681 = getelementptr inbounds %struct.CompAtom* %680, i32 0, i32 2
  %682 = load i32* %681, align 4
  %683 = and i32 %682, 4194303
  br label %633

; <label>:684                                     ; preds = %633
  br label %685

; <label>:685                                     ; preds = %684, %607
  %pli3.6 = phi i32* [ %pli3.3, %684 ], [ %202, %607 ]
  %plin.6 = phi i32* [ %plin.3, %684 ], [ %216, %607 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %684 ], [ %exclChecksum.0, %607 ]
  br label %686

; <label>:686                                     ; preds = %685, %606
  %pli3.7 = phi i32* [ %pli3.0, %606 ], [ %pli3.6, %685 ]
  %plin.7 = phi i32* [ %plin.0, %606 ], [ %plin.6, %685 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %606 ], [ %exclChecksum.7, %685 ]
  %687 = ptrtoint i32* %pli3.7 to i64
  %688 = ptrtoint i32* %202 to i64
  %689 = sub i64 %687, %688
  %690 = sdiv exact i64 %689, 4
  %691 = trunc i64 %690 to i32
  %692 = icmp ne i32 %691, 0
  br i1 %692, label %693, label %700

; <label>:693                                     ; preds = %686
  %694 = sub nsw i32 %691, 1
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i32* %202, i64 %695
  %697 = load i32* %696, align 4
  %698 = sext i32 %691 to i64
  %699 = getelementptr inbounds i32* %202, i64 %698
  store i32 %697, i32* %699, align 4
  br label %700

; <label>:700                                     ; preds = %693, %686
  br label %701

; <label>:701                                     ; preds = %712, %700
  %plix.0 = phi i32* [ %230, %700 ], [ %710, %712 ]
  %pln.0 = phi i32* [ %216, %700 ], [ %713, %712 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %700 ], [ %711, %712 ]
  %702 = icmp ult i32* %pln.0, %plin.7
  br i1 %702, label %703, label %706

; <label>:703                                     ; preds = %701
  %704 = load i32* %pln.0, align 4
  %705 = icmp slt i32 %704, %j_hgroup.2
  br label %706

; <label>:706                                     ; preds = %703, %701
  %707 = phi i1 [ false, %701 ], [ %705, %703 ]
  br i1 %707, label %708, label %714

; <label>:708                                     ; preds = %706
  %709 = load i32* %pln.0, align 4
  %710 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %709, i32* %plix.0, align 4
  %711 = add nsw i32 %exclChecksum.9, -1
  br label %712

; <label>:712                                     ; preds = %708
  %713 = getelementptr inbounds i32* %pln.0, i32 1
  br label %701

; <label>:714                                     ; preds = %706
  br label %715

; <label>:715                                     ; preds = %730, %714
  %plix.1 = phi i32* [ %plix.0, %714 ], [ %728, %730 ]
  %k17.0 = phi i32 [ 0, %714 ], [ %731, %730 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %714 ], [ %729, %730 ]
  %716 = icmp slt i32 %k17.0, %691
  br i1 %716, label %717, label %722

; <label>:717                                     ; preds = %715
  %718 = sext i32 %k17.0 to i64
  %719 = getelementptr inbounds i32* %202, i64 %718
  %720 = load i32* %719, align 4
  %721 = icmp slt i32 %720, %j_hgroup.2
  br label %722

; <label>:722                                     ; preds = %717, %715
  %723 = phi i1 [ false, %715 ], [ %721, %717 ]
  br i1 %723, label %724, label %732

; <label>:724                                     ; preds = %722
  %725 = sext i32 %k17.0 to i64
  %726 = getelementptr inbounds i32* %202, i64 %725
  %727 = load i32* %726, align 4
  %728 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %727, i32* %plix.1, align 4
  %729 = add nsw i32 %exclChecksum.10, -1
  br label %730

; <label>:730                                     ; preds = %724
  %731 = add nsw i32 %k17.0, 1
  br label %715

; <label>:732                                     ; preds = %722
  br label %733

; <label>:733                                     ; preds = %755, %732
  %plin.8 = phi i32* [ %plin.7, %732 ], [ %plin.9, %755 ]
  %plix.2 = phi i32* [ %plix.1, %732 ], [ %plix.3, %755 ]
  %plim.0 = phi i32* [ %244, %732 ], [ %plim.1, %755 ]
  %k17.1 = phi i32 [ %k17.0, %732 ], [ %756, %755 ]
  %734 = icmp slt i32 %k17.1, %691
  br i1 %734, label %735, label %757

; <label>:735                                     ; preds = %733
  %736 = sext i32 %k17.1 to i64
  %737 = getelementptr inbounds i32* %202, i64 %736
  %738 = load i32* %737, align 4
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds %struct.CompAtom* %36, i64 %739
  %741 = getelementptr inbounds %struct.CompAtom* %740, i32 0, i32 2
  %742 = load i32* %741, align 4
  %743 = and i32 %742, 4194303
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8* %284, i64 %744
  %746 = load i8* %745, align 1
  %747 = sext i8 %746 to i32
  switch i32 %747, label %754 [
    i32 0, label %748
    i32 1, label %750
    i32 2, label %752
  ]

; <label>:748                                     ; preds = %735
  %749 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %738, i32* %plin.8, align 4
  br label %754

; <label>:750                                     ; preds = %735
  %751 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %738, i32* %plix.2, align 4
  br label %754

; <label>:752                                     ; preds = %735
  %753 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %738, i32* %plim.0, align 4
  br label %754

; <label>:754                                     ; preds = %752, %750, %748, %735
  %plin.9 = phi i32* [ %plin.8, %735 ], [ %plin.8, %752 ], [ %plin.8, %750 ], [ %749, %748 ]
  %plix.3 = phi i32* [ %plix.2, %735 ], [ %plix.2, %752 ], [ %751, %750 ], [ %plix.2, %748 ]
  %plim.1 = phi i32* [ %plim.0, %735 ], [ %753, %752 ], [ %plim.0, %750 ], [ %plim.0, %748 ]
  br label %755

; <label>:755                                     ; preds = %754
  %756 = add nsw i32 %k17.1, 1
  br label %733

; <label>:757                                     ; preds = %733
  %758 = ptrtoint i32* %plix.2 to i64
  %759 = ptrtoint i32* %230 to i64
  %760 = sub i64 %758, %759
  %761 = sdiv exact i64 %760, 4
  %762 = sext i32 %exclChecksum.10 to i64
  %763 = add nsw i64 %762, %761
  %764 = trunc i64 %763 to i32
  %765 = ptrtoint i32* %plim.0 to i64
  %766 = ptrtoint i32* %244 to i64
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 4
  %769 = sext i32 %764 to i64
  %770 = add nsw i64 %769, %768
  %771 = trunc i64 %770 to i32
  %772 = ptrtoint i32* %plin.8 to i64
  %773 = ptrtoint i32* %pln.0 to i64
  %774 = sub i64 %772, %773
  %775 = sdiv exact i64 %774, 4
  %776 = trunc i64 %775 to i32
  br label %777

; <label>:777                                     ; preds = %944, %757
  %k17.2 = phi i32 [ 0, %757 ], [ %945, %944 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %757 ], [ %937, %944 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %757 ], [ %928, %944 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %757 ], [ %926, %944 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %757 ], [ %917, %944 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %757 ], [ %915, %944 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %757 ], [ %913, %944 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %757 ], [ %897, %944 ]
  %vdwEnergy.1 = phi double [ %vdwEnergy.0, %757 ], [ %880, %944 ]
  %778 = icmp slt i32 %k17.2, %776
  br i1 %778, label %779, label %946

; <label>:779                                     ; preds = %777
  %780 = sext i32 %k17.2 to i64
  %781 = getelementptr inbounds i32* %pln.0, i64 %780
  %782 = load i32* %781, align 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds %struct.CompAtom* %36, i64 %783
  %785 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %786 = getelementptr inbounds %class.Vector* %785, i32 0, i32 0
  %787 = load double* %786, align 8
  %788 = fsub double %287, %787
  %789 = fmul double %788, %788
  %790 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %791 = getelementptr inbounds %class.Vector* %790, i32 0, i32 1
  %792 = load double* %791, align 8
  %793 = fsub double %290, %792
  %794 = fmul double %793, %793
  %795 = fadd double %789, %794
  %796 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 0
  %797 = getelementptr inbounds %class.Vector* %796, i32 0, i32 2
  %798 = load double* %797, align 8
  %799 = fsub double %293, %798
  %800 = fmul double %799, %799
  %801 = fadd double %795, %800
  %802 = fptrunc double %801 to float
  %803 = bitcast %union.anon.34* %r2f to float*
  store float %802, float* %803, align 4
  %804 = bitcast %union.anon.34* %r2f to i32*
  %805 = load i32* %804, align 4
  %806 = ashr i32 %805, 17
  %807 = add nsw i32 %806, %24
  %808 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 2
  %809 = load i32* %808, align 4
  %810 = and i32 %809, 4194303
  %811 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %810)
  %812 = zext i16 %811 to i32
  %813 = mul nsw i32 2, %812
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %814
  %816 = mul nsw i32 16, %807
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds double* %14, i64 %817
  %819 = getelementptr inbounds double* %818, i64 0
  %820 = load double* %819, align 8
  %821 = mul nsw i32 16, %807
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds double* %14, i64 %822
  %824 = getelementptr inbounds double* %823, i64 4
  %825 = getelementptr inbounds double* %824, i64 0
  %826 = load double* %825, align 8
  %827 = mul nsw i32 16, %807
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds double* %14, i64 %828
  %830 = getelementptr inbounds double* %829, i64 8
  %831 = getelementptr inbounds double* %830, i64 0
  %832 = load double* %831, align 8
  %833 = bitcast %union.anon.34* %r2f to i32*
  %834 = load i32* %833, align 4
  %835 = and i32 %834, -131072
  store i32 %835, i32* %833, align 4
  %836 = getelementptr inbounds %struct.CompAtom* %784, i32 0, i32 1
  %837 = load float* %836, align 4
  %838 = fpext float %837 to double
  %839 = fmul double %537, %838
  %840 = bitcast %union.anon.34* %r2f to float*
  %841 = load float* %840, align 4
  %842 = fpext float %841 to double
  %843 = fsub double %801, %842
  %844 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 0
  %845 = load double* %844, align 8
  %846 = fmul double %15, %845
  %847 = getelementptr inbounds %"struct.LJTable::TableEntry"* %815, i32 0, i32 1
  %848 = load double* %847, align 8
  %849 = fmul double %15, %848
  %850 = fmul double %846, %820
  %851 = fmul double %849, %826
  %852 = fsub double %850, %851
  %853 = getelementptr inbounds double* %818, i64 3
  %854 = load double* %853, align 8
  %855 = fmul double %846, %854
  %856 = getelementptr inbounds double* %824, i64 3
  %857 = load double* %856, align 8
  %858 = fmul double %849, %857
  %859 = fsub double %855, %858
  %860 = getelementptr inbounds double* %818, i64 2
  %861 = load double* %860, align 8
  %862 = fmul double %846, %861
  %863 = getelementptr inbounds double* %824, i64 2
  %864 = load double* %863, align 8
  %865 = fmul double %849, %864
  %866 = fsub double %862, %865
  %867 = getelementptr inbounds double* %818, i64 1
  %868 = load double* %867, align 8
  %869 = fmul double %846, %868
  %870 = getelementptr inbounds double* %824, i64 1
  %871 = load double* %870, align 8
  %872 = fmul double %849, %871
  %873 = fsub double %869, %872
  %874 = fmul double %843, %859
  %875 = fadd double %874, %866
  %876 = fmul double %875, %843
  %877 = fadd double %876, %873
  %878 = fmul double %877, %843
  %879 = fadd double %878, %852
  %880 = fadd double %vdwEnergy.1, %879
  %881 = getelementptr inbounds double* %830, i64 1
  %882 = load double* %881, align 8
  %883 = getelementptr inbounds double* %830, i64 2
  %884 = load double* %883, align 8
  %885 = getelementptr inbounds double* %830, i64 3
  %886 = load double* %885, align 8
  %887 = fmul double %886, %839
  %888 = fmul double %884, %839
  %889 = fmul double %882, %839
  %890 = fmul double %832, %839
  %891 = fmul double %843, %887
  %892 = fadd double %891, %888
  %893 = fmul double %892, %843
  %894 = fadd double %893, %889
  %895 = fmul double %894, %843
  %896 = fadd double %895, %890
  %897 = fadd double %fullElectEnergy.1, %896
  %898 = fadd double %887, %859
  %899 = fadd double %888, %866
  %900 = fadd double %889, %873
  %901 = fadd double %890, %852
  %902 = fmul double 3.000000e+00, %843
  %903 = fmul double %902, %898
  %904 = fmul double 2.000000e+00, %899
  %905 = fadd double %903, %904
  %906 = fmul double %905, %843
  %907 = fadd double %906, %900
  %908 = fmul double -2.000000e+00, %907
  %909 = sext i32 %782 to i64
  %910 = getelementptr inbounds %class.Vector* %250, i64 %909
  %911 = fmul double %908, %788
  %912 = fmul double %911, %788
  %913 = fadd double %fullElectVirial_xx.1, %912
  %914 = fmul double %911, %793
  %915 = fadd double %fullElectVirial_xy.1, %914
  %916 = fmul double %911, %799
  %917 = fadd double %fullElectVirial_xz.1, %916
  %918 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %919 = load double* %918, align 8
  %920 = fadd double %919, %911
  store double %920, double* %918, align 8
  %921 = getelementptr inbounds %class.Vector* %910, i32 0, i32 0
  %922 = load double* %921, align 8
  %923 = fsub double %922, %911
  store double %923, double* %921, align 8
  %924 = fmul double %908, %793
  %925 = fmul double %924, %793
  %926 = fadd double %fullElectVirial_yy.1, %925
  %927 = fmul double %924, %799
  %928 = fadd double %fullElectVirial_yz.1, %927
  %929 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %930 = load double* %929, align 8
  %931 = fadd double %930, %924
  store double %931, double* %929, align 8
  %932 = getelementptr inbounds %class.Vector* %910, i32 0, i32 1
  %933 = load double* %932, align 8
  %934 = fsub double %933, %924
  store double %934, double* %932, align 8
  %935 = fmul double %908, %799
  %936 = fmul double %935, %799
  %937 = fadd double %fullElectVirial_zz.1, %936
  %938 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %939 = load double* %938, align 8
  %940 = fadd double %939, %935
  store double %940, double* %938, align 8
  %941 = getelementptr inbounds %class.Vector* %910, i32 0, i32 2
  %942 = load double* %941, align 8
  %943 = fsub double %942, %935
  store double %943, double* %941, align 8
  br label %944

; <label>:944                                     ; preds = %779
  %945 = add nsw i32 %k17.2, 1
  br label %777

; <label>:946                                     ; preds = %777
  %947 = ptrtoint i32* %plim.0 to i64
  %948 = ptrtoint i32* %244 to i64
  %949 = sub i64 %947, %948
  %950 = sdiv exact i64 %949, 4
  %951 = trunc i64 %950 to i32
  br label %952

; <label>:952                                     ; preds = %1140, %946
  %k17.3 = phi i32 [ 0, %946 ], [ %1141, %1140 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %946 ], [ %1133, %1140 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %946 ], [ %1124, %1140 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %946 ], [ %1122, %1140 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %946 ], [ %1113, %1140 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %946 ], [ %1111, %1140 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %946 ], [ %1109, %1140 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %946 ], [ %1093, %1140 ]
  %vdwEnergy.2 = phi double [ %vdwEnergy.1, %946 ], [ %1056, %1140 ]
  %953 = icmp slt i32 %k17.3, %951
  br i1 %953, label %954, label %1142

; <label>:954                                     ; preds = %952
  %955 = sext i32 %k17.3 to i64
  %956 = getelementptr inbounds i32* %244, i64 %955
  %957 = load i32* %956, align 4
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds %struct.CompAtom* %36, i64 %958
  %960 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 0
  %961 = getelementptr inbounds %class.Vector* %960, i32 0, i32 0
  %962 = load double* %961, align 8
  %963 = fsub double %287, %962
  %964 = fmul double %963, %963
  %965 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 0
  %966 = getelementptr inbounds %class.Vector* %965, i32 0, i32 1
  %967 = load double* %966, align 8
  %968 = fsub double %290, %967
  %969 = fmul double %968, %968
  %970 = fadd double %964, %969
  %971 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 0
  %972 = getelementptr inbounds %class.Vector* %971, i32 0, i32 2
  %973 = load double* %972, align 8
  %974 = fsub double %293, %973
  %975 = fmul double %974, %974
  %976 = fadd double %970, %975
  %977 = fptrunc double %976 to float
  %978 = bitcast %union.anon.35* %r2f28 to float*
  store float %977, float* %978, align 4
  %979 = bitcast %union.anon.35* %r2f28 to i32*
  %980 = load i32* %979, align 4
  %981 = ashr i32 %980, 17
  %982 = add nsw i32 %981, %24
  %983 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 2
  %984 = load i32* %983, align 4
  %985 = and i32 %984, 4194303
  %986 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %985)
  %987 = zext i16 %986 to i32
  %988 = mul nsw i32 2, %987
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds %"struct.LJTable::TableEntry"* %543, i64 %989
  %991 = getelementptr inbounds %"struct.LJTable::TableEntry"* %990, i64 1
  %992 = mul nsw i32 16, %982
  %993 = sext i32 %992 to i64
  %994 = getelementptr inbounds double* %14, i64 %993
  %995 = getelementptr inbounds double* %994, i64 0
  %996 = load double* %995, align 8
  %997 = mul nsw i32 16, %982
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds double* %14, i64 %998
  %1000 = getelementptr inbounds double* %999, i64 4
  %1001 = getelementptr inbounds double* %1000, i64 0
  %1002 = load double* %1001, align 8
  %1003 = mul nsw i32 16, %982
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds double* %14, i64 %1004
  %1006 = getelementptr inbounds double* %1005, i64 8
  %1007 = getelementptr inbounds double* %1006, i64 0
  %1008 = load double* %1007, align 8
  %1009 = bitcast %union.anon.35* %r2f28 to i32*
  %1010 = load i32* %1009, align 4
  %1011 = and i32 %1010, -131072
  store i32 %1011, i32* %1009, align 4
  %1012 = getelementptr inbounds %struct.CompAtom* %959, i32 0, i32 1
  %1013 = load float* %1012, align 4
  %1014 = fpext float %1013 to double
  %1015 = fmul double %537, %1014
  %1016 = bitcast %union.anon.35* %r2f28 to float*
  %1017 = load float* %1016, align 4
  %1018 = fpext float %1017 to double
  %1019 = fsub double %976, %1018
  %1020 = getelementptr inbounds %"struct.LJTable::TableEntry"* %991, i32 0, i32 0
  %1021 = load double* %1020, align 8
  %1022 = fmul double %15, %1021
  %1023 = getelementptr inbounds %"struct.LJTable::TableEntry"* %991, i32 0, i32 1
  %1024 = load double* %1023, align 8
  %1025 = fmul double %15, %1024
  %1026 = fmul double %1022, %996
  %1027 = fmul double %1025, %1002
  %1028 = fsub double %1026, %1027
  %1029 = getelementptr inbounds double* %994, i64 3
  %1030 = load double* %1029, align 8
  %1031 = fmul double %1022, %1030
  %1032 = getelementptr inbounds double* %1000, i64 3
  %1033 = load double* %1032, align 8
  %1034 = fmul double %1025, %1033
  %1035 = fsub double %1031, %1034
  %1036 = getelementptr inbounds double* %994, i64 2
  %1037 = load double* %1036, align 8
  %1038 = fmul double %1022, %1037
  %1039 = getelementptr inbounds double* %1000, i64 2
  %1040 = load double* %1039, align 8
  %1041 = fmul double %1025, %1040
  %1042 = fsub double %1038, %1041
  %1043 = getelementptr inbounds double* %994, i64 1
  %1044 = load double* %1043, align 8
  %1045 = fmul double %1022, %1044
  %1046 = getelementptr inbounds double* %1000, i64 1
  %1047 = load double* %1046, align 8
  %1048 = fmul double %1025, %1047
  %1049 = fsub double %1045, %1048
  %1050 = fmul double %1019, %1035
  %1051 = fadd double %1050, %1042
  %1052 = fmul double %1051, %1019
  %1053 = fadd double %1052, %1049
  %1054 = fmul double %1053, %1019
  %1055 = fadd double %1054, %1028
  %1056 = fadd double %vdwEnergy.2, %1055
  %1057 = getelementptr inbounds double* %1006, i64 1
  %1058 = load double* %1057, align 8
  %1059 = getelementptr inbounds double* %1006, i64 2
  %1060 = load double* %1059, align 8
  %1061 = getelementptr inbounds double* %1006, i64 3
  %1062 = load double* %1061, align 8
  %1063 = getelementptr inbounds double* %14, i64 12
  %1064 = mul nsw i32 16, %982
  %1065 = sext i32 %1064 to i64
  %1066 = getelementptr inbounds double* %1063, i64 %1065
  %1067 = getelementptr inbounds double* %1066, i64 0
  %1068 = load double* %1067, align 8
  %1069 = fmul double %17, %1068
  %1070 = fsub double %1008, %1069
  %1071 = getelementptr inbounds double* %1066, i64 1
  %1072 = load double* %1071, align 8
  %1073 = fmul double %17, %1072
  %1074 = fsub double %1058, %1073
  %1075 = getelementptr inbounds double* %1066, i64 2
  %1076 = load double* %1075, align 8
  %1077 = fmul double %17, %1076
  %1078 = fsub double %1060, %1077
  %1079 = getelementptr inbounds double* %1066, i64 3
  %1080 = load double* %1079, align 8
  %1081 = fmul double %17, %1080
  %1082 = fsub double %1062, %1081
  %1083 = fmul double %1082, %1015
  %1084 = fmul double %1078, %1015
  %1085 = fmul double %1074, %1015
  %1086 = fmul double %1070, %1015
  %1087 = fmul double %1019, %1083
  %1088 = fadd double %1087, %1084
  %1089 = fmul double %1088, %1019
  %1090 = fadd double %1089, %1085
  %1091 = fmul double %1090, %1019
  %1092 = fadd double %1091, %1086
  %1093 = fadd double %fullElectEnergy.2, %1092
  %1094 = fadd double %1083, %1035
  %1095 = fadd double %1084, %1042
  %1096 = fadd double %1085, %1049
  %1097 = fadd double %1086, %1028
  %1098 = fmul double 3.000000e+00, %1019
  %1099 = fmul double %1098, %1094
  %1100 = fmul double 2.000000e+00, %1095
  %1101 = fadd double %1099, %1100
  %1102 = fmul double %1101, %1019
  %1103 = fadd double %1102, %1096
  %1104 = fmul double -2.000000e+00, %1103
  %1105 = sext i32 %957 to i64
  %1106 = getelementptr inbounds %class.Vector* %250, i64 %1105
  %1107 = fmul double %1104, %963
  %1108 = fmul double %1107, %963
  %1109 = fadd double %fullElectVirial_xx.2, %1108
  %1110 = fmul double %1107, %968
  %1111 = fadd double %fullElectVirial_xy.2, %1110
  %1112 = fmul double %1107, %974
  %1113 = fadd double %fullElectVirial_xz.2, %1112
  %1114 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1115 = load double* %1114, align 8
  %1116 = fadd double %1115, %1107
  store double %1116, double* %1114, align 8
  %1117 = getelementptr inbounds %class.Vector* %1106, i32 0, i32 0
  %1118 = load double* %1117, align 8
  %1119 = fsub double %1118, %1107
  store double %1119, double* %1117, align 8
  %1120 = fmul double %1104, %968
  %1121 = fmul double %1120, %968
  %1122 = fadd double %fullElectVirial_yy.2, %1121
  %1123 = fmul double %1120, %974
  %1124 = fadd double %fullElectVirial_yz.2, %1123
  %1125 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1126 = load double* %1125, align 8
  %1127 = fadd double %1126, %1120
  store double %1127, double* %1125, align 8
  %1128 = getelementptr inbounds %class.Vector* %1106, i32 0, i32 1
  %1129 = load double* %1128, align 8
  %1130 = fsub double %1129, %1120
  store double %1130, double* %1128, align 8
  %1131 = fmul double %1104, %974
  %1132 = fmul double %1131, %974
  %1133 = fadd double %fullElectVirial_zz.2, %1132
  %1134 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1135 = load double* %1134, align 8
  %1136 = fadd double %1135, %1131
  store double %1136, double* %1134, align 8
  %1137 = getelementptr inbounds %class.Vector* %1106, i32 0, i32 2
  %1138 = load double* %1137, align 8
  %1139 = fsub double %1138, %1131
  store double %1139, double* %1137, align 8
  br label %1140

; <label>:1140                                    ; preds = %954
  %1141 = add nsw i32 %k17.3, 1
  br label %952

; <label>:1142                                    ; preds = %952
  %1143 = ptrtoint i32* %plix.2 to i64
  %1144 = ptrtoint i32* %230 to i64
  %1145 = sub i64 %1143, %1144
  %1146 = sdiv exact i64 %1145, 4
  %1147 = trunc i64 %1146 to i32
  br label %1148

; <label>:1148                                    ; preds = %1271, %1142
  %k17.4 = phi i32 [ 0, %1142 ], [ %1272, %1271 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1142 ], [ %1264, %1271 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1142 ], [ %1255, %1271 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1142 ], [ %1253, %1271 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1142 ], [ %1244, %1271 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1142 ], [ %1242, %1271 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1142 ], [ %1240, %1271 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1142 ], [ %1228, %1271 ]
  %1149 = icmp slt i32 %k17.4, %1147
  br i1 %1149, label %1150, label %1273

; <label>:1150                                    ; preds = %1148
  %1151 = sext i32 %k17.4 to i64
  %1152 = getelementptr inbounds i32* %230, i64 %1151
  %1153 = load i32* %1152, align 4
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds %struct.CompAtom* %36, i64 %1154
  %1156 = getelementptr inbounds %struct.CompAtom* %1155, i32 0, i32 0
  %1157 = getelementptr inbounds %class.Vector* %1156, i32 0, i32 0
  %1158 = load double* %1157, align 8
  %1159 = fsub double %287, %1158
  %1160 = fmul double %1159, %1159
  %1161 = getelementptr inbounds %struct.CompAtom* %1155, i32 0, i32 0
  %1162 = getelementptr inbounds %class.Vector* %1161, i32 0, i32 1
  %1163 = load double* %1162, align 8
  %1164 = fsub double %290, %1163
  %1165 = fmul double %1164, %1164
  %1166 = fadd double %1160, %1165
  %1167 = getelementptr inbounds %struct.CompAtom* %1155, i32 0, i32 0
  %1168 = getelementptr inbounds %class.Vector* %1167, i32 0, i32 2
  %1169 = load double* %1168, align 8
  %1170 = fsub double %293, %1169
  %1171 = fmul double %1170, %1170
  %1172 = fadd double %1166, %1171
  %1173 = fptrunc double %1172 to float
  %1174 = bitcast %union.anon.36* %r2f62 to float*
  store float %1173, float* %1174, align 4
  %1175 = bitcast %union.anon.36* %r2f62 to i32*
  %1176 = load i32* %1175, align 4
  %1177 = ashr i32 %1176, 17
  %1178 = add nsw i32 %1177, %24
  %1179 = mul nsw i32 16, %1178
  %1180 = sext i32 %1179 to i64
  %1181 = getelementptr inbounds double* %14, i64 %1180
  %1182 = getelementptr inbounds double* %1181, i64 8
  %1183 = getelementptr inbounds double* %1182, i64 0
  %1184 = load double* %1183, align 8
  %1185 = bitcast %union.anon.36* %r2f62 to i32*
  %1186 = load i32* %1185, align 4
  %1187 = and i32 %1186, -131072
  store i32 %1187, i32* %1185, align 4
  %1188 = getelementptr inbounds %struct.CompAtom* %1155, i32 0, i32 1
  %1189 = load float* %1188, align 4
  %1190 = fpext float %1189 to double
  %1191 = fmul double %537, %1190
  %1192 = bitcast %union.anon.36* %r2f62 to float*
  %1193 = load float* %1192, align 4
  %1194 = fpext float %1193 to double
  %1195 = fsub double %1172, %1194
  %1196 = getelementptr inbounds double* %1182, i64 1
  %1197 = load double* %1196, align 8
  %1198 = getelementptr inbounds double* %1182, i64 2
  %1199 = load double* %1198, align 8
  %1200 = getelementptr inbounds double* %1182, i64 3
  %1201 = load double* %1200, align 8
  %1202 = getelementptr inbounds double* %14, i64 12
  %1203 = mul nsw i32 16, %1178
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds double* %1202, i64 %1204
  %1206 = getelementptr inbounds double* %1205, i64 0
  %1207 = load double* %1206, align 8
  %1208 = fsub double %1184, %1207
  %1209 = getelementptr inbounds double* %1205, i64 1
  %1210 = load double* %1209, align 8
  %1211 = fsub double %1197, %1210
  %1212 = getelementptr inbounds double* %1205, i64 2
  %1213 = load double* %1212, align 8
  %1214 = fsub double %1199, %1213
  %1215 = getelementptr inbounds double* %1205, i64 3
  %1216 = load double* %1215, align 8
  %1217 = fsub double %1201, %1216
  %1218 = fmul double %1217, %1191
  %1219 = fmul double %1214, %1191
  %1220 = fmul double %1211, %1191
  %1221 = fmul double %1208, %1191
  %1222 = fmul double %1195, %1218
  %1223 = fadd double %1222, %1219
  %1224 = fmul double %1223, %1195
  %1225 = fadd double %1224, %1220
  %1226 = fmul double %1225, %1195
  %1227 = fadd double %1226, %1221
  %1228 = fadd double %fullElectEnergy.3, %1227
  %1229 = fmul double 3.000000e+00, %1195
  %1230 = fmul double %1229, %1218
  %1231 = fmul double 2.000000e+00, %1219
  %1232 = fadd double %1230, %1231
  %1233 = fmul double %1232, %1195
  %1234 = fadd double %1233, %1220
  %1235 = fmul double -2.000000e+00, %1234
  %1236 = sext i32 %1153 to i64
  %1237 = getelementptr inbounds %class.Vector* %250, i64 %1236
  %1238 = fmul double %1235, %1159
  %1239 = fmul double %1238, %1159
  %1240 = fadd double %fullElectVirial_xx.3, %1239
  %1241 = fmul double %1238, %1164
  %1242 = fadd double %fullElectVirial_xy.3, %1241
  %1243 = fmul double %1238, %1170
  %1244 = fadd double %fullElectVirial_xz.3, %1243
  %1245 = getelementptr inbounds %class.Vector* %295, i32 0, i32 0
  %1246 = load double* %1245, align 8
  %1247 = fadd double %1246, %1238
  store double %1247, double* %1245, align 8
  %1248 = getelementptr inbounds %class.Vector* %1237, i32 0, i32 0
  %1249 = load double* %1248, align 8
  %1250 = fsub double %1249, %1238
  store double %1250, double* %1248, align 8
  %1251 = fmul double %1235, %1164
  %1252 = fmul double %1251, %1164
  %1253 = fadd double %fullElectVirial_yy.3, %1252
  %1254 = fmul double %1251, %1170
  %1255 = fadd double %fullElectVirial_yz.3, %1254
  %1256 = getelementptr inbounds %class.Vector* %295, i32 0, i32 1
  %1257 = load double* %1256, align 8
  %1258 = fadd double %1257, %1251
  store double %1258, double* %1256, align 8
  %1259 = getelementptr inbounds %class.Vector* %1237, i32 0, i32 1
  %1260 = load double* %1259, align 8
  %1261 = fsub double %1260, %1251
  store double %1261, double* %1259, align 8
  %1262 = fmul double %1235, %1170
  %1263 = fmul double %1262, %1170
  %1264 = fadd double %fullElectVirial_zz.3, %1263
  %1265 = getelementptr inbounds %class.Vector* %295, i32 0, i32 2
  %1266 = load double* %1265, align 8
  %1267 = fadd double %1266, %1262
  store double %1267, double* %1265, align 8
  %1268 = getelementptr inbounds %class.Vector* %1237, i32 0, i32 2
  %1269 = load double* %1268, align 8
  %1270 = fsub double %1269, %1262
  store double %1270, double* %1268, align 8
  br label %1271

; <label>:1271                                    ; preds = %1150
  %1272 = add nsw i32 %k17.4, 1
  br label %1148

; <label>:1273                                    ; preds = %1148
  br label %1274

; <label>:1274                                    ; preds = %1273, %329
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %329 ], [ %fixg_lower.3, %1273 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %329 ], [ %g_lower.3, %1273 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %329 ], [ %j_hgroup.2, %1273 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %329 ], [ %pairlistindex.2, %1273 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %329 ], [ %pairlistoffset.1, %1273 ]
  %pairCount.3 = phi i32 [ %325, %329 ], [ %pairCount.2, %1273 ]
  %i.1 = phi i32 [ %331, %329 ], [ %i.0, %1273 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %329 ], [ %fullElectVirial_zz.3, %1273 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %329 ], [ %fullElectVirial_yz.3, %1273 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %329 ], [ %fullElectVirial_yy.3, %1273 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %329 ], [ %fullElectVirial_xz.3, %1273 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %329 ], [ %fullElectVirial_xy.3, %1273 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %329 ], [ %fullElectVirial_xx.3, %1273 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %329 ], [ %fullElectEnergy.3, %1273 ]
  %vdwEnergy.3 = phi double [ %vdwEnergy.0, %329 ], [ %vdwEnergy.2, %1273 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %329 ], [ %771, %1273 ]
  %1275 = add nsw i32 %i.1, 1
  br label %266

; <label>:1276                                    ; preds = %266
  %1277 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1278 = icmp ne i32* %50, %1277
  br i1 %1278, label %1279, label %1284

; <label>:1279                                    ; preds = %1276
  %1280 = icmp eq i32* %50, null
  br i1 %1280, label %1283, label %1281

; <label>:1281                                    ; preds = %1279
  %1282 = bitcast i32* %50 to i8*
  call void @_ZdaPv(i8* %1282) #8
  br label %1283

; <label>:1283                                    ; preds = %1281, %1279
  br label %1284

; <label>:1284                                    ; preds = %1283, %1276
  %1285 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1286 = icmp ne i32* %64, %1285
  br i1 %1286, label %1287, label %1292

; <label>:1287                                    ; preds = %1284
  %1288 = icmp eq i32* %64, null
  br i1 %1288, label %1291, label %1289

; <label>:1289                                    ; preds = %1287
  %1290 = bitcast i32* %64 to i8*
  call void @_ZdaPv(i8* %1290) #8
  br label %1291

; <label>:1291                                    ; preds = %1289, %1287
  br label %1292

; <label>:1292                                    ; preds = %1291, %1284
  %1293 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1294 = icmp ne i32* %78, %1293
  br i1 %1294, label %1295, label %1300

; <label>:1295                                    ; preds = %1292
  %1296 = icmp eq i32* %78, null
  br i1 %1296, label %1299, label %1297

; <label>:1297                                    ; preds = %1295
  %1298 = bitcast i32* %78 to i8*
  call void @_ZdaPv(i8* %1298) #8
  br label %1299

; <label>:1299                                    ; preds = %1297, %1295
  br label %1300

; <label>:1300                                    ; preds = %1299, %1292
  %1301 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1302 = icmp ne i32* %188, %1301
  br i1 %1302, label %1303, label %1308

; <label>:1303                                    ; preds = %1300
  %1304 = icmp eq i32* %188, null
  br i1 %1304, label %1307, label %1305

; <label>:1305                                    ; preds = %1303
  %1306 = bitcast i32* %188 to i8*
  call void @_ZdaPv(i8* %1306) #8
  br label %1307

; <label>:1307                                    ; preds = %1305, %1303
  br label %1308

; <label>:1308                                    ; preds = %1307, %1300
  %1309 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1310 = icmp ne i32* %202, %1309
  br i1 %1310, label %1311, label %1316

; <label>:1311                                    ; preds = %1308
  %1312 = icmp eq i32* %202, null
  br i1 %1312, label %1315, label %1313

; <label>:1313                                    ; preds = %1311
  %1314 = bitcast i32* %202 to i8*
  call void @_ZdaPv(i8* %1314) #8
  br label %1315

; <label>:1315                                    ; preds = %1313, %1311
  br label %1316

; <label>:1316                                    ; preds = %1315, %1308
  %1317 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1318 = icmp ne i32* %216, %1317
  br i1 %1318, label %1319, label %1324

; <label>:1319                                    ; preds = %1316
  %1320 = icmp eq i32* %216, null
  br i1 %1320, label %1323, label %1321

; <label>:1321                                    ; preds = %1319
  %1322 = bitcast i32* %216 to i8*
  call void @_ZdaPv(i8* %1322) #8
  br label %1323

; <label>:1323                                    ; preds = %1321, %1319
  br label %1324

; <label>:1324                                    ; preds = %1323, %1316
  %1325 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1326 = icmp ne i32* %230, %1325
  br i1 %1326, label %1327, label %1332

; <label>:1327                                    ; preds = %1324
  %1328 = icmp eq i32* %230, null
  br i1 %1328, label %1331, label %1329

; <label>:1329                                    ; preds = %1327
  %1330 = bitcast i32* %230 to i8*
  call void @_ZdaPv(i8* %1330) #8
  br label %1331

; <label>:1331                                    ; preds = %1329, %1327
  br label %1332

; <label>:1332                                    ; preds = %1331, %1324
  %1333 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1334 = icmp ne i32* %244, %1333
  br i1 %1334, label %1335, label %1340

; <label>:1335                                    ; preds = %1332
  %1336 = icmp eq i32* %244, null
  br i1 %1336, label %1339, label %1337

; <label>:1337                                    ; preds = %1335
  %1338 = bitcast i32* %244 to i8*
  call void @_ZdaPv(i8* %1338) #8
  br label %1339

; <label>:1339                                    ; preds = %1337, %1335
  br label %1340

; <label>:1340                                    ; preds = %1339, %1332
  %1341 = sitofp i32 %exclChecksum.0 to double
  %1342 = getelementptr inbounds double* %6, i64 22
  %1343 = load double* %1342, align 8
  %1344 = fadd double %1343, %1341
  store double %1344, double* %1342, align 8
  %1345 = getelementptr inbounds double* %6, i64 2
  %1346 = load double* %1345, align 8
  %1347 = fadd double %1346, %vdwEnergy.0
  store double %1347, double* %1345, align 8
  %1348 = getelementptr inbounds double* %6, i64 1
  %1349 = load double* %1348, align 8
  %1350 = fadd double %1349, %fullElectEnergy.0
  store double %1350, double* %1348, align 8
  %1351 = getelementptr inbounds double* %6, i64 12
  %1352 = load double* %1351, align 8
  %1353 = fadd double %1352, %fullElectVirial_xx.0
  store double %1353, double* %1351, align 8
  %1354 = getelementptr inbounds double* %6, i64 13
  %1355 = load double* %1354, align 8
  %1356 = fadd double %1355, %fullElectVirial_xy.0
  store double %1356, double* %1354, align 8
  %1357 = getelementptr inbounds double* %6, i64 14
  %1358 = load double* %1357, align 8
  %1359 = fadd double %1358, %fullElectVirial_xz.0
  store double %1359, double* %1357, align 8
  %1360 = getelementptr inbounds double* %6, i64 15
  %1361 = load double* %1360, align 8
  %1362 = fadd double %1361, %fullElectVirial_xy.0
  store double %1362, double* %1360, align 8
  %1363 = getelementptr inbounds double* %6, i64 16
  %1364 = load double* %1363, align 8
  %1365 = fadd double %1364, %fullElectVirial_yy.0
  store double %1365, double* %1363, align 8
  %1366 = getelementptr inbounds double* %6, i64 17
  %1367 = load double* %1366, align 8
  %1368 = fadd double %1367, %fullElectVirial_yz.0
  store double %1368, double* %1366, align 8
  %1369 = getelementptr inbounds double* %6, i64 18
  %1370 = load double* %1369, align 8
  %1371 = fadd double %1370, %fullElectVirial_xz.0
  store double %1371, double* %1369, align 8
  %1372 = getelementptr inbounds double* %6, i64 19
  %1373 = load double* %1372, align 8
  %1374 = fadd double %1373, %fullElectVirial_yz.0
  store double %1374, double* %1372, align 8
  %1375 = getelementptr inbounds double* %6, i64 20
  %1376 = load double* %1375, align 8
  %1377 = fadd double %1376, %fullElectVirial_zz.0
  store double %1377, double* %1375, align 8
  br label %1378

; <label>:1378                                    ; preds = %1340, %163, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil24calc_pair_slow_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.15, align 4
  %r2f29 = alloca %union.anon.16, align 4
  %r2f50 = alloca %union.anon.17, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1170

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %182

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  br label %136

; <label>:136                                     ; preds = %152, %135
  %all_fixed.2 = phi i32 [ %all_fixed.0, %135 ], [ %all_fixed.3, %152 ]
  %i.0 = phi i32 [ 0, %135 ], [ %153, %152 ]
  %137 = icmp ne i32 %all_fixed.2, 0
  br i1 %137, label %138, label %140

; <label>:138                                     ; preds = %136
  %139 = icmp slt i32 %i.0, %25
  br label %140

; <label>:140                                     ; preds = %138, %136
  %141 = phi i1 [ false, %136 ], [ %139, %138 ]
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %140
  %143 = sext i32 %i.0 to i64
  %144 = getelementptr inbounds %struct.CompAtom* %31, i64 %143
  %145 = getelementptr inbounds %struct.CompAtom* %144, i32 0, i32 2
  %146 = load i32* %145, align 4
  %147 = lshr i32 %146, 26
  %148 = and i32 %147, 1
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %151, label %150

; <label>:150                                     ; preds = %142
  br label %151

; <label>:151                                     ; preds = %150, %142
  %all_fixed.3 = phi i32 [ %all_fixed.2, %142 ], [ 0, %150 ]
  br label %152

; <label>:152                                     ; preds = %151
  %153 = add nsw i32 %i.0, 1
  br label %136

; <label>:154                                     ; preds = %140
  %155 = icmp ne i32 %all_fixed.2, 0
  br i1 %155, label %156, label %181

; <label>:156                                     ; preds = %154
  %157 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %158 = icmp ne i32* %48, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %48, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  %165 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %166 = icmp ne i32* %62, %165
  br i1 %166, label %167, label %172

; <label>:167                                     ; preds = %164
  %168 = icmp eq i32* %62, null
  br i1 %168, label %171, label %169

; <label>:169                                     ; preds = %167
  %170 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %170) #8
  br label %171

; <label>:171                                     ; preds = %169, %167
  br label %172

; <label>:172                                     ; preds = %171, %164
  %173 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %174 = icmp ne i32* %76, %173
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %172
  %176 = icmp eq i32* %76, null
  br i1 %176, label %179, label %177

; <label>:177                                     ; preds = %175
  %178 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %178) #8
  br label %179

; <label>:179                                     ; preds = %177, %175
  br label %180

; <label>:180                                     ; preds = %179, %172
  br label %1170

; <label>:181                                     ; preds = %154
  br label %182

; <label>:182                                     ; preds = %181, %111
  %fixg.2 = phi i32 [ %fixg.0, %181 ], [ 0, %111 ]
  %183 = icmp ne i32 %fixg.2, 0
  br i1 %183, label %184, label %191

; <label>:184                                     ; preds = %182
  %185 = sub nsw i32 %fixg.2, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32* %62, i64 %186
  %188 = load i32* %187, align 4
  %189 = sext i32 %fixg.2 to i64
  %190 = getelementptr inbounds i32* %62, i64 %189
  store i32 %188, i32* %190, align 4
  br label %191

; <label>:191                                     ; preds = %184, %182
  %192 = icmp slt i32 %28, 1000
  br i1 %192, label %193, label %195

; <label>:193                                     ; preds = %191
  %194 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %204

; <label>:195                                     ; preds = %191
  %196 = add nsw i32 %28, 5
  %197 = sext i32 %196 to i64
  %198 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %197, i64 4)
  %199 = extractvalue { i64, i1 } %198, 1
  %200 = extractvalue { i64, i1 } %198, 0
  %201 = select i1 %199, i64 -1, i64 %200
  %202 = call noalias i8* @_Znam(i64 %201) #9
  %203 = bitcast i8* %202 to i32*
  br label %204

; <label>:204                                     ; preds = %195, %193
  %205 = phi i32* [ %194, %193 ], [ %203, %195 ]
  %206 = icmp slt i32 %28, 1000
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %204
  %208 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %218

; <label>:209                                     ; preds = %204
  %210 = add nsw i32 %28, 5
  %211 = sext i32 %210 to i64
  %212 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %211, i64 4)
  %213 = extractvalue { i64, i1 } %212, 1
  %214 = extractvalue { i64, i1 } %212, 0
  %215 = select i1 %213, i64 -1, i64 %214
  %216 = call noalias i8* @_Znam(i64 %215) #9
  %217 = bitcast i8* %216 to i32*
  br label %218

; <label>:218                                     ; preds = %209, %207
  %219 = phi i32* [ %208, %207 ], [ %217, %209 ]
  %220 = icmp slt i32 %28, 1000
  br i1 %220, label %221, label %223

; <label>:221                                     ; preds = %218
  %222 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %232

; <label>:223                                     ; preds = %218
  %224 = add nsw i32 %28, 5
  %225 = sext i32 %224 to i64
  %226 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %225, i64 4)
  %227 = extractvalue { i64, i1 } %226, 1
  %228 = extractvalue { i64, i1 } %226, 0
  %229 = select i1 %227, i64 -1, i64 %228
  %230 = call noalias i8* @_Znam(i64 %229) #9
  %231 = bitcast i8* %230 to i32*
  br label %232

; <label>:232                                     ; preds = %223, %221
  %233 = phi i32* [ %222, %221 ], [ %231, %223 ]
  %234 = icmp slt i32 %28, 1000
  br i1 %234, label %235, label %237

; <label>:235                                     ; preds = %232
  %236 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %246

; <label>:237                                     ; preds = %232
  %238 = add nsw i32 %28, 5
  %239 = sext i32 %238 to i64
  %240 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %239, i64 4)
  %241 = extractvalue { i64, i1 } %240, 1
  %242 = extractvalue { i64, i1 } %240, 0
  %243 = select i1 %241, i64 -1, i64 %242
  %244 = call noalias i8* @_Znam(i64 %243) #9
  %245 = bitcast i8* %244 to i32*
  br label %246

; <label>:246                                     ; preds = %237, %235
  %247 = phi i32* [ %236, %235 ], [ %245, %237 ]
  %248 = icmp slt i32 %28, 1000
  br i1 %248, label %249, label %251

; <label>:249                                     ; preds = %246
  %250 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %260

; <label>:251                                     ; preds = %246
  %252 = add nsw i32 %28, 5
  %253 = sext i32 %252 to i64
  %254 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %253, i64 4)
  %255 = extractvalue { i64, i1 } %254, 1
  %256 = extractvalue { i64, i1 } %254, 0
  %257 = select i1 %255, i64 -1, i64 %256
  %258 = call noalias i8* @_Znam(i64 %257) #9
  %259 = bitcast i8* %258 to i32*
  br label %260

; <label>:260                                     ; preds = %251, %249
  %261 = phi i32* [ %250, %249 ], [ %259, %251 ]
  %262 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %263 = getelementptr inbounds [2 x %class.Vector*]* %262, i32 0, i64 0
  %264 = load %class.Vector** %263, align 8
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 1
  %267 = load %class.Vector** %266, align 8
  %268 = mul nsw i32 %25, %28
  %269 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %270 = load i32* %269, align 4
  %271 = mul nsw i32 %268, %270
  %272 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %273 = load i32* %272, align 4
  %274 = sdiv i32 %271, %273
  %275 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %276 = load i32* %275, align 4
  %277 = mul nsw i32 %268, %276
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %279 = load i32* %278, align 4
  %280 = sdiv i32 %277, %279
  br label %281

; <label>:281                                     ; preds = %1072, %260
  %pairlistindex.0 = phi i32 [ 0, %260 ], [ %pairlistindex.2, %1072 ]
  %pairlistoffset.0 = phi i32 [ 0, %260 ], [ %pairlistoffset.2, %1072 ]
  %pairCount.0 = phi i32 [ 0, %260 ], [ %pairCount.3, %1072 ]
  %i.1 = phi i32 [ 0, %260 ], [ %1073, %1072 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_zz.4, %1072 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yz.4, %1072 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yy.4, %1072 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xz.4, %1072 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xy.4, %1072 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xx.4, %1072 ]
  %exclChecksum.0 = phi i32 [ 0, %260 ], [ %exclChecksum.9, %1072 ]
  %282 = icmp slt i32 %i.1, %25
  br i1 %282, label %283, label %1074

; <label>:283                                     ; preds = %281
  %284 = sext i32 %i.1 to i64
  %285 = getelementptr inbounds %struct.CompAtom* %31, i64 %284
  %286 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %287 = load i32* %286, align 4
  %288 = and i32 %287, 4194303
  %289 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %288)
  %290 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 0
  %291 = load i32* %290, align 4
  %292 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 1
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 2
  %295 = load i8** %294, align 8
  %296 = sext i32 %291 to i64
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8* %295, i64 %297
  %299 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %300 = getelementptr inbounds %class.Vector* %299, i32 0, i32 0
  %301 = load double* %300, align 8
  %302 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %303 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %304 = load double* %303, align 8
  %305 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %306 = getelementptr inbounds %class.Vector* %305, i32 0, i32 2
  %307 = load double* %306, align 8
  %308 = sext i32 %i.1 to i64
  %309 = getelementptr inbounds %class.Vector* %264, i64 %308
  %310 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %311 = load i32* %310, align 4
  %312 = lshr i32 %311, 22
  %313 = and i32 %312, 7
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %321, label %315

; <label>:315                                     ; preds = %283
  %316 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %317 = load i32* %316, align 4
  %318 = lshr i32 %317, 25
  %319 = and i32 %318, 1
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %321, label %491

; <label>:321                                     ; preds = %315, %283
  %322 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %323 = load i32* %322, align 4
  %324 = lshr i32 %323, 22
  %325 = and i32 %324, 7
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %341

; <label>:327                                     ; preds = %321
  %328 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %329 = load i32* %328, align 4
  %330 = lshr i32 %329, 22
  %331 = and i32 %330, 7
  %332 = mul nsw i32 %331, %28
  %333 = add nsw i32 %pairCount.0, %332
  %334 = icmp slt i32 %pairCount.0, %274
  br i1 %334, label %337, label %335

; <label>:335                                     ; preds = %327
  %336 = icmp sge i32 %pairCount.0, %280
  br i1 %336, label %337, label %340

; <label>:337                                     ; preds = %335, %327
  %338 = sub nsw i32 %331, 1
  %339 = add nsw i32 %i.1, %338
  br label %1072

; <label>:340                                     ; preds = %335
  br label %341

; <label>:341                                     ; preds = %340, %321
  %pairCount.1 = phi i32 [ %333, %340 ], [ %pairCount.0, %321 ]
  %342 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %350

; <label>:344                                     ; preds = %341
  %345 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 27
  %348 = and i32 %347, 1
  %349 = icmp ne i32 %348, 0
  br label %350

; <label>:350                                     ; preds = %344, %341
  %351 = phi i1 [ false, %341 ], [ %349, %344 ]
  %352 = zext i1 %351 to i32
  %353 = sext i32 0 to i64
  %354 = getelementptr inbounds i32* %205, i64 %353
  %355 = icmp ne i32 %352, 0
  br i1 %355, label %356, label %357

; <label>:356                                     ; preds = %350
  br label %358

; <label>:357                                     ; preds = %350
  br label %358

; <label>:358                                     ; preds = %357, %356
  %359 = phi i32* [ %62, %356 ], [ %48, %357 ]
  %360 = icmp ne i32 %352, 0
  br i1 %360, label %361, label %362

; <label>:361                                     ; preds = %358
  br label %363

; <label>:362                                     ; preds = %358
  br label %363

; <label>:363                                     ; preds = %362, %361
  %364 = phi i32 [ %fixg.2, %361 ], [ %g.0, %362 ]
  %365 = icmp slt i32 0, %364
  br i1 %365, label %366, label %460

; <label>:366                                     ; preds = %363
  %367 = sext i32 0 to i64
  %368 = getelementptr inbounds i32* %359, i64 %367
  %369 = load i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds %struct.CompAtom* %34, i64 %370
  %372 = getelementptr inbounds %struct.CompAtom* %371, i32 0, i32 0
  %373 = getelementptr inbounds %class.Vector* %372, i32 0, i32 0
  %374 = load double* %373, align 8
  %375 = sext i32 %369 to i64
  %376 = getelementptr inbounds %struct.CompAtom* %34, i64 %375
  %377 = getelementptr inbounds %struct.CompAtom* %376, i32 0, i32 0
  %378 = getelementptr inbounds %class.Vector* %377, i32 0, i32 1
  %379 = load double* %378, align 8
  %380 = sext i32 %369 to i64
  %381 = getelementptr inbounds %struct.CompAtom* %34, i64 %380
  %382 = getelementptr inbounds %struct.CompAtom* %381, i32 0, i32 0
  %383 = getelementptr inbounds %class.Vector* %382, i32 0, i32 2
  %384 = load double* %383, align 8
  br label %385

; <label>:385                                     ; preds = %418, %366
  %g.3 = phi i32 [ 0, %366 ], [ %388, %418 ]
  %gli.0 = phi i32* [ %76, %366 ], [ %gli.1, %418 ]
  %j2.0 = phi i32 [ %369, %366 ], [ %391, %418 ]
  %p_j_x.0 = phi double [ %374, %366 ], [ %398, %418 ]
  %p_j_y.0 = phi double [ %379, %366 ], [ %406, %418 ]
  %p_j_z.0 = phi double [ %384, %366 ], [ %414, %418 ]
  %386 = icmp slt i32 %g.3, %364
  br i1 %386, label %387, label %419

; <label>:387                                     ; preds = %385
  %388 = add nsw i32 %g.3, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32* %359, i64 %389
  %391 = load i32* %390, align 4
  %392 = fsub double %301, %p_j_x.0
  %393 = fmul double %392, %392
  %394 = sext i32 %391 to i64
  %395 = getelementptr inbounds %struct.CompAtom* %34, i64 %394
  %396 = getelementptr inbounds %struct.CompAtom* %395, i32 0, i32 0
  %397 = getelementptr inbounds %class.Vector* %396, i32 0, i32 0
  %398 = load double* %397, align 8
  %399 = fsub double %304, %p_j_y.0
  %400 = fmul double %399, %399
  %401 = fadd double %393, %400
  %402 = sext i32 %391 to i64
  %403 = getelementptr inbounds %struct.CompAtom* %34, i64 %402
  %404 = getelementptr inbounds %struct.CompAtom* %403, i32 0, i32 0
  %405 = getelementptr inbounds %class.Vector* %404, i32 0, i32 1
  %406 = load double* %405, align 8
  %407 = fsub double %307, %p_j_z.0
  %408 = fmul double %407, %407
  %409 = fadd double %401, %408
  %410 = sext i32 %391 to i64
  %411 = getelementptr inbounds %struct.CompAtom* %34, i64 %410
  %412 = getelementptr inbounds %struct.CompAtom* %411, i32 0, i32 0
  %413 = getelementptr inbounds %class.Vector* %412, i32 0, i32 2
  %414 = load double* %413, align 8
  %415 = fcmp ole double %409, %8
  br i1 %415, label %416, label %418

; <label>:416                                     ; preds = %387
  store i32 %j2.0, i32* %gli.0, align 4
  %417 = getelementptr inbounds i32* %gli.0, i32 1
  br label %418

; <label>:418                                     ; preds = %416, %387
  %gli.1 = phi i32* [ %417, %416 ], [ %gli.0, %387 ]
  br label %385

; <label>:419                                     ; preds = %385
  %420 = ptrtoint i32* %gli.0 to i64
  %421 = ptrtoint i32* %76 to i64
  %422 = sub i64 %420, %421
  %423 = sdiv exact i64 %422, 4
  %424 = trunc i64 %423 to i32
  br label %425

; <label>:425                                     ; preds = %457, %419
  %pli.0 = phi i32* [ %354, %419 ], [ %456, %457 ]
  %h.0 = phi i32 [ 0, %419 ], [ %458, %457 ]
  %426 = icmp slt i32 %h.0, %424
  br i1 %426, label %427, label %459

; <label>:427                                     ; preds = %425
  %428 = sext i32 %h.0 to i64
  %429 = getelementptr inbounds i32* %76, i64 %428
  %430 = load i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds %struct.CompAtom* %34, i64 %431
  %433 = getelementptr inbounds %struct.CompAtom* %432, i32 0, i32 2
  %434 = load i32* %433, align 4
  %435 = lshr i32 %434, 25
  %436 = and i32 %435, 1
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %439

; <label>:438                                     ; preds = %427
  br label %446

; <label>:439                                     ; preds = %427
  %440 = sext i32 %430 to i64
  %441 = getelementptr inbounds %struct.CompAtom* %34, i64 %440
  %442 = getelementptr inbounds %struct.CompAtom* %441, i32 0, i32 2
  %443 = load i32* %442, align 4
  %444 = lshr i32 %443, 22
  %445 = and i32 %444, 7
  br label %446

; <label>:446                                     ; preds = %439, %438
  %447 = phi i32 [ 1, %438 ], [ %445, %439 ]
  %448 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %430, i32* %448, align 4
  %449 = add nsw i32 %430, 1
  %450 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %449, i32* %450, align 4
  %451 = add nsw i32 %430, 2
  %452 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %430, 3
  %454 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %453, i32* %454, align 4
  %455 = sext i32 %447 to i64
  %456 = getelementptr inbounds i32* %pli.0, i64 %455
  br label %457

; <label>:457                                     ; preds = %446
  %458 = add nsw i32 %h.0, 1
  br label %425

; <label>:459                                     ; preds = %425
  br label %460

; <label>:460                                     ; preds = %459, %363
  %pli.1 = phi i32* [ %pli.0, %459 ], [ %354, %363 ]
  %461 = ptrtoint i32* %pli.1 to i64
  %462 = ptrtoint i32* %205 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  %466 = icmp ne i32 %465, 0
  br i1 %466, label %467, label %474

; <label>:467                                     ; preds = %460
  %468 = sub nsw i32 %465, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i32* %205, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %465 to i64
  %473 = getelementptr inbounds i32* %205, i64 %472
  store i32 %471, i32* %473, align 4
  br label %490

; <label>:474                                     ; preds = %460
  %475 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %476 = load i32* %475, align 4
  %477 = lshr i32 %476, 25
  %478 = and i32 %477, 1
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %480, label %481

; <label>:480                                     ; preds = %474
  br label %486

; <label>:481                                     ; preds = %474
  %482 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %483 = load i32* %482, align 4
  %484 = lshr i32 %483, 22
  %485 = and i32 %484, 7
  br label %486

; <label>:486                                     ; preds = %481, %480
  %487 = phi i32 [ 1, %480 ], [ %485, %481 ]
  %488 = sub nsw i32 %487, 1
  %489 = add nsw i32 %i.1, %488
  br label %1072

; <label>:490                                     ; preds = %467
  br label %491

; <label>:491                                     ; preds = %490, %315
  %pairlistindex.1 = phi i32 [ %465, %490 ], [ %pairlistindex.0, %315 ]
  %pairlistoffset.1 = phi i32 [ 0, %490 ], [ %pairlistoffset.0, %315 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %490 ], [ %pairCount.0, %315 ]
  %492 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %493 = icmp ne i32 %492, 0
  br i1 %493, label %494, label %500

; <label>:494                                     ; preds = %491
  %495 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %496 = load i32* %495, align 4
  %497 = lshr i32 %496, 26
  %498 = and i32 %497, 1
  %499 = icmp ne i32 %498, 0
  br label %500

; <label>:500                                     ; preds = %494, %491
  %501 = phi i1 [ false, %491 ], [ %499, %494 ]
  %502 = zext i1 %501 to i32
  %503 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 1
  %504 = load float* %503, align 4
  %505 = fpext float %504 to double
  %506 = fmul double 3.320636e+02, %505
  %507 = fmul double %506, %16
  %508 = fmul double %507, %9
  %509 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %510 = load i32* %509, align 4
  %511 = and i32 %510, 4194303
  %512 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %511)
  %513 = zext i16 %512 to i32
  %514 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %513)
  %515 = icmp ne i32 %502, 0
  br i1 %515, label %516, label %578

; <label>:516                                     ; preds = %500
  br label %517

; <label>:517                                     ; preds = %575, %516
  %pli4.0 = phi i32* [ %219, %516 ], [ %pli4.2, %575 ]
  %plin.0 = phi i32* [ %233, %516 ], [ %plin.2, %575 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %516 ], [ %576, %575 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %516 ], [ %exclChecksum.3, %575 ]
  %518 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %518, label %519, label %577

; <label>:519                                     ; preds = %517
  %520 = sext i32 %k.0 to i64
  %521 = getelementptr inbounds i32* %205, i64 %520
  %522 = load i32* %521, align 4
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds %struct.CompAtom* %34, i64 %523
  %525 = getelementptr inbounds %struct.CompAtom* %524, i32 0, i32 0
  %526 = getelementptr inbounds %class.Vector* %525, i32 0, i32 0
  %527 = load double* %526, align 8
  %528 = fsub double %301, %527
  %529 = fmul double %528, %528
  %530 = sext i32 %522 to i64
  %531 = getelementptr inbounds %struct.CompAtom* %34, i64 %530
  %532 = getelementptr inbounds %struct.CompAtom* %531, i32 0, i32 0
  %533 = getelementptr inbounds %class.Vector* %532, i32 0, i32 1
  %534 = load double* %533, align 8
  %535 = fsub double %304, %534
  %536 = fmul double %535, %535
  %537 = fadd double %529, %536
  %538 = sext i32 %522 to i64
  %539 = getelementptr inbounds %struct.CompAtom* %34, i64 %538
  %540 = getelementptr inbounds %struct.CompAtom* %539, i32 0, i32 0
  %541 = getelementptr inbounds %class.Vector* %540, i32 0, i32 2
  %542 = load double* %541, align 8
  %543 = fsub double %307, %542
  %544 = fmul double %543, %543
  %545 = fadd double %537, %544
  %546 = sext i32 %522 to i64
  %547 = getelementptr inbounds %struct.CompAtom* %34, i64 %546
  %548 = getelementptr inbounds %struct.CompAtom* %547, i32 0, i32 2
  %549 = load i32* %548, align 4
  %550 = lshr i32 %549, 26
  %551 = and i32 %550, 1
  %552 = icmp ne i32 %551, 0
  br i1 %552, label %574, label %553

; <label>:553                                     ; preds = %519
  %554 = fcmp ole double %545, %7
  br i1 %554, label %555, label %574

; <label>:555                                     ; preds = %553
  %556 = fcmp ole double %545, %19
  br i1 %556, label %557, label %560

; <label>:557                                     ; preds = %555
  %558 = add nsw i32 %exclChecksum.1, 1
  %559 = icmp ne i32 %558, 0
  br i1 %559, label %574, label %560

; <label>:560                                     ; preds = %557, %555
  %exclChecksum.2 = phi i32 [ %558, %557 ], [ %exclChecksum.1, %555 ]
  %561 = sext i32 %522 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %34, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 2
  %564 = load i32* %563, align 4
  %565 = and i32 %564, 4194303
  %566 = icmp sge i32 %565, %291
  br i1 %566, label %567, label %571

; <label>:567                                     ; preds = %560
  %568 = icmp sle i32 %565, %293
  br i1 %568, label %569, label %571

; <label>:569                                     ; preds = %567
  %570 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %522, i32* %pli4.0, align 4
  br label %573

; <label>:571                                     ; preds = %567, %560
  %572 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %522, i32* %plin.0, align 4
  br label %573

; <label>:573                                     ; preds = %571, %569
  %pli4.1 = phi i32* [ %570, %569 ], [ %pli4.0, %571 ]
  %plin.1 = phi i32* [ %plin.0, %569 ], [ %572, %571 ]
  br label %574

; <label>:574                                     ; preds = %573, %557, %553, %519
  %pli4.2 = phi i32* [ %pli4.0, %519 ], [ %pli4.0, %557 ], [ %pli4.1, %573 ], [ %pli4.0, %553 ]
  %plin.2 = phi i32* [ %plin.0, %519 ], [ %plin.0, %557 ], [ %plin.1, %573 ], [ %plin.0, %553 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %519 ], [ %558, %557 ], [ %exclChecksum.2, %573 ], [ %exclChecksum.1, %553 ]
  br label %575

; <label>:575                                     ; preds = %574
  %576 = add nsw i32 %k.0, 1
  br label %517

; <label>:577                                     ; preds = %517
  br label %657

; <label>:578                                     ; preds = %500
  %579 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %579, label %580, label %656

; <label>:580                                     ; preds = %578
  %581 = sext i32 %pairlistoffset.1 to i64
  %582 = getelementptr inbounds i32* %205, i64 %581
  %583 = load i32* %582, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %34, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 0
  %587 = getelementptr inbounds %class.Vector* %586, i32 0, i32 0
  %588 = load double* %587, align 8
  %589 = sext i32 %583 to i64
  %590 = getelementptr inbounds %struct.CompAtom* %34, i64 %589
  %591 = getelementptr inbounds %struct.CompAtom* %590, i32 0, i32 0
  %592 = getelementptr inbounds %class.Vector* %591, i32 0, i32 1
  %593 = load double* %592, align 8
  %594 = sext i32 %583 to i64
  %595 = getelementptr inbounds %struct.CompAtom* %34, i64 %594
  %596 = getelementptr inbounds %struct.CompAtom* %595, i32 0, i32 0
  %597 = getelementptr inbounds %class.Vector* %596, i32 0, i32 2
  %598 = load double* %597, align 8
  %599 = sext i32 %583 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %34, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  br label %604

; <label>:604                                     ; preds = %649, %580
  %pli4.3 = phi i32* [ %219, %580 ], [ %pli4.5, %649 ]
  %plin.3 = phi i32* [ %233, %580 ], [ %plin.5, %649 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %580 ], [ %607, %649 ]
  %j211.0 = phi i32 [ %583, %580 ], [ %610, %649 ]
  %p_j_x12.0 = phi double [ %588, %580 ], [ %617, %649 ]
  %p_j_y13.0 = phi double [ %593, %580 ], [ %625, %649 ]
  %p_j_z14.0 = phi double [ %598, %580 ], [ %633, %649 ]
  %atom215.0 = phi i32 [ %603, %580 ], [ %654, %649 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %580 ], [ %exclChecksum.6, %649 ]
  %605 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %605, label %606, label %655

; <label>:606                                     ; preds = %604
  %607 = add nsw i32 %k10.0, 1
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i32* %205, i64 %608
  %610 = load i32* %609, align 4
  %611 = fsub double %301, %p_j_x12.0
  %612 = fmul double %611, %611
  %613 = sext i32 %610 to i64
  %614 = getelementptr inbounds %struct.CompAtom* %34, i64 %613
  %615 = getelementptr inbounds %struct.CompAtom* %614, i32 0, i32 0
  %616 = getelementptr inbounds %class.Vector* %615, i32 0, i32 0
  %617 = load double* %616, align 8
  %618 = fsub double %304, %p_j_y13.0
  %619 = fmul double %618, %618
  %620 = fadd double %612, %619
  %621 = sext i32 %610 to i64
  %622 = getelementptr inbounds %struct.CompAtom* %34, i64 %621
  %623 = getelementptr inbounds %struct.CompAtom* %622, i32 0, i32 0
  %624 = getelementptr inbounds %class.Vector* %623, i32 0, i32 1
  %625 = load double* %624, align 8
  %626 = fsub double %307, %p_j_z14.0
  %627 = fmul double %626, %626
  %628 = fadd double %620, %627
  %629 = sext i32 %610 to i64
  %630 = getelementptr inbounds %struct.CompAtom* %34, i64 %629
  %631 = getelementptr inbounds %struct.CompAtom* %630, i32 0, i32 0
  %632 = getelementptr inbounds %class.Vector* %631, i32 0, i32 2
  %633 = load double* %632, align 8
  %634 = fcmp ole double %628, %7
  br i1 %634, label %635, label %649

; <label>:635                                     ; preds = %606
  %636 = fcmp ole double %628, %19
  br i1 %636, label %637, label %640

; <label>:637                                     ; preds = %635
  %638 = add nsw i32 %exclChecksum.4, 1
  %639 = icmp ne i32 %638, 0
  br i1 %639, label %649, label %640

; <label>:640                                     ; preds = %637, %635
  %exclChecksum.5 = phi i32 [ %638, %637 ], [ %exclChecksum.4, %635 ]
  %641 = icmp sge i32 %atom215.0, %291
  br i1 %641, label %642, label %646

; <label>:642                                     ; preds = %640
  %643 = icmp sle i32 %atom215.0, %293
  br i1 %643, label %644, label %646

; <label>:644                                     ; preds = %642
  %645 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %648

; <label>:646                                     ; preds = %642, %640
  %647 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %648

; <label>:648                                     ; preds = %646, %644
  %pli4.4 = phi i32* [ %645, %644 ], [ %pli4.3, %646 ]
  %plin.4 = phi i32* [ %plin.3, %644 ], [ %647, %646 ]
  br label %649

; <label>:649                                     ; preds = %648, %637, %606
  %pli4.5 = phi i32* [ %pli4.3, %637 ], [ %pli4.4, %648 ], [ %pli4.3, %606 ]
  %plin.5 = phi i32* [ %plin.3, %637 ], [ %plin.4, %648 ], [ %plin.3, %606 ]
  %exclChecksum.6 = phi i32 [ %638, %637 ], [ %exclChecksum.5, %648 ], [ %exclChecksum.4, %606 ]
  %650 = sext i32 %610 to i64
  %651 = getelementptr inbounds %struct.CompAtom* %34, i64 %650
  %652 = getelementptr inbounds %struct.CompAtom* %651, i32 0, i32 2
  %653 = load i32* %652, align 4
  %654 = and i32 %653, 4194303
  br label %604

; <label>:655                                     ; preds = %604
  br label %656

; <label>:656                                     ; preds = %655, %578
  %pli4.6 = phi i32* [ %pli4.3, %655 ], [ %219, %578 ]
  %plin.6 = phi i32* [ %plin.3, %655 ], [ %233, %578 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %655 ], [ %exclChecksum.0, %578 ]
  br label %657

; <label>:657                                     ; preds = %656, %577
  %pli4.7 = phi i32* [ %pli4.0, %577 ], [ %pli4.6, %656 ]
  %plin.7 = phi i32* [ %plin.0, %577 ], [ %plin.6, %656 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %577 ], [ %exclChecksum.7, %656 ]
  %658 = ptrtoint i32* %pli4.7 to i64
  %659 = ptrtoint i32* %219 to i64
  %660 = sub i64 %658, %659
  %661 = sdiv exact i64 %660, 4
  %662 = trunc i64 %661 to i32
  %663 = icmp ne i32 %662, 0
  br i1 %663, label %664, label %671

; <label>:664                                     ; preds = %657
  %665 = sub nsw i32 %662, 1
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds i32* %219, i64 %666
  %668 = load i32* %667, align 4
  %669 = sext i32 %662 to i64
  %670 = getelementptr inbounds i32* %219, i64 %669
  store i32 %668, i32* %670, align 4
  br label %671

; <label>:671                                     ; preds = %664, %657
  br label %672

; <label>:672                                     ; preds = %694, %671
  %plin.8 = phi i32* [ %plin.7, %671 ], [ %plin.9, %694 ]
  %plix.0 = phi i32* [ %247, %671 ], [ %plix.1, %694 ]
  %plim.0 = phi i32* [ %261, %671 ], [ %plim.1, %694 ]
  %k18.0 = phi i32 [ 0, %671 ], [ %695, %694 ]
  %673 = icmp slt i32 %k18.0, %662
  br i1 %673, label %674, label %696

; <label>:674                                     ; preds = %672
  %675 = sext i32 %k18.0 to i64
  %676 = getelementptr inbounds i32* %219, i64 %675
  %677 = load i32* %676, align 4
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds %struct.CompAtom* %34, i64 %678
  %680 = getelementptr inbounds %struct.CompAtom* %679, i32 0, i32 2
  %681 = load i32* %680, align 4
  %682 = and i32 %681, 4194303
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i8* %298, i64 %683
  %685 = load i8* %684, align 1
  %686 = sext i8 %685 to i32
  switch i32 %686, label %693 [
    i32 0, label %687
    i32 1, label %689
    i32 2, label %691
  ]

; <label>:687                                     ; preds = %674
  %688 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %677, i32* %plin.8, align 4
  br label %693

; <label>:689                                     ; preds = %674
  %690 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %677, i32* %plix.0, align 4
  br label %693

; <label>:691                                     ; preds = %674
  %692 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %677, i32* %plim.0, align 4
  br label %693

; <label>:693                                     ; preds = %691, %689, %687, %674
  %plin.9 = phi i32* [ %plin.8, %674 ], [ %plin.8, %691 ], [ %plin.8, %689 ], [ %688, %687 ]
  %plix.1 = phi i32* [ %plix.0, %674 ], [ %plix.0, %691 ], [ %690, %689 ], [ %plix.0, %687 ]
  %plim.1 = phi i32* [ %plim.0, %674 ], [ %692, %691 ], [ %plim.0, %689 ], [ %plim.0, %687 ]
  br label %694

; <label>:694                                     ; preds = %693
  %695 = add nsw i32 %k18.0, 1
  br label %672

; <label>:696                                     ; preds = %672
  %697 = ptrtoint i32* %plix.0 to i64
  %698 = ptrtoint i32* %247 to i64
  %699 = sub i64 %697, %698
  %700 = sdiv exact i64 %699, 4
  %701 = sext i32 %exclChecksum.8 to i64
  %702 = add nsw i64 %701, %700
  %703 = trunc i64 %702 to i32
  %704 = ptrtoint i32* %plim.0 to i64
  %705 = ptrtoint i32* %261 to i64
  %706 = sub i64 %704, %705
  %707 = sdiv exact i64 %706, 4
  %708 = sext i32 %703 to i64
  %709 = add nsw i64 %708, %707
  %710 = trunc i64 %709 to i32
  %711 = ptrtoint i32* %plin.8 to i64
  %712 = ptrtoint i32* %233 to i64
  %713 = sub i64 %711, %712
  %714 = sdiv exact i64 %713, 4
  %715 = trunc i64 %714 to i32
  br label %716

; <label>:716                                     ; preds = %817, %696
  %k18.1 = phi i32 [ 0, %696 ], [ %818, %817 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %696 ], [ %810, %817 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %696 ], [ %801, %817 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %696 ], [ %799, %817 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %696 ], [ %790, %817 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %696 ], [ %788, %817 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %696 ], [ %786, %817 ]
  %717 = icmp slt i32 %k18.1, %715
  br i1 %717, label %718, label %819

; <label>:718                                     ; preds = %716
  %719 = sext i32 %k18.1 to i64
  %720 = getelementptr inbounds i32* %233, i64 %719
  %721 = load i32* %720, align 4
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds %struct.CompAtom* %34, i64 %722
  %724 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 0
  %725 = getelementptr inbounds %class.Vector* %724, i32 0, i32 0
  %726 = load double* %725, align 8
  %727 = fsub double %301, %726
  %728 = fmul double %727, %727
  %729 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 0
  %730 = getelementptr inbounds %class.Vector* %729, i32 0, i32 1
  %731 = load double* %730, align 8
  %732 = fsub double %304, %731
  %733 = fmul double %732, %732
  %734 = fadd double %728, %733
  %735 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 2
  %737 = load double* %736, align 8
  %738 = fsub double %307, %737
  %739 = fmul double %738, %738
  %740 = fadd double %734, %739
  %741 = fptrunc double %740 to float
  %742 = bitcast %union.anon.15* %r2f to float*
  store float %741, float* %742, align 4
  %743 = bitcast %union.anon.15* %r2f to i32*
  %744 = load i32* %743, align 4
  %745 = ashr i32 %744, 17
  %746 = add nsw i32 %745, %22
  %747 = mul nsw i32 16, %746
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds double* %14, i64 %748
  %750 = getelementptr inbounds double* %749, i64 8
  %751 = getelementptr inbounds double* %750, i64 4
  %752 = getelementptr inbounds double* %751, i64 0
  %753 = load double* %752, align 8
  %754 = bitcast %union.anon.15* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = and i32 %755, -131072
  store i32 %756, i32* %754, align 4
  %757 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 1
  %758 = load float* %757, align 4
  %759 = fpext float %758 to double
  %760 = fmul double %508, %759
  %761 = bitcast %union.anon.15* %r2f to float*
  %762 = load float* %761, align 4
  %763 = fpext float %762 to double
  %764 = fsub double %740, %763
  %765 = getelementptr inbounds double* %751, i64 1
  %766 = load double* %765, align 8
  %767 = getelementptr inbounds double* %751, i64 2
  %768 = load double* %767, align 8
  %769 = getelementptr inbounds double* %751, i64 3
  %770 = load double* %769, align 8
  %771 = fmul double %770, %760
  %772 = fmul double %768, %760
  %773 = fmul double %766, %760
  %774 = fmul double %753, %760
  %775 = fmul double 3.000000e+00, %764
  %776 = fmul double %775, %771
  %777 = fmul double 2.000000e+00, %772
  %778 = fadd double %776, %777
  %779 = fmul double %778, %764
  %780 = fadd double %779, %773
  %781 = fmul double -2.000000e+00, %780
  %782 = sext i32 %721 to i64
  %783 = getelementptr inbounds %class.Vector* %267, i64 %782
  %784 = fmul double %781, %727
  %785 = fmul double %784, %727
  %786 = fadd double %fullElectVirial_xx.1, %785
  %787 = fmul double %784, %732
  %788 = fadd double %fullElectVirial_xy.1, %787
  %789 = fmul double %784, %738
  %790 = fadd double %fullElectVirial_xz.1, %789
  %791 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %792 = load double* %791, align 8
  %793 = fadd double %792, %784
  store double %793, double* %791, align 8
  %794 = getelementptr inbounds %class.Vector* %783, i32 0, i32 0
  %795 = load double* %794, align 8
  %796 = fsub double %795, %784
  store double %796, double* %794, align 8
  %797 = fmul double %781, %732
  %798 = fmul double %797, %732
  %799 = fadd double %fullElectVirial_yy.1, %798
  %800 = fmul double %797, %738
  %801 = fadd double %fullElectVirial_yz.1, %800
  %802 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %803 = load double* %802, align 8
  %804 = fadd double %803, %797
  store double %804, double* %802, align 8
  %805 = getelementptr inbounds %class.Vector* %783, i32 0, i32 1
  %806 = load double* %805, align 8
  %807 = fsub double %806, %797
  store double %807, double* %805, align 8
  %808 = fmul double %781, %738
  %809 = fmul double %808, %738
  %810 = fadd double %fullElectVirial_zz.1, %809
  %811 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %812 = load double* %811, align 8
  %813 = fadd double %812, %808
  store double %813, double* %811, align 8
  %814 = getelementptr inbounds %class.Vector* %783, i32 0, i32 2
  %815 = load double* %814, align 8
  %816 = fsub double %815, %808
  store double %816, double* %814, align 8
  br label %817

; <label>:817                                     ; preds = %718
  %818 = add nsw i32 %k18.1, 1
  br label %716

; <label>:819                                     ; preds = %716
  %820 = ptrtoint i32* %plim.0 to i64
  %821 = ptrtoint i32* %261 to i64
  %822 = sub i64 %820, %821
  %823 = sdiv exact i64 %822, 4
  %824 = trunc i64 %823 to i32
  br label %825

; <label>:825                                     ; preds = %945, %819
  %k18.2 = phi i32 [ 0, %819 ], [ %946, %945 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %819 ], [ %938, %945 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %819 ], [ %929, %945 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %819 ], [ %927, %945 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %819 ], [ %918, %945 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %819 ], [ %916, %945 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %819 ], [ %914, %945 ]
  %826 = icmp slt i32 %k18.2, %824
  br i1 %826, label %827, label %947

; <label>:827                                     ; preds = %825
  %828 = sext i32 %k18.2 to i64
  %829 = getelementptr inbounds i32* %261, i64 %828
  %830 = load i32* %829, align 4
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds %struct.CompAtom* %34, i64 %831
  %833 = getelementptr inbounds %struct.CompAtom* %832, i32 0, i32 0
  %834 = getelementptr inbounds %class.Vector* %833, i32 0, i32 0
  %835 = load double* %834, align 8
  %836 = fsub double %301, %835
  %837 = fmul double %836, %836
  %838 = getelementptr inbounds %struct.CompAtom* %832, i32 0, i32 0
  %839 = getelementptr inbounds %class.Vector* %838, i32 0, i32 1
  %840 = load double* %839, align 8
  %841 = fsub double %304, %840
  %842 = fmul double %841, %841
  %843 = fadd double %837, %842
  %844 = getelementptr inbounds %struct.CompAtom* %832, i32 0, i32 0
  %845 = getelementptr inbounds %class.Vector* %844, i32 0, i32 2
  %846 = load double* %845, align 8
  %847 = fsub double %307, %846
  %848 = fmul double %847, %847
  %849 = fadd double %843, %848
  %850 = fptrunc double %849 to float
  %851 = bitcast %union.anon.16* %r2f29 to float*
  store float %850, float* %851, align 4
  %852 = bitcast %union.anon.16* %r2f29 to i32*
  %853 = load i32* %852, align 4
  %854 = ashr i32 %853, 17
  %855 = add nsw i32 %854, %22
  %856 = mul nsw i32 16, %855
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds double* %14, i64 %857
  %859 = getelementptr inbounds double* %858, i64 8
  %860 = getelementptr inbounds double* %859, i64 4
  %861 = getelementptr inbounds double* %860, i64 0
  %862 = load double* %861, align 8
  %863 = bitcast %union.anon.16* %r2f29 to i32*
  %864 = load i32* %863, align 4
  %865 = and i32 %864, -131072
  store i32 %865, i32* %863, align 4
  %866 = getelementptr inbounds %struct.CompAtom* %832, i32 0, i32 1
  %867 = load float* %866, align 4
  %868 = fpext float %867 to double
  %869 = fmul double %508, %868
  %870 = bitcast %union.anon.16* %r2f29 to float*
  %871 = load float* %870, align 4
  %872 = fpext float %871 to double
  %873 = fsub double %849, %872
  %874 = getelementptr inbounds double* %860, i64 1
  %875 = load double* %874, align 8
  %876 = getelementptr inbounds double* %860, i64 2
  %877 = load double* %876, align 8
  %878 = getelementptr inbounds double* %860, i64 3
  %879 = load double* %878, align 8
  %880 = mul nsw i32 4, %855
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds double* %15, i64 %881
  %883 = getelementptr inbounds double* %882, i64 0
  %884 = load double* %883, align 8
  %885 = fmul double %18, %884
  %886 = fsub double %862, %885
  %887 = getelementptr inbounds double* %882, i64 1
  %888 = load double* %887, align 8
  %889 = fmul double %18, %888
  %890 = fsub double %875, %889
  %891 = getelementptr inbounds double* %882, i64 2
  %892 = load double* %891, align 8
  %893 = fmul double %18, %892
  %894 = fsub double %877, %893
  %895 = getelementptr inbounds double* %882, i64 3
  %896 = load double* %895, align 8
  %897 = fmul double %18, %896
  %898 = fsub double %879, %897
  %899 = fmul double %898, %869
  %900 = fmul double %894, %869
  %901 = fmul double %890, %869
  %902 = fmul double %886, %869
  %903 = fmul double 3.000000e+00, %873
  %904 = fmul double %903, %899
  %905 = fmul double 2.000000e+00, %900
  %906 = fadd double %904, %905
  %907 = fmul double %906, %873
  %908 = fadd double %907, %901
  %909 = fmul double -2.000000e+00, %908
  %910 = sext i32 %830 to i64
  %911 = getelementptr inbounds %class.Vector* %267, i64 %910
  %912 = fmul double %909, %836
  %913 = fmul double %912, %836
  %914 = fadd double %fullElectVirial_xx.2, %913
  %915 = fmul double %912, %841
  %916 = fadd double %fullElectVirial_xy.2, %915
  %917 = fmul double %912, %847
  %918 = fadd double %fullElectVirial_xz.2, %917
  %919 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %920 = load double* %919, align 8
  %921 = fadd double %920, %912
  store double %921, double* %919, align 8
  %922 = getelementptr inbounds %class.Vector* %911, i32 0, i32 0
  %923 = load double* %922, align 8
  %924 = fsub double %923, %912
  store double %924, double* %922, align 8
  %925 = fmul double %909, %841
  %926 = fmul double %925, %841
  %927 = fadd double %fullElectVirial_yy.2, %926
  %928 = fmul double %925, %847
  %929 = fadd double %fullElectVirial_yz.2, %928
  %930 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %931 = load double* %930, align 8
  %932 = fadd double %931, %925
  store double %932, double* %930, align 8
  %933 = getelementptr inbounds %class.Vector* %911, i32 0, i32 1
  %934 = load double* %933, align 8
  %935 = fsub double %934, %925
  store double %935, double* %933, align 8
  %936 = fmul double %909, %847
  %937 = fmul double %936, %847
  %938 = fadd double %fullElectVirial_zz.2, %937
  %939 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %940 = load double* %939, align 8
  %941 = fadd double %940, %936
  store double %941, double* %939, align 8
  %942 = getelementptr inbounds %class.Vector* %911, i32 0, i32 2
  %943 = load double* %942, align 8
  %944 = fsub double %943, %936
  store double %944, double* %942, align 8
  br label %945

; <label>:945                                     ; preds = %827
  %946 = add nsw i32 %k18.2, 1
  br label %825

; <label>:947                                     ; preds = %825
  %948 = ptrtoint i32* %plix.0 to i64
  %949 = ptrtoint i32* %247 to i64
  %950 = sub i64 %948, %949
  %951 = sdiv exact i64 %950, 4
  %952 = trunc i64 %951 to i32
  br label %953

; <label>:953                                     ; preds = %1069, %947
  %k18.3 = phi i32 [ 0, %947 ], [ %1070, %1069 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %947 ], [ %1062, %1069 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %947 ], [ %1053, %1069 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %947 ], [ %1051, %1069 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %947 ], [ %1042, %1069 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %947 ], [ %1040, %1069 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %947 ], [ %1038, %1069 ]
  %954 = icmp slt i32 %k18.3, %952
  br i1 %954, label %955, label %1071

; <label>:955                                     ; preds = %953
  %956 = sext i32 %k18.3 to i64
  %957 = getelementptr inbounds i32* %247, i64 %956
  %958 = load i32* %957, align 4
  %959 = sext i32 %958 to i64
  %960 = getelementptr inbounds %struct.CompAtom* %34, i64 %959
  %961 = getelementptr inbounds %struct.CompAtom* %960, i32 0, i32 0
  %962 = getelementptr inbounds %class.Vector* %961, i32 0, i32 0
  %963 = load double* %962, align 8
  %964 = fsub double %301, %963
  %965 = fmul double %964, %964
  %966 = getelementptr inbounds %struct.CompAtom* %960, i32 0, i32 0
  %967 = getelementptr inbounds %class.Vector* %966, i32 0, i32 1
  %968 = load double* %967, align 8
  %969 = fsub double %304, %968
  %970 = fmul double %969, %969
  %971 = fadd double %965, %970
  %972 = getelementptr inbounds %struct.CompAtom* %960, i32 0, i32 0
  %973 = getelementptr inbounds %class.Vector* %972, i32 0, i32 2
  %974 = load double* %973, align 8
  %975 = fsub double %307, %974
  %976 = fmul double %975, %975
  %977 = fadd double %971, %976
  %978 = fptrunc double %977 to float
  %979 = bitcast %union.anon.17* %r2f50 to float*
  store float %978, float* %979, align 4
  %980 = bitcast %union.anon.17* %r2f50 to i32*
  %981 = load i32* %980, align 4
  %982 = ashr i32 %981, 17
  %983 = add nsw i32 %982, %22
  %984 = mul nsw i32 16, %983
  %985 = sext i32 %984 to i64
  %986 = getelementptr inbounds double* %14, i64 %985
  %987 = getelementptr inbounds double* %986, i64 8
  %988 = getelementptr inbounds double* %987, i64 4
  %989 = getelementptr inbounds double* %988, i64 0
  %990 = load double* %989, align 8
  %991 = bitcast %union.anon.17* %r2f50 to i32*
  %992 = load i32* %991, align 4
  %993 = and i32 %992, -131072
  store i32 %993, i32* %991, align 4
  %994 = getelementptr inbounds %struct.CompAtom* %960, i32 0, i32 1
  %995 = load float* %994, align 4
  %996 = fpext float %995 to double
  %997 = fmul double %508, %996
  %998 = bitcast %union.anon.17* %r2f50 to float*
  %999 = load float* %998, align 4
  %1000 = fpext float %999 to double
  %1001 = fsub double %977, %1000
  %1002 = getelementptr inbounds double* %988, i64 1
  %1003 = load double* %1002, align 8
  %1004 = getelementptr inbounds double* %988, i64 2
  %1005 = load double* %1004, align 8
  %1006 = getelementptr inbounds double* %988, i64 3
  %1007 = load double* %1006, align 8
  %1008 = mul nsw i32 4, %983
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds double* %15, i64 %1009
  %1011 = getelementptr inbounds double* %1010, i64 0
  %1012 = load double* %1011, align 8
  %1013 = fsub double %990, %1012
  %1014 = getelementptr inbounds double* %1010, i64 1
  %1015 = load double* %1014, align 8
  %1016 = fsub double %1003, %1015
  %1017 = getelementptr inbounds double* %1010, i64 2
  %1018 = load double* %1017, align 8
  %1019 = fsub double %1005, %1018
  %1020 = getelementptr inbounds double* %1010, i64 3
  %1021 = load double* %1020, align 8
  %1022 = fsub double %1007, %1021
  %1023 = fmul double %1022, %997
  %1024 = fmul double %1019, %997
  %1025 = fmul double %1016, %997
  %1026 = fmul double %1013, %997
  %1027 = fmul double 3.000000e+00, %1001
  %1028 = fmul double %1027, %1023
  %1029 = fmul double 2.000000e+00, %1024
  %1030 = fadd double %1028, %1029
  %1031 = fmul double %1030, %1001
  %1032 = fadd double %1031, %1025
  %1033 = fmul double -2.000000e+00, %1032
  %1034 = sext i32 %958 to i64
  %1035 = getelementptr inbounds %class.Vector* %267, i64 %1034
  %1036 = fmul double %1033, %964
  %1037 = fmul double %1036, %964
  %1038 = fadd double %fullElectVirial_xx.3, %1037
  %1039 = fmul double %1036, %969
  %1040 = fadd double %fullElectVirial_xy.3, %1039
  %1041 = fmul double %1036, %975
  %1042 = fadd double %fullElectVirial_xz.3, %1041
  %1043 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %1044 = load double* %1043, align 8
  %1045 = fadd double %1044, %1036
  store double %1045, double* %1043, align 8
  %1046 = getelementptr inbounds %class.Vector* %1035, i32 0, i32 0
  %1047 = load double* %1046, align 8
  %1048 = fsub double %1047, %1036
  store double %1048, double* %1046, align 8
  %1049 = fmul double %1033, %969
  %1050 = fmul double %1049, %969
  %1051 = fadd double %fullElectVirial_yy.3, %1050
  %1052 = fmul double %1049, %975
  %1053 = fadd double %fullElectVirial_yz.3, %1052
  %1054 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %1055 = load double* %1054, align 8
  %1056 = fadd double %1055, %1049
  store double %1056, double* %1054, align 8
  %1057 = getelementptr inbounds %class.Vector* %1035, i32 0, i32 1
  %1058 = load double* %1057, align 8
  %1059 = fsub double %1058, %1049
  store double %1059, double* %1057, align 8
  %1060 = fmul double %1033, %975
  %1061 = fmul double %1060, %975
  %1062 = fadd double %fullElectVirial_zz.3, %1061
  %1063 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %1064 = load double* %1063, align 8
  %1065 = fadd double %1064, %1060
  store double %1065, double* %1063, align 8
  %1066 = getelementptr inbounds %class.Vector* %1035, i32 0, i32 2
  %1067 = load double* %1066, align 8
  %1068 = fsub double %1067, %1060
  store double %1068, double* %1066, align 8
  br label %1069

; <label>:1069                                    ; preds = %955
  %1070 = add nsw i32 %k18.3, 1
  br label %953

; <label>:1071                                    ; preds = %953
  br label %1072

; <label>:1072                                    ; preds = %1071, %486, %337
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %337 ], [ %pairlistindex.1, %1071 ], [ %465, %486 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %337 ], [ %pairlistoffset.1, %1071 ], [ 0, %486 ]
  %pairCount.3 = phi i32 [ %333, %337 ], [ %pairCount.2, %1071 ], [ %pairCount.1, %486 ]
  %i.2 = phi i32 [ %339, %337 ], [ %i.1, %1071 ], [ %489, %486 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %337 ], [ %fullElectVirial_zz.3, %1071 ], [ %fullElectVirial_zz.0, %486 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %337 ], [ %fullElectVirial_yz.3, %1071 ], [ %fullElectVirial_yz.0, %486 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %337 ], [ %fullElectVirial_yy.3, %1071 ], [ %fullElectVirial_yy.0, %486 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %337 ], [ %fullElectVirial_xz.3, %1071 ], [ %fullElectVirial_xz.0, %486 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %337 ], [ %fullElectVirial_xy.3, %1071 ], [ %fullElectVirial_xy.0, %486 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %337 ], [ %fullElectVirial_xx.3, %1071 ], [ %fullElectVirial_xx.0, %486 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %337 ], [ %710, %1071 ], [ %exclChecksum.0, %486 ]
  %1073 = add nsw i32 %i.2, 1
  br label %281

; <label>:1074                                    ; preds = %281
  %1075 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1076 = icmp ne i32* %48, %1075
  br i1 %1076, label %1077, label %1082

; <label>:1077                                    ; preds = %1074
  %1078 = icmp eq i32* %48, null
  br i1 %1078, label %1081, label %1079

; <label>:1079                                    ; preds = %1077
  %1080 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1080) #8
  br label %1081

; <label>:1081                                    ; preds = %1079, %1077
  br label %1082

; <label>:1082                                    ; preds = %1081, %1074
  %1083 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1084 = icmp ne i32* %62, %1083
  br i1 %1084, label %1085, label %1090

; <label>:1085                                    ; preds = %1082
  %1086 = icmp eq i32* %62, null
  br i1 %1086, label %1089, label %1087

; <label>:1087                                    ; preds = %1085
  %1088 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1088) #8
  br label %1089

; <label>:1089                                    ; preds = %1087, %1085
  br label %1090

; <label>:1090                                    ; preds = %1089, %1082
  %1091 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1092 = icmp ne i32* %76, %1091
  br i1 %1092, label %1093, label %1098

; <label>:1093                                    ; preds = %1090
  %1094 = icmp eq i32* %76, null
  br i1 %1094, label %1097, label %1095

; <label>:1095                                    ; preds = %1093
  %1096 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1096) #8
  br label %1097

; <label>:1097                                    ; preds = %1095, %1093
  br label %1098

; <label>:1098                                    ; preds = %1097, %1090
  %1099 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1100 = icmp ne i32* %205, %1099
  br i1 %1100, label %1101, label %1106

; <label>:1101                                    ; preds = %1098
  %1102 = icmp eq i32* %205, null
  br i1 %1102, label %1105, label %1103

; <label>:1103                                    ; preds = %1101
  %1104 = bitcast i32* %205 to i8*
  call void @_ZdaPv(i8* %1104) #8
  br label %1105

; <label>:1105                                    ; preds = %1103, %1101
  br label %1106

; <label>:1106                                    ; preds = %1105, %1098
  %1107 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1108 = icmp ne i32* %219, %1107
  br i1 %1108, label %1109, label %1114

; <label>:1109                                    ; preds = %1106
  %1110 = icmp eq i32* %219, null
  br i1 %1110, label %1113, label %1111

; <label>:1111                                    ; preds = %1109
  %1112 = bitcast i32* %219 to i8*
  call void @_ZdaPv(i8* %1112) #8
  br label %1113

; <label>:1113                                    ; preds = %1111, %1109
  br label %1114

; <label>:1114                                    ; preds = %1113, %1106
  %1115 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1116 = icmp ne i32* %233, %1115
  br i1 %1116, label %1117, label %1122

; <label>:1117                                    ; preds = %1114
  %1118 = icmp eq i32* %233, null
  br i1 %1118, label %1121, label %1119

; <label>:1119                                    ; preds = %1117
  %1120 = bitcast i32* %233 to i8*
  call void @_ZdaPv(i8* %1120) #8
  br label %1121

; <label>:1121                                    ; preds = %1119, %1117
  br label %1122

; <label>:1122                                    ; preds = %1121, %1114
  %1123 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1124 = icmp ne i32* %247, %1123
  br i1 %1124, label %1125, label %1130

; <label>:1125                                    ; preds = %1122
  %1126 = icmp eq i32* %247, null
  br i1 %1126, label %1129, label %1127

; <label>:1127                                    ; preds = %1125
  %1128 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %1128) #8
  br label %1129

; <label>:1129                                    ; preds = %1127, %1125
  br label %1130

; <label>:1130                                    ; preds = %1129, %1122
  %1131 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1132 = icmp ne i32* %261, %1131
  br i1 %1132, label %1133, label %1138

; <label>:1133                                    ; preds = %1130
  %1134 = icmp eq i32* %261, null
  br i1 %1134, label %1137, label %1135

; <label>:1135                                    ; preds = %1133
  %1136 = bitcast i32* %261 to i8*
  call void @_ZdaPv(i8* %1136) #8
  br label %1137

; <label>:1137                                    ; preds = %1135, %1133
  br label %1138

; <label>:1138                                    ; preds = %1137, %1130
  %1139 = sitofp i32 %exclChecksum.0 to double
  %1140 = getelementptr inbounds double* %6, i64 22
  %1141 = load double* %1140, align 8
  %1142 = fadd double %1141, %1139
  store double %1142, double* %1140, align 8
  %1143 = getelementptr inbounds double* %6, i64 12
  %1144 = load double* %1143, align 8
  %1145 = fadd double %1144, %fullElectVirial_xx.0
  store double %1145, double* %1143, align 8
  %1146 = getelementptr inbounds double* %6, i64 13
  %1147 = load double* %1146, align 8
  %1148 = fadd double %1147, %fullElectVirial_xy.0
  store double %1148, double* %1146, align 8
  %1149 = getelementptr inbounds double* %6, i64 14
  %1150 = load double* %1149, align 8
  %1151 = fadd double %1150, %fullElectVirial_xz.0
  store double %1151, double* %1149, align 8
  %1152 = getelementptr inbounds double* %6, i64 15
  %1153 = load double* %1152, align 8
  %1154 = fadd double %1153, %fullElectVirial_xy.0
  store double %1154, double* %1152, align 8
  %1155 = getelementptr inbounds double* %6, i64 16
  %1156 = load double* %1155, align 8
  %1157 = fadd double %1156, %fullElectVirial_yy.0
  store double %1157, double* %1155, align 8
  %1158 = getelementptr inbounds double* %6, i64 17
  %1159 = load double* %1158, align 8
  %1160 = fadd double %1159, %fullElectVirial_yz.0
  store double %1160, double* %1158, align 8
  %1161 = getelementptr inbounds double* %6, i64 18
  %1162 = load double* %1161, align 8
  %1163 = fadd double %1162, %fullElectVirial_xz.0
  store double %1163, double* %1161, align 8
  %1164 = getelementptr inbounds double* %6, i64 19
  %1165 = load double* %1164, align 8
  %1166 = fadd double %1165, %fullElectVirial_yz.0
  store double %1166, double* %1164, align 8
  %1167 = getelementptr inbounds double* %6, i64 20
  %1168 = load double* %1167, align 8
  %1169 = fadd double %1168, %fullElectVirial_zz.0
  store double %1169, double* %1167, align 8
  br label %1170

; <label>:1170                                    ; preds = %1138, %180, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil31calc_pair_energy_slow_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.18, align 4
  %r2f29 = alloca %union.anon.19, align 4
  %r2f51 = alloca %union.anon.20, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1194

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %182

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  br label %136

; <label>:136                                     ; preds = %152, %135
  %all_fixed.2 = phi i32 [ %all_fixed.0, %135 ], [ %all_fixed.3, %152 ]
  %i.0 = phi i32 [ 0, %135 ], [ %153, %152 ]
  %137 = icmp ne i32 %all_fixed.2, 0
  br i1 %137, label %138, label %140

; <label>:138                                     ; preds = %136
  %139 = icmp slt i32 %i.0, %25
  br label %140

; <label>:140                                     ; preds = %138, %136
  %141 = phi i1 [ false, %136 ], [ %139, %138 ]
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %140
  %143 = sext i32 %i.0 to i64
  %144 = getelementptr inbounds %struct.CompAtom* %31, i64 %143
  %145 = getelementptr inbounds %struct.CompAtom* %144, i32 0, i32 2
  %146 = load i32* %145, align 4
  %147 = lshr i32 %146, 26
  %148 = and i32 %147, 1
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %151, label %150

; <label>:150                                     ; preds = %142
  br label %151

; <label>:151                                     ; preds = %150, %142
  %all_fixed.3 = phi i32 [ %all_fixed.2, %142 ], [ 0, %150 ]
  br label %152

; <label>:152                                     ; preds = %151
  %153 = add nsw i32 %i.0, 1
  br label %136

; <label>:154                                     ; preds = %140
  %155 = icmp ne i32 %all_fixed.2, 0
  br i1 %155, label %156, label %181

; <label>:156                                     ; preds = %154
  %157 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %158 = icmp ne i32* %48, %157
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = icmp eq i32* %48, null
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %159
  %162 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %162) #8
  br label %163

; <label>:163                                     ; preds = %161, %159
  br label %164

; <label>:164                                     ; preds = %163, %156
  %165 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %166 = icmp ne i32* %62, %165
  br i1 %166, label %167, label %172

; <label>:167                                     ; preds = %164
  %168 = icmp eq i32* %62, null
  br i1 %168, label %171, label %169

; <label>:169                                     ; preds = %167
  %170 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %170) #8
  br label %171

; <label>:171                                     ; preds = %169, %167
  br label %172

; <label>:172                                     ; preds = %171, %164
  %173 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %174 = icmp ne i32* %76, %173
  br i1 %174, label %175, label %180

; <label>:175                                     ; preds = %172
  %176 = icmp eq i32* %76, null
  br i1 %176, label %179, label %177

; <label>:177                                     ; preds = %175
  %178 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %178) #8
  br label %179

; <label>:179                                     ; preds = %177, %175
  br label %180

; <label>:180                                     ; preds = %179, %172
  br label %1194

; <label>:181                                     ; preds = %154
  br label %182

; <label>:182                                     ; preds = %181, %111
  %fixg.2 = phi i32 [ %fixg.0, %181 ], [ 0, %111 ]
  %183 = icmp ne i32 %fixg.2, 0
  br i1 %183, label %184, label %191

; <label>:184                                     ; preds = %182
  %185 = sub nsw i32 %fixg.2, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32* %62, i64 %186
  %188 = load i32* %187, align 4
  %189 = sext i32 %fixg.2 to i64
  %190 = getelementptr inbounds i32* %62, i64 %189
  store i32 %188, i32* %190, align 4
  br label %191

; <label>:191                                     ; preds = %184, %182
  %192 = icmp slt i32 %28, 1000
  br i1 %192, label %193, label %195

; <label>:193                                     ; preds = %191
  %194 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %204

; <label>:195                                     ; preds = %191
  %196 = add nsw i32 %28, 5
  %197 = sext i32 %196 to i64
  %198 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %197, i64 4)
  %199 = extractvalue { i64, i1 } %198, 1
  %200 = extractvalue { i64, i1 } %198, 0
  %201 = select i1 %199, i64 -1, i64 %200
  %202 = call noalias i8* @_Znam(i64 %201) #9
  %203 = bitcast i8* %202 to i32*
  br label %204

; <label>:204                                     ; preds = %195, %193
  %205 = phi i32* [ %194, %193 ], [ %203, %195 ]
  %206 = icmp slt i32 %28, 1000
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %204
  %208 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %218

; <label>:209                                     ; preds = %204
  %210 = add nsw i32 %28, 5
  %211 = sext i32 %210 to i64
  %212 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %211, i64 4)
  %213 = extractvalue { i64, i1 } %212, 1
  %214 = extractvalue { i64, i1 } %212, 0
  %215 = select i1 %213, i64 -1, i64 %214
  %216 = call noalias i8* @_Znam(i64 %215) #9
  %217 = bitcast i8* %216 to i32*
  br label %218

; <label>:218                                     ; preds = %209, %207
  %219 = phi i32* [ %208, %207 ], [ %217, %209 ]
  %220 = icmp slt i32 %28, 1000
  br i1 %220, label %221, label %223

; <label>:221                                     ; preds = %218
  %222 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %232

; <label>:223                                     ; preds = %218
  %224 = add nsw i32 %28, 5
  %225 = sext i32 %224 to i64
  %226 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %225, i64 4)
  %227 = extractvalue { i64, i1 } %226, 1
  %228 = extractvalue { i64, i1 } %226, 0
  %229 = select i1 %227, i64 -1, i64 %228
  %230 = call noalias i8* @_Znam(i64 %229) #9
  %231 = bitcast i8* %230 to i32*
  br label %232

; <label>:232                                     ; preds = %223, %221
  %233 = phi i32* [ %222, %221 ], [ %231, %223 ]
  %234 = icmp slt i32 %28, 1000
  br i1 %234, label %235, label %237

; <label>:235                                     ; preds = %232
  %236 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %246

; <label>:237                                     ; preds = %232
  %238 = add nsw i32 %28, 5
  %239 = sext i32 %238 to i64
  %240 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %239, i64 4)
  %241 = extractvalue { i64, i1 } %240, 1
  %242 = extractvalue { i64, i1 } %240, 0
  %243 = select i1 %241, i64 -1, i64 %242
  %244 = call noalias i8* @_Znam(i64 %243) #9
  %245 = bitcast i8* %244 to i32*
  br label %246

; <label>:246                                     ; preds = %237, %235
  %247 = phi i32* [ %236, %235 ], [ %245, %237 ]
  %248 = icmp slt i32 %28, 1000
  br i1 %248, label %249, label %251

; <label>:249                                     ; preds = %246
  %250 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %260

; <label>:251                                     ; preds = %246
  %252 = add nsw i32 %28, 5
  %253 = sext i32 %252 to i64
  %254 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %253, i64 4)
  %255 = extractvalue { i64, i1 } %254, 1
  %256 = extractvalue { i64, i1 } %254, 0
  %257 = select i1 %255, i64 -1, i64 %256
  %258 = call noalias i8* @_Znam(i64 %257) #9
  %259 = bitcast i8* %258 to i32*
  br label %260

; <label>:260                                     ; preds = %251, %249
  %261 = phi i32* [ %250, %249 ], [ %259, %251 ]
  %262 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %263 = getelementptr inbounds [2 x %class.Vector*]* %262, i32 0, i64 0
  %264 = load %class.Vector** %263, align 8
  %265 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %266 = getelementptr inbounds [2 x %class.Vector*]* %265, i32 0, i64 1
  %267 = load %class.Vector** %266, align 8
  %268 = mul nsw i32 %25, %28
  %269 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %270 = load i32* %269, align 4
  %271 = mul nsw i32 %268, %270
  %272 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %273 = load i32* %272, align 4
  %274 = sdiv i32 %271, %273
  %275 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %276 = load i32* %275, align 4
  %277 = mul nsw i32 %268, %276
  %278 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %279 = load i32* %278, align 4
  %280 = sdiv i32 %277, %279
  br label %281

; <label>:281                                     ; preds = %1093, %260
  %pairlistindex.0 = phi i32 [ 0, %260 ], [ %pairlistindex.2, %1093 ]
  %pairlistoffset.0 = phi i32 [ 0, %260 ], [ %pairlistoffset.2, %1093 ]
  %pairCount.0 = phi i32 [ 0, %260 ], [ %pairCount.3, %1093 ]
  %i.1 = phi i32 [ 0, %260 ], [ %1094, %1093 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_zz.4, %1093 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yz.4, %1093 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_yy.4, %1093 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xz.4, %1093 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xy.4, %1093 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectVirial_xx.4, %1093 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %260 ], [ %fullElectEnergy.4, %1093 ]
  %exclChecksum.0 = phi i32 [ 0, %260 ], [ %exclChecksum.9, %1093 ]
  %282 = icmp slt i32 %i.1, %25
  br i1 %282, label %283, label %1095

; <label>:283                                     ; preds = %281
  %284 = sext i32 %i.1 to i64
  %285 = getelementptr inbounds %struct.CompAtom* %31, i64 %284
  %286 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %287 = load i32* %286, align 4
  %288 = and i32 %287, 4194303
  %289 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %288)
  %290 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 0
  %291 = load i32* %290, align 4
  %292 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 1
  %293 = load i32* %292, align 4
  %294 = getelementptr inbounds %class.ExclusionCheck* %289, i32 0, i32 2
  %295 = load i8** %294, align 8
  %296 = sext i32 %291 to i64
  %297 = sub i64 0, %296
  %298 = getelementptr inbounds i8* %295, i64 %297
  %299 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %300 = getelementptr inbounds %class.Vector* %299, i32 0, i32 0
  %301 = load double* %300, align 8
  %302 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %303 = getelementptr inbounds %class.Vector* %302, i32 0, i32 1
  %304 = load double* %303, align 8
  %305 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 0
  %306 = getelementptr inbounds %class.Vector* %305, i32 0, i32 2
  %307 = load double* %306, align 8
  %308 = sext i32 %i.1 to i64
  %309 = getelementptr inbounds %class.Vector* %264, i64 %308
  %310 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %311 = load i32* %310, align 4
  %312 = lshr i32 %311, 22
  %313 = and i32 %312, 7
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %321, label %315

; <label>:315                                     ; preds = %283
  %316 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %317 = load i32* %316, align 4
  %318 = lshr i32 %317, 25
  %319 = and i32 %318, 1
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %321, label %491

; <label>:321                                     ; preds = %315, %283
  %322 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %323 = load i32* %322, align 4
  %324 = lshr i32 %323, 22
  %325 = and i32 %324, 7
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %341

; <label>:327                                     ; preds = %321
  %328 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %329 = load i32* %328, align 4
  %330 = lshr i32 %329, 22
  %331 = and i32 %330, 7
  %332 = mul nsw i32 %331, %28
  %333 = add nsw i32 %pairCount.0, %332
  %334 = icmp slt i32 %pairCount.0, %274
  br i1 %334, label %337, label %335

; <label>:335                                     ; preds = %327
  %336 = icmp sge i32 %pairCount.0, %280
  br i1 %336, label %337, label %340

; <label>:337                                     ; preds = %335, %327
  %338 = sub nsw i32 %331, 1
  %339 = add nsw i32 %i.1, %338
  br label %1093

; <label>:340                                     ; preds = %335
  br label %341

; <label>:341                                     ; preds = %340, %321
  %pairCount.1 = phi i32 [ %333, %340 ], [ %pairCount.0, %321 ]
  %342 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %350

; <label>:344                                     ; preds = %341
  %345 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %346 = load i32* %345, align 4
  %347 = lshr i32 %346, 27
  %348 = and i32 %347, 1
  %349 = icmp ne i32 %348, 0
  br label %350

; <label>:350                                     ; preds = %344, %341
  %351 = phi i1 [ false, %341 ], [ %349, %344 ]
  %352 = zext i1 %351 to i32
  %353 = sext i32 0 to i64
  %354 = getelementptr inbounds i32* %205, i64 %353
  %355 = icmp ne i32 %352, 0
  br i1 %355, label %356, label %357

; <label>:356                                     ; preds = %350
  br label %358

; <label>:357                                     ; preds = %350
  br label %358

; <label>:358                                     ; preds = %357, %356
  %359 = phi i32* [ %62, %356 ], [ %48, %357 ]
  %360 = icmp ne i32 %352, 0
  br i1 %360, label %361, label %362

; <label>:361                                     ; preds = %358
  br label %363

; <label>:362                                     ; preds = %358
  br label %363

; <label>:363                                     ; preds = %362, %361
  %364 = phi i32 [ %fixg.2, %361 ], [ %g.0, %362 ]
  %365 = icmp slt i32 0, %364
  br i1 %365, label %366, label %460

; <label>:366                                     ; preds = %363
  %367 = sext i32 0 to i64
  %368 = getelementptr inbounds i32* %359, i64 %367
  %369 = load i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds %struct.CompAtom* %34, i64 %370
  %372 = getelementptr inbounds %struct.CompAtom* %371, i32 0, i32 0
  %373 = getelementptr inbounds %class.Vector* %372, i32 0, i32 0
  %374 = load double* %373, align 8
  %375 = sext i32 %369 to i64
  %376 = getelementptr inbounds %struct.CompAtom* %34, i64 %375
  %377 = getelementptr inbounds %struct.CompAtom* %376, i32 0, i32 0
  %378 = getelementptr inbounds %class.Vector* %377, i32 0, i32 1
  %379 = load double* %378, align 8
  %380 = sext i32 %369 to i64
  %381 = getelementptr inbounds %struct.CompAtom* %34, i64 %380
  %382 = getelementptr inbounds %struct.CompAtom* %381, i32 0, i32 0
  %383 = getelementptr inbounds %class.Vector* %382, i32 0, i32 2
  %384 = load double* %383, align 8
  br label %385

; <label>:385                                     ; preds = %418, %366
  %g.3 = phi i32 [ 0, %366 ], [ %388, %418 ]
  %gli.0 = phi i32* [ %76, %366 ], [ %gli.1, %418 ]
  %j2.0 = phi i32 [ %369, %366 ], [ %391, %418 ]
  %p_j_x.0 = phi double [ %374, %366 ], [ %398, %418 ]
  %p_j_y.0 = phi double [ %379, %366 ], [ %406, %418 ]
  %p_j_z.0 = phi double [ %384, %366 ], [ %414, %418 ]
  %386 = icmp slt i32 %g.3, %364
  br i1 %386, label %387, label %419

; <label>:387                                     ; preds = %385
  %388 = add nsw i32 %g.3, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32* %359, i64 %389
  %391 = load i32* %390, align 4
  %392 = fsub double %301, %p_j_x.0
  %393 = fmul double %392, %392
  %394 = sext i32 %391 to i64
  %395 = getelementptr inbounds %struct.CompAtom* %34, i64 %394
  %396 = getelementptr inbounds %struct.CompAtom* %395, i32 0, i32 0
  %397 = getelementptr inbounds %class.Vector* %396, i32 0, i32 0
  %398 = load double* %397, align 8
  %399 = fsub double %304, %p_j_y.0
  %400 = fmul double %399, %399
  %401 = fadd double %393, %400
  %402 = sext i32 %391 to i64
  %403 = getelementptr inbounds %struct.CompAtom* %34, i64 %402
  %404 = getelementptr inbounds %struct.CompAtom* %403, i32 0, i32 0
  %405 = getelementptr inbounds %class.Vector* %404, i32 0, i32 1
  %406 = load double* %405, align 8
  %407 = fsub double %307, %p_j_z.0
  %408 = fmul double %407, %407
  %409 = fadd double %401, %408
  %410 = sext i32 %391 to i64
  %411 = getelementptr inbounds %struct.CompAtom* %34, i64 %410
  %412 = getelementptr inbounds %struct.CompAtom* %411, i32 0, i32 0
  %413 = getelementptr inbounds %class.Vector* %412, i32 0, i32 2
  %414 = load double* %413, align 8
  %415 = fcmp ole double %409, %8
  br i1 %415, label %416, label %418

; <label>:416                                     ; preds = %387
  store i32 %j2.0, i32* %gli.0, align 4
  %417 = getelementptr inbounds i32* %gli.0, i32 1
  br label %418

; <label>:418                                     ; preds = %416, %387
  %gli.1 = phi i32* [ %417, %416 ], [ %gli.0, %387 ]
  br label %385

; <label>:419                                     ; preds = %385
  %420 = ptrtoint i32* %gli.0 to i64
  %421 = ptrtoint i32* %76 to i64
  %422 = sub i64 %420, %421
  %423 = sdiv exact i64 %422, 4
  %424 = trunc i64 %423 to i32
  br label %425

; <label>:425                                     ; preds = %457, %419
  %pli.0 = phi i32* [ %354, %419 ], [ %456, %457 ]
  %h.0 = phi i32 [ 0, %419 ], [ %458, %457 ]
  %426 = icmp slt i32 %h.0, %424
  br i1 %426, label %427, label %459

; <label>:427                                     ; preds = %425
  %428 = sext i32 %h.0 to i64
  %429 = getelementptr inbounds i32* %76, i64 %428
  %430 = load i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds %struct.CompAtom* %34, i64 %431
  %433 = getelementptr inbounds %struct.CompAtom* %432, i32 0, i32 2
  %434 = load i32* %433, align 4
  %435 = lshr i32 %434, 25
  %436 = and i32 %435, 1
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %439

; <label>:438                                     ; preds = %427
  br label %446

; <label>:439                                     ; preds = %427
  %440 = sext i32 %430 to i64
  %441 = getelementptr inbounds %struct.CompAtom* %34, i64 %440
  %442 = getelementptr inbounds %struct.CompAtom* %441, i32 0, i32 2
  %443 = load i32* %442, align 4
  %444 = lshr i32 %443, 22
  %445 = and i32 %444, 7
  br label %446

; <label>:446                                     ; preds = %439, %438
  %447 = phi i32 [ 1, %438 ], [ %445, %439 ]
  %448 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %430, i32* %448, align 4
  %449 = add nsw i32 %430, 1
  %450 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %449, i32* %450, align 4
  %451 = add nsw i32 %430, 2
  %452 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %451, i32* %452, align 4
  %453 = add nsw i32 %430, 3
  %454 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %453, i32* %454, align 4
  %455 = sext i32 %447 to i64
  %456 = getelementptr inbounds i32* %pli.0, i64 %455
  br label %457

; <label>:457                                     ; preds = %446
  %458 = add nsw i32 %h.0, 1
  br label %425

; <label>:459                                     ; preds = %425
  br label %460

; <label>:460                                     ; preds = %459, %363
  %pli.1 = phi i32* [ %pli.0, %459 ], [ %354, %363 ]
  %461 = ptrtoint i32* %pli.1 to i64
  %462 = ptrtoint i32* %205 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  %466 = icmp ne i32 %465, 0
  br i1 %466, label %467, label %474

; <label>:467                                     ; preds = %460
  %468 = sub nsw i32 %465, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i32* %205, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %465 to i64
  %473 = getelementptr inbounds i32* %205, i64 %472
  store i32 %471, i32* %473, align 4
  br label %490

; <label>:474                                     ; preds = %460
  %475 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %476 = load i32* %475, align 4
  %477 = lshr i32 %476, 25
  %478 = and i32 %477, 1
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %480, label %481

; <label>:480                                     ; preds = %474
  br label %486

; <label>:481                                     ; preds = %474
  %482 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %483 = load i32* %482, align 4
  %484 = lshr i32 %483, 22
  %485 = and i32 %484, 7
  br label %486

; <label>:486                                     ; preds = %481, %480
  %487 = phi i32 [ 1, %480 ], [ %485, %481 ]
  %488 = sub nsw i32 %487, 1
  %489 = add nsw i32 %i.1, %488
  br label %1093

; <label>:490                                     ; preds = %467
  br label %491

; <label>:491                                     ; preds = %490, %315
  %pairlistindex.1 = phi i32 [ %465, %490 ], [ %pairlistindex.0, %315 ]
  %pairlistoffset.1 = phi i32 [ 0, %490 ], [ %pairlistoffset.0, %315 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %490 ], [ %pairCount.0, %315 ]
  %492 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %493 = icmp ne i32 %492, 0
  br i1 %493, label %494, label %500

; <label>:494                                     ; preds = %491
  %495 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %496 = load i32* %495, align 4
  %497 = lshr i32 %496, 26
  %498 = and i32 %497, 1
  %499 = icmp ne i32 %498, 0
  br label %500

; <label>:500                                     ; preds = %494, %491
  %501 = phi i1 [ false, %491 ], [ %499, %494 ]
  %502 = zext i1 %501 to i32
  %503 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 1
  %504 = load float* %503, align 4
  %505 = fpext float %504 to double
  %506 = fmul double 3.320636e+02, %505
  %507 = fmul double %506, %16
  %508 = fmul double %507, %9
  %509 = getelementptr inbounds %struct.CompAtom* %285, i32 0, i32 2
  %510 = load i32* %509, align 4
  %511 = and i32 %510, 4194303
  %512 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %511)
  %513 = zext i16 %512 to i32
  %514 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %513)
  %515 = icmp ne i32 %502, 0
  br i1 %515, label %516, label %578

; <label>:516                                     ; preds = %500
  br label %517

; <label>:517                                     ; preds = %575, %516
  %pli4.0 = phi i32* [ %219, %516 ], [ %pli4.2, %575 ]
  %plin.0 = phi i32* [ %233, %516 ], [ %plin.2, %575 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %516 ], [ %576, %575 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %516 ], [ %exclChecksum.3, %575 ]
  %518 = icmp slt i32 %k.0, %pairlistindex.1
  br i1 %518, label %519, label %577

; <label>:519                                     ; preds = %517
  %520 = sext i32 %k.0 to i64
  %521 = getelementptr inbounds i32* %205, i64 %520
  %522 = load i32* %521, align 4
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds %struct.CompAtom* %34, i64 %523
  %525 = getelementptr inbounds %struct.CompAtom* %524, i32 0, i32 0
  %526 = getelementptr inbounds %class.Vector* %525, i32 0, i32 0
  %527 = load double* %526, align 8
  %528 = fsub double %301, %527
  %529 = fmul double %528, %528
  %530 = sext i32 %522 to i64
  %531 = getelementptr inbounds %struct.CompAtom* %34, i64 %530
  %532 = getelementptr inbounds %struct.CompAtom* %531, i32 0, i32 0
  %533 = getelementptr inbounds %class.Vector* %532, i32 0, i32 1
  %534 = load double* %533, align 8
  %535 = fsub double %304, %534
  %536 = fmul double %535, %535
  %537 = fadd double %529, %536
  %538 = sext i32 %522 to i64
  %539 = getelementptr inbounds %struct.CompAtom* %34, i64 %538
  %540 = getelementptr inbounds %struct.CompAtom* %539, i32 0, i32 0
  %541 = getelementptr inbounds %class.Vector* %540, i32 0, i32 2
  %542 = load double* %541, align 8
  %543 = fsub double %307, %542
  %544 = fmul double %543, %543
  %545 = fadd double %537, %544
  %546 = sext i32 %522 to i64
  %547 = getelementptr inbounds %struct.CompAtom* %34, i64 %546
  %548 = getelementptr inbounds %struct.CompAtom* %547, i32 0, i32 2
  %549 = load i32* %548, align 4
  %550 = lshr i32 %549, 26
  %551 = and i32 %550, 1
  %552 = icmp ne i32 %551, 0
  br i1 %552, label %574, label %553

; <label>:553                                     ; preds = %519
  %554 = fcmp ole double %545, %7
  br i1 %554, label %555, label %574

; <label>:555                                     ; preds = %553
  %556 = fcmp ole double %545, %19
  br i1 %556, label %557, label %560

; <label>:557                                     ; preds = %555
  %558 = add nsw i32 %exclChecksum.1, 1
  %559 = icmp ne i32 %558, 0
  br i1 %559, label %574, label %560

; <label>:560                                     ; preds = %557, %555
  %exclChecksum.2 = phi i32 [ %558, %557 ], [ %exclChecksum.1, %555 ]
  %561 = sext i32 %522 to i64
  %562 = getelementptr inbounds %struct.CompAtom* %34, i64 %561
  %563 = getelementptr inbounds %struct.CompAtom* %562, i32 0, i32 2
  %564 = load i32* %563, align 4
  %565 = and i32 %564, 4194303
  %566 = icmp sge i32 %565, %291
  br i1 %566, label %567, label %571

; <label>:567                                     ; preds = %560
  %568 = icmp sle i32 %565, %293
  br i1 %568, label %569, label %571

; <label>:569                                     ; preds = %567
  %570 = getelementptr inbounds i32* %pli4.0, i32 1
  store i32 %522, i32* %pli4.0, align 4
  br label %573

; <label>:571                                     ; preds = %567, %560
  %572 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %522, i32* %plin.0, align 4
  br label %573

; <label>:573                                     ; preds = %571, %569
  %pli4.1 = phi i32* [ %570, %569 ], [ %pli4.0, %571 ]
  %plin.1 = phi i32* [ %plin.0, %569 ], [ %572, %571 ]
  br label %574

; <label>:574                                     ; preds = %573, %557, %553, %519
  %pli4.2 = phi i32* [ %pli4.0, %519 ], [ %pli4.0, %557 ], [ %pli4.1, %573 ], [ %pli4.0, %553 ]
  %plin.2 = phi i32* [ %plin.0, %519 ], [ %plin.0, %557 ], [ %plin.1, %573 ], [ %plin.0, %553 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %519 ], [ %558, %557 ], [ %exclChecksum.2, %573 ], [ %exclChecksum.1, %553 ]
  br label %575

; <label>:575                                     ; preds = %574
  %576 = add nsw i32 %k.0, 1
  br label %517

; <label>:577                                     ; preds = %517
  br label %657

; <label>:578                                     ; preds = %500
  %579 = icmp slt i32 %pairlistoffset.1, %pairlistindex.1
  br i1 %579, label %580, label %656

; <label>:580                                     ; preds = %578
  %581 = sext i32 %pairlistoffset.1 to i64
  %582 = getelementptr inbounds i32* %205, i64 %581
  %583 = load i32* %582, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds %struct.CompAtom* %34, i64 %584
  %586 = getelementptr inbounds %struct.CompAtom* %585, i32 0, i32 0
  %587 = getelementptr inbounds %class.Vector* %586, i32 0, i32 0
  %588 = load double* %587, align 8
  %589 = sext i32 %583 to i64
  %590 = getelementptr inbounds %struct.CompAtom* %34, i64 %589
  %591 = getelementptr inbounds %struct.CompAtom* %590, i32 0, i32 0
  %592 = getelementptr inbounds %class.Vector* %591, i32 0, i32 1
  %593 = load double* %592, align 8
  %594 = sext i32 %583 to i64
  %595 = getelementptr inbounds %struct.CompAtom* %34, i64 %594
  %596 = getelementptr inbounds %struct.CompAtom* %595, i32 0, i32 0
  %597 = getelementptr inbounds %class.Vector* %596, i32 0, i32 2
  %598 = load double* %597, align 8
  %599 = sext i32 %583 to i64
  %600 = getelementptr inbounds %struct.CompAtom* %34, i64 %599
  %601 = getelementptr inbounds %struct.CompAtom* %600, i32 0, i32 2
  %602 = load i32* %601, align 4
  %603 = and i32 %602, 4194303
  br label %604

; <label>:604                                     ; preds = %649, %580
  %pli4.3 = phi i32* [ %219, %580 ], [ %pli4.5, %649 ]
  %plin.3 = phi i32* [ %233, %580 ], [ %plin.5, %649 ]
  %k10.0 = phi i32 [ %pairlistoffset.1, %580 ], [ %607, %649 ]
  %j211.0 = phi i32 [ %583, %580 ], [ %610, %649 ]
  %p_j_x12.0 = phi double [ %588, %580 ], [ %617, %649 ]
  %p_j_y13.0 = phi double [ %593, %580 ], [ %625, %649 ]
  %p_j_z14.0 = phi double [ %598, %580 ], [ %633, %649 ]
  %atom215.0 = phi i32 [ %603, %580 ], [ %654, %649 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %580 ], [ %exclChecksum.6, %649 ]
  %605 = icmp slt i32 %k10.0, %pairlistindex.1
  br i1 %605, label %606, label %655

; <label>:606                                     ; preds = %604
  %607 = add nsw i32 %k10.0, 1
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i32* %205, i64 %608
  %610 = load i32* %609, align 4
  %611 = fsub double %301, %p_j_x12.0
  %612 = fmul double %611, %611
  %613 = sext i32 %610 to i64
  %614 = getelementptr inbounds %struct.CompAtom* %34, i64 %613
  %615 = getelementptr inbounds %struct.CompAtom* %614, i32 0, i32 0
  %616 = getelementptr inbounds %class.Vector* %615, i32 0, i32 0
  %617 = load double* %616, align 8
  %618 = fsub double %304, %p_j_y13.0
  %619 = fmul double %618, %618
  %620 = fadd double %612, %619
  %621 = sext i32 %610 to i64
  %622 = getelementptr inbounds %struct.CompAtom* %34, i64 %621
  %623 = getelementptr inbounds %struct.CompAtom* %622, i32 0, i32 0
  %624 = getelementptr inbounds %class.Vector* %623, i32 0, i32 1
  %625 = load double* %624, align 8
  %626 = fsub double %307, %p_j_z14.0
  %627 = fmul double %626, %626
  %628 = fadd double %620, %627
  %629 = sext i32 %610 to i64
  %630 = getelementptr inbounds %struct.CompAtom* %34, i64 %629
  %631 = getelementptr inbounds %struct.CompAtom* %630, i32 0, i32 0
  %632 = getelementptr inbounds %class.Vector* %631, i32 0, i32 2
  %633 = load double* %632, align 8
  %634 = fcmp ole double %628, %7
  br i1 %634, label %635, label %649

; <label>:635                                     ; preds = %606
  %636 = fcmp ole double %628, %19
  br i1 %636, label %637, label %640

; <label>:637                                     ; preds = %635
  %638 = add nsw i32 %exclChecksum.4, 1
  %639 = icmp ne i32 %638, 0
  br i1 %639, label %649, label %640

; <label>:640                                     ; preds = %637, %635
  %exclChecksum.5 = phi i32 [ %638, %637 ], [ %exclChecksum.4, %635 ]
  %641 = icmp sge i32 %atom215.0, %291
  br i1 %641, label %642, label %646

; <label>:642                                     ; preds = %640
  %643 = icmp sle i32 %atom215.0, %293
  br i1 %643, label %644, label %646

; <label>:644                                     ; preds = %642
  %645 = getelementptr inbounds i32* %pli4.3, i32 1
  store i32 %j211.0, i32* %pli4.3, align 4
  br label %648

; <label>:646                                     ; preds = %642, %640
  %647 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j211.0, i32* %plin.3, align 4
  br label %648

; <label>:648                                     ; preds = %646, %644
  %pli4.4 = phi i32* [ %645, %644 ], [ %pli4.3, %646 ]
  %plin.4 = phi i32* [ %plin.3, %644 ], [ %647, %646 ]
  br label %649

; <label>:649                                     ; preds = %648, %637, %606
  %pli4.5 = phi i32* [ %pli4.3, %637 ], [ %pli4.4, %648 ], [ %pli4.3, %606 ]
  %plin.5 = phi i32* [ %plin.3, %637 ], [ %plin.4, %648 ], [ %plin.3, %606 ]
  %exclChecksum.6 = phi i32 [ %638, %637 ], [ %exclChecksum.5, %648 ], [ %exclChecksum.4, %606 ]
  %650 = sext i32 %610 to i64
  %651 = getelementptr inbounds %struct.CompAtom* %34, i64 %650
  %652 = getelementptr inbounds %struct.CompAtom* %651, i32 0, i32 2
  %653 = load i32* %652, align 4
  %654 = and i32 %653, 4194303
  br label %604

; <label>:655                                     ; preds = %604
  br label %656

; <label>:656                                     ; preds = %655, %578
  %pli4.6 = phi i32* [ %pli4.3, %655 ], [ %219, %578 ]
  %plin.6 = phi i32* [ %plin.3, %655 ], [ %233, %578 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %655 ], [ %exclChecksum.0, %578 ]
  br label %657

; <label>:657                                     ; preds = %656, %577
  %pli4.7 = phi i32* [ %pli4.0, %577 ], [ %pli4.6, %656 ]
  %plin.7 = phi i32* [ %plin.0, %577 ], [ %plin.6, %656 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %577 ], [ %exclChecksum.7, %656 ]
  %658 = ptrtoint i32* %pli4.7 to i64
  %659 = ptrtoint i32* %219 to i64
  %660 = sub i64 %658, %659
  %661 = sdiv exact i64 %660, 4
  %662 = trunc i64 %661 to i32
  %663 = icmp ne i32 %662, 0
  br i1 %663, label %664, label %671

; <label>:664                                     ; preds = %657
  %665 = sub nsw i32 %662, 1
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds i32* %219, i64 %666
  %668 = load i32* %667, align 4
  %669 = sext i32 %662 to i64
  %670 = getelementptr inbounds i32* %219, i64 %669
  store i32 %668, i32* %670, align 4
  br label %671

; <label>:671                                     ; preds = %664, %657
  br label %672

; <label>:672                                     ; preds = %694, %671
  %plin.8 = phi i32* [ %plin.7, %671 ], [ %plin.9, %694 ]
  %plix.0 = phi i32* [ %247, %671 ], [ %plix.1, %694 ]
  %plim.0 = phi i32* [ %261, %671 ], [ %plim.1, %694 ]
  %k18.0 = phi i32 [ 0, %671 ], [ %695, %694 ]
  %673 = icmp slt i32 %k18.0, %662
  br i1 %673, label %674, label %696

; <label>:674                                     ; preds = %672
  %675 = sext i32 %k18.0 to i64
  %676 = getelementptr inbounds i32* %219, i64 %675
  %677 = load i32* %676, align 4
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds %struct.CompAtom* %34, i64 %678
  %680 = getelementptr inbounds %struct.CompAtom* %679, i32 0, i32 2
  %681 = load i32* %680, align 4
  %682 = and i32 %681, 4194303
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i8* %298, i64 %683
  %685 = load i8* %684, align 1
  %686 = sext i8 %685 to i32
  switch i32 %686, label %693 [
    i32 0, label %687
    i32 1, label %689
    i32 2, label %691
  ]

; <label>:687                                     ; preds = %674
  %688 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %677, i32* %plin.8, align 4
  br label %693

; <label>:689                                     ; preds = %674
  %690 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %677, i32* %plix.0, align 4
  br label %693

; <label>:691                                     ; preds = %674
  %692 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %677, i32* %plim.0, align 4
  br label %693

; <label>:693                                     ; preds = %691, %689, %687, %674
  %plin.9 = phi i32* [ %plin.8, %674 ], [ %plin.8, %691 ], [ %plin.8, %689 ], [ %688, %687 ]
  %plix.1 = phi i32* [ %plix.0, %674 ], [ %plix.0, %691 ], [ %690, %689 ], [ %plix.0, %687 ]
  %plim.1 = phi i32* [ %plim.0, %674 ], [ %692, %691 ], [ %plim.0, %689 ], [ %plim.0, %687 ]
  br label %694

; <label>:694                                     ; preds = %693
  %695 = add nsw i32 %k18.0, 1
  br label %672

; <label>:696                                     ; preds = %672
  %697 = ptrtoint i32* %plix.0 to i64
  %698 = ptrtoint i32* %247 to i64
  %699 = sub i64 %697, %698
  %700 = sdiv exact i64 %699, 4
  %701 = sext i32 %exclChecksum.8 to i64
  %702 = add nsw i64 %701, %700
  %703 = trunc i64 %702 to i32
  %704 = ptrtoint i32* %plim.0 to i64
  %705 = ptrtoint i32* %261 to i64
  %706 = sub i64 %704, %705
  %707 = sdiv exact i64 %706, 4
  %708 = sext i32 %703 to i64
  %709 = add nsw i64 %708, %707
  %710 = trunc i64 %709 to i32
  %711 = ptrtoint i32* %plin.8 to i64
  %712 = ptrtoint i32* %233 to i64
  %713 = sub i64 %711, %712
  %714 = sdiv exact i64 %713, 4
  %715 = trunc i64 %714 to i32
  br label %716

; <label>:716                                     ; preds = %824, %696
  %k18.1 = phi i32 [ 0, %696 ], [ %825, %824 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %696 ], [ %817, %824 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %696 ], [ %808, %824 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %696 ], [ %806, %824 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %696 ], [ %797, %824 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %696 ], [ %795, %824 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %696 ], [ %793, %824 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %696 ], [ %781, %824 ]
  %717 = icmp slt i32 %k18.1, %715
  br i1 %717, label %718, label %826

; <label>:718                                     ; preds = %716
  %719 = sext i32 %k18.1 to i64
  %720 = getelementptr inbounds i32* %233, i64 %719
  %721 = load i32* %720, align 4
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds %struct.CompAtom* %34, i64 %722
  %724 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 0
  %725 = getelementptr inbounds %class.Vector* %724, i32 0, i32 0
  %726 = load double* %725, align 8
  %727 = fsub double %301, %726
  %728 = fmul double %727, %727
  %729 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 0
  %730 = getelementptr inbounds %class.Vector* %729, i32 0, i32 1
  %731 = load double* %730, align 8
  %732 = fsub double %304, %731
  %733 = fmul double %732, %732
  %734 = fadd double %728, %733
  %735 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 0
  %736 = getelementptr inbounds %class.Vector* %735, i32 0, i32 2
  %737 = load double* %736, align 8
  %738 = fsub double %307, %737
  %739 = fmul double %738, %738
  %740 = fadd double %734, %739
  %741 = fptrunc double %740 to float
  %742 = bitcast %union.anon.18* %r2f to float*
  store float %741, float* %742, align 4
  %743 = bitcast %union.anon.18* %r2f to i32*
  %744 = load i32* %743, align 4
  %745 = ashr i32 %744, 17
  %746 = add nsw i32 %745, %22
  %747 = mul nsw i32 16, %746
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds double* %14, i64 %748
  %750 = getelementptr inbounds double* %749, i64 8
  %751 = getelementptr inbounds double* %750, i64 4
  %752 = getelementptr inbounds double* %751, i64 0
  %753 = load double* %752, align 8
  %754 = bitcast %union.anon.18* %r2f to i32*
  %755 = load i32* %754, align 4
  %756 = and i32 %755, -131072
  store i32 %756, i32* %754, align 4
  %757 = getelementptr inbounds %struct.CompAtom* %723, i32 0, i32 1
  %758 = load float* %757, align 4
  %759 = fpext float %758 to double
  %760 = fmul double %508, %759
  %761 = bitcast %union.anon.18* %r2f to float*
  %762 = load float* %761, align 4
  %763 = fpext float %762 to double
  %764 = fsub double %740, %763
  %765 = getelementptr inbounds double* %751, i64 1
  %766 = load double* %765, align 8
  %767 = getelementptr inbounds double* %751, i64 2
  %768 = load double* %767, align 8
  %769 = getelementptr inbounds double* %751, i64 3
  %770 = load double* %769, align 8
  %771 = fmul double %770, %760
  %772 = fmul double %768, %760
  %773 = fmul double %766, %760
  %774 = fmul double %753, %760
  %775 = fmul double %764, %771
  %776 = fadd double %775, %772
  %777 = fmul double %776, %764
  %778 = fadd double %777, %773
  %779 = fmul double %778, %764
  %780 = fadd double %779, %774
  %781 = fadd double %fullElectEnergy.1, %780
  %782 = fmul double 3.000000e+00, %764
  %783 = fmul double %782, %771
  %784 = fmul double 2.000000e+00, %772
  %785 = fadd double %783, %784
  %786 = fmul double %785, %764
  %787 = fadd double %786, %773
  %788 = fmul double -2.000000e+00, %787
  %789 = sext i32 %721 to i64
  %790 = getelementptr inbounds %class.Vector* %267, i64 %789
  %791 = fmul double %788, %727
  %792 = fmul double %791, %727
  %793 = fadd double %fullElectVirial_xx.1, %792
  %794 = fmul double %791, %732
  %795 = fadd double %fullElectVirial_xy.1, %794
  %796 = fmul double %791, %738
  %797 = fadd double %fullElectVirial_xz.1, %796
  %798 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %799 = load double* %798, align 8
  %800 = fadd double %799, %791
  store double %800, double* %798, align 8
  %801 = getelementptr inbounds %class.Vector* %790, i32 0, i32 0
  %802 = load double* %801, align 8
  %803 = fsub double %802, %791
  store double %803, double* %801, align 8
  %804 = fmul double %788, %732
  %805 = fmul double %804, %732
  %806 = fadd double %fullElectVirial_yy.1, %805
  %807 = fmul double %804, %738
  %808 = fadd double %fullElectVirial_yz.1, %807
  %809 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %810 = load double* %809, align 8
  %811 = fadd double %810, %804
  store double %811, double* %809, align 8
  %812 = getelementptr inbounds %class.Vector* %790, i32 0, i32 1
  %813 = load double* %812, align 8
  %814 = fsub double %813, %804
  store double %814, double* %812, align 8
  %815 = fmul double %788, %738
  %816 = fmul double %815, %738
  %817 = fadd double %fullElectVirial_zz.1, %816
  %818 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %819 = load double* %818, align 8
  %820 = fadd double %819, %815
  store double %820, double* %818, align 8
  %821 = getelementptr inbounds %class.Vector* %790, i32 0, i32 2
  %822 = load double* %821, align 8
  %823 = fsub double %822, %815
  store double %823, double* %821, align 8
  br label %824

; <label>:824                                     ; preds = %718
  %825 = add nsw i32 %k18.1, 1
  br label %716

; <label>:826                                     ; preds = %716
  %827 = ptrtoint i32* %plim.0 to i64
  %828 = ptrtoint i32* %261 to i64
  %829 = sub i64 %827, %828
  %830 = sdiv exact i64 %829, 4
  %831 = trunc i64 %830 to i32
  br label %832

; <label>:832                                     ; preds = %959, %826
  %k18.2 = phi i32 [ 0, %826 ], [ %960, %959 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %826 ], [ %952, %959 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %826 ], [ %943, %959 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %826 ], [ %941, %959 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %826 ], [ %932, %959 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %826 ], [ %930, %959 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %826 ], [ %928, %959 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %826 ], [ %916, %959 ]
  %833 = icmp slt i32 %k18.2, %831
  br i1 %833, label %834, label %961

; <label>:834                                     ; preds = %832
  %835 = sext i32 %k18.2 to i64
  %836 = getelementptr inbounds i32* %261, i64 %835
  %837 = load i32* %836, align 4
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds %struct.CompAtom* %34, i64 %838
  %840 = getelementptr inbounds %struct.CompAtom* %839, i32 0, i32 0
  %841 = getelementptr inbounds %class.Vector* %840, i32 0, i32 0
  %842 = load double* %841, align 8
  %843 = fsub double %301, %842
  %844 = fmul double %843, %843
  %845 = getelementptr inbounds %struct.CompAtom* %839, i32 0, i32 0
  %846 = getelementptr inbounds %class.Vector* %845, i32 0, i32 1
  %847 = load double* %846, align 8
  %848 = fsub double %304, %847
  %849 = fmul double %848, %848
  %850 = fadd double %844, %849
  %851 = getelementptr inbounds %struct.CompAtom* %839, i32 0, i32 0
  %852 = getelementptr inbounds %class.Vector* %851, i32 0, i32 2
  %853 = load double* %852, align 8
  %854 = fsub double %307, %853
  %855 = fmul double %854, %854
  %856 = fadd double %850, %855
  %857 = fptrunc double %856 to float
  %858 = bitcast %union.anon.19* %r2f29 to float*
  store float %857, float* %858, align 4
  %859 = bitcast %union.anon.19* %r2f29 to i32*
  %860 = load i32* %859, align 4
  %861 = ashr i32 %860, 17
  %862 = add nsw i32 %861, %22
  %863 = mul nsw i32 16, %862
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds double* %14, i64 %864
  %866 = getelementptr inbounds double* %865, i64 8
  %867 = getelementptr inbounds double* %866, i64 4
  %868 = getelementptr inbounds double* %867, i64 0
  %869 = load double* %868, align 8
  %870 = bitcast %union.anon.19* %r2f29 to i32*
  %871 = load i32* %870, align 4
  %872 = and i32 %871, -131072
  store i32 %872, i32* %870, align 4
  %873 = getelementptr inbounds %struct.CompAtom* %839, i32 0, i32 1
  %874 = load float* %873, align 4
  %875 = fpext float %874 to double
  %876 = fmul double %508, %875
  %877 = bitcast %union.anon.19* %r2f29 to float*
  %878 = load float* %877, align 4
  %879 = fpext float %878 to double
  %880 = fsub double %856, %879
  %881 = getelementptr inbounds double* %867, i64 1
  %882 = load double* %881, align 8
  %883 = getelementptr inbounds double* %867, i64 2
  %884 = load double* %883, align 8
  %885 = getelementptr inbounds double* %867, i64 3
  %886 = load double* %885, align 8
  %887 = mul nsw i32 4, %862
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds double* %15, i64 %888
  %890 = getelementptr inbounds double* %889, i64 0
  %891 = load double* %890, align 8
  %892 = fmul double %18, %891
  %893 = fsub double %869, %892
  %894 = getelementptr inbounds double* %889, i64 1
  %895 = load double* %894, align 8
  %896 = fmul double %18, %895
  %897 = fsub double %882, %896
  %898 = getelementptr inbounds double* %889, i64 2
  %899 = load double* %898, align 8
  %900 = fmul double %18, %899
  %901 = fsub double %884, %900
  %902 = getelementptr inbounds double* %889, i64 3
  %903 = load double* %902, align 8
  %904 = fmul double %18, %903
  %905 = fsub double %886, %904
  %906 = fmul double %905, %876
  %907 = fmul double %901, %876
  %908 = fmul double %897, %876
  %909 = fmul double %893, %876
  %910 = fmul double %880, %906
  %911 = fadd double %910, %907
  %912 = fmul double %911, %880
  %913 = fadd double %912, %908
  %914 = fmul double %913, %880
  %915 = fadd double %914, %909
  %916 = fadd double %fullElectEnergy.2, %915
  %917 = fmul double 3.000000e+00, %880
  %918 = fmul double %917, %906
  %919 = fmul double 2.000000e+00, %907
  %920 = fadd double %918, %919
  %921 = fmul double %920, %880
  %922 = fadd double %921, %908
  %923 = fmul double -2.000000e+00, %922
  %924 = sext i32 %837 to i64
  %925 = getelementptr inbounds %class.Vector* %267, i64 %924
  %926 = fmul double %923, %843
  %927 = fmul double %926, %843
  %928 = fadd double %fullElectVirial_xx.2, %927
  %929 = fmul double %926, %848
  %930 = fadd double %fullElectVirial_xy.2, %929
  %931 = fmul double %926, %854
  %932 = fadd double %fullElectVirial_xz.2, %931
  %933 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %934 = load double* %933, align 8
  %935 = fadd double %934, %926
  store double %935, double* %933, align 8
  %936 = getelementptr inbounds %class.Vector* %925, i32 0, i32 0
  %937 = load double* %936, align 8
  %938 = fsub double %937, %926
  store double %938, double* %936, align 8
  %939 = fmul double %923, %848
  %940 = fmul double %939, %848
  %941 = fadd double %fullElectVirial_yy.2, %940
  %942 = fmul double %939, %854
  %943 = fadd double %fullElectVirial_yz.2, %942
  %944 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %945 = load double* %944, align 8
  %946 = fadd double %945, %939
  store double %946, double* %944, align 8
  %947 = getelementptr inbounds %class.Vector* %925, i32 0, i32 1
  %948 = load double* %947, align 8
  %949 = fsub double %948, %939
  store double %949, double* %947, align 8
  %950 = fmul double %923, %854
  %951 = fmul double %950, %854
  %952 = fadd double %fullElectVirial_zz.2, %951
  %953 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %954 = load double* %953, align 8
  %955 = fadd double %954, %950
  store double %955, double* %953, align 8
  %956 = getelementptr inbounds %class.Vector* %925, i32 0, i32 2
  %957 = load double* %956, align 8
  %958 = fsub double %957, %950
  store double %958, double* %956, align 8
  br label %959

; <label>:959                                     ; preds = %834
  %960 = add nsw i32 %k18.2, 1
  br label %832

; <label>:961                                     ; preds = %832
  %962 = ptrtoint i32* %plix.0 to i64
  %963 = ptrtoint i32* %247 to i64
  %964 = sub i64 %962, %963
  %965 = sdiv exact i64 %964, 4
  %966 = trunc i64 %965 to i32
  br label %967

; <label>:967                                     ; preds = %1090, %961
  %k18.3 = phi i32 [ 0, %961 ], [ %1091, %1090 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %961 ], [ %1083, %1090 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %961 ], [ %1074, %1090 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %961 ], [ %1072, %1090 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %961 ], [ %1063, %1090 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %961 ], [ %1061, %1090 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %961 ], [ %1059, %1090 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %961 ], [ %1047, %1090 ]
  %968 = icmp slt i32 %k18.3, %966
  br i1 %968, label %969, label %1092

; <label>:969                                     ; preds = %967
  %970 = sext i32 %k18.3 to i64
  %971 = getelementptr inbounds i32* %247, i64 %970
  %972 = load i32* %971, align 4
  %973 = sext i32 %972 to i64
  %974 = getelementptr inbounds %struct.CompAtom* %34, i64 %973
  %975 = getelementptr inbounds %struct.CompAtom* %974, i32 0, i32 0
  %976 = getelementptr inbounds %class.Vector* %975, i32 0, i32 0
  %977 = load double* %976, align 8
  %978 = fsub double %301, %977
  %979 = fmul double %978, %978
  %980 = getelementptr inbounds %struct.CompAtom* %974, i32 0, i32 0
  %981 = getelementptr inbounds %class.Vector* %980, i32 0, i32 1
  %982 = load double* %981, align 8
  %983 = fsub double %304, %982
  %984 = fmul double %983, %983
  %985 = fadd double %979, %984
  %986 = getelementptr inbounds %struct.CompAtom* %974, i32 0, i32 0
  %987 = getelementptr inbounds %class.Vector* %986, i32 0, i32 2
  %988 = load double* %987, align 8
  %989 = fsub double %307, %988
  %990 = fmul double %989, %989
  %991 = fadd double %985, %990
  %992 = fptrunc double %991 to float
  %993 = bitcast %union.anon.20* %r2f51 to float*
  store float %992, float* %993, align 4
  %994 = bitcast %union.anon.20* %r2f51 to i32*
  %995 = load i32* %994, align 4
  %996 = ashr i32 %995, 17
  %997 = add nsw i32 %996, %22
  %998 = mul nsw i32 16, %997
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds double* %14, i64 %999
  %1001 = getelementptr inbounds double* %1000, i64 8
  %1002 = getelementptr inbounds double* %1001, i64 4
  %1003 = getelementptr inbounds double* %1002, i64 0
  %1004 = load double* %1003, align 8
  %1005 = bitcast %union.anon.20* %r2f51 to i32*
  %1006 = load i32* %1005, align 4
  %1007 = and i32 %1006, -131072
  store i32 %1007, i32* %1005, align 4
  %1008 = getelementptr inbounds %struct.CompAtom* %974, i32 0, i32 1
  %1009 = load float* %1008, align 4
  %1010 = fpext float %1009 to double
  %1011 = fmul double %508, %1010
  %1012 = bitcast %union.anon.20* %r2f51 to float*
  %1013 = load float* %1012, align 4
  %1014 = fpext float %1013 to double
  %1015 = fsub double %991, %1014
  %1016 = getelementptr inbounds double* %1002, i64 1
  %1017 = load double* %1016, align 8
  %1018 = getelementptr inbounds double* %1002, i64 2
  %1019 = load double* %1018, align 8
  %1020 = getelementptr inbounds double* %1002, i64 3
  %1021 = load double* %1020, align 8
  %1022 = mul nsw i32 4, %997
  %1023 = sext i32 %1022 to i64
  %1024 = getelementptr inbounds double* %15, i64 %1023
  %1025 = getelementptr inbounds double* %1024, i64 0
  %1026 = load double* %1025, align 8
  %1027 = fsub double %1004, %1026
  %1028 = getelementptr inbounds double* %1024, i64 1
  %1029 = load double* %1028, align 8
  %1030 = fsub double %1017, %1029
  %1031 = getelementptr inbounds double* %1024, i64 2
  %1032 = load double* %1031, align 8
  %1033 = fsub double %1019, %1032
  %1034 = getelementptr inbounds double* %1024, i64 3
  %1035 = load double* %1034, align 8
  %1036 = fsub double %1021, %1035
  %1037 = fmul double %1036, %1011
  %1038 = fmul double %1033, %1011
  %1039 = fmul double %1030, %1011
  %1040 = fmul double %1027, %1011
  %1041 = fmul double %1015, %1037
  %1042 = fadd double %1041, %1038
  %1043 = fmul double %1042, %1015
  %1044 = fadd double %1043, %1039
  %1045 = fmul double %1044, %1015
  %1046 = fadd double %1045, %1040
  %1047 = fadd double %fullElectEnergy.3, %1046
  %1048 = fmul double 3.000000e+00, %1015
  %1049 = fmul double %1048, %1037
  %1050 = fmul double 2.000000e+00, %1038
  %1051 = fadd double %1049, %1050
  %1052 = fmul double %1051, %1015
  %1053 = fadd double %1052, %1039
  %1054 = fmul double -2.000000e+00, %1053
  %1055 = sext i32 %972 to i64
  %1056 = getelementptr inbounds %class.Vector* %267, i64 %1055
  %1057 = fmul double %1054, %978
  %1058 = fmul double %1057, %978
  %1059 = fadd double %fullElectVirial_xx.3, %1058
  %1060 = fmul double %1057, %983
  %1061 = fadd double %fullElectVirial_xy.3, %1060
  %1062 = fmul double %1057, %989
  %1063 = fadd double %fullElectVirial_xz.3, %1062
  %1064 = getelementptr inbounds %class.Vector* %309, i32 0, i32 0
  %1065 = load double* %1064, align 8
  %1066 = fadd double %1065, %1057
  store double %1066, double* %1064, align 8
  %1067 = getelementptr inbounds %class.Vector* %1056, i32 0, i32 0
  %1068 = load double* %1067, align 8
  %1069 = fsub double %1068, %1057
  store double %1069, double* %1067, align 8
  %1070 = fmul double %1054, %983
  %1071 = fmul double %1070, %983
  %1072 = fadd double %fullElectVirial_yy.3, %1071
  %1073 = fmul double %1070, %989
  %1074 = fadd double %fullElectVirial_yz.3, %1073
  %1075 = getelementptr inbounds %class.Vector* %309, i32 0, i32 1
  %1076 = load double* %1075, align 8
  %1077 = fadd double %1076, %1070
  store double %1077, double* %1075, align 8
  %1078 = getelementptr inbounds %class.Vector* %1056, i32 0, i32 1
  %1079 = load double* %1078, align 8
  %1080 = fsub double %1079, %1070
  store double %1080, double* %1078, align 8
  %1081 = fmul double %1054, %989
  %1082 = fmul double %1081, %989
  %1083 = fadd double %fullElectVirial_zz.3, %1082
  %1084 = getelementptr inbounds %class.Vector* %309, i32 0, i32 2
  %1085 = load double* %1084, align 8
  %1086 = fadd double %1085, %1081
  store double %1086, double* %1084, align 8
  %1087 = getelementptr inbounds %class.Vector* %1056, i32 0, i32 2
  %1088 = load double* %1087, align 8
  %1089 = fsub double %1088, %1081
  store double %1089, double* %1087, align 8
  br label %1090

; <label>:1090                                    ; preds = %969
  %1091 = add nsw i32 %k18.3, 1
  br label %967

; <label>:1092                                    ; preds = %967
  br label %1093

; <label>:1093                                    ; preds = %1092, %486, %337
  %pairlistindex.2 = phi i32 [ %pairlistindex.0, %337 ], [ %pairlistindex.1, %1092 ], [ %465, %486 ]
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %337 ], [ %pairlistoffset.1, %1092 ], [ 0, %486 ]
  %pairCount.3 = phi i32 [ %333, %337 ], [ %pairCount.2, %1092 ], [ %pairCount.1, %486 ]
  %i.2 = phi i32 [ %339, %337 ], [ %i.1, %1092 ], [ %489, %486 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %337 ], [ %fullElectVirial_zz.3, %1092 ], [ %fullElectVirial_zz.0, %486 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %337 ], [ %fullElectVirial_yz.3, %1092 ], [ %fullElectVirial_yz.0, %486 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %337 ], [ %fullElectVirial_yy.3, %1092 ], [ %fullElectVirial_yy.0, %486 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %337 ], [ %fullElectVirial_xz.3, %1092 ], [ %fullElectVirial_xz.0, %486 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %337 ], [ %fullElectVirial_xy.3, %1092 ], [ %fullElectVirial_xy.0, %486 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %337 ], [ %fullElectVirial_xx.3, %1092 ], [ %fullElectVirial_xx.0, %486 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %337 ], [ %fullElectEnergy.3, %1092 ], [ %fullElectEnergy.0, %486 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.0, %337 ], [ %710, %1092 ], [ %exclChecksum.0, %486 ]
  %1094 = add nsw i32 %i.2, 1
  br label %281

; <label>:1095                                    ; preds = %281
  %1096 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1097 = icmp ne i32* %48, %1096
  br i1 %1097, label %1098, label %1103

; <label>:1098                                    ; preds = %1095
  %1099 = icmp eq i32* %48, null
  br i1 %1099, label %1102, label %1100

; <label>:1100                                    ; preds = %1098
  %1101 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1101) #8
  br label %1102

; <label>:1102                                    ; preds = %1100, %1098
  br label %1103

; <label>:1103                                    ; preds = %1102, %1095
  %1104 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1105 = icmp ne i32* %62, %1104
  br i1 %1105, label %1106, label %1111

; <label>:1106                                    ; preds = %1103
  %1107 = icmp eq i32* %62, null
  br i1 %1107, label %1110, label %1108

; <label>:1108                                    ; preds = %1106
  %1109 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1109) #8
  br label %1110

; <label>:1110                                    ; preds = %1108, %1106
  br label %1111

; <label>:1111                                    ; preds = %1110, %1103
  %1112 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1113 = icmp ne i32* %76, %1112
  br i1 %1113, label %1114, label %1119

; <label>:1114                                    ; preds = %1111
  %1115 = icmp eq i32* %76, null
  br i1 %1115, label %1118, label %1116

; <label>:1116                                    ; preds = %1114
  %1117 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1117) #8
  br label %1118

; <label>:1118                                    ; preds = %1116, %1114
  br label %1119

; <label>:1119                                    ; preds = %1118, %1111
  %1120 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1121 = icmp ne i32* %205, %1120
  br i1 %1121, label %1122, label %1127

; <label>:1122                                    ; preds = %1119
  %1123 = icmp eq i32* %205, null
  br i1 %1123, label %1126, label %1124

; <label>:1124                                    ; preds = %1122
  %1125 = bitcast i32* %205 to i8*
  call void @_ZdaPv(i8* %1125) #8
  br label %1126

; <label>:1126                                    ; preds = %1124, %1122
  br label %1127

; <label>:1127                                    ; preds = %1126, %1119
  %1128 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1129 = icmp ne i32* %219, %1128
  br i1 %1129, label %1130, label %1135

; <label>:1130                                    ; preds = %1127
  %1131 = icmp eq i32* %219, null
  br i1 %1131, label %1134, label %1132

; <label>:1132                                    ; preds = %1130
  %1133 = bitcast i32* %219 to i8*
  call void @_ZdaPv(i8* %1133) #8
  br label %1134

; <label>:1134                                    ; preds = %1132, %1130
  br label %1135

; <label>:1135                                    ; preds = %1134, %1127
  %1136 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1137 = icmp ne i32* %233, %1136
  br i1 %1137, label %1138, label %1143

; <label>:1138                                    ; preds = %1135
  %1139 = icmp eq i32* %233, null
  br i1 %1139, label %1142, label %1140

; <label>:1140                                    ; preds = %1138
  %1141 = bitcast i32* %233 to i8*
  call void @_ZdaPv(i8* %1141) #8
  br label %1142

; <label>:1142                                    ; preds = %1140, %1138
  br label %1143

; <label>:1143                                    ; preds = %1142, %1135
  %1144 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1145 = icmp ne i32* %247, %1144
  br i1 %1145, label %1146, label %1151

; <label>:1146                                    ; preds = %1143
  %1147 = icmp eq i32* %247, null
  br i1 %1147, label %1150, label %1148

; <label>:1148                                    ; preds = %1146
  %1149 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %1149) #8
  br label %1150

; <label>:1150                                    ; preds = %1148, %1146
  br label %1151

; <label>:1151                                    ; preds = %1150, %1143
  %1152 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1153 = icmp ne i32* %261, %1152
  br i1 %1153, label %1154, label %1159

; <label>:1154                                    ; preds = %1151
  %1155 = icmp eq i32* %261, null
  br i1 %1155, label %1158, label %1156

; <label>:1156                                    ; preds = %1154
  %1157 = bitcast i32* %261 to i8*
  call void @_ZdaPv(i8* %1157) #8
  br label %1158

; <label>:1158                                    ; preds = %1156, %1154
  br label %1159

; <label>:1159                                    ; preds = %1158, %1151
  %1160 = sitofp i32 %exclChecksum.0 to double
  %1161 = getelementptr inbounds double* %6, i64 22
  %1162 = load double* %1161, align 8
  %1163 = fadd double %1162, %1160
  store double %1163, double* %1161, align 8
  %1164 = getelementptr inbounds double* %6, i64 1
  %1165 = load double* %1164, align 8
  %1166 = fadd double %1165, %fullElectEnergy.0
  store double %1166, double* %1164, align 8
  %1167 = getelementptr inbounds double* %6, i64 12
  %1168 = load double* %1167, align 8
  %1169 = fadd double %1168, %fullElectVirial_xx.0
  store double %1169, double* %1167, align 8
  %1170 = getelementptr inbounds double* %6, i64 13
  %1171 = load double* %1170, align 8
  %1172 = fadd double %1171, %fullElectVirial_xy.0
  store double %1172, double* %1170, align 8
  %1173 = getelementptr inbounds double* %6, i64 14
  %1174 = load double* %1173, align 8
  %1175 = fadd double %1174, %fullElectVirial_xz.0
  store double %1175, double* %1173, align 8
  %1176 = getelementptr inbounds double* %6, i64 15
  %1177 = load double* %1176, align 8
  %1178 = fadd double %1177, %fullElectVirial_xy.0
  store double %1178, double* %1176, align 8
  %1179 = getelementptr inbounds double* %6, i64 16
  %1180 = load double* %1179, align 8
  %1181 = fadd double %1180, %fullElectVirial_yy.0
  store double %1181, double* %1179, align 8
  %1182 = getelementptr inbounds double* %6, i64 17
  %1183 = load double* %1182, align 8
  %1184 = fadd double %1183, %fullElectVirial_yz.0
  store double %1184, double* %1182, align 8
  %1185 = getelementptr inbounds double* %6, i64 18
  %1186 = load double* %1185, align 8
  %1187 = fadd double %1186, %fullElectVirial_xz.0
  store double %1187, double* %1185, align 8
  %1188 = getelementptr inbounds double* %6, i64 19
  %1189 = load double* %1188, align 8
  %1190 = fadd double %1189, %fullElectVirial_yz.0
  store double %1190, double* %1188, align 8
  %1191 = getelementptr inbounds double* %6, i64 20
  %1192 = load double* %1191, align 8
  %1193 = fadd double %1192, %fullElectVirial_zz.0
  store double %1193, double* %1191, align 8
  br label %1194

; <label>:1194                                    ; preds = %1159, %180, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil24calc_self_slow_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.37, align 4
  %r2f28 = alloca %union.anon.38, align 4
  %r2f49 = alloca %union.anon.39, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1229

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %163

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  %136 = icmp ne i32 %all_fixed.0, 0
  br i1 %136, label %137, label %162

; <label>:137                                     ; preds = %135
  %138 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %139 = icmp ne i32* %48, %138
  br i1 %139, label %140, label %145

; <label>:140                                     ; preds = %137
  %141 = icmp eq i32* %48, null
  br i1 %141, label %144, label %142

; <label>:142                                     ; preds = %140
  %143 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %143) #8
  br label %144

; <label>:144                                     ; preds = %142, %140
  br label %145

; <label>:145                                     ; preds = %144, %137
  %146 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %147 = icmp ne i32* %62, %146
  br i1 %147, label %148, label %153

; <label>:148                                     ; preds = %145
  %149 = icmp eq i32* %62, null
  br i1 %149, label %152, label %150

; <label>:150                                     ; preds = %148
  %151 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %151) #8
  br label %152

; <label>:152                                     ; preds = %150, %148
  br label %153

; <label>:153                                     ; preds = %152, %145
  %154 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %155 = icmp ne i32* %76, %154
  br i1 %155, label %156, label %161

; <label>:156                                     ; preds = %153
  %157 = icmp eq i32* %76, null
  br i1 %157, label %160, label %158

; <label>:158                                     ; preds = %156
  %159 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %159) #8
  br label %160

; <label>:160                                     ; preds = %158, %156
  br label %161

; <label>:161                                     ; preds = %160, %153
  br label %1229

; <label>:162                                     ; preds = %135
  br label %163

; <label>:163                                     ; preds = %162, %111
  %fixg.2 = phi i32 [ %fixg.0, %162 ], [ 0, %111 ]
  %164 = icmp ne i32 %fixg.2, 0
  br i1 %164, label %165, label %172

; <label>:165                                     ; preds = %163
  %166 = sub nsw i32 %fixg.2, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32* %62, i64 %167
  %169 = load i32* %168, align 4
  %170 = sext i32 %fixg.2 to i64
  %171 = getelementptr inbounds i32* %62, i64 %170
  store i32 %169, i32* %171, align 4
  br label %172

; <label>:172                                     ; preds = %165, %163
  %173 = icmp slt i32 %28, 1000
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %172
  %175 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %185

; <label>:176                                     ; preds = %172
  %177 = add nsw i32 %28, 5
  %178 = sext i32 %177 to i64
  %179 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %178, i64 4)
  %180 = extractvalue { i64, i1 } %179, 1
  %181 = extractvalue { i64, i1 } %179, 0
  %182 = select i1 %180, i64 -1, i64 %181
  %183 = call noalias i8* @_Znam(i64 %182) #9
  %184 = bitcast i8* %183 to i32*
  br label %185

; <label>:185                                     ; preds = %176, %174
  %186 = phi i32* [ %175, %174 ], [ %184, %176 ]
  %187 = icmp slt i32 %28, 1000
  br i1 %187, label %188, label %190

; <label>:188                                     ; preds = %185
  %189 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %199

; <label>:190                                     ; preds = %185
  %191 = add nsw i32 %28, 5
  %192 = sext i32 %191 to i64
  %193 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %192, i64 4)
  %194 = extractvalue { i64, i1 } %193, 1
  %195 = extractvalue { i64, i1 } %193, 0
  %196 = select i1 %194, i64 -1, i64 %195
  %197 = call noalias i8* @_Znam(i64 %196) #9
  %198 = bitcast i8* %197 to i32*
  br label %199

; <label>:199                                     ; preds = %190, %188
  %200 = phi i32* [ %189, %188 ], [ %198, %190 ]
  %201 = icmp slt i32 %28, 1000
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %199
  %203 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %213

; <label>:204                                     ; preds = %199
  %205 = add nsw i32 %28, 5
  %206 = sext i32 %205 to i64
  %207 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %206, i64 4)
  %208 = extractvalue { i64, i1 } %207, 1
  %209 = extractvalue { i64, i1 } %207, 0
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = call noalias i8* @_Znam(i64 %210) #9
  %212 = bitcast i8* %211 to i32*
  br label %213

; <label>:213                                     ; preds = %204, %202
  %214 = phi i32* [ %203, %202 ], [ %212, %204 ]
  %215 = icmp slt i32 %28, 1000
  br i1 %215, label %216, label %218

; <label>:216                                     ; preds = %213
  %217 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %227

; <label>:218                                     ; preds = %213
  %219 = add nsw i32 %28, 5
  %220 = sext i32 %219 to i64
  %221 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %220, i64 4)
  %222 = extractvalue { i64, i1 } %221, 1
  %223 = extractvalue { i64, i1 } %221, 0
  %224 = select i1 %222, i64 -1, i64 %223
  %225 = call noalias i8* @_Znam(i64 %224) #9
  %226 = bitcast i8* %225 to i32*
  br label %227

; <label>:227                                     ; preds = %218, %216
  %228 = phi i32* [ %217, %216 ], [ %226, %218 ]
  %229 = icmp slt i32 %28, 1000
  br i1 %229, label %230, label %232

; <label>:230                                     ; preds = %227
  %231 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %241

; <label>:232                                     ; preds = %227
  %233 = add nsw i32 %28, 5
  %234 = sext i32 %233 to i64
  %235 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %234, i64 4)
  %236 = extractvalue { i64, i1 } %235, 1
  %237 = extractvalue { i64, i1 } %235, 0
  %238 = select i1 %236, i64 -1, i64 %237
  %239 = call noalias i8* @_Znam(i64 %238) #9
  %240 = bitcast i8* %239 to i32*
  br label %241

; <label>:241                                     ; preds = %232, %230
  %242 = phi i32* [ %231, %230 ], [ %240, %232 ]
  %243 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %244 = getelementptr inbounds [2 x %class.Vector*]* %243, i32 0, i64 0
  %245 = load %class.Vector** %244, align 8
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 1
  %248 = load %class.Vector** %247, align 8
  %249 = sub nsw i32 %25, 1
  %250 = mul nsw i32 %249, %28
  %251 = sdiv i32 %250, 2
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %253 = load i32* %252, align 4
  %254 = mul nsw i32 %251, %253
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %256 = load i32* %255, align 4
  %257 = sdiv i32 %254, %256
  %258 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %259 = load i32* %258, align 4
  %260 = mul nsw i32 %251, %259
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %262 = load i32* %261, align 4
  %263 = sdiv i32 %260, %262
  br label %264

; <label>:264                                     ; preds = %1131, %241
  %pairlistoffset.0 = phi i32 [ 0, %241 ], [ %pairlistoffset.2, %1131 ]
  %pairlistindex.0 = phi i32 [ 0, %241 ], [ %pairlistindex.3, %1131 ]
  %fixg_lower.0 = phi i32 [ 0, %241 ], [ %fixg_lower.4, %1131 ]
  %g_lower.0 = phi i32 [ 0, %241 ], [ %g_lower.4, %1131 ]
  %j_hgroup.0 = phi i32 [ 0, %241 ], [ %j_hgroup.3, %1131 ]
  %pairCount.0 = phi i32 [ 0, %241 ], [ %pairCount.3, %1131 ]
  %i.0 = phi i32 [ 0, %241 ], [ %1132, %1131 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_zz.4, %1131 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yz.4, %1131 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yy.4, %1131 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xz.4, %1131 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xy.4, %1131 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xx.4, %1131 ]
  %exclChecksum.0 = phi i32 [ 0, %241 ], [ %exclChecksum.11, %1131 ]
  %265 = sub nsw i32 %25, 1
  %266 = icmp slt i32 %i.0, %265
  br i1 %266, label %267, label %1133

; <label>:267                                     ; preds = %264
  %268 = sext i32 %i.0 to i64
  %269 = getelementptr inbounds %struct.CompAtom* %31, i64 %268
  %270 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %271 = load i32* %270, align 4
  %272 = and i32 %271, 4194303
  %273 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %272)
  %274 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 0
  %275 = load i32* %274, align 4
  %276 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 1
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 2
  %279 = load i8** %278, align 8
  %280 = sext i32 %275 to i64
  %281 = sub i64 0, %280
  %282 = getelementptr inbounds i8* %279, i64 %281
  %283 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %284 = getelementptr inbounds %class.Vector* %283, i32 0, i32 0
  %285 = load double* %284, align 8
  %286 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %287 = getelementptr inbounds %class.Vector* %286, i32 0, i32 1
  %288 = load double* %287, align 8
  %289 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %290 = getelementptr inbounds %class.Vector* %289, i32 0, i32 2
  %291 = load double* %290, align 8
  %292 = sext i32 %i.0 to i64
  %293 = getelementptr inbounds %class.Vector* %245, i64 %292
  %294 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %295 = load i32* %294, align 4
  %296 = lshr i32 %295, 22
  %297 = and i32 %296, 7
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %305, label %299

; <label>:299                                     ; preds = %267
  %300 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %301 = load i32* %300, align 4
  %302 = lshr i32 %301, 25
  %303 = and i32 %302, 1
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %305, label %516

; <label>:305                                     ; preds = %299, %267
  %306 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %307 = load i32* %306, align 4
  %308 = lshr i32 %307, 22
  %309 = and i32 %308, 7
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %311, label %331

; <label>:311                                     ; preds = %305
  %312 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = sub nsw i32 %25, 1
  %317 = sub nsw i32 %316, %i.0
  %318 = mul nsw i32 %315, %317
  %319 = add nsw i32 %pairCount.0, %318
  %320 = sub nsw i32 %315, 1
  %321 = mul nsw i32 %315, %320
  %322 = sdiv i32 %321, 2
  %323 = sub nsw i32 %319, %322
  %324 = icmp slt i32 %pairCount.0, %257
  br i1 %324, label %327, label %325

; <label>:325                                     ; preds = %311
  %326 = icmp sge i32 %pairCount.0, %263
  br i1 %326, label %327, label %330

; <label>:327                                     ; preds = %325, %311
  %328 = sub nsw i32 %315, 1
  %329 = add nsw i32 %i.0, %328
  br label %1131

; <label>:330                                     ; preds = %325
  br label %331

; <label>:331                                     ; preds = %330, %305
  %pairCount.1 = phi i32 [ %323, %330 ], [ %pairCount.0, %305 ]
  %332 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %340

; <label>:334                                     ; preds = %331
  %335 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %336 = load i32* %335, align 4
  %337 = lshr i32 %336, 27
  %338 = and i32 %337, 1
  %339 = icmp ne i32 %338, 0
  br label %340

; <label>:340                                     ; preds = %334, %331
  %341 = phi i1 [ false, %331 ], [ %339, %334 ]
  %342 = zext i1 %341 to i32
  %343 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %344 = load i32* %343, align 4
  %345 = lshr i32 %344, 22
  %346 = and i32 %345, 7
  %347 = icmp ne i32 %346, 0
  br i1 %347, label %348, label %378

; <label>:348                                     ; preds = %340
  %349 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %350 = load i32* %349, align 4
  %351 = lshr i32 %350, 22
  %352 = and i32 %351, 7
  %353 = add nsw i32 %i.0, %352
  br label %354

; <label>:354                                     ; preds = %363, %348
  %g_lower.1 = phi i32 [ %g_lower.0, %348 ], [ %364, %363 ]
  %355 = icmp slt i32 %g_lower.1, %g.0
  br i1 %355, label %356, label %361

; <label>:356                                     ; preds = %354
  %357 = sext i32 %g_lower.1 to i64
  %358 = getelementptr inbounds i32* %48, i64 %357
  %359 = load i32* %358, align 4
  %360 = icmp slt i32 %359, %353
  br label %361

; <label>:361                                     ; preds = %356, %354
  %362 = phi i1 [ false, %354 ], [ %360, %356 ]
  br i1 %362, label %363, label %365

; <label>:363                                     ; preds = %361
  %364 = add nsw i32 %g_lower.1, 1
  br label %354

; <label>:365                                     ; preds = %361
  br label %366

; <label>:366                                     ; preds = %375, %365
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %365 ], [ %376, %375 ]
  %367 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %367, label %368, label %373

; <label>:368                                     ; preds = %366
  %369 = sext i32 %fixg_lower.1 to i64
  %370 = getelementptr inbounds i32* %62, i64 %369
  %371 = load i32* %370, align 4
  %372 = icmp slt i32 %371, %353
  br label %373

; <label>:373                                     ; preds = %368, %366
  %374 = phi i1 [ false, %366 ], [ %372, %368 ]
  br i1 %374, label %375, label %377

; <label>:375                                     ; preds = %373
  %376 = add nsw i32 %fixg_lower.1, 1
  br label %366

; <label>:377                                     ; preds = %373
  br label %378

; <label>:378                                     ; preds = %377, %340
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %377 ], [ %fixg_lower.0, %340 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %377 ], [ %g_lower.0, %340 ]
  %j_hgroup.1 = phi i32 [ %353, %377 ], [ %j_hgroup.0, %340 ]
  %379 = add nsw i32 %i.0, 1
  br label %380

; <label>:380                                     ; preds = %386, %378
  %pairlistindex.1 = phi i32 [ 0, %378 ], [ %383, %386 ]
  %j.1 = phi i32 [ %379, %378 ], [ %387, %386 ]
  %381 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %381, label %382, label %388

; <label>:382                                     ; preds = %380
  %383 = add nsw i32 %pairlistindex.1, 1
  %384 = sext i32 %pairlistindex.1 to i64
  %385 = getelementptr inbounds i32* %186, i64 %384
  store i32 %j.1, i32* %385, align 4
  br label %386

; <label>:386                                     ; preds = %382
  %387 = add nsw i32 %j.1, 1
  br label %380

; <label>:388                                     ; preds = %380
  %389 = sext i32 %pairlistindex.1 to i64
  %390 = getelementptr inbounds i32* %186, i64 %389
  %391 = icmp ne i32 %342, 0
  br i1 %391, label %392, label %393

; <label>:392                                     ; preds = %388
  br label %394

; <label>:393                                     ; preds = %388
  br label %394

; <label>:394                                     ; preds = %393, %392
  %395 = phi i32* [ %62, %392 ], [ %48, %393 ]
  %396 = icmp ne i32 %342, 0
  br i1 %396, label %397, label %398

; <label>:397                                     ; preds = %394
  br label %399

; <label>:398                                     ; preds = %394
  br label %399

; <label>:399                                     ; preds = %398, %397
  %400 = phi i32 [ %fixg_lower.2, %397 ], [ %g_lower.2, %398 ]
  %401 = icmp ne i32 %342, 0
  br i1 %401, label %402, label %403

; <label>:402                                     ; preds = %399
  br label %404

; <label>:403                                     ; preds = %399
  br label %404

; <label>:404                                     ; preds = %403, %402
  %405 = phi i32 [ %fixg.2, %402 ], [ %g.0, %403 ]
  %406 = icmp slt i32 %400, %405
  br i1 %406, label %407, label %501

; <label>:407                                     ; preds = %404
  %408 = sext i32 %400 to i64
  %409 = getelementptr inbounds i32* %395, i64 %408
  %410 = load i32* %409, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds %struct.CompAtom* %34, i64 %411
  %413 = getelementptr inbounds %struct.CompAtom* %412, i32 0, i32 0
  %414 = getelementptr inbounds %class.Vector* %413, i32 0, i32 0
  %415 = load double* %414, align 8
  %416 = sext i32 %410 to i64
  %417 = getelementptr inbounds %struct.CompAtom* %34, i64 %416
  %418 = getelementptr inbounds %struct.CompAtom* %417, i32 0, i32 0
  %419 = getelementptr inbounds %class.Vector* %418, i32 0, i32 1
  %420 = load double* %419, align 8
  %421 = sext i32 %410 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %34, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  br label %426

; <label>:426                                     ; preds = %459, %407
  %g.3 = phi i32 [ %400, %407 ], [ %429, %459 ]
  %gli.0 = phi i32* [ %76, %407 ], [ %gli.1, %459 ]
  %j2.0 = phi i32 [ %410, %407 ], [ %432, %459 ]
  %p_j_x.0 = phi double [ %415, %407 ], [ %439, %459 ]
  %p_j_y.0 = phi double [ %420, %407 ], [ %447, %459 ]
  %p_j_z.0 = phi double [ %425, %407 ], [ %455, %459 ]
  %427 = icmp slt i32 %g.3, %405
  br i1 %427, label %428, label %460

; <label>:428                                     ; preds = %426
  %429 = add nsw i32 %g.3, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32* %395, i64 %430
  %432 = load i32* %431, align 4
  %433 = fsub double %285, %p_j_x.0
  %434 = fmul double %433, %433
  %435 = sext i32 %432 to i64
  %436 = getelementptr inbounds %struct.CompAtom* %34, i64 %435
  %437 = getelementptr inbounds %struct.CompAtom* %436, i32 0, i32 0
  %438 = getelementptr inbounds %class.Vector* %437, i32 0, i32 0
  %439 = load double* %438, align 8
  %440 = fsub double %288, %p_j_y.0
  %441 = fmul double %440, %440
  %442 = fadd double %434, %441
  %443 = sext i32 %432 to i64
  %444 = getelementptr inbounds %struct.CompAtom* %34, i64 %443
  %445 = getelementptr inbounds %struct.CompAtom* %444, i32 0, i32 0
  %446 = getelementptr inbounds %class.Vector* %445, i32 0, i32 1
  %447 = load double* %446, align 8
  %448 = fsub double %291, %p_j_z.0
  %449 = fmul double %448, %448
  %450 = fadd double %442, %449
  %451 = sext i32 %432 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %34, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 0
  %454 = getelementptr inbounds %class.Vector* %453, i32 0, i32 2
  %455 = load double* %454, align 8
  %456 = fcmp ole double %450, %8
  br i1 %456, label %457, label %459

; <label>:457                                     ; preds = %428
  store i32 %j2.0, i32* %gli.0, align 4
  %458 = getelementptr inbounds i32* %gli.0, i32 1
  br label %459

; <label>:459                                     ; preds = %457, %428
  %gli.1 = phi i32* [ %458, %457 ], [ %gli.0, %428 ]
  br label %426

; <label>:460                                     ; preds = %426
  %461 = ptrtoint i32* %gli.0 to i64
  %462 = ptrtoint i32* %76 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  br label %466

; <label>:466                                     ; preds = %498, %460
  %pli.0 = phi i32* [ %390, %460 ], [ %497, %498 ]
  %h.0 = phi i32 [ 0, %460 ], [ %499, %498 ]
  %467 = icmp slt i32 %h.0, %465
  br i1 %467, label %468, label %500

; <label>:468                                     ; preds = %466
  %469 = sext i32 %h.0 to i64
  %470 = getelementptr inbounds i32* %76, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.CompAtom* %34, i64 %472
  %474 = getelementptr inbounds %struct.CompAtom* %473, i32 0, i32 2
  %475 = load i32* %474, align 4
  %476 = lshr i32 %475, 25
  %477 = and i32 %476, 1
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %480

; <label>:479                                     ; preds = %468
  br label %487

; <label>:480                                     ; preds = %468
  %481 = sext i32 %471 to i64
  %482 = getelementptr inbounds %struct.CompAtom* %34, i64 %481
  %483 = getelementptr inbounds %struct.CompAtom* %482, i32 0, i32 2
  %484 = load i32* %483, align 4
  %485 = lshr i32 %484, 22
  %486 = and i32 %485, 7
  br label %487

; <label>:487                                     ; preds = %480, %479
  %488 = phi i32 [ 1, %479 ], [ %486, %480 ]
  %489 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %471, i32* %489, align 4
  %490 = add nsw i32 %471, 1
  %491 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %490, i32* %491, align 4
  %492 = add nsw i32 %471, 2
  %493 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %471, 3
  %495 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %494, i32* %495, align 4
  %496 = sext i32 %488 to i64
  %497 = getelementptr inbounds i32* %pli.0, i64 %496
  br label %498

; <label>:498                                     ; preds = %487
  %499 = add nsw i32 %h.0, 1
  br label %466

; <label>:500                                     ; preds = %466
  br label %501

; <label>:501                                     ; preds = %500, %404
  %pli.1 = phi i32* [ %pli.0, %500 ], [ %390, %404 ]
  %502 = ptrtoint i32* %pli.1 to i64
  %503 = ptrtoint i32* %186 to i64
  %504 = sub i64 %502, %503
  %505 = sdiv exact i64 %504, 4
  %506 = trunc i64 %505 to i32
  %507 = icmp ne i32 %506, 0
  br i1 %507, label %508, label %515

; <label>:508                                     ; preds = %501
  %509 = sub nsw i32 %506, 1
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32* %186, i64 %510
  %512 = load i32* %511, align 4
  %513 = sext i32 %506 to i64
  %514 = getelementptr inbounds i32* %186, i64 %513
  store i32 %512, i32* %514, align 4
  br label %515

; <label>:515                                     ; preds = %508, %501
  br label %518

; <label>:516                                     ; preds = %299
  %517 = add nsw i32 %pairlistoffset.0, 1
  br label %518

; <label>:518                                     ; preds = %516, %515
  %pairlistoffset.1 = phi i32 [ 0, %515 ], [ %517, %516 ]
  %pairlistindex.2 = phi i32 [ %506, %515 ], [ %pairlistindex.0, %516 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %515 ], [ %fixg_lower.0, %516 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %515 ], [ %g_lower.0, %516 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %515 ], [ %j_hgroup.0, %516 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %515 ], [ %pairCount.0, %516 ]
  %519 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %520 = icmp ne i32 %519, 0
  br i1 %520, label %521, label %527

; <label>:521                                     ; preds = %518
  %522 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %523 = load i32* %522, align 4
  %524 = lshr i32 %523, 26
  %525 = and i32 %524, 1
  %526 = icmp ne i32 %525, 0
  br label %527

; <label>:527                                     ; preds = %521, %518
  %528 = phi i1 [ false, %518 ], [ %526, %521 ]
  %529 = zext i1 %528 to i32
  %530 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 1
  %531 = load float* %530, align 4
  %532 = fpext float %531 to double
  %533 = fmul double 3.320636e+02, %532
  %534 = fmul double %533, %16
  %535 = fmul double %534, %9
  %536 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %537 = load i32* %536, align 4
  %538 = and i32 %537, 4194303
  %539 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %538)
  %540 = zext i16 %539 to i32
  %541 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %540)
  %542 = icmp ne i32 %529, 0
  br i1 %542, label %543, label %605

; <label>:543                                     ; preds = %527
  br label %544

; <label>:544                                     ; preds = %602, %543
  %pli3.0 = phi i32* [ %200, %543 ], [ %pli3.2, %602 ]
  %plin.0 = phi i32* [ %214, %543 ], [ %plin.2, %602 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %543 ], [ %603, %602 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %543 ], [ %exclChecksum.3, %602 ]
  %545 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %545, label %546, label %604

; <label>:546                                     ; preds = %544
  %547 = sext i32 %k.0 to i64
  %548 = getelementptr inbounds i32* %186, i64 %547
  %549 = load i32* %548, align 4
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds %struct.CompAtom* %34, i64 %550
  %552 = getelementptr inbounds %struct.CompAtom* %551, i32 0, i32 0
  %553 = getelementptr inbounds %class.Vector* %552, i32 0, i32 0
  %554 = load double* %553, align 8
  %555 = fsub double %285, %554
  %556 = fmul double %555, %555
  %557 = sext i32 %549 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %34, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 0
  %560 = getelementptr inbounds %class.Vector* %559, i32 0, i32 1
  %561 = load double* %560, align 8
  %562 = fsub double %288, %561
  %563 = fmul double %562, %562
  %564 = fadd double %556, %563
  %565 = sext i32 %549 to i64
  %566 = getelementptr inbounds %struct.CompAtom* %34, i64 %565
  %567 = getelementptr inbounds %struct.CompAtom* %566, i32 0, i32 0
  %568 = getelementptr inbounds %class.Vector* %567, i32 0, i32 2
  %569 = load double* %568, align 8
  %570 = fsub double %291, %569
  %571 = fmul double %570, %570
  %572 = fadd double %564, %571
  %573 = sext i32 %549 to i64
  %574 = getelementptr inbounds %struct.CompAtom* %34, i64 %573
  %575 = getelementptr inbounds %struct.CompAtom* %574, i32 0, i32 2
  %576 = load i32* %575, align 4
  %577 = lshr i32 %576, 26
  %578 = and i32 %577, 1
  %579 = icmp ne i32 %578, 0
  br i1 %579, label %601, label %580

; <label>:580                                     ; preds = %546
  %581 = fcmp ole double %572, %7
  br i1 %581, label %582, label %601

; <label>:582                                     ; preds = %580
  %583 = fcmp ole double %572, %19
  br i1 %583, label %584, label %587

; <label>:584                                     ; preds = %582
  %585 = add nsw i32 %exclChecksum.1, 1
  %586 = icmp ne i32 %585, 0
  br i1 %586, label %601, label %587

; <label>:587                                     ; preds = %584, %582
  %exclChecksum.2 = phi i32 [ %585, %584 ], [ %exclChecksum.1, %582 ]
  %588 = sext i32 %549 to i64
  %589 = getelementptr inbounds %struct.CompAtom* %34, i64 %588
  %590 = getelementptr inbounds %struct.CompAtom* %589, i32 0, i32 2
  %591 = load i32* %590, align 4
  %592 = and i32 %591, 4194303
  %593 = icmp sge i32 %592, %275
  br i1 %593, label %594, label %598

; <label>:594                                     ; preds = %587
  %595 = icmp sle i32 %592, %277
  br i1 %595, label %596, label %598

; <label>:596                                     ; preds = %594
  %597 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %549, i32* %pli3.0, align 4
  br label %600

; <label>:598                                     ; preds = %594, %587
  %599 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %549, i32* %plin.0, align 4
  br label %600

; <label>:600                                     ; preds = %598, %596
  %pli3.1 = phi i32* [ %597, %596 ], [ %pli3.0, %598 ]
  %plin.1 = phi i32* [ %plin.0, %596 ], [ %599, %598 ]
  br label %601

; <label>:601                                     ; preds = %600, %584, %580, %546
  %pli3.2 = phi i32* [ %pli3.0, %546 ], [ %pli3.0, %584 ], [ %pli3.1, %600 ], [ %pli3.0, %580 ]
  %plin.2 = phi i32* [ %plin.0, %546 ], [ %plin.0, %584 ], [ %plin.1, %600 ], [ %plin.0, %580 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %546 ], [ %585, %584 ], [ %exclChecksum.2, %600 ], [ %exclChecksum.1, %580 ]
  br label %602

; <label>:602                                     ; preds = %601
  %603 = add nsw i32 %k.0, 1
  br label %544

; <label>:604                                     ; preds = %544
  br label %684

; <label>:605                                     ; preds = %527
  %606 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %606, label %607, label %683

; <label>:607                                     ; preds = %605
  %608 = sext i32 %pairlistoffset.1 to i64
  %609 = getelementptr inbounds i32* %186, i64 %608
  %610 = load i32* %609, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds %struct.CompAtom* %34, i64 %611
  %613 = getelementptr inbounds %struct.CompAtom* %612, i32 0, i32 0
  %614 = getelementptr inbounds %class.Vector* %613, i32 0, i32 0
  %615 = load double* %614, align 8
  %616 = sext i32 %610 to i64
  %617 = getelementptr inbounds %struct.CompAtom* %34, i64 %616
  %618 = getelementptr inbounds %struct.CompAtom* %617, i32 0, i32 0
  %619 = getelementptr inbounds %class.Vector* %618, i32 0, i32 1
  %620 = load double* %619, align 8
  %621 = sext i32 %610 to i64
  %622 = getelementptr inbounds %struct.CompAtom* %34, i64 %621
  %623 = getelementptr inbounds %struct.CompAtom* %622, i32 0, i32 0
  %624 = getelementptr inbounds %class.Vector* %623, i32 0, i32 2
  %625 = load double* %624, align 8
  %626 = sext i32 %610 to i64
  %627 = getelementptr inbounds %struct.CompAtom* %34, i64 %626
  %628 = getelementptr inbounds %struct.CompAtom* %627, i32 0, i32 2
  %629 = load i32* %628, align 4
  %630 = and i32 %629, 4194303
  br label %631

; <label>:631                                     ; preds = %676, %607
  %pli3.3 = phi i32* [ %200, %607 ], [ %pli3.5, %676 ]
  %plin.3 = phi i32* [ %214, %607 ], [ %plin.5, %676 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %607 ], [ %634, %676 ]
  %j210.0 = phi i32 [ %610, %607 ], [ %637, %676 ]
  %p_j_x11.0 = phi double [ %615, %607 ], [ %644, %676 ]
  %p_j_y12.0 = phi double [ %620, %607 ], [ %652, %676 ]
  %p_j_z13.0 = phi double [ %625, %607 ], [ %660, %676 ]
  %atom214.0 = phi i32 [ %630, %607 ], [ %681, %676 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %607 ], [ %exclChecksum.6, %676 ]
  %632 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %632, label %633, label %682

; <label>:633                                     ; preds = %631
  %634 = add nsw i32 %k9.0, 1
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds i32* %186, i64 %635
  %637 = load i32* %636, align 4
  %638 = fsub double %285, %p_j_x11.0
  %639 = fmul double %638, %638
  %640 = sext i32 %637 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %34, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 0
  %644 = load double* %643, align 8
  %645 = fsub double %288, %p_j_y12.0
  %646 = fmul double %645, %645
  %647 = fadd double %639, %646
  %648 = sext i32 %637 to i64
  %649 = getelementptr inbounds %struct.CompAtom* %34, i64 %648
  %650 = getelementptr inbounds %struct.CompAtom* %649, i32 0, i32 0
  %651 = getelementptr inbounds %class.Vector* %650, i32 0, i32 1
  %652 = load double* %651, align 8
  %653 = fsub double %291, %p_j_z13.0
  %654 = fmul double %653, %653
  %655 = fadd double %647, %654
  %656 = sext i32 %637 to i64
  %657 = getelementptr inbounds %struct.CompAtom* %34, i64 %656
  %658 = getelementptr inbounds %struct.CompAtom* %657, i32 0, i32 0
  %659 = getelementptr inbounds %class.Vector* %658, i32 0, i32 2
  %660 = load double* %659, align 8
  %661 = fcmp ole double %655, %7
  br i1 %661, label %662, label %676

; <label>:662                                     ; preds = %633
  %663 = fcmp ole double %655, %19
  br i1 %663, label %664, label %667

; <label>:664                                     ; preds = %662
  %665 = add nsw i32 %exclChecksum.4, 1
  %666 = icmp ne i32 %665, 0
  br i1 %666, label %676, label %667

; <label>:667                                     ; preds = %664, %662
  %exclChecksum.5 = phi i32 [ %665, %664 ], [ %exclChecksum.4, %662 ]
  %668 = icmp sge i32 %atom214.0, %275
  br i1 %668, label %669, label %673

; <label>:669                                     ; preds = %667
  %670 = icmp sle i32 %atom214.0, %277
  br i1 %670, label %671, label %673

; <label>:671                                     ; preds = %669
  %672 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %675

; <label>:673                                     ; preds = %669, %667
  %674 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %675

; <label>:675                                     ; preds = %673, %671
  %pli3.4 = phi i32* [ %672, %671 ], [ %pli3.3, %673 ]
  %plin.4 = phi i32* [ %plin.3, %671 ], [ %674, %673 ]
  br label %676

; <label>:676                                     ; preds = %675, %664, %633
  %pli3.5 = phi i32* [ %pli3.3, %664 ], [ %pli3.4, %675 ], [ %pli3.3, %633 ]
  %plin.5 = phi i32* [ %plin.3, %664 ], [ %plin.4, %675 ], [ %plin.3, %633 ]
  %exclChecksum.6 = phi i32 [ %665, %664 ], [ %exclChecksum.5, %675 ], [ %exclChecksum.4, %633 ]
  %677 = sext i32 %637 to i64
  %678 = getelementptr inbounds %struct.CompAtom* %34, i64 %677
  %679 = getelementptr inbounds %struct.CompAtom* %678, i32 0, i32 2
  %680 = load i32* %679, align 4
  %681 = and i32 %680, 4194303
  br label %631

; <label>:682                                     ; preds = %631
  br label %683

; <label>:683                                     ; preds = %682, %605
  %pli3.6 = phi i32* [ %pli3.3, %682 ], [ %200, %605 ]
  %plin.6 = phi i32* [ %plin.3, %682 ], [ %214, %605 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %682 ], [ %exclChecksum.0, %605 ]
  br label %684

; <label>:684                                     ; preds = %683, %604
  %pli3.7 = phi i32* [ %pli3.0, %604 ], [ %pli3.6, %683 ]
  %plin.7 = phi i32* [ %plin.0, %604 ], [ %plin.6, %683 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %604 ], [ %exclChecksum.7, %683 ]
  %685 = ptrtoint i32* %pli3.7 to i64
  %686 = ptrtoint i32* %200 to i64
  %687 = sub i64 %685, %686
  %688 = sdiv exact i64 %687, 4
  %689 = trunc i64 %688 to i32
  %690 = icmp ne i32 %689, 0
  br i1 %690, label %691, label %698

; <label>:691                                     ; preds = %684
  %692 = sub nsw i32 %689, 1
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i32* %200, i64 %693
  %695 = load i32* %694, align 4
  %696 = sext i32 %689 to i64
  %697 = getelementptr inbounds i32* %200, i64 %696
  store i32 %695, i32* %697, align 4
  br label %698

; <label>:698                                     ; preds = %691, %684
  br label %699

; <label>:699                                     ; preds = %710, %698
  %plix.0 = phi i32* [ %228, %698 ], [ %708, %710 ]
  %pln.0 = phi i32* [ %214, %698 ], [ %711, %710 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %698 ], [ %709, %710 ]
  %700 = icmp ult i32* %pln.0, %plin.7
  br i1 %700, label %701, label %704

; <label>:701                                     ; preds = %699
  %702 = load i32* %pln.0, align 4
  %703 = icmp slt i32 %702, %j_hgroup.2
  br label %704

; <label>:704                                     ; preds = %701, %699
  %705 = phi i1 [ false, %699 ], [ %703, %701 ]
  br i1 %705, label %706, label %712

; <label>:706                                     ; preds = %704
  %707 = load i32* %pln.0, align 4
  %708 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %707, i32* %plix.0, align 4
  %709 = add nsw i32 %exclChecksum.9, -1
  br label %710

; <label>:710                                     ; preds = %706
  %711 = getelementptr inbounds i32* %pln.0, i32 1
  br label %699

; <label>:712                                     ; preds = %704
  br label %713

; <label>:713                                     ; preds = %728, %712
  %plix.1 = phi i32* [ %plix.0, %712 ], [ %726, %728 ]
  %k17.0 = phi i32 [ 0, %712 ], [ %729, %728 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %712 ], [ %727, %728 ]
  %714 = icmp slt i32 %k17.0, %689
  br i1 %714, label %715, label %720

; <label>:715                                     ; preds = %713
  %716 = sext i32 %k17.0 to i64
  %717 = getelementptr inbounds i32* %200, i64 %716
  %718 = load i32* %717, align 4
  %719 = icmp slt i32 %718, %j_hgroup.2
  br label %720

; <label>:720                                     ; preds = %715, %713
  %721 = phi i1 [ false, %713 ], [ %719, %715 ]
  br i1 %721, label %722, label %730

; <label>:722                                     ; preds = %720
  %723 = sext i32 %k17.0 to i64
  %724 = getelementptr inbounds i32* %200, i64 %723
  %725 = load i32* %724, align 4
  %726 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %725, i32* %plix.1, align 4
  %727 = add nsw i32 %exclChecksum.10, -1
  br label %728

; <label>:728                                     ; preds = %722
  %729 = add nsw i32 %k17.0, 1
  br label %713

; <label>:730                                     ; preds = %720
  br label %731

; <label>:731                                     ; preds = %753, %730
  %plin.8 = phi i32* [ %plin.7, %730 ], [ %plin.9, %753 ]
  %plix.2 = phi i32* [ %plix.1, %730 ], [ %plix.3, %753 ]
  %plim.0 = phi i32* [ %242, %730 ], [ %plim.1, %753 ]
  %k17.1 = phi i32 [ %k17.0, %730 ], [ %754, %753 ]
  %732 = icmp slt i32 %k17.1, %689
  br i1 %732, label %733, label %755

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.1 to i64
  %735 = getelementptr inbounds i32* %200, i64 %734
  %736 = load i32* %735, align 4
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds %struct.CompAtom* %34, i64 %737
  %739 = getelementptr inbounds %struct.CompAtom* %738, i32 0, i32 2
  %740 = load i32* %739, align 4
  %741 = and i32 %740, 4194303
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8* %282, i64 %742
  %744 = load i8* %743, align 1
  %745 = sext i8 %744 to i32
  switch i32 %745, label %752 [
    i32 0, label %746
    i32 1, label %748
    i32 2, label %750
  ]

; <label>:746                                     ; preds = %733
  %747 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %736, i32* %plin.8, align 4
  br label %752

; <label>:748                                     ; preds = %733
  %749 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %736, i32* %plix.2, align 4
  br label %752

; <label>:750                                     ; preds = %733
  %751 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %736, i32* %plim.0, align 4
  br label %752

; <label>:752                                     ; preds = %750, %748, %746, %733
  %plin.9 = phi i32* [ %plin.8, %733 ], [ %plin.8, %750 ], [ %plin.8, %748 ], [ %747, %746 ]
  %plix.3 = phi i32* [ %plix.2, %733 ], [ %plix.2, %750 ], [ %749, %748 ], [ %plix.2, %746 ]
  %plim.1 = phi i32* [ %plim.0, %733 ], [ %751, %750 ], [ %plim.0, %748 ], [ %plim.0, %746 ]
  br label %753

; <label>:753                                     ; preds = %752
  %754 = add nsw i32 %k17.1, 1
  br label %731

; <label>:755                                     ; preds = %731
  %756 = ptrtoint i32* %plix.2 to i64
  %757 = ptrtoint i32* %228 to i64
  %758 = sub i64 %756, %757
  %759 = sdiv exact i64 %758, 4
  %760 = sext i32 %exclChecksum.10 to i64
  %761 = add nsw i64 %760, %759
  %762 = trunc i64 %761 to i32
  %763 = ptrtoint i32* %plim.0 to i64
  %764 = ptrtoint i32* %242 to i64
  %765 = sub i64 %763, %764
  %766 = sdiv exact i64 %765, 4
  %767 = sext i32 %762 to i64
  %768 = add nsw i64 %767, %766
  %769 = trunc i64 %768 to i32
  %770 = ptrtoint i32* %plin.8 to i64
  %771 = ptrtoint i32* %pln.0 to i64
  %772 = sub i64 %770, %771
  %773 = sdiv exact i64 %772, 4
  %774 = trunc i64 %773 to i32
  br label %775

; <label>:775                                     ; preds = %876, %755
  %k17.2 = phi i32 [ 0, %755 ], [ %877, %876 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %755 ], [ %869, %876 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %755 ], [ %860, %876 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %755 ], [ %858, %876 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %755 ], [ %849, %876 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %755 ], [ %847, %876 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %755 ], [ %845, %876 ]
  %776 = icmp slt i32 %k17.2, %774
  br i1 %776, label %777, label %878

; <label>:777                                     ; preds = %775
  %778 = sext i32 %k17.2 to i64
  %779 = getelementptr inbounds i32* %pln.0, i64 %778
  %780 = load i32* %779, align 4
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds %struct.CompAtom* %34, i64 %781
  %783 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 0
  %784 = getelementptr inbounds %class.Vector* %783, i32 0, i32 0
  %785 = load double* %784, align 8
  %786 = fsub double %285, %785
  %787 = fmul double %786, %786
  %788 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 0
  %789 = getelementptr inbounds %class.Vector* %788, i32 0, i32 1
  %790 = load double* %789, align 8
  %791 = fsub double %288, %790
  %792 = fmul double %791, %791
  %793 = fadd double %787, %792
  %794 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 2
  %796 = load double* %795, align 8
  %797 = fsub double %291, %796
  %798 = fmul double %797, %797
  %799 = fadd double %793, %798
  %800 = fptrunc double %799 to float
  %801 = bitcast %union.anon.37* %r2f to float*
  store float %800, float* %801, align 4
  %802 = bitcast %union.anon.37* %r2f to i32*
  %803 = load i32* %802, align 4
  %804 = ashr i32 %803, 17
  %805 = add nsw i32 %804, %22
  %806 = mul nsw i32 16, %805
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds double* %14, i64 %807
  %809 = getelementptr inbounds double* %808, i64 8
  %810 = getelementptr inbounds double* %809, i64 4
  %811 = getelementptr inbounds double* %810, i64 0
  %812 = load double* %811, align 8
  %813 = bitcast %union.anon.37* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = and i32 %814, -131072
  store i32 %815, i32* %813, align 4
  %816 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 1
  %817 = load float* %816, align 4
  %818 = fpext float %817 to double
  %819 = fmul double %535, %818
  %820 = bitcast %union.anon.37* %r2f to float*
  %821 = load float* %820, align 4
  %822 = fpext float %821 to double
  %823 = fsub double %799, %822
  %824 = getelementptr inbounds double* %810, i64 1
  %825 = load double* %824, align 8
  %826 = getelementptr inbounds double* %810, i64 2
  %827 = load double* %826, align 8
  %828 = getelementptr inbounds double* %810, i64 3
  %829 = load double* %828, align 8
  %830 = fmul double %829, %819
  %831 = fmul double %827, %819
  %832 = fmul double %825, %819
  %833 = fmul double %812, %819
  %834 = fmul double 3.000000e+00, %823
  %835 = fmul double %834, %830
  %836 = fmul double 2.000000e+00, %831
  %837 = fadd double %835, %836
  %838 = fmul double %837, %823
  %839 = fadd double %838, %832
  %840 = fmul double -2.000000e+00, %839
  %841 = sext i32 %780 to i64
  %842 = getelementptr inbounds %class.Vector* %248, i64 %841
  %843 = fmul double %840, %786
  %844 = fmul double %843, %786
  %845 = fadd double %fullElectVirial_xx.1, %844
  %846 = fmul double %843, %791
  %847 = fadd double %fullElectVirial_xy.1, %846
  %848 = fmul double %843, %797
  %849 = fadd double %fullElectVirial_xz.1, %848
  %850 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %851 = load double* %850, align 8
  %852 = fadd double %851, %843
  store double %852, double* %850, align 8
  %853 = getelementptr inbounds %class.Vector* %842, i32 0, i32 0
  %854 = load double* %853, align 8
  %855 = fsub double %854, %843
  store double %855, double* %853, align 8
  %856 = fmul double %840, %791
  %857 = fmul double %856, %791
  %858 = fadd double %fullElectVirial_yy.1, %857
  %859 = fmul double %856, %797
  %860 = fadd double %fullElectVirial_yz.1, %859
  %861 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %862 = load double* %861, align 8
  %863 = fadd double %862, %856
  store double %863, double* %861, align 8
  %864 = getelementptr inbounds %class.Vector* %842, i32 0, i32 1
  %865 = load double* %864, align 8
  %866 = fsub double %865, %856
  store double %866, double* %864, align 8
  %867 = fmul double %840, %797
  %868 = fmul double %867, %797
  %869 = fadd double %fullElectVirial_zz.1, %868
  %870 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %871 = load double* %870, align 8
  %872 = fadd double %871, %867
  store double %872, double* %870, align 8
  %873 = getelementptr inbounds %class.Vector* %842, i32 0, i32 2
  %874 = load double* %873, align 8
  %875 = fsub double %874, %867
  store double %875, double* %873, align 8
  br label %876

; <label>:876                                     ; preds = %777
  %877 = add nsw i32 %k17.2, 1
  br label %775

; <label>:878                                     ; preds = %775
  %879 = ptrtoint i32* %plim.0 to i64
  %880 = ptrtoint i32* %242 to i64
  %881 = sub i64 %879, %880
  %882 = sdiv exact i64 %881, 4
  %883 = trunc i64 %882 to i32
  br label %884

; <label>:884                                     ; preds = %1004, %878
  %k17.3 = phi i32 [ 0, %878 ], [ %1005, %1004 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %878 ], [ %997, %1004 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %878 ], [ %988, %1004 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %878 ], [ %986, %1004 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %878 ], [ %977, %1004 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %878 ], [ %975, %1004 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %878 ], [ %973, %1004 ]
  %885 = icmp slt i32 %k17.3, %883
  br i1 %885, label %886, label %1006

; <label>:886                                     ; preds = %884
  %887 = sext i32 %k17.3 to i64
  %888 = getelementptr inbounds i32* %242, i64 %887
  %889 = load i32* %888, align 4
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds %struct.CompAtom* %34, i64 %890
  %892 = getelementptr inbounds %struct.CompAtom* %891, i32 0, i32 0
  %893 = getelementptr inbounds %class.Vector* %892, i32 0, i32 0
  %894 = load double* %893, align 8
  %895 = fsub double %285, %894
  %896 = fmul double %895, %895
  %897 = getelementptr inbounds %struct.CompAtom* %891, i32 0, i32 0
  %898 = getelementptr inbounds %class.Vector* %897, i32 0, i32 1
  %899 = load double* %898, align 8
  %900 = fsub double %288, %899
  %901 = fmul double %900, %900
  %902 = fadd double %896, %901
  %903 = getelementptr inbounds %struct.CompAtom* %891, i32 0, i32 0
  %904 = getelementptr inbounds %class.Vector* %903, i32 0, i32 2
  %905 = load double* %904, align 8
  %906 = fsub double %291, %905
  %907 = fmul double %906, %906
  %908 = fadd double %902, %907
  %909 = fptrunc double %908 to float
  %910 = bitcast %union.anon.38* %r2f28 to float*
  store float %909, float* %910, align 4
  %911 = bitcast %union.anon.38* %r2f28 to i32*
  %912 = load i32* %911, align 4
  %913 = ashr i32 %912, 17
  %914 = add nsw i32 %913, %22
  %915 = mul nsw i32 16, %914
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds double* %14, i64 %916
  %918 = getelementptr inbounds double* %917, i64 8
  %919 = getelementptr inbounds double* %918, i64 4
  %920 = getelementptr inbounds double* %919, i64 0
  %921 = load double* %920, align 8
  %922 = bitcast %union.anon.38* %r2f28 to i32*
  %923 = load i32* %922, align 4
  %924 = and i32 %923, -131072
  store i32 %924, i32* %922, align 4
  %925 = getelementptr inbounds %struct.CompAtom* %891, i32 0, i32 1
  %926 = load float* %925, align 4
  %927 = fpext float %926 to double
  %928 = fmul double %535, %927
  %929 = bitcast %union.anon.38* %r2f28 to float*
  %930 = load float* %929, align 4
  %931 = fpext float %930 to double
  %932 = fsub double %908, %931
  %933 = getelementptr inbounds double* %919, i64 1
  %934 = load double* %933, align 8
  %935 = getelementptr inbounds double* %919, i64 2
  %936 = load double* %935, align 8
  %937 = getelementptr inbounds double* %919, i64 3
  %938 = load double* %937, align 8
  %939 = mul nsw i32 4, %914
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds double* %15, i64 %940
  %942 = getelementptr inbounds double* %941, i64 0
  %943 = load double* %942, align 8
  %944 = fmul double %18, %943
  %945 = fsub double %921, %944
  %946 = getelementptr inbounds double* %941, i64 1
  %947 = load double* %946, align 8
  %948 = fmul double %18, %947
  %949 = fsub double %934, %948
  %950 = getelementptr inbounds double* %941, i64 2
  %951 = load double* %950, align 8
  %952 = fmul double %18, %951
  %953 = fsub double %936, %952
  %954 = getelementptr inbounds double* %941, i64 3
  %955 = load double* %954, align 8
  %956 = fmul double %18, %955
  %957 = fsub double %938, %956
  %958 = fmul double %957, %928
  %959 = fmul double %953, %928
  %960 = fmul double %949, %928
  %961 = fmul double %945, %928
  %962 = fmul double 3.000000e+00, %932
  %963 = fmul double %962, %958
  %964 = fmul double 2.000000e+00, %959
  %965 = fadd double %963, %964
  %966 = fmul double %965, %932
  %967 = fadd double %966, %960
  %968 = fmul double -2.000000e+00, %967
  %969 = sext i32 %889 to i64
  %970 = getelementptr inbounds %class.Vector* %248, i64 %969
  %971 = fmul double %968, %895
  %972 = fmul double %971, %895
  %973 = fadd double %fullElectVirial_xx.2, %972
  %974 = fmul double %971, %900
  %975 = fadd double %fullElectVirial_xy.2, %974
  %976 = fmul double %971, %906
  %977 = fadd double %fullElectVirial_xz.2, %976
  %978 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %979 = load double* %978, align 8
  %980 = fadd double %979, %971
  store double %980, double* %978, align 8
  %981 = getelementptr inbounds %class.Vector* %970, i32 0, i32 0
  %982 = load double* %981, align 8
  %983 = fsub double %982, %971
  store double %983, double* %981, align 8
  %984 = fmul double %968, %900
  %985 = fmul double %984, %900
  %986 = fadd double %fullElectVirial_yy.2, %985
  %987 = fmul double %984, %906
  %988 = fadd double %fullElectVirial_yz.2, %987
  %989 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %990 = load double* %989, align 8
  %991 = fadd double %990, %984
  store double %991, double* %989, align 8
  %992 = getelementptr inbounds %class.Vector* %970, i32 0, i32 1
  %993 = load double* %992, align 8
  %994 = fsub double %993, %984
  store double %994, double* %992, align 8
  %995 = fmul double %968, %906
  %996 = fmul double %995, %906
  %997 = fadd double %fullElectVirial_zz.2, %996
  %998 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %999 = load double* %998, align 8
  %1000 = fadd double %999, %995
  store double %1000, double* %998, align 8
  %1001 = getelementptr inbounds %class.Vector* %970, i32 0, i32 2
  %1002 = load double* %1001, align 8
  %1003 = fsub double %1002, %995
  store double %1003, double* %1001, align 8
  br label %1004

; <label>:1004                                    ; preds = %886
  %1005 = add nsw i32 %k17.3, 1
  br label %884

; <label>:1006                                    ; preds = %884
  %1007 = ptrtoint i32* %plix.2 to i64
  %1008 = ptrtoint i32* %228 to i64
  %1009 = sub i64 %1007, %1008
  %1010 = sdiv exact i64 %1009, 4
  %1011 = trunc i64 %1010 to i32
  br label %1012

; <label>:1012                                    ; preds = %1128, %1006
  %k17.4 = phi i32 [ 0, %1006 ], [ %1129, %1128 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1006 ], [ %1121, %1128 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1006 ], [ %1112, %1128 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1006 ], [ %1110, %1128 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1006 ], [ %1101, %1128 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1006 ], [ %1099, %1128 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1006 ], [ %1097, %1128 ]
  %1013 = icmp slt i32 %k17.4, %1011
  br i1 %1013, label %1014, label %1130

; <label>:1014                                    ; preds = %1012
  %1015 = sext i32 %k17.4 to i64
  %1016 = getelementptr inbounds i32* %228, i64 %1015
  %1017 = load i32* %1016, align 4
  %1018 = sext i32 %1017 to i64
  %1019 = getelementptr inbounds %struct.CompAtom* %34, i64 %1018
  %1020 = getelementptr inbounds %struct.CompAtom* %1019, i32 0, i32 0
  %1021 = getelementptr inbounds %class.Vector* %1020, i32 0, i32 0
  %1022 = load double* %1021, align 8
  %1023 = fsub double %285, %1022
  %1024 = fmul double %1023, %1023
  %1025 = getelementptr inbounds %struct.CompAtom* %1019, i32 0, i32 0
  %1026 = getelementptr inbounds %class.Vector* %1025, i32 0, i32 1
  %1027 = load double* %1026, align 8
  %1028 = fsub double %288, %1027
  %1029 = fmul double %1028, %1028
  %1030 = fadd double %1024, %1029
  %1031 = getelementptr inbounds %struct.CompAtom* %1019, i32 0, i32 0
  %1032 = getelementptr inbounds %class.Vector* %1031, i32 0, i32 2
  %1033 = load double* %1032, align 8
  %1034 = fsub double %291, %1033
  %1035 = fmul double %1034, %1034
  %1036 = fadd double %1030, %1035
  %1037 = fptrunc double %1036 to float
  %1038 = bitcast %union.anon.39* %r2f49 to float*
  store float %1037, float* %1038, align 4
  %1039 = bitcast %union.anon.39* %r2f49 to i32*
  %1040 = load i32* %1039, align 4
  %1041 = ashr i32 %1040, 17
  %1042 = add nsw i32 %1041, %22
  %1043 = mul nsw i32 16, %1042
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds double* %14, i64 %1044
  %1046 = getelementptr inbounds double* %1045, i64 8
  %1047 = getelementptr inbounds double* %1046, i64 4
  %1048 = getelementptr inbounds double* %1047, i64 0
  %1049 = load double* %1048, align 8
  %1050 = bitcast %union.anon.39* %r2f49 to i32*
  %1051 = load i32* %1050, align 4
  %1052 = and i32 %1051, -131072
  store i32 %1052, i32* %1050, align 4
  %1053 = getelementptr inbounds %struct.CompAtom* %1019, i32 0, i32 1
  %1054 = load float* %1053, align 4
  %1055 = fpext float %1054 to double
  %1056 = fmul double %535, %1055
  %1057 = bitcast %union.anon.39* %r2f49 to float*
  %1058 = load float* %1057, align 4
  %1059 = fpext float %1058 to double
  %1060 = fsub double %1036, %1059
  %1061 = getelementptr inbounds double* %1047, i64 1
  %1062 = load double* %1061, align 8
  %1063 = getelementptr inbounds double* %1047, i64 2
  %1064 = load double* %1063, align 8
  %1065 = getelementptr inbounds double* %1047, i64 3
  %1066 = load double* %1065, align 8
  %1067 = mul nsw i32 4, %1042
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds double* %15, i64 %1068
  %1070 = getelementptr inbounds double* %1069, i64 0
  %1071 = load double* %1070, align 8
  %1072 = fsub double %1049, %1071
  %1073 = getelementptr inbounds double* %1069, i64 1
  %1074 = load double* %1073, align 8
  %1075 = fsub double %1062, %1074
  %1076 = getelementptr inbounds double* %1069, i64 2
  %1077 = load double* %1076, align 8
  %1078 = fsub double %1064, %1077
  %1079 = getelementptr inbounds double* %1069, i64 3
  %1080 = load double* %1079, align 8
  %1081 = fsub double %1066, %1080
  %1082 = fmul double %1081, %1056
  %1083 = fmul double %1078, %1056
  %1084 = fmul double %1075, %1056
  %1085 = fmul double %1072, %1056
  %1086 = fmul double 3.000000e+00, %1060
  %1087 = fmul double %1086, %1082
  %1088 = fmul double 2.000000e+00, %1083
  %1089 = fadd double %1087, %1088
  %1090 = fmul double %1089, %1060
  %1091 = fadd double %1090, %1084
  %1092 = fmul double -2.000000e+00, %1091
  %1093 = sext i32 %1017 to i64
  %1094 = getelementptr inbounds %class.Vector* %248, i64 %1093
  %1095 = fmul double %1092, %1023
  %1096 = fmul double %1095, %1023
  %1097 = fadd double %fullElectVirial_xx.3, %1096
  %1098 = fmul double %1095, %1028
  %1099 = fadd double %fullElectVirial_xy.3, %1098
  %1100 = fmul double %1095, %1034
  %1101 = fadd double %fullElectVirial_xz.3, %1100
  %1102 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1103 = load double* %1102, align 8
  %1104 = fadd double %1103, %1095
  store double %1104, double* %1102, align 8
  %1105 = getelementptr inbounds %class.Vector* %1094, i32 0, i32 0
  %1106 = load double* %1105, align 8
  %1107 = fsub double %1106, %1095
  store double %1107, double* %1105, align 8
  %1108 = fmul double %1092, %1028
  %1109 = fmul double %1108, %1028
  %1110 = fadd double %fullElectVirial_yy.3, %1109
  %1111 = fmul double %1108, %1034
  %1112 = fadd double %fullElectVirial_yz.3, %1111
  %1113 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1114 = load double* %1113, align 8
  %1115 = fadd double %1114, %1108
  store double %1115, double* %1113, align 8
  %1116 = getelementptr inbounds %class.Vector* %1094, i32 0, i32 1
  %1117 = load double* %1116, align 8
  %1118 = fsub double %1117, %1108
  store double %1118, double* %1116, align 8
  %1119 = fmul double %1092, %1034
  %1120 = fmul double %1119, %1034
  %1121 = fadd double %fullElectVirial_zz.3, %1120
  %1122 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1123 = load double* %1122, align 8
  %1124 = fadd double %1123, %1119
  store double %1124, double* %1122, align 8
  %1125 = getelementptr inbounds %class.Vector* %1094, i32 0, i32 2
  %1126 = load double* %1125, align 8
  %1127 = fsub double %1126, %1119
  store double %1127, double* %1125, align 8
  br label %1128

; <label>:1128                                    ; preds = %1014
  %1129 = add nsw i32 %k17.4, 1
  br label %1012

; <label>:1130                                    ; preds = %1012
  br label %1131

; <label>:1131                                    ; preds = %1130, %327
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %327 ], [ %pairlistoffset.1, %1130 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %327 ], [ %pairlistindex.2, %1130 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %327 ], [ %fixg_lower.3, %1130 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %327 ], [ %g_lower.3, %1130 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %327 ], [ %j_hgroup.2, %1130 ]
  %pairCount.3 = phi i32 [ %323, %327 ], [ %pairCount.2, %1130 ]
  %i.1 = phi i32 [ %329, %327 ], [ %i.0, %1130 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %327 ], [ %fullElectVirial_zz.3, %1130 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %327 ], [ %fullElectVirial_yz.3, %1130 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %327 ], [ %fullElectVirial_yy.3, %1130 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %327 ], [ %fullElectVirial_xz.3, %1130 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %327 ], [ %fullElectVirial_xy.3, %1130 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %327 ], [ %fullElectVirial_xx.3, %1130 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %327 ], [ %769, %1130 ]
  %1132 = add nsw i32 %i.1, 1
  br label %264

; <label>:1133                                    ; preds = %264
  %1134 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1135 = icmp ne i32* %48, %1134
  br i1 %1135, label %1136, label %1141

; <label>:1136                                    ; preds = %1133
  %1137 = icmp eq i32* %48, null
  br i1 %1137, label %1140, label %1138

; <label>:1138                                    ; preds = %1136
  %1139 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1139) #8
  br label %1140

; <label>:1140                                    ; preds = %1138, %1136
  br label %1141

; <label>:1141                                    ; preds = %1140, %1133
  %1142 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1143 = icmp ne i32* %62, %1142
  br i1 %1143, label %1144, label %1149

; <label>:1144                                    ; preds = %1141
  %1145 = icmp eq i32* %62, null
  br i1 %1145, label %1148, label %1146

; <label>:1146                                    ; preds = %1144
  %1147 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1147) #8
  br label %1148

; <label>:1148                                    ; preds = %1146, %1144
  br label %1149

; <label>:1149                                    ; preds = %1148, %1141
  %1150 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1151 = icmp ne i32* %76, %1150
  br i1 %1151, label %1152, label %1157

; <label>:1152                                    ; preds = %1149
  %1153 = icmp eq i32* %76, null
  br i1 %1153, label %1156, label %1154

; <label>:1154                                    ; preds = %1152
  %1155 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1155) #8
  br label %1156

; <label>:1156                                    ; preds = %1154, %1152
  br label %1157

; <label>:1157                                    ; preds = %1156, %1149
  %1158 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1159 = icmp ne i32* %186, %1158
  br i1 %1159, label %1160, label %1165

; <label>:1160                                    ; preds = %1157
  %1161 = icmp eq i32* %186, null
  br i1 %1161, label %1164, label %1162

; <label>:1162                                    ; preds = %1160
  %1163 = bitcast i32* %186 to i8*
  call void @_ZdaPv(i8* %1163) #8
  br label %1164

; <label>:1164                                    ; preds = %1162, %1160
  br label %1165

; <label>:1165                                    ; preds = %1164, %1157
  %1166 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1167 = icmp ne i32* %200, %1166
  br i1 %1167, label %1168, label %1173

; <label>:1168                                    ; preds = %1165
  %1169 = icmp eq i32* %200, null
  br i1 %1169, label %1172, label %1170

; <label>:1170                                    ; preds = %1168
  %1171 = bitcast i32* %200 to i8*
  call void @_ZdaPv(i8* %1171) #8
  br label %1172

; <label>:1172                                    ; preds = %1170, %1168
  br label %1173

; <label>:1173                                    ; preds = %1172, %1165
  %1174 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1175 = icmp ne i32* %214, %1174
  br i1 %1175, label %1176, label %1181

; <label>:1176                                    ; preds = %1173
  %1177 = icmp eq i32* %214, null
  br i1 %1177, label %1180, label %1178

; <label>:1178                                    ; preds = %1176
  %1179 = bitcast i32* %214 to i8*
  call void @_ZdaPv(i8* %1179) #8
  br label %1180

; <label>:1180                                    ; preds = %1178, %1176
  br label %1181

; <label>:1181                                    ; preds = %1180, %1173
  %1182 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1183 = icmp ne i32* %228, %1182
  br i1 %1183, label %1184, label %1189

; <label>:1184                                    ; preds = %1181
  %1185 = icmp eq i32* %228, null
  br i1 %1185, label %1188, label %1186

; <label>:1186                                    ; preds = %1184
  %1187 = bitcast i32* %228 to i8*
  call void @_ZdaPv(i8* %1187) #8
  br label %1188

; <label>:1188                                    ; preds = %1186, %1184
  br label %1189

; <label>:1189                                    ; preds = %1188, %1181
  %1190 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1191 = icmp ne i32* %242, %1190
  br i1 %1191, label %1192, label %1197

; <label>:1192                                    ; preds = %1189
  %1193 = icmp eq i32* %242, null
  br i1 %1193, label %1196, label %1194

; <label>:1194                                    ; preds = %1192
  %1195 = bitcast i32* %242 to i8*
  call void @_ZdaPv(i8* %1195) #8
  br label %1196

; <label>:1196                                    ; preds = %1194, %1192
  br label %1197

; <label>:1197                                    ; preds = %1196, %1189
  %1198 = sitofp i32 %exclChecksum.0 to double
  %1199 = getelementptr inbounds double* %6, i64 22
  %1200 = load double* %1199, align 8
  %1201 = fadd double %1200, %1198
  store double %1201, double* %1199, align 8
  %1202 = getelementptr inbounds double* %6, i64 12
  %1203 = load double* %1202, align 8
  %1204 = fadd double %1203, %fullElectVirial_xx.0
  store double %1204, double* %1202, align 8
  %1205 = getelementptr inbounds double* %6, i64 13
  %1206 = load double* %1205, align 8
  %1207 = fadd double %1206, %fullElectVirial_xy.0
  store double %1207, double* %1205, align 8
  %1208 = getelementptr inbounds double* %6, i64 14
  %1209 = load double* %1208, align 8
  %1210 = fadd double %1209, %fullElectVirial_xz.0
  store double %1210, double* %1208, align 8
  %1211 = getelementptr inbounds double* %6, i64 15
  %1212 = load double* %1211, align 8
  %1213 = fadd double %1212, %fullElectVirial_xy.0
  store double %1213, double* %1211, align 8
  %1214 = getelementptr inbounds double* %6, i64 16
  %1215 = load double* %1214, align 8
  %1216 = fadd double %1215, %fullElectVirial_yy.0
  store double %1216, double* %1214, align 8
  %1217 = getelementptr inbounds double* %6, i64 17
  %1218 = load double* %1217, align 8
  %1219 = fadd double %1218, %fullElectVirial_yz.0
  store double %1219, double* %1217, align 8
  %1220 = getelementptr inbounds double* %6, i64 18
  %1221 = load double* %1220, align 8
  %1222 = fadd double %1221, %fullElectVirial_xz.0
  store double %1222, double* %1220, align 8
  %1223 = getelementptr inbounds double* %6, i64 19
  %1224 = load double* %1223, align 8
  %1225 = fadd double %1224, %fullElectVirial_yz.0
  store double %1225, double* %1223, align 8
  %1226 = getelementptr inbounds double* %6, i64 20
  %1227 = load double* %1226, align 8
  %1228 = fadd double %1227, %fullElectVirial_zz.0
  store double %1228, double* %1226, align 8
  br label %1229

; <label>:1229                                    ; preds = %1197, %161, %3
  ret void
}

; Function Attrs: uwtable
define void @_ZN20ComputeNonbondedUtil31calc_self_energy_slow_fullelectEP9nonbonded(%struct.nonbonded* %params) #0 align 2 {
  %ljNull = alloca %"struct.LJTable::TableEntry", align 8
  %grouplist_std = alloca [1005 x i32], align 16
  %fixglist_std = alloca [1005 x i32], align 16
  %goodglist_std = alloca [1005 x i32], align 16
  %pairlist_std = alloca [1005 x i32], align 16
  %pairlist2_std = alloca [1005 x i32], align 16
  %pairlistn_std = alloca [1005 x i32], align 16
  %pairlistx_std = alloca [1005 x i32], align 16
  %pairlistm_std = alloca [1005 x i32], align 16
  %r2f = alloca %union.anon.40, align 4
  %r2f28 = alloca %union.anon.41, align 4
  %r2f50 = alloca %union.anon.42, align 4
  %1 = load i32* @_ZN20ComputeNonbondedUtil8commOnlyE, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  br label %1253

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 4
  %6 = load double** %5, align 8
  %7 = load double* @_ZN20ComputeNonbondedUtil7cutoff2E, align 8
  %8 = load double* @_ZN20ComputeNonbondedUtil12groupcutoff2E, align 8
  %9 = load double* @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8
  %10 = load %class.LJTable** @_ZN20ComputeNonbondedUtil7ljTableE, align 8
  %11 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 0
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %"struct.LJTable::TableEntry"* %ljNull, i32 0, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = load %class.Molecule** @_ZN20ComputeNonbondedUtil3molE, align 8
  %14 = load double** @_ZN20ComputeNonbondedUtil11table_shortE, align 8
  %15 = load double** @_ZN20ComputeNonbondedUtil10slow_tableE, align 8
  %16 = load double* @_ZN20ComputeNonbondedUtil7scalingE, align 8
  %17 = load double* @_ZN20ComputeNonbondedUtil7scale14E, align 8
  %18 = fsub double 1.000000e+00, %17
  %19 = load double* @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8
  %20 = load i32* @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4
  %21 = sub nsw i32 %20, 127
  %22 = mul nsw i32 64, %21
  %23 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %24 = getelementptr inbounds [2 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 3
  %27 = getelementptr inbounds [2 x i32]* %26, i32 0, i64 1
  %28 = load i32* %27, align 4
  %29 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.CompAtom*]* %29, i32 0, i64 0
  %31 = load %struct.CompAtom** %30, align 8
  %32 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 0
  %33 = getelementptr inbounds [2 x %struct.CompAtom*]* %32, i32 0, i64 1
  %34 = load %struct.CompAtom** %33, align 8
  %35 = icmp slt i32 %28, 1000
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %4
  %37 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  br label %47

; <label>:38                                      ; preds = %4
  %39 = add nsw i32 %28, 5
  %40 = sext i32 %39 to i64
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = call noalias i8* @_Znam(i64 %44) #9
  %46 = bitcast i8* %45 to i32*
  br label %47

; <label>:47                                      ; preds = %38, %36
  %48 = phi i32* [ %37, %36 ], [ %46, %38 ]
  %49 = icmp slt i32 %28, 1000
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  br label %61

; <label>:52                                      ; preds = %47
  %53 = add nsw i32 %28, 5
  %54 = sext i32 %53 to i64
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 4)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #9
  %60 = bitcast i8* %59 to i32*
  br label %61

; <label>:61                                      ; preds = %52, %50
  %62 = phi i32* [ %51, %50 ], [ %60, %52 ]
  %63 = icmp slt i32 %28, 1000
  br i1 %63, label %64, label %66

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  br label %75

; <label>:66                                      ; preds = %61
  %67 = add nsw i32 %28, 5
  %68 = sext i32 %67 to i64
  %69 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %68, i64 4)
  %70 = extractvalue { i64, i1 } %69, 1
  %71 = extractvalue { i64, i1 } %69, 0
  %72 = select i1 %70, i64 -1, i64 %71
  %73 = call noalias i8* @_Znam(i64 %72) #9
  %74 = bitcast i8* %73 to i32*
  br label %75

; <label>:75                                      ; preds = %66, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %66 ]
  br label %77

; <label>:77                                      ; preds = %100, %75
  %g.0 = phi i32 [ 0, %75 ], [ %g.1, %100 ]
  %j.0 = phi i32 [ 0, %75 ], [ %101, %100 ]
  %78 = icmp slt i32 %j.0, %28
  br i1 %78, label %79, label %102

; <label>:79                                      ; preds = %77
  %80 = sext i32 %j.0 to i64
  %81 = getelementptr inbounds %struct.CompAtom* %34, i64 %80
  %82 = getelementptr inbounds %struct.CompAtom* %81, i32 0, i32 2
  %83 = load i32* %82, align 4
  %84 = lshr i32 %83, 22
  %85 = and i32 %84, 7
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87                                      ; preds = %79
  %88 = sext i32 %j.0 to i64
  %89 = getelementptr inbounds %struct.CompAtom* %34, i64 %88
  %90 = getelementptr inbounds %struct.CompAtom* %89, i32 0, i32 2
  %91 = load i32* %90, align 4
  %92 = lshr i32 %91, 25
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %87, %79
  %96 = add nsw i32 %g.0, 1
  %97 = sext i32 %g.0 to i64
  %98 = getelementptr inbounds i32* %48, i64 %97
  store i32 %j.0, i32* %98, align 4
  br label %99

; <label>:99                                      ; preds = %95, %87
  %g.1 = phi i32 [ %96, %95 ], [ %g.0, %87 ]
  br label %100

; <label>:100                                     ; preds = %99
  %101 = add nsw i32 %j.0, 1
  br label %77

; <label>:102                                     ; preds = %77
  %103 = icmp ne i32 %g.0, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %102
  %105 = sub nsw i32 %g.0, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32* %48, i64 %106
  %108 = load i32* %107, align 4
  %109 = sext i32 %g.0 to i64
  %110 = getelementptr inbounds i32* %48, i64 %109
  store i32 %108, i32* %110, align 4
  br label %111

; <label>:111                                     ; preds = %104, %102
  %112 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %163

; <label>:114                                     ; preds = %111
  br label %115

; <label>:115                                     ; preds = %133, %114
  %all_fixed.0 = phi i32 [ 1, %114 ], [ %all_fixed.1, %133 ]
  %fixg.0 = phi i32 [ 0, %114 ], [ %fixg.1, %133 ]
  %g.2 = phi i32 [ 0, %114 ], [ %134, %133 ]
  %116 = icmp slt i32 %g.2, %g.0
  br i1 %116, label %117, label %135

; <label>:117                                     ; preds = %115
  %118 = sext i32 %g.2 to i64
  %119 = getelementptr inbounds i32* %48, i64 %118
  %120 = load i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.CompAtom* %34, i64 %121
  %123 = getelementptr inbounds %struct.CompAtom* %122, i32 0, i32 2
  %124 = load i32* %123, align 4
  %125 = lshr i32 %124, 27
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %117
  %129 = add nsw i32 %fixg.0, 1
  %130 = sext i32 %fixg.0 to i64
  %131 = getelementptr inbounds i32* %62, i64 %130
  store i32 %120, i32* %131, align 4
  br label %132

; <label>:132                                     ; preds = %128, %117
  %all_fixed.1 = phi i32 [ %all_fixed.0, %117 ], [ 0, %128 ]
  %fixg.1 = phi i32 [ %fixg.0, %117 ], [ %129, %128 ]
  br label %133

; <label>:133                                     ; preds = %132
  %134 = add nsw i32 %g.2, 1
  br label %115

; <label>:135                                     ; preds = %115
  %136 = icmp ne i32 %all_fixed.0, 0
  br i1 %136, label %137, label %162

; <label>:137                                     ; preds = %135
  %138 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %139 = icmp ne i32* %48, %138
  br i1 %139, label %140, label %145

; <label>:140                                     ; preds = %137
  %141 = icmp eq i32* %48, null
  br i1 %141, label %144, label %142

; <label>:142                                     ; preds = %140
  %143 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %143) #8
  br label %144

; <label>:144                                     ; preds = %142, %140
  br label %145

; <label>:145                                     ; preds = %144, %137
  %146 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %147 = icmp ne i32* %62, %146
  br i1 %147, label %148, label %153

; <label>:148                                     ; preds = %145
  %149 = icmp eq i32* %62, null
  br i1 %149, label %152, label %150

; <label>:150                                     ; preds = %148
  %151 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %151) #8
  br label %152

; <label>:152                                     ; preds = %150, %148
  br label %153

; <label>:153                                     ; preds = %152, %145
  %154 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %155 = icmp ne i32* %76, %154
  br i1 %155, label %156, label %161

; <label>:156                                     ; preds = %153
  %157 = icmp eq i32* %76, null
  br i1 %157, label %160, label %158

; <label>:158                                     ; preds = %156
  %159 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %159) #8
  br label %160

; <label>:160                                     ; preds = %158, %156
  br label %161

; <label>:161                                     ; preds = %160, %153
  br label %1253

; <label>:162                                     ; preds = %135
  br label %163

; <label>:163                                     ; preds = %162, %111
  %fixg.2 = phi i32 [ %fixg.0, %162 ], [ 0, %111 ]
  %164 = icmp ne i32 %fixg.2, 0
  br i1 %164, label %165, label %172

; <label>:165                                     ; preds = %163
  %166 = sub nsw i32 %fixg.2, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32* %62, i64 %167
  %169 = load i32* %168, align 4
  %170 = sext i32 %fixg.2 to i64
  %171 = getelementptr inbounds i32* %62, i64 %170
  store i32 %169, i32* %171, align 4
  br label %172

; <label>:172                                     ; preds = %165, %163
  %173 = icmp slt i32 %28, 1000
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %172
  %175 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  br label %185

; <label>:176                                     ; preds = %172
  %177 = add nsw i32 %28, 5
  %178 = sext i32 %177 to i64
  %179 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %178, i64 4)
  %180 = extractvalue { i64, i1 } %179, 1
  %181 = extractvalue { i64, i1 } %179, 0
  %182 = select i1 %180, i64 -1, i64 %181
  %183 = call noalias i8* @_Znam(i64 %182) #9
  %184 = bitcast i8* %183 to i32*
  br label %185

; <label>:185                                     ; preds = %176, %174
  %186 = phi i32* [ %175, %174 ], [ %184, %176 ]
  %187 = icmp slt i32 %28, 1000
  br i1 %187, label %188, label %190

; <label>:188                                     ; preds = %185
  %189 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  br label %199

; <label>:190                                     ; preds = %185
  %191 = add nsw i32 %28, 5
  %192 = sext i32 %191 to i64
  %193 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %192, i64 4)
  %194 = extractvalue { i64, i1 } %193, 1
  %195 = extractvalue { i64, i1 } %193, 0
  %196 = select i1 %194, i64 -1, i64 %195
  %197 = call noalias i8* @_Znam(i64 %196) #9
  %198 = bitcast i8* %197 to i32*
  br label %199

; <label>:199                                     ; preds = %190, %188
  %200 = phi i32* [ %189, %188 ], [ %198, %190 ]
  %201 = icmp slt i32 %28, 1000
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %199
  %203 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  br label %213

; <label>:204                                     ; preds = %199
  %205 = add nsw i32 %28, 5
  %206 = sext i32 %205 to i64
  %207 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %206, i64 4)
  %208 = extractvalue { i64, i1 } %207, 1
  %209 = extractvalue { i64, i1 } %207, 0
  %210 = select i1 %208, i64 -1, i64 %209
  %211 = call noalias i8* @_Znam(i64 %210) #9
  %212 = bitcast i8* %211 to i32*
  br label %213

; <label>:213                                     ; preds = %204, %202
  %214 = phi i32* [ %203, %202 ], [ %212, %204 ]
  %215 = icmp slt i32 %28, 1000
  br i1 %215, label %216, label %218

; <label>:216                                     ; preds = %213
  %217 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  br label %227

; <label>:218                                     ; preds = %213
  %219 = add nsw i32 %28, 5
  %220 = sext i32 %219 to i64
  %221 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %220, i64 4)
  %222 = extractvalue { i64, i1 } %221, 1
  %223 = extractvalue { i64, i1 } %221, 0
  %224 = select i1 %222, i64 -1, i64 %223
  %225 = call noalias i8* @_Znam(i64 %224) #9
  %226 = bitcast i8* %225 to i32*
  br label %227

; <label>:227                                     ; preds = %218, %216
  %228 = phi i32* [ %217, %216 ], [ %226, %218 ]
  %229 = icmp slt i32 %28, 1000
  br i1 %229, label %230, label %232

; <label>:230                                     ; preds = %227
  %231 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  br label %241

; <label>:232                                     ; preds = %227
  %233 = add nsw i32 %28, 5
  %234 = sext i32 %233 to i64
  %235 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %234, i64 4)
  %236 = extractvalue { i64, i1 } %235, 1
  %237 = extractvalue { i64, i1 } %235, 0
  %238 = select i1 %236, i64 -1, i64 %237
  %239 = call noalias i8* @_Znam(i64 %238) #9
  %240 = bitcast i8* %239 to i32*
  br label %241

; <label>:241                                     ; preds = %232, %230
  %242 = phi i32* [ %231, %230 ], [ %240, %232 ]
  %243 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %244 = getelementptr inbounds [2 x %class.Vector*]* %243, i32 0, i64 0
  %245 = load %class.Vector** %244, align 8
  %246 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 2
  %247 = getelementptr inbounds [2 x %class.Vector*]* %246, i32 0, i64 1
  %248 = load %class.Vector** %247, align 8
  %249 = sub nsw i32 %25, 1
  %250 = mul nsw i32 %249, %28
  %251 = sdiv i32 %250, 2
  %252 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 8
  %253 = load i32* %252, align 4
  %254 = mul nsw i32 %251, %253
  %255 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %256 = load i32* %255, align 4
  %257 = sdiv i32 %254, %256
  %258 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 9
  %259 = load i32* %258, align 4
  %260 = mul nsw i32 %251, %259
  %261 = getelementptr inbounds %struct.nonbonded* %params, i32 0, i32 10
  %262 = load i32* %261, align 4
  %263 = sdiv i32 %260, %262
  br label %264

; <label>:264                                     ; preds = %1152, %241
  %pairlistoffset.0 = phi i32 [ 0, %241 ], [ %pairlistoffset.2, %1152 ]
  %pairlistindex.0 = phi i32 [ 0, %241 ], [ %pairlistindex.3, %1152 ]
  %fixg_lower.0 = phi i32 [ 0, %241 ], [ %fixg_lower.4, %1152 ]
  %g_lower.0 = phi i32 [ 0, %241 ], [ %g_lower.4, %1152 ]
  %j_hgroup.0 = phi i32 [ 0, %241 ], [ %j_hgroup.3, %1152 ]
  %pairCount.0 = phi i32 [ 0, %241 ], [ %pairCount.3, %1152 ]
  %i.0 = phi i32 [ 0, %241 ], [ %1153, %1152 ]
  %fullElectVirial_zz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_zz.4, %1152 ]
  %fullElectVirial_yz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yz.4, %1152 ]
  %fullElectVirial_yy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_yy.4, %1152 ]
  %fullElectVirial_xz.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xz.4, %1152 ]
  %fullElectVirial_xy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xy.4, %1152 ]
  %fullElectVirial_xx.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectVirial_xx.4, %1152 ]
  %fullElectEnergy.0 = phi double [ 0.000000e+00, %241 ], [ %fullElectEnergy.4, %1152 ]
  %exclChecksum.0 = phi i32 [ 0, %241 ], [ %exclChecksum.11, %1152 ]
  %265 = sub nsw i32 %25, 1
  %266 = icmp slt i32 %i.0, %265
  br i1 %266, label %267, label %1154

; <label>:267                                     ; preds = %264
  %268 = sext i32 %i.0 to i64
  %269 = getelementptr inbounds %struct.CompAtom* %31, i64 %268
  %270 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %271 = load i32* %270, align 4
  %272 = and i32 %271, 4194303
  %273 = call %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %13, i32 %272)
  %274 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 0
  %275 = load i32* %274, align 4
  %276 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 1
  %277 = load i32* %276, align 4
  %278 = getelementptr inbounds %class.ExclusionCheck* %273, i32 0, i32 2
  %279 = load i8** %278, align 8
  %280 = sext i32 %275 to i64
  %281 = sub i64 0, %280
  %282 = getelementptr inbounds i8* %279, i64 %281
  %283 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %284 = getelementptr inbounds %class.Vector* %283, i32 0, i32 0
  %285 = load double* %284, align 8
  %286 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %287 = getelementptr inbounds %class.Vector* %286, i32 0, i32 1
  %288 = load double* %287, align 8
  %289 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 0
  %290 = getelementptr inbounds %class.Vector* %289, i32 0, i32 2
  %291 = load double* %290, align 8
  %292 = sext i32 %i.0 to i64
  %293 = getelementptr inbounds %class.Vector* %245, i64 %292
  %294 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %295 = load i32* %294, align 4
  %296 = lshr i32 %295, 22
  %297 = and i32 %296, 7
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %305, label %299

; <label>:299                                     ; preds = %267
  %300 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %301 = load i32* %300, align 4
  %302 = lshr i32 %301, 25
  %303 = and i32 %302, 1
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %305, label %516

; <label>:305                                     ; preds = %299, %267
  %306 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %307 = load i32* %306, align 4
  %308 = lshr i32 %307, 22
  %309 = and i32 %308, 7
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %311, label %331

; <label>:311                                     ; preds = %305
  %312 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %313 = load i32* %312, align 4
  %314 = lshr i32 %313, 22
  %315 = and i32 %314, 7
  %316 = sub nsw i32 %25, 1
  %317 = sub nsw i32 %316, %i.0
  %318 = mul nsw i32 %315, %317
  %319 = add nsw i32 %pairCount.0, %318
  %320 = sub nsw i32 %315, 1
  %321 = mul nsw i32 %315, %320
  %322 = sdiv i32 %321, 2
  %323 = sub nsw i32 %319, %322
  %324 = icmp slt i32 %pairCount.0, %257
  br i1 %324, label %327, label %325

; <label>:325                                     ; preds = %311
  %326 = icmp sge i32 %pairCount.0, %263
  br i1 %326, label %327, label %330

; <label>:327                                     ; preds = %325, %311
  %328 = sub nsw i32 %315, 1
  %329 = add nsw i32 %i.0, %328
  br label %1152

; <label>:330                                     ; preds = %325
  br label %331

; <label>:331                                     ; preds = %330, %305
  %pairCount.1 = phi i32 [ %323, %330 ], [ %pairCount.0, %305 ]
  %332 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %340

; <label>:334                                     ; preds = %331
  %335 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %336 = load i32* %335, align 4
  %337 = lshr i32 %336, 27
  %338 = and i32 %337, 1
  %339 = icmp ne i32 %338, 0
  br label %340

; <label>:340                                     ; preds = %334, %331
  %341 = phi i1 [ false, %331 ], [ %339, %334 ]
  %342 = zext i1 %341 to i32
  %343 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %344 = load i32* %343, align 4
  %345 = lshr i32 %344, 22
  %346 = and i32 %345, 7
  %347 = icmp ne i32 %346, 0
  br i1 %347, label %348, label %378

; <label>:348                                     ; preds = %340
  %349 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %350 = load i32* %349, align 4
  %351 = lshr i32 %350, 22
  %352 = and i32 %351, 7
  %353 = add nsw i32 %i.0, %352
  br label %354

; <label>:354                                     ; preds = %363, %348
  %g_lower.1 = phi i32 [ %g_lower.0, %348 ], [ %364, %363 ]
  %355 = icmp slt i32 %g_lower.1, %g.0
  br i1 %355, label %356, label %361

; <label>:356                                     ; preds = %354
  %357 = sext i32 %g_lower.1 to i64
  %358 = getelementptr inbounds i32* %48, i64 %357
  %359 = load i32* %358, align 4
  %360 = icmp slt i32 %359, %353
  br label %361

; <label>:361                                     ; preds = %356, %354
  %362 = phi i1 [ false, %354 ], [ %360, %356 ]
  br i1 %362, label %363, label %365

; <label>:363                                     ; preds = %361
  %364 = add nsw i32 %g_lower.1, 1
  br label %354

; <label>:365                                     ; preds = %361
  br label %366

; <label>:366                                     ; preds = %375, %365
  %fixg_lower.1 = phi i32 [ %fixg_lower.0, %365 ], [ %376, %375 ]
  %367 = icmp slt i32 %fixg_lower.1, %fixg.2
  br i1 %367, label %368, label %373

; <label>:368                                     ; preds = %366
  %369 = sext i32 %fixg_lower.1 to i64
  %370 = getelementptr inbounds i32* %62, i64 %369
  %371 = load i32* %370, align 4
  %372 = icmp slt i32 %371, %353
  br label %373

; <label>:373                                     ; preds = %368, %366
  %374 = phi i1 [ false, %366 ], [ %372, %368 ]
  br i1 %374, label %375, label %377

; <label>:375                                     ; preds = %373
  %376 = add nsw i32 %fixg_lower.1, 1
  br label %366

; <label>:377                                     ; preds = %373
  br label %378

; <label>:378                                     ; preds = %377, %340
  %fixg_lower.2 = phi i32 [ %fixg_lower.1, %377 ], [ %fixg_lower.0, %340 ]
  %g_lower.2 = phi i32 [ %g_lower.1, %377 ], [ %g_lower.0, %340 ]
  %j_hgroup.1 = phi i32 [ %353, %377 ], [ %j_hgroup.0, %340 ]
  %379 = add nsw i32 %i.0, 1
  br label %380

; <label>:380                                     ; preds = %386, %378
  %pairlistindex.1 = phi i32 [ 0, %378 ], [ %383, %386 ]
  %j.1 = phi i32 [ %379, %378 ], [ %387, %386 ]
  %381 = icmp slt i32 %j.1, %j_hgroup.1
  br i1 %381, label %382, label %388

; <label>:382                                     ; preds = %380
  %383 = add nsw i32 %pairlistindex.1, 1
  %384 = sext i32 %pairlistindex.1 to i64
  %385 = getelementptr inbounds i32* %186, i64 %384
  store i32 %j.1, i32* %385, align 4
  br label %386

; <label>:386                                     ; preds = %382
  %387 = add nsw i32 %j.1, 1
  br label %380

; <label>:388                                     ; preds = %380
  %389 = sext i32 %pairlistindex.1 to i64
  %390 = getelementptr inbounds i32* %186, i64 %389
  %391 = icmp ne i32 %342, 0
  br i1 %391, label %392, label %393

; <label>:392                                     ; preds = %388
  br label %394

; <label>:393                                     ; preds = %388
  br label %394

; <label>:394                                     ; preds = %393, %392
  %395 = phi i32* [ %62, %392 ], [ %48, %393 ]
  %396 = icmp ne i32 %342, 0
  br i1 %396, label %397, label %398

; <label>:397                                     ; preds = %394
  br label %399

; <label>:398                                     ; preds = %394
  br label %399

; <label>:399                                     ; preds = %398, %397
  %400 = phi i32 [ %fixg_lower.2, %397 ], [ %g_lower.2, %398 ]
  %401 = icmp ne i32 %342, 0
  br i1 %401, label %402, label %403

; <label>:402                                     ; preds = %399
  br label %404

; <label>:403                                     ; preds = %399
  br label %404

; <label>:404                                     ; preds = %403, %402
  %405 = phi i32 [ %fixg.2, %402 ], [ %g.0, %403 ]
  %406 = icmp slt i32 %400, %405
  br i1 %406, label %407, label %501

; <label>:407                                     ; preds = %404
  %408 = sext i32 %400 to i64
  %409 = getelementptr inbounds i32* %395, i64 %408
  %410 = load i32* %409, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds %struct.CompAtom* %34, i64 %411
  %413 = getelementptr inbounds %struct.CompAtom* %412, i32 0, i32 0
  %414 = getelementptr inbounds %class.Vector* %413, i32 0, i32 0
  %415 = load double* %414, align 8
  %416 = sext i32 %410 to i64
  %417 = getelementptr inbounds %struct.CompAtom* %34, i64 %416
  %418 = getelementptr inbounds %struct.CompAtom* %417, i32 0, i32 0
  %419 = getelementptr inbounds %class.Vector* %418, i32 0, i32 1
  %420 = load double* %419, align 8
  %421 = sext i32 %410 to i64
  %422 = getelementptr inbounds %struct.CompAtom* %34, i64 %421
  %423 = getelementptr inbounds %struct.CompAtom* %422, i32 0, i32 0
  %424 = getelementptr inbounds %class.Vector* %423, i32 0, i32 2
  %425 = load double* %424, align 8
  br label %426

; <label>:426                                     ; preds = %459, %407
  %g.3 = phi i32 [ %400, %407 ], [ %429, %459 ]
  %gli.0 = phi i32* [ %76, %407 ], [ %gli.1, %459 ]
  %j2.0 = phi i32 [ %410, %407 ], [ %432, %459 ]
  %p_j_x.0 = phi double [ %415, %407 ], [ %439, %459 ]
  %p_j_y.0 = phi double [ %420, %407 ], [ %447, %459 ]
  %p_j_z.0 = phi double [ %425, %407 ], [ %455, %459 ]
  %427 = icmp slt i32 %g.3, %405
  br i1 %427, label %428, label %460

; <label>:428                                     ; preds = %426
  %429 = add nsw i32 %g.3, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32* %395, i64 %430
  %432 = load i32* %431, align 4
  %433 = fsub double %285, %p_j_x.0
  %434 = fmul double %433, %433
  %435 = sext i32 %432 to i64
  %436 = getelementptr inbounds %struct.CompAtom* %34, i64 %435
  %437 = getelementptr inbounds %struct.CompAtom* %436, i32 0, i32 0
  %438 = getelementptr inbounds %class.Vector* %437, i32 0, i32 0
  %439 = load double* %438, align 8
  %440 = fsub double %288, %p_j_y.0
  %441 = fmul double %440, %440
  %442 = fadd double %434, %441
  %443 = sext i32 %432 to i64
  %444 = getelementptr inbounds %struct.CompAtom* %34, i64 %443
  %445 = getelementptr inbounds %struct.CompAtom* %444, i32 0, i32 0
  %446 = getelementptr inbounds %class.Vector* %445, i32 0, i32 1
  %447 = load double* %446, align 8
  %448 = fsub double %291, %p_j_z.0
  %449 = fmul double %448, %448
  %450 = fadd double %442, %449
  %451 = sext i32 %432 to i64
  %452 = getelementptr inbounds %struct.CompAtom* %34, i64 %451
  %453 = getelementptr inbounds %struct.CompAtom* %452, i32 0, i32 0
  %454 = getelementptr inbounds %class.Vector* %453, i32 0, i32 2
  %455 = load double* %454, align 8
  %456 = fcmp ole double %450, %8
  br i1 %456, label %457, label %459

; <label>:457                                     ; preds = %428
  store i32 %j2.0, i32* %gli.0, align 4
  %458 = getelementptr inbounds i32* %gli.0, i32 1
  br label %459

; <label>:459                                     ; preds = %457, %428
  %gli.1 = phi i32* [ %458, %457 ], [ %gli.0, %428 ]
  br label %426

; <label>:460                                     ; preds = %426
  %461 = ptrtoint i32* %gli.0 to i64
  %462 = ptrtoint i32* %76 to i64
  %463 = sub i64 %461, %462
  %464 = sdiv exact i64 %463, 4
  %465 = trunc i64 %464 to i32
  br label %466

; <label>:466                                     ; preds = %498, %460
  %pli.0 = phi i32* [ %390, %460 ], [ %497, %498 ]
  %h.0 = phi i32 [ 0, %460 ], [ %499, %498 ]
  %467 = icmp slt i32 %h.0, %465
  br i1 %467, label %468, label %500

; <label>:468                                     ; preds = %466
  %469 = sext i32 %h.0 to i64
  %470 = getelementptr inbounds i32* %76, i64 %469
  %471 = load i32* %470, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.CompAtom* %34, i64 %472
  %474 = getelementptr inbounds %struct.CompAtom* %473, i32 0, i32 2
  %475 = load i32* %474, align 4
  %476 = lshr i32 %475, 25
  %477 = and i32 %476, 1
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %480

; <label>:479                                     ; preds = %468
  br label %487

; <label>:480                                     ; preds = %468
  %481 = sext i32 %471 to i64
  %482 = getelementptr inbounds %struct.CompAtom* %34, i64 %481
  %483 = getelementptr inbounds %struct.CompAtom* %482, i32 0, i32 2
  %484 = load i32* %483, align 4
  %485 = lshr i32 %484, 22
  %486 = and i32 %485, 7
  br label %487

; <label>:487                                     ; preds = %480, %479
  %488 = phi i32 [ 1, %479 ], [ %486, %480 ]
  %489 = getelementptr inbounds i32* %pli.0, i64 0
  store i32 %471, i32* %489, align 4
  %490 = add nsw i32 %471, 1
  %491 = getelementptr inbounds i32* %pli.0, i64 1
  store i32 %490, i32* %491, align 4
  %492 = add nsw i32 %471, 2
  %493 = getelementptr inbounds i32* %pli.0, i64 2
  store i32 %492, i32* %493, align 4
  %494 = add nsw i32 %471, 3
  %495 = getelementptr inbounds i32* %pli.0, i64 3
  store i32 %494, i32* %495, align 4
  %496 = sext i32 %488 to i64
  %497 = getelementptr inbounds i32* %pli.0, i64 %496
  br label %498

; <label>:498                                     ; preds = %487
  %499 = add nsw i32 %h.0, 1
  br label %466

; <label>:500                                     ; preds = %466
  br label %501

; <label>:501                                     ; preds = %500, %404
  %pli.1 = phi i32* [ %pli.0, %500 ], [ %390, %404 ]
  %502 = ptrtoint i32* %pli.1 to i64
  %503 = ptrtoint i32* %186 to i64
  %504 = sub i64 %502, %503
  %505 = sdiv exact i64 %504, 4
  %506 = trunc i64 %505 to i32
  %507 = icmp ne i32 %506, 0
  br i1 %507, label %508, label %515

; <label>:508                                     ; preds = %501
  %509 = sub nsw i32 %506, 1
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32* %186, i64 %510
  %512 = load i32* %511, align 4
  %513 = sext i32 %506 to i64
  %514 = getelementptr inbounds i32* %186, i64 %513
  store i32 %512, i32* %514, align 4
  br label %515

; <label>:515                                     ; preds = %508, %501
  br label %518

; <label>:516                                     ; preds = %299
  %517 = add nsw i32 %pairlistoffset.0, 1
  br label %518

; <label>:518                                     ; preds = %516, %515
  %pairlistoffset.1 = phi i32 [ 0, %515 ], [ %517, %516 ]
  %pairlistindex.2 = phi i32 [ %506, %515 ], [ %pairlistindex.0, %516 ]
  %fixg_lower.3 = phi i32 [ %fixg_lower.2, %515 ], [ %fixg_lower.0, %516 ]
  %g_lower.3 = phi i32 [ %g_lower.2, %515 ], [ %g_lower.0, %516 ]
  %j_hgroup.2 = phi i32 [ %j_hgroup.1, %515 ], [ %j_hgroup.0, %516 ]
  %pairCount.2 = phi i32 [ %pairCount.1, %515 ], [ %pairCount.0, %516 ]
  %519 = load i32* @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4
  %520 = icmp ne i32 %519, 0
  br i1 %520, label %521, label %527

; <label>:521                                     ; preds = %518
  %522 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %523 = load i32* %522, align 4
  %524 = lshr i32 %523, 26
  %525 = and i32 %524, 1
  %526 = icmp ne i32 %525, 0
  br label %527

; <label>:527                                     ; preds = %521, %518
  %528 = phi i1 [ false, %518 ], [ %526, %521 ]
  %529 = zext i1 %528 to i32
  %530 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 1
  %531 = load float* %530, align 4
  %532 = fpext float %531 to double
  %533 = fmul double 3.320636e+02, %532
  %534 = fmul double %533, %16
  %535 = fmul double %534, %9
  %536 = getelementptr inbounds %struct.CompAtom* %269, i32 0, i32 2
  %537 = load i32* %536, align 4
  %538 = and i32 %537, 4194303
  %539 = call zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %13, i32 %538)
  %540 = zext i16 %539 to i32
  %541 = call %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %10, i32 %540)
  %542 = icmp ne i32 %529, 0
  br i1 %542, label %543, label %605

; <label>:543                                     ; preds = %527
  br label %544

; <label>:544                                     ; preds = %602, %543
  %pli3.0 = phi i32* [ %200, %543 ], [ %pli3.2, %602 ]
  %plin.0 = phi i32* [ %214, %543 ], [ %plin.2, %602 ]
  %k.0 = phi i32 [ %pairlistoffset.1, %543 ], [ %603, %602 ]
  %exclChecksum.1 = phi i32 [ %exclChecksum.0, %543 ], [ %exclChecksum.3, %602 ]
  %545 = icmp slt i32 %k.0, %pairlistindex.2
  br i1 %545, label %546, label %604

; <label>:546                                     ; preds = %544
  %547 = sext i32 %k.0 to i64
  %548 = getelementptr inbounds i32* %186, i64 %547
  %549 = load i32* %548, align 4
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds %struct.CompAtom* %34, i64 %550
  %552 = getelementptr inbounds %struct.CompAtom* %551, i32 0, i32 0
  %553 = getelementptr inbounds %class.Vector* %552, i32 0, i32 0
  %554 = load double* %553, align 8
  %555 = fsub double %285, %554
  %556 = fmul double %555, %555
  %557 = sext i32 %549 to i64
  %558 = getelementptr inbounds %struct.CompAtom* %34, i64 %557
  %559 = getelementptr inbounds %struct.CompAtom* %558, i32 0, i32 0
  %560 = getelementptr inbounds %class.Vector* %559, i32 0, i32 1
  %561 = load double* %560, align 8
  %562 = fsub double %288, %561
  %563 = fmul double %562, %562
  %564 = fadd double %556, %563
  %565 = sext i32 %549 to i64
  %566 = getelementptr inbounds %struct.CompAtom* %34, i64 %565
  %567 = getelementptr inbounds %struct.CompAtom* %566, i32 0, i32 0
  %568 = getelementptr inbounds %class.Vector* %567, i32 0, i32 2
  %569 = load double* %568, align 8
  %570 = fsub double %291, %569
  %571 = fmul double %570, %570
  %572 = fadd double %564, %571
  %573 = sext i32 %549 to i64
  %574 = getelementptr inbounds %struct.CompAtom* %34, i64 %573
  %575 = getelementptr inbounds %struct.CompAtom* %574, i32 0, i32 2
  %576 = load i32* %575, align 4
  %577 = lshr i32 %576, 26
  %578 = and i32 %577, 1
  %579 = icmp ne i32 %578, 0
  br i1 %579, label %601, label %580

; <label>:580                                     ; preds = %546
  %581 = fcmp ole double %572, %7
  br i1 %581, label %582, label %601

; <label>:582                                     ; preds = %580
  %583 = fcmp ole double %572, %19
  br i1 %583, label %584, label %587

; <label>:584                                     ; preds = %582
  %585 = add nsw i32 %exclChecksum.1, 1
  %586 = icmp ne i32 %585, 0
  br i1 %586, label %601, label %587

; <label>:587                                     ; preds = %584, %582
  %exclChecksum.2 = phi i32 [ %585, %584 ], [ %exclChecksum.1, %582 ]
  %588 = sext i32 %549 to i64
  %589 = getelementptr inbounds %struct.CompAtom* %34, i64 %588
  %590 = getelementptr inbounds %struct.CompAtom* %589, i32 0, i32 2
  %591 = load i32* %590, align 4
  %592 = and i32 %591, 4194303
  %593 = icmp sge i32 %592, %275
  br i1 %593, label %594, label %598

; <label>:594                                     ; preds = %587
  %595 = icmp sle i32 %592, %277
  br i1 %595, label %596, label %598

; <label>:596                                     ; preds = %594
  %597 = getelementptr inbounds i32* %pli3.0, i32 1
  store i32 %549, i32* %pli3.0, align 4
  br label %600

; <label>:598                                     ; preds = %594, %587
  %599 = getelementptr inbounds i32* %plin.0, i32 1
  store i32 %549, i32* %plin.0, align 4
  br label %600

; <label>:600                                     ; preds = %598, %596
  %pli3.1 = phi i32* [ %597, %596 ], [ %pli3.0, %598 ]
  %plin.1 = phi i32* [ %plin.0, %596 ], [ %599, %598 ]
  br label %601

; <label>:601                                     ; preds = %600, %584, %580, %546
  %pli3.2 = phi i32* [ %pli3.0, %546 ], [ %pli3.0, %584 ], [ %pli3.1, %600 ], [ %pli3.0, %580 ]
  %plin.2 = phi i32* [ %plin.0, %546 ], [ %plin.0, %584 ], [ %plin.1, %600 ], [ %plin.0, %580 ]
  %exclChecksum.3 = phi i32 [ %exclChecksum.1, %546 ], [ %585, %584 ], [ %exclChecksum.2, %600 ], [ %exclChecksum.1, %580 ]
  br label %602

; <label>:602                                     ; preds = %601
  %603 = add nsw i32 %k.0, 1
  br label %544

; <label>:604                                     ; preds = %544
  br label %684

; <label>:605                                     ; preds = %527
  %606 = icmp slt i32 %pairlistoffset.1, %pairlistindex.2
  br i1 %606, label %607, label %683

; <label>:607                                     ; preds = %605
  %608 = sext i32 %pairlistoffset.1 to i64
  %609 = getelementptr inbounds i32* %186, i64 %608
  %610 = load i32* %609, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds %struct.CompAtom* %34, i64 %611
  %613 = getelementptr inbounds %struct.CompAtom* %612, i32 0, i32 0
  %614 = getelementptr inbounds %class.Vector* %613, i32 0, i32 0
  %615 = load double* %614, align 8
  %616 = sext i32 %610 to i64
  %617 = getelementptr inbounds %struct.CompAtom* %34, i64 %616
  %618 = getelementptr inbounds %struct.CompAtom* %617, i32 0, i32 0
  %619 = getelementptr inbounds %class.Vector* %618, i32 0, i32 1
  %620 = load double* %619, align 8
  %621 = sext i32 %610 to i64
  %622 = getelementptr inbounds %struct.CompAtom* %34, i64 %621
  %623 = getelementptr inbounds %struct.CompAtom* %622, i32 0, i32 0
  %624 = getelementptr inbounds %class.Vector* %623, i32 0, i32 2
  %625 = load double* %624, align 8
  %626 = sext i32 %610 to i64
  %627 = getelementptr inbounds %struct.CompAtom* %34, i64 %626
  %628 = getelementptr inbounds %struct.CompAtom* %627, i32 0, i32 2
  %629 = load i32* %628, align 4
  %630 = and i32 %629, 4194303
  br label %631

; <label>:631                                     ; preds = %676, %607
  %pli3.3 = phi i32* [ %200, %607 ], [ %pli3.5, %676 ]
  %plin.3 = phi i32* [ %214, %607 ], [ %plin.5, %676 ]
  %k9.0 = phi i32 [ %pairlistoffset.1, %607 ], [ %634, %676 ]
  %j210.0 = phi i32 [ %610, %607 ], [ %637, %676 ]
  %p_j_x11.0 = phi double [ %615, %607 ], [ %644, %676 ]
  %p_j_y12.0 = phi double [ %620, %607 ], [ %652, %676 ]
  %p_j_z13.0 = phi double [ %625, %607 ], [ %660, %676 ]
  %atom214.0 = phi i32 [ %630, %607 ], [ %681, %676 ]
  %exclChecksum.4 = phi i32 [ %exclChecksum.0, %607 ], [ %exclChecksum.6, %676 ]
  %632 = icmp slt i32 %k9.0, %pairlistindex.2
  br i1 %632, label %633, label %682

; <label>:633                                     ; preds = %631
  %634 = add nsw i32 %k9.0, 1
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds i32* %186, i64 %635
  %637 = load i32* %636, align 4
  %638 = fsub double %285, %p_j_x11.0
  %639 = fmul double %638, %638
  %640 = sext i32 %637 to i64
  %641 = getelementptr inbounds %struct.CompAtom* %34, i64 %640
  %642 = getelementptr inbounds %struct.CompAtom* %641, i32 0, i32 0
  %643 = getelementptr inbounds %class.Vector* %642, i32 0, i32 0
  %644 = load double* %643, align 8
  %645 = fsub double %288, %p_j_y12.0
  %646 = fmul double %645, %645
  %647 = fadd double %639, %646
  %648 = sext i32 %637 to i64
  %649 = getelementptr inbounds %struct.CompAtom* %34, i64 %648
  %650 = getelementptr inbounds %struct.CompAtom* %649, i32 0, i32 0
  %651 = getelementptr inbounds %class.Vector* %650, i32 0, i32 1
  %652 = load double* %651, align 8
  %653 = fsub double %291, %p_j_z13.0
  %654 = fmul double %653, %653
  %655 = fadd double %647, %654
  %656 = sext i32 %637 to i64
  %657 = getelementptr inbounds %struct.CompAtom* %34, i64 %656
  %658 = getelementptr inbounds %struct.CompAtom* %657, i32 0, i32 0
  %659 = getelementptr inbounds %class.Vector* %658, i32 0, i32 2
  %660 = load double* %659, align 8
  %661 = fcmp ole double %655, %7
  br i1 %661, label %662, label %676

; <label>:662                                     ; preds = %633
  %663 = fcmp ole double %655, %19
  br i1 %663, label %664, label %667

; <label>:664                                     ; preds = %662
  %665 = add nsw i32 %exclChecksum.4, 1
  %666 = icmp ne i32 %665, 0
  br i1 %666, label %676, label %667

; <label>:667                                     ; preds = %664, %662
  %exclChecksum.5 = phi i32 [ %665, %664 ], [ %exclChecksum.4, %662 ]
  %668 = icmp sge i32 %atom214.0, %275
  br i1 %668, label %669, label %673

; <label>:669                                     ; preds = %667
  %670 = icmp sle i32 %atom214.0, %277
  br i1 %670, label %671, label %673

; <label>:671                                     ; preds = %669
  %672 = getelementptr inbounds i32* %pli3.3, i32 1
  store i32 %j210.0, i32* %pli3.3, align 4
  br label %675

; <label>:673                                     ; preds = %669, %667
  %674 = getelementptr inbounds i32* %plin.3, i32 1
  store i32 %j210.0, i32* %plin.3, align 4
  br label %675

; <label>:675                                     ; preds = %673, %671
  %pli3.4 = phi i32* [ %672, %671 ], [ %pli3.3, %673 ]
  %plin.4 = phi i32* [ %plin.3, %671 ], [ %674, %673 ]
  br label %676

; <label>:676                                     ; preds = %675, %664, %633
  %pli3.5 = phi i32* [ %pli3.3, %664 ], [ %pli3.4, %675 ], [ %pli3.3, %633 ]
  %plin.5 = phi i32* [ %plin.3, %664 ], [ %plin.4, %675 ], [ %plin.3, %633 ]
  %exclChecksum.6 = phi i32 [ %665, %664 ], [ %exclChecksum.5, %675 ], [ %exclChecksum.4, %633 ]
  %677 = sext i32 %637 to i64
  %678 = getelementptr inbounds %struct.CompAtom* %34, i64 %677
  %679 = getelementptr inbounds %struct.CompAtom* %678, i32 0, i32 2
  %680 = load i32* %679, align 4
  %681 = and i32 %680, 4194303
  br label %631

; <label>:682                                     ; preds = %631
  br label %683

; <label>:683                                     ; preds = %682, %605
  %pli3.6 = phi i32* [ %pli3.3, %682 ], [ %200, %605 ]
  %plin.6 = phi i32* [ %plin.3, %682 ], [ %214, %605 ]
  %exclChecksum.7 = phi i32 [ %exclChecksum.4, %682 ], [ %exclChecksum.0, %605 ]
  br label %684

; <label>:684                                     ; preds = %683, %604
  %pli3.7 = phi i32* [ %pli3.0, %604 ], [ %pli3.6, %683 ]
  %plin.7 = phi i32* [ %plin.0, %604 ], [ %plin.6, %683 ]
  %exclChecksum.8 = phi i32 [ %exclChecksum.1, %604 ], [ %exclChecksum.7, %683 ]
  %685 = ptrtoint i32* %pli3.7 to i64
  %686 = ptrtoint i32* %200 to i64
  %687 = sub i64 %685, %686
  %688 = sdiv exact i64 %687, 4
  %689 = trunc i64 %688 to i32
  %690 = icmp ne i32 %689, 0
  br i1 %690, label %691, label %698

; <label>:691                                     ; preds = %684
  %692 = sub nsw i32 %689, 1
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i32* %200, i64 %693
  %695 = load i32* %694, align 4
  %696 = sext i32 %689 to i64
  %697 = getelementptr inbounds i32* %200, i64 %696
  store i32 %695, i32* %697, align 4
  br label %698

; <label>:698                                     ; preds = %691, %684
  br label %699

; <label>:699                                     ; preds = %710, %698
  %plix.0 = phi i32* [ %228, %698 ], [ %708, %710 ]
  %pln.0 = phi i32* [ %214, %698 ], [ %711, %710 ]
  %exclChecksum.9 = phi i32 [ %exclChecksum.8, %698 ], [ %709, %710 ]
  %700 = icmp ult i32* %pln.0, %plin.7
  br i1 %700, label %701, label %704

; <label>:701                                     ; preds = %699
  %702 = load i32* %pln.0, align 4
  %703 = icmp slt i32 %702, %j_hgroup.2
  br label %704

; <label>:704                                     ; preds = %701, %699
  %705 = phi i1 [ false, %699 ], [ %703, %701 ]
  br i1 %705, label %706, label %712

; <label>:706                                     ; preds = %704
  %707 = load i32* %pln.0, align 4
  %708 = getelementptr inbounds i32* %plix.0, i32 1
  store i32 %707, i32* %plix.0, align 4
  %709 = add nsw i32 %exclChecksum.9, -1
  br label %710

; <label>:710                                     ; preds = %706
  %711 = getelementptr inbounds i32* %pln.0, i32 1
  br label %699

; <label>:712                                     ; preds = %704
  br label %713

; <label>:713                                     ; preds = %728, %712
  %plix.1 = phi i32* [ %plix.0, %712 ], [ %726, %728 ]
  %k17.0 = phi i32 [ 0, %712 ], [ %729, %728 ]
  %exclChecksum.10 = phi i32 [ %exclChecksum.9, %712 ], [ %727, %728 ]
  %714 = icmp slt i32 %k17.0, %689
  br i1 %714, label %715, label %720

; <label>:715                                     ; preds = %713
  %716 = sext i32 %k17.0 to i64
  %717 = getelementptr inbounds i32* %200, i64 %716
  %718 = load i32* %717, align 4
  %719 = icmp slt i32 %718, %j_hgroup.2
  br label %720

; <label>:720                                     ; preds = %715, %713
  %721 = phi i1 [ false, %713 ], [ %719, %715 ]
  br i1 %721, label %722, label %730

; <label>:722                                     ; preds = %720
  %723 = sext i32 %k17.0 to i64
  %724 = getelementptr inbounds i32* %200, i64 %723
  %725 = load i32* %724, align 4
  %726 = getelementptr inbounds i32* %plix.1, i32 1
  store i32 %725, i32* %plix.1, align 4
  %727 = add nsw i32 %exclChecksum.10, -1
  br label %728

; <label>:728                                     ; preds = %722
  %729 = add nsw i32 %k17.0, 1
  br label %713

; <label>:730                                     ; preds = %720
  br label %731

; <label>:731                                     ; preds = %753, %730
  %plin.8 = phi i32* [ %plin.7, %730 ], [ %plin.9, %753 ]
  %plix.2 = phi i32* [ %plix.1, %730 ], [ %plix.3, %753 ]
  %plim.0 = phi i32* [ %242, %730 ], [ %plim.1, %753 ]
  %k17.1 = phi i32 [ %k17.0, %730 ], [ %754, %753 ]
  %732 = icmp slt i32 %k17.1, %689
  br i1 %732, label %733, label %755

; <label>:733                                     ; preds = %731
  %734 = sext i32 %k17.1 to i64
  %735 = getelementptr inbounds i32* %200, i64 %734
  %736 = load i32* %735, align 4
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds %struct.CompAtom* %34, i64 %737
  %739 = getelementptr inbounds %struct.CompAtom* %738, i32 0, i32 2
  %740 = load i32* %739, align 4
  %741 = and i32 %740, 4194303
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i8* %282, i64 %742
  %744 = load i8* %743, align 1
  %745 = sext i8 %744 to i32
  switch i32 %745, label %752 [
    i32 0, label %746
    i32 1, label %748
    i32 2, label %750
  ]

; <label>:746                                     ; preds = %733
  %747 = getelementptr inbounds i32* %plin.8, i32 1
  store i32 %736, i32* %plin.8, align 4
  br label %752

; <label>:748                                     ; preds = %733
  %749 = getelementptr inbounds i32* %plix.2, i32 1
  store i32 %736, i32* %plix.2, align 4
  br label %752

; <label>:750                                     ; preds = %733
  %751 = getelementptr inbounds i32* %plim.0, i32 1
  store i32 %736, i32* %plim.0, align 4
  br label %752

; <label>:752                                     ; preds = %750, %748, %746, %733
  %plin.9 = phi i32* [ %plin.8, %733 ], [ %plin.8, %750 ], [ %plin.8, %748 ], [ %747, %746 ]
  %plix.3 = phi i32* [ %plix.2, %733 ], [ %plix.2, %750 ], [ %749, %748 ], [ %plix.2, %746 ]
  %plim.1 = phi i32* [ %plim.0, %733 ], [ %751, %750 ], [ %plim.0, %748 ], [ %plim.0, %746 ]
  br label %753

; <label>:753                                     ; preds = %752
  %754 = add nsw i32 %k17.1, 1
  br label %731

; <label>:755                                     ; preds = %731
  %756 = ptrtoint i32* %plix.2 to i64
  %757 = ptrtoint i32* %228 to i64
  %758 = sub i64 %756, %757
  %759 = sdiv exact i64 %758, 4
  %760 = sext i32 %exclChecksum.10 to i64
  %761 = add nsw i64 %760, %759
  %762 = trunc i64 %761 to i32
  %763 = ptrtoint i32* %plim.0 to i64
  %764 = ptrtoint i32* %242 to i64
  %765 = sub i64 %763, %764
  %766 = sdiv exact i64 %765, 4
  %767 = sext i32 %762 to i64
  %768 = add nsw i64 %767, %766
  %769 = trunc i64 %768 to i32
  %770 = ptrtoint i32* %plin.8 to i64
  %771 = ptrtoint i32* %pln.0 to i64
  %772 = sub i64 %770, %771
  %773 = sdiv exact i64 %772, 4
  %774 = trunc i64 %773 to i32
  br label %775

; <label>:775                                     ; preds = %883, %755
  %k17.2 = phi i32 [ 0, %755 ], [ %884, %883 ]
  %fullElectVirial_zz.1 = phi double [ %fullElectVirial_zz.0, %755 ], [ %876, %883 ]
  %fullElectVirial_yz.1 = phi double [ %fullElectVirial_yz.0, %755 ], [ %867, %883 ]
  %fullElectVirial_yy.1 = phi double [ %fullElectVirial_yy.0, %755 ], [ %865, %883 ]
  %fullElectVirial_xz.1 = phi double [ %fullElectVirial_xz.0, %755 ], [ %856, %883 ]
  %fullElectVirial_xy.1 = phi double [ %fullElectVirial_xy.0, %755 ], [ %854, %883 ]
  %fullElectVirial_xx.1 = phi double [ %fullElectVirial_xx.0, %755 ], [ %852, %883 ]
  %fullElectEnergy.1 = phi double [ %fullElectEnergy.0, %755 ], [ %840, %883 ]
  %776 = icmp slt i32 %k17.2, %774
  br i1 %776, label %777, label %885

; <label>:777                                     ; preds = %775
  %778 = sext i32 %k17.2 to i64
  %779 = getelementptr inbounds i32* %pln.0, i64 %778
  %780 = load i32* %779, align 4
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds %struct.CompAtom* %34, i64 %781
  %783 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 0
  %784 = getelementptr inbounds %class.Vector* %783, i32 0, i32 0
  %785 = load double* %784, align 8
  %786 = fsub double %285, %785
  %787 = fmul double %786, %786
  %788 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 0
  %789 = getelementptr inbounds %class.Vector* %788, i32 0, i32 1
  %790 = load double* %789, align 8
  %791 = fsub double %288, %790
  %792 = fmul double %791, %791
  %793 = fadd double %787, %792
  %794 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 0
  %795 = getelementptr inbounds %class.Vector* %794, i32 0, i32 2
  %796 = load double* %795, align 8
  %797 = fsub double %291, %796
  %798 = fmul double %797, %797
  %799 = fadd double %793, %798
  %800 = fptrunc double %799 to float
  %801 = bitcast %union.anon.40* %r2f to float*
  store float %800, float* %801, align 4
  %802 = bitcast %union.anon.40* %r2f to i32*
  %803 = load i32* %802, align 4
  %804 = ashr i32 %803, 17
  %805 = add nsw i32 %804, %22
  %806 = mul nsw i32 16, %805
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds double* %14, i64 %807
  %809 = getelementptr inbounds double* %808, i64 8
  %810 = getelementptr inbounds double* %809, i64 4
  %811 = getelementptr inbounds double* %810, i64 0
  %812 = load double* %811, align 8
  %813 = bitcast %union.anon.40* %r2f to i32*
  %814 = load i32* %813, align 4
  %815 = and i32 %814, -131072
  store i32 %815, i32* %813, align 4
  %816 = getelementptr inbounds %struct.CompAtom* %782, i32 0, i32 1
  %817 = load float* %816, align 4
  %818 = fpext float %817 to double
  %819 = fmul double %535, %818
  %820 = bitcast %union.anon.40* %r2f to float*
  %821 = load float* %820, align 4
  %822 = fpext float %821 to double
  %823 = fsub double %799, %822
  %824 = getelementptr inbounds double* %810, i64 1
  %825 = load double* %824, align 8
  %826 = getelementptr inbounds double* %810, i64 2
  %827 = load double* %826, align 8
  %828 = getelementptr inbounds double* %810, i64 3
  %829 = load double* %828, align 8
  %830 = fmul double %829, %819
  %831 = fmul double %827, %819
  %832 = fmul double %825, %819
  %833 = fmul double %812, %819
  %834 = fmul double %823, %830
  %835 = fadd double %834, %831
  %836 = fmul double %835, %823
  %837 = fadd double %836, %832
  %838 = fmul double %837, %823
  %839 = fadd double %838, %833
  %840 = fadd double %fullElectEnergy.1, %839
  %841 = fmul double 3.000000e+00, %823
  %842 = fmul double %841, %830
  %843 = fmul double 2.000000e+00, %831
  %844 = fadd double %842, %843
  %845 = fmul double %844, %823
  %846 = fadd double %845, %832
  %847 = fmul double -2.000000e+00, %846
  %848 = sext i32 %780 to i64
  %849 = getelementptr inbounds %class.Vector* %248, i64 %848
  %850 = fmul double %847, %786
  %851 = fmul double %850, %786
  %852 = fadd double %fullElectVirial_xx.1, %851
  %853 = fmul double %850, %791
  %854 = fadd double %fullElectVirial_xy.1, %853
  %855 = fmul double %850, %797
  %856 = fadd double %fullElectVirial_xz.1, %855
  %857 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %858 = load double* %857, align 8
  %859 = fadd double %858, %850
  store double %859, double* %857, align 8
  %860 = getelementptr inbounds %class.Vector* %849, i32 0, i32 0
  %861 = load double* %860, align 8
  %862 = fsub double %861, %850
  store double %862, double* %860, align 8
  %863 = fmul double %847, %791
  %864 = fmul double %863, %791
  %865 = fadd double %fullElectVirial_yy.1, %864
  %866 = fmul double %863, %797
  %867 = fadd double %fullElectVirial_yz.1, %866
  %868 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %869 = load double* %868, align 8
  %870 = fadd double %869, %863
  store double %870, double* %868, align 8
  %871 = getelementptr inbounds %class.Vector* %849, i32 0, i32 1
  %872 = load double* %871, align 8
  %873 = fsub double %872, %863
  store double %873, double* %871, align 8
  %874 = fmul double %847, %797
  %875 = fmul double %874, %797
  %876 = fadd double %fullElectVirial_zz.1, %875
  %877 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %878 = load double* %877, align 8
  %879 = fadd double %878, %874
  store double %879, double* %877, align 8
  %880 = getelementptr inbounds %class.Vector* %849, i32 0, i32 2
  %881 = load double* %880, align 8
  %882 = fsub double %881, %874
  store double %882, double* %880, align 8
  br label %883

; <label>:883                                     ; preds = %777
  %884 = add nsw i32 %k17.2, 1
  br label %775

; <label>:885                                     ; preds = %775
  %886 = ptrtoint i32* %plim.0 to i64
  %887 = ptrtoint i32* %242 to i64
  %888 = sub i64 %886, %887
  %889 = sdiv exact i64 %888, 4
  %890 = trunc i64 %889 to i32
  br label %891

; <label>:891                                     ; preds = %1018, %885
  %k17.3 = phi i32 [ 0, %885 ], [ %1019, %1018 ]
  %fullElectVirial_zz.2 = phi double [ %fullElectVirial_zz.1, %885 ], [ %1011, %1018 ]
  %fullElectVirial_yz.2 = phi double [ %fullElectVirial_yz.1, %885 ], [ %1002, %1018 ]
  %fullElectVirial_yy.2 = phi double [ %fullElectVirial_yy.1, %885 ], [ %1000, %1018 ]
  %fullElectVirial_xz.2 = phi double [ %fullElectVirial_xz.1, %885 ], [ %991, %1018 ]
  %fullElectVirial_xy.2 = phi double [ %fullElectVirial_xy.1, %885 ], [ %989, %1018 ]
  %fullElectVirial_xx.2 = phi double [ %fullElectVirial_xx.1, %885 ], [ %987, %1018 ]
  %fullElectEnergy.2 = phi double [ %fullElectEnergy.1, %885 ], [ %975, %1018 ]
  %892 = icmp slt i32 %k17.3, %890
  br i1 %892, label %893, label %1020

; <label>:893                                     ; preds = %891
  %894 = sext i32 %k17.3 to i64
  %895 = getelementptr inbounds i32* %242, i64 %894
  %896 = load i32* %895, align 4
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds %struct.CompAtom* %34, i64 %897
  %899 = getelementptr inbounds %struct.CompAtom* %898, i32 0, i32 0
  %900 = getelementptr inbounds %class.Vector* %899, i32 0, i32 0
  %901 = load double* %900, align 8
  %902 = fsub double %285, %901
  %903 = fmul double %902, %902
  %904 = getelementptr inbounds %struct.CompAtom* %898, i32 0, i32 0
  %905 = getelementptr inbounds %class.Vector* %904, i32 0, i32 1
  %906 = load double* %905, align 8
  %907 = fsub double %288, %906
  %908 = fmul double %907, %907
  %909 = fadd double %903, %908
  %910 = getelementptr inbounds %struct.CompAtom* %898, i32 0, i32 0
  %911 = getelementptr inbounds %class.Vector* %910, i32 0, i32 2
  %912 = load double* %911, align 8
  %913 = fsub double %291, %912
  %914 = fmul double %913, %913
  %915 = fadd double %909, %914
  %916 = fptrunc double %915 to float
  %917 = bitcast %union.anon.41* %r2f28 to float*
  store float %916, float* %917, align 4
  %918 = bitcast %union.anon.41* %r2f28 to i32*
  %919 = load i32* %918, align 4
  %920 = ashr i32 %919, 17
  %921 = add nsw i32 %920, %22
  %922 = mul nsw i32 16, %921
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds double* %14, i64 %923
  %925 = getelementptr inbounds double* %924, i64 8
  %926 = getelementptr inbounds double* %925, i64 4
  %927 = getelementptr inbounds double* %926, i64 0
  %928 = load double* %927, align 8
  %929 = bitcast %union.anon.41* %r2f28 to i32*
  %930 = load i32* %929, align 4
  %931 = and i32 %930, -131072
  store i32 %931, i32* %929, align 4
  %932 = getelementptr inbounds %struct.CompAtom* %898, i32 0, i32 1
  %933 = load float* %932, align 4
  %934 = fpext float %933 to double
  %935 = fmul double %535, %934
  %936 = bitcast %union.anon.41* %r2f28 to float*
  %937 = load float* %936, align 4
  %938 = fpext float %937 to double
  %939 = fsub double %915, %938
  %940 = getelementptr inbounds double* %926, i64 1
  %941 = load double* %940, align 8
  %942 = getelementptr inbounds double* %926, i64 2
  %943 = load double* %942, align 8
  %944 = getelementptr inbounds double* %926, i64 3
  %945 = load double* %944, align 8
  %946 = mul nsw i32 4, %921
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds double* %15, i64 %947
  %949 = getelementptr inbounds double* %948, i64 0
  %950 = load double* %949, align 8
  %951 = fmul double %18, %950
  %952 = fsub double %928, %951
  %953 = getelementptr inbounds double* %948, i64 1
  %954 = load double* %953, align 8
  %955 = fmul double %18, %954
  %956 = fsub double %941, %955
  %957 = getelementptr inbounds double* %948, i64 2
  %958 = load double* %957, align 8
  %959 = fmul double %18, %958
  %960 = fsub double %943, %959
  %961 = getelementptr inbounds double* %948, i64 3
  %962 = load double* %961, align 8
  %963 = fmul double %18, %962
  %964 = fsub double %945, %963
  %965 = fmul double %964, %935
  %966 = fmul double %960, %935
  %967 = fmul double %956, %935
  %968 = fmul double %952, %935
  %969 = fmul double %939, %965
  %970 = fadd double %969, %966
  %971 = fmul double %970, %939
  %972 = fadd double %971, %967
  %973 = fmul double %972, %939
  %974 = fadd double %973, %968
  %975 = fadd double %fullElectEnergy.2, %974
  %976 = fmul double 3.000000e+00, %939
  %977 = fmul double %976, %965
  %978 = fmul double 2.000000e+00, %966
  %979 = fadd double %977, %978
  %980 = fmul double %979, %939
  %981 = fadd double %980, %967
  %982 = fmul double -2.000000e+00, %981
  %983 = sext i32 %896 to i64
  %984 = getelementptr inbounds %class.Vector* %248, i64 %983
  %985 = fmul double %982, %902
  %986 = fmul double %985, %902
  %987 = fadd double %fullElectVirial_xx.2, %986
  %988 = fmul double %985, %907
  %989 = fadd double %fullElectVirial_xy.2, %988
  %990 = fmul double %985, %913
  %991 = fadd double %fullElectVirial_xz.2, %990
  %992 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %993 = load double* %992, align 8
  %994 = fadd double %993, %985
  store double %994, double* %992, align 8
  %995 = getelementptr inbounds %class.Vector* %984, i32 0, i32 0
  %996 = load double* %995, align 8
  %997 = fsub double %996, %985
  store double %997, double* %995, align 8
  %998 = fmul double %982, %907
  %999 = fmul double %998, %907
  %1000 = fadd double %fullElectVirial_yy.2, %999
  %1001 = fmul double %998, %913
  %1002 = fadd double %fullElectVirial_yz.2, %1001
  %1003 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1004 = load double* %1003, align 8
  %1005 = fadd double %1004, %998
  store double %1005, double* %1003, align 8
  %1006 = getelementptr inbounds %class.Vector* %984, i32 0, i32 1
  %1007 = load double* %1006, align 8
  %1008 = fsub double %1007, %998
  store double %1008, double* %1006, align 8
  %1009 = fmul double %982, %913
  %1010 = fmul double %1009, %913
  %1011 = fadd double %fullElectVirial_zz.2, %1010
  %1012 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1013 = load double* %1012, align 8
  %1014 = fadd double %1013, %1009
  store double %1014, double* %1012, align 8
  %1015 = getelementptr inbounds %class.Vector* %984, i32 0, i32 2
  %1016 = load double* %1015, align 8
  %1017 = fsub double %1016, %1009
  store double %1017, double* %1015, align 8
  br label %1018

; <label>:1018                                    ; preds = %893
  %1019 = add nsw i32 %k17.3, 1
  br label %891

; <label>:1020                                    ; preds = %891
  %1021 = ptrtoint i32* %plix.2 to i64
  %1022 = ptrtoint i32* %228 to i64
  %1023 = sub i64 %1021, %1022
  %1024 = sdiv exact i64 %1023, 4
  %1025 = trunc i64 %1024 to i32
  br label %1026

; <label>:1026                                    ; preds = %1149, %1020
  %k17.4 = phi i32 [ 0, %1020 ], [ %1150, %1149 ]
  %fullElectVirial_zz.3 = phi double [ %fullElectVirial_zz.2, %1020 ], [ %1142, %1149 ]
  %fullElectVirial_yz.3 = phi double [ %fullElectVirial_yz.2, %1020 ], [ %1133, %1149 ]
  %fullElectVirial_yy.3 = phi double [ %fullElectVirial_yy.2, %1020 ], [ %1131, %1149 ]
  %fullElectVirial_xz.3 = phi double [ %fullElectVirial_xz.2, %1020 ], [ %1122, %1149 ]
  %fullElectVirial_xy.3 = phi double [ %fullElectVirial_xy.2, %1020 ], [ %1120, %1149 ]
  %fullElectVirial_xx.3 = phi double [ %fullElectVirial_xx.2, %1020 ], [ %1118, %1149 ]
  %fullElectEnergy.3 = phi double [ %fullElectEnergy.2, %1020 ], [ %1106, %1149 ]
  %1027 = icmp slt i32 %k17.4, %1025
  br i1 %1027, label %1028, label %1151

; <label>:1028                                    ; preds = %1026
  %1029 = sext i32 %k17.4 to i64
  %1030 = getelementptr inbounds i32* %228, i64 %1029
  %1031 = load i32* %1030, align 4
  %1032 = sext i32 %1031 to i64
  %1033 = getelementptr inbounds %struct.CompAtom* %34, i64 %1032
  %1034 = getelementptr inbounds %struct.CompAtom* %1033, i32 0, i32 0
  %1035 = getelementptr inbounds %class.Vector* %1034, i32 0, i32 0
  %1036 = load double* %1035, align 8
  %1037 = fsub double %285, %1036
  %1038 = fmul double %1037, %1037
  %1039 = getelementptr inbounds %struct.CompAtom* %1033, i32 0, i32 0
  %1040 = getelementptr inbounds %class.Vector* %1039, i32 0, i32 1
  %1041 = load double* %1040, align 8
  %1042 = fsub double %288, %1041
  %1043 = fmul double %1042, %1042
  %1044 = fadd double %1038, %1043
  %1045 = getelementptr inbounds %struct.CompAtom* %1033, i32 0, i32 0
  %1046 = getelementptr inbounds %class.Vector* %1045, i32 0, i32 2
  %1047 = load double* %1046, align 8
  %1048 = fsub double %291, %1047
  %1049 = fmul double %1048, %1048
  %1050 = fadd double %1044, %1049
  %1051 = fptrunc double %1050 to float
  %1052 = bitcast %union.anon.42* %r2f50 to float*
  store float %1051, float* %1052, align 4
  %1053 = bitcast %union.anon.42* %r2f50 to i32*
  %1054 = load i32* %1053, align 4
  %1055 = ashr i32 %1054, 17
  %1056 = add nsw i32 %1055, %22
  %1057 = mul nsw i32 16, %1056
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds double* %14, i64 %1058
  %1060 = getelementptr inbounds double* %1059, i64 8
  %1061 = getelementptr inbounds double* %1060, i64 4
  %1062 = getelementptr inbounds double* %1061, i64 0
  %1063 = load double* %1062, align 8
  %1064 = bitcast %union.anon.42* %r2f50 to i32*
  %1065 = load i32* %1064, align 4
  %1066 = and i32 %1065, -131072
  store i32 %1066, i32* %1064, align 4
  %1067 = getelementptr inbounds %struct.CompAtom* %1033, i32 0, i32 1
  %1068 = load float* %1067, align 4
  %1069 = fpext float %1068 to double
  %1070 = fmul double %535, %1069
  %1071 = bitcast %union.anon.42* %r2f50 to float*
  %1072 = load float* %1071, align 4
  %1073 = fpext float %1072 to double
  %1074 = fsub double %1050, %1073
  %1075 = getelementptr inbounds double* %1061, i64 1
  %1076 = load double* %1075, align 8
  %1077 = getelementptr inbounds double* %1061, i64 2
  %1078 = load double* %1077, align 8
  %1079 = getelementptr inbounds double* %1061, i64 3
  %1080 = load double* %1079, align 8
  %1081 = mul nsw i32 4, %1056
  %1082 = sext i32 %1081 to i64
  %1083 = getelementptr inbounds double* %15, i64 %1082
  %1084 = getelementptr inbounds double* %1083, i64 0
  %1085 = load double* %1084, align 8
  %1086 = fsub double %1063, %1085
  %1087 = getelementptr inbounds double* %1083, i64 1
  %1088 = load double* %1087, align 8
  %1089 = fsub double %1076, %1088
  %1090 = getelementptr inbounds double* %1083, i64 2
  %1091 = load double* %1090, align 8
  %1092 = fsub double %1078, %1091
  %1093 = getelementptr inbounds double* %1083, i64 3
  %1094 = load double* %1093, align 8
  %1095 = fsub double %1080, %1094
  %1096 = fmul double %1095, %1070
  %1097 = fmul double %1092, %1070
  %1098 = fmul double %1089, %1070
  %1099 = fmul double %1086, %1070
  %1100 = fmul double %1074, %1096
  %1101 = fadd double %1100, %1097
  %1102 = fmul double %1101, %1074
  %1103 = fadd double %1102, %1098
  %1104 = fmul double %1103, %1074
  %1105 = fadd double %1104, %1099
  %1106 = fadd double %fullElectEnergy.3, %1105
  %1107 = fmul double 3.000000e+00, %1074
  %1108 = fmul double %1107, %1096
  %1109 = fmul double 2.000000e+00, %1097
  %1110 = fadd double %1108, %1109
  %1111 = fmul double %1110, %1074
  %1112 = fadd double %1111, %1098
  %1113 = fmul double -2.000000e+00, %1112
  %1114 = sext i32 %1031 to i64
  %1115 = getelementptr inbounds %class.Vector* %248, i64 %1114
  %1116 = fmul double %1113, %1037
  %1117 = fmul double %1116, %1037
  %1118 = fadd double %fullElectVirial_xx.3, %1117
  %1119 = fmul double %1116, %1042
  %1120 = fadd double %fullElectVirial_xy.3, %1119
  %1121 = fmul double %1116, %1048
  %1122 = fadd double %fullElectVirial_xz.3, %1121
  %1123 = getelementptr inbounds %class.Vector* %293, i32 0, i32 0
  %1124 = load double* %1123, align 8
  %1125 = fadd double %1124, %1116
  store double %1125, double* %1123, align 8
  %1126 = getelementptr inbounds %class.Vector* %1115, i32 0, i32 0
  %1127 = load double* %1126, align 8
  %1128 = fsub double %1127, %1116
  store double %1128, double* %1126, align 8
  %1129 = fmul double %1113, %1042
  %1130 = fmul double %1129, %1042
  %1131 = fadd double %fullElectVirial_yy.3, %1130
  %1132 = fmul double %1129, %1048
  %1133 = fadd double %fullElectVirial_yz.3, %1132
  %1134 = getelementptr inbounds %class.Vector* %293, i32 0, i32 1
  %1135 = load double* %1134, align 8
  %1136 = fadd double %1135, %1129
  store double %1136, double* %1134, align 8
  %1137 = getelementptr inbounds %class.Vector* %1115, i32 0, i32 1
  %1138 = load double* %1137, align 8
  %1139 = fsub double %1138, %1129
  store double %1139, double* %1137, align 8
  %1140 = fmul double %1113, %1048
  %1141 = fmul double %1140, %1048
  %1142 = fadd double %fullElectVirial_zz.3, %1141
  %1143 = getelementptr inbounds %class.Vector* %293, i32 0, i32 2
  %1144 = load double* %1143, align 8
  %1145 = fadd double %1144, %1140
  store double %1145, double* %1143, align 8
  %1146 = getelementptr inbounds %class.Vector* %1115, i32 0, i32 2
  %1147 = load double* %1146, align 8
  %1148 = fsub double %1147, %1140
  store double %1148, double* %1146, align 8
  br label %1149

; <label>:1149                                    ; preds = %1028
  %1150 = add nsw i32 %k17.4, 1
  br label %1026

; <label>:1151                                    ; preds = %1026
  br label %1152

; <label>:1152                                    ; preds = %1151, %327
  %pairlistoffset.2 = phi i32 [ %pairlistoffset.0, %327 ], [ %pairlistoffset.1, %1151 ]
  %pairlistindex.3 = phi i32 [ %pairlistindex.0, %327 ], [ %pairlistindex.2, %1151 ]
  %fixg_lower.4 = phi i32 [ %fixg_lower.0, %327 ], [ %fixg_lower.3, %1151 ]
  %g_lower.4 = phi i32 [ %g_lower.0, %327 ], [ %g_lower.3, %1151 ]
  %j_hgroup.3 = phi i32 [ %j_hgroup.0, %327 ], [ %j_hgroup.2, %1151 ]
  %pairCount.3 = phi i32 [ %323, %327 ], [ %pairCount.2, %1151 ]
  %i.1 = phi i32 [ %329, %327 ], [ %i.0, %1151 ]
  %fullElectVirial_zz.4 = phi double [ %fullElectVirial_zz.0, %327 ], [ %fullElectVirial_zz.3, %1151 ]
  %fullElectVirial_yz.4 = phi double [ %fullElectVirial_yz.0, %327 ], [ %fullElectVirial_yz.3, %1151 ]
  %fullElectVirial_yy.4 = phi double [ %fullElectVirial_yy.0, %327 ], [ %fullElectVirial_yy.3, %1151 ]
  %fullElectVirial_xz.4 = phi double [ %fullElectVirial_xz.0, %327 ], [ %fullElectVirial_xz.3, %1151 ]
  %fullElectVirial_xy.4 = phi double [ %fullElectVirial_xy.0, %327 ], [ %fullElectVirial_xy.3, %1151 ]
  %fullElectVirial_xx.4 = phi double [ %fullElectVirial_xx.0, %327 ], [ %fullElectVirial_xx.3, %1151 ]
  %fullElectEnergy.4 = phi double [ %fullElectEnergy.0, %327 ], [ %fullElectEnergy.3, %1151 ]
  %exclChecksum.11 = phi i32 [ %exclChecksum.0, %327 ], [ %769, %1151 ]
  %1153 = add nsw i32 %i.1, 1
  br label %264

; <label>:1154                                    ; preds = %264
  %1155 = getelementptr inbounds [1005 x i32]* %grouplist_std, i32 0, i32 0
  %1156 = icmp ne i32* %48, %1155
  br i1 %1156, label %1157, label %1162

; <label>:1157                                    ; preds = %1154
  %1158 = icmp eq i32* %48, null
  br i1 %1158, label %1161, label %1159

; <label>:1159                                    ; preds = %1157
  %1160 = bitcast i32* %48 to i8*
  call void @_ZdaPv(i8* %1160) #8
  br label %1161

; <label>:1161                                    ; preds = %1159, %1157
  br label %1162

; <label>:1162                                    ; preds = %1161, %1154
  %1163 = getelementptr inbounds [1005 x i32]* %fixglist_std, i32 0, i32 0
  %1164 = icmp ne i32* %62, %1163
  br i1 %1164, label %1165, label %1170

; <label>:1165                                    ; preds = %1162
  %1166 = icmp eq i32* %62, null
  br i1 %1166, label %1169, label %1167

; <label>:1167                                    ; preds = %1165
  %1168 = bitcast i32* %62 to i8*
  call void @_ZdaPv(i8* %1168) #8
  br label %1169

; <label>:1169                                    ; preds = %1167, %1165
  br label %1170

; <label>:1170                                    ; preds = %1169, %1162
  %1171 = getelementptr inbounds [1005 x i32]* %goodglist_std, i32 0, i32 0
  %1172 = icmp ne i32* %76, %1171
  br i1 %1172, label %1173, label %1178

; <label>:1173                                    ; preds = %1170
  %1174 = icmp eq i32* %76, null
  br i1 %1174, label %1177, label %1175

; <label>:1175                                    ; preds = %1173
  %1176 = bitcast i32* %76 to i8*
  call void @_ZdaPv(i8* %1176) #8
  br label %1177

; <label>:1177                                    ; preds = %1175, %1173
  br label %1178

; <label>:1178                                    ; preds = %1177, %1170
  %1179 = getelementptr inbounds [1005 x i32]* %pairlist_std, i32 0, i32 0
  %1180 = icmp ne i32* %186, %1179
  br i1 %1180, label %1181, label %1186

; <label>:1181                                    ; preds = %1178
  %1182 = icmp eq i32* %186, null
  br i1 %1182, label %1185, label %1183

; <label>:1183                                    ; preds = %1181
  %1184 = bitcast i32* %186 to i8*
  call void @_ZdaPv(i8* %1184) #8
  br label %1185

; <label>:1185                                    ; preds = %1183, %1181
  br label %1186

; <label>:1186                                    ; preds = %1185, %1178
  %1187 = getelementptr inbounds [1005 x i32]* %pairlist2_std, i32 0, i32 0
  %1188 = icmp ne i32* %200, %1187
  br i1 %1188, label %1189, label %1194

; <label>:1189                                    ; preds = %1186
  %1190 = icmp eq i32* %200, null
  br i1 %1190, label %1193, label %1191

; <label>:1191                                    ; preds = %1189
  %1192 = bitcast i32* %200 to i8*
  call void @_ZdaPv(i8* %1192) #8
  br label %1193

; <label>:1193                                    ; preds = %1191, %1189
  br label %1194

; <label>:1194                                    ; preds = %1193, %1186
  %1195 = getelementptr inbounds [1005 x i32]* %pairlistn_std, i32 0, i32 0
  %1196 = icmp ne i32* %214, %1195
  br i1 %1196, label %1197, label %1202

; <label>:1197                                    ; preds = %1194
  %1198 = icmp eq i32* %214, null
  br i1 %1198, label %1201, label %1199

; <label>:1199                                    ; preds = %1197
  %1200 = bitcast i32* %214 to i8*
  call void @_ZdaPv(i8* %1200) #8
  br label %1201

; <label>:1201                                    ; preds = %1199, %1197
  br label %1202

; <label>:1202                                    ; preds = %1201, %1194
  %1203 = getelementptr inbounds [1005 x i32]* %pairlistx_std, i32 0, i32 0
  %1204 = icmp ne i32* %228, %1203
  br i1 %1204, label %1205, label %1210

; <label>:1205                                    ; preds = %1202
  %1206 = icmp eq i32* %228, null
  br i1 %1206, label %1209, label %1207

; <label>:1207                                    ; preds = %1205
  %1208 = bitcast i32* %228 to i8*
  call void @_ZdaPv(i8* %1208) #8
  br label %1209

; <label>:1209                                    ; preds = %1207, %1205
  br label %1210

; <label>:1210                                    ; preds = %1209, %1202
  %1211 = getelementptr inbounds [1005 x i32]* %pairlistm_std, i32 0, i32 0
  %1212 = icmp ne i32* %242, %1211
  br i1 %1212, label %1213, label %1218

; <label>:1213                                    ; preds = %1210
  %1214 = icmp eq i32* %242, null
  br i1 %1214, label %1217, label %1215

; <label>:1215                                    ; preds = %1213
  %1216 = bitcast i32* %242 to i8*
  call void @_ZdaPv(i8* %1216) #8
  br label %1217

; <label>:1217                                    ; preds = %1215, %1213
  br label %1218

; <label>:1218                                    ; preds = %1217, %1210
  %1219 = sitofp i32 %exclChecksum.0 to double
  %1220 = getelementptr inbounds double* %6, i64 22
  %1221 = load double* %1220, align 8
  %1222 = fadd double %1221, %1219
  store double %1222, double* %1220, align 8
  %1223 = getelementptr inbounds double* %6, i64 1
  %1224 = load double* %1223, align 8
  %1225 = fadd double %1224, %fullElectEnergy.0
  store double %1225, double* %1223, align 8
  %1226 = getelementptr inbounds double* %6, i64 12
  %1227 = load double* %1226, align 8
  %1228 = fadd double %1227, %fullElectVirial_xx.0
  store double %1228, double* %1226, align 8
  %1229 = getelementptr inbounds double* %6, i64 13
  %1230 = load double* %1229, align 8
  %1231 = fadd double %1230, %fullElectVirial_xy.0
  store double %1231, double* %1229, align 8
  %1232 = getelementptr inbounds double* %6, i64 14
  %1233 = load double* %1232, align 8
  %1234 = fadd double %1233, %fullElectVirial_xz.0
  store double %1234, double* %1232, align 8
  %1235 = getelementptr inbounds double* %6, i64 15
  %1236 = load double* %1235, align 8
  %1237 = fadd double %1236, %fullElectVirial_xy.0
  store double %1237, double* %1235, align 8
  %1238 = getelementptr inbounds double* %6, i64 16
  %1239 = load double* %1238, align 8
  %1240 = fadd double %1239, %fullElectVirial_yy.0
  store double %1240, double* %1238, align 8
  %1241 = getelementptr inbounds double* %6, i64 17
  %1242 = load double* %1241, align 8
  %1243 = fadd double %1242, %fullElectVirial_yz.0
  store double %1243, double* %1241, align 8
  %1244 = getelementptr inbounds double* %6, i64 18
  %1245 = load double* %1244, align 8
  %1246 = fadd double %1245, %fullElectVirial_xz.0
  store double %1246, double* %1244, align 8
  %1247 = getelementptr inbounds double* %6, i64 19
  %1248 = load double* %1247, align 8
  %1249 = fadd double %1248, %fullElectVirial_yz.0
  store double %1249, double* %1247, align 8
  %1250 = getelementptr inbounds double* %6, i64 20
  %1251 = load double* %1250, align 8
  %1252 = fadd double %1251, %fullElectVirial_zz.0
  store double %1252, double* %1250, align 8
  br label %1253

; <label>:1253                                    ; preds = %1218, %161, %3
  ret void
}

declare void @_Z8NAMD_diePKc(i8*) #4

; Function Attrs: nounwind
declare double @sqrt(double) #5

; Function Attrs: nounwind
declare double @erfc(double) #5

; Function Attrs: nounwind
declare double @exp(double) #5

; Function Attrs: nounwind readnone
declare double @fabs(double) #6

; Function Attrs: nounwind uwtable
define linkonce_odr %class.ExclusionCheck* @_ZNK8Molecule23get_excl_check_for_atomEi(%class.Molecule* %this, i32 %anum) #7 align 2 {
  %1 = sext i32 %anum to i64
  %2 = getelementptr inbounds %class.Molecule* %this, i32 0, i32 1
  %3 = load %class.ExclusionCheck** %2, align 8
  %4 = getelementptr inbounds %class.ExclusionCheck* %3, i64 %1
  ret %class.ExclusionCheck* %4
}

; Function Attrs: nounwind uwtable
define linkonce_odr %"struct.LJTable::TableEntry"* @_ZNK7LJTable9table_rowEj(%class.LJTable* %this, i32 %i) #7 align 2 {
  %1 = getelementptr inbounds %class.LJTable* %this, i32 0, i32 1
  %2 = load %"struct.LJTable::TableEntry"** %1, align 8
  %3 = getelementptr inbounds %class.LJTable* %this, i32 0, i32 2
  %4 = load i32* %3, align 4
  %5 = mul i32 %i, %4
  %6 = mul i32 2, %5
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %"struct.LJTable::TableEntry"* %2, i64 %7
  ret %"struct.LJTable::TableEntry"* %8
}

; Function Attrs: nounwind uwtable
define linkonce_odr zeroext i16 @_ZNK8Molecule11atomvdwtypeEi(%class.Molecule* %this, i32 %anum) #7 align 2 {
  %1 = sext i32 %anum to i64
  %2 = getelementptr inbounds %class.Molecule* %this, i32 0, i32 4
  %3 = load i32** %2, align 8
  %4 = getelementptr inbounds i32* %3, i64 %1
  %5 = load i32* %4, align 4
  %6 = trunc i32 %5 to i16
  ret i16 %6
}

attributes #0 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }
attributes #9 = { builtin }
attributes #10 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.6.2 (tags/RELEASE_362/final)"}
